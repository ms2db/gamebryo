<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Instancing Renderer Support</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<h1>Instancing Render Support</h1>

<p>Not all platforms have support for hardware instancing 
 and of those that do have a unique set of requirements. This results 
 in each platform's renderer having a slightly different implementation. 
 The APIs for 
 using hardware instancing hide many of the underlying platform specific 
 details. To help give users a better understanding of how instancing works 
 for a given platform, all of the platforms that Gamebryo has hardware instancing support for are described below.</p>

<h2>General:</h2>

<p>When an instanced mesh is rendered, all vertex buffer 
 streams will have a 'function' and a 'frequency' to be used with that 
 stream. The 'function' will be either divided (/) or moduloed 
 (%) by the frequency The 'frequency' is the number of indices that exist 
 in the original mesh. The function and frequency are used with the indices 
 stored in the index buffer to compute the indices that will be used for 
 obtaining vertex component data. So for each index in the index buffer 
 the following equation will be evaluated per vertex stream:</p>

<p><span class="NDLSystemFont">NewIndex =OriginalIndex (function) frequency</span></p>

<p>where function is either divided (/) or modulo 
 (%) and frequency is the number of indices in the index buffer. Since 
 this equation is computed for each index on a per vertex stream basis 
 it is possible to access different components of the vertex data at separate 
 rates. When hardware instancing is enabled on a mesh, a transform data 
 stream is created along with associated transform components that are 
 added to the vertex structure. The transform stream will use the divide 
 function while all other vertex streams will use the modulo
 function. This allows a single transform in the transform data stream 
 to be accessed 'frequency' times before moving on to the next transform. 
 Since frequency represents the number of indices in the mesh, this means 
 if the indices are iterated over multiple times we can render a single 
 piece of geometry with different transforms, creating instanced geometry.</p>

<h2>DX9 / D3D10 / D3D11</h2>

<p>The DX9, D3D10, and D3D11 renderers implement 
 instancing support in a similar fashion. The D3D renderers have 
 the simplest instancing requirements and implementation. It is required 
 that the transform data be stored in a separate data vertex buffer stream. 
 Before a mesh is rendered the number of required iterations over the index 
 data is specified (the number of instances) and along with specifying 
 the rate at which each stream should be accessed. No extra data outside 
 of the transform stream is required. </p>

<h2>PS3</h2>
<p>Please see <a href="../../ee_goto.htm#Programmer/NiMesh/Instancing_Renderer_Support_PS3.htm">Instancing Renderer Support for Playstation 3</a>. </p>

<h2>Xbox 360</h2>
<p>Please see <a href="../../ee_goto.htm#Programmer/NiMesh/Instancing_Renderer_Support_Xbox360.htm">Instancing Renderer Support for Xbox 360</a>. </p>
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
