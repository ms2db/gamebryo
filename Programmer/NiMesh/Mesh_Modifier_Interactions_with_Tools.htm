<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Mesh Modifier Interactions with Tools</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Mesh Modifier Interactions with Tools</h1>

<p>The NiMesh system provides users with enormous flexibility in
the choice of data streams on a mesh, and the formatting and
other properties of those streams. However, the mesh modifier
system requires particular data streams on a mesh and may pose
constraints on the formatting and layout of that data. For
example, a mesh that is to be skinned must have bone partition
data in a specific format.</p>

<p>The Gamebryo tool chain makes every effort to warn users of
potential conflicts between modifiers and the chosen data layout
on a mesh. Mesh modifier classes are required to implement some
query functions to support the warning system, and to enable
graceful failure in the case of problems.</p>

<h2>Error Checking at Run-time</h2>

<p>The <span class="NDLSystemFont"><a href=
"../../Reference/NiMesh/NiMeshModifier.htm#Querying_Requirements">
NiMeshModifier::AreRequirementsMet</a></span> function is used to
validate a modifier before it is attached to the mesh. The
function, which must be implemented by all modifiers, should
check the data streams on the mesh against the requirements for
the modifier execution. It is guaranteed that the mesh is in the
final state ready for modifier execution, so any incompatibility
between the mesh and the modifier should be reported at this
stage - there is no reason to wait for any later execution point
to check for errors.</p>

<h2>Obtaining Requirements for a Modifier</h2>

<p>Arts tools request the requirements of a modifier when they
are trying to reconcile various formatting requests for a mesh.
All modifiers must implement the <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMesh/NiMeshModifier.htm#Querying_Requirements">
NiMeshModifier::RetrieveRequirements</a></span> function, which
is intended to populate a <span class="NDLSystemFont"><a href=
"../../Reference/NiMesh/NiMeshRequirements.htm">NiMeshRequirements</a></span>
object with a detailed description of the data streams that the
mesh modifier requires to function. The set of requirements
returned should be sufficiently complete to avoid run-time errors
when the modifier is attached to a mesh, yet broad enough to
accommodate any valid mesh.</p>

<p>In the final topic of this section, we discuss <a href=
"Creating_a_Custom_Mesh_Modifier.htm">Creating a Custom Mesh
Modifier</a>.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
