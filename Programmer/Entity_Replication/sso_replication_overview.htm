<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Replication Overview</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="FSO" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>

<!--(Begin Body)================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Replication Overview</h1>

<p>In Gamebryo LightSpeed, replication is the process of transferring entity state from the
simulator that owns the entity to all other simulators that have expressed an interest in the
entity. Each entity is owned by a single simulator. Each simulator is responsible for running
behaviors on and maintaining the authoritative property values of all the entities that it owns.
The property data of an owned entity can be directly read or written by the process running that
simulator (normally by other locally-owned entities), but other simulators in other processes will
also need to access some of that entity state as well. Using interest management and replication
group policies, the remote simulators can request that chosen properties of chosen entities are
automatically cached in the local process and automatically kept up to date.</p>

<p>LightSpeed's replication system is based on a push-based approach to distributed entity
iteration. It reduces latency on a property value to a single network hop as opposed to a
query-based approach that would have twice that latency. The application writer is required to
register and update interest in remote entities ahead of time to take advantage of this capability.
Each time a property changes, it can be pushed to all subscribed consumers. The bandwidth consumed
by optimistically pushing this data can be controlled through replication policies and predictive
contracts.</p>

<p>The replication system typically only sends updates for dirty properties. This further reduces bandwidth
costs. Consequently, when interest changes occur, full entity snapshots are sent so that
incremental changes of dirty properties have a place to start. As interests change, entities enter
and leave the interest of a process. As this happens, discovery and loss messages are sent.</p>

<p>You can define policies for the portions of an entity's data that should be updated, how it should be
updated, and how often those updates should be sent. A set of properties on the entity can be
placed into a replication group. Each group has a replication policy to control details such as
the frequency of updates and the <a href=
"../../Programmer/Networking/sso_networking_quality_of_service.htm">quality of service</a> that is
used to send the data. An entity can define multiple replication groups. These allow an entity to
send different subsets of property data to different consumers or to send the data to subsets of
consumers that share similar requirements (like update rate and QOS). Each entity property can also
be in multiple replication groups. A replication group can be shared among many entities and can
make use of any number of Categories. All of this configuration is done through data-driven traits
that you set in the Entity Modeling Tool when you define your models. For information about setting
up replication groups, see <a href="sso_replication_config_groups.htm">Configuring Replication
Groups</a>. For information about replication policies, see <a href=
"sso_replication_policies.htm">Understanding Replication Policies</a>.</p>

<p>Each entity publishes each of its replication groups to one Category at a time, and any number
of entities can publish to the same Category at one time. An interested observer can subscribe to
any number of Categories and can thereby consume any number of remote entities. The category used
for these replication channels is the only data that is configured at runtime. Through this
mechanism, you can control area of interest at as coarse- or as fine-grained of a level as your
application requires. The combination of replication groups and category assignment combines to
provide control over both who sees the data and what data they can see. In this way, replication is
optimized by using a categorization policy that meets the needs of the final application. As an
entity changes state, for example by moving around the game world, it can change the category to
which each replication group is published.</p>

<p>A simple example of this would be to limit replicated data on a client to only those entities
that are near a client's current camera view by having the client subscribe to one or more
categories that cover that geographic area. Each entity would then publish its position and other
visual data to a category determined procedurally by the entity's current geographic position. When
the entity moves far enough, it would update the production category and publish into a new
channel. When the client camera moves far enough, it would update the consumption category and
begin receiving a new subset of entities. However, geographic interest management policies are only
one of the simpler approaches used to minimize unwanted bandwidth consumption, and can be used to
consume data that does not map to the geography.</p>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
    <li><a href="sso_replication_prereqs.htm">Replication Prerequisites</a></li>

    <li><a href="sso_replication_requirements.htm">Replication Requirements</a></li>

    <li><a href="sso_replication_how_work.htm">How Replication Works</a></li>

    <li><a href="sso_replication_limitations.htm">Replication Limitations</a></li>

    <li><a href="sso_replication_best_practice.htm">Best Practices for Working with
    Replication</a></li>

    <li><a href="sso_replication_groups_categories.htm">Understanding Replication Groups and
    Categories</a></li>

    <li><a href="sso_replication_config_groups.htm">Configuring Replication Groups</a></li>

    <li><a href="sso_replication_troubleshoot.htm">Troubleshooting Replication</a></li>

    <li><a href="../../Reference/QuickRef_Config/config_qckref.htm#ReplicationGroup">Replication
    Group Configuration Options</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
