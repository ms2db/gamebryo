<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Understanding Replication Policies</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="FSO" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>

<!--(Begin Body)================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Understanding Replication Policies</h1>

<p>Every replication group has a replication policy attached that controls how that group is
published to interested consumers. Some policy options are designed to limit network bandwidth
utilization, others relate to the relative importance of the data being transmitted. A good
replication policy that matches the needs of your application is critical to obtaining high network
performance while retaining ease of development for designers and script writers.</p>

<p>Some properties, like position, may want to be updated frequently, but only the most recent
value is relevant. Other properties may need to have every update communicated reliably. Others
still may change frequently but the update need only be communicated infrequently to save
bandwidth. Different policy options will be optimal for each of these different cases.</p>

<h2>Using Replication Groups Efficiently</h2>

<p>There are 32 available replication groups, each of which has its own unique meaning globally. It
is important to understand that a replication group defines a usage pattern (i.e. what properties
replicate under what circumstances), not an area of interest set (such as a geographic region, chat
channel, and so on). At runtime, the application sets the category into which each replication
group produces updates on a per entity basis. As entity state (such as position) changes, different
category values might be used for the same replication group but the group still defines the same
usage pattern. For example, your entity might use the "<span class="NDLSystemFont">Replication -
Current Room (3)</span>" replication group. Properties contained in this group will always be
published to anyone observing the current room, but your game world might be composed of hundreds
of different rooms, each using a different unique category value. As an entity moves from room to
room it will change the category used for this replication group so that it always matches the
category of the current room. On the observer side, you might be able to see multiple rooms at the
same time so the observer will consume multiple different room categories. The producer simply
produces into the current room category and the consumer automatically sees all the rooms that are
being consumed.</p>

<p>In short, it is the category that determines the area of interest; the replication group simply
determines <em>what</em> properties are published to that category, and the replication policy
determines <em>how</em> properties are published to that category. You may want to read the
Toolbench documentation for the <a href=
"../../Tools/EntityModelingTool/emt_fundmtls_traits.htm#ReplicationPropertyTraits">Replication
Property Traits</a> for further examples of how you might assign replication groups. For advice on
selecting categories to use with replication see the <a href=
"sso_replication_best_practice.htm">Understanding Replication Groups and Categories</a>. To
understand what replication policy options are available and how to configure them, continue
reading.</p>

<h2>Replication Policies</h2>

<h3>Available policy options</h3>

<p>The available policy options are controlled via the <span class="NDLSystemFont"><a href=
"../../Reference/eon/eon__IReplicationGroupPolicy.htm">eon::IReplicationGroupPolicy</a></span>
interface. Currently there are four options that are controlled via the replication policy: the
frequency at which updates are sent, the quality of service used when sending the update messages
and two options that can help when replicating over unreliable qualities of service. The framework
includes a concrete implementation of this interface, <span class="NDLSystemFont"><a href=
"../../Reference/eon/eon__GroupUpdatePolicy.htm">eon::GroupUpdatePolicy</a></span>, which supports
all four of these options. Additional policy options can be added by creating new implementations
of this interface and registering them with <span class=
"NDLSystemFont">eon::IReplicationGroupPolicy</span> class prior to the <span class=
"NDLSystemFont">ReplicationService::OnPreInit</span> phase.</p>

<h3>How to Configure Replication Policies</h3>

<p>Replication policies are configured using the ConfigManager service. These are typically set
using an <span class="NDLSystemFont">.ini</span> file. Update policy settings belong in a section
labeled ReplicationGroup#. For example, for the replication group "Replication - Group (Guild)
(10)", you would use a section entitled [ReplicationGroup10]. Valid keys are MinDelta and
QualityOfService. For an explanation of value types and valid ranges, see the <a href=
"../../Reference/QuickRef_Config/config_qckref.htm#ReplicationGroup">Configuration Options Quick
Reference</a>.</p>

<p>Note that setting a policy in this manner sets the update rate and Quality of Service for the
specified Replication Group <em>globally</em>.</p>

<h3>Customizing Replication Policies in Code</h3>

<p>You can modify the replication policy for a replication group by constructing an object that
conforms to the <span class="NDLSystemFont">IReplicationGroupPolicy</span> interface and
registering it with <span class=
"NDLSystemFont">IReplicationGroupPolicy::SetReplicationGroupPolicy</span>. The new instance should
be registered before <span class="NDLSystemFont">ReplicationService::OnPreInit</span> is called in
order for the correct configuration to be applied. For example:</p>
<pre>
// Construct a new policy object.
eon::GroupUpdatePolicy* pPolicy = EE_NEW eon::GroupUpdatePolicy();
// Default values can be applied but might be overridden by configuration:
pPolicy-&gt;SetMinUpdateDelta(0.25);
// Apply the new policy to group 10, "Guild"
IReplicationGroupPolicy::SetReplicationGroupPolicy(10, pPolicy);
</pre>

<h3>Using Scripts to Manage Replication Policies</h3>

<p>You can modify replication policies at run-time by writing built-in API methods to modify the
policy options. The <span class="NDLSystemFont">bapiOnline.SetGroupUpdateInterval</span> method
demonstrates this for the common case of changing the replication frequency. This can be useful for
rapidly iterating on the policy values but is not recommended for the final implementation which
should use the configuration system, to set the desired values. For example:</p>
<pre>
function SomeBehavior(self, params) 
    -- Functionally equivalent to the C++ code above
    bapiOnline.SetGroupUpdateInterval(10, 3.0)
end function
</pre>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
    <li><a href="sso_replication_overview.htm">Replication Overview</a></li>

    <li><a href="sso_replication_prereqs.htm">Replication Prerequisites</a></li>

    <li><a href="sso_replication_requirements.htm">Replication Requirements</a></li>

    <li><a href="sso_replication_how_work.htm">How Replication Works</a></li>

    <li><a href="sso_replication_limitations.htm">Replication Limitations</a></li>

    <li><a href="sso_replication_best_practice.htm">Best Practices for Working with
    Replication</a></li>

    <li><a href="sso_replication_config_groups.htm">Configuring Replication Groups</a></li>

    <li><a href="sso_replication_troubleshoot.htm">Troubleshooting Replication</a></li>

    <li><a href="../../Reference/QuickRef_Config/config_qckref.htm#ReplicationGroup">Replication
    Group Configuration Options</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
