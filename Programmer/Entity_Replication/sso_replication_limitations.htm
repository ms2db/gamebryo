<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Replication Limitations</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="FSO" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>

<!--(Begin Body)================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Replication Limitations</h1>

<p>In this release of Gamebryo LightSpeed, there are a few limitations related to replication.</p>

<ul>
    <li><b>Up to 32 Replication Policies</b>&mdash;The system supports up to 32 unique replication
    policies. Keep in mind that every entity combines these policies with an entity-specific
    replication group and that each entity can publish groups to arbitrary categories. Think of
    replication policies as property classifications, or as defining unique data updating scenarios
    or methodologies, such as "visual appearance data" or "data visible to anyone in my current
    quest group" or perhaps "data visible to anyone who has me targeted." The replication policy
    does not determine who should receive the data; Categories perform this latter function.</li>

    <li><b>Policies have global meaning</b>&mdash;A given replication group always has the same
    policy attached across all entities. Properties are assigned into replication groups at the
    model level and the models can be mixed together arbitrarily. This makes it impossible to
    separate the groups into isolated domains and has the effect of requiring that the groups have
    the same meaning universally. Use separate replication groups if different types of entities
    require different policy behaviors. Note that there is no runtime cost for an entity to define
    additional replication groups that are not is use (in other words, that have no category
    assigned to them at runtime). If there are models that operate in multiple modes, the model
    data can define the replication groups for all modes but only "turn on" the replication groups
    that are currently needed based on the entities' runtime state.</li>

    <li><b>One category per replication group on each entity</b>&mdash;Each entity can only publish
    each replication group to a single category. If you find yourself wishing to send the same
    properties to multiple interest sets, you should consider making a new category that represents
    the combined interest set and use that single category instead. Or think of categories as
    multicast groups, not as single destinations, so you probably want to have many consumers of
    that group. Alternately, you can create an additional replication group that has all the same
    properties but uses a different category, however normally this should be reserved for cases
    where the two categories truly represent unique update patterns or timing. An example might be
    using two replication groups to replicate visual data such as appearance and position. All of
    the relevant properties would be added to both replication groups, but one is configured to
    update at a high frequency, while the other replicates at a low frequency. For nearby
    observers, they would subscribe to the high frequency channel, but for distant objects, the low
    frequency channel would be used.</li>
</ul>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
    <li><a href="sso_replication_overview.htm">Replication Overview</a></li>

    <li><a href="sso_replication_prereqs.htm">Replication Prerequisites</a></li>

    <li><a href="sso_replication_requirements.htm">Replication Requirements</a></li>

    <li><a href="sso_replication_how_work.htm">How Replication Works</a></li>

    <li><a href="sso_replication_best_practice.htm">Best Practices for Working with
    Replication</a></li>

    <li><a href="sso_replication_groups_categories.htm">Understanding Replication Groups and
    Categories</a></li>

    <li><a href="sso_replication_config_groups.htm">Configuring Replication Groups</a></li>

    <li><a href="sso_replication_troubleshoot.htm">Troubleshooting Replication</a></li>

    <li><a href="../../Reference/QuickRef_Config/config_qckref.htm#ReplicationGroup">Replication
    Group Configuration Options</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
