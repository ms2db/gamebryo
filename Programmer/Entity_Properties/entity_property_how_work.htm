<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>How entity properties work</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>How entity properties work</h1>

<p>This section describes how properties are associated with
entities. It also describes how to override properties in child
models and how properties are affected by model mix-in order.</p>

<h2>How properties are associated with entities</h2>

<p>Properties are modeled in the Entity Modeling Tool (EMT) as
part of an entity model. These properties are instantiated at
runtime either when an entity is created from a world file or
programatically. The default value for the property can come from
the flat model directly or overridden in the world file. For
entities created programatically only the flat model default is
available.</p>

<p>Properties and their values remain as private data to the
entity. Access to properties is provided by public accessor
functions available in both C++ and Lua. A description of these
accessors is available in the <a href=
"entity_property_using.htm">Using entity properties</a>
section.</p>

<h3>Owned vs reflected</h3>

<p>Entities that are created in the local simulator are
considered 'owned' by that simulator. Properties associated with
owned entities can be modified by the local simulator directly,
the exception being read-only properties which cannot be updated.
Properties updated by the owning simulator are marked 'dirty' to
indicate a reflection message needs to be sent to reflected
entities. Reflected entity updates are sent out via the messaging
system.</p>

<p>Entities created in another simulator but known to the local
simulator are considered 'reflected' entities. Properties
associated with reflected entities cannot be altered by the local
simulator, the exception being 'mutable' properties. Mutable (non
read-only) properties can be updated by non-owning simulators.
Changes to mutable properties exist only in the local simulator
and are not reported back to the owning simulator.</p>

<h2>Overriding base model properties in child models</h2>

<p>When constructing a model hierarchy a child model inherits
properties from the parent model. This inheritance includes the
default values for these properties. You can further specialize
your child models by overriding the parent model's default
values.</p>

<p>When mixing in two or more models with the same property, the
child model's mix-in order is used to determine the resulting
default value for the property. When there is ambiguity,the
mix-in order determines which of the ambiguous parent default
values is used for the child model. The mix-in model at the
highest point in the hierarchy wins. You cannot selectively
promote one mix-in model to affect only specific properties. The
mix-in order affects all properties in all models.</p>

<table class="NDLNoteContainer" width="100%">
    <tr align="left">
        <td class="NDLNoteContainerTD">
            <p class="NDLHeadingNoteContainer">Note</p>

            <div class="NDLNote">
                Remember, a model can have one and only one
                property with a given name.
            </div>
        </td>
    </tr>
</table>

<p>For example, if you mix in two parent models with the
"Position" property, the model at the top of the mix-in list is
used to inherit the "Position" property default value. Your child
model can now specialize the parent models' properties by
overriding their default values.</p>

<h2>Changing base model properties in the world</h2>

<p>In addition to overriding default property values in EMT, you
can also change property values on individual entities in World
Builder. To do so, select the entity you want to alter and bring
up the entity editor panel. Use this panel to set new values for
any non-hidden, writable properties.</p>

<p>Some World Builder actions automatically update entity
properties. For example, if your model mixes in the 'Placeable'
base model, the translation gizmo updates the 'Position' property
for you as you move the entity around the world.</p>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
    <li><a href="entity_property_overview.htm">Entity properties
    overview</a></li>

    <li><a href="entity_property_limitations.htm">Entity property
    limitations</a></li>
    <!-- <li><a href="entity_property_how_relates_efr.htm">How entity properties relate to the Emergent Game Framework</a></li> -->

    <li><a href="entity_property_best_practice.htm">Best
    practices for working with entity properties</a></li>

    <li><a href="entity_property_performance.htm">Tuning entity
    property performance</a></li>

    <li><a href="entity_property_using.htm">Using entity
    properties</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
