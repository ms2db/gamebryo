<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Entity properties overview</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Entity properties overview</h1>

<p>This section provides an overview of entity properties, how
they're defined, and how they're used. It also summarizes the
property types that are available.</p>

<p>Entities are composed of state variables called Properties.
These properties are associated with an entity's Model in the
Entity Modeling Tool (EMT). The EMT lets you define default
values for each model property, and optionally set validation
ranges for the values assigned to each property. Every property
can also have one or more associated traits. These traits define
how the property is used in the Game Framework at runtime.</p>

<p>Each property has a unique name and one or more associated
values. An entity can have one and only one property with a given
name. If the Models mixed into a given entity provide a property
of the same name, they are combined into one. The mix-in order
determines how the default values of inherited properties are
resolved when mixing in multiple models containing the same
property name.</p>

<p>Each property value type is defined using one of the property
types known to the Game Framework. If new Property types are
needed by your game, they can be added by extending parts of the
Game Framework, including script bindings, EMT type lists and
value pickers, script debugger, and model description enums.</p>

<p>Properties are not accessed directly in C++. Instead, accessor
methods on <span class="NDLSystemFont">efd::Entity</span> exist
to get and set property values. This allows the system to notify
observers of property changes using a dirty mechanism. It
automatically determines whether the Property is data driven,
needs to be copied on its first edit, or whether it is
implemented in a built-in-model.</p>

<p>Properties are inherited by child models from parent models. A
model with many other models mixed in has all the properties for
all models that are mixed in. Default values also propagate down
the mix-in hierarchy. You can override the default property,
traits, and restrictions at any point in the hierarchy.</p>

<h2>Property types</h2>

<p>The Game Framework provides a set of primitive data types that
are available for use in properties. There are generic basic
types, various utility types composed of basic types, several
reference types, and container types to hold collections of other
types. There are also several property types that are directly
associated with specific system services.</p>

<h3>Generic basic types</h3>

<p>These are the generic basic data types available for use in
properties:</p>

<table>
    <thead>
        <tr>
            <th>Type</th>

            <th>Range</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>Boolean</td>

            <td>true, false</td>
        </tr>

        <tr>
            <td>Char</td>

            <td>-128, 127</td>
        </tr>

        <tr>
            <td>SInt16</td>

            <td>-32768, 32767</td>
        </tr>

        <tr>
            <td>UInt16</td>

            <td>0, 65535</td>
        </tr>

        <tr>
            <td>SInt32</td>

            <td>-2147483648, 2147483647</td>
        </tr>

        <tr>
            <td>UInt32</td>

            <td>0, 4294967295</td>
        </tr>

        <tr>
            <td>SInt64</td>

            <td>-2^63, 2^63-1</td>
        </tr>

        <tr>
            <td>UInt64</td>

            <td>0, 2^64 - 1</td>
        </tr>

        <tr>
            <td>Float32</td>

            <td>1.175494351E-38, 3.402823466E+38
            (approximate)</td>
        </tr>

        <tr>
            <td>Float64</td>

            <td>2.2250738585072014E-308, 1.7976931348623158E+308
            (approximate)</td>
        </tr>

        <tr>
            <td>String</td>

            <td>Any valid UTF-8 string.</td>
        </tr>
    </tbody>
</table>

<h3>Utility types</h3>

<p>These are the utility types available for use in properties.
These properties are composed of primitive types.</p>

<table>
    <thead>
        <tr>
            <th>Name</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>Category</td>

            <td>Holds a category value.</td>
        </tr>

        <tr>
            <td>Color</td>

            <td>Holds an RGB color value as 3 Float32
            values.</td>
        </tr>

        <tr>
            <td>ColorA</td>

            <td>Holds an RGBA color value 4 Float32 values.</td>
        </tr>

        <tr>
            <td>Point2</td>

            <td>Holds a 2-D point as 2 Float32 values.</td>
        </tr>

        <tr>
            <td>Point3</td>

            <td>Holds a 3-D point as 3 Float32 values.</td>
        </tr>

        <tr>
            <td>Point4</td>

            <td>Holds a 4-D position as 4 Float 32 values.</td>
        </tr>

        <tr>
            <td>Matrix3</td>

            <td>Holds a 3-D matrix as 3 Point3 values.</td>
        </tr>

        <tr>
            <td>Quaternion</td>

            <td>Holds a Quaternion as 4 Float32 values</td>
        </tr>

        <tr>
            <td>ID128</td>

            <td>Holds a 128-bit identifier.</td>
        </tr>

        <tr>
            <td>AssetID</td>

            <td>Holds an asset identifier (URN or tag), in string
            form.</td>
        </tr>

        <tr>
            <td>TimeType</td>

            <td>Holds a time type, in ms, as Float64.</td>
        </tr>

        <tr>
            <td>EventID</td>

            <td>Holds an Event identifier.</td>
        </tr>

        <tr>
            <td>PropertyID</td>

            <td>Holds a Property ID value.</td>
        </tr>
    </tbody>
</table>

<h3>Container Types</h3>

<p>Container types are homogeneous collections of properties.
Access to values for these types is via indexed accessor methods.
See the 'Using Entity Properties' section for more details. These
are the container types available for use in properties:</p>

<table>
    <thead>
        <tr>
            <th>Name</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>List</td>

            <td>Contains an unordered collection of
            properties.</td>
        </tr>

        <tr>
            <td>Map</td>

            <td>Contains a key/value pair collection of
            properties.</td>
        </tr>
    </tbody>
</table>

<h3>Entity reference types</h3>

<p>A property of type EntityRef allows one entity to refer to
another. This is typically used when an entity needs to use
properties from another entity. There can be more specialized
forms of this relationship, however, that also use EntityRef
types. This is represented as the EntityID of the referenced
entity.</p>

<table>
    <thead>
        <tr>
            <th>Name</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>EntityRef</td>

            <td>A EntityID for another entity.</td>
        </tr>
    </tbody>
</table>

<table class="NDLNoteContainer" width="100%">
    <tr align="left">
        <td class="NDLNoteContainerTD">
            <p class="NDLHeadingNoteContainer">Note</p>

            <div class="NDLNote">
                EntityRef property types do not support default
                values in EMT. Values for EntityRef properties
                can only be set at runtime or by initializing the
                EntityRef Property in World Builder to point to
                another initial Entity description from World
                Builder.
            </div>
        </td>
    </tr>
</table>

<p>An entity can describe a "has-a" relationship to one or more
other entities. The outer entity aggregates the inner one(s).
This is the relationship that you would use for avatars picking
up loot, or when a vehicle can dynamically mount new weapons. In
both cases, the inner object is modeled as an entity. This owned
entity has a lifetime separate from the containing entity, since
the object could be dropped or sold. It is interesting, however,
to think of the game play consequences of mounting, holding, or
carrying the object. It may bestow additional abilities on the
outer object. This could be implemented by exposing interfaces
from the inner (carried) objects to the interface of the carrying
object. This could be used to implement dynamic entity
composition.</p>

<p>Containment, or carrying is a further specialization of the
has-a/references relationship. We have yet to define the exact
semantics of this relationship, and leave that up to the
application. In some cases it implies hiding the inner entity
from the rest of the world. Carrying implies the location of the
inner object is relative to the position of the outer object. A
more sophisticated game coordinate system can make this
capability very simple.</p>

<p>An entity can describe an is-made-of-a relationship with one
or more other entities. The outer entity is composed of the inner
one(s). By definition, the inner entity(ies) will be constructed
and destructed at the same time as the outer entity, and no other
entity can claim ownership.</p>

<h3>System service types</h3>

<p>The Core Runtime system services define the following entity
properties. These are special-purpose properties used by the Core
Runtime to define how a particular service interacts with
entities added, updated, or removed from the system.</p>

<table>
    <thead>
        <tr>
            <th>Name</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>AttachedNifAsset</td>

            <td>An NIF asset attached to the entity.</td>
        </tr>
    </tbody>
</table>

<h2>Property Traits</h2>

<p>Each property can have one or more associated traits. Traits
are used to tell the Game Framework how to handle a property.
Traits can be restrictive, for example by setting the 'Read Only'
trait that property can be read but not written. Other traits
define runtime features of the trait, for example by setting the
'Hidden' trait, the property is not displayed in the entity
editor in World Builder.</p>

<table class="NDLNoteContainer" width="100%">
    <tr align="left">
        <td class="NDLNoteContainerTD">
            <p class="NDLHeadingNoteContainer">Note</p>

            <div class="NDLNote">
                Most of these traits affect client/server
                interactions only. This is indicated in the
                <em>Client/Server</em> column in the following
                table.
            </div>
        </td>
    </tr>
</table>

<table>
    <thead>
        <tr>
            <th>Trait Name</th>

            <th>Description</th>

            <th>Is for Client/Server</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>Hidden</td>

            <td>The property is not exposed to the entity editor
            in World Builder.</td>

            <td>&nbsp;</td>
        </tr>

        <tr>
            <td>ReadOnly</td>

            <td>The property can be read but not written. The
            property is given the default value and cannot change
            at runtime.</td>

            <td>&nbsp;</td>
        </tr>

        <tr>
            <td>Mutable</td>

            <td>The property can be updated from reflected
            instances of the entity. When this trait is set
            simulators can update the property even if the entity
            is reflected. When this is not set only the simulator
            that owns the entity can update the property.</td>

            <td style="text-align: center;">X</td>
        </tr>

        <tr>
            <td>Persisted</td>

            <td>The property needs to be persisted when the
            entity is persisted. This is a hint to the server.
            (Not currently implemented)</td>

            <td style="text-align: center;">X</td>
        </tr>

        <tr>
            <td>ReflectionGroup 0-9</td>

            <td>Updates to the property are sent on this
            reflection group. You can subscribe to individual
            groups to get notification of property updates. If
            you do not set a reflection group for the property,
            the property is not reflected to remote
            simulators.</td>

            <td style="text-align: center;">X</td>
        </tr>

        <tr>
            <td>ServerOnly</td>

            <td>The property exists in server processes only. It
            is not reflected to client processes.</td>

            <td style="text-align: center;">X</td>
        </tr>
    </tbody>
</table>

<h2>Property Restrictions</h2>

<p>Each property can optionally have a value restriction. This
lets World Builder validate the values assigned to the property
to make sure they meet a specific criteria. For example, you can
define a restriction on the range of acceptable values for a
numeric property. The following table describes the available
restrictions based on property type.</p>

<table>
    <thead>
        <tr>
            <th>Restriction Type</th>

            <th>Property type(s)</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>TagRestriction</td>

            <td>Asset</td>

            <td>The value must have the given asset tags. The
            asset picker will restrict selections to assets
            having the given tag.</td>
        </tr>

        <tr>
            <td>Range</td>

            <td>Byte, Float32, Float64, SInt16, SInt32, SInt64,
            UInt16, UInt32, UInt64</td>

            <td>The value must be within a specified range.</td>
        </tr>

        <tr>
            <td>Enumeration</td>

            <td>Byte, Float32, Float64, SInt16, SInt32, SInt64,
            UInt16, UInt32, UInt64, String</td>

            <td>The value must equal a value in a predefined set
            of values.</td>
        </tr>

        <tr>
            <td>Model</td>

            <td>EntityRef</td>

            <td>The value must correspond to an entity that is
            built from the specified model, either directly or as
            a mix-in.</td>
        </tr>
    </tbody>
</table>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
    <li><a href="entity_property_how_work.htm">How entity
    properties work</a></li>

    <li><a href="entity_property_limitations.htm">Entity property
    limitations</a></li>
    <!-- <li><a href="entity_property_how_relates_efr.htm">How entity properties relate to the Emergent Game Framework</a></li> -->

    <li><a href="entity_property_best_practice.htm">Best
    practices for working with entity properties</a></li>

    <li><a href="entity_property_performance.htm">Tuning entity
    property performance</a></li>

    <li><a href="entity_property_using.htm">Using entity
    properties</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
