<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Dynamically Loading Custom Built-in API Functions</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>

<!--(Begin Body)================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<h1>Dynamically Loading Custom Built-in API Functions</h1>

<p>In DLL build configurations, you can specify the built-in API modules to load without the need to
recompile your application. Dynamic loading is only supported in DLL build configurations.</p>

<p>As with static loading, it is necessary to make the scripting runtime aware of the existence of
the initialization method for your built-in API module. (See <a href=
"builtin_custom_static_load.htm">Statically loading custom built-in API functions</a> for details on
initialization methods for different scripting languages.) However, with dynamic loading there is
no need to compile these functions into your code. Instead, you can simply specify the DLL names and
initialization function names that should be called in the configuration file for your application.
Your executable is not required to link to the DLL that implements the built-in API module; this DLL
will be dynamically loaded and the given initialization function will be found. This function must have
the correct method signature for the scripting language that is being used. If you use SWIG to
generate your bindings, it will create an initialization function with the correct signature and the
proper DLL export declaration.</p>

<p>Multiple modules may be loaded in this manner. The easiest way to list multiple modules is to
use the automatic numbering capabilities provided by the <a href=
"../../Reference/QuickRef_Services/svc_qckref_config_mgr.htm">efd::ConfigManager</a>. Rather than
listing "LoadBuiltin1", "LoadBuiltin2", and so on, you can use "LoadBuiltin#" and the next
sequential number will automatically be used.</p>

<h2>Lua example</h2>
<pre>
; Load built-in API functions defined in DLL files into the Lua runtime. The format is:
; DLLName!builtin_init_function
[ScriptEngine.Lua]
LoadBuiltin#=MyBuiltinDLL!luaopen_MyBuiltin
LoadBuiltin#=MoreBuiltins!luaopen_SuperDuperBuiltins
LoadBuiltin#=MoreBuiltins!luaopen_AdditionalBuiltins
</pre>

<h2>Python example</h2>
<pre>
; Load built-in API functions defined in DLL files into the Lua runtime. The format is:
; DLLName!builtin_init_function
[ScriptEngine.Python]
LoadBuiltin#=MyBuiltinDLL!init_MyBuiltin
LoadBuiltin#=MoreBuiltins!init_SuperDuperBuiltins
LoadBuiltin#=MoreBuiltins!init_AdditionalBuiltins
</pre>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
    <li><a href="builtin_custom_creating.htm">Creating custom built-in API functions</a></li>

    <li><a href="builtin_custom_deleting.htm">Deleting custom built-in API functions</a></li>

    <li><a href="builtin_custom_static_load.htm">Statically loading custom built-in API functions</a></li>

    <li><a href="builtin_scripting.htm">Scripting built-in API functions</a></li>

    <li><a href="builtin_custom_adding.htm">Adding custom built-in API functions to the scripting
    system</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
