<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>How Custom Built-in API Functions Work</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>

<!--(Begin Body)================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<h1>How Custom Built-in  API Functions Work</h1>

<p>Custom Built-in API functions are C++ functions that are bound to a scripting language for use by the Behavior
system. They are either bound via SWIG (BehaviorAPI) or directly bound to the scripting language
(egfPython/egfLua). There are a large number of pre-defined built-in API functions, but there are only a very
small number of pre-defined behaviors (mainly life cycle behaviors like OnInit, OnPreMigrate,
OnPostMigrate, OnDestroy).</p>

<p>Normally, the declarations of the built-in API functions for a given system service are isolated into their
own header file. This makes it clear which calls are actually built-in API functions and which system service
module is implementing them. This approach also makes it easy to do automatic scripting language
bindings using SWIG. SWIG reads a .i specification file and generates a C++ file that interacts
with the virtual machine to expose C++ methods and types. It also generates a scripting language
module that can be imported into an application behavior script to declare those now
language-specific calls.</p>

<p>Emergent implements built-in API functions as global functions. As much as possible, this removes dependence
on scripting-language dependent features such as objects or inheritance, both of which might
interfere with the Emergent object model. A built-in API function can have an arbitrary signature, taking
developer-specified parameters and return value. A C++ behavior can call a built-in API function directly. A
behavior implemented in a scripting language must call the built-in API functions through a scripting
language-specific binding.</p>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
    <li><a href="builtin_overview.htm">Built-in API overview</a></li>

    <li><a href="builtin_features.htm">Built-in API features</a></li>

    <li><a href="builtin_limitations.htm">Built-in API limitations</a></li>

    <li><a href="builtin_reqs.htm">Requirements for working with built-in API functions</a></li>

    <li><a href="builtin_best_practice.htm">Best practices for working with built-in API functions</a></li>

    <li><a href="builtin_using.htm">Using built-in API functions</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
