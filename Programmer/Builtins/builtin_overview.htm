<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Built-in API Overview</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>

<!--(Begin Body)================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<h1>Built-in API Overview</h1>

<p>In the course of developing a game, it is common that a game studio would develop new, custom
services that extend the functionality of the Emergent Game Framework. Typically, this would be
done by creating a <a href="../SystemServices/system_service_intro.htm">System Service</a> that can
be plugged into the System Service Manager to share compute cycles with the rest of the game. The
capabilities of that service often must then be exposed to the behavior system. Because it is
expected that many behaviors will by executed as script code, this means we need an API that will
bind well into script, but which can also be used from C++ behaviors. The functions and objects
that can be used from script are called <em>built-in API functions</em>. There are a number of preimplemented
built-in API functions that come with the Game Framework that allow, for example, entity creation, property
access, and message sending.</p>

<p>Some terminology related to built-ins:</p>

<ul>
    <li><b>Behaviors</b> are methods associated with a Model and all Entity instances of that type.
    Behaviors include Scripted Behaviors and C++ Behaviors, and encode game logic.</li>

    <li><b>Built-in API functions</b> are C++ functions that are meant to be called from within behaviors to
    access the underlying C++ systems.</li>
</ul>

<p>Binding the built-in API function to the scripting language is normally mechanically performed by SWIG. A
built-in API function can take parameters and return values of any type that has also been built-in.</p>

<p>Built-in API functions are normally global functions encapsulated in a script language package. They are not
normally methods within classes because scripting languages have different semantics for their
objects, and we need to remain independent of any specific language. If a class interface is
desired, we recommend wrapping a set of built-in API functions in a language-specific class internally to the
language.</p>

<p>Normally a built-in API function is a true function, returning to the caller immediately. Some built-in
API functions cause a Behavior to suspend execution. They do this by interacting with the coroutine system of the
scripting virtual machine.</p>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
    <li><a href="builtin_features.htm">Built-in API features</a></li>

    <li><a href="builtin_how_work.htm">How custom built-in API functions work</a></li>

    <li><a href="builtin_limitations.htm">Built-in API limitations</a></li>

    <li><a href="builtin_reqs.htm">Requirements for working with built-in API functions</a></li>

    <li><a href="builtin_best_practice.htm">Best practices for working with built-in API functions</a></li>

    <li><a href="builtin_using.htm">Using built-in API functions</a></li>

    <li><a href="builtin_intro.htm">Working with built-in API functions</a></li>

    <li><a href="../Scripting/scripting_intro.htm">List of LightSpeed built-in API functions</a></li>

    <li><a href="../Scripting/lua_scripting_overview.htm">Lua built-in API overview</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
