<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Requirements for Working with Built-in API Functions</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>

<!--(Begin Body)================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<h1>Requirements for Working with Built-in API Functions</h1>

<p>Built-in API functions typically expose system service functionality to scripting, so before working with
built-in API functions you should be familiar with <a href="../SystemServices/system_service_intro.htm">System
Services</a>. Typically when you are writing new built-in API functions it will be because you added a new
system service and wish to expose some of its functionality to scripted behaviors. As such
familiarity with <a href="../Behaviors/behavior_intro.htm">Behaviors</a> is also required before
you begin writing your own built-in API functions. You should also familiarize yourself with existing built-in
API functions
provided by the framework to ensure that your new function is actually required. In many cases
existing built-in API functions like <a href=
"../../Reference/Namespaces/BehaviorAPI.htm">BehaviorAPI::SendStreamLocal</a> can be used to
communicate with your service via messaging instead of using custom built-in API functions.</p>

<p>We use a tool called <a href="http://www.swig.org/" target="_blank">SWIG</a> to generate script
bindings for behaviors. SWIG allows us to generate bindings for multiple different scripting
languages directly from a C++ method definition. Before writing built-in API functions you should familiarize
yourself with SWIG for your choosen scripting language. For an example of how to define a built-in API
module using SWIG see <a href="../../Reference/Namespaces/BehaviorAPI.htm">BehaviorAPI.i</a>. In
particular you need to understand the use of SWIG typemaps to control how parameters are passed
into and returned from your built-in API functions. We provide extensive typemaps for Lua and Python
which will handle passing most Foundation and Game Framework provided data types as input, output,
or in-out parameters to your built-in API functions. You can import either <a href=
"../../Reference/egfLua/Introduction_to_egfLua_Class_Reference.htm">egfLua/bapiLuaTypeMaps.i</a>
for Lua or <a href=
"../../Reference/egfPython/Introduction_to_egfPython_Class_Reference.htm">egfPython/bapiTypeMaps.i</a>
for Python into your own SWIG files in order to use these typemaps.</p>

<p>Inside of your built-in API function, you will need to use the <a href=
"../../Reference/egf/egf__ScriptContext.htm">egf::ScriptContext</a> singleton to access the current
context such as which entity is running the behavior and which event is running. You will also use
this singleton to access various system services. The egf::ScriptContext singleton is accessed
through a global variable named g_bapiContext which is defined in egf/ScriptContext.h.</p>

<p>It is possible to directly implement your built-in API functions using native libraries provided with your
preferred scripting language. This method should only be used by people who are already familiar
with binding custom functions into a scripting language. While directly binding can sometimes allow
your built-in API functions to be more expressive, this typically comes with increased difficulty and
higher maintenance costs so we recommend using SWIG to bind plain C-style methods. There are a few
examples of native binding in the framework that you may wish to become familiar with if you are
considering writing native-style methods. See <a href="../../Reference/Namespaces/egf.htm">int
egf::lua_GetProperty</a> in the egfLua library for an example of native Lua binding or <a href=
"../../Reference/Namespaces/egf.htm">PyObject* egf::GetProperty</a> in the egfPython library for an
example of Python native bindings.</p>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
    <li><a href="builtin_overview.htm">Built-in API overview</a></li>

    <li><a href="builtin_features.htm">Built-in API features</a></li>

    <li><a href="builtin_how_work.htm">How custom built-in API functions work</a></li>

    <li><a href="builtin_limitations.htm">Built-in API limitations</a></li>

    <li><a href="builtin_best_practice.htm">Best practices for working with built-in API functions</a></li>

    <li><a href="builtin_using.htm">Using built-in API functions</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
