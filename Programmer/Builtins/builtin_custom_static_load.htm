<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Statically Loading Custom Built-in API Functions</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>

<!--(Begin Body)================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<h1>Statically Loading Custom Built-in API Functions</h1>

<p>In order to statically load a built-in API module it must be registered with the appropriate
scripting run-time. If you are using a SWIG generated wrapper then it will have generated the
appropriate initialization method automatically. The name and syntax of the generated method is
dependent on the scripting language being used. SWIG does not generate a header file for defining
this external method, so you may wish to create your own declaration in a header file included with
the library. Otherwise you can simply use an external declaration when you register the method.</p>

<p>If you have manually generated native script bindings then you must also manually write the
module initialization method. It is recommended that you follow the SWIG-style naming convention
for this method as outlined below.</p>

<p>Additional built-in API module initialization methods should be registered prior to OnInit of the
Scheduler system service. These methods can be registered during your application's main method or
during the OnPreInit of a system service that was registered in main.</p>

<p>Static registration is supported in all build configurations. If you are using static
registration in a DLL build you must ensure that the initialization method is properly exported
from the implementing DLL. By default SWIG generated initialization methods will have the correct
exporting defined. A single DLL can expose multiple built-in API module initialization methods if
desired. The name of the built-in API module as exposed to script does not need to match the name of
the library that implements that module.</p>

<h2>Lua Example:</h2>

<p>SWIG will genate an initialization method based on the module name given after the "%module"
keyword in your .i file. The name will be luaopen_[ModuleName]. You should register this method
with the egf::SchedulerLua class as in the following example:</p>
<pre>
extern "C" int luaopen_MyBuiltin(lua_State *);
SchedulerLua::AddStaticBuiltinInitFunction(luaopen_MyBuiltin);
</pre>

<h2>Python Example:</h2>

<p>SWIG generates an initialization method for Python modules as well. The name for this method
will be init_[ModuleName]. This method should be registered with egf::SchedulerPython as in the
following example:</p>
<pre>
extern "C" void init_MyBuiltin();
SchedulerPython::AddStaticBuiltinInitFunction(init_MyBuiltin);
</pre>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
    <li><a href="builtin_custom_creating.htm">Creating custom built-in API Functions</a></li>

    <li><a href="builtin_custom_deleting.htm">Deleting custom built-in API Functions</a></li>

    <li><a href="builtin_custom_dynamic_load.htm">Dynamically loading custom built-in API Functions</a></li>

    <li><a href="builtin_scripting.htm">Scripting built-in API Functions</a></li>

    <li><a href="builtin_custom_adding.htm">Adding custom built-in API Functions to the scripting
    system</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
