<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Frame Rendering System Render Frame</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<h1>Frame Rendering System Render Frame</h1>

<p>At the highest level in the system is the <em>render 
 frame</em> object. A render frame represents a complete rendering method 
 and provides a simple interface for drawing and displaying a single frame. 
 It internally holds a list of sub-objects that represent steps in the 
 rendering process. Applications can switch which render frame they are 
 using at will to completely change the rendering process. For example, 
 an application could maintain several render frames: one for rendering 
 the splash screen, one for the full-screen game menus, and one for gameplay 
 rendering of the scene.</p>

<h2>NiRenderFrame</h2>

<p>The <span class="NDLSystemFont"><a href="../../Reference/NiMain/NiRenderFrame.htm">NiRenderFrame</a></span> 
 class represents a render frame in the system. It holds a list of <a href="Frame_Rendering_System_Render_Step.htm">render 
 step</a> objects and contains functions for drawing and displaying the 
 frame. It also holds pre- and post-processing callback functions that 
 are invoked before and after the rendering process, respectively. These 
 callback functions can be set by an application and provided with custom 
 data. <span class="NDLSystemFont">NiRenderFrame</span> contains no virtual 
 functions and is not intended to be used as a base class. Customization 
 of the frame rendering system should be done at a lower level. During 
 its <span class="NDLSystemFont">Draw</span> function, <span class="NDLSystemFont">NiRenderFrame</span> 
 iterates through its list of render steps, calling <span class="NDLSystemFont">Render</span> 
 on each step that is active.</p>

<p>An application typically creates one or more render 
 frame objects at initialization time. A single render frame object is 
 then used in the application's idle loop to draw and display the frame 
 after updating all applicable scene graphs. The <span class="NDLSystemFont"><a href="../../Reference/NiApplication/NiApplication.htm">NiApplication</a></span> 
 class holds a single <span class="NDLSystemFont">NiRenderFrame</span> smart 
 pointer as a member variable and provides a <span class="NDLSystemFont">CreateFrame</span> 
 function during initialization, in which that render frame should be built. 
 The rendering code in <span class="NDLSystemFont">NiApplication</span> then 
 simply calls <span class="NDLSystemFont">Draw</span> and <span class="NDLSystemFont">Display</span> 
 on the render frame during its <span class="NDLSystemFont">RenderFrame</span> 
 function.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->
</body>

</html>
