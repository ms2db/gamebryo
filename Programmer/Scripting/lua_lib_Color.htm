<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Color</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">Color Module</p>
<p class="NDLRefHead1">Description</p>
<p>The Color module contains functions to create, access, and manipulate instances of
the efd::Color class in Lua. Colors are represented by three float values (r,g b), with
black represented as (0,0,0), and white as (1,1,1).</p>

<p>All functions are in the Color module namespace in Lua.</p>

<p>Color values passed from C++ to Lua are always converted into a Lua Color userdata object.
The functions described below represent the functions available to these objects.</p>

<p>Color values passed from Lua to C++ can either be a Color value constructed using 
Color.Color(r,g,b) or a Lua table containing 3 numbers representing r, g, and b.</p>

<p class="NDLRefHead1">Library Constants</p>

<a name="Color_BLACK"</a>
<p class="NDLRefMemberFunction">Color_BLACK</p>
<p class="NDLRefMemberDescription">A Color constant containing the values (0,0,0).</p>

<a name="Color_WHITE"</a>
<p class="NDLRefMemberFunction">Color_WHITE</p>
<p class="NDLRefMemberDescription">A Color constant containing the values (1,1,1).</p>

<p class="NDLRefHead1">Module Attributes</p>

<a name="Color.r"</a>
<p class="NDLRefMemberFunction">Color.r</p>
<p class="NDLRefMemberDescription">The red value.</p>

<a name="Color.g"</a>
<p class="NDLRefMemberFunction">Color.g</p>
<p class="NDLRefMemberDescription">The green value.</p>

<a name="Color.b"</a>
<p class="NDLRefMemberFunction">Color.b</p>
<p class="NDLRefMemberDescription">The blue value.</p>

<p class="NDLRefHead1">Module Functions</p>

<a name="Color()"></a>
<p class="NDLRefMemberFunction">userdata Color()</p>
<p class="NDLRefMemberDescription">Create a new Color object, initialized to (0, 0, 0)</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">Color</span></td>
    <td>A userdata object wrapping an efd::Color.
        <p><b>Example:</b>
    <pre>
    c1 = Color.Color()
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Color(r, g, b)"></a>
<p class="NDLRefMemberFunction">userdata Color(r, g, b)</p>
<p class="NDLRefMemberDescription">Create a new Color object, initialized to (r, g, b)</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">Color</span></td>
    <td>A userdata object wrapping an efd::Color with initial values (r, g, b).
        <p><b>Example:</b>
    <pre>
    c1 = Color.Color(0.8, 0.6, 0.4)
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Color =="></a>
<p class="NDLRefMemberFunction">boolean ==</p>
<p class="NDLRefMemberDescription">Determine if two Colors are equal.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">boolean</span></td>
    <td>True if the two colors are equal, false otherwise.
        <p><b>Example:</b>
    <pre>
    c1 = Color.Color(0.8, 0.6, 0.4)
    c2 = Color.Color(0.8, 0.6, 0.4)
    c3 = Color.Color_BLACK
    
    b = (c1 == c2)  -- true
    b = (c1 == c3)  -- false
    b = (c2 ~= c3)  -- true
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Color +"></a>
<p class="NDLRefMemberFunction">userdata +</p>
<p class="NDLRefMemberDescription">Add two colors.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">Color</span></td>
    <td>Add two colors.
        <p><b>Example:</b>
    <pre>
    c1 = Color.Color(0.1, 0.1, 0.1)
    c2 = Color.Color(0.5, 0.4, 0.3)    
    c1 = c1 + c2 -- Color(0.6, 0.5, 0.4)
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Color -"></a>
<p class="NDLRefMemberFunction">userdata -</p>
<p class="NDLRefMemberDescription">Subtract two colors.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">Color</span></td>
    <td>Subtract two colors.
        <p><b>Example:</b>
    <pre>
    c1 = Color.Color(0.1, 0.1, 0.1)
    c2 = Color.Color(0.5, 0.4, 0.3)    
    c3 = c2 - c1  -- Color (0.4, 0.3, 0.2)
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Color *"></a>
<p class="NDLRefMemberFunction">userdata *</p>
<p class="NDLRefMemberDescription">Multiply two colors.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">Color</span></td>
    <td>Multiply two colors.
        <p><b>Example:</b>
    <pre>
    c1 = Color.Color(0.5, 0.4, 0.3)
    c2 = Color.Color(0.1, 0.2, 0.3)    
    c3 = c1 * c2 -- Color(0.05, 0.08, 0.09)    
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Color /"></a>
<p class="NDLRefMemberFunction">userdata /</p>
<p class="NDLRefMemberDescription">Divide two colors.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">Color</span></td>
    <td>Divide two colors.
        <p><b>Example:</b>
    <pre>
    c1 = Color.Color(3.0, 4.0, 5.0)
    c2 = Color.Color(9.0, 8.0, 15.0)    
    c3 = c2 / c1 -- Color(3.0, 2.0, 3.0)
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Color Unary-"></a>
<p class="NDLRefMemberFunction">userdata Unary-</p>
<p class="NDLRefMemberDescription">Divide two colors.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">Color</span></td>
    <td>Negate a color.
        <p><b>Example:</b>
    <pre>
    c1 = Color.Color(0.5, 0.4, 0.3)
    c2 = -c1   -- Color(-0.5, -0.4, -0.3)
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Color Scale"></a>
<p class="NDLRefMemberFunction">nil Scale</p>
<p class="NDLRefMemberDescription">Ensure RGB components are within the range [0.0, 1.0] by 
scaling down all components by the max component. This function sets the components in the
correct range and preserves the hue of the final color. Note: all components are assumed
to be >= 0.0, so no such check is performed.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">nil</span></td>
    <td>Scale the color to the range [0.0, 1.0]
        <p><b>Example:</b>
    <pre>
    c1 = Color.Color(1.65, 0.8, 1.11)
    c1:Scale()  -- Color(1.0, 0.4848, 0.6727)
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Color Clamp"></a>
<p class="NDLRefMemberFunction">nil Clamp</p>
<p class="NDLRefMemberDescription">Ensure RGB components are within the range [0.0, 1.0] by 
clamping any components above 1.0 to 1.0. Note: all components are assumed to be >=0, so
no such check is performed.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">nil</span></td>
    <td>Clamp the color to the range [0.0, 1.0]
        <p><b>Example:</b>
    <pre>
    c1 = Color.Color(1.65, 1.5, 1.01)
    c1:Clamp()  -- Color(1.0, 1.0, 1.0)
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Color tostring"></a>
<p class="NDLRefMemberFunction">string tostring(Color)</p>
<p class="NDLRefMemberDescription">Create a pretty string for this color, of the
form "Color(r.000000, g.000000, b.000000)".</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">string</span></td>
    <td>String containing the pretty version of the given color.
        <p><b>Example:</b>
    <pre>
    c1 = Color.Color(1.65, 0.8, 1.11)
    local s = tostring(c1)   -- "Color(r=1.650000, g=0.800000, b=1.110000)"
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<p class="NDLHeadingRelatedTopic">
    Related topics</p>
</div>

<ul>
    <li><a href="../../Reference/efd/efd__Color.htm">efd::Color</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
