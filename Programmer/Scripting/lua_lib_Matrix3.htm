<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Matrix3</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">Matrix3 Module</p>
<p class="NDLRefHead1">Description</p>
<p>The Matrix3 module contains functions to create, access, and manipulate instances of
the efd::Matrix3 class in Lua.</p>

<p>All functions are in the Matrix3 module namespace in Lua.</p>

<p>Matrix3 values passed from C++ to Lua are always converted into a Lua Matrix3 userdata object.
The functions described below represent the functions available to these objects.</p>

<p>Matrix3 values passed from Lua to C++ can either be a Matrix3 value constructed using 
Matrix3.Matrix3(Point3(r1-1, r2-1, r3-1), Point3(r2-1, r2-2, r2-3), Point3(r3-1, r3-2, r3-3) 
or a nested Lua table containing 3 tables of 3 values corresponding to the 3 rows of the matrix.
For example: { {1, 2, 3}, {4, 5, 6}, {7, 8, 9} }</p>

<p class="NDLRefHead1">Library Constants</p>

<a name="Matrix3_ZERO"</a>
<p class="NDLRefMemberFunction">Matrix3_ZERO</p>
<p class="NDLRefMemberDescription">A Matrix3 constant containing the zero Matrix.</p>

<a name="Matrix3_IDENTITY"</a>
<p class="NDLRefMemberFunction">Matrix3_IDENTITY</p>
<p class="NDLRefMemberDescription">A Matrix3 constant containing the identity Matrix.</p>


<p class="NDLRefHead1">Module Attributes</p>

<a name="Matrix3 None"</a>
<p class="NDLRefMemberFunction">None</p>


<p class="NDLRefHead1">Module Functions</p>

<a name="Matrix3()"></a>
<p class="NDLRefMemberFunction">userdata Matrix3()</p>
<p class="NDLRefMemberDescription">Create a new Matrix3 object, initialized to the zero matrix</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">Matrix3</span></td>
    <td>A userdata object wrapping an efd::Matrix3.
        <p><b>Example:</b>
    <pre>
    m1 = Matrix3.Matrix3()
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Matrix3(table, table, table)"></a>
<p class="NDLRefMemberFunction">userdata Matrix3(table1, table2, table2)</p>
<p class="NDLRefMemberDescription">Create a new Matrix3 object with rows defined by
table1, table2, table3. Each of these tables should contain 3 numbers.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">Matrix3</span></td>
    <td>A userdata object wrapping an efd::Matrix3.
        <p><b>Example:</b>
    <pre>
    m1 = Matrix3.Matrix3({1,2,3}, {4,5,6}, {7,8,9})
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Matrix3(Point3, Point3, Point3)"></a>
<p class="NDLRefMemberFunction">userdata Matrix3(Point3 r1, Point3 r2, Point3 r3)</p>
<p class="NDLRefMemberDescription">Create a new Matrix3 object with rows defined by
Point3 values r1, r2, and r3.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">Matrix3</span></td>
    <td>A userdata object wrapping an efd::Matrix3.
        <p><b>Example:</b>
    <pre>
    m1 = Matrix3.Matrix3(Point3.Point3(1,2,3), Point3.Point3(4,5,6), Point3.Point3(7,8,9))
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Matrix3 =="></a>
<p class="NDLRefMemberFunction">boolean ==</p>
<p class="NDLRefMemberDescription">Equality, return true if two Matrix3 instances are equal.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">boolean</span></td>
    <td>True if two matrix3 objects are equal, false otherwise.
        <p><b>Example:</b>
    <pre>
    m1 = Matrix3.Matrix3( {1,2,3}, {4,5,6}, {7,8,9} )
    m2 = Matrix3.Matrix3( {1,2,3}, {4,5,6}, {7,8,9} )
    
    b1 = (m1 == m2)  -- true
    b2 = (m1 ~= Matrix3.Matrix3_ZERO)  -- true
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Matrix3 GetRow"></a>
<p class="NDLRefMemberFunction">userdata GetRow(index, Point3 tmp)</p>
<p class="NDLRefMemberDescription">Get the row, as a Point3, corresponding to the given index.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">Point3</span></td>
    <td>A userdata object wrapping an efd::Point3 containing the row information at index. Note:
    Indexes to this function are zero-based.
        <p><b>Example:</b>
    <pre>
    m1 = Matrix3.Matrix3( {1,2,3}, {4,5,6}, {7,8,9} )
    local r = Point3.Point3()
    r = m1:GetRow(1, r)  -- Point3(1, 2, 3)
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Matrix3 SetRow"></a>
<p class="NDLRefMemberFunction">nil SetRow(Point3)</p>
<p class="NDLRefMemberDescription">Set the row, as a Point3, corresponding to the given index.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">nil</span></td>
    <td>Updates this Matrix3, setting the row at index to the given Point3.
        <p><b>Example:</b>
    <pre>
    m1 = Matrix3.Matrix3( {1,2,3}, {4,5,6}, {7,8,9} )
    r = Point3.Point3(10, 11, 12)
    m1:SetRow(1, r)     -- m1 == Matrix3( {1, 2, 3}, {10, 11, 12}, {7, 8, 9} )
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Matrix3 GetCol"></a>
<p class="NDLRefMemberFunction">userdata GetCol(index, Point3 tmp)</p>
<p class="NDLRefMemberDescription">Get the column, as a Point3, corresponding to the given index.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">Point3</span></td>
    <td>A userdata object wrapping an efd::Point3 containing the column information at index. Note:
    Indexes to this function are zero-based.
        <p><b>Example:</b>
    <pre>
    m1 = Matrix3.Matrix3( {1,2,3}, {4,5,6}, {7,8,9} )
    local c = Point3.Point3()
    c = m1:GetCol(1, c)  -- c == Point3(2, 5, 8)
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Matrix3 SetCol"></a>
<p class="NDLRefMemberFunction">nil SetCol(Point3)</p>
<p class="NDLRefMemberDescription">Set the column, as a Point3, corresponding to the given index.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">nil</span></td>
    <td>Updates this Matrix3, setting the column at index to the given Point3.
        <p><b>Example:</b>
    <pre>
    m1 = Matrix3.Matrix3( {1,2,3}, {4,5,6}, {7,8,9} )
    c = Point3.Point3(10, 11, 12)
    m1:SetCol(1, c)     -- m1 == Matrix3( {1, 10, 3}, {4, 11, 6}, {7, 12, 9} )
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Matrix3 Clone"></a>
<p class="NDLRefMemberFunction">userdata Clone</p>
<p class="NDLRefMemberDescription">Clone the current Matrix3 by making a deep copy.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">Matrix3</span></td>
    <td>Deep copy of this Matrix3.
        <p><b>Example:</b>
    <pre>
    m1 = Matrix3.Matrix3( {1,2,3}, {4,5,6}, {7,8,9} )
    m2 = m1:Clone()  -- deep copy of m1 (not a reference)
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Matrix3 GetEntry"></a>
<p class="NDLRefMemberFunction">number GetEntry(row, col)</p>
<p class="NDLRefMemberDescription">Get the value at (row, col). </p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">number</span></td>
    <td>Get the entry at (row, col). Note: indexes are zero based.
        <p><b>Example:</b>
    <pre>
    m1 = Matrix3.Matrix3( {1,2,3}, {4,5,6}, {7,8,9} )
    local f1 = m1:GetEntry(0,0)  -- 1.000000
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Matrix3 SetEntry"></a>
<p class="NDLRefMemberFunction">nil SetEntry(row, col, number)</p>
<p class="NDLRefMemberDescription">Set the value at (row, col) to number. </p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">nil</span></td>
    <td>Set the entry at (row, col) to number. Note: indexes are zero based.
        <p><b>Example:</b>
    <pre>
    m1 = Matrix3.Matrix3( {1,2,3}, {4,5,6}, {7,8,9} )
    m1:SetEntry(0, 0, 255)  -- m1 = Matrix3( {255, 2, 3}, {4, 5, 6}, {7, 8, 9} )
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Matrix3 MakeZero"></a>
<p class="NDLRefMemberFunction">nil MakeZero</p>
<p class="NDLRefMemberDescription">Set this matrix to the Zero matrix</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">nil</span></td>
    <td>Set this matrix to the zero matrix.
        <p><b>Example:</b>
    <pre>
    m1 = Matrix3.Matrix3( {1,2,3}, {4,5,6}, {7,8,9} )
    m1:MakeZero()  -- m1 == Matrix3.Matrix3_ZERO
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Matrix3 MakeIdentity"></a>
<p class="NDLRefMemberFunction">nil MakeIdentity</p>
<p class="NDLRefMemberDescription">Set this matrix to the identity matrix</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">nil</span></td>
    <td>Set this matrix to the identity matrix.
        <p><b>Example:</b>
    <pre>
    m1 = Matrix3.Matrix3( {1,2,3}, {4,5,6}, {7,8,9} )
    m1:MakeIdentity()  -- m1 == Matrix3.Matrix3_IDENTITY
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Matrix3 MakeDiagonal"></a>
<p class="NDLRefMemberFunction">nil MakeDiagonal(number d1, number d2, number d3)</p>
<p class="NDLRefMemberDescription">Set this matrix to a pure diagonal matrix with the specified diagonal entries.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">nil</span></td>
    <td>Set this matrix to a pure diagonal matrix with the specified diagonal entries.
        <p><b>Example:</b>
    <pre>
    m1 = Matrix3.Matrix3()
    m1:MakeDiagonal(1, 2, 3)  -- m1 == Matrix3({1, 0, 0}, {0, 2, 0}, {0, 0, 3})
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Matrix3 MakeXRotation"></a>
<p class="NDLRefMemberFunction">nil MakeXRotation(number radian)</p>
<p class="NDLRefMemberDescription">Rotate this matrix3 around the X-axis by radian degrees.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">nil</span></td>
    <td>Rotate this matrix3 around the X-axis by radian degrees.
        <p><b>Example:</b>
    <pre>
    m1 = Matrix3.Matrix3()
    m1:MakeXRotation(HALF_PI)  -- m1 = Matrix3({1.0, 0.0, 0.0}, {0, cos(HALF_PI), sin(HALF_PI)}, {0, -sin(HALF_PI), cos(HALF_PI)})
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Matrix3 MakeYRotation"></a>
<p class="NDLRefMemberFunction">nil MakeYRotation(number radian)</p>
<p class="NDLRefMemberDescription">Rotate this matrix3 around the Y-axis by radian degrees.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">nil</span></td>
    <td>Rotate this matrix3 around the Y-axis by radian degrees.
        <p><b>Example:</b>
    <pre>
    m1 = Matrix3.Matrix3()   
    m1:MakeYRotation(HALF_PI)  -- m1 = Matrix3({cos(HALF_PI), 0, -sin(HALF_PI)}, {0.0, 1.0, 0.0}, {sin(HALF_PI), 0.0, cos(HALF_PI})
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Matrix3 MakeZRotation"></a>
<p class="NDLRefMemberFunction">nil MakeZRotation(number radian)</p>
<p class="NDLRefMemberDescription">Rotate this matrix3 around the Z-axis by radian degrees.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">nil</span></td>
    <td>Rotate this matrix3 around the Z-axis by radian degrees.
        <p><b>Example:</b>
    <pre>
    m1 = Matrix3.Matrix3()   
    m1:MakeZRotation(HALF_PI)  -- m1 = Matrix3( {cos(HALF_PI), sin(HALF_PI), 0.0}, {-sin(HALF_PI), cos(HALF_PI), 0.0}, {0.0, 0.0, 1.0})
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Matrix3 Multiply"></a>
<p class="NDLRefMemberFunction">userdata *</p>
<p class="NDLRefMemberDescription">Multiply two Matrix3 values.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">Matrix3</span></td>
    <td>Result of the matrix3 multiplication.
        <p><b>Example:</b>
    <pre>
    m1 = Matrix3.Matrix3({1,2,3},{4,5,6},{7,8,9})
    m2 = Matrix3.Matrix3{(1,2,3},{4,5,6},{7,8,9})
    m3 = m1 * m2
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Matrix3 Addition"></a>
<p class="NDLRefMemberFunction">userdata +</p>
<p class="NDLRefMemberDescription">Add two Matrix3 values.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">Matrix3</span></td>
    <td>Result of the matrix3 addition.
        <p><b>Example:</b>
    <pre>
    m1 = Matrix3.Matrix3({1,2,3},{4,5,6},{7,8,9})
    m2 = Matrix3.Matrix3{(1,2,3},{4,5,6},{7,8,9})
    m3 = m1 + m2
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Matrix3 Subtraction"></a>
<p class="NDLRefMemberFunction">userdata -</p>
<p class="NDLRefMemberDescription">Subtract two Matrix3 values.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">Matrix3</span></td>
    <td>Result of the matrix3 subtraction.
        <p><b>Example:</b>
    <pre>
    m1 = Matrix3.Matrix3({1,2,3},{4,5,6},{7,8,9})
    m2 = Matrix3.Matrix3{(1,2,3},{4,5,6},{7,8,9})
    m3 = m1 - m2
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Matrix3 ScalarMultiply"></a>
<p class="NDLRefMemberFunction">userdata ScalarMultiply(number)</p>
<p class="NDLRefMemberDescription">Create a new Matrix3 as a scalar multiple of this Matrix3.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">Matrix3</span></td>
    <td>Result of the matrix3 scalar multiplication.
        <p><b>Example:</b>
    <pre>
    m1 = Matrix3.Matrix3({1,2,3},{4,5,6},{7,8,9})
    m2 = m1:ScalarMultiply(10)  -- m2 == Matrix3({10,20,30},{40,50,60},{70,80,90})
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Matrix3 Inverse"></a>
<p class="NDLRefMemberFunction">userdata Inverse()</p>
<p class="NDLRefMemberDescription">Calculate the inverse matrix3 for this Matrix3.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">Matrix3</span></td>
    <td>Inverse matrix.
        <p><b>Example:</b>
    <pre>
    m1 = Matrix3.Matrix3({1,2,3},{4,5,6},{7,8,9})
    m2 = m1:Inverse()
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Matrix3 Transpose"></a>
<p class="NDLRefMemberFunction">userdata Inverse()</p>
<p class="NDLRefMemberDescription">Calculate the transpose matrix3 for this Matrix3.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">Matrix3</span></td>
    <td>Transpose matrix.
        <p><b>Example:</b>
    <pre>
    m1 = Matrix3.Matrix3({1,2,3},{4,5,6},{7,8,9})
    m2 = m1:Transpose()
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Matrix3 ExtractAngleAndAxis"></a>
<p class="NDLRefMemberFunction">number, number, number, number ExtractAngleAndAxis(tmp1, tmp2, tmp3, tmp4)</p>
<p class="NDLRefMemberDescription">Converts this matrix to an angle-axis rotation. Note: this matrix3 must
be a rigid, normalized matrix.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">number</span></td>
        <td>Resulting angle in radians</td></tr>
    <tr><td width="20%"><span class="NDLSystemFont">number</span></td>
        <td>The x component of the axis</td></tr>
    <tr><td width="20%"><span class="NDLSystemFont">number</span></td>
        <td>The y component of the axis</td></tr>
    <tr><td width="20%"><span class="NDLSystemFont">number</span></td>
        <td>The z component of the axis
                <p><b>Example:</b>
    <pre>
    m1 = Matrix3.Matrix3({1,2,3},{4,5,6},{7,8,9})
    rads = 0.0
    x = 0.0
    y = 0.0
    z = 0.0
    rads, x, y, z = m1:ExtractAngleAndAxis(rads, x, y, z)
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Matrix3 ToEulerAnglesXYZ"></a>
<p class="NDLRefMemberFunction">boolean, x, y, z ToEulerAnglesXYZ(tmpx, tmpy, tmpz)<br/>
boolean, x, z, y ToEulerAnglesXZY(tmpx, tmpz, tmpy)<br/>
boolean, y, x, z ToEulerAnglesYXZ(tmpy, tmpx, tmpz)<br/>
boolean, y, z, x ToEulerAnglesYZX(tmpy, tmpz, tmpx)<br/>
boolean, z, x, y ToEulerAnglesZXY(tmpz, tmpx, tmpy)<br/>
boolean, z, y, x ToEulerAnglesZYX(tmpz, tmpy, tmpx)<br/></p>

<p class="NDLRefMemberDescription">Converts the matrix to a series of rotations around the specified
axes which indicate some ordering of X, Y, and Z. The matrix must be orthonormal in order for these
functions to return meaningful results. Returns true if there was a unique factorization, false
otherwise.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">boolean</span></td>
        <td>True if there was a unique factorization, false otherwise.</td></tr>
    <tr><td width="20%"><span class="NDLSystemFont">number</span></td>
        <td>X angle</td></tr>
    <tr><td width="20%"><span class="NDLSystemFont">number</span></td>
        <td>Y Angle</td></tr>
    <tr><td width="20%"><span class="NDLSystemFont">number</span></td>
        <td>Z Angle
                <p><b>Example:</b>
    <pre>
    m1 = Matrix3.Matrix3({1,2,3},{4,5,6},{7,8,9})
    unique = 0.0
    x = 0.0
    y = 0.0
    z = 0.0
    rads, x, y, z = m1:ToEulerAnglesXYZ(x, y, z)
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Matrix3 FromEulerAnglesXYZ"></a>
<p class="NDLRefMemberFunction">nil FromEulerAnglesXYZ(xAngle, yAngle, zAngle)<br/>
nil FromEulerAnglesXZY(xAngle, zAngle, yAngle)<br/>
nil FromEulerAnglesYXZ(yAngle, xAngle, zAngle)<br/>
nil FromEulerAnglesYZX(yAngle, zAngle, xAngle)<br/>
nil FromEulerAnglesZXY(zAngle, xAngle, yAngle)<br/>
nil FromEulerAnglesZYX(zAngle, yAngle, xAngle)<br/></p>
<p class="NDLRefMemberDescription">Builds the matrix from the series off rotations around the specified
axes indicated by the method signature.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">nil</span></td>
    <td>This matrix3 is updated to correspond to the provided rotations.
        <p><b>Example:</b>
    <pre>
    m1 = Matrix3.Matrix3( {1,2,3}, {4,5,6}, {7,8,9} )
    m1:FromEulerAnglesXYZ(1.0, 1.25, 2.1)
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Matrix3 Reorthogonalize"></a>
<p class="NDLRefMemberFunction">boolean Reorthogonalize()</p>
<p class="NDLRefMemberDescription">This routine should only be applied to rotation matrices. It implements
        Gram-Schmidt orthogonalization (the QR algorithm) and replaces the old
        rotation matrix with the orthogonal part Q of the decomposition.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">boolean</span></td>
    <td>True if the orthogonalization was successful, false otherwise.
        <p><b>Example:</b>
    <pre>
    m1 = Matrix3.Matrix3( {1,2,3}, {4,5,6}, {7,8,9} )
    b = m1:Reorthogonalize()
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Matrix3 TransposeTimes"></a>
<p class="NDLRefMemberFunction">Matrix3 TransposeTimes(Matrix3)</p>
<p class="NDLRefMemberDescription">Computes the transpose of this matrix multiplied with the specified
        matrix.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">Matrix3</span></td>
    <td>A new matrix containing the product of the transpose of this
            matrix with the specified matrix.
        <p><b>Example:</b>
    <pre>
    m1 = Matrix3.Matrix3( {1,2,3}, {4,5,6}, {7,8,9} )
    m2 = Matrix3.Matrix3( {1,0,0}, {0,2,0}, {0,0,-3) )
    m3 = m1:TransposeTimes(m2)
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<p class="NDLRefMemberFunction">Matrix3 Congruence(Matrix3 rot)</p>
<p class="NDLRefMemberDescription">Computes the congruence transformation rot*this*Transpose(rot).  The
        matrix 'rot' must be orthogonal.  The congruence transformation is
        a special form of a similarity transformation mat*this*Inverse(mat)
        where 'mat' can be any invertible matrix. For Transpose(rot)*this*rot, use rot.TransposeTimes(mat)*rot.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">Matrix3</span></td>
    <td>A new matrix containing the resulting calculation.
        <p><b>Example:</b>
    <pre>
    m1 = Matrix3.Matrix3( {1,2,3}, {4,5,6}, {7,8,9} )
    m2 = Matrix3.Matrix3( {1,0,0}, {0,2,0}, {0,0,-3) )
    m3 = m1:Congruence(m2)
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Matrix3 tostring"></a>
<p class="NDLRefMemberFunction">string tostring(Matrix3)</p>
<p class="NDLRefMemberDescription">Generate a friendly string for the given Matrix3, in the form
"Matrix3({c0r0, c0r1, c0r2}, {c1r0, c1r1, c1r2}, {c2r0, c2r1, c2r2})</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">nil</span></td>
    <td>Friendly string for the given Matrix3.
        <p><b>Example:</b>
    <pre>
    m1 = Matrix3.Matrix3( {1,2,3}, {4,5,6}, {7,8,9} )
    local s = tostring(m1)
    -- s == Matrix3({1.000000, 2.00000, 3.000000}, {4.000000, 5.000000, 6.000000}, {7.000000, 8.000000, 9.000000})
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<p class="NDLHeadingRelatedTopic">
    Related topics</p>
</div>

<ul>
    <li><a href="../../Reference/efd/efd__Matrix3.htm">efd::Matrix3</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
