<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>bapiPhysXBase</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Build" content="PhysX" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">bapiPhysXBase</p>

<p class="NDLRefHead1">Description</p>

<p>The bapiPhysXBase bindings provide access to the egfPhysX library, allowing scripts to control
    simulation, access PhysX time, and set up collision groups.</p>

<p class="NDLRefHead1">Library Functions</p>

<a name="StartSimulating" id="StartSimulating"></a>
<p class="NDLRefMemberFunction">boolean StartSimulating(<br/>
string sceneName<br/>
number time)</p>

<p class="NDLRefMemberDescription">This method will start simulation on the scene with the specified
    start time. If time is less than 0, use the last fetch time. If there is no last fetch time, use
    the scheduler's current time. NOTE: no simulation will occur before this method is called.
    Return true if the scene with the specified name is found, otherwise return false.</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">sceneName</span></td>

                <td>Name of the scene to start simulating.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">time (Optional)</span></td>

                <td>Time at which to start; negative to use last fetch time or, if no valid fetch
                    time, scheduler's current time. Defaults to using last fetch time.</td>
            </tr>
        </tbody>
    </table>

    <table>
        <thead>
            <tr>
                <th>Return Value</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">boolean</span></td>

                <td>Returns false if named scene can not be found.</td>
            </tr>
        </tbody>
    </table>
</div>

<p class="NDLRefMemberFunction">boolean StartSimulating(<br/>
integer sceneId<br/>
number time)</p>

<p class="NDLRefMemberDescription">This method will start simulation on the scene with the specified
    start time. If time is less than 0, use the last fetch time. If there is no last fetch time,
    use the scheduler's current time. If a scene with the specified entity ID does not exist and the
    entity mixes in the PhysXScene model, a scene will be created. NOTE: no simulation will occur
    before this method is called. Return true if the scene with the specified ID is found or can be
    created, otherwise return false.</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">sceneId</span></td>

                <td>ID of the scene to start simulating.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">time (Optional)</span></td>

                <td>Time at which to start; negative to use last fetch time or, if no valid fetch
                    time, scheduler's current time. Defaults to using last fetch time.</td>
            </tr>
        </tbody>
    </table>

    <table>
        <thead>
            <tr>
                <th>Return Value</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">boolean</span></td>

                <td>Returns false if scene can not be found or created.</td>
            </tr>
        </tbody>
    </table>
</div>

<a name="StopSimulating" id="StopSimulating"></a>
<p class="NDLRefMemberFunction">bool StopSimulating(<br/>
string sceneName)</p>

<p class="NDLRefMemberDescription">Stop simulation on the specified scene. Simulation will only run
    again when StartSimulating is called. Return true if the scene is found. Otherwise, return
    false.</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">sceneName</span></td>

                <td>Name of the scene to stop simulating.</td>
            </tr>
        </tbody>
    </table>

    <table>
        <thead>
            <tr>
                <th><span class="NDLSystemFont">Return
                Value</span></th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">boolean</span></td>

                <td>Returns false if scene can not be found.</td>
            </tr>
        </tbody>
    </table>
</div>


<p class="NDLRefMemberFunction">bool StopSimulating(<br/>
integer sceneId)</p>

<p class="NDLRefMemberDescription">Stop simulation on the specified scene. Simulation will only run
    again when StartSimulating is called. Return true if the scene is found, otherwise return
    false.</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">sceneId</span></td>

                <td>ID of the scene to stop simulating.</td>
            </tr>
        </tbody>
    </table>

    <table>
        <thead>
            <tr>
                <th>Return Value</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">boolean</span></td>

                <td>Returns false if scene can not be found.</td>
            </tr>
        </tbody>
    </table>
</div>

<a name="GetCurrentPhysXTime" id="GetCurrentPhysXTime"></a>
<p class="NDLRefMemberFunction">number GetCurrentPhysXTime(<br/>
string sceneName)</p>

<p class="NDLRefMemberDescription">Returns the last time used in simulation. If the scene is not
    found, return kINVALID_SIMULATION_TIME (-1.0).</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">sceneName</span></td>

                <td>Name of scene to query.</td>
            </tr>
        </tbody>
    </table>

    <table>
        <thead>
            <tr>
                <th>Return Value</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">number</span></td>

                <td>Current time in that scene, or -1.0 if not found.</td>
            </tr>
        </tbody>
    </table>
</div>

<p class="NDLRefMemberFunction">number GetCurrentPhysXTime(<br/>
integer sceneId)</p>

<p class="NDLRefMemberDescription">Returns the last time used in simulation. If the scene is not
    found, return kINVALID_SIMULATION_TIME (-1).</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">sceneId</span></td>

                <td>ID of scene to query.</td>
            </tr>
        </tbody>
    </table>

    <table>
        <thead>
            <tr>
                <th>Return Value</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">number</span></td>

                <td>Current time in that scene, or -1 if not found.</td>
            </tr>
        </tbody>
    </table>
</div>

<a name="GetGroupCollisionFlag" id="GetGroupCollisionFlag"></a>
<p class="NDLRefMemberFunction">boolean, boolean GetGroupCollisionFlag(<br/>
string sceneName,<br/>
integer group1,<br/>
integer group2)</p>

<p class="NDLRefMemberDescription">Sets the value of isEnabled to the value of the collision flag
    for the specified groups. Return true if the scene is found and the groups are valid, otherwise
    return false.</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">sceneName</span></td>

                <td>Name of the scene to query.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">group1</span></td>

                <td>Group ID (0-31).</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">group2</span></td>

                <td>Group ID (0-31).</td>
            </tr>

        </tbody>
    </table>

    <table>
        <thead>
            <tr>
                <th>Return Value</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">boolean</span></td>
                <td>Returns true if the scene is found and the groups are valid.</td>
            </tr>
            <tr>
                <td><span class="NDLSystemFont">boolean</span></td>
                <td>True if the specified groups collide, false otherwise.</td>
            </tr>
        </tbody>
    </table>
</div>

<p class="NDLRefMemberFunction">boolean, boolean GetGroupCollisionFlag(<br/>
integer sceneId,<br/>
integer group1,<br/>
integer group2)</p>

<p class="NDLRefMemberDescription">Sets the value of isEnabled to the value of the collision flag
    for the specified groups. Return true if the scene is found and the groups are valid, otherwise
    return false.</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">sceneId</span></td>

                <td>ID of the scene to query.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">group1</span></td>

                <td>Group ID (0-31).</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">group2</span></td>

                <td>Group ID (0-31).</td>
            </tr>
        </tbody>
    </table>

    <table>
        <thead>
            <tr>
                <th>Return Value</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">boolean</span></td>

                <td>Returns true if the scene is found and the groups are valid.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">boolean</span></td>

                <td>True if the two groups collide with one another, false otherwise.</td>
            </tr>
        </tbody>
    </table>
</div>

<a name="SetGroupCollisionFlag" id="SetGroupCollisionFlag"></a>
<p class="NDLRefMemberFunction">boolean SetGroupCollisionFlag(<br/>
string sceneName,<br/>
integer group1,<br/>
integer group2,<br/>
boolean isEnabled)</p>

<p class="NDLRefMemberDescription">Method to set the collision flag between two collision groups in
    a scene. Return true if the scene is found and the groups are valid, otherwise return false.</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">sceneName</span></td>

                <td>Name of the scene to query.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">group1</span></td>

                <td>Group ID (0-31).</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">group2</span></td>

                <td>Group ID (0-31).</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">isEnabled</span></td>

                <td>True if the two groups should collide with one another.</td>
            </tr>
        </tbody>
    </table>

    <table>
        <thead>
            <tr>
                <th>Return Value</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">Valid</span></td>

                <td>Returns true if the scene is found and the groups are valid.</td>
            </tr>
        </tbody>
    </table>
</div>

<p class="NDLRefMemberFunction">boolean SetGroupCollisionFlag(<br/>
integer sceneId,<br/>
integer group1,<br/>
integer group2,<br/>
boolean isEnabled)</p>

<p class="NDLRefMemberDescription">Method to set the collision flag between two collision groups in
    a scene. If a scene with the specified entity ID does not exist and the entity mixes in the
    PhysXScene model, a scene will be created. Return true if the scene is found or created and the
    groups are valid, otherwise return false.</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">sceneId</span></td>

                <td>ID of the scene to query.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">group1</span></td>

                <td>Group ID (0-31).</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">group2</span></td>

                <td>Group ID (0-31).</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">isEnabled</span></td>

                <td>True if the two groups should collide with one another.</td>
            </tr>
        </tbody>
    </table>

    <table>
        <thead>
            <tr>
                <th>Return Value</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">boolean</span></td>

                <td>Returns true if the scene is found and the groups are valid.</td>
            </tr>
        </tbody>
    </table>
</div>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
