<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">
 
<html>
<head>

<title>Lua Scripting Overview</title>

<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>

<!--(Begin Body)================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
        WriteNavLink(2);
</script>

<h1>Lua Scripting Overview</h1>

<p>As a Lua scripter who is working with Gamebryo LightSpeed, you will be creating
<em>behaviors</em> running on <em>entities</em> that call <em>built-in API methods</em> to interact
with the Game Framework.</p>

<h2>Behaviors</h2>

<p>A Lua behavior is simply a function with a specific signature and naming convention. The
<a href="../../Tools/EntityModelingTool/emt_intro.htm">Entity Modeling Tool</a> is used to define
the behaviors that exist on models. The model name determines the script file name and the function
name must match the given behavior name.</p>

<p>The following sections contain more information about behaviors:</p>

<ul>
    <li><a href="../../Programmer/Behaviors/behavior_intro.htm">Working with Behaviors</a></li>

    <li><a href="../../Programmer/Behaviors/behavior_features.htm">Behavior features</a></li>

    <li><a href="../../Programmer/Behaviors/behavior_creating.htm">Creating behaviors</a></li>

    <li><a href="../../Programmer/Behaviors/behavior_invoking.htm">Invoking behaviors</a></li>

    <li><a href="../../Programmer/Behaviors/behavior_modifying.htm">Modifying behaviors</a></li>

    <li><a href="../../Programmer/Behaviors/behavior_invoke_order.htm">Behavior invocation
    order</a></li>

    <li><a href="../../Programmer/Behaviors/behavior_passing_values_between.htm">Passing values
    between scripted behaviors</a></li>

    <li><a href="../../Programmer/Behaviors/behavior_limitations.htm">Behavior limitations</a></li>
</ul>

<h2>Entities</h2>

<p>An entity is a data-driven collection of properties and behaviors. Behaviors always run in the
context of a specific entity, but they can also interact with other entities. You can read and
write entity properties to implement game logic.</p>

<p>The following sections contain more information about entities:</p>

<ul>
    <li><a href="../../Programmer/Entities/entity_how_work.htm">How entities work</a></li>

    <li><a href="../../Programmer/Entities/entity_creating.htm">Creating entities</a></li>

    <li><a href="../../Programmer/Entity_Interaction/entity_interaction_examples.htm">Entity
    interaction examples</a></li>

    <li><a href="../../Programmer/Entity_Properties/entity_property_how_work.htm">How entity
    properties work</a></li>

    <li><a href="../../Programmer/Entity_Properties/entity_property_using.htm">Using entity
    properties</a></li>

    <li><a href="../../Programmer/Entity_Properties/entity_property_best_practice.htm">Best
    practices for working with entity properties</a></li>
</ul>

<h2>Built-in API</h2>

<p>Built-in methods are C++ functions that are wrapped so that they can be called from Lua. The
built-in API is the set of all available built-in methods that you can call from behaviors. These
methods are divided into multiple built-in API libraries.</p>

<p>There are several built-in API libraries that come standard with LightSpeed. Different
applications with different needs should use only those modules that correspond to the system
services used by the application. In addition, many applications will want to add their own built-in
API libraries.</p>

<table>
    <thead>
        <tr>
            <th>Built-in API library</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><a href="../../Programmer/Scripting/lua_lib_BehaviorAPI.htm">BehaviorAPI</a></td>

            <td>General build-ins for working with entities and behaviors. This module is always
                pre-loaded so there is no need to <em>require</em> it.</td>
        </tr>

        <tr>
            <td><a href="../../Programmer/Scripting/lua_lib_Entity.htm">Entity</a></td>

            <td>General build-ins for working with entity properties and built-in functions. This module is always
                pre-loaded so there is no need to <em>require</em> it. Instances of the Entity proxy object
				are automatically created when an Entity or EntityID is passed from C++ to Lua.</td>
        </tr>
		
        <tr>
            <td><a href="../../Programmer/Scripting/lua_lib_DataStream.htm">ParameterList</a></td>

            <td>Contains only a single method (also called ParameterList) for creating new
                ParameterList objects. This module is always loaded.</td>
        </tr>

        <tr>
            <td><a href="../../Programmer/Scripting/lua_lib_ecr.htm">ecr</a></td>

            <td>Built-in methods for interaction with the SceneGraph service including features
            such as entity attachment.</td>
        </tr>

        <tr>
            <td><a href=
            "../../Programmer/Scripting/lua_lib_bapiPhysXBase.htm">bapiPhysXBase</a></td>

            <td>This module deals with methods related to the PhysX scene and our PhysX trigger
            support.</td>
        </tr>

        <tr>
            <td><a href="../../Programmer/Scripting/lua_lib_Point2.htm">Point2</a></td>

            <td>This version of the Point2 module includes most of the methods from the efd::Point2
            class, bound directly in Lua.</td>
        </tr>
        
        <tr>
            <td><a href="../../Programmer/Scripting/lua_lib_Point3.htm">Point3</a></td>

            <td>This version of the Point3 module includes most of the methods from the efd::Point3
            class, bound directly in Lua.</td>
        </tr>
        
        <tr>
            <td><a href="../../Programmer/Scripting/lua_lib_Point4.htm">Point4</a></td>

            <td>This version of the Point4 module includes most of the methods from the efd::Point4
            class, bound directly in Lua.</td>
        </tr>        
        
        <tr>
            <td><a href="../../Programmer/Scripting/lua_lib_Color.htm">Color</a></td>

            <td>This version of the Color module includes most of the methods from the efd::Color
            class, bound directly in Lua.</td>
        </tr>

        <tr>
            <td><a href="../../Programmer/Scripting/lua_lib_ColorA.htm">ColorA</a></td>

            <td>This version of the Color module includes most of the methods from the efd::ColorA
            class, bound directly in Lua.</td>
        </tr>
        
        <tr>
            <td><a href="../../Programmer/Scripting/lua_lib_Matrix3.htm">Matrix3</a></td>

            <td>This version of the Color module includes most of the methods from the efd::Matrix3
            class, bound directly in Lua.</td>
        </tr>
        
        <tr>
            <td><a href="../../Programmer/Scripting/lua_lib_Quaternion.htm">Quaternion</a></td>

            <td>This version of the Color module includes most of the methods from the efd::Quaternion
            class, bound directly in Lua.</td>
        </tr>        
        
        <tr>
            <td><a href="../../Programmer/Scripting/lua_lib_PhysX.htm">PhysX</a></td>

            <td>This version of the PhysX module includes all of the methods from the bapiPhysXBase
            and adds a few methods for applying forces and manipulating the PhysX state.</td>
        </tr>

        <tr>
            <td><a href="../../Programmer/Scripting/lua_lib_egmTerrain.htm">egmTerrain</a></td>

            <td>For interaction with egmTerrain::TerrainService.</td>
        </tr>

        <tr>
            <td><a href="../../Programmer/Scripting/lua_lib_egmAnimation.htm">egmAnimation</a></td>

            <td>For interaction with egmAnimation::AnimationService.</td>
        </tr>

        <tr>
            <td><a href="../../Programmer/Scripting/lua_lib_bapiOnline.htm">bapiOnline</a></td>

            <td>Built-in APIs for multi-process games and entity replication.</td>
        </tr>
    </tbody>
</table>

<p>The following sections contain more information about built-ins:</p>

<ul>
    <li><a href="../../Programmer/Builtins/builtin_how_work.htm">How custom built-ins work</a></li>

    <li><a href="../../Programmer/Builtins/builtin_scripting.htm">Using built-ins from
    script</a></li>

    <li><a href="../../Programmer/Builtins/builtin_passing_scripts_cpp.htm">Passing values between
    C++ built-ins and scripting languages</a></li>

    <li><a href="../../Programmer/Builtins/builtin_custom_expose_lua.htm">Exposing custom built-ins
    to Lua</a></li>

    <li><a href="../../Programmer/Builtins/builtin_limitations.htm">Built-in limitations</a></li>
</ul>

<h2>Debugging behaviors</h2>

<p>After you familiarize yourself with the basics of behaviors, entities, and built-in methods, the
next challenge is to debug your scripts. LightSpeed enables you to rapidly iterate on script
changes. This enables you to write scripts, debug and refine them, and push your updates to an
already running program. In addition, a Lua script debugger is included. This debugger allows you
to place break-points and step through your scripts line by line.</p>

<ul>
    <li><a href=
    "../../Tools/ScriptDebugger/efr_script_debugger_interactive_debug.htm">Interactively debugging
    your behavior scripts using the Script Debugger</a></li>

    <li><a href="../../Programmer/Entities/entity_debugging.htm">Debugging entities</a></li>

    <li><a href="../../Programmer/Behaviors/behavior_troubleshoot.htm">Troubleshooting
    behaviors</a></li>
</ul>

<h2>Special Lua Considerations</h2>

<p>There are a few special considerations to keep in mind when coding Lua scripts:</p>

<ul>
    <li>You can call <span class="NDLSystemFont">require</span> to load additional Lua modules
    including most of the standard modules. This will load the requested module synchronously. 
	It is recommended that these modules be moved into your
    asset web so that they can be asynchronously loaded using SchedulerLua::PreloadModule instead.</li>

    <li>Most behaviors are executed using Lua coroutines. Some older Lua libraries may not be
    compatible with coroutine usage so we recommend being careful as to what modules are used.</li>

    <li>The <span class="NDLSystemFont">table.foreach()</span> Lua method is deprecated in Lua 5.1
    and should not be used. This method is not compatible with coroutines and can result in a crash
    if used. Instead use the <span class="NDLSystemFont">pairs</span> or <span class=
    "NDLSystemFont">ipairs</span> method with a <span class="NDLSystemFont">for</span> loop.</li>

    <li>Performing expensive operations such as blocking file I/O from Lua is not recommended.</li>

    <li>For complex and/or performance critical operations, consider calling a custom C++ built-in
    API from your script rather than implementing the entire operation in script. Even entire
    behaviors can be converted into C++ behaviors for performance once the implementation has been
    finalized.</li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
