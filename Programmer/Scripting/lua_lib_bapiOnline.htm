<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>bapiOnline</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="FSO" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">bapiOnline</p>

<p class="NDLRefHead1">Description</p>

<p>This built-in API library contains methods for controlling entity replication and other
    multiplayer game functionality. It interacts with the ReplicationService and OnlineEntityManager
    system services and with online specific entity classes.</p>

<p class="NDLRefHead1">Library Functions</p>

<!-- ========================================================================================== -->
<a name="FindAllEntitiesByReplicationCategory" id="FindAllEntitiesByReplicationCategory"></a>

<p class="NDLRefMemberFunction">number, table FindAllEntitiesByReplicationCategory(<br/>
integer category)</p>

<p class="NDLRefMemberDescription">Creates a list of all Entities that are published into the given
    Category. This includes both producing entities that produce to this category and consumer
    entities which are replicated to this process because they use that category.</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">category</span></td>
                <td>The efd::Category to which the interesting Entities are being published.</td>
            </tr>
        </tbody>
    </table>

    <table>
        <thead>
            <tr>
                <th>Return Value</th>
                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">number</span></td>
                <td>The number of entities that were found.</td>
            </tr>
            <tr>
                <td><span class="NDLSystemFont">table</span></td>
                <td>A table used as an array of numbers. Each table index contains the EntityID of
                a found entity.</td>
            </tr>
        </tbody>
    </table>
</div>

<!-- ========================================================================================== -->
<a name="FindAllReplicatedEntities" id="FindAllReplicatedEntities"></a>

<p class="NDLRefMemberFunction">number, table FindAllReplicatedEntities()</p>

<p class="NDLRefMemberDescription">Find all entities that are replicated to this process. Similar
    to BehaviorAPI::FindAllEntities only it excludes entities that are locally owned. Calling
    this function might be extremely expensive for a typical application with a large number of
    replicated entities and should normally be avoided. This method can be useful for debugging.</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Return Value</th>
                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">number</span></td>
                <td>The number of entities that were found.</td>
            </tr>
            <tr>
                <td><span class="NDLSystemFont">table</span></td>
                <td>A table used as an array of numbers. Each table index contains the EntityID of
                    a found entity.</td>
            </tr>
        </tbody>
    </table>
</div>

<!-- ========================================================================================== -->
<a name="GetNetID" id="GetNetID"></a>
<p class="NDLRefMemberFunction">number GetNetID()</p>

<p class="NDLRefMemberDescription">Get the NetID for this process from the Net Service. The NetID
    starts with a default value and changes to a globally unique value when the process joins a
    channel manager. If connection to the channel manager is lost this will change back to the
    default value. Multiprocess applications can use this value to generate unique categories for
    their process but must pay attention to the connection state.</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Return Value</th>
                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">number</span></td>
                <td>The NetID value.</td>
            </tr>
        </tbody>
    </table>
</div>

<!-- ========================================================================================== -->
<a name="GetReplicationCategory" id="GetReplicationCategory"></a>

<p class="NDLRefMemberFunction">integer GetReplicationCategory(<br/>
integer entityID<br/>
number groupIndex)</p>

<p class="NDLRefMemberDescription">Get the category to which the specified replication group for
    the given entity is published. This can be called on either the publishing entity or on a
    replica of that entity.</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">entityID</span></td>
                <td>The entity id of the entity to query.</td>
            </tr>
            <tr>
                <td><span class="NDLSystemFont">groupIndex</span></td>
                <td>The replication group to check. Valid range is 0 to 31 inclusive.</td>
            </tr>
        </tbody>
    </table>

    <table>
        <thead>
            <tr>
                <th>Return Value</th>
                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">integer</span></td>
                <td>The efd::Category value being used by the specified entity for the given group.
                    Zero is returned if the entity is not found or the group is invalid.</td>
            </tr>
        </tbody>
    </table>
</div>

<!-- ========================================================================================== -->
<a name="GetVirtualProcessId" id="GetVirtualProcessId"></a>
<p class="NDLRefMemberFunction">number GetVirtualProcessId()</p>

<p class="NDLRefMemberDescription">Retrieves the current Virtual Process ID from the Service
    Manager. This is usually the same as the NetID, but may differ when using rapid iteration based
    on the order of connection to Toolbench verse the channel manager. The last connection
    established determines the virtual process ID but only the channel manager connection effects
    the NetID.</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Return Value</th>
                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">number</span></td>
                <td>The virtual process id.</td>
            </tr>
        </tbody>
    </table>
</div>


<!-- ========================================================================================== -->
<a name="SubscribeReplicationChannel" id="SubscribeReplicationChannel"></a>
<p class="NDLRefMemberFunction">nil SubscribeReplicationChannel(<br/>
integer categoryToJoin)</p>

<p class="NDLRefMemberDescription">Causes the local ReplicationService to subscribe to the specified
    replication category. This will cause any remote entity publishing to that category to be
    replicated to this process. There must eventually be one matching call to
    UnsubscribeReplicationChannel method for every call to SubscribeReplicationChannel or else
    subscription references will be leaked causing unused data to remain in the current process.</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">categoryToJoin</span></td>
                <td>The category for the replication service to subscribe to.</td>
            </tr>
        </tbody>
    </table>
</div>

<!-- ========================================================================================== -->
<a name="UnsubscribeReplicationChannel" id="UnsubscribeReplicationChannel"></a>

<p class="NDLRefMemberFunction">nil UnsubscribeReplicationChannel(<br/>
integer categoryToLeave)</p>

<p class="NDLRefMemberDescription">Causes the local ReplicationService to unsubscribe from the
    specified replication category. This will cause any replica entities that are replicated to
    this process only using the given category to be cleanly removed. There must be one matching
    call to UnsubscribeReplicationChannel method for every call to SubscribeReplicationChannel or
    else subscription references will be leaked.</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">categoryToLeave</span></td>
                <td>The category for the replication service to unsubscribe from.</td>
            </tr>
        </tbody>
    </table>
</div>

<!-- ========================================================================================== -->
<a name="SendLocalViewEvent" id="SendLocalViewEvent"></a>

<p class="NDLRefMemberFunction">boolean SendLocalViewEvent(<br/>
integer targetEntity<br />
string behaviorName<br />
ParameterList arguments<br />
number delay)</p>

<p class="NDLRefMemberDescription">Sends a view behavior invocation request to the given local
    replica entity. Only the local replica, if present, will run the behavior in question. This can
    be used from a running view behavior in order to queue an additional view behavior on the
    current entity, for example.</p>
<p class="NDLRefMemberDetailedDescription">Note that the BehaviorAPI.SendEvent method can only send
    behavior requests to the owned producer entity and not to the replicas of that entity. You must
    use one of the ViewEvent methods to send a behavior to a replica entity. Replica entities
    cannot directly use callback behaviors either as the callback will be invoked on the owned
    entity and not the replica.</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">targetEntity</span></td>
                <td>The ID of the target replica entity.</td>
            </tr>
            <tr>
                <td><span class="NDLSystemFont">behaviorName</span></td>
                <td>The name of the view behavior to execute for this event.</td>
            </tr>
            <tr>
                <td><span class="NDLSystemFont">arguments</span> (Optional)</td>
                <td>The parameters to pass to the new behavior.</td>
            </tr>
            <tr>
                <td><span class="NDLSystemFont">delay</span> (Optional)</td>
                <td>The time in seconds to delay before invoking the behavior.</td>
            </tr>
        </tbody>
    </table>

    <table>
        <thead>
            <tr>
                <th>Return Value</th>
                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">boolean</span></td>
                <td>True if the specified entity exists. A true value does not guarantee that the
                    behavior is valid or will execute.</td>
            </tr>
        </tbody>
    </table>
</div>

<!-- ========================================================================================== -->
<a name="SendViewEvent" id="SendViewEvent"></a>

<p class="NDLRefMemberFunction">boolean SendViewEvent(<br/>
integer eventChannel<br/>
integer targetEntity<br/>
string behaviorName<br/>
ParameterList arguments<br/>
number delay)</p>

<p class="NDLRefMemberDescription">Sends a view behavior invocation request to the given event
    channel on behalf of the given entity. All replicas of that entity which are using the given
    replication channel will attempt to invoke the behavior. Typically the categories used are the
    same categories to which the producer entity replicates, but any category that the Replication
    Service is subscribed to maybe used (for example, any category used with
    SubscribeReplicationChannel).</p>
<p class="NDLRefMemberDetailedDescription">Note that the BehaviorAPI.SendEvent method can only send
    behavior requests to the owned producer entity and not to the replicas of that entity. You must
    use one of the ViewEvent methods to send a behavior to a replica entity. Replica entities
    cannot use callback behaviors either as the callback will be invoked on the owned entity and
    not the replica.</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">eventChannel</span></td>
                <td>The category for sending the event request, typically a replication
                    channel.</td>
            </tr>
            <tr>
                <td><span class="NDLSystemFont">targetEntity</span></td>
                <td>The ID of the target replica entity.</td>
            </tr>
            <tr>
                <td><span class="NDLSystemFont">behaviorName</span></td>
                <td>The name of the view behavior to execute for this event.</td>
            </tr>
            <tr>
                <td><span class="NDLSystemFont">arguments</span> (Optional)</td>
                <td>The parameters to pass to the new behavior.</td>
            </tr>
            <tr>
                <td><span class="NDLSystemFont">delay</span> (Optional)</td>
                <td>The time in seconds to delay before invoking the behavior.</td>
            </tr>
        </tbody>
    </table>

    <table>
        <thead>
            <tr>
                <th>Return Value</th>
                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">boolean</span></td>
                <td>True if the view event was generated and sent. A true value does not guarantee
                    that the event message will be received or a behavior will execute.</td>
            </tr>
        </tbody>
    </table>
</div>

<!-- ========================================================================================== -->
<a name="SetGroupUpdateInterval" id="SetGroupUpdateInterval"></a>
<p class="NDLRefMemberFunction">nil SetGroupUpdateInterval(<br/>
number group,<br/>
number timeDelta)</p>

<p class="NDLRefMemberDescription">Set the default minimum update interval for a replication group.
    Changing this value will effect all entities that are using the specified group starting on the
    next update pass.</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">group</span></td>
                <td>The replication group to set the update interval for.</td>
            </tr>
            <tr>
                <td><span class="NDLSystemFont">timeDelta</span></td>
                <td>The new minimum update delta in seconds.</td>
            </tr>
        </tbody>
    </table>
</div>

<!-- ========================================================================================== -->
<a name="SetReplicationCategory" id="SetReplicationCategory"></a>

<p class="NDLRefMemberFunction">boolean SetReplicationCategory(<br/>
integer entity,<br/>
number group,<br/>
integer category)</p>

<p class="NDLRefMemberDescription">Set the replication group category for the given producer entity.
    The entity will stop producing to the previously set category, which can result in entity loss
    for remote consumers, and then start producing to the new category, which can result in entity
    discovery for remote consumers (remote consumers who consume both the old and new categories
    will not see any loss or discovery). Each producer entity can have up to 32 different
    replication groups each of which can use a different category so you must specify which group
    is being set. Your categorization policy will inform you as to which groups are used for what
    purpose.</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">entity</span></td>
                <td>The entity to set a replication category for.</td>
            </tr>
            <tr>
                <td><span class="NDLSystemFont">group</span></td>
                <td>The replication group to set the Category for.</td>
            </tr>
            <tr>
                <td><span class="NDLSystemFont">category</span></td>
                <td>The replication Category to produce into for the specified entity and group.</td>
            </tr>
        </tbody>
    </table>

    <table>
        <thead>
            <tr>
                <th>Return Value</th>
                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">boolean</span></td>
                <td>True if the specified entity is a valid producer entity which uses the
                    specified replication group, false otherwise.</td>
            </tr>
        </tbody>
    </table>
</div>

<!-- ========================================================================================== -->
<a name="UsesReplicationCategory" id="UsesReplicationCategory"></a>

<p class="NDLRefMemberFunction">boolean UsesReplicationCategory(<br/>
integer entityID,<br />
integer category)</p>

<p class="NDLRefMemberDescription">Determines if the given entity uses the specified replication
    channel for any replication group. This can be called on either the producer entity or on a
    replica of that entity.</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">entityID</span></td>
                <td>The entity to check.</td>
            </tr>
            <tr>
                <td><span class="NDLSystemFont">category</span></td>
                <td>The Category to check for use.</td>
            </tr>
        </tbody>
    </table>

    <table>
        <thead>
            <tr>
                <th>Return Value</th>
                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">boolean</span></td>
                <td>True if the given entity is found and uses the specified category for any
                    replication group.</td>
            </tr>
        </tbody>
    </table>
</div>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
