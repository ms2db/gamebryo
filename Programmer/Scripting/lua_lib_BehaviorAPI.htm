<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>BehaviorAPI</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">BehaviorAPI</p>

<p class="NDLRefHead1">Description</p>

<p>This built-in API library contains methods for interacting with entities and behaviors. It
    interacts with the EntityManager, FlatModelManager, Scheduler, and EntityLoaderService system
    services.</p>

<p class="NDLRefHead1">Library Functions</p>
<!-- ========================================================================================== -->
<a name="BreakIfFalse" id="BreakIfFalse"></a>

<p class="NDLRefMemberFunction">nil BreakIfFalse(<br/>
boolean condition)</p>

<p class="NDLRefMemberDescription">This method acts like a coded
conditional breakpoint. If the passed expression is false, the
behavior debugger will break into execution. If no debugging
session is active, the condition will just be logged.</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">condition</span></td>

                <td>Any object that can be evaluated as a boolean
                value. If the result is either nil or false and
                the Lua behavior debugger is active then this
                will break into the debugger.</td>
            </tr>
        </tbody>
    </table>
</div>
<!-- ========================================================================================== -->
<a name="CallBehavior" id="CallBehavior"></a>

<p class="NDLRefMemberFunction">boolean CallBehavior(<br/>
number targetEntity,<br/>
string behaviorName,<br/>
ParameterList arguments)</p>

<p class="NDLRefMemberDescription">Execute a behavior
immediately. The behavior will be run to completion before this
method returns. The entity on which this behavior is called must
be local and the behavior that is being called must have the
Immediate behavior trait.</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">targetEntity</span></td>
                <td>The EntityID of the target entity. The target entity can be the same as the
                    calling entity.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">behaviorName</span></td>
                <td>The name of the behavior to invoke.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">arguments (Optional)</span></td>
                <td>A ParameterList userdata containing the arguments to the behavior, if any.</td>
            </tr>
        </tbody>
    </table>

    <table>
        <thead>
            <tr>
                <th>Return Value</th>
                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">boolean</span></td>
                <td>True if the behavior was invoked, which does not imply that the behavior
                    succeeded.</td>
            </tr>
        </tbody>
    </table>
</div>
<!-- ========================================================================================== -->
<a name="CreateCategory" id="CreateCategory"></a>

<p class="NDLRefMemberFunction">number CreateCategory(<br/>
number usage,<br/>
number netID,<br/>
number baseID)</p>

<p class="NDLRefMemberDescription">Creates a new efd::Category ID
from its base components and returns the value. The resulting
category can be used in methods such as SubscribeToCategory and
SendStream.</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">usage</span></td>

                <td>
                    One of the following values depending on the
                    expected usage pattern of the generated
                    category:

                    <ul>
                        <li>0&mdash;Many subscribers, many
                        producers</li>

                        <li>1&mdash;Many subscribers, one
                        producer</li>

                        <li>2&mdash;One subscriber, many
                        producers</li>

                        <li>3&mdash;One subscriber, one
                        producer</li>
                    </ul>
                </td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">netID</span></td>

                <td>A 32bit net id.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">baseID</span></td>

                <td>a 32bit base id.</td>
            </tr>
        </tbody>
    </table>

    <table>
        <thead>
            <tr>
                <th>Return Value</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">number</span></td>

                <td>A properly formed efd::Category value.</td>
            </tr>
        </tbody>
    </table>
</div>
<!-- ========================================================================================== -->
<a name="CreateApplicationCategory" id=
"CreateApplicationCategory"></a>

<p class="NDLRefMemberFunction">number
CreateApplicationCategory(<br/>
number appCategoryID)</p>

<p class="NDLRefMemberDescription">Creates a new efd::Category ID
from its base components and returns the value. The resulting
category can be used in methods such as SubscribeToCategory and
SendStream. Uses a fixed value of
efd::kBASEID_ApplicationCategory for BaseID and
efd::UniversalID::ECU_Any for expected usage. The NetID bitfield
of the Category is set to appCategoryID and intended to allow
scripts to create Categories without having to worry about a
BaseID that collides with other usage.</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">appCategoryID</span></td>

                <td>The application specified unique id to be set into the Net ID bitfield.</td>
            </tr>
        </tbody>
    </table>

    <table>
        <thead>
            <tr>
                <th>Return Value</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">number</span></td>

                <td>A properly formed efd::Category value.</td>
            </tr>
        </tbody>
    </table>
</div>
<!-- ========================================================================================== -->
<a name="CreateEntity" id="CreateEntity"></a>

<p class="NDLRefMemberFunction">number CreateEntity(<br/>
string modelName,<br/>
ParameterList args,<br/>
string callbackBehavior,<br/>
ParameterList initialPropertyValues)</p>

<p class="NDLRefMemberDescription">Create a new entity and add it to the entity manager. The entity
ID of the new entity will be returned immediately, but the new entity is not yet fully created in
that its OnCreate behavior has not yet been run nor has a discover message about the been sent to
the system services. You can pass parameters to OnCreate by placing these arguments in a
ParameterList and passing this ParameterList to CreateEntity. To get notified when the entity is
fully created and discovered, provide the name a callback behavior as the third argument to this
function. This callback will receive a ParameterList containing the newly created EntityId and a
creation status value. You can set initial property values for the new entity by passing in a
ParameterList name parameters, which names matching the property in question. For example, if you
have a efd::Point3 property named "Position", you can set the initial value like this:</p>

<pre style="margin-left:60px;margin-right:60px">local initialPropertyValues = ParameterList.ParameterList()
initialPropertyValues:PutPoint3("Position", Point3.Point3(5, 6, 7))
local entityId = BehaviorAPI.CreateEntity("MyModel", nil, nil, initialPropertyValues</pre>

<p class="NDLRefMemberDescription">These initial property values are set before OnCreate is called.</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">modelName</span></td>

                <td>The name of a model to use as the template for creating the new entity.</td>
            </tr>
            <tr>
                <td><span class="NDLSystemFont">args</span> (Optional)</td>

                <td>ParameterList arguments passed to the new Entity's OnCreate behavior.</td>
            </tr>
            <tr>
                <td><span class="NDLSystemFont">callbackBehavior</span> (Optional)</td>
                <td>The optional name of a callback behavior that is invoked once
                    the entity is fully created and discovery messages are sent.</td>
            </tr>		
            <tr>
                <td><span class="NDLSystemFont">initialPropertyValues</span> (Optional)</td>

                <td>ParameterList containing parameters used to set the Entity property initial
				values. These must be named parameters where the parameter name matches the property name.</td>
            </tr>			
        </tbody>
    </table>

    <table>
        <thead>
            <tr>
                <th>Return Value</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">EntityProxy</span></td>

                <td>The Entity proxy of the newly created entity or Entity.InvalidEntity if the 
				creation failed. Note: this proxy will not be fully functional until the Entity's
				OnCreate behavior is invoked. The proxy will be functional by the tall the
				provided callbackBehavior is called.</td>
            </tr>
        </tbody>
    </table>
</div>

<!-- ========================================================================================== -->
<a name="CreateEntityAndWait" id="CreateEntityAndWait"></a>

<p class="NDLRefMemberFunction">number CreateEntityAndWait(<br/>
string modelName,<br/>
ParameterList args,<br/>
ParameterList initialPropertyValues)</p>

<p class="NDLRefMemberDescription">Create a new entity and add it to the entity manager. The current
behavior is put in a yield state until the requested entity is fully created, its OnCreate behavior
invoked, and discovery message(s) have been set. You can pass OnCreate parameters to OnCreate by placing
these arguments in a ParameterList and passing this ParameterList to CreateEntityAndWait. You can 
initialize property values by passing another ParameterList containing named parameters with parameter
names that match the property names for the entity.</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">modelName</span></td>

                <td>The name of a model to use as the template for creating the new entity.</td>
            </tr>
            <tr>
                <td><span class="NDLSystemFont">args</span> (Optional)</td>
                <td>ParameterList arguments passed to the new Entity's OnCreate behavior.</td>
            </tr>
        </tbody>
    </table>

    <table>
        <thead>
            <tr>
                <th>Return Value</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">EntityProxy</span></td>
                <td>The Entity proxy of the newly created entity or Entity.InvalidEntity if the 
				creation failed.</td>
            </tr>
        </tbody>
    </table>
</div>

<!-- ========================================================================================== -->
<a name="DecrementProperty" id="DecrementProperty"></a>

<p class="NDLRefMemberFunction">number DecrementProperty(<br/>
number entityID,<br/>
string propertyName)</p>

<p class="NDLRefMemberDescription">Decrements a UInt32 property
by one and returns the new value.
<br/><br><b><i>Deprecated</i></b>: Use direct property access instead. See <a href="lua_lib_Entity.htm">Entity (proxy)</a> documentation for details.</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">entityID</span></td>

                <td>The entity on which to change the
                property.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">propertyName</span></td>

                <td>The UInt32-style property to decrement.</td>
            </tr>
        </tbody>
    </table>

    <table>
        <thead>
            <tr>
                <th>Return Value</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">number</span></td>

                <td>The decremented property value.</td>
            </tr>
        </tbody>
    </table>
</div>
<!-- ========================================================================================== -->
<a name="DestroyEntity" id="DestroyEntity"></a>

<p class="NDLRefMemberFunction">boolean DestroyEntity(<br/>
number entityID)</p>

<p class="NDLRefMemberDescription">Request the destruction of an
entity and invocation of an OnDestroy behavior if it exists.
Destroying an entity will invoke the OnDestroy behavior if
present and when that behavior completes (or if its not found)
will then remove the entity.</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">entityID</span></td>

                <td>The EntityID of the entity to destroy.</td>
            </tr>
        </tbody>
    </table>

    <table>
        <thead>
            <tr>
                <th>Return Value</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">boolean</span></td>

                <td>True if the specified entity was found and
                destroyed.</td>
            </tr>
        </tbody>
    </table>
</div>
<!-- ========================================================================================== -->
<a name="DoesModelExist" id="DoesModelExist"></a>

<p class="NDLRefMemberFunction">boolean DoesModelExist(<br/>
string modelName)</p>

<p class="NDLRefMemberDescription">Checks to see if a particular model exists in the flat model
    manager. If the model exists but is not in the cache yet, it is loaded into memory.</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">modelName</span></td>

                <td>The name of the model to check.</td>
            </tr>
        </tbody>
    </table>

    <table>
        <thead>
            <tr>
                <th>Return Value</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">boolean</span></td>

                <td>True if the model exists.</td>
            </tr>
        </tbody>
    </table>
</div>
<!-- ========================================================================================== -->

<a name="DumpProperties" id="DumpProperties"></a>
<p class="NDLRefMemberFunction">nil DumpProperties(<br/>
number entityID)</p>

<p class="NDLRefMemberDescription">Debugging function to write
all properties to the log. Output is written to the kLua log
module. If Toolbench is attached this output will display in
Toolbench. You can also use this command in the immediate window
of the Lua script debugger.</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">entityID</span></td>

                <td>The EntityID of the entity to dump.</td>
            </tr>
        </tbody>
    </table>
</div>
<!-- ========================================================================================== -->
<a name="FindAllBehaviors" id="FindAllBehaviors"></a>

<p class="NDLRefMemberFunction">boolean, table FindAllBehaviors(<br/>
string modelName)</p>

<p class="NDLRefMemberDescription">This method finds all
behaviors implemented on a given model. The requested model will
be loaded if needed.</p>

<p class="NDLRefMemberDetailedDescription">Each behavior name is
returned in the format "ModelName:BehaviorName" where the
ModelName describes the source model in the mix-in hierarchy for
the specified behavior. So, for example, if the model Final mixes
in a model called Base which implements a behavior called
DoSomething you would get an entry called "Base:DoSomething". If
you want to invoke one of the resulting behaviors you will
normally want to strip off this model name and use just the
behavior name in order to invoke the most derived behavior.</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">modelName</span></td>

                <td>The name of the model.</td>
            </tr>
        </tbody>
    </table>

    <table>
        <thead>
            <tr>
                <th>Return Value</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">boolean</span></td>

                <td>True if the specified model was found.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">table</span></td>

                <td>A table used as an array containing the
                string names for all the behaviors in the given
                model.</td>
            </tr>
        </tbody>
    </table>
</div>
<!-- ========================================================================================== -->
<a name="FindAllEntities" id="FindAllEntities"></a>

<p class="NDLRefMemberFunction">boolean, table FindAllEntities()</p>

<p class="NDLRefMemberDescription">Find all entities. Calling
this function would be extremely expensive for a typical
application with a large number of entities. You should typically
use one of the more restrictive entity finding methods such as
FindEntitiesByBaseModel or FindEntitiesByModel. This method can
be useful for debugging.</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Return Value</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">boolean</span></td>

                <td>True if the method succeeded. This method
                cannot fail and always returns true.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">table</span></td>

                <td>A table used as an array of numbers. Each
                table index contains the EntityID of a found
                entity.</td>
            </tr>
        </tbody>
    </table>
</div>
<!-- ========================================================================================== -->
<a name="FindBehaviors" id="FindBehaviors"></a>

<p class="NDLRefMemberFunction">EntityCheck, table FindBehaviors(<br/>
number entityID)</p>

<p class="NDLRefMemberDescription">Gets a list of all behaviors
for the given entity including those that are mixed-in from
another model, in other words not just the behaviors this model
overrides.</p>

<p class="NDLRefMemberDetailedDescription">The behavior names are
returned in the same format described in FindAllBehaviors.</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">entityID</span></td>

                <td>The entity on which to find behaviors.</td>
            </tr>
        </tbody>
    </table>

    <table>
        <thead>
            <tr>
                <th>Return Value</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">EntityCheck</span></td>

                <td>An entity check value. To test for success
                you must compare the value with
                BehaviorAPI.ec_Yes; you cannot treat the result
                as a boolean value.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">table</span></td>

                <td>A table used as an array of strings. Each
                table index contains the string name of a found
                behavior.</td>
            </tr>
        </tbody>
    </table>
</div>
<!-- ========================================================================================== -->
<a name="FindEntitiesByBaseModel" id="FindEntitiesByBaseModel"></a>

<p class="NDLRefMemberFunction">boolean, table FindEntitiesByBaseModel(<br/>
string modelName)</p>

<p class="NDLRefMemberDescription">Get a list of all entities
that either mix-in the specified model or use the specified model
as their final model.</p>

<p class="NDLRefMemberDetailedDescription">This method differs
from FindEntitiesByModel which only finds entities which use the
specified model as their final model.</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">modelName</span></td>

                <td>The name of the model.</td>
            </tr>
        </tbody>
    </table>

    <table>
        <thead>
            <tr>
                <th>Return Value</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">boolean</span></td>

                <td>True if the method succeeded. This method
                cannot fail and always returns true.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">table</span></td>

                <td>A table used as an array of numbers. Each
                table index contains the EntityID of a found
                entity.</td>
            </tr>
        </tbody>
    </table>
</div>
<!-- ========================================================================================== -->
<a name="FindEntitiesByModel" id="FindEntitiesByModel"></a>

<p class="NDLRefMemberFunction">boolean, table FindEntitiesByModel(<br/>
string modelName)</p>

<p class="NDLRefMemberDescription">Get a list of all entities
that use the specified model as their final model. Only entities
of that exact type are returned. Even presets of a model are
considered to be different final models.</p>

<p class="NDLRefMemberDetailedDescription">This method differs
from FindEntitiesByBaseModel which also includes entities that
mix-in the specified model.</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">modelName</span></td>

                <td>The name of the model.</td>
            </tr>
        </tbody>
    </table>

    <table>
        <thead>
            <tr>
                <th>Return Value</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">boolean</span></td>

                <td>True if the method succeeded. This method
                cannot fail and always returns true.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">table</span></td>

                <td>A table used as an array of numbers. Each
                table index contains the EntityID of a found
                entity.</td>
            </tr>
        </tbody>
    </table>
</div>
<!-- ========================================================================================== -->
<a name="FindEntityByDataID" id="FindEntityByDataID"></a>

<p class="NDLRefMemberFunction">number FindEntityByDataID(<br/>
string dataID)</p>

<p class="NDLRefMemberDescription">Find the Entity instantiated
using the given DataID. A unique DataID is automatically assigned
to each entity in a block by the World Builder in Toolbench. Only
entities that are the result of loading a block file will have a
DataID. The DataID is a 128bit value represented in Lua as a
string of 32 hexadecimal digits.</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">dataID</span></td>

                <td>A string containing 32 hexadecimal digits
                representing an entity's unique data ID.</td>
            </tr>
        </tbody>
    </table>

    <table>
        <thead>
            <tr>
                <th>Return Value</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">number</span></td>

                <td>The EntityID of the entity, or zero if no
                entity using that given data ID is found.</td>
            </tr>
        </tbody>
    </table>
</div>
<!-- ========================================================================================== -->
<a name="FindMatchingBehaviors" id="FindMatchingBehaviors"></a>

<p class="NDLRefMemberFunction">EntityCheck, table
FindMatchingBehaviors(<br/>
number entityID,<br/>
sting partialName)</p>

<p class="NDLRefMemberDescription">Gets a list of behavior names
based on a filter string. Only those behaviors with a name that
contains the filter string will be returned. The filter string is
a simple substring and does not support any wildcard
matching.</p>

<p class="NDLRefMemberDetailedDescription">The behavior names are
returned in the same format described in FindAllBehaviors.</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">entityID</span></td>

                <td>The entity on which to find behaviors.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">partialName</span></td>

                <td>A sub-string which must be in the behavior
                name in order for it to be included. The
                sub-string can be anywhere in the target behavior
                name.</td>
            </tr>
        </tbody>
    </table>

    <table>
        <thead>
            <tr>
                <th>Return Value</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">EntityCheck</span></td>

                <td>An entity check value. To test for success
                you must compare the value with
                BehaviorAPI.ec_Yes; you cannot treat the result
                as a boolean value.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">table</span></td>

                <td>A table used as an array of strings. Each
                table index contains the string name of a found
                behavior.</td>
            </tr>
        </tbody>
    </table>
</div>
<!-- ========================================================================================== -->
<a name="FindMatchingMixins" id="FindMatchingMixins"></a>

<p class="NDLRefMemberFunction">EntityCheck, table
FindMatchingMixins(<br/>
number entityID,<br/>
sting partialName)</p>

<p class="NDLRefMemberDescription">Gets a list of mix-in names
based on a filter string. Only those mix-in models with a name
that contains the filter string will be returned. The filter
string is a simple substring and does not support any wildcard
matching.</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">entityID</span></td>

                <td>The entity on which to find behaviors.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">partialName</span></td>

                <td>A sub-string which must be in the mix-in
                model name in order for it to be included. The
                sub-string can be anywhere in the mix-in model
                name.</td>
            </tr>
        </tbody>
    </table>

    <table>
        <thead>
            <tr>
                <th>Return Value</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">EntityCheck</span></td>

                <td>An entity check value. To test for success
                you must compare the value with
                BehaviorAPI.ec_Yes; you cannot treat the result
                as a boolean value.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">table</span></td>

                <td>A table used as an array of strings. Each
                table index contains the string name of a found
                mix-in model.</td>
            </tr>
        </tbody>
    </table>
</div>
<!-- ========================================================================================== -->
<a name="FindMatchingProperties" id="FindMatchingProperties"></a>

<p class="NDLRefMemberFunction">EntityCheck, table
FindMatchingProperties(<br/>
number entityID,<br/>
sting partialName)</p>

<p class="NDLRefMemberDescription">Gets a list of property names
matching a filter string. Only those properties with a name that
contains the filter string will be returned. The filter string is
a simple substring and does not support any wildcard
matching.</p><!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">entityID</span></td>

                <td>The entity on which to find behaviors.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">partialName</span></td>

                <td>A sub-string which must be in the property
                name in order for it to be included. The
                sub-string can be anywhere in the target property
                name.</td>
            </tr>
        </tbody>
    </table>

    <table>
        <thead>
            <tr>
                <th>Return Value</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">EntityCheck</span></td>

                <td>An entity check value. To test for success
                you must compare the value with
                BehaviorAPI.ec_Yes; you cannot treat the result
                as a boolean value.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">table</span></td>

                <td>A table used as an array of strings. Each
                table index contains the string name of a found
                property.</td>
            </tr>
        </tbody>
    </table>
</div>
<!-- ========================================================================================== -->
<a name="FindMixins" id="FindMixins"></a>

<p class="NDLRefMemberFunction">EntityCheck, table
FindMixins(<br/>
number entityID)</p>

<p class="NDLRefMemberDescription">Get a list of all the models
that are mixed into the given entity.</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">entityID</span></td>

                <td>The entity on which to find mix-in
                models.</td>
            </tr>
        </tbody>
    </table>

    <table>
        <thead>
            <tr>
                <th>Return Value</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">EntityCheck</span></td>

                <td>An entity check value. To test for success
                you must compare the value with
                BehaviorAPI.ec_Yes; you cannot treat the result
                as a boolean value.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">table</span></td>

                <td>A table used as an array of strings. Each
                table index contains the string name of a found
                mix-in model.</td>
            </tr>
        </tbody>
    </table>
</div>
<!-- ========================================================================================== -->
<a name="FindProperties" id="FindProperties"></a>

<p class="NDLRefMemberFunction">EntityCheck, table
FindProperties(<br/>
number entityID)</p>

<p class="NDLRefMemberDescription">Get a list of all the
properties on the given entity.

<br/><br><b><i>Deprecated</i></b>: Use Entity:GetPropertyNames. See <a href="lua_lib_Entity.htm#EntityProxyGetPropertyNames">Entity (proxy) GetPropertyNames</a> documentation for details.</p>
</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">entityID</span></td>

                <td>The entity on which to find property
                names.</td>
            </tr>
        </tbody>
    </table>

    <table>
        <thead>
            <tr>
                <th>Return Value</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">EntityCheck</span></td>

                <td>An entity check value. To test for success
                you must compare the value with
                BehaviorAPI.ec_Yes; you cannot treat the result
                as a boolean value.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">table</span></td>

                <td>A table used as an array of strings. Each
                table index contains the string name of a found
                property.</td>
            </tr>
        </tbody>
    </table>
</div>
<!-- ========================================================================================== -->
<a name="FindPropertyKeys" id="FindPropertyKeys"></a>

<p class="NDLRefMemberFunction">EntityCheck, table
FindPropertyKeys(<br/>
number entityID,<br/>
sting propertyName)</p>

<p class="NDLRefMemberDescription">Returns a list of all in-use
key names for a given map-style property. This should only be
used when you know there will only be a small number of keys, to
enumerate potentially large map-style properties it is
recommended that GetNextPropertyKey be used.
<br/><br><b><i>Deprecated</i></b>: Use :GetKeys directly from the Entity proxy property. See <a href="lua_lib_Entity.htm">Entity (proxy)</a> documentation for details.</p>
</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">entityID</span></td>

                <td>The entity on which to find property key
                names.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">propertyName</span></td>

                <td>The map-style property to retrieve keys
                from.</td>
            </tr>
        </tbody>
    </table>

    <table>
        <thead>
            <tr>
                <th>Return Value</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">EntityCheck</span></td>

                <td>An entity check value. To test for success
                you must compare the value with
                BehaviorAPI.ec_Yes; you cannot treat the result
                as a boolean value.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">table</span></td>

                <td>A table used as an array of strings. Each
                table index contains the string name of a valid
                key for the given map-style property.</td>
            </tr>
        </tbody>
    </table>
</div>
<!-- ========================================================================================== -->
<a name="FlexLogError" id="FlexLogError"></a>

<p class="NDLRefMemberFunction">nil FlexLogError(<br/>
number logModule,<br/>
number logLevel,<br/>
string message,<br/>
boolean echoToStdErr)</p>

<p class="NDLRefMemberDescription">Log an error message to a
specific log module. The LogError built-in always logs to the
kLua log module. If you want to log to some other log module then
you can use FlexLogError instead. Note that only the kLua log
module is automatically routed to Toolbench and the Lua behavior
debugger when rapidly iterating.</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">logModule</span></td>

                <td>The log module.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">logLevel</span></td>

                <td>The log level, a number from 0 to 3. Larger
                numbers will be truncated.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">string</span></td>

                <td>The message to log.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">echoToStdErr (Optional)</span></td>

                <td>Optional boolean which defaults to false.
                When true, the message will also be echoed to
                standard error.</td>
            </tr>
        </tbody>
    </table>
</div>
<!-- ========================================================================================== -->
<a name="FlexLogMessage" id="FlexLogMessage"></a>

<p class="NDLRefMemberFunction">nil FlexLogMessage(<br/>
number logModule,<br/>
number logLevel,<br/>
string message,<br/>
boolean echoToStdOut)</p>

<p class="NDLRefMemberDescription">Log a message to a specific
log module. The LogMessage built-in always logs to the kLua log
module. If you want to log to some other log module then you can
use FlexLogMessage instead. Note that only the kLua log module is
automatically routed to Toolbench and the Lua behavior debugger
when rapidly iterating.</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">logModule</span></td>

                <td>The log module.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">logLevel</span></td>

                <td>The log level, a number from 0 to 3. Larger
                numbers will be truncated.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">string</span></td>

                <td>The message to log.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">echoToStdOut (Optional)</span></td>

                <td>Optional boolean which defaults to false.
                When true, the message will also be echoed to
                standard out.</td>
            </tr>
        </tbody>
    </table>
</div>
<!-- ========================================================================================== -->
<a name="GetBehaviorSource" id="GetBehaviorSource"></a>

<p class="NDLRefMemberFunction">string GetBehaviorSource(<br/>
number entityId,<br/>
string behaviorName)</p>

<p class="NDLRefMemberDescription">Get the originating model for
a particular behavior. When models are mixed in but not
overridden the origin will be the model containing the behavior
implementation. This information is typically only useful for
debugging.</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">entityID</span></td>

                <td>The entity on which to find the behavior
                source.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">behaviorName</span></td>

                <td>The behavior to find.</td>
            </tr>
        </tbody>
    </table>

    <table>
        <thead>
            <tr>
                <th>Return Value</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">string</span></td>

                <td>The model name where the specified behavior
                is implemented.</td>
            </tr>
        </tbody>
    </table>
</div>
<!-- ========================================================================================== -->
<a name="GetConfigValue" id="GetConfigValue"></a>

<p class="NDLRefMemberFunction">string GetConfigValue(<br/>
string configName)</p>

<p class="NDLRefMemberDescription">Used by the scripting engines
to obtain a configuration value for the given parameter. You can
request values from sections using the dotted form of the name.
For example, if you have the following in your config file:</p>
<pre class="NDLRefMemberDescription">
    [TopSection.SubSection]
    Value = Whatever
</pre>

<p class="NDLRefMemberDescription">You could read the value using
the following Lua code:</p>
<pre class="NDLRefMemberDescription">
    local value = BehaviorAPI.GetConfigValue("TopSection.SubSection.Value")
</pre>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">configName</span></td>

                <td>The config parameter to query.</td>
            </tr>
        </tbody>
    </table>

    <table>
        <thead>
            <tr>
                <th>Return Value</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">string</span></td>

                <td>The value, or empty if the config parameter
                was not found.</td>
            </tr>
        </tbody>
    </table>
</div>
<!-- ========================================================================================== -->
<a name="GetCurrentEventID" id="GetCurrentEventID"></a>

<p class="NDLRefMemberFunction">number GetCurrentEventID()</p>

<p class="NDLRefMemberDescription">Returns the event ID of the
currently executing behavior. This is normally only of interest
for debugging.</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Return Value</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">number</span></td>

                <td>The event ID of the currently executing
                behavior.</td>
            </tr>
        </tbody>
    </table>
</div>
<!-- ========================================================================================== -->
<a name="GetDefaultProperty" id="GetDefaultProperty"></a>

<p class="NDLRefMemberFunction">object GetDefaultProperty(<br/>
number entityID,<br/>
string propertyName,<br/>
string keyName)</p>

<p class="NDLRefMemberDescription">This method returns the
default value of the specified property for the specified entity.
The default value is the value specified in the flat model and
does not reflect any overrides specified in the block file or
runtime changes to the property.</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">entityID</span></td>

                <td>The entity to read a property from.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">propertyName</span></td>

                <td>The property to read.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">keyName (Optional)</span></td>

                <td>If the property being read is a scalar
                property then do not pass a key name; if the
                property is a map-style property then a key name
                must be provided. You cannot return a map-style
                property as a table of all values.</td>
            </tr>
        </tbody>
    </table>

    <table>
        <thead>
            <tr>
                <th>Return Value</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">object</span></td>

                <td>The property value, or nil if the entityID is
                not valid or the specified property/key values
                are not found. The type of the returned object
                depends on the type of the requested
                property.</td>
            </tr>
        </tbody>
    </table>
</div>
<!-- ========================================================================================== -->
<a name="GetExecutingEntityId" id="GetExecutingEntityId"></a>

<p class="NDLRefMemberFunction">number GetExecutingEntityId()</p>

<p class="NDLRefMemberDescription">Gets the entity ID on which
the calling behavior is currently executing. This is the same as
the self value passed into every behavior invocation.</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Return Value</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">number</span></td>

                <td>The current entity ID.</td>
            </tr>
        </tbody>
    </table>
</div>
<!-- ========================================================================================== -->
<a name="GetGameTime" id="GetGameTime"></a>

<p class="NDLRefMemberFunction">number GetGameTime()</p>

<p class="NDLRefMemberDescription">Get the current game time.
Game time is measured in seconds. This is the most common notion
of time that should be used for all gameplay simulation.</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Return Value</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">number</span></td>

                <td>The current game time.</td>
            </tr>
        </tbody>
    </table>
</div>
<!-- ========================================================================================== -->
<a name="GetModelName" id="GetModelName"></a>

<p class="NDLRefMemberFunction">string GetModelName(<br/>
number entityID)</p>

<p class="NDLRefMemberDescription">Get the model name for an
entity. All Entities are instantiations of a single final model
and all models have a unique name as specified in the Entity
Modeling Tool data.
<br/><br><b><i>Deprecated</i></b>: Use Entity:GetModelName. See <a href="lua_lib_Entity.htm#EntityProxyGetModelName">Entity (proxy) GetModelName</a> documentation for details.</p>
</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">entityID
                (Optional)</span></td>

                <td>The entity to check. If no entity ID is
                provided the currently executing entity will be
                used.</td>
            </tr>
        </tbody>
    </table>

    <table>
        <thead>
            <tr>
                <th>Return Value</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">string</span></td>

                <td>The final model name for the specified
                entity, or an empty string if an invalid entity
                ID was provided.</td>
            </tr>
        </tbody>
    </table>
</div>
<!-- ========================================================================================== -->
<a name="GetNextPropertyKey" id="GetNextPropertyKey"></a>

<p class="NDLRefMemberFunction">string GetNextPropertyKey(<br/>
number entityID,<br/>
string propertyName,<br/>
string previousKey)</p>

<p class="NDLRefMemberDescription">GetNextPropertyKey allows the
enumeration of key values in a map-style property. Use an empty
string or nil for previousKey on the first call to return the
first key, then use the returned key value in future calls to
return the next key. If no more keys exists, if the entity is not
found, or if the entity has no map-style property with the given
name then an empty string will be returned. Here's a sample usage
of this method:</p>
<pre class="NDLRefMemberDescription">
    local key = BehaviorAPI.GetNextPropertyKey(self, "SomeList", nil)
    while key ~= "" do
        -- Use the key for whatever you need:
        local value = self.SomeList[key]
        BehaviorAPI.LogMessage(1, string.format("key %s, value %s", key, value))

        -- Advance to the next key
        key = BehaviorAPI.GetNextPropertyKey(self, "SomeList", key)
    end
</pre>
<p>
<br/><br><b><i>Deprecated</i></b>: Use GetKeys directly on an Entity proxy property. See <a href="lua_lib_Entity.htm">Entity (proxy)</a> documentation for details.</p>

<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">entityID</span></td>

                <td>The entity containing the property to
                enumerate.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">propertyName</span></td>

                <td>The map-style property to enumerate.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">previousKey</span></td>

                <td>The previously returned value, or an empty
                string to return to the first key.</td>
            </tr>
        </tbody>
    </table>

    <table>
        <thead>
            <tr>
                <th>Return Value</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">string</span></td>

                <td>The next key name, or an empty string if
                there are no more keys.</td>
            </tr>
        </tbody>
    </table>
</div>
<!-- ========================================================================================== -->
<a name="GetProperty" id="GetProperty"></a>

<p class="NDLRefMemberFunction">object GetProperty(<br/>
number entityID,<br/>
string propertyName,<br/>
string keyName)</p>

<p class="NDLRefMemberDescription">This method returns the
specified property for the specified entity.
<br/><br><b><i>Deprecated</i></b>: Use direct property access on an Entity proxy. See <a href="lua_lib_Entity.htm">Entity (proxy)</a> documentation for details.</p>
</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">entityID</span></td>

                <td>The entity to read a property from.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">propertyName</span></td>

                <td>The property to read.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">keyName
                (Optional)</span></td>

                <td>If the property being read is a scalar
                property then do not pass a key name; if the
                property is a map-style property then a key name
                must be provided. You cannot return a map-style
                property as a table of all values.</td>
            </tr>
        </tbody>
    </table>

    <table>
        <thead>
            <tr>
                <th>Return Value</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">object</span></td>

                <td>The property value, or nil if the entityID is
                not valid or the specified property/key values
                are not found. The type of the returned object
                depends on the type of the requested
                property.</td>
            </tr>
        </tbody>
    </table>
</div>
<!-- ========================================================================================== -->
<a name="GetPropertySource" id="GetPropertySource"></a>

<p class="NDLRefMemberFunction">string GetPropertySource(<br/>
number entityID,<br/>
string propertyName)</p>

<p class="NDLRefMemberDescription">Get the originating model for
a particular property. This method is typically only useful for
debugging.</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">entityID</span></td>

                <td>The entity to check.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">propertyName</span></td>

                <td>The property to check</td>
            </tr>
        </tbody>
    </table>

    <table>
        <thead>
            <tr>
                <th>Return Value</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">string</span></td>

                <td>The model from which the specified property
                received its default value.</td>
            </tr>
        </tbody>
    </table>
</div>
<!-- ========================================================================================== -->
<a name="GetReturnEntityId" id="GetReturnEntityId"></a>

<p class="NDLRefMemberFunction">number GetReturnEntityId()</p>

<p class="NDLRefMemberDescription">If the currently running
behavior was invoked by another entity then the return entityID
is the entity ID on the invoking entity. This is the entity which
will receive the data stream passed in SendReply. This method is
typically only useful for debugging.</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Return Value</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">number</span></td>

                <td>The entity ID of the entity that invoked the
                current behavior, or zero if the current behavior
                was not invoked by another entity. The return ID
                can be the same as the current entity ID.</td>
            </tr>
        </tbody>
    </table>
</div>
<!-- ========================================================================================== -->
<a name="GetServiceManagerTime" id="GetServiceManagerTime"></a>

<p class="NDLRefMemberFunction">number
GetServiceManagerTime()</p>

<p class="NDLRefMemberDescription">Get the real time from the
service manager. Real time is measured in seconds. For most
situations you should consider using GetGameTime instead as the
game time is what drives the simulation state, but if you need to
know how much real time has passed you can use this method.</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Return Value</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">number</span></td>

                <td>The real time in seconds.</td>
            </tr>
        </tbody>
    </table>
</div>
<!-- ========================================================================================== -->
<a name="HasBehavior" id="HasBehavior"></a>

<p class="NDLRefMemberFunction">EntityCheck HasBehavior(<br/>
number entityID,<br/>
string behaviorName)</p>

<p class="NDLRefMemberDescription">Tests if the entity has a
particular behavior.
<br/><br><b><i>Deprecated</i></b>: Use Entity:ContainsBehavior. See <a href="lua_lib_Entity.htm#EntityProxyContainsBehavior">Entity (proxy)</a> documentation for details.</p>
</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">entityID</span></td>

                <td>The entity to check.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">behaviorName</span></td>

                <td>The name of the behavior to check for.</td>
            </tr>
        </tbody>
    </table>

    <table>
        <thead>
            <tr>
                <th>Return Value</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">EntityCheck</span></td>

                <td>An entity check value. To test for success
                you must compare the value with
                BehaviorAPI.ec_Yes; you cannot treat the result
                as a boolean value.</td>
            </tr>
        </tbody>
    </table>
</div>
<!-- ========================================================================================== -->
<a name="HasMixin" id="HasMixin"></a>

<p class="NDLRefMemberFunction">EntityCheck HasMixin(<br/>
number entityID,<br/>
string mixinName)</p>

<p class="NDLRefMemberDescription">Tests if the entity mixes in a
particular model. The final model is not considered to be mixed
in for the purposed of this method. The IsKindOf method will
check for an entity that either is or mixes in the specified
model.
<br/><br><b><i>Deprecated</i></b>: Use Entity:ContainsMixin. See <a href="lua_lib_Entity.htm#EntityProxyContainsMixin">Entity (proxy)</a> documentation for details.</p>
</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">entityID</span></td>

                <td>The entity to check.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">mixinName</span></td>

                <td>The mix-in model name to check for.</td>
            </tr>
        </tbody>
    </table>

    <table>
        <thead>
            <tr>
                <th>Return Value</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">EntityCheck</span></td>

                <td>An entity check value. To test for success
                you must compare the value with
                BehaviorAPI.ec_Yes; you cannot treat the result
                as a boolean value.</td>
            </tr>
        </tbody>
    </table>
</div>
<!-- ========================================================================================== -->
<a name="HasProperty" id="HasProperty"></a>

<p class="NDLRefMemberFunction">EntityCheck HasProperty(<br/>
number entityID,<br/>
string propertyName)</p>

<p class="NDLRefMemberDescription">Tests if the entity has a
particular property.
<br/><br><b><i>Deprecated</i></b>: Use Entity:HasProperty. See <a href="lua_lib_Entity.htm#EntityProxyHasProperty">Entity (proxy)</a> documentation for details.</p>
</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">entityID</span></td>

                <td>The entity to check.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">propertyName</span></td>

                <td>The name of the property to check for.</td>
            </tr>
        </tbody>
    </table>

    <table>
        <thead>
            <tr>
                <th>Return Value</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">EntityCheck</span></td>

                <td>An entity check value. To test for success
                you must compare the value with
                BehaviorAPI.ec_Yes; you cannot treat the result
                as a boolean value.</td>
            </tr>
        </tbody>
    </table>
</div>
<!-- ========================================================================================== -->
<a name="IncrementProperty" id="IncrementProperty"></a>

<p class="NDLRefMemberFunction">number IncrementProperty(<br/>
number entityID,<br/>
string propertyName)</p>

<p class="NDLRefMemberDescription">Increments a UInt32 property
by one and returns the new value.
<br/><br><b><i>Deprecated</i></b>: Use direct property access on an Entity proxy. See <a href="lua_lib_Entity.htm">Entity (proxy)</a> documentation for details.</p>
</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">entityID</span></td>

                <td>The entity on which to change the
                property.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">propertyName</span></td>

                <td>The UInt32-style property to increment.</td>
            </tr>
        </tbody>
    </table>

    <table>
        <thead>
            <tr>
                <th>Return Value</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">number</span></td>

                <td>The incremented property value.</td>
            </tr>
        </tbody>
    </table>
</div>
<!-- ========================================================================================== -->
<a name="IsKindOf" id="IsKindOf"></a>

<p class="NDLRefMemberFunction">EntityCheck IsKindOf(<br/>
number entityID,<br/>
string modelName)</p>

<p class="NDLRefMemberDescription">Tests if the entity "is-a"
specific model type. This means that the entity either is that
model type or mixes in that model type. This method differs from
HasMixin which does not check against the final model name.</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">entityID</span></td>

                <td>The entity to check.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">modelName</span></td>

                <td>The model name to check for.</td>
            </tr>
        </tbody>
    </table>

    <table>
        <thead>
            <tr>
                <th>Return Value</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">EntityCheck</span></td>

                <td>An entity check value. To test for success
                you must compare the value with
                BehaviorAPI.ec_Yes; you cannot treat the result
                as a boolean value.</td>
            </tr>
        </tbody>
    </table>
</div>
<!-- ========================================================================================== -->
<a name="LogError" id="LogError"></a>

<p class="NDLRefMemberFunction">nil LogError(<br/>
number logLevel,<br/>
string message,<br/>
boolean echoToStdErr)</p>

<p class="NDLRefMemberDescription">Log an error message to the
kLua log module at the given log level. Note that the kLua log
module is automatically routed to Toolbench and the Lua behavior
debugger when rapidly iterating.</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">logLevel</span></td>

                <td>The log level, a number from 0 to 3. Larger
                numbers will be truncated.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">message</span></td>

                <td>The message to log.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">echoToStdErr
                (Optional)</span></td>

                <td>Optional boolean which defaults to false.
                When true, the message will also be echoed to
                standard error.</td>
            </tr>
        </tbody>
    </table>
</div>
<!-- ========================================================================================== -->
<a name="LogMessage" id="LogMessage"></a>

<p class="NDLRefMemberFunction">nil LogMessage(<br/>
number logLevel,<br/>
string message,<br/>
boolean echoToStdOut)</p>

<p class="NDLRefMemberDescription">Log a message to the kLua log
module at the given log level. Note that the kLua log module is
automatically routed to Toolbench and the Lua behavior debugger
when rapidly iterating.</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">logLevel</span></td>

                <td>The log level, a number from 0 to 3. Larger
                numbers will be truncated.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">message</span></td>

                <td>The message to log.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">echoToStdOut
                (Optional)</span></td>

                <td>Optional boolean which defaults to false.
                When true, the message will also be echoed to
                standard out.</td>
            </tr>
        </tbody>
    </table>
</div>
<!-- ========================================================================================== -->
<a name="OutputDebugMessage" id="OutputDebugMessage"></a>

<p class="NDLRefMemberFunction">nil OutputDebugMessage(<br/>
string message)</p>

<p class="NDLRefMemberDescription">Output a debug message. This
only functions in debug builds and will output the message in a
platform specific manner to best display the message in an
attached C++ debugger. Often the resulting message is only
visible if such a debugger is attached to the running process at
the time of the method call.</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">message</span></td>

                <td>The message to display.</td>
            </tr>
        </tbody>
    </table>
</div>
<!-- ========================================================================================== -->
<a name="RemovePropertyValue" id="RemovePropertyValue"></a>

<p class="NDLRefMemberFunction">boolean RemovePropertyValue(<br/>
number entityID,<br/>
string propertyName,<br/>
string keyName)</p>

<p class="NDLRefMemberDescription">Removes a specific value, by
key, from a map-style property.
<br/><br><b><i>Deprecated</i></b>: Use direct property access on an Entity proxy. See <a href="lua_lib_Entity.htm">Entity (proxy)</a> documentation for details.</p>
</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">entityID</span></td>

                <td>The entity to remove a property value
                from.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">propertyName</span></td>

                <td>The map-style property containing the value
                to remove.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">keyName</span></td>

                <td>The name of the key which is to be
                removed.</td>
            </tr>
        </tbody>
    </table>

    <table>
        <thead>
            <tr>
                <th>Return Value</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">boolean</span></td>

                <td>True if a value was removed, or false if the
                entityID wasn't valid, the entity did not contain
                the specified map-style property, or the property
                did not contain the specified key.</td>
            </tr>
        </tbody>
    </table>
</div>
<!-- ========================================================================================== -->
<a name="ResetProperty" id="ResetProperty"></a>

<p class="NDLRefMemberFunction">boolean ResetProperty(<br/>
number entityID,<br/>
string propertyName)</p>

<p class="NDLRefMemberDescription">Reset a property to its
default value by property name. The default value is the value
specified in the flat model and does not reflect any overrides
specified in the block file or runtime changes to the property.
This works for both scalar and map-style properties; when
resetting a map-style property all keys not present in the
default value will be removed and any remaining keys will have
their values returned to the default value.
<br/><br><b><i>Deprecated</i></b>: Use Entity:ResetProperty. See <a href="lua_lib_Entity.htm#EntityProxyResetProperty">Entity (proxy)</a> documentation for details.</p>
</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">entityID</span></td>

                <td>The entity on which to reset a property.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">propertyName</span></td>

                <td>The property to reset.</td>
            </tr>
        </tbody>
    </table>

    <table>
        <thead>
            <tr>
                <th>Return Value</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">boolean</span></td>

                <td>True if the property was reset, or false if
                the entityID wasn't valid or the entity did not
                contain the specified property.</td>
            </tr>
        </tbody>
    </table>
</div>
<!-- ========================================================================================== -->
<a name="SendAndWaitForReply" id="SendAndWaitForReply"></a>

<p class="NDLRefMemberFunction">ParameterList
SendAndWaitForReply(<br/>
number entityID,<br/>
string behaviorName,<br/>
ParameterList arguments,<br/>
number delay)</p>

<p class="NDLRefMemberDescription">This method sends an event message that will launch another
behavior and blocks waiting for a response. The current behavior will be suspended until the called
behavior runs to completion. The called behavior can return data to the current behavior by using
the SendReply built-in. The target entity can be any entity including the current entity. Only
blocking behaviors can call this method.</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">entityID</span></td>
                <td>The entity on which to run the behavior.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">behaviorName</span></td>
                <td>The behavior to run.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">arguments</span> (Optional)</td>
                <td>A ParameterList userdata containing all arguments to the target behavior. You
                    can pass nil if you have no arguments but wish to specify a delay.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">delay</span> (Optional)</td>
                <td>The number of seconds in Game Time to delay until the specified behavior is
                    invoked. Defaults to zero seconds.</td>
            </tr>
        </tbody>
    </table>

    <table>
        <thead>
            <tr>
                <th>Return Value</th>
                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">ParameterList</span></td>

                <td>A userdata with a ParameterList metatable containing any arguments returned by
                    the called behavior, or nil if the called behavior did not return any
                    parameters.</td>
            </tr>
        </tbody>
    </table>
</div>
<!-- ========================================================================================== -->
<a name="SendEvent" id="SendEvent"></a>

<p class="NDLRefMemberFunction">boolean SendEvent(<br/>
number entityID,<br/>
string behaviorName,<br/>
ParameterList arguments,<br/>
string callback,<br/>
number delay)</p>

<p class="NDLRefMemberDescription">Sends an event message that
will launch the target behavior on the specified entity. A
callback behavior may optionally be specified which will be
invoked on the current entity after the target behavior finishes.
The target behavior can send arguments to the callback behavior
by using the SendReply built-in. Once the event has been sent the
new behavior will be queued for execution and the current
behavior will continue to execute. The target entity can be any
entity including the current entity.
<br/><br><b><i>Deprecated</i></b>: Use Entity:SendEvent. See <a href="lua_lib_Entity.htm#EntityProxySendEvent">Entity (proxy)</a> documentation for details.</p>
</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">entityID</span></td>

                <td>The entity on which to run the behavior.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">behaviorName</span></td>
                <td>The behavior to run.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">arguments</span> (Optional)</td>
                <td>A ParameterList userdata containing all arguments to the target behavior. You
                    can pass nil if you have no arguments but wish to specify a callback or
                    delay.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">callback</span> (Optional)</td>
                <td>The name of a behavior on the current entity which should be invoked once the
                    target behavior completes. You can pass nil or an empty string if you have no
                    callback but wish to specify a delay.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">delay</span> (Optional)</td>
                <td>The number of seconds in Game Time to delay until the target behavior is
                    invoked. Defaults to zero seconds.</td>
            </tr>
        </tbody>
    </table>

    <table>
        <thead>
            <tr>
                <th>Return Value</th>
                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">boolean</span></td>
                <td>True if the event was sent, or false if the specified entity or behavior was
                    invalid. A true result does not guarantee the target behavior will be executed,
                    for example the target entity could be destroyed before the target behavior can
                    execute.</td>
            </tr>
        </tbody>
    </table>
</div>
<!-- ========================================================================================== -->
<a name="SendReply" id="SendReply"></a>

<p class="NDLRefMemberFunction">nil SendReply(<br/>
ParameterList reply)</p>

<p class="NDLRefMemberDescription">Sends a reply event message back to the entity that initiated the
    current behavior. The entity which initiated this behavior is either an entity that called
    SendAndWaitForReply or else an entity that passed a callback behavior to SendEvent. In the
    SendAndWaitForReply case the ParameterList passed into SendReply is the arguments that will be
    returned from the SendAndWaitForReply call in the originating behavior. In the SendEvent with
    callback case the parameters passed to SendReply will be the arguments to the callback behavior
    which will be invoked on the original entity. In either case, if no arguments need to be
    returned you can simply exit the current behavior without calling SendReply and the original
    behavior will automatically be sent an empty ParameterList.</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">reply</span></td>
                <td>A ParameterList userdata containing the reply arguments.</td>
            </tr>
        </tbody>
    </table>
</div>
<!-- ========================================================================================== -->
<a name="SendStream" id="SendStream"></a>

<p class="NDLRefMemberFunction">nil SendStream(<br/>
number category,<br/>
number messageType,<br/>
ParameterList message)</p>

<p class="NDLRefMemberDescription">Sends a ParameterListMessage subclass with the specified message
    class type to the given category. This can be used to communicate from an entity to a system
    service by using a predetermined category. A efd::ParameterListMessage derived class of the
    specified type will be factoried and filled with the provided parameters. As such, before
    calling this method from script the C++ code must both register an appropriate message factory
    (by calling ServiceManager::RegisterFactoryMethod or using the EE_HANDLER_WRAP macro) and
    subscribe to the specified category. The target category can be subscribed either locally or
    remotely (for example, a Toolbench plugin during rapid iteration).</p>

<p class="NDLRefMemberDetailedDescription">The method will assert if called with invalid
    arguments.</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">category</span></td>
                <td>The efd::Category to which the message is sent.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">messageType</span></td>
                <td>The efd::ClassID used to factory the message. This must specify a registered
                    ParameterListMessage derived message type or the method will assert.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">message</span></td>
                <td>A ParameterList userdata containing the message contents.</td>
            </tr>
        </tbody>
    </table>
</div>
<!-- ========================================================================================== -->
<a name="SendStreamLocal" id="SendStreamLocal"></a>

<p class="NDLRefMemberFunction">nil SendStreamLocal(<br/>
number category,<br/>
number messageType,<br/>
ParameterList message)</p>

<p class="NDLRefMemberDescription">Sends a ParameterListMessage of the specified message class type
    to the given category. This can be used to communicate from an entity to a system service by
    using a predetermined category. A efd::ParameterListMessage derived class of the specified type
    will be factoried and filled with the provided ParameterList. As such, before calling this
    method from script the C++ code must both register an appropriate message factory and subscribe
    to the specified category. The target category must be subscribed locally.</p>

<p class="NDLRefMemberDetailedDescription">The method differs from SendStream only in that the
    message will not be delivered to remote targets (such as Toolbench plug-ins during rapid
    iteration).</p>

<p class="NDLRefMemberDetailedDescription">The method will assert if called with invalid
    arguments.</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">category</span></td>
                <td>The efd::Category to which the message is sent.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">messageType</span></td>
                <td>The efd::ClassID used to factory the message. This must specify a registered
                    ParameterListMessage derived message type or the method will assert.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">message</span></td>
                <td>A ParameterList userdata containing the message contents.</td>
            </tr>
        </tbody>
    </table>
</div>
<!-- ========================================================================================== -->
<a name="SetProperty" id="SetProperty"></a>

<p class="NDLRefMemberFunction">number SetProperty(<br/>
number entityID,<br/>
string propertyName,<br/>
string keyName,<br/>
object newValue)</p>

<p class="NDLRefMemberDescription">This method sets the specified
property for the specified entity.
<br/><br><b><i>Deprecated</i></b>: Use direct property access on an Entity proxy. See <a href="lua_lib_Entity.htm">Entity (proxy)</a> documentation for details.</p></p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">entityID</span></td>

                <td>The entity on which to set a property.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">propertyName</span></td>

                <td>The property to set.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">keyName
                (Optional)</span></td>

                <td>If the property being set is a scalar
                property then this parameter must be completely
                omitted (in other words, do pass any value
                including nil but rather only pass three
                arguments). If the property is a map-style
                property then a key name must be provided.
                Map-style properties can only set a single
                element at a time.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">newValue</span></td>

                <td>The new value for the specified property. The
                type of this object depends on the type of the
                specified property.</td>
            </tr>
        </tbody>
    </table>

    <table>
        <thead>
            <tr>
                <th>Return Value</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">number</span></td>

                <td>A number containing a value from the
                PropertyResult enumeration. All non-zero values
                indicate some form of error.</td>
            </tr>
        </tbody>
    </table>
</div>
<!-- ========================================================================================== -->
<a name="Sleep" id="Sleep"></a>

<p class="NDLRefMemberFunction">nil Sleep(<br/>
number duration)</p>

<p class="NDLRefMemberDescription">This method yields the current
coroutine for a specified number of milliseconds. The sleep
duration is measured in game time (not real time). Only blocking
behaviors can call this method. After the sleep interval passes
the current behavior will resume execution on the next
statement.</p><!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">duration</span></td>

                <td>The number of milliseconds in game time to
                sleep.</td>
            </tr>
        </tbody>
    </table>
</div>
<!-- ========================================================================================== -->
<a name="SubscribeToCategory" id="SubscribeToCategory"></a>

<p class="NDLRefMemberFunction">boolean SubscribeToCategory(<br/>
number entityID,<br/>
number category)</p>

<p class="NDLRefMemberDescription">Subscribe this entity to
receive behavior requests on the specified category. Multiple
entities can subscribe to the same category. Behaviors can be
invoked on all entities subscribed to the category by using the
specified category as the entityID parameter to SendEvent. When
subscribing to a category you should eventually unsubscribe using
UnsubscribeToCategory.</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">entityID</span></td>

                <td>The entity which will subscribe.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">category</span></td>

                <td>The category to which the entity will
                subscribe.</td>
            </tr>
        </tbody>
    </table>

    <table>
        <thead>
            <tr>
                <th>Return Value</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">boolean</span></td>

                <td>True if the specified entity is valid.</td>
            </tr>
        </tbody>
    </table>
</div>
<!-- ========================================================================================== -->
<a name="SwapProperty" id="SwapProperty"></a>

<p class="NDLRefMemberFunction">number SwapProperty(<br/>
number entityID,<br/>
string propertyName,<br/>
number newValue)</p>

<p class="NDLRefMemberDescription">Changes a scalar UInt32
property value, returning the old value.</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">entityID</span></td>

                <td>The entity on which to swap a property.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">propertyName</span></td>

                <td>The name of the UInt32 property to swap.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">newValue</span></td>

                <td>The new value of the property.</td>
            </tr>
        </tbody>
    </table>

    <table>
        <thead>
            <tr>
                <th>Return Value</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">number</span></td>

                <td>The value of the property prior to setting
                the new value. No error value is reserved; zero
                will be returned if the entity is not valid, the
                property does not exist or the property is of the
                wrong type.</td>
            </tr>
        </tbody>
    </table>
</div>
<!-- ========================================================================================== -->
<a name="UnsubscribeToCategory" id="UnsubscribeToCategory"></a>

<p class="NDLRefMemberFunction">boolean
UnsubscribeToCategory(<br/>
number entityID,<br/>
number category)</p>

<p class="NDLRefMemberDescription">Unsubscribe this entity from
behavior requests on the specified category. Use this method
after calling SubscribeToCategory to remove the subscription.</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">entityID</span></td>

                <td>The entity which will unsubscribe.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">category</span></td>

                <td>The category to which the entity will
                unsubscribe.</td>
            </tr>
        </tbody>
    </table>

    <table>
        <thead>
            <tr>
                <th>Return Value</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">boolean</span></td>

                <td>True if the specified entity is valid.</td>
            </tr>
        </tbody>
    </table>
</div>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
