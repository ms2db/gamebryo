<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Point2</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">Point2 Module</p>
<p class="NDLRefHead1">Description</p>
<p>The Point2 module contains functions to create, access, and manipulate instances of
the efd::Point2 class in Lua.</p>

<p>All functions are in the Point2 module namespace in Lua.</p>

<p>Point3 values passed from C++ to Lua are always converted into a Lua Point2 userdata object.
The functions described below represent the functions available to these objects.</p>

<p>Point2 values passed from Lua to C++ can either be a Point2 value constructed using 
Point2.Point2(x,y) or a Lua table containing 2 numbers representing x, and y.</p>

<p class="NDLRefHead1">Library Constants</p>

<a name="Point2_ZERO"</a>
<p class="NDLRefMemberFunction">Point2_ZERO</p>
<p class="NDLRefMemberDescription">A Point2 constant containing the zero vector (0,0).</p>

<a name="Point2_UNIT_X"</a>
<p class="NDLRefMemberFunction">Point2_UNIT_X</p>
<p class="NDLRefMemberDescription">A Point2 constant containing the x unit vector (1,0).</p>

<a name="Point2_UNIT_Y"</a>
<p class="NDLRefMemberFunction">Point2_UNIT_Y</p>
<p class="NDLRefMemberDescription">A Point2 constant containing the y unit vector (0,1).</p>

<p class="NDLRefHead1">Module Attributes</p>

<a name="Point2.x"</a>
<p class="NDLRefMemberFunction">Point2.x</p>
<p class="NDLRefMemberDescription">The x value.</p>

<a name="Point2.y"</a>
<p class="NDLRefMemberFunction">Point2.y</p>
<p class="NDLRefMemberDescription">The y value.</p>


<p class="NDLRefHead1">Module Functions</p>

<a name="Point2()"></a>
<p class="NDLRefMemberFunction">userdata Point2()</p>
<p class="NDLRefMemberDescription">Create a new Point2 object, initialized to (0, 0)</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">Point2</span></td>
    <td>A userdata object wrapping an efd::Point2.
        <p><b>Example:</b>
    <pre>
    p1 = Point2.Point2()</pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Point2(x,y)"></a>
<p class="NDLRefMemberFunction">userdata Point2(x, y)</p>
<p class="NDLRefMemberDescription">Create a new Point2 object, initialized to (x, y)</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">Point2</span></td>
    <td>A userdata object wrapping an efd::Point2.
        <p><b>Example:</b>
    <pre>
    p1 = Point2.Point2(1.0, -3.0)</pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Point2 Clone"></a>
<p class="NDLRefMemberFunction">userdata Clone()</p>
<p class="NDLRefMemberDescription">Create a new Point2 object, initialized to the current Point2 values.
Lua assignment is by reference, so Clone is provided to create new objects from existing ones.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">Point2</span></td>
    <td>A userdata object wrapping an efd::Point2.
        <p><b>Example:</b>
    <pre>
    p1 = Point2.Point2(1.0, -3.0)
    local pClone = p1:Clone()</pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Point2 operator=="></a>
<p class="NDLRefMemberFunction">boolean ==</p>
<p class="NDLRefMemberDescription">True if the two points are equal.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">boolan</span></td>
    <td>True of two points are equal.
        <p><b>Example:</b>
    <pre>
    p1 = Point2.Point2(1.0, -3.0)
    p2 = Point2.Point2(1.0, -3.0)
    local b = (p1 == p2)   -- b == true </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Point2 +"></a>
<p class="NDLRefMemberFunction">userdata +</p>
<p class="NDLRefMemberDescription">Point2 Addition.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">Point2</span></td>
    <td>A userdata object wrapping an efd::Point2.
        <p><b>Example:</b>
    <pre>
    p1 = Point2.Point2(1.0, -3.0)
    p2 = Point2.Point2(1.0,  3.0)
    p3 = p1 + p2   -- (2.0, 0.0)</pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Point2 -"></a>
<p class="NDLRefMemberFunction">userdata -</p>
<p class="NDLRefMemberDescription">Point2 Subtraction.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">Point2</span></td>
    <td>A userdata object wrapping an efd::Point2.
        <p><b>Example:</b>
    <pre>
    p1 = Point2.Point2(1.0, -3.0)
    p2 = Point2.Point2(1.0,  3.0)
    p3 = p1 - p2   -- (0.0, -6.0)</pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Point2 /"></a>
<p class="NDLRefMemberFunction">userdata /</p>
<p class="NDLRefMemberDescription">Point2 Division.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">Point2</span></td>
    <td>A userdata object wrapping an efd::Point2.
        <p><b>Example:</b>
    <pre>
    p1 = Point2.Point2(1.0, -3.0)
    p2 = Point2.Point2(1.0,  3.0)
    p3 = p1 / p2   -- (1.0, -1.0)</pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Point2 *"></a>
<p class="NDLRefMemberFunction">Number *</p>
<p class="NDLRefMemberDescription">Point2 Dot Product.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">Point2</span></td>
    <td>A number representing the dot product of two Point2 vectors.
        <p><b>Example:</b>
    <pre>
    p1 = Point2.Point2(10, 5)
    p2 = Point2.Point2(20, 10)
    local fResult = p1 * p2   -- 250.0</pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Point2 Length"></a>
<p class="NDLRefMemberFunction">number Length()</p>
<p class="NDLRefMemberDescription">Get the vector length of a Point2 vector.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">number</span></td>
    <td>The vector length of the Point2 value.
        <p><b>Example:</b>
    <pre>
    p1 = Point2.Point2(1.0, 1.0)
    len = p1:Length()  -- sqrt(2)</pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Point2 SqrLength"></a>
<p class="NDLRefMemberFunction">number SqrLength()</p>
<p class="NDLRefMemberDescription">Get the vector square length of a Point2 value.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">number</span></td>
    <td>The vector square length of the Point2 value.
        <p><b>Example:</b>
    <pre>
    p1 = Point2.Point2(1.0, 1.0)
    len = p1:SqrLength()  -- 2</pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Point2 Dot"></a>
<p class="NDLRefMemberFunction">number Dot(Point2)</p>
<p class="NDLRefMemberDescription">Get the Dot product of 2 Point2 vectors.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">number</span></td>
    <td>The dot product of two Point2 vectors.
        <p><b>Example:</b>
    <pre>
    p1 = Point2.Point2(10, 5)
    p2 = Point2.Point2(20, 10)    
    fResult = p1:Dot(p2)  -- 250.0
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Point2 ScalarMultiply"></a>
<p class="NDLRefMemberFunction">userdata ScalarMultiply(number scalar, Point2 value)</p>
<p class="NDLRefMemberDescription">Multiply a Point2 by a Scalar.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">Point2</span></td>
    <td>Scalar multiple of the given point2.
        <p><b>Example:</b>
    <pre>
    p1 = Point2.Point2(10, 5)
    p2 = Point2.Point2(20, 10)
    p1 = Point2.ScalarMultiply(10.0, p1)  -- Point2(100, 50)
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Point2 Unary-"></a>
<p class="NDLRefMemberFunction">userdata Unary-</p>
<p class="NDLRefMemberDescription">Unary negation of a Point2.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">Point2</span></td>
    <td>Unary negation of a Point2.
        <p><b>Example:</b>
    <pre>
    p1 = Point2.Point2(10, -10)
    p2 = -p1  -- Point2(-10, 10)    
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Point2 ComponentProduct"></a>
<p class="NDLRefMemberFunction">userdata Point2_ComponentProduct(Point2 p1, Point2 p2)</p>
<p class="NDLRefMemberDescription">Calculate the component product of two Point2 vectors.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">Point2</span></td>
    <td>Component product of two Point2 vectors.
        <p><b>Example:</b>
    <pre>
    p1 = Point2.Point2(2, 2)
    p2 = Point2.Point2(10, 25)
    local p3 = Point2.Point2_ComponentProduct(p1, p2)  -- Point2(20, 50)
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Point2 Unitize"></a>
<p class="NDLRefMemberFunction">number Unitize()</p>
<p class="NDLRefMemberDescription">Convert a Point2 vector into a unit vector.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">number</span></td>
    <td>The length of the vector before conversion.
        <p><b>Example:</b>
    <pre>
    p1 = Point2.Point2(2, 2)
    fResult = p1:Unitize()   -- p1 now contains a unit vector, fResult ~= 2.8284.
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Point2 GetX"></a>
<p class="NDLRefMemberFunction">number GetX()</p>
<p class="NDLRefMemberDescription">Get the x component of this Point2.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">number</span></td>
    <td>The Point2 x component.</td></tr>
        <p><b>Example:</b>
    <pre>
    p1 = Point2.Point2(2, 1)
    xVal = p1:GetX()  -- 2.0    
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Point2 GetY"></a>
<p class="NDLRefMemberFunction">number GetY()</p>
<p class="NDLRefMemberDescription">Get the Y component of this Point2.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">number</span></td>
    <td>The Point2 y component.</td></tr>
        <p><b>Example:</b>
    <pre>
    p1 = Point2.Point2(2, 1)
    yVal = p1:GetY()  -- 1.0    
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Point2 tostring"></a>
<p class="NDLRefMemberFunction">string tostring(Point2)</p>
<p class="NDLRefMemberDescription">Convert a Point2 to a friendly string.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">string</span></td>
    <td>String in the format "Point2(x.000000, y.000000)"</td></tr>
        <p><b>Example:</b>
    <pre>
    p1 = Point2.Point2(3.375, 10.0)
    local s = tostring(p1)  -- s == "Point2(3.375000, 10.000000)"
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<p class="NDLHeadingRelatedTopic">
    Related topics</p>
</div>

<ul>
    <li><a href="../../Reference/efd/efd__Point2.htm">efd::Point2</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
