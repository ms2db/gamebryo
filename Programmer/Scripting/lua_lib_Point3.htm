<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Point3</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">Point3 Module</p>
<p class="NDLRefHead1">Description</p>
<p>The Point3 module contains functions to create, access, and manipulate instances of
the efd::Point3 class in Lua.</p>

<p>All functions are in the Point3 module namespace in Lua.</p>

<p>Point3 values passed from C++ to Lua are always converted into a Lua Point3 userdata object.
The functions described below represent the functions available to these objects.</p>

<p>Point3 values passed from Lua to C++ can either be a Point3 value constructed using 
Point3.Point3(x,y,z) or a Lua table containing 3 numbers representing x, y, and z.</p>

<p class="NDLRefHead1">Library Constants</p>

<a name="Point3_ZERO"</a>
<p class="NDLRefMemberFunction">Point3_ZERO</p>
<p class="NDLRefMemberDescription">A Point3 constant containing the zero vector (0,0,0).</p>

<a name="Point3_UNIT_X"</a>
<p class="NDLRefMemberFunction">Point3_UNIT_X</p>
<p class="NDLRefMemberDescription">A Point3 constant containing the X unit vector (1,0,0).</p>

<a name="Point3_UNIT_Y"</a>
<p class="NDLRefMemberFunction">Point3_UNIT_Y</p>
<p class="NDLRefMemberDescription">A Point3 constant containing the Y unit vector (0,1,0).</p>

<a name="Point3_UNIT_Z"</a>
<p class="NDLRefMemberFunction">Point3_UNIT_Z</p>
<p class="NDLRefMemberDescription">A Point3 constant containing the Z unit vector (0,0,1).</p>

<a name="Point3_UNIT_ALL"</a>
<p class="NDLRefMemberFunction">Point3_UNIT_ALL</p>
<p class="NDLRefMemberDescription">A Point3 constant containing the unit vector (1,1,1).</p>

<p class="NDLRefHead1">Module Attributes</p>

<a name="Point3.x"</a>
<p class="NDLRefMemberFunction">Point3.x</p>
<p class="NDLRefMemberDescription">The x value.</p>

<a name="Point3.y"</a>
<p class="NDLRefMemberFunction">Point3.y</p>
<p class="NDLRefMemberDescription">The y value.</p>

<a name="Point3.x"</a>
<p class="NDLRefMemberFunction">Point3.z</p>
<p class="NDLRefMemberDescription">The z value.</p>

<p class="NDLRefHead1">Module Functions</p>

<a name="Point3()"></a>
<p class="NDLRefMemberFunction">userdata Point3()</p>
<p class="NDLRefMemberDescription">Create a new Point3 object, initialized to (0, 0, 0)</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">Point3</span></td>
    <td>A userdata object wrapping an efd::Point3.
        <p><b>Example:</b>
    <pre>
    p1 = Point3.Point3()
</td></tr>
  </tbody>
</table>
</div>

<a name="Point3(x,y,z)"></a>
<p class="NDLRefMemberFunction">userdata Point3(x, y, z)</p>
<p class="NDLRefMemberDescription">Create a new Point3 object, initialized to (x, y, z)</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">Point3</span></td>
    <td>A userdata object wrapping an efd::Point3.
        <p><b>Example:</b>
    <pre>
    p1 = Point3.Point3(10, 5, 2)</pre></p>
</td></tr>
  </tbody>
</table>
</div>

<a name="Point3 Clone"></a>
<p class="NDLRefMemberFunction">userdata Clone()</p>
<p class="NDLRefMemberDescription">Create a copy of a Point3 object. Note that Lua does not
support overriding operator=. Assignment in Lua is by reference, not by value. Use Clone
to get a new Point3 instance initized to the current Point3 value.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">Point3</span></td>
    <td>A userdata object wrapping an efd::Point3.
        <p><b>Example:</b>
    <pre>
    p1 = Point3.Point3(10, 5, 2)
    p2 = p1                -- reference, not a deep copy
    p2.x = 5               -- p1.x == p2.x == 5
    p3 = Point3.Clone()    -- clone initialized to (5, 5, 2)
    p3.x = 10              -- p3 == (10, 5, 2), p1 and p2 == (5, 5, 2)</pre></p>
</td></tr>
  </tbody>
</table>
</div>


<a name="Point3 operator[]"></a>
<p class="NDLRefMemberFunction">number operator[idx]</p>
<p class="NDLRefMemberDescription">Get the value at index idx from a Point3 value. Values are indexed using the
Lua convention, starting at 1. (p.x == p[1], p.y == p[2], p.z == p[3])</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">number</span></td>
    <td>value at p[idx].    
    <p><b>Example:</b>
    <pre>
    p1 = Point3.Point3(10, 5, 2)
    print("p1[1] == " .. p1[1])   -- p1[1] == 10.0</pre></p>
</td></tr>
  </tbody>
</table>
</div>

<a name="Point3 operator=="></a>
<p class="NDLRefMemberFunction">boolean operator==</p>
<p class="NDLRefMemberDescription">Determine if two Point3 objects are equal - they have the same x, y, and z values.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">boolean</span></td>
    <td>True if the Point3 objects are equal, false otherwise.
        <p><b>Example:</b>
    <pre>
    local p1 = Point3.Point3(1,2,3)
    local p2 = Point3.Point3(3,4,5)    
    assert((p1 == p2) == false)</pre></p>

    </td></tr>
  </tbody>
</table>
</div>

<a name="Point3 operator+"></a>
<p class="NDLRefMemberFunction">userdata operator+</p>
<p class="NDLRefMemberDescription">Add two Point3 values.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">Point3</span></td>
    <td>The result of the addition (p1.x+p2.x, p1.y+p2.y, p1.z+p2.z), as a Point3 userdata object.
            <p><b>Example:</b>
    <pre>
    p1 = Point3.Point3(1,2,4)
    p2 = Point3.Point3(3,5,6)    
    local pResult = p1 + p2    
    p1 = p1 + p2</pre></p>
</td></tr>
  </tbody>
</table>
</div>

<a name="Point3 operator-"></a>
<p class="NDLRefMemberFunction">userdata operator-</p>
<p class="NDLRefMemberDescription">Subtract two Point3 values.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">Point3</span></td>
    <td>The result of the subtraction (p1.x-p2.x, p1.y-p2.y, p1.z-p2.z), as a Point3 userdata object.
            <p><b>Example:</b>
    <pre>
    p1 = Point3.Point3(1,2,3)
    p2 = Point3.Point3(4,5,6)
    pResult = p1 - p2
    p1 = p1 - p2</pre></p>
    </td></tr>
  </tbody>
</table>
</div>

<a name="Point3 operator*"></a>
<p class="NDLRefMemberFunction">number operator*, number Point3:Dot(p2)</p>
<p class="NDLRefMemberDescription">Calculate the dot product of two Point3 values.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">number</span></td>
    <td>The dot product of two Point3 values.
    <p><b>Example:</b>
    <pre>
    p1 = Point3.Point3(10, 5, 2)
    p2 = Point3.Point3(20, 10, 1)
    local fResult = p1 * p2   -- 252.0
    fResult = p1:Dot(p2)      -- 252.0</pre></p>
</td></tr>
  </tbody>
</table>
</div>

<a name="Point3 ScalarMultiply"></a>
<p class="NDLRefMemberFunction">userdata ScalarMultiply(number scalar, Point3 value)</p>
<p class="NDLRefMemberDescription">Calculate the scalar multiple of a Point3 value.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">Point3</span></td>
    <td>The scalar multiple of the Point3 value, as a Point3 userdata object.
    <p><b>Example:</b>
    <pre>
    p1 = Point3.Point3(10, 5, 2)
    p2 = Point3.Point3(20, 10, 2)
    p1 = Point3.ScalarMultiply(10.0, p1)   -- Point3(100, 50, 20)   
    p1 = Point3.ScalarMultiply(5.0, p2)    -- Point3(100, 50, 10)    
    p1 = Point3.ScalarMultiply(0.5, p1)    -- Point3(50, 25, 5)</pre></p>
</td></tr>
  </tbody>
</table>
</div>

<a name="Point3 tostring"></a>
<p class="NDLRefMemberFunction">string tostring(Point3)</p>
<p class="NDLRefMemberDescription">Return a string representation of the Point3.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">string</span></td>
    <td>The string representation of the Point3, in the form "Point3(x, y, z)". Precision
    is 6 decimal places.
    <p><b>Example:</b>
    <pre>
    p1 = Point3.Point3(10, 5, 2)
    print(tostring(p1))    -- prints "Point3(10.000000, 5.000000, 2.0000000)"
</pre></p>
</td></tr>
  </tbody>
</table>
</div>

<a name="Point3 operator/"></a>
<p class="NDLRefMemberFunction">userdata operator/</p>
<p class="NDLRefMemberDescription">Division of two Point3 values.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">Point3</span></td>
    <td>Result of dividing one Point3 by another, as a Point3 userdata object.
    <p><b>Example:</b>
    <pre>
    p1 = Point3.Point3(10, 50, 200)
    p2 = Point3.Point3(20, 10, 300)
    
    p1 = p1 / 10.0   -- Point3(1, 5, 20)</pre></p>
</td></tr>
  </tbody>
</table>
</div>

<a name="Point3 negation/"></a>
<p class="NDLRefMemberFunction">userdata unary -</p>
<p class="NDLRefMemberDescription">Calculate the unary negation of a Point3.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">Point3</span></td>
    <td>Unary negation of the Point3 value, as a Point3 userdata object. 
    <p><b>Example:</b>
    <pre>
    p1 = Point3.Point3(10, -10, 1)
    p2 = -p1  -- Point3(-10, 10, -1)</pre></p>
</td></tr>
  </tbody>
</table>
</div>

<a name="Point3 ComponentProduct/"></a>
<p class="NDLRefMemberFunction">userdata Point3_ComponentProduct(Point3 p1, Point3 p2)</p>
<p class="NDLRefMemberDescription">Calculate the component product of two Point3 values.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">Point3</span></td>
    <td>Component product of two Point3 values, as a Point3 userdata object.
    <p><b>Example:</b>
    <pre>
    p1 = Point3.Point3(2, 2, 3)
    p2 = Point3.Point3(10, 25, 15)
    local p3 = Point3.Point3_ComponentProduct(p1, p2)  -- Point3(20, 50, 45)</pre></p>
</td></tr>
  </tbody>
</table>
</div>

<a name="Point3 Length/"></a>
<p class="NDLRefMemberFunction">number Length(), number Point3_VectorLength(Point3)</p>
<p class="NDLRefMemberDescription">Calculate the length of a Point3 vector.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">number</span></td>
    <td>Length of the Point3 vector.
    <p><b>Example:</b>
    <pre>
    p1 = Point3.Point3(2, 2, 4)
    fResult = p1:Length()                      -- sqrt(24) ~= 4.9
    fResult = Point3.Point3_VectorLength(p1)   -- sqrt(24)    
</td></tr>
  </tbody>
</table>
</div>

<a name="Point3 SqrLength/"></a>
<p class="NDLRefMemberFunction">number SqrLength()</p>
<p class="NDLRefMemberDescription">Calculate the square length of a Point3 vector.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">number</span></td>
    <td>Square length of the Point3 vector.
    <p><b>Example:</b>
    <pre>
    p1 = Point3.Point3(4, 4, 5)  -- 16*16*25 = 57.0.</pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Point3 Unitize"></a>
<p class="NDLRefMemberFunction">number Unitize()</p>
<p class="NDLRefMemberDescription">Convert the Point3 into a unit vector, returning the length
of the vector before conversion.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">number</span></td>
    <td>Length of the Point3 vector before conversion to a unit vector.
    <p><b>Example:</b>
    <pre>
    p1 = Point3.Point3(2, 2, 4)
    fResult = p1:Unitize()
    
    -- Prints "Point3(0.408248, 0.408248, 0.816497) Original length: 4.89896638489"
    print(tostring(p1) .. " Original length: " .. fResult)    
    </pre>
    
</td></tr>
  </tbody>
</table>
</div>

<a name="Point3 Point3 UnitizeVector(Point3)/"></a>
<p class="NDLRefMemberFunction">userdata UnitizeVector(Point3)</p>
<p class="NDLRefMemberDescription">Returns a new vector that is a normalized representation
of the provided vector using a fast, but less precise, square root algorithm.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">Point3</span></td>
    <td>Unitized version of the provided vector, as a Point3 userdata object.
    <p><b>Example:</b>
    <pre>
    p1 = Point3.Point3(2, 2, 4)
    p2 = Point3.Point3_UnitizeVector(p1)
    
    -- Prints "Point3(0.408248, 0.408248, 0.816497)"
    print(tostring(p1))
    </pre>
    
</td></tr>
  </tbody>
</table>
</div>


<a name="Point3 Cross/"></a>
<p class="NDLRefMemberFunction">userdata Cross(Point3)</p>
<p class="NDLRefMemberDescription">Calculate the cross product of two Point3 vectors.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">Point3</span></td>
    <td>Cross product of two Point3 vectors, as a Point3 userdata object.
    <p><b>Example:</b>
    <pre>
    p1 = Point3.Point3(1, 0, 0)
    p2 = Point3.Point3(0, 1, 0)
    
    pResult = p1:Cross(p2)  -- Point3(0, 0, 1)    
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Point3 UnitCross/"></a>
<p class="NDLRefMemberFunction">userdata UnitCross(Point3)</p>
<p class="NDLRefMemberDescription">Calculate the unit cross product of two Point3 vectors.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">Point3</span></td>
    <td>Cross product of two Point3 vectors, as a Point3 userdata object.
    <p><b>Example:</b>
    <pre>
    p1 = Point3.Point3(10.0, 0, 0)
    p2 = Point3.Point3(0, 10.0, 0)
    pResult = p1:UnitCross(p2)  -- Point3(0, 0, 1)</pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Point3 Perpendicular/"></a>
<p class="NDLRefMemberFunction">userdata Perpendicular()</p>
<p class="NDLRefMemberDescription">Computes one of the infinite set of perpendicular vectors
to this vector.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">Point3</span></td>
    <td>A perpendicular vector, as a Point3 userdata object.
    <p><b>Example:</b>
    <pre>
    p1 = Point3.Point3(1.0, 0, 0)
    p2 = p1:Perpendicular()</pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Point3 ScalarMultiplyAdd/"></a>
<p class="NDLRefMemberFunction">userdata ScalarMultiplyAdd(Point3, float)</p>
<p class="NDLRefMemberDescription">Given a Point3 vector and a scalar multiplier, compute
the scalar multiple of the provided vector. Add the result of the multiplication to this
vector and return the result as a new Point3 value.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">Point3</span></td>
    <td>A new vector containing the addition of this vector with the scalar multiple
        of the provided Point3 vector.
    <p><b>Example:</b>
    <pre>
    p1 = Point3.Point3(1.0, 1.0, 1.0)
    p2 = Point3.Point3(3.0, 4.0, 5.0)
    p3 = p1:ScalarMultiplyAdd(p2, 10) -- p3 == Point3(31.0, 41.0, 51.0)
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Point3 CreateDirectionVectorTo/"></a>
<p class="NDLRefMemberFunction">number, userdata CreateDirectionVectorTo(Point3 goal, Point3 tmp)</p>
<p class="NDLRefMemberDescription">Give a Point3 goal position and a Point3 zero temp vector, calculate
a new vector from this Point3 position to the goal position. This function returns two values: the 
length of the direction vector, and the unitize version of the resulting direction vector.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">number</span></td>
    <td>The length of the direction vector before it was converted into a unit vector.</td></tr>
    <tr><td width="20%"><span class="NDLSystemFont">Point3</span></td>
    <td>The resulting direction unit vector.
    <p><b>Example:</b>
    <pre>
    p1 = Point3.Point3(1.0, 1.0, 1.0)
    p2 = Point3.Point3(3.0, 4.0, 5.0)
    direction = Point3.Point3_ZERO;
    distance, direction = p1:CreateDirectionVectorTo(p2, direction)
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Point3 Calculate2dDistanceTo/"></a>
<p class="NDLRefMemberFunction">number Calculate2dDistanceTo(Point2 goal)</p>
<p class="NDLRefMemberDescription">Given a goal in 2d space (x,y), calculate the distance
between this Point3 position and the goal.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">number</span></td>
    <td>The distance between this Point3 position and the goal, in the x,y plane.
    <p><b>Example:</b>
    <pre>
    p1 = Point3.Point3(1.0, 1.0, 1.0)
    p2 = Point2.Point2(2.0, 2.0)
    distance = p1:Calculate2dDistanceTo(p2)  -- sqrt(2)
    </pre>
</td></tr>
  </tbody>
</table>
</div>


<p class="NDLHeadingRelatedTopic">
    Related topics</p>
</div>

<ul>
    <li><a href="../../Reference/efd/efd__Point3.htm">efd::Point3</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
