<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Point4</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">Point4 Module</p>
<p class="NDLRefHead1">Description</p>
<p>The Point4 module contains functions to create, access, and manipulate instances of
the efd::Point4 class in Lua.</p>

<p>All functions are in the Point4 module namespace in Lua.</p>

<p>Point4 values passed from C++ to Lua are always converted into a Lua Point4 userdata object.
The functions described below represent the functions available to these objects.</p>

<p>Point4 values passed from Lua to C++ can either be a Point4 value constructed using 
Point4.Point4(x,y,z,w) or a Lua table containing 4 numbers representing x, y, z, and w.</p>

<p class="NDLRefHead1">Library Constants</p>

<a name="Point4_ZERO"</a>
<p class="NDLRefMemberFunction">Point4_ZERO</p>
<p class="NDLRefMemberDescription">A Point4 constant containing the zero vector (0,0,0,0).</p>

<p class="NDLRefHead1">Module Attributes</p>

<a name="Point4.x"</a>
<p class="NDLRefMemberFunction">Point4.x</p>
<p class="NDLRefMemberDescription">The x value.</p>

<a name="Point4.y"</a>
<p class="NDLRefMemberFunction">Point4.y</p>
<p class="NDLRefMemberDescription">The y value.</p>

<a name="Point4.z"</a>
<p class="NDLRefMemberFunction">Point4.z</p>
<p class="NDLRefMemberDescription">The z value.</p>

<a name="Point4.w"</a>
<p class="NDLRefMemberFunction">Point4.w</p>
<p class="NDLRefMemberDescription">The w value.</p>


<p class="NDLRefHead1">Module Functions</p>

<a name="Point4()"></a>
<p class="NDLRefMemberFunction">userdata Point4()</p>
<p class="NDLRefMemberDescription">Create a new Point4 object, initialized to (0, 0, 0, 0)</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">Point4</span></td>
    <td>A userdata object wrapping an efd::Point4.
        <p><b>Example:</b>
    <pre>
    p1 = Point4.Point4()
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Point4(x, y, z, w)"></a>
<p class="NDLRefMemberFunction">userdata Point4(x, y, z, w)</p>
<p class="NDLRefMemberDescription">Create a new Point4 object, initialized to (x, y, z, w)</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">Point4</span></td>
    <td>A userdata object wrapping an efd::Point4.
        <p><b>Example:</b>
    <pre>
    p1 = Point4.Point4(10, 20, 30, 40)
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Point4 =="></a>
<p class="NDLRefMemberFunction">boolean ==</p>
<p class="NDLRefMemberDescription">True if two Point4 objects are equal.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">boolean</span></td>
    <td>True if two Point4 objects are equal.
        <p><b>Example:</b>
    <pre>
    p1 = Point4.Point4(10, 20, 30, 40)
    p2 = Point4.Point4(10, 20, 30, 40)

    p2 == p1  -- true
    p1 ~= Point4.Point4_ZERO  -- true
    p2 == Point4.Point4_ZERO  -- false
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Point4 Clone"></a>
<p class="NDLRefMemberFunction">userdata Clone</p>
<p class="NDLRefMemberDescription">Return a deep copy of a Point4 value.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">Point4</span></td>
    <td>A deep copy of the Point4 value.
        <p><b>Example:</b>
    <pre>
    p1 = Point4.Point4(10, 20, 30, 40)
    local pClone = p1:Clone()
    pClone.x = 50    -- p1 == Point4(10, 20, 30, 40), pClone == Point4(50, 20, 30, 50)    
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Point4 ToPoint3"></a>
<p class="NDLRefMemberFunction">userdata ToPoint3</p>
<p class="NDLRefMemberDescription">Return the Point3 equivalent of this Point4.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">Point3</span></td>
    <td>The Point3 (no w-component) equivalent of this Point4 object.
        <p><b>Example:</b>
    <pre>
    p1 = Point4.Point4(10, 20, 30, 40)
    p2 = p1:ToPoint3()
    print(tostring(p2)) -- "Point3(10.000000, 20.000000, 30.000000)",
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Point4 MakeZero"></a>
<p class="NDLRefMemberFunction">nil MakeZero</p>
<p class="NDLRefMemberDescription">Turn the Point4 into the zero vector (0,0,0,0)</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">nil</span></td>
    <td>Turn the Point4 into the zero vector (0,0,0,0).
        <p><b>Example:</b>
    <pre>
    p1 = Point4.Point4(10, 20, 30, 40)
    p1:MakeZero()   --  p1 == Point4(0,0,0,0)
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Point4 Set3VectorW0(Point4)"></a>
<p class="NDLRefMemberFunction">nil Set3VectorW0(Point4)</p>
<p class="NDLRefMemberDescription">Set a Point4 value from another Point4, setting the W component of this Point4 to zero.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">nil</span></td>
    <td>Copy the x,y, and z values from another Point4, and set the W component of this Point4 to zero.
        <p><b>Example:</b>
    <pre>
    p1 = Point4.Point4(10, 20, 30, 40)
    p2:Set3VectorW0(p1)  -- p2 = Point4(10, 20, 30, 0)
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Point4 Set3VectorW0(x, y, z)"></a>
<p class="NDLRefMemberFunction">nil Set3VectorW0(float x, float y, float z)</p>
<p class="NDLRefMemberDescription">Set a Point4 value from x, y, z, setting the W component of this Point4 to zero.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">nil</span></td>
    <td>Set x, y, and z to the given values. Set the W component of this Point4 to zero.
        <p><b>Example:</b>
    <pre>
    p2:Set3VectorW0(10, 20, 30)  -- p2 = Point4(10, 20, 30, 0)
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Point4 Set(x, y, z, w)"></a>
<p class="NDLRefMemberFunction">nil Set(x, y, z, w)</p>
<p class="NDLRefMemberDescription">Copy the values from x, y, z, and w.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">userdata</span></td>
    <td>Set the x, y, z, and w values.
        <p><b>Example:</b>
    <pre>
    p1:Set(10, 20, 30, 40)  -- p1 == Point3(10, 20, 30, 40)
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Point4 Set(Point3, w)"></a>
<p class="NDLRefMemberFunction">nil Set(Point3, w)</p>
<p class="NDLRefMemberDescription">Copy the x, y, z values from a Point3, setting the W component of this Point4 to w.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">userdata</span></td>
    <td>Set x, y, z to the provide Point3, and W to the provided w value.
        <p><b>Example:</b>
    <pre>
    p1 = Point3.Point3(10, 20, 30)
    p2:Set(p1, 40)  -- p2 = Point4(10, 20, 30, 40)
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Point4 SetX"></a>
<p class="NDLRefMemberFunction">nil SetX, nil SetY, nil setZ, nil setW</p>
<p class="NDLRefMemberDescription">Set the x, y, z, or w component.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">nil</span></td>
    <td>Set x, y, z, or w component.
        <p><b>Example:</b>
    <pre>
    p1 = Point3.Point3(10, 20, 30)
    p1:SetX(30)
    p1:SetY(70)
    p1:SetZ(-20)
    p1:SetW(255)    -- p1 = Point4(30, 70, -20, 255)
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Point4 Unary-"></a>
<p class="NDLRefMemberFunction">userdata unary-</p>
<p class="NDLRefMemberDescription">Negate a Point4 value.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">Point4</span></td>
    <td>Calculate the negation of a Point4 vector.
        <p><b>Example:</b>
    <pre>
    p1 = Point4.Point4(10, 20, 30, -70)
    p2 = -p1  -- p2 = Point4(-10, -20, -30, 70)
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Point4 +"></a>
<p class="NDLRefMemberFunction">userdata +</p>
<p class="NDLRefMemberDescription">Add two Point4 values.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">Point4</span></td>
    <td>Add two Point 4 values.
        <p><b>Example:</b>
    <pre>
    p1 = Point4.Point4(10, 20, 30, 40)
    local p2 = Point4.Point4(10, 10, 10, 10)
    local p3 = p1 + p2  -- Point4(20, 30, 40, 50)
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Point4 -"></a>
<p class="NDLRefMemberFunction">userdata -</p>
<p class="NDLRefMemberDescription">Subtract two Point4 values.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">Point4</span></td>
    <td>Subtract two Point 4 values.
        <p><b>Example:</b>
    <pre>
    p1 = Point4.Point4(10, 20, 30, 40)
    local p2 = Point4.Point4(10, 10, 10, 10)
    local p3 = p1 - p2  -- Point4(0, 10, 20, 30)
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Point4 ScalarMultiply"></a>
<p class="NDLRefMemberFunction">userdata ScalarMultiply(scalar)</p>
<p class="NDLRefMemberDescription">Multiply a Point4 by a scalar.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">Point4</span></td>
    <td>Multiply a Point4 by a provided scalar.
        <p><b>Example:</b>
    <pre>
    p1 = Point4.Point4(10, 20, 30, 40)
    local p3 = p1:ScalarMultiply(10)  -- Point4(100, 200, 300, 400)
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Point4 ScalarDivide"></a>
<p class="NDLRefMemberFunction">userdata ScalarDivide(scalar)</p>
<p class="NDLRefMemberDescription">Divide a Point4 by a scalar.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">Point4</span></td>
    <td>Divide a Point4 by a provided scalar.
        <p><b>Example:</b>
    <pre>
    p1 = Point4.Point4(10, 20, 30, 40)
    local p3 = p1:ScalarDivide(10)  -- Point4(1, 2, 3, 4)
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Point4 CompressNormalizedIntoXY"></a>
<p class="NDLRefMemberFunction">nil CompressNormalizedIntoXY(Point3)</p>
<p class="NDLRefMemberDescription">Given a normalized efd::Point3, scales the X and Y so that Z equals 1.
        Sets our X = point.X, Y = point.Y.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">nil</span></td>
    <td>Given a normalized efd::Point3, scales the X and Y so that Z equals 1. 
        factor = 1.0 / point.Z
        Sets our X = point.X * factor, Y = point.Y * factor
        <p><b>Example:</b>
    <pre>
    p1 = Point4.Point4(10, 20, 30, 40)
    p1:CompressNormalizedIntoXY(Point3.Point3(10, 20, 2))  -- p1 == Point4(5, 10, 20, 40)
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Point4 CompressNormalizedIntoZW"></a>
<p class="NDLRefMemberFunction">nil CompressNormalizedIntoZW(Point3)</p>
<p class="NDLRefMemberDescription">Given a normalized efd::Point3, scales the Z and W so that Z equals 1.
        factor = 1.0 / point.z
        Sets our Z = point.X * factor, W = point.Y * factor.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">nil</span></td>
    <td>Given a normalized efd::Point3, scales the Z and W so that Z equals 1. 
        factor = 1.0 / point.Z
        Sets our Z = point.X * factor, W = point.Y * factor
        <p><b>Example:</b>
    <pre>
    p1 = Point4.Point4(10, 20, 30, 40)
    p1:CompressNormalizedIntoZW(Point3.Point3(10, 20, 2)) -- p1 == Point4(10, 20, 5, 10)
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Point4 DecompressXYIntoNormalized"></a>
<p class="NDLRefMemberFunction">Point3 DecompressXYIntoNormalized(Point3)</p>
<p class="NDLRefMemberDescription">Decompress this Point4 into a point3, setting X, and Y to Point4.x, and Point4.y,
    and z to 1.0. Finally, convert this into a unit vector.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">Point3</span></td>
    <td>Decompress this Point4 into a point3, setting X, and Y to Point4.x, and Point4,
    and z to 1.0. Finally, convert this into a unit vector.
        <p><b>Example:</b>
    <pre>
    p1 = Point4.Point4(1, 1, 0, 0)
    p3 = p1:DecompressXYIntoNormalized(Point3.Point3(0, 0, 0))  -- p3 ~= Point3(0.577350, 0.577350, 0.577350)
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Point4 DecompressZWIntoNormalized"></a>
<p class="NDLRefMemberFunction">Point3 DecompressZWIntoNormalized(Point3)</p>
<p class="NDLRefMemberDescription">Decompress this Point4 into a point3, setting X, and Y to Point4.z, and Point4.w,
    and z to 1.0. Finally, convert this into a unit vector.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">Point3</span></td>
    <td>Decompress this Point4 into a point3, setting X, and Y to Point4.z, and Point4.w,
    and z to 1.0. Finally, convert this into a unit vector.
        <p><b>Example:</b>
    <pre>
    p1 = Point4.Point4(0, 0, 1, 1)
    p3 = p1:DecompressZWIntoNormalized(Point3.Point3(0, 0, 0))  -- p3 ~= Point3(0.577350, 0.577350, 0.577350)
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<a name="Point4 tostring"></a>
<p class="NDLRefMemberFunction">string tostring(Point4)</p>
<p class="NDLRefMemberDescription">Convert a Point4 into a friendly string.</p>
<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead><tr><th>Return Value</th><th>Description</th></tr></thead>
  <tbody>
    <tr><td width="20%"><span class="NDLSystemFont">string</span></td>
    <td>Create a friendly string of the Point4 in the form "Point4(x.000000, y.000000, z.000000, w.000000)"
        <p><b>Example:</b>
    <pre>
    p1 = Point4.Point4(10, 20, 30, 40)
    local s = tostring(p1) -- s == "Point4(10.000000, 20.000000, 30.000000, 40.000000)"
    </pre>
</td></tr>
  </tbody>
</table>
</div>

<p class="NDLHeadingRelatedTopic">
    Related topics</p>
</div>

<ul>
    <li><a href="../../Reference/efd/efd__Point4.htm">efd::Point4</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
