<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Lighting Efficiency Considerations</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>


<h1>Lighting Efficiency Considerations</h1>

<p>There are several efficiency and accuracy considerations 
 that should be taken into account when using per-vertex dynamic lighting:</p>

<ul>
	
	<li>Ambient lights are 
 (by far) the least expensive to compute. Directional lights are the next 
 least expensive to compute, with point lights being more expensive and 
 spotlight the most expensive.</li>
	
	<li>When using point and 
 spotlights, setting distance attenuation curve parameters to Quadratic=0, 
 Linear=X and Constant=0 may speed up lighting computation (thus making 
 the light attenuate linearly with distance).</li>
	
	<li>Applications choosing 
 to use specular lighting should do so with as few lights and objects as 
 possible, as specular lighting is expensive to compute.</li>
	
	<li>Lighting can be computed 
 on a per-pixel or per-vertex basis depending upon the settings of <span 
 class="NDLSystemFont"><a href="../../Reference/NiMain/NiStandardMaterial.htm">NiStandardMaterial</a></span>. 
 As a result, spotlights may tend to have artifacts when projected upon 
 objects whose polygonal representation is coarse and the default material 
 is set to prefer per-vertex calculations. For example, a spotlight with 
 a small cone angle pointed directly at the center of a large wall represented 
 by two triangles may not illuminate the wall at all (if all four vertices 
 of the wall fall outside the cone angle).</li>
	
	<li>Applications that use 
 lighting effects that are not dynamic (i.e. lights for which no parameters 
 change during program execution) should strongly consider avoiding dynamic 
 lighting and simply "pre-light" their geometry by factoring 
 the lighting into vertex colors or into the texture maps.</li>
	
	<li>If applications do 
 not need to use vertex colors (i.e. vertices are all white or all the 
 same color), they should avoid creating geometry that contains "dummy" 
 vertex colors, as they will incur a computational cost for all vertex 
 colors during lighting computation.</li>
	
	<li>Applications should 
 avoid changing the per-vertex source colors that are specified in the 
 <span class="NDLSystemFont"><a href="../../Reference/NiMesh/NiMesh.htm">NiMesh</a></span> 
 object on a per-vertex basis unless necessary, as doing so may have additional 
 overhead in the renderers depending upon the <a href="../NiMesh/Data_Stream_Access.htm#AccessFlags">data 
 access flags</a>. </li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
