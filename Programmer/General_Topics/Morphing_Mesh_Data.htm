<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Morphing Mesh Data</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>


<h1>Morphing Mesh Data</h1>

<p>Although applications may animate their characters and 
 objects by animating transformations and rendering properties, much more 
 compelling effects may be created by changing the shape, color and texturing 
 of objects during run-time. </p>

<p>An application may programmatically perform morphing 
 of the model-space vertices each frame. Gamebryo supports linear-weighted 
 blending of geometry through the <a href="../../Reference/NiMesh/NiMorphMeshModifier.htm">NiMorphMeshModifier</a> 
 class, but applications may choose to use other techniques to modify geometry 
 data on the fly. For example, the <a href="../../Learn/Demos/MeshCreation_Demo_Overview.htm">MeshCreation</a> 
 demo dynamically creates and colors a water surface.</p>

<p><a href="../NiMesh/Introduction_to_Mesh_Modifiers.htm">Mesh 
 Modifiers</a> are the preferred method for implementing any dynamically 
 changing render data, such as vertices, colors, or texture coordinates. 
 They support parallel updating of the data and synchronization with culling 
 and rendering. All of Gamebryo's dynamic geometry manipulation is handled 
 with modifiers.</p>

<p>The parameters used to store data on a mesh are extremely 
 important when working with dynamically changing data. Frequently written 
 data should generally be marked with NiDataStream::CPU_WRITE_VOLATILE 
 as the access flag. See the <a href="../NiMesh/Introduction_to_the_NiMesh_Library.htm">Introduction 
 to the NiMesh Library</a> for detailed information about controlling the 
 storage and access patterns of data. Note that dynamically changing geometry 
 is not "free". In addition to the cost of modifying the geometric 
 data, there may be costs within the renderers in the form of bus transactions 
 to copy the new data into device memory or in the form of overhead for 
 managing the dynamic buffers for the data. As a result, geometry data 
 that is not changed from frame to frame will tend to be faster to render.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
