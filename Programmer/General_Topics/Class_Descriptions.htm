<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Class Descriptions</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>


<h1>Class Descriptions</h1>

<h2>NiCamera</h2>

<p><span class="NDLSystemFont"><a href="../../Reference/NiMain/NiCamera.htm">NiCamera</a></span> 
 objects represent virtual cameras for imaging the geometry represented 
 by a scene graph. It is important to note that <span class="NDLSystemFont"><a 
 href="../../Reference/NiMain/NiCamera.htm">NiCamera</a></span> 
 is a descendant of <span class="NDLSystemFont"><a href="../../Reference/NiMain/NiAVObject.htm">NiAVObject</a></span>. 
 As a result, a camera may have a parent object that affects the camera's 
 position and orientation.&nbsp;This approach enables cameras to be attached 
 as children of objects in the scene, in order to follow them automatically, 
 as they move. The camera object may operate on a portion of the scene 
 graph that is an ancestor of itself.</p>

<p>For example, a flight simulator scene may contain terrain 
 and several fighter planes.&nbsp;The game may choose to attach a "chase 
 camera" as a child of one of those airplanes, enabling the camera 
 to follow the airplane automatically.&nbsp;This same camera may have as 
 its focus the entire scene graph, enabling the camera to render the terrain 
 and the fighter plane to which the camera is attached.</p>

<h2>NiDynamicEffect</h2>

<p>The subclasses of the abstract class <span class="NDLSystemFont"><a href="../../Reference/NiMain/NiDynamicEffect.htm">NiDynamicEffect</a></span> 
 represent time- and geometry-dependent visual effects, such as per-vertex 
 lighting, texture-based fogging, shadows, projected images, etc.&nbsp;These 
 effects fall into two major categories:&nbsp; per-vertex lights and texture-based 
 effects.</p>

<p><span class="NDLSystemFont"><a href="../../Reference/NiMain/NiDynamicEffect.htm">NiDynamicEffect</a></span> 
 is a subclass of <span class="NDLSystemFont"><a href="../../Reference/NiMain/NiAVObject.htm">NiAVObject</a></span>, 
 so objects of this type have a concept of a model space coordinate system.&nbsp;The 
 positions and directions of subclassed effects are defined in the object's 
 model coordinate system, so effects may be attached as children of other 
 scene graph objects.&nbsp;This approach enables the effects to be attached 
 to characters or objects in the scene, such as headlights being attached 
 to a car. </p>

<p><span class="NDLSystemFont"><a href="../../Reference/NiMain/NiTPointerList.htm">NiDynamicEffectList</a></span> 
 contains a list of affected objects  objects whose appearances are modified 
 by the effect.&nbsp;This list of affected objects enables effects to have 
 fixed "scope".&nbsp;Applications can increase performance greatly 
 by adding only objects that need to be modified by an effect to that effect's 
 scope list. All other objects will avoid any computations required by 
 the effect.</p>

<h2>NiLight</h2>

<p>The subclasses of the abstract <span class="NDLSystemFont"><a 
 href="../../Reference/NiMain/NiLight.htm">NiLight</a></span> 
 are used to create dynamic, per vertex lighting effects on objects in 
 the scene graph. Because <span class="NDLSystemFont"><a 
 href="../../Reference/NiMain/NiLight.htm">NiLight</a> 
 </span>objects are themselves <span class="NDLSystemFont"><a 
 href="../../Reference/NiMain/NiDynamicEffect.htm">NiDynamicEffect</a> 
 </span>objects, they may be "attached" to other objects in the 
 scene graph, in order to move with them, automatically.&nbsp;Also, by 
 virtue of being children of <span class="NDLSystemFont"><a 
 href="../../Reference/NiMain/NiDynamicEffect.htm">NiDynamicEffect</a></span>, 
 they have "scope"  i.e., the specific set of scene graph objects 
 that they affect.&nbsp;Dynamic lighting and the subclasses of <span class="NDLSystemFont"><a href="../../Reference/NiMain/NiLight.htm">NiLight</a></span> 
 are described in more detail later in this manual.</p>

<h2>NiTextureEffect</h2>

<p>The subclasses of the abstract <span class="NDLSystemFont"><a 
 href="../../Reference/NiMain/NiTextureEffect.htm">NiTextureEffect</a></span> 
 are used to create texture-based effects.&nbsp;These effects may be striking 
 and eye-catching.&nbsp;The effects include complex spotlights, slide projectors, 
 shadows, overhead clouding, and fogging.&nbsp;Texture-based effects are 
 described in detail in <a href="../Texturing/Introduction_to_Texturing.htm">Texturing 
 Basics</a>.</p>

<h2>NiRenderObject</h2>

<p><span class="NDLSystemFont"><a href="../../Reference/NiMain/NiRenderObject.htm">NiRenderObject</a> 
 </span>objects are the base class for renderable objects in Gamebryo. 
 Properties, effects, and materials can be applied to these objects. However, 
 it is up to the derived class to define any geometric data associated 
 with rendering the object.</p>

<h2>NiMesh</h2>

<p><span class="NDLSystemFont"><a href="../../Reference/NiMesh/NiMesh.htm">NiMesh</a> 
 </span>objects define the geometric data for polygonal-based models. This 
 is the primary class used for rendering in Gamebryo.</p>

<h2>NiPSParticleSystem</h2>

<p><span class="NDLSystemFont"><a href="../../Reference/NiParticle/NiPSParticleSystem.htm">NiPSParticleSystem</a></span> 
 is a subclass of <span class="NDLSystemFont"><a href="../../Reference/NiMesh/NiMesh.htm">NiMesh</a></span><span class="NDLSystemFont">,</span> which treats its list 
 of vertices as independent points. This capability is useful for dynamic 
 particle systems, as well as other effects. </p>



<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
