<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Making Geometric Update Faster</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type=
"text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Making Geometric Update Faster</h1>

<p>In complex, dynamic applications, a significant percentage of application
time can be spent updating the scene graph. In most such applications, the
geometry may be classified in several different ways:</p>

<ul>
    <li>Frequency of movement

        <ul>
            <li>Geometry that moves every frame</li>

            <li>Geometry that moves only in special situations</li>

            <li>Geometry that never moves.</li>
        </ul>
    </li>

    <li>Type of motion

        <ul>
            <li>Completely independent motion of objects in a subtree</li>

            <li>Motion of an entire subtree as a single, rigid body</li>
        </ul>
    </li>
</ul>

<p>Knowing which parts of the scene graph fall into which category is the first
step in characterizing the scene graph for optimal scene graph updates. Armed
with this knowledge, developers may use Gamebryo's <span class=
"NDLSystemFont">UpdateSelected</span> system to greatly increase application
performance, with no discernible differences in display or gameplay.
Specifically, <span class="NDLSystemFont">UpdateSelected</span> may be used to
replace calls to Update, enabling entire subtrees to skip the update
process.</p>

<p>The section for <a href="UpdateSelected_Overview.htm">UpdateSelected</a>
discusses this in more detail.</p>

<h2>Reducing NiMaterialInstance Updates</h2>

<p><span class="NDLSystemFont">NiMaterialInstance</span> uses several
conditions to detect when a material / shader needs to be updated. By default,
the system requires explicit calls to <span class=
"NDLSystemFont">SetMaterialNeedsUpdate</span>() per render object that needs to
refresh its material. This is the efficient, but requires additional game
code.</p>

<p>However, if you have called <span class=
"NDLSystemFont">SetDefaultMaterialNeedsUpdateFlag(true),</span> then every draw
call will check for material updates. Although convenient, this will impact
rendering performance.</p>

<p>See the <a href=
"../../Programmer/NiMaterial/Renderer_Interaction_With_Materials.htm">Renderer
Interaction With Materials</a> page for more details.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
