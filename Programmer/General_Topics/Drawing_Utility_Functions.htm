<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Drawing Utility Functions</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<h1>Drawing Utility Functions</h1>

<p>Gamebryo includes a set of utility functions within 
 the <span class="NDLSystemFont">NiMain</span> library that encapsulate several 
 very common multi-step culling/rendering processes into single function 
 calls. One of these, <span class="NDLSystemFont">NiDrawScene</span>, 
 forms the basis of all renderable object culling and rendering in the 
 default <span class="NDLSystemFont">NiApplication::OnIdle</span> loop. 
 The other functions encapsulate lower-level drawing routines; they do 
 not completely replace the culling and rendering steps described in <a 
 href="Rendering_a_Frame.htm">Rendering a Frame</a>, but replace smaller 
 subsets of these steps. In doing so, the other drawing utility functions 
 can allow for much more flexibility in the structure of culling and rendering 
 for advanced applications without lots of duplicated code. In the 
 order listed below, each function represents a superset of the behavior 
 of the functions below it. In fact, each function calls the function 
 directly below it to implement part ofits larger set of behavior.</p>

<h2>NiDrawScene</h2>

<p>The most all-encompassing of the drawing utility functions, 
 <span class="NDLSystemFont">NiDrawScene</span> handles culling, sorting 
 (if desired) and rendering of a scene graph in a single call. Basically, 
 it takes a scene graph, a camera, and a culling process object (as well 
 as an optional visible array) and:</p>

<ol>
	
	<li>Clears any existing 
 renderable objects from the destination visible array</li>
	
	<li>Culls the scene graph 
 into the visible array, according to the camera's view</li>
	
	<li>Sets the camera's view 
 data down to the renderer</li>
	
	<li>Renders the resulting 
 objects in the visible array using <span class="NDLSystemFont">NiDrawVisibleArray</span>.</li>
</ol>

<p>For an example of how <span class="NDLSystemFont">NiDrawScene</span> 
 can be used, see the Gamebryo sample <a href="../../Learn/Demos/Overview_!SimpleApp.htm">SimpleApp</a>, 
 which uses <span class="NDLSystemFont">NiDrawScene</span> as a part of 
 an extremely simple rendering loop.</p>

<h2>NiDrawVisibleArray</h2>

<p><span class="NDLSystemFont">NiDrawVisibleArray</span> represents 
 the next lower level of rendering functions. Assuming that the passed-in 
 array has already been filled with potentially visible renderable data 
 (via scene graph culling, special application knowledge, or other technique), 
 the function renders the objects. If the renderer has an accumulator 
 attached to it at the time of the call, the function starts the accumulator, 
 registers the renderable objects, and closes the accumulator, resulting 
 in the full sorted rendering of the given object as a unit. If the 
 renderer does not have an accumulator attached, the function simply renders 
 all of the objects in the givenvisible array immediately in the 
 order found in the array.</p>

<p>The most common use of this rendering function is in 
 situations where the application has used several independent culling 
 operations to cull multiple scene graphs into a single visible array, 
 which is then to be rendered in one block, commonly using sorting.</p>

<h2>NiDrawVisibleArrayAppend</h2>

<p><span class="NDLSystemFont">NiDrawVisibleArrayAppend</span> 
 implements a subset of <span class="NDLSystemFont">NiDrawVisibleArray</span>; 
 it implements the rendering/registration loop, without starting or finishing 
 the renderer's accumulator. In this way, it is possible to register 
 several independent visible arrays into a single accumulator pass. 
 If the renderer has no accumulator attached, then this function and <span class="NDLSystemFont">NiDrawVisibleArray</span> behave in exactly the 
 same way as one another.</p>

<h2>Details of Drawing Utility Functions</h2>

<p>For details on how these functions work, as well as 
 any implementation limitations, see the reference documentation <span class="NDLSystemFont"><a href="../../Reference/NiMain/NiDrawSceneUtility.htm">NiDrawSceneUtility</a></span>.</p>



<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
