<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Template Classes</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Template Classes</h1>

<p>Gamebryo supplies a set of basic, template container classes.
These containers are used internally throughout the library. The
basic template classes are described below; their specific uses
and member functions are described in later chapters.</p>

<h2>Lists</h2>

<p><span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiTPointerList.htm">NiTPointerList</a></span>
objects can contain and manage pointers, smart pointers, or any
other element with a size of a pointer or smaller. This list
class allows for efficient insertion and deletion at any element,
as well as efficient forward and backward iteration through all
of the elements. Lists may also be searched for the existence and
location of elements of a given value. <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMain/NiTPointerList.htm">NiTPointerList</a></span>
items are block-allocated from a shared pool, making this class
fast and memory-efficient. <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiTList.htm">NiTList</a></span> has been
deprecated and applications should use <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMain/NiTPointerList.htm">NiTPointerList</a></span>
instead. For lists of objects larger than a pointer, applications
can use <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiTObjectList.htm">NiTObjectList</a></span>.</p>

<h2>Array</h2>

<p><span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiTArray.htm">NiTArray</a></span> objects
implement dynamic arrays containing objects of almost any desired
type. These arrays can grow and shrink, and allow for compaction
(shifting of elements to remove empty space) upon request. Use
<span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiTArray.htm">NiTArray</a></span> for
types that are intrinsic types (<span class=
"NDLSystemFont">char*</span>, <span class=
"NDLSystemFont">float</span>, <span class=
"NDLSystemFont">int</span>, etc). Use <a href=
"../../Reference/NiMain/NiTObjectArray.htm"><span class=
"NDLSystemFont">NiTObjectArray</span></a> for <span class=
"NDLSystemFont"><a href=
"../../Reference/NiSystem/NiMemObject.htm">NiMemObject</a></span>-derived
types. Note that <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiTArray.htm">NiTArray</a></span> has a
limit of 65535 elements; to use more than that, use an
<span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiTLargeArray.htm">NiTLargeArray</a></span>-derived
class, such as <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiTLargePrimitiveArray.htm">NiTLargePrimitiveArray</a></span>
or <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiTLargeObjectArray.htm">NiTLargeObjectArray</a></span>.</p>

<h2>Map</h2>

<p><span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiTPointerMap.htm">NiTPointerMap</a></span>
objects implement hash-table (also known as "dictionary")
functionality, allowing keys of any type to be mapped to a
pointer, smart pointer, or other type of element with a size of a
pointer or smaller. They allow for fast storage and lookup of
key/value pairs. They should not be used for character string-key
hash tables, as <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiTPointerMap.htm">NiTStringPointerMap</a></span>
objects are designed for such tables. <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMain/NiTPointerMap.htm">NiTPointerMap</a></span>
and <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiTPointerMap.htm">NiTStringPointerMap</a></span>
items are block-allocated from a shared pool, making this class
fast and memory-efficient. For maps of objects larger than a
pointer, applications can use <span class=
"NDLSystemFont"><a href="../../Reference/NiMain/NiTMap.htm">NiTMap</a></span>
or <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiTStringMap.htm">NiTStringMap</a></span>.</p>

<h2>StringMap</h2>

<p><span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiTStringMap.htm">NiTStringMap</a></span>
and <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiTStringPointerMap.htm">NiTStringPointerMap</a></span>
objects function in a manner similar to <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMain/NiTPointerMap.htm">NiTPointerMap</a></span>
objects, but accept character strings as keys, and do string
comparison for key hashing.</p>

<h2>FixedStringMap</h2>

<p><span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiTFixedStringMap.htm">NiTFixedStringMap</a></span>
objects function in a manner similar to <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMain/NiTMap.htm">NiTMap</a></span> objects,
but accept <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiFixedString.htm">NiFixedString</a></span>
objects as keys.</p>

<h2>Queue</h2>

<p><span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiTQueue.htm">NiTQueue</a></span>
implements a first-in first-out (FIFO) queue for objects of
almost any desired type. Smart pointers are not supported.</p>

<p>Note that a list can also be used as a queue.</p>

<h2>Set</h2>

<p><span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiTSet.htm">NiTSet</a></span> implements
an unordered set for objects of almost any desired type. Smart
pointers are not supported. Use <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMain/NiTPrimitiveSet.htm">NiTPrimitiveSet</a></span>
for types that are intrinsic types (<span class=
"NDLSystemFont">char*</span>, <span class=
"NDLSystemFont">float</span>, <span class=
"NDLSystemFont">int</span>, etc). Use <a href=
"../../Reference/NiMain/NiTObjectSet.htm"><span class=
"NDLSystemFont">NiTObjectSet</span></a> for <span class=
"NDLSystemFont"><a href=
"../../Reference/NiSystem/NiMemObject.htm">NiMemObject</a></span>-derived
types. For smart pointers to objects, use <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMain/NiTPtrSet.htm">NiTObjectPtrSet</a></span>
or <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiTPrimitivePtrSet.htm">NiTPrimitivePtrSet</a></span>,
which will correctly handle reference counts.</p>

<h2>Pool</h2>

<p><span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiTPool.htm">NiTPool</a></span>
implements a pool of small objects. This allows applications to
allocate a number of small objects at once and reuse them through
a pool, rather than allocating and deallocating the small objects
individually.</p>

<h2>SmallAllocStrategy</h2>

<p><span class="NDLSystemFont"><a href=
"../../Reference/NiSystem/NiTSmallAllocStrategy.htm">NiTSmallAllocStrategy</a></span>
implements small block allocator behavior. The <span class=
"NDLSystemFont">NiTSmallAllocStrategy</span> can be used to
easily and efficiently add small block allocator behavior to any
<span class="NDLSystemFont"><a href=
"../../Reference/NiSystem/NiAllocator.htm">NiAllocator</a></span>
derived object.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
