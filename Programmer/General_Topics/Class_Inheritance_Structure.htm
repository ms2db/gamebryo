<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Class Inheritance Structure</title>

<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type=
"text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
    WriteNavLink(2);
</script>

<h1>Class Inheritance Structure</h1>

<p>Gamebryo has been designed to be natively object-oriented.</p>

<p>Underlying everything is a foundation library containing utility classes and
methods that provide hardware abstraction and portability. The basic cross
platform functionality provided includes memory management, run-time type
information, asserts, logging, IO streams, and archiving.</p>

<p>The predominant class hierarchy in Foundation is:</p>

<table>
    <tbody>
        <tr>
            <td>
                <div class="FigureContainer">
                    <img alt="Inheritance graph for efd::IStreamable" src=
                    "images/efdIStreamableInheritance.png">
                </div>
            </td>

            <td>
                <ul>
                    <li>The library's most basic classes are inherited from a
                    single base class named <span class=
                    "NDLSystemFont"><a href="../../Reference/efd/efd__MemObject.htm">
                    efd::MemObject</a></span> which provides memory management
                    via Foundation's <span class="NDLSystemFont"><a href=
                    "../../Reference/efd/efd__MemManager.htm">Memory
                    Manager</a>.</span><br>
                    <br></li>

                    <li>Classes that require naming and run-time type
                    information (RTTI) for type-safe downcasting of pointers
                    and reference counting for safe deallocation of objects
                    derive from <span class="NDLSystemFont"><a href=
                    "../../Reference/efd/efd__IBase.htm">efd::IBase</a>.</span><br>

                    <br></li>

                    <li>Classes that require the ability to stream to and from
                    disk or across a network derive from <span class=
                    "NDLSystemFont"><a href=
                    "../../Reference/efd/efd__IStreamable.htm">efd::IStreamable</a>.</span></li>
                </ul>
            </td>
        </tr>
    </tbody>
</table>

<p>When deriving from efd::IBase, classes implement RTTI using the <span class=
"NDLSystemFont"><a href="../../Reference/Macros/efd_macros_rtti.htm">EE_DECLARE_CLASS</a></span> macro
and implement reference counting by including <span class=
"NDLSystemFont"><a href="../../Reference/Macros/efd_macros_reference_counting.htm">EE_DECLARE_CONCRETE_REFCOUNT</a></span>.</p>

<p>Instead of deriving from <span class="NDLSystemFont">efd::IBase</span>, some
classes derive from <span class="NDLSystemFont"><a href=
"../../Reference/efd/efd__RefCount.htm">efd::RefCount</a></span> for reference
counting for safe deallocation of objects which uses <span class=
"NDLSystemFont"><a href=
"../../Reference/efd/efd__RefCountObject.htm">efd::RefCountObject</a></span> to
specify the implementation of the reference counting.</p>

<p>Note that reference counting is supported for any class that handles the
requirements of <span class="NDLSystemFont"><a href=
"../../Reference/efd/efd__SmartPointer.htm">efd::SmartPointer</a></span> such
as containing <span class="NDLSystemFont">IncRefCount</span> and <span class=
"NDLSystemFont">DecRefCount</span> methods. Core Runtime classes satisfy this
requirement by deriving from <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiRefObject.htm">NiRefObject</a></span>.</p>

<p>The predominant class hierarchy in Core Runtime is:</p>

<table>
    <tbody>
        <tr>
            <td>
                <div class="FigureContainer">
                    <img src="./images/NiAVObjectInheritance.png" alt=
                    "Inheritance graph for NiAVObject">
                </div>
            </td>

            <td>
                <ul>
                    <li>The library's most basic classes are inherited from a
                    single base class named <span class=
                    "NDLSystemFont"><a href="../../Reference/efd/efd__MemObject.htm">
                    efd::MemObject</a>.</span><br>
                    <br></li>

                    <li>Objects that require reference counting for safe
                    deallocation of objects derive from <span class=
                    "NDLSystemFont"><a href=
                    "../../Reference/NiMain/NiRefObject.htm">NiRefObject</a>.</span><br>
                    <br></li>

                    <li>Objects that require the ability to stream to and from
                    disk derive from <span class="NDLSystemFont"><a href=
                    "../../Reference/NiMain/NiObject.htm">NiObject</a>.</span><br>
                    <br></li>

                    <li>Objects that require naming and run-time type
                    information (RTTI) for type-safe downcasting of pointers
                    derive from <span class="NDLSystemFont"><a href=
                    "../../Reference/NiMain/NiObjectNET.htm">NiObjectNET</a>.</span><br>
                    <br></li>

                    <li>All classes in the library that represent visible or
                    audible scene graph objects derive from <span class=
                    "NDLSystemFont"><a href=
                    "../../Reference/NiMain/NiAVObject.htm">NiAVObject</a>.</span></li>
                </ul>
            </td>
        </tr>
    </tbody>
</table>

<p>These objects can themselves be subclassed by applications that require
capabilities that are not already supported by Gamebryo.</p>

<p>This class hierarchy enables Gamebryo to use a hierarchical scene graph. The
hierarchical scene graph enables applications to create nested coordinate
systems (for articulated objects and so on) and specify rendering properties
(for example, texture mapping and fogging) on an object-by-object or group
basis as desired. The hierarchical scene graph also enables Gamebryo to do
automatic run-time culling of geometry that has no chance of being visible.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
