<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Determining Performance Bottlenecks</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type=
"text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Determining Performance Bottlenecks</h1>

<p>The first step in any performance analysis is determining where and how deep
to dig.</p>

<h2>Tools</h2>

<p>What tools do we have to determine what our performance bottlenecks are?
Below is a brief discussion of using various tools to get a glimpse at
performance profiling. Frame rate provides the broadest measure but can be
deceiving for various reasons. The high performance counters and <span class=
"NDLSystemFont">NiProfile</span> provide more in-depth information.</p>

<h3>Frame Rate</h3>

<p>Perceived performance and responsiveness in an application is generally tied
to frame rate. If your game is running at a consistent sixty frames per second,
there's not much reason to dive in and profile much deeper. Having said that,
let's add that frame rate is the worst measure of performance you can use in
profiling; it is simply the first and easiest. You can get a quick measure of
performance using <span class="NDLSystemFont"><a href=
"../../Reference/NiApplication/NiFrameRate.htm">NiFrameRate</a></span> object
as outlined in the <span class="NDLSystemFont"><a href=
"../../Reference/NiApplication/NiFrameRate.htm">NiApplication</a></span>
documentation.</p>

<p>Using frame rate as the sole performance metric can be bad. It is often
bound by external considerations like the vertical synchronization interrupt on
the display device or even software frame rate limiters in your application.
Frame rate is also not very fine grained, so it gives very little insight into
where the slowdown is occurring. Use the frame rate to do an initial
determination of whether you should profile. Obviously, if your application is
running at twelve frames per second, you need to dig deeper and figure out what
the problem is.</p>

<h3>High Performance Counters</h3>

<p>It is possible to measure performance of smaller sections of code using high
performance counters. Gamebryo exposes these counters through the <span class=
"NDLSystemFont">NiSystem</span> function, <span class="NDLSystemFont"><a href=
"../../Reference/NiSystem/System_Query_Routines.htm">NiGetPerformanceCounter</a></span>.
This function returns a high performance counter measure. This counter varies
by platform but is often a measure of bus cycles. Performance numbers measured
consistently in performance counter ticks can be compared, or they can be
converted into seconds if needed. <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiStopWatch.htm">NiStopWatch</a></span> uses these
counters and provides a convenient object wrapper for profiling.</p>

<h3>NiMetrics</h3>

<p><span class="NDLSystemFont">NiMetrics</span> is a system that reports
information about the Gamebryo engine or about the end application itself as an
aide to determining what specific areas of code need more precise profiling and
tuning. You can read more about it in the <span class=
"NDLSystemFont">NiMetrics</span> <a href=
"../NiMetrics/Introduction.htm">documentation</a>.</p>

<h3>Low Level Profiling</h3>

<p>Low level profiling using sampling profilers or hardware performance
counters can be very useful for looking at specific sections of code. They can
often be used to determine what section of your application is slowing down.
Experienced users of sampling profilers may find them easier to use than
instrumenting code although both approaches have merit. A brief discussion of
low level profiling tools is available <a href="Low_Level_Profiling.htm">later
in this section</a>.</p>

<h2>Intermittent vs. Consistent Slowdown</h2>

<p>Performance issues in a game can come in many ways. Depending on the type of
slowdown you are having, you will need to perform different profiling
activities. The most important issue in profiling any situation is figuring out
how to reproduce the issue. Some issues are very easy to profile because they
are consistent given the position of the camera and moving objects in a game.
If we can point the camera toward "Tree 17" and see a slowdown, we not only
have a good idea that "Tree 17" might be the problem, but we can also capture
several frames of useful data to solve that problem.</p>

<p>A more difficult problem in games is slowdown that is not consistent. These
slowdowns occur intermittently and are difficult to catch with a sampling
profiler or code instrumentation. Often, these slowdowns are bus related and
occur when new objects are being rendered. The additional overhead of
transferring and setting up textures can cause application performance to
stutter briefly. A <a href="Profiling_Intermittent_Slowdown.htm">subsequent
section</a> will offer suggestions for capturing data useful to profiling such
situations.</p>

<h2>Correlating Performance Degradation to Application Events</h2>

<p><a href=
"../../Reference/NiApplication/NiApplication_and_NiVisualTrackers.htm"><span class="NDLSystemFont">
NiVisualTracker</span></a> provides a way to display a realtime graph of any
metric that you define, superimposed on the game display while the game is
running. This allows you to play the game and correlate hits with visual events
in the game. For example, if the frame rate takes a hit every time a certain
character appears on the screen, then goes back up when that character is off
the screen, you should investigate why that character is causing such a
degradation. <a href=
"../../Reference/NiApplication/NiApplication_and_NiVisualTrackers.htm"><span class="NDLSystemFont">
NiVisualTracker</span></a> is a general purpose tool; think about what metrics
will be useful for you to see in realtime, drop in the code necessary to make
those measurements, and see them overlayed on the running application.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
