<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Memory Management Troubleshooting</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<h1>Memory Management Troubleshooting</h1>

<p>The Gamebryo memory management system requires that 
 memory be allocated slightly differently than standard C++. This document 
 is designed to outline common errors and their solutions.</p>

<p>Gamebryo memory management tracking is controlled by 
 the <span class="NDLSystemFont">EE_USE_MEMORY_MANAGEMENT</span> define. 
 Gamebryo defines <span class="NDLSystemFont">EE_USE_MEMORY_MANAGEMENT</span> 
 by default for Debug and Debug DLL builds, but not for other configurations.</p>

<p>It is recommended that you regularly build and run configurations that define
 <span class="NDLSystemFont">EE_USE_MEMORY_MANAGEMENT</span> for diagnostic purposes.  These runs
 will generate helpful compiler errors and will also expose common memory errors at runtime.</p>

<a name=CompileTimeErrors></a><h2>Compile Time</h2>

<p>The following errors are generated by the compiler due 
 to misuse of the memory management system. </p>

<h3>Error #1 Incorrect usage of templated sets or arrays.</h3>

<p>If you encounter a compiler error like the one below, 
 the code does not declare the templated class with the allocator parameter.</p>

<pre><span class="NDLSystemFont">error C2976: 'NiTArray' : too few template arguments</span></pre>

<p><span class="NDLSystemFont"><a href="../../Reference/NiMain/NiTArray.htm">NiTArray</a> 
 object</span>s cannot be created without the additional <span class="NDLSystemFont">TAlloc</span> 
 template argument. The <span class="NDLSystemFont">TAlloc</span> should 
 be either <span class="NDLSystemFont">NiTMallocInterface&lt;T&gt;</span> 
 or <span class="NDLSystemFont">NiTNewInterface&lt;T&gt;</span>. Use <span 
 class="NDLSystemFont">NiTMallocInterface&lt;T&gt;</span> if the objects 
 contained within the array are intrinsic types (floats, ints, char, etc) 
 or do not need to have their constructors called. Use <span class="NDLSystemFont">NiTNewInterface&lt;T&gt;</span> 
 if the objects contained within the array are <a href="../../Reference/NiSystem/NiMemObject.htm"><span 
 class="NDLSystemFont">NiMemObject</span></a>-derived classes. This code 
 change can be simplified if you use either the <span class="NDLSystemFont"><a href="../../Reference/NiMain/NiTPrimitiveArray.htm">NiTPrimitiveArray</a></span> 
 or <span class="NDLSystemFont"><a href="../../Reference/NiMain/NiTObjectArray.htm">NiTObjectArray</a></span> 
 derived classes of <span class="NDLSystemFont"><a href="../../Reference/NiMain/NiTArray.htm">NiTArray</a></span>. 
 These map to <span class="NDLSystemFont">NiTMallocInterface&lt;T&gt;</span> 
 and <span class="NDLSystemFont">NiTNewInterface&lt;T&gt;</span> respectively.</p>

<h3>Error #2 Incorrect usage of EE_NEW (or NiNew)</h3>

<p>If you encounter a compiler error like the one below, the code calls 
<span class="NDLSystemFont"><a href="../../Reference/Macros/efd_macros_ee_new_ee_delete.htm">EE_NEW</a></span>  
  (or 
<span class="NDLSystemFont">  
  <a href="../../Reference/NiSystem/NiMemoryDefines.htm#NewAndDelete">NiNew</a></span>) 
  on an intrinsic or 
  non-<span class="NDLSystemFont"><a href="../../Reference/efd/efd__MemObject.htm">efd::MemObject</a>
</span> 
(or 
<span class="NDLSystemFont">
  <a href="../../Reference/NiSystem/NiMemObject.htm">NiMemObject</a>)
</span>  
type. Please use 
<span class="NDLSystemFont"><a href="../../Reference/Macros/efd_macros_ee_new_ee_delete.htm">EE_ALLOC</a></span>
(or 
<span class="NDLSystemFont">
 <a href="../../Reference/NiSystem/NiMemoryDefines.htm#StandardAllocRoutines">NiAlloc</a></span>) 
 instead.</p>

<pre>error C2660: 'operator new' : function does not take 4 arguments</pre>

<h3>Error #3 MFC cannot allocate MemObject-derived classes</h3>

<p>In an MFC application, 'new' is defined to mean '<span 
 class="NDLSystemFont">DEBUG_NEW</span>' in debug builds. Since this would 
 otherwise subsume all allocations, Gamebryo provides a set of convenience 
 functions for allocating Gamebryo objects, called <a href="../../Reference/NiSystem/NiTCreate.htm"><span 
 class="NDLSystemFont">NiTCreate</span></a>. In this case, please switch 
 to 
 <span class="NDLSystemFont"><a href="../../Reference/NiSystem/NiTCreate.htm">NiTCreate</a></span> instead of 
 <span class="NDLSystemFont">EE_NEW (or NiNew)</span>. 
 <span class="NDLSystemFont">EE_DELETE (or NiDelete)</span> is still permissible on these objects.</p>

<h3>Error #4 Cannot access private 'new' in MemTracker builds.</h3>

<p>If you encounter a compiler error like the one below, 
 the code calls 'new' instead of &nbsp;<a href="../../Reference/NiSystem/NiMemoryDefines.htm#NewAndDelete"><span 
 class="NDLSystemFont">NiNew</span></a>. It 
 is also useful to check that the code calls <span 
 class="NDLSystemFont"><a href="../../Reference/NiSystem/NiMemoryDefines.htm#NewAndDelete">NiDelete</a> </span>instead of delete.</p>

<pre>'NiMemObject::operator new' : cannot access private member declared in class 'NiMemObject'</pre>

<a name=RunTimeErrors></a><h2>Run Time</h2>

<p>If you are running builds that define <span class="NDLSystemFont">EE_USE_MEMORY_MANAGEMENT</span>, 
 <span class="NDLSystemFont"><a href="../../Reference/NiSystem/NiMemTracker.htm">NiMemTracker</a></span> 
 will generate asserts for common memory errors like:</p>

<ul>
	
	<li>Array overflow/underflow</li>
	
	<li>Mismatching allocation 
 and deallocation routines</li>
	
	<li>Leaked memory</li>
</ul>

<p>These <span class="NDLSystemFont"><a href="../../Reference/NiSystem/NiMemTracker.htm">NiMemTracker</a> 
 </span>asserts are outlined in the source code for the memory tracker 
 and should be sufficient for tracking down the problem. However, in some 
 cases the asserts are generated by outside code. This section details 
 common mistakes that lead to these asserts.</p>

<h3>Error #1 Windows generates the following assertion upon deallocation in debug</h3>

<div class="FigureContainer">
    <img src="./images/AssertionDialog.jpg" width="461" height="250" />
    <!-- <p class="FigureCaption">{Figure caption}</p> -->
</div>

<p>This indicates that you have either corrupted memory 
 or that you have freed memory using <span class="NDLSystemFont"><a href="../../Reference/NiSystem/NiMemoryDefines.htm#NewAndDelete">NiDelete</a></span> 
 when you meant to use <span class="NDLSystemFont"><a href="../../Reference/NiSystem/NiMemoryDefines.htm#StandardAllocRoutines">NiFree</a></span> 
 or that you freed the memory with standard free or delete instead of the 
 Gamebryo equivalents.</p>

<h3>Error #2 Assertion on NiVerifyAddress</h3>

<div class="FigureContainer">
    <img src="./images/AssertionDialog2.jpg" width="374" height="250"
/>
    <!-- <p class="FigureCaption">{Figure caption}</p> -->
</div>

<p>This assert is generated protectively in many sections 
 of Gamebryo. It is designed to help an application developer in the event 
 of Gamebryo taking ownership of an array. The array must be allocated 
 using Gamebryo allocation routines and this assert will be triggered if 
 it is not.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
