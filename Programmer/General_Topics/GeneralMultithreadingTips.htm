<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>General Multithreading Tips</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<h1>General Tips for Multithreaded Applications</h1>

<p>Applications multithreaded with Gamebryo should follow 
 a few simple rules to make sure that things run smoothly.</p>

<h2>Call NiSleep</h2>

<p>If you are using background loading, Gamebryo creates 
 threads at a lower priority than the main application thread. It is recommended 
 that applications creating their own threads follow this methodology as 
 well. &nbsp;Creating 
 threads in this way insures that the main rendering and game thread is 
 never starved for resources. &nbsp;On 
 a single process machine, the main thread should call <span class="NDLSystemFont"><a 
 href="../../Reference/NiSystem/Platform_Independent_Wrappers_For_System_Routines.htm">NiSleep</a></span> 
 to give processor time to the background thread in a controlled manner. 
 On multiprocessor machines, this is not necessary since threads can execute 
 on multiple processors.</p>

<p>All Gamebryo renderers will automatically suspend the 
 rendering thread if they wait for vertical retrace. On the Direct3D based 
 renderers it is possible to specify immediate presentation which will 
 execute the buffer swap when the function is called. &nbsp;Direct3D 
 renderers created this way will never give up time waiting for vertical 
 retrace.</p>

<h2>Avoid Simultaneous Access</h2>

<p>Accessing and manipulating a scene graph in two threads 
 simultaneously is inherently unsafe since the system has no knowledge 
 of what is going on in the other thread. In general an application should 
 only manipulate a scene graph in one thread at any given moment. </p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
