<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Property Descriptions</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type=
"text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Property Descriptions</h1>

<h2>NiAlphaProperty</h2>

<p><span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiAlphaProperty.htm">NiAlphaProperty</a></span> enables
or disables alpha blending based on vertex color alpha values and texture alpha
values. It also allows the source and destination blending functions to be set,
enabling lighting-style effects (and other special blending effects). Finally,
the property allows alpha testing to be enabled or disabled and the alpha
testing function and reference value to be set. Alpha testing may be used to
increase the performance of applications that use alpha blending to implement
binary transparency. It may also be used to avoid the need for back-to-front
drawing of some alpha blended objects.</p>

<h2>NiDitherProperty</h2>

<p><span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiDitherProperty.htm">NiDitherProperty</a></span>
enables or disables dithering, a feature that some renderers use to make 16-bit
displays or fogging effects appear to have greater color resolution.</p>

<h2>NiFogProperty</h2>

<p><span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiFogProperty.htm">NiFogProperty</a></span> turns fog
(also known as depth-cueing) on or off and sets the parameters of the effect.
This property's parameters currently include the near plane of the fog (minimum
distance at which fogging occurs), the fog color and the fogging mode, which
may be linear Z-based or based on the squared range (distance from eye point to
the vertex). The maximum fog value is always attained at the current far plane.
Fog color is independent of background color in all renderers, but applications
should be careful when setting a fog color that is different from the
background color, as visually jarring results can result with far-clipped
geometry.</p>

<h2>NiMaterialProperty</h2>

<p><span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiMaterialProperty.htm">NiMaterialProperty</a></span>
specifies the reflective properties of the surface of geometry objects. This
material description includes the color and shininess of the material for both
the front-facing and back-facing polygons with this material. See the <a href=
"Diffuse_Lighting_Equation.htm">Programming for Special Effects</a> manual for
a description of how the various material parameters are used to compute the
color at a point on a polygonal surface. Shininess values are supported. They
control the overall size of specular highlights with higher shininess values
creating more mirror-like (smaller) highlights.</p>

<h2>NiShadeProperty</h2>

<p><span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiShadeProperty.htm">NiShadeProperty</a></span>
specifies how the vertex colors and intensities of geometry objects are
interpolated during polygon rasterization. Supported modes are flat and
Gouraud.</p>

<h2>NiSpecularProperty</h2>

<p><span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiSpecularProperty.htm">NiSpecularProperty</a></span>
enables and disables specular lighting computations. Note that most renderers
will not incur a higher rendering cost with this property turned on unless
there are also materials and lights that require specular computations present
in the scene graph.</p>

<h2>NiStencilProperty</h2>

<p><span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiStencilProperty.htm">NiStencilProperty</a></span>
enables and disables stencil buffering and sets the pertinent values to
configure it. Stencil buffering allows effects such as cutouts in a screen,
decal polygons without Z-buffer "aliasing", and advanced effects such as
volumetric shadows. This property also includes a draw order (culling) mode
setting, which may be used to render a given piece of geometry with or without
front or back-facing triangles visible. The draw mode setting is used even if
stencil buffering is disabled, so the draw mode may be used for other effects
as well.</p>

<h2>NiTexturingProperty</h2>

<p><span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiTexturingProperty.htm">NiTexturingProperty</a></span>specifies
the primary and secondary images to be used for texture mapping onto <a href=
"../../Reference/NiMain/NiRenderObject.htm"><span class=
"NDLSystemFont">NiRenderObject</span></a> objects. These properties establish
how the texture mapped onto a surface is to be modulated by the final vertex
colors, the way the textures are filtered as they are applied, and how they are
clamped/wrapped to the surface. See the <a href=
"../Texturing/Introduction_to_Texturing.htm">Texturing</a> documentation for
much greater detail on the usage of this property.</p>

<h2>NiVertexColorProperty</h2>

<p><span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiVertexColorProperty.htm">NiVertexColorProperty</a></span>
specifies how each vertex in a piece of geometry is assigned a color. These
colors may come from material values, application-supplied vertex colors,
dynamic lighting, or a combination thereof. Specific vertex-color generation
modes are described in the <span class="NDLSystemFont">NiMain</span> reference
manual and in the Programming for Special Effects manual section on <a href=
"Per_vertex_Lighting_with_Dynamic_Effects.htm">per-vertex lighting</a>.</p>

<h2>NiWireframeProperty</h2>

<p><span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiWireframeProperty.htm">NiWireframeProperty</a></span>
specifies how the polygons in <a href=
"../../Reference/NiMain/NiRenderObject.htm">objects are displayed. Supported
modes are wireframe and solid (filled). Since many platforms experience
performance degradations when wireframe mode is used, it is recommended only
for debugging and tool purposes.</a></p>

<h2>NiZBufferProperty</h2>

<p><span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiZBufferProperty.htm">NiZBufferProperty</a></span>
provides for dynamic enabling and disabling of Z-buffering. The property can
also turn on write-only Z-buffering, whereby objects that are already known to
be sorted in back-to-front order can be drawn quickly while still keeping the
Z-buffer consistent for the later drawing of objects for which back-to-front
ordering cannot be ensured. Finally, the property can support read-only
Z-buffering, which is useful when rendering translucent objects that should be
sorted with respect to the existing depth-buffered objects, but should not
themselves appear in the depth buffer.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
