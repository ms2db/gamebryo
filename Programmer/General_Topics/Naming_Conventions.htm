<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Naming Conventions</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Naming Conventions</h1>

<p>Gamebryo class, template, and method names use capitalization to separate words in the name
    (for example, <span class="NDLSystemFont"><a href="../../Reference/efd/efd__DataDrivenEnum.htm">
    efd::DataDrivenEnum</a></span>).</p>

<p>Gamebryo avoids using global-scope constants and enumerated types wherever possible. Instead,
    it uses namespace scoped or class-local types.</p>

<p>Enumerated type values are denoted in all caps with underscores separating words (for example,
    <span class="NDLSystemFont"><a href="../../Reference/NiMain/NiAlphaProperty.htm">
    NiAlphaProperty::ALPHA_SRCALPHA</a></span>).</p>

<p>Libraries in the Foundation and GameFramework subsystems follow a naming convention
    that uses a prefix attached to the module name which matches the namespace that is used within
    the module. For example, the namespace for Foundation is "<span class="NDLSystemFont">efd</span>".
    The main library for Foundation is simply named <span class="NDLSystemFont">efd</span>.  An
    additional library inside of Foundation is <span class="NDLSystemFont">efdLogService</span>
    which contains the class <span class="NDLSystemFont">efd::LogService</span> and other
    related code. When a library is built for a "DLL" build configuration the library name will
    be appended with a suffix denoting the version number, compiler, and build configuration (for
    example, <span class="NDLSystemFont">efdLogService32VC90D.lib</span> where 3.2 is the 
    version number, Visual C++ is the compiler and a debug build configuration was used).</p>

<p>Foundation and GameFramework subsystems use namespaces for all symbols.  Some commonly used
    namespaces include:</p>
<table>
    <thead>
        <tr>
            <th>Namespace</th>
            <th>Subsystem</th>
            <th>Usage</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><span class="NDLSystemFont">efd</span></td>
            <td>Foundation</td>
            <td>All classes, types, constants and enumerations forming the Foundation subsystem.</td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">egf</span></td>
            <td>Game Framework</td>
            <td>Classes and components of the Game Framework that only depend on Foundation or
                third party libraries.</td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">ecr</span></td>
            <td>Core Runtime Services</td>
            <td>Portions of the Game Framework that depend on both the base Game Framework
                libraries and the Core Runtime subsystem.</td>
        </tr>
        
        <tr>
            <td><span class="NDLSystemFont">eon</span></td>
            <td>Online</td>
            <td>All classes, types, constants and enumerations forming the Online subsystem, which
                depends on the base Game Framework and Foundation subsystems.</td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">egm</span></td>
            <td>Game Module</td>
            <td>A separable add-on to the Game Framework that implements a specific stand-alone set
                of functionality.  Some game modules may depend on Core Runtime or
                <span class="NDLSystemFont">ecr</span> services.</td>
        </tr>
    </tbody>
</table>

<p>The following variable prefixes are used throughout Gamebryo LightSpeed:</p>
<table>
    <thead>
        <tr>
            <th>Type</th>
            <th>Prefix</th>
            <th>Example</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><span class="NDLSystemFont">pointer</span></td>
            <td><span class="NDLSystemFont">p</span></td>
            <td><span class="NDLSystemFont">float* pVariable;</span></td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">smart pointer</span></td>
            <td><span class="NDLSystemFont">sp</span></td>
            <td><span class="NDLSystemFont">efd::ISystemServicePtr spService;</span></td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">pointer to pointer</span></td>
            <td><span class="NDLSystemFont">pp</span></td>
            <td><span class="NDLSystemFont">float** ppfVariable;</span></td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">pointer to function</span></td>
            <td><span class="NDLSystemFont">pfn</span></td>
            <td><span class="NDLSystemFont">int (*pfnVariable)();</span></td>
        </tr>
    </tbody>
</table>

<h2>Style Differences in Core Runtime</h2>
<p>Some Gamebryo Core Runtime class type names are prefixed with the <span class="NDLSystemFont">
    Ni</span> prefix (for example, <span class="NDLSystemFont"><a href=
    "../../Reference/NiMain/NiSwitchNode.htm">NiSwitchNode</a></span>).  This prefix has been
    carried over from NetImmerse 4.2.2 (the precursor to Gamebryo Core Runtime) to avoid forcing
    customers who are upgrading to make unnecessary naming changes in existing application code.</p>

<p>Core Runtime does not regularly use namespaces.</p>
 
<p>Libraries in Core Runtime are prefixed with <span class="NDLSystemFont">Ni</span> as Core
    Runtime does not use namespaces.  Core Runtime libraries use the same suffixing for DLL build
    configurations as mentioned above.</p>

<p>In addition to the prefixes listed above, Gamebryo Core Runtime also uses the following variable
    prefixes to differentiate between different types of variables:</p>

<table>
    <thead>
        <tr>
            <th>Type</th>
            <th>Prefix</th>
            <th>Example</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><span class="NDLSystemFont">character</span></td>
            <td><span class="NDLSystemFont">c</span></td>
            <td><span class="NDLSystemFont">char cVariable;</span></td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">short</span></td>
            <td><span class="NDLSystemFont">s</span></td>
            <td><span class="NDLSystemFont">short sVariable;</span></td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">integer</span></td>
            <td><span class="NDLSystemFont">i</span></td>
            <td><span class="NDLSystemFont">int iVariable;</span></td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">long</span></td>
            <td><span class="NDLSystemFont">l</span></td>
            <td><span class="NDLSystemFont">long lVariable;</span></td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">unsigned character</span></td>
            <td><span class="NDLSystemFont">uc</span></td>
            <td><span class="NDLSystemFont">unsigned char ucVariable;</span></td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">unsigned short</span></td>
            <td><span class="NDLSystemFont">us</span></td>
            <td><span class="NDLSystemFont">unsigned short usVariable;</span></td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">unsigned integer</span></td>
            <td><span class="NDLSystemFont">ui</span></td>
            <td><span class="NDLSystemFont">unsigned int uiVariable;</span></td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">unsigned long</span></td>
            <td><span class="NDLSystemFont">ul</span></td>
            <td><span class="NDLSystemFont">unsigned long ulVariable;</span></td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">enumeration</span></td>
            <td><span class="NDLSystemFont">e</span></td>
            <td><span class="NDLSystemFont">NiFogProperty::FogFunction eFunction;</span></td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">float</span></td>
            <td><span class="NDLSystemFont">f</span></td>
            <td><span class="NDLSystemFont">float fVariable;</span></td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">double</span></td>
            <td><span class="NDLSystemFont">d</span></td>
            <td><span class="NDLSystemFont">double dVariable;</span></td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">class, struct</span></td>
            <td><span class="NDLSystemFont">k</span></td>
            <td><span class="NDLSystemFont">NiPoint3 kVariable;</span></td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">array</span></td>
            <td><span class="NDLSystemFont">a</span></td>
            <td><span class="NDLSystemFont">unsigned int auiVariable[2];</span></td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">pointer to void</span></td>
            <td><span class="NDLSystemFont">pv</span></td>
            <td><span class="NDLSystemFont">void* pvVariable;</span></td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">size_t</span></td>
            <td><span class="NDLSystemFont">st</span></td>
            <td><span class="NDLSystemFont">size_t stVariable;</span></td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">ptrdiff_t</span></td>
            <td><span class="NDLSystemFont">dt</span></td>
            <td><span class="NDLSystemFont">ptrdiff_t dtVariable;</span></td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">NiInt8/NiInt16/<br>NiInt32/NiInt64</span></td>
            <td><span class="NDLSystemFont">i</span></td>
            <td><span class="NDLSystemFont">NiInt32 iVariable;</span></td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">NiUInt8/NiUInt16/<br>NiUInt32/NiUInt64</span></td>
            <td><span class="NDLSystemFont">ui</span></td>
            <td><span class="NDLSystemFont">NiUInt32 uiVariable;</span></td>
        </tr>

    </tbody>
</table>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
