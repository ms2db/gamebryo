<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Floodgate Specifying Fixed Inputs</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<h1>Floodgate Specifying Fixed Inputs</h1>

<p>A Fixed Input specifies data that remains constant throughout 
 the execution of a particular Task. Examples of Fixed Inputs include weights 
 for morphing or matrices for skinning. During the execution of a Task, 
 fixed data can be used in conjunction with data from the varying streams 
 to perform novel transforms. It is important to understand that a Fixed 
 Input can contain any number of elements and all of those elements will 
 always be available when processing the varying streams of data. </p>

<p>In the following code, we create an <span class="NDLSystemFont"><a href="../../Reference/NiFloodgate/NiTSPFixedInput.htm">NiTSPFixedInput</a></span> 
 input using the variable we created in the setup for this purpose. Like 
 <span class="NDLSystemFont"><a href="../../Reference/NiFloodgate/NiTSPStream.htm">NiTSPStreams</a></span>, 
 <span class="NDLSystemFont">NiSPFixedInputs</span> are not limited to basic 
 types and can consist of structures as well. The new code is highlighted below:</p>

<h2>Source Code</h2>

<pre>
//---------------------------------------------------------------------------
bool MyApplication::UpdateFrame()
{
    // Update base class
    NiApplication::UpdateFrame();
 
    // Initialize data buffers
    for (NiUInt32 i = 0; i &lt; 256; i++)
    {
        auiInputBuffer1[i] = i;
        auiInputBuffer2[i] = i;
    }
    memset(auiOutputBuffer1, 0, sizeof(auiOutputBuffer1));
    memset(auiOutputBuffer2, 0, sizeof(auiOutputBuffer2));
 
    // Initialize streams
    NiTSPStream&lt;NiUInt32&gt; kStream0(auiInputBuffer1, 256);
    NiTSPStream&lt;NiUInt32&gt; kStream1(auiInputBuffer2, 256);
    NiTSPStream&lt;NiUInt32&gt; kStream2(auiOutputBuffer1, 256);
    NiTSPStream&lt;NiUInt32&gt; kStream3(auiOutputBuffer2, 256);
 
<span class="CodeHighLight">    // Initialize fixed input
    NiTSPFixedInput&lt;NiUInt32&gt; kFixedInput(&amp;uiFixedInput, 1);</span>
    ...;
}
//---------------------------------------------------------------------------
</pre>

<p>Next, we discuss the <a href="Floodgate_Workflow_Creation.htm">creation 
 of workflows</a>.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
