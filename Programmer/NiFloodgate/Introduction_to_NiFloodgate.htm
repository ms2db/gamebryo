<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Introduction to NiFloodgate</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->

<!--(Begin Links)===================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<h1>Introduction to NiFloodgate</h1>

<p>Floodgate is a cross platform stream processing engine
 that enables developers to exploit the data-processing power of multi-processor
 platforms. Floodgate has proven performance benefits on PCs, PS3, and Xbox 360.</p>

<p>Developing for multi-processor platforms like PS3 can be difficult,
 and balancing the characteristics of multiple platforms only increases
 those difficulties. With Floodgate, applications quickly and easily take
 advantage of the processor and memory configuration on each platform.
 The programmer specifies the operations to perform and the associated
 streams of data, and Floodgate is designed to execute those operations
 with maximum efficiency. The impact on cross-platform projects is significant,
 enabling developers to harness the power of idle SPUs on PS3 while optimizing
 cache utilization across multiple cores on the Xbox 360 and PC. For information
 on per-platform resource usage, please refer to the <a href="Features_and_Limitations_of_Floodgate.htm">features
 and limitations documentation</a>.</p>

<p>Floodgate enables users to create entire workflows of
 interconnected tasks which are then analyzed, broken down, and scheduled
 for execution across all available cores and SPUs. Workflows
 can be created dynamically based on information at runtime, or they can
 be cached for execution multiple times. Floodgate handles all buffer management,
 optimally transferring aligned and unaligned data across multiple processing
 units. It also provides a cross-platform notion of scheduling priorities
 and synchronization.</p>

<p>The basic components of Floodgate are Streams, Kernels,
 Tasks, Workflows, and the StreamProcessor. Streams contain data to be
 operated upon or output. Kernels implement operations to be performed
 on Streams. A Task is a description of a step within a larger process
 and accepts a Kernel and one or more Streams as input or output. A Workflow
 is a collection of Tasks that define a complete process to be executed.
 Finally, at the core of Floodgate is the StreamProcessor, which manages
 the submission, execution, and monitoring of Workflows.</p>

<p>The <a href="Floodgate_Programming_Guide.htm">Floodgate
 Programming Guide</a> provides the reader with a step by step guide for
 implementing, compiling, executing and monitoring Workflows.</p>

<p>The <a href="../../Reference/NiFloodgate/Introduction_to_NiFloodgate_Class_Reference.htm">Floodgate
 Class Reference</a> provides documentation on the <span class="NDLSystemFont">NiFloodgate</span>
 library and API.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
