<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Applying Decals to the Terrain</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type=
"text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>



  <h1>
    Applying Decals to the Terrain
  </h1>
  <p>
    Like most interaction with the terrain, decals can be applied through the 
    <span class="NDLSystemFont"><a href="../../Reference/NiTerrain/NiTerrain.htm">NiTerrain</a></span>
    object. A decal is a small mesh that copies the terrain vertex streams so that it
    follows the terrain. Each decal is handled by the <span class="NDLSystemFont">
    <a href="../../Reference/NiTerrain/NiTerrainDecalManager.htm">NiTerrainDecalManager</a></span> object.
    When a block is changed (deformed) the decals on that block are updated to follow
    the new layout of the terrain.</p>
  <p>
    To add a decal to the terrain, access to the <span class="NDLSystemFont">NiTerrain</span> object is required. Once
    an instance of the terrain has been retrieved, the <span class="NDLSystemFont">CreateDecal</span> method can be called.</p>
  <p>
    There are a few available parameters to be set when calling the 
    <span class="NDLSystemFont">CreateDecal</span> method:</p>
  <ul>
    <li><span class="NDLSystemFont">NiTexture* pkDecalTexture</span> </li>
    <ul>
      <li>defines the texture that should be used on the decal. It is stored internally
        using a reference counted pointer. </li>
    </ul>
    <li><span class="NDLSystemFont">NiPoint3 kPosition</span> </li>
    <ul>
      <li>defines the world location where the decal will be created. This is usually worked
        out by casting a ray towards the terrain and using the intersection point as the
        decal position. </li>
    </ul>
    <li><span class="NDLSystemFont">NiUInt32 uiSize</span> </li>
    <ul>
      <li>defines the side length for the decal, in terrain voxels. A size of 0 will mean
        that the decal exactly covers one pair of terrain triangles. A decal covers as many
        voxels in width and length. </li>
    </ul>
    <li><span class="NDLSystemFont">NiUInt32 uiRatio</span> </li>
    <ul>
      <li>defines the scale that should be used to display the texture on the decal. The
        bigger the value is the smaller the texture will appear. This allows the use of
        higher detail textures for small decals as well as creating very small decals (smaller
        than 1 terrain voxel). </li>
    </ul>
    <li><span class="NDLSystemFont">float fTimeOfDeath</span> </li>
    <ul>
      <li>defines when the decal should be destroyed. The time value should be greater than
        the total accumulated time of the application in seconds. </li>
    </ul>
    <li><span class="NDLSystemFont">float fDecayStartTime</span> </li>
    <ul>
      <li>defines the amount of time before the time of death when the decal should start
        to fade away. </li>
    </ul>
    <li><span class="NDLSystemFont">float fDepthBiasOffset</span> </li>
    <ul>
      <li>defines the minimum distance offset that should be applied to the decal to avoid
        z fighting. The greater the scale of the terrain, the bigger the decal, and the
        smaller the near-plane distance of the camera frustum are, the greater this value
        should be. This value controls how far above the terrain the decal will float when
        the camera is close. That distance will however be increased when the camera moves
        away from the decal as z fighting becomes more likely the further away the two coplanar
        objects are from the viewpoint. </li>
    </ul>
  </ul>
  <p>
    One more option can be set on the created decal which controls the fading of that
    decal according to the distance from the camera. This value can be set once the
    decal has been created by calling the member function 
    <span class="NDLSystemFont">SetFadingDistance(float fMaximumDistance)</span>.
    </p>
  <p>
    The <span class="NDLSystemFont">
    <a href="../../Reference/NiTerrain/NiTerrainDecalManager.htm">NiTerrainDecalManager</a></span> object takes care of decal management once a decal is
    attached to the terrain. This includes fading out of the decal, deletion of the
    decal, and so on.</p>
    

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
