<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiTerrain Multi-sector System</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> 
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<h1>NiTerrain Multi-sector System</h1>

  <h2>
    Introduction
  </h2>
  <p>The terrain library supports the ability to load many sectors of terrain into memory and render them together. Multi-sector terrains may be created through the tools provided in the Toolbench application and are fully supported.</p>
  
  <p>Multi-sector terrains allow a developer to generate large, continuous worlds, to render them into the distance, and have control over the amount of data and detail that is loaded into memory at any one time.</p>
  <h2>
    <a id=_Loading_Unloading_sectors_321 name=_Loading_Unloading_sectors_321></a> Loading/Unloading sectors
  </h2>
  <p>An interface has been provided on the <span class="NDLSystemFont">
    <a href="../../Reference/NiTerrain/NiTerrain.htm">NiTerrain</a></span> object to control the loading/unloading of individual sectors during runtime. This function has the following signature:</p>
  
  <pre>bool NiTerrain::PageSector(NiInt16 sIndexX, NiInt16 sIndexY, NiInt32 iLOD);</pre>
  
  <p>This function may be called with a specific sector's coordinates and the level of detail to 
  load that sector to. A level of detail value of '-1' will cause that sector to unload completely 
  from memory. This functionality is provided to allow low-level control over what sectors are 
  loaded to what level of detail, though the most common method for loading/unloading sectors will 
  be through using automated "Sector Selector" objects. These objects are described in further 
  detail in the documentation section on 'paging'.</p>
  
  <p>It is worth noting that by default, a fresh <span class="NDLSystemFont">
    <a href="../../Reference/NiTerrain/NiTerrain.htm">NiTerrain</a></span> object will attempt to load sector 0,0 at 
  load time.</p>
  
  <p>Whilst a terrain entity created in the Game Framework system will only attempt to load sectors 
  it has been configured to load initially through its "TerrainInitialSectors" property.</p>
  <h2>
    Limitations
  </h2>
  <p>When attempting to load a sector to a certain level of detail (<i>x</i>), it is important to 
  make sure that all the sectors around the sector in question are loaded to at least the level of 
  detail: <i>x</i> - 1.</p>
  <p>Failure to adhere to this may cause cracks to appear between individual sectors of the terrain.</p>


</body>
</html>
