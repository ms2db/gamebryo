<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiTerrain Collision System</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>


<h1>NiTerrain Collision system</h1>

<p>Collision with the terrain can be performed by using 
 one of two methods. The first and in some cases most efficient method 
 is through ray casting. The second method is through integration with 
 PhysX. Both methods are outlined here. </p>

<h2>Ray Casting</h2>

<p>Casting rays to the terrain is the preferred method 
 for a user to gather information about the terrain at a specific point. 
 It can be used to find a point of collision, find out the height and surface 
 normal at a given (x,y) coordinate, gather meta data information.</p>

<p>Rays have a direction,&nbsp;a start position and a maximum 
 length. More details about the use of rays is contained on the <a href="Query_with_rays.htm">ray-casting 
 page</a>.</p>

<h2>PhysX Integration</h2>

<p>The second method of collision detection and response 
 is through PhysX. As with many other libraries in Gamebryo, the terrain 
 engine library features integrated support for PhysX height-maps. Each 
 terrain block is allocated an actor in the PhysX scene where each actor 
 is defined by its height-map. The <a href="NiTerrain_Meta_Data_System.htm">material 
 meta-data</a> of the terrain can then be used to define the properties 
 of each material on the terrain. Meta-data is then converted to PhysX 
 materials, allowing complex simulation of material interactions such as 
 friction or restitution.<br>
<br>
Detailed information on the use of PhysX with the terrain engine can be 
 found in
  <a href="../../Programmer/NiPhysX/Overview_of_Gamebryo-PhysX_Terrain.htm">
  Overview of Gamebryo-PhysX Terrain</a>. 
 </p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
