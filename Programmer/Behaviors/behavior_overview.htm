<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Behaviors overview</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Behaviors overview</h1>

<p>A Behavior is a chunk of code associated with a Model and all
the Entities that have that Model mixed into them. It can be
thought of as a public method, or a schedulable action or event
handler to be run by that Entity. An Entity causes a Behavior to
run on itself or other Entities by performing a Behavior
invocation request. This can be thought of as sending or
triggering an event. The Behavior requested must belong to the
target Entity. The request sends a message to the target Entity,
and its scheduler eventually causes that Entity to execute the
selected Behavior.</p>

<p>Behaviors can be process oriented, meaning they can block
waiting for a period of real time, or waiting for a nested
Behavior request to complete its execution. This means any
Behavior may suspend with an execution context saved. New
Behavior requests may be scheduled for the same Entity, so the
game logic must take into account concurrency. The system uses
cooperatively scheduled co-routines, so the game does not have to
take into account preemptive scheduling or race conditions. Note
that cooperatively scheduled co-routines and process oriented
Behaviors are only available when using a scripting language, not
with C++ based Behaviors. Alternatively, the application can
implement a Behavior to execute and complete in one tick, causing
it to act like an event oriented system. We strongly recommend
using process-oriented programming since the code context can be
used instead of abstract state machines. For example, a unit on
patrol is implemented as a loop with time delays. When it turns
to attack, it runs the code after the loop, or begins running the
Attack Behavior which in turn can perform a blocking sequence of
steps or loops.</p>

<p>Scheduling is performed using discrete event methods. This
means that all processing in a Behavior (between blocking calls)
occurs at the same virtual time, and in a single tick. Behavior
invocation requests can be scheduled to occur at a future time.
For example when an Entity arrives at a destination, it can
perform some action. The travel time can be pre-computed, and the
action scheduled for that time. This approach can save
significant amounts of computation by avoiding all the ticks
between the request and the scheduled time. Note that
interrupting Behaviors can still occur, and that multiple
requests can be queued simultaneously for one Entity.</p>

<p>If a game is implemented as a time stepped simulation, the
discrete event scheduler will support that by scheduling an
OnTick Behavior to execute periodically.</p>

<p>Behaviors can be implemented in C++, or any scripting language
that can be bound to C++ either automatically using SWIG or bound
manually. A single Model can have Behaviors implemented in more
than one language.</p>

<p>Arbitrary functions can be presented to the Behaviors for
execution using the Built-in API. The system, game, or game pack
would select desired functions, and add them to SWIG description
files. After a compilation, those built-ins can be called from any
scripted Behavior.</p>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
  <li><a href="behavior_how_work.htm">How behaviors work</a></li>
  <li><a href="behavior_limitations.htm">Behavior limitations</a></li>
  <li><a href="behavior_reqs.htm">Requirements for working with behaviors</a></li>
  <li><a href="behavior_best_practice.htm">Best practices for working with behaviors</a></li>
  <li><a href="behavior_using.htm">Using behaviors</a></li>
  <li><a href="behavior_troubleshoot.htm">Troubleshooting behaviors</a></li>
  <li><a href="behavior_reference.htm">Behavior reference</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>