<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Behavior features</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Behavior features</h1>

<h4>Multiple languages</h4>

<p>Behaviors may be implemented in various languages and an Entity's behaviors are not limited to
    using only a single language. Currently C++ and Lua are fully supported along with a Python
    sample demonstrating how other languages can be added. Other scripting languages may be added
    to the system as needed.</p>

<h4>Multiple invocation types</h4>

<p>There are a number of ways to request that a Behavior be invoked. The following BehaviorAPI
    methods demonstrate the available methods:</p>

<ul>
    <li>SendEvent - This causes a target entity to have the named Behavior scheduled to be executed.
        Only public types of Behaviors can be invoked. The caller does not block on the new event or
        receive a reply. A time delay can be requested to run the requested behavior at some point
        in the future. This could be used, for example, to cause a grenade to detonate 5 seconds
        from now. The target entity can be any entity including the calling entity.</li>

    <li>SendAndWaitForReply - This schedules the behavior to be run on the target entity, but blocks
        the caller until the target behavior has completed. When the target behavior is finished it
        can call SendReply in order to return results to the calling behavior. If SendReply is not
        manually called an empty reply will be automatically generated. When the reply is received
        the caller is unblocked and will continue execution where it left off. The target entity can
        be any entity including the calling entity.</li>

    <li>SendEvent with a callback - This form of SendEvent schedules a behavior on a target entity
        just like a normal SendEvent. As normal, the calling behavior does not block but continues
        its execution. When making this call the name of a callback behavior is specified. The
        callback is simply another behavior implemented on the calling entity. When the target
        behavior finishes executing a reply message will automatically be sent to the calling entity
        which will invoke the callback behavior. As with SendAndWaitForReply, the target behavior
        can call SendReply in order to pass data to the callback behavior.</li>

    <li>CallBehavior - This only applies to behaviors on the local simulator that have the immediate
        trait set. The requested behavior will be immediately invoked just as if it were a direct
        function call. This can call behaviors implemented in different languages, for example a Lua
        behavior could immediately call a C++ behavior or vice versa. The stack frame is pushed on
        the caller and control flow acts like a blocking function call. However, the behavior is
        executed in the scope of the target entity. As with other invocation types the target entity
        can be the same as the calling entity. Note that the semantics of CallBehavior are identical
        to SendAndWaitForReply, which should be used if the target is not on the local simulator.
        This could be used, for example, to invoke a mixed-in non-extends behavior from an override
        of that behavior.</li>
</ul>

<h4>Event based distributed execution</h4>

<p>The fundamentally event based mechanism makes it easy to reuse logic when an application needs to
    be multi-player since event based Behavior invocation requests can easily be transported to a
    remote simulator. When developing Entities and Behaviors, it can be helpful to adopt the mental
    model that each Entity is a separate logical process that solely owns writing its Properties
    and does its own event scheduling.</p>

<h4>Flexible object oriented development</h4>

<p>Behaviors are created as part of models similar to method on classes in C++. Models may be mixed
    together to form more complex models that can extend the functionality of their base models. By
    default, Behaviors in sub-Models resolve like virtual functions in C++. By using the "extends"
    Behavior Trait, the implementation of the Behavior in each sub-Model can be made to run serially
    when a Behavior is executed. This enables the designer to use Models as snap-together parts,
    knowing that each can be individually designed, but still affected by things happening to the
    entire Entity without writing new code to dispatch actions to sub-components.</p>

<p>To aid developers, Game Framework level built-in API methods are available in each of the
    behavior languages to allow them to find entities, models, properties, behaviors, invoke
    behaviors, and change properties. These methods provide a bridge from the scripting languages to
    the C++ and allow them to interact with the rest of the system. Additional built-in API methods
    may be added by developers where they are needed. This is normally done in the context of a Game
    Module.</p>

<p>Behaviors written in scripted languages may be edited while the simulator is running and then
    reloaded on the fly to allow developers to rapidly iterate the game logic.</p>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
    <li><a href="behavior_overview.htm">Behaviors overview</a></li>

    <li><a href="behavior_how_work.htm">How behaviors work</a></li>

    <li><a href="behavior_limitations.htm">Behavior limitations</a></li>

    <li><a href="behavior_reqs.htm">Requirements for working with behaviors</a></li>

    <li><a href="behavior_best_practice.htm">Best practices for working with behaviors</a></li>

    <li><a href="behavior_using.htm">Using behaviors</a></li>

    <li><a href="behavior_using_traits.htm">Behavior Traits</a></li>

    <li><a href="../Scheduler/scheduler_intro.htm">The Entity Scheduler</a> - explains how a
        Behavior request is queued, and how an Entity is scheduled to execute the associated
        Behavior.</li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
