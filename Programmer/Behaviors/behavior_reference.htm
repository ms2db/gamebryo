<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Behavior reference</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->

<!--(Begin Links)===================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<h1>Behavior reference</h1>

    <p>
        Below is the list of all the behaviors provided by the Game Framework. Like all behaviors,
        these behaviors have two parameters, an Entity Id and a Parameter List.</p>

<table>
    <thead>
        <tr>
            <th>Behavior</th>
            <th>Parameters</th>
            <th>Description</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td class="ColSpan" colspan="3"><b>LifeCycle Behaviors</b> - LifeCycle Behaviors can
            be used on any entity running in the scheduler. They are usually overridden by the user
            for models expected to perform a certain behavior when added and removed from the
            simulation. These behaviors should not be invoked directly, they are automatically
            scheduled when the corresponding events occur. See also <a
            href="../Blocks/block_load_sequence.htm">Block Loading Sequence</a> for futher details
            about when these behaviors are called.</td>
        </tr>
        <tr>
            <td>OnCreate</td>
            <td>
            <table>
                <thead>
                    <tr><th>Name</th><th>Type</th><th>Description</th></tr>
                </thead>
                <tbody>
                <tr>
                    <td>AutoEnterWorld</td>
                    <td>Boolean</td>
                    <td>An indicator of whether this entity will automatically be placed into the
                        world once creation is complete. This value is purely informational, no
                        action is required and the auto-enter-world status cannot be changed during
                        OnCreate. You can, however, enter or exit the world during OnCreate and the
                        request will be queued until creation is completed.</td>
                </tr>
                <tr>
                    <td><i>User defined</i></td>
                    <td><i>various</i></td>
                    <td>Additional parameters for OnCreate can be specified during entity creation.</td>
                </tr>
                </tbody>
            </table>
            </td>
            <td>This is an initialization behavior executed automatically when the entity is
            created and added to the EntityManager. There are no default parameters but users may
            supply their own parameters; when passing parameters to an "extends" style behavior you
            should always use named parameters and not rely on the parameter order.</td>
        </tr>
        <tr>
            <td>OnAssetsLoaded</td>
            <td>None</td>
            <td>This behavior is called after OnCreate once entity preloading is complete. For
            entities whose PreloadAssets property is FALSE, or entities which do not include the
            Preloadable mix-in, this behavior is still called after OnCreate completes.
            </td>
        </tr>
        <tr>
            <td>OnEntitySetFinished</td>
            <td>None</td>
            <td>This behavior is called after creation and preloading has completed for all the
            entities in a block file. For entities created individually (not as part of a block
            file) this is called as soon as the OnCreate and OnAssetsLoaded lifecycles complete.</td>
        </tr>
        <tr>
            <td>OnEnterWorld</td>
            <td>None</td>
            <td>This behavior is executed when an entity requests to enter the world. This will only
            be called once the OnCreate lifecycle has completed. Entities can enter and exit the
            world multiple times.</td>
        </tr>
        <tr>
            <td>OnExitWorld</td>
            <td>None</td>
            <td>This behavior is executed when an entity requests to exit the world. This will only
            be called if the entity has already entered the world. Entities can enter and exit the
            world multiple times.</td>
        </tr>
        <tr>
            <td>OnDestroy</td>
            <td>None</td>
            <td>This behavior is executed when destruction of the entity is requested. It is
            possible for an entity to be destroyed before it finished creation so this lifecycle
            can occur even if the OnCreate lifecycle did not occur.</td>
        </tr>
        <tr>
            <td>OnDiscovery</td>
            <td>None</td>
            <td>This is an initialization behavior for replicated entities which is executed
            automatically when the entity is first replicated to a new process. This behavior is
            called on replica entities instead of calling OnCreate and serves a similar purpose.</td>
        </tr>
        <tr>
            <td>OnReplicaAssetsLoaded</td>
            <td>None</td>
            <td>This behavior is called for replica entities after OnDiscovery once entity
            preloading is complete. For entities whose PreloadAssets property is FALSE, or entities
            which do not include the Preloadable mix-in, this behavior is still called. This
            behavior is called instead of OnAssetsLoaded for replica entities.</td>
        </tr>
        <tr>
            <td>OnFinalLoss</td>
            <td>None</td>
            <td>This behavior is executed when all replication categories of a replica entity are
            either removed or unsubscribed. It is possible for an entity to be lost before it
            finished discovery so this lifecycle can occur even if the OnDiscovery lifecycle did
            not occur. This behavior is called instead of OnDestroy for replica entities.</td>
        </tr>

        <tr>
            <td class="ColSpan" colspan="3"><b>egf::EntityManager Behaviors</b></td>
        </tr>
        <tr>
            <td><i>User defined</i> - BehaviorAPI.CreateEntity callback</td>
            <td>
            <table>
                <thead>
                    <tr><th>Name</th><th>Type</th><th>Description</th></tr>
                </thead>
                <tbody>
                <tr>
                    <td>Entity</td>
                    <td>EntityID</td>
                    <td>The entity ID of the created entity, or Entity.InvalidEntity on failure.</td>
                </tr>
                <tr>
                    <td>Result</td>
                    <td>UInt32</td>
                    <td>One of the <a href="../../Reference/efd/efd__AssetLoadResponse.htm#classefd_1_1_asset_load_response_1a32387713d9121f41d010c4d0dbfea159">
                        efd::AssetLoadResponse::AssetLoadResult</a> values which tells status of the
                        entity creation request.</td>
                </tr>
                </tbody>
            </table>
            </td>
            <td>This behavior is executed when a behavior callback is provided during entity creation.</td>
        </tr>

        <tr>
            <td class="ColSpan" colspan="3"><b>egf::EntityLoaderService Behaviors</b></td>
        </tr>
        <tr>
            <td><i>User defined</i> - BehaviorAPI.LoadBlock or BehaviorAPI.UnloadBlock callback</td>
            <td>
            <table>
                <thead>
                    <tr><th>Name</th><th>Type</th><th>Description</th></tr>
                </thead>
                <tbody>
                <tr>
                    <td>BlockAsset</td>
                    <td>String</td>
                    <td>The urn of the block that was loaded or unloaded.</td>
                </tr>
                <tr>
                    <td>BlockInstance</td>
                    <td>UInt32</td>
                    <td>The instance ID for the loaded block. Defaults to zero for non-instanced
                        blocks.</td>
                </tr>
                <tr>
                    <td>Result</td>
                    <td>UInt32</td>
                    <td>One of the <a href="../../Reference/egf/egf__EntityLoadResult.htm#classegf_1_1_entity_load_result_1a0a16179d3ea9976996affd56c0bc9bd5">
                        egf::EntityLoadResult::Result</a> values which tells status of the load or
                        unload request.</td>
                </tr>
                <tr>
                    <td>Context</td>
                    <td>UInt32</td>
                    <td>The context value that was passed in when the block was loaded or unloaded.
                        Defaults to zero if no context was provided.</td>
                </tr>
                </tbody>
            </table>
            </td>
            <td>This behavior is executed when a callback is providing during block loading or
                unloading.</td>
        </tr>

        <tr>
            <td class="ColSpan" colspan="3"><b>PhysicsTrigger Behaviors</b> - All Entities that have
            PhysXTrigger model mixed into them will have a behavior called on them
            when they collide with other PhysX actors.</td>
        </tr>
        <tr>
            <td>OnPhysXTrigger</td>
            <td>
            <table>
                <thead>
                    <tr><th>Name</th><th>Type</th><th>Description</th></tr>
                </thead>
                <tbody>
                <tr>
                    <td>CollisionTime</td>
                    <td>Float64</td>
                    <td>The time at which the collision occured</td>
                </tr>
                <tr>
                    <td>CollisionStatus</td>
                    <td>UInt16</td>
                    <td>One of the
                    <a href="../../Reference/Namespaces/egfPhysX.htm">egfPhysX::CollisionStatus</a>
                    values which tell whether this is an enter, stay, or exit collision.</td>
                </tr>
                <tr>
                    <td>CollidingEntity</td>
                    <td>EntityID</td>
                    <td>The entity that collided with this shape. Only valid if the other entity
                        mixes in the PhysXShape model, or if it is an entity with the
                        <a href="../../Reference/QuickRef_Models/PhysXModelLibrary__PhysXProp.htm">PhysXProp</a>
                        model and the InteractWithTriggers property true.</td>
                </tr>
                </tbody>
            </table>
            </td>
            <td>This behavior is executed when an entity with the PhysXTrigger model collides
                with another PhysX actor.</td>
        </tr>

        <tr>
            <td class="ColSpan" colspan="3"><b>egmAnimation::AnimationService Behaviors</b></td>
        </tr>
        <tr>
            <td><i>User defined</i> - Text key callback</td>
            <td>
            <table>
                <thead>
                    <tr><th>Name</th><th>Type</th><th>Description</th></tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Sequence</td>
                        <td>UInt32</td>
                        <td>The animation sequence id.</td>
                    </tr>
                    <tr>
                        <td>KeyName</td>
                        <td>String</td>
                        <td>The name of the animation text key that triggered.</td>
                    </tr>
                    <tr>
                        <td>UpdateTime</td>
                        <td>Float32</td>
                        <td>Time at which the actor was last updated.</td>
                    </tr>
                    <tr>
                        <td>EventTime</td>
                        <td>Float32</td>
                        <td>Time at which the text key event triggered.</td>
                    </tr>
                </tbody>
            </table>
            </td>
            <td>This behavior is executed when text key behavior triggers in an animation. The name
            of the behavior is determined by the text key data in the animation itself.</td>
        </tr>

        <tr>
            <td class="ColSpan" colspan="3"><b>ecrInput::InputService Behaviors</b></td>
        </tr>
        <tr>
            <td><i>User defined</i> - Input action callback</td>
            <td>
            <table>
                <thead>
                    <tr><th>Name</th><th>Type</th><th>Description</th></tr>
                </thead>
                <tbody>
                    <tr>
                        <td>EventName</td>
                        <td>String</td>
                        <td>Name of the ActionMap event that triggered.</td>
                    </tr>
                    <tr>
                        <td>AppData</td>
                        <td>UInt32</td>
                        <td>Optional application provided data.</td>
                    </tr>
                    <tr>
                        <td>Magnitude</td>
                        <td>Float32</td>
                        <td>The magnitude of the input event.</td>
                    </tr>
                    <tr>
                        <td>X</td>
                        <td>Float32</td>
                        <td>For stick-style events, the X position of the input device.</td>
                    </tr>
                    <tr>
                        <td>Y</td>
                        <td>Float32</td>
                        <td>For stick-style events, the Y position of the input device.</td>
                    </tr>
                    <tr>
                        <td>Z</td>
                        <td>Float32</td>
                        <td>For stick-style events from 3D input devices, the Z position of the
                            input device.</td>
                    </tr>
                </tbody>
            </table>
            </td>
            <td>This behavior is executed when an event from an ActionMap is triggered and that
            event has a registered behavior-style callback. The name of the behavior is specified
            when the callback is registered. Callback registration is normally done by using the
            InputHandler built-in model from the Standard Model Library but can also be done via
            API calls on the ecrInput::InputService system service.</td>
        </tr>

        <tr>
            <td class="ColSpan" colspan="3"><b>ecrPhysX::PropService Behaviors</b></td>
        </tr>
        <tr>
            <td>AttachSceneCallback</td>
            <td>None</td>
            <td>This behavior is executed as a callback on entities that mix in the PhysXProp
                model when the contents of the prop is added to the PhysX scene. At the time it
                is called the prop is known to be instantiated in the scene and hence have all
                PhysX data available.</td>
        </tr>
        <tr>
            <td>DetachSceneCallback</td>
            <td>None</td>
            <td>This behavior is executed as a callback on entities that mix in the PhysXProp
                model when the contents of the prop are removed from the PhysX scene. At the
                time it is called the prop has already been removed from the scene.</td>
        </tr>

        <tr>
            <td class="ColSpan" colspan="3"><b>egmSample::WalkableService Behaviors</b></td>
        </tr>
        <tr>
            <td>OnWalkableMaterialChange</td>
            <td>
            <table>
                <thead>
                    <tr><th>Name</th><th>Type</th><th>Description</th></tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Material</td>
                        <td>String</td>
                        <td>The name of the new material.</td>
                    </tr>
                </tbody>
            </table>
            </td>
            <td>This behavior is executed when an actor walks onto a new terrain material type.</td>
        </tr>

    </tbody>
</table>


<p class="NDLHeadingRelatedTopic">Related topics</p>
<UL>
<li><a href="behavior_overview.htm">Behaviors overview</a></li>
<li><a href="behavior_features.htm">Behavior features</a></li>
<li><a href="behavior_how_work.htm">How behaviors work</a></li>
<li><a href="behavior_limitations.htm">Behavior limitations</a></li>
<!-- <li><a href="behavior_how_relates_efr.htm">How behaviors relate to the Emergent Game Framework</a></li> -->
<li><a href="behavior_reqs.htm">Requirements for working with behaviors</a></li>
<li><a href="behavior_best_practice.htm">Best practices for working with behaviors</a></li>
<li><a href="behavior_using.htm">Using behaviors</a></li>
<li><a href="behavior_troubleshoot.htm">Troubleshooting behaviors</a></li>
<li><a href="../Blocks/block_load_sequence.htm">Block Loading Sequence</a></li>
</UL>


<!--kadov_tag{{<placeholder id="footer">}}-->
</body>

</html>
