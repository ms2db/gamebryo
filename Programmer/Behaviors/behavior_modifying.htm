<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Modifying behaviors</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>

<!--(Begin Body)================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<h1>Modifying behaviors</h1>

<p>You can change a behavior's signature, edit its logic, or convert it to a new language.</p>

<h2>Changing a behavior's signature</h2>

<p>When a behavior's return value or parameters need to be changed it is a simple matter of editing
    the behavior function, nothing in Toolbench needs to be updated. Open the behavior script or C++
    function and change it to the new signature. Remember to also update all the code and scripts
    that invoke the new behavior so that they pass the new parameters. Using named parameters can
    make it easier to find behaviors that use a given parameter. Named parameters also allow your
    scripts to keep working if the parameter order is changed or new parameters are inserted.</p>

<h2>Editing a behavior's logic</h2>

<p>For scripted behaviors, open the behavior file that contains the behavior that needs to be
    modified. The Emergent naming convention for behavior files is to prepend "Ese" to the model
    name where the behavior was defined. (Ese&lt;modelname&gt;.[py, lua]). The file should already
    exist, if not, create this file. Edit the behaviors function and save the changes. The
    application will detect the change and reload the new behavior the next time it runs or, if it
    is running when you save the change, the next time the behavior is called.</p>

<p>C++ behaviors are easily changed by editing the function that implements the behavior. Unlike
    the scripted behaviors the application must be shutdown, recompiled, and started again for the
    C++ behavior changes to take effect.</p>

<h2>Converting a behavior to a new language</h2>

<p>Moving a behavior to a different language is similar to changing the behavior's signature. Open
    the model containing the behavior in Toolbench and change the behavior language. Save the
    changes and then create the behavior in the new language.</p>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
    <li><a href="behavior_creating.htm">Creating behaviors</a></li>

    <li><a href="behavior_invoking.htm">Invoking behaviors</a></li>

    <li><a href="behavior_removing.htm">Removing behaviors</a></li>

    <li><a href="behavior_debug_lua.htm">Debugging Lua behaviors in real-time</a></li>

    <!-- DT26752 -->

    <li><a href="behavior_passing_values_between.htm">Passing values between scripted
    behaviors</a></li>

    <li><a href="behavior_removing_from_simulator.htm">Removing scripted behavior entities from the
    simulator</a></li>

    <li><a href="behavior_using_traits.htm">Using behavior traits</a></li>

    <li><a href="behavior_invoke_order.htm">Behavior invocation order</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
