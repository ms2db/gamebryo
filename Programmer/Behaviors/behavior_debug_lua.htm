<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Debugging Lua behaviors in real-time</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>

<!--(Begin Body)================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<h1>Debugging Lua behaviors in real-time</h1>

<p>When debugging run-time behaviors written in Lua, it is easy enough to use <span class=
"NDLEmphasis">printf-style debugging</span> &mdash; simply call BehaviorAPI.LogMessage(). (For more
on setting up log files, see <a href="../Logging/logging_intro.htm">Working with logging, asserts,
and debuggers</a>.)</p>

<p>All but the most trivial problems, however, are easier to solve with a real debugger that allows
you to set breakpoints, inspect the contents of variables, and so on. The Emergent Game Framework
includes a versatile script debugger architecture. It includes a front end built into the script
editor that is part of Toolbench. The Framework also includes a backend for the Lua language, so
debugging Lua is enabled out of the box. See <a href=
"../../Tools/ScriptDebugger/efr_script_debugger_intro.htm">Introduction to the Script Debugger</a>
for information on using the script debugger.</p>

<table class="NDLNoteContainer" width="100%">
    <tr align="left">
        <td class="NDLNoteContainerTD">
            <p class="NDLHeadingNoteContainer">Note</p>

            <div class="NDLNote">
                Breakpoints will not be hit in script behaviors called with
                BehaviorApi.CallBehavior. In many cases BehaviorAPI.SendAndWaitForReply can be used
                instead.
            </div>
        </td>
    </tr>
</table>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
    <li><a href="behavior_creating.htm">Creating behaviors</a></li>

    <li><a href="behavior_invoking.htm">Invoking behaviors</a></li>

    <li><a href="behavior_modifying.htm">Modifying behaviors</a></li>

    <li><a href="behavior_removing.htm">Removing behaviors</a></li>
    
    <!-- DT26752 -->

    <li><a href="behavior_passing_values_between.htm">Passing values between scripted
    behaviors</a></li>

    <li><a href="behavior_removing_from_simulator.htm">Removing scripted behavior entities from the
    simulator</a></li>

    <li><a href="behavior_using_traits.htm">Using behavior traits</a></li>

    <li><a href="behavior_invoke_order.htm">Behavior invocation order</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
