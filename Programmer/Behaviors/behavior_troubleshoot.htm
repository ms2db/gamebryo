<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Troubleshooting behaviors</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Troubleshooting behaviors</h1>

<p>Emergent recommends the following steps when you are troubleshooting behaviors:</p>

<ul>
    <li>When a behavior script has a compile error, the script does not get loaded. So, the first
    step in troubleshooting is to determine if the script compiles and loads. Use the Script
    Debugger to check for possible syntax errors and to perform static analysis on the script. See
    <a href="../../Tools/ScriptDebugger/efr_script_debugger_validate_script.htm">Using the Script
    Debugger to validate script changes</a> for more information.</li>

    <li>Even when not debugging, script errors are routed to the Toolbench output window. If
    Toolbench is not available, all Lua script output, including syntax errors, is dumped to the
    Gamebryo LightSpeed log file. For more information about LightSpeed logging capabilities, see
    <a href="../Logging/logging_intro.htm">Logging, Asserts, and Debuggers</a>.</li>

    <li>After you have verified that the script has no syntax errors and is actually loaded in the
    running game, refer to <a href="behavior_debug_lua.htm">Debugging Lua behaviors in real-time</a>
    for information on how to debug the behaviors. The simplest approach is to place a breakpoint
    in the Behavior to prove that it is running, and then step through the code. You must enable
    debugging explicitly in Toolbench (see <a href="../../Tools/Toolbench/tb_ref_output_view.htm">
    Toolbench - Output View</a>). A current limitation is that a breakpoint on the Behavior
    declaration line is ignored, so you should place it on the next non-blank line. Another current
    limitation is that breakpoints do not work in immediate Behaviors.</li>

    <li>If the Behavior is still not called, it may be an issue with mix-in order or Behavior traits
    that are controlled in Entity Model Tool within Toolbench. Also, check if the caller is
    directing the initial request to a still-existing Entity or a Category that is subscribed to by
    one or more Entities.</li>

    <li>In the Toolbench Lua <a href="../../Tools/ScriptDebugger/efr_script_debugger_intro.htm">
    Script Debugger</a>, be sure to enable the display of the values of local variables. They
    display only when the script is paused.</li>

    <li>Although the Rapid Iteration service is not specifically required for script debugging, it
    is much more convenient to have the Rapid Iteration service and make your script changes take
    effect immediately in real-time while you debug the script. Each time you save the script file,
    it is reloaded in the game. This includes changes made to code that is about to be run while
    stepping through a Behavior, much like the edit-and-continue feature of DevStudio.</li>

    <li>Script debugging is not compiled into shipping build configurations of Gamebryo LightSpeed.
    You must use the debug or release (optimized) build configurations to use the Script Debugger.
    </li>

    <li>Ensure that the arguments that you are pulling out of the <a
    href="../../Reference/efd/efd__ParameterList.htm">ParameterList</a> match what is expected and
    what was put into the list by the sender of the Behavior request. Type mismatches when reading
    parameters will generate output in Toolbench and the logs. Consider using named parameters
    rather than relying on the order of the parameter list so that script code will continue to
    function if new parameters are added or the parameters are rearranged. This can reduce the
    chances of accidentally reading the wrong parameter.</li>
</ul>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
    <li><a href="behavior_overview.htm">Behaviors overview</a></li>

    <li><a href="behavior_features.htm">Behavior features</a></li>

    <li><a href="behavior_how_work.htm">How behaviors work</a></li>

    <li><a href="behavior_limitations.htm">Behavior limitations</a></li>

    <li><a href="behavior_reqs.htm">Requirements for working with behaviors</a></li>

    <li><a href="behavior_best_practice.htm">Best practices for working with behaviors</a></li>

    <li><a href="behavior_using.htm">Using behaviors</a></li>

    <li><a href="behavior_reference.htm">Behavior reference</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
