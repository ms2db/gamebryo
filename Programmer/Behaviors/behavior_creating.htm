<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Creating behaviors</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>

<!--(Begin Body)================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<h1>Creating behaviors</h1>

<p>This section describes how to add a new behavior to a model.</p>

<ol>
    <li>Add the behavior to your model.

        <p class="indent1">Add a behavior to the model you are working with in <a href=
        "../../Tools/EntityModelingTool/emt_model_behaviors-define.htm">Toolbench.</a> To use your
        new behavior in an Entity, the behavior needs to be defined in one of the models that are
        mixed into the Entity's model. Toolbench lets you select the implementation language for
        your new behavior. The language you select will determine where the implementation of your
        behavior lives. The Game Framework currently supports behaviors written in Lua, C++, and
        Python which are selected in Toolbench. Behavior traits must also be selected.</p>
    </li>

    <li>Create your behavior.

        <ul>
            <li>Creating a scripted behavior.

                <p class="indent1">The Emergent naming convention for behavior files is to prepend
                "Ese" to the model name. For example, "EseAvatar.lua" contains Lua behaviors for
                the "Avatar" model. This ensures the scripting runtime can locate the script
                without conflict with existing script files.</p>

                <p class="indent1">If you are adding your behavior to a model that already has
                behaviors, edit the existing script file associated with the model. Otherwise
                create the file following the naming conventions above. If you use the 'edit'
                button in Toolbench, Toolbench will automatically create or open the appropriately
                named script file and take you to the behavior function to edit.</p>

                <p class="indent1">The required function signature for all behaviors written in Lua
                is:</p>
                <pre>
function BehaviorName(self, params)
</pre>

                <p class="indent1">The "self" parameter contains a proxy object that represents the
                executing entity. This object has members for every property on the entity. The
                "params" parameter is a ParameterList instance holding any parameters passed to the
                behavior.</p>
            </li>

            <li>Creating a C++ behavior.

                <p class="indent1">For C++ behaviors, the behavior functions must be wrapped in the
                "extern "C"" namespace. Register the behavior function by calling <span class=
                "NDLSystemFont">egf::BehaviorDescriptor::AddStaticBehavior(...)</span> for each
                behavior added.</p>

                <p class="indent1">The required function signature for all behaviors written in C++
                is:</p>
                <pre>
extern "C"
{
    void BehaviorName(Entity* pEntity, ParameterList* pArgs)
    {
        //...
    }
}
</pre>

                <p class="indent1">For behaviors on built-in models you must use <span class=
                "NDLSystemFont">egf::IBuiltinModel::Dispatch</span>. See <a href=
                "../Models/builtin_model_creating.htm">Creating built-in models</a> for
                details.</p>
            </li>
        </ul>
    </li>

    <li>Implement the behavior.

        <p class="indent1">Implement the behavior as a function in the Ese* file or C++ file.
        Useful built-in API functions can be found in the BehaviorAPI.</p>
    </li>
</ol>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
    <li><a href="behavior_invoking.htm">Invoking behaviors</a></li>

    <li><a href="behavior_modifying.htm">Modifying behaviors</a></li>

    <li><a href="behavior_removing.htm">Removing behaviors</a></li>

    <li><a href="behavior_debug_lua.htm">Debugging Lua behaviors in real-time</a></li>
    
    <!-- DT26752 -->

    <li><a href="behavior_passing_values_between.htm">Passing values between scripted
    behaviors</a></li>

    <li><a href="behavior_removing_from_simulator.htm">Removing scripted behavior entities from the
    simulator</a></li>

    <li><a href="behavior_using_traits.htm">Using behavior traits</a></li>

    <li><a href="behavior_invoke_order.htm">Behavior invocation order</a></li>

    <li><a href=
    "../../Reference/egf/egf__BehaviorDescriptor.htm#classegf_1_1_behavior_descriptor_16c596be7a11f16a774be75886ab1f626">
    BehaviorDescriptor::AddStaticBehavior reference</a></li>

    <li><a href="../../Reference/Namespaces/BehaviorAPI.htm">Behavior API function
    reference</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
