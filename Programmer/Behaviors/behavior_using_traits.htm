<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Using behavior traits</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>

<!--(Begin Body)================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<h1>Using behavior traits</h1>

<p>Traits are used to modify how and when behaviors execute in the system. They affect where a
behavior may execute (server, client, or both), how the behavior may be invoked, who can execute
it, and how mix-ins are called. Traits are set using <a href=
"../../Tools/EntityModelingTool/emt_model_behaviors-define.htm">Toolbench</a> and are stored with
the model that contains the behavior so that each process in the system may access them.</p>

<h2>Types of traits</h2>

<ul>
    <li>When a behavior may execute. Some behaviors can be restricted to only running during certain
        phases of the entity lifecycle.
        <ul>
            <li><b>In World Only</b>: It will only execute when the entity is 
            in the world. If a behavior is sent to an entity when the entity 
            is not in the world that behavior will be discarded.</li>
        </ul>
    </li>

    <li>How mixed in behaviors are called. By default new behaviors override mixed-in versions of
        the same behavior but this can be changed so that all implementations are called in order.

        <ul>
            <li><b>Extends</b>: Use the 'extends' invocation order policy where mix-in models are
            called first. This is similar to the order constructors are called in C++.</li>

            <li><b>Reverse Extends</b>: Use the 'reverse extends' invocation order policy where
            mix-in models are called last. This is similar to the order destructors are called in
            C++.</li>
        </ul>
    </li>

    <li>How the behavior may be invoked. You can control whether behaviors should run in their own
        interruptable co-routine and whether behaviors can be run as immediate behaviors.

        <ul>
            <li><b>No Block</b>: It will never attempt to block (always executes as a one-shot) and
            any call to a blocking API method will fail.</li>

            <li><b>Immediate</b>: It is allowed to be immediately invoked. Implies the No Block
            trait. Immediate behaviors should be kept small and quick to avoid possible framerate
            hitches.</li>
        </ul>
    </li>

    <li>Where a behavior may execute. In client-server settings some behaviors can be restricted
        as to where they are allowed to execute.

        <ul>
            <li><b>Server Execute Only</b>: It is only executed on the server; completely removed
            on the client.</li>

            <li><b>Client Execute Only</b>: It is executed on the client; completely removed on the
            server.</li>

            <li><b>Remotely Visible</b>: If the behavior is Server Execute Only or Client Execute
            Only, then this trait allows the other process to see the behavior so it may remotely
            call invoke it on the process it is allowed to run on. For example, Server Execute
            Only behavior could be remotely invoked by a client and it would execute on the
            server.</li>
        </ul>
    </li>

    <li>What entity may execute the behavior. When entity replication is used behaviors can be
        restricted to only running on original or replica entities.

        <ul>
            <li><b>Private</b>: It can only run on the original entity.</li>

            <li><b>View Only</b>: It can only run on a replica entity and there it can only write
            to mutable properties.</li>
        </ul>
    </li>

</ul>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
    <li><a href="behavior_creating.htm">Creating behaviors</a></li>

    <li><a href="behavior_invoking.htm">Invoking behaviors</a></li>

    <li><a href="behavior_modifying.htm">Modifying behaviors</a></li>

    <li><a href="behavior_removing.htm">Removing behaviors</a></li>

    <li><a href="behavior_debug_lua.htm">Debugging Lua behaviors in real-time</a></li>

    <!-- DT26752 -->

    <li><a href="behavior_passing_values_between.htm">Passing values between scripted
    behaviors</a></li>

    <li><a href="behavior_removing_from_simulator.htm">Removing scripted behavior entities from the
    simulator</a></li>

    <li><a href="behavior_invoke_order.htm">Behavior invocation order</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
