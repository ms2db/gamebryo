<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Behaviors: Introduction</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Behaviors: Introduction</h1>

<p>Behaviors are the actions that an Entity can perform and are pieces of logic run by an Entity.
    They exist within Models that are used to define the Entities. The logic may be written in a
    scripted language or C++ and compiled into the application.</p>

<p>Built-in API methods form the API that Behaviors may use to interact with each other and the rest
    of the system. These built-ins allow them to get and set properties, find other Entities and
    invoke other Behaviors.</p>

<p>Parameters are passed to a Behavior using a parameter list object that allows Behaviors to be
    invoked remotely and across multiple scripting languages. Behaviors may be invoked by
    application code or other Behaviors locally and on remote processes.</p>

<p>There are three modes of interaction. Asynchronous mode is fire-and-forget, where the sender
    simply proceeds with its execution, and is unaware of if or when the target executes the
    request. Blocking mode allows the sender to treat the interaction as a blocking "call". Only
    when the target finishes executing the entire Behavior and returns will the caller continue to
    the next instruction. Callback mode is asynchronous, but the caller registers another Behavior
    which will be called back after the target completes. An asynchronous interaction is sometimes
    referred to as a "tell", since the requester tells the target to execute something. A
    synchronous interaction might be called an "ask".</p>

<p>When a Behavior is executing, there are some mechanisms that allow it to suspend, waiting for a
    period of real time, or for a nested blocking Behavior request to complete. If during this
    period, a second Behavior is queued for the suspended Entity, the scheduler may cause the
    Entity to begin the execution of the second Behavior concurrently. This is done with cooperative
    multitasking, so the use of concurrency control is not needed. However, across a blocking call,
    a Behavior must be aware that Properties might appear to spontaneously change. There is a limit
    (four by default) on the level of concurrency per Entity as a debugging and resource management
    aid.</p>

<table>
    <thead>
        <tr>
            <th>For more information about...</th>

            <th>See...</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>Behaviors in general</td>
            <td><a href="behavior_overview.htm">Behaviors overview</a></td>
        </tr>

        <tr>
            <td>Behavior features and benefits</td>
            <td><a href="behavior_features.htm">Behavior features</a></td>
        </tr>

        <tr>
            <td>How behaviors work, are called, and their interactions</td>
            <td><a href="behavior_how_work.htm">How behaviors work</a></td>
        </tr>

        <tr>
            <td>Requirements and tools used to work with behaviors</td>
            <td><a href="behavior_reqs.htm">Requirements for working with behaviors</a></td>
        </tr>

        <tr>
            <td>Tips for writing behaviors and what to avoid</td>
            <td><a href="behavior_best_practice.htm">Best practices for working with
                behaviors</a></td>
        </tr>

        <tr>
            <td>How to use behaviors in your game</td>
            <td><a href="behavior_using.htm">Using behaviors</a></td>
        </tr>

        <tr>
            <td>Creating new behaviors for you entities</td>
            <td><a href="behavior_creating.htm">Creating behaviors</a></td>
        </tr>

        <tr>
            <td>Calling behaviors from scripts and applications</td>
            <td><a href="behavior_invoking.htm">Invoking behaviors</a></td>
        </tr>

        <tr>
            <td>How to change behavior logic</td>
            <td><a href="behavior_modifying.htm">Modifying behaviors</a></td>
        </tr>

        <tr>
            <td>Removing behaviors from a model</td>
            <td><a href="behavior_removing.htm">Removing behaviors</a></td>
        </tr>

        <tr>
            <td>Debugging behaviors written in lua in real-time</td>
            <td><a href="behavior_debug_lua.htm">Debugging Lua behaviors in real-time</a></td>
        </tr>

        <tr>
            <td>How to use parameter lists to pass values to and from behaviors</td>
            <td><a href="behavior_passing_values_between.htm">Passing values between scripted
                behaviors</a></td>
        </tr>

        <tr>
            <td>The methods used to remove a scripted entity from the simulator</td>
            <td><a href="behavior_removing_from_simulator.htm">Removing scripted behavior entities
                from the simulator</a></td>
        </tr>

        <tr>
            <td>What behavior traits are and how to use them</td>
            <td><a href="behavior_using_traits.htm">Using behavior traits</a></td>
        </tr>

        <tr>
            <td>The order behaviors are called when they are extended in multiple models</td>
            <td><a href="behavior_invoke_order.htm">Behavior invocation order</a></td>
        </tr>

        <tr>
            <td>How to debug and troubleshoot behavior problems</td>
            <td><a href="behavior_troubleshoot.htm">Troubleshooting behaviors</a></td>
        </tr>

        <tr>
            <td>Standard behaviors provided by the Game Framework</td>
            <td><a href="behavior_reference.htm">Behavior reference</a></td>
        </tr>

        <tr>
            <td>The limitation of behaviors</td>
            <td><a href="behavior_limitations.htm">Behavior limitations</a></td>
        </tr>

        <tr>
            <td>Built-in API methods used by script Behaviors</td>
            <td><a href="../Scripting/scripting_intro.htm">Scripting: Introduction</a></td>
        </tr>
    </tbody>
</table>

<!--kadov_tag{{<placeholder id="footer">}}-->


</body>

</html>
