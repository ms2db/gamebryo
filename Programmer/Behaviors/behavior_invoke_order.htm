<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Behavior invocation order</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>

<!--(Begin Body)================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<h1>Behavior invocation order</h1>

<p>The models that are mixed together to form a flat model are called mix-ins. When more than one
mix-in contains a Behavior of the same name, the system disambiguates the multiple Behaviors and
determines an invocation order. This order is determined by the Traits that are set on the Behavior
in Toolbench.</p>

<p>There are three invocation orders:</p>

<ul>
    <li><b>Override</b>&mdash;This is the default for all new behaviors. In this case neither of
    the traits, extends or reverse-extends, is set so the Behavior overrides all the other
    Behaviors of the same name in any mix-ins before it. In other words the override order means
    the system will only call the Behavior on the model that was mixed into the flat model
    last.</li>

    <li><b>Extends (bottom up)</b>&mdash;Extends order is similar to C++ constructors where the
    base class is called first and then each of the classes that derives from it. For flat models
    this means that the first mix-in that contains the Behavior is called first followed by the
    rest of the mix-ins that contain it in the order they were mixed into the flat model. If a
    mix-in itself contains mixed in models then the calling order occurs within that model
    recursively until the last mix-in's Behavior is called.</li>

    <li><b>Reverse-extends (top down)</b>&mdash;Reverse-extends order calls all the Behaviors of
    the same name from the top down. This is similar to destructors in C++. The system starts by
    calling the Behavior on the last model mixed into the flat model. It then calls the Behavior
    on the model mixed in before that one. This continues until all the Behaviors of the same name
    have been called in each mix-in finishing with the original model that was mixed in.</li>
</ul>

<table class="NDLNoteContainer" width="100%">
    <tr align="left">
        <td class="NDLNoteContainerTD">
            <p class="NDLHeadingNoteContainer">Note</p>

            <div class="NDLNote">
                The order in which models are mixed together determines Behavior invocation order.
                Developers should carefully consider the order in which they mix together models to
                achieve the desired application results. They should also keep the order and type
                of invocation in mind when writing the Behaviors.
            </div>
        </td>
    </tr>
</table>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
    <li><a href="behavior_creating.htm">Creating behaviors</a></li>

    <li><a href="behavior_invoking.htm">Invoking behaviors</a></li>

    <li><a href="behavior_modifying.htm">Modifying behaviors</a></li>

    <li><a href="behavior_removing.htm">Removing behaviors</a></li>

    <li><a href="behavior_debug_lua.htm">Debugging Lua behaviors in real-time</a></li>
    
    <!-- DT26752 -->

    <li><a href="behavior_passing_values_between.htm">Passing values between scripted
    behaviors</a></li>

    <li><a href="behavior_removing_from_simulator.htm">Removing scripted behavior entities from the
    simulator</a></li>

    <li><a href="behavior_using_traits.htm">Using behavior traits</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
