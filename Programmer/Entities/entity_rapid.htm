<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Rapidly iterating on Entities</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Rapidly iterating on entities</h1>

<p>Rapidly iterating on an entity entails changing its properties
or behaviors at runtime. This saves you the trouble of having to
restart the game every time you want to see a change. To
rapidly iterate on an entity, you must be running <a href=
"../../Tools/Toolbench/tb_intro.htm">Toolbench</a>, and you must
have the appropriate game solution open. The game connects to the channel manager 
    that is in the AssetController utility application which is automatically 
    started by Toolbench.</p>

<p>There are several ways to rapidly iterate on an entity:</p>

<ul>
    <li>In the <a href=
    "../../Tools/EntityModelingTool/emt_intro.htm">Entity
    Modeling Tool (EMT)</a>, you can change the default value of
    a property a model. When you do this, any runtime entity
    instance that uses the default for that property will update
    in the running game as soon as you save the emtproj. An
    entity will only update if it is an instance of the model
    that is being edited or if it mixes in that model and does
    not have a higher priority model mixed in that also sets a
    default for that property.</li>

    <li>You can change the value of any property on an entity
    instance in <a href=
    "../../Tools/WorldBuilder/wb_intro.htm">World Builder</a>.
    When you do this, that entity will update in game as soon as the
    block file is saved. Updating entities in this way can have unexpected side effects. 
        When the block file reloads only edited entities
    it in are re-initialized, but any entities that exist in
    the world file that were deleted at runtime will be
    re-created. Depending on game logic, this can cause
    inconsistencies. If the game gets into a bad state as a
    result of block file edits, you can select the <span class=
    "NDLGUILabel">Game &gt; Reset</span> in Toolbench. This
    resets all Entities in the game simulation to their initial states.</li>

    <li>You can add scripted entity behaviors at runtime in Toolbench. To
    add a behavior, select the model that you want to add the
    behavior to and click <span class="NDLGUILabel">Add</span> in
    the Behaviors section. Name the behavior and then click
    <span class="NDLGUILabel">Edit</span>. This opens the
    <a href="../../Tools/ScriptDebugger/efr_script_debugger_intro.htm">
    Script Editor</a>. Here, you can add logic to the entity.
    Unless the behavior that you just added is one of the
    pre-defined life cycle behaviors, you may need to modify an
    existing behavior to call the newly added one.</li>

    <li>You can modify scripted entity behaviors at runtime in Toolbench.
    To modify a behavior, select the behavior and click
    <span class="NDLGUILabel">Edit</span>. This opens the Script
    Editor. Here, you can modify entity logic. After you save the
    script, the next time that behavior runs you will see the
    modified behavior run instead of the original. Breakpoints and current line in the 
        Entity debugger are not affect, so this acts like edit-and-continue in Visual 
        Studio. </li>
</ul>

<p>If you introduce a syntax error in a lua file while you are rapidly iterating, the old behavior
will continue to run. Once you correct the syntax error and re-save the file, the re-edited script
will be used. Further syntax errors will continue to be reported to the game log file once after
each save. </p>

<p>Some logic problems in script files can cause problems that require you to use <span
class="NDLGUILabel">Game &gt; Reset</span> in Toolbench. For example, removing code that creates
outstanding Behavior invocations will not delete invocation requests that are already outstanding.
This would result in a later invocation that is no longer being requested in current code.</p>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
    <li><a href="entity_creating.htm">Creating entities</a></li>

    <li><a href="entity_world_state.htm">Controlling entity in-world/out-of-world state</a></li>

    <li><a href="entity_destroying.htm">Destroying entities</a></li>

    <li><a href="entity_debugging.htm">Debugging entity properties</a></li>

    <li><a href="../Behaviors/behavior_limitations.htm">Behavior limitations</a></li>

    <li><a href="../Behaviors/behavior_overview.htm">Behaviors overview</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->


</body>

</html>
