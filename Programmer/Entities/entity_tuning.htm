<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Tuning entity performance</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<h1>Tuning entity performance</h1>

<p>There are a number of techniques that you can use to ensure that your application runs efficiently:</p>

<ul>
  <li>To improve efficiency, you can move properties that will be accessed and modified frequently by C++ code into Built-in Models. When these properties are moved into Built-in Models, they can be native C++. As such, they do not require use of the more expensive Get/SetPropertyValue 
      for every access. You can also move frequently called or expensive behaviors from script to C++. This removes the overhead of calling into the scripting language (which could mean a context switch and many allocations).</li>
  <li>The number of Entities that are used in a game can also impact performance. You can improve performance by culling Entities that are not necessary to display the current scene, especially if those Entities are running behaviors. 
      In the extreme, you may need to replace multiple Entities with a single 
      &quot;manager&quot; type Entity.</li>
  <li>You should also consider the number and frequency of behavior calls. If a behavior that is implemented in script is called once per frame per Entity, excessive script behavior invocations may negatively impact your game's operation. To mitigate this situation, consider calling the behaviors less frequently, or, consider having fewer Entities running per tick behaviors. One Entity can modify properties on multiple Entities. You can also use a system service to do per-tick work for multiple Entities instead of behaviors. 
      Consider having Behaviors compute and set goals, and have system services 
      animate, move and interact physically with other Entities.</li>
    <li>Judicious use of Categories can dramatically lower the number of Behaviors 
        executed and the number of Entities considered by scripts when doing 
        interactions. For example, a Category per room can be used to quickly locate 
        nearby Entities as opposed to querying the whole level. Sending a single 
        Behavior to a Category can replace doing an Entity query plus several point to 
        point Behavior invocations.</li>
    <li>It is common in simulation to use a form of level of detail to reduce or stop 
        the activity of Entities that are not near the player.</li>
</ul>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
<li><a href="entity_how_work.htm">How entities work</a></li>
<li><a href="entity_limitations.htm">Entity limitations</a></li>
<li><a href="entity_best_practice.htm">Best practices for working with entities</a></li>
<li><a href="entity_examples.htm">Entity examples</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->
</body>

</html>
