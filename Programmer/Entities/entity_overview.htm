<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Entities overview</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>

<!--(Begin Body)================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<h1>Entities overview</h1>

<p>An instance of a new entity can be created at any time. The create request can be issued in
native code or in script, and returns a valid reference to the new entity immediately. This allows
the application to create and initialize an entity in a single tick. It also helps avoid issues
like the temporary existence of "empty" entities in the world.</p>

<p>When an entity is instantiated by a simulator, the model ID must be known, because entities are
always created from a model definition. At entity instantiation time, the model definition has been
encapsulated in a FlatModel class (<span class="NDLSystemFont"><a href=
"../../Reference/egf/egf__FlatModel.htm">egf::FlatModel</a></span>). This FlatModel is used by the
entity instance as a base or "const" instance of the entity. This supports the clone-on-write
capability of the entity properties. It also keeps the actual memory footprint of the entity
instance to a minimum. For example, the name and traits of each property are never included in the
actual entity. Instead, they are fetched from the flat model when the entity methods, such as
<span class="NDLSystemFont">GetPropertyName()</span>, are called. When an entity is instantiated,
the properties are "cloned" from the defining FlatModel class of that entity. However, instead of
making a true clone, a reference to the property in the FlatModel is placed in the entity instance.
When a write to a given property for that entity instance is performed through the <span class=
"NDLSystemFont">efd::Entity</span> interface, a data storage instance for the new value is created
and kept in the entity instance. This means that entities never have a second copy of read-only
properties, only a pointer to the Property in the FlatModel. Likewise, const metadata of a
property, like a property name and traits, are also never kept in the entity instance. Instead,
they are transparently referenced back to the FlatModel instance when the entity accesses them.</p>

<p>The following are some key terms that are related to entities:</p>

<ul>
    <li><b>Entity</b>&mdash;An entity is a game object. It is composed of state and behavior. An
    entity can be considered to be a collection of named entity properties. The properties of an
    entity are declared in the entity's model, along with associated behaviors. Each entity
    instance has a unique EntityID. An in-memory entity instance references a model (its type), and
    contains a property set (its state), and a behavior map (its scripts).</li>

    <li><b>Model</b>&mdash;The type, description of the contents, and behavior of each Entity is
    defined by a Model. Each Model has a unique name, a unique Model ID, and contains a set of
    named Properties and references to Behavior implementations.</li>

    <li><b>Property</b>&mdash;A Property in a Model has a name, a type, a Model ID, a set of
    traits, and a default value.</li>

    <li><b>Behavior</b>&mdash;An Entity Behavior is a named block of code, and can be thought of as
    a method on an Entity. A Behavior can be implemented by the application in C++ or a scripting
    language.</li>

    <li><b>Mix-in Model Hierarchy</b>&mdash;The relationship between Models is based on simple
    aggregation. A Model declares a list of zero or more other Models to mix in. For example, Model
    A declares that it is based on Models B and C. Each Entity of Model-type A contains properties
    identified as part of A, as well as those from B and C and their declared "base" Models in
    turn. We do not manage the namespaces of "base classes", requiring you to ensure that property
    names do not collide unexpectedly, instead, collisions due to the absence of namespaces is
    resolved. The base class in this scheme is called a <em>mix-in</em>. When two properties from
    mixed in Models have exactly the same name, references to that name refer to a single instance
    of that Property in the entity instance. This allows a Model to easily refer to properties in
    other Models that are mixed into their Entity. In all cases where duplicate properties are
    encountered during a mix-in, the first, highest priority one encountered is used (in other
    words, its defaults and properties will be those of the "aggregated" property).</li>

    <li><b>FlatModel</b>&mdash;A FlatModel resolves and combines the mix-in hierarchy of a model
    into a single file. FlatModel files are generated by EMT and are the way Models are loaded and
    used at runtime. This avoids the runtime having to load and walk the potentially deep hierarchy
    of a Model.</li>
</ul>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
    <li><a href="entity_how_work.htm">How entities work</a></li>

    <li><a href="entity_world_state.htm">Controlling entity in-world/out-of-world state</a></li>

    <li><a href="entity_limitations.htm">Entity limitations</a></li>

    <li><a href="entity_best_practice.htm">Best practices for working with entities</a></li>

    <li><a href="entity_examples.htm">Entity examples</a></li>

    <li><a href="entity_tuning.htm">Tuning entity performance</a></li>

    <li><a href="../Models/entity_models_intro.htm">Entity Models</a></li>
    
    <li><a href="../Entity_Properties/entity_property_intro.htm">Entity Properties</a></li>

    <li><a href="../Behaviors/behavior_intro.htm">Behaviors</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
