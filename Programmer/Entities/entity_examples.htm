<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Entity examples</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Entity examples</h1>

<p>An Entity can be instantiated from a Model or Built-in Model
or any mixed hierarchy of Models and Built-in Models. Using
combinations of Models and Built-in Models that are defined in
the Entity Modeling Tool, you can create an object at runtime
with any combination of data and functionality that your game
requires. This includes adding custom or existing data types or
C/C++ functions through the use of Built-in functions and
Built-in Models.</p>

<p>Examples of entities include the following:</p>

<ul>
    <li>Simple visible entity example

        <ul>
            <li>Has a position rotation and a mesh (and maybe
            some collision information).</li>

            <li>Subclasses and single instances in the world can
            have a modified or completely different mesh.</li>

            <li>This entity can be mixed into any other model,
            making it visible in the world.</li>
        </ul>
    </li>

    <li>Triggers, switches, traps, and targets. A designer could
    create a set of sensors (proximity, body heat, noise,
    weight), and a set of devices or weapons (flash-bang,
    concussion, poison gas, fireball) such that four of each can
    be combined into 16 items.</li>

    <li>A quest can be implemented as an invisible entity carried
    by the player. Its behaviors would be triggered when the
    player entered certain areas or performed certain actions.
    The quest progress would be recorded in the quest
    entity.</li>

    <li>A rock would have no damage model, so would not respond
    to a crushing attack. But a Statue could have CrumbleDamage
    model, so it falls to pieces when attacked.</li>

    <li>A cow Entity has a ChargeAttack model and implements the
    doAttack() behavior as a Horns-down-charge.</li>

    <li>An Entity can be designed to have a variety of Emitter
    models each of which is only sensed by a corresponding sensor
    model. Infrared, visible, audible, mass.</li>

    <li>A power-up, magic-sight ability, or application of a
    sniper rifle extending the default visible range. Adding a
    radar or auto-targetting weapon to a Jeep.</li>

    <li>This is a monster that has IR vision, a flame-breath
    weapon, is immune to cold, and gives quest 42 when hit with a
    wet noodle.</li>

    <li>There can be many "piles" of money in a card game: your
    bet, your money on the table, money you are holding. Each
    could be an instance of the same Entity type.</li>

    <li>A stack of arrows is a special object. On the ground it
    is a specialized loot object. But when you pick it up, it can
    combine with the rest of your arrows in a quiver then destroy
    the loot object.</li>

    <li>Hands are a kind of container, but should be dealt with
    much more simply. Since a hand is not a separate object it
    shouldn't be a container entity like a quiver. A hand can be
    dealt with as a Property of type EntityID; a reference. That
    would allow a falcon entity to remain referenced by the
    Falconeers hand/forearm, even while it is off flying around
    on its own.</li>

    <li>A "bunch of darts" (loot entity) wielded in your hand is
    the same object as the loot on the ground. But in your quiver
    it may combine. A single dart being shot by a blowpipe
    doesn't need to become an Entity again. If it needs to fly
    out slowly, it could be modeled as a missile-type entity.
    When it falls to the ground it might become an expended-dart,
    or a bunch-of-darts entity with a containedCount of one.</li>
</ul>

<p>The designer must determine what aspects of the game system
are needed. They may be interesting to play with, but may not
need to be implemented in a sophisticated manner. That is one of
the principles of simulation. The most important part of doing it
well is deciding what to leave out.</p>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
    <li><a href="entity_how_work.htm">How entities work</a></li>

    <li><a href="entity_limitations.htm">Entity limitations</a></li>

    <li><a href="entity_best_practice.htm">Best practices for working with entities</a></li>

    <li><a href="entity_tuning.htm">Tuning entity performance</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
