<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Entity limitations</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Entity limitations</h1>

<ul>
    <li>If a property in an Entity is set to a non-default
    value, and it is then set back to the default value, it
    will still be allocated and appear to be modified from the
    default. You can call Entity::ResetProperty on a PropertyID
    or property string name to free the storage for that
        overridden Property. After calling 
    Entity::ResetProperty, any further call to GetProperty will
    return the default from the FlatModel.</li>

    <li>There are a limited number of behaviors that can be
    concurrently active on each Entity. Active behaviors include
        those that are sleeping or waiting for *AndWait built-ins.
    For example, if the limit of
    executing behavior per Entity is four (4) (the default value in
    Scheduler) and you had four behaviors that run
    periodically by sleeping in a while loop, no other behaviors
    will ever run on that Entity until one of those sleeping
    behaviors returns. You can work around this if you implement periodic behaviors by having the behavior 
        schedule another execution of itself in the future and running to completion each tick 
        instead of perpetually looping.</li>

    <li>Properties that are exposed from built-in models all appear to be
    modified from the default. This causes rapid iteration of
    default values of built-in models to not behave as expected.
    Changing the default in the Entity Modeling Tool will not
    cause Entity instances that mix in that built-in model to
    update even if the given Property has never been dynamically set. It will continue 
        to hold the earlier default value. However, making that kind of change in World 
        Builder would cause the Property to be changed in game. This is a compromise as 
        compared to resetting every Property in every built-in model for each edit. 
        Again, a <span class="NDLGUILabel">Game &gt; Reset</span> in Toolbench will clear 
        up this issue.</li>

    <li>Entities are always an instantiation of a specific
    FlatModel. The FlatModel that an existing Entity is
    instantiated from can be replaced or edited at runtime through rapid iteration. 
        Mix-in changes result in related Entities being deleted, and are conservatively 
        only recreated after a manual reset in Toolbench. By not automatically 
        recreating each affected Entity certain side effects are avoided that might 
        result from preserving old references to an Entity newly recreated with a 
        modified type. Properties,
        and behaviors can change incrementally at
    runtime through rapid iteration without a reset.</li>
    
    <li>Breakpoints will not be hit in script behaviors called with 
    BehaviorApi.CallBehavior. In many cases BehaviorAPI.SendAndWaitForReply can be used instead.</li>
</ul>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
    <li><a href="entity_how_work.htm">How entities work</a></li>

    <li><a href="entity_best_practice.htm">Best practices for working with entities</a></li>

    <li><a href="entity_world_state.htm">Controlling entity in-world/out-of-world state</a></li>

    <li><a href="entity_examples.htm">Entity examples</a></li>

    <li><a href="entity_tuning.htm">Tuning entity performance</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->


</body>

</html>
