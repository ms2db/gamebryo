<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Messages overview</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<h1>Messages overview</h1>

<p>The Emergent Foundation, Game Framework and other systems rely heavily on an event oriented programming methodology. We provide this service using a generic message passing paradigm.</p>

<p>The Emergent <span class="NDLSystemFont">efd::MessageService </span>and 
    <span class="NDLSystemFont">efd::NetService </span>are based on two fundamental and independent principles: Type Safety and Publish/Subscribe delivery. 
    Type safety is provided by the Foundation type identification system (ClassInfo/RTTI) 
    which&nbsp; associates a unique ID and name with each class. 
    <span class="NDLSystemFont">efd::MessageService </span>uses the type system to do run time type 
    checking for each <span class="NDLSystemFont">efd::IMessage</span>. 
    <span class="NDLSystemFont">efd::MessageService </span>ensures that the dynamically delivered
    <span class="NDLSystemFont">efd::IMessage </span>instance is the C++ class that the application registered to receive.
A producer sends an efd::IMessage by addressing it using a numeric 
    <span class="NDLSystemFont">efd::Category</span>. It is delivered to each target object that is a subscribed consumer of that same
    <span class="NDLSystemFont">efd::Category</span>.</p>

<p><span class="NDLSystemFont">efd::IMessage </span>and handlers should be used in preference to method pointer based callbacks and other notification mechanisms.  
This allows for loser coupling of components.
The system does not expose the byte buffers or streams that are used to transport the marshaled 
    <span class="NDLSystemFont">efd::IMessage </span>object. 
As far as a multi-process application is concerned, it creates an object that eventually appears in another process as you would expect 
within a single process.</p>
<p>A Category, identifies a conceptual channels, and is used to partition the global flow of messages into manageable subsets.  Which function handles 
which message type is mapped statically.  Since the function signature is known at compile time the message can be automatically cast 
to the correct <span class="NDLSystemFont">efd::IMessage</span> derived type for the handler function.  The 
    <span class="NDLSystemFont">efd::Category </span>is subscribed at runtime along 
    with a pointer to the object that will handle the message.  The static mapping of message type to handler function is used in combination with the object pointer to 
deliver the message.</p>

<p class="NDLHeadingRelatedTopic">Related topics</p>
<UL>
<li><a href="message_features.htm">Message features</a></li>
<li><a href="message_how_work.htm">How messages work</a></li>
<li><a href="message_limitations.htm">Message limitations</a></li>
<li><a href="message_how_relates_efr.htm">How messages relate to the Emergent Game Framework</a></li>
<li><a href="message_reqs.htm">Requirements for working with messages</a></li>
<li><a href="message_best_practice.htm">Best practices for working with messages</a></li>
<li><a href="message_using.htm">Using messages</a></li>
<li><a href="../../Reference/QuickRef_Services/svc_qckref_msg_svc.htm">Message Service Quick Reference</a></li>
<li><a href="../../Reference/QuickRef_Services/svc_qckref_net_svc.htm">Network Service Quick Reference</a></li>
<li><a href="../../Reference/efd/efd__IMessage.htm">efd::IMessage</a></li>
<li><a href="../../Reference/efd/efd__Category.htm">efd::Category</a></li>
<li><a href="../../Reference/efd/efd__IBase.htm">efd::IBase</a></li>
</UL>


<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
