<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Messages: Introduction</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<h1>Messages: Introduction</h1>

<!-- Begin text copied from  architecture_meg_system_about.htm -->
<p>The Gamebryo message system abstracts both remote and local messaging. It 
    provides this service through <span class="NDLSystemFont">efd::MessageService</span>,
    <span class="NDLSystemFont">efd::IMessage</span>, and
    <span class="NDLSystemFont">efd::Category</span>. Local messaging has two principal purposes: 
it is used to create very loose coupling between systems and it manages certain kinds of timing and reentrancy 
problems that arise in large, complex systems. </p>
    <p>A message is usually subclassed by the application with application-specific 
        payload data added. A message class is registered with a factory so it can be 
        reconstituted if it arrives over the network. The network service provides 
        qualities of service for remote messages. The application is 
responsible for implementing marshalling code, using Foundation libraries and the base message class 
methods when the message needs to be transmitted over the network. These libraries provide network byte order 
neutrality.</p>

<p>The message system uses a Category to determine how to route a message. A Category can be thought of
 as an address or a multicast group. The sender of a message does not need to be aware who the consumers are; it
 just publishes that message to the appropriate Category. A consumer subscribes to the category of 
 messages that it needs, and messages of that category are then delivered directly to the subscribing object.
 The application determines the meaning of a Category and which components consume that category of message.</p>

<p>The message service&#39;s API does not require distinguishing between whether a 
    message will be sent remotely or locally. A remote message is routed using a Category 
    alone. When a remote process needs a message of a 
particular category, it subscribes, and the Foundation manages the connection between the remote producer and 
the local subscriber.</p>
 
<p>When a consumer subscribes to a message, it registers for a specified message class. The Message System 
ensures that only messages of that class will be delivered to the handler method for the consuming object. 
The system uses the Foundation runtime type system and its ease of use templates 
    to guarantee type safety at run time.</p>
<!-- End text copied from  architecture_meg_system_about.htm -->

    <table>
			<thead>
      	<tr>
            <th>For more information about...
          </th>
          <th>See...
          </th>
        </tr>
			</thead>
			<tbody>	
        <tr>
        	<td>A brief introduction to Messaging
          </td>
          <td><a href="message_overview.htm">Messages overview</a>
          </td>
        </tr>
        <tr>
        	<td>A bulleted break down of major features
          </td>
          <td><a href="message_features.htm">Message features</a>
          </td>
        </tr>
        <tr>
        	<td>Some implementation details of interest about the message system
          </td>
          <td><a href="message_how_work.htm">How messages work</a>
          </td>
        </tr>
        <tr>
        	<td>Limitations of the message system
          </td>
          <td><a href="message_limitations.htm">Message limitations</a>
          </td>
        </tr>
        <tr>
        	<td>How other components in the system use messaging
          </td>
          <td><a href="message_how_relates_efr.htm">How messages relate to the Emergent Game Framework</a>
          </td>
        </tr>
        <tr>
        	<td>Some helpful guidance to get you started
          </td>
          <td><a href="message_reqs.htm">Requirements for working with messages</a>
          </td>
        </tr>
        <tr>
        	<td>Including the feature in your application
          </td>
          <td><a href="message_best_practice.htm">Best practices for working with messages</a>
          </td>
        </tr>
        <tr>
        	<td>Overview of examples and message use
          </td>
          <td><a href="message_using.htm">Using messages</a>
          </td>
        </tr>
        <tr>
        	<td>Example of creating and sending the simplest message
          </td>
          <td><a href="message_custom_creating.htm">Creating custom message types</a>
          </td>
        </tr>
        <tr>
        	<td>Example creating and sending a message with data
          </td>
          <td><a href="message_custom_modifying.htm">Modifying custom message types</a>
          </td>
        </tr>
        <tr>
        	<td>What you need to look for when removing a custom message
          </td>
          <td><a href="message_custom_deleting.htm">Deleting custom message types</a>
          </td>
        </tr>
        <tr>
        	<td>Example of creating a more flexible fully custom message
          </td>
          <td><a href="message_app_specific_defining.htm">Defining application-specific messages</a>
          </td>
        </tr>
        <tr>
        	<td>How to send messages to a different process or machine
          </td>
          <td><a href="message_app_specific_exchanging.htm">Exchanging application-specific messages between applications that are located on separate hosts</a>
          </td>
        </tr>
        <tr>
        	<td>What you need to know about accessing the MessageService from multiple threads
          </td>
          <td><a href="message_multithreading.htm">Using the message service for multithreading</a>
          </td>
        </tr>
        <tr>
        	<td>Common problems and their solutions
          </td>
          <td><a href="message_troubleshoot.htm">Troubleshooting messages</a>
          </td>
        </tr>
        <tr>
        	<td>Component and code references
          </td>
          <td><a href="message_reference.htm">Message reference</a>
          </td>
        </tr>
			</tbody>	
    </table>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
