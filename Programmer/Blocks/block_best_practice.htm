<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Block Best Practices</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>

<!--(Begin Body)================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<h1>Block Best Practices</h1>

<p>We recommend the following best practices when using block files.</p>
<ul>
    <li>Keep in mind that a single ".block" file in World Builder can generate multiple ".xblock"
        files for the run-time. Use layers in World Builder to divide large levels into multiple
        run-time blocks.</li>
    <li>You can have as many block files loaded at once as you need, don't worry about minimizing
        the number of blocks loaded. It is only the total number of entities loaded that has a
        strong impact on performance.</li>
    <li>Use multiple smaller blocks rather than a single monolithic block when possible.</li>
    <li>Consider using blocks as functional units to control game interactions. For example, if a
        trigger causes one set of entities to be hidden and another set to be displayed consider
        making both of these sets into seperate block files and have the trigger move the blocks in
        or out of the world.</li>
    <li>Consider using multiple blocks to prioritize the loading of large levels. Important entities
        can be loaded while displaying a loading screen and then frills or additional details can
        be streamed from a separate block file while the player is playing. You can restrict how
        many entities will be created from a given block on each frame to limit the CPU consumption
        when loading a block in the background.</li>
    <li>Keep in mind that to the run-time a block is simply a set of entities and that an entity
        can represent almost any type of data. For example, you might load UI screens by loading
        a block file containing entities that define the UI layout. Moving that block in or out
        of the world might show or hide the resulting UI elements.</li>
    <li>If your game frequently creates short lived entities such as weapon projectiles or explosion
        effects consider using a block as a cache of these entities. Place as many of these entities
        as you need into the block, link them to a managing entity, load the block out-of-world and
        when a new bullet is needed request an existing entity from the manager entity. Then simply
        position the entity, set any other properties it needs and have the bullet entity enter the
        world. Switching weapons might load a different cache block to avoid having too many used
        entities in memory.</li>
    <li>When loading multiple instances of the same block be aware that block instance ID zero is
        treated specially for entity linking. As a result it is recommended that instance ID zero
        be used for any blocks that will only be loaded once (non-instanced entities or global
        entities shared amoung all instances, for example) and that any block that may be loaded
        multiple times should always use a non-zero instance ID.</li>
    <li>When creating your block in WorldBuilder, center each block (or group of related blocks) at
        the origin. You can translate and rotate the blocks when loading them if you need multiple
        blocks to fit seamlessly together.</li>
</ul>

<p>Additional recommendations for networked games:</p>
<ul>
    <li>It is recommended that replicated entities be managed in seperate block file from static
        entities.</li>
    <li>All peers should load the block or blocks representing the static elements of the world
        first before they start requesting replicated entity data.</li>
    <li>The block with replicated entities only needs to be loaded on a single host and will then
        replicate the entities to other peers.</li>
    <li>Loading the static data locally greatly reduces the bandwidth needed to replicate entities
        and also ensures against problems that could arise from the uncertain order in which
        replicated entities will arrive on each peer.</li>
    <li>There is currently a significant limitation in that only "in-world" entities are replicated.
        This limitation may be severe enough that you may wish to alter the ReplicationService so
        that entity in/out of world state can also be replicated.</li>
</ul>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
    <li><a href="block_about.htm">About Block Files</a></li>
    <li><a href="block_loading.htm">Loading Blocks</a></li>
    <li><a href="block_options.htm">Block Loading Options</a></li>
    <li><a href="block_unloading.htm">Managing Loaded Blocks</a></li>
    <li><a href="block_load_sequence.htm">Block Loading Sequence</a></li>
    <li><a href="block_best_practice.htm">Block Best Practices</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>
</html>
