<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>About Block Files</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>

<!--(Begin Body)================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<h1>About Block Files</h1>

<p>A block file is the data format generated by the World Builder tool. To the Game Framework
run-time a block is simply a set of entities that can be loaded and managed as a single unit. A
single block file might contain an entire game level or it might simply contain a few related
entities. Large worlds could be composed from a tiled grid of seperate block files or perhaps one
block file might define the current zone while additional block files are layered over top. You
might even load specific blocks in response to a certain quests being active.</p>


<h2>Block terminology</h2>
<p>The concept of a block is shared between tools and the run-time, but has slightly different
meaning in each of these domains. In World Builder a block typically represents an entire level but
a single World Builder block can potentially generate multiple run-time blocks. World Builder stores
block data in ".block" and ".layer" files, this data is then exported into ".xblock" files. The term
"block" as used in this documentation section refers to the run-time block data as loaded from one
of these generated ".xblock" files. In those instances where it might cause confusion the more
specific term "run-time block" or the shorthand "xblock" may also be used. Further adding to the
potential confusion, some older code uses the term "entity set" to refer to a run-time block.</p>

<p>LightSpeed 3.2 adds the concept of the "world" and being either in or out of the world. This
concept is distinct from the concept of a block. The "world" is simply a subset of all created
entities that are expected to consume their full resources by performing tasks such as rending,
simulating physics, replicating or responding to game events. To be "out of the world" simply
implies that an entity is created and maintains its state but does not perform expensive operations
such as those metioned above. Unfortunately there are a few legacy remnants of the term "world"
used in conjunction with block files, for example "emergent-world" is still the Asset Web tag
applied to ".xblock" files.</p>


<h2>Block features</h2>
<p>Block files support the following features:</p>
<ul>
    <li>You may have as many blocks loaded at once as will fit into memory.</li>
    <li>You can load multiple blocks concurrently or sequentially.</li>
    <li>Loading a block will automatically load all flat models used by the block.</li>
    <li>Blocks can contain as many entity descriptions as will fit into memory.</li>
    <li>Every property on every entity can be overridden. Any property not overridden will have the
        default value as determined by the flat model.</li>
    <li>EntityRef properties for all entities in the block will be automatically updated with the
        run-time assigned EntityID value.</li>
    <li>EntityRef properties can be linked across different blocks but with the restiction that the
        entity being linked to must be loaded before another entity can link to it.</li>
    <li>Circular EntityRef links are supported but only when both entities are in the same block.</li>
    <li>Custom property types can be read from block files. To support custom property types they
        must be registered before the block is loaded.</li>
    <li>Blocks load asynchronously over multiple frames so even large blocks can be loaded without
        causing excessive frame dealys.</li>
    <li>You can limit the number of entities from the block that will be created on each frame.</li>
    <li>Once loaded, the block tracks every entity created as part of the block.</li>
    <li>Entities created from loading a block will receive the OnEntitySetFinished lifecycle
        behavior once all entities in the block have finished being created.</li>
    <li>Because blocks track all entities created from the block file there are certain entity
        operations that can be performed on the enitre block. See <a href="block_unloading.htm">
        Managing Loaded Blocks</a> for details.</li>
</ul>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
    <li><a href="block_about.htm">About block files</a></li>
    <li><a href="block_loading.htm">Loading Blocks</a></li>
    <li><a href="block_options.htm">Block Loading Options</a></li>
    <li><a href="block_unloading.htm">Managing Loaded Blocks</a></li>
    <li><a href="block_load_sequence.htm">Block Loading Sequence</a></li>
    <li><a href="block_best_practice.htm">Block Best Practices</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>
</html>
