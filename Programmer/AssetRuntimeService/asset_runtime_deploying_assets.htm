<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Deploying Assets</title>

<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Deploying Assets</h1>

<p>The methodology that you use to deploy your assets will
largely depend on whether you are supporting multiple variations
(platforms, locales, and so on) and the manner in which you have
organized your assets under the <em>&lt;Asset Web Root Directory&gt;</em>. If
you have followed an organization that is similar to the one
described in <a href=
"asset_runtime_organize_assets.htm">Organizing your assets</a>,
then your assets will already be largely segregated into those
that are needed for runtime and those that are specific to
certain platform or other variations.</p>

<h2>Asset Deployment Build Step</h2>

<p>The recommended "best practice" for asset deployment is to
integrate it as a step in your build procedure or script. Most
development environments support the inclusion of custom build
steps that can be scripted and automatically kicked off as part
of a normal build. This is a convenient place to copy those
assets needed by the platform being tested to the specific
location required by that platform. For example, development on
the Xbox 360 entails copying the assets needed by the game over
to the Xbox console's hard drive using the <span class=
"NDLSystemFont">XbCp</span> command. This requirement to sync up
the assets can be implemented as steps in your customized build
script for the platform, thus happening automatically every time
you build.</p>

<h2>Asset Deployment Metadata Concerns</h2>

<p>Metadata that is generated by the Asset Controller must also
be deployed to the target location. This metadata will be
necessary for the game to run in a stand-alone mode (in other
words, without an Asset Controller connection for Rapid
Iteration). All of the *.nt files that are stored in
<span class="NDLSystemFont"><em>&lt;Asset Web Root Directory&gt;</em>/asset-web-metadata/</span> must be copied to the target, except for the file named <span class="NDLSystemFont">awebinst.nt</span>.</p>

<table class="NDLNoteContainer" width="100%">
    <tr align="left">
        <td class="NDLNoteContainerTD">
            <p class="NDLHeadingNoteContainer">Note</p>

            <div class="NDLNote">
                The <span class=
                "NDLSystemFont"><em>&lt;Asset Web Root Directory&gt;</em>/asset-web-metadata/awebinst.nt</span>
                file is a special file that is used to designate
                the instance of the asset web that the game is
                using. This file is automatically updated
                whenever you run the Asset Controller. This file must
                not be copied when deploying assets for running
                on the console.
            </div>
        </td>
    </tr>
</table>

<p>It is not necessary to deploy the metadata stored in the
various "asset-src-metadata/" directories that you may have
created, nor is it required to copy the contents of
<em>&lt;Asset Web Root Directory&gt;</em>/asset-web-config/. These files are
only needed by the Asset Controller, not by the game.</p>

<h2>Notes About Rapid Iteration</h2>

<p>Prior to using your game alongside Toolbench for rapid
iteration workflows, you must still execute whatever deployment
steps your platform requires. Rapid iteration mode allows assets
to remain in sync with the game as changes are made. However, the
assumption is that you start your session with everything already
synchronized. Your game will only use the Asset Controller to
perform location lookups and to fetch <em>changed assets</em>. It
will not be used for the normal loading of assets as the game
initially starts up.</p>

<p>Despite the restriction that you start with assets already in
sync, the deployment step can often be skipped entirely
during development. This is because most platforms support some
mechanism of directory sharing with a PC during development. If
you can just point the platform under test to the same
<em>&lt;Asset Web Root Directory&gt;</em> on your workstation where you are
making your changes, then no initial copying of the assets to some
other location is required. This is the preferred method of
operation and it is generally possible to do with PCs and all the
latest generation of game console DevKits.</p>

<p>For more information on setting up rapid iteration for various
hardware configurations, see the <a href=
"../../Tutorials/Rapid_Iteration/rapid_intro.htm">Rapid Iteration Tutorial</a>.</p>

<h2>Using the Asset Controller in Deployment Scripts</h2>

<p>The Asset Controller has a very handy command-line feature that is helpful in creating
sophisticated deployment scripts. By using the command-line option of <span class="NDLSystemFont"
>AssetWeb.ListAssets</span>, the Asset Controller can generate a file list of asset files that need
to be deployed for a given configuration. Specifying the configuration is done with tags, so it is
possible to select all assets needed for a given platform by just specifying an appropriate tag
value on the command line. For example:</p>

<pre>AssetController.exe AssetWeb.Path=../MyAwesomeGame AssetWeb.ListAssets=urn:Xbox360</pre>

<p>This command would create a text file in the working directory called "ListAssets.txt". The file
contains a listing of all the runtime assets that are required for the game to run on the Xbox 360.
This text file can then be used in a script to select the right files for virtually any
configuration that your tagging supports. Also, if you just want a list of all of the runtime assets
without variations, you can use <span class="NDLSystemFont">AssetWeb.ListAssets=urn:</span>.</p>

<p>If you use this method in your deployment scripts, do not forget to also copy the contents of
<span class="NDLSystemFont"><em>&lt;Asset Web Root Directory&gt;</em>/asset-web-metadata/</span> to
the target location. It will be required for your game to run.</p>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
    <li><a href="asset_runtime_organize_assets.htm">Organizing Your Assets</a></li>
    <li><a href="asset_runtime_config.htm">Configuring the Asset Runtime Service</a></li>
    <li><a href="asset_runtime_platform_support.htm">Supporting Multiple Platforms</a></li>
    <li><a href="asset_runtime_customize_asset_tagging_system.htm">Customizing the asset tagging
        system</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>
</html>
