<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Supporting Localization</title>

<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->

<!--(Begin Links)===================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Supporting Localization</h1>

<p>You can add support for localized assets by using the same
general approach that is used for platform-specific assets.
Basically, assets that are localized for a specific build of the
product should be tagged with a label that is appropriate to the
locale. Example tags would have values like "English", "Spanish",
"Deutsch", and so on. Applying these tags correctly to assets
will require that you properly configure the Asset Controller to
include localized assets in the assignment of Logical Asset Id's
and that you set up the <span class=
"NDLSystemFont">DirectoryTagger</span> to recognize the
directories where localized assets are stored.</p>

<h2>About Logical Asset Id's</h2>

<p>Just as is the case with platform-specific assets,
locale-specific assets require the Asset Controller to group
related assets together by assigning them the same logical asset
Id. Recall that a logical asset is an asset that has multiple
variations which are stored in different files. This is the case
for assets that have been customized for different locales (or
platforms).</p>

<p>The creation of logical asset id's is controlled through
configuration of the LogicalIdTagger. This tagging extension
automatically scans the file names of assets as they are
discovered and uses the setting you provide to know which
directory names in the path need to be treated as variations. If
two asset files have the same "logical name" after stripping out
the variations then they are assigned the same logical asset id.
The Logical Id is the one that is used to reference the asset in
your Toolbench project, and to allow different variations to be
selected at runtime.</p>

<p>A simple example should aid in your understanding of this
concept. Suppose we have a generic "ogre.nif" asset file, which
includes several different variations that are optimized for
different platforms and different locales. If you like, you can
imagine that the Ogre sports a different T-shirt based on the
locale setting of the game, in an attempt to make it particularly
offensive to your audience of gamers. The example ogre.nif that
is the generic version (PC Platform, default locale) would be
stored highest in the directory structure. A appropriate path
would be <span class="NDLSystemFont"><em>&lt;Asset Web Root
Directory&gt;</em>/MyAwesomeGame/Media/Characters/ogre.nif</span>.
A second example variation, say for PS3 and Spanish, would then
be stored at <span class="NDLSystemFont"><em>&lt;Asset Web Root
Directory&gt;</em>/MyAwesomeGame/Media/Characters/PS3/Spanish/ogre.nif</span>.
If the LogicalIdTagger is correctly configured to know that "PS3"
and "Spanish" are variations, then these two assets will be
assigned the same logical asset id. This will allow your asset
reference to be correctly translated at runtime, and the asset
you intended gets loaded.</p>

<h2>Configuring the LogicalIdTagger</h2>

<p>If you understand the above, then configuring the tagging
extension for logical id's is very easy. Recall that the
configuration file for the tagger needs to be stored in
<span class="NDLSystemFont"><em>&lt;Asset Web Root
Directory&gt;</em>/asset-web-config/LogicalIdTagger.ini</span>.
One of the settings in that file is the parameter <span class=
"NDLSystemFont">LogicalIdTagger.Classes</span>. This is a list of
variation names which are reflected in the directory naming
conventions for your asset web. The example below includes names
for both platform and locale variation.</p>
<pre>
[LogicalIdTagger.Classes]
; add classification tags for the console platforms
=PS3
=Xbox360
; add 3 classification tags for the locale
=English
=Spanish
=French
</pre>

<h2>Configuring the DirectoryTagger</h2>

<p>The DirectoryTagger is a tagging extension that is used along
with the LogicalIdTagger to support variations. Its main function
is to turn certain directory names into tags that are applied to
the asset. This is what allows the correct asset to be selected
at runtime when your query is based on a set of variations; for
example "urn:PS3:Spanish" would select those assets that are
optimized for PS3 and localized for Spanish.</p>

<table class="NDLNoteContainer" width="100%">
    <tr align="left">
        <td class="NDLNoteContainerTD">
            <p class="NDLHeadingNoteContainer">Note</p>

            <div class="NDLNote">
                Any asset that does not include all the
                variations will automatically revert to a more
                generic asset selection at runtime.<br>
                <br>
                To specify which directory names are to be
                treated as tag values by the Asset Controller,
                you simply list the names in the <span class=
                "NDLSystemFont">[DirectoryTagger.Directories]</span>
                section of the configuration file. As usual, the
                configuration file needs to be stored in
                <span class="NDLSystemFont"><em>&lt;Asset Web
                Root
                Directory&gt;</em>/asset-web-config/DirectoryTagger.ini</span>.
            </div>
        </td>
    </tr>
</table>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
    <li><a href="asset_runtime_organize_assets.htm">Organizing Your Assets</a></li>

    <li><a href="asset_runtime_config.htm">Configuring the Asset
    Runtime Service</a></li>

    <li><a href="asset_runtime_platform_support.htm">Supporting Multiple Platforms</a></li>

    <li><a href=
    "asset_runtime_customize_asset_tagging_system.htm">Customizing
    the asset tagging system</a></li>

    <li><a href="asset_runtime_deploying_assets.htm">Deploying Assets</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>
</html>
