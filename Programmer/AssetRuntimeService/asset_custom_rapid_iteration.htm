<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Rapid Iteration Support for New Asset Types</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="TCR" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Rapid Iteration Support for New Asset Types</h1>

<p>You can also give your asset loading system the ability to support the rapid
iteration workflow by registering your loader to handle asset
change notifications. Doing this is pretty easy&mdash;you need only
provide a callback implementation in your asset loader that can
handle re-loading of the asset when the associated file(s) has
changed.</p>

<p>To implement this functionality, your loader class will need to
inherit from <span class="NDLSystemFont"><a href=
"../../Reference/efd/efd__AssetChangeHandler.htm">efd::AssetChangeHandler</a></span>.
This provides the virtual method that you will need to override
to perform your re-loading functionality. The method has the
following signature:</p>

<pre>
virtual void HandleAssetChange(
    const efd::utf8string&amp; assetId,
    const efd::utf8string&amp; tag)
</pre>

<p>The '<span class="NDLSystemFont">assetId</span>' parameter is
a unique physical asset Id for an asset file that has been
changed. The '<span class="NDLSystemFont">tag</span>' parameter
is the value of the asset tag that was used when you registered
your callback. This will normally be the value of the
"asset-type" portion of the MIME type that you configured above.
When this callback is invoked, you should first call <a href=
"../../Reference/efd/efd__AssetLocatorService.htm">efd::AssetLocatorService::AssetLocate()</a>
and pass the '<span class="NDLSystemFont">assetId</span>'
parameter as the asset to be located. This will allow the asset
to be fetched to your game console, if necessary, after which it
will return the full path of the asset file so that you can
reload the asset. The actual reloading should take place in the
response message handler that you have setup for your
<span class="NDLSystemFont">AssetLocate()</span> call.</p>

<p>The only additional requirement is to register your callback
handler with the ReloadManager. Registration is done by asking
for notifications of changes to assets that possess a certain
tag. Again, you will normally want to use the "asset-type" name
that you provided above. For example, if your MIME type is
<span class="NDLSystemFont">video/compressed-cut-scene</span>
then your callback registration should look like this:</p>

<pre>
ReloadManagerPtr spReloadManager = m_pServiceManager-&gt;GetSystemServiceAs&lt;ReloadManager&gt;();
EE_ASSERT(spReloadManager);
spReloadManager-&gt;RegisterAssetChangeHandler("compressed-cut-scene", this);
</pre>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
    <li><a href="asset_runtime_customize_asset_loaders.htm">Adding New Asset Types</a></li>

    <li><a href="asset_custom_architecture.htm">Architectural Choices Related to New Asset Types</a></li>

    <li><a href="asset_custom_factory.htm">Creating a New Asset Factory</a></li>

    <li><a href="asset_custom_metadata.htm">Adding New Asset Types to Metadata</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
