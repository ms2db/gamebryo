<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Introduction to the NiSceneGraphUpdateService Library</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Introduction to the NiSceneGraphUpdateService Library</h1>

<p>The NiSceneGraphUpdateService library enables an application
to replicate an entire scene graph and small changes to a scene
graph across a network connection. The library is intended to be
used for real-time viewer tools and connecting tools to running
games for asset authoring. To clarify the usage of the library,
the following terms are used when describing the API and how it
behaves:</p>

<ul>
    <li>Editor: The application that hosts the original scene
    graph. For example, the Gamebryo Maya <a href=
    "../../Art/Maya/rpi_intro.htm">plug-in</a> or a custom
    tool.</li>

    <li>Viewer: An application that contains the copy of the
    scene graph. For example, the Gamebryo <a href=
    "../../Art/Maya/rpi_remote_viewer_intro.htm">Remote
    Viewer</a> or a game during development.</li>
</ul>

<p>The NiSceneGraphUpdateService library leverages existing
Gamebryo streaming technology to stream any NiObject-derived
object across the network. Thus, there is no need to add new
network-specific streaming code to existing NiObject-derived
classes. The NiSceneGraphUpdateService can perform in-memory
replacement of existing NiObjects, which removes the need to fix
up pointers when changes arrive on the viewer side. The interface
to this library is based on the paradigm of adding, updating, and
removing NiObjects to a local NiSceneGraphUpdate singleton. On
the singleon's update tick, it sends only the modified NiObjects
to one or more remote NiSceneGraphUpdate singletons hosted in
viewer applications.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
