<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">

<html>

<head>

<title>Particle System Emitters and Spawners</title>

<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Particle System Emitters and Spawners</h1>

<p>Emitters and spawners control how new particles get added to
the particle system.</p><a name="Particle_Emitters" id=
"Particle_Emitters"></a>

<h2>Particle Emitters</h2>

<p>The <span class="NDLSystemFont"><a href=
"../../Reference/NiParticle/NiPSParticleSystem.htm">NiPSParticleSystem</a></span>
object owns a set of <span class="NDLSystemFont"><a href=
"../../Reference/NiParticle/NiPSEmitter.htm">NiPSEmitter</a></span>
objects that specify emission parameters for the system. Each
<span class="NDLSystemFont">NiPSEmitter</span> object points to
an <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiAVObject.htm">NiAVObject</a></span> in
the scene graph whose world-space transformations will be used to
represent the position and orientation of the emitter. This
allows the emitter's position and orientation to be easily
animated. Any number of emitters can exist on a particle system,
but only one emitter will be exported from 3ds max and Maya due
to the limitations of those packages.</p>

<p><span class="NDLSystemFont">NiPSEmitter</span> contains an
<span class="NDLSystemFont">EmitParticles</span> function that is
called to add particles to the system. Multiple particles can be
emitted at once with this function, with different ages if
desired. Specifying an initial age for each particle allows the
illusion of a steady emission rate even though the frame rate may
be uneven. While the <span class=
"NDLSystemFont">EmitParticle</span> function can be called from
any code, it is usually controlled by an <span class=
"NDLSystemFont"><a href=
"../../Reference/NiParticle/NiPSEmitParticlesCtlr.htm">NiPSEmitParticlesCtlr</a></span>
time controller. This controller, attached to the <span class=
"NDLSystemFont">NiPSParticleSystem</span> object, contains
animation keys for when the emitter should be active and what its
emission rate is at any given time. When updated, it uses the
animation keys to determine how many particles should be emitted
and what their initial ages should be and then calls the
<span class="NDLSystemFont">EmitParticles</span> function to add
them to the system.</p>

<p>Particle emitters specify how particles should be emitted,
including the initial values for various particle parameters,
such as radius, speed, and life span. These values can be
animated by controllers that derive from <span class=
"NDLSystemFont"><a href=
"../../Reference/NiParticle/NiPSEmitterCtlr.htm">NiPSEmitterCtlr</a></span>.
New particles added by <span class=
"NDLSystemFont">EmitParticles</span> are stored by the particle
system but are not actually counted as active particles until the
beginning of the next call to <span class=
"NDLSystemFont">NiPSParticleSystem::Update</span>.</p>

<p>Various subclasses exist for <span class=
"NDLSystemFont">NiPSEmitter</span> that compute the initial
position of emitted particles in different ways. The emitters
that ship with Gamebryo are listed here, along with a brief
description:</p>
<!--(Table)=========================================================-->

<table>
    <thead>
        <tr>
            <th>Emitter</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><span class="NDLSystemFont"><a href=
            "../../Reference/NiParticle/NiPSBoxEmitter.htm">NiPSBoxEmitter</a></span></td>

            <td>Emits particles from a rectangular volume.</td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont"><a href=
            "../../Reference/NiParticle/NiPSCylinderEmitter.htm">NiPSCylinderEmitter</a></span></td>

            <td>Emits particles from a cylindrical volume.</td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont"><a href=
            "../../Reference/NiParticle/NiPSMeshEmitter.htm">NiPSMeshEmitter</a></span></td>

            <td>Emits particles from vertices, edges, or
            triangles of an <span class="NDLSystemFont"><a href=
            "../../Reference/NiMesh/NiMesh.htm">NiMesh</a></span>
            object.</td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont"><a href=
            "../../Reference/NiParticle/NiPSSphereEmitter.htm">NiPSSphereEmitter</a></span></td>

            <td>Emits particles from a spherical volume.</td>
        </tr>

        <tr>
            <td><a href=
            "../../Reference/NiParticle/NiPSSphereEmitter.htm"></a><a class="NDLSystemFont"
            href=
            "../../Reference/NiParticle/NiPSTorusEmitter.htm">NiPSTorusEmitter</a></td>

            <td>Emits particles from a torus volume.</td>
        </tr>

        <tr>
            <td><a class="NDLSystemFont" href=
            "../../Reference/NiParticle/NiPSCurveEmitter.htm">NiPSCurveEmitter</a></td>

            <td>Emits particles from a curve defined by a
            <a href="../../Reference/NiParticle/NiCurve3.htm">NiCurve3</a>
            object.</td>
        </tr>
    </tbody>
</table>

<a name="Particle_Spawners" id="Particle_Spawners"></a>

<h2>Particle Spawners</h2>

<p>The <span class="NDLSystemFont">NiPSParticleSystem</span>
object owns a set of <span class="NDLSystemFont"><a href=
"../../Reference/NiParticle/NiPSSpawner.htm">NiPSSpawner</a></span>
objects that specify spawning parameters for the system. Each
<span class="NDLSystemFont">NiPSSpawner</span> contains
parameters describing how an existing particle's parameters
should be modified when spawning a new particle from it,
including how many particles to spawn.</p>

<p><span class="NDLSystemFont">NiPSSpawner</span> has a
<span class="NDLSystemFont">SpawnParticle</span> function that
will create a new particle with slightly modified parameters
copied from an existing particle. This function is called by the
particle system when it wishes to spawn a particle. This can
occur through the living spawner, death spawner or collision
spawner.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
