<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">

<html>

<head>

<title>Particle System Generators</title>

<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<h1>Particle System Generators</h1>

<p>The generator in a particle system is responsible for 
 taking the particle data and generating renderable geometry from it, storing 
 that geometry in data streams on the <span class="NDLSystemFont"><a href="../../Reference/NiParticle/NiPSParticleSystem.htm">NiPSParticleSystem</a></span> 
 object. Generators should not be attached to <span class="NDLSystemFont"><a href="../../Reference/NiParticle/NiPSMeshParticleSystem.htm">NiPSMeshParticleSystem</a></span> 
 objects, since they represent their particles in a different way. A generator 
 is a mesh modifier attached to the <span class="NDLSystemFont">NiPSParticleSystem</span> 
 object that executes when the particle system has passed a culling test 
 and finishes up immediately before the particle system object is rendered. 
 It updates the data streams on the particle system each frame to correspond 
 with the particle data.</p>

<p>The default generator that ships with Gamebryo is <span class="NDLSystemFont"><a href="../../Reference/NiParticle/NiPSFacingQuadGenerator.htm">NiPSFacingQuadGenerator</a></span>. 
 This generator produces a rotated, textured, screen-facing quad (two triangles) 
 for each particle. The generator is associated with the <span class="NDLSystemFont">NiPSFacingQuadGeneratorKernel</span> 
 <a href="../NiFloodgate/Introduction_to_NiFloodgate.htm">Floodgate</a> 
 kernel, which does the work of generating the quads.</p><p>The<span class="NDLSystemFont"><a href="../../Reference/NiParticle/NiPSFacingQuadGenerator.htm">NiPSAlignedQuadGenerator</a></span>
is a generator supports rotation,texture animation, velocity,
fixed, camera and position alignment. The generator is associated with
the <span class="NDLSystemFont">NiPSAlignedQuadGeneratorKernel</span> 
 <a href="../NiFloodgate/Introduction_to_NiFloodgate.htm">Floodgate</a> 
 kernel, which does the work of generating the quads.</p>

<p>An application can provide its own alternate generator 
 mesh modifier and Floodgate kernel that generate particles in a different 
 manner. For example, each particle could perhaps be represented by an 
 instanced <span class="NDLSystemFont"><a href="../../Reference/NiMesh/NiMesh.htm">NiMesh</a></span> 
 object.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>