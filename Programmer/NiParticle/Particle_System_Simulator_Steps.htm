<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>

<title>Particle System Simulator Steps</title>

<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<h1>Particle System Simulator Steps</h1>

<p>The particle system simulator class (<span class="NDLSystemFont"><a href="../../Reference/NiParticle/NiPSSimulator.htm">NiPSSimulator</a></span>) 
 holds a set of simulator steps. Each simulator step is derived from <span class="NDLSystemFont"><a href="../../Reference/NiParticle/NiPSSimulatorStep.htm">NiPSSimulatorStep</a></span> 
 and encapsulates a set of particle simulation operations. Any number of 
 steps can be added to the simulator, in any order, to perform additional 
 simulation operations.</p>

<p>Each simulator step provides a <a href="../NiFloodgate/Introduction_to_NiFloodgate.htm">Floodgate</a> 
 kernel that performs its operations and a set of input and output streams 
 that hold the data the kernel requires. The input and output streams can 
 point to particle data obtained from the <span class="NDLSystemFont"><a href="../../Reference/NiParticle/NiPSParticleSystem.htm">NiPSParticleSystem</a></span> 
 object. Each input and output stream that holds per-particle data has 
 a semantic string associated with it. This string identifies the type 
 of particle data held in that stream. The <span class="NDLSystemFont"><a href="../../Reference/NiParticle/NiPSCommonSemantics.htm">NiPSCommonSemantics</a></span> 
 class should be used to obtain these semantics strings so that they are 
 consistent across steps. The simulator will automatically remap output 
 streams from steps to input streams of subsequent steps based on the semantic 
 strings reported for each stream to ensure that steps are executed in 
 the proper order by Floodgate.</p>

<p>Simulator steps have the option to exclude themselves 
 from execution if certain conditions are met. For example, if a step applies 
 forces to particles but no forces have been specified, it may opt to skip 
 execution since it would have no effect. Another example would be a kernel 
 that updates particle rotations, which could prevent itself from executing 
 if no particle rotation data exists. This is done by returning false from 
 its <span class="NDLSystemFont">Update</span> function and can be decided 
 on a frame-by-frame basis.</p>

<p>In general, it is best for as many operations to be 
 included in a single step as is possible, while still retaining the ability 
 to disable code that may not be used in all cases. If new functionality 
 needs to be added to the particle system simulation, it can either be 
 done by modifying an existing step or by adding a new one.</p>

<p>The actual simulation work for each step is performed 
 by the Floodgate kernel associated with that step. Most kernels call out 
 to inline functions defined in other classes to actually do the work. 
 See the individual step class descriptions for more information about 
 how to customize each step.</p>

<p>The simulator steps included with Gamebryo are listed 
 here in the order in which they are attached to the simulator, along with 
 a brief description:</p>

<!--(Table)=========================================================-->
<table>
    <thead>
        <tr>
            <th>
                Simulator Step
            </th>
            <th>
                Description
            </th>
        </tr>
    </thead>
    <tbody>

<tr>
<td>
<span class="NDLSystemFont"><a href="../../Reference/NiParticle/NiPSSimulatorGeneralStep.htm">NiPSSimulatorGeneralStep</a></span></td>
<td>
Updates sizes, colors, and rotations for particles.</td></tr>

<tr>
<td>
<span class="NDLSystemFont"><a href="../../Reference/NiParticle/NiPSSimulatorForcesStep.htm">NiPSSimulatorForcesStep</a></span></td>
<td>
Applies forces to particles.</td></tr>

<tr>
<td>
<span class="NDLSystemFont"><a href="../../Reference/NiParticle/NiPSSimulatorCollidersStep.htm">NiPSSimulatorCollidersStep</a></span></td>
<td>
Simulates collisions between particles and various collider 
 objects.</td></tr>

<tr>
<td>
<span class="NDLSystemFont"><a href="../../Reference/NiParticle/NiPSSimulatorFinalStep.htm">NiPSSimulatorFinalStep</a></span></td>
<td>
Updates positions and ages for particles, killing off 
 old particles. This step must occur last in the simulator.</td></tr><tr><td><span class="NDLSystemFont"><a href="../../Reference/NiParticle/NiPSSimulatorMeshAlignStep.htm">NiPSSimulatorMeshAlignStep</a></span></td><td>Updates
sizes, and rotations for mesh particles. This step should be attached
last in the NiPSSimulator mesh modifier for mesh particles. It may only
be attached to a NiPSMeshParticleSystem.</td></tr>

    </tbody>
</table>



<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
