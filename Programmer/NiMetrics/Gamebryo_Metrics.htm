<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Gamebryo Metrics</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>

<!--(Begin Body)================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<h1>Gamebryo Metrics</h1>

<p>The following is a mapping between the metric names of the default instrumented Gamebryo metrics
and their semantic meanings. All metrics are prefixed by "gb$(PlatformName)$(ConfigName)".
<span class="NDLSystemFont">PlatformName</span> uniquely identifies the compiler and platform, such
as "Win32VC80", "Win32VC90", "Xenon", or "PS3". <span class="NDLSystemFont">ConfigName</span> is
Debug, Release, or Shipping.</p>

<h2>NiMain Metrics</h2>

<!--(Table)=====================================================================================-->
<table>
    <thead>
        <tr>
            <th>Metric Name</th>

            <th>Meaning</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>main.NumUpdates</td>

            <td>Number of calls to UpdateDownwardPass in <span class=
            "NDLSystemFont">NiAVObject</span> and derived classes</td>
        </tr>
    </tbody>
</table>

<h2>NiAnimation Metrics</h2>

<!--(Table)=====================================================================================-->
<table>
    <thead>
        <tr>
            <th>Metric Name</th>

            <th>Meaning</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>anim.ActorManagerUpdate</td>

            <td>Time in seconds for each <span class="NDLSystemFont">NiActorManager::Update</span>
            call</td>
        </tr>

        <tr>
            <td>anim.MorphTime</td>

            <td>Time in seconds for each <span class=
            "NDLSystemFont">NiGeomMorpherController::OnPreDisplay</span> call</td>
        </tr>

        <tr>
            <td>anim.UpdatedSequences</td>

            <td>Sequences updated in each <span class=
            "NDLSystemFont">NiControllerManager::Update</span> call</td>
        </tr>

        <tr>
            <td>anim.ControllerManagerUpdate</td>

            <td>Time in seconds for each <span class=
            "NDLSystemFont">NiControllerManager::Update</span> call</td>
        </tr>
    </tbody>
</table>

<h2>NiCollision Metrics</h2>

<!--(Table)=====================================================================================-->
<table>
    <thead>
        <tr>
            <th>Metric Name</th>

            <th>Meaning</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>collision.TestTime</td>

            <td>Time in seconds per <span class=
            "NDLSystemFont">NiCollisionGroup::TestCollisions</span> call</td>
        </tr>

        <tr>
            <td>collision.TestCompares</td>

            <td>Number of object-object compares per <span class=
            "NDLSystemFont">NiCollisionGroup::TestCollisions</span> call</td>
        </tr>

        <tr>
            <td>collision.test.*</td>

            <td>Comparisons by type in <span class="NDLSystemFont">TestHandleCollisions</span></td>
        </tr>

        <tr>
            <td>collision.FindTime</td>

            <td>Time in seconds per <span class=
            "NDLSystemFont">NiCollisionGroup::FindCollisions</span> call</td>
        </tr>

        <tr>
            <td>collision.FindCompares</td>

            <td>Number of object-object compares per <span class=
            "NDLSystemFont">NiCollisionGroup::FindCollisions</span> call</td>
        </tr>

        <tr>
            <td>collision.find.*</td>

            <td>Comparisons by type in <span class="NDLSystemFont">HandleCollisions</span></td>
        </tr>

        <tr>
            <td>collision.PickTime</td>

            <td>Time in seconds per <span class="NDLSystemFont">NiPick::PickObjects</span>
            call</td>
        </tr>

        <tr>
            <td>collision.PickResults</td>

            <td>Number of pick results found (before potentially finding only the closest)</td>
        </tr>

        <tr>
            <td>collision.PickNodeComparisons</td>

            <td>Number of nodes tested per <span class="NDLSystemFont">NiPick::PickObjects</span>
            call</td>
        </tr>

        <tr>
            <td>collision.PickTriComparisons</td>

            <td>Number of triangles tested per <span class=
            "NDLSystemFont">NiPick::PickObjects</span> call</td>
        </tr>
    </tbody>
</table>

<h2>NiParticle Metrics</h2>

<!--(Table)=====================================================================================-->
<table>
    <thead>
        <tr>
            <th>Metric Name</th>

            <th>Meaning</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>particle.UpdatedParticles</td>

            <td>Number of particles updated in <span class=
            "NDLSystemFont">NiPSParticleSystem::Update</span></td>
        </tr>

        <tr>
            <td>particle.UpdatedModifiers</td>

            <td>Number of particles updated in <span class=
            "NDLSystemFont">NiPSysModifier::Update</span></td>
        </tr>

        <tr>
            <td>particle.ParticlesSpawned</td>

            <td>Number of particles spawned in <span class=
            "NDLSystemFont">NiPSParticleSystem::Update</span></td>
        </tr>

        <tr>
            <td>particle.ParticlesDestroyed</td>

            <td>Number of particles destroyed in <span class=
            "NDLSystemFont">NiPSParticleSystem::Update</span></td>
        </tr>

        <tr>
            <td>particle.PSysUpdateTime</td>

            <td>Time in seconds for each <span class=
            "NDLSystemFont">NiPSParticleSystem::Do_UpdateSystem</span> call</td>
        </tr>
    </tbody>
</table>

<h2>NiPortal Metrics</h2>

<!--(Table)=====================================================================================-->
<table>
    <thead>
        <tr>
            <th>Metric Name</th>

            <th>Meaning</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>portal.RoomGroupOnVisibleTime</td>

            <td>Time in seconds for each <span class="NDLSystemFont">RoomGroup::OnVisible</span>
            call</td>
        </tr>

        <tr>
            <td>portal.FixtureCullerTime</td>

            <td>Time in seconds for each <span class="NDLSystemFont">FixtureCuller::Process</span>
            call</td>
        </tr>
    </tbody>
</table>

<h2>NiAudio Metrics</h2>

<!--(Table)=====================================================================================-->
<table>
    <thead>
        <tr>
            <th>Metric Name</th>

            <th>Meaning</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>audio.LoadedSources</td>

            <td>Total sources loaded (polled once per <span class=
            "NDLSystemFont">NiAudioSystem::Update</span> call)</td>
        </tr>

        <tr>
            <td>audio.PlayedLoops</td>

            <td>Number of loops played per <span class="NDLSystemFont">Play</span> call</td>
        </tr>
    </tbody>
</table>

<h2>NiDX9Renderer Metrics</h2>

<!--(Table)=====================================================================================-->
<table>
    <thead>
        <tr>
            <th>Metric Name</th>

            <th>Meaning</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>dx9.DrawnSubmeshCount</td>

            <td>Number of submeshes of <span class="NDLSystemFont">NiMesh</span> objects drawn per
            frame. This number is equivalent to the number of calls to <span class=
            "NDLSystemFont">DrawPrimitive</span> or <span class=
            "NDLSystemFont">DrawIndexedPrimitive</span> made to the D3D device each frame.</td>
        </tr>

        <tr>
            <td>dx9.DrawnPrimitives</td>

            <td>Number of primitives, triangles, lines, points, or quads, drawn each frame.</td>
        </tr>

        <tr>
            <td>dx9.DrawnVerts</td>

            <td>Number of vertices drawn per frame</td>
        </tr>

        <tr>
            <td>dx9.drawtime.Mesh</td>

            <td>Total <span class="NDLSystemFont">Do_RenderMesh</span> time in seconds per
            frame</td>
        </tr>

        <tr>
            <td>dx9.RenderStateChanges</td>

            <td>Number of <span class="NDLSystemFont">SetRenderState</span> calls per frame</td>
        </tr>

        <tr>
            <td>dx9.RenderTargetChanges</td>

            <td>Number of <span class="NDLSystemFont">SetRenderTarget</span> calls per frame</td>
        </tr>

        <tr>
            <td>dx9.TextureChanges</td>

            <td>Number of <span class="NDLSystemFont">SetTexture</span> calls per frame</td>
        </tr>

        <tr>
            <td>dx9.VertexBufferChanges</td>

            <td>Number of <span class="NDLSystemFont">SetStreamSource</span> calls per frame</td>
        </tr>

        <tr>
            <td>dx9.PixelShaderChanges</td>

            <td>Number of <span class="NDLSystemFont">SetPixelShader</span> calls per frame</td>
        </tr>

        <tr>
            <td>dx9.VertexShaderChanges</td>

            <td>Number of <span class="NDLSystemFont">SetVertexShader</span> calls per frame</td>
        </tr>

        <tr>
            <td>dx9.VertexBufferUsage</td>

            <td>Current vertex buffer usage in bytes, polled once per frame</td>
        </tr>

        <tr>
            <td>dx9.IndexBufferUsage</td>

            <td>Current index buffer usage in bytes, polled once per frame</td>
        </tr>
    </tbody>
</table>

<h2>NiApplication Metrics</h2>

<p>These values are all updated once per frame during the <span class=
"NDLSystemFont">NiApplication::UpdateMetrics</span> function. The memory related metrics are only
available in <a href=
"../../Programmer/General_Topics/Custom_Allocation.htm#MemoryTrackingAndDebugging">memory
tracking</a> builds.</p>

<!--(Table)=====================================================================================-->
<table>
    <thead>
        <tr>
            <th>Metric Name</th>

            <th>Meaning</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>app.FPS</td>

            <td>Frames per second</td>
        </tr>

        <tr>
            <td>app.frametime.CullTime</td>

            <td>Time in seconds for <span class=
            "NDLSystemFont">NiApplication::CullFrame</span>.</td>
        </tr>

        <tr>
            <td>app.frametime.UpdateTime</td>

            <td>Time in seconds for <span class=
            "NDLSystemFont">NiApplication::UpdateFrame</span>.</td>
        </tr>

        <tr>
            <td>app.frametime.RenderTime</td>

            <td>Time in seconds for <span class=
            "NDLSystemFont">NiApplication::RenderFrame</span>.</td>
        </tr>

        <tr>
            <td>app.CreateSceneTime</td>

            <td>Time in seconds for the <span class="NDLSystemFont">CreateScene</span>
            function.</td>
        </tr>

        <tr>
            <td>app.Initialized</td>

            <td>Event thrown once the application has initialized.</td>
        </tr>

        <tr>
            <td>memory.ActiveMemory</td>

            <td>Current amount of memory allocated in bytes</td>
        </tr>

        <tr>
            <td>memory.AccumulatedMemory</td>

            <td>Accumulated amount of memory in bytes used by the application</td>
        </tr>

        <tr>
            <td>memory.ActiveAllocations</td>

            <td>Current number of allocations that are active</td>
        </tr>

        <tr>
            <td>memory.AccumulatedAllocations</td>

            <td>Accumulated number of allocations made by the application.</td>
        </tr>

        <tr>
            <td>memory.ActiveTrackerOverhead</td>

            <td>Current memory in bytes used by the memory tracking system</td>
        </tr>

        <tr>
            <td>memory.AccumulatedTrackerOverhead</td>

            <td>Total amount of memory in bytes used by the memory tracking system</td>
        </tr>

        <tr>
            <td>memory.UnusedButAllocatedMemory</td>

            <td>Total amount of memory in bytes that has been allocated but is still filled with
            sentinel bytes when deallocated.</td>
        </tr>
    </tbody>
</table>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
