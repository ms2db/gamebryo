<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Introduction to Projected Multitexturing</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type=
"text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Introduction to Projected Multitexturing</h1>

<p>Projected multitextures are roughly analogous to lights&mdash;in fact, both
<span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiLight.htm">NiLight</a></span> and <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMain/NiTextureEffect.htm">NiTextureEffect</a></span> (the
class used to implement projected texturing), are inherited from the same base
class, <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiDynamicEffect.htm">NiDynamicEffect</a></span>. As a
result, applications familiar with lights should have little trouble adding
projected multitextures to their scenes. The same system for attaching affected
nodes is used for lights and projected textures.</p>

<p>Unlike static textures, projected multitextures do not take their texture
coordinates directly from the objects to which they are applied. Projected
multitextures work by computing their texture coordinates on the fly by
transforming and/or projecting either the object's vertex positions or surface
normal vectors. As a result, projected multitextures can be more expensive than
static multitextures, but the effects tend to be more dramatic.</p>

<p>Like static multitextures, there are several basic types of projected
multitexture, and each projected multitexture has settings that control its
coordinate clamping and texture filtering. Also, there are settings that
determine how the texture coordinates are generated. The Gamebryo interfaces
place no limits on the number of projected multitextures that may be applied to
an object, although performance issues or renderer limitations may place
significant limitations on the number of simultaneous multitextures on an
object.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
