<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Applications of NiSourceTexture Objects</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Applications of NiSourceTexture Objects</h1>

<p>In almost all Gamebryo applications, <span class=
"NDLSystemFont">&gt;<a href=
"../../Reference/NiMain/NiSourceTexture.htm">NiSourceTexture</a></span>
objects will be by far the most common (and in most applications
the only) type of <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiTexture.htm">NiTexture</a></span>s that
are used with <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiTexturingProperty.htm">NiTexturingProperty</a></span>
Maps. <span class="NDLSystemFont">NiSourceTexture</span> objects
represent texture image data from one of two sources; image files
or in-memory pixel data.</p>

<p>When created from a filename, an <span class=
"NDLSystemFont">NiSourceTexture</span> represents the image data
that is in that file. The filename may refer to either a standard
image file format, such as BMP, SGI RGB or TGA (depending on the
image converter object &mdash; see the image converter
documentation in the <span class=
"NDLSystemFont">&gt;NiMain</span> reference for details), or a
Gamebryo NIF image file. In the case of a NIF image file, the
file may include mipmap levels, preformatted pixel data for a
given console, or even compressed image data. Generally,
applications will create these <span class=
"NDLSystemFont">NiSourceTextures</span> to texture geometry with
images painted by an artist.</p>

<p>When created from an <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiPixelData.htm">NiPixelData</a></span>
object, the <span class=
"NDLSystemFont">&gt;NiSourceTexture</span> represents that
system-memory block of pixels. The <span class=
"NDLSystemFont">NiPixelData</span> object is a class that
represents per-pixel image data that is not necessarily
associated with any texture or device. The <span class=
"NDLSystemFont">NiPixelData</span> object may be of any of a wide
range of pixel formats, but application writers should note that
the image converters cannot convert between general formats. As a
result, most applications using <span class=
"NDLSystemFont">&gt;NiPixelData</span> objects will create them
in one of the standard Gamebryo pixel formats (see the
<span class="NDLSystemFont">NiPixelFormat</span> documentation
for details). Generally, applications create <span class=
"NDLSystemFont">&gt;NiSourceTextures</span> from <span class=
"NDLSystemFont">NiPixelData</span> when they intend to modify the
pixel data on the fly (for procedural textures, for example).</p>

<p>As another alternative, platform-specific texture capabilities
enable platform-specific source texture renderer data to be
loaded directly into a renderer-specific resource at application
load time, with two very beneficial results:</p>

<ul>
    <li>Improvements in "high water mark" behavior for texture
    memory at load time. Specifically, temporary memory
    allocations for texture format conversion will not be
    required if a platform-specific export option is requested in
    the art pipeline.</li>

    <li>Load time performance improvements, since there are no
    texture format conversions <span style=
    "x-condition: Xenon;">(including texture tiling in the case
    of Xbox360)</span> at load time.</li>
</ul>

<p>These capabilities operate on the principle of streaming
persistent versions of source texture renderer data (<span class=
"NDLSystemFont"><a href=
"../../Reference/NiMain/NiPersistentSrcTextureRendererData.htm">NiPersistentSrcTextureRendererData</a></span>)
to support platform-specific texture format conversions for
"internal textures" (those included in a scene's NIF file) at
export time.</p>

<p>Assuming that the specific platform can support the pixel
format in question at application load time, the renderer will
load the persistent source texture renderer data directly into a
renderer-specific resource, bypassing the application-level
<span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiPixelData.htm">NiPixelData</a></span>
object and all <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiImageConverter.htm">NiImageConverter</a></span>-based
texture conversion at load time entirely.</p>

<table class="NDLNoteContainer" width="100%">
    <tr align="left">
        <td class="NDLNoteContainerTD">
            <p class="NDLHeadingNoteContainer">Note</p>

            <div class="NDLNote">
                Each time a platform SDK (for example, Xbox360
                XDK or Playstation3 SDK) changes, there is at
                least a possibility that the new SDK will cause
                textures to be formatted differently on that
                platform. It is not likely to happen frequently,
                but the possibility exists. In such a case, it
                may be desirable to re-export Nifs containing
                platform-specific textures using exporters built
                with that platform's most recent SDK version.
            </div>
        </td>
    </tr>
</table>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
