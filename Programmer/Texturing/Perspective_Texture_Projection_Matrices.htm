<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Perspective Texture Projection Matrices</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Perspective Texture Projection Matrices</h1>

<p>When using the mode <span class=
"NDLSystemFont">WORLD_PERSPECTIVE</span>, the output of the
texture coordinate transforms is a set of 3-vectors. Inside of
the rasterization hardware, the 2-vector texture coordinates are
generated by dividing each of the first two components by the
last component&mdash;in effect, a perspective division.</p>

<p>As a result, the texture transform matrix is a 3x3 matrix, and
the translation vector is a 3-vector. Setting up a perspective
texture transform is very similar to setting up a camera's
projection matrix. The application sets a projection matrix,
assuming that the model space of the <span class=
"NDLSystemFont">NiTextureEffect</span> defines the "view space"
for the effect. One can set up a projection that roughly matches
Gamebryo's camera transform, where the model-space X is the view
direction, model-space Y is the up direction, and model-space Z
is the right direction. Having done this, the effect may be moved
and oriented using the local transforms of the <span class=
"NDLSystemFont">NiTextureEffect</span>, in a manner analogous to
how applications move and orient an <span class=
"NDLSystemFont">NiCamera</span>. As an example, the following is
a texture projection matrix that projects a texture into a scene,
with the following configuration:</p>

<ul>
    <li>The <span class="NDLSystemFont">NiTextureEffect</span>'s
    model-space origin is the center of projection.</li>

    <li>The model-space X direction is the direction of
    projection.</li>

    <li>The model-space Y direction is the "up" vector.</li>

    <li>Theta is the half-angle of the field of view.</li>

    <li>The center of projection is the model-space origin.</li>
</ul>

<div class="NDLFigureContainer">
    <img src="images/image008.gif" width="225" height="165" alt="image008 (1K)" /> 
    <!-- <p class="NDLFigureCaption">{Figure caption}</p> -->
</div>

<p>A few notes on this projection:</p>

<ul>
    <li>The <span class="NDLSystemFont">0.5/tan</span> (theta)
    scalars in the first and second rows scale the field of view
    to the desired angle.</li>

    <li>The <span class="NDLSystemFont">0.5</span> scalars in the
    first and second rows are shear values in the U and V
    directions are to map the projection frustum from the range
    <span class="NDLSystemFont">[-0.5,0.5]</span> to the range
    <span class="NDLSystemFont">[0.0,1.0]</span>, which is the
    standard range for texture mapping.</li>

    <li>The <span class="NDLSystemFont">1.0</span> in the third
    row is the projective division by depth.</li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
