<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Using NiTexture Objects for Texturing</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Using NiTexture Objects for Texturing</h1>

<p>Unlike the operations of creation and modification, an
application may use instances of any of the subclasses of
<span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiTexture.htm">NiTexture</a></span>
without having to know the exact type of the object (with one
exception&mdash;see below). Functions and objects that use
<span class="NDLSystemFont">NiTexture</span>s generally require
only the <span class="NDLSystemFont">NiTexture</span> interface,
and not the interface of a subclass. As a result, the following
discussion of how to use an <span class=
"NDLSystemFont">NiTexture</span> is the same for all classes
derived from <span class="NDLSystemFont">NiTexture</span> .</p>

<p>In order to attach an <span class=
"NDLSystemFont">NiTexture</span> as any type of static
<span class="NDLSystemFont">Map</span>, whether it is a Base Map,
Gloss Map, and so on, the application simply creates an
<span class="NDLSystemFont">NiTexturingProperty::Map</span>,
passing in the <span class="NDLSystemFont">NiTexture</span>
object as the first argument to the constructor of the
<span class="NDLSystemFont">Map</span>. The <span class=
"NDLSystemFont">Map</span> object may then be attached to the
desired Map slot using <span class=
"NDLSystemFont">NiTexturingProperty::Set*Map</span> (for example,
<span class=
"NDLSystemFont">NiTexturingProperty::SetBaseMap</span>). If the
<span class="NDLSystemFont">Map</span> object already exists,
then the function <span class=
"NDLSystemFont">NiTexturingProperty::Map::SetTexture</span> may
be used to attach a new texture image to the <span class=
"NDLSystemFont">Map</span>. This step is all that is necessary
for the object to use an <span class=
"NDLSystemFont">NiTexture</span> as any form of static
<span class="NDLSystemFont">Map</span>.</p>

<p>The process for attaching <span class=
"NDLSystemFont">NiTexture</span> objects to a projected texture
effect is even simpler. The application needs only to call
<span class=
"NDLSystemFont">NiTextureEffect::SetEffectTexture</span> with the
<span class="NDLSystemFont">NiTexture</span> object. The other
steps required to use texturing are all described above in the
introduction to the texturing system.</p>

<p>Note that when working with <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMain/NiRenderedTexture.htm">NiRenderedTexture</a></span>s,
it is necessary to avoid using an <span class=
"NDLSystemFont">NiRenderedTexture</span> as a texture in the
scene that it renders. In other words, the <span class=
"NDLSystemFont">NiRenderedTexture</span> should not "see itself",
as will result in undefined behavior. Some renderers render their
<span class="NDLSystemFont">NiRenderedTexture</span>s to the same
block of video memory from which they read it as a texture. As a
result, the appearance of the rendered texture in its own
rendered image may be incorrect.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
