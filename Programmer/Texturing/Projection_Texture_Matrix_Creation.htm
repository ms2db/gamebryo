<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Projection Texture Matrix Creation</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<h1>Projection Texture Matrix Creation</h1>

<p>An important concept that one must understand with respect
to <span class="NDLSystemFont"><a href="../../Reference/NiMain/NiTextureEffect.htm">NiTextureEffect</a></span>-based
projections is how the texture projection matrices are defined in an <span class="NDLSystemFont">NiTextureEffect</span>
object. As we would expect, the texture coordinate transform takes as its input
the world-space object vertices for each object and produces texture
coordinates as its output. The interface for setting the texture coordinate
transform in the <span class="NDLSystemFont">NiTextureEffect</span>
sets the transform matrix and translation in "model-space", however. The
question a first-time user may ask is "which model-space"? It would seem that
there are two choices&mdash;either the model space of each object whose texture
coordinates are being calculated, or the model space of the <span class="NDLSystemFont">NiTextureEffect</span>
itself.</p>

<p>The answer is the latter&mdash;the <span class="NDLSystemFont">NiTextureEffect</span> itself, with
very good reason. By specifying the transform in the model-space of the <span class="NDLSystemFont">NiTextureEffect</span>
object, the overall effect will move with the <span class="NDLSystemFont">NiTextureEffect</span> object. As a
result, a texturing effect may be attached to objects in the scene as a child,
or the transforms of the effect object may be changed and both will result in
sensible changes to the effect. For example, an application can set up a
texture coordinate projection matrix and transform that cause a headlight image
to be projected down the model-space X-axis of the <span class="NDLSystemFont">NiTextureEffect</span> object,
centered at its origin. Having done this, the application may then attach this
object to a car model in the scene. As the car model moves, the headlight
effect will move with it without the application ever having to change the
projection matrix in the <span class="NDLSystemFont">NiTextureEffect</span> object again. In this way, an <span class="NDLSystemFont">NiTextureEffect</span>
is similar to an <span class="NDLSystemFont">NiCamera</span>.</p>

<p>Gamebryo takes care of the matrix manipulations that are
required to ensure that each object's vertices are transformed according to the
matrix specified in the <span class="NDLSystemFont">NiTextureEffect</span> object, even though the model
space of each projected object will probably differ from one another and from
the <span class="NDLSystemFont">NiTextureEffect</span>
object itself.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
