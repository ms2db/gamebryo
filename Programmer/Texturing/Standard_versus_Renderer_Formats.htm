<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>"Standard" versus Renderer Formats</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>


<h1>"Standard" versus Renderer Formats</h1>

<p>In Gamebryo, there are "standard" texture 
 pixel formats and renderer texture formats. As detailed previously, raw 
 pixel data of the <span class="NDLSystemFont"><a href="../../Reference/NiMain/NiSourceTexture.htm">NiSourceTexture</a></span> 
 class is maintained by the <span class="NDLSystemFont"><a 
 href="../../Reference/NiMain/NiPixelData.htm">NiPixelData</a></span> 
 class, which uses the <span class="NDLSystemFont"><a href="../../Reference/NiMain/NiPixelFormat.htm">NiPixelFormat</a></span> 
 class to specify individual pixel layout. The standard texture formats 
 are ones that can be used on most platforms either without any conversion, 
 or can be converted to a compatible format. These standard formats are 
 specified by <span class="NDLSystemFont">NiPixelFormat::PAL8</span> 
 and <span class="NDLSystemFont">NiPixelFormat::PALA8</span> 
 for palettized textures, <span class="NDLSystemFont">NiPixelFormat::RGB24</span> 
 and <span class="NDLSystemFont">NiPixelFormat::RGBA32</span> 
 for true color textures, and <span class="NDLSystemFont">NiPixelFormat::BUMP16</span> 
 and <span class="NDLSystemFont">NiPixelFormat::BUMPLUMA32</span> 
 for bump maps. High color (16 bit) RGB(A) formats vary widely from platform 
 to platform, and thus there is no standard Gamebryo 16-bit RGB(A) format.</p>

<p>Renderer specific formats include the high color layouts 
 as well as any other formats unique to specific platforms. As an example, 
 a console might support a 16-bit high color pixel layout with alpha that 
 uses 5 bits each of red, green and blue, with 1 bit of alpha. This format 
 and others are generated by the conversion process of the image converter 
 classes. The advantages of using renderer specific formats include, among 
 others:</p>

<ul>
	
	<li>Formatted data can 
 decrease image loading times as the renderer is not required to do any 
 preprocessing prior to image use.</li>
	
	<li>Renderer code size 
 is reduced through the elimination of conversion code.</li>
	
	<li>Unique image formats 
 can be supported more easily.</li>
</ul>

<h2>Fixed Format versus Variable Format Platforms</h2>

<p>The image formats that a fixed-format platform supports 
 are established and fixed by the hardware. This means the matching code 
 for finding compatible image formats can be straightforward and the <span class="NDLSystemFont"><a href="../../Reference/NiMain/NiImageConverter.htm">NiImageConverter</a></span> 
 classes can directly compare the format request options with the formats 
 that the hardware supports. This gives an application flexibility to export 
 preformatted data for particular hardware.</p>

<p>Conversely, renderers like the Win32 DirectX9 D3D renderer 
 are variable texture format platforms. Because DirectX can run on most 
 any compatible hardware card, it is not until the hardware device is opened 
 that the formats the renderer can support are determined. This makes exporting 
 specific formats for Direct3D a difficult and risky, if not impossible, 
 task.</p>

<h2>Compressed Formats</h2>

<p>Gamebryo supports the S3/DirectX DXT1, DXT3 and DXT5 
 compressed image formats (see the Microsoft DirectX SDK documentation 
 for details on the compression formats). These formats can be expanded 
 by the development image converter, which actually makes them useable 
 on most any platform. Platforms that can load the compressed data directly 
 will do so, while the other platforms will expand the data. The caveat 
 is that, on platforms that do not support compressed formats directly, 
 the decompression occurs in software on the CPU when the texture is loaded 
 to a renderer. Currently, the standard Gamebryo image converters cannot 
 compress data into these compressed formats.</p>

<p>Alternatively, applications may load compressed data 
 via the Microsoft DDS image format. See the reference documentation on 
 the <span class="NDLSystemFont"><a href="../../Reference/NiMain/NiDDSReader.htm">NiDDSImageReader</a></span> 
 class for details. NIF image files can also store compressed data.</p>

<h2>Bump Map Formats</h2>

<p>Gamebryo supports both Bump maps and BumpLuma maps. 
 These formats represent the bumpiness of surfaces as preprocessed gradient 
 maps. Bump maps may be used on hardware that supports them to displace 
 environment maps. On unsupported platforms, these will simply be ignored. 
 These gradient maps are not intuitive for artists to generate, so the 
 Gamebryo development image converter can create these maps from more intuitive 
 RGB(A) height-map images, where brighter shades of gray represent high 
 bumps, and dark shades of gray represent low areas on the surface. If 
 supplied, the alpha channel represents the glossiness of the surface at 
 that point.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
