<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Clipped Projected Textures</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<h1>Clipped Projected Textures</h1>

<p>Developers using
projected textures may discover an unexpected (and perhaps undesirable) side
effect: parallel and perspective projected texture projections are
bi-directional. That is, the textures are projected infinitely in both
directions. For example, a projected spotlight effect that is applied to an
entire room will produce a circle of light on two walls&mdash;the wall that is
directly in front of the projection, and the wall that is directly behind it.
This is because the mathematics of projection is bi-directional.</p>

<p>One may ask the
question, "if projection is bi-directional, then why don't we see objects that
are behind us in a camera projection? The reason that we do not see objects
behind us in a standard camera projection is near-plane clipping. Objects
behind the camera are clipped (or culled) away before projection.</p>

<p>A similar type of
effect can be used to make Gamebryo projected lights and projected shadows
"clip" away parts of the affected scene, so that they are not affected. We use
the term "clipping" in quotes because the effect is achieved through a clever
use of multitexture hardware, and does not actually require any polygons to be
clipped. This is good, as clipping of any kind can be an expensive operation.</p>

<p>The feature allows
applications to specify a plane in the model space of the <span class="NDLSystemFont"><a href="../../Reference/NiMain/NiTextureEffect.htm">NiTextureEffect</a></span>. Sections of
affected objects that are on the positive side of the plane will receive the
effect, while parts of objects on the negative side will not. This is a
per-pixel operation, not a per-polygon or per-object operation. If a single
polygon spans both the positive and negative side of the plane, the two parts
of the polygon will be affected differently.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
