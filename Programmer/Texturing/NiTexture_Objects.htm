<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiTexture Objects</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>NiTexture Objects</h1>

<p>Image data that is to be applied as a texture is, at the most
basic level, a rectangular two-dimensional array of colors or
colors with alpha values. In Gamebryo, this texturing image data
is represented by the abstract base class <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMain/NiTexture.htm">NiTexture</a></span>.
Currently, there are several concrete subclasses of <span class=
"NDLSystemFont">NiTexture</span> in Gamebryo:</p>

<ul>
    <li><span class="NDLSystemFont"><a href=
    "../../Reference/NiMain/NiSourceTexture.htm">NiSourceTexture</a></span></li>

    <li><span class="NDLSystemFont"><a href=
    "../../Reference/NiMain/NiDynamicTexture.htm">NiDynamicTexture</a></span></li>

    <li><span class="NDLSystemFont"><a href=
    "../../Reference/NiMain/NiRenderedTexture.htm">NiRenderedTexture</a></span></li>

    <li><span class="NDLSystemFont"><a href=
    "../../Reference/NiMain/NiSourceCubeMap.htm">NiSourceCubeMap</a></span></li>

    <li><span class="NDLSystemFont"><a href=
    "../../Reference/NiMain/NiRenderedCubeMap.htm">NiRenderedCubeMap</a></span></li>
</ul>

<p><span class="NDLSystemFont">NiSourceTexture</span> objects
represent texture images created from existing source data,
either as stored in a standard image file, or as stored in a
buffer of data in RAM (called <span class=
"NDLSystemFont"><a href="../../Reference/NiMain/NiPixelData.htm">NiPixelData</a></span>,
and described below). This is by far the more common form of
<span class="NDLSystemFont">NiTexture</span>. Most applications
will use <span class="NDLSystemFont">NiSourceTexture</span>
objects created from image files that an art staff has created
specifically for the objects to which the textures will be
applied.</p>

<p><span class="NDLSystemFont">NiRenderedTexture</span> objects
represent texture images created by rendering a scene. The
resulting rendered scene is not drawn directly to the screen, but
rather is used as a texture image in the rendering of another
scene. As a result, <span class=
"NDLSystemFont">NiRenderedTextures</span> are an inherently
dynamic form of projected texturing, allowing for very advanced
effects, such as reflections, projected shadows, and
closed-circuit television cameras.</p>

<p><span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiDynamicTexture.htm">NiDynamicTexture</a></span>
objects are designed as an optimal path for textures that are
modified each frame. Applications might use a dynamic texture as
the target for video decompression or a per-frame procedurally
generated texture.</p>

<p>As noted above, texture data is normally a rectangular,
two-dimensional array. However, texture data can also be a cube
map. Cube maps sample data using three-dimensional coordinates
that is usually dynamically generated from position and normal
data; for example, a reflection vector. Those coordinates are
treated as a vector cast from the center of a cube and the
selected pixel represents the intersection of that ray with the
faces of the cube. Gamebryo uses <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMain/NiSourceCubeMap.htm">NiSourceCubeMap</a></span>
and <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiRenderedCubeMap.htm">NiRenderedCubeMap</a></span>
objects to represent cube maps in the engine. These classes
behave similarly to their two-dimensional counterparts except for
the fact that they contain six faces internally.</p>

<p>Later sections in the documentation will detail the creation,
management, modification and destruction of each of these types
of <span class="NDLSystemFont">NiTexture</span>. However, in
terms of how the textures may be used in an <span class=
"NDLSystemFont">NiTexturingProperty::Map</span>, the two types of
<span class="NDLSystemFont">NiTexture</span> may be used
interchangeably wherever desired. As a result, the following
discussions of texturing and multitexturing will simply refer to
them as <span class="NDLSystemFont">NiTexture</span>s and use
them as a "black box" that represents texture image data of some
type.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
