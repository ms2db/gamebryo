<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Simulating Camera-Space with World-Space Sphere Mapping</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type=
"text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Simulating Camera-Space with World-Space Sphere Mapping</h1>

<p>Even if world-space sphere mapping is enabled for a renderer, camera-space
mapping can be achieved quite simply (this allows the two methods to be
interspersed throughout the scene graph). As a matter of fact, camera-space
mapping is a subset of world-space mapping. There are two ways of creating a
camera-space mapping using world-space mapping in Gamebryo:</p>

<p>Use the camera's parent node (or any ancestor) exclusively for moving and
rotating the camera, leaving the camera's local transforms as the identity
throughout the application. Then, attach the desired <span class=
"NDLSystemFont">NiTextureEffect</span> as a sibling node of the camera. It will
automatically track with the camera, as both will use the same projection
spaces (dir=X, up=Y, right=Z).</p>

<p>Leave the <span class="NDLSystemFont">NiTextureEffect</span> without a
parent (i.e. its local transforms = its world transforms), and copy the world
rotate matrix from the camera into the local rotate matrix of the <span class=
"NDLSystemFont">NiTextureEffect</span> whenever the camera moves (calling
<span class="NDLSystemFont">Update</span> on the <span class=
"NDLSystemFont">NiTextureEffect</span> after each change).</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
