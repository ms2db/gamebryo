<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Creating NiDynamicTexture Objects</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type=
"text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Creating NiDynamicTexture Objects</h1>

<p><span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiDynamicTexture.htm">NiDynamicTexture</a></span>
objects are much simpler to create than <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiSourceTexture.htm">NiSourceTexture</a></span>
objects, since there are fewer options. <span class=
"NDLSystemFont">NiDynamicTexture</span> objects simply represent a
renderer-specific (actually, device-specific) texture for a renderer. As a
result, to create an <span class="NDLSystemFont">NiDynamicTexture</span>
object, the application simply calls <span class=
"NDLSystemFont">NiDynamicTexture::Create</span> with the height and width of
the texture, and optional preferences that describe the desired format of the
texture. The renderer is obtained from static renderer accessor methods in the
base class.</p>

<p>Note that there are occasions where a renderer will not be able to create an
<span class="NDLSystemFont">NiDynamicTexture</span> for some reason, such as
such not being able to match the requested texture dimensions or pixel format,
running out of texture memory, or some other reason. As a result, applications
must be prepared to handle the failure of the <span class=
"NDLSystemFont">Create</span> call. See the desired renderer manual for details
of whether dynamic textures are always supported, conditionally supported, or
never supported, and what conditions can cause the creation to fail.</p>

<p>Unlike <span class="NDLSystemFont">NiSourceTexture</span>s,"preloading" has
no meaning in this context, as creating a dynamic texture from a renderer
always attempts to create the texture in device memory immediately. Note that
dynamic textures generally reserve enough video memory to hold their image data
when they are created and do not release this video memory until they are
destroyed. They cannot be managed, as can <span class=
"NDLSystemFont">NiSourceTexture</span>s.</p>

<p>Currently, mipmapping is not supported with <span class=
"NDLSystemFont">NiDynamicTexture</span>s in Gamebryo.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
