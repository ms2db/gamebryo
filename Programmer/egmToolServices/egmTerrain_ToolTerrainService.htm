<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>ToolTerrainService</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Fresnel" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>

<!--(Begin Body)================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

  <h1>
    ToolTerrainService</h1>
  <p>
    The ToolTerrainService class is an extension of the TerrainService, its main purpose
    is to provide further functional support for tool applications such as Toolbench
    when editing terrain assets.
  </p>
  <p>
    On top of the functionality provided by the TerrainService, this service implements
    the following sets of functionality:
  </p>
  <ul>
    <li>Ability to save terrain assets </li>
    <li>Ability to save material package assets </li>
    <li>Painting and deformation support for terrain assets </li>
  </ul>
  <p>
    Note that whilst the ToolTerrainService does not explicitly support the simulation
    of PhysX on terrain objects, this service does provide the ability to save PhysX
    data with terrains that have been modeled with the PhysXTerrain model.
  </p>
  <p>
    This service is recommended for applications that require advanced terrain support,
    including the ability to paint and deform terrain and save the assets to disk (external
    tool applications such as Toolbench).
  </p>
  <h3>
    Dependencies
  </h3>
  <p>
    The use of ToolTerrainService requires the following prerequisites to be met:
  </p>
  <ul>
    <li>All prerequisites specified by the TerrainService </li>
    <li>GizmoService must also be available via the service manager. </li>
  </ul>
  <h2>
    Saving Terrain Data
  </h2>
  <p>
    In order to save the currently loaded terrain data to disk, the following two functions
    are provided:
  </p>
  <pre>
efd::Bool ToolTerrainService::SaveTerrain(egf::Entity* pEntity, 
            const efd::utf8string&amp; terrainPath);
efd::Bool ToolTerrainService::SaveMaterialPackage(const efd::utf8string&amp; packageName);
</pre>
  <p>
    These functions allow the user to save a specific terrain's data to a supplied archive
    path, and the configuration of a particular material package to disk. It is worth
    noting that the file location of material packages are stored upon the actual package
    objects and this is used to save and load them from disk.
  </p>
  <p>
    Please consult the class reference for further information on these functions, and
    the documentation on the storage of terrain data in the NiTerrain library for more
    information on how and what data is stored on disk.
  </p>
  <h3>
    Saving Terrain PhysX Data
  </h3>
  <p>In order to save the PhysX data into a terrain's sector file, a new custom data
  policy has been added to the <span class="NDLSystemFont">
    <a href="../../Reference/egmToolServices/Introduction_to_egmToolServices_Class_Reference.htm">egmToolService</a></span> project.</p>
  <p>
    The TerrainPhysXSaveDataPolicy only handles saving of the custom data. Every time
    a PhysXTerrain model is saved, the ToolTerrainService will set the terrain's custom
    data policy to an instance of the TerrainPhysXSaveDataPolicy.
  </p>
  <p>
    When saving each sector, the PhysX data will be built and written to the associated
    file.
  </p>
  <p>
    This is an automatic process that will happen every time the terrain being saved
    contains a PhysXTerrain model when using the ToolTerrainService.
  </p>
  <h2>
    Painting and Deformation
  </h2>
  <p>
    The ToolTerrainService provides basic functionality to help in the process of painting
    upon a terrain, including the ability to create and save material packages. This
    functionality is documentated in the ToolTerrainService class reference. When painting
    upon a terrain entity, the developer is expected to retrieve the corresponding 
    <span class="NDLSystemFont">
    <a href="../../Reference/NiTerrain/Introduction_to_NiTerrain_Class_Reference.htm">NiTerrain</a></span>
    object from the ToolTerrainService, and paint upon the terrain as described in the
    <span class="NDLSystemFont">NiTerrain</span> library.
  </p>
  
</body>
</html>
