<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>How the Scheduler works</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<h1>How the Scheduler works</h1>

<p>The Scheduler is implemented as a&nbsp;System Service and is
responsible for the game simulation, for queueing and executing all Entity Behavior 
    requests.&nbsp; Since the&nbsp;Scheduler is a System Service, it
gets ticked once per framework tick. During this processing, it determines which Entities 
    are ready to run a Behavior (types of Entities that are Executed
    and Owned). The simulation will then call the behavior system once for each pending Entity behavior. </p>
    <p>A related service is the <span class="NDLSystemFont">efd::EntityManager</span> 
        which is responsible for managing all of the "owned" entities for the local
simulation. Each entity in the system is owned by one and only one
        EntityManager at a time.</p>
<p>In addition to controlling the invocation of entity behaviors, the
Scheduler allows entities to subscribe to events from particular
categories. This is the primary means of interest management among
groups of entities. The schduler consumes MessageService messages of type kMSGID_Event and
kMSGID_EventCancel&nbsp;on behalf of a given entity, for example to receive remotely 
    requested Behavior invocation requests.&nbsp; The category
that is used can be either the entity's ID (for point to point requests) or an event channel about which 
    one or more entities are interested. You
may also request return messages of type kMSGID_EventReturn, if the
entity behavior supports returning an event. &nbsp;For more
information, see <a href="../../Reference/egf/egf__Scheduler.htm"><span class="NDLSystemFont">egf::Scheduler::SubscribeEntity</span></a>.</p>
<p>Another aspect of the Scheduler is that it is extensible with any
scripting language through its ability to register a scripting runtime helper class.
Adding new scripting languages is accomplished by implementing subclasses
of the <a class="NDLSystemFont" href="../../Reference/egf/egf__ISchedulerScripting.htm">egf::ISchedulerScripting</a>
interface. Within this subclass, you need to implement methods for
initializing and shutting down the scripting engine, as well as a
simple method that is used to invoke a specific function implemented by
the end user as a behavior. &nbsp;For more information, see <a href="../../Reference/egf/egf__Scheduler.htm"><span class="NDLSystemFont">egf::Scheduler::RegisterScriptingRuntime</span></a>.</p>
<p>Since the Scheduler controls the progression of simulation game
time, you can pause and resume the simulation progress by changing the Scheduler's state. This does not affect the application's
ability to continue execution. It just effects the dispatching of
entity behaviors such that the game simulation ceases to progress while
the application's system services all continue to run normally. In
other words, System Services (including the Scheduler) continue to be ticked, while Entities are
not. For more information, see&nbsp;<a href="../../Reference/egf/egf__Scheduler.htm"><span class="NDLSystemFont">egf::Scheduler::PauseScheduler</span></a>.</p>
    <p>Other types of schedulers (for turn-based games, for example) can be added or 
        replace the provided implementation.</p>
<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
<li><a href="scheduler_overview.htm">Scheduler overview</a></li>


<li><a href="scheduler_tuning.htm">Tuning Scheduler performance</a></li>
<li><a href="scheduler_using.htm">Using the Scheduler</a></li>
<li><a href="scheduler_debugging.htm">Debugging the Scheduler</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>