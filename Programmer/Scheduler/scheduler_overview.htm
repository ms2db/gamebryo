<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Scheduler overview</title>

<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Scheduler overview</h1>

<p>The Scheduler listens for Behavior invocation requests
(events) from the Message system and queues them. It then decides
when to run which behaviors. Each behavior can be in different
languages depending on which modules the Scheduler has loaded. If
a behavior is queued in a language that the Scheduler does not
have a module loaded for, then it will not run and an error will
be logged. The different languages have different features
supported. For example, Lua has coroutines and thus supports
sleeping within a behavior. C/C++ behaviors do not support
sleeping and must run to completion using only Immediate type
Behaviors; but since they compile to native code, they run
faster. Lua behaviors also support being modified at runtime
while C/C++ behaviors require a re-compile and application
restart.</p>

<p>Other than having the appropriate Scheduler language module
loaded, the Scheduler does not care what language is used to
implement a particular behavior. An entity might have several
C/C++ behaviors and several Lua behaviors and they can be queued
on the entity in any order in the Scheduler.</p>

<p>The Scheduler imposes a limit on the number of concurrent
behaviors that can run on an entity. If an entity already has the
maximum number of behaviors running, then any additional
behaviors queued will not run until one of the currently running
behaviors completes. A current limitation is that this limit can
affect the number of nested Behavior calls that use SendAndWait
if Entities are calling one another.</p>

<p>The Scheduler has a concept of time (simulation game time)
that is deliberately different than real time. This allows the
Scheduler to be paused and resume as if no time had passed.
Behaviors queued to happen at some future time will only be
scheduled to run once the appropriate amount of simulation time
has passed, which could be an arbitrary amount of real time. The
Scheduler can be queried to get the current simulation time.</p>

<p>The provided Scheduler moves game time forward at the same
rate as real time, and time units are in floating point seconds. 
However, the Scheduler is designed to be specialized for
different games. If your game is turn-based, for example, the
scheduler can be replaced or modified without affecting the rest
of the system.</p>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
    <li><a href="scheduler_how_work.htm">How the Scheduler
    works</a></li>

    <li><a href="scheduler_tuning.htm">Tuning Scheduler
    performance</a></li>

    <li><a href="scheduler_using.htm">Using the
    Scheduler</a></li>

    <li><a href="scheduler_debugging.htm">Debugging the
    Scheduler</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>