<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Scheduler: Introduction</title>
	
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<h1>Scheduler: Introduction</h1>

<p>The Scheduler is the system that allows entities to run behaviors.
Entities interact with each other by sending
events that the Scheduler handles. An event is managed by the entity
Scheduler using game-time. The pending event list is inspected, and any
entity that is ready to run will have a behavior started.</p>
<p>The Scheduler also manages behavior execution that is suspended from
a previous tick.
The system supports Event-Based processing, where each event completes
in one tick. The behaviors must be implemented to take care of an
entity's state transitions using variables stored in properties.
</p>
<p>Using coroutines from a scripting language's virtual machine, the
system supports process-oriented computation, which
allows a behavior to block, save an execution context, and continue
later at that point. For example, a character can
wait 3 seconds to recover from an attack, then continue with the rest
of the Event.</p>
<p>The Scheduler is independent of the entity and behavior system. This
allows the Studio to implement other scheduling paradigms. The default
scheduler is real-time event oriented, thus allowing for scheduling of
future events. Other classes of scheduler could be created for turn
based games or time stepped simulations, for example.
</p>
<table>
  <thead> <tr>
    <th>For more information about... </th>
    <th>See... </th>
  </tr>
  </thead> <tbody>
    <tr>
      <td>A brief introduction to the Scheduler </td>
      <td><a href="scheduler_overview.htm">Scheduler overview</a> </td>
    </tr>
    <tr>
      <td>Some implementation details of interest about the Scheduler </td>
      <td><a href="scheduler_how_work.htm">How the Scheduler works</a> </td>
    </tr>
    
    
    <tr>
      <td>Including the feature in your application </td>
      <td><a href="scheduler_using.htm">Using the Scheduler</a> </td>
    </tr>
    <tr>
      <td>Common problems and their solutions </td>
      <td><a href="scheduler_debugging.htm">Debugging the Scheduler</a>
      </td>
    </tr>
    <tr>
      <td>How to improve performance </td>
      <td><a href="scheduler_tuning.htm">Tuning Scheduler performance</a>
      </td>
    </tr>
  </tbody>
</table>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>