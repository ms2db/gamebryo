<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>PhysX system services overview</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Build" content="PhysX" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<h1>PhysX system services overview</h1>

<p>The PhysX system services handle all interactions between the PhysX SDK and the Emergent Game
Framework.</p>
    <p>efdPhysX::PhysXSDKManager is a singleton that encapsulates the PhysX SDK. It has 
        a number of helper classes that allow PhysX to use the Gamebryo memory manager, 
        bridge between the two type systems, and expose PhysX messages to Gamebryo&#39;s 
        logging system.</p>
    <p>To support server-side physics, or for other contexts where you don&#39;t want to use 
        the Core Runtime services, the
        <a href="physx_system_service_using_without_core.htm">egfPhysX services</a> let 
        entity-based games interact with PhysX scenes and shapes to set up a trigger 
        system.</p>
    <p>The <a href="physx_system_service_using_core.htm">ecrPhysX services</a> are built 
        on top of the Core Runtime (and egfPhysX) to enable data-driven NiPhysXScene and 
        NiPhysXProp objects. This gives your game access to the full range of Gamebryo&#39;s 
        support for PhysX actors, fluids, and cloth.</p>
    <p>Once you&#39;ve chosen which services are needed in your application, you will want 
        to <a href="physx_system_service_setup.htm">set them up in code</a>. You can 
        then control them via the <a href="physx_system_service_using_entity_model.htm">
        PhysX entity models</a> in Toolbench and World Builder, or by
        <a href="physx_system_service_using_builtins_script.htm">calling built-in 
        functions in script</a>.</p>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
<li><a href="physx_system_service_using_without_core.htm">Using  PhysX service without Gamebryo Core Runtime</a></li>
<li><a href="physx_system_service_using_core.htm">Using PhysX services with Gamebryo Core Runtime</a></li>
<li><a href="physx_system_service_setup.htm">Setting up PhysX system services</a></li>
<li><a href="physx_system_service_using_entity_model.htm">Using PhysX entity models</a></li>
<li><a href="physx_system_service_using_builtins_script.htm">Using PhysX built-ins in script</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
