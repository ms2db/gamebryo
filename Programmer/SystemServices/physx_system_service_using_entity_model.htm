<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Using PhysX entity models</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Build" content="PhysX" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<h1>Using PhysX entity models</h1>

<p>The PhysXModelLibrary contains a set of models that are used by the PhysX system 
    services and can be mixed in with your application&#39;s model to allow data-driven 
    control of PhysX simulation.</p>
    <p>The Scene Service and Prop Service share the PhysXScene model, which configures 
        scenes (either NxScene or NiPhysXScene objects). Most game levels will have a 
        single PhysXScene. Every concrete model allows you to specify a SceneName, and 
        the entity&#39;s PhysX representation will be instantiated in the named PhysX scene. 
        A scene exposes several lifecycle-related behaviors, allowing you to script 
        actions when the scene is created, when its assets are loaded, when all assets 
        in a scene have been created, and when it is destroyed.</p>
    <ul>
        <li>Note that a PhysXScene does not start simulating when it is added to the world, 
            since not all of its props may be ready. Simulation can be started by a script 
            calling bapiPhysXBase.StartSimulation(). If the PhysXScene.ActivateOnSetFinished 
            property is true, simulation will be started when the entire block file 
            containing the PhysXScene is loaded - or, if it is being added programmatically, 
            immediately.</li>
    </ul>
    <p>The Prop Service also reads the PhysXProp model, which is intended to be mixed in 
        (typically along with Mesh from the Gamebryo Standard Library) to any physical 
        entity in your world. Props can trigger scripts whenever they are attached to or 
        detached from a scene (created or destroyed).</p>
    <ul>
        <li>The PhysX objects contained in the prop will be added to their scene on a 
            subsequent tick of the PropService. They can not be added immediately, since 
            assets may need to be loaded from disk, or (depending on System Service ordering 
            and PhysX framework parameters) the PhysX scene may be mid-simulation in another 
            thread when a behavior executes. This means that you cannot write sequential 
            code that creates a PhysX object through the PropService and immediately modify 
            that object. Instead, you should define an AttachSceneCallback behavior for your 
            model that sets the needed values once it&#39;s been added to the scene.</li>
    </ul>
    <p>The Trigger Service has a large set of models: PhysXShape, with children 
        PhysXBox, PhysXCapsule, and PhysXSphere, and PhysXTrigger, which mixes in to the 
        children of PhysXShape to yield PhysXBoxTrigger, PhysXCapsuleTrigger, and 
        PhysXSphereTrigger. Triggers can execute script behaviors every frame they are 
        contacting another entity that mixes in Trigger.</p>
    <p>The Ragdoll Service uses the PhysXRagdoll model to discover actors with ragdolls 
        and determine which of their animation sequences is controlled by the physical 
        simulation. Similarly, the PhysXTerrain Service uses the PhysXTerrain model to 
        find baked PhysX terrain meshes to go with terrain objects.</p>


<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
<li><a href="physx_system_service_overview.htm">PhysX system services overview</a></li>
<li><a href="physx_system_service_using_without_core.htm">Using  PhysX service without Gamebryo Core Runtime</a></li>
    <li><a href="physx_system_service_using_core.htm">Using PhysX services with Gamebryo Core Runtime</a></li>
    <li><a href="physx_system_service_setup.htm">Setting up PhysX system services</a></li>
    <li><a href="physx_system_service_using_builtins_script.htm">Using PhysX built-ins in script</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
