<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiStandardMaterial</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<h1>NiStandardMaterial</h1>

<p>This material class implements the <a href="Gamebryo_Standard_Material.htm">default 
 Gamebryo rendering pipeline</a>. It also contains some additional settings 
 which can attempt to make the material look more similar to the Gamebryo 
 <a href="Gamebryo_Legacy_Pipeline.htm">legacy pipeline</a>.</p>

<p><span class="NDLSystemFont">NiStandardMaterial</span> 
 has a number of <a href="NiFragmentMaterial.htm#Fallbacks">fallback methods</a> 
 implemented by default (when <span class="NDLSystemFont">AddDefaultFallbacks</span> 
 is called, which all renderers do by default when creating this material). 
 These are, in the order they are applied:</p>

<ol style="list-style: decimal;"
	type=1>
	
	<li><span class="NDLSystemFont">SplitPerPixelLights</span><br>
	This function will attempt to split up the per-pixel lights in the 
 failed pass between two passes, resulting in an additional pass getting 
 created for each iteration of this fallback. The function will continue 
 until each rendering pass only has one light. This function is useful 
 when shaders are failing because their pixel shaders are too long or complex 
 as a result of too many per-pixel lights.</li>
	
	<li><span class="NDLSystemFont">SplitPerVertexLights</span><br>
	This function will attempt to split up the per-vertex lights in the 
 failed pass between two passes, resulting in an additional pass getting 
 created for each iteration of this fallback. The function will continue 
 until each rendering pass only has one light. This function is useful 
 when shaders are failing because their vertex shaders are too long or 
 complex as a result of too many per-vertex lights.</li>
	
	<li><span class="NDLSystemFont">SplitTextureMaps</span><br>
	This function will attempt to split up the texture maps so that the 
 base, dark, detail, decal, and projected light and shadow maps are rendered 
 in the first pass along with the lighting, while the glow map and environment 
 map are draw in in the second pass. This function can only effectively 
 iterate once, and it will generate one additional pass. This function 
 is useful when shaders are failing because their vertex or pixel shaders 
 are too long or complex as a result of too many texture lookups, texture 
 transform calculations, or even too many interpolators used between the 
 pixel and vertex shaders.</li>
	
	<li><span class="NDLSystemFont">DropParallaxMap</span><br>
	This function will attempt to remove any parallax map on the geometry. 
 This function can only effectively iterate once, and will not generate 
 any additional passes. This function is useful when the shaders are failing 
 because their vertex or pixel shaders are too long or complex as a result 
 of the parallax map calculation.</li>
	
	<li><span class="NDLSystemFont">DropParallaxMapThenSplitLights</span><br>
	This function will first call the <span class="NDLSystemFont">DropParallaxMap</span> 
 fallback, and will then call the <span class="NDLSystemFont">SplitPerPixelLights</span> 
 fallback until it fails.</li>
</ol>

<p>This class was designed to be extended by application 
 developers and contains many hooks that allow a developer to insert their 
 own customizations to the rendering pipeline. Please see <a href="Use_Cases.htm">Use 
 Cases</a> for more details.</p>

<h2>&nbsp;</h2>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
