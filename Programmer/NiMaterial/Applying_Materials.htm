<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Applying Materials</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<h1>Applying Materials</h1>

<p>Materials are attached to renderable objects via the 
 <a href="NiMaterialInstance.htm"><span class="NDLSystemFont">NiMaterialInstance</span></a> 
 class. This allows a single instance of an <span class="NDLSystemFont"><a href="../../Reference/NiMain/NiMaterial.htm">NiMaterial</a></span> 
 to be shared among any number of renderable objects. The <a href="NiMaterialInstance.htm"><span 
 class="NDLSystemFont">NiMaterialInstance</span></a> holds a reference to 
 the material itself, as well as a cached version of the most recent <span 
 class="NDLSystemFont"><a href="../../Reference/NiMain/NiShader.htm">NiShader</a></span> 
 that the material provided, a flag that gives some indication of whether 
 that cached shader is up-to-date, and an <span class="NDLSystemFont">unsigned 
 int</span> that can provide some material-specific per-instance data that 
 the material may take into consideration when providing a shader to the 
 renderable object.</p>

<p>Gamebryo supports more than one material applied to 
 a renderable object at one time, though at most one material is considered 
 active at any one time. This functionality is useful for a variety of 
 rendering effects. For instance, in order to render shadow maps, it is 
 necessary to render the shadow casting object from the light's perspective 
 with a special shader. You will then use the rendered texture when the 
 object is rendered. In this case, two materials have been used. Manually 
 attaching and detaching shaders requires a fair amount of bookkeeping. 
 Instead, the application can safely attach the two materials after the 
 data is loaded from disk. Depending on which rendering mode is active 
 (shadows or normal), the application can activate the correct material.</p>

<p>Each material that's applied to a renderable object 
 gets its own independent <a href="NiMaterialInstance.htm"><span 
 class="NDLSystemFont">NiMaterialInstance</span></a> object. The renderable 
 object can have any number of material instances applied to it, but having 
 a large number of them can potentially hurt performance as bookkeeping 
 costs increase.</p>

<p><span class="NDLSystemFont"><a href="../../Reference/NiMain/NiRenderObject.htm">NiRenderObject</a></span> 
 objects have several methods for interacting with materials. A material 
 can be applied to an object using <span class="NDLSystemFont">ApplyMaterial</span>. 
 Applying a new material to an object will not activate that material, 
 however, even if that material is the only one on the object. When needed, 
 a material can be activated using <span class="NDLSystemFont">SetActiveMaterial</span>. 
 This will have the side effect of deactivating the currently active material, 
 if there is one. Should an application developer wish to apply a material 
 and immediately make it active, use the <span class="NDLSystemFont">ApplyAndSetActiveMaterial</span> 
 method. An application can query if a material is applied using the <span 
 class="NDLSystemFont">IsMaterialApplied</span> method. Finally, materials 
 can be removed from the renderable object using <span class="NDLSystemFont">RemoveMaterial</span>. 
 If the active material is the one being removed, then the object will 
 have no material active when the function returns.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
