<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Toolbench Plug-in Best Practice: Native Code</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Fresnel" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>

<!--(Begin Body)================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<h1>Toolbench Plug-in Best Practice: Native Code</h1>

<p>Often Toolbench code will need to call into existing C++ libraries, such as the Gamebryo Core
Runtime. This is done with a "proxy" pattern seen in several C++/CLI plug-ins, typically ending in
"<span class="NDLSystemFont">.Messaging</span>". For example, the WorldBuildProxy in <span class=
"NDLSystemFont">Emergent.Toolbench.WorldBuilder.Messaging</span> is responsible for communicating
with important C++ Framework services that deal with entity management and rendering in World
Builder. Reuse of C++ services is encouraged, though sometimes it will be necessary to create
tool-time versions of these services. Although the C++ SceneGraphService is reused by World
Builder, there is a ToolCameraService that replaces the usual CameraService. Try to mimic the
established proxy pattern when interfacing with C++ code.</p>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
    <li><a href="tb_best_ui_design.htm">Toolbench Plug-in Best Practice: UI Design</a></li>

    <li><a href="tb_best_game_soln_view.htm">Toolbench Plug-in Best Practice: Game Solution
    View</a></li>

    <li><a href="tb_best_output_view.htm">Toolbench Plug-in Best Practice: Output View</a></li>

    <li><a href="tb_best_content_types.htm">Toolbench Plug-in Best Practice: Content Types</a></li>

    <li><a href="tb_best_naming_conventions.htm">Toolbench Plug-in Best Practice: Naming
    Conventions</a></li>

    <li><a href="tb_best_build_environment.htm">Toolbench Plug-in Best Practice: Build
    Environment</a></li>

    <li><a href="tb_best_ui_technology.htm">Toolbench Plug-in Best Practice: UI Technology</a></li>

    <li><a href="tb_best_menus_and_toolbars.htm">Toolbench Plug-in Best Practice: Menus and
    Toolbars</a></li>

    <li><a href="tb_best_settings.htm">Toolbench Plug-in Best Practice: Settings</a></li>

    <li><a href="tb_best_studio_customization.htm">Toolbench Plug-in Best Practice: Studio
    Customization</a></li>

    <li><a href="tb_best_custom_data_types.htm">Toolbench Plug-in Best Practice: Custom Data
    Types</a></li>

    <li><a href="tb_best_protect_user_data.htm">Toolbench Plug-in Best Practice: Protecting User
    Data</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
