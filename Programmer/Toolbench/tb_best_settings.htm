<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Toolbench Plug-in Best Practice: Settings</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Fresnel" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>

<!--(Begin Body)================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<h1>Toolbench Plug-in Best Practice: Settings</h1>

<p>Settings may be PerUser, PerContent, or PerUserPerContent. This is one of the most accessible
extension points in the Toolbench architecture and should be used liberally to allow users to tune
Toolbench to meet their needs. PerUser settings enable users to setup both personal preferences and
studio policies. They are only changed via the Toolbench Settings Editor and are immediately saved
when closing that dialog.</p>

<p>PerContent settings are considered part of a document's data. As such, changing them will mark
the document dirty. PerContent setting changes may be performed in the Toolbench Settings Editor or
via content-specific means, such as toolbar buttons. Where possible, Toolbench file formats should
embed PerContent settings directly in the content file. This was the case with all file types
shipped with the initial Toolbench release (<span class="NDLSystemFont">.gsl</span>, <span class=
"NDLSystemFont">.emtproj</span>, <span class="NDLSystemFont">.block</span>) and reduces user
confusion. When this approach is not feasible, such as when applying PerContent settings to a
binary file format, the PerContent settings should be stored in a side-by-side file. This file
should use the full name of the content file, appended with <span class=
"NDLSystemFont">.settings</span>. Example: <span class=
"NDLSystemFont">image.bmp.settings</span>.</p>

<p>PerUserPerContent settings are reserved for settings associated with particular content but
highly dependent on personal preferences or workflow. They are generally expected to be the most
volatile settings and not source controlled. PerUserPerContent settings should be saved
automatically and silently as side-by-side .usersettings files whenever content is saved or closed,
including Toolbench exit. This behavior is analogous to Visual Studio user options files for
projects and solutions.</p>

<p>A useful pattern is to initialize PerContent or PerUserPerContent settings with values specified
in PerUser settings, at content creation time. This allows users to automatically apply preferences
across many instances of content, yet customize the settings on specific content as needed. Make
settings hidden (visible="false") if they are not intended to be edited in the Toolbench Settings
Editor. All visible settings should specify a display name and description. The path attribute is
used to insert settings at a reasonable position within the existing settings namespace
hierarchy.</p>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
    <li><a href="tb_best_ui_design.htm">Toolbench Plug-in Best Practice: UI Design</a></li>

    <li><a href="tb_best_game_soln_view.htm">Toolbench Plug-in Best Practice: Game Solution
    View</a></li>

    <li><a href="tb_best_output_view.htm">Toolbench Plug-in Best Practice: Output View</a></li>

    <li><a href="tb_best_content_types.htm">Toolbench Plug-in Best Practice: Content Types</a></li>

    <li><a href="tb_best_naming_conventions.htm">Toolbench Plug-in Best Practice: Naming
    Conventions</a></li>

    <li><a href="tb_best_build_environment.htm">Toolbench Plug-in Best Practice: Build
    Environment</a></li>

    <li><a href="tb_best_native_code.htm">Toolbench Plug-in Best Practice: Native Code</a></li>

    <li><a href="tb_best_ui_technology.htm">Toolbench Plug-in Best Practice: UI Technology</a></li>

    <li><a href="tb_best_menus_and_toolbars.htm">Toolbench Plug-in Best Practice: Menus and
    Toolbars</a></li>

    <li><a href="tb_best_studio_customization.htm">Toolbench Plug-in Best Practice: Studio
    Customization</a></li>

    <li><a href="tb_best_custom_data_types.htm">Toolbench Plug-in Best Practice: Custom Data
    Types</a></li>

    <li><a href="tb_best_protect_user_data.htm">Toolbench Plug-in Best Practice: Protecting User
    Data</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
