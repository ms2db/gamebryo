<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Toolbench Plug-in Best Practice: Naming Conventions</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Fresnel" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>

<!--(Begin Body)================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<h1>Toolbench Plug-in Best Practice: Naming Conventions</h1>

<p>IDs throughout Toolbench are namespaced with the prefix <span class=
"NDLSystemFont">[Company].[Product].[Subsystem]</span>. This pattern is used for plug-in naming,
code namespaces, and all extension IDs. Toolbench uses relatively shallow code namespacing. Often
one namespace should be sufficient for a plug-in. Using subfolders to organize code files does not
require the addition of corresponding namespaces. Please note the proper capitalization of
Toolbench and World Builder (or WorldBuilder when used in an identifier).</p>

<p>The <span class="NDLSystemFont">[Product]</span> in the ID convention should only be "Toolbench"
for Emergent-supplied plug-ins. If a partner integration involves multiple partner products, shared
base functionality could live in a <span class="NDLSystemFont">[Company].Common</span> plug-in. It
is good practice to isolate UI functionality in a separate plug-in. This helps with code
maintenance and may make it easy to expose many operations to the command line version of
Toolbench, <span class="NDLSystemFont">ToolbenchConsole.exe</span>. In this case, the
recommendation is to have a <span class="NDLSystemFont">[Company].[Product]</span>.<span class=
"NDLSystemFont">[Subsystem]</span> plug-in paired with a <span class=
"NDLSystemFont">[Company].[Product].[Subsystem].UI</span> plug-in.</p>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
    <li><a href="tb_best_ui_design.htm">Toolbench Plug-in Best Practice: UI Design</a></li>

    <li><a href="tb_best_game_soln_view.htm">Toolbench Plug-in Best Practice: Game Solution
    View</a></li>

    <li><a href="tb_best_output_view.htm">Toolbench Plug-in Best Practice: Output View</a></li>

    <li><a href="tb_best_content_types.htm">Toolbench Plug-in Best Practice: Content Types</a></li>

    <li><a href="tb_best_build_environment.htm">Toolbench Plug-in Best Practice: Build
    Environment</a></li>

    <li><a href="tb_best_native_code.htm">Toolbench Plug-in Best Practice: Native Code</a></li>

    <li><a href="tb_best_ui_technology.htm">Toolbench Plug-in Best Practice: UI Technology</a></li>

    <li><a href="tb_best_menus_and_toolbars.htm">Toolbench Plug-in Best Practice: Menus and
    Toolbars</a></li>

    <li><a href="tb_best_settings.htm">Toolbench Plug-in Best Practice: Settings</a></li>

    <li><a href="tb_best_studio_customization.htm">Toolbench Plug-in Best Practice: Studio
    Customization</a></li>

    <li><a href="tb_best_custom_data_types.htm">Toolbench Plug-in Best Practice: Custom Data
    Types</a></li>

    <li><a href="tb_best_protect_user_data.htm">Toolbench Plug-in Best Practice: Protecting User
    Data</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
