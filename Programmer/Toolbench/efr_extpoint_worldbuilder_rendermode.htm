<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>RenderMode (Extension-Point)</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
    WriteNavLink(2);
</script>

<h1>RenderMode (Extension-Point)</h1>

<h3>Emergent.Toolbench.WorldBuilder.UI.Gamebryo.RenderMode</h3>

<p>The RenderMode extension point allows you to introduce new
render modes to World Builder which the user can change on a
per-viewport basis. When a render mode is selected, an object
implementing the custom <span class=
"NDLSystemFont">IRenderMode</span> interface will be created to
allow the render mode to interface with the frame rendering
system and modify the way the scene is displayed. See the section
<a href="#CreatingCustomRenderModes">Creating Custom Render
Modes</a> for details on creating render modes.</p>

<pre>
&lt;extension point="Emergent.Toolbench.WorldBuilder.UI.Gamebryo.RenderMode"&gt;
  &lt;rendermode name="Default"
              class="Emergent.Toolbench.WorldBuilder.UI.RenderModes.DefaultRenderMode" /&gt;
  ...
&lt;/extension&gt;
</pre>

<h2>rendermode</h2>

<table>
    <thead>
        <tr>
            <th>Attribute</th>

            <th>Type</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>name</td>

            <td>String</td>

            <td>The unique identifier for this render mode. This
            name will be displayed to the user for selecting the
            render mode.</td>
        </tr>

        <tr>
            <td>class</td>

            <td>String</td>

            <td>The class name of the object to be created. This
            object handles connecting and disconnecting the
            render mode when the user changes the render mode
            selection.</td>
        </tr>
    </tbody>
</table>

<p class="NDLHeadingRelatedTopic"><a name=
"CreatingCustomRenderModes" id=
"CreatingCustomRenderModes">Creating Custom Render Modes</a></p>

<p>When creating a render mode, it is necessary to create a class
implementing <span class="NDLSystemFont">IRenderMode</span> to
accompany the render mode. When a render mode is first selected,
an instance of this class will be created and bound to the
viewport being modified. If a render mode was previously active
on the viewport, its <span class=
"NDLSystemFont">IRenderMode</span> object will have its
Disconnect method called to do any cleanup and then be destroyed.
The new IRenderMode object will then have its Connect method
called to activate the render mode.</p>

<p>Typically, when a render mode is connected it performs the
following steps:</p>

<ul>
    <li>Gets a pointer to the currently active render
    surface.</li>

    <li>Creates a new render click and sets this click as the
    main click for the surface. See the documentation for the
    <a href=
    "../Frame_Rendering_System/Introduction_to_the_Frame_Rendering_System.htm">
    Frame Rendering System</a> for more information on render
    clicks.</li>

    <li>Creates or removes any extra render clicks or render
    steps. This is useful, for example, for a render mode that
    disables shadows. Since shadows are enabled via a special
    render step, removing this render step will disable the
    shadows.</li>
</ul>

<p>Other operations are possible (such as changing the render
views connected to a render click), but the above are most often
used.</p>

<p>When a render mode is disconnected, it is responsible for
putting the frame rendering system in the state it was in before
being connected. This may involve replacing render clicks/render
steps that were removed or removing extra render clicks/render
steps that were created. It is not necessary to replace the main
render click, since the next render mode will replace that render
click with its own.</p>

<p>The plug-in <span class=
"NDLSystemFont">Emergent.Toolbench.WorldBuilder.UI.RenderModes</span>
contains several standard render modes to use as reference points
for creating your own.</p>

<table class="NDLNoteContainer" width="100%">
    <tr align="left">
        <td class="NDLNoteContainerTD">
            <p class="NDLHeadingNoteContainer">Note</p>

            <div class="NDLNote">
                The frame rendering system is C++ driven. As a
                result, the plug-in containing your custom render
                modes should almost always be in Managed C++ as
                opposed to C# to allow interfacing with the
                system.
            </div>
        </td>
    </tr>
</table>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
    <li><a href=
    "../Frame_Rendering_System/Introduction_to_the_Frame_Rendering_System.htm">
    Frame Rendering System</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
