<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Toolbench Plug-in Best Practice: Build Environment</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Fresnel" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>

<!--(Begin Body)================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Toolbench Plug-in Best Practice: Build Environment</h1>

<p>If desired, new plug-ins can be initially developed in the main Toolbench solution. However,
partner plug-ins should ship in a separate solution that can be optionally built by users. This
solution should use the Refresh References pattern, which is demonstrated by the
ToolbenchRevisionControl solution. A special project in the solution first copies all built
Toolbench assemblies to a known location relative to the partner solution. The partner plug-ins
reference required assemblies at this known location. The partner plug-ins then build to the
Toolbench Plugins folder in the Gamebryo LightSpeed SDK, alongside the Emergent plug-ins. Using the
Refresh References pattern allows new plug-ins to reference assemblies built with the same
configuration (Debug, Release, or Shipping) and avoids hand-editing <span class=
"NDLSystemFont">.csproj</span> files to use environment variables in the reference paths.</p>

<p>It is important to remember to set the Copy Local property for all referenced Toolbench
assemblies to false, which is not the default. That is, there should be no extra copies of
assemblies under the Toolbench Plugins output folder. This will avoid error messages on Toolbench
start and potentially larger issues. Also be sure to specify any plug-in dependencies directly or
indirectly in the "requires" section of the <span class="NDLSystemFont">plugin.xml</span> manifest
for new Toolbench plug-ins. This will ensure that prerequisites are loaded in time. However, do not
compromise the delay-load goals of Toolbench by over-specifying dependencies here. A debug build of
Toolbench will attempt to validate that these statements catch all coded dependencies and log
messages to the Output View if there are unresolved dependencies.</p>

<p>Once a new plug-in is building, view it in the Plugin Browser to be sure all informational
fields are set to reasonable values. This view can also be used to verify that the plug-in does not
load before it is required, or to verify that it has already loaded on Toolbench startup if
necessary. If the plug-in does not appear at all, verify that the <span class=
"NDLSystemFont">plugin.xml</span> manifest, the assembly, and any supporting data files have been
copied to the output folder under Toolbench Plugins.</p>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
    <li><a href="tb_best_ui_design.htm">Toolbench Plug-in Best Practice: UI Design</a></li>

    <li><a href="tb_best_game_soln_view.htm">Toolbench Plug-in Best Practice: Game Solution
    View</a></li>

    <li><a href="tb_best_output_view.htm">Toolbench Plug-in Best Practice: Output View</a></li>

    <li><a href="tb_best_content_types.htm">Toolbench Plug-in Best Practice: Content Types</a></li>

    <li><a href="tb_best_naming_conventions.htm">Toolbench Plug-in Best Practice: Naming
    Conventions</a></li>

    <li><a href="tb_best_native_code.htm">Toolbench Plug-in Best Practice: Native Code</a></li>

    <li><a href="tb_best_ui_technology.htm">Toolbench Plug-in Best Practice: UI Technology</a></li>

    <li><a href="tb_best_menus_and_toolbars.htm">Toolbench Plug-in Best Practice: Menus and
    Toolbars</a></li>

    <li><a href="tb_best_settings.htm">Toolbench Plug-in Best Practice: Settings</a></li>

    <li><a href="tb_best_studio_customization.htm">Toolbench Plug-in Best Practice: Studio
    Customization</a></li>

    <li><a href="tb_best_custom_data_types.htm">Toolbench Plug-in Best Practice: Custom Data
    Types</a></li>

    <li><a href="tb_best_protect_user_data.htm">Toolbench Plug-in Best Practice: Protecting User
    Data</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
