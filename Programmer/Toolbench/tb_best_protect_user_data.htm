<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Toolbench Plug-in Best Practice: Protecting User Data</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Fresnel" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>

<!--(Begin Body)================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<h1>Toolbench Plug-in Best Practice: Protecting User Data</h1>

<p>It is important that users be able to save their data at any time. Toolbench users should not be
blocked from saving content due to bad state. In this situation it is preferable to permit the save
and merely alert the user to the errors. This applies to content source file saves. It is
acceptable to prevent the creation of export files until important state is corrected.</p>

<p>Toolbench provides a framework for implementing undo/redo on new content types. This system
should be used to help users quickly iterate on content. However, be aware that supporting undo
requires a full commitment to the feature. Partially implementing undo can easily leave a user with
a corrupted undo stack and subject to crash bugs. Although clearing the undo stack can be an easy
way out of implementing undo for trickier actions, this should only be done as a last resort and
must be accompanied by an explicit warning to the user that the undo stack will be cleared.</p>

<p>Revision control integration is also supported by Toolbench and may be appropriate to apply to
new plug-ins. There is additional documentation on calling into this API, but a few design
considerations are worth mentioning. First, it is recommended that plug-ins do not try to
completely hide file management from users. This would just add to confusion when the inevitable
manual file merge becomes necessary. Second, consider the impact that operations will have on the
file system and the ability for multiple users to work on the same set of content. For example, it
may be easier on the revision control system to organize content by virtual folders rather than
on-disk folders. For more information about Toolbench revision control integration capabilities,
see <a href=
"../RevisionControlWrapper/rcs_wrap_intro.htm">Revision Control Programming</a>.</p>

<p>Once Toolbench plug-ins are in the field, it may be necessary to update file formats to account
for new functionality or bug fixes in a partner product or Gamebryo LightSpeed. The Toolbench
MigrationService can be leveraged to update existing user data files in an automated way. This
service checks files before opening them in Toolbench. If necessary, the files are updated on disk
before proceeding with the load. Migration steps can be registered for content types and can be
chained together to handle a string of version bumps. See the existing migration steps in the EMT
and World Builder plug-ins for examples. Even if a new file version only adds data, it is often
better to use a migration step to explicitly handle this and avoid confusion, rather than silently
adding to the file the next time it happens to be saved.</p>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
    <li><a href="tb_best_ui_design.htm">Toolbench Plug-in Best Practice: UI Design</a></li>

    <li><a href="tb_best_game_soln_view.htm">Toolbench Plug-in Best Practice: Game Solution
    View</a></li>

    <li><a href="tb_best_output_view.htm">Toolbench Plug-in Best Practice: Output View</a></li>

    <li><a href="tb_best_content_types.htm">Toolbench Plug-in Best Practice: Content Types</a></li>

    <li><a href="tb_best_naming_conventions.htm">Toolbench Plug-in Best Practice: Naming
    Conventions</a></li>

    <li><a href="tb_best_build_environment.htm">Toolbench Plug-in Best Practice: Build
    Environment</a></li>

    <li><a href="tb_best_native_code.htm">Toolbench Plug-in Best Practice: Native Code</a></li>

    <li><a href="tb_best_ui_technology.htm">Toolbench Plug-in Best Practice: UI Technology</a></li>

    <li><a href="tb_best_menus_and_toolbars.htm">Toolbench Plug-in Best Practice: Menus and
    Toolbars</a></li>

    <li><a href="tb_best_settings.htm">Toolbench Plug-in Best Practice: Settings</a></li>

    <li><a href="tb_best_studio_customization.htm">Toolbench Plug-in Best Practice: Studio
    Customization</a></li>

    <li><a href="tb_best_custom_data_types.htm">Toolbench Plug-in Best Practice: Custom Data
    Types</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
