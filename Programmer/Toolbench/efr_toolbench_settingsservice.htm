<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Settings Service Overview</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Settings service overview</h1>

<p>The setting service is responsible for providing plug-ins with
a common way of saving any user preferences or content metadata.
The <span class="NDLSystemFont">SettingService</span> stores all
the active settings and provides access to the setting values or
descriptors.</p>

<h2>Setting service</h2>

<p>The <span class="NDLSystemFont">SettingService</span> provides
plugins with 3 types of settings; Per-User, Per-Content, and
Per-User-Per-Content. The Per-User settings are stored in the
user specific application data directory of windows and will
remain separate for each user of Toolbench.</p>

<p>Per-Content settings are stored either with the content
embedded in the file, or as a side-by-side file.
Per-User-Per-Content settings always reside in a side-by-side
file. These types of settings are not retrievable from the
settings service directly. The <span class=
"NDLSystemFont">SettingsAspect</span> is responsible for storing
content-related settings. Any content type that supports settings
will have an <span class="NDLSystemFont">ISettingsAspect</span>
that can be used for getting and setting the value.</p>

<p>However, using the settings aspect normally will only store
settings in a file beside the content. To embed PerContent
settings in your content file you will need to do a little extra
work.</p>

<p>First, you will need to save the settings inside your file.
This, you would do in your content factory. Next, you will need
to inherit <span class="NDLSystemFont">SettingsAspect</span> into
a new content specific aspect. Once you have done this you will
override the LoadSettings method to change where the settings are
pulled from.</p>

<p>To define a setting you will need to add an extension to your
plugin manifest describing the setting. This information is
stored in a <span class="NDLSystemFont">SettingDescriptor</span>
that is managed by the <span class=
"NDLSystemFont">SettingService</span>. Here is an example setting
defined in a plug-in manifest. Note that you can place as many
settings as you want inside the <span class=
"NDLSystemFont">&lt;settings&gt;&lt;/settings&gt;</span>
tags.</p>

<pre>
&lt;extension point="Emergent.Toolbench.Settings.SettingsSet"&gt;
  &lt;settings&gt;
    &lt;setting scope="PerUser"
             id="Emergent.Toolbench.UI.WelcomeView.ShowOnLoad"
             property-type="Boolean"
             visible="true"&gt;
      &lt;value&gt;true&lt;/value&gt;
      &lt;display-name&gt;Show on Load&lt;/display-name&gt;
      &lt;description&gt;Show the welcome view on load?&lt;/description&gt;
    &lt;/setting&gt;
  &lt;/settings&gt;
&lt;/extension&gt;
</pre>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
