<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Toolbench Plug-in Best Practice: Custom Data Types</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Fresnel" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>

<!--(Begin Body)================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Toolbench Plug-in Best Practice: Custom Data Types</h1>

<p>Sometimes it is useful to define new types for use with entity model properties. There are at
least three ways to add new types and it is useful to understand the trade-offs with these
approaches. Full-blown types can be added to the system by extending the <span class=
"NDLSystemFont">Emergent.Toolbench.TypeService.DataType</span> extension point, including the
specification of custom editor support. But there are other options.</p>

<p>The easiest way to add a new type is to use the restriction system in EMT. Actually, this
doesn't produce a new type per se, but can sometimes solve the same problem. Note that many
existing property types can use the Enumeration restriction, which specifies the acceptable values
for a property. This allows the creation of a "one shot" type that is setup for a single entity
model property. This is not appropriate if the type will be needed for many properties, but has the
advantage of being implemented directly in the EMT data where it is used, without needing to touch
a Toolbench plug-in.</p>

<p>Enumeration types that do need to be reused can still be created without writing C# code. This
can be done in a data-only Toolbench plug-in. That is, a <span class=
"NDLSystemFont">plugin.xml</span> manifest is all that is needed to extend the <span class=
"NDLSystemFont">Emergent.Toolbench.TypeService.EnumDataType</span> extension point. An enumeration
type created in this way will appear in the type selection dropdown for any entity model
property.</p>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
    <li><a href="tb_best_ui_design.htm">Toolbench Plug-in Best Practice: UI Design</a></li>

    <li><a href="tb_best_game_soln_view.htm">Toolbench Plug-in Best Practice: Game Solution
    View</a></li>

    <li><a href="tb_best_output_view.htm">Toolbench Plug-in Best Practice: Output View</a></li>

    <li><a href="tb_best_content_types.htm">Toolbench Plug-in Best Practice: Content Types</a></li>

    <li><a href="tb_best_naming_conventions.htm">Toolbench Plug-in Best Practice: Naming
    Conventions</a></li>

    <li><a href="tb_best_build_environment.htm">Toolbench Plug-in Best Practice: Build
    Environment</a></li>

    <li><a href="tb_best_native_code.htm">Toolbench Plug-in Best Practice: Native Code</a></li>

    <li><a href="tb_best_ui_technology.htm">Toolbench Plug-in Best Practice: UI Technology</a></li>

    <li><a href="tb_best_menus_and_toolbars.htm">Toolbench Plug-in Best Practice: Menus and
    Toolbars</a></li>

    <li><a href="tb_best_settings.htm">Toolbench Plug-in Best Practice: Settings</a></li>

    <li><a href="tb_best_studio_customization.htm">Toolbench Plug-in Best Practice: Studio
    Customization</a></li>

    <li><a href="tb_best_protect_user_data.htm">Toolbench Plug-in Best Practice: Protecting User
    Data</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
