<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Toolbench Plug-in Best Practice: Output View</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Fresnel" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>

<!--(Begin Body)================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<h1>Toolbench Plug-in Best Practice: Output View</h1>

<p>The Output View is a primary means of communicating with the user, just as the Output window is
in Visual Studio. This view is expected to be readily accessible during Toolbench use. The
Toolbench Logger should be used to write messages to this view using the Error, Warning, and Info
channels, depending on the severity of event. However, critical errors should still use a popup
window to notify the user in a more invasive way. Use the UserRequest utility to accomplish
this.</p>

<p>It is very reasonable to add a custom Output View channel for messages specific to a major
subsystem or partner integration. This is strongly encouraged for any verbose output, such that its
display can be easily controlled by users. It is also possible to redirect log output from a
connected game to the Output View, which can increase the visibility of important events that might
otherwise be missed in a log file. See the Script Debugger and Lua behavior runtime errors for an
example of this.</p>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
    <li><a href="tb_best_ui_design.htm">Toolbench Plug-in Best Practice: UI Design</a></li>

    <li><a href="tb_best_game_soln_view.htm">Toolbench Plug-in Best Practice: Game Solution
    View</a></li>

    <li><a href="tb_best_content_types.htm">Toolbench Plug-in Best Practice: Content Types</a></li>

    <li><a href="tb_best_naming_conventions.htm">Toolbench Plug-in Best Practice: Naming
    Conventions</a></li>

    <li><a href="tb_best_build_environment.htm">Toolbench Plug-in Best Practice: Build
    Environment</a></li>

    <li><a href="tb_best_native_code.htm">Toolbench Plug-in Best Practice: Native Code</a></li>

    <li><a href="tb_best_ui_technology.htm">Toolbench Plug-in Best Practice: UI Technology</a></li>

    <li><a href="tb_best_menus_and_toolbars.htm">Toolbench Plug-in Best Practice: Menus and
    Toolbars</a></li>

    <li><a href="tb_best_settings.htm">Toolbench Plug-in Best Practice: Settings</a></li>

    <li><a href="tb_best_studio_customization.htm">Toolbench Plug-in Best Practice: Studio
    Customization</a></li>

    <li><a href="tb_best_custom_data_types.htm">Toolbench Plug-in Best Practice: Custom Data
    Types</a></li>

    <li><a href="tb_best_protect_user_data.htm">Toolbench Plug-in Best Practice: Protecting User
    Data</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
