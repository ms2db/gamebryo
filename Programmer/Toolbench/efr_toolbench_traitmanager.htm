<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Trait Manager Overview</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Trait Manager overview</h1>

<p>Traits are simple on/off tags which can be specified on a per
behavior, per property, or per model basis. For instance, a
Hidden trait is provided which, when placed on a property, makes
the property invisible via the World Builder entity editor. The
<span class="NDLSystemFont">TraitManager</span> is responsible
for providing plugins with a common way of creating traits. The
<span class="NDLSystemFont">TraitManager</span> stores all the
traits and provides a central access point to get the
<span class="NDLSystemFont">TraitDescriptor</span> of any
trait.</p>

<h2>Trait manager</h2>

<p>The <span class="NDLSystemFont">TraitManager</span> provides
plugins with 3 types of traits; Behavior, Property, and Model. A
behavior trait can be specified per behavior, a property trait
per property and a model trait per model. To query whether a
specific instance of a behavior, model, or property possesses a
trait, each class (<span class=
"NDLSystemFont">EntityModelBehavior</span>, <span class=
"NDLSystemFont">EntityModelProperty</span>, and <span class=
"NDLSystemFont">EntityModel</span>, respectively) has a Traits
collection which can be examined.</p>

<p>To define a trait you will need to add an extension to your
plugin manifest describing the trait. This information is stored
in a <span class="NDLSystemFont">TraitDescriptor</span> that is
managed by the <span class="NDLSystemFont">TraitManager</span>.
Here is an example trait defined in a plugin manifest. Note that
you can place as many traits as you want inside the <span class=
"NDLSystemFont">&lt;extension&gt;&lt;/extension&gt;</span>
tags.</p>

<pre>
&lt;extension point="Emergent.Toolbench.EntityModeling.PropertyTrait"&gt;
  &lt;property-trait name="TraitName"&gt;
    &lt;Description&gt;Trait Description.&lt;Description&gt;
  &lt;/property-trait&gt;
&lt;/extension&gt;
</pre>

<p>To see descriptions of the extensions for each type of trait,
see the Related Topics section.</p>

<h2>Trait manager - friendly names</h2>
<p>In some situations studios may wish to customize how traits are provided to the end-user. 
These traits can be customized using the <span class="NDLSystemFont">FriendlyTrait</span> extension point. Please 
see the description in the Related Topics section for details.</p>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
    <li><a href="efr_extpoint_emt_behaviortrait.htm">Developer
    Guide - BehaviorTrait extension-point</a></li>

    <li><a href="efr_extpoint_emt_modeltrait.htm">Developer Guide
    - ModelTrait extension-point</a></li>

    <li><a href="efr_extpoint_emt_propertytrait.htm">Developer
    Guide - PropertyTrait extension-point</a></li>
    
     <li><a href="efr_extpoint_emt_friendlytrait.htm">Developer
    Guide - FriendlyTrait extension-point</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
