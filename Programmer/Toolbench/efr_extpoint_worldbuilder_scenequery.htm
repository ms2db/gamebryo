<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>SceneQuery (Extension-Point)</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
    WriteNavLink(2);
</script>

<h1>SceneQuery (Extension-Point)</h1>

<h3>Emergent.Toolbench.WorldBuilder.UI.SceneQuery</h3>

<p>The SceneQuery extension point allows you to introduce new
queries to the SceneQueryDialog window. When the SceneQueryDialog is displayed,
it is filled with all the available queries that have been defined using this extension point.
For each query an object implementing the <span class=
"NDLSystemFont">ISceneQuery</span> interface will be created. This object
defines how the query should be executed. See the section <a href="#CreatingCustomQueries">
Creating Custom Queries</a> for details on creating scene queries.</p>

<pre>
&lt;!-- New scene query --&gt;
&lt;extension point="Emergent.Toolbench.WorldBuilder.UI.SceneQuery"&gt;
&lt;extension point ="Emergent.Toolbench.Worldbuilder.UI.SceneQuery"&gt;
    &lt;DataQuery class="CustomNameSpace.NewSceneQuery"
        name="New Query"
        category="New Query Category"
        description="New Query Description"
        active="False"&gt;
    &lt;/DataQuery&gt;
&lt;/extension&gt;
</pre>

<h2>scenequery</h2>

<table>
    <thead>
        <tr>
            <th>Attribute</th>

            <th>Type</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>class</td>

            <td>String</td>

            <td>The class name of the object to be created. This
            object handles the actual querying of the scene. It should also contain the data that is to be retrieved.</td>
        </tr>

        <tr>
            <td>name</td>

            <td>String</td>

            <td>The unique identifier for this scene query. This
            name will be displayed to the user withing the scene query tool dialog</td>
        </tr>
        
        <tr>
            <td>category</td>

            <td>String</td>

            <td>Defines the category this query belongs to. It is used by the scene 
            query dialog to organize the display to the user. 
            Each category will be displayed as a different tab. A category can contain multiple queries.</td>
        </tr>
        
        <tr>
            <td>description</td>

            <td>String</td>

            <td>Defines a description for the query. This is optional and will be displayed as a tooltip by
            the scene query dialog when the user hover over the associated query. No tooltip is displayed if
            this is not set.</td>
        </tr>
        
        <tr>
            <td>active</td>

            <td>boolean</td>

            <td>Defines whether the associated query is active upon opening the scene query dialog. 
            This is set to true by default and is an optional parameter. Queries can only be executed if they
            are active and if they are visible. Users can select whether a query is active or not in the check box next to
            the associated query.</td>
        </tr>
    </tbody>
</table>

<p class="NDLHeadingRelatedTopic"><a name=
"CreatingCustomQueries" id=
"CreatingCustomQueries">Creating Custom Queries</a></p>

<p>When creating a scene query, it is necessary to create a class
implementing <span class="NDLSystemFont">ISceneQuery</span> to accompany
the query. An instance of this class will be created when the Scene Query Tool
dialog is first created. The <span class="NDLSystemFont">AbstractSceneQuery</span> 
class already provides a basic implementation
for scene queries and can be used as a starting point for new queries.
Users will be able to interact with the query when it is active.
A SceneQuery should be associated with a SceneQueryUI which will define user interfaces to allow
setting and displaying relevant data back into the Scene Query Dialog. See <a href="efr_extpoint_worldbuilder_scenequeryui.htm">
SceneQueryUI (Extension-Point)</a> for more information about SceneQueryUI.</p>

<p>A scene query will first be initialized when the Scene Query Dialog is loaded. It will be shutdown when the
dialog is unloaded. Those function should perform any tasks necessary for a query's execution to take place.
As an example, this would be the ideal location to register and unregister events upon which a query might require execution.
</p>

<p>Queries are always executed when they are activated. However, as mentioned earlier, events can be registered with a query 
and trigger the query's execution method. Further more, execution can be triggered from an associated SceneQueryUI extension.</p>

<p>The plug-in <span class=
"NDLSystemFont">Emergent.Toolbench.WorldBuilder.Terrain.UI</span>
contains several standard queries to use as reference points
for creating your own. Those queries provide the user with functionality allowing them to retrieve terrain specific data such as
point information, material information or meta data information.</p>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
    <li><a href=
    "efr_extpoint_worldbuilder_scenequeryui.htm">
    SceneQueryUI</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
