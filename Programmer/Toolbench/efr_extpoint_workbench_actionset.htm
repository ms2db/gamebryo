<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>ActionSet (Extension-Point)</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
    WriteNavLink(2);
</script>

<h1>ActionSet (Extension-Point)</h1>

<h3>Emergent.Toolbench.Workbench.ActionSet</h3>

<p>This extension point allows developers to create menus,
toolbar items and actions all in a data-driven manner. By
expressing all of the information needed to create the menus and
toolbar items here, there is no reason to load the assembly to
display any of these items.</p>

<pre>
&lt;extension point="Emergent.Toolbench.Workbench.ActionSet"&gt;
  &lt;actionset label="Image Actions" visible="true"
             id="Emergent.ImagePlugin.ActionSet"&gt;

    &lt;menu label="&amp;Image"
          id="Emergent.ImagePlugin.Menu.Image"
          priority="10"&gt;

      &lt;menuitem id="Emergent.ImagePlugin.Menu.Image.FlipVert"
                action="Emergent.ImagePlugin.FlipImageVertical"
                priority="1"/&gt;
    &lt;/menu&gt;

    &lt;toolbar id="Emergent.ImagePlugin.Toolbar"
             visible="true"
             name="Image"/&gt;

    &lt;toolbaritem id="Emergent.ImagePlugin.Toolbar.FlipVertical"
                 tooltip="Flips the image along its horizontal axis."
                 path="Image"
                 item-type="Button"&gt;

      &lt;button action="Emergent.ImagePlugin.FlipImageVertical"/&gt;
    &lt;/toolbaritem&gt;

    &lt;action label="Flip &amp;Vertical"
            icon="Icons/flip-vertical.bmp"
            handler="Emergent.ImagePlugin.FlipImageVerticalAction"
            id="Emergent.ImagePlugin.FlipImageVertical"&gt;
    &lt;/action&gt;

  &lt;/actionset&gt;
&lt;/extension&gt;
</pre>

<h2>action-set</h2>

<table>
    <thead>
        <tr>
            <th>Identifier</th>

            <th>Type</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>id</td>

            <td>String</td>

            <td>The id is a unique identifier used to refer to
            this action set.</td>
        </tr>

        <tr>
            <td>lable</td>

            <td>String</td>

            <td>The label of an action set is used to give the
            items a name if they ever need to be displayed under
            a group or category of association.</td>
        </tr>

        <tr>
            <td>visible</td>

            <td>Boolean</td>

            <td>[optional] [default: true] The visible attribute
            denotes the default visibility of this action set.
            Some action sets you may want to keep hidden but
            still be accessible through code.</td>
        </tr>
    </tbody>
</table>

<h2>menu</h2>

<table>
    <thead>
        <tr>
            <th>Identifier</th>

            <th>Type</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>id</td>

            <td>String</td>

            <td>The id is a unique identifier used to refer to
            this menu.</td>
        </tr>

        <tr>
            <td>label</td>

            <td>String</td>

            <td>The label of the menu is the display text for
            it.</td>
        </tr>

        <tr>
            <td>priority</td>

            <td>Integer</td>

            <td>[optional] The priority of a menu will determine
            what order it appears in the menu bar. The lower the
            priority the closer it will be to being the first
            menu in the list. If a menu does not have a priority
            its order is completely dependent upon the order in
            which it was encountered when the plug-in manifests
            were being parsed. However, all menus with no
            priority will be added after all menus with a
            priority.</td>
        </tr>

        <tr>
            <td>path</td>

            <td>String</td>

            <td>[optional] If you are creating a child menu of
            the menu ?Options? which was a child menu of ?File?,
            your path would be ?File/Options?. Menus without a
            path are placed along the root menu bar.</td>
        </tr>
    </tbody>
</table>

<h2>menuitem</h2>

<table>
    <thead>
        <tr>
            <th>Identifier</th>

            <th>Type</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>id</td>

            <td>String</td>

            <td>The id is a unique identifier used to refer to
            this menu item.</td>
        </tr>

        <tr>
            <td>action</td>

            <td>String</td>

            <td>The action is the unique identifier of the
            associated action for this menu item. When this menu
            is invoked, this action is what will be
            executed.</td>
        </tr>

        <tr>
            <td>tooltip</td>

            <td>String</td>

            <td>[optional] The tooltip that is displayed when the
            menu item is hovered over with the mouse.</td>
        </tr>

        <tr>
            <td>priority</td>

            <td>Integer</td>

            <td>[optional] The priority of a menu item will
            determine what order it appears in the menu drop down
            list. The lower the priority the closer it will be to
            being the first menu item in the list. If a menu item
            does not have a priority its order is completely
            dependent upon the order in which it was encountered
            when the plug-in manifests were being parsed.
            However, all menu items with no priority will be
            added after all menu items with a priority.</td>
        </tr>

        <tr>
            <td>path</td>

            <td>String</td>

            <td>[optional] If you are creating a child menu item
            of the menu ?Options? which was a child menu of
            ?File?, your path would be ?File/Options?. Menu items
            without a path are placed along the root menu
            bar.</td>
        </tr>
    </tbody>
</table>

<h2>separator</h2>

<table>
    <thead>
        <tr>
            <th>Identifier</th>

            <th>Type</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>priority</td>

            <td>Integer</td>

            <td>[optional] The priority of a separator will
            determine what order it appears in the menu drop down
            list. The lower the priority the closer it will be to
            being the first menu item in the list. If a menu item
            does not have a priority its order is completely
            dependent upon the order in which it was encountered
            when the plug-in manifests were being parsed.
            However, all menu items with no priority will be
            added after all menu items with a priority.</td>
        </tr>

        <tr>
            <td>path</td>

            <td>String</td>

            <td>[optional] If you are creating a menu item
            separator of the menu ?Options? which was a child
            menu of ?File?, your path would be ?File/Options?. A
            separator without a path is placed along the root
            menu bar.</td>
        </tr>
    </tbody>
</table>

<h2>menufactory</h2>

<table>
    <thead>
        <tr>
            <th>Identifier</th>

            <th>Type</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>id</td>

            <td>String</td>

            <td>The id is a unique identifier used to refer to
            this menu.</td>
        </tr>

        <tr>
            <td>label</td>

            <td>String</td>

            <td>The name of the menu item. However, this does not
            force the menu factory to use the provided name. It
            is up to the menu factory to get the desired label
            from the menu factory descriptor when constructing
            the menu.</td>
        </tr>

        <tr>
            <td>class</td>

            <td>String</td>

            <td>The full name of the class to use when
            instantiating the menu factory. The class must
            inherit from the
            Emergent.Toolbench.UI.Workbench.IMenuFactory class.
            Note that because this is used to actually construct
            the menu that the assembly that contains this class
            has to be loaded to display this menu unlike the
            other data driven examples.</td>
        </tr>

        <tr>
            <td>priority</td>

            <td>Integer</td>

            <td>[optional] The priority of a menu will determine
            what order it appears in the menu bar. The lower the
            priority the closer it will be to being the first
            menu in the list. If a menu does not have a priority
            its order is completely dependent upon the order in
            which it was encountered when the plug-in manifests
            were being parsed. However, all menus with no
            priority will be added after all menus with a
            priority.</td>
        </tr>

        <tr>
            <td>path</td>

            <td>String</td>

            <td>[optional] If you are creating a child menu of
            the menu ?Options? which was a child menu of ?File?,
            your path would be ?File/Options?. Menus without a
            path are placed along the root menu bar.</td>
        </tr>
    </tbody>
</table>

<h2>toolbar</h2>

<table>
    <thead>
        <tr>
            <th>Identifier</th>

            <th>Type</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>id</td>

            <td>String</td>

            <td>The id is a unique identifier used to refer to
            this toolbar.</td>
        </tr>

        <tr>
            <td>name</td>

            <td>String</td>

            <td>The name of the toolbar is used when the exposing
            the name of a toolbar to the user.</td>
        </tr>

        <tr>
            <td>visible</td>

            <td>Boolean</td>

            <td>[optional] [default: true] The visible attribute
            denotes the default visibility of this toolbar.</td>
        </tr>

        <tr>
            <td>class</td>

            <td>String</td>

            <td>[optional] The class attribute allows you to
            specify a custom System.Windows.Forms.Toolstrip class
            to be used for your Toolbar instead of the standard
            Toolstrip.</td>
        </tr>
    </tbody>
</table>

<h2>toolbaritem</h2>

<table>
    <thead>
        <tr>
            <th>Identifier</th>

            <th>Type</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>id</td>

            <td>String</td>

            <td>The id is a unique identifier used to refer to
            this toolbar item.</td>
        </tr>

        <tr>
            <td>path</td>

            <td>String</td>

            <td>The path of a toolbar item is the name of the
            toolbar to place the toolbar item in.</td>
        </tr>

        <tr>
            <td>item-type</td>

            <td>enum</td>

            <td>
                The item type is the type of toolbar item to
                create. All of the options except for Custom can
                be created without loading any assemblies. For
                examples on creating each of these different item
                types refer to the Emergent.SamplePlugin.<br>

                <ul>
                    <li>Button</li>

                    <li>ComboBox</li>

                    <li>DropDownButton</li>

                    <li>TextBox</li>

                    <li>Separator</li>

                    <li>SplitButton</li>

                    <li>Custom</li>
                </ul>
            </td>
        </tr>

        <tr>
            <td>class</td>

            <td>String</td>

            <td>[optional] The full name of the class to use when
            instantiating a custom toolbar item. The class must
            inherit from the
            Emergent.Toolbench.UI.Workbench.CustomToolbarItem
            class. Note that because this is used to actually
            construct the toolbar item that the assembly that
            contains this class has to be loaded to display this
            menu unlike the other data driven toolbar items.</td>
        </tr>

        <tr>
            <td>tooltip</td>

            <td>String</td>

            <td>[optional] The tooltip text to display when the
            users mouse hovers over the toolbar item.</td>
        </tr>
    </tbody>
</table>

<h2>statusbaritem</h2>

<table>
    <thead>
        <tr>
            <th>Identifier</th>

            <th>Type</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>id</td>

            <td>String</td>

            <td>The id is a unique identifier used to refer to
            this statusbar item.</td>
        </tr>

        <tr>
            <td>item-type</td>

            <td>enum</td>

            <td>
                The item type is the type of statusbar item to
                create. All of the options except for Custom can
                be created without loading any assemblies. For
                examples on creating each of these different item
                types refer to the Emergent.SamplePlugin. They
                are the same as the ones created for toolbar
                items.

                <ul>
                    <li>Button</li>

                    <li>ComboBox</li>

                    <li>DropDownButton</li>

                    <li>TextBox</li>

                    <li>Separator</li>

                    <li>SplitButton</li>

                    <li>Custom</li>
                </ul>
            </td>
        </tr>

        <tr>
            <td>class</td>

            <td>String</td>

            <td>[optional] The full name of the class to use when
            instantiating a custom statusbar item. The class must
            inherit from the
            Emergent.Toolbench.UI.Workbench.CustomToolbarItem
            class. Note that because this is used to actually
            construct the statusbar item that the assembly that
            contains this class has to be loaded to display this
            menu unlike the other data driven statusbar
            items.</td>
        </tr>

        <tr>
            <td>tooltip</td>

            <td>String</td>

            <td>[optional] The tooltip text to display when the
            users mouse hovers over the statusbar item.</td>
        </tr>
    </tbody>
</table>

<h2>action</h2>

<table>
    <thead>
        <tr>
            <th>Identifier</th>

            <th>Type</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>id</td>

            <td>String</td>

            <td>The id is a unique identifier used to refer to
            this action.</td>
        </tr>

        <tr>
            <td>handler</td>

            <td>String</td>

            <td>When the action is executed, the class handler
            will be instantiated and executed. The handler class
            must implement the
            Emergent.Toolbench.Actions.IActionHandler
            interface.</td>
        </tr>

        <tr>
            <td>label</td>

            <td>String</td>

            <td>[optional] The display text used for this
            action.</td>
        </tr>

        <tr>
            <td>path</td>

            <td>String</td>

            <td>[optional] If you are creating a child menu item
            of the menu ?Options? which was a child menu of
            ?File?, your path would be ?File/Options?. Menu items
            without a path are placed along the root menu
            bar.</td>
        </tr>

        <tr>
            <td>icon</td>

            <td>String</td>

            <td>[optional] The path to the icon associated with
            this action. The path should be relative to the
            directory of your plug-in.</td>
        </tr>

        <tr>
            <td>shortcut</td>

            <td>String</td>

            <td>[optional] If you are creating a child menu item
            of the menu "Options" which was a child menu of
            "File", your path would be "File/Options". Menu items
            without a path are placed along the root menu
            bar.</td>
        </tr>
    </tbody>
</table>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
