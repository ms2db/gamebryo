<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Content Service Overview</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Content service overview</h1>

<p>The Toolbench content service exists so that plug-ins can
expose which file types they understand how to open and edit.</p>

<h2>Content service</h2>

<p>The ContentService is responsible for managing any
ContentDescriptor, AspectDescriptor, ContentFactoryDescriptor
that a plug-in author includes in their plug-in manifest. These
descriptors are created for each type of extension point that
authors implement in their plug-in.</p>

<h2>Content</h2>

<p>Content in Toolbench is represented by a ContentDescriptor.
These descriptors offer any information that the plug-in writer
chose to place in the plug-in manifest describing this piece of
content. While most pieces of content in Toolbench are backed by
files; it is not a requirement. So the content definition does
not specify a file type to be associated with. What it does offer
is important metadata about the content, such as the unique
identifier, the category and a description.</p>

<h2>Aspect</h2>

<p>An aspect in Toolbench is represented by an AspectDescriptor.
Aspects are attachments to pieces of content that are used to
either extend a piece of content or to attach run-time metadata
to it. This means that all content is Toolbench is extendable by
design.</p>

<p>An example of where aspects are used to attach metadata is the
undo system in Toolbench. It attaches an ActionHistoryAspect to
any piece of content. That way instead of the undo service having
to maintain the undo stack for each piece of content, the content
itself carries the data with it and is automatically cleaned up
when the content is destroyed.</p>

<p>As mentioned above, aspects extend content. The world file
format uses aspects in this way to allow other plug-in authors to
actually add their own sections to a world file without touching
the original file saving and factoring code. The world file
format by default contains no information, each section in the
file is provided by a different aspect. The content factory scans
for aspects mapping to the world file format, and asks it to
serialize or deserialize its own data to and from the file.</p>

<h2>Content factory</h2>

<p>A content factory is Toolbench's way of creating,
opening and saving a file to disk. Any factory a plug-in defines
in their plug-in manifest is stored as a ContentFactoryDescriptor
in the content service. The factory maps file types to content
types to a class that can be used to factory an instance of the
content in memory.
 
<!--kadov_tag{{<placeholder id="footer">}}--></p>

</body>

</html>
