<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Workbench Overview</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
    WriteNavLink(2);
</script>

<h1>Workbench Overview</h1>

<p>Workbench is the main UI plug-in for Toolbench. By nature,
Toolbench has no UI. The job of Workbench is to provide other
plug-ins with a common interface upon which to build their UI
elements to be hosted inside of Toolbench. This means providing
other plug-ins with a way of creating elements to be hosted in
the common areas of an application. So there are extensions for
creating views, menus, toolbar and status bar items.</p>

<h2>Workbench</h2>

<p>The Workbench plug-in also has a Workbench service. The
Workbench service is used to access the main UI window of
Workbench.</p>

<h2>Views</h2>

<p>A view is Workbench's equivalent of a Form or Window. A
plug-in author will define a view in their plug-in manifest and
create a corresponding AbstractView.</p>

<h2>Action sets</h2>

<!-- It is possible that this will change, separating the UI components from actions, which should be definable in their own area. -->
<p>An action set is a grouping of actions as well as UI elements.
The UI elements are the menus, toolbar items and status bar
items.</p>

<h2>View service</h2>

<p>The <span class="NDLSystemFont">ViewService</span> is
responsible for managing the views, tracking the active view and
open views as well as opening and closing them. However, the
<span class="NDLSystemFont">ViewService</span> is limited to just
the primitive concepts of layout. It understands views exist, but
does not understand groupings of views to achieve a particular
look. The <span class="NDLSystemFont">ViewService</span> also
handles any interactions with the docking system.</p>

<table class="NDLNoteContainer" width="100%">
    <tr align="left">
        <td class="NDLNoteContainerTD">
            <p class="NDLHeadingNoteContainer">Note</p>

            <div class="NDLNote">
                Workbench uses a <a href=
                "../../ThirdPartyCode/All/thirdparty_DockPanelSuite.htm">
                third party</a> library for managing the dockable
                window aspects of the UI.
            </div>
        </td>
    </tr>
</table>

<h2>Perspective Manager</h2>

<p>The <span class="NDLSystemFont">PerspectiveManager</span>
works with the <span class="NDLSystemFont">ViewService</span> to
create a layout of views depending upon the state the user is in.
This layout is determined by several perspectives working
together to form a cohesive set of views. There are 4 types of
perspectives currently; Global, Live Content, Active Content,
Active View.</p>

<p>The Global perspective is a perspective that is always
visible. The individual views in that perspective can be turned
on or off, but the perspective will remain active. There can be
more than one but there is a default global perspective that is
defined as an extension in Workbench's plug-in manifest. An
example of something you would place in the Global perspective
would be the console window.</p>

<p>The Live Content perspective is always visible as long as a
particular type of content is open but does not necessarily have
to be the currently focused content. An example of something in
the live content perspective would be something like a solution
view where the solution window is only up while a solution is
open, but should remain visible while editing other pieces of
content in the solution.</p>

<p>The Active Content perspective is only visible while a piece
of content is the active content in the content service. This is
the perspective most plug-ins will use when grouping together
their views. An example of this perspective would be a paint
palette in an image editing plug-in, where the palette only makes
sense to be visible when editing an image.</p>

<p>The Active View perspective is only visible when a particular
type of view has focus. An example of this would be if you add a
view to the global perspective, but need to display custom menu
options when the view has focus, but only when it has focus, this
is the perspective you would use.</p>

<p>In addition to these types of perspectives, the perspective
system also allows plug-in writers to enable and disable arbitrary
states. If a UI element mapped to a perspective has any states
attached to it that UI element will only be visible if that state
is currently active and that type of perspective is currently
visible. An example of this would be "Debug" mode; if
your plug-in was able to enter a state like debug mode, where
different sets of views become active, but the currently focused
content has not actually changed, then you would want to be
able to change the state of the UI layout around that concept.
Setting these states will allow a plug-in author to achieve this
effect.</p>

<h2>Shortcut Manager</h2>

<p>The <span class="NDLSystemFont">ShortcutManager</span> traps
keys pressed in the application and redirects them to a handler
action if the keys map to a particular action. The system can
handle multiple actions being mapped to the same key combination.
The way it achieves this is by examining all "Active"
action sets by determining which action sets are currently
visible based on the active perspectives when keys are pressed.
By doing this, the system can narrow down available actions that
could be executed by the user. Then it determines which if any of
those actions support the key combination.</p>

<p>One other thing worth mentioning is the order in which this
resolution occurs. Normally the priority of perspectives goes,
Global, Live Content, Active Content, Active View. For
determining the action to execute the system starts with the
action sets in the Active View perspective and works
backwards.</p>

<h2>Toolbar Manager</h2>

<p>The <span class="NDLSystemFont">ToolbarManager</span> handles
the showing and hiding of toolbars. Toolbar visibility is based
on the active perspective combination.</p>

<h2>Statusbar Manager</h2>

<p>The <span class="NDLSystemFont">StatusbarManager</span>
handles the showing and hiding of statusbar items.</p>

<h2>Startup Process</h2>

<p>When Toolbench finishes initializing the platform and chooses
which runnable plug-in to run, if that plug-in is Workbench the
<span class="NDLSystemFont">UIApplication</span> will be created.
The <span class="NDLSystemFont">UIApplication</span> handles the
creation of the <span class="NDLSystemFont">Workbench</span> service and starts
the Application loop for the main form.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
