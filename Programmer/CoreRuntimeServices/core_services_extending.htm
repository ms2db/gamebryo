<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Extending Core Runtime Services</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Extending Core Runtime Services</h1>

<p>The Core Runtime Services provide functionality that most
applications are expected to require. However, most applications
will also wish to extend the services in some way, such as to
provide game specific camera control or recognition of customized
core runtime code.</p>

<p>Three approaches may be taken in extending services. Read the
<a href="../SystemServices/system_service_intro.htm">system
services documentation</a> before undertaking any customization
of Core Runtime Services.</p>

<h3>Create a New Service</h3>

<p>A new service is a good solution when the additional
functionality is complementary to existing services. For example,
the camera controller classes used in Gamebryo samples are
typically custom services that use messages and functionality in
the <a href=
"core_services_ecr_CameraService.htm">ecr::CameraService</a>
class, while not being derived from it in the C++ sense. This
works well for several reasons:</p>

<ul>
    <li>The idea of controlling a camera with input is
    complementary to the idea of creating and updating an
    <span class="NDLSystemFont">NiCamera</span> object.</li>

    <li>Entity properties provide a means for the controller to
    manage the data of the camera, without directly accessing the
    underlying Core Runtime object.</li>

    <li>The operation of the camera service and the controller do
    not interfere in any way.</li>
</ul>

<p>Many services in Gamebryo may be viewed as complementary
extensions to a basic service. We hence expect this to be the
primary method for extending services.</p>

<h3>Derive from an Existing Service</h3>

<p>Derivation from an existing service (in the C++ sense) is a
good solution when there is a conflict in the desired
functionality between the new and existing services, yet there is
significant functional overlap. For example, the <a href=
"../../Reference/QuickRef_Services/svc_qckref_tool_scene_svc.htm">
<span class=
"NDLSystemFont">egmToolServices::ToolSceneGraphService</span></a>
class is derived from the <a href=
"../../Reference/QuickRef_Services/svc_qckref_scene_graph_svc.htm">
<span class="NDLSystemFont">ecr::SceneGraphService</span></a>
class because the scene graph updating requirements for a tool
are different to those for a runtime engine. Derivation provides
the most flexibility in selectively replacing and enhancing
functionality, but requires significant understanding of how the
base class operates. Derivation also can reduce the complexity of
defining priorities for service execution order.</p>

<h3>Modify an Existing Service</h3>

<p>We expect modifications to an existing service to be rare. The
need to work with existing Core Runtime modifications is probably
the most likely scenario. We suggest contacting <a href=
"../../GetStart/All/Online_Gamebryo_Resources.htm">Gamebryo
Support</a> before you attempt to modify a service.</p>

<h3>Shared Core Runtime Objects</h3>

<p>The Gamebryo Core Runtime includes several objects that should
be shared by several services in a single application. Examples
include the <a href=
"../../Reference/efdPhysX/efdPhysX__PhysXSDKManager.htm">PhysX
SDK Manager</a> and Floodgate <a href=
"../NiFloodgate/Floodgate_Using_the_NiSPWorkflowManager_Class.htm">
<span class="NDLSystemFont">NiSPWorkflowManager</span></a>
objects. Where possible, such objects are managed by Foundation
level classes. However, other objects, such as the Floodgate
workflow manager, cannot reside in Foundation due to dependency
issues. In such cases, one service is typically assumed to own
the common object and functions are available for other services
to access it. For example, the <a href=
"../../Reference/QuickRef_Services/svc_qckref_scene_graph_svc.htm">
Scene Graph Service</a> holds the default <span class=
"NDLSystemFont">NiSPWorkflowManager</span> object.</p>

<p>Look for existing instances in related services or Foundation
when modifying services or creating new services that use
singleton objects.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>