<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Camera Service Overview</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Camera Service Overview</h1>

<p>The <a href=
"../../Reference/QuickRef_Services/svc_qckref_camera_svc.htm"><span class="NDLSystemFont">
ecr::CameraService</span> class</a> is responsible for creating
and updating cameras for entities with the <a href=
"../../Reference/QuickRef_Models/StandardModelLibrary__Camera.htm">
Camera</a> model. Applications using such entities will typically
register an instance of the <span class=
"NDLSystemFont">ecr::CameraService</span> class with the <a href=
"../../Reference/efd/efd__ServiceManager.htm">ServiceManager</a>.</p>

<p>The service also holds the mapping from <a href=
"core_services_ecr_RenderService.htm#RenderSurface">render
surfaces</a> to the camera to use for rendering that surface.
Applications must explicitly associate cameras with surfaces in
order to use them for rendering. This is typically done by
creating an application specific service that inherits from or
works with the Camera Service to discover camera entities and tie
them to the render surfaces used by the application. See the
<a href=
"../../GetStart/All/Orientation_Samples.htm#GameFrameworkTechDemos">
Game Framework Tech samples</a> for examples.</p>

<p>The Camera Service does not provide any method for managing
user control of a camera. A separate, application-specific
service is used. See the <a href=
"../../GetStart/All/Orientation_Samples.htm#GameFrameworkTechDemos">
Game Framework Tech samples</a> for examples.</p>

<p>Finally, the <span class=
"NDLSystemFont">ecr::CameraService</span> class provides common
camera control functions as static members, such as pan and
zoom.</p>

<h3>Entity Handling</h3>

<p>The Camera Service handles entity discovery messages, looking
for entities with the Camera model. When such an entity is found,
the service creates an <a href=
"../../Reference/NiMain/NiCamera.htm"><span class=
"NDLSystemFont">NiCamera</span></a> object and sets its
parameters based on the properties of the entity. This camera is
then available to applications to use in a call to <span class=
"NDLSystemFont">ecr::CameraService::SetActiveCamera</span> for a
particular window.</p>

<p>On every tick the <span class=
"NDLSystemFont">NiCamera::Update</span> function for each camera
is executed. The service also handles entity update messages and
will modify the parameters of the camera according to changes in
its entity properties.</p>

<p>The camera for an entity is removed when the entity is
removed, or at shutdown.</p>

<p>It is also possible to create a camera for a given entity ID,
even if that entity is not registered with the scheduler. Tools
sometimes use this method. Once created, the entity and camera
behave like any other.</p>

<h3>Mapping Cameras to Render Surfaces</h3>

<p>Applications call <span class=
"NDLSystemFont">ecr::CameraService::SetActiveCamera</span> to
register a particular entity's camera with the surface for a
window. When the surface is drawn the active camera will be used
in culling and rendering operations.</p>

<p>The Camera Service looks for <span class=
"NDLSystemFont">OnSurfaceRemoved</span> messages from the
<a href="core_services_ecr_RenderService.htm">Render Service</a>
and removes the surface from the map of surfaces to cameras.
Hence there is no need to explicitly unset the active camera.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
