<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Overview of Shadowing System Architecture</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<h1>Overview of Shadowing System Architecture</h1>

<p>The shadowing system consists of a collection of new 
 classes as well as additional functionality added into existing classes. 
 The system produces shadow map objects, renders to shadow maps, assigns 
 shadow map objects to geometry, and samples shadow maps with a preferred 
 shadow technique. It is designed to allow applications to use custom algorithms 
 that define how to assign shadow maps to dynamic effects and geometry 
 as well as the world to shadow map matrix used when rendering to and reading 
 from a shadow map. Applications can also create new shadow techniques 
 that define the shader code used to read from and write to a shadow map.</p>

<p>Below is a list of the major components of the shadowing 
 system along with a short description of what purpose they serve. Follow 
 the provided links to learn more about the various components.</p>

<ul>
	
	<li><a href="Shadow_Write_Materials.htm">Shadow 
 Write Materials</a>: Shadow write materials are a simplified extension 
 of <span class="NDLSystemFont"><a href="../../Reference/NiMain/NiFragmentMaterial.htm">NiFragmentMaterial</a></span> 
 used to write data to a shadow map.</li>
	
	<li><a href="Shadow_Technique.htm">Shadow 
 Technique</a>: Shadow techniques are containers that define the shader 
 code used to write data to a shadow map and the shader code used to read 
 data from a shadow map. </li>
	
	<li><a href="Shadow_Render_Click.htm">Shadow 
 Render Click</a>: A shadow render click is a single render click that 
 is used to render shadow casters to a rendered texture. These objects 
 are produced by the shadow click generator.</li>
	
	<li><a href="Shadow_Click_Validator.htm">Shadow 
 Click Validator</a>: This render click validator is used by all shadow 
 render click objects. It ensures that at last one shadow receiving geometry 
 object is visible for the shadow generator associated with the shadow 
 render click that is being executed. </li>
	
	<li><a href="Shadow_Map.htm">Shadow 
 Map</a>: A shadow map object references a texture that is used as a shadow 
 map and its associated states. Shadow map objects are owned by the shadow 
 manager. Each shadow generator object references the shadow map object(s) 
 that it uses.</li>
	
	<li><a href="Shadow_Cube_Map.htm">Shadow 
 Cube Map</a>: Shadow cube map objects are similar to shadow map objects 
 except they reference a cube map instead of a 2D texture.</li>
	
	<li><a href="Shadow_Generator.htm">Shadow 
 Generator</a>: Shadow generators have a one-to-one relationship with <span 
 class="NDLSystemFont"><a href="../../Reference/NiMain/NiDynamicEffect.htm">NiDynamicEffect</a></span> 
 objects. This relationship defines an <span class="NDLSystemFont">NiDynamicEffect</span> 
 object as a shadow generating object. At this time, only <span class="NDLSystemFont"><a href="../../Reference/NiMain/NiLight.htm">NiLight</a></span> 
 objects are supported. Each shadow generator references a shadow technique 
 to define what shader code will be used to produce shadows for that particular 
 effect.</li>
	
	<li><a href="Shadow_Click_Generator.htm">Shadow 
 Click Generator</a>: A shadow click generator is used to produce all the 
 shadow render click objects needed to render the shadow maps for the active 
 shadow generator objects. This encapsulates the algorithm used to determine 
 what shadow maps will be assigned to a shadow generator and which of those 
 shadow maps will be updated for the current frame, along with the world 
 to shadow map matrix to use.</li>
	
	<li><a href="Shadow_Manager.htm">Shadow 
 Manager</a>: The shadow manager owns all the shadow technique objects, 
 all the shadow map objects, and all the shadow render click objects. It 
 is responsible for managing data pools for all of these object types and 
 uses a shadow click generator to generate a list of all the shadow render 
 click objects needed for each frame.</li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
