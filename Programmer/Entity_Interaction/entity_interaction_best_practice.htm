<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Best practices for working with entity interaction</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>

<!--(Begin Body)================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<h1>Best practices for working with entity interaction</h1>

<p>Emergent recommends the following best practices when you are working with entity
interactions:</p>

<ul>
    <li>Entities are very much like C++ objects that have member functions (behaviors) and member
    variables (properties). In general, the same considerations and rules about when to directly
    access the member variable of another class apply to directly accessing the properties of
    another entity:

        <ul>
            <li>Does it work?</li>

            <li>Is it convenient and fast?</li>

            <li>Can it cause difficult to diagnose logic problems?</li>

            <li>Would encapsulating the property access within the target Entity provide better
            code structure and extensibility?</li>
        </ul>
    </li>

    <li>Behaviors are like member function calls. They make it easier to encapsulate functionality
    and make it easier to ensure that the internal state of your object is kept consistent.
    Consider that behavior invocation has higher overhead than a setting property, but directly
    setting a property will spread game logic among the instigators of the interaction, and not
    localize it with the target.</li>

    <li>In general, if all that the accessor Behavior would do is directly get or set the property,
    you might want to just directly get or set the property. If, however, the property that you
    need to modify has rules about what values are valid, or if it must be kept in sync with other
    properties, then consider a Behavior to modify it.</li>

    <li>If you need to know when a property on a specific Entity or any Entity that mixes in a
    particular model has changed, you can register for update and removal notifications using the
    <a href="../../Reference/QuickRef_Services/svc_qckref_notification_svc.htm">Notification
    Service</a>. This is more efficient than polling for changes, and it is much more convenient
    than other means of recognizing that something changed.</li>

    <li>Name Behavior interactions that are fully game logic actions with a recognizable prefix,
    like "Do". They are commands to perform some involved sequence of game action. Utility type
    Behaviors could be named like regular class methods, like LocateNewLeader.</li>

    <li>Consider adopting a Controller Entity to funnel user commands through. It can verify the
    legality of a request (particularly important in client/server games), can maintain which game
    entity is affected, and what Entities are currently visible. Bind input commands to
    specifically prefixed Behavior names, like RequestMove, RequestDrop.</li>
</ul>

<h4>Entity Interactions During Rapid Iteration</h4>

<p>When you are rapidly iterating on your application, there are some additional concerns to pay
attention to. The process of rapid iteration can change property values in ways they might not
otherwise be able to change. This can result in property values that are illegal or nonsensical
given the current game state. Emergent recommends against adding complex logic to your game to
handle rare corner cases that can only happen during rapid iteration. The additional complexity
this would add can make your game very difficult to develop and debug. If rapid iteration leaves
the game in a bad state, simply use the "Reset Game" option from Toolbench. However, if an illegal
property value can be easily handled without injecting undue complexity, then you should try to
handle that data exactly as you would handle it if the rapidly iterated property value was set to
that value during initial data loading.</p>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
    <li><a href="entity_interaction_overview.htm">Entity interaction overview</a></li>

    <li><a href="entity_interaction_how_work.htm">How entity interaction works</a></li>

    <li><a href="entity_interaction_examples.htm">Entity interaction examples</a></li>

    <li><a href=
    "../../Reference/egf/egf__NotificationService.htm">egf::NotificationService</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
