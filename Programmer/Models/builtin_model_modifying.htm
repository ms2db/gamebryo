<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Modifying built-in models</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>

<!--(Begin Body)================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Modifying built-in models</h1>

<p>You define built-in models in the <a href="../../Tools/EntityModelingTool/emt_intro.htm">Entity
Modeling Tool</a> in the same way that you define normal models. However, built-in models have a
C++ component that you must keep in sync with the data definition. This means that when you modify
a built-in model, you must also modify the corresponding code. The internal identifiers that are
used for fast lookup of Models and Properties change when you edit the names. This change must be
reflected into your binding code.</p>

<p>Because of the relationship between the built-in model and code, your options for rapidly
iterating on the data definition of a built-in model are limited. You can only iterate on the
built-in model's initial value in EMT and Entity instance values in World Builder. You should only
create new built-in model definitions in Toolbench when you are not connected to the application
because the matching C++ object changes must be compiled into the application at the same time.</p>

<p class="NDLHeadingProcedure">To modify a built-in model</p>

<ol>
    <li>Use Toolbench to modify the Entity Modeling Tool definition of your model.</li>

    <li>Export your model to a flat model. This will assign unique ID values to all of the
    properties and behaviors in your built-in model. The IDs will remain the same unless the
    corresponding name has been changed.</li>

    <li>Modify the C++ implementation of your built-in model to recognize any new properties or
    behaviors. You should define code constants for the properties and behaviors by looking at the
    values assigned in the flat model file. Toolbench can generate a data driven enum file
    containing the required values. In turn DDEHeaderGen can generate a C++ header file from the
    .enum file.</li>

    <li>Recompile your modified code.</li>

    <li>Now you can rapidly iterate on Entity composition and World Builder block files using your
    modified built-in model.</li>

    <li>Rapid iteration of built-in model property values should work in both model and block files
    just as they would for any other property.</li>
</ol>

<h4>Limitations for rapidly iterating on built-in models</h4>

<p>There are some limitations concerning rapid iteration on built-in models.</p>

<ul>
    <li>When properties on a built-in model are rapidly iterated on in World Builder, all
    properties from the built-in model will first be set to their default values and then all the
    overrides from the block file will be applied.

        <p class="indent1">The end result should match expectations, but this can result in some
        properties having their value set twice in a row. Normally, this is not a problem because
        it is best to avoid any expensive work in response to setting a property. But if your
        built-in model implementation has a property which is expected to rarely change and thus
        does do expensive work (such as asset loading), this could cause a noticeable performance
        impact.</p>
    </li>

    <li>Rapid iteration changes in model composition that mix-in a new built-in model to an already
    existing runtime entity will not currently work. The new built-in will not be added to any
    existing entities, and any properties from that built-in will not be accessible on those
    entities. Entities that are created after the data change will work correctly.</li>
</ul>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
    <li><a href="builtin_model_creating.htm">Creating built-in models</a></li>

    <li><a href="builtin_model_deleting.htm">Deleting built-in models</a></li>

    <li><a href="../Builtins/builtin_custom_creating.htm">Creating custom built-ins</a></li>

    <li><a href="../Builtins/builtin_custom_deleting.htm">Deleting custom built-ins</a></li>

    <li><a href="../Builtins/builtin_custom_dynamic_load.htm">Dynamically loading custom
    built-ins</a></li>

    <li><a href="../Builtins/builtin_custom_static_load.htm">Statically loading custom
    built-ins</a></li>

    <li><a href="../Builtins/builtin_scripting.htm">Scripting built-ins</a></li>

    <li><a href="../Builtins/builtin_custom_adding.htm">Adding custom built-ins to the scripting
    system</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
