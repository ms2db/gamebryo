<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Streaming NiPhysXFluid Content</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Build" content="PhysX" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<h1>Streaming NiPhysXFluid Content</h1>

<p>The Gamebryo-PhysX authoring tools support artists in 
 designing the rendered appearance of a PhysX fluid system and automatically 
 produce a PhysX fluid system based on a Gamebryo particle system. However, 
 the parameters for this system are mostly default values, so applications 
 will frequently wish to modify them. </p>

<h2>Streaming</h2>

<p>When an artist checks the "Convert to PhysX Fluids" 
 button in the <a href="../../Reference/Tool_Plug_ins/PhysX_Extractor.htm">PhysX 
 Extractor Tool Plug-in</a>, any particle systems in the scene are converted 
 to fluid systems and other PhysX-enabled objects in the scene are prepared 
 for use with a fluid simulation. Upon export, the scene graph in the NIF 
 file contains a <span class="NDLSystemFont"><a href="../../Reference/NiPhysXFluid/NiPhysXPSFluidSystem.htm">NiPhysXPSFluidSystem</a></span> 
 or <span class="NDLSystemFont"><a href="../../Reference/NiPhysXFluid/NiPhysXPSMeshFluidSystem.htm">NiPhysXPSMeshFluidSystem</a></span> 
 somewhere in the scene graph and a <span class="NDLSystemFont"><a href="../../Reference/NiPhysX/NiPhysXProp.htm">NiPhysXProp</a></span> 
 object among the top-level objects in the NIF file. The fluid particle 
 system and the PhysX scene are already attached. The snapshot in the <span 
 class="NDLSystemFont"><a href="../../Reference/NiPhysX/NiPhysXProp.htm">NiPhysXProp</a></span> 
 object is of type <span class="NDLSystemFont"><a href="../../Reference/NiPhysXFluid/NiPhysXFluidPropDesc.htm">NiPhysXFluidPropDesc</a></span> 
 and contains the fluid simulation objects in the scene (one for each particle 
 system that was exported). </p>

<p>Applications, after streaming in the prop but before 
 adding it to a scene, will typically want to modify some of the parameters. 
 See the <a href="../../Learn/Demos/PhysX_Fluids_Demo_Overview.htm">PhysXFluids</a> 
 demo for code to do this. </p>

<p>All of the fluids in a given <span class="NDLSystemFont">NxScene</span> 
 object must have the same value for the <span class="NDLSystemFont">restParticlesPerMeter</span>, 
 <span class="NDLSystemFont">kernelRadiusMultiplier</span>, <span class="NDLSystemFont">motionLimitMultiplier</span> 
 and <span class="NDLSystemFont">packetSizeMultiplier</span> parameters, 
 because these are used in cooking the single mesh for all the fluids in 
 a scene. </p>

<p>The tool export process does not combine the static 
 meshes into one fluid collision mesh as required for fluids because an 
 application may combine scenes at runtime. Applications may need to cook 
 static meshes explicitly, depending on their scene set-up. See the PhysX 
 documentation for information for information about static mesh handling 
 with PhysX fluids.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
