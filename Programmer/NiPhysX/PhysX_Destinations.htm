<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>PhysX Destinations</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Build" content="PhysX" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type=
"text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>PhysX Destinations</h1>

<p>A <em>destination</em> in Gamebryo-PhysX is an object, in the C++ sense,
that transfers state <em>from</em> a PhysX actor <em>to</em> a Gamebryo scene
graph element. There are several types of destinations currently
implemented:</p>

<ul>
    <li>The <a href=
    "../../Reference/NiPhysX/NiPhysXRigidBodyDest.htm"><span class=
    "NDLSystemFont">NiPhysXRigidBodyDest</span></a> class is a virtual base
    class used for PhysX rigid body actors driving Gamebryo <span class=
    "NDLSystemFont"><a href=
    "../../Reference/NiMain/NiAVObject.htm">NiAVObject</a></span>-derived
    objects (scene graph nodes). There are several sub-classes that are used
    for driving specific types of scene graph node:
        <ul>
            <li>The <a href=
            "../../Reference/NiPhysX/NiPhysXTransformDest.htm"><span class=
            "NDLSystemFont">NiPhysXTransformDest</span></a> class connects a
            PhysX rigid body actor with a Gamebryo scene graph node such that
            the scene graph node's transformation follows the actor's.</li>

            <li>The <span class="NDLSystemFont">NiPhysXPoseBufferDest</span>
            class connects a PhysX rigid body actor to one rotation and one
            translation data item within an <span class=
            "NDLSystemFont"><a href="../../Reference/NiAnimation/NiPoseBuffer.htm">
            NiPoseBuffer</a></span> of an active animation sequence.</li>

            <li>The <span class="NDLSystemFont"><a href=
            "../../Reference/NiPhysX/NiPhysXAccumRigidBodyDest.htm">NiPhysXAccumRigidBodyDest</a></span>
            class is the base for <span class=
            "NDLSystemFont">NiPhysXAccumPoseBufferDest</span> objects and
            <a href=
            "../../Reference/NiPhysX/NiPhysXAccumTransformDest.htm"><span class="NDLSystemFont">
            NiPhysXAccumTransformDest</span></a> objects. <span class=
            "NDLSystemFont">NiPhysXAccumPoseBufferDest</span> objects connect a
            PhysX actor to two rotation and two translation data items within
            an <span class="NDLSystemFont">NiPoseBuffer</span> of an active
            animation sequence in cases where the PhysX actor is controlling
            the accumulation root of the sequence. <span class=
            "NDLSystemFont">NiPhysXAccumTransformDest</span> objects connect to
            the accumulation root, but drive its transform directly.</li>
        </ul>
    </li>

    <li>The <a href=
    "../../Reference/NiPhysXFluid/NiPhysXFluidDest.htm"><span class=
    "NDLSystemFont">NiPhysXFluidDest</span></a> class is used to begin the
    update process for a Gamebryo-PhysX fluid particle system.</li>

    <li>The <a href=
    "../../Reference/NiPhysXParticle/NiPhysXPSParticleSystemDest.htm"><span class="NDLSystemFont">
    NiPhysXPSParticleSystemDest</span></a> class is used to begin the update
    process for a Gamebryo-PhysX particle system.</li>
</ul>

<p>For example, a crate simulated as a rigid body would have a destination
connecting it to the Gamebryo scene graph node representing the crate's
geometry. A rag-doll has one destination for each bone driven by a rigid
body.</p>

<p>The destinations are typically updated (transfer their state) at the end of
each simulation step, as discussed in the guide to <a href=
"Gamebryo_PhysX_Props_and_Scenes.htm">Gamebryo-PhysX Scenes</a>. However,
applications have direct control and may choose to update at different
times.</p>

<p>As part of the state transfer, destinations automatically manage coordinate
system transformations, including conversions from PhysX global transformations
to Gamebryo scene-graph local transformations. This procedure is more stable if
the destination has information about the relationships of various actors and
the scene graph. For example, if the PhysX actor corresponding to a
rigid-body's scene graph parent is known, then the local transformation can be
computing using PhysX state. Without this information, the ill-defined order of
destinations update can affect the local transformation that Gamebryo computes.
Hence, it is important to provide this additional information when a
destination can make use of it. In the process of transferring state,
destinations might also buffer data for interpolation or perform any other kind
of data manipulation.</p>

<p>As a programmer you might need to create a rigid-body destination, but you
should never have to create a particle or fluid destination because they are
created by the particle or fluid system that uses them.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
