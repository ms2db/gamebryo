<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Streaming PhysX Meshes and Materials</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Build" content="PhysX" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type=
"text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Streaming PhysX Meshes and Materials</h1>

<p>Gamebryo-PhysX provides two mechanisms for streaming collision meshes. The
first, used by the Gamebryo art tools, streams cooked mesh data in a NIF file.
The second method supports streaming cooked mesh data from a separate file. The
situation is analogous to texture streaming.</p>

<p>When you are creating an object using <span class=
"NDLSystemFont"><a href=
"../../Reference/NiPhysX/NiPhysXShapeDesc.htm">NiPhysXShapeDesc</a></span>
objects, then you should simply set the appropriate data in an <span class=
"NDLSystemFont"><a href=
"../../Reference/NiPhysX/NiPhysXMeshDesc.htm">NiPhysXMeshDesc</a></span> object
and the mesh will be automatically loaded when the shape is instantiated.</p>

<h2>Keeping Mesh Data</h2>

<p>By default, mesh data in a <span class=
"NDLSystemFont">NxConvexShapeDesc</span>, <span class=
"NDLSystemFont">NxTriangleMeshShapeDesc</span> or <span class=
"NDLSystemFont">NxClothMeshDesc</span> object is deleted after the mesh object
has been created. The only reason an application would need this data again is
if it releases the mesh and later wants to recreate it, without re-loading from
a file. To disable mesh data deletion, use the <span class=
"NDLSystemFont"><a href=
"../../Reference/NiPhysX/NiPhysXProp.htm">NiPhysXProp::SetKeepMeshes</a></span>
function before the scene is instantiated.</p>

<h2>Accessing Mesh Vertices and Triangles</h2>

<p>Information about the constituent points and triangles of a mesh is not
streamed. It can be accessed using PhysX's <span class=
"NDLSystemFont">saveToDesc</span> functions on the cooked mesh.</p>

<h2>Streaming Materials</h2>

<p>PhysX stores materials globally in the SDK object, possibly because meshes
are global and the material indexes are cooked into the meshes. In any event,
applications must be careful to use a consistent set of material indexes across
all the PhysX scenes in an application.</p>

<p>While material indexes could be re-mapped for simple shapes, for
per-triangle materials in meshes the re-mapping could not be done without
run-time re-cooking of meshes. This is considered too expensive.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
