<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Saving a PhysX Scene</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Build" content="PhysX" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>


<h1>Saving a PhysX Scene </h1>

<p>NiPhysX content is streamed using Gamebryo's standard 
 streaming mechanisms. To save a scene, insert the <span class="NDLSystemFont"><a 
 href="../../Reference/NiPhysX/NiPhysXScene.htm">NiPhysXScene</a></span> 
 object into the <span class="NDLSystemFont">NiStream</span> top-level list, 
 or insert all of the <span class="NDLSystemFont"><a href="../../Reference/NiPhysX/NiPhysXProp.htm">NiPhysXProp</a></span> 
 objects. Note that the scene is not saved if you only insert the scene 
 graph node that is controlled, because the Gamebryo scene-graph classes 
 have no knowledge of the existence of PhysX.</p>

<p>You can save individual props by streaming <span class="NDLSystemFont"><a 
 href="../../Reference/NiPhysX/NiPhysXProp.htm">NiPhysXProp</a></span> 
 objects.</p>

<p>To save PhysX SDK global parameters, create a <span 
 class="NDLSystemFont"><a href="../../Reference/NiPhysX/NiPhysXSDKDesc.htm">NiPhysXSDKDesc</a></span> 
 object, save the SDK to it, and insert it into the list of top-level objects 
 to be streamed. The result will be available as a top-level object when 
 the stream is loaded (it is not automatically applied back onto the SDK). 
 </p>

<h2>Saving Collision Meshes </h2>

<p>If a collision mesh's <span class="NDLSystemFont"><a href="../../Reference/NiPhysX/NiPhysXMeshDesc.htm">NiPhysXMeshDesc</a>
 object contains a mesh data buffer, the mesh data will be saved in 
 the NIF file. Otherwise, only the name is saved under the presumption 
 that the application or tool has saved the mesh elsewhere. </p>

<p>Streaming the mesh data requires cooking it, even 
 if the mesh was originally loaded in a cooked format. This is because 
 the only way to create a mesh is from a <span class="NDLSystemFont">NxStream</span> 
 object but there is no way to create an <span class="NDLSystemFont">NxStream</span> 
 from an already cooked mesh. Hence, an application must extract a descriptor 
 for the mesh, cook it, and save the stream that results using the <span 
 class="NDLSystemFont"><a href="../../Reference/NiPhysX/NiPhysXMeshDesc.htm">NiPhysXMeshDesc::SetData</a></span> 
 function. </p>

<p>By default, mesh data is deleted after loading. The 
 <span class="NDLSystemFont"><a href="../../Reference/NiPhysX/NiPhysXProp.htm">NiPhysXProp::SetKeepMeshes</a></span> 
 function can be used to control this behavior on a scene before it is 
 saved. If the mesh data is not deleted, it can be saved again without 
 re-cooking.</p>

<h2>Limitations </h2>

<p>The streaming functionality does not save all possible 
 PhysX state. There are two reasons for this: the enormous number of classes 
 required to represent all possible PhysX objects and the inability to 
 extract some state using the PhysX API. Gamebryo PhysX only guarantees 
 that streaming can capture all the things that the art tool pipeline can 
 author. Specifically: </p>

<ul>
	
	<li>NxWheelShapes are not 
 saved. Nor are height field shapes.</li>
	
	<li>Only D6-type joints 
 are captured. </li>
	
	<li>PhysX object userData 
 is not captured. </li>
	
	<li>Continuous collision 
 detection (CCD) information is not captured. </li>
</ul>

<h2>Extending Snapshot Functionality </h2>

<p>The work of saving the PhysX scene is done by the "descriptor" 
 classes. See the documentation on <a href="Extending_PhysX_Streaming.htm">extending 
 descriptors</a> for information on how to extend the streaming functionality. 
 </p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
