<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>PhysX Utility Classes</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Build" content="PhysX" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>


<h1>PhysX Utility Classes</h1>

<p>The Gamebryo-PhysX integration provides a set of utility 
 classes for handling common interfacing tasks. </p>

<h2>Math Type Conversion </h2>

<p>The
 <span class="NDLSystemFont"><a href="../../Reference/NiPhysX/NiPhysXTypes.htm">NiPhysXTypes</a></span> 
 class and the
 <span class="NDLSystemFont"><a href="../../Reference/efdPhysX/efdPhysX__PhysXTypes.htm">
 efdPhysX::PhysXTypes</a></span> class provide static functions to convert various 
    math and color types between Gamebryo and PhysX formats. They also provide static constants 
 for PhysX identity transformations and zero vectors.</p>

<h2>Memory Allocation </h2>

<p>PhysX allows for the specification of a custom memory 
 allocator. By default, Gamebryo uses the
 <span class="NDLSystemFont">
 <a href="../../Reference/efdPhysX/efdPhysX__PhysXAllocator.htm">
 efdPhysX::PhysXAllocator</a></span> 
 class for this purpose. This redirects all memory calls to the allocator 
 that Gamebryo is currently using. In other words, if an application specifies 
 its own allocator to Gamebryo, then PhysX allocation will be through that 
 allocator also. </p>

<p>To specify your own allocator, implement the <span class="NDLSYstemFont">NxUserAllocator</span> 
 interface and pass a pointer to an object of that class to
 <span class="NDLSystemFont">
 <a href="../../Reference/efdPhysX/efdPhysX__PhysXSDKManager.htm">
 efdPhysX::PhysXSDKManager::Initialize</a></span>.</p>

<h2>Streaming </h2>

<p>PhysX requires streaming objects for various purposes, 
 most notably mesh cooking. Gamebryo provides two classes that implement 
 <span class="NDLSystemFont">NxStream</span>: <span class="NDLSystemFont"><a 
 href="../../Reference/NiPhysX/NiPhysXFileStream.htm">NiPhysXFileStream</a></span> 
 for streaming to and from files, and <span class="NDLSystemFont"><a href="../../Reference/NiPhysX/NiPhysXMemStream.htm">NiPhysXMemStream</a></span> 
 for streaming to memory buffers. </p>

<p>Note that these streams are not related to Gamebryo's 
 object streaming system. </p>

<h2>Debug Text Output </h2>

<p>PhysX allows for the specification of an output stream 
 for debug information such as parameter warnings or assert violations. 
 Gamebryo uses the <span class="NDLSystemFont"><a href="../../Reference/NiPhysX/NiPhysXUserOutput.htm">NiPhysXUserOutput</a></span> 
 class for this purpose. This redirects all the messages to <a href="../../Reference/NiSystem/Information_Log_and_System_Output_Routines.htm"><span 
 class="NDLSystemFont">NiOutputDebugString</span></a>. </p>

<p>To specify your own output stream, implement the <span 
 class="NDLSYstemFont">NxUserOutputStream</span> interface and pass a pointer 
 to an object of that class to
 <span class="NDLSystemFont">
 <a href="../../Reference/efdPhysX/efdPhysX__PhysXSDKManager.htm">
 efdPhysX::PhysXSDKManager::Initialize</a></span>. 
 </p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
