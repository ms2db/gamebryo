<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Introduction to NiPhysXFluid</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Build" content="PhysX" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<h1>Introduction to NiPhysXFluid &nbsp;</h1>

<p>NiPhysXFluid is a set of classes that interface PhysX 
 fluids with Gamebryo's particle systems. The art tools provide a mechanism 
 for converting a regular Gamebryo particle system into a fluid-driven 
 system. The fluid simulation is streamed using NiPhysXFluid classes. At 
 load-time, the PhysX content can be modified and instantiated. At runtime, 
 the positions and velocities of fluid particles are extracted into Gamebryo 
 particles ready for rendering. The whole process is largely transparent 
 to applications, although, if needed, applications can work entirely in 
 software to create the fluid simulation and tie it to a particle renderer. 
 </p>

<p>Fluid particles can be rendered as sprites or meshes 
 -- each offering different advantages. For example, sprites offer more 
 opportunity for transparent layering effects for transparent fluids, while 
 meshes can produce something approximating a fluid surface for opaque 
 fluids. </p>

<p>The remainder of the NiPhysXFluid documentation covers 
 these topics: </p>

<ul>
	
	<li><a href="The_NiPhysXFluid_System.htm">System 
 design</a> for NiPhysXFluid. </li>
	
	<li><a href="NiPhysXFluid_Streaming.htm">Streaming</a> 
 of NiPhysXFluid content. </li>
	
	<li><a href="Cloning_PhysX_Content.htm">Cloning</a> 
 of NiPhysXFluid content is handled the same as other Gamebryo-PhysX content. 
 </li>
	
	<li><a href="NiPhysXFluid_Runtime_Setup.htm">Runtime 
 setup</a> of NiPhysXFluid content. </li>
	
	<li><a href="Updating_an_NiPhysXPSFluid_System.htm">Updating</a> 
 a fluid system.</li>
</ul>

<p>There are several limitations of PhysX fluid support 
 at the time of Gamebryo-PhysX shipping. The <a href="Limitations_of_NiPhysXFluid.htm">limitations</a> 
 page gives a summary. </p>

<p>See the <a href="../../Learn/Demos/PhysX_Fluids_Demo_Overview.htm">PhysXFluids</a> 
 demo for an example of coding with fluids in Gamebryo. </p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
