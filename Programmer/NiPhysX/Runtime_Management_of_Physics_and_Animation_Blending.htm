<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Runtime Management of Physics and Animation Blending</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Build" content="PhysX" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<h1>Runtime Management of Physics and Animation Blending</h1>

<p>At runtime the <span class="NDLSystemFont"><a href="../../Reference/NiPhysX/NiPhysXSequenceManager.htm">NiPhysXSequenceManager</a></span> 
 object automatically enables and disables various objects, and changes 
 the state of PhysX actors. This is handled through the <a href="../../Reference/NiAnimation/NiSequenceData.htm#Callback_Objects">callback 
 functions</a> attached to every <span class="NDLSystemFont"><a href="../../Reference/NiAnimation/NiControllerSequence.htm">NiControllerSequence</a></span> 
 object that is associated with the manager.</p>

<p>There are three types of objects that might need attention 
 when a sequence is activated or de-activated:</p>

<ul>
	
	<li><a href="../../Reference/NiPhysX/NiPhysXDynamicSrc.htm"><span 
 class="NDLSystemFont">NiPhysXDynamicSrc</span></a> objects exist connecting 
 every scene graph node controlled by a known sequence to the PhysX actor 
 that goes with it. These objects must be active at any time that physics 
 is NOT in control, and only then.</li>
	
	<li><span class="NDLSystemFont"><a 
 href="../../Reference/NiPhysX/NiPhysXPoseBufferDest.htm">NiPhysXPoseBufferDest</a></span> 
 objects and <span class="NDLSystemFont"><a href="../../Reference/NiPhysX/NiPhysXAccumPoseBufferDest.htm">NiPhysXAccumPoseBufferDest</a></span> 
 objects exist for every transform evaluator in every sequence that is 
 physics controlled (i.e. those sequences identified to the <span class="NDLSystemFont">NiPhysXSequenceManager</span> 
 object during setup). These objects should only be active when the sequence 
 they are associated with is currently animating. That is, only when physics 
 is providing input to the motion.</li>
	
	<li><span class="NDLSystemFont">NxActor</span> 
 objects should be kinematic when they are not controlling the scene graph 
 object, and dynamic when they are actively controlling the object.</li>
</ul>

<p>The <span class="NDLSystemFont">NiPhysXSequenceManager</span> 
 object maintains the rules above as sequences are activated and deactivated. 
 No explicit action is required from the application beyond the usual update 
 of the scene graph, the actor manager and the physics simulation.</p>



<p>The <a href="Alternate_Methods_for_Mixing_Animation_and_Physics.htm">next 
 page</a> describes some alternate approaches to mixing animation and physics.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
