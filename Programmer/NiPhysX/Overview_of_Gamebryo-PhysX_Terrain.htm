<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Overview of Gamebryo-PhysX Terrain</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Build" content="PhysX" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>


  <h1>
    PhysX Terrain Integration
  </h1>
  <p>
    NiTerrainPhysX is a library allowing the GameBryo PhysX framework to interact with
    the terrain. This is done in a different project from the main NiTerrain project
    in order to keep both implementations separate and to allow users to use the NiTerrain
    library without PhysX.
  </p>
  <h2>
    NiTerrainPhysX overview
  </h2>
  <p>
    NiTerrainPhysX relies on the Gamebryo PhysX architecture and therefore requires
    a NiPhysXScene to have been created and initialized. The loading, creation and saving
    of Terrain PhysX Data is fully integrated with the terrain streaming system. This
    means the TerrainPhysX data can be saved and loaded from the same sector file using
    the provided NiTerrainPhysXDataPolicy.
  </p>
  <p>
    Loading / Unloading of the PhysX data will happen for sectors when the terrain streaming
    framework is processing custom data policies. The NxActors will then be created
    in a thread safe position and when the associated NiPhysXScene is not in between
    a Simulation / Fetch step. The list of actors for each sector is managed by the
    TerrainPhysX library. This new integration with the terrain streaming allows for
    the PhysX data to be loaded, unloaded, built (if missing) or deleted the same way
    sector data is.
  </p>
  <p>
    The terrain PhysX data can also make use of material metadata to make different
    types of materials have different physical properties. To do this, each material
    on a terrain is used to define a NxMaterial. The physical properties of a particular
    material are defined as material meta data. The currently supported meta data keys
    include:
  </p>
  <ul>
    <li>Float NX_RESTITUTION: defines the restitution coefficient for this material.</li>
    <li>Float NX_STATICFRICTION: defines the static friction for this material. </li>
    <li>Float NX_DYNAMICFRICTION: defines the dynamic friction for this material. </li>
  </ul>
  <p>
    The interface to include NiTerrainPhysX functionality in an application is provided
    by three classes, allowing the creation and usage of PhysX data:
  </p>
  <ul>
    <li>NiTerrainPhysXUtils: provides functionality to create, save and load PhysX data.</li>
    <li>NiTerrainPhysXContactModify: implements an example of <span class="NDLSystemFont">
      NxUserContactModify</span>. This allows the modification of contact modifiers during
      the PhysX contact response calculation. </li>
    <li>NiTerrainPhysXDataPolicy provides the interfacing with the terrain streaming system.
      This is a default implementation.</li>
  </ul>
  <p>
    The exact usage of these classes is described further on in this documentation and
    class references are available.
  </p>
  <p>
    NOTE: It is important to note that PhysX does not recommend the use of a NxUserContactModify
    as it will greatly impact the performance of the simulation.
  </p>
  

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
