<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Mixing Animation and Physics in Gamebryo</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Build" content="PhysX" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<h1>Mixing Animation and Physics in Gamebryo</h1>

<p>There are many situations where you might wish to have 
 an object or character that is animated part of the time, and physics-controlled 
 (or <em>physical</em>) part of the time. 
 The classic example is an animated character that switches to rag-doll 
 for a death sequence. You might even want a character that is part-animated 
 and part physical, such as a character with an animated body but an injured 
 arm that is physical.</p>

<p>Gamebryo-PhysX integration supports transitions and 
 general blends between animated (key-framed) control and physics control. 
 Each active sequence owns an <span class="NDLSystemFont"><a href="../../Reference/NiAnimation/NiPoseBuffer.htm">NiPoseBuffer</a></span> 
 to which the <span class="NDLSystemFont"><a href="../../Reference/NiAnimation/NiControllerSequence.htm">NiControllerSequence</a></span> 
 writes its animated data for a given instant of time. Effectively, this 
 pose buffer contains a time-based snapshot (or pose) of the animated sequence. 
 Physics controlled sequences write their physics derived values directly 
 to their sequence's pose buffer via <span class="NDLSystemFont"><a href="../../Reference/NiPhysX/NiPhysXPoseBufferDest.htm">NiPhysXPoseBufferDest</a></span> 
 and <span class="NDLSystemFont"><a href="../../Reference/NiPhysX/NiPhysXAccumPoseBufferDest.htm">NiPhysXAccumPoseBufferDest</a></span> 
 objects. The corresponding evaluator channels in the sequence are temporarily 
 disabled so the physics values within the pose buffer are not overwritten. 
 The pose buffer data is blended with other active sequences on the character, 
 and the resulting data is propagated to the scene graph.</p>

<p>Anything you can do with two key-framed animations, 
 you can also do with a key-framed animation and physics input. The only 
 exceptions are actions that depend on implicit "end of sequence" 
 events, because physics never ends. Some cases in which animation and 
 physics are layered or blended may also fail. See the <a href="../../Tools/animation_tool/Introduction_to_PhysX_in_Animation_Tool.htm">Animation 
 Tool</a> documentation for details.</p>

<p>There are two main tasks in using PhysX with the animation 
 system: attaching PhysX actors to pose buffer data locations, and activating 
 and de-activating certain objects as animation sequences start and stop. 
 For example, to set up a rag-doll character so that it can transition 
 from animation to physics, you need to create connections from all the 
 PhysX bones to the pose buffer locations driven by sequence evaluators, 
 from the scene graph bones to the PhysX actor (so that the actors will 
 be kinematically controlled while the character is animated), and you 
 need to activate the physics control at the time that character switches 
 to rag-doll.</p>

<p>These tasks are automated by the <span class="NDLSystemFont"><a 
 href="../../Reference/NiPhysX/NiPhysXSequenceManager.htm">NiPhysXSequenceManager</a></span> 
 class, so that applications can set up a rag-doll with only a few function 
 calls and have the run-time behavior automatically managed.</p>

<p>The <a href="Preparing_to_Add_Physics_to_an_Animated_Character.htm">next 
 page</a> describes the set up procedure for a physically controlled character.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
