<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>How categories work</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>How categories work</h1>

<p>Categories are used by the message system to connect a set of
data producers to a set of data consumers. The design of the
policy for allocating and setting category values can have a
large impact on system performance. For example, you can use
categories to reduce the number of entities that need to be
considered as enemies in an AI planning loop. Or, you can use
categories to provide an exact list of enemies that might be hit
by an area of effect grenade. Instead of broadcasting a
notification message, a message can be directed to the exact
system services that are affected.</p>

<p><span class="NDLSystemFont">efd::Category</span> is a subclass
of <span class="NDLSystemFont">efd::UniversalID</span>, which is
a 64-bit unique identifier. The message system uses Categories to
determine where to deliver messages. The underlying system is independent of the
policy that is used to construct category values. The lowest
level message system does not care what 64-bit value is used for
Subscribe or Send. The system just performs map lookups and
integer compares to determine if a consumer has subscribed to the
Category on which a specific message was sent.</p>

<p>For LightSpeed-created internal "system" category values, the following
policy is used, where the bits within a Category are:</p>

<ul>
    <li>b0 (1 bit)&mdash;System bit. Reserved, must be set to 1.</li>

    <li>b1-b2 (2 bits)&mdash;Universal ID type. These are
    encapsulated by the IdType enum. Some values are reserved for
    routing to entity ids and system services.</li>

    <li>b3-b4 (2 bits)&mdash;Reserved system usage bits.</li>

    <li>b5-b36 (32 bits)&mdash;Net ID. When the LightSpeed system
    constructs unique categories, these bits can be set to the
    NetService ID which has a unique value within a set of
    processes that are interconnected by the NetService. Some Net
    ID values are reserved.</li>

    <li>b37-b63 (27 bits)&mdash;Base ID. LightSpeed often uses the
    system service ID here for routing message to a specific
    system service instance. Reserved values are defined in the
    autogenerated <span class="NDLSystemFont">IDs.h</span> files based on <span class="NDLSystemFont">.enum</span> input files</li>
</ul>

<p>For category values that are determined by custom applications, the
following policy must be used:</p>

<ul>
    <li>b0 (1 bit)&mdash;System bit. Reserved, must be set to 1.</li>

    <li>b1-b2 (2 bits)&mdash;Universal ID type. These are
    encapsulated by the IdType enum. For application determined
    categories, this should be set to 2 (10 binary) (using the
    UID enums).</li>

    <li>b3-b36 (34 bits)&mdash;These are open for any use by the
    application.</li>

    <li>b37-b42 (6bits)&mdash;BaseID range defined in IDs.h. For
    application determined categories these bits must equal 0x30,
    and constructed using the macro <span class=
    "NDLSystemFont">EE_DECLARE_EXTERNAL_BASEID</span>.</li>

    <li>b43-b63 (21 bits)&mdash;These are open for any use by the
    application.</li>

    <li>It may be easier to picture this as a range limitation:
    ids in b37-b63 (27 bits) must be in the range
    0x06000000-0x060FFFFF to not collide with system-reserved
    ids.</li>
</ul>

<p>The reserved and fixed-value bits are set automatically when using application 
    category construction mechanisms such as CreateApplicationCategory. You should use UniversalID, ClassID, and the macros in <span class="NDLSystemFont">IDs.h</span> to
construct category values that do not conflict with system
categories.</p>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
    <li><a href="category_overview.htm">Categories
    overview</a></li><!-- <li><a href="category_how_relates_efr.htm">How categories relate to the Emergent Game Framework</a></li> -->

    <li><a href="../messages/message_overview.htm">Messages
    overview</a></li>

    <li><a href="category_best_practice.htm">Best practices for
    working with categories</a></li>

    <li><a href="category_examples.htm">Category
    examples</a></li>

    <li><a href="category_creating.htm">Creating
    categories</a></li>

    <li><a href="category_performance.htm">Category
    performance</a></li>

    <li><a href=
    "../../Reference/efd/efd__Category.htm">efd::Category</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
