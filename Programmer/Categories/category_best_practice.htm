<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Best practices for working with categories</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Best practices for working with categories</h1>

<p>Emergent recommends the following best practices when you are
working with categories:</p>

<ul>
    <li>Categories are very useful when querying for filtered
    Entity sets and identifying groups of Entities on which to
    invoke a Behavior.</li>

    <li>The use of categories is not limited to directing
    messages or decomposing geometry. Other more abstract and
    transient concepts can be implemented with Categories. For
    example, LeaderNPCs, NewbiePlayers, SpawnerEntities,
    damageableEntities, CanProvideNutrition, and so on.</li>

    <li>In general, minimize the number of handlers (consumers)
    to which a message is delivered. You can achieve this
    minimization by increasing the number of Categories in use.
    With more Categories, when a producer calls Send for a given
    message, all interested and only interested consumers will
    receive it. Being less specific with category mapping would
        unnecessarily deliver the message to handlers that will have to identify
    then discard the message.</li>

    <li>Use fixed, well known Categories only for messages that every
    subscriber to that Category will want to handle. Ideally,
    these would be declared in a <span class=
    "NDLSystemFont">.enum</span> file and thus have a readable,
    meaningful C++ and optionally a script symbol associated with
    it.</li>

    <li>For more complex situations, category values can be
    computed. The producer and consumer would use the same
    algorithm to compute the category used to make the
    producer to consumer connection. For example, which room is an
    Entity in. </li>
    <li>In very high performance situations, dynamic
    recategorization may be desirable.</li>

    <li>Handlers should unsubscribe from Categories that they are
    no longer interested in.</li>

    <li>For point to point communication, use private, targeted
    Categories for request and response messages. A service that
    takes requests has a Category to which only that
    service subscribes. The request should contain a private
    response Category that only the requestor subscribes to. When
    the Service responds, it should respond only to the requestor
    on the specified private Category.</li>

    <li>kCAT_LocalMessage is a category used to broadcast a
    message to handlers within the current process. It
    can be very expensive to use and should be avoided for anything other than 
        prototyping.</li>

    <li>If you find yourself calling Send more than once with the
    same message, then you might have too many Categories. If
    this is the case, consider decomposing your application to
    use fewer Categories. However, there may be times when
    needing to call send multiple times is a better solution than
    using fewer categories resulting in more handling of
        unwanted messages.</li>

    <li>Categories are larger than a pointer and used frequently.
    Functions expecting a Category should use a reference or
    const reference.</li>

    <li>For a single player game, expect to use 100-1000
    categories.</li>
    <li>Consider reserving a section of application category space for a classification 
        (for example: b43-b63). It can be useful to tag different categorization 
        policies, and to separate use by different application system to avoid unwanted 
        collisions.</li>
</ul>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
    <li><a href="category_overview.htm">Categories
    overview</a></li>

    <li><a href="category_how_work.htm">How categories
    work</a></li><!-- <li><a href="category_how_relates_efr.htm">How categories relate to the Emergent Game Framework</a></li> -->

    <li><a href="category_examples.htm">Category
    examples</a></li>

    <li><a href="category_performance.htm">Tuning category
    performance</a></li>

    <li><a href="category_creating.htm">Creating
    categories</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>
</html>