<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Creating categories</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Creating categories</h1>

<p>The Category constructor call takes three parameters:</p>

<ul>
    <li>efd::UniversalID::ExpectedChannelUsage usage</li>

    <li>efd::UInt32 netID</li>

    <li>efd::UInt32 baseID (Only the bottom 27 bits are
    used)</li>
</ul>

<p>For example, to create a category that can be used to address
the asset locator system service, Gamebryo LightSpeed uses this code:</p>

<pre>
efd::Category kCAT_AssetClientPublicCategory = efd::Category(
        efd::UniversalID::ECU_EventChannel, // ExpectedChannelUsage
        kNetID_ISystemService,              // netID 
        AssetLocatorService::CLASS_ID));    // baseID
</pre>

<p>Where:</p>

<ul>
    <li>ExpectedChannelUsage is a hint for how the channel should
    be used and ECU_EventChannel indicates that the channel
    should have a single producer but many subscribers. This is
    not enforced by the framework, but it can be helpful during
    testing and debugging.</li>

    <li>netID is a unique 32-bit value. For more information
    about this value, see <a href="category_how_work.htm">How
    categories work</a>. In this particular example, the service
    that is creating the channel is part of the Emergent Game
    Framework. As such, it uses a predefined constant net ID.
    Common practice is to get the net ID from the running
    NetService; a net ID that is assigned by the
    ChannelManagerService.</li>

    <li>baseID is a unique identifier within the process. This is
    typically the base ID part of an entity ID (where the entity
    ID is being used as a channel ID), or as in the example, the
    CLASS_ID for whatever service owns the channel.</li>
</ul>

<p>The symbol is named like any other variable. All constant
channel names in the Emergent Game Framework are prefixed with
"kCAT_".</p>

<p class="NDLHeadingProcedure">To create and use a category to
send a message directly to a custom system service</p>

<ol>
    <li>Create the category.
        <pre>
efd::Category kCAT_MyCustomCategory =
    efd::Category(
        efd::ECU_Any, 
        pServiceManager-&gt;GetSystemServiceAs&lt;NetService&gt;()-&gt;GetNetID(),
        MyCustomService::CLASS_ID));
</pre>
    </li>

    <li>Subscribe consumers to the category. A consumer can be
    any class that inherits IBase.
        <pre>
class MyCustomService : IBase
{
  .
  .
  .
}

SmartPointer&lt;MyCustomService&gt; spMyCustomService = EE_NEW MyCustomService();
MessageService* pMessageService = m_pServiceManager-&gt;GetSystemServiceAs&lt;MessageService&gt;();
pMessageService-&gt;Subscribe(spMyCustomService, kCAT_MyCustomCategory);
</pre>
    </li>

    <li>Add message handling methods to the consumers for any
    messages that they need to receive.
        <pre>
 void MyCustomService::HandleMyCustomMessage(const efd::IMessage* pMessage, 
    efd::Category targetChannel)
</pre>
    </li>

    <li>Use EE_HANDLER* macros to bind messages to message
    handlers.
        <pre>
EE_HANDLER_WRAP(MyCustomService, HandleMyCustomMessage,
    efd::IMessage, kMSGID_MyCustomMessageType);
</pre>
    </li>

    <li>Send a message from a producer. The message will
    automatically get routed to whatever consumers are subscribed
    to the channel. If they have any bound handlers for that
    message type, the message service will then call those
    handlers.
        <pre>
SmartPointer&lt;IMessage&gt; spMessage = EE_NEW MessageWrapper&lt;IMessage, kMSGID_MyCustomMessageType&gt;;
pMessageService-&gt;SendLocal(spMessage, kCAT_LocalMessage);
</pre>
    </li>
</ol>

<h4>LUA example</h4>

<p>In Lua, you can create and use a category to send a behavior invocation request to entities in one room in a game:</p>

<ol>
    <li>Create a custom category corresponding to room 101.
        <pre>
room101 = BehaviorAPI.CreateApplicationCategory(101)
</pre>
    </li>

    <li>Have three Entities subscribe to receive Behavior
    invocations sent to that category.
        <pre>
BehaviorAPI.SubscribeToCategory(entOne, room101)
BehaviorAPI.SubscribeToCategory(entB, room101)
BehaviorAPI.SubscribeToCategory(entFinally, room101)
</pre>
    </li>

    <li>Cause each of the three entities to execute the behavior
    OnDetonation.
        <pre>
BehaviorAPI.SendEvent(room101, "OnDetonation", args)
</pre>
    </li>
</ol>

<p>For more details on using custom messages, see <a href=
"../Messages/message_custom_creating.htm">Creating custom message
types</a>.</p>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
    <li><a href="category_overview.htm">Categories
    overview</a></li>

    <li><a href="category_how_work.htm">How categories
    work</a></li><!-- <li><a href="category_how_relates_efr.htm">How categories relate to the Emergent Game Framework</a></li> -->

    <li><a href="category_best_practice.htm">Best practices for
    working with categories</a></li>

    <li><a href="category_examples.htm">Category
    examples</a></li>

    <li><a href="category_performance.htm">Tuning category
    performance</a></li>

    <li><a href=
    "../../Reference/efd/efd__Category.htm">efd::Category</a></li>

    <li><a href=
    "../../Reference/efd/efd__UniversalID.htm#classefd_1_1_universal_i_d_1ee7a8d80b484a2f2f2936bc2c738156a">
    efd::UniversalID::ExpectedChannelUsage</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->


</body>

</html>
