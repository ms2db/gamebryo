<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>User Defined Data</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>User Defined Data</h1>

<p>NSF files (and their corresponding NSBs) support the concept
of user-defined data blocks at the shader, implementation, and
pass levels. This allows customers to insert their own data types
to be used when extending the system through derived <span class=
"NDLSystemFont"><a href=
"../../Reference/NiBinaryShaderLib/NiBinaryShader.htm">NiBinaryShader</a></span>
instances without requiring them to modify the lex and grammar
files used to create the NSF parser.</p>

<p>User-defined data can be declared in a uniquely named block.
There may be multiple user-defined data blocks within a single
shader, but each specific user-defined data block must be
declared only once within its scope. User-defined data blocks
have the following layout, and can be declared at the Shader,
Implementation, or Pass scope:</p>
<pre>
UserDefinedData NameOfUDDBlock
{
    [User-defined data entry]
    ...
}
</pre>

<p>The entries for a user-defined data block will take one of the
following two formats:</p>

<p><span class="NDLSystemFont">NameOfEntry0  = &lt;data 0&gt;<br>
"Quoted Name" = &lt;data *&gt;</span></p>

<p>For general information on this topic, please see <a href=
"Extending_NSF_NSB_Shaders.htm#UserDefinedData%20in%20an%20NSF">UserDefinedData
in an NSF</a>.</p>

<p>The following data types are supported:</p>

<!--(Table)=========================================================-->
<table>
    <thead>
        <tr>
            <th>Data Type</th>

            <th>Notes</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><span class="NDLSystemFont">int/unsigned
            int</span></td>

            <td>Stored as unsigned int in the binary. When
            retrieving the data, you must cast them properly if
            you are treating them as integers.</td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">boolean</span></td>

            <td> </td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">float</span></td>

            <td>1,2,3,4,8,9,12, and 16 floats are supported -
            comma separated.</td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">string/quoted
            string</span></td>

            <td>When retrieving a string data type, you must use
            the data size to determine the string length with the
            terminating zero. This is NOT stored as part of the
            data.</td>
        </tr>
    </tbody>
</table>

<p>The following snippet is an example data block containing each
type of data supported:</p>
<pre>
UserDefinedData ExampleBlock
{
    Test_Integer      = 1234
    Test_Boolean      = true
    Test_1Float       =  0.0
    Test_2Floats      =  0.0, 1.0
    Test_3Floats      =  0.0, 1.0, 2.0
    Test_4Floats      =  0.0, 1.0, 2.0, 3.0
    Test_8Floats      =  0.0, 1.0, 2.0, 3.0,
                         4.0, 5.0, 6.0, 7.0
    Test_9Floats      =  0.0, 1.0, 2.0,
                         3.0, 4.0, 5.0,
                         6.0, 7.0, 8.0
    Test_12Floats     =  0.0, 1.0, 2.0,
                         3.0, 4.0, 5.0,
                         6.0, 7.0, 8.0
                         9.0,10.0,11.0
    Test_16Floats     =  0.0, 1.0, 2.0, 3.0,
                         4.0, 5.0, 6.0, 7.0,
                         8.0, 9.0,10.0,11.0,
                        12.0,13.0,14.0,15.0
    Test_String       = StringTest
    Test_QuotedString = "Quote Test"
    "Quoted Name"     = "This is a test string"
}
</pre>

<p>When an <span class="NDLSystemFont">NiBinaryShader</span> (or
a class derived from it) is returned via the <span class=
"NDLSystemFont">NSBShaderLib</span>, the user-defined data can be
accessed via the <span class="NDLSystemFont"><a href=
"../../Reference/NSBShaderLib/NSBUserDefinedDataSet.htm">NSBUserDefinedDataSet</a></span>
and <span class="NDLSystemFont"><a href=
"../../Reference/NSBShaderLib/NSBUserDefinedDataBlock.htm">NSBUserDefinedDataBlock</a></span>
interfaces in the <span class="NDLSystemFont"><a href=
"../../Reference/NiBinaryShaderLib/Introduction.htm">NiBinaryShaderLib</a></span>
library. Also refer to the <span class="NDLSystemFont"><a href=
"../../Reference/NiBinaryShaderLib/NiBinaryShader.htm#NiBinaryShader::GetShaderUserDefinedDataSet">
NiBinaryShader::GetShaderUserDefinedDataSet</a></span>,
<span class="NDLSystemFont"><a href=
"../../Reference/NiBinaryShaderLib/NiBinaryShader.htm#NiBinaryShader::GetImplementationUserDefinedDataSet">
NiBinaryShader::GetImplementationUserDefinedDataSet</a></span>,
and <span class="NDLSystemFont"><a href=
"../../Reference/NiBinaryShaderLib/NiBinaryShader.htm#NiBinaryShader::GetPassUserDefinedDataSet">
NiBinaryShader::GetPassUserDefinedDataSet</a></span>
functions.</p>

<p>D3D10, D3D11, or PS3 applications should use similar interfaces in the appropriate renderer-specific <span class="NDLSystemFont">NiBinaryShaderLibrary</span> class.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
