<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Passes</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>


<h1>Passes</h1>

<p>Within the scope of an implementation, render passes 
 required to realize the desired implementation results must be declared. 
 An implementation can have any number of passes the shader author desires. 
 Of course, performance considerations must be made when setting up your 
 passes  the more passes, the bigger the performance hit you will incur 
 while rendering your object. Passes must be placed in the implementation 
 in the order in which they are to be rendered  that is how the engine 
 will treat them.</p>

<p>Each pass may be assigned a name in the NSF file. That 
 name is used for internal documentation and debugging purposes only; it 
 will not have any impact on how the pass itself is used.</p>

<p>There may be multiple passes within a single implementation, 
 but each specific pass must be declared only once. Passes have the following 
 layout within an implementation:</p>

<pre>
// Pass
Pass OPTIONAL_PassName
{
    // OPTIONAL block(s) of user-defined data. These allow developers
    // to extend the NSF format without messing with the lex/grammar
    // files.
    UserDefinedData NameOfUDDBlock
    {
        ... Data entries
    }
    UserDefinedData NameOfUDDBlock2
    {
        ... Data entries
    }
 
    // OPTIONAL 'Local' render states
    RenderStates
    {
        // Render state settings
    }
 
    // OPTIONAL Vertex Shader Constant Map
    Constantmap OPTIONAL_ConstantMapName1
    {
        ShaderType = Vertex
        // Vertex Shader Constant mappings
    }
 
    // OPTIONAL Vertex Shader Program
    ShaderProgram
    {
        ShaderType = Vertex
        Program = VertexShader.hlsl
        EntryPoint = VSMain
        ShaderTarget = vs_4_0
    }

    // OPTIONAL Geometry Shader Constant Map
    ConstantMap OPTIONAL_ConstantMapName2
    {
        ShaderType = Geometry
        // Geometry Shader Constant mappings
    }
 
    // OPTIONAL Geometry Shader Program
    ShaderProgram
    {
        ShaderType = Geometry
        Program = GeometryShader.hlsl
        EntryPoint = GSMain
        ShaderTarget = gs_4_0
    }
 
    // OPTIONAL Stream Output Buffers
    StreamOutput
    {
        // Stream output information
    }
    
    // OPTIONAL Pixel Shader Constant Map
    ConstantMap OPTIONAL_ConstantMapName1
    {
        ShaderType = Pixel
        // Pixel Shader Constant mappings
    }
 
    // OPTIONAL Pixel Shader Program
    ShaderProgram
    {
        ShaderType = Pixel
        Program = PixelShader.hlsl
        EntryPoint = PSMain
        ShaderTarget = ps_4_0
    }
    
    // OPTIONAL Stage 0
    Stage 0 OPTIONAL_StageName1
    {
        // Texture stage settings
        // See section below for details
    }
    ...
    // OPTIONAL Stage N
    Stage N OPTIONAL_StageNameN
    {
        // Texture stage settings
        // See section below for details
    }
 
    // OPTIONAL Sampler 0
    Sampler 0 OPTIONAL_SamplerName1
    {
        // Sampler settings
        // See section below for details
    }
    ...
    // OPTIONAL Sampler M
    Sampler M OPTIONAL_SamplerNameM
    {
        // Sampler settings
        // See section below for details
    }
 
    // OPTIONAL Texture 0
    Texture 0 OPTIONAL_TextureName1
    {
        // Texture settings
        // See section below for details
    }
 
    // OPTIONAL Texture T
    Texture T OPTIONAL_TextureNameT
    {
        // Texture settings
        // See section below for details
    }
}
</pre>

<p>Note that the settings declared in a pass are not guaranteed 
 to persist from pass to pass. For this reason, if there are some settings 
 that you want to ensure are present in all passes, they must be set separately 
 for every pass. </p>

<p>Each section that makes up a pass is detailed in the 
 following sections.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
