<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Colorize.NSF</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>


<h1>Colorize.NSF</h1>

<p>The first example is a simple shader file that uses 
 an <span class="NDLSystemFont"><a href="../../Reference/NiMain/NiColorExtraData.htm">NiColorExtraData</a></span> 
 instance with the key string "SelectedColor" attached to the 
 object being rendered to shade a textured object. Note that there are 
 two implementations available, which provide a version of the shader that 
 runs on fully shader-capable hardware and another version that can be 
 run on hardware that can only handle a vertex shader.</p>

<p>The NSF file contents are shown below:</p>

<pre>
NSFShader Colorize
{
    "This shader is a simple example. "
    "It applies the base map modulated by SelectedColor."
    // Attribute list
    Attributes
    {
        Attrib_Color
            SelectedColor
            Artist
            1.0,0.0,0.0,0.5
            [(0.0,0.0,0.0,0.0)  (1.0,1.0,1.0,1.0)]
    }
 
    // Implementation
    Implementation VS11_PS11
    {
        "This implementation is intended for hardware "
        "that supports Vertex Shader v1.1 and Pixel Shader v1.1."
        
        // Requirements for this implementation
        Requirements
        {
            Platform            = DX9|XENON
            VSVersion           = v1.1
            UserVersion         = v0.0
            PSVersion           = v1.1
            UsesNiRenderState   = true
        }
        
        // Semantic Adapter Table
        SemanticAdapterTable
       {
        }
 
        RenderStates
        {
            Lighting            = false
        }
        // First pass
        Pass Pass0
        {
            // Vertex shader program
            VSProgram   "Colorize.vsh"
            // Vertex Shader constant map
            VS_Constantmap
            {
                CM_Defined      WorldViewProjTranspose  0   0
                CM_Attribute    SelectedColor           4   1   0
            }
            
            // Sampler stage 0
            Sampler 0   Sampler0
            {
                TSS_Texture     = NTM_Base
                TSAMP_AddressU  = TADDR_Wrap
                TSAMP_AddressV  = TADDR_Wrap
                TSAMP_AddressW  = TADDR_Wrap
                TSAMP_MagFilter = TEXF_Linear
                TSAMP_MinFilter = TEXF_Linear
                TSAMP_MipFilter = TEXF_None
            }
            
            PSProgram "Colorize.psh"
        }
    }
    
    // Implementation
    Implementation VS11
    {
        "This implementation is intended for hardware
         that supports Vertex Shader v1.1"
        
        // Requirements for this implementation
        Requirements
        {
            Platform            = DX9
            VSVersion           = v1.1
            UserVersion         = v0.0
            PSVersion           = v0.0
            UsesNiRenderState   = true
        }
        
        // Semantic Adapter Table (specifies the mapping from mesh to shader varying params)
        SemanticAdapterTable
       {
3 POSITION 0 POSITION 0 0
3 NORMAL 0 NORMAL 0 0
2 TEXCOORD 0 TEXCOORD 0 0
        }
 
        RenderStates
        {
            Lighting            = false
        }
        // First pass
        Pass Pass0
        {
            // Vertex shader program
            VSProgram   "Colorize.vsh"
            // Vertex Shader constant map
            VS_Constantmap
            {
                CM_Defined      WorldViewProjTranspose  0   0
                CM_Attribute    SelectedColor           4   1   0
            }
            
            // Sampler stage 0
            Sampler 0   Sampler0
            {
                TSS_ColorOp     = TOP_Modulate
                TSS_ColorArg1   = TA_Texture
                TSS_ColorArg2   = TA_Diffuse
                TSS_AlphaOp     = TOP_Disable
                TSS_Texture     = NTM_Base
            }
            
            // Sampler stage 0
            Sampler 0   Sampler0
            {
                TSAMP_AddressU  = TADDR_Wrap
                TSAMP_AddressV  = TADDR_Wrap
                TSAMP_AddressW  = TADDR_Wrap
                TSAMP_MagFilter = TEXF_Linear
                TSAMP_MinFilter = TEXF_Linear
                TSAMP_MipFilter = TEXF_None
            }
            
            PSProgram "Colorize.psh"
        }
    }
    
    // Implementation
    Implementation VS11
    {
        "This implementation is intended for hardware
         that supports Vertex Shader v1.1"
        
        // Requirements for this implementation
        Requirements
        {
            Platform            = DX9
            VSVersion           = v1.1
            UserVersion         = v0.0
            PSVersion           = v0.0
            UsesNiRenderState   = true
        }
        
        // Semantic Adapter Table (specifies the mapping from mesh to shader varying params)
        SemanticAdapterTable
       {
3 POSITION 0 POSITION 0 0
3 NORMAL 0 NORMAL 0 0
2 TEXCOORD 0 TEXCOORD 0 0
        }
 
        RenderStates
        {
            Lighting            = false
        }
        // First pass
        Pass Pass0
        {
            // Vertex shader program
            VSProgram   "Colorize.vsh"
            // Vertex Shader constant map
            VS_Constantmap
            {
                CM_Defined      WorldViewProjTranspose  0   0
                CM_Attribute    SelectedColor           4   1   0
            }
            
            // Texture stage 0
            Stage 0 Stage0
            {
                TSS_ColorOp     = TOP_Modulate
                TSS_ColorArg1   = TA_Texture
                TSS_ColorArg2   = TA_Diffuse
                TSS_AlphaOp     = TOP_Disable
                TSS_Texture     = NTM_Base
            }
            
            // Sampler stage 0
            Sampler 0   Sampler0
            {
                TSAMP_AddressU  = TADDR_Wrap
                TSAMP_AddressV  = TADDR_Wrap
                TSAMP_AddressW  = TADDR_Wrap
                TSAMP_MagFilter = TEXF_Linear
                TSAMP_MinFilter = TEXF_Linear
                TSAMP_MipFilter = TEXF_None
            }
        }
    }
}
</pre>

<p>The vertex shader program used, <span class="NDLSystemFont">Colorize.vsh</span>, is shown below to allow you to understand the complete effect setup with the <span class="NDLSystemFont">Colorize.NSF</span> file:</p>

<pre>
; Shader version 1.1
vs_1_1
dcl_position        v0
dcl_normal          v3
dcl_texcoord        v7
; Transform position to clip space and output it
m4x4 oPos, v0, c0
; Just copy the color (decal)
; Use the passed in constant for the color (red)
mov oD0, c4
; Just copy the texture coords
mov oT0, v7
</pre>

<p>There is also a pixel shader program, <span class="NDLSystemFont">Colorize.psh</span>, which is used when pixel shader program-capable hardware is used. The contents of this shader program are:</p>

<pre>
ps_1_1
; Multiply the diffuse color by the texture
tex t0
mul r0, v0, t0
</pre>

<p>That's all there is to it. The vertex shader program transforms the vertex, passing the color and texture coordinates directly through to the rasterizer. Remember in the <span class="NDLSystemFont">VS_ConstantMap</span> section, we mapped the object's "SelectedColor" extra data to c4 of the shader constant registers. This color is the color that is passed to the rasterizer, and utilized in the pixel shader or the fixed-function texture modulation of the texture stage, completing the desired effect.</p>

<p>When the <span class="NDLSystemFont">NSFParserLib</span> 
 processes this shader file, it will generate a corresponding <span class="NDLSystemFont">Colorize.NSB</span> 
 file which contains the binary version of the shader.</p>

<p>A screenshot of this effect, with the SelectedColor 
 set to red, is shown below:</p>


<div class="NDLFigureContainer">
    <img src="./images/image002.jpg" width="216" height="171" />
    <p class="NDLFigureCaption">The Colorize shader applied to a cube</p>
</div>

<p>Not the most exciting effect in the world, but it does 
 demonstrate the system nicely!</p>


<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
