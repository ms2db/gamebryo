<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>RenderStates in a Pass</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>


<h1>RenderStates in a Pass</h1>

<p>The <a href="RenderStates.htm">RenderStates</a> section above described the layout for render states in an NSF file. </p>

<p>There should be no more than one render state section 
 in an pass, although this section does not conflict with any global render 
 states declared in the implementation. A render state section will look like 
 this:</p>

<pre>
RenderStates
{
    [Render state entry]
    ...
}
</pre> 

<p>When defined in a pass, the render states are considered 
 to be 'local'  ie, they are applied only for that pass. It is important 
 to note, however, that if you have a render state entry (that is NOT saved) 
 in a given pass n, and do not have the same render state declared in the 
 next pass, n + 1, then said state will be the same for pass n+1 as it 
 was for pass n.</p>

<p>For example, say we have the following render state 
 grouping defined for pass 1 of an implementation:</p>

<pre>
Pass1
{
    // Only showing the RenderStates block for the example!
    RenderStates
    {
        AlphaBlendEnable = true
        Zenable          = ZB_true
    }
}
</pre> 

<p>and this render state grouping defined for pass 2:</p>

<pre>
Pass2
{
    // Only showing the RenderStates block for the example!
    RenderStates
    {
        Zenable          = ZB_false
    }
}
</pre>

<p>The first pass will enable alpha blending by setting 
 the <span class="NDLSystemFont">D3DRS_ALPHABLENDENABLE</span>
 state to <span class="NDLSystemFont">true</span>. 
 It also enables depth buffering by setting the <span class="NDLSystemFont">D3DRS_ZENABLE</span> state 
 to <span class="NDLSystemFont">D3DZB_TRUE</span>.</p>

<p>The second pass will disable depth buffering by setting 
 the <span class="NDLSystemFont">D3DRS_ZENABLE</span> state 
 to <span class="NDLSystemFont">D3DZB_FALSE</span>. However, 
 since the second pass did not set anything for <span class="NDLSystemFont">D3DRS_ALPHABLENDENABLE</span>, 
 that state will remain set to what it was prior to pass 2, which in this 
 call means it is still enabled. </p>

<p>As you can see, this arrangement will enable you to 
 cascade render states. You can even cascade states starting at the 'global' 
 states that are defined at the implementation level.</p>

<p>However, if the AlphaBlendEnable state had been declared 
 as follows,</p>

<p><span class="NDLSystemFont">AlphaBlendEnable = true Save</span></p>

<p>the state would have been restored to its value prior 
 to the first pass being rendered.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
