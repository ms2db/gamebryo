<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Shader Program Formats</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<h1>Shader Program Formats</h1>

<p>Shader programs can be used in Gamebryo in the following 
 formats:</p>

<ul>
	
	<li>Assembly code</li>
	
	<li>Compiled assembly code</li>
	
	<li>Microsoft HLSL</li>
	
	<li>nVidia Cg</li>
</ul>

<p>When a shader program is created in Gamebryo, the data 
 can either exist as a file or as a buffer in memory. If the shader program 
 is in a file, the extension of the file name is used by Gamebryo to determine 
 which format to try and read the data in. If the shader program is in 
 a memory buffer, a character string that represents what extension a file 
 would have had must be passed into the Gamebryo shader system in order 
 to indicate how the data should be interpreted.</p>

<p>Each shader program format has a default extension, 
 as described below. These default extensions can be remapped using <span 
 class="NDLSystemFont">NiD3DShaderProgramFactory::RegisterShaderCreator</span>, 
 so that applications can specify their own extensions. Refer to the documentation 
 of <span class="NDLSystemFont"><a href="../../Reference/NiDX9Renderer/NiD3DShaderProgramFactory.htm">NiD3DShaderProgramFactory</a></span> 
 for more details.</p>

<h2>Assembly Shaders</h2>

<p>Both pixel and vertex shaders may be provided to the 
 Gamebryo shader system as assembly code. This is the format that was first 
 introduced when Microsoft first added shader program functionality to 
 DirectX.</p>

<p>By default, the extension registered for assembly shaders 
 is <span class="NDLSystemFont">.vsh</span> for vertex shaders, and <span 
 class="NDLSystemFont">.psh</span> for pixel shaders.</p>

<h2>Compiled Shaders</h2>

<p>Both pixel and vertex shaders may be provided to the 
 Gamebryo shader system as compiled object code. The DirectX SDK contains 
 tools to compile assembly or HLSL code into compiled object code.</p>

<p>By default, the extension registered for compiled shaders 
 is <span class="NDLSystemFont">.vso</span> for vertex shaders, and <span 
 class="NDLSystemFont">.pso</span> for pixel shaders.</p>

<h2>HLSL Shaders</h2>

<p>Both pixel and vertex shaders may be provided to the 
 Gamebryo shader system as Microsoft HLSL code.</p>

<p>Gamebryo shaders that are created from NSF/NSB files 
 will need to provide variable names for the constants in the constant 
 map table of the NSF file. The vertex and pixel shader specifications 
 will also need to contain an entry point and a shader target for each 
 shader program used. Refer to the <a href="NSF_File_Format_Reference.htm">NSF 
 reference</a> for more details, or to the section on <a href="NSF_Shaders_with_HLSL_Shader_Programs.htm">NSF 
 Shaders with HLSL Shader Programs</a> for more detailed discussions.</p>

<p>Gamebryo shaders that are created from FX files can 
 use Gamebryo's extension of the standard FX annotation scheme that is 
 documented in the <a href="Introduction_!FX_Shaders.htm">FX shader</a> 
 documentation. </p>

<p>Refer to Microsoft's HLSL documentation for more details 
 on using HLSL in general.</p>

<p>By default, the extension registered for HLSL shaders 
 is <span class="NDLSystemFont">.hlsl</span> for both vertex and pixel shaders.</p>

<h2>Cg Shaders</h2>

<p>Both pixel and vertex shaders may be provided to the 
 Gamebryo shader system as nVidia Cg code, but only when the <span class="NDLSystemFont"><a 
 href="NiCgShaderLib.htm">NiCgShaderLib</a></span> has been linked into 
 the application or tool.</p>

<p>Gamebryo shaders that are created from NSF/NSB files 
 will need to provide variable names for the constants in the constant 
 map table of the NSF file. The vertex and pixel shader specifications 
 will also need to contain an entry point and a shader target for each 
 shader program used. Refer to the <a href="Layout_of_the_NSF_Format.htm">NSF 
 reference</a> for more details.</p>

<p>Refer to nVidia Cg documentation for more details on 
 using Cg in general.</p>

<p>By default, the extension registered for Cg shaders 
 is <span class="NDLSystemFont">.cg</span> for both vertex and pixel shaders.</p>



<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
