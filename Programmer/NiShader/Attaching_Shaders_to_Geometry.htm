<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Attaching Shaders to Geometry</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>


<h1>Attaching Shaders to Geometry</h1>

<p>Shaders are not directly attached to <span class="NDLSystemFont"><a HREF="../../Reference/NiMain/NiRenderObject.htm">NiRenderObject</a></span> 
 objects in Gamebryo; instead, <span class="NDLSystemFont"><a HREF="../../Reference/NiMain/NiMaterial.htm">NiMaterial</a></span> 
 objects assign an <span class="NDLSystemFont">NiShader</span> to a geometry 
 object when it is rendered. This lets the <span class="NDLSystemFont">NiMaterial</span> 
 provide the appropriate shader to an object. There are circumstances, 
 though, where it is not necessary or desirable for a material to pick 
 the right shader from a list. Often, this is because the application only 
 has one shader to use, or because the application knows that a certain 
 shader will work with a certain piece of geometry. In these circumstances, 
 an instance of the <span class="NDLSystemFont"><a HREF="../../Reference/NiMain/NiSingleShaderMaterial.htm">NiSingleShaderMaterial</a></span> 
 class can be used to associate a single shader with a geometry object.</p>

<p>There are three methods for attaching a shader to an 
 <span class="NDLSystemFont">NiRenderObject</span> instance using 
 an <span class="NDLSystemFont">NiSingleShaderMaterial</span>. The simplest 
 method is to use shader libraries and the tool-chain to assign the shader. 
 This approach is accomplished via the <span class="NDLSystemFont">Gamebryo 
 Shader</span> in the material editor of your modeling package. When the 
 scene is exported, geometry instances with shaders applied will be streamed 
 out with an <span class="NDLSystemFont">NiSingleShaderMaterial</span> that 
 identifies the name of the applied shader, along with any attributes the 
 shader utilizes. When loading in your application, assuming that your 
 shader library was registered with the factory, the correct shader will 
 automatically be returned from the <span class="NDLSystemFont">NiSingleShaderMaterial</span> 
 during rendering.</p>

<p>The alternative approaches involve 'hand attaching' 
 shaders via the <span class="NDLSystemFont"><a href="../../Reference/NiMain/NiRenderObject.htm">NiRenderObject</a></span> 
 function <span class="NDLSystemFont">SetShader</span>. This will create 
 a new instance of an <span class="NDLSystemFont">NiSingleShaderMaterial</span> 
 if one does not already exist, attach that instance, and set it as active. 
 There are two versions of this function - the first takes the name of 
 the shader you wish to attach. For this approach to work correctly, the 
 shader library containing the shader must have been registered with the 
 factory. The second method takes a pointer to an actual shader, which 
 must have been created by the application, as opposed to the name of the 
 shader.</p>

<p>It is also possible to manually create a new <span class="NDLSystemFont">NiSingleShaderMaterial</span> 
 instance use the <span class="NDLSystemFont"><a href="../../Reference/NiMain/NiRenderObject.htm">NiRenderObject</a></span> 
 function <span class="NDLSystemFont">ApplyMaterial</span> or <span class="NDLSystemFont">ApplyAndSetActiveMaterial</span> 
 to attach the material shader to a piece of geometry. This method will 
 give the same result as calling <span class="NDLSystemFont">SetShader</span>, 
 but it is possible to apply the material without setting it as the active 
 material this way if you simply use <span class="NDLSystemFont">ApplyMaterial</span>.</p>


<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
