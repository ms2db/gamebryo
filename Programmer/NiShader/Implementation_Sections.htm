<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Implementation Sections</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>


<h1>Implementation Sections</h1>

<p>The NSF file format allows shaders to contain multiple 
 <em>implementations</em> to allow for covering different operating hardware. 
 </p>

<p>The implementation is the heart of the NSF-based shader. 
 When the corresponding NSB file is loaded, only a single implementation 
 is retrieved and used to fill in the <span class="NDLSystemFont"><a 
 href="../../Reference/NiBinaryShaderLib/NiBinaryShader.htm">NiBinaryShader</a></span> 
 instance with the proper settings.</p>

<p>Each implementation may be assigned a name in the NSF 
 file. That name is used for internal documentation and debugging purposes 
 only; it will not have any impact on how the implementation itself is 
 used. This name is distinct from the <span class="NDLSystemFont">ClassName</span> 
 that may be assigned to an implementation.</p>

<p>There may be multiple implementations within a single 
 shader, but each specific implementation must be declared only once. Implementations 
 are defined via the following layout:</p>

<pre>
Implementation NameOfImplementation
{
    // Optional description string that is displayed in the art tools.
    "This is an optional description string.\nIt will be displayed to the
    artists\nexplaining the implementation details."
 
    // Requirements for the implementation
    Requirements
    {
        // Requirements of the implementation
        // This section is detailed below.
    }
 
    // OPTIONAL class name for extending the NSF/NSB shader system to
    // allow for developers to derive their own shader classes from
    // NiBinaryShader.
    ClassName = NameOfDerivedClass
 
    // OPTIONAL block(s) of user-defined data. These allow developers
    // to extend the NSF format without messing with the lex/grammar
    // files.
    UserDefinedData NameOfUDDBlock
    {
        ... Data entries
    }
    UserDefinedData NameOfUDDBlock2
    {
        ... Data entries
    }
 
    // Semantic Adapter Table
    SemanticAdapterTable
    {
        ... Semantic adapter table entries
    }
 
    // OPTIONAL 'Global' render states
    // These are considered to be set for every pass in the implementation.
    // Passes are free to override them.
    RenderStates
    {
        // Render state settings
        // This section is detailed below
    }
 
    // OPTIONAL Vertex Shader Constant Map
    // These are considered to be set for every pass in the implementation.
    // Passes are free to override them.
    VS_Constantmap OPTIONAL_ConstantMapName1
    {
        // Constant mappings
        // This section is detailed below
    }
 
    // OPTIONAL Geometry Shader Constant Map
    // These are considered to be set for every pass in the implementation.
    // Passes are free to override them.
    GS_Constantmap OPTIONAL_ConstantMapName2
    {
        // Constant mappings
        // This section is detailed below
    }
 
    // OPTIONAL Pixel Shader Constant Map
    // These are considered to be set for every pass in the implementation.
    // Passes are free to override them.
    PS_Constantmap OPTIONAL_ConstantMapName3
    {
        // Constant mappings
        // This section is detailed below
    }
 
    // OPTIONAL Alternate Shader Constant Map
    // These are considered to be set for every pass in the implementation.
    // Passes are free to override them.
    Constantmap OPTIONAL_ConstantMapName4
    {
        // Constant mappings
        // This section is detailed below
    }
 
    // Pass definitions
    // There can be as many passes as the effect requires.
    // Passes must be written in the order they are to be rendered.
    // First pass
    Pass OPTIONAL_PassName1
    {
        // Definition of a rendering pass.
        // This section is detailed below.
    }
    ...
    // nth pass
    Pass OPTIONAL_PassNameN
    {
        // Definition of a rendering pass.
        // This section is detailed below.
    }
}
</pre>

<p>Each section that makes up an implementation is detailed 
 in the following sections.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
