<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiShaderConstantMapEntry</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<h1>NiShaderConstantMapEntry</h1>

<p>This class represents a single entry in a constant map 
 instance. There are six types of mappings that can be represented:</p>

<ul>
	
	<li>Constant&mdash;this type of entry is a constant entry in which the data does not change 
 over time.</li>
	
	<li>Defined&mdash;
 this type of entry is one of a pre-defined type that Gamebryo provides. 
 This type of mapping includes values for common transformations, material 
 colors, etc.</li>
	
	<li>Attribute&mdash;this type of entry is a value that is attached to the geometry being 
 rendered. This type of mapping allows for per-object settings of constant 
 values. An example would be a team color that is used in a shader. These 
 values can be exposed to the artist in the tool-chain allowing for tweaking 
 of values relevant to the 'look' of your rendered objects. The important 
 thing to note is that these values will be PER-OBJECT.</li>
	
	<li>Global&mdash;
 this type of entry is similar to the Attribute method, but it is a global, 
 application-registered data value. This mapping is useful for registering 
 things such as light-related values, time of day, and other "global" 
 variables.</li>
	
	<li>Operator&mdash;this type of entry represents the result of some mathematical operation 
 on other constant map entries. This allows an expression to be evaluated 
 once by the CPU rather than multiple times in the shader on the GPU.</li>
	
	<li>Object&mdash;
 this type of entry represents an object in the scene, such as a light 
 or a projected texture effect. Different parameters, like light position 
 or a texture, can be obtained from these entries.</li>
</ul>

<p>Mappings can be one of a multitude of data types, including 
 Boolean values, strings, unsigned integers, floats, point2s, point3s, 
 point4s, matrix3s, matrix4s, colors, and textures. </p>

<p>For a complete description of the functions and members 
 contained in this class, please refer to the <span class="NDLSystemFont"><a href="../../Reference/NiMain/NiShaderConstantMapEntry.htm">NiShaderConstantMapEntry</a></span> 
 class reference.</p>



<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
