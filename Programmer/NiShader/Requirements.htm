<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Requirements</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>


<h1>Requirements</h1>

<p>The requirements section of the implementation defines 
 exactly that: the requirements of that implementation of the shader. It 
 is a REQUIRED section of an implementation.</p>

<p>Only one requirements block is allowed in a given implementation. 
 If different behavior or requirements are needed for different platforms, 
 then separate implementations must be used.</p>

<p>The requirements cover pixel and vertex shader program 
 versions, a user-definable version, and the supported platforms. Shader 
 authors can also indicate that they wish the standard <span class="NDLSystemFont">NiD3DRenderState::UpdateRenderState</span> 
 function is called, applying any <span class="NDLSystemFont">NiProperty</span> 
 instances attached to the geometry being rendered. For shaders that will 
 implement skinning, the number of bones per partition the object should 
 be partitioned with can also be defined in the requirements section. Finally, 
 the tangent space data calculation method (if any) can be declared.</p>

<p>The entries allowed in the requirements section are 
 detailed in the section below.</p>
 
<table>
	<thead>
		<tr>
			<th>Requirement Statement</th>
			<th>Explanation</th>
		</tr>
	</thead>
	<tbody>
		<tr>						
       	<td><span class="NDLSystemFont">VSVersion = vM.m</span></td>
       	<td>Sets the vertex shader program version required to major M, minor m. This requirement is ignored on PS3.<br><br>
Ex: "VSVersion = v1.1" would set the requirement version to 1.1.
</td>
		</tr>
		<tr>
       	<td><span class="NDLSystemFont">GSVersion = vM.m</span></td>
       	<td>Sets the geometry shader program version required to major M, minor m.  This requirement is ignored on PS3, Xbox360, and DX9.</td>
		</tr>
		<tr>
       	<td><span class="NDLSystemFont">PSVersion = vM.m</span></td>
       	<td>Sets the pixel shader program version required to major M, minor m.  This requirement is ignored on PS3.</td>
		</tr>
		<tr>
       	<td><span class="NDLSystemFont">CSVersion = vM.m</span></td>
       	<td>Sets the compute shader program version required to major M, minor m.  This requirement is ignored on all platforms except D3D11.</td>
		</tr>
		<tr>
       	<td><span class="NDLSystemFont">FeatureLevel = FEATURE_LEVEL_*</span></td>
       	<td>Sets the feature required to the specified value. Supported values are described below. This requirement is ignored on all platforms except D3D11.</td>
		</tr>
		<tr>						
       	<td><span class="NDLSystemFont">UserVersion = vM.m</span></td>
       	<td>Sets the user defined version required to major M, minor m. This value may be used by the application in any way desired. This requirement is ignored on PS3.</td>
		</tr>
		<tr>
       	<td><span class="NDLSystemFont">Platform = DX9|D3D10|D3D11|Xenon|PS3</span></td>
       	<td>Sets the platform flags the shader will run on. Can be any combination of DX9, D3D10, D3D11, Xenon, PS3.</td>
		</tr>
		<tr>						
       	<td><span class="NDLSystemFont">UsesNiRenderState = true/false</span></td>
       	<td>Sets the UsesNiRenderState flag to the given Boolean value.</td>
		</tr>
		<tr>
       	<td><span class="NDLSystemFont">UsesNiLightState = true/false</span></td>
       	<td>Sets the UsesNiLightState flag to the given Boolean value. This requirement is ignored on D3D10, D3D11, and PS3.</td>
		</tr>
		<tr>						
       	<td><span class="NDLSystemFont">SoftwareVPRequired = true/false</span></td>
       	<td>Sets the SoftwareVPRequired flag to the given Boolean value. This requirement is ignored on D3D10, D3D11, Xbox360, and PS3.</td>
		</tr>
		<tr>
       	<td><span class="NDLSystemFont">SoftwareVPFallback = true/false</span></td>
       	<td>Sets the SoftwareVPFallback flag to the given Boolean value. This requirement is ignored on D3D10, D3D11, Xbox360, and PS3.</td>
		</tr>
		<tr>						
       	<td><span class="NDLSystemFont">BonesPerPartition = #</span></td>
       	<td>Sets the bones per partition the implementation will support.</td>
		</tr>
		<tr>
       	<td><span class="NDLSystemFont">BinormalTangentUVSource = #</span></td>
       	<td>Sets the UV coordinates set used to generate the NBT frame in the exporters. If this value is not specified and BinormalTangentMethod is specified,  the exporters will use either the normal or parallax map UV set. If neither of those exist, the exporters will use UV set 0.</td>
		</tr>
		<tr>						
       	<td><span class="NDLSystemFont">BinormalTangentMethod = &lt;NBTMethod String&gt;</span></td>
       	<td>Sets the tangent space data calculation method the implementation requires. See below for valid flags.</td>
		</tr>
	</tbody>	
</table>
 
<p>The FeatureLevel can be one of the following values:</p>

<table>
	<thead>
		<tr>
			<th>FeatureLevel String</th>
			<th>D3D feature level description</th>
		</tr>
	</thead>
	<tbody>
		<tr>						
       	<td><span class="NDLSystemFont">FEATURE_LEVEL_9_1</span></td>
       	<td>D3D9-level hardware, capable of shader model 2.0.</td>
		</tr>
		<tr>						
       	<td><span class="NDLSystemFont">FEATURE_LEVEL_9_2</span></td>
       	<td>D3D9-level hardware, capable of shader model 2.0 and some additional features.</td>
		</tr>
		<tr>
       	<td><span class="NDLSystemFont">FEATURE_LEVEL_9_3</span></td>
       	<td>D3D9-level hardware, capable of shader model 3.0.</td>
		</tr>
		<tr>
       	<td><span class="NDLSystemFont">FEATURE_LEVEL_10_0</span></td>
       	<td>D3D10-level hardware, capable of shader model 4.0.</td>
		</tr>
		<tr>
       	<td><span class="NDLSystemFont">FEATURE_LEVEL_10_1</span></td>
       	<td>D3D10.1-level hardware, capable of shader model 4.1.</td>
		</tr>
		<tr>
       	<td><span class="NDLSystemFont">FEATURE_LEVEL_11_0</span></td>
       	<td>D3D11-level hardware, capable of shader model 5.0.</td>
		</tr>
	</tbody>	
</table>

<p>The BinormalTangentMethod can be one of the following values, described in the <span 
 class="NDLSystemFont"><a href="../../Reference/NiMain/NiShaderRequirementDesc.htm#NBTFlags">NiShaderRequirementDesc</a></span> reference:</p>

<table>
	<thead>
		<tr>
			<th>BinormalTangentMethod String</th>
			<th>Calculation method required</th>
		</tr>
	</thead>
	<tbody>
		<tr>						
       	<td><span class="NDLSystemFont">NBTMethod_None</span></td>
       	<td>No tangent space data required.</td>
		</tr>
		<tr>
       	<td><span class="NDLSystemFont">NBTMethod_NI</span></td>
       	<td>Use the Gamebryo method.</td>
		</tr>
		<tr>
       	<td><span class="NDLSystemFont">NBTMethod_ATI</span></td>
       	<td>Use the ATI method.</td>
		</tr>
	</tbody>	
</table>

<h2>Requirements Example</h2>

<p>Below is a NSF snippet that declares the requirements 
 for:</p>

<ul>
	
	<li>Vertex shader version 
 1.1.</li>
	
	<li>Pixel shader version 
 1.4.</li>
	
	<li>User-defined version 
 to 1.0.</li>
	
	<li>Valid for DX9.</li>
	
	<li>The implementation 
 uses the NiRenderState update, causing the renderer to update the render 
 state with the "Gamebryo" properties applied to the object.</li>
	
	<li>The implementation 
 uses the NiLightState update, causing the renderer to update and set the 
 current lights in the scene for this object.</li>
	
	<li>The implementation 
 supports skinning up to 32 bones per partition.</li>
	
	<li>The implementation 
 requires tangent space data calculated via the ATI method.</li>
</ul>

<p>The snippet would be written as follows:</p>

<pre>
Requirements
{
    VSVersion             = v1.1
    PSVersion             = v1.4
    UserVersion           = v1.0
    Platform              = DX9
    UsesNiRenderState     = true
    UsesNiLightState      = true
    BonesPerPartition     = 32
    BinormalTangentMethod = NBTMethod_ATI
}
</pre>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
