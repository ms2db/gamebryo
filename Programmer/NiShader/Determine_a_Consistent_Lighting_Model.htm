<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Determine a Consistent Lighting Model</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>


<h1>Determine a Consistent Lighting Model</h1>

<p>As their name indicates, shader effects control how 
 an object is shaded or, more specifically, how an object's appearance 
 is the result of incoming light. For consistency between shader effects, 
 you should decide upon a lighting model for your application early on 
 and apply it to all shaders.</p>

<h2>Inconsistent Lighting Will Stand Out</h2>

<p>The human eye and mind are outstanding at recognizing 
 patterns and disruptions in those patterns. Because inconsistent lighting 
 in shaders will jarringly jump out of the scene, the benefits of a consistent 
 lighting pipeline become most evident when they are not noticed. If there 
 is a discontinuity in the lighting of different shaders, the viewer may 
 not initially realize that something looks weird because one surface is 
 lit by a directional light and another by two attenuated point lights, 
 but the viewer will very often notice that there is a distinction. By 
 selecting a consistent lighting pipeline, these differences in lighting 
 will not detract from the shader effect.</p>

<h2>Shaders Can Be Optimized to the Lighting Model</h2>

<p>In a shader with a generalized lighting model, the vertex 
 and pixel shader code must account for all possible lights. In early shader 
 versions, this meant that the math was performed for all lights in every 
 shader. Unused lights would be set to zero intensity so that they did 
 not contribute to the final result. In later vertex and pixel shader program 
 versions that support conditional looping, the extraneous math can be 
 avoided by a conditional loop.</p>

<p>Beyond the math, shader constants for the lighting model 
 need to be set each frame to account for any changes in light position 
 or intensity. Again, later versions of vertex and pixel shader programs 
 can avoid this expense with the ability to loop. Lower versions must set 
 constants for all of the lights to turn those lights on or off since the 
 math for each light is always performed. Setting shader constants incurs 
 a runtime expense since the graphics hardware must ensure by flushing 
 the vertex engine that no vertices are in the pipeline when the constants 
 are set. </p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
