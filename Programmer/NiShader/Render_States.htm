<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Render States</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>


<h1>Render States</h1>

<p>Render states can be set by the shader to configure 
 the pipeline for rendering. These settings can either be global to the 
 implementation in which case they are set before any rendering passes, 
 or they can be contained within the pass, in which case they will be set 
 at the beginning of that pass. The render states below are from our sample 
 and are global to the implementation.</p>

<pre>
RenderStates
{
    // Turn off alpha blending for safety
    AlphaBlendEnable    = false
    // Re-establish cull mode in case any 2-sided polys changed it
    CullMode            = CW
    // Enable specular since we are using oD1 for glow scale. On some PC
    // PC cards, this must be enabled for oD1 to get passed through correctly.
    SpecularEnable      = true  
    // Set ZBuffer settings for safety as well since it could be disabled
    // by screen textures or other shaders.
    ZEnable             = ZB_True
    ZWriteEnable        = true
    ZFunc               = LessEqual
}
</pre>

<p>You should try to minimize the number of render states 
 set. Each render state that you set can cause a performance impact on 
 the hardware. Gamebryo maintains the render state internally to minimize 
 duplicate render state settings.</p>

<a name=UsesNIRenderState></a><h2>UsesNIRenderState</h2>

<p>Specifying <span class="NDLSystemFont">UsesNIRenderState</span> 
 in the requirements block of an NSF file instructs the shader system to 
 apply the Gamebryo render states from the scene graph before applying 
 the render states in the NSF file. Specifying this flag allows your shader 
 to inherit render states from the scene graph which can be useful if you 
 want to attach things like global wireframe properties at the root of 
 the scene graph. This flag can also cause a render state to be set twice 
 for a single object if your shader sets it to a value that does not match 
 the object the shader is attached to.</p>

<p>Consider this example. Let's say you have a wireframe 
 property attached to two objects that sets the fill mode to wireframe. 
 Assume also that each object has a shader attached that turns the fill 
 mode to solid. The first object would render with the fill mode set to 
 solid because of the shader. If the second object specifies <span class="NDLSystemFont">UsesNIRenderState</span>, 
 the fill mode would be set to wireframe by the wireframe property and 
 then set immediately to solid by the shader. Thus, you pay for two render 
 state changes on the same setting, which accomplishes nothing and hurts 
 performance.</p>

<a name=UsesNILightState></a><h2>UsesNILightState</h2>

<p>Specifying <span class="NDLSystemFont">UsesNILightState</span> 
 in the requirements block of an NSF file instructs the shader system to 
 apply the Gamebryo light states from the scene graph. Specifying this 
 flag allows your shader to inherit the lights from the scene graph which 
 can be useful if you are making use of the fixed-function vertex pipeline, 
 and want to use the lighting from the scene.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
