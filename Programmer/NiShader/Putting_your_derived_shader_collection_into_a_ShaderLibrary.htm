<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Putting your derived shader collection into a ShaderLibrary</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Putting your derived shader collection into a
ShaderLibrary</h1>

<p>For integration into the Art/tool pipeline, as well as
providing a simple way to update your shader collection without
requiring game code changes/recompiles, Gamebryo provides the
<span class="NDLSystemFont">NiShader</span> interface. Shader
libraries represent a collection of shaders available to the
application at run-time. To use a library, the application just
has to register it with the shader factory via a simple function
call (described in the next section).</p>

<p>When shader libraries are exposed to the tool-chain, artists
can assign them directly in the modeling package used during your
game production. As long as the proper library is registered in
your game, the system will attach the shader automatically at
load time. This mechanism has a large advantage over the previous
system, where all shader effects had to be attached
programmatically.</p>

<p>Libraries themselves are implemented via a simple interface of
two functions. The first retrieves an <span class=
"NDLSystemFont">NiShader</span> pointer for the given shader
name, and is typically called by the <a href=
"../../Reference/NiMain/NiShaderFactory.htm"><span class=
"NDLSystemFont">NiShaderFactory::AttachShader</span></a>
function. The second retrieves a description, <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMain/NiShaderLibraryDesc.htm">NiShaderLibraryDesc</a></span>,
of the library for use in the tool chain, giving some details on
the library in general, as well as the shaders contained in it to
present to the artist.</p>

<h2>Notes</h2>

<ul>
    <li>Please see <a href=
    "Exposing_your_ShaderLibrary_to_the_tool_chain.htm">Exposing
    your ShaderLibrary to the tool-chain</a> for important
    information on having your shader libraries detected by the
    tool-chain.</li>

    <li>For more information on the shader library classes, refer
    to the <a href=
    "../../Reference/NiDX9Renderer/NiD3DShaderLibrary.htm"><span class="NDLSystemFont">
    NiD3DShaderLibrary</span></a> documentation.</li>

    <li>For a complete example of packaging shaders into a
    library, refer to the <a href=
    "../../Learn/Demos/Overview_!ShaderSample.htm">ShaderSample</a> sample.</li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
