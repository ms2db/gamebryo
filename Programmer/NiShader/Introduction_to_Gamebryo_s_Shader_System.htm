<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Introduction to Gamebryo's Shader System</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>


<h1>Introduction to Gamebryo's Shader System</h1>

<p>The Gamebryo <span class="NDLSystemFont">NiShader</span> 
 system (or, "Gamebryo Shader System") controls how objects are rendered, 
 including their pixel and vertex shaders. <span 
 class="NDLSystemFont">NiShader</span> objects are produced from <span 
 class="NDLSystemFont"><a 
 href="../NiMaterial/Introduction_to_the_NiMaterial_System.htm">NiMaterial</a></span>
 objects, which infrequently analyze object states to determine and setup 
 appropriate <span class="NDLSystemFont">NiShader</span> objects. Materials and 
 shaders are integrated into the art pipeline, and are data-driven.

<p>A <em>shader</em>, in the context of Gamebryo, represents 
 a complete rendering effect to apply to an object. This definition is 
 a slight departure from the usual terminology of DirectX-based renderers.
 When rendering an object, a Gamebryo shader includes all passes and render 
 states that determine the object's rendered appearance.</p>

<p>Vertex and pixel shaders are referred to as <em>shader 
 programs</em> in Gamebryo. This definition is intended to specify the shaders 
 more clearly as to their function/purpose. A rendering pass can include 
 only a single vertex shader program and a single pixel shader program 
 (or use the fixed-function pipeline for either one of them). A Gamebryo 
 shader, or complete rendering effect, can actually utilize numerous shader 
 programs&mdash;one vertex and/or one pixel shader program per pass required 
 to achieve said effect. In general, both pixel and vertex shaders are 
 referred to as shader programs when they are not identified as either 
 pixel or vertex shaders.</p>

<p>For integration into the Gamebryo tool-chain, shaders 
 can be packaged into a <em>shader library</em> collection. These libraries 
 can support either a DLL or a static lib interface (or both, in most cases), 
 with the DLL version being required for utilization in the tools. </p>

<p>Finally, <em>binary shader</em> instances represent a 
 completely data-driven interface into the Gamebryo shader system. This 
 class provides a simple and efficient way for integrating shader technology 
 in your application, allowing for quick prototyping and debugging of shaders.</p>

<h2>For More Information</h2>

<p>Other NiShader Programmer's Guide topics cover the architecture 
 of the system in detail, as well as the integration into the renderer. 
 To really understand the way the system works, these sections are a must 
 read. The details of the Gamebryo-specific shader file (NSF) and binary 
 shader file (NSB) developer tools are also detailed in this section, as 
 well as how to use more industry-standard shader files, like FX shaders, 
 in the engine.</p>

<ul>
	
	<li><a 
 href="../NiMaterial/Introduction_to_the_NiMaterial_System.htm">Material System</a>: A Related system, responsible for assigning <span class="NDLSystemFont">NiShader</span> objects to <span class="NDLSystemFont">NiRenderObject</span> instances.</li>
	
	<li><a 
 href="Introduction_to_the_Gamebryo_Shader_System_Architecture.htm">Shader System Architecture</a>: This document outlines the classes in the shader system and their relationships to one another.</li>
	
	<li><a href="Introduction_!Renderer_Interaction.htm">Renderer Interaction</a>: This document walks through the <span class="NDLSystemFont">Ni&lt;D3D&gt;Renderer::DrawPrimitive</span> 
 function, detailing the functions called on the <span class="NDLSystemFont">NiD3DShaderInterface</span> 
 class, and explaining what the renderer expects to happen, as well as 
 what it does with the return values.</li>
	
	<li><a href="Error_Handling.htm">Error Handling</a>: 
 This document gives details on the error handling system in place for 
 the Gamebryo Shader System.</li>
	
	<li><a href="Introduction_to_NSF_NSB_Shaders.htm">NSF/NSB 
 Shaders</a>: This document describes the use of text NSF files and binary 
 NSB files to create Gamebryo shaders.</li>
	
	<li><a href="Introduction_!FX_Shaders.htm">FX Shaders</a>: This document explains how to use shaders written in the Microsoft D3D Effect file format from within Gamebryo.</li>
	
	<li><a href="Introduction_to_Shader_Programs.htm">Shader 
 Programs</a>: This document details the shader program formats that the 
 Gamebryo Shader System is capable of making use of.</li>
	
	<li><a href="Introduction_!Application_Design_with_Shader_Driven_Assets.htm">Application Design with Shader Driven Assets</a>: This document describes what considerations 
 are needed when designing an application to make use of the Gamebryo Shader 
 System.</li>
</ul>

<p><a href="../../Reference/NiDX9Renderer/NiDX9Renderer_Class_Reference_Intro.htm">NiDX9Renderer Class Reference: Introduction</a>: Provides the class references for the entire shader system.</p>

<p><a href="Samples_that_use_the_Shader_system.htm">Sample 
 Applications</a>: Provides the details of the samples which utilize 
 the shader system.</p>

<p><a href="../../RelNotes/All/Release_Notes__Shader_System.htm">Release 
 Notes</a>: Contains the release notes for the current version of 
 the shader system.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
