<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Objects Section</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Objects Section in NSF Files</h1>

<p>NSF files now support shaders that access arbitrary
<span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiDynamicEffect.htm">NiDynamicEffect</a></span>
parameters from the <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiDynamicEffectState.htm">NiDynamicEffectState</a></span>
for each rendered object. This allows a shader to use an
arbitrary number of lights without the need for all lighting
parameters, such as light position and color, to be defined as
global constants and updated every frame by the application.
These changes cause the shader system to look for the specified
objects in the <span class=
"NDLSystemFont">NiDynamicEffectState</span> for each rendered
object, allowing shaders that use these effects to be applied to
scenes with somewhat arbitrary lighting conditions with minimal
programming effort.</p>

<p>To this end, an <span class="NDLSystemFont">Objects</span>
section exists that should be defined at the root level prior to
any "Implementation" sections. The <span class=
"NDLSystemFont">Objects</span> section should occur no more than
once in a shader, and will look like this:</p>

<pre>
Objects
{
    [Object declaration]
    ...
}
</pre>

<p>The declaration of an object takes the following form:</p>

<p><span class="NDLSystemFont">ObjectType  ObjectIndex 
LocalName</span></p>

<p>Any number of objects can be listed in this block. The
sections below give a description of each parameter. Each object
should be listed only once, even if multiple object attributes
will be used in a shader constant map.</p>

<h2>Object Type</h2>

<p><span class="NDLSystemFont">ObjectType</span> indicates the
type of the object. All currently valid object types are listed
in the table below:</p>

<!--(Table)=========================================================-->
<table>
    <thead>
        <tr>
            <th>Object Type</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><span class=
            "NDLSystemFont">Effect_GeneralLight</span></td>

            <td>A general light. This can be used to specify any
            <span class="NDLSystemFont"><a href=
            "../../Reference/NiMain/NiLight.htm">NiLight</a></span>
            except <span class="NDLSystemFont"><a href=
            "../../Reference/NiMain/NiAmbientLight.htm">NiAmbientLight</a></span>.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">Effect_PointLight</span></td>

            <td>A point light (<span class=
            "NDLSystemFont"><a href=
            "../../Reference/NiMain/NiPointLight.htm">NiPointLight</a></span>)</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">Effect_DirectionalLight</span></td>

            <td>A directional light (<span class=
            "NDLSystemFont"><a href=
            "../../Reference/NiMain/NiDirectionalLight.htm">NiDirectionalLight</a></span>)</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">Effect_SpotLight</span></td>

            <td>A spot light (<span class=
            "NDLSystemFont"><a href="../../Reference/NiMain/NiSpotLight.htm">NiSpotLight</a></span>)</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">Effect_EnvironmentMap</span></td>

            <td>An environment map (<span class=
            "NDLSystemFont"><a href=
            "../../Reference/NiMain/NiTextureEffect.htm">NiTextureEffect</a></span>
            with <span class="NDLSystemFont">TextureType</span>
            of <span class=
            "NDLSystemFont">ENVIRONMENT_MAP</span>)</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">Effect_ProjectedShadowMap</span></td>

            <td>A projected shadow map (<span class=
            "NDLSystemFont"><a href=
            "../../Reference/NiMain/NiTextureEffect.htm">NiTextureEffect</a></span>
            with <span class="NDLSystemFont">TextureType</span>
            of <span class=
            "NDLSystemFont">PROJECTED_SHADOW</span>)</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">Effect_ProjectedLightMap</span></td>

            <td>A projected light map (<span class=
            "NDLSystemFont"><a href=
            "../../Reference/NiMain/NiTextureEffect.htm">NiTextureEffect</a></span>
            with <span class="NDLSystemFont">TextureType</span>
            of <span class=
            "NDLSystemFont">PROJECTED_LIGHT</span>)</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">Effect_FogMap</span></td>

            <td>A fog map (<span class="NDLSystemFont"><a href=
            "../../Reference/NiMain/NiTextureEffect.htm">NiTextureEffect</a></span>
            with <span class="NDLSystemFont">TextureType</span>
            of <span class="NDLSystemFont">FOG_MAP</span>)</td>
        </tr>
    </tbody>
</table>

<h2>Object Index</h2>

<p><span class="NDLSystemFont">ObjectIndex</span> is a zero-based
index specific to the specified object type used to identify
which effect to use in the <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiDynamicEffectState.htm">NiDynamicEffectState</a></span>.
It has no meaning for the <span class=
"NDLSystemFont">Effect_EnvironmentMap</span> and <span class=
"NDLSystemFont">Effect_FogMap</span> types.</p>

<p>The effects listed above are grabbed from the <span class=
"NDLSystemFont">NiDynamicEffectState</span> for the object being
rendered using their object index. <span class=
"NDLSystemFont">Effect_GeneralLight</span> will grab the next
light in the effect state, as long as it is not an <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMain/NiAmbientLight.htm">NiAmbientLight</a></span>
(ambient lights can be retrieved with the <span class=
"NDLSystemFont">AmbientLight</span> <span class=
"NDLSystemFont">CM_Defined</span> constant map entry, which is
described in that section).</p>

<p>The <span class="NDLSystemFont">ObjectIndex</span> is unique
to the type of object. Thus, to get the second point light in the
effect state, the <span class="NDLSystemFont">ObjectIndex</span>
would be 1. Similarly, an <span class=
"NDLSystemFont">ObjectIndex</span> of 1 could be specified to get
the second projected shadow map. Here is an example of specifying
various lights in the effect state:</p>

<pre>
Objects
{
    Effect_GeneralLight      1  Light1
    Effect_DirectionalLight  0  Light2
    Effect_PointLight        0  Light3
    Effect_GeneralLight      2  Light4
    Effect_GeneralLight      3  Light5
}
</pre>

<p>If the dynamic effect state for the rendered object contains
an <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiPointLight.htm">NiPointLight</a></span>,
an <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiDirectionalLight.htm">NiDirectionalLight</a></span>,
and an <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiSpotLight.htm">NiSpotLight</a></span>,
in that order, <span class="NDLSystemFont">Light1</span> and
<span class="NDLSystemFont">Light2</span> would point to the
<span class="NDLSystemFont">NiDirectionalLight</span>,
<span class="NDLSystemFont">Light3</span> would point to the
<span class="NDLSystemFont">NiPointLight</span>, and <span class=
"NDLSystemFont">Light4</span> would point to the <span class=
"NDLSystemFont">NiSpotLight</span>. Because there are only three
lights in the effect state in this example, <span class=
"NDLSystemFont">Light5</span> would contain an invalid light. An
invalid light in this case is a light with its color set to (0.0,
0.0, 0.0, 1.0) and its position set to (0.0, 0.0, 0.0, 1.0). Each
object type will define an invalid value that will be used if a
valid instance of that object cannot be found (the invalid values
for each object parameter is detailed in a table in the <a href=
"Shader_Constant_Maps.htm">Vertex Shader Constant Map and Pixel
Shader Constant Map</a> section of this documentation).</p>

<h2>Local Name</h2>

<p><span class="NDLSystemFont">LocalName</span> specifies the
name by which the object will be referred to within this NSF
file. This name is what will be referenced by other NSF
statements that refer to this object. The name should not be the
same as any attribute names, as the NSF parser will first try to
find an attribute with the specified name and then look for an
object when resolving the names. Avoid using the string "@@" in
the name, as that string is used internally by the parser to
combine the name with the parameter in the constant map.</p>
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
