<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Constant Maps in a Pass</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>


<h1>Constant Maps in a Pass</h1>

<p><a href="Shader_Constant_Maps.htm">Vertex 
 Shader Constant Map and Pixel Shader Constant Map</a> layouts were 
 discussed when looking at the implementation layout above.</p>

<p>Similar to render state groups, constant maps, when 
 defined in a pass, are considered to be 'local'  ie, they are applied 
 only for that pass. It is important to note, however, that if you have 
 a shader register get set in a given pass n, and do not have the same 
 shader register set in the next pass, n + 1, then said register will be 
 the same for pass n+1 as it was for pass n. </p>

<p>As with render states, this approach allows for a cascading 
 effect to occur, where a register set in the first pass could be considered 
 set for subsequent passes so long as their constant maps did not touch 
 it. Note that Gamebryo assumes that any data set in a constant register 
 would not change in between passes.</p>

<p>Constant maps also support the concept of platform-specific 
 constant values. This allows for shader developers to vary the contents 
 of a particular register (or set of registers) depending on the platform 
 the shader is being used on.</p>

<p>There may be more than one shader constant map section 
 for each shader program in a pass, although constant maps beyond the first 
 for a given shader program type may not be supported on most renderers. 
 Under D3D10 and D3D11, each shader constant map represents a single shader constant 
 buffer in the shader program using a one-to-one mapping.</p>

<p>The constant maps declared in the implementation do 
 not conflict with the ones declared in the individual passes. </p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
