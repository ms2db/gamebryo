<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Using the NSB/NSF formats</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>


<h1>Using the NSB/NSF formats</h1>

<p>The Gamebryo Binary Shader System provides a set of libraries for supporting shaders 
    written in a text file. This system is composed of a number of different libraries: 
 <span class="NDLSystemFont">NSBShaderLib</span>, <span class="NDLSystemFont">NSFParser</span>, and 
 a number of renderer-specific <span class="NDLSystemFont">NiBinaryShaderLib</span> libraries. </p>
 
 <p><span class="NDLSystemFont">NSFParserLib</span> 
 provides a utility library for parsing <span class="NDLSystemFont">NDL 
 Shader File</span> (<span class="NDLSystemFont">NSF</span>) 
 format text-based shaders. These are similar in format to DirectX effect 
 files, and are explained in the <a href="NSF_Details.htm">NSF 
 Details</a> document. The parser library will search a given directory 
 (optionally recursing the subfolders) for <span class="NDLSystemFont">NSF</span> 
 files. Each file found will be loaded and parsed, forming a binary <span class="NDLSystemFont">NDL 
 Binary Shader</span>(<span class="NDLSystemFont">NSB</span>) file from the text. 
 This <span class="NDLSystemFont">NSB</span> file can then 
 be accessed via the <span class="NDLSystemFont">NSBShaderLib</span>,
 as described below.</p> 
 
 <p>On Windows, a copy of the DLL build of this library is copied to 
 <span class="NDLSystemFont"><em>%EMERGENT_PATH%</em>\SDK\Win32\DLL\ShaderLibs\VC80</span> or 
 <span class="NDLSystemFont"><em>%EMERGENT_PATH%</em>\SDK\Win32\DLL\ShaderLibs\VC90</span>, and
 renamed with the extension <span class="NDLSystemFont">.dp9</span> (for Debug builds), 
 <span class="NDLSystemFont">.np9</span> (for Release builds), or <span class="NDLSystemFont">.sp9</span> 
 (for Shipping builds). This allows the parser library to be automatically loaded by any tool-chain application
 that searches that directory for parser libraries. The parser library will then load any
 <span class="NDLSystemFont">NSF</span> files found in 
 <span class="NDLSystemFont"><em>%EMERGENT_PATH%</em>\Media\Shaders\Data</span> and convert them
 to <span class="NDLSystemFont">NSB</span> files.</p>

<p>The tools will always run the parser prior to registering 
 the <span class="NDLSystemFont">NiBinaryShaderLib</span> library. 
 This arrangement ensures that any <span class="NDLSystemFont">NSF</span> 
 files that were modified since the last run will regenerate an updated 
 <span class="NDLSystemFont">NSB</span> file.</p>

 <p><span class="NDLSystemFont">NSBShaderLib</span> provides a common library 
 and supporting classes that allow for a completely data-driven 
 shader system. <span class="NDLSystemFont">NSBShaderLib</span> loads a set of 
 <span class="NDLSystemFont">NSB</span> files and creates platform-independent
 representations of the shaders they describe. It can then provide those structures
 to the platform-specific <span class="NDLSystemFont">NiBinaryShaderLib</span> libraries
 to construct usable runtime shaders.
 
<p><span class="NDLSystemFont">NiBinaryShaderLib</span> and its related libraries
 provide a platform-specific <span class="NDLSystemFont">NiShaderLibrary</span> 
 implementation which will search a given directory (optionally recursing 
 the subfolders) for <span class="NDLSystemFont">NSB</span> files. 
 Each file found will be added to a list of available shaders which 
 are then exposed to the application or tool using the library. 
 <span class="NDLSystemFont">NiBinaryShaderLib</span> also
 creates a platform-specific <span class="NDLSystemFont">NiShader</span>-derived 
 class from the cross-platform structures provided by 
 <span class="NDLSystemFont">NSBShaderLib</span>.</p>
 
<p>There is an <span class="NDLSystemFont">NiBinaryShaderLib</span> library for each shader-supporting renderer:</p>

<table>
    <thead>
        <tr>
            <th>Library</th>
            <th>Supported Renderers</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td><span class="NDLSystemFont">NiBinaryShaderLib</span></td>
            <td>DX9, Xenon</td>
        </tr>
        <tr>
            <td><span class="NDLSystemFont">NiD3D10BinaryShaderLib</span></td>
            <td>D3D10</td>
        </tr>
        <tr>
            <td><span class="NDLSystemFont">ecrD3D11BinaryShaderLib</span></td>
            <td>D3D11</td>
        </tr>
        <tr>
            <td><span class="NDLSystemFont">NiPS3BinaryShaderLib</span></td>
            <td>PS3</td>
        </tr>
    </tbody>
</table> 

<p>On Windows, a copy of the DLL build of this library is copied to 
 <span class="NDLSystemFont"><em>%EMERGENT_PATH%</em>\SDK\Win32\DLL\ShaderLibs\VC80</span> or 
 <span class="NDLSystemFont"><em>%EMERGENT_PATH%</em>\SDK\Win32\DLL\ShaderLibs\VC90</span>, and
 renamed with the extension <span class="NDLSystemFont">.dl9</span> (for Debug builds), 
 <span class="NDLSystemFont">.nl9</span> (for Release builds), or <span class="NDLSystemFont">.sl9</span> 
 (for Shipping builds). This allows the shader library to be automatically loaded by any tool-chain application
 that searches that directory for shader libraries. The binary shader library will then load any
 <span class="NDLSystemFont">NSB</span> files found in 
 <span class="NDLSystemFont"><em>%EMERGENT_PATH%</em>\Media\Shaders\Data</span>.</p>

<p>The following code snippets demonstrate how to utilize the
    <span class="NDLSystemFont">NiBinaryShaderLib</span> 
 library in your application (shown for the DX9 renderer), requiring just 
 a call to the function <span class="NDLSystemFont">RegisterShaderLibraries</span> 
 during initialization:</p>

<pre>
#include &lt;NiBinaryShaderLib.h&gt;
bool RegisterShaderLibraries()
{
    char acShaderPath[NI_MAX_PATH];
    NiStrcpy(acShaderPath, NI_MAX_PATH, ConvertMediaFilename(""));
 
    int iDirectoryCount = 1;
    char* apcDirectories[1];
    apcDirectories[0] = acShaderPath;
 
    char acProgramPath[NI_MAX_PATH];
    NiStrcpy(acProgramPath, NI_MAX_PATH, ConvertMediaFilename("DX9/"));
    NiShaderFactory::AddShaderProgramFileDirectory(acProgramPath);
 
    if (!NiShaderFactory::LoadAndRegisterShaderLibrary(
        "NiBinaryShaderLib", iDirectoryCount, apcDirectories, false))
    {
        NiMessageBox("Failed to load shader library!", "ERROR");
        return false;
    }
    return true;
}
</pre>

<p>The <span class="NDLSystemFont">NSF</span> 
 file format provides a way to rapidly prototype shaders in the Gamebryo 
 engine. The <span class="NDLSystemFont">NSB</span> file 
 format provides a platform-independent data storage method for shaders. 
 These two together provide a powerful prototyping system that can easily 
 be utilized throughout the development of your application.</p>
 
<p>Refer to the <a href="NSF_File_Format_Reference.htm">NSF 
 Reference</a> section of the documentation for more information 
 on the file format.</p>

<p>Refer to the <a href="../../Learn/Demos/Overview_!ShaderSample.htm">ShaderSample</a> 
 sample to see the NSF/NSB combination put to use in a real application.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
