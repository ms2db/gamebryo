<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Metrics Probes Reference</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="FSO" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>

<!--(Begin Body)================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<h1>Metrics Probes Reference</h1>

<p>The following metrics probes ship with Gamebryo LightSpeed.</p>

<table>
    <thead>
        <tr>
            <th>Probe name</th>
            <th>Probe type</th>
            <th>Description</th>
            <th>Arguments</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>BEHAVIOR.COMPLETE.%s</td>
            <td>Counter</td>
            <td>Tick when a behavior finishes executing</td>
            <td>Model name</td>
        </tr>

        <tr>
            <td>BEHAVIOR.EXECUTE.SEC.%s</td>
            <td>Time value</td>
            <td>Record the total time a behavior has spent executing, excluding time spent
            blocking</td>
            <td>Model name, behavior name</td>
        </tr>

        <tr>
            <td>BEHAVIOR.INITIALIZE.%s.%s</td>
            <td>Counter</td>
            <td>Tick when a behavior is initialized</td>
            <td>Model name, behavior ID</td>
        </tr>

        <tr>
            <td>BEHAVIOR.REMOVE.%s</td>
            <td>Counter</td>
            <td>Tick when an executing behavior is removed from the scheduler</td>
            <td>Model name</td>
        </tr>

        <tr>
            <td>BEHAVIOR.RUN.BEHAVIOR.%s.%s</td>
            <td>Counter</td>
            <td>Tick when a behavior is run</td>
            <td>Model , behavior name</td>
        </tr>

        <tr>
            <td>BEHAVIOR.RUN.SEC.%s</td>
            <td>Time value</td>
            <td>Record the total time since this behavior started executing, including time spent
            blocking</td>
            <td>Model name, behavior name</td>
        </tr>

        <tr>
            <td>BEHAVIOR.RUN.TYPE.%s</td>
            <td>Counter</td>
            <td>Tick when a behavior is run, by behavior type</td>
            <td>Behavior type (Lua, C, etc.)</td>
        </tr>

        <tr>
            <td>CONFIGURATION.ADD.ENTRY.%s</td>
            <td>Counter</td>
            <td>Tick when a config entry is added, usually during application startup when the
            Config Manager loads config files</td>
            <td>Entry name</td>
        </tr>

        <tr>
            <td>CONFIGURATION.ADD.LINK.%s</td>
            <td>Counter</td>
            <td>Tick when one config value is linked to another</td>
            <td></td>
        </tr>

        <tr>
            <td>CONFIGURATION.ADD.SECTION.%s</td>
            <td>Counter</td>
            <td>Tick when a config section is added</td>
            <td>Section name</td>
        </tr>

        <tr>
            <td>CONFIGURATION.ADD.SECTION_LINK.%s</td>
            <td>Counter</td>
            <td>Tick when one section is linked to another</td>
            <td>Section name</td>
        </tr>

        <tr>
            <td>CONFIGURATION.LOOKUP.ENTRY.%s.%s</td>
            <td>Counter</td>
            <td>Tick when an entry object is requested</td>
            <td>Section name, entry name</td>
        </tr>

        <tr>
            <td>CONFIGURATION.LOOKUP.SECTION.%s</td>
            <td>Counter</td>
            <td>Tick when a section object is requested</td>
            <td>Section name</td>
        </tr>

        <tr>
            <td>CONFIGURATION.READ.CMD_LINE.SEC</td>
            <td>Time value</td>
            <td>Record the time spent processing command line configuration options</td>
            <td></td>
        </tr>

        <tr>
            <td>CONFIGURATION.READ.ENV_VAR.SEC</td>
            <td>Time value</td>
            <td>Record the time spent processing configuration options from the environment</td>
            <td></td>
        </tr>

        <tr>
            <td>CONFIGURATION.READ.INI.SEC</td>
            <td>Time value</td>
            <td>Record the time spent processing configuration options from INI files</td>
            <td></td>
        </tr>

        <tr>
            <td>CONFIGURATION.READ.TOTAL.SEC</td>
            <td>Time value</td>
            <td>Record the total time spent processing config options</td>
            <td></td>
        </tr>

        <tr>
            <td>CONFIGURATION.UPDATE.ENTRY.%s</td>
            <td>Counter</td>
            <td>Tick when the value of an existing config entry is changed</td>
            <td>Entry name</td>
        </tr>

        <tr>
            <td>CONFIGURATION.UPDATE.LINK.%s</td>
            <td>Counter</td>
            <td>Tick when the value of an existing link is changed</td>
            <td></td>
        </tr>

        <tr>
            <td>CONFIGURATION.WRITE.TOTAL.SEC</td>
            <td>Time value</td>
            <td>Total time spent writing out changed config data</td>
            <td></td>
        </tr>

        <tr>
            <td>ENTITY.CREATE.OWNED.%s</td>
            <td>Counter</td>
            <td>Tick when an owned entity is created</td>
            <td>Model name</td>
        </tr>

        <tr>
            <td>ENTITY.CREATE.REPLICA.%s</td>
            <td>Counter</td>
            <td>Tick when a replica is created</td>
            <td>Model name</td>
        </tr>

        <tr>
            <td>ENTITY.DESTROY.OWNED.%s</td>
            <td>Counter</td>
            <td>Tick when an owned entity is destroyed</td>
            <td>Model name</td>
        </tr>

        <tr>
            <td>ENTITY.DESTROY.REPLICA.%s</td>
            <td>Counter</td>
            <td>Tick when a replica is destroyed</td>
            <td>Model name</td>
        </tr>

        <tr>
            <td>ENTITY.DIRTY.MODEL.%s</td>
            <td>Counter</td>
            <td>Tick when properties on an entity are flagged dirty</td>
            <td>Model name</td>
        </tr>

        <tr>
            <td>ENTITY.TALLY</td>
            <td>Running total</td>
            <td>Uptick when an entity is created; downtick when an entity is destroyed</td>
            <td></td>
        </tr>

        <tr>
            <td>ENTITY.TOTAL</td>
            <td>Total value</td>
            <td>Record the total number of extant entities when an entity is created, destroyed or
            updated</td>
            <td></td>
        </tr>

        <tr>
            <td>FRAMEWORK.TICK.SEC</td>
            <td>Time value</td>
            <td>Record the total time (in seconds) elapsed to tick all services</td>
            <td></td>
        </tr>

        <tr>
            <td>FRAMEWORK.TICK.SERVICE.SEC.%s</td>
            <td>Time value</td>
            <td>Record the total time (in seconds) to tick the specified service</td>
            <td>Service name</td>
        </tr>

        <tr>
            <td>MESSAGE.DOWNCAST.FAIL.%s.0x%lX</td>
            <td>Counter</td>
            <td>Tick when a message base fails to cast to a new type</td>
            <td>"From" class name, "To" class ID</td>
        </tr>

        <tr>
            <td>MESSAGE.DOWNCAST.SUCCESS.%s.%s</td>
            <td>Counter</td>
            <td>Tick when a message base is successfully cast from one type to another</td>
            <td>"From" class name, "To" class name</td>
        </tr>

        <tr>
            <td>MESSAGESERVICE.RECEIVE.MESSAGE.REMOTE</td>
            <td>Counter</td>
            <td>Tick when a message is received through the networking system</td>
            <td></td>
        </tr>

        <tr>
            <td>MESSAGESERVICE.SEND.MESSAGE.LOCAL</td>
            <td>Counter</td>
            <td>Tick when a message is sent locally, unless using SendImmediate</td>
            <td></td>
        </tr>

        <tr>
            <td>MESSAGESERVICE.SEND.MESSAGE.LOCAL.IMMEDIATE</td>
            <td>Counter</td>
            <td>Tick when a message is sent locally using SendImmediate</td>
            <td></td>
        </tr>

        <tr>
            <td>MESSAGESERVICE.SEND.MESSAGE.REMOTE</td>
            <td>Counter</td>
            <td>Tick when a message is sent via the networking system</td>
            <td></td>
        </tr>

        <tr>
            <td>NETWORK.CONNECTION.CLOSE.%u.0x%llX</td>
            <td>Counter</td>
            <td>Tick when a connection is closed</td>
            <td>QoS, connection ID</td>
        </tr>

        <tr>
            <td>NETWORK.CONNECTION.ERROR.%u.0x%llX</td>
            <td>Counter</td>
            <td>Tick when an error occurs establishing or using a network connection</td>
            <td>QoS, connection ID</td>
        </tr>

        <tr>
            <td>NETWORK.CONNECTION.ESTABLISH.%u.0x%llX</td>
            <td>Counter</td>
            <td>Tick when a connection is established</td>
            <td>QoS, connection ID</td>
        </tr>

        <tr>
            <td>NETWORK.CONNECTION.TALLY.%u</td>
            <td>Running total</td>
            <td>Uptick when a connection is established; downtick when one is removed, or
            fails</td>
            <td>QoS</td>
        </tr>

        <tr>
            <td>NETWORK.ENVELOPE.HEADER.BYTES.%u.0x%llX</td>
            <td>Bytes value</td>
            <td>Track the header size of individual envelope messages</td>
            <td>QoS, connection ID</td>
        </tr>

        <tr>
            <td>NETWORK.ENVELOPE.TOTAL.BYTES.%u.0x%llX</td>
            <td>Bytes value</td>
            <td>Track the total size of individual envelope messages</td>
            <td>QoS, connection ID</td>
        </tr>

        <tr>
            <td>NETWORK.RECEIVE.BYTES.%s.%s</td>
            <td>Bytes value</td>
            <td>Record a message's size (in bytes) when it is received</td>
            <td>QoS, connection ID</td>
        </tr>

        <tr>
            <td>NETWORK.RECEIVE.CATEGORY.0x%llX</td>
            <td>Counter</td>
            <td>Tick when received messages are queued</td>
            <td>Category ID</td>
        </tr>

        <tr>
            <td>NETWORK.RECEIVE.ERROR.%u.0x%llX</td>
            <td>Counter</td>
            <td>Tick when an error occurs while receiving a net message</td>
            <td>QoS, connection ID</td>
        </tr>

        <tr>
            <td>NETWORK.RECEIVE.MESSAGE.%u.0x%llX</td>
            <td>Counter</td>
            <td>Tick when received messages are queued.</td>
            <td>QoS, connection ID</td>
        </tr>

        <tr>
            <td>NETWORK.RECEIVE.SYSTEM_MESSAGE</td>
            <td>Counter</td>
            <td>Netlib.HandleSystemMessage</td>
            <td></td>
        </tr>

        <tr>
            <td>NETWORK.RECEIVE.SYSTEM_MESSAGE.ERROR</td>
            <td>Counter</td>
            <td>Tick when NetService receives a net message that it doesn't know how to handle</td>
            <td></td>
        </tr>

        <tr>
            <td>NETWORK.SEND.BYTES.%s.%s</td>
            <td>Bytes value</td>
            <td>Record the message's size (in byte) when it is sent</td>
            <td>QoS, connection ID</td>
        </tr>

        <tr>
            <td>NETWORK.SEND.MESSAGE.%s.%s</td>
            <td>Counter</td>
            <td>Tick when a net message is sent</td>
            <td>QoS, connection ID</td>
        </tr>

        <tr>
            <td>NETWORK.TRANSPORT.ERROR.%u</td>
            <td>Counter</td>
            <td>Tick when a transport cannot be registered, unregistered or found</td>
            <td>QoS</td>
        </tr>

        <tr>
            <td>REPLICATIONSERVICE.RECEIVE.DISCOVER_REQUEST</td>
            <td>Counter</td>
            <td>Tick when Replication Service receives a discovery request message</td>
            <td></td>
        </tr>

        <tr>
            <td>REPLICATIONSERVICE.RECEIVE.ENTITY_DISCOVER</td>
            <td>Counter</td>
            <td>Tick when Replication Service receives an entity discover message</td>
            <td></td>
        </tr>

        <tr>
            <td>REPLICATIONSERVICE.RECEIVE.ENTITY_LOSS</td>
            <td>Counter</td>
            <td>Tick when Replication Service receives an entity loss message</td>
            <td></td>
        </tr>

        <tr>
            <td>REPLICATIONSERVICE.RECEIVE.ENTITY_UPDATE</td>
            <td>Counter</td>
            <td>Tick when Replication Service receives an entity update message</td>
            <td></td>
        </tr>

        <tr>
            <td>REPLICATIONSERVICE.RECEIVE.ENTITY_UPDATE.ERROR</td>
            <td>Counter</td>
            <td>Tick when replication service receives an update for an entity it can't find</td>
            <td></td>
        </tr>

        <tr>
            <td>REPLICATIONSERVICE.SEND.ENTITY_DISCOVER</td>
            <td>Counter</td>
            <td>Tick when Replication Service sends an entity discover message</td>
            <td></td>
        </tr>

        <tr>
            <td>REPLICATIONSERVICE.SEND.ENTITY_LOSS</td>
            <td>Counter</td>
            <td>Tick when Replication Service sends an entity loss message</td>
            <td></td>
        </tr>

        <tr>
            <td>REPLICATIONSERVICE.SEND.ENTITY_UPDATE</td>
            <td>Counter</td>
            <td>Tick when Replication Service receives an entity update message</td>
            <td></td>
        </tr>

        <tr>
            <td>SCHEDULER.TASK.TALLY</td>
            <td>Running total</td>
            <td>Uptick when a task is added to the scheduler's queue; downtick when a task is
            removed</td>
            <td></td>
        </tr>

        <tr>
            <td>SCHEDULER.TASK.TOTAL</td>
            <td>Total value</td>
            <td>Record the total tasks in the scheduler each time the scheduler ticks</td>
            <td></td>
        </tr>

        <tr>
            <td>SOCKET.BIND.ERROR.%s.%s</td>
            <td>Counter</td>
            <td>Tick when a socket fails to bind to an address</td>
            <td>QoS, connection ID</td>
        </tr>

        <tr>
            <td>SOCKET.CONNECT.ERROR.%s.%s</td>
            <td>Counter</td>
            <td>Tick when a socket fails to connect</td>
            <td>QoS, connection ID</td>
        </tr>

        <tr>
            <td>SOCKET.INIT.ERROR.%s.%s</td>
            <td>Counter</td>
            <td>Tick when a socket fails to initialize</td>
            <td>QoS, connection ID</td>
        </tr>

        <tr>
            <td>SOCKET.LISTEN.ERROR.%s.%s</td>
            <td>Counter</td>
            <td>Tick when a socket fails to listen on a port</td>
            <td>QoS, connection ID</td>
        </tr>

        <tr>
            <td>SOCKET.RECEIVE.BYTES.%s.%s</td>
            <td>Bytes value</td>
            <td>Record the size (in byte) of a datastream when it is received from the OS
            networking library</td>
            <td>QoS, connection ID</td>
        </tr>

        <tr>
            <td>SOCKET.RECEIVE.DATASTREAM.%s.%s</td>
            <td>Counter</td>
            <td>Tick when a socket receives data</td>
            <td>QoS, connection ID</td>
        </tr>

        <tr>
            <td>SOCKET.RECEIVE.ERROR.%s.%s</td>
            <td>Counter</td>
            <td>Tick when a socket fails to receive data</td>
            <td>QoS, connection ID</td>
        </tr>

        <tr>
            <td>SOCKET.SEND.BYTES.%s.%s</td>
            <td>Bytes value</td>
            <td>Record the size (in byte) of a datastream when it is handed to the OS networking
            library</td>
            <td>QoS, connection ID</td>
        </tr>

        <tr>
            <td>SOCKET.SEND.DATASTREAM.%s.%s</td>
            <td>Counter</td>
            <td>Tick when a socket sends data</td>
            <td>QoS, connection ID</td>
        </tr>

        <tr>
            <td>SOCKET.SEND.ERROR.%s.%s</td>
            <td>Counter</td>
            <td>Tick when a socket fails to send data</td>
            <td>QoS, connection ID</td>
        </tr>
    </tbody>
</table>
<p class="NDLHeadingRelatedTopic">Related topics</p>
<ul>
    <li><a href="logging_metrics_overview.htm">Metrics Logging Overview</a></li>
    <li><a href="logging_metrics_using.htm">Using Metrics Logging</a></li>
    <li><a href="logging_metrics_interpreting.htm">Interpreting Metrics Logs</a></li>
    <li><a href="logging_metrics_extending.htm">Adding Your Own Metrics Probes</a></li>
</ul>
<!--kadov_tag{{<placeholder id="footer">}}-->
</body>
</html>
