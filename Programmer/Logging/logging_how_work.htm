<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>How logging, asserts, and debuggers work</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type=
"text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>How logging, asserts, and debuggers work</h1>

<h2>Logging</h2>

<ul>
    <li>From C++ code, log messages using one of the <a href=
    "../../Programmer/Scripting/lua_lib_BehaviorAPI.htm">EE_LOG_xxx</a> macros
    defined in LoggerMacros.h. These macros take three parameters; the module
    that is logging the message, level at which the message is logged, and the
    actual message.
        <ul>
            <li>These macros determine whether the logging is enabled for the
            given module and level.</li>

            <li>If the logging is enabled, the Log() method of the logger is
            invoked.</li>

            <li>The Log() method in turn calls the LogMessage() method of
            configured log destination(s).</li>
        </ul>
    </li>

    <li>From script code, call <a href=
    "../../Programmer/Scripting/lua_lib_BehaviorAPI.htm">BehaviorAPI.LogMessage</a>.</li>
</ul>

<table class="NDLNoteContainer" width="100%">
    <tr align="left">
        <td class="NDLNoteContainerTD">
            <p class="NDLHeadingNoteContainer">Note</p>

            <div class="NDLNote">
                The logging macros and associated functionality is compiled out
                for Shipping configurations. This is to comply with various
                release requirements on supported platforms. The
                EE_DISABLE_LOGGING compiler define is used to compile out
                logging. If you require logging in shipping builds remove the
                above define and recompile.
            </div>
        </td>
    </tr>
</table>

<h2>Asserts</h2>

<ul>
    <li>In the code, you insert one of the assert macros defined the Assets.h
    file to verify the code is executing as expected.</li>

    <li>There are three types of the assert macros; EE_ASSERT_xxx,
    EE_VERIFY_xxx and EE_FAIL_xxx.</li>

    <li>Use the EE_ASSERT type macros if you want to test a condition. These
    macros are compiled out when disabled.</li>

    <li>Use the EE_VERIFY type macros if you want to test a condition just as
    EE_ASSERT macros. The EE_VERIFY type macros leave the condition (predicate)
    in even when disabled. Thus, they can be placed in conditional statements.
    Also, you can place a statement having side effects as the macro's
    condition (predicate).</li>

    <li>Use the EE_FAIL type macros in sections of code that should be
    unreachable under expected conditions. These macros are compiled out when
    disabled.</li>
</ul>

<table class="NDLNoteContainer" width="100%">
    <tr align="left">
        <td class="NDLNoteContainerTD">
            <p class="NDLHeadingNoteContainer">Note</p>

            <div class="NDLNote">
                Asserts are compiled out of shipping and release configurations
                by default. Use the EE_DISABLE_ASSERTS compiler define to
                disable all asserts, even in debug builds. Use the
                EE_ENABLE_RELEASE_ASSERT compiler define to enable asserts in
                release and shipping configurations.
            </div>
        </td>
    </tr>
</table>

<h2>Debuggers</h2>

<ul>
    <li>When an assertion fails, a message is first logged and then an assert
    hander is invoked if one has been installed.</li>

    <li>Unless you installed your own custom assert handler, it will cause the
    debugger to break into the code at the point where the assertion
    failed.</li>

    <li>For information about how to use the script debugger for debugging
    entity behaviors, please refer to the <a href=
    "../../Tools/ScriptDebugger/efr_script_debugger_intro.htm">Script Debugger:
    Introduction</a> section.</li>
</ul>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
    <li><a href="logging_overview.htm">Logging, asserts, and debuggers
    overview</a></li>

    <li><a href="logging_best_practice.htm">Best practices for working with
    logging, asserts, and debuggers</a></li>

    <li><a href="logging_initialization.htm">Logging, asserts, and debuggers
    initialization</a></li>

    <li><a href="logging_tuning.htm">Tuning logging, asserts, and debugging
    performance</a></li>

    <li><a href="logging_consoles.htm">Console-specific issues for logging,
    asserts, and debugging</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
