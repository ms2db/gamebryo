<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Shader System Release Notes</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Body)==========================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Shader System Release Notes</h1>

<p><a href=
"Release_Notes__Shader_System.htm#Added_Features_and_Fixed_Bugs">Added
Features, Changed Behavior, and Fixed Bugs</a></p>

<p><a href=
"Release_Notes__Shader_System.htm#Known_Issues_and_Limitations">Known
Issues and Limitations</a></p>

<a name="Added_Features_and_Fixed_Bugs" id="Added_Features_and_Fixed_Bugs"></a><h2>Added Features, Changed Behavior, and Fixed Bugs</h2>

<h3>Gamebryo LightSpeed 3.2</h3>

<ul>
  <li>None in this release.</li>
</ul>

<h3>Gamebryo LightSpeed 3.1.1</h3>

<ul
    <li><span class="NDLSystemFont"><a href="../../Reference/NiCommonMaterialLibrary/Introduction_to_NiCommonMaterialLib.htm">NiCommonMaterialLibrary</a></span>
    now reports all of the supported standard map channel slots for its material's 
    <span class="NDLSystemFont"><a href="../../Reference/NiMain/NiShaderDesc.htm">NiShaderDesc</a></span> objects.</li>
</ul>

<h3>Gamebryo LightSpeed 3.1</h3>

<ul>
  <li><span class="NDLSystemFont"><a href="../../Reference/NiBinaryShaderLib/Introduction.htm">NiBinaryShaderLib</a></span> and 
<span class="NDLSystemFont"><a href="../../Reference/NSBShaderLib/Hyperlinked_List_of_NSBShaderLib_Classes_and_Files.htm">NSBShaderLib</a></span> 
have been restructured to reduce redundant code and eliminate the need for applications to link in shader libraries 
for renderers that they will not use. Refer to the <a href=
"../../Convert/Previous/Converting_to_Gamebryo_3_1_Overview.htm#NiBinaryShaderLib">Conversion Guide</a> for information on how to convert existing code.</li>

    <li>Custom FX, FXL, and FX10 shaders now support arrays of float4 and float4x4 object constants.  These can be used for PSSM shader constants, some of which require arrays.  See the documentation about <a href="../../Programmer/Shadowing_System/Custom_Shaders_in_the_Shadowing_System.htm">custom shaders in the shadowing system</a> for more info. NSF shaders are not yet supported.</li>
    
    <li>NiFXLShaderLib now supports loading pre-compiled FXL shaders as .<span class="NDLSystemFont">FXLO</span> files.</li>    
        
</ul>

<h3>Gamebryo LightSpeed 3.0</h3>

<ul>
    <li>None in this release.</li>
</ul>

<h3>Gamebryo 2.6.0</h3>

<ul>
    <li>Shaders generated by the <span class=
    "NDLSystemFont"><a href=
    "../../Reference/NiMain/NiFragmentMaterial.htm">NiFragmentMaterial</a></span>
    system can now be debugged through PIX using native HLSL code
    in Debug builds.</li>
</ul>

<h3>Gamebryo 2.5.0</h3>

<ul>
    <li>The <span class="NDLSystemFont"><a href=
    "../../Reference/NiD3D10EffectShaderLib/Introduction_to_NiD3D10EffectShaderLib_Classes.htm">
    NiD3D10EffectShaderLib</a></span> library was added to allow
    the <span class="NDLSystemFont"><a href=
    "../../Reference/NiD3D10Renderer/NiD3D10Renderer.htm">NiD3D10Renderer</a></span>
    to make use of shaders found in FX files.</li>

    <li>The strings used to identify object attributes in
    <a href="../../Programmer/NiShader/Shader_Constant_Maps.htm#Object_Entry">
    NSF files</a> and <a href=
    "../../Programmer/NiShader/Object_Annotations_and_Semantics_for_D3D_Effect_Files.htm">
    FX files</a> have been merged, so that strings originally
    defined for either one of the shader file types will now work
    in any shader file.</li>

    <li><span class="NDLSystemFont"><a href=
    "../../Reference/NiMain/NiStandardMaterial.htm">NiStandardMaterial</a></span>
    now creates its vertex shaders to take as input only the
    texture coordinates that are used, rather than all the
    texture coordinates on the mesh.</li>

    <li><span class="NDLSystemFont"><a href=
    "../../Reference/NiMain/NiShaderAttributeDesc.htm">NiShaderAttributeDesc</a>::SetName</span>
    has been modified to replace any whitespace characters it
    encounters with underscores. This helps ensure that attribute
    names in shaders consist of only a single word.</li>

    <li><span class="NDLSystemFont"><a href=
    "../../Reference/NiMain/NiShader.htm">NiShader</a></span>
    objects that were returned from an <span class=
    "NDLSystemFont"><a href=
    "../../Reference/NiMain/NiShaderFactory.htm">NiShaderFactory</a></span>
    in response to a request for the best implementation (using
    <span class=
    "NDLSystemFont">NiShader::DEFAULT_IMPLEMENTATION</span>) now
    contain their actual implementation ID rather than the value
    of <span class=
    "NDLSystemFont">NiShader::DEFAULT_IMPLEMENTATION</span>. This
    addresses an assertion that the shader factory would
    sometimes trigger when the a shader is requested using a
    specific implementation after the same shader was found using
    <span class=
    "NDLSystemFont">NiShader::DEFAULT_IMPLEMENTATION</span>.</li>

    <li>Added support for defining a custom <a href=
    "../../Reference/NiMain/NiSemanticAdapterTable.htm">semantic
    adapter table</a> in NSF, FX, and FXL Shaders, and deprecated
    support for Packing Definition Declaration (PackingDef). 
    <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->For
    more information on specifying Semantic Adapter Tables in
    shaders, see the documentation on using them in <a href=
    "../../Programmer/NiShader/SemanticAdapterTable.htm">NSF</a>
    or <a href=
    "../../Programmer/NiShader/Specifying_Semantic_Adapter_Tables_in_FX_Shaders.htm">
    FX/FXL</a> files.</li>

    <li>Shaders no longer own a <span class=
    "NDLSystemFont"><a href=
    "../../Reference/NiMain/NiShaderDeclaration.htm">NiShaderDeclaration</a></span>
    object, but can convert one into a semantic adapter table
    using the <span class=
    "NDLSystemFont">SetSemanticAdapterTableFromShaderDeclaration</span>
    method.</li>

    <li>Fixed a crash in the <span class="NDLSystemFont"><a href=
    "../../Reference/NiD3DXEffectShaderLib/Introduction_to_NiD3DXEffectShaderLib_Classes.htm">
    NiD3DXEffectShaderLibrary</a></span> when loading FX files
    that include other files. The crash only happened when
    loading the files from Max and Maya, and seemed to only show
    up in Debug mode.</li>

    <li>Fixed an incorrect string comparison in the <span class=
    "NDLSystemFont"><a href=
    "../../Reference/NiD3DXEffectShaderLib/Introduction_to_NiD3DXEffectShaderLib_Classes.htm">
    NiD3DXEffectShaderLibrary</a></span>. The function,
    <span class="NDLSystemFont">GetD3DXEffectFile</span>, was
    comparing pointers rather than the actual strings.</li>

    <li>In previous releases of Gamebryo it was allowed for a
    custom <span class="NDLSystemFont"><a href=
    "../../Reference/NiMain/NiShader.htm">NiShader</a></span> to
    be applied to a mesh even when the shader required texture
    coordinates or colors, but the mesh did not provide these
    streams. By default, this is no longer allowed and will
    result in the error shader in the current version of
    Gamebryo. For backwards compatibility purposes, <span class=
    "NDLSystemFont">NiMeshMaterialBinding::SetCreateMissingStreams(true)</span>
    will globally re-enable this more lenient behavior.</li>

    <li>The <span class="NDLSystemFont"><a href=
    "../../Reference/NiD3DXEffectShaderLib/Introduction_to_NiD3DXEffectShaderLib_Classes.htm">
    NiD3DXEffectShaderLibrary</a></span> library now uses the
    <span class="NDLSystemFont">NiFile::GetFile</span> method for
    loading assets.</li>

    <li>NSF shaders now correctly support per-platform entry
    points and targets. Previously, only a single entry point and
    target was supported. The <span class=
    "NDLSystemFont"><a href="../../Reference/NSBShaderLib/NSBPass.htm">
    NSBPass</a></span> class has had its API significantly
    rearranged, but no functionality has been removed.</li>

    <li>NSB files on the PS3 now check the shader cache before
    trying to load a new copy of the shader binaries.</li>
</ul>

<h3>Gamebryo 2.3.0.1</h3>

<ul>
    <li>Added type information for CM_Constant entries during NSF
    parsing and fixed endian-swapping issues in NSB streaming
    code. <!--kadov_tag{{<spaces>}}--> 
    <!--kadov_tag{{</spaces>}}-->This fix requires that affected
    NSF files be re-parsed into NSB files, but a warning will be
    generated in debug builds if an old NSB is encountered.</li>
</ul>

<h3>Gamebryo 2.3.0</h3>

<ul>
    <li>The <span class="NDLSystemFont"><a href=
    "../../Programmer/NiShader/NiCgShaderLib.htm">NiCgShaderLib</a></span>
    has been updated to use the Cg Toolkit 1.5.</li>

    <li><span class="NDLSystemFont"><a href=
    "../../Reference/NiMain/NiShader.htm">NiShader::GetVertexInputSemantics</a></span>
    was added as a new virtual method to assist with <a href=
    "../../Programmer/NiMaterial/Applying_Materials.htm">multi-material
    packing</a>. <span class="NDLSystemFont"><a href=
    "../../Reference/NiMain/NiShader.htm">NiShader</a></span> as
    well as the platform specific subclasses have valid
    implementations. The platform specific subclasses,
    <span class="NDLSystemFont">NiD3DShader</span> and
    <span class="NDLSystemFont">NiPS3Shader</span>, copy the
    information from their internal <span class=
    "NDLSystemFont"><a href=
    "../../Reference/NiMain/NiShaderDeclaration.htm">NiShaderDeclaration</a></span>
    object. Most users will not need to update their shaders if
    an appropriate <span class="NDLSystemFont"><a href=
    "../../Reference/NiMain/NiShaderDeclaration.htm">NiShaderDeclaration</a></span>
    is maintained by the <span class="NDLSystemFont"><a href=
    "../../Reference/NiMain/NiShader.htm">NiShader</a></span>
    object.</li>

    <li>As a result of the new multi-material packing system, the
    <span class="NDLSystemFont"><a href=
    "../../Reference/NiMain/NiShaderDeclaration.htm">NiShaderDeclaration</a></span>
    object for rendering is always pulled from the <span class=
    "NDLSystemFont"><a href=
    "../../Reference/NiMain/NiGeometry.htm">NiGeometry</a></span>
    object rather than the <span class="NDLSystemFont"><a href=
    "../../Reference/NiMain/NiShader.htm">NiShader</a></span>
    object. This can cause abnormal behavior in some older
    shaders where data was reinterpreted in type such as UBYTE4
    instead of UBYTECOLOR and then swizzled in the vertex shader.
    These cases are particularly prevalent with bone index data
    on older shaders. Note that the Gamebryo FX and FX Lite
    libraries currently assume that bone index data is in the
    form of UBYTECOLOR. Applications need to be aware of this
    issue. If geometric data is packed with <span class=
    "NDLSystemFont"><a href=
    "../../Reference/NiMain/NiStandardMaterial.htm">NiStandardMaterial</a></span>
    as the active material, then FX and FX Lite shaders will need
    to correctly access unswizzled, UBYTE4 data.</li>

    <li><span class="NDLSystemFont"><a href=
    "../../Programmer/NiShader/Introduction_!FX_Shaders.htm">NiD3DXEffectShaderLib</a></span>
    was updated with changes that load all files via <span class=
    "NDLSystemFont"><a href=
    "../../Reference/NiSystem/NiFile.htm">NiFile</a></span>.
    Applications that provide custom file creation via
    <span class="NDLSystemFont"><a href=
    "../../Reference/NiSystem/NiFile.htm">NiFile::SetFileCreateFunc</a></span>
    need to ensure that all shader files are exposed to that
    custom creation behavior.</li>

    <li>The ability was added to FX Lite (FXL) shaders to specify
    a relative path in #include statements instead of requiring
    an absolute path.</li>

    <li>Updated the <span class="NDLSystemFont"><a href=
    "../../Programmer/NiShader/Introduction_!FX_Shaders.htm">NiD3DXEffectShaderLib</a></span>
    to load ".fxo" files, to make it easier to use compiled FX
    shader files.</li>

    <li>Fixed a potential infinite loop in <span class=
    "NDLSystemFont"><a href=
    "../../Reference/NiMain/NiShaderFactory.htm">NiShaderFactory</a>::GetFirstShaderProgramFileDirectory</span>
    and <span class=
    "NDLSystemFont">GetNextShaderProgramFileDirectory</span>.</li>

    <li>Initialized a pointer to NULL in <span class=
    "NDLSystemFont">NiD3DXEffectFactory::LoadD3DXEffectFromCode</span>.</li>
</ul>

<h3>Gamebryo 2.2.0</h3>

<ul>
    <li>The <span class="NDLSystemFont"><a href=
    "../../Programmer/NiShader/NiCgShaderLib.htm">NiCgShaderLib</a></span>
    has been updated to use the most recent version of Cg Toolkit
    1.4.</li>

    <li>Added support for specifying which UV set to use when
    computing NBT frames in the exporters. See <a href=
    "../../Programmer/NiShader/Integrating_D3D_Effect_Files.htm#Techniques">
    Integrating D3D Effect Files</a> and <a href=
    "../../Programmer/NiShader/Requirements.htm">NSF
    Requirements</a> for more information.</li>

    <li>Added preprocessor definitions for conditional
    compilation of D3D Effect files. See <a href=
    "../../Programmer/NiShader/Integrating_D3D_Effect_Files.htm">Integrating
    D3D Effect Files</a> for more information.</li>

    <li>The <span class="NDLSystemFont"><a href=
    "../../Reference/NiMain/NiShaderFactory.htm">NiShaderFactory</a>::AttachShader</span>
    and <span class="NDLSystemFont">DetachShader</span> functions
    were removed with the creation of the new <span class=
    "NDLSystemFont">NiMaterial</span> system. Refer to the
    <span class="NDLSystemFont">NiMaterial</span> conversion
    notes for more discussion.</li>

    <li>Updated the <span class="NDLSystemFont"><a href=
    "../../Programmer/NiShader/Introduction_!FX_Shaders.htm">NiD3DXEffectShaderLib</a></span>
    so that texture transforms will be correctly provided for
    shaders that don't use vertex shaders.</li>

    <li>Improved how the <span class="NDLSystemFont"><a href=
    "../../Programmer/NiShader/Introduction_!FX_Shaders.htm">NiD3DXEffectShaderLib</a></span>
    library handled ShaderName annotations. Now, a ShaderName
    annotation will correctly replace the name of the shader that
    is produced.</li>

    <li>Fixed a problem with <span class=
    "NDLSystemFont">NiD3DTimeSyncController</span>, that prevent
    shaders that used a TIME parameter from having that parameter
    correctly updated.</li>

    <li>Fixed a bug in <span class="NDLSystemFont"><a href=
    "../../Programmer/NiShader/NiCgShaderLib.htm">NiCgShaderLib</a></span>
    that caused unused uniform parameters in a shader program to
    invalidate the contents of shader constant register 0.</li>

    <li>A bug was fixed that prevented the PROJECTED flag from
    being set on the TexCoordIndex texture stage state in FX
    files for techniques that use pixel shader 1.1-1.3.</li>
</ul>

<h3>Gamebryo 2.1.0</h3>

<ul>
    <li>The <span class="NDLSystemFont"><a href=
    "../../Programmer/NiShader/NiCgShaderLib.htm">NiCgShaderLib</a></span>
    has been updated to use the Cg Toolkit 1.4.</li>

    <li>A critical section has been added to <span class=
    "NDLSystemFont"><a href=
    "../../Reference/NiDX9Renderer/NiD3DShaderFactory.htm">NiD3DShaderFactory</a></span>
    to remove a possible race condition during shader retrieval
    and the use of an uninitialized shader in rendering.
    Additionally, the <span class="NDLSystemFont"><a href=
    "../../Reference/NiDX9Renderer/NiD3DShader.htm">NiD3DShader</a></span>
    instances produced for specific implementations of NSB
    shaders are now initialized at creation time rather than at
    the time of their first attachment to an object.</li>

    <li>The Dot3BumpMap.NSF pixel shader has been fixed to
    properly support two light direction vectors instead of using
    the first light's direction vector twice.</li>

    <li>The <span class=
    "NDLSystemFont">PostProcessPipeline</span> function in
    <span class="NDLSystemFont">NiD3DXEffectShader</span> has had
    redundant calls to <span class=
    "NDLSystemFont">ClearPixelShader</span> and <span class=
    "NDLSystemFont">ClearVertexShader</span> removed.</li>

    <li>An uninitialized loop variable in the function
    NiD3DShader::SetupSCMExtraData was fixed.</li>
</ul>

<h3>Gamebryo 2.0.1</h3>

<ul>
    <li>Gamebryo version 2.0.1 is a maintenance release to
    address console specific issues. No changes were made to the
    shader system for this release.</li>
</ul>

<h3>Gamebryo 2.0.0</h3>

<ul>
    <li>NSF files and FX files now provide support for shaders
    that access arbitrary <span class="NDLSystemFont"><a href=
    "../../Reference/NiMain/NiDynamicEffect.htm">NiDynamicEffect</a></span>
    parameters from the <span class="NDLSystemFont"><a href=
    "../../Reference/NiMain/NiDynamicEffectState.htm">NiDynamicEffectState</a></span>
    for each rendered object. This allows a shader to use an
    arbitrary number of lights without the need for all lighting
    parameters, such as light position and color, to be defined
    as global constants and modified every frame by the
    application. These changes cause the shader system to look
    for the specified objects in the <span class=
    "NDLSystemFont">NiDynamicEffectState</span> for each rendered
    object, allowing shaders that use these effects to be applied
    to scenes with somewhat arbitrary lighting conditions with
    minimal programming effort. See the <a href=
    "../../Programmer/NiShader/NSF_File_Format_Reference.htm">NSF</a>
    and <a href=
    "../../Programmer/NiShader/Introduction_!FX_Shaders.htm">FX</a>
    documentation sections for more information.</li>

    <li>Added support for float-based arrays in FX files. float,
    float2, float3, and float4 single and multi-dimensional
    arrays are supported and the correct UI will be generated by
    the artist tools.</li>

    <li>The following NSF shaders have been changed so that they
    use dynamic effects in the scene rather than global constants
    for their lights:

        <ul>
            <li>BaseBumpWithSpatialGlow.NSF</li>

            <li>LuminanceTransfer.NSF</li>

            <li>Outlining.NSF</li>

            <li>OilyFilm.NSF</li>

            <li>OilyFilmWithGlow.NSF</li>

            <li>ParallaxMapping.NSF</li>

            <li>Skin2DirLightsWarpEffect.NSF</li>

            <li>SkinBump11.NSF</li>

            <li>SkinnedToonShading.NSF</li>

            <li>SkinnedToonShadingWithOutline.NSF</li>

            <li>Skin_DirLight_AmbLight.NSF</li>

            <li>ToonShading.NSF</li>

            <li>ToonShadingWithOutline.NSF</li>
        </ul>
    </li>

    <li>The following new shaders were added to the SDK:

        <ul>
            <li>ASMSkinning.NSF</li>

            <li>Dot3BumpMap.NSF</li>

            <li>GeneralDiffuseSpecular.fx</li>

            <li>SeaFloor.NSF</li>

            <li>TextureBlendUsingVertexColors.NSF</li>
        </ul>
    </li>

    <li>The following shaders were removed from the SDK because
    they were useful only in specific application environments:

        <ul>
            <li>DolphinTween.NSF</li>

            <li>IndexedPaletteSkinning.NSF</li>

            <li>MatrixPaletteSkinning.NSF</li>
        </ul>
    </li>

    <li>The <a href=
    "../../Programmer/NiShader/NiCgShaderLib.htm"><span class=
    "NDLSystemFont">NiCgShaderLib</span></a> has been updated to
    use the Cg Toolkit 1.3.</li>

    <li><a href="../../Programmer/NiShader/NSB_Details.htm">NSB
    Shader</a> files now correctly handle endian-ness, so an NSB
    file generated on a little-endian system can be used on a
    big-endian system.</li>

    <li>HLSL shaders that are used via an NSF file are now able
    to take advantage of the <span class=
    "NDLSystemFont">NiD3DShaderConstantManager</span> to improve
    the performance of setting shader constants.</li>

    <li>Fixed bug in <span class="NDLSystemFont"><a href=
    "../../Programmer/NiShader/Introduction_!FX_Shaders.htm">NiD3DXEffectShaderLib</a></span>
    where exception could occur while parsing effect files.</li>

    <li>Fixed a leak caused by an <span class=
    "NDLSystemFont">NiD3DXEffectFactory</span> instance getting
    created during the <span class=
    "NDLSystemFont">NiD3DXEffectFile</span> destructor during
    shutdown.</li>

    <li>Textures will now no longer be left set on the device on
    samplers that an FX shader does not use. This fixes an issue
    where the current render target is sometimes still set on the
    device as a texture.</li>

    <li>Integer values specified in an NSF file may now provide
    their ranges as integer values. Floating point values will
    continue to be read for backwards compatibility.</li>

    <li>Global shader constants are now correctly registered and
    released by <span class="NDLSystemFont"><a href=
    "../../Reference/NiBinaryShaderLib/NiBinaryShader.htm">NiBinaryShader</a></span>
    objects.</li>

    <li>NSF shaders with vertex shaders in any of their passes
    will now issue a warning if a packing definition has not been
    declared for that shader.</li>

    <li>The <span class=
    "NDLSystemFont">TOP_BlendFactorAlpha</span> token in the NSF
    Parser will now be accepted when it is spelled correctly,
    though the old spellings (<span class=
    "NDLSystemFont">TOP_BlendFactoralAlpha</span> and
    <span class="NDLSystemFont">TOP_BlendFactoraApha</span>) are
    still honored.</li>

    <li>If an application requests a shader implementation that
    doesn't exist, the <span class=
    "NDLSystemFont">NSBShaderLib</span> should no longer access
    memory out-of-bounds.</li>

    <li>Ensured all components of <span class=
    "NDLSystemFont"><a href=
    "../../Reference/NSBShaderLib/NSBRequirements.htm">NSBRequirements</a></span>
    get initialized.</li>

    <li>Fixed the <span class=
    "NDLSystemFont">NiBinaryShader::SetupGeometry</span> function
    so all passes would be checked for a time dependency and
    software vertex processing requirements, rather than just the
    first pass.</li>

    <li>FX shaders now manually set the texture coordinate index
    and texture transform states before validation to ensure that
    a stale state won't result in an incorrectly invalid
    shader.</li>

    <li>Corrected a faulty assertion in <span class=
    "NDLSystemFont">NiD3DShaderDeclaration</span>.</li>

    <li>Fixed a bug where loading FX shaders from multiple
    directories would cause the shaders loaded earlier to be
    reloaded multiple times.</li>

    <li>Fixed a bug that caused shaders attached via <span class=
    "NDLSystemFont">NiShaderFactory::Geometry_AttachShader</span>
    to not get a valid implementation value set.</li>

    <li>When <span class=
    "NDLSystemFont">NiShader::Initialize</span> or <span class=
    "NDLSystemFont">NiShader::SetupGeometry</span> fail, the
    failed shader will no longer be attached to the
    geometry.</li>
</ul>

<a name="Known_Issues_and_Limitations" id="Known_Issues_and_Limitations"></a><h2>Known Issues and Limitations</h2>

<ul>
    <li>Using the D3D10 stream out functionality from FX shaders
    is not currently supported. Stream out can be performed using
    NSF shaders.</li>

    <li>When loading NIF files in the background that make use of
    FX shaders, it is possible that the background loading system
    will attempt to create the FX shader in the background. On
    Win32, during the creation of the FX shader, the D3DX
    libraries will make use of D3D render state blocks to
    validate the shader being generated. This use of state blocks
    can interfere with rendering that is occurring in the
    foreground thread, often producing a warning that says
    "Direct3D9: (ERROR) :Cannot be recording state macros when
    calling BeginScene. BeginScene failed." To avoid this error,
    applications can force the FX shaders to be loaded using the
    foreground thread. One way to do this would be to pre-create
    all the FX shaders that the application will need. After the
    application has loaded the D3DX shader library, it can call
    <span class=
    "NDLSystemFont">NiShaderFactory::RetrieveShader</span>,
    passing in the name each of the shaders in turn. This will
    force the library to create and store the shaders in the
    foreground thread, so the background loading thread will be
    able to apply the existing shaders to objects that are
    streamed in.</li>

    <li>Loading a large number of uncompiled FX files can take a
    long time, both for tools and for Gamebryo applications. This
    can give the impression that the application is unresponsive.
    The delay is caused by the time spent compiling the FX files,
    which is not something Gamebryo can control. Loading time can
    be significantly improved, however, by compiling the FX files
    offline using Microsoft's fxc.exe tool. Gamebryo can load the
    compiled FX files much more quickly.</li>

    <li>When an implementation of a shader is specified in an
    application or in a NIF file by a specific implementation
    number and also by the <span class=
    "NDLSystemFont">NiShader::DEFAULT_IMPLEMENTATION</span>
    value, an assertion can be hit in some circumstances. In
    general, try to refer to shaders using either specific
    implementation numbers or using the default implementation,
    but not both.</li>

    <li>As shaders are read in, they will overwrite shaders with
    the same name that were encountered earlier. This means that
    a file-based shader can be overwritten with another
    file-based shader. It is conceivable that an end user could
    take advantage of this fact to change the shader an
    application is using, in order to cheat. Overriding
    <span class="NDLSystemFont">NiFile</span> to load shader
    files from an archive is one way to work around this
    potential vulnerability.</li>

    <li>Loading the same shader library multiple times without
    unloading it can lead to a crash.</li>

    <li>Cg shaders that have unused uniform parameters may
    exhibit incorrect behavior during rendering.</li>

    <li>Floating-point values specified in NSF shaders must
    contain a decimal point in the number, but must not begin
    with the decimal point. So the values .4 or 4 will not be
    parsed correctly.</li>

    <li>Shaders that are provided as FX files will not have their
    pixel and vertex shader versions correctly reported in the
    art plugins. They will always display shader version
    0.0.</li>

    <li>It is not possible to specify a <span class=
    "NDLSystemFont">QUINTIC</span> value for the <span class=
    "NDLSystemFont">D3DRS_POSITIONDEGREE</span> or <span class=
    "NDLSystemFont">D3DRS_NORMALDEGREE</span> render states.</li>

    <li>Arrays of matrices (other than bone) aren't supported in
    NSF, and they are not supported in FX.</li>

    <li>NSF+HLSL shaders do not automatically set default global
    constants (they must be entered as entries in the shader
    constant map), while NSF+Cg shaders on the PS3 do.</li>

    <li>The NSF parser can leak memory if shader parsing
    fails.</li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
