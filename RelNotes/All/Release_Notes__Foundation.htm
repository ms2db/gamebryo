<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Foundation Release Notes</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->

<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>

<!--(Begin Body)================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Foundation Release Notes</h1>
<a name="Added_Features_and_Fixed_Bugs" id="Added_Features_and_Fixed_Bugs"></a><h2>Added Features, Changed Behavior, and Fixed Bugs</h2>

<h3>Gamebryo LightSpeed 3.2</h3>

<ul>
    <li>Frame Events have been introduced as a way for system services to invoke functionality
    at multiple times within a single frame tick. A frame event is a light weight message generated
    by a system service during its OnTick behavior. Other services can listen for frame events
    and will receive them immediately, in a well defined order.
    See <span class="NDLSystemFont">
    <a href="../../Reference/efd/efd__IFrameEvent.htm">efd::IFrameEvent</a></span> for more details.
    </li>

    <li>The Logger will now flush errors to disk immediately to help troubleshoot crashes.</li>

    <li>The <span class="NDLSystemFont">EE_INIT</span> macro now regisiters an unhandled exception
    filter on Win32 and Xbox360 in addition to its previous functionality. This default filter will
    log the exception record to the logging system and then flush the logs. In addition, if <span
    class="NDLSystemFont">EE_USE_EXCEPTION_STACKTRACE</span> is defined it will log the stack trace
    where the exception occured. <span class="NDLSystemFont">EE_USE_EXCEPTION_STACKTRACE</span> is
    defined by default for debug and release builds. Registration of the exception handler can be
    disabled through the <span class="NDLSystemFont"><a href="../../Reference/efd/efd__InitOptions.htm"
    >efd::InitOptions</a></span>.</li>

    <li>The <span class="NDLSystemFont">EE_SPECIALIZE_TYPE</span> macro must now be used at the
    global scope. Previously it was best used inside of the <span class="NDLSystemFont">efd</span>
    namespace.</li>

    <li>The <span class="NDLSystemFont"><a href="../../Reference/efd/efd__MemTracker.htm">efd::MemTracker</a></span>
    class now supports the ability to perform a memory snapshot between two specific points. See
    <span class="NDLSystemFont">BeginSnapshot</span>, <span class="NDLSystemFont">EndShapshot</span>,
    <span class="NDLSystemFont">ReportSnapshotAllocations</span>, and <span class="NDLSystemFont">
    ClearSnapshot</span> for details. This ability is disabled by default; source customers can
    enable this ability by compiling foundation with <span class="NDLSystemFont">EE_USE_MEMTRACKER_SNAPSHOT</span>
    defined. Enabling this feature will increase the memory consumed by every allocation. This can
    be combined with <span class="NDLSystemFont">EE_USE_MEMTRACKER_STACKTRACE</span> to include a
    stack trace for every allocation in the resulting report and with <span class="NDLSystemFont">
    EE_USE_MEMTRACKER_DETAILEDREPORTING</span> to include detailed object descriptions for each
    outstanding object that provides a detailed reporting function. Custom <span class="NDLSystemFont"><a
    href="../../Reference/efd/efd__IMemLogHandler.htm">efd::IMemLogHandler</a></span> implementations
    can also choose how to format the resulting reports through the <span class="NDLSystemFont">
    BeginSnapshotLog</span>, <span class="NDLSystemFont">LogAllocUnitSnapshot</span> and <span
    class="NDLSystemFont">EndSnapshotLog</span> methods.</li>
    
    <li>The <span class="NDLSystemFont"><a href="../../Reference/efd/efd__INetService.htm">
    efd::INetService</a></span> interface has been greatly reduced to remove implementation deatils
    that were specific to the default <span class="NDLSystemFont"><a href=
    "../../Reference/efdNetwork/efd__NetService.htm">efd::NetService</a></span> implementation.</li>

    <li>A PS3-only bug preventing Release configuration asserts has been fixed in <span class=
    "NDLSystemFont"><a href="../../Reference/efd/efd__CriticalSection.htm">efd::CriticalSection</a>
    </span>.</li>

    <li>Fixed error checking code in the PC and Xbox 360 implementation of <span class="NDLSystemFont">
    DefaultFileAccessFunc</span> when attempting to open a read-only file for write.</li>
</ul>

<h3>Gamebryo LightSpeed 3.1.1</h3>

<ul>
    <li>
    Fixed a bug in the efd::NameResolutionService where it would assert if it received an unrecognized message. 
    This resulted in the AssetController crashing when an 
    application built against an older version of LightSpeed attempted to connect to it. The
    NameResolutionService was updated so it does not assert when it receives unrecognized
    messages. </li>
    
    <li>A bug in the configuration of the <span class="NDLSystemFont">
    <a href="../../Reference/efdPhysX/efdPhysX__PhysXSDKManager.htm">efdPhysX::PhysXSDKManager.htm</a></span>
    object has been fixed. Previously, the configuration option to set the vrdEventMask would
    fail and could crash.
    </li>

    <li>A point rotation method was added to
        <span class="NDLSystemFont"><a href="../../Reference/efd/efd__Quaternion.htm">
        efd::Quaternion</a></span>.
    </li>
</ul>


<h3>Gamebryo LightSpeed 3.1</h3>

<ul>
    <li>Introduced the <a href=
    "../../Reference/efd/efd__AssetFactoryManager.htm">efd::AssetFactoryManager</a> in support of
    background loading of assets. See <a href=
    "../../Programmer/AssetRuntimeService/asset_load_svcs_overview.htm">Asset Loading Services
    Overview</a> and <a href=
    "../../Convert/Previous/convert_background_asset_load_3_1.htm">Converting to background Asset
    Loading</a> for further details.</li>

    <li>The ability to perform Gamebryo memory allocations outside of a <span class=
    "NDLSystemFont">EE_INIT</span> / <span class="NDLSystemFont">EE_SHUTDOWN</span> pair has been
    deprecated and will be removed in a future release. All Gamebryo-internal pre-main allocations
    have been removed, and the default MemTracker class now has the ability to warn users of
    pre-main allocations in builds with asserts enabled.

        <p class="indent1">Customers using the <span class=
        "NDLSystemFont">EE_USE_DEFAULT_ALLOCATOR</span> macro will get this behavior by default,
        but it can be disabled by using <span class=
        "NDLSystemFont">EE_USE_DEPRECATED_PREMAIN_ALLOCATOR</span> instead. Both use the same
        underlying allocator, which is still capable of allocating pre-main if necessary.</p>
    </li>

    <li>The default memory log handler can now be replaced in the same manner as the memory manager
    by providing a custom implementation of <span class=
    "NDLSystemFont">efd::InitializeMemoryLogHandler</span> in the final application instead of
    invoking <span class="NDLSystemFont">EE_USE_DEFAULT_ALLOCATOR</span>.</li>

    <li>A bug that prevented the Foundation <a href=
    "../../Reference/Macros/efd_macros_rtti.htm">RTTI system</a> from working correctly in some
    multiple-inheritance scenarios has been fixed.</li>

    <li>The <span class="NDLSystemFont">NetLibTCP</span> library, which was previously available
    only for tool-time usage, has been renamed <span class="NDLSystemFont">NetLib</span> and is now
    supported for general PC application use.</li>

    <li>Added a cross-platform wrapper for the atomic primitive compare-and-swap (CAS). The
    AtomicCompareAndSwap method is defined in <span class="NDLSystemFont"><a href=
    "../../Reference/Namespaces/efd.htm#atomic_compare-and-swap_operations">AtomicOperations.h</a></span>
    for pointers and the integer sizes natively supported on a given platform.</li>

    <li>Added two new lock-free data structures (<span class="NDLSystemFont"><a href=
    "../../Reference/efd/efd__LockFreeQueue.htm">efd::LockFreeQueue</a></span> and <span class=
    "NDLSystemFont"><a href=
    "../../Reference/efd/efd__LockFreeStack.htm">efd::LockFreeStack</a></span>). Both are intended
    to be used in a single-reader, single-writer situation and are not safe for multiple-reader or
    multiple-writer situations.</li>

    <li>To better support Subversion users, the Asset Controller will now skip directories named
    "<span class="NDLSystemFont">.svn</span>" when crawling for assets in the asset web.</li>

    <li>The <span class="NDLSystemFont"><a href=
    "../../Reference/efd/efd__MessageService.htm#categorization_functions">efd::MessageService</a></span>
    has new functions for generating specific types of categories. Using these helper functions can
    help to ensure your application will work smoothly when adding multiplayer networking.</li>

    <li>Added compile-time define <span class="NDLSystemFont">EE_ENABLE_METRICS_LOGGING</span>.
    This define can be used to write various metric counters to the log files. Logging must also be
    enabled for this to take effect. This is disabled by default. See <a href=
    "../../Programmer/Logging/logging_metrics_overview.htm">Metrics logging overview</a>.</li>

    <li>Added compile-time define <span class=
    "NDLSystemFont">EE_REMOVE_BACK_COMPAT_STREAMING</span>. If defined, it will selectively compile
    out code that streams assets from older versions of Gamebryo. If all assets for a given game
    have been exported with the current version of Gamebryo, then it is safe to define. This change
    is meant to help reduce executable size, especially on platforms where memory is more
    restrictive.</li>

    <li>Asset Controller's logical asset ID generation algorithm has changed. Previously, logical
    asset IDs were generated using the case-sensitive relative path of the file. Logical asset IDs
    are now generated in a case-insensitive manner. The change was made to make the system less
    prone to error. This change in policy affects all model, preset, and block files that have
    asset property references. To update existing references, we've added a tool for converting and
    updating the logical asset references. For more information about this tool, see <a href=
    "../../Tools/Toolbench/tb_convertllidrefs.htm">ConvertLLIDRefs Tool</a>.</li>
    
    <li>Asset lookups that do not use logical ID's are case sensitive. For example, "urn:emergent-flat-model:SpawnTemple"
    will fail if the asset on disk is "spawntemple". Please contact support if you encounter
    issues.</li>

    <li>Fixed an issue in the Asset Locator Service where an invalid response URI was returned if
    the request URN contained a substring that matched one or more global tags. The result URI had
    all instances of the global tag(s) removed, resulting in truncation. Removal of global tags
    from the response URI is now done using exact match semantics only.</li>
    
    <li>The
    <a href="../../Reference/efd/efd__AssetLocatorService.htm">Asset Locator Service</a>
    now fills in the
    <a href="../../Reference/efd/efd__AssetLocatorResponse.htm">efd::AssetLocatorResponse::AssetLoc::llid</a>
    field in the map of asset locations in the response message.
    </li>

    <li>The definition of <span class="NDLSystemFont">efd::IMessage</span> has been updated to
    include an atomic reference count. All derived message classes in Foundation, Game Framework,
    and Online were updated to forward reference count operations to <span class=
    "NDLSystemFont">efd::IMessage</span>. This ensures each message contains one and only one
    reference count variable. If you have <span class="NDLSystemFont">efd::IMessage</span> derived
    message classes, ensure they forward their reference counting using the <span class=
    "NDLSystemFont">EE_DECLARE_FORWARDED_CONCRETE_REFCOUNT</span> macro. Failure to forward
    reference counting to the base class will result in multiple reference counts in your derived
    class, which can lead to runtime failures if one reference count instance goes to zero before
    the other.</li>

    <li>The <span class="NDLSystemFont">efd::MessageService</span> subscription handling has been
    improved in cases where the message target is derived from <span class=
    "NDLSystemFont">efd::IBase</span> multiple times. Previously messages could be delivered to the
    target multiple times if the object was subscribed using different casts to <span class=
    "NDLSystemFont">efd::IBase</span>.</li>

    <li>Fixed a bug in which <span class="NDLSystemFont"><a href=
    "../../Reference/Namespaces/efd__PathUtils.htm#namespaceefd_1_1_path_utils_1c8c2ae8548ce3cfaf3cb712d75ffb81c">
    efd::PathUtils::PathGetExtension</a></span> would return the source file name instead of an
    empty string if the file name had no extension.</li>

    <li>Fixed assorted reference documentation errors and omissions.</li>
    
    <li>Fixed a bug in which <span class="NDLSystemFont"><a href=
    "../../Reference/efd/efd__File.htm#classefd_1_1_file_1f16480ca439fab3f4caacabc4b6ba00a">
    efd::File::Access</a></span> that would truncate the file in question when OpenMode::WRITE_ONLY or
    OpenMode::WRITE_ONLY_TEXT was specified. This also fixes an issue where the Access call was made
    against a non-existent file and the call would create a zero-length file as a side effect.</li>
    
    <li>Fixed edge case failures in all <span class="NDLSystemFont">ToEulerAngles</span> permutations
    for the <span class="NDLSystemFont">Matrix3</span> class.</li>
    
</ul>

<h3>Gamebryo LightSpeed 3.0</h3>

<ul>
    <li>The Emergent Foundation is new in this release. For information about programming concepts
    and tasks that are related to the Foundation, see <a href=
    "../../Programmer/Introduction_to_Foundation_Programming.htm">Foundation Programming:
    Introduction</a>. For more general information about new features in this release, see <a href=
    "../../GetStart/All/What_s_New_in_Gamebryo.htm">What's New in Gamebryo LightSpeed</a>. Many
    classes previously living in the core runtime libraries NiSystem or NiMain have been renamed
    and placed in Foundation.</li>

    <li>Analogous to the static data management initialization chains, there is now an optional
    per-library thread initialization chain that will be called when new threads are created, or
    during EE_INIT/EE_SHUTDOWN for the main thread. This allows for per-thread lists or structures
    to be properly initialized in a known order.</li>

    <li>To fix edge-case failures, the <span class="NDLSystemFont">Matrix3</span> implementations
    for the following methods have changed on all platforms:

        <ul>
            <li><span class="NDLSystemFont">ToEulerAnglesXYZ</span></li>

            <li><span class="NDLSystemFont">ToEulerAnglesYZX</span></li>

            <li><span class="NDLSystemFont">ToEulerAnglesZXY</span></li>

            <li><span class="NDLSystemFont">ToEulerAnglesZYX</span></li>
        </ul>
    </li>

    <li>If the old (erroneous) behavior is desired for legacy code, the following methods have been
    added:

        <ul>
            <li><span class="NDLSystemFont">ToEulerAnglesXYZ_Legacy</span></li>

            <li><span class="NDLSystemFont">ToEulerAnglesYZX_Legacy</span></li>

            <li><span class="NDLSystemFont">ToEulerAnglesZXY_Legacy</span></li>

            <li><span class="NDLSystemFont">ToEulerAnglesZYX_Legacy</span></li>
        </ul>
    </li>

    <li>Pre-main() allocations should be considered deprecated. Applications built on Gamebryo
    should not depend on these.</li>
</ul>

<a name="Known_Issues_and_Limitations" id="Known_Issues_and_Limitations"></a><h2>Known Issues and Limitations</h2>


<h3>Gamebryo LightSpeed 3.1 Specific Notes</h3>

<ul>
    <li>When loading assets using the <a href=
    "../../Reference/efd/efd__AssetFactoryManager.htm">efd::AssetFactoryManager</a>, only the first
    asset located is loaded if a provided URN resolves to multiple asset locations.</li>
</ul>

<h3>All Gamebryo LightSpeed Releases</h3>

<ul>
    <li><a href="../../Reference/efd/efd__FileDestination.htm">efd::FileDestination</a> log files
    do not have size limits. Setting high logging levels will result in very large log files. A
    process configured with high log levels set can consume all available disk space over time.
    Care should be taken when setting logging levels to log only messages of interest.</li>

    <li>Foundation includes a modified version of STLPort designed to use the Emergent allocator.
    Mixing containers from the Emergent STLPort and another STL version is not supported. It is
    recommended that only one version of STL is used in an individual compilation unit.</li>

    <li>Foundation includes a modified version of the TinyXML XML parser, however the TinyXML code
    does not use the Emergent allocator for tracking memory usage.</li>

    <li>Using a global static instance of the <a href=
    "../../Reference/efd/efd__deque.htm">efd::deque</a> or <a href=
    "../../Reference/efd/efd__hash_map.htm">efd::hash_map</a> classes can result in a memory assert
    during application shutdown if they are destroyed after the allocator.</li>

    <li>Configuration files parsed by the <a href=
    "../../Reference/efd/efd__ConfigManager.htm">efd::ConfigManager</a> class support commenting
    out entire lines by using the semi-colon (;) character as the first non-whitespace character. A
    semi-colon anywhere else in a line will not be recognized as a comment and will be parsed as a
    normal part of the line.</li>

    <li>The LC_COLLATE and LC_NUMERIC Locale values must be set to "C" (the default value). The
    LC_COLLATE value ensures the sort order for strings used internally by the Framework is
    consistent. The LC_NUMERIC value ensures numeric data read or written to files uses consistent
    formatting. Using any other value for these Locale settings is undefined.</li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
