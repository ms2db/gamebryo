<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiDX9Renderer Library Release Notes</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Body)==========================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>NiDX9Renderer Library Release Notes</h1>

<p><a href=
"Release_Notes__NiDX9Renderer_Library.htm#DirectX_SDK_Version">DirectX
SDK Version</a></p>

<p><a href="#Graphics_Requirements">Graphics Card
Requirements</a></p>

<p><a href=
"Release_Notes__NiDX9Renderer_Library.htm#New_Classes_and_Changed_Interfaces">
New Classes and Changed Interfaces</a></p>

<p><a href=
"Release_Notes__NiDX9Renderer_Library.htm#Added_Features_and_Fixed_Bugs">
Added Features, Changed Behavior, and Fixed Bugs</a></p>

<p><a href=
"Release_Notes__NiDX9Renderer_Library.htm#Card_and_Driver_Specific_Issues">
Card and Driver Specific Issues</a></p>

<p><a href=
"Release_Notes__NiDX9Renderer_Library.htm#Known_Issues_and_Limitations">
Known Issues and Limitations</a></p><a name="DirectX_SDK_Version"
id="DirectX_SDK_Version"></a>

<h2>DirectX SDK Version</h2>

<p>Gamebryo LightSpeed was built using the February 2010 DX SDK. Refer to
the <a href="../../GetStart/PC/DirectX_Support.htm">DirectX
Support</a> documentation.</p><a name="Graphics_Requirements" id=
"Graphics_Requirements"></a>

<h2>Graphics Card Requirements</h2>

<p>Gamebryo does not support graphics cards that cannot at least
support shader model 2.0 vertex and pixel shaders. These cards
will likely still work with Gamebryo, but they have not been
tested and no support is provided for their use.</p><a name=
"New_Classes_and_Changed_Interfaces" id=
"New_Classes_and_Changed_Interfaces"></a>

<h2>New Classes and Changed Interfaces</h2>

<h3>Gamebryo LightSpeed 3.2</h3>

<ul>
  <li>None in this release.</li>
</ul>

<h3>Gamebryo LightSpeed 3.1</h3>

<ul>
  <li>None in this release.</li>
</ul>

<h3>Gamebryo LightSpeed 3.0</h3>

<ul>
    <li>Added the function <span class="NDLSystemFont">NiDX9Renderer::RecreateSwapChainRenderTargetGroup</span> 
      which takes an existing swap chain RenderTargetGroup and recreates all the 
      buffers to match the new size of the window, but does so without creating a new 
      RenderTargetGroup so no existing references to the render target group need to 
      be updated.</li>
</ul>

<h3>Gamebryo 2.6.0</h3>

<ul>
    <li>The function <span class=
    "NDLSystemFont">NiDX9Renderer::GetRenderer</span> has been
    updated to only return the renderer when it is an
    <span class="NDLSystemFont"><a href=
    "../../Reference/NiDX9Renderer/NiDX9Renderer.htm">NiDX9Renderer</a></span>.
    If it is any other kind of renderer, the function returns
    NULL.</li>

    <li>Added support for anisotropic filtering. The number of
    taps may be specified on a per-map basis, and limited
    globally by a renderer maximum (<span class=
    "NDLSystemFont">NiRenderer::SetMaxAnisotropy</span>). The
    presence or absence of hardware support for anisotropic
    filtering can be queried via the NiRenderer caps bit
    <span class="NDLSystemFont">CAPS_ANISO_FILTERING.</span> If
    anisotropic filtering is specified and the current hardware
    does not support it, trilinear filtering will be performed
    instead. Because of this, it is seldom necessary to have
    explicit code checking for hardware support.</li>
</ul>

<h3>Gamebryo 2.5.0</h3>

<ul>
    <li>The string functions (<span class=
    "NDLSystemFont">ReadString</span>, <span class=
    "NDLSystemFont">AllocateAndReadString</span>, and
    <span class="NDLSystemFont">WriteString</span>) have been
    removed from <span class="NDLSystemFont"><a href=
    "../../Reference/NiDX9Renderer/NiD3DUtility.htm">NiD3DUtility</a></span>.</li>

    <li>As a result of the introduction of semantic adapter
    tables, shaders no longer own a <span class="NDLSystemFont">
        <a href=
        "../../Reference/NiMain/NiShaderDeclaration.htm">NiShaderDeclaration</a></span>,
        and there are no platform-specific derivations of
        <span class="NDLSystemFont"><a href=
        "../../Reference/NiMain/NiShaderDeclaration.htm">NiShaderDeclaration</a></span>.
        This results in the following methods being removed:

        <ul>
            <li><span class="NDLSystemFont"><a href=
            "../../Reference/NiDX9Renderer/NiDX9Renderer.htm">NiDX9Renderer</a>::CreateShaderDeclaration</span></li>

            <li><span class="NDLSystemFont"><a href=
            "../../Reference/NiDX9Renderer/NiD3DShaderInterface.htm">
            NiD3DShaderInterface</a>::&lt;Get/Set&gt;ShaderDeclaration</span>
            (and more derived classes such as <span class=
            "NDLSystemFont"><a href=
            "../../Reference/NiDX9Renderer/NiD3DShader.htm">NiD3DShader</a></span>)</li>
        </ul>
    </li>

    <li>The release version of the D3D9 library is now always
    loaded, rather than attempting to load the D3D9d.dll library
    in debug builds. The debug runtimes are automatically loaded
    when selected by the DirectX Control Panel.</li>

    <li>Software vertex processing is no longer enabled at the
    pass, vertex program, or geometry level. Instead, it is now
    set globally when creating the <span class=
    "NDLSystemFont">NiDX9Renderer</span> (by passing <span class=
    "NDLSystemFont">DEVDESC_HAL_SWVERTEX</span> as part of the
    device description) and applies to all shader programs and
    meshes.</li>
</ul>

<h3>Gamebryo 2.3.0</h3>

<ul>
    <li>Changed <span class="NDLSystemFont"><a href=
    "../../Reference/NiDX9Renderer/NiDX9Renderer.htm">NiDX9Renderer</a>::Create</span>
    function and <a href=
    "../../Reference/NiDX9Renderer/NiDX9DeviceDesc_DisplayFormatInfo.htm">
    <span class=
    "NDLSystemFont">NiDX9DeviceDesc::DisplayFormatInfo</span></a>
    class to reflect fact that all multisample types can have
    multiple quality levels, not just the nonmaskable multisample
    types.</li>

    <li>A new class, <span class="NDLSystemFont"><a href=
    "../../Reference/NiDX9Renderer/NiDX9Direct3DBufferData.htm">NiDX9Direct3DBufferData</a></span>,
    allows applications to provide their own surfaces as render
    target surfaces in Gamebryo.</li>

    <li><a href=
    "../../Reference/NiDX9Renderer/NiD3DTextureStage.htm"><span class="NDLSystemFont">
    NiD3DTextureStage</span></a> no longer holds a smart pointer
    to the last texture used. This allows more deterministic
    texture destruction.</li>

    <li>Merged all of <span class=
    "NDLSystemFont">NiD3DRenderState</span> class into
    <span class="NDLSystemFont"><a href=
    "../../Reference/NiDX9Renderer/NiDX9RenderState.htm">NiDX9RenderState</a></span>
    class, removing a level of inheritance and a slew of virtual
    functions.</li>

    <li>Added specialized functions to <span class=
    "NDLSystemFont"><a href=
    "../../Reference/NiDX9Renderer/NiDX9RenderState.htm">NiDX9RenderState</a></span>
    and <span class="NDLSystemFont"><a href=
    "../../Reference/NiDX9Renderer/NiDX9ShaderConstantManager.htm">
    NiDX9ShaderConstantManager</a></span> classes that allow
    optimized render state setting without the overhead of saving
    the current state.</li>

    <li>Merged all of <span class=
    "NDLSystemFont">NiD3DShaderConstantManager</span> class into
    <span class="NDLSystemFont"><a href=
    "../../Reference/NiDX9Renderer/NiDX9ShaderConstantManager.htm">
    NiDX9ShaderConstantManager</a></span> class, removing a level
    of inheritance and a slew of virtual functions.</li>

    <li>Added advanced specialized functions to <span class=
    "NDLSystemFont"><a href=
    "../../Reference/NiDX9Renderer/NiDX9RenderState.htm">NiDX9RenderState</a></span>
    and <span class="NDLSystemFont"><a href=
    "../../Reference/NiDX9Renderer/NiDX9ShaderConstantManager.htm">
    NiDX9ShaderConstantManager</a></span> classes that allow
    optimized shader constant setting without the overhead of
    recalculating the dirty flags repeatedly.</li>

    <li>Made a number of functions in <span class=
    "NDLSystemFont"><a href=
    "../../Reference/NiDX9Renderer/NiDX9TextureData.htm">NiDX9TextureData</a></span>
    and derived classes non-virtual.</li>

    <li><span class="NDLSystemFont"><a href=
    "../../Reference/NiDX9Renderer/NiDX9Renderer.htm">NiDXRenderer::CreateShaderDeclaration</a></span>
    no longer takes a default argument for the number of streams.
    Previously, this defaulted to 1. Applications will need to
    update their usage of this function.</li>
</ul>

<h3>Gamebryo 2.2.0</h3>

<ul>
    <li>The <span class=
    "NDLSystemFont">NiDepthStencilBuffer::Create</span> and
    <span class="NDLSystemFont">NiRenderedTexture::Create</span>
    interfaces can now accept a preferred level of multisample
    antialiasing. Although currently there is still no support
    for multisample antialiasing for rendered targets for the
    Direct3D DX9 Renderer.</li>

    <li>A new class, <span class="NDLSystemFont"><a href=
    "../../Reference/NiDX9Renderer/NiDX9Direct3DDepthStencilBufferData.htm">
    NiDX9Direct3DDepthStencilBufferData</a></span>, allows
    applications to provide their own surfaces as depth/stencil
    surfaces in Gamebryo.</li>

    <li>A new class, <span class="NDLSystemFont"><a href=
    "../../Reference/NiDX9Renderer/NiDX9PersistentSrcTextureRendererData.htm">
    NiDX9PersistentSrcTextureRendererData</a></span>, has been
    added in support of new capabilities for direct-loading
    textures on supported platforms. This functionality is
    designed to increase loading performance, reduce the
    load-time memory footprint, improve general memory usage, and
    allow for platform-specific extensions. See also <span class=
    "NDLSystemFont"><a href=
    "../../Programmer/Object_Systems/Streaming.htm#TextureStreamingOptions">
    Texture Streaming Options</a></span> for Internal Textures,
    the export options for <a href=
    "../../Art/Max/Gamebryo_3ds_max_Export_Options1.htm">3ds
    max</a> or <a href=
    "../../Art/Maya/Export_Display_Options.htm">Maya</a>, and the
    description of <span class="NDLSystemFont"><a href=
    "../../Reference/NiMain/NiPersistentSrcTextureRendererData.htm">
    NiPersistentSrcTextureRendererData</a></span> in the Main
    Class Reference for more details.</li>
</ul>

<h3>Gamebryo 2.0.1</h3>

<ul>
    <li>Gamebryo version 2.0.1 is a maintenance release to
    address console specific issues. No changes were made to the
    DX9 renderer for this release.</li>
</ul>

<h3>Gamebryo 2.0.0</h3>

<ul>
    <li>The function <span class=
    "NDLSystemFont">NiDX9TextureData::GetD3DPalette</span> has
    been removed.</li>

    <li>The <span class=
    "NDLSystemFont">NiDX9Renderer::SetZBias</span> and
    <span class="NDLSystemFont">GetZBias</span> functions have
    been removed.</li>

    <li>The <span class="NDLSystemFont">NiDX9Renderer</span>
    functions for controlling render targets and multiple swap
    chains (<span class=
    "NDLSystemFont">CreateWindowedFramebuffer</span>,
    <span class="NDLSystemFont">DestroyWindowedFramebuffer</span>,
    <span class="NDLSystemFont">UseWindowedFramebuffer</span>,
    <span class="NDLSystemFont">SetRenderDepthTarget</span>,
    <span class="NDLSystemFont">SetMultiRenderTarget</span>) have
    been changed to make use of the new <span class=
    "NDLSystemFont"><a href=
    "../../Reference/NiMain/NiRenderTargetGroup.htm">NiRenderTargetGroup</a></span>
    system.</li>

    <li>The new <span class="NDLSystemFont"><a href=
    "../../Reference/NiDX9Renderer/NiDX9DynamicTextureData.htm">NiDX9DynamicTextureData</a></span>
    class (a subclass of <span class="NDLSystemFont"><a href=
    "../../Reference/NiDX9Renderer/NiDX9TextureData.htm">NiDX9TextureData</a></span>)
    has been added to encapsulate renderer-specific data in
    support of the new <span class="NDLSystemFont"><a href=
    "../../Reference/NiMain/NiDynamicTexture.htm">NiDynamicTexture</a></span>
    class. The class makes use of a locking mechanism to signal
    to the hardware when texture edits begin and end. In
    addition, a "fall back" implementation exists for graphics
    cards whose D3DCAPS2_DYNAMICTEXTURES cap is false.</li>

    <li>Made changes needed for supporting non-power-of-two
    dimensions for textures, either conditionally or
    unconditionally, as specified by the graphics card.</li>

    <li>The <span class=
    "NDLSystemFont">NiRendererExtraData</span> class has been
    changed into <span class="NDLSystemFont"><a href=
    "../../Reference/NiMain/NiAdditionalGeometryData.htm">NiAdditionalGeometryData</a></span>.
    Instances of this class are now attached directly to
    <span class="NDLSystemFont"><a href=
    "../../Reference/NiMain/NiGeometryData.htm">NiGeometryData</a></span>
    objects, rather than using <span class=
    "NDLSystemFont">NiDX9PropertyData</span> and <span class=
    "NDLSystemFont"><a href=
    "../../Reference/NiMain/NiRendererSpecificProperty.htm">NiRendererSpecificProperty</a></span>
    objects. <span class="NDLSystemFont">NiDX9PropertyData</span>
    has been removed, and <span class="NDLSystemFont"><a href=
    "../../Reference/NiMain/NiRendererSpecificProperty.htm">NiRendererSpecificProperty</a></span>
    has had all of its functionality removed.</li>

    <li>The function <span class=
    "NDLSystemFont">NiDX9Renderer::GetMRTPostPixelShaderBlendingCapability</span>
    has been split into two functions; the first, with the same
    name, reports whether the device can do post-pixel shader
    blending with multiple render targets, and the second, named
    <span class=
    "NDLSystemFont">GetFormatPostPixelShaderBlendingCapability</span>,
    returns whether the device can do post-pixel shader blending
    with a render target of the specified format.</li>
</ul><a name="Added_Features_and_Fixed_Bugs" id=
"Added_Features_and_Fixed_Bugs"></a>

<h2>Added Features, Changed Behavior, and Fixed Bugs</h2>

<h3>Gamebryo LightSpeed 3.2</h3>

<ul>
  <li>Fixed a bug that caused <span class= "NDLSystemFont"><a href=
    "../../Reference/NiDX9Renderer/NiDX9Renderer.htm">NiDX9Renderer</a>::Recreate</span>
	to fail to release its lock on the renderer following a failure to recreate the device.</li>
</ul>

<h3>Gamebryo LightSpeed 3.1</h3>

<ul>
  <li>Fix problem with the internal representation of the 
    render target and depth/stencil buffers attached to the 
	device is incorrect following a device reset. This could
	cause the depth/stencil buffer to fail to be set to NULL
	after the renderer responds to a lost device.</li>
  <li>Fixed a bug in <span class= "NDLSystemFont"><a href=
    "../../Reference/NiDX9Renderer/NiDX9DataStream.htm">NiDX9DataStream</a></span>
	that led to an assertion in some circumstances when trying 
	to create a large dynamic buffer.</li>
</ul>

<h3>Gamebryo LightSpeed 3.0</h3>

<ul>
    <li>Fixed a bug that caused an assertion when HLSL shaders
    that had been precompiled to object files using row-major
    matrices attempted to set a matrix shader constant.</li>
</ul>

<h3>Gamebryo 2.6.0</h3>

<ul>
    <li>Fixed a bug when releasing dynamic index buffers that
    could lead to a crash when later releasing vertex
    buffers.</li>

    <li>Moved an assertion that could incorrectly trigger when
    the device is lost.</li>
</ul>

<h3>Gamebryo 2.5.0</h3>

<ul>
    <li>It is no longer necessary to specify the <span class=
    "NDLSystemFont">USE_MULTITHREADED</span> flag when creating
    an <span class="NDLSystemFont">NiDX9Renderer</span> that will
    be used with an application that does background loading.
    Textures are now scheduled to be loaded into D3D assets in
    <span class=
    "NDLSystemFont">NiDX9Renderer::PerformPrecache</span>, rather
    than immediately during loading.</li>

    <li>Added a thread lock to ensure that shaders aren't created
    while the D3D device is rendering.</li>

    <li>If an application released a rendered or dynamic texture
    during a reset notification function, the renderer would
    crash after recreating the device because it would attempt to
    recreate the deleted rendered or dynamic texture. This has
    been fixed.</li>

    <li>Fixed an extraneous <span class=
    "NDLSystemFont">NiDelete</span> when loading in a shader
    library that has already been loaded.</li>

    <li>Calling <span class="NDLSystemFont">Recreate</span> on
    the renderer with new display settings will now cause the
    values returned from <span class=
    "NDLSystemFont">GetCreationParameters</span> to return the
    new settings rather than the original ones. In addition, the
    renderer will reflect the new caps.</li>

    <li>Modified <span class="NDLSystemFont"><a href=
    "../../Reference/NiDX9Renderer/NiD3DHLSLPixelShader.htm">NiD3DHLSLPixelShader</a></span>
    and <span class="NDLSystemFont"><a href=
    "../../Reference/NiDX9Renderer/NiD3DHLSLVertexShader.htm">NiD3DHLSLVertexShader</a></span>
    so a scalar variable can be set by a vector <span class=
    "NDLSystemFont"><a href=
    "../../Reference/NiMain/NiShaderConstantMapEntry.htm">NiShaderConstantMapEntry</a></span>
    (such as the predefined parameter <span class=
    "NDLSystemFont">TIME</span>).</li>

    <li>Fixed a bug in loading precompiled pixel and vertex
    shaders. The system now loads constant table information from
    the .vso and .pso files allowing NSF files to reference
    precompiled HLSL shaders and to reference shader constants by
    name. Previously, the files would not load constant table
    information meaning that the system only supported
    precompiled token assembly or HLSL shaders that specified all
    constants by register number.</li>

    <li>Added a reference to the D3D resources provided to
    <span class=
    "NDLSystemFont">NiDX9Renderer::CreateNiTextureFromD3DTexture</span>,
    <span class=
    "NDLSystemFont">NiDX9Renderer::RecreateNiTextureFromD3DTexture</span>,
    <span class=
    "NDLSystemFont">NiDX9Direct3DBufferData::Create</span>,
    <span class=
    "NDLSystemFont">NiDX9Direct3DBufferData::RecreateBufferData</span>,
    <span class=
    "NDLSystemFont">NiDX9Direct3DDepthStencilBufferData::Create</span>,
    and <span class=
    "NDLSystemFont">NiDX9Direct3DDepthStencilBufferData::RecreateBufferData</span>.</li>

    <li>Changed the DX9 shader constant setting code to correctly
    support single Boolean and integer shader constants.</li>
</ul>

<h3>Gamebryo 2.3.0</h3>

<ul>
    <li>Added a check when loading texture files to ensure the
    texture dimensions are supported by the device.</li>

    <li>To deal with the special case of Intel graphics chips
    that expose vs_3_0 but only ps_2_0, the <span class=
    "NDLSystemFont">NiDX9Renderer</span> checks whether both
    pixel shader and vertex shader are SM3.0. If either is not,
    the <span class="NDLSystemFont"><a href=
    "../../Reference/NiDX9Renderer/NiD3DGPUProgramCache.htm">NiD3DGPUProgramCache</a></span>
    is initialized with vs_2_a instead of vs_3_0.</li>

    <li>Fixed a bug that caused <span class=
    "NDLSystemFont"><a href=
    "../../Reference/NiMain/NiZBufferProperty.htm">NiZBufferProperty</a>::SetZBufferTest(false)</span>
    to incorrectly disable depth buffer writes in addition to
    read operations.</li>

    <li>Fixed a bug that caused the <span class=
    "NDLSystemFont">D3DRS_MULTISAMPLEANTIALIAS</span> render
    state to default to <span class="NDLSystemFont">FALSE</span>,
    disabling multisampling.</li>

    <li>Added functionality to the <span class=
    "NDLSystemFont">NiDX9Renderer::ValidateRenderTargetGroup</span>
    function so that it ensures each color buffer is compatible
    with the depth buffer.</li>

    <li>Store default render target group as a smart pointer to
    ensure it doesn't get accidentally released.</li>

    <li>Fixed a problem where calling <span class=
    "NDLSystemFont">NiDX9Renderer::GetSystemDesc</span> before
    creating the renderer causes the <span class=
    "NDLSystemFont">Direct3D9</span> object to attempt to be
    recreated.</li>

    <li>Fixed a problem with batch rendering that caused the
    <span class="NDLSystemFont"><a href=
    "../../Reference/NiMain/NiMaterial.htm">NiMaterial</a></span>
    to return a shader based on the first batch-rendered geometry
    object's properties and effects rather than the set of
    properties and effects specified for the batch.</li>

    <li>Fixed a memory leak in <span class=
    "NDLSystemFont"><a href=
    "../../Reference/NiDX9Renderer/NiDX9Direct3DDepthStencilBufferData.htm">
    NiDX9Direct3DDepthStencilBufferData</a></span> that showed up
    when the functions <span class=
    "NDLSystemFont">PurgeBufferData</span> and <span class=
    "NDLSystemFont">RecreateBufferData</span> are called.</li>

    <li>Made the internal pools of <span class=
    "NDLSystemFont"><a href=
    "../../Reference/NiDX9Renderer/NiD3DPass.htm">NiD3DPass</a></span>
    and <span class="NDLSystemFont"><a href=
    "../../Reference/NiDX9Renderer/NiD3DTextureStage.htm">NiD3DTextureStage</a></span>
    objects thread-safe.</li>
</ul>

<h3>Gamebryo 2.2.0</h3>

<ul>
    <li>Fixed numerous problems with rarely-used vertex buffer
    packing functions.</li>

    <li>Fixed a bug that prevented apps from initializing
    correctly on a Radeon X1*00-series card.</li>

    <li>The function <span class=
    "NDLSystemFont">NiDX9Renderer::GetSwapChainRenderTarget</span>
    should now correctly return the <span class=
    "NDLSystemFont"><a href=
    "../../Reference/NiMain/NiRenderTargetGroup.htm">NiRenderTargetGroup</a></span>
    for a given window.</li>

    <li>Fixed a problem re-initializing samplers 8-15 on
    SM2.0-capable hardware after a device reset.</li>

    <li>Fixed a problem that prevented backbuffers containing
    alpha channels from being created in fullscreen mode even
    when using the appropriate <span class=
    "NDLSystemFont">NiDX9Renderer::FrameBufferFormat</span>
    enumeration. This modified a fix from Gamebryo 2.1.</li>

    <li>Fixed a bug that forced windowed applications to use a
    back buffer format with the same bit depth as the
    screen.</li>

    <li>Mark that the D3D device is not lost immediately after a
    device reset, rather than only in the <span class=
    "NDLSystemFont">NiDX9Renderer::LostDeviceRestore</span>
    function.</li>

    <li>The utility functions <span class=
    "NDLSystemFont">NiD3DUtility::GetD3DFromNi</span> and
    <span class="NDLSystemFont">GetD3DTransposeFromNi</span> now
    fully fill in the D3D matrix, rather than assuming that the
    unused last row or column is already filled in.</li>

    <li>Improved performance of filling constants for HLSL shaders
    by caching register indices.</li>

    <li>Ensure the <span class=
    "NDLSystemFont">m_bDeviceLost</span> flag is updated
    immediately after a device reset succeeds.</li>

    <li>Fixed a crash that shows up when attempting to pack
    binormals or tangents that don't exist on the geometry.</li>

    <li>Fixed a bug determining the correct texture format to use
    for cube maps.</li>

    <li>Prevent <span class=
    "NDLSystemFont">NiDX9LightManager::GetNextAvailableIndex</span>
    from looping infinitely if 4096 lights exist in the
    scene.</li>

    <li>Fixed a bug where the number of texture sets packed in a
    vertex buffer was not getting clamped consistently throughout
    the renderer.</li>

    <li>Remove a check that prevented multiple render targets
    from being used with the backbuffer was multisampled.</li>
</ul>

<h3>Gamebryo 2.1.0</h3>

<ul>
    <li>Fixed a bug that prevented windowed applications from
    having a 32-bit back buffer selected when a specific frame
    buffer format is not specified during renderer creation.</li>

    <li>Fixed a bug that could cause double-deletions during
    shutdown after precaching geometry data.</li>

    <li>Fixed a problem that prevented any present interval
    except for <span class="NDLSystemFont">IMMEDIATE</span>
    getting used in windowed mode.</li>

    <li>A bug that caused lighting problems on ATI cards was
    fixed. The bug prevented lights from being correctly enabled
    when a large number of lights were used, even when not all of
    those lights were active at the same time.</li>

    <li>When bump maps are used with cubic environment maps in
    the default Gamebryo texturing pipeline, the bump maps are
    now disabled. This addresses the inability of the
    fixed-function pipeline to use bump maps to affect cubic
    environment map lookups.</li>

    <li>Fixed a problem in which <span class=
    "NDLSystemFont">NiDX9Renderer::TakeScreenShot</span> was not
    honoring the <span class="NDLSystemFont">pkScreenRect</span>
    parameter.</li>

    <li>Improved performance of sparse particle systems by only
    packing the active particles, rather than all possible
    particles.</li>

    <li>Fixed a bug that could cause a crash if more than 8
    textures are used in an NSF shader.</li>

    <li>Fixed a problem that prevented backbuffers containing
    alpha channels from being created even when using the
    appropriate <span class=
    "NDLSystemFont">NiDX9Renderer::FrameBufferFormat</span>
    enumeration.</li>

    <li>All supported display formats are now initialized, so
    there should be no need to call <span class=
    "NDLSystemFont">NiDX9Renderer::AddDisplayFormat</span> to add
    any additional formats.</li>

    <li>Fixed a problem that allowed shaders to attempt to set
    texture stage states beyond the maximum number of texture
    stages allowed.</li>

    <li>Fixed a problem that caused the second pass of a set of
    batch-rendered objects to have the incorrect transforms
    applied to them.</li>
</ul>

<h3>Gamebryo 2.0.0</h3>

<ul>
    <li>The <span class="NDLSystemFont"><a href=
    "../../Reference/NiDX9Renderer/NiDX9LightManager.htm">NiDX9LightManager</a></span>
    has been updated to never use a light index greater than
    4096, which caused occasional problems on older graphics
    cards.</li>

    <li>Added support for textures with non-power-of-two
    dimensions (e.g., for full-screen splash screens, or when
    using the backbuffer as a rendered texture) on graphics cards
    that supports them. Refer to the documentation on <a href=
    "../../Reference/NiDX9Renderer/Texture_Related_Features_and_Limitations_in_DX9.htm">
    texturing support in DX9</a> for more details.</li>

    <li>The system by which D3D texture formats are chosen from
    an <span class="NDLSystemFont"><a href=
    "../../Reference/NiMain/NiTexture__FormatPrefs.htm">
    NiTexture::FormatPrefs</a></span> object has been unified
    across the texture types.</li>

    <li>Added native support for floating-point texture
    formats.</li>

    <li>Fixed a bug that caused a crash when rendering an
    <span class="NDLSystemFont"><a href=
    "../../Reference/NiMain/NiLines.htm">NiLines</a></span>
    object with no active segments.</li>

    <li>Fixed a bug where objects with NULL dynamic effects lists
    were occasionally having stale lighting applied to them.</li>

    <li>Fixed code that selects the nearest supported refresh
    rate when a specific refresh rate is requested during
    renderer creation.</li>

    <li>Fixed the projection matrix used for rendering
    <span class="NDLSystemFont">NiScreenPolygon</span> objects so
    the depth is set correctly when used with orthogonal
    cameras.</li>

    <li>Fixed a bug creating the D3D device is nonmaskable
    multisampling is requested using a multisampling quality
    level higher than the hardware supports.</li>

    <li>Fixed a bug that allowed the contributions of multiple
    ambient lights to go beyond 1.0 and cause problems.</li>

    <li>When <span class="NDLSystemFont"><a href=
    "../../Reference/NiMain/NiTriShapeDynamicData.htm">NiTriShapeDynamicData</a></span>
    objects are packed into vertex or index buffers, the maximum
    size of the geometry is used rather than the current size.
    This prevents buffers from being reallocated when the number
    of active vertices increases.</li>

    <li>Fixed a bug that caused the index buffer to be
    reallocated every frame for dynamic geometry.</li>

    <li>When <span class=
    "NDLSystemFont">NiDX9Renderer::EndBatch</span> is called and
    no geometry has been added to the batch, the function will
    now reset itself so future batches will work correctly.</li>
</ul><a name="Card_and_Driver_Specific_Issues" id=
"Card_and_Driver_Specific_Issues"></a>

<h2>Card and Driver Specific Issues</h2>

<h4>ATI Radeon X1800</h4>

<p>Driver Tested: Catalyst 9.8 (on Windows Vista)</p>

<ul>
    <li>No known issues</li>
</ul>

    <h4>ATI Radeon HD 2900 XT</h4>

<p>Driver Tested: Catalyst 9.8 (on Windows Vista)</p>

<ul>
    <li>No known issues</li>
</ul>

<h4>ATI Radeon HD 4870 X2</h4>

<p>Driver Tested: Catalyst 9.8 (on Windows Vista)</p>

<ul>
    <li>No known issues</li>
</ul>

<h4>Intel i915G</h4>

<p>Driver Tested: PV 14.25.50 (on Windows XP)</p>

<ul>
    <li>May experience some rendering problems with
    ShadowMap due to high VRAM
    requirements. Consider increasing the amount of video memory
    available to the card via the system BIOS.</li>
</ul>

<h4>Intel i965G</h4>

<p>Driver Tested: PV 15.11.5 (on Windows Vista)</p>

<ul>
    <li>May experience some rendering problems with
    ShadowMap due to high VRAM
    requirements. Consider increasing the amount of video memory
    available to the card via the system BIOS.</li>
</ul>

<h4>Intel G45</h4>

<p>Driver Tested: PV 14.38.3 (on Windows XP)</p>

<ul>
    <li>No known issues</li>
</ul>

<h4>nVidia GeForce 6800 GT</h4>

<p>Driver Tested: Forceware 190.62 (on Windows Vista)</p>

<ul>
    <li>No known issues</li>
</ul>

<h4>nVidia GeForce 7900 GS</h4>

<p>Driver Tested: Forceware 190.62 (on Windows Vista)</p>

<ul>
    <li>No known issues</li>
</ul>

<h4>nVidia GeForce 8800 GTX</h4>

<p>Driver Tested: Forceware 182.50 (on Windows Vista)</p>

<ul>
    <li>No known issues</li>
</ul>

<h4>nVidia GeForce 9800 GTX</h4>

<p>Driver Tested: Forceware 190.62 (on Windows Vista)</p>

<ul>
    <li>No known issues</li>
</ul>

<h4>nVidia GeForce GTX 280</h4>

<p>Driver Tested: Forceware 190.62 (on Windows Vista)</p>

<ul>
    <li>No known issues</li>
</ul>

<h4>nVidia GeForce GTX 295</h4>

<p>Driver Tested: Forceware 190.62 (on Windows Vista)</p>

<ul>
    <li>No known issues</li>
</ul>

<a name="Known_Issues_and_Limitations" id=
"Known_Issues_and_Limitations"></a>

<h2>Known Issues and Limitations</h2>

<p>This section lists unexpected issues and limitations in the
DX9 renderer. For a list of features and platform limitations,
see the <a href=
"../../Reference/NiDX9Renderer/Antialiasing_in_DX9.htm">Features
and Limitations of the DX9 Renderer</a>.</p>

<h3>General Notes</h3>

<h4>All Releases</h4>

<ul>
    <li>Debug builds of the engine will use the D3DXSHADER_DEBUG and 
        D3DXSHADER_SKIPOPTIMIZATION flags when compiling shaders created through
        <span class="NDLSystemFont">
        <a href="../../Reference/NiMain/NiFragmentMaterial.htm">NiFragmentMaterial</a></span> 
        in order to allow for debugging of those shader programs. This does lead to 
        situations, however, where a shader program will fail to compile when it would 
        otherwise compile successfully, due to number of shader instructions. This is 
        especially apparent when running on shader model 2.0 cards, which have a more 
        limited instruction count, but it has been observed on shader model 3.0 cards as 
        well. Using a Release or Shipping build of the engine will work around the 
        problem.</li>
    <li>If <span class=
    "NDLSystemFont">NiDX9RenderState::SaveShaderState</span> is
    called before any objects are rendered, <span class=
    "NDLSystemFont">NiDX9RenderState::RestoreShaderState</span>
    will fail to restore the NULL vertex declaration.</li>

    <li>While hardware instancing is only officially supported by
    Direct3D under shader model 3.0, some shader model 2.0 cards
    also support hardware instancing. Gamebryo will detect these
    cards and allow hardware instancing to be used. This can
    cause errors to be reported by Direct3D if it is running in
    debug mode, since hardware instancing is only officially
    supported under shader model 3.0.</li>

    <li>The <a href=
    "../../Reference/NiMeshProfileProcessor/Introduction_to_NiMeshProfileProcessor.htm">
    <span class="NDLSystemFont">NiMeshProfileProcessor</span></a>
    is not guaranteed to preserve the order of the elements in
    the resulting <span class="NDLSystemFont"><a href=
    "../../Reference/NiMesh/NiDataStream.htm">NiDataStream</a></span>.
    As a result, some rare circumstances may result in an
    <span class="NDLSystemFont"><a href=
    "../../Reference/NiMesh/NiMesh.htm">NiMesh</a></span> that is
    unable to render because a vertex declaration cannot be
    successfully created. These situations can usually be
    overcome by ensuring that the mesh profile does not use any
    data formats not supported by DX9, and by not interleaving
    the data streams.</li>

    <li>When multiple render targets are used, a behavior has
    been observed on nVidia cards where if the first object
    rendered draws only to a single render target, all subsequent
    objects will also fail to render to the multiple render
    targets, even if they attempt to. This may result in
    unexpected behavior.</li>

    <li>On Windows Vista, applications that start fullscreen will
    throw a D3D "Lost due to uniqueness" error. This error can be
    safely ignored.</li>

    <li>Intermittent, regular frame rate drops have been
    encountered when running GPU-taxing applications (such as
    MeshInstancing) in windowed mode on nVidia hardware. This
    behavior has been linked to animated icons in the taskbar,
    although hiding the taskbar does not resolve the situation.
    We are working with nVidia to address the problem.</li>

    <li>As of the December 2006 DX SDK, the HLSL compiler
    included as part of D3DX is no longer capable of compiling to
    the pixel shader models lower than ps_2_0. This affects the
    direct compilation of HLSL shaders (through <span class=
    "NDLSystemFont"><a href=
    "../../Reference/NiDX9Renderer/NiD3DShaderProgramFactory.htm">
    NiD3DShaderProgramFactory</a></span> as well as the use of FX
    shaders that contain HLSL pixel shaders. This can be worked
    around in a number of ways: applications can change their
    shaders to use ps_2_0 or later; applications can use assembly
    pixel shaders that use earlier shader models, or applications
    can set the <span class=
    "NDLSystemFont">D3DXSHADER_USE_LEGACY_D3DX9_31_DLL</span>
    shader compilation flag (which requires applications to
    install the d3dx9_31.dll in addition to the standard DX
    redistribution). Refer to the D3D documentation for more
    details.</li>

    <li>Skinning shaders generally store blend indices using
    either <span class="NDLSystemFont">D3DDECLTYPE_UBYTE4</span>
    or <span class="NDLSystemFont">D3DDECLTYPE_D3DCOLOR</span>.
    The only difference between these two formats is the byte
    ordering: <span class="NDLSystemFont">UBYTE4</span> is
    ordered "xyzw" while <span class=
    "NDLSystemFont">D3DCOLOR</span> is swizzled to "zyxw" before
    the data is passed in to the vertex shader. When <span class=
    "NDLSystemFont">D3DCOLOR</span> is used, the vertex shader
    often needs to un-swizzle the blend indices before they can
    be used, often using the HLSL intrinsic <span class=
    "NDLSystemFont">D3DCOLORtoUBYTE4</span>. The use of
    <span class="NDLSystemFont">D3DCOLOR</span> is necessary
    because some early graphics cards are not capable of using
    vertex data in <span class="NDLSystemFont">UBYTE4</span>
    format. Since Gamebryo associates a vertex declaration with a
    vertex buffer, geometry packed using a shader that uses one
    convention will often not work correctly if a shader using
    the other convention is applied to that geometry. For
    example, the <span class=
    "NDLSystemFont">NiD3DXEffectShaderLib</span> assumes indices
    in FX shaders will be <span class=
    "NDLSystemFont">D3DCOLOR</span>, but the <span class=
    "NDLSystemFont"><a href=
    "../../Reference/NiMain/NiStandardMaterial.htm">NiStandardMaterial</a></span>
    system constructs shaders that assume indices will be
    <span class="NDLSystemFont">UBYTE4.</span> As a result, these
    shaders are incompatible without special handling. The
    introduction of the multi-material packing system in Gamebryo
    2.3 provides some mechanism for working around this issue.
    Applications that enforce packing of geometric data with
    <a href=
    "../../Reference/NiMain/NiStandardMaterial.htm"><span class=
    "NDLSystemFont">NiStandardMaterial</span></a> as the active
    material via geometry precaching can access the unswizzled,
    UBYTE4 data in FX shaders without using <span class=
    "NDLSystemFont">D3DCOLORtoUBYTE4.</span></li>

    <li>The DX9 renderer does not honor the multisampling flag on
    <span class="NDLSystemFont"><a href=
    "../../Reference/NiMain/NiRenderedTexture.htm">NiRenderedTexture</a></span>
    objects.</li>

    <li>The function <span class=
    "NDLSystemFont">NiRenderedTexture::Create(Ni2DBuffer*
    pkBuffer, NiRenderer* pkRenderer)</span> will cause any
    previous texture created with this buffer to no longer be
    updated. Applications should avoid use of this function by
    storing the <span class=
    "NDLSystemFont">NiRenderedTexture</span> that the buffer came
    from initially.</li>

    <li>Fogging objects that require multiple passes and use
    alpha blending can result in fogging artifacts where the
    object's alpha values fall to 0. Alpha testing can help
    reduce the artifacts, but will probably not eliminate
    them.</li>

    <li>The <span class="NDLSystemFont">NiDX9Renderer</span>
    requires the display hardware to support at least two
    textures in a single pass. Hardware that does not support
    this capability will fail renderer creation.</li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
