<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Base Game: Populating Your First Level</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>

<!--(Begin Body)================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Base Game: Populating Your First Level</h1>

<p>This section walks you through the process of creating your first Base Game level. At the end of
this section you will have a room with a trigger and a door that reacts to that trigger.</p>

<h2>Tutorial at-a-Glance</h2>

<ol>
    <li><a href="base_game_tutorial_overview.htm">Tutorial Overview</a></li>

    <li><a href="base_game_tutorial_transform_hw.htm">Transforming Hello World</a></li>

    <li><a href="base_game_tutorial_models.htm">Creating New Models</a></li>

    <li><a href="base_game_tutorial_behaviors.htm">Adding New Behaviors</a></li>

    <li><b>Populating Your First Level&nbsp;&nbsp;&lt;-- You are here</b></li>

    <li><a href="base_game_tutorial_project.htm">C++ Project Changes</a></li>

    <li><a href="base_game_tutorial_code.htm">C++ Code Changes</a></li>

    <li><a href="base_game_tutorial_loading.htm">Loading Your World and Starting the
    Application</a></li>

    <li><a href="base_game_tutorial_more_services.htm">Adding More Services</a></li>
</ol>

<h2>Toolbench Settings</h2>

<p>This section is a lot easier to complete if you make some Toolbench setting changes. So, let's
make those changes now.</p>

<p>Begin by opening World Builder. This can be done by double-clicking the BaseGame.block project file
in the Game Solution view.</p>

<p>We'll be rotating objects by 90 degrees pretty often. Go ahead and update the <span class=
"NDLGUILabel">Rotation Snap</span> value to 90 (<img src="images/base_game_tutorial_rot_snap.png"
alt="Rotation Snap button">) and be sure to have it on. This will snap rotations at 90 degree
intervals.</p>

<p>We're also going to be working with models that have sizes that are multiples of 100. Update the
<span class="NDLGUILabel">Translation Snap</span> value to 100 (<img src=
"images/base_game_tutorial_tran_snap.png" alt="Translation Snap button">) and also be sure to have
it on. This will snap object translations to 100-pixel intervals.</p>

<h2>Floor</h2>

<p>First, let's define the floor. If it's not already open, go ahead and open <span class=
"NDLSystemFont">BaseGame.block</span> in World Builder. Add seven <span class=
"NDLSystemFont">HelloWorld.HallLargeFloor</span> models and arrange the tiles as they are shown in the following
screenshot.</p>

<div class="FigureContainer">
    <img src="images/base_game_tutorial_floor.png" width="787" height="566" alt=
    "base_game_tutorial_floor(16K)">

    <p class="FigureCaption">BaseGame HallLargeFloor arrangement</p>
</div>

<p>The highlighted tile should be at position (0,0,0), the tile that is outside the rectangle is at
position (800,0,0).</p>

<p>Your tiles should be located at the following positions:</p>

<ul>
    <li>(0,0,0)</li>

    <li>(400,0,0)</li>

    <li>(800,0,0)</li>

    <li>(0,400,0)</li>

    <li>(0,800,0)</li>

    <li>(400,400,0)</li>

    <li>(400,800,0)</li>
</ul>

<h2>Walls</h2>

<p>Next, we want to add walls. Add some <span class="NDLSystemFont">HallLargeEdge</span>,
<span class="NDLSystemFont">HallInnerCorners</span>, <span class=
"NDLSystemFont">HallOuterCorners</span>, and a <span class="NDLSystemFont">BgDoor</span> to the
world so that your new room looks like the one depicted below. Two <span class=
"NDLSystemFont">HallOuterCorners</span> are used to fill the gaps around the door.</p>

<div class="FigureContainer">
    <img src="images/base_game_tutorial_walls.png" width="788" height="566" alt=
    "base_game_tutorial_walls(59K)">

    <p class="FigureCaption">BaseGame Floor and Walls</p>
</div>

<h2>TriggerRing</h2>

<p>Add a TriggerRing. Set the Position property to (300,0,0).</p>

<div class="FigureContainer">
    <img src="images/base_game_tutorial_walls_tring.png" width="787" height="566" alt=
    "base_game_tutorial_walls_tring (115K)">

    <p class="FigureCaption">BaseGame Floor with TriggerRing</p>
</div>

<h2>Adding the PhysXScene</h2>

<p>Add a PhysXScene to the world. This is a hidden entity that has properties related to PhysX. We
need to add this to our world to enable PhysX support. Select the PhysXScene from the Entity
Palette view and drag it into the world. This entity is not visible, so you can drop it anywhere in
the scene.</p>

<h2>Attaching the TriggerRing to the Door</h2>

<p>We want the door to open when the TriggerRing is entered. To do this, switch to the Entity View
and select <span class="NDLSystemFont">TriggerRing0</span>. The trigger ring should be highlighted
and its properties will be visible in the Entity Editor.</p>

<ol>
    <li>Override the <span class="NDLSystemFont">PhysXTrigger::TriggerOnLeave</span> mix-in
    property and set it to false. We only want to trigger the door when we enter the trigger, not
    when we leave it.</li>

    <li>Override the <span class="NDLSystemFont">RemoteBehaviorResponse::OnEnterBehaviors</span>
    mix-in property and add a new map with "BgAvatar" as the key and "OnOpenClose" as the value.
    This is the behavior that we will invoke on the door when the BgAvatar entity enters the
    trigger.</li>

    <li>Override the <span class="NDLSystemFont">RemoteEntity</span> and select <span class=
    "NDLSystemFont">BgDoor0</span>. This is the entity that we'll send an event to when the trigger
    is entered.</li>
</ol>

<p>When you've completed the above override steps, your Entity Editor will look like this:</p>

<div class="FigureContainer">
    <img src="images/base_game_tutorial_tring_props.png" width="241" height="566" alt=
    "base_game_tutorial_tring_props (49K)">

    <p class="FigureCaption">BaseGame TriggerRing Entity Properties</p>
</div>

<h2>Add an AmbientLight, Camera, and a BgAvatar</h2>

<p>Finally, add an AmbientLight and a BgAvatar and set the following properties:</p>

<h4>AmbientLight</h4>

<ul>
    <li>AmbientColor = (255,222,153)</li>

    <li>Dimmer = 0.9</li>

    <li>Position = (400, 400, 800)</li>
</ul>

<div class="FigureContainer">
    <img src="images/base_game_tutorial_amlight.png" width="320" height="826" alt=
    "base_game_tutorial_amlight(35K)">

    <p class="FigureCaption">BaseGame Ambient Light Properties</p>
</div>

<h4>BgAvatar</h4>

<ul>
    <li>Position = (0, 900, 0)</li>
</ul>

<p>Select the BgAvatar entity and click the <span class="NDLGUILabel">Look at Selection</span>
button (<img src="../Hello_World/images/hello_world_tutorial_look_at_icon.png" width="33" height=
"30" alt="hello_world_tutorial_look_at_icon (1K)">).</p>

<p>Now we will position a camera that provides the desired view of our scene. Press the "W-A-S-D"
keys on your keyboard to zoom and position the scene so that Jack is mostly centered and most of
the floor is visible. Rotate the scene, if needed, so that the viewport is facing the front of the
Jack.</p>

<p>Now, from the <span class="NDLGUILabel">World Builder</span> menu, select <span class=
"NDLGUILabel">Create Camera from Viewport</span>. This will create a camera entity in the world
with the settings needed to recreate this viewport exactly in the game.</p>

<p>Your first level should look something like this. If you have default lights enabled, go ahead
and turn these OFF by clicking the <span class="NDLGUILabel">Toggle Default Lights</span> button
(<img src="images/base_game_tutorial_default_lights.png" alt="Toggle Default Lights button">).</p>

<div class="FigureContainer">
    <img src="images/base_game_tutorial_room_one.png" width="723" height="826" alt=
    "base_game_tutorial_room_one(64K)">

    <p class="FigureCaption">BaseGame First Room</p>
</div>

<h2>Moving on...</h2>

<p>Next, we'll add some additional libraries that we'll need to support the features found in our
new level. See <a href="base_game_tutorial_project.htm">C++ project changes</a>.</p>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
    <li><a href="../../Tools/Toolbench/tb_intro.htm">Toolbench Introduction</a></li>

    <li><a href="../../Tools/WorldBuilder/wb_intro.htm">World Builder Introduction</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
