<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Base Game: Transforming Hello World</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type=
"text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Base Game: Transforming Hello World</h1>

<p>This section walks you through the steps needed to prepare Hello World
assets and models for use as the basis for Base Game. By the end of this
section you will have the starting point for the rest of this tutorial.</p>

<h2>Tutorial at-a-Glance</h2>

<ol>
    <li><a href="base_game_tutorial_overview.htm">Tutorial Overview</a></li>

    <li><b>Transforming Hello World&nbsp;&nbsp;&lt;-- You are here</b></li>

    <li><a href="base_game_tutorial_models.htm">Creating New Models</a></li>

    <li><a href="base_game_tutorial_behaviors.htm">Adding New
    Behaviors</a></li>

    <li><a href="base_game_tutorial_world.htm">Populating Your First
    Level</a></li>

    <li><a href="base_game_tutorial_project.htm">C++ Project Changes</a></li>

    <li><a href="base_game_tutorial_code.htm">C++ Code Changes</a></li>

    <li><a href="base_game_tutorial_loading.htm">Loading Your World and
    Starting the Application</a></li>

    <li><a href="base_game_tutorial_more_services.htm">Adding More
    Services</a></li>
</ol>

<h2>Create a New EMT Project</h2>

<p>The first thing we need to do is to create a new game solution in Toolbench
for our new application. We'll follow the same steps that we outlined in the
<a href="../Hello_World/hello_world_tutorial_new_emt_project.htm">Creating a
new Toolbench Game Solution</a> section of the Hello World tutorial, but with
one notable addition. In the Hello World tutorial, we didn't import the PhysX
model library when we were creating the solution. We need this library for Base
Game, so when we arrive at the <a href="#CopyStandardLibraries">Copy Standard
Libraries</a> dialog in the Game Solution Wizard, we'll include the
library.</p>

<p>In Toolbench, you need to create a new EMT project so you can model your
application. First, run Toolbench (<span class="NDLGUILabel">Start &gt;
Emergent &gt; Gamebryo LightSpeed &gt; Tools &gt; Toolbench</span>). Within
Toolbench, select <span class="NDLGUILabel">File &gt; New Content</span>. In
the New Content dialog, select <span class="NDLGUILabel">Game Solution</span>
within the <span class="NDLGUILabel">Content Categories</span> list on the left
side. Give your new solution a name and set the output folder. For the purposes
of this tutorial, we create our new solution in the following location:</p>

<p><span class="NDLSystemFont">C:\Emergent\BaseGameTutorial\Media</span></p>

<div class="FigureContainer">
    <img src="images/base_game_tutorial_new_gsl.png" width="592" height="442"
    alt="base_game_tutorial_new_gsl (24K)">

    <p class="FigureCaption">Creating the BaseGame game solution</p>
</div>

<p>When you've entered the name of your solution and the output folder, click
<span class="NDLGUILabel">OK</span></p>

<h2>Following the Game Solution Wizard</h2>

<p>After you define the name of your new solution and the folder to use for it,
the Game Solution Wizard automatically launches. This wizard walks you through
the steps to define your new solution.</p>

<h3>Organize Game Content</h3>

<p>The first dialog in the wizard is the <span class="NDLGUILabel">Organize
Game Content</span> dialog. If you create your game solution in a folder that
doesn't have a pre-existing asset web, the <em>Asset Web Root</em> is relative
to your solution's output folder. Click <span class="NDLGUILabel">Next</span>
to continue the wizard.</p>

<div class="FigureContainer">
    <img src="images/base_game_tutorial_web_root.png" width="500" height="400"
    alt="hello_world_tutorial_web_root (22K)">

    <p class="FigureCaption">Game Solution Asset Web Root</p>
</div><a name="CopyStandardLibraries" id="CopyStandardLibraries"></a>

<h3>Copy Standard Libraries</h3>

<p>The next dialog in the Game Solution Wizard is the <span class=
"NDLGUILabel">Copy Standard Libraries</span> dialog. LightSpeed comes with a
set of standard libraries that you can use as a basis for the models in your
game. These libraries include models like a base model for all Entities,
lights, cameras, and PhysX models. In our case, we want to use the <span class=
"NDLGUILabel">Standard Model Library</span> and the <span class=
"NDLGUILabel">PhysX Model Library</span>.</p>

<div class="FigureContainer">
    <img src="images/base_game_tutorial_import_physx.png" width="500" height=
    "400" alt="base_game_tutorial_import_physx (17K)">

    <p class="FigureCaption">Importing the PhysX model library</p>
</div>

<h3>Create Initial Assets</h3>

<p>The <span class="NDLGUILabel">Create Initial Assets</span> dialog is next.
The wizard will create empty entity model and block files for you. You can
bypass this step by unselecting the appropriate check box. You can also put the
resulting files in different directories and give them different names. For
this tutorial, we'll accept the wizard-generated defaults.</p>

<div class="FigureContainer">
    <img src="images/base_game_tutorial_initial_assets.png" width="500" height=
    "400" alt="base_game_tutorial_initial_assets(23K)">

    <p class="FigureCaption">Copying BaseGame Initial Assets</p>
</div>

<p>Click <span class="NDLGUILabel">Finish</span> and your new game solution is
ready. The result will look something like this:</p>

<div class="FigureContainer">
    <img src="images/base_game_tutorial_post_wizard_solution.png" width="233"
    height="130" alt="base_game_tutorial_post_wizard_solution(7K)">

    <p class="FigureCaption">BaseGame Initial Game Solution</p>
</div>

<h2>Copying Hello World Models and Assets</h2>

<p>The Hello World demo comes with a set of pre-created mesh and animation
assets along with several EMT models that we'll need in Base Game. To use them
during this tutorial, we need to copy them to our project directory. We've
provided a script that automates this process for you. To prepare the Hello
World assets and models for use in the Base Game tutorial, run the following,
passing the full path to your game solution directory on the command line:</p>
<pre>
cd /D "%EMERGENT_PATH%\Samples\GameFrameworkTechDemos\BaseGame"
CopySampleAssets.bat C:\Emergent\BaseGameTutorial\Media
</pre>

<p>After running the batch file, you'll see a directory structure similar to
the one outlined in <a href="base_game_tutorial_directory_tree.htm">Base Game:
Expected Directory and File Layout.</a></p>

<table class="NDLNoteContainer" width="100%">
    <tr align="left">
        <td class="NDLNoteContainerTD">
            <p class="NDLHeadingNoteContainer">Note</p>

            <div class="NDLNote">
                We're copying assets from the complete Hello World demo, not
                the assets created at the end of the Hello World tutorial. The
                HelloWorld demo includes additional assets and models that were
                not covered in the tutorial. For example, the Hello World demo
                includes additional models for hall ceilings, corners, and
                edges.
            </div>
        </td>
    </tr>
</table>

<h2>Adding HelloWorld .emtproj</h2>

<p>We want to reference the Hello World EMT project, so we add the .emtproj to
our solution. To do so, right-click the <span class="NDLGUILabel">Solution
'BaseGame.gsl'</span> in the <span class="NDLGUILabel">Game Solution</span>
panel and select <span class="NDLGUILabel">Add &gt; Existing Content</span>
from the context menu. Browse to the HelloWorldLibrary directory and select the
<span class="NDLSystemFont">HelloWorld.emtproj</span>.</p>

<h3>Restoring the StandardModelLibrary</h3>

<p>Double-click the <span class="NDLSystemFont">HelloWorld.emtproj</span>. The
File Not Found dialog will display.</p>

<div class="FigureContainer">
    <img src="images/base_game_tutorial_missing_emtproj.png" width="498"
    height="279" alt="base_game_tutorial_missing_emtproj(12K)">

    <p class="FigureCaption">Missing StandardModelLibrary.emtproj</p>
</div>

<p>This dialog displays because the Hello World project expects the Standard
Model Library in a specific location. We've moved the <span class=
"NDLSystemFont">HelloWorld.emtproj</span>, so we need to specify where the
Standard Model Library can be found.</p>

<p>Browse to the <span class=
"NDLSystemFont">StandardModelLibrary.emtproj</span> and click <span class=
"NDLGUILabel">OK</span> to continue.</p>

<div class="FigureContainer">
    <img src="images/base_game_tutorial_missing_stdlib.png" width="498" height=
    "279" alt="base_game_tutorial_missing_stdlib (16K)">

    <p class="FigureCaption">Specifying the new location of Standard Model
    Library</p>
</div>

<p>We now have the <span class="NDLSystemFont">HelloWorld.emtproj</span>
available in your Base Game solution. Next, we'll add it as a referenced
project so we can use models from Hello World as a basis for our updated models
in Base Game.</p>

<h2>Adding Hello World as a Base Game Project Reference</h2>

<p>We want to extend the Hello World models and create new ones for Base Game.
To do this, we need to add a reference to the Hello World EMT project to our
Base Game EMT project. To do this, first double-click the <span class=
"NDLSystemFont">BaseGame.emtproj</span> file in the <span class=
"NDLGUILabel">Game Solution</span> view. Next, expand the <span class=
"NDLSystemFont">.emtproj</span> file to expose the <span class=
"NDLGUILabel">References</span> folder. Right-click this folder and select
<span class="NDLGUILabel">Add Reference</span> from the context menu. Browse to
the <span class="NDLGUILabel">HelloWorldLibrary</span> directory and select the
<span class="NDLSystemFont">HelloWorld.emtproj</span> file.</p>

<p>At this point your Game Solution panel will look like this:</p>

<div class="FigureContainer">
    <img src="images/base_game_tutorial_hw_ref.png" width="232" height="193"
    alt="base_game_tutorial_hw_ref(12K)">

    <p class="FigureCaption">Base Game project with Hello World reference</p>
</div>

<h2>Moving on...</h2>

<p>We're now ready to extend the Hello World models to add new functionality
and add new models to take advantage of PhysX. Let's get started by creating a
new EMT project and creating a couple of models. See <a href=
"base_game_tutorial_models.htm">Creating new models</a>.</p>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
    <li><a href="../../Tools/Toolbench/tb_intro.htm">Toolbench
    Introduction</a></li>

    <li><a href="../../Tools/WorldBuilder/wb_intro.htm">World Builder
    Introduction</a></li>

    <li><a href="../../Reference/QuickRef_Models/model_qckref_intro.htm">Model
    Quick Reference</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
