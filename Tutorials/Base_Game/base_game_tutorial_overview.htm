<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Base Game: Tutorial Overview</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type=
"text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Base Game: Tutorial Overview</h1>

<p>This tutorial walks you through the steps that you need to transform
<a href="../Hello_World/hello_world_tutorial_overview.htm">Hello World</a> into
an application with working PhysX triggers and collision. We'll also replace
the fixed camera in Hello World with a camera that tracks user movement around
the scene.</p>

<p>We'll start off by expanding the Hello World models using the <a href=
"../../Tools/EntityModelingTool/emt_intro.htm">Entity Modeling Tool</a> (EMT)
to add additional properties and behaviors. We'll continue with the EMT to
create new models to support PhysX-based triggers and collision. We'll use
<a href="../../Tools/WorldBuilder/wb_intro.htm">World Builder</a> to create our
first level and add triggers and identify entities that will react to these
triggers.</p>

<p>We'll describe the additional libraries, include paths, and other project
settings you'll need to support these features.</p>

<p>By the end of this tutorial, you will have a running application that will
be very similar to our <a href="base_game_demo.htm">Base Game demo</a>. You can
use your application as the basis for future projects that you build with the
Emergent Game Framework.</p>

<h2>Tutorial at-a-Glance</h2>

<p>These are the steps that you'll take to transform HelloWorld into
BaseGame:</p>

<ol>
    <li><a href="base_game_tutorial_transform_hw.htm">Transforming Hello
    World</a></li>

    <li><a href="base_game_tutorial_models.htm">Creating New Models</a></li>

    <li><a href="base_game_tutorial_behaviors.htm">Adding New
    Behaviors</a></li>

    <li><a href="base_game_tutorial_world.htm">Populating Your First
    Level</a></li>

    <li><a href="base_game_tutorial_project.htm">C++ Project Changes</a></li>

    <li><a href="base_game_tutorial_code.htm">C++ Code Changes</a></li>

    <li><a href="base_game_tutorial_loading.htm">Loading Your World and
    Starting the Application</a></li>

    <li><a href="base_game_tutorial_more_services.htm">Adding More
    Services</a></li>
</ol>

<p>As we progress through the tutorial, we'll include the list above to
highlight your progress.</p>

<h2>Directory Structure</h2>

<p>This is the directory structure that we'll use throughout this tutorial. The
project makes certain assumptions concerning the placement of media assets and
C++ files based on this structure. If you choose a different layout, you'll
need to adjust your project accordingly.</p>
<pre>
    Emergent                       &lt;-- Parent directory
        \ BaseGameTutorial         &lt;-- Visual studio project and C++ source files.
            \ Media                &lt;-- Root of your asset web. Contains your Toolbench files.
            \ Debug                &lt;-- Output directory for the Debug build configuration. 
</pre>

<h2>Prerequisites</h2>

<p>To build and run this tutorial, you should have set up your environment to
include required SDKs and tools. For more information about these requirements,
see <a href="../../Programmer/Build/build_prereqs_pc.htm">Build Prerequisites
for Gamebryo LightSpeed for Win32</a>.</p>

<p>You should be familiar with the concepts introduced in the <a href=
"../Hello_World/hello_world_tutorial_overview.htm">Hello World
tutorial</a>.</p>

<p>You'll also need to ensure that the PhysX SDK is installed and the
PHYSXINSTALLPATH environment variable is set.</p>

<table class="NDLNoteContainer" width="100%">
    <tr align="left">
        <td class="NDLNoteContainerTD">
            <p class="NDLHeadingNoteContainer">Tip</p>

            <div class="NDLNote">
                Although this tutorial builds on the Hello World tutorial, it
                is possible to complete this tutorial without completing
                HelloWorld.
            </div>
        </td>
    </tr>
</table>

<h2>Moving on...</h2>

<p>Let's get started by creating a new EMT project and prepare the Hello World
assets and models for our new project. See <a href=
"base_game_tutorial_transform_hw.htm">Transforming Hello World</a>.</p>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
    <li><a href="../../Programmer/Build/build_prereqs_pc.htm">Windows build
    requirements</a></li>

    <li><a href=
    "../../GetStart/PC/Building_Gamebryo_for_Win32__source_licensees_only_.htm">
    Build Guidelines for Win32</a></li>

    <li><a href=
    "../../GetStart/Architecture/architecture_framework_overview.htm">Game
    Framework overview</a></li>

    <li><a href="../../Tools/Toolbench/tb_intro.htm">Toolbench
    Introduction</a></li>

    <li><a href="../../Tools/WorldBuilder/wb_intro.htm">World Builder
    Introduction</a></li>

    <li><a href="base_game_functional_overview.htm">BaseGame demo functional
    overview</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
