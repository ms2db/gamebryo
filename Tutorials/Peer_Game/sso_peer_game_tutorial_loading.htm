<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Peer Game: Starting the Application</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="FSO" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->

<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>

<!--(Begin Body)================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Peer Game: Starting the Application</h1>

<p>To test out our changes, we will use the pre-built PeerGame executable included with the
LightSpeed distribution. This demo includes all of the code changes to BaseGame that were discussed
in the previous section <a href="sso_peer_game_tutorial_code.htm">C++ Code Changes</a>.</p>

<h2>Tutorial at-a-Glance</h2>

<ol>
    <li><a href="sso_peer_game_tutorial_overview.htm">Tutorial Overview</a></li>

    <li><a href="sso_peer_game_tutorial_transform_bg.htm">Transforming Base Game</a></li>

    <li><a href="sso_peer_game_tutorial_more_services.htm">Extending Entities for Online</a></li>

    <li><a href="sso_peer_game_tutorial_world.htm">Populating Your World</a></li>

    <li><a href="sso_peer_game_tutorial_code.htm">C++ Code Changes</a></li>

    <li><b>Starting the Application&nbsp;&nbsp;&lt;-- You are here</b></li>

    <li><a href="sso_peer_game_tutorial_scripts.htm">Fixing Lua Scripts</a></li>
</ol>

<h2>General Notes on Running Peer Game</h2>

<p>Unlike the Hello World and Base Game demos, Peer Game is intended for multiple instances,
running on the same or different machines. Running both the host and peers on the same machine is
simple: you merely have to launch the process multiple times. The application uses an OS-level
synchronization object (via the <span class="NDLSystemFont">SystemUniqueIndex</span> class) to
track which instance it is. The first instance automatically configures itself to be the host,
spinning up a ChannelManager to route traffic among peers, and loading the authoritative versions
of dynamic entities. Subsequent instances of the application will configure themselves as peers and
will automatically attempt to connect to the host.</p>

<p>To run a peer on another machine requires a little bit more work. First, you will need to change
the hostname portion of the Channel Manager's address to reflect the actual hostname or IP address
of the host machine. This can be found in the <span class="NDLSystemFont">Config.ini</span> file in
the <a href="../../Reference/QuickRef_Config/config_qckref.htm#ChannelManager">ChannelManager
section</a>. Once this is complete, copy the entire tutorial tree, rooted at <span class=
"NDLSystemFont">C:\Emergent\PeerGameTutorial</span>, to the same location on the peer machines.</p>

<p>On peer machines only, you must tell the application to start as a peer even if it is the first
running instance. To do this, edit the local <span class="NDLSystemFont">Config.ini</span> and
uncomment the line setting the value of Role to "Peer".</p>

<h2>Configuring the Application</h2>

<p>You will need to run the application with two configuration changes so that it will properly
utilize the assets that you created in previous steps. The easiest way to pass these configuration
values is via the command-line when starting the application. We will use a Release build of
PeerGame, started with the following command line:
<pre>
cd %EMERGENT_PATH%\Build\Samples\Win32\VC90\PeerGame
start PeerGameRelease.exe AssetWeb.Path=C:\Emergent\PeerGameTutorial Game.Avatar=BgAvatar
</pre>

<p>This will cause the game to use the assets that you created in the given location, and also to
use the "BgAvatar" model for creation of the avatar entity (default setting is to use a model called
"PeerAvatar", which does not exist in your content). Use the same command to start two instances of
the game on your PC.</p>

<h2>Inspecting the Game's Online Features</h2>

<p>With two instances of the game running, note the following:</p>
<ol>
    <li>The Host instance (first one started) behaves just like BaseGame, with all features working.</li>
    <li>The Peer instance (second one started) shows all of the entities in the world. Many of these are replicated.</li>
    <li>When you move the avatars, the animation is NOT correctly reflected on the other instance.</li>
    <li>If you move the peer instance avatar to the trigger ring, the door does not open on the peer.</li>
    <li>The different player avatars do not have differing colors, as they do in the PeerGame Demo.</li>
</ol>

<h2>Moving On...</h2>

<p>In the next section, we will correct the problems in the application by using Toolbench to rapidly
    iterate some script file changes. See <a href="sso_peer_game_tutorial_scripts.htm">
    Peer Game: Fixing Lua Scripts.</a></p>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
    <li><a href="../Hello_World/hello_world_tutorial_loading.htm">Hello World: Loading your world
    and starting the application</a></li>

    <li><a href="../Base_Game/base_game_tutorial_loading.htm">Base Game: Loading your world and
    starting the application</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
