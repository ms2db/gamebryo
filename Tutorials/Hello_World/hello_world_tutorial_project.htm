<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Hello World: Setting Up Your C++ Project</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>

<!--(Begin Body)================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Hello World: Setting Up Your C++ Project</h1>

<p>This section describes all of the settings that you'll need to create a Game Framework-based
application from scratch. This section assumes that you're familiar with launching Visual Studio,
creating new projects, and adding files to a project. It also assumes that you know how to change
project properties in Visual Studio.</p>

<h2>Tutorial at-a-Glance</h2>

<ol>
    <li><a href="hello_world_tutorial_overview.htm">Tutorial Overview</a></li>

    <li><a href="hello_world_tutorial_new_emt_project.htm">Creating a New Toolbench Game
    Solution</a></li>

    <li><a href="hello_world_tutorial_models.htm">Creating New Models</a></li>

    <li><a href="hello_world_tutorial_world.htm">Populating Your World</a></li>

    <li><b>Setting up your C++ project&nbsp;&nbsp;&lt;-- You are here</b></li>

    <li><a href="hello_world_tutorial_services.htm">Creating main.cpp and Adding Services</a></li>

    <li><a href="hello_world_tutorial_loading.htm">Loading Your World and Starting the
    Application</a></li>

    <li><a href="hello_world_tutorial_more_services.htm">Adding More Game Framework
    Services</a></li>
</ol>

<h2>Using the Template .vcproj Files</h2>

<p>If you want to skip this portion of the tutorial altogether, you can use one of the
pre-generated project templates that are provided with this tutorial. The templates are located in
the following locations:</p>

<ul>
    <li>Windows/VC 8&mdash;<span class=
    "NDLSystemFont"><em>%EMERGENT_PATH%</em>/Documentation/HTML/Tutorials/Hello_World/templates/HelloWorld_win32_vc8.vcproj</span></li>

    <li>Windows/VC 9&mdash;<span class=
    "NDLSystemFont"><em>%EMERGENT_PATH%</em>/Documentation/HTML/Tutorials/Hello_World/templates/HelloWorld_win32_vc9.vcproj</span></li>
</ul>

<p>Copy the template project to the directory above your Toolbench Game Solution file (.gsl) that
was generated by Toolbench. This is where your source code will live. In this tutorial, this would
be <span class="NDLSystemFont">C:/Emergent/HelloWorldTutorial</span>.</p>

<p>Once you have this in place, you can skip to the next section of the tutorial, <a href=
"hello_world_tutorial_services.htm">Creating main.cpp and adding services</a>.</p>

<h2>Creating a New Project</h2>

<p>Using Visual Studio, create a new Empty C++ project (<span class="NDLGUILabel">Visual C++ &gt; General &gt; Empty Project</span>)
named HelloWorldTutorial at the root of your project directory. Following what we've done so far in
this tutorial, this would be <span class="NDLSystemFont">C:/Emergent</span>.</p>

<h3>Add an Empty main.cpp File</h3>

<p>Add a main.cpp file to your project. You'll populate this file in the next step of this
tutorial. For this step, you need a C++ file to set the appropriate compiler options.</p>

<h3>Disable Unicode Support</h3>

<p>Your new project should not have Unicode enabled. In the Project Properties dialog, choose
<span class="NDLGUILabel">Configuration Properties &gt; General &gt; Character Set</span> and make
sure you select "Not Set". Also, make sure that the UNICODE and _UNICODE preprocessor defines are
not set.</p>

<h3>Disable C++ Exceptions and RTTI</h3>

<p>Gamebryo LightSpeed doesn't use C++ exceptions or RTTI. Disable C++ Exceptions (<span class="NDLGUILabel">Properties &gt;
C++ &gt; Code Generation</span>). Disable RTTI (<span class="NDLGUILabel">Properties &gt; C++ &gt; Language &gt; Enable Run-Time
Type Info</span>).</p>

<h3>Include Directories</h3>

<p>You need to add include directories to the compiler search path. To do this, bring up the
Project Property dialog, select "C/C++ &gt; General" and paste the following into the "Additional
Include Directories" entry:</p>
<pre>
$(EMERGENT_PATH)/Source/3rdParty/Lua/Package/src;$(EMERGENT_PATH)/Source/3rdParty/STLPort/Package;$(EMERGENT_PATH)/Source/3rdParty/TinyXML;$(EMERGENT_PATH)/SDK/Win32/Include
</pre>

<h3>Preprocessor Defines</h3>

<p>To build HelloWorld or any game that is based on it, the following preprocessor defines must be
set. For VC8, replace "VC9" with "VC8".</p>

<table>
    <thead>
        <tr>
            <th>Configuration</th>

            <th>Preprocessor Defines</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>Debug</td>

            <td>
            NOMINMAX;STRICT;EE_COMPILE_VC90;WIN32;_WINDOWS;EE_PLATFORM_WIN32;_CONSOLE;LUA_USELONGLONG;LNUM_DOUBLE;LNUM_INT64;LUA_SCRIPTING;EE_GAMEBRYO_VERSION=32;_DEBUG;NIDEBUG;EE_EFD_CONFIG_DEBUG;EE_CONFIG_DEBUG;EE_USE_MEMORY_MANAGEMENT;EE_USE_ASSERT_STACKTRACE</td>
        </tr>

        <tr>
            <td>DebugDLL</td>

            <td>
            NOMINMAX;STRICT;EE_COMPILE_VC90;WIN32;_WINDOWS;EE_PLATFORM_WIN32;_CONSOLE;LUA_USELONGLONG;LNUM_DOUBLE;LNUM_INT64;LUA_SCRIPTING;EE_GAMEBRYO_VERSION=32;_DEBUG;NIDEBUG;EE_EFD_CONFIG_DEBUG;EE_CONFIG_DEBUG;EE_USE_MEMORY_MANAGEMENT;EE_USE_ASSERT_STACKTRACE;USEDLL;EE_DYNAMIC_BEHAVIOR_LOAD;LUA_BUILD_AS_DLL;NISYSTEM_IMPORT;NIMAIN_IMPORT;NIFLOODGATE_IMPORT;NIMESH_IMPORT;NIANIMATION_IMPORT;NIPARTICLE_IMPORT;NICOLLISION_IMPORT;NIPORTAL_IMPORT;NIVISUALTRACKER_IMPORT;NIFONT_IMPORT;NIDX9RENDERER_IMPORT;NID3D10RENDERER_IMPORT;NIVIEWMATH_IMPORT;NISETTINGSDIALOG_IMPORT;NIINPUT_IMPORT</td>
        </tr>

        <tr>
            <td>Release</td>

            <td>
            NOMINMAX;STRICT;EE_COMPILE_VC90;WIN32;_WINDOWS;EE_PLATFORM_WIN32;_CONSOLE;LUA_USELONGLONG;LNUM_DOUBLE;LNUM_INT64;LUA_SCRIPTING;EE_GAMEBRYO_VERSION=32;NDEBUG;NIRELEASE;EE_EFD_CONFIG_RELEASE;EE_CONFIG_RELEASE</td>
        </tr>

        <tr>
            <td>ReleaseDLL</td>

            <td>
            NOMINMAX;STRICT;EE_COMPILE_VC90;WIN32;_WINDOWS;EE_PLATFORM_WIN32;_CONSOLE;LUA_USELONGLONG;LNUM_DOUBLE;LNUM_INT64;LUA_SCRIPTING;EE_GAMEBRYO_VERSION=32;NDEBUG;NIRELEASE;EE_EFD_CONFIG_RELEASE;EE_CONFIG_RELEASE;USEDLL;EE_DYNAMIC_BEHAVIOR_LOAD;LUA_BUILD_AS_DLL;NISYSTEM_IMPORT;NIMAIN_IMPORT;NIFLOODGATE_IMPORT;NIMESH_IMPORT;NIANIMATION_IMPORT;NIPARTICLE_IMPORT;NICOLLISION_IMPORT;NIPORTAL_IMPORT;NIVISUALTRACKER_IMPORT;NIFONT_IMPORT;NIDX9RENDERER_IMPORT;NID3D10RENDERER_IMPORT;NIVIEWMATH_IMPORT;NISETTINGSDIALOG_IMPORT;NIINPUT_IMPORT</td>
        </tr>

        <tr>
            <td>Shipping</td>

            <td>
            NOMINMAX;STRICT;EE_COMPILE_VC90;WIN32;_WINDOWS;EE_PLATFORM_WIN32;_CONSOLE;LUA_USELONGLONG;LNUM_DOUBLE;LNUM_INT64;LUA_SCRIPTING;EE_GAMEBRYO_VERSION=32;NDEBUG;NISHIPPING;EE_EFD_CONFIG_SHIPPING;EE_CONFIG_SHIPPING;EE_DISABLE_LOGGING</td>
        </tr>

        <tr>
            <td>ShipingDLL</td>

            <td>
            NOMINMAX;STRICT;EE_COMPILE_VC90;WIN32;_WINDOWS;EE_PLATFORM_WIN32;_CONSOLE;LUA_USELONGLONG;LNUM_DOUBLE;LNUM_INT64;LUA_SCRIPTING;EE_GAMEBRYO_VERSION=32;NDEBUG;NISHIPPING;EE_EFD_CONFIG_SHIPPING;EE_CONFIG_SHIPPING;EE_DISABLE_LOGGING;USEDLL;EE_DYNAMIC_BEHAVIOR_LOAD;LUA_BUILD_AS_DLL;NISYSTEM_IMPORT;NIMAIN_IMPORT;NIFLOODGATE_IMPORT;NIMESH_IMPORT;NIANIMATION_IMPORT;NIPARTICLE_IMPORT;NICOLLISION_IMPORT;NIPORTAL_IMPORT;NIVISUALTRACKER_IMPORT;NIFONT_IMPORT;NIDX9RENDERER_IMPORT;NID3D10RENDERER_IMPORT;NIVIEWMATH_IMPORT;NISETTINGSDIALOG_IMPORT;NIINPUT_IMPORT</td>
        </tr>
    </tbody>
</table>

<h3>Output File</h3>

<p>To generate an executable that contains the configuration in the file name, we need to change
the output file name. To do this, bring up the Project Property dialog, select "Linker &gt;
General" and paste the following into the "Output File" entry:</p>
<pre>
$(OutDir)\HelloWorld$(ConfigurationName).exe
</pre>

<h3>Library Search Paths</h3>

<p>To find the libraries that we need to build HelloWorld or any game that is based on it, we need
to add search paths to the linker's library directories setting. To do this, bring up the project
properties and go to Linker &gt; General. Add the include directory listed in the following table
that corresponds to the configuration that you're updating. If you're using VC8, replace the "VC90"
portion of this path with "VC80".</p>

<table>
    <thead>
        <tr>
            <th>Configuration</th>

            <th>Additional Library Directories</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>Debug</td>

            <td>$(EMERGENT_PATH)/SDK/Win32/Lib/VC90/Debug</td>
        </tr>

        <tr>
            <td>DebugDLL</td>

            <td>$(EMERGENT_PATH)/SDK/Win32/Lib/VC90/DebugDLL</td>
        </tr>

        <tr>
            <td>Release</td>

            <td>$(EMERGENT_PATH)/SDK/Win32/Lib/VC90/Release</td>
        </tr>

        <tr>
            <td>ReleaseDLL</td>

            <td>$(EMERGENT_PATH)/SDK/Win32/Lib/VC90/ReleaseDLL</td>
        </tr>

        <tr>
            <td>Shipping</td>

            <td>$(EMERGENT_PATH)/SDK/Win32/Lib/VC90/Shipping</td>
        </tr>

        <tr>
            <td>ShipingDLL</td>

            <td>$(EMERGENT_PATH)/SDK/Win32/Lib/VC90/ShippingDLL</td>
        </tr>
    </tbody>
</table>

<h3>Libraries</h3>

<p>To build HelloWorld or any game that is based on it, certain libraries must be linked in. The
library names depend on which build configuration you're updating. The following table lists these
libraries based on configuration. If you're using VC8 replace "90" with "80" in the library
name.</p>

<table>
    <thead>
        <tr>
            <th>Configuration</th>

            <th>Required libraries</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>Debug<br>
            Release<br>
            Shipping</td>

            <td>Rpcrt4.lib ws2_32.lib efd.lib efdLogService.lib efdNetwork.lib egf.lib egfLua.lib 
            ecrInput.lib ecr.lib NiSystem.lib NiMain.lib NiFloodgate.lib NiMesh.lib NiAnimation.lib 
            NiParticle.lib NiCollision.lib NiPortal.lib NiVisualTracker.lib NiFont.lib 
            NiDX9Renderer.lib NiD3D10Renderer.lib ecrD3D11Renderer.lib NiSettingsDialog.lib 
            NiDX9RendererSetup.lib NiD3D10RendererSetup.lib ecrD3D11RendererSetup.lib 
            NiViewMath.lib NiInput.lib ecrInputLua.lib ecrLua.lib egmAnimation.lib 
            egmAnimationLua.lib egmVisualTracker.lib dxguid.lib</td>
        </tr>

        <tr>
            <td>DebugDLL</td>

            <td>Rpcrt4.lib ws2_32.lib efd32VC90D.lib efdLogService32VC90D.lib efdNetwork32VC90D.lib 
            egf32VC90D.lib egfLua32VC90D.lib ecrInput32VC90D.lib ecr32VC90D.lib NiSystem32VC90D.lib 
            NiMain32VC90D.lib NiFloodgate32VC90D.lib NiMesh32VC90D.lib NiAnimation32VC90D.lib 
            NiParticle32VC90D.lib NiCollision32VC90D.lib NiPortal32VC90D.lib 
            NiVisualTracker32VC90D.lib NiFont32VC90D.lib NiDX9Renderer32VC90D.lib 
            NiD3D10Renderer32VC90D.lib ecrD3D11Renderer32VC90D.lib NiSettingsDialog32VC90D.lib 
            NiDX9RendererSetup32VC90D.lib NiD3D10RendererSetup32VC90D.lib 
            ecrD3D11RendererSetup32VC90D.lib NiViewMath32VC90D.lib NiInput32VC90D.lib
             ecrInputLua32VC90D.lib ecrLua32VC90D.lib egmAnimation32VC90D.lib 
             egmAnimationLua32VC90D.lib egmVisualTracker32VC90D.lib</td>
        </tr>

        <tr>
            <td>ReleaseDLL</td>

            <td>Rpcrt4.lib ws2_32.lib efd32VC90R.lib efdLogService32VC90R.lib efdNetwork32VC90R.lib 
            egf32VC90R.lib egfLua32VC90R.lib ecrInput32VC90R.lib ecr32VC90R.lib NiSystem32VC90R.lib 
            NiMain32VC90R.lib NiFloodgate32VC90R.lib NiMesh32VC90R.lib NiAnimation32VC90R.lib 
            NiParticle32VC90R.lib NiCollision32VC90R.lib NiPortal32VC90R.lib 
            NiVisualTracker32VC90R.lib NiFont32VC90R.lib NiDX9Renderer32VC90R.lib 
            NiD3D10Renderer32VC90R.lib ecrD3D11Renderer32VC90R.lib NiSettingsDialog32VC90R.lib 
            NiDX9RendererSetup32VC90R.lib NiD3D10RendererSetup32VC90R.lib 
            ecrD3D11RendererSetup32VC90R.lib NiViewMath32VC90R.lib NiInput32VC90R.lib 
            ecrInputLua32VC90R.lib ecrLua32VC90R.lib egmAnimation32VC90R.lib 
            egmAnimationLua32VC90R.lib egmVisualTracker32VC90R.lib</td>
        </tr>

        <tr>
            <td>ShippingDLL</td>

            <td>Rpcrt4.lib ws2_32.lib efd32VC90S.lib efdLogService32VC90S.lib efdNetwork32VC90S.lib 
            egf32VC90S.lib egfLua32VC90S.lib ecrInput32VC90S.lib ecr32VC90S.lib NiSystem32VC90S.lib 
            NiMain32VC90S.lib NiFloodgate32VC90S.lib NiMesh32VC90S.lib NiAnimation32VC90S.lib 
            NiParticle32VC90S.lib NiCollision32VC90S.lib NiPortal32VC90S.lib 
            NiVisualTracker32VC90S.lib NiFont32VC90S.lib NiDX9Renderer32VC90S.lib 
            NiD3D10Renderer32VC90S.lib ecrD3D11Renderer32VC90S.lib NiSettingsDialog32VC90S.lib 
            NiDX9RendererSetup32VC90S.lib NiD3D10RendererSetup32VC90S.lib 
            ecrD3D11RendererSetup32VC90S.lib NiViewMath32VC90S.lib NiInput32VC90S.lib 
            ecrInputLua32VC90S.lib ecrLua32VC90S.lib egmAnimation32VC90S.lib 
            egmAnimationLua32VC90S.lib egmVisualTracker32VC90S.lib</td>
        </tr>
    </tbody>
</table>

<h3>Custom Build Rule to Generate Asset Web Metadata</h3>

<p>The asset runtime system uses a series of files to locate and load assets. These files are
generated using the <a href="../../Tools/AssetController/AssetController_intro.htm">Asset
Controller tool</a>. Add a custom build step to generate these files after a build.</p>

<p>Command Line</p>
<pre>
ECHO Update Asset Metadata
"$(EMERGENT_PATH)\Source\Tools\AssetController\bin\AssetControllerRelease.exe" AssetWeb.Path="$(ProjectDir)\Media" AssetWeb.ExportAndExit=True
SET RETVAL=%ERRORLEVEL%
if not "%RETVAL%"=="0" GOTO FAILURE
ECHO Success
exit 0
:FAILURE
ECHO Failure! You may have Toolbench opened to the same Asset Web Root Directory you are trying to update.
exit 0
</pre>

<p>Description</p>
<pre>
Updating asset metadata
</pre>

<p>Outputs</p>
<pre>
metadata_update_results
</pre>

<h2>Moving on...</h2>

<p>You now have a project created. Next, you'll create a main.cpp, initialize the service manager,
and add some services to the application. See <a href="hello_world_tutorial_services.htm">Creating
main.cpp and Adding Services</a>.</p>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
    <li><a href="../../Programmer/Build/build_prereqs_pc.htm">Windows build requirements</a></li>

    <li><a href="../../GetStart/PC/Building_Gamebryo_for_Win32__source_licensees_only_.htm">Build
    Guidelines for Win32</a></li>

    <li><a href="../../GetStart/Architecture/architecture_framework_overview.htm">Game Framework
    overview</a></li>

    <li><a href="../../Tools/AssetController/AssetController_intro.htm">Introduction to the Asset
    Controller</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
