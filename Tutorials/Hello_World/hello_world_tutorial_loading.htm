<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Hello World: Loading Your World and Starting the Application</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>

<!--(Begin Body)================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Hello World: Loading Your World and Starting the Application</h1>

<p>At this point, you have a runnable application that can load your world. You can run the
application directly from Visual Studio or from the command-line.</p>

<h2>Tutorial at-a-Glance</h2>

<ol>
    <li><a href="hello_world_tutorial_overview.htm">Tutorial Overview</a></li>

    <li><a href="hello_world_tutorial_new_emt_project.htm">Creating a New Toolbench Game
    Solution</a></li>

    <li><a href="hello_world_tutorial_models.htm">Creating New Models</a></li>

    <li><a href="hello_world_tutorial_world.htm">Populating Your World</a></li>

    <li><a href="hello_world_tutorial_project.htm">Setting Up Your C++ Project</a></li>

    <li><a href="hello_world_tutorial_services.htm">Creating main.cpp and Adding Services</a></li>

    <li><b>Loading Your World and Starting the Application&nbsp;&nbsp;&lt;-- You are here</b></li>

    <li><a href="hello_world_tutorial_more_services.htm">Adding More Game Framework
    Services</a></li>
</ol>

<h2>Application Configuration and Launching</h2>

<p>When you launch a Game Framework application, there are various configuration settings that you
will need to provide or override. These settings can affect all aspects of the game, including:
where asset files will be found, block files that should be loaded, log file locations and
filtering, dynamic loading of external modules, tuning parameters, and many other settings. The
configuration settings are passed to the application as Name/Value pairs via either .ini files or
command-line arguments.</p>

<p>For purposes of the tutorial, we will focus on setting two important configuration
variables:</p>

<ul>
    <li><span class="NDLSystemFont">AssetWeb.Path=&lt;path&gt;</span>: Specifies the directory path
    where all of the game's assets will be found. This may be either a relative or absolute path
    value. Also, it is likely to be a different value depending on which platform you are running
    on.</li>

    <li><span class="NDLSystemFont">Game.InitialWorld=&lt;asset id&gt;</span>: Specifies a world
    file created in Toolbench that the game should load when it initializes. This is how the
    initial set of entities are created in the game.</li>
</ul>

<p>For more detailed information on how the configuration subsystem works, see <a href=
"../../Programmer/Game_Initialization/game_init_configuration.htm">Configuring an
Application</a>.</p>

<table class="NDLNoteContainer" width="100%">
    <tr align="left">
        <td class="NDLNoteContainerTD">
            <p class="NDLHeadingNoteContainer">Note</p>

            <div class="NDLNote">
                Your <span class="NDLSystemFont">AssetWeb.Path</span> points to the directory that
                contains your assets. For example, if your assets are not located in a directory
                named 'Media', you need to update <span class="NDLSystemFont">AssetWeb.Path</span>
                to reflect the actual directory name. Or, if your asset directory is not a sibling
                to the directory that contains your executable, you need to change <span class=
                "NDLSystemFont">AssetWeb.Path</span> to reflect the correct relative or absolute
                path. Otherwise, the game will not find any of the asset files that it requires.
            </div>
        </td>
    </tr>
</table>

<h2>Starting the Application from Visual Studio</h2>

<p>To start the application from Visual Studio, set the following debug properties on the project,
specifying your world file (first highlight) and the name of your asset directory (second
highlight):</p>
<pre>
Configuration Properties / Debugging / Command Arguments = Game.InitialWorld=urn:emergent-world:<span class="CodeHighLight"><em>HelloWorld</em></span> AssetWeb.Path=<span class="CodeHighLight"><em>../Media</em></span>
Configuration Properties / Debugging / Working Directory = $(SolutionDir)$(ConfigurationName)
</pre>

<h2>Starting the Application from the Command-Line</h2>

<p>To start the application from the command line, open a command prompt and change directories to
your build output directory (for example, the Debug directory if you've compiled using the Debug
configuration). Run the following command to launch your application, specifying your world file
(first highlight) and the name of your asset directory (second highlight).</p>
<pre>
HelloWorldDebug.exe Game.InitialWorld=urn:emergent-world:<span class=
"CodeHighLight"><em>HelloWorld</em></span> AssetWeb.Path=<span class=
"CodeHighLight"><em>../Media</em></span>
</pre>

<h2>Starting the Application from the Command-Line (with Config.ini)</h2>

<p>You can bypass overriding configuration values on the command-line by providing the values in
the <span class="NDLSystemFont">Config.ini</span> file. By default, any Game Framework application
will look for a file called <span class="NDLSystemFont">Config.ini</span> in its working directory.
If found, the configuration variables in the file are loaded.</p>

<p>Create the <span class="NDLSystemFont">Config.ini</span> file to set the correct <span class=
"NDLSystemFont">AssetWeb.Path</span> and <span class="NDLSystemFont">Game.InitialWorld</span>
values:</p>
<pre>
[AssetWeb]
Path=&lt;your path&gt;

[Game]
InitialWorld=urn:emergent-world:HelloWorld
</pre>

<p>Then, launch the application as simply:</p>
<pre>
HelloWorldDebug.exe
</pre>

<p>If all has gone well, you should get an application that looks like this.</p>

<div class="FigureContainer">
    <img src="images/hello_world_tutorial_running_app.png" width="515" height="400" alt=
    "Running your application (6K)">

    <p class="FigureCaption">Running your application</p>
</div>

<p>Note that you can't move Jack or the camera.</p>

<h2>Moving on...</h2>

<p>In the next section, we'll add the ability to move the Jack character around the screen. See
<a href="hello_world_tutorial_more_services.htm">Adding More Game Framework Services</a>.</p>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
    <li><a href="../../GetStart/PC/Building_Gamebryo_for_Win32__source_licensees_only_.htm">Build
    Guidelines for Win32</a></li>

    <li><a href="../../Programmer/AssetRuntimeService/asset_runtime_intro.htm">Introduction to the
    Asset Runtime Services</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
