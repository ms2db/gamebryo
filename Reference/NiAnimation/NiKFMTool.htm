<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiKFMTool</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiKFMTool</p>

<p class="NDLRefParentage">: public <span><a href=
"../../Reference/NiMain/NiRefObject.htm">NiRefObject</a></span></p>

<p class="NDLRefHeaderFile">&lt;NiKFMTool.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>The <span class="NDLSystemFont">NiKFMTool</span> class stores
information pertaining to transitioning between various sequences
and the mixing parameters for subsets of sequences. This
information includes timing information for transitions and can
be used when performing one of the <span class=
"NDLSystemFont"><a href=
"NiKFMTool.htm#TransitionType">TransitionType</a></span>
transitions with the <a href=
"NiControllerManager.htm"><span class=
"NDLSystemFont">NiControllerManager</span></a> class. It includes
streaming functions that stream the data stored in the class to
and from a KFM file. This class was designed primarily as a
support class for the <a href=
"../../Tools/animation_tool/Introduction_to_Animation_Tool.htm">Gamebryo
Animation Tool</a>, a graphical user interface that allows for
easy, user-friendly specification of all the information stored
in the class and provides an interactive rendered preview of the
sequence transitions. KFM files can also be used with
<span class="NDLSystemFont"><a href=
"NiActorManager.htm">NiActorManager</a></span>.</p>

<p>The <span class="NDLSystemFont">NiKFMTool</span> class has
been made available to developers because it allows an
application to easily retrieve the sequence transition
information specified using the Gamebryo Animation Tool. There
are three nested classes of <span class=
"NDLSystemFont">NiKFMTool</span> that are used internally for
storage: <span class="NDLSystemFont"><a href=
"NiKFMTool.htm#Sequence">Sequence</a></span>, <span class=
"NDLSystemFont"><a href=
"NiKFMTool.htm#Transition">Transition</a></span>, and
<span class="NDLSystemFont"><a href=
"NiKFMTool.htm#SequenceGroup">SequenceGroup</a></span>.
<span class="NDLSystemFont">Transition</span> has two nested
classes: <span class="NDLSystemFont"><a href=
"NiKFMTool.htm#BlendPair">BlendPair</a></span> and <span class=
"NDLSystemFont"><a href=
"NiKFMTool.htm#ChainInfo">ChainInfo</a></span>. <span class=
"NDLSystemFont">SequenceGroup</span> has one nested class:
<span class="NDLSystemFont"><a href=
"NiKFMTool.htm#SequenceInfo">SequenceInfo</a></span>. Some of the
<span class="NDLSystemFont">NiKFMTool</span> member functions
return objects of these types to provide access to its data. Each
of these classes holds additional data specific to its type. They
are only used for data storage and are listed in the <a href=
"NiKFMTool.htm#NestedClasses">Nested Classes</a> section of this
class reference.</p>

<p class="NDLRefHead1">Constructor</p>

<p class="NDLRefMemberFunction">NiKFMTool(const <a href=
"../../Reference/NiMain/NiFixedString.htm">NiFixedString</a>&amp;
kBaseKFMPath = NULL)</p>

<p class="NDLRefMemberDescription">The default constructor takes
the base KFM path that it will use to resolve NIF and KF
filenames. Whenever a KFM file is loaded or saved, this stored
base KFM path is automatically updated. As such, it is only
necessary to specify this parameter when constructing a KFM file
from scratch, which should not really be done in a game
application.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefHead2">Functions for adding components</p>

<p class="NDLRefMemberFunction"><a href=
"NiKFMTool.htm#KFM_RC">KFM_RC</a> AddSequence(unsigned int
uiSequenceID , const <a href=
"../../Reference/NiMain/NiFixedString.htm">NiFixedString</a>&amp;
kFilename, int iAnimIndex)</p>

<p class="NDLRefMemberDescription">Adds a new sequence with the
data provided.</p>

<p class="NDLRefMemberFunction"><a href=
"NiKFMTool.htm#KFM_RC">KFM_RC</a> AddTransition(unsigned int
uiSrcID, unsigned int uiDesID, <a href=
"NiKFMTool.htm#TransitionType">TransitionType</a> eType, float
fDuration)</p>

<p class="NDLRefMemberDescription">Adds a new transition to the
animation sequence specified by <span class=
"NDLSystemFont">uiSrcID</span>. The transition is from the first
animation to the animation sequence specified by <span class=
"NDLSystemFont">uiDesID</span>. Which <span class=
"NDLSystemFont">TransitionType</span> is used is specified by
<span class="NDLSystemFont">eType</span>. The duration for the
transition is provided in <span class=
"NDLSystemFont">fDuration</span>.</p>

<p class="NDLRefMemberFunction"><a href=
"NiKFMTool.htm#KFM_RC">KFM_RC</a> AddBlendPair(unsigned int
uiSrcID, unsigned int uiDesID, const <a href=
"../../Reference/NiMain/NiFixedString.htm">NiFixedString</a>&amp;
kStartKey, const <a href=
"../../Reference/NiMain/NiFixedString.htm">NiFixedString</a>&amp;
kTargetKey)</p>

<p class="NDLRefMemberDescription">Adds a pair of text keys to
the transition specified by <span class=
"NDLSystemFont">uiSrcID</span> and <span class=
"NDLSystemFont">uiDesID</span>. <span class=
"NDLSystemFont">kStartKey</span> is the text key in the source
animation at which the transition should begin and <span class=
"NDLSystemFont">kTargetKey</span> is the text key in the
destination animation indicating the frame to be transitioned to.
Any number of pairs of text keys can be added to a
transition.</p>

<p class="NDLRefMemberFunction"><a href=
"NiKFMTool.htm#KFM_RC">KFM_RC</a> AddSequenceToChain(unsigned int
uiSrcID, unsigned int uiDesID, unsigned int uiSequenceID , float
fDuration)</p>

<p class="NDLRefMemberDescription">Adds a sequence to the chain
transition specified by <span class=
"NDLSystemFont">uiSrcID</span> and <span class=
"NDLSystemFont">uiDesID</span>. A chain transition is a set of
sequences that must be "transitioned though" when transitioning
from <span class="NDLSystemFont">uiSrcID</span> to <span class=
"NDLSystemFont">uiDesID</span>. Any number of sequences may be
added to a chain transition.</p>

<p class="NDLRefMemberFunction"><a href=
"NiKFMTool.htm#KFM_RC">KFM_RC</a> AddSequenceGroup(unsigned int
uiGroupID, const <a href=
"../../Reference/NiMain/NiFixedString.htm">NiFixedString</a>&amp;
kName)</p>

<p class="NDLRefMemberDescription">Adds a new sequence group with
group ID <span class="NDLSystemFont">uiGroupID</span> and name
<span class="NDLSystemFont">kName</span>.</p>

<p class="NDLRefMemberFunction"><a href=
"NiKFMTool.htm#KFM_RC">KFM_RC</a> AddSequenceToGroup(unsigned int
uiGroupID, unsigned int uiSequenceID , int iPriority, float
fWeight, float fEaseInTime, float fEaseOutTime, unsigned int
uiSynchronizeToSequence = SYNC_SEQUENCE_ID_NONE)</p>

<p class="NDLRefMemberDescription">Adds the animation sequence
specified by <span class="NDLSystemFont">uiSequenceID</span> to
the sequence group specified by <span class=
"NDLSystemFont">uiGroupID</span> with priority <span class=
"NDLSystemFont">iPriority</span>. The final target weight for the
sequence is <span class="NDLSystemFont">fWeight</span>. The rate
at which the sequence will ramp up into its full weight is
<span class="NDLSystemFont">fEaseInTime</span>. The rate at which
the animation will ramp down to zero is its <span class=
"NDLSystemFont">fEaseOutTime</span>. Which sequence in the group
(if any) that this sequence will synchronize its time with is
specified by <span class=
"NDLSystemFont">uiSynchronizeToSequence</span>.</p>

<p class="NDLRefHead2">Functions for updating components</p>

<p class="NDLRefMemberFunction"><a href=
"NiKFMTool.htm#KFM_RC">KFM_RC</a> UpdateSequence(unsigned int
uiSequenceID , const <a href=
"../../Reference/NiMain/NiFixedString.htm">NiFixedString</a>&amp;
kFilename, int iAnimIndex)</p>

<p class="NDLRefMemberDescription">Updates the data in the
animation sequence specified by <span class=
"NDLSystemFont">uiSequenceID</span> with the data provided in
<span class="NDLSystemFont">pcName</span>, <span class=
"NDLSystemFont">pcFilename</span>, and <span class=
"NDLSystemFont">iAnimIndex</span>.</p>

<p class="NDLRefMemberFunction"><a href=
"NiKFMTool.htm#KFM_RC">KFM_RC</a> UpdateTransition(unsigned int
uiSrcID, unsigned int uiDesID, <a href=
"NiKFMTool.htm#TransitionType">TransitionType</a> eType, float
fDuration)</p>

<p class="NDLRefMemberDescription">Updates the data in the
transition specified by <span class=
"NDLSystemFont">uiSrcID</span> and <span class=
"NDLSystemFont">uiDesID</span> with the data provided in
<span class="NDLSystemFont">eType</span> and <span class=
"NDLSystemFont">fDuration</span>.</p>

<p class="NDLRefMemberFunction"><a href=
"NiKFMTool.htm#KFM_RC">KFM_RC</a> UpdateSequenceID(unsigned int
uiOldID, unsigned int uiNewID)</p>

<p class="NDLRefMemberDescription">Updates the event code for the
animation sequence specified by <span class=
"NDLSystemFont">uiOldID</span> to the one provided by
<span class="NDLSystemFont">uiNewID</span>. It then updates all
transitions that used the old sequence ID to use the new sequence
ID.</p>

<p class="NDLRefMemberFunction"><a href=
"NiKFMTool.htm#KFM_RC">KFM_RC</a> UpdateGroupID(unsigned int
uiOldID, unsigned int uiNewID)</p>

<p class="NDLRefMemberDescription">Updates the group ID for the
sequence group specified by <span class=
"NDLSystemFont">uiOldID</span> to the one provided by
<span class="NDLSystemFont">uiNewID</span>.</p>

<p class="NDLRefHead2">Functions for removing components</p>

<p class="NDLRefMemberFunction"><a href=
"NiKFMTool.htm#KFM_RC">KFM_RC</a> RemoveSequence(unsigned int
uiSequenceID)</p>

<p class="NDLRefMemberDescription">Removes the sequence specified
by <span class="NDLSystemFont">uiSequenceID</span> .</p>

<p class="NDLRefMemberFunction"><a href=
"NiKFMTool.htm#KFM_RC">KFM_RC</a> RemoveTransition(unsigned int
uiSrcID, unsigned int uiDesID)</p>

<p class="NDLRefMemberDescription">Removes the transition
specified by <span class="NDLSystemFont">uiSrcID</span> and
<span class="NDLSystemFont">uiDesID</span>.</p>

<p class="NDLRefMemberFunction"><a href=
"NiKFMTool.htm#KFM_RC">KFM_RC</a> RemoveBlendPair(unsigned int
uiSrcID, unsigned int uiDesID, const <a href=
"../../Reference/NiMain/NiFixedString.htm">NiFixedString</a>&amp;
kStartKey, const <a href=
"../../Reference/NiMain/NiFixedString.htm">NiFixedString</a>&amp;
kTargetKey)</p>

<p class="NDLRefMemberDescription">Removes the blend pair
indicated by <span class="NDLSystemFont">kStartKey</span> and
<span class="NDLSystemFont">kTargetKey</span> from the transition
specified by <span class="NDLSystemFont">uiSrcID</span> and
<span class="NDLSystemFont">uiDesID</span>.</p>

<p class="NDLRefMemberFunction"><a href=
"NiKFMTool.htm#KFM_RC">KFM_RC</a> RemoveAllBlendPairs(unsigned
int uiSrcID, unsigned int uiDesID)</p>

<p class="NDLRefMemberDescription">Removes all blend pairs from
the transition specified by <span class=
"NDLSystemFont">uiSrcID</span> and <span class=
"NDLSystemFont">uiDesID</span>.</p>

<p class="NDLRefMemberFunction"><a href=
"NiKFMTool.htm#KFM_RC">KFM_RC</a>
RemoveSequenceFromChain(unsigned int uiSrcID, unsigned int
uiDesID, unsigned int uiSequenceID)</p>

<p class="NDLRefMemberDescription">Removes the sequence specified
by <span class="NDLSystemFont">uiSequenceID</span> from the chain
transition specified by <span class=
"NDLSystemFont">uiSrcID</span> and <span class=
"NDLSystemFont">uiDesID</span>.</p>

<p class="NDLRefMemberFunction"><a href=
"NiKFMTool.htm#KFM_RC">KFM_RC</a>
RemoveAllSequencesFromChain(unsigned int uiSrcID, unsigned int
uiDesID)</p>

<p class="NDLRefMemberDescription">Removes all sequences from the
chain transition specified by <span class=
"NDLSystemFont">uiSrcID</span> and <span class=
"NDLSystemFont">uiDesID</span>.</p>

<p class="NDLRefMemberFunction"><a href=
"NiKFMTool.htm#KFM_RC">KFM_RC</a> RemoveSequenceGroup(unsigned
int uiGroupID)</p>

<p class="NDLRefMemberDescription">Removes the sequence group
specified by <span class="NDLSystemFont">uiGroupID</span>.</p>

<p class="NDLRefMemberFunction"><a href=
"NiKFMTool.htm#KFM_RC">KFM_RC</a>
RemoveSequenceFromGroup(unsigned int uiGroupID, unsigned int
uiSequenceID)</p>

<p class="NDLRefMemberDescription">Removes the sequence specified
by <span class="NDLSystemFont">uiSequenceID</span> from the
sequence group specified by <span class=
"NDLSystemFont">uiGroupID</span>.</p>

<p class="NDLRefMemberFunction"><a href=
"NiKFMTool.htm#KFM_RC">KFM_RC</a>
RemoveAllSequencesFromGroup(unsigned int uiGroupID)</p>

<p class="NDLRefMemberDescription">Removes all sequences from the
sequence group specified by <span class=
"NDLSystemFont">uiGroupID</span>.</p>

<p class="NDLRefHead2">Functions for retrieving components</p>

<p class="NDLRefMemberFunction"><a href=
"NiKFMTool.htm#Sequence">Sequence</a>* GetSequence(unsigned int
uiSequenceID) const</p>

<p class="NDLRefMemberDescription">Returns the <span class=
"NDLSystemFont">Sequence</span> object that corresponds to the
animation sequence specified by <span class=
"NDLSystemFont">uiSequenceID.</span></p>

<p class="NDLRefMemberFunction"><a href=
"NiKFMTool.htm#Transition">Transition</a>* GetTransition(unsigned
int uiSrcID, unsigned int uiDesID) <span style=
"margin-left: 0px;">const</span></p>

<p class="NDLRefMemberDescription">Returns the <span class=
"NDLSystemFont">Transition</span> object that corresponds to the
transition specified by <span class=
"NDLSystemFont">uiSrcID</span> and <span class=
"NDLSystemFont">uiDesID.</span></p>

<p class="NDLRefMemberFunction"><a href=
"NiKFMTool.htm#SequenceGroup">SequenceGroup</a>*
GetSequenceGroup(unsigned int uiGroupID) const</p>

<p class="NDLRefMemberDescription">Returns the <span class=
"NDLSystemFont">S</span><span class=
"NDLSystemFont">equenceGroup</span> object that corresponds to
the sequence group specified by <span class=
"NDLSystemFont">uiGroupID.</span></p>

<p class="NDLRefHead2">Functions for retrieving identifier
codes</p>

<p class="NDLRefMemberFunction">void GetSequenceIDs(unsigned
int*&amp; puiSequenceIDs, unsigned int&amp; uiNumIDs) const</p>

<p class="NDLRefMemberDescription">Returns an array of sequence
IDs for all the sequences that have been defined along with the
number of IDs in that array via the pointer <span class=
"NDLSystemFont">puiSequenceIDs</span> and the variable
<span class="NDLSystemFont">uiNumIDs</span>. <span class=
"NDLSystemFont">puiSequenceIDs</span> is allocated as new memory,
and it is up to the caller to delete that array.</p>

<p class="NDLRefMemberFunction">void GetGroupIDs(unsigned
int*&amp; puiGroupIDs, unsigned int&amp; uiNumIDs) const</p>

<p class="NDLRefMemberDescription">Returns an array of group IDs
for all the sequence groups that have been defined along with the
number of IDs in that array via the pointer <span class=
"NDLSystemFont">puiGroupIDs</span> and the variable <span class=
"NDLSystemFont">uiNumIDs</span>. <span class=
"NDLSystemFont">puiGroupIDs</span> is allocated as new memory,
and it is up to the caller to delete that array.</p>

<p class="NDLRefMemberFunction">unsigned int
FindUnusedSequenceID() const</p>

<p class="NDLRefMemberDescription">Returns the first available
unused sequence ID starting from zero.</p>

<p class="NDLRefMemberFunction">unsigned int FindUnusedGroupID()
const</p>

<p class="NDLRefMemberDescription">Returns the first available
unused group ID starting from zero.</p>

<p class="NDLRefHead2">Functions for accessing model data</p>

<p class="NDLRefMemberFunction">const <a href=
"../../Reference/NiMain/NiFixedString.htm">NiFixedString</a>&amp;
GetModelPath() const</p>

<p class="NDLRefMemberFunction">void SetModelPath(const <a href=
"../../Reference/NiMain/NiFixedString.htm">NiFixedString</a>&amp;
kModelPath)</p>

<p class="NDLRefMemberDescription">These functions get and set
the path of the character model NIF file. This path is a relative
path from the base KFM path that can be retrieved with
<span class="NDLSystemFont">GetBaseKFMPath</span>. NULL is
returned if the path has not been set.</p>

<p class="NDLRefMemberFunction">const <a href=
"../../Reference/NiMain/NiFixedString.htm">NiFixedString</a>&amp;
GetModelRoot() const</p>

<p class="NDLRefMemberFunction">void SetModelRoot(const <a href=
"../../Reference/NiMain/NiFixedString.htm">NiFixedString</a>&amp;
kModelRoot)</p>

<p class="NDLRefMemberDescription">These functions get and set
the name of the root node of the character model. The pointer
that gets returned is null if the model root has not been
set.</p>

<p class="NDLRefHead2">Functions for accessing default transition
information</p>

<p class="NDLRefMemberFunction"><a href=
"NiKFMTool.htm#TransitionType">TransitionType</a>
GetDefaultSyncTransType() const</p>

<p class="NDLRefMemberFunction"><a href=
"NiKFMTool.htm#KFM_RC">KFM_RC</a>
SetDefaultSyncTransType(<a href="NiKFMTool.htm#TransitionType">TransitionType</a>
eType)</p>

<p class="NDLRefMemberDescription">These functions get and set
the transition type that is set as the default synchronized
transition type. See <a href=
"../../Tools/animation_tool/Transition_Types.htm">Transition
Types</a> for more information about the default synchronized
transition type.</p>

<p class="NDLRefMemberFunction"><a href=
"NiKFMTool.htm#TransitionType">TransitionType</a>
GetDefaultNonSyncTransType() const</p>

<p class="NDLRefMemberFunction"><a href=
"NiKFMTool.htm#KFM_RC">KFM_RC</a>
SetDefaultNonSyncTransType(<a href=
"NiKFMTool.htm#TransitionType">TransitionType</a> eType)</p>

<p class="NDLRefMemberDescription">These functions get and set
the transition type that is set as the default non-synchronized
transition type. See <a href=
"../../Tools/animation_tool/Transition_Types.htm">Transition
Types</a> for more information about the default non-synchronized
transition type.</p>

<p class="NDLRefMemberFunction">float
GetDefaultSyncTransDuration() const</p>

<p class="NDLRefMemberFunction">void
SetDefaultSyncTransDuration(float fDuration)</p>

<p class="NDLRefMemberDescription">These functions get and set
the transition duration that will be used for default
synchronized transitions.</p>

<p class="NDLRefMemberFunction">float
GetDefaultNonSyncTransDuration() const</p>

<p class="NDLRefMemberFunction">void
SetDefaultNonSyncTransDuration(float fDuration)</p>

<p class="NDLRefMemberDescription">These functions get and set
the transition duration that will be used for default
non-synchronized transitions.</p>

<p class="NDLRefHead2">Functions for performing lookups on
components or component data</p>

<p class="NDLRefMemberFunction"><a href=
"NiKFMTool.htm#KFM_RC">KFM_RC</a>
IsTransitionAllowed(unsigned int uiSrcID, unsigned int uiDesID,
bool&amp; bAllowed) const</p>

<p class="NDLRefMemberDescription">Determines if the transition
from the animation sequence specified by <span class=
"NDLSystemFont">uiSrcID</span> to the animation sequence
specified by <span class="NDLSystemFont">uiDesID</span> is
allowed to occur. It does this by checking for the existence of
an <span class="NDLSystemFont">Transition</span> object between
those two animations. The result is returned via the variable
<span class="NDLSystemFont">bAllowed</span>.</p>

<p class="NDLRefMemberFunction">static const char*
LookupReturnCode(<a href=
"NiKFMTool.htm#KFM_RC">KFM_RC</a> eReturnCode)</p>

<p class="NDLRefMemberDescription">Accepts a <span class=
"NDLSystemFont">KFM_RC</span> return code and returns a text
string describing the error that occurred. This function can be
used when printing error messages to the screen.</p>

<p class="NDLRefMemberFunction">bool
IsValidChainTransition(unsigned int uiSrcID, unsigned int
uiDesID, <a href="NiKFMTool.htm#Transition">Transition</a>*
pkTransition)</p>

<p class="NDLRefMemberDescription">Determines whether not the
chain of animations in this transition will create an infinite
loop.</p>

<p class="NDLRefHead2">Functions for getting fully qualified
paths</p>

<p class="NDLRefMemberFunction">const <a href=
"../../Reference/NiMain/NiFixedString.htm">NiFixedString</a>&amp;
GetBaseKFMPath() const</p>

<p class="NDLRefMemberFunction">void SetBaseKFMPath(const
<a href="../../Reference/NiMain/NiFixedString.htm">NiFixedString</a>&amp;
kBaseKFMPath)</p>

<p class="NDLRefMemberDescription">These functions get and set
the path to use as the base KFM path. This path is used to
resolve the stored relative paths for NIF and KF files. This path
is automatically set to the appropriate value whenever a KFM file
is loaded or saved.</p>

<p class="NDLRefMemberFunction">const <a href=
"../../Reference/NiMain/NiFixedString.htm">NiFixedString</a>&amp;
GetFullModelPath()</p>

<p class="NDLRefMemberDescription">This function returns the full
path to the NIF character model file.</p>

<p class="NDLRefMemberFunction">const <a href=
"../../Reference/NiMain/NiFixedString.htm">NiFixedString</a>&amp;
GetFullKFFilename(unsigned int uiSequenceID)</p>

<p class="NDLRefMemberDescription">This function returns the full
path to the KF file corresponding to the specified sequence.</p>

<p class="NDLRefHead2">Functions for streaming files to and from
disk</p>

<p class="NDLRefMemberFunction"><a href=
"NiKFMTool.htm#KFM_RC">KFM_RC</a> LoadFile(const char*
pcFilename)</p>

<p class="NDLRefMemberDescription">This function streams the data
stored in the <span class="NDLSystemFont">NiKFMTool</span> class
in from a file specified by <span class=
"NDLSystemFont">pcFilename</span>. It returns error codes that
indicate file streaming and format errors.</p>

<p class="NDLRefMemberFunction"><a href="NiKFMTool.htm#KFM_RC">KFM_RC</a> LoadFromStream(efd::BinaryStream* pkStream, const char* pcFilename)</p>

<p class="NDLRefMemberDescription">This function streams the data
stored in the <span class="NDLSystemFont">NiKFMTool</span> class
in from a given binary stream.  The filename parameter is only
used to set the KFM path for loading KFs and NIFs.</p>

<p class="NDLRefMemberFunction"><a href=
"NiKFMTool.htm#KFM_RC">KFM_RC</a> SaveFile(const char*
pcFilename, bool bUseBinary = true, bool bLittleEndian =
true)</p>

<p class="NDLRefMemberDescription">This function streams the data
stored in the <span class="NDLSystemFont">NiKFMTool</span> class
out to a file specified by <span class=
"NDLSystemFont">pcFilename</span>. If <span class=
"NDLSystemFont">bUseBinary</span> is <span class=
"NDLSystemFont">true</span>, the data is written out to disk in
binary format, allowing faster reads. Non-binary KFM files are
currently not supported, so bUseBinary should always be true. If
it is false, an assertion will fail and a streaming error will be
returned. <span class="NDLSystemFont">bLittleEndian</span>
indicates the endianness to use for a binary KFM file. This
function returns error codes that indicate file streaming and
format errors.</p>

<a name="NestedClasses" id="NestedClasses"></a><p class="NDLRefHead1">Nested Classes</p>

<p>The following nested classes are used by <span class=
"NDLSystemFont">NiKFMTool</span> internally for storage. Some of
the member functions of <span class=
"NDLSystemFont">NiKFMTool</span> return objects of these
types.</p>

<a name="Sequence" id="Sequence"></a><p class="NDLRefHead2">NiKFMTool::Sequence</p>

<p>The <span class="NDLSystemFont">Sequence</span> nested class
in <span class="NDLSystemFont">NiKFMTool</span> holds information
about a particular animation sequence in the system.</p>

<p class="NDLRefMemberFunction">Sequence()</p>

<p class="NDLRefMemberFunction">Sequence(unsigned int
uiSequenceID, const <a href=
"../../Reference/NiMain/NiFixedString.htm">NiFixedString</a>&amp;
kFilename, int iAnimIndex)</p>

<p class="NDLRefMemberDescription">The constructor optionally
takes the sequence ID, filename, and anim index for the
sequence.</p>

<p class="NDLRefMemberFunction">unsigned int GetSequenceID()
const</p>

<p class="NDLRefMemberFunction">void SetSequenceID(unsigned int
uiSequenceID)</p>

<p class="NDLRefMemberDescription">These functions get and set
the sequence ID for this sequence.</p>

<p class="NDLRefMemberFunction">const <a href=
"../../Reference/NiMain/NiFixedString.htm">NiFixedString</a>&amp;
GetFilename() const</p>

<p class="NDLRefMemberFunction">void SetFilename(const <a href=
"../../Reference/NiMain/NiFixedString.htm">NiFixedString</a>&amp;
kFilename)</p>

<p class="NDLRefMemberDescription">These functions get and set
the stored KF filename for the sequence. This filename is
relative to the base KFM path of the <span class=
"NDLSystemFont">NiKFMTool</span> object.</p>

<p class="NDLRefMemberFunction">int GetAnimIndex() const</p>

<p class="NDLRefMemberFunction">void SetAnimIndex(int
iAnimIndex)</p>

<p class="NDLRefMemberDescription">These functions get and set
the index in the KF file at which the sequence resides. This
index is used when loading the sequence from the KF file.</p>

<p class="NDLRefMemberFunction"><a href=
"../../Reference/NiMain/NiTPointerMap.htm">NiTPointerMap</a>&lt;unsigned
int, <a href="NiKFMTool.htm#Transition">Transition</a>*&gt;&amp;
GetTransitions()</p>

<p class="NDLRefMemberDescription">This function returns an
<span class="NDLSystemFont">NiTPointerMap</span> of <span class=
"NDLSystemFont">Transition</span> objects representing the
transitions from this sequence to other sequences.</p>

<a name="Transition" id="Transition"></a><p class="NDLRefHead2">NiKFMTool::Transition</p>

<p>The <span class="NDLSystemFont">Transition</span> nested class
in <span class="NDLSystemFont">NiKFMTool</span> holds information
about a particular transition from one sequence to another.</p>

<p class="NDLRefMemberFunction">Transition()</p>

<p class="NDLRefMemberFunction">Transition(<a href=
"NiKFMTool.htm#TransitionType">TransitionType</a> eType, float
fDuration)</p>

<p class="NDLRefMemberDescription">Optionally, the constructor
takes the transition type and duration.</p>

<p class="NDLRefMemberFunction"><a href=
"NiKFMTool.htm#TransitionType">TransitionType</a> GetType()
const</p>

<p class="NDLRefMemberDescription">This function gets the actual
transition type for the transition. Default transition types will
be resolved to actual types before being returned from this
function.</p>

<p class="NDLRefMemberFunction"><a href=
"NiKFMTool.htm#TransitionType">TransitionType</a> GetStoredType()
const</p>

<p class="NDLRefMemberDescription">This function gets the stored
transition type for the transition. This transition type could be
a default transition type and will not be resolved into an actual
type before being returned.</p>

<p class="NDLRefMemberFunction">float GetDuration() const</p>

<p class="NDLRefMemberFunction">void SetDuration(float
fDuration)</p>

<p class="NDLRefMemberDescription">These functions get and set
the duration for the transition. If the transition type is a
default transition type, the default duration will be returned by
<span class="NDLSystemFont">GetDuration</span> and calling
<span class="NDLSystemFont">SetDuration</span> will have no
effect.</p>

<p class="NDLRefMemberFunction"><a href=
"../../Reference/NiMain/NiTPrimitiveSet.htm">NiTPrimitiveSet</a>&lt;<a href="NiKFMTool.htm#BlendPair">
BlendPair</a>*&gt;&amp; GetBlendPairs()</p>

<p class="NDLRefMemberDescription">This function returns an
<span class="NDLSystemFont">NiTSet</span> containing the blend
pairs for the transition. If the transition type is not
<span class="NDLSystemFont">TYPE_BLEND</span>, the transition
should not have any blend pairs.</p>

<p class="NDLRefMemberFunction"><a href=
"../../Reference/NiMain/NiTObjectSet.htm">NiTObjectSet</a>&lt;<a href="NiKFMTool.htm#ChainInfo">
ChainInfo</a>&gt;&amp; GetChainInfo()</p>

<p class="NDLRefMemberDescription">This function returns an
<span class="NDLSystemFont">NiTSet</span> containing the chain
info objects for the transition. If the transition type is not
<span class="NDLSystemFont">TYPE_CHAIN</span>, the transition
should not have any chain info objects.</p>

<p class="NDLRefMemberFunction">void ClearBlendPairs()</p>

<p class="NDLRefMemberDescription">This function clears the set
of blend pairs for the transition.</p>

<p class="NDLRefMemberFunction">void ClearChainInfo()</p>

<p class="NDLRefMemberDescription">This function clears the set
of chain info for the transition.</p>

<a name="SequenceGroup" id="SequenceGroup"></a><p class="NDLRefHead2">NiKFMTool::SequenceGroup</p>

<p>The <span class="NDLSystemFont">SequenceGroup</span> nested
class in <span class="NDLSystemFont">NiKFMTool</span> holds
information about a particular sequence group.</p>

<p class="NDLRefMemberFunction">SequenceGroup()</p>

<p class="NDLRefMemberFunction">SequenceGroup(unsigned int
uiGroupID, const <a href=
"../../Reference/NiMain/NiFixedString.htm">NiFixedString</a>&amp;
kName)</p>

<p class="NDLRefMemberDescription">The constructor optionally
takes the group ID and name for the sequence group.</p>

<p class="NDLRefMemberFunction">unsigned int GetGroupID()
const</p>

<p class="NDLRefMemberFunction">void SetGroupID(unsigned int
uiGroupID)</p>

<p class="NDLRefMemberDescription">These functions get and set
the group ID for the sequence group.</p>

<p class="NDLRefMemberFunction">const <a href=
"../../Reference/NiMain/NiFixedString.htm">NiFixedString</a>&amp;
GetName() const</p>

<p class="NDLRefMemberFunction">void SetName(const <a href=
"../../Reference/NiMain/NiFixedString.htm">NiFixedString</a>&amp;
kName)</p>

<p class="NDLRefMemberDescription">These functions get and set
the name of the sequence group.</p>

<p class="NDLRefMemberFunction"><a href=
"NiKFMTool.htm#SequenceInfoSet">SequenceInfoSet</a>&amp;
GetSequenceInfo()</p>

<p class="NDLRefMemberDescription">This function returns an
<span class="NDLSystemFont">NiTSet</span> containing the
<span class="NDLSystemFont">SequenceInfo</span> objects for the
sequence group.</p>

<a name="BlendPair" id="BlendPair"></a><p class="NDLRefHead2">NiKFMTool::Transition::BlendPair</p>

<p>The <span class="NDLSystemFont">BlendPair</span> nested class
in <span class="NDLSystemFont"><a href=
"NiKFMTool.htm#Transition">Transition</a></span> holds
information about start and target text keys that comprise a
single blend pair.</p>

<p class="NDLRefMemberFunction">BlendPair()</p>

<p class="NDLRefMemberFunction">BlendPair(const <a href=
"../../Reference/NiMain/NiFixedString.htm">NiFixedString</a>&amp;
kStartKey, const <a href=
"../../Reference/NiMain/NiFixedString.htm">NiFixedString</a>&amp;
kTargetKey)</p>

<p class="NDLRefMemberDescription">The constructor optionally
takes the start and target text keys for the blend pair.</p>

<p class="NDLRefMemberFunction">const <a href=
"../../Reference/NiMain/NiFixedString.htm">NiFixedString</a>&amp;
GetStartKey() const</p>

<p class="NDLRefMemberFunction">void SetStartKey(const <a href=
"../../Reference/NiMain/NiFixedString.htm">NiFixedString</a>&amp;
kStartKey)</p>

<p class="NDLRefMemberDescription">These functions get and set
the start text key.</p>

<p class="NDLRefMemberFunction">const <a href=
"../../Reference/NiMain/NiFixedString.htm">NiFixedString</a>&amp;
GetTargetKey() const</p>

<p class="NDLRefMemberFunction">void SetTargetKey(const <a href=
"../../Reference/NiMain/NiFixedString.htm">NiFixedString</a>&amp;
kTargetKey)</p>

<p class="NDLRefMemberDescription">These functions get and set
the target text key.</p>

<a name="ChainInfo" id="ChainInfo"></a><p class="NDLRefHead2">NiKFMTool::Transition::ChainInfo</p>

<p>The <span class="NDLSystemFont">ChainInfo</span> nested class
in <span class="NDLSystemFont"><a href=
"NiKFMTool.htm#Transition">Transition</a></span> holds
information about a particular sequence in a chain
transition.</p>

<p class="NDLRefMemberFunction">ChainInfo()</p>

<p class="NDLRefMemberFunction">ChainInfo(unsigned int
uiSequenceID, float fDuration)</p>

<p class="NDLRefMemberDescription">The constructor optionally
takes the sequence ID and duration for the chain info object.</p>

<p class="NDLRefMemberFunction">unsigned int GetSequenceID()
const</p>

<p class="NDLRefMemberFunction">void SetSequenceID(unsigned int
uiSequenceID)</p>

<p class="NDLRefMemberDescription">These functions get and set
the sequence ID for the chain info object.</p>

<p class="NDLRefMemberFunction">float GetDuration() const</p>

<p class="NDLRefMemberFunction">void SetDuration(float
fDuration)</p>

<p class="NDLRefMemberDescription">These functions get and set
the duration for the chain info object.</p>

<a name="SequenceInfo" id="SequenceInfo"></a><p class="NDLRefHead2">NiKFMTool::SequenceGroup::SequenceInfo</p>

<p>The <span class="NDLSystemFont">SequenceInfo</span> nested
class in <span class="NDLSystemFont"><a href=
"NiKFMTool.htm#SequenceGroup">SequenceGroup</a></span> holds
information about a particular sequence in the sequence
group.</p>

<p class="NDLRefMemberFunction">SequenceInfo()</p>

<p class="NDLRefMemberFunction">SequenceInfo(unsigned int
uiSequenceID, int iPriority, float fWeight, float fEaseInTime,
float fEaseOutTime, unsigned int uiSynchronizeSequenceID =
SYNC_SEQUENCE_ID_NONE)</p>

<p class="NDLRefMemberDescription">The constructor optionally
takes all the information necessary for the sequence info
object.</p>

<p class="NDLRefMemberFunction">unsigned int GetSequenceID()
const</p>

<p class="NDLRefMemberFunction">void SetSequenceID(unsigned int
uiSequenceID)</p>

<p class="NDLRefMemberDescription">These functions get and set
the sequence ID for the sequence info object. This ID identifies
a sequence in the sequence group.</p>

<p class="NDLRefMemberFunction">int GetPriority() const</p>

<p class="NDLRefMemberFunction">void SetPriority(int
iPriority)</p>

<p class="NDLRefMemberDescription">These functions get and set
the priority with which this sequence should be activated in the
sequence group.</p>

<p class="NDLRefMemberFunction">float GetWeight() const</p>

<p class="NDLRefMemberFunction">void SetWeight(float fWeight)</p>

<p class="NDLRefMemberDescription">These functions get and set
the weight that should be assigned to this sequence in the
sequence group.</p>

<p class="NDLRefMemberFunction">float GetEaseInTime() const</p>

<p class="NDLRefMemberFunction">void SetEaseInTime(float
fEaseInTime)</p>

<p class="NDLRefMemberFunction">float GetEaseOutTime() const</p>

<p class="NDLRefMemberFunction">void SetEaseOutTime(float
fEaseOutTime)</p>

<p class="NDLRefMemberDescription">These functions get and set
the ease in and ease out times that should be used when
activating and deactivating this sequence in the sequence
group.</p>

<p class="NDLRefMemberFunction">unsigned int
GetSynchronizeSequenceID() const</p>

<p class="NDLRefMemberFunction">void
SetSynchronizeSequenceID(unsigned int
uiSynchronizeSequenceID)</p>

<p class="NDLRefMemberDescription">These functions get and set
the ID of the sequence with which this sequence should be
synchronized in the sequence group. If the sequence should not be
synchronized, <span class=
"NDLSystemFont">SYNC_SEQUENCE_ID_NONE</span> should be passed
in.</p>

<p class="NDLRefHead1">Notes</p>

<a name="TransitionType" id="TransitionType"></a><p class="NDLRefHead2">TransitionType</p>

<p>Transition types enumerate the different ways in which the
source animation can be transitioned into the destination
animation. The meaning of each transition type is summarized
below.</p>

<!--(Table)=========================================================-->
<table>
    <thead>
        <tr>
            <th>Transition Type</th>

            <th>Meaning</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><span class=
            "NDLSystemFont">TYPE_BLEND</span></td>

            <td>The source animation pauses and the keyframes are
            lerped into a matched position in the destination
            animation.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">TYPE_MORPH</span></td>

            <td>The source animation continues to play while the
            destination animation is gradually eased in. At the
            same time the source animation is eased out. Time is
            matched between the two animations using morph text
            keys.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">TYPE_CROSSFADE</span></td>

            <td>The source animation continues to play while the
            destination animation is gradually eased in. At the
            same time the source animation is eased out.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">TYPE_CHAIN</span></td>

            <td>The source animation must complete a queue of
            transitions into intermediate sequences before
            transitioning into the destination sequence.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">TYPE_DEFAULT_SYNC</span></td>

            <td>Use the default synchronized transition. The
            actual transition type corresponding to this is set
            with <span class=
            "NDLSystemFont">SetDefaultSyncTransType</span> and
            can currently only be of type <span class=
            "NDLSystemFont">TYPE_MORPH</span>. Default
            synchronized transitions share type and duration
            information.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">TYPE_DEFAULT_NONSYNC</span></td>

            <td>Use the default non-synchronized transition. The
            actual transition type corresponding to this is set
            with <span class=
            "NDLSystemFont">SetDefaultNonSyncTransType</span> and
            can be of type <span class=
            "NDLSystemFont">TYPE_BLEND</span> or <span class=
            "NDLSystemFont">TYPE_CROSSFADE</span>.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">TYPE_DEFAULT_INVALID</span></td>

            <td>This value indicates an invalid transition type.
            This value should never be returned by any function
            and should be transparent to your application.</td>
        </tr>
    </tbody>
</table>

<a name="KFM_RC" id="KFM_RC"></a><p class="NDLRefHead2">KFM_RC</p>

<p>Most of the member functions of <span class=
"NDLSystemFont">NiKFMTool</span> return a code of type
<span class="NDLSystemFont">KFM_RC</span>. This is a public
enumerated type that indicates what problems, if any, occurred
during execution of that function. These return codes can be
translated to a text message with <span class=
"NDLSystemFont">LookupErrorCode</span>. The meaning of each error
code is summarized below.</p>

<!--(Table)=========================================================-->
<table>
    <thead>
        <tr>
            <th>Return Code</th>

            <th>Meaning</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><span class=
            "NDLSystemFont">KFM_SUCCESS</span></td>

            <td>The operation completed successfully.</td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">KFM_ERROR</span></td>

            <td>An unspecified error occurred.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">KFM_ERR_SEQUENCE</span></td>

            <td>The specified sequence does not exist.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">KFM_ERR_TRANSITION</span></td>

            <td>The specified transition does not exist.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">KFM_ERR_TRANSITION_TYPE</span></td>

            <td>The specified transition is not of the correct
            type for this operation.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">KFM_ERR_BLEND_PAIR</span></td>

            <td>The specified blend pair does not exist.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">KFM_ERR_NULL_TEXT_KEYS</span></td>

            <td>Both of the specified text keys are null
            pointers.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">KFM_ERR_BLEND_PAIR_INDEX</span></td>

            <td>The index specified for the blend pair is
            invalid.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">KFM_ERR_CHAIN_SEQUENCE</span></td>

            <td>The ID specified for the chain sequence is
            invalid.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">KFM_ERR_SEQUENCE_IN_CHAIN</span></td>

            <td>The specified sequence already exists in the
            specified chain.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">KFM_ERR_INFINITE_CHAIN</span></td>

            <td>Adding the specified sequence to the chain would
            result in an infinite chain.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">KFM_ERR_SEQUENCE_GROUP</span></td>

            <td>The specified sequence group does not exist.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">KFM_ERR_SEQUENCE_IN_GROUP</span></td>

            <td>The specified sequence does not exist in the
            group.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">KFM_ERR_FILE_IO</span></td>

            <td>A file I/O error occurred.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">KFM_ERR_FILE_FORMAT</span></td>

            <td>The file is not in the correct format.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">KFM_ERR_FILE_VERSION</span></td>

            <td>The file does not have a compatible version
            number.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">KFM_ERR_ENDIAN_MISMATCH</span></td>

            <td>The file does not match the platform's
            endianness.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">KFM_ERR_SYNC_TRANS_TYPE</span></td>

            <td>The transition type specified is not a
            synchronized transition type.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">KFM_ERR_NONSYNC_TRANS_TYPE</span></td>

            <td>The transition type specified is not a
            non-synchronized transition type.</td>
        </tr>
    </tbody>
</table>

<a name="SequenceInfoSet" id="SequenceInfoSet"></a><p class="NDLRefHead2">SequenceInfoSet</p>

<p>The <span class=
"NDLSystemFont">NiKFMTool::SequenceGroup::SequenceInfoSet</span>
type is simply a typedef of <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiTObjectSet.htm">NiTObjectSet</a>&lt;<a href="NiKFMTool.htm#SequenceInfo">
SequenceInfo</a>&gt;</span>.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
