<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiBSplineCompTransformEvaluator</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">
NiBSplineCompTransformEvaluator</p>

<p class="NDLRefParentage">: public <a href=
"NiBSplineTransformEvaluator.htm">NiBSplineTransformEvaluator</a></p>

<p class="NDLRefHeaderFile">
&lt;NiBSplineTransformEvaluator.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class=
"NDLSystemFont">NiBSplineCompTransformEvaluator</span> provides
all of the functionality of <a href=
"NiBSplineTransformEvaluator.htm"><span class=
"NDLSystemFont">NiBSplineTransformEvaluator</span></a> with the
additional information required for using compact control points.
If none of the transform channels are animated (i.e. contain more
than one key), the posed evaluator can be handled more
efficiently as an <span class="NDLSystemFont"><a href=
"NiConstTransformEvaluator.htm">NiConstTransformEvaluator</a></span>.</p>

<p>Evaluators are primarily intended for sequence-based
animation. Refer to the <a href=
"Animation_Sequences.htm">Animation Sequences</a> section in the
Introduction to Animation for more details.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">
NiBSplineCompTransformEvaluator()</p>

<p class="NDLRefMemberDescription">This constructor creates an
<span class=
"NDLSystemFont">NiBSplineCompTransformEvaluator</span> containing
invalid data.</p>

<p class="NDLRefMemberFunction">
NiBSplineCompTransformEvaluator(<a href=
"NiBSplineData.htm">NiBSplineData</a>* pkData, <a href=
"NiBSplineData.htm#Handle">NiBSplineData::Handle</a>
kTransCPHandle = NiBSplineData::INVALID_HANDLE, <a href=
"NiBSplineData.htm#Handle">NiBSplineData::Handle</a> kRotCPHandle
= NiBSplineData::INVALID_HANDLE, <a href=
"NiBSplineData.htm#Handle">NiBSplineData::Handle</a>
kScaleCPHandle = NiBSplineData::INVALID_HANDLE, <a href=
"NiBSplineBasisData.htm">NiBSplineBasisData</a>* pkBasisData =
NULL)</p>

<p class="NDLRefMemberDescription">This constructor creates an
<span class=
"NDLSystemFont">NiBSplineCompTransformEvaluator</span> with the
specified data objects and control point handles.</p>

<p class="NDLRefMemberFunction">
NiBSplineCompTransformEvaluator(<a href=
"NiQuatTransform.htm">NiQuatTransform</a> kPoseValue)</p>

<p class="NDLRefMemberDescription">This constructor creates an
<span class=
"NDLSystemFont">NiBSplineCompTransformEvaluator</span> with the
specified pose and no data object.</p>

<p class="NDLRefHead1">Virtual Function Overrides</p>

<p class="NDLRefMemberFunction">virtual bool
UsesCompressedControlPoints() const</p>

<p class="NDLRefMemberDescription">This function returns true
since this class uses compressed control points.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">float GetOffset(unsigned short
usChannel) const</p>

<p class="NDLRefMemberFunction">void SetOffset(float fOffset,
unsigned short usChannel)</p>

<p class="NDLRefMemberDescription">Get and set the offset used by
the specified channel of compressed control points. This value is
used to decompress the control points.</p>

<p class="NDLRefMemberFunction">float GetHalfRange(unsigned short
usChannel) const</p>

<p class="NDLRefMemberFunction">void SetHalfRange(float
fHalfRange, unsigned short usChannel)</p>

<p class="NDLRefMemberDescription">Get and set the range used by
the specified channel of compressed control points. This value is
used to decompress the control points.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
