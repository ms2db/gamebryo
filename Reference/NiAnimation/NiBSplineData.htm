<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiBSplineData</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiBSplineData</p>

<p class="NDLRefParentage">: public <a href=
"../../Reference/NiMain/NiObject.htm">NiObject</a></p>

<p class="NDLRefHeaderFile">&lt;NiBSplineData.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiBSplineData</span> contains one
or more sets of control points for use in interpolation of open,
uniform B-Splines. Since multiple <span class=
"NDLSystemFont"><a href=
"NiBSplineInterpolator.htm">NiBSplineInterpolator</a></span> and
<span class="NDLSystemFont"><a href=
"NiBSplineEvaluator.htm">NiBSplineEvaluator</a></span> objects
may have the same <span class=
"NDLSystemFont">NiBSplineData</span>, this value is encapsulated
in an <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiObject.htm">NiObject</a></span>
container, allowing it to be cloned and streamed appropriately.
There are two distinct control point arrays stored in an
<span class="NDLSystemFont">NiBSplineData</span>, compact and
float. Each type of control point has its associated methods and
calling a method with the incorrect type of handle will result in
undefined behavior. Note that this class will only interpolate
B-Splines of degree 3.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiBSplineData()</p>

<p class="NDLRefMemberDescription">The default constructor
creates an uninitialized <span class=
"NDLSystemFont">NiBSplineData</span>.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction"><a href=
"NiBSplineData.htm#Handle">Handle</a> InsertControlPoints(const
float* pafControlPoints, unsigned int uiCount, unsigned int
uiDimension)</p>

<p class="NDLRefMemberDescription">Add a control point array of
the specified dimensionality and size to this data object.</p>

<p class="NDLRefMemberFunction"><a href=
"NiBSplineData.htm#Handle">Handle</a>
InsertAndCompactControlPoints(const float* pafControlPoints,
unsigned int uiCount, unsigned int uiDimension, float&amp;
fOffset, float&amp; fHalfRange)</p>

<p class="NDLRefMemberDescription">Add a control point array of
the specified dimensionality and size to this data object.
Additionally, compact the array so that it uses shorts instead of
floats to store the data. In order to decompress this value
later, the offset and half range are pre-computed and returned as
reference arguments.</p>

<p class="NDLRefMemberFunction">const float*
GetControlPoint(<a href="NiBSplineData.htm#Handle">Handle</a>
kHandle, unsigned int uiIndex, unsigned int uiDimension)
const</p>

<p class="NDLRefMemberFunction">const short*
GetCompactControlPoint(<a href=
"NiBSplineData.htm#Handle">Handle</a> kHandle, unsigned int
uiIndex, unsigned int uiDimension) const</p>

<p class="NDLRefMemberDescription">Get the control point
associated with the specified Handle and index. The returned
array will have <span class="NDLSystemFont">uiDimension</span>
elements.</p>

<p class="NDLRefMemberFunction">void GetValueDegree3(float fTime,
float* afPos, unsigned int uiDimension, <a href=
"NiBSplineBasisData.htm">NiBSplineBasisData</a>* pkData, <a href=
"NiBSplineData.htm#Handle">Handle</a> kControlPointHandle)
const</p>

<p class="NDLRefMemberDescription">Get the interpolated value at
fTime. The float array will contain the result of the
interpolation and is assumed to be at least <span class=
"NDLSystemFont">uiDimension</span> elements in size. The
<span class="NDLSystemFont">pkData</span> and <span class=
"NDLSystemFont">kControlPointHandle</span> values specify where
in the master control point array to locate the active control
points.</p>

<p class="NDLRefMemberFunction">void
GetCompactedValueDegree3(float fTime, float* afPos, unsigned int
uiDimension, <a href=
"NiBSplineBasisData.htm">NiBSplineBasisData</a>* pkData, <a href=
"NiBSplineData.htm#Handle">Handle</a> kControlPointHandle, float
fOffset, float fHalfRange) const</p>

<p class="NDLRefMemberDescription">Get the interpolated value at
fTime. The float array will contain the result of the
interpolation and is assumed to be at least <span class=
"NDLSystemFont">uiDimension</span> elements in size. The
<span class="NDLSystemFont">pkData</span> and <span class=
"NDLSystemFont">kControlPointHandle</span> values specify where
in the master control point array to locate the active control
points. The <span class="NDLSystemFont">fOffset</span> and
<span class="NDLSystemFont">fHalfRange</span> parameters are used
to decompress the internal short control point array to full
floating point precision and should match the values returned by
the <span class=
"NDLSystemFont">InsertAndCompactControlPoints</span> method.</p>

<p class="NDLRefHead1">Notes</p>

<a name="Handle" id="Handle"></a><p class="NDLRefHead2">Handle</p>

<p>The <span class="NDLSystemFont">Handle</span> type is simply a
typedef of <span class="NDLSystemFont">unsigned int</span>.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
