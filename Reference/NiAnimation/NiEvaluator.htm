<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiEvaluator</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiEvaluator</p>

<p class="NDLRefParentage">: public <a href=
"../NiMain/NiObject.htm">NiObject</a></p>

<p class="NDLRefHeaderFile">&lt;NiEvaluator.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class=
"NDLSystemFont">NiEvaluator</span> is an abstract base class for
all evaluation objects that convert a time into one of the
supported data formats. The supported data formats are bool,
float, <span class="NDLSystemFont"><a href=
"../NiMain/NiQuaternion.htm">NiQuaternion</a></span>, <a href=
"../NiMain/NiPoint3.htm"><span class=
"NDLSystemFont">NiPoint3</span></a>, <a href=
"../NiMain/NiColorA.htm"><span class=
"NDLSystemFont">NiColorA</span></a>, and <span class=
"NDLSystemFont"><a href=
"NiQuatTransform.htm">NiQuatTransform</a></span>.</p>

<p>Evaluators perform a similar role as
<a href="NiInterpolator.htm">interpolators</a>; however,
evaluators are more efficient for sequence animation.
Interpolators are automatically converted into equivalent
evaluators when sequences are generated with the Gamebryo art
export tools. Refer to the <a href=
"Animation_Sequences.htm">Animation Sequences</a> section in the
Introduction to Animation for more details regarding
evaluators.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberDescription">This is an abstract base class
and as such has no public constructors.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">void GetIDTag(const char*&amp;
pcAVObjectName, const char*&amp; pcPropertyType, const char*&amp;
pcCtlrType, const char*&amp; pcCtlrID, const char*&amp;
pcEvaluatorID) const</p>

<p class="NDLRefMemberFunction">void GetIDTag(<a href=
"../NiMain/NiFixedString.htm">NiFixedString</a>&amp;
kAVObjectName, <a href=
"../NiMain/NiFixedString.htm">NiFixedString</a>&amp;
kPropertyType, <a href=
"../NiMain/NiFixedString.htm">NiFixedString</a>&amp; kCtlrType,
<a href="../NiMain/NiFixedString.htm">NiFixedString</a>&amp;
kCtlrID, <a href=
"../NiMain/NiFixedString.htm">NiFixedString</a>&amp;
kEvaluatorID) const</p>

<p class="NDLRefMemberFunction">const <a href=
"NiEvaluator.htm#IDTag">IDTag</a>&amp; GetIDTag() const</p>

<p class="NDLRefMemberFunction">const <a href=
"../NiMain/NiFixedString.htm">NiFixedString</a>&amp;
GetAVObjectName() const</p>

<p class="NDLRefMemberFunction">const <a href=
"../NiMain/NiFixedString.htm">NiFixedString</a>&amp;
GetPropertyType() const</p>

<p class="NDLRefMemberFunction">const <a href=
"../NiMain/NiFixedString.htm">NiFixedString</a>&amp;
GetCtlrType() const</p>

<p class="NDLRefMemberFunction">const <a href=
"../NiMain/NiFixedString.htm">NiFixedString</a>&amp; GetCtlrID()
const</p>

<p class="NDLRefMemberFunction">const <a href=
"../NiMain/NiFixedString.htm">NiFixedString</a>&amp;
GetEvaluatorID() const</p>

<p class="NDLRefMemberFunction">void SetIDTag(const <a href=
"../NiMain/NiFixedString.htm">NiFixedString</a>&amp;
kAVObjectName, const <a href=
"../NiMain/NiFixedString.htm">NiFixedString</a>&amp;
kPropertyType, const <a href=
"../NiMain/NiFixedString.htm">NiFixedString</a>&amp; kCtlrType,
const <a href=
"../NiMain/NiFixedString.htm">NiFixedString</a>&amp; kCtlrID,
const <a href=
"../NiMain/NiFixedString.htm">NiFixedString</a>&amp;
kEvaluatorID)</p>

<p class="NDLRefMemberFunction">void SetIDTag(const <a href=
"NiEvaluator.htm#IDTag">IDTag</a>&amp; kIDTag)</p>

<p class="NDLRefMemberDescription">These functions get and set
the ID tag of this evaluator. The ID tag specifies which scene
graph attribute is animated by this evaluator. See the <a href=
"NiEvaluator.htm#IDTag">notes</a> below for more details.</p>

<p class="NDLRefMemberFunction">unsigned int GetMaxEvalChannels()
const</p>

<p class="NDLRefMemberDescription">This function returns the
maximum number of data channels supported by this evaluator. Many
evaluators support just one channel; however, transform
evaluators such as <span class="NDLSystemFont"><a href=
"NiTransformEvaluator.htm">NiTransformEvaluator</a></span>
support up to three (i.e. translation, rotation, and scale).</p>

<p class="NDLRefMemberFunction">bool
IsEvalChannelInvalid(unsigned int uiChannel) const</p>

<p class="NDLRefMemberDescription">This function returns true if
the specified evaluator channel does not contain valid data.
false is returned when the channel data is valid.</p>

<p class="NDLRefMemberFunction"><a href=
"NiPoseBuffer.htm#NiPoseBufferChannelType">NiPoseBufferChannelType</a>
GetEvalPBChannelType(unsigned int uiChannel) const</p>

<p class="NDLRefMemberDescription">This function returns the pose
buffer channel type of the specified evaluator channel.
<span class="NDLSystemFont">uiChannel</span> must be less than
<span class="NDLSystemFont">GetMaxEvalChannels</span>. Referenced
evaluators always return <span class=
"NDLSystemFont">PBREFERENCEDCHANNEL</span>. <span class=
"NDLSystemFont">PBINVALIDCHANNEL</span> is returned when the
corresponding channel is invalid. This occurs, for instance, when
an <span class="NDLSystemFont"><a href=
"NiTransformEvaluator.htm">NiTransformEvaluator</a></span>
produces rotation data, but not translation or scale.</p>

<p class="NDLRefMemberFunction">void
GetEvalPBChannelType(unsigned int uiChannel, <a href=
"NiPoseBuffer.htm#NiPoseBufferChannelType">NiPoseBufferChannelType</a>&amp;
ePBChannelType, bool&amp; bPosed) const</p>

<p class="NDLRefMemberDescription">This function returns the pose
buffer channel type of the specified evaluator channel and
indicates whether the channel is posed (i.e. contains constant
data). <span class="NDLSystemFont">uiChannel</span> must be less
than <span class="NDLSystemFont">GetMaxEvalChannels</span>.
Referenced evaluators always return <span class=
"NDLSystemFont">PBREFERENCEDCHANNEL</span> in <span class=
"NDLSystemFont">ePBChannelType</span> and true in <span class=
"NDLSystemFont">bPosed</span>. <span class=
"NDLSystemFont">PBINVALIDCHANNEL</span> is returned when the
corresponding channel is invalid. This occurs, for instance, when
an <span class="NDLSystemFont"><a href=
"NiTransformEvaluator.htm">NiTransformEvaluator</a></span>
produces rotation data, but not translation or scale.</p>

<p class="NDLRefMemberFunction"><a href=
"NiPoseBuffer.htm#NiPoseBufferChannelType">NiPoseBufferChannelType</a>
GetRawEvalPBChannelType(unsigned int uiChannel) const</p>

<p class="NDLRefMemberDescription">Unlike <span class=
"NDLSystemFont">GetEvalPBChannelType</span> this function returns
the pose buffer channel type of the specified evaluator channel
without considering if the evaluator is referenced. As such, it
returns the data type of the underlying raw animation data.
<span class="NDLSystemFont">PBREFERENCEDCHANNEL</span> will never
be returned. <span class="NDLSystemFont">PBINVALIDCHANNEL</span>
is returned when the corresponding channel is invalid.</p>

<p class="NDLRefMemberFunction"><a name="IsRawEvalChannelPosed"
id="IsRawEvalChannelPosed"></a>bool
IsRawEvalChannelPosed(unsigned int uiChannel) const</p>

<p class="NDLRefMemberDescription">This function returns true if
the underlying raw animation data in the specified evaluator
channel is posed (i.e. contains constant data). false is returned
when the channel contains at least two different values or the
channel is invalid. <span class="NDLSystemFont">uiChannel</span>
must be less than <span class=
"NDLSystemFont">GetMaxEvalChannels</span>.</p>

<p class="NDLRefMemberFunction">bool AlwaysUpdate() const</p>

<p class="NDLRefMemberDescription">This function returns true
when the evaluator must always be updated, even when the update
time is identical to the previous update time. false is returned
if the evaluator does not require an update when the update time
matches that of the previous update call. As a performance
optimization, the animation system utilizes this function to
determine which evaluators in an active <span class=
"NDLSystemFont"><a href=
"NiControllerSequence.htm">NiControllerSequence</a></span> must
be updated on repetitive time values.</p>

<p class="NDLRefMemberFunction">void SetAlwaysUpdate(bool
bEnabled = true)</p>

<p class="NDLRefMemberDescription">This function sets the value
returned by <span class="NDLSystemFont">AlwaysUpdate</span>. Some
evaluators derive their animation data from external
dependencies. The <span class="NDLSystemFont"><a href=
"NiLookAtEvaluator.htm">NiLookAtEvaluator</a></span>, for
instance, uses the location of a LookAt target to compute
rotation data. Since the LookAt target may move between update
calls the <span class="NDLSystemFont">NiLookAtEvaluator</span>
must always be updated to correctly track its target.</p>

<p class="NDLRefMemberFunction"><a name="Collapse" id=
"Collapse"></a>virtual void Collapse()</p>

<p class="NDLRefMemberDescription">This function will try to
reduce the memory footprint of the <span class=
"NDLSystemFont">NiEvaluator</span> by invoking operations such as
animation key reduction. The exact operations performed are
dependent on the derived class implementation.</p>

<p class="NDLRefHead1">Notes</p><a name="IDTag" id="IDTag"></a>

<p class="NDLRefHead2">NiEvaluator::IDTag</p>

<p>The supported interface for <span class=
"NDLSystemFont">IDTag</span> is shown below. This nested class
stores tag information which specifies the scene graph attribute
that is animated by the evaluator. The non-const methods are
primarily geared for animation tools. Note that <span class=
"NDLSystemFont">NiEvaluator</span> has a handful of pass-through
functions for accessing an evaluator's tag information.</p>

<p>An <span class="NDLSystemFont">IDTag</span>
consists of the name of the <span class="NDLSystemFont"><a href=
"../NiMain/NiAVObject.htm">NiAVObject</a></span> in the scene
graph (kAVObjectName), the <a href=
"../../Programmer/Object_Systems/Run_Time_Type_Information.htm">RTTI</a>
type of the property in the scene graph if the controller is
attached to a property (kPropertyType; NULL if not attached to a
property), the RTTI type of the time controller (kCtlrType), a
controller-specific ID to identify which controller of the
specified type (kCtlrID; obtained by calling <span class=
"NDLSystemFont"><a href=
"NiInterpController.htm#GetCtlrID">NiInterpController::GetCtlrID</a></span>;
may be <span class="NDLSystemFont">NULL</span>), and an
evaluator-specific ID (kEvaluatorID; indicates which
interpolator/evaluator slot to use on the controller).</p>
<pre>
    class NIANIMATION_ENTRY IDTag : public NiMemObject
    {
    public:
        IDTag(const NiFixedString&amp; kAVObjectName = NULL,
            const NiFixedString&amp; kPropertyType = NULL,
            const NiFixedString&amp; kCtlrType = NULL,
            const NiFixedString&amp; kCtlrID = NULL,
            const NiFixedString&amp; kEvaluatorID = NULL);
        IDTag(const IDTag&amp; kOther);
        IDTag&amp; operator=(const IDTag&amp; kTag);
        const NiFixedString&amp; GetAVObjectName() const;
        void SetAVObjectName(const NiFixedString&amp; kAVObjectName);
        const NiFixedString&amp; GetPropertyType() const;
        void SetPropertyType(const NiFixedString&amp; kPropertyType);
        const NiFixedString&amp; GetCtlrType() const;
        void SetCtlrType(const NiFixedString&amp; kCtlrType);
        const NiFixedString&amp; GetCtlrID() const;
        void SetCtlrID(const NiFixedString&amp; kCtlrID);
        const NiFixedString&amp; GetEvaluatorID() const;
        void SetEvaluatorID(const NiFixedString&amp; kEvaluatorID);
        void ClearValues();
    };
</pre>
<!--(Table)=========================================================-->

<table>
    <thead>
        <tr>
            <th>Value</th>

            <th>Meaning</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><span class=
            "NDLSystemFont">EVALBASEINDEX</span></td>

            <td>This value specifies the base channel, which is
            the only channel available in non-transform
            evaluators.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">EVALPOSINDEX</span></td>

            <td>This value specifies the position animation
            channel in transform evaluators such as <span class=
            "NDLSystemFont"><a href=
            "NiTransformEvaluator.htm">NiTransformEvaluator</a></span>.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">EVALROTINDEX</span></td>

            <td>This value specifies the rotation animation
            channel in transform evaluators.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">EVALSCALEINDEX</span></td>

            <td>This value specifies the scale animation channel
            in transform evaluators.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">EVALMAXCHANNELS</span></td>

            <td>This value corresponds to the maximum number of
            channels in any evaluator.</td>
        </tr>
    </tbody>
</table>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
