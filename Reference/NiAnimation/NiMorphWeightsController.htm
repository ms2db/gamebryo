<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiMorphWeightsController</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiMorphWeightsController</p>

<p class="NDLRefParentage">: public <a href="NiInterpController.htm">NiInterpController</a></p>

<p class="NDLRefHeaderFile">&lt;NiMorphWeightsController.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiMorphWeightsController</span> 
 manipulates a stream with <a HREF="../../Reference/NiMain/NiCommonSemantics.htm">semantic 
 <span class="NDLSystemFont">MORPHWEIGHTS</span></a> on the target mesh. 
 The stream is then used by an <span class="NDLSystemFont"><a HREF="../../Reference/NiMesh/NiMorphMeshModifier.htm">NiMorphMeshModifier</a></span> 
 object to dynamically blend a set of target vertices into a final rendered 
 shape.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiMorphWeightsController(NiUInt32 uiNumTargets)</p>

<p class="NDLRefMemberDescription">The constructor creates an <span class="NDLSystemFont">NiMorphWeightsController</span> 
 with the requested number of targets. This number must match the length 
 of the weights stream, although that is not checked until the target of 
 the controller is set or the controller is first updated.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">NiUInt32 GetNumTargets() const</p>

<p class="NDLRefMemberDescription">Return the number of morph targets that 
 this object will try to set weights for.</p>

<p class="NDLRefMemberFunction">void GetTargetName(const NiUInt16 uiIndex, 
 <a HREF="../../Reference/NiMain/NiFixedString.htm">NiFixedString</a>&amp; 
 kName) const</p>

<p class="NDLRefMemberFunction">void SetTargetName(const NiUInt16 uiIndex, 
 const <a HREF="../../Reference/NiMain/NiFixedString.htm">NiFixedString</a>&amp; 
 kName)</p>

<p class="NDLRefMemberDescription">Morph target names are used to associate 
 <a HREF="NiInterpolator.htm">interpolators</a> (and <a HREF="NiEvaluator.htm">evaluators</a>) 
 with the weights for a specific target. These functions provide access 
 to the names for a specific morph target index.</p>

<p class="NDLRefMemberFunction"><a HREF="../../Reference/NiMesh/NiMorphMeshModifier.htm">NiMorphMeshModifier</a>* 
 GetModifier() const</p>

<p class="NDLRefMemberDescription">Returns the mesh modifier that is using 
 the weights that this object is controlling. The modifier is used to evaluate 
 various flags that control the morph, and is lazily set based on the target 
 when <span class="NDLSystemFont">Update</span> is called.</p>

<p class="NDLRefHead2">Functions Implemented from <a HREF="NiInterpController.htm">NiInterpController</a></p>

<p class="NDLRefMemberFunction">virtual void Update(float fTime)</p>

<p class="NDLRefMemberDescription">This function causes the <span class="NDLSystemFont">NiMorphWeightsController</span> 
 to determine whether or not it needs to update morph weights for the current 
 time and then do any necessary weight calculations. The <span class="NDLSystemFont"><a 
 href="../../Reference/NiMesh/NiMorphMeshModifier.htm">NiMorphMeshModifier</a></span> 
 associated with this controller is told that it needs to update if the 
 weights are set.</p>

<p class="NDLRefMemberFunction">virtual bool UpdateValue(float fTime, float 
 fFloat, unsigned short usIndex = 0)</p>

<p class="NDLRefMemberDescription">This function sets the morph weight associated 
 with <span class="NDLSystemFont">usIndex</span> to the value specified by 
 <span class="NDLSystemFont">fFloat</span>. The morph weights are stored 
 internally until the entire set of weights for a given <span class="NDLSystemFont">fTime</span> 
 has been collected. The mesh modifier is instructed to process the weights 
 after all values are known. This behavior requires <span class="NDLSystemFont">UpdateValue</span> 
 be called in order by index for the specified time, either from 0 to <span 
 class="NDLSystemFont">GetInterpolatorCount</span>-1 or from <span class="NDLSystemFont">GetInterpolatorCount</span>-1 
 to 0. This function always returns true.</p>

<p class="NDLRefMemberFunction">virtual void SetTarget(<a HREF="../../Reference/NiMain/NiObjectNET.htm">NiObjectNET</a>* 
 pkTarget)</p>

<p class="NDLRefMemberDescription">Sets the target for the controller. This 
 object must be of type <span class="NDLSystemFont">NiMesh</span>, and should 
 have a stream with semantic <span class="NDLSystemFont">MORPHWEIGHTS</span> 
 associated with it and a modifier of type <span class="NDLSystemFont">NiMorphMeshModifier</span> 
 attached. The <span class="NDLSystemFont">Update</span> and <span class="NDLSystemFont">UpdateValue</span> 
 functions will have no effect if the stream or modifier are not present 
 on the target.</p>

<p class="NDLRefMemberFunction">virtual void ResetTimeExtrema()</p>

<p class="NDLRefMemberDescription">Sets the time range to include the range 
 of all the interpolators that are controlling weights.</p>

<p class="NDLRefMemberFunction">virtual unsigned short GetInterpolatorCount() 
 const</p>

<p class="NDLRefMemberDescription">Returns the number of morph targets.</p>

<p class="NDLRefMemberFunction">virtual const char* GetInterpolatorID(unsigned 
 short usIndex = 0)</p>

<p class="NDLRefMemberDescription">Returns the name of the morph target at 
 the given index. The morph target names should be set with <span class="NDLSystemFont">SetTargetName</span>, 
 above.</p>

<p class="NDLRefMemberFunction">virtual unsigned short GetInterpolatorIndex(const 
 char* pcID) const</p>

<p class="NDLRefMemberDescription">Returns the index of the morph target 
 with the given name. The morph target names should be set with <span class="NDLSystemFont">SetTargetName</span>, 
 above.</p>

<p class="NDLRefMemberFunction">virtual <a HREF="NiInterpolator.htm">NiInterpolator</a>* 
 GetInterpolator(unsigned short usIndex = 0) const</p>

<p class="NDLRefMemberFunction">virtual void SetInterpolator(<a HREF="NiInterpolator.htm">NiInterpolator</a>* 
 pkInterpolator, unsigned short usIndex = 0)</p>

<p class="NDLRefMemberDescription">Access to the interpolator that is controlling 
 the morph weight at the given index.</p>

<p class="NDLRefHead1">Notes</p>

<p class="NDLRefHead2">Exported Weights</p>

<p>Note that weights for all morph targets are exported 
 out to the interpolators from the art packages. This means that if the 
 weight for a particular target is 0.0, it will still be exported and blended 
 with other weights on that target (e.g., from other active sequences). 
 For example, let's take a head with three morph targets: breathing, smiling, 
 and 'O'. This would yield sequences with the following weights on the 
 morph targets:</p>

<ul>
	
	<li>Sequence 1<br>
	Breathing 1.0<br>
	Smiling 0.0<br>
	'O' 0.0</li>
	
	<li>Sequence 2:<br>
	Breathing 0.0<br>
	Smiling 1.0<br>
	'O' 0.0</li>
</ul>

<p>When blending these together with a weight of 1.0 for 
 each sequence, the final results are:</p>

<ul>
	
	<li>Breathing 0.5<br>
	Smiling 0.5<br>
	'O' 0.0</li>
</ul>

<p>Keep this in mind when you are generating your morph 
 target animations.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
