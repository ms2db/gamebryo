<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiAnimationKey</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>


<p class="NDLRefHeadClassTitle">NiAnimationKey</p>

<p class="NDLRefParentage">: public <a href="../../Reference/NiSystem/NiMemObject.htm"><span>NiMemObject</span></a></p>

<p class="NDLRefHeaderFile">&lt;NiAnimationKey.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiAnimationKey</span> 
 is the abstract base class for all the animation key classes. This class 
 should be considered pure virtual and never instanced directly, although 
 it does not contain any virtual functions. See the <a href="NiAnimationKey.htm#Pseudo-Virtual_Functions">Pseudo-Virtual 
 Functions</a> section below for more details.</p>

<p class="NDLRefHead1">Constructors</p>

<p>Because <span class="NDLSystemFont">NiAnimationKey</span> 
 is an abstract base class, it has no public constructors.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">float GetTime() const</p>

<p class="NDLRefMemberFunction">void SetTime(float&nbsp;fTime)</p>

<p class="NDLRefMemberDescription">These functions get and set the time value 
 for the key.</p>

<p class="NDLRefHead1">Notes</p>

<a name=KeyContent_Enumerations></a><p class="NDLRefHead2">KeyContent Enumerations</p>

<p><span class="NDLSystemFont">KeyContent</span> 
 is an enumerated type that indicates the immediate sub-class of <span 
 class="NDLSystemFont">NiAnimationKey</span> for an array of keys. It is 
 used in place of RTTI strings to determine class information.</p>

<!--(Table)=========================================================-->
<table>
    <thead>
        <tr>
            <th>Type</th>

            <th>NiAnimationKey Sub-Class</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><span class="NDLSystemFont">FLOATKEY</span></td>

            <td><a href="NiFloatKey.htm"><span class=
            "NDLSystemFont">NiFloatKey</span></a> - Used to
            animate float values.</td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">POSKEY</span></td>

            <td><a href="NiPosKey.htm"><span class=
            "NDLSystemFont">NiPosKey</span></a> - Used to animate
            <a href=
            "../../Reference/NiMain/NiPoint3.htm"><span class=
            "NDLSystemFont">NiPoint3</span></a> values.</td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">ROTKEY</span></td>

            <td><a href="NiRotKey.htm"><span class=
            "NDLSystemFont">NiRotKey</span></a> - Used to animate
            <a href=
            "../../Reference/NiMain/NiQuaternion.htm"><span class="NDLSystemFont">
            NiQuaternion</span></a> values.</td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">COLORKEY</span></td>

            <td><a href="NiColorKey.htm"><span class=
            "NDLSystemFont">NiColorKey</span></a> - Used to
            animate <a href=
            "../../Reference/NiMain/NiColorA.htm"><span class=
            "NDLSystemFont">NiColorA</span></a> values.</td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">TEXTKEY</span></td>

            <td><span class="NDLSystemFont"><a href=
            "NiTextKey.htm">NiTextKey</a></span> - Used for
            designating particular frames in an animation
            sequence.</td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">BOOLKEY</span></td>

            <td><a href="NiBoolKey.htm"><span class=
            "NDLSystemFont">NiBoolKey</span></a> - Used to
            animate boolean values.</td>
        </tr>
    </tbody>
</table>


<a name=KeyType_Enumerations></a><p class="NDLRefHead2">KeyType Enumerations</p>

<p><span class="NDLSystemFont">KeyType</span> 
 is an enumerated type that indicates the interpolation method the key 
 expects. It is used in place of virtual functions to determine the correct 
 interpolation function so that the size of animation data can be kept 
 as small as possible.</p>

<!--(Table)=========================================================-->
<table>
    <thead>
        <tr>
            <th>Type</th>

            <th>Interpolation Method</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><span class="NDLSystemFont">NOINTERP</span>
            </td>

            <td>None&mdash;should only be
            used when deleting the keys in a shared animation
            data object</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">LINKEY</span></td>

            <td>Linear interpolation
            (Corresponds to <a href=
            "NiLinColorKey.htm">NiLinColorKey</a>, <a href=
            "NiLinFloatKey.htm">NiLinFloatKey</a>, <a href=
            "NiLinPosKey.htm">NiLinPosKey</a>, <a href=
            "NiLinRotKey.htm">NiLinRotKey</a>)</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">BEZKEY</span></td>

            <td>Bezier (actually Hermite)
            interpolation (Corresponds to <a href=
            "NiBezFloatKey.htm">NiBezFloatKey</a>, <a href=
            "NiBezPosKey.htm">NiBezPosKey</a>, <a href=
            "NiBezRotKey.htm">NiBezRotKey</a>)</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">TCBKEY</span></td>

            <td>Tension-Continuity-Bias
            interpolation (Corresponds to <a href=
            "NiTCBFloatKey.htm">NiTCBFloatKey</a>, <a href=
            "NiTCBPosKey.htm">NiTCBPosKey</a>, <a href=
            "NiTCBRotKey.htm">NiTCBRotKey</a>)</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">EULERKEY</span></td>

            <td>Euler interpolation (Corresponds to
            <span><a href=
            "NiEulerRotKey.htm">NiEulerRotKey</a></span>)</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">STEPKEY</span></td>

            <td>Step interpolation - no
            interpolation between keys (Corresponds to <a href=
            "NiStepBoolKey.htm">NiStepBoolKey</a>)</td>
        </tr>
    </tbody>
</table>

<a name=Pseudo-Virtual_Functions></a><p class="NDLRefHead2">Pseudo-Virtual Functions</p>

<p>To eliminate the memory and performance overhead of 
 a virtual function table lookup, animation keys do not contain any virtual 
 functions. Instead, an array of static function pointers is used to look 
 up the proper function for a particular task. The <span class="NDLSystemFont"><a 
 href="NiAnimationKey.htm#KeyContent_Enumerations">KeyContent</a></span> 
 and <span class="NDLSystemFont"><a href="NiAnimationKey.htm#KeyType_Enumerations">KeyType</a></span> 
 for the particular type of animation key is used to index into the array, 
 like so:</p>

<pre>
// pkKeyBasedInterp is a pointer to an NiKeyBasedInterpolator object.
const unsigned short usChannel = 0;
NiAnimationKey::KeyContent eKeyContent = pkKeyBasedInterp-&gt;GetKeyContent(
    usChannel);
NiAnimationKey::KeyType eKeyType = pkKeyBasedInterp-&gt;GetKeyType(usChannel);
NiAnimationKey* pkKeys = pkKeyBasedInterp-&gt;GetKeyArray(usChannel);
unsigned int uiNumKeys = pkKeyBasedInterp-&gt;GetKeyCount(usChannel);
NiAnimationKey::FillDerivedValsFunction pfnFillDerivedVals =
    NiAnimationKey::GetFillDerivedFunction(eKeyContent, eKeyType);
NIASSERT(pfnFillDerivedVals);
pfnFillDerivedVals(pkKeys, uiNumKeys);
</pre> 

<p>The following pseudo-virtual functions are provided. 
 Not all of these functions are available for every type of animation key. 
 If a function is not available, the corresponding <span class="NDLSystemFont">NiAnimationKey::Get*</span> 
 function will return <span class="NDLSystemFont">NULL</span>.</p>

<p class="NDLRefMemberFunction">NiAnimationKey* ArrayFunction(unsigned int 
 uiNumKeys)</p>

<p class="NDLRefMemberDescription">This function allocates a new array of 
 animation keys of the appropriate type and returns a pointer to the head 
 of that array.</p>

<p class="NDLRefMemberFunction">void CopyFunction(NiAnimationKey* pkNewKey, 
 const NiAnimationKey* pkOrigKey)</p>

<p class="NDLRefMemberDescription">This function copies all the appropriate 
 values from <span class="NDLSystemFont">pkOrigKey</span> to <span class="NDLSystemFont">pkNewKey</span>.</p>

<p class="NDLRefMemberFunction">NiAnimationKey* CreateFunction(<a HREF="../../Reference/NiMain/NiStream.htm">NiStream</a>&amp; 
 kStream, unsigned int uiNumKeys)</p>

<p class="NDLRefMemberDescription">This function creates a new array of animation 
 keys of the appropriate type, loads each animation key from the provided 
 <span class="NDLSystemFont">NiStream</span> object, and returns the new 
 array.</p>

<p class="NDLRefMemberFunction">void CubicCoefsFunction(const NiAnimationKey* 
 pkKeys, unsigned int uiNumKeys, unsigned int uiIndex, void* pvValue0, 
 void* pvOutTangent0, void* pvA0, void* pvB0)</p>

<p class="NDLRefMemberDescription">This function returns the cubic coefficients 
 for the animation curve segment between the keys at <span class="NDLSystemFont">uiIndex</span> 
 and <span class="NDLSystemFont">uiIndex + 1</span> in the key array. This 
 cubic equation is of the form <span class="NDLSystemFont">*pvValue0 + (*pvOutTangent0 
 + (*pvA0 + *pvB0 * fT) * fT) * fT</span> where <span class="NDLSystemFont">fT</span> 
 is the normalized time along the specified curve segment. This function 
 is used internally by the <span class="NDLSystemFont">GenCubicCoefs</span> 
 function and normally should not be called separately by an application.</p>

<p class="NDLRefMemberFunction">float CurvatureFunction(NiAnimationKey* pkKeys, 
 unsigned int uiNumKeys)</p>

<p class="NDLRefMemberDescription">This function computes the max curvature 
 of the path represented by the key array. It is only applicable for position 
 keys.</p>

<p class="NDLRefMemberFunction">void DeleteFunction(NiAnimationKey* pkKeyArray)</p>

<p class="NDLRefMemberDescription">This function first casts the incoming 
 <span class="NDLSystemFont">pkKeyArray</span> pointer to a pointer of the 
 appropriate type and then calls <span class="NDLSystemFont">NiDelete[]</span> 
 on that array.</p>

<p class="NDLRefMemberFunction">bool EqualFunction(const NiAnimationKey&amp; 
 pkKey0, const NiAnimationKey&amp; pkKey1)</p>

<p class="NDLRefMemberDescription">This function tests whether or not two 
 animation keys hold equal values.</p>

<p class="NDLRefMemberFunction">void FillDerivedValsFunction(NiAnimationKey* 
 pkKeys, unsigned int uiNumKeys, unsigned char ucSize)</p>

<p class="NDLRefMemberDescription">Some animation keys hold internal values 
 that are computed by the public values for the key that are used to speed 
 up interpolation. When creating a new array of animation keys, you must 
 call the appropriate <span class="NDLSystemFont">FillDerivedValsFunction</span> 
 on the array before updating it in order to get correct results. This 
 function is automatically called for you upon file load, so it only needs 
 to be done for arrays of animation keys that are created in code.</p>

<p class="NDLRefMemberFunction">bool InsertFunction(float fTime, NiAnimationKey*&amp; 
 pkKeys, unsigned int&amp; uiNumKeys)</p>

<p class="NDLRefMemberDescription">This function will insert a key into the 
 key array at the specified time. The <span class="NDLSystemFont">pkKeys</span> 
 pointer passed into the array will be changed to point to the new key 
 array, and the old key array will be automatically deleted by this function. 
 The return value indicates whether or not a key was added. If a key already 
 exists at the indicated time, a new one cannot be added. This function 
 uses the appropriate interpolation functions to determine the value of 
 the added key.</p>

<p class="NDLRefMemberFunction">void InterpFunction(float fTime, const NiAnimationKey* 
 pkKey0, const NiAnimationKey* pkKey1, void* pResult)</p>

<p class="NDLRefMemberDescription">This function interpolates the value between 
 <span class="NDLSystemFont">pkKey0</span> and <span class="NDLSystemFont">pkKey1</span> 
 using the normalized time provided in <span class="NDLSystemFont">fTime</span>. 
 The result is returned in <span class="NDLSystemFont">pResult</span>. This 
 function is used internally by the <span class="NDLSystemFont">GenInterp</span> 
 function and normally should not be called separately by an application.</p>

<p class="NDLRefMemberFunction">bool IsPosedFunction(const NiAnimationKey* 
 pkKeys, unsigned int uiNumKeys)</p>

<p class="NDLRefMemberDescription">This function returns true when the key 
 values within the key array are posed (i.e. constant), and false otherwise.</p>

<p class="NDLRefMemberFunction">void SaveFunction(<a HREF="../../Reference/NiMain/NiStream.htm">NiStream</a>&amp; 
 kStream, NiAnimationKey* pkKeys, unsigned int uiNumKeys)</p>

<p class="NDLRefMemberDescription">This function saves out each key in the 
 array using the provided <span class="NDLSystemFont">NiStream</span> object.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
