<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiBoolTimelineEvaluator</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiBoolTimelineEvaluator</p>

<p class="NDLRefParentage">: public <a HREF="NiBoolEvalulator.htm">NiBoolEvaluator</a></p>

<p class="NDLRefHeaderFile">&lt;NiBoolTimelineEvaluator.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>NiBoolTimelineEvaluator uses <a href="NiBoolKey.htm"><span 
 class="NDLSystemFont">NiBoolKey</span></a> objects to animate a bool value 
 over time. It differs from NiBoolEvaluator in its interpolation method. 
 Instead of simply returning the value of the previous key before the update 
 time like NiBoolEvaluator does, NiBoolTimelineEvaluator ensures that keys 
 have not been missed between the two updates. If the value for the current 
 update is the same as that of the last update, the animation keys between 
 the two update times are traversed to make sure that a key with the opposite 
 value is not found. If one is, that opposite value is returned instead 
 of the current value. For example, consider a key array with the following 
 values:</p>

<!--(Table)=========================================================-->
<table>
	<thead>
		<tr>
			<th>Key Time</th>
			<th>Key Value</th>
		</tr>
	</thead>
	<tbody>
		<tr>						
       	<td>0.0</td>
       	<td>false</td>
		</tr>
		<tr>
       	<td>0.5</td>
       	<td>true</td>
		</tr>
		<tr>						
       	<td>0.501</td>
       	<td>false</td>
		</tr>
		<tr>
       	<td>1.0</td>
       	<td>false</td>
		</tr>
	</tbody>	
</table>



<p>Notice that the time between the middle two keys is 
 very small. If the update frequency is low enough, it is possible for 
 two successive updates to miss the &quot;true&quot; key altogether. NiBoolTimelineEvaluator 
 will not miss the &quot;true&quot; key and will return true the next update 
 after the &quot;true&quot; key occurs. This type of evaluator is primarily 
 used by particle system controllers in Gamebryo to ensure that particle 
 emissions are not missed.</p>

<p>Evaluators are primarily intended for sequence-based 
 animation. Refer to the <a href="Animation_Sequences.htm">Animation 
 Sequences</a> section in the Introduction to Animation for more details.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiBoolTimelineEvaluator()</p>

<p class="NDLRefMemberDescription">This constructor creates an <span class="NDLSystemFont">NiBoolTimelineEvaluator</span> 
 containing invalid data.</p>

<p class="NDLRefMemberFunction">NiBoolTimelineEvaluator(<a HREF="NiBoolData.htm">NiBoolData</a>* 
 pkBoolData)</p>

<p class="NDLRefMemberDescription">This constructor creates an <span class="NDLSystemFont">NiBoolTimelineEvaluator</span> 
 with the specified <span class="NDLSystemFont">NiBoolData</span>.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
