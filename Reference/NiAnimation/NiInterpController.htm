<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiInterpController</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>


<p class="NDLRefHeadClassTitle">NiInterpController</p>

<p class="NDLRefParentage">: public <span style="color: #0000ff;"><a HREF="../../Reference/NiMain/NiTimeController.htm">NiTimeController</a></span></p>

<p class="NDLRefHeaderFile">&lt;NiInterpController.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiInterpController</span> 
 is the base class for all <span class="NDLSystemFont"><a HREF="../../Reference/NiMain/NiTimeController.htm">NiTimeController</a></span> 
 objects using <a href="NiInterpolator.htm"><span class="NDLSystemFont">NiInterpolator</span></a> 
 objects to animate their target objects. The primary role of <span class="NDLSystemFont">NiInterpController</span> 
 in this capacity is to take the interpolated value returned from its interpolator(s) 
 and set the appropriate value(s) on its target object in the scene graph.</p>

<p>Sequence animation utilizes the <span class="NDLSystemFont">NiInterpController</span> 
 in a different manner. Here, interp controllers act at the gateway between 
 the pose buffer system and scene graph nodes. In particular, the <span 
 class="NDLSystemFont"><a HREF="NiMultiTargetPoseHandler.htm">NiMultiTargetPoseHandler</a></span> 
 pushes data contained within <a HREF="NiPoseBuffer.htm">pose buffers</a> 
 into the scene graph via the interp controller <span class="NDLSystemFont"><a 
 href="NiInterpController.htm#UpdateValue">UpdateValue</a></span> functions. 
 If a class inherits from <span class="NDLSystemFont">NiInterpController</span>, 
 it is automatically available to be extracted into <span class="NDLSystemFont"><a 
 HREF="NiSequenceData.htm">NiSequenceData</a></span> objects for sequence 
 animation.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberDescription">This is an abstract base class and therefore 
 has no public constructors.</p>

<p class="NDLRefHead1">Static Member Variables</p>

<p class="NDLRefMemberFunction">static const unsigned short INVALID_INDEX</p>

<p class="NDLRefMemberDescription">This data member indicates that the index 
 of the <a href="NiInterpolator.htm"><span class="NDLSystemFont">NiInterpolator</span></a> 
 is invalid.</p>

<p class="NDLRefMemberFunction">static const float INVALID_TIME</p>

<p class="NDLRefMemberDescription">This data member indicates that the time 
 is invalid.</p>

<p class="NDLRefHead1">Virtual Function Overrides</p>

<p class="NDLRefMemberFunction"><a name=Update></a>virtual void Update(float&nbsp;fTime) 
 = 0</p>

<p class="NDLRefMemberDescription">Overridden from <span class="NDLSystemFont"><a 
 HREF="../../Reference/NiMain/NiTimeController.htm#Update">NiTimeController</a></span>. 
 This function causes the <span class="NDLSystemFont">NiInterpController</span> 
 to map <span class="NDLSystemFont">fTime</span> into its 
 valid time range, update all of its <span 
 class="NDLSystemFont"><a href="NiInterpolator.htm">NiInterpolator</a>s</span>, and set the appropriate 
 value(s) on its target.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction"><a name=GetInterpolatorCount></a>virtual 
 unsigned short GetInterpolatorCount() const = 0</p>

<p class="NDLRefMemberDescription">This function returns the number of <span class="NDLSystemFont"><a 
 HREF="NiInterpolator.htm">NiInterpolator</a></span>s 
 contained by this <span class="NDLSystemFont">NiInterpController.</span></p>

<p class="NDLRefMemberFunction"><a name=GetInterpolatorID></a>virtual const 
 char* GetInterpolatorID(unsigned short usIndex = 0) = 0</p>

<p class="NDLRefMemberDescription">This function returns the unique identifier 
 code for the <span class="NDLSystemFont"><a href="NiInterpolator.htm">NiInterpolator</a> 
 </span>specified by <span class="NDLSystemFont">usIndex</span>. Calling 
 this method may cause a class to allocate strings internally so that values 
 may be cached.</p>

<p class="NDLRefMemberFunction"><a name=GetInterpolatorIndex></a>virtual 
 unsigned short GetInterpolatorIndex(const char* pcID) const = 0</p>

<p class="NDLRefMemberDescription">This function uses the unique identifier 
 code for the <span class="NDLSystemFont"><a href="NiInterpolator.htm">NiInterpolator</a> 
 </span>specified by <span class="NDLSystemFont">GetInterpolatorID</span> 
 to match an identifier string with an internal index. If no match is found 
 the returned index will be <span class="NDLSystemFont">INVALID_INDEX</span>.</p>

<p class="NDLRefMemberFunction"><a name=GetInterpolator></a>virtual <span 
 class="NDLSystemFont"><a href="NiInterpolator.htm">NiInterpolator</a></span>* GetInterpolator(unsigned 
 short usIndex = 0) const = 0</p>

<p class="NDLRefMemberDescription">This function returns the interpolator 
 contained at the specified index. If the index is not valid for this controller, 
 the returned <span class="NDLSystemFont"><a href="NiInterpolator.htm">NiInterpolator></a></span> 
 will be NULL.</p>

<p class="NDLRefMemberFunction"><a name=SetInterpolator></a>virtual void 
 SetInterpolator(<span class="NDLSystemFont"><a href="NiInterpolator.htm">NiInterpolator</a></span>* 
 pkInterpolator, unsigned short usIndex = 0) = 0</p>

<p class="NDLRefMemberDescription">This function will set the <span 
 class="NDLSystemFont"><a href="NiInterpolator.htm">NiInterpolator</a> </span>at the specified index.</p>

<p class="NDLRefMemberFunction">bool GetManagerControlled() const</p>

<p class="NDLRefMemberFunction">void SetManagerControlled(bool bManagerControlled)</p>

<p class="NDLRefMemberDescription">These functions get and set whether or 
 not the <span class="NDLSystemFont">NiInterpController</span> 
 is controlled by an <span class="NDLSystemFont"><a HREF="NiControllerManager.htm">NiControllerManager</a></span>. 
 The sequence animation system utilizes manager controlled interp controllers.</p>

<p class="NDLRefMemberFunction"><a name=ResetTimeExtrema></a>virtual void 
 ResetTimeExtrema()</p>

<p class="NDLRefMemberDescription">This function should be called whenever 
 the key time range for an <span class="NDLSystemFont"><a href="NiInterpolator.htm">NiInterpolator</a></span> 
 contained by this controller must be reset. Note that this may cause the 
 range to be set to (0.0, 0.0) if the interpolators are all posed. If the 
 <span class="NDLSystemFont">NiInterpController</span> is being controlled 
 by an <span class="NDLSystemFont"><a HREF="NiControllerManager.htm">NiControllerManager</a></span> 
 (i.e., when <span class="NDLSystemFont">GetManagerControlled</span> returns 
 true), the time range is not modified by this function since the interp 
 controller may not have an associated interpolator. Sequence animation, 
 for example, propagates <a href="NiEvaluator.htm">evaluator</a> data to 
 the scene graph via the <span class="NDLSystemFont"><a href="NiInterpController.htm#UpdateValue">UpdateValue</a></span> 
 methods without the use of interpolators.</p>

<p class="NDLRefMemberFunction"><a name=GetCtlrID></a>virtual const char* 
 GetCtlrID()</p>

<p class="NDLRefMemberDescription">This function returns an ID for this controller 
 type that can uniquely identify this controller among others of the same 
 type on the same <span class="NDLSystemFont"><a HREF="../../Reference/NiMain/NiObjectNET.htm">NiObjectNET</a></span>. 
 This function is used primarily for controller extraction.</p>

<a name=UpdateValue></a><p class="NDLRefHead2">Functions to push data values into associated scene graph attributes</p>

<p class="NDLRefMemberFunction">virtual bool UpdateValue(float fTime, bool 
 bBool, unsigned short usIndex = 0)</p>

<p class="NDLRefMemberFunction">virtual bool UpdateValue(float fTime, float 
 fFloat, unsigned short usIndex = 0)</p>

<p class="NDLRefMemberFunction">virtual bool UpdateValue(float fTime, const 
 <a href="../../Reference/NiMain/NiColorA.htm">NiColorA</a>&amp; 
 kColor, unsigned short usIndex = 0)</p>

<p class="NDLRefMemberFunction">virtual bool UpdateValue(float fTime, const 
 <a href="../../Reference/NiMain/NiPoint3.htm">NiPoint3</a>&amp; 
 kPoint3, unsigned short usIndex = 0)</p>

<p class="NDLRefMemberFunction">virtual bool UpdateValue(float fTime, const 
 <a href="../../Reference/NiMain/NiQuaternion.htm">NiQuaternion</a>&amp; 
 kRot, unsigned short usIndex = 0)</p>

<p class="NDLRefMemberFunction">virtual bool UpdateValue(float fTime, <a 
 HREF="NiControllerSequence.htm">NiControllerSequence</a>* pkControllerSequence, 
 <a HREF="NiEvaluator.htm">NiEvaluator</a>* pkEvaluator, <a HREF="NiEvaluatorSPData.htm">NiEvaluatorSPData</a>** 
 ppkEvalSPData, unsigned short usIndex = 0)</p>

<p class="NDLRefMemberDescription">These functions push the specified value 
 into the associated scene graph attribute. <span class="NDLSystemFont">fTime</span> 
 typically is the application's global animation time. <span class="NDLSystemFont">usIndex</span> 
 specifies the interpolator index for the specified data. False is returned 
 when the data type is not supported. These functions all return false 
 in the base implementation. These functions are used extensively for sequence 
 animation.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
