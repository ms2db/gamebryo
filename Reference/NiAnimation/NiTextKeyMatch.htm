<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiTextKeyMatch</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiTextKeyMatch</p>

<p class="NDLRefParentage">: public <a HREF="../../Reference/NiMain/NiRefObject.htm">NiRefObject</a></p>

<p class="NDLRefHeaderFile">&lt;NiTextKeyMatch.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiTextKeyMatch</span> objects 
 are intended to be used by the animation system's <span class="NDLSystemFont"><a 
 href="NiActorManager.htm">NiActorManager</a></span> and its callback system. 
 When a <a HREF="NiActorManager.htm#Callback_Objects">callback</a> is registered 
 to an <span class="NDLSystemFont">NiActorManager</span>, an <span class="NDLSystemFont">NiTextKeyMatch</span> 
 object is provided explicitly by the user, or one is created implicitly 
 from the string passed into the <a HREF="NiActorManager.htm#Functions_to_register_callbacks">register 
 function</a>. As a user-derivable class, the <span class="NDLSystemFont">NiTextKeyMatch</span> 
 object facilitates greater flexibility in how text key strings are matched. 
 The matching of a text key string can be as simple as a straight <span 
 class="NDLSystemFont">strcmp</span> or it can issue more complex operations 
 for string parsing and comparisons.</p>

<p>As a very simple example, suppose a user wanted a text 
 key to match on a sub-string such as &quot;<span class="NDLSystemFont">SOUND:</span>&quot; 
 in order that it generate a text key event. The rationale in this case 
 is that a single text key object could be created to handle the event 
 regardless of the actual value associated with &quot;<span class="NDLSystemFont">SOUND:</span>&quot;. 
 In this case, the user could create his own <span class="NDLSystemFont">NiTextKeyMatch</span>-derived 
 class and override the virtual <span class="NDLSystemFont">IsKeyMatch</span> 
 function in the following manner:</p>

<pre>
bool MyTextKeyMatch::IsKeyMatch(const NiFixedString&amp; kTextKey)
{
    char* pcResult = strstr(kTextKey, m_kMatchKey);
    if (pcResult)
    {
        SetLastMatchedKey(kTextKey);
        return true;
    }
    return false;
} 
</pre>

<p>Having the above <span class="NDLSystemFont">IsKeyMatch</span> 
 implementation would allow one to create a text key object associated 
 with any &quot;<span class="NDLSystemFont">SOUND:</span>&quot; instead of 
 a specific one. When the user receives the <span class="NDLSystemFont"><a 
 href="NiActorManager.htm#Callback_Objects">TextKeyEvent</a></span>, he 
 will receive both the text key object and the text key string for which 
 it is matched.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiTextKeyMatch(const&nbsp;<a href="../../Reference/NiMain/NiFixedString.htm">NiFixedString</a>&amp;&nbsp;kMatchKey)</p>

<p class="NDLRefMemberDescription">The default constructor takes a string 
 pointer that represents the matching key. </p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">virtual bool IsKeyMatch(const&nbsp;<a href="../../Reference/NiMain/NiFixedString.htm">NiFixedString</a>&amp; 
 kTextKey)</p>

<p class="NDLRefMemberDescription">The default implementation uses a simple 
 <span class="NDLSystemFont">strcmp</span> comparison to determine if that 
 text key matches. For more advanced text key parsing and matching operations, 
 this function can be overridden.</p>

<p class="NDLRefMemberFunction">const&nbsp;<a href="../../Reference/NiMain/NiFixedString.htm">NiFixedString</a>&amp; 
 GetLastMatchedKey() const</p>

<p class="NDLRefMemberDescription">This function returns the string for the 
 last key that was matched.</p>

<p class="NDLRefHead1">Operators</p>

<p class="NDLRefMemberFunction">operator const char*(void)</p>

<p class="NDLRefMemberDescription">Returns the match key as a const char*.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
