<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiSequenceData</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiSequenceData</p>

<p class="NDLRefParentage">: public <a href=
"../../Reference/NiMain/NiObject.htm">NiObject</a></p>

<p class="NDLRefHeaderFile">&lt;NiSequenceData.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiSequenceData</span> represents a
shareable animation sequence for use with the <span class=
"NDLSystemFont"><a href=
"NiControllerManager.htm">NiControllerManager</a></span>.
<span class="NDLSystemFont">NiSequenceData</span> objects are
stored in KF files and are created upon export from 3ds max and
Maya by the <a href=
"../Tool_Plug_ins/Controller_Extractor.htm">Controller
Extractor export plug-in</a>. Each <span class=
"NDLSystemFont">NiSequenceData</span> holds a collection of
<span class="NDLSystemFont"><a href=
"NiEvaluator.htm">NiEvaluator</a></span> objects along with the
necessary information to drive their corresponding controllers in
the scene graph. An <span class=
"NDLSystemFont">NiSequenceData</span> must be added to a
controller manager before the contained animation can be played
on the character. An <span class=
"NDLSystemFont">NiSequenceData</span> can be shared by multiple
controller managers.</p>

<p>An <span class="NDLSystemFont"><a href=
"NiControllerSequence.htm">NiControllerSequence</a></span> is
temporarily created whenever an <span class=
"NDLSystemFont">NiSequenceData</span> is activated on an
controller manager. This <span class=
"NDLSystemFont">NiControllerSequence</span> represents the active
animation and is destroyed or <a href=
"NiControllerManager.htm#Sequence_Recycling">recycled</a> shortly
after the active sequence runs to completion. The source
<span class="NDLSystemFont">NiSequenceData</span> remains
associated with the controller manager after the <span class=
"NDLSystemFont">NiControllerSequence</span> is destroyed or
recycled.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiSequenceData(const <a href=
"../../Reference/NiMain/NiFixedString.htm">NiFixedString</a>&amp;
kName, unsigned int uiMaxEvaluators = 12)</p>

<p class="NDLRefMemberDescription">The constructor takes the name
of the sequence along with the initial size for its internal
array of evaluators.</p>

<p class="NDLRefHead1">Static Member Functions</p>

<p class="NDLRefMemberFunction">static NiSequenceDataPtr
CreateSequenceDataFromFile(const char* pcFilename, const <a href=
"../../Reference/NiMain/NiFixedString.htm">NiFixedString</a>&amp;
kSequenceName)</p>

<p class="NDLRefMemberFunction">static NiSequenceDataPtr
CreateSequenceDataFromFile(const <a href=
"../../Reference/NiMain/NiStream.htm">NiStream</a>&amp; kStream,
const <a href=
"../../Reference/NiMain/NiFixedString.htm">NiFixedString</a>&amp;
kSequenceName)</p>

<p class="NDLRefMemberDescription">These functions are used to
create an <span class="NDLSystemFont">NiSequenceData</span> from
a given KF file. The first function takes the full path to the KF
file, while the second function takes an <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMain/NiStream.htm">NiStream</a></span> object
that has already loaded the KF file. Both functions take the name
of the sequence as it appears in the stream from which the
sequence is loaded. If the KF file version is older than the
current version, the sequence it contains is automatically
converted to a current <span class=
"NDLSystemFont">NiSequenceData</span> object. Both functions
return a smart pointer to the <span class=
"NDLSystemFont">NiSequenceData</span> so that it is not deleted
when the <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiStream.htm">NiStream</a></span> object
is destroyed.</p>

<p class="NDLRefMemberFunction">static NiSequenceDataPtr
CreateSequenceDataFromFile(const char* pcFilename, unsigned int
uiIndex)</p>

<p class="NDLRefMemberFunction">static NiSequenceDataPtr
CreateSequenceDataFromFile(const <a href=
"../../Reference/NiMain/NiStream.htm">NiStream</a>&amp; kStream,
unsigned int uiIndex)</p>

<p class="NDLRefMemberDescription">These functions are used to
create an <span class="NDLSystemFont">NiSequenceData</span> from
a given KF file. The first function takes the full path to the KF
file, while the second function takes an <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMain/NiStream.htm">NiStream</a></span> object
that has already loaded the KF file. Both functions take the
index in the stream from which to load the sequence. If the KF
file version is older than the current version, the sequence it
contains is automatically converted to a current <span class=
"NDLSystemFont">NiSequenceData</span> object. Both functions
return a smart pointer to the <span class=
"NDLSystemFont">NiSequenceData</span> so that it is not deleted
when the <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiStream.htm">NiStream</a></span> object
is destroyed.</p>

<p class="NDLRefMemberFunction">static bool
CreateAllSequenceDatasFromFile(const char* pcFilename, <a href=
"NiSequenceData.htm#NiSequenceDataPointerArray">NiSequenceDataPointerArray</a>&amp;
kSeqDatas)</p>

<p class="NDLRefMemberFunction">static bool
CreateAllSequenceDatasFromFile(const <a href=
"../../Reference/NiMain/NiStream.htm">NiStream</a>&amp; kStream,
<a href=
"NiSequenceData.htm#NiSequenceDataPointerArray">NiSequenceDataPointerArray</a>&amp;
kSeqDatas)</p>

<p class="NDLRefMemberDescription">These functions load all the
sequences from the specified KF file, storing smart pointers to
them in an <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiTArray.htm">NiTArray</a></span>. The
first function takes the full path to the KF file, while the
second function takes an <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiStream.htm">NiStream</a></span> object
that has already loaded the KF file. If the KF file version is
older than the current version, the sequences it contains are
automatically converted to current <span class=
"NDLSystemFont">NiSequenceData</span> objects. Both functions
return true if all the sequences were loaded successfully, and
false otherwise.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p>Unless specifically stated, none of the non-const member
functions should be called on a sequence that has already been
added to an <span class=
"NDLSystemFont">NiControllerManager</span>.</p>

<p class="NDLRefHead2">Functions for getting and setting the
sequence name</p>

<p class="NDLRefMemberFunction">const <a href=
"../../Reference/NiMain/NiFixedString.htm">NiFixedString</a>&amp;
GetName() const</p>

<p class="NDLRefMemberFunction">void SetName(const <a href=
"../../Reference/NiMain/NiFixedString.htm">NiFixedString</a>&amp;
kName)</p>

<p class="NDLRefMemberDescription">These functions get and set
the name of the sequence. The name cannot be set to <span class=
"NDLSystemFont">NULL</span>.</p>

<a name="Functions_for_retrieving_evaluators" id="Functions_for_retrieving_evaluators"></a><p class="NDLRefHead2">Functions for Retrieving Evaluators</p>

<p class="NDLRefMemberFunction">unsigned int GetNumEvaluators()
const</p>

<p class="NDLRefMemberDescription">This function returns the
number of evaluators in the sequence.</p>

<p class="NDLRefMemberFunction"><a href=
"NiEvaluator.htm">NiEvaluator</a>* GetEvaluatorAt(unsigned int
uiIndex) const</p>

<p class="NDLRefMemberDescription">This function returns the
evaluator at the specified index. The index passed into this
function must be lower than the number returned by <span class=
"NDLSystemFont">GetNumEvaluators</span>. The evaluator array is
kept packed, so the return value will not be <span class=
"NDLSystemFont">NULL</span>.</p>

<a name="Functions_for_adding_and_removing_evaluators" id="Functions_for_adding_and_removing_evaluators"></a><p class="NDLRefHead2">Functions for Adding and Removing
Evaluators</p>

<p class="NDLRefMemberFunction">unsigned int GetMaxEvaluators()
const</p>

<p class="NDLRefMemberDescription">This function returns the size
of the internal evaluator array. Note this may differ from
<span class="NDLSystemFont">GetNumEvaluators</span> which returns
the actual number of evaluators in the sequence.</p>

<p class="NDLRefMemberFunction">void SetMaxEvaluators(unsigned
int uiMax)</p>

<p class="NDLRefMemberDescription">This function re-allocates the
internal storage array to the specified size, copying the current
contents to the new array. It is not necessary to call this
function to resize the internal array since it will be resized
automatically as evaluators are added; however, this function may
be used to resize the internal array to a specific maximum size
before adding a known number of evaluators.</p>

<p class="NDLRefMemberFunction">unsigned int
AddEvaluator(<a href="NiEvaluator.htm">NiEvaluator</a>*
pkEvaluator)</p>

<p class="NDLRefMemberFunction"><a href=
"NiEvaluator.htm">NiEvaluatorPtr</a> RemoveEvaluator(unsigned int
uiIndex)</p>

<p class="NDLRefMemberDescription">These functions add and remove
evaluators from the sequence. These functions are usually not
called by an application, but are instead used during controller
extraction and KF file creation. <span class=
"NDLSystemFont">AddEvaluator</span> returns the index at which
the evaluator was added. The internal evaluator array is expanded
automatically as needed. <span class=
"NDLSystemFont">RemoveEvaluator</span> takes the index from which
to remove the evaluator. The evaluator array is compacted after
removal to eliminate gaps.</p>

<a name="Functions_for_sorting_evaluators" id="Functions_for_sorting_evaluators"></a><p class="NDLRefHead2">Functions for sorting evaluators</p>

<p class="NDLRefMemberFunction">void SortEvaluatorsByLOD(<a href=
"NiSkinningLODController.htm">NiSkinningLODController</a>*
pkLODController, <a href=
"../../Reference/NiMain/NiAVObjectPalette.htm">NiAVObjectPalette</a>*
pkPalette)</p>

<p class="NDLRefMemberFunction">void
SortEvaluatorsByPBChannelType()</p>

<p class="NDLRefMemberDescription">These functions sort the
evaluators within the sequence. The first function sorts the
evaluators by their corresponding level of detail (from lowest to
highest LOD). The second function sorts the evaluators by pose
buffer channel type whereby the resulting order of evaluators
matches the ordering of data types found within an <span class=
"NDLSystemFont"><a href=
"NiPoseBuffer.htm">NiPoseBuffer</a></span>.</p>

<p class="NDLRefHead2">Functions for getting text key
information</p>

<p class="NDLRefMemberFunction"><a href=
"NiTextKeyExtraData.htm">NiTextKeyExtraData</a>* GetTextKeys()
const</p>

<p class="NDLRefMemberFunction">void SetTextKeys(<a href=
"NiTextKeyExtraData.htm">NiTextKeyExtraData</a>* pkKeys)</p>

<p class="NDLRefMemberDescription">These functions get and set
the pointer to the text keys that are associated with the
sequence. <span class="NDLSystemFont"><a href=
"NiActorManager.htm">NiActorManager</a></span> uses text keys to
trigger events, and <span class="NDLSystemFont"><a href=
"NiControllerManager.htm">NiControllerManager</a></span> uses
text keys to synchronize time between sequences.</p>

<p class="NDLRefMemberFunction">float GetKeyTimeAt(<a href=
"NiTextKeyMatch.htm">NiTextKeyMatch</a>* pkMatchObject) const</p>

<p class="NDLRefMemberDescription">This function returns the
actual key time of the text key matched by <span class=
"NDLSystemFont">pkMatchObject</span>. This time is the time
stored in the text key, unaltered by frequency modifications.</p>

<p class="NDLRefMemberFunction">float GetKeyTimeAt(const <a href=
"../../Reference/NiMain/NiFixedString.htm">NiFixedString</a>&amp;
kTextKey) const</p>

<p class="NDLRefMemberDescription">This function returns the
actual key time of the text key matching the text <span class=
"NDLSystemFont">kTextKey</span>. This time is the time stored in
the text key, unaltered by frequency modifications.</p>

<p class="NDLRefHead2">Functions for getting and setting sequence
timing information</p>

<p class="NDLRefMemberFunction"><a name="GetDuration" id="GetDuration"></a>float GetDuration() const</p>

<p class="NDLRefMemberDescription">This function returns the
duration of the sequence in seconds. The first key (i.e. begin
key) in the sequence always starts with time 0.0. The last key
(i.e. end key) always resides at the time returned by
<span class="NDLSystemFont">GetDuration</span>.</p>

<p class="NDLRefMemberFunction">float GetDurationDivFreq()
const</p>

<p class="NDLRefMemberDescription">This function returns the
duration of the sequence divided by the frequency.</p>

<p class="NDLRefMemberFunction">void SetDuration(float
fDuration)</p>

<p class="NDLRefMemberDescription">This function sets the
duration of the sequence in seconds. This function is for the
exclusive use of tools and other code which programmatically
generate <span class="NDLSystemFont">NiSequenceData</span>
objects. <span class="NDLSystemFont">SetDuration</span> should
not be used to adjust the timing of sequences during runtime
playback. Code utilizing <span class=
"NDLSystemFont">SetDuration</span> must ensure the sequence's
evaluators have key times which range from 0.0 to <span class=
"NDLSystemFont">GetDuration</span>.</p>

<p class="NDLRefMemberFunction"><a href=
"../../Reference/NiMain/NiTimeController.htm#Enumerations">NiTimeController::CycleType</a>
GetCycleType() const</p>

<p class="NDLRefMemberFunction">bool SetCycleType(<a href=
"../../Reference/NiMain/NiTimeController.htm#Enumerations">NiTimeController::CycleType</a>
eType)</p>

<p class="NDLRefMemberDescription">These functions get and set
the cycle type for the sequence. Only cycle types of <span class=
"NDLSystemFont">LOOP</span> and <span class=
"NDLSystemFont">CLAMP</span> are supported by <span class=
"NDLSystemFont">NiSequenceData</span>. <span class=
"NDLSystemFont">SetCycleType</span> will return false without
setting the cycle type if anything other than <span class=
"NDLSystemFont">LOOP</span> or <span class=
"NDLSystemFont">CLAMP</span> is passed into it. <span class=
"NDLSystemFont">SetCyceType</span> may be called after the
<span class="NDLSystemFont">NiSequenceData</span> has been added
to an <span class="NDLSystemFont"><a href=
"NiControllerManager.htm">NiControllerManager</a></span>.
Changing the cycle type in this manner will only affect sequences
which are activated in the future, and not affect any animations
(i.e. <span class="NDLSystemFont"><a href=
"NiControllerSequence.htm">NiControllerSequence</a></span>
objects) that are already active.</p>

<p class="NDLRefMemberFunction">float GetFrequency() const</p>

<p class="NDLRefMemberFunction">void SetFrequency(float
fFrequency)</p>

<p class="NDLRefMemberDescription">These functions get and set
the frequency for the sequence. A frequency of 2.0 will cause the
sequence to run at twice its normal rate, and take half as long
to complete. <span class="NDLSystemFont">SetFrequency</span> may
be called after the <span class=
"NDLSystemFont">NiSequenceData</span> has been added to an
<span class="NDLSystemFont"><a href=
"NiControllerManager.htm">NiControllerManager</a></span>.
Changing the frequency in this manner will only affect sequences
which are activated in the future, and not affect any animations
(i.e. <span class="NDLSystemFont"><a href=
"NiControllerSequence.htm">NiControllerSequence</a></span>
objects) that are already active.</p>

<p class="NDLRefMemberFunction">float TimeDivFreq(float fTime)
const</p>

<p class="NDLRefMemberDescription">This is a convenience function
which takes a time, divides it by the frequency, and returns the
value.</p>

<p class="NDLRefMemberFunction">float TimeMultFreq(float fTime)
const</p>

<p class="NDLRefMemberDescription">This is a convenience function
which takes a time, multiplies it by the frequency, and returns
the value.</p>

<a name="Functions_related_to_callback_objects" id="Functions_related_to_callback_objects"></a><p class="NDLRefHead2">Functions Related to Callback Objects</p>

<p>The following functions manage the list of default callback
objects for a sequence. Default callback objects are optionally
registered with each <span class=
"NDLSystemFont">NiSequenceData</span>. Upon sequence activation,
these callback objects are added to the newly created
<span class="NDLSystemFont"><a href=
"NiControllerSequence.htm">NiControllerSequence</a></span> using
a simple matching scheme based on the associated <span class=
"NDLSystemFont"><a href=
"NiControllerManager.htm">NiControllerManager</a></span>. Once
bound to a given <span class=
"NDLSystemFont">NiControllerSequence</span>, the callback
object's <span class="NDLSystemFont">ActivationChanged</span>
function is executed whenever the <span class=
"NDLSystemFont">NiControllerSequence</span> is activated,
reactivated, or deactivated. See the <a href=
"NiSequenceData.htm#Callback_Objects">notes</a> below for more
details on callback objects.</p>

<p class="NDLRefMemberFunction">void
AddDefaultActivationCallback(<a href=
"NiSequenceData.htm#Callback_Objects">ActivationCallback</a>*
pkCallback, <a href=
"NiControllerManager.htm">NiControllerManager</a>* pkManager =
NULL)</p>

<p class="NDLRefMemberDescription">This function registers a
default callback object with the <span class=
"NDLSystemFont">NiSequenceData</span>. Whenever this sequence is
subsequently activated on the specified <span class=
"NDLSystemFont"><a href=
"NiControllerManager.htm">NiControllerManager</a></span>, the
specified callback object will be added to the <span class=
"NDLSystemFont"><a href=
"NiControllerSequence.htm">NiControllerSequence</a></span>
representing the active sequence. The <span class=
"NDLSystemFont">pkManager</span> parameter may be <span class=
"NDLSystemFont">NULL</span>, in which case the callback object is
always added to the <span class=
"NDLSystemFont">NiControllerSequence</span> regardless of its
associated <span class=
"NDLSystemFont">NiControllerManager</span>. Multiple default
callbacks can be registered with an <span class=
"NDLSystemFont">NiSequenceData</span>, and several of these
callbacks may map to the same <span class=
"NDLSystemFont">NiControllerManager</span> object.</p>

<p class="NDLRefMemberFunction">void
RemoveDefaultActivationCallback(<a href=
"NiSequenceData.htm#Callback_Objects">ActivationCallback</a>*
pkCallback, <a href=
"NiControllerManager.htm">NiControllerManager</a>* pkManager =
NULL)</p>

<p class="NDLRefMemberDescription">This function removes the
given default callback object mapped to the specified
<span class="NDLSystemFont"><a href=
"NiControllerManager.htm">NiControllerManager</a></span> from the
<span class="NDLSystemFont">NiSequenceData</span>. Other
callbacks on this sequence as well as any active <span class=
"NDLSystemFont"><a href=
"NiControllerSequence.htm">NiControllerSequence</a></span> object
using the specified callback are unaffected. The <span class=
"NDLSystemFont">pkCallback</span> parameter may be <span class=
"NDLSystemFont">NULL</span>, in which case all callbacks
explicitly assigned to the specified <span class=
"NDLSystemFont">pkManager</span> are removed. The <span class=
"NDLSystemFont">pkManager</span> parameter may be <span class=
"NDLSystemFont">NULL</span>, in which case the specified
<span class="NDLSystemFont">pkCallback</span> is removed only if
it had been added via <span class=
"NDLSystemFont">AddDefaultActivationCallback</span> using a
<span class="NDLSystemFont">NULL</span> <span class=
"NDLSystemFont">pkManager</span> parameter.</p>

<p class="NDLRefMemberFunction">unsigned int
GetDefaultActivationCallbackCount() const</p>

<p class="NDLRefMemberDescription">This function returns the
number of default callbacks that have been added to the
<span class="NDLSystemFont">NiSequenceData</span>.</p>

<p class="NDLRefMemberFunction">void
GetDefaultActivationCallbackAt(unsigned int uiIndex, <a href=
"NiSequenceData.htm#Callback_Objects">ActivationCallback</a>*&amp;
pkCallback, <a href=
"NiControllerManager.htm">NiControllerManager</a>*&amp;
pkManager)</p>

<p class="NDLRefMemberDescription">This function obtains the
default callback object at the specified index from the
<span class="NDLSystemFont">NiSequenceData</span>. The
<span class="NDLSystemFont">uiIndex</span> parameter must be less
than the value returned by <span class=
"NDLSystemFont">GetDefaultActivationCallbackCount</span>. The
array is kept packed, so the returned <span class=
"NDLSystemFont">pkCallback</span> pointer will not be
<span class="NDLSystemFont">NULL</span>. The returned
<span class="NDLSystemFont">pkManager</span> pointer will be
<span class="NDLSystemFont">NULL</span> if <span class=
"NDLSystemFont">AddDefaultActivationCallback</span> had been
called with the callback and a <span class=
"NDLSystemFont">NULL</span> value for <span class=
"NDLSystemFont">pkManager</span>.</p>

<p class="NDLRefHead1">Notes</p>

<a name="NiSequenceDataPointerArray" id="NiSequenceDataPointerArray"></a><p class="NDLRefHead2">NiSequenceDataPointerArray</p>

<p>The <span class=
"NDLSystemFont">NiSequenceDataPointerArray</span> type is simply
a typedef of <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiTObjectArray.htm">NiTObjectArray</a>&lt;NiSequenceDataPtr&gt;</span>.</p>

<a name="Callback_Objects"id="Callback_Objects"></a><p class="NDLRefHead2">Callback Objects</p>

<p>Activation callbacks are performed via a user-supplied
instance of the <span class=
"NDLSystemFont">NiSequenceData::ActivationCallback</span> class,
whose definition appears below.</p>

<pre>
class NIANIMATION_ENTRY ActivationCallback
{
public:
    virtual void ActivationChanged(<a href=
"NiControllerSequence.htm">NiControllerSequence</a>* pkSequence, <a href="NiControllerSequence.htm#NiAnimState">NiAnimState</a> eState) = 0;
};
</pre>

<p>The <span class="NDLSystemFont">ActivationChanged</span>
method is called whenever an associated <span class=
"NDLSystemFont"><a href=
"NiControllerSequence.htm">NiControllerSequence</a></span> object
is activated, reactivated, or deactivated. An <span class=
"NDLSystemFont">NiControllerSequence</span> is activated when a
sequence begins to play on an <span class=
"NDLSystemFont"><a href="NiControllerManager.htm">NiControllerManager</a></span>.
An <span class="NDLSystemFont">NiControllerSequence</span> is
deactivated when the active sequence is aborted or runs to
completion. An <span class=
"NDLSystemFont">NiControllerSequence</span> is reactivated when a
transition between sequences requires a new animation state for
the active sequence. For instance, an <span class=
"NDLSystemFont">NiControllerSequence</span> in the <span class=
"NDLSystemFont">ANIMATING</span> state might be reactivated to
the <span class="NDLSystemFont">TRANSSOURCE</span> state during a
<a href="NiControllerManager.htm#Blend_Transitions">blend
transition</a>. The <span class=
"NDLSystemFont">ActivationChanged</span> method receives a
pointer to the <span class=
"NDLSystemFont">NiControllerSequence</span> and its new animation
state. See <span class="NDLSystemFont"><a href=
"NiControllerSequence.htm#NiAnimState">NiAnimState</a></span> for
more details regarding these states.</p>

<p>An application that wishes to process callbacks must derive a
class from <span class="NDLSystemFont">ActivationCallback</span>
and override the pure virtual functions. Since the only members
of <span class="NDLSystemFont">ActivationCallback</span> are pure
virtual functions, it is safe to use multiple inheritance to
derive the subclass. Multiple <span class=
"NDLSystemFont">ActivationCallback</span> instances can be
specified for each <span class=
"NDLSystemFont">NiSequenceData</span>. Additionally, several of
these callbacks may be mapped to the same <span class=
"NDLSystemFont">NiControllerManager</span> object. Some internal
Gamebryo classes use these callbacks, so do not be surprised to
find callbacks already registered when you add your own, and take
care when removing callbacks that you only remove those that you
added.</p>

<p>An activation callback may chose to remove itself during the
activation function (Gamebryo's Actor Manager does so). However,
an activation function must not remove a different callback.
Doing so will result in missed or repeated callbacks which can
lead to crashes.
</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
