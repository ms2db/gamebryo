<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiControllerSequence</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>


<p class="NDLRefHeadClassTitle">NiControllerSequence</p>

<p class="NDLRefParentage">: public <span><a HREF="../../Reference/NiMain/NiObject.htm">NiObject</a></span></p>

<p class="NDLRefHeaderFile">&lt;NiControllerSequence.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>An <span class="NDLSystemFont">NiControllerSequence</span> 
 is temporarily created whenever an <span class="NDLSystemFont"><a HREF="NiSequenceData.htm">NiSequenceData</a></span> 
 is activated on an <span class="NDLSystemFont"><a HREF="NiControllerManager.htm">NiControllerManager</a></span>. 
 This <span class="NDLSystemFont">NiControllerSequence</span> represents 
 the active animation and maintains the required instance data to play 
 back the sequence on the given controller manager. The lifetime of the 
 <span class="NDLSystemFont">NiControllerSequence</span> matches that of 
 the active animation. Thus, the <span class="NDLSystemFont">NiControllerSequence</span> 
 is destroyed or <a href="NiControllerManager.htm#Sequence_Recycling">recycled</a> 
 shortly after the animation completes. The source <span class="NDLSystemFont">NiSequenceData</span> 
 remains associated with the <span class="NDLSystemFont">NiControllerManager</span> 
 after the <span class="NDLSystemFont">NiControllerSequence</span> is destroyed 
 or recycled.</p>

<p><span class="NDLSystemFont">NiControllerSequence</span> 
 objects are runtime entities that exist only during animation playback. 
 Unlike <span class="NDLSystemFont">NiSequenceData</span> objects, they cannot 
 be stored in KF files.</p>

<p>Each <span class="NDLSystemFont">NiControllerSequence</span> 
 is associated with a single <span class="NDLSystemFont">NiControllerManager</span>, 
 the manager on which the sequence is played. As such, the <span class="NDLSystemFont">NiControllerManager</span> 
 and <span class="NDLSystemFont"><a HREF="NiActorManager.htm">NiActorManager</a></span> 
 interfaces should be used to create <span class="NDLSystemFont">NiControllerSequence</span> 
 objects via sequence activation. The <span class="NDLSystemFont">NiControllerSequence</span> 
 class implements most of the actual animation transition functionality 
 of <span class="NDLSystemFont">NiControllerManager</span>, but contains 
 no interfaces to control it. All animation blending should be controlled 
 using the associated <span class="NDLSystemFont">NiControllerManager</span>.</p>

<p>An <span class="NDLSystemFont"><a href="NiScratchPad.htm">NiScratchPad</a></span> 
 object is associated with each <span class="NDLSystemFont">NiControllerSequence</span> 
 to store any instance-based data required by the sequence evaluators to 
 play the animation on the given character. Each <span class="NDLSystemFont">NiControllerSequence</span> 
 also owns an <span class="NDLSystemFont"><a HREF="NiPoseBuffer.htm">NiPoseBuffer</a></span> 
 to which the <span class="NDLSystemFont">NiControllerSequence</span> writes 
 its animated data for a given instant of time. Effectively, this pose 
 buffer contains a time-based snapshot (or pose) of the animated sequence.</p>

<p class="NDLRefHead1">Constructors</p>

<p>There are no supported constructors. <span class="NDLSystemFont">NiControllerSequence</span> 
 objects are created through sequence activation functions such as <span 
 class="NDLSystemFont"><a HREF="NiControllerManager.htm#Functions_for_activating_sequences">NiControllerManager::ActivateSequence</a></span> 
 and <span class="NDLSystemFont"><a HREF="NiActorManager.htm#Functions_to_set_target_animation">NiActorManager::SetTargetAnimation</a></span>.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p>Non-const member functions can be called on an actively 
 playing <span class="NDLSystemFont">NiControllerSequence</span>. The effect 
 of changes to attributes will not be seen until the next animation update.</p>

<p class="NDLRefHead2">General Member Functions</p>

<p class="NDLRefMemberFunction">const <a HREF="../../Reference/NiMain/NiFixedString.htm">NiFixedString</a>&amp; 
 GetName() const</p>

<p class="NDLRefMemberDescription">This function returns the name of the 
 source <span class="NDLSystemFont"><a href="NiSequenceData.htm">NiSequenceData</a></span> 
 from which the <span class="NDLSystemFont">NiControllerSequence</span> was 
 activated.</p>

<p class="NDLRefMemberFunction">unsigned int GetActivationID() const</p>

<p class="NDLRefMemberDescription">This function returns a &quot;unique&quot; 
 ID that can be used to differentiate between different instances of a 
 recycled sequence. Successive activations of the same sequence will have 
 different IDs, even when <a HREF="NiControllerManager.htm#Sequence_Recycling">sequence 
 recycling</a> is enabled.</p>

<p class="NDLRefMemberFunction"><a HREF="NiSequenceData.htm">NiSequenceData</a>* 
 GetSequenceData() const</p>

<p class="NDLRefMemberDescription">This function returns the source <span 
 class="NDLSystemFont"><a HREF="NiSequenceData.htm">NiSequenceData</a></span> 
 from which the <span class="NDLSystemFont">NiControllerSequence</span> was 
 activated.</p>

<p class="NDLRefMemberFunction"><a HREF="NiTextKeyExtraData.htm">NiTextKeyExtraData</a>* 
 GetTextKeys() const</p>

<p class="NDLRefMemberDescription">This function gets the pointer to the 
 text keys that are associated with the <span class="NDLSystemFont">NiControllerSequence</span>. 
 Upon activation, the <span class="NDLSystemFont">NiControllerSequence</span> 
 references the text keys within the source <span class="NDLSystemFont"><a 
 HREF="NiSequenceData.htm">NiSequenceData</a></span>.</p>

<p class="NDLRefMemberFunction">NiControllerSequence* GetTimeSyncSequence() 
 const</p>

<p class="NDLRefMemberDescription">This function returns the <span class="NDLSystemFont">NiControllerSequence</span> 
 to which this <span class="NDLSystemFont">NiControllerSequence</span> is 
 synced. Refer to the section on <a HREF="NiControllerManager.htm#Time_Synchronization">time 
 synchronization</a> for more details.</p>

<p class="NDLRefMemberFunction"><a HREF="NiPoseBuffer.htm">NiPoseBuffer</a>* 
 GetPoseBuffer() const</p>

<p class="NDLRefMemberDescription">This function returns the pose buffer 
 owned by the <span class="NDLSystemFont">NiControllerSequence</span>.</p>

<p class="NDLRefMemberFunction"><a HREF="NiScratchPad.htm">NiScratchPad</a>* 
 GetScratchPad() const</p>

<p class="NDLRefMemberDescription">This function returns the scratch pad 
 owned by the <span class="NDLSystemFont">NiControllerSequence</span>.</p>

<p class="NDLRefMemberFunction">void ResetSequence()</p>

<p class="NDLRefMemberDescription">This function resets the <span class="NDLSystemFont">NiControllerSequence</span> 
 to the beginning of the animation.</p>

<p class="NDLRefMemberFunction"><a href="NiControllerSequence.htm#NiAnimState">NiAnimState</a> 
 GetState() const</p>

<p class="NDLRefMemberDescription">This function returns the current animation 
 state for the <span class="NDLSystemFont">NiControllerSequence</span>.</p>

<p class="NDLRefMemberFunction">float GetOffset() const</p>

<p class="NDLRefMemberFunction">void SetOffset(float fOffset)</p>

<p class="NDLRefMemberDescription">These functions get and set the offset 
 time for the <span class="NDLSystemFont">NiControllerSequence</span>. The 
 offset time is added to the time passed into the <span class="NDLSystemFont">Update</span> 
 function before determining the actual time used to update sequence evaluators.</p>

<p class="NDLRefMemberFunction">int GetPriority() const</p>

<p class="NDLRefMemberDescription">This function returns the <a HREF="NiControllerManager.htm#Priorities">priority</a> 
 of the <span class="NDLSystemFont">NiControllerSequence</span>.</p>

<p class="NDLRefMemberFunction">float GetWeight() const</p>

<p class="NDLRefMemberFunction">void SetWeight(float fWeight)</p>

<p class="NDLRefMemberDescription">These functions get and set the <a HREF="NiControllerManager.htm#Weights">weight</a> 
 of the <span class="NDLSystemFont">NiControllerSequence</span>.</p>

<p class="NDLRefHead2">Functions for getting and setting sequence timing 
 information</p>

<p class="NDLRefMemberFunction"><a name=GetDuration></a>float GetDuration() 
 const</p>

<p class="NDLRefMemberDescription">This function returns the duration of 
 the <span class="NDLSystemFont">NiControllerSequence</span>. The first key 
 (i.e. begin key) in the sequence always starts with time 0.0. The last 
 key (i.e. end key) always resides at the time returned by <span class="NDLSystemFont">GetDuration</span>.</p>

<p class="NDLRefMemberFunction">float GetDurationDivFreq() const</p>

<p class="NDLRefMemberDescription">This function returns the duration of 
 the <span class="NDLSystemFont">NiControllerSequence</span> divided by the 
 frequency.</p>

<p class="NDLRefMemberFunction"><a HREF="../../Reference/NiMain/NiTimeController.htm#Enumerations">NiTimeController::CycleType</a> 
 GetCycleType() const</p>

<p class="NDLRefMemberFunction">bool SetCycleType(<a HREF="../../Reference/NiMain/NiTimeController.htm#Enumerations">NiTimeController::CycleType</a> 
 eType)</p>

<p class="NDLRefMemberDescription">These functions get and set the cycle 
 type for the <span class="NDLSystemFont">NiControllerSequence</span>. Only 
 cycle types of <span class="NDLSystemFont">LOOP</span> and <span class="NDLSystemFont">CLAMP</span> 
 are supported by <span class="NDLSystemFont">NiControllerSequence</span>. 
 <span class="NDLSystemFont">SetCycleType</span> will return false without 
 setting the cycle type if anything other than <span class="NDLSystemFont">LOOP</span> 
 or <span class="NDLSystemFont">CLAMP</span> is passed into it. Upon activation, 
 the <span class="NDLSystemFont">NiControllerSequence</span> copies the cycle 
 type of the source <span class="NDLSystemFont"><a HREF="NiSequenceData.htm">NiSequenceData</a></span>. 
 Changing the cycle type on the <span class="NDLSystemFont">NiControllerSequence</span> 
 does not affect the cycle type of the source <span class="NDLSystemFont">NiSequenceData</span>, 
 nor does it affect the cycle type of any other <span class="NDLSystemFont">NiControllerSequence</span>.</p>

<p class="NDLRefMemberFunction">float GetFrequency() const</p>

<p class="NDLRefMemberDescription">This function returns the frequency for 
 the <span class="NDLSystemFont">NiControllerSequence</span>. The frequency 
 defaults to the frequency of the source <span class="NDLSystemFont"><a HREF="NiSequenceData.htm">NiSequenceData</a></span> 
 unless directly specified at sequence activation. Once activated, the 
 frequency of an <span class="NDLSystemFont">NiControllerSquence</span> cannot 
 be modified.</p>

<p class="NDLRefMemberFunction">float TimeDivFreq(float fTime) const</p>

<p class="NDLRefMemberDescription">This is a convenience function which takes 
 a time, divides it by the frequency, and returns the value.</p>

<p class="NDLRefMemberFunction">float TimeMultFreq(float fTime) const</p>

<p class="NDLRefMemberDescription">This is a convenience function which takes 
 a time, multiplies it by the frequency, and returns the value.</p>

<p class="NDLRefMemberFunction"><a name=GetLastTime></a>float GetLastTime() 
 const</p>

<p class="NDLRefMemberDescription">This function returns the last time that 
 was passed into the <span class="NDLSystemFont">Update</span> function for 
 the <span class="NDLSystemFont">NiControllerSequence</span>.</p>

<p class="NDLRefMemberFunction"><a name=GetLastScaledTime></a>float GetLastScaledTime() 
 const</p>

<p class="NDLRefMemberDescription">This function returns the last local time 
 including adjustments for frequency, offset, cycle type, and duration 
 that was used by the <span class="NDLSystemFont">Update</span> function 
 for the <span class="NDLSystemFont">NiControllerSequence</span>. This time 
 should be interpreted in the local timeline of the <span class="NDLSystemFont">NiControllerSequence</span>. 
 Hence, <span class="NDLSystemFont">GetLastScaledTime</span> will return 
 a value in the range of 0.0 to <span class="NDLSystemFont"><a href="NiControllerSequence.htm#GetDuration">GetDuration</a></span>.</p>

<p class="NDLRefHead2">Functions for getting text key timing information</p>

<p class="NDLRefMemberFunction">float GetTimeAt(<a HREF="NiTextKeyMatch.htm">NiTextKeyMatch</a>* 
 pkMatchObject, float fCurrentTime = 0.0f)</p>

<p class="NDLRefMemberDescription">This function returns the next time after 
 <span class="NDLSystemFont">fCurrentTime</span> at which the text key matched 
 by <span class="NDLSystemFont">pkMatchObject</span> occurs. If <span class="NDLSystemFont">pkMatchObject</span> 
 does not find a match in the <span class="NDLSystemFont">NiControllerSequence</span>, 
 <span class="NDLSystemFont">INVALID_TIME</span> is returned. <span class="NDLSystemFont">fCurrentTime</span> 
 typically is the application's global animation time.</p>

<p class="NDLRefMemberFunction">float GetTimeAt(const <a HREF="../../Reference/NiMain/NiFixedString.htm">NiFixedString</a>&amp; 
 kTextKey, float fCurrentTime = 0.0f)</p>

<p class="NDLRefMemberDescription">This function returns the next time after 
 <span class="NDLSystemFont">fCurrentTime</span> at which the text key matching 
 the text <span class="NDLSystemFont">pcTextKey</span> will occur. If <span 
 class="NDLSystemFont">kTextKey</span> does not exist in the <span class="NDLSystemFont">NiControllerSequence</span>, 
 <span class="NDLSystemFont">INVALID_TIME</span> is returned. <span class="NDLSystemFont">fCurrentTime</span> 
 typically is the application's global animation time.</p>

<p class="NDLRefMemberFunction">float GetKeyTimeAt(<a HREF="NiTextKeyMatch.htm">NiTextKeyMatch</a>* 
 pkMatchObject) const</p>

<p class="NDLRefMemberDescription">This function returns the actual key time 
 of the text key matched by <span class="NDLSystemFont">pkMatchObject</span>. 
 This time is the time stored in the text key, unaltered by frequency modifications.</p>

<p class="NDLRefMemberFunction">float GetKeyTimeAt(const <a HREF="../../Reference/NiMain/NiFixedString.htm">NiFixedString</a>&amp; 
 kTextKey) const</p>

<p class="NDLRefMemberDescription">This function returns the actual key time 
 of the text key matching the text <span class="NDLSystemFont">kTextKey</span>. 
 This time is the time stored in the text key, unaltered by frequency modifications.</p>

<a name=Functions_dealing_with_evaluators></a><p class="NDLRefHead2">Functions Dealing with Evaluators</p>

<p class="NDLRefMemberFunction">unsigned int GetNumEvaluators() const</p>

<p class="NDLRefMemberDescription">This function returns the number of evaluators 
 in this sequence.</p>

<p class="NDLRefMemberFunction"><a href="NiEvaluator.htm">NiEvaluator</a>* 
 GetEvaluatorAt(unsigned int uiIndex) const</p>

<p class="NDLRefMemberDescription">This function returns the evaluator at 
 the specified index. The index passed into this function must be lower 
 than the number returned by <span class="NDLSystemFont">GetNumEvaluators</span>. 
 The evaluator array is kept packed, so the return value will not be <span 
 class="NDLSystemFont">NULL</span>.</p>

<p class="NDLRefMemberFunction">void DisableEvaluatorAt(unsigned int uiIndex, 
 bool bInvalidatePBData)</p>

<p class="NDLRefMemberDescription">This function disables the evaluator at 
 the specified index such that the evaluator in this active sequence no 
 longer outputs data to the associated pose buffer. The pose buffer locations 
 associated with the disabled evaluator are invalidated when <span class="NDLSystemFont">bInvalidatePBData</span> 
 is true. If invalidated, the corresponding data in the pose buffer no 
 longer contributes to the animated scene graph value. When <span class="NDLSystemFont">bInvalidatePBData</span> 
 is false the validity of the associated pose buffer locations remains 
 unchanged.</p>

<p class="NDLRefMemberFunction">void DisableEvaluatorChannelAt(unsigned int 
 uiEvaluatorIndex, unsigned int uiChannelIndex, bool bInvalidatePBData)</p>

<p class="NDLRefMemberDescription">This function disables the specified channel 
 on the specified evaluator such that the evaluator in this active sequence 
 no longer outputs data from the given channel to the associated pose buffer. 
 <span class="NDLSystemFont">uiChannelIndex</span> must be less than <span 
 class="NDLSystemFont"><a HREF="NiEvaluator.htm#EvalChannelIndex">EVALMAXCHANNELS</a></span>. 
 The pose buffer location associated with the disabled channel is invalidated 
 when <span class="NDLSystemFont">bInvalidatePBData</span> is true. If invalidated, 
 the corresponding data in the pose buffer no longer contributes to the 
 animated scene graph value. When <span class="NDLSystemFont">bInvalidatePBData</span> 
 is false the validity of the associated pose buffer location remains unchanged.</p>

<a name=Functions_related_to_callback_objects></a><p class="NDLRefHead2">Functions Related to Callback Objects</p>

<p>The following functions manage the callback objects 
 for an active sequence. Default callback objects are optionally registered 
 with each <span class="NDLSystemFont"><a HREF="NiSequenceData.htm">NiSequenceData</a></span>. 
 Upon sequence activation, these callback objects are added to the newly 
 created <span class="NDLSystemFont">NiControllerSequence</span> using a 
 simple matching scheme based on the associated <span class="NDLSystemFont"><a 
 HREF="NiControllerManager.htm">NiControllerManager</a></span>. See the 
 <a HREF="NiSequenceData.htm#Callback_Objects">notes</a> on callback objects 
 in <span class="NDLSystemFont">NiSequenceData</span> for more details.</p>

<p class="NDLRefMemberFunction">void AddActivationCallback(<a HREF="NiSequenceData.htm#Callback_Objects">NiSequenceData::ActivationCallback</a>* 
 pkCallback)</p>

<p class="NDLRefMemberDescription">Registers an additional callback object 
 for the <span class="NDLSystemFont">NiControllerSequence</span>. This function 
 does not affect callback objects on the source <span class="NDLSystemFont"><a 
 HREF="NiSequenceData.htm">NiSequenceData</a></span> nor any other <span 
 class="NDLSystemFont">NiControllerSequence</span> object.</p>

<p class="NDLRefMemberFunction">void RemoveActivationCallback(<a HREF="NiSequenceData.htm#Callback_Objects">NiSequenceData::ActivationCallback</a>* 
 pkCallback)</p>

<p class="NDLRefMemberDescription">Removes the given callback from the <span 
 class="NDLSystemFont">NiControllerSequence</span>. This function does not 
 affect callback objects on the source <span class="NDLSystemFont"><a HREF="NiSequenceData.htm">NiSequenceData</a></span> 
 nor any other <span class="NDLSystemFont">NiControllerSequence</span> object.</p>

<p class="NDLRefMemberFunction">unsigned int GetActivationCallbackCount() 
 const</p>

<p class="NDLRefMemberDescription">Get the number of callbacks associated 
 with the <span class="NDLSystemFont">NiControllerSequence</span>.</p>

<p class="NDLRefMemberFunction"><a HREF="NiSequenceData.htm#Callback_Objects">NiSequenceData::ActivationCallback</a>* 
 GetActivationCallbackAt(unsigned int uiIndex)</p>

<p class="NDLRefMemberDescription">Obtain a particular callback on the <span 
 class="NDLSystemFont">NiControllerSequence</span>. The <span class="NDLSystemFont">uiIndex</span> 
 parameter must be less than the value returned by <span class="NDLSystemFont">GetActivationCallbackCount</span>. 
 The array is kept packed, so the returned pointer will not be <span class="NDLSystemFont">NULL</span>.</p>

<a name=Notes></a><p class="NDLRefHead1">Notes</p>

<a name=NiControllerSequencePointerArray></a><p class="NDLRefHead2">NiControllerSequencePointerArray</p>

<p>The <span class="NDLSystemFont">NiControllerSequencePointerArray</span> 
 type is simply a typedef of <span class="NDLSystemFont"><a HREF="../../Reference/NiMain/NiTObjectArray.htm">NiTObjectArray</a>&lt;NiControllerSequencePtr&gt;</span>.</p>

<a name=NiAnimState></a><p class="NDLRefHead2">NiAnimState</p>

<p class="NDLRefHeaderFile">&lt;NiAnimState.h&gt;</p>

<p>The <span class="NDLSystemFont">NiAnimState</span> enumeration 
 represents the set of possible animation states for an <span class="NDLSystemFont">NiControllerSequence</span>. 
 During its lifetime an <span class="NDLSystemFont">NiControllerSequence</span> 
 object may transition through several states. For example, a sequence 
 may begin in the <span class="NDLSystemFont">EASEIN</span> state, transition 
 to <span class="NDLSystemFont">ANIMATING</span>, move to <span class="NDLSystemFont">EASEOUT</span>, 
 and finally end with the <span class="NDLSystemFont">INACTIVE</span> state.</p>

<!--(Table)=========================================================-->
<table>
	<thead>
		<tr>
			<th>NiAnimState</th>
			<th>Description</th>
		</tr>
	</thead>
	<tbody>
		<tr>						
       	<td><span class="NDLSystemFont">INACTIVE</span></td>
       	<td>The sequence has stopped animating and is no longer active.</td>
		</tr>
		<tr>
       	<td><span class="NDLSystemFont">ANIMATING</span></td>
       	<td>The sequence is active and animating. It is not transitioning to or from another sequence; nor is it easing in or out.</td>
		</tr>
		<tr>						
       	<td><span class="NDLSystemFont">EASEIN</span></td>
       	<td>The sequence is currently being <a href="NiControllerManager.htm#Easing_In_and_Out">eased 
 in</a></td>
		</tr>
		<tr>
       	<td><span class="NDLSystemFont">EASEOUT</span></td>
       	<td>The sequence is currently being <a href="NiControllerManager.htm#Easing_In_and_Out">eased 
 out</a></td>
		</tr>
		<tr>						
       	<td><span class="NDLSystemFont">TRANSSOURCE</span></td>
       	<td>The sequence is the source sequence for a transition.</td>
		</tr>
		<tr>
       	<td><span class="NDLSystemFont">TRANSDEST</span></td>
       	<td>The sequence is the destination sequence for a transition.</td>
		</tr>
		<tr>						
       	<td><span class="NDLSystemFont">MORPHSOURCE</span></td>
       	<td>The sequence is the source sequence for a morph transition.</td>
		</tr>
	</tbody>	
</table>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
