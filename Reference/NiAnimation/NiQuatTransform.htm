<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiQuatTransform</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>


<p class="NDLRefHeadClassTitle">NiQuatTransform</p>

<p class="NDLRefParentage">: public <a href="../../Reference/NiSystem/NiMemObject.htm"><span>NiMemObject</span></a></p>

<p class="NDLRefHeaderFile">&lt;NiQuatTransform.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiQuatTransform</span> 
 is a container object for a position, rotation, and scale. The position 
 is stored as an <a HREF="../../Reference/NiMain/NiPoint3.htm"><span 
 class="NDLSystemFont">NiPoint3</span></a>. The rotation is stored as an 
 <a HREF="../../Reference/NiMain/NiQuaternion.htm"><span class="NDLSystemFont">NiQuaternion</span></a>. 
 The scale is stored as a float. Any of these values could potentially 
 be invalid.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiQuatTransform()</p>

<p class="NDLRefMemberDescription">The constructor does not initialize the 
 data members so that fast construction of arrays is possible in situations 
 where the values will be filled in by application code. All values are 
 initially set to invalid.</p>

<p class="NDLRefMemberFunction">NiQuatTransform(const <a href="../../Reference/NiMain/NiPoint3.htm"><span 
 class="NDLSystemFont">NiPoint3</span></a>&amp; kTranslate, const <a href="../../Reference/NiMain/NiQuaternion.htm"><span 
 class="NDLSystemFont">NiQuaternion</span></a>&amp; kRotate, <span style="margin-left: 0px;">float 
 fScale)</span></p>

<p class="NDLRefMemberDescription">The constructor initializes the data members 
 with the arguments. All data members are set to be valid if this constructor 
 is used.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">const <a href="../../Reference/NiMain/NiPoint3.htm"><span 
 class="NDLSystemFont">NiPoint3</span></a>&amp; GetTranslate() const</p>

<p class="NDLRefMemberFunction">void SetTranslate(const <a href="../../Reference/NiMain/NiPoint3.htm"><span 
 class="NDLSystemFont">NiPoint3</span></a>&amp; kTranslate)</p>

<p class="NDLRefMemberDescription">These functions get and set the translation 
 value. Setting this value will automatically set the translation to valid.</p>

<p class="NDLRefMemberFunction">const <a href="../../Reference/NiMain/NiQuaternion.htm"><span 
 class="NDLSystemFont">NiQuaternion</span></a>&amp; GetRotate() const</p>

<p class="NDLRefMemberFunction">void SetRotate(const <a href="../../Reference/NiMain/NiQuaternion.htm"><span 
 class="NDLSystemFont">NiQuaternion</span></a>&amp; kRotate)</p>

<p class="NDLRefMemberFunction">void SetRotate(const <a HREF="../../Reference/NiMain/NiMatrix3.htm">NiMatrix3</a>&amp; 
 kRotate)</p>

<p class="NDLRefMemberDescription">These functions get and set the rotation 
 value. Setting this value will automatically set the rotation to valid. 
 The second <span class="NDLSystemFont">SetRotate</span> function listed 
 will convert the <span class="NDLSystemFont">NiMatrix3</span> to an <span 
 class="NDLSystemFont">NiQuaternion</span> before storing the value. It is 
 provided as a convenience function.</p>

<p class="NDLRefMemberFunction">float GetScale() const</p>

<p class="NDLRefMemberFunction">void SetScale(float fScale)</p>

<p class="NDLRefMemberDescription">These functions get and set the scale 
 value. Setting this value will automatically set the scale to valid.</p>

<p class="NDLRefMemberFunction">bool IsTranslateValid() const</p>

<p class="NDLRefMemberFunction">bool IsRotateValid() const</p>

<p class="NDLRefMemberFunction">bool IsScaleValid() const</p>

<p class="NDLRefMemberDescription">These functions allow the application 
 to query whether or not each of the individual values are valid.</p>

<p class="NDLRefMemberFunction">bool IsTransformInvalid() const</p>

<p class="NDLRefMemberDescription">This call is a quick test to allow the 
 application to query whether any of the values are valid. Calling this 
 function is faster than checking each value independently.</p>

<p class="NDLRefMemberFunction">void Invert(NiQuatTransform&amp; kDest) const</p>

<p class="NDLRefMemberDescription">This function inverts the transform values 
 treating each value independently.</p>

<p class="NDLRefMemberFunction">void HierInvert(NiQuatTransform&amp; kDest) 
 const</p>

<p class="NDLRefMemberDescription">This function inverts the transform values 
 assuming that the transform will exist in a hierarchy, storing the result 
 in <span class="NDLSystemFont">kDest</span>. The rotation and scale values 
 are used when determining the inverse translation value. After calling 
 this function, <span class="NDLSystemFont">kDest</span> will have a value 
 such that <span class="NDLSystemFont">kDest.HierApply(this)</span> is the 
 identity transform. This function has equivalent functionality to the 
 <span class="NDLSystemFont"><a HREF="../../Reference/NiMain/NiTransform.htm">NiTransform</a>::Invert</span> 
 function (except using quaternions).</p>

<p class="NDLRefMemberFunction">NiQuatTransform HierApply(const NiQuatTransform&amp; 
 kTransform) const</p>

<p class="NDLRefMemberDescription">This function applies the specified transform 
 to this transform and returns the result. It applies <span class="NDLSystemFont">kTransform</span> 
 assuming that the transforms reside in a hierarchy. The rotation and scale 
 are used when determining the translation value. This function returns 
 <span class="NDLSystemFont">this * kTransform</span> and has equivalent 
 functionality to the <span class="NDLSystemFont"><a HREF="../../Reference/NiMain/NiTransform.htm">NiTransform</a></span> 
 <span class="NDLSystemFont">*</span> operator (except using quaternions).</p>

<p class="NDLRefMemberFunction">void MakeInvalid()</p>

<p class="NDLRefMemberDescription">This call is a quick setter for all three 
 internal members to their invalid values.</p>

<p class="NDLRefHead1">Operators</p>

<p class="NDLRefMemberFunction">bool operator==(const NiQuatTransform&amp; 
 kTransform) const</p>

<p class="NDLRefMemberDescription">This operator is the exact equality operator.</p>

<p class="NDLRefMemberFunction">bool operator!=(const NiQuatTransform&amp; 
 kTransform) const</p>

<p class="NDLRefMemberDescription">This operator is the exact inequality 
 operator.</p>

<p class="NDLRefMemberFunction">NiQuatTransform operator*(const NiQuatTransform&amp; 
 kTransform) const</p>

<p class="NDLRefMemberDescription">This operator performs a component-wise 
 multiply of this transform's values with those of kTransform. The scales 
 and rotations are multiplied, but the translations are added. Each value 
 is treated independently.</p>

<p class="NDLRefMemberFunction"><a href="../NiMain/NiPoint3.htm">NiPoint3</a>
 operator*(const NiPoint3&amp; kPosition) const</p>

<p class="NDLRefMemberDescription">This operator applies the transform to the given
 point and returns the result.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
