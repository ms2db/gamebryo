<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiBlendInterpolator</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiBlendInterpolator</p>

<p class="NDLRefParentage">: public <a href=
"NiInterpolator.htm">NiInterpolator</a></p>

<p class="NDLRefHeaderFile">&lt;NiBlendInterpolator.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiBlendInterpolator</span> is an
abstract base class for all <a href=
"NiInterpolator.htm"><span class=
"NDLSystemFont">NiInterpolators</span></a> that blend the results
of sub-interpolators together to compute a final weighted value.
Blend interpolators do not compute the time for their
sub-interpolators. Note that some interpolators require time to
be within their key ranges or they will crash. External objects
can manage time for the sub-interpolators using the <span class=
"NDLSystemFont">GetTime</span>/<span class=
"NDLSystemFont">SetTime</span> interfaces.</p>

<p>The final weighted value is determined by several factors.
Generally, only sub-interpolators sharing the highest weighted
priority are taken into account when blending. When the existing
animations are at a lower priority than the new animation, the
ease spinner is used to smoothly blend into the higher priority
animation. Finally, any sub-interpolators whose weights are less
than the threshold are not added to the blend.</p>

<p>Also note that <span class=
"NDLSystemFont">NiBlendInterpolators</span> do not stream their
sub-interpolators when the <span class=
"NDLSystemFont">bManagerControlled</span> flag is true, they are
instead streamed by their parent <a href=
"NiControllerSequence.htm"><span class=
"NDLSystemFont">NiControllerSequence</span></a>.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberDescription">This is an abstract base class
and as such has no public constructors.</p>

<p class="NDLRefHead1">Virtual Function Overrides</p>

<p class="NDLRefMemberFunction">virtual void Collapse()</p>

<p class="NDLRefMemberDescription">Overridden from <span class=
"NDLSystemFont"><a href=
"NiInterpolator.htm#Collapse">NiInterpolator</a></span>. Calls
<span class="NDLSystemFont">Collapse</span> on each of the
sub-interpolators.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">unsigned char GetArraySize()
const</p>

<p class="NDLRefMemberDescription">This function returns the size
of the interpolator array. This size is the number of contiguous
elements that must be iterated over to find all non-null
interpolators. This number may be significantly larger than the
number of non-<span class="NDLSystemFont">NULL</span>
interpolators (due to the existence of <span class=
"NDLSystemFont">NULL</span> interpolators).</p>

<p class="NDLRefMemberFunction"><a href=
"NiInterpolator.htm">NiInterpolator</a>* GetInterpolator(unsigned
char ucIndex = 0) const</p>

<p class="NDLRefMemberFunction">void SetInterpolator(<a href=
"NiInterpolator.htm">NiInterpolator</a>* pkInterpolator, unsigned
char ucIndex = 0)</p>

<p class="NDLRefMemberDescription">These functions get and set an
<span class="NDLSystemFont">NiInterpolator</span> at the
specified index.</p>

<p class="NDLRefMemberFunction">float GetWeight(unsigned char
ucIndex = 0) const</p>

<p class="NDLRefMemberFunction">void SetWeight(float fWeight,
unsigned char ucIndex = 0)</p>

<p class="NDLRefMemberDescription">These functions get and set
the weight that the <span class="NDLSystemFont"><a href=
"NiInterpolator.htm">NiInterpolator</a></span> at the specified
index will contribute to the final computed value.</p>

<p class="NDLRefMemberFunction">char GetPriority(unsigned char
ucIndex = 0) const</p>

<p class="NDLRefMemberFunction">void SetPriority(char cPriority,
unsigned char ucIndex = 0)</p>

<p class="NDLRefMemberDescription">These functions get and set
the priority of the <span class="NDLSystemFont"><a href=
"NiInterpolator.htm">NiInterpolator</a></span> at the specified
index. Priority is used to group interpolators internally. All
<span class="NDLSystemFont">NiInterpolators</span> at the same
priority are blended together. The highest priority weighted
final value and the next highest priority weighted final value
are blended together using the ease spinner.</p>

<p class="NDLRefMemberFunction">float GetEaseSpinner(unsigned
char ucIndex = 0) const</p>

<p class="NDLRefMemberFunction">void SetEaseSpinner(float
fEaseSpinner, unsigned char ucIndex = 0)</p>

<p class="NDLRefMemberDescription">These functions get and set
the value of the ease spinner for the <span class=
"NDLSystemFont"><a href=
"NiInterpolator.htm">NiInterpolator</a></span> at the specified
index. The ease spinners for each <span class=
"NDLSystemFont">NiInterpolator</span> of the highest priority are
summed together to choose the highest ease spinner value. The
ease spinner value is then used to blend the values of the
highest and next-highest priority levels.</p>

<p class="NDLRefMemberFunction">float GetTime(unsigned char
ucIndex = 0) const</p>

<p class="NDLRefMemberFunction">bool SetTime(float fTime,
unsigned char ucIndex = 0)</p>

<p class="NDLRefMemberDescription">These functions get and set
the time for the <span class="NDLSystemFont"><a href=
"NiInterpolator.htm">NiInterpolator</a></span> at the specified
index. This time value is the time that will be passed into the
interpolator's <span class="NDLSystemFont">Update</span>
method.</p>

<p class="NDLRefMemberFunction">bool
GetOnlyUseHighestWeight()</p>

<p class="NDLRefMemberFunction">void SetOnlyUseHighestWeight(bool
bOnlyUseHighestWeight)</p>

<p class="NDLRefMemberDescription">These functions get and set
whether or not the <span class=
"NDLSystemFont">NiBlendInterpolator</span> performs any blending
or just simply returns the value of the highest weighted
interpolator.</p>

<a name="AddInterpInfo" id=
"AddInterpInfo"></a><p class="NDLRefMemberFunction">virtual unsigned char
AddInterpInfo(NiInterpolator* pkInterpolator, float fWeight, char
cPriority = 0, float fEaseSpinner = 1.0f)</p>

<p class="NDLRefMemberDescription">This function adds an
<span class="NDLSystemFont"><a href=
"NiInterpolator.htm">NiInterpolator</a></span> with the specified
weight, priority, and ease value to this <span class=
"NDLSystemFont">NiBlendInterpolator</span>.</p>

<a name="RemoveInterpInfo" id=
"RemoveInterpInfo"></a><p class="NDLRefMemberFunction">virtual <a href=
"NiInterpolator.htm">NiInterpolatorPtr</a>
RemoveInterpInfo(unsigned char ucIndex)</p>

<p class="NDLRefMemberDescription">This function removes the
<span class="NDLSystemFont">NiInterpolator</span> at the
specified index from this <span class=
"NDLSystemFont">NiBlendInterpolator</span>. The removed
interpolator is then returned in a smart pointer.</p>

<p class="NDLRefMemberFunction">float GetWeightThreshold()
const</p>

<p class="NDLRefMemberFunction">void SetWeightThreshold(float
fWeightThreshold)</p>

<p class="NDLRefMemberDescription">These functions get and set
the weight threshold for the blend. If the normalized weight for
any <span class="NDLSystemFont"><a href=
"NiInterpolator.htm">NiInterpolator</a></span> falls below the
threshold, its values will not be considered during the blending
procedure.</p>

<p class="NDLRefHead1">Static Member Functions</p>

<p class="NDLRefMemberFunction">static unsigned char
GetArrayGrowBy() const</p>

<p class="NDLRefMemberFunction">static void
SetArrayGrowBy(unsigned char ucArrayGrowBy)</p>

<p class="NDLRefMemberDescription">These functions get and set
the growth factor for the array. When the application adds one
more interpolator than the currently allocated array size, the
<span class="NDLSystemFont">NiBlendInterpolator</span> will
allocate a larger array using the grow by factor to scale the
array size.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
