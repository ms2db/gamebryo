<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiAnimation Library Release Notes</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->

<!--(Begin Links)===================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>NiAnimation Library Release Notes</h1>

<p><a href="#Added_Features_and_Fixed_Bugs">Added Features, Changed Behavior, and Fixed Bugs</a></p>

<p><a href="#Known_Issues_and_Limitations">Known Issues and
Limitations</a></p>

<a name="Added_Features_and_Fixed_Bugs" id="Added_Features_and_Fixed_Bugs"></a><h2>Added Features, Changed Behavior, and Fixed Bugs</h2>

<h3>Gamebryo LightSpeed 3.2</h3>

<ul>
    <li><span class="NDLSystemFont"><a href="NiActorManager.htm">NiActorManager</a></span> now supports additive blending.  See the <a href="Animation_Blending_Overview.htm#AdditiveBlending">animation blending overview</a> for more details.</li>
    <li><span class="NDLSystemFont"><a href="NiActorManager.htm">NiActorManager</a></span> can now activate and deactivate layered sequences while they are easing in or easing out.  They will begin activating or deactivating from their current weights.</li>
    <li><span class="NDLSystemFont"><a href="NiActorManager.htm">NiActorManager</a></span> now supports pausing via a new <span class="NDLSystemFont">SetPaused</span> function.</li>
    <li>Chained transitions between sequences can now be interrupted by <span class="NDLSystemFont">SetTargetAnimation</span>.  The previous behavior was to wait until the chained transition was over before transitioning to the new target sequence.  Now, the actor will transition from the current sequence in the middle of the chain to the new target sequence immediately.</li>
    
    <li>A bug in the <span class="NDLSystemFont">
        <a href="NiActorManager.htm">NiActorManager::CloneOnlyAnimation</a></span> method
        that ignored the accumulation setting has been fixed, so clones created in this
        way now have the requested accumulation properties.</li>

    <li>A bug in <span class="NDLSystemFont"><a href="NiKFMTool.htm">NiKFMTool</a></span>
        that caused a crash when a KFM file failed to load has been fixed.
        This will not prevent a crash due to corrupted KFM files in all cases,
        but it will handle the situation in which the file has a mangled
        header or missing header.</li>
        
    <li>Added an <span class="NDLSystemFont">
        <a href="NiQuatTransform.htm">NiQuatTransform::operator*</a></span>
        method to transform a position by a quaternion-based transform.
    </li>
</ul>

<h3>Gamebryo LightSpeed 3.1</h3>

<ul>
    <li>A bug in the <span class="NDLSystemFont">
    <a href="NiPathEvaluator.htm">NiPathEvaluator</a></span> and
    <span class="NDLSystemFont"><a href="NiPathInterpolator.htm">NiPathInterpolator</a></span>
    classes that caused incorrect orientation of cloned objects has been fixed.
    </li>

    <li><span class="NDLSystemFont"><a href="NiMorphWeightsController.htm">NiMorphWeightsController</a></span> will no longer assert if it is used programatically, outside of the context of an <span class="NDLSystemFont"><a href="NiControllerManager.htm">NiControllerManager</a></span>.

    <li><span class="NDLSystemFont"><a href="NiKFMTool.htm">NiKFMTool</a></span> has a new
    <span class="NDLSystemFont">LoadFromStream</span> function to facilitate background loading
    of KFMs.
    </li>

    <li>Various <span class="NDLSystemFont"><a href="NiActorManager.htm">NiActorManager</a></span>
    functions that take <span class="NDLSystemFont">NiAVObject</span> type arguments have been
    made robust to those arguments being NULL. The use of a <span class="NDLSystemFont">NULL</span>
    scene graph object may no longer assert, although obviously there is nothing to animate in
    such situations.
    </li>

    <li>Fixed a bug in
    <span class="NDLSystemFont"><a href="NiFlipController.htm">NiFlipController</a></span> where
    the wrong texture would be used after the first loop of a sequence and an assert would occur.
    </li>

    <li>Fixed a bug where the activation callback for an
       <span class="NDLSystemFont"><a href="NiSequenceData.htm">NiSequenceData</a></span> object
       was not called if added while the sequence was active, or was still called if the callback
       was removed while the sequence was active.
    </li>

    <li>Fixed a bug where an
       <span class="NDLSystemFont"><a href="NiControllerSequence.htm">NiControllerSequence</a>
       </span> object would cause a crash during sequence deactivation when there were multiple
       activation callbacks and one was removed during the callback itself. The fix reversed the
       order in which activation callbacks are invoked on deactivation.
</ul>

<h3>Gamebryo LightSpeed 3.0</h3>

<ul>

    <li>The text key callback system is now much more robust than in previous versions.  Text key callbacks for <a href="../NiAnimation/NiActorManager.htm">NiActorManager</a> are now thrown during all transitions, such as when a sequence is easing in or easing out.  This change also fixes the bug where keys which had the same text or which were very close to each other in time would be missed.</li>

    <li>Immediate blends are now more consistent with other transition types.  In 3.0, all immediate transitions now start at the time passed into the next <span class="NDLSystemFont">Update</span> call after <span class="NDLSystemFont">SetTargetAnimation</span>.  This is a change from 2.6, where immediate blend transitions (but not crossfades or morphs) would start at the time passed into the previous <span class="NDLSystemFont">Update</span> call.</li>

    <li>Fixed bug in <span class="NDLSystemFont">NiPathEvaluator</span> where the positions of inactive evaluators were using uninitialized values.

    <li>Fixed various issues in <span class="NDLSystemFont">NiActorComponent</span> where the method <span class="NDLSystemFont">GetSequenceCount</span> was
        erroneously called instead of <span class="NDLSystemFont">GetSequenceDataCount</span>. This would have caused any
        number of side effects, some of which were seen in tools. For example, in Scene
        Designer, UI would indicate that there were zero sequence tags which was clearly
        wrong.</li>

    <li>Scale values computed for  <span class="NDLSystemFont">NiMultiTargetPoseController</span> and
         <span class="NDLSystemFont">NiTransformController</span> are now clamped to 0
        to prevent negative scale asserts which could occur if an animation curve with a
        target of 0 overshot.</li></ul>

<h3>Gamebryo 2.6</h3>

<ul>
    <li>KFM files now use the NIF version rather than maintaining
    their own independent version.</li>

    <li>Refactored the storage and playback of sequence animation
    to reduce the memory footprint when sequences are shared by
    multiple characters. Gamebryo 2.6 utilizes two classes to
    represent animated sequences: <span class=
    "NDLSystemFont"><a href=
    "../NiAnimation/NiSequenceData.htm">NiSequenceData</a></span>
    and <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiControllerSequence.htm">NiControllerSequence</a></span>.
    <span class="NDLSystemFont">NiSequenceData</span> objects
    contain the shareable, heavyweight data of exported animation
    sequences saved in KF files. <span class=
    "NDLSystemFont">NiControllerSequence</span> objects are
    temporary runtime entities created upon sequence activation.
    These lighter weight objects maintain instance-based state to
    play back the animated sequence on a particular character,
    and are destroyed or <a href=
    "../NiAnimation/NiControllerManager.htm#Sequence_Recycling">recycled</a>
    shortly after the active sequence runs to completion. Older
    versions of Gamebryo utilized a single class, also named
    <span class="NDLSystemFont">NiControllerSequence</span>,
    which performed the composite duties of the new <span class=
    "NDLSystemFont">NiSequenceData</span> and <span class=
    "NDLSystemFont">NiControllerSequence</span> classes. See this
    <a href=
    "../../Convert/Previous/NiAnimation_Conversion.htm#Separation_of_NiControllerSequence_into_two_classes">
    section</a> in the Conversion Guide for details.</li>

    <li>Improved the runtime performance of sequence-based
    animation. Sequence animation now utilizes <span class=
    "NDLSystemFont"><a href=
    "../NiAnimation/NiEvaluator.htm">NiEvaluator</a></span>
    objects instead of <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiInterpolator.htm">NiInterpolator</a></span>
    objects to compute the animated data for a given time. Each
    active sequence (i.e. <span class=
    "NDLSystemFont">NiControllerSequence</span>) owns an
    <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiScratchPad.htm">NiScratchPad</a></span>
    which stores any instance-based data required by the
    evaluators to play the sequence on the character. Many
    evaluators cache their current animation curve segment in the
    scratch pad which allows them to reuse this localized data
    across successive update times thereby increasing runtime
    performance. <span class=
    "NDLSystemFont">NiInterpolator</span> and its derived classes
    are still available for non-sequence based animation. See
    this <a href=
    "../../Convert/Previous/NiAnimation_Conversion.htm#Improving_runtime_performance_via_sequence_evaluators">
    section</a> in the Conversion Guide for details.</li>

    <li>Increased the version of supported KF files to Gamebryo
    1.2 and later. <span class=
    "NDLSystemFont">NiControllerSequence</span> objects stored in
    KF files from Gamebryo 1.2 to 2.5 are automatically converted
    to the new <span class="NDLSystemFont">NiSequenceData</span>
    format during the loading process.</li>

    <li>Added <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiInterpolatorConverter.htm">NiInterpolatorConverter</a></span>
    which converts a specified <span class=
    "NDLSystemFont">NiInterpolator</span> to an equivalent
    <span class="NDLSystemFont">NiEvaluator</span>. Equivalency
    is determined by the contents of the animation channel and
    not necessarily the <a href=
    "../../Programmer/Object_Systems/Run_Time_Type_Information.htm">
    RTTI</a> of the specified interpolator. For instance, an
    <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiFloatInterpolator.htm">NiFloatInterpolator</a></span>
    containing posed animation data will be converted to an
    <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiConstFloatEvaluator.htm">NiConstFloatEvaluator</a></span>.
    <span class="NDLSystemFont">NiInterpolatorConverter</span> is
    utilized by the streaming system to convert sequences from
    older versions of Gamebryo to the new format. Additionally,
    <span class="NDLSystemFont"><a href=
    "../NiControllerExtractor/NiControllerExtractor.htm">NiControllerExtractor</a></span>
    relies upon <span class=
    "NDLSystemFont">NiInterpolatorConverter</span> to generate
    evaluators for <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiSequenceData.htm">NiSequenceData</a></span>
    objects.</li>

    <li>Consolidated the interpolator/controller network that
    transmits data from active animation sequences to associated
    scene graph targets. New classes and enumerations which
    support this change include <a href=
    "../NiAnimation/NiPoseBuffer.htm"><span class=
    "NDLSystemFont">NiPoseBuffer</span></a>, <span class=
    "NDLSystemFont"><a href=
    "../NiAnimation/NiPoseBinding.htm">NiPoseBinding</a></span>,
    <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiPoseBlender.htm">NiPoseBlender</a></span>,
    <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiMultiTargetPoseHandler.htm">NiMultiTargetPoseHandler</a></span>,
    <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiPoseBufferHandle.htm">NiPoseBufferHandle</a></span>,
    and <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiPoseBuffer.htm#NiPoseBufferChannelType">NiPoseBufferChannelType</a></span>.
    Each active sequence (i.e. <span class=
    "NDLSystemFont">NiControllerSequence</span>) owns an
    <span class="NDLSystemFont">NiPoseBuffer</span> to which the
    <span class="NDLSystemFont">NiControllerSequence</span>
    writes its animated data for a given instant of time.
    Effectively, this pose buffer contains a time-based snapshot
    (or pose) of the animated sequence. As a result, a large
    network of narrow data pipes has been replaced by a smaller
    system of wide data pipes. This change means <a href=
    "../NiAnimation/NiBlendInterpolator.htm">blend
    interpolators</a> and <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiTransformController.htm">NiTransformController</a></span>
    objects are no longer utilized for sequence-based animation.
    Refer to the <a href=
    "../NiAnimation/NiControllerManager.htm">Overview of
    NiControllerManager</a> for more details regarding the pose
    buffer system.</li>

    <li>Increased the role of <span class=
    "NDLSystemFont"><a href="../NiAnimation/NiControllerManager.htm">
    NiControllerManager</a></span> in handling sequence
    animation. In particular, <span class=
    "NDLSystemFont">NiControllerManager::Update</span> now forces
    the evaluators within each active sequence to compute their
    latest values, blends this data from multiple active
    sequences, propagates the composite result to the appropriate
    scene graph targets, and shuts down any active sequences
    which have now completed. <span class=
    "NDLSystemFont">NiControllerManager</span> maintains several
    helper objects to assist with this task including an
    <span class="NDLSystemFont">NiPoseBinding</span>,
    <span class="NDLSystemFont">NiPoseBlender</span>,
    <span class="NDLSystemFont">NiMultiTargetPoseHandler</span>,
    and <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiSkinningLODController.htm">NiSkinningLODController</a></span>.
    See the <a href=
    "../NiAnimation/NiControllerManager.htm">Overview of
    NiControllerManager</a> for a synopsis of the pose buffer
    system.</li>

    <li>Eliminated some quirky behavior in the priority/weight
    sequence blending algorithm, particularly when operating on
    sequences with an effective weight of 0.0 where the effective
    weight is defined as the sequence weight times the local
    spinner value (i.e. ease in or out). In some circumstances
    the previous implementation assigned normalized weights of
    0.0 when all sequences at a given priority had a combined
    effective weight of 0.0. The new, improved algorithm
    normalizes the effective weights at each priority level
    before blending with sequences at other priorities. Now, when
    all sequences at a given priority on a particular bone have
    an effective weight of 0.0, the normalized weight is evenly
    distributed across those sequences. For example, if four
    sequences have an effective weight of 0.0 at priority 1, each
    receives a normalized weight of 0.25 before blending with
    sequences at other priorities. As a side effect, this
    modification produces linear blending during transitions
    between sequences of different priorities. The previous
    implementation sometimes exhibited a quadratic-like blend
    during these transitions. Refer to this <a href=
    "../NiAnimation/Animation_Blending_Overview.htm#Overview_of_Sequence_Blending">
    section</a> in Animation Basics for additional information
    regarding sequence blending, including a description of the
    revised algorithm.</li>

    <li>Deprecated and removed <span class=
    "NDLSystemFont">NiBlendAccumTransformInterpolator</span>.
    This class became obsolete with the introduction of the
    <span class="NDLSystemFont">NiMultiTargetPoseHandler</span>
    class. <span class=
    "NDLSystemFont">NiMultiTargetPoseHandler</span> is now
    responsible for handling and maintaining the accumulation
    transform on animated characters.</li>

    <li>Improved the handling and robustness of the accumulation
    root and accumulation transform. Refer to this <a href=
    "../../Convert/Previous/NiAnimation_Conversion.htm#Improvements_in_transformation_accumulation">
    section</a> in the Conversion Guide for details.</li>

    <li>Fixed a bug in the transformation accumulation code that
    caused one frame of motion to be dropped from a sequence at
    the start or end of a transition depending on the
    circumstances.</li>

    <li>Modified the supported interface in <span class=
    "NDLSystemFont">NiControllerManager</span> to reflect the
    separation of sequence functionality between the shareable
    <span class="NDLSystemFont">NiSequenceData</span> and the
    instance-based <span class=
    "NDLSystemFont">NiControllerSequence</span> classes. See the
    <a href=
    "../../Convert/Previous/NiAnimation_Conversion.htm">NiAnimation
    Conversion</a> page for details.</li>

    <li>Augmented <span class=
    "NDLSystemFont">NiControllerManager</span> with the ability
    to <a href=
    "../NiAnimation/NiControllerManager.htm#Sequence_Recycling">recycle
    sequences</a>. Recycling is enabled by default to improve
    runtime performance and minimize memory fragmentation at the
    expense of a slightly larger memory footprint.</li>

    <li>Streamlined the behavior of activation callbacks during
    transitions between sequences. Previously, the functions
    which initiate sequence transitions such as <span class=
    "NDLSystemFont">NiControllerManager::CrossFade</span>,
    <span class="NDLSystemFont">BlendFromSequence</span>, and
    <span class="NDLSystemFont">Morph</span> triggered two or
    more callback events on the active source sequence. Now, the
    activation callback is executed just once on the source and
    destination sequences during these types of transitions, and
    the communicated state is the final state of each
    sequence.</li>

    <li>Fixed a bug in <span class=
    "NDLSystemFont">NiControllerManager::CrossFade</span>. Now,
    the priority of the source sequence is changed to match that
    of the destination sequence. Previously, the source priority
    was unchanged which produced visual popping when cross fading
    between sequences at different priorities.</li>

    <li>Fixed a bug in <span class=
    "NDLSystemFont">NiControllerManager::StopMorph</span> and
    <span class="NDLSystemFont">StopBlendFromSequence</span>.
    Now, these functions return false in some situations where
    the specified morph or blend transition could not be stopped.
    Previously, these functions always returned true, and simply
    asserted on failure.</li>

    <li>Removed the previously deprecated <span class=
    "NDLSystemFont">NiControllerManager::Sum</span>, <span class=
    "NDLSystemFont">SetSumWeight</span>, <span class=
    "NDLSystemFont">StopSum</span>, and <span class=
    "NDLSystemFont">StopBlendFromPose</span> functions. See the
    <a href=
    "../../Convert/Previous/NiAnimation_Conversion.htm">NiAnimation
    Conversion</a> page for details.</li>

    <li>Added the static function <span class=
    "NDLSystemFont">NiControllerManager::FindControllerManager</span>
    which locates an <span class=
    "NDLSystemFont">NiControllerManager</span> object in a scene
    graph branch.</li>

    <li>Fixed a bug in <span class=
    "NDLSystemFont">NiControllerSequence::GetTimeAt</span> and
    <span class=
    "NDLSystemFont">NiActorManager::GetNextTextKeyEventTime</span>.
    These functions were not taking into account the effects of
    time sync sequences which alter the mapping of local key
    times to global application times.</li>

    <li>Modified the supported interface in <span class=
    "NDLSystemFont">NiActorManager</span> to reflect the
    separation of sequence functionality between the shareable
    <span class="NDLSystemFont">NiSequenceData</span> and the
    instance-based <span class=
    "NDLSystemFont">NiControllerSequence</span> classes. See the
    <a href=
    "../../Convert/Previous/NiAnimation_Conversion.htm">NiAnimation
    Conversion</a> page for details.</li>

    <li>Added the <span class=
    "NDLSystemFont">ANIM_COMPLETED</span> event type to the
    <span class="NDLSystemFont">NiActorManager</span> callback
    system. When registered appropriately this event triggers the
    new <span class="NDLSystemFont">AnimCompleted</span> method
    in <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiActorManager.htm#Callback_Objects">NiActorManager::CallbackObject</a></span>
    to signal the completion of an active sequence. See this
    <a href=
    "../../Convert/Previous/NiAnimation_Conversion.htm#Extensions_to_the_animation_callback_systems">
    section</a> in the Conversion Guide for details.</li>

    <li><span class="NDLSystemFont">NiActorManager</span> now
    inherits from <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiSequenceData.htm#Callback_Objects">NiSequenceData::ActivationCallback</a></span>
    so it can receive notification when an active sequence has
    completed. <span class="NDLSystemFont">NiActorManager</span>
    uses this information to support its new <span class=
    "NDLSystemFont">ANIM_COMPLETED</span> event type.</li>

    <li>Added the <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiAnimationConstants.htm">NiAnimationConstants</a></span>
    class to provide access to constants shared by several
    classes in the animation system. Most often these constants
    are related to strings found within KF and NIF files.</li>

    <li>Added the <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiPrimeNumber.htm">NiPrimeNumber</a></span>
    class which contains several functions dealing with the first
    170 or so prime numbers. These functions are intended for use
    with algorithms such as hash functions which perform better
    when utilizing prime numbers of a given magnitude. The
    animation system makes use of such hash functions to locate
    tagged objects more quickly.</li>

    <li>Added a static function named <span class=
    "NDLSystemFont"><a href=
    "../NiAnimation/NiSkinningLODController.htm">NiSkinningLODController::FindSkinningLODController</a></span>
    which locates the first <span class=
    "NDLSystemFont">NiSkinningLODController</span> object in a
    specified scene graph branch.</li>

    <li>Added a suite of <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiInterpController.htm#UpdateValue">UpdateValue</a></span>
    functions to <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiInterpController.htm">NiInterpController</a></span>
    and its derived classes. These methods force the controller
    to push the specified value into the associated scene graph
    attribute. This particular interface is utilized by the
    sequence-based animation system.</li>

    <li>Added a constructor with no parameters to various
    concrete classes derived from <span class=
    "NDLSystemFont"><a href=
    "../NiAnimation/NiInterpolator.htm">NiInterpolator</a></span>
    as a performance optimization.</li>

    <li>Fixed the order of parameters in <span class=
    "NDLSystemFont"><a href=
    "../NiAnimation/NiBoolInterpolator.htm">NiBoolInterpolator</a>::ReplaceKeys</span>
    and <span class="NDLSystemFont">SetKeys</span> to match the
    order found in identically named methods in other
    interpolator classes.</li>

    <li>Extended <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiAnimationKey.htm">NiAnimationKey</a></span>
    and its derived classes with <span class=
    "NDLSystemFont">CubicCoefsFunction</span> and <span class=
    "NDLSystemFont">IsPosedFunction</span>. The former function
    is used during sequence animation to extract curve segments
    from sequence data. The latter function tests whether the key
    data is posed (i.e. constant).</li>

    <li>Enhanced the key-based interpolator <span class=
    "NDLSystemFont">Collapse</span> methods to collapse posed
    channels of type BEZKEY, EULERKEY, and TCBKEY. Previously,
    channels of these types were never collapsed when posed.</li>

    <li>Added a static function <span class=
    "NDLSystemFont">GenCubicCoefs</span> to <span class=
    "NDLSystemFont"><a href=
    "../NiAnimation/NiBoolKey.htm">NiBoolKey</a></span>,
    <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiColorKey.htm">NiColorKey</a></span>,
    <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiFloatKey.htm">NiFloatKey</a></span>,
    <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiPosKey.htm">NiPosKey</a></span>, and
    <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiRotKey.htm">NiRotKey</a></span>. Sequence
    evaluators utilize this function during animation playback to
    extract time-based curve segments from the sequence
    data.</li>

    <li>Added another <span class=
    "NDLSystemFont">NiRotKey::GenInterp</span> static function so
    the result can be written to a specified memory location
    instead of being returned by value.</li>

    <li>Fixed a bug in <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiEulerRotKey.htm">NiEulerRotKey</a>::Copy</span>.
    This function did not copy the key size values from the
    original channel.</li>

    <li>Fixed several bugs in <span class=
    "NDLSystemFont"><a href="../NiAnimation/NiQuatTransform.htm">NiQuatTransform</a>::HierApply</span>
    which affected the result when the scale and/or rotation of
    the specified transform was invalid, but the scale and/or
    rotation of the "this" transform was valid.</li>

    <li>Deprecated <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiMultiTargetTransformController.htm">NiMultiTargetTransformController</a></span>.
    This class became obsolete with the introduction of the
    <span class="NDLSystemFont">NiMultiTargetPoseHandler</span>
    class. <span class=
    "NDLSystemFont">NiMultiTargetPoseHandler</span> is now
    responsible for propagating transform values from animated
    sequences to the appropriate scene graph nodes. Code
    continues to exist which streams <span class=
    "NDLSystemFont">NiMultiTargetTransformController</span>
    objects that reside in older NIF files. <span class=
    "NDLSystemFont">NiMultiTargetTransformController</span>
    objects which exist in older NIF files are removed from the
    scene graph as the file is loaded.</li>
</ul>

<h3>Gamebryo 2.5</h3>

<ul>
    <li>Changed <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiLookAtInterpolator.htm">NiLookAtInterpolator</a></span>
    to no longer serialize its target's world transform because
    it is computed during Update.</li>

    <li><span class="NDLSystemFont"><a href=
    "../NiAnimation/NiBoneLODController.htm">NiBoneLODController</a></span>
    has been deprecated. <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiSkinningLODController.htm">NiSkinningLODController</a></span>
    replaces its functionality. This class no longer contains a
    global LOD flag, but the same functionality can be achieved
    by iterating over the entire scene and setting LOD
    directly.</li>

    <li>The following deprecated classes were removed from the
    <span class="NDLSystemFont">NiAnimation</span> library:
    <span class="NDLSystemFont">NiFloatController,
    NiLookAtController, NiPathController, and
    NiRollController.</span> All of these classes have been
    deprecated since Gamebryo 1.2. NIF files containing these
    classes will fail to load.</li>

    <li>Deprecated the classes <span class=
    "NDLSystemFont">NiGeomMorpherController</span>, <span class=
    "NDLSystemFont">NiMorphData</span> and <span class=
    "NDLSystemFont">NiGeomMorpherUpdateTask</span>. These classes
    have been superceded by the <span class=
    "NDLSystemFont"><a href=
    "../NiMesh/NiMorphMeshModifier.htm">NiMorphMeshModifier</a></span>
    class. Code continues to exist for the <span class=
    "NDLSystemFont">NiGeomMorpherController</span> and
    <span class="NDLSystemFont">NiMorphData</span> classes to
    facilitate conversion to <span class=
    "NDLSystemFont">NiMorphMeshModifier</span> objects.</li>

    <li><span class="NDLSystemFont"><a href=
    "../NiAnimation/NiControllerSequence.htm">NiControllerSequence</a></span>
    and <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiKFMTool.htm">NiKFMTool</a></span> both now
    use sequence names to identify sequences rather than their
    indices in the KF. The use of animation indices to identify
    sequences is deprecated. If the sequence name exists, then it
    must be used. This fixes a bug where sequences that were
    renamed or removed in the DCC tools would break existing KFM
    files. This bug still exists for older assets, but no longer
    exists for assets exported from Gamebryo 2.5.</li>
</ul>

<h3>Gamebryo 2.3.1</h3>

<ul>
    <li>Fixed a thread safety issue that could cause an assertion
    failure or crash when interpolating a single NiEulerRotKey in
    more than one thread simultaneously.</li>
</ul>

<h3>Gamebryo 2.3.0</h3>

<ul>
    <li>The following deprecated classes were removed from the
    <span class="NDLSystemFont">NiAnimation</span> library:
    <span class="NDLSystemFont">NiKeyframeManager</span>,
    <span class="NDLSystemFont">NiSequence</span>, <span class=
    "NDLSystemFont">NiSequenceStreamHelper</span>, <span class=
    "NDLSystemFont">NiUVController</span>, and <span class=
    "NDLSystemFont">NiUVData</span>. All of these classes had
    been deprecated since prior to Gamebryo 1.1. NIF files
    containing these classes will fail to load.</li>

    <li>Made <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiTextKeyMatch.htm">NiTextKeyMatch</a></span>
    destructor virtual.</li>

    <li>Fixed a bug with <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiActorManager.htm">NiActorManager</a></span>
    that could cause text keys very close to the start of a
    sequence to get missed if the update time became too large
    (due to floating point inaccuracy). Also changed <span class=
    "NDLSystemFont">NiActorManager</span> to issue callbacks that
    occur on the same frame they are registered (previously, such
    callbacks would not be issued until the next frame).</li>

    <li>Made public the <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiActorManager.htm">NiActorManager::LoadSequences</a></span>
    function.</li>

    <li>Added callbacks to <a href=
    "../NiAnimation/NiControllerSequence.htm"><span class=
    "NDLSystemFont">NiControllerSequence</span></a> to inform an
    application when the sequence is activated or de-activated.
    Also modified the class so that it stores the accumulation
    settings that were used on export from the art tools and
    allows applications to query such settings.</li>

    <li>Fixed a bug in <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiKFMTool.htm">NiKFMTool</a></span> loading
    code that was incorrectly converting relative paths when
    saving the KFM file to a separate directory, and another bug
    that occurred when a KFM file was saved to a disk volume
    other than the one it was loaded from.</li>

    <li>Changed <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiActorManager.htm#Callback_Objects">NiActorManager::CallbackObject</a></span>
    to no longer derive from <span class="NDLSystemFont"><a href=
    "../NiSystem/NiMemObject.htm">NiMemObject</a></span>. This
    allows it to be safely used as a pure virtual interface class
    with multiple inheritance. If your application was previously
    relying on the fact that <span class=
    "NDLSystemFont">NiActorManager::CallbackObject</span> derived
    from <span class="NDLSystemFont">NiMemObject</span>, you may
    need to modify your derived class to derive from <span class=
    "NDLSystemFont">NiMemObject</span> itself. See the <a href=
    "../../Convert/Previous/Converting_to_Gamebryo_2_3_Overview.htm#NiActorManager_CallbackObjectChanges">
    conversion notes</a> for more details.</li>

    <li>Fixed a bug in <span class=
    "NDLSystemFont">NiBlendAccumTransformInterpolator</span> that
    was causing it to drop one frame of motion from a sequence
    when a blend began but not when it ended. Also added a
    function to allow querying of the current accumulation
    transformation.</li>
</ul>

<h3>Gamebryo 2.2.1</h3>

<ul>
    <li>Fixed a problem in <a href=
    "../NiAnimation/NiTextureTransformController.htm"><span class="NDLSystemFont">
    NiTextureTransformController</span></a> so that pre-2.2
    assets with texture transforms on decal maps will work
    correctly.</li>
</ul>

<h3>Gamebryo 2.2.0</h3>

<ul>
    <li><span class="NDLSystemFont"><a href=
    "../NiAnimation/NiGeomMorpherTaskManager.htm">NiGeomMorpherTaskManager</a></span>
    has been removed. Its functionality was subsumed by
    <span class="NDLSystemFont"><a href=
    "../NiMain/NiParallelUpdateTaskManager.htm">NiParallelUpdateTaskManager</a></span>
    and flags in <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiGeomMorpherController.htm">NiGeomMorpherController</a></span>.</li>

    <li>Fixed a problem where some classes derived from
    <span class="NDLSystemFont"><a href=
    "../NiMain/NiTimeController.htm">NiTimeController</a></span>,
    namely <span class="NDLSystemFont">NiLookAtController</span>
    and <span class=
    "NDLSystemFont">NiD3DTimeSyncController</span>, were using
    data members that had been deprecated but not removed. This
    resulted in those controllers not correctly getting
    updated.</li>

    <li>Eliminated an unnecessary assertion in <span class=
    "NDLSystemFont"><a href=
    "../NiAnimation/NiBlendInterpolator.htm">NiBlendInterpolator</a></span>
    that was preventing the use of weights greater than 1.0.</li>

    <li>Fixed color interpolation bug in <span class=
    "NDLSystemFont"><a href=
    "../NiAnimation/NiBlendColorInterpolator.htm">NiBlendColorInterpolator</a></span>
    in which blending between colors would always result in an
    alpha value of greater than one.</li>
</ul>

<h3>Gamebryo 2.1.0</h3>

<ul>
    <li>Moved the storage of morph target weights from
    <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiMorphData.htm">NiMorphData</a></span> to
    <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiGeomMorpherController.htm">NiGeomMorpherController</a></span>
    to prevent cloned objects with <span class=
    "NDLSystemFont">NiGeomMorpherController</span> objects
    attached from all being animated whenever one of them
    is.</li>

    <li>Fixed a bug in <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiActorManager.htm">NiActorManager</a></span>
    that could cause callbacks to be made during the very next
    update after they had been unregistered. Callbacks will no
    longer be made after they have been unregistered.</li>

    <li>Fixed a bug in <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiActorManager.htm">NiActorManager</a></span>
    that was preventing <span class=
    "NDLSystemFont">ANIM_ACTIVATED</span> and <span class=
    "NDLSystemFont">ANIM_DEACTIVATED</span> events from being
    triggered for sequences activated with <span class=
    "NDLSystemFont">NiActorManager::ActivateSequence</span> and
    <span class=
    "NDLSystemFont">NiActorManager::DeactivateSequence</span>.
    These events are now triggered when the sequence is fully
    active (done easing in) or fully inactive (done easing out),
    respectively. The behavior for these events in relation to
    sequences activated by <span class=
    "NDLSystemFont">NiActorManager::SetTargetAnimation</span> has
    not changed.</li>

    <li>Fixed a bug in <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiControllerSequence.htm">NiControllerSequence</a></span>
    that could cause animation popping when
    activating/deactivating or transitioning between sequences
    with frequencies other than 1.0.</li>

    <li>Added a <span class=
    "NDLSystemFont">ForceNextUpdate</span> function to
    <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiInterpolator.htm">NiInterpolator</a></span>
    that can be used to force re-computation of the cached value
    when the <span class="NDLSystemFont">Update</span> function
    is called.</li>

    <li>A new class, <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiGeomMorpherTaskManager.htm">NiGeomMorpherTaskManager</a></span>,
    has been introduced. This manager can morph some objects in a
    second thread at update time rather than having the morphing
    operation occur immediately before display in the main
    thread.</li>
</ul>

<h3>Gamebryo 2.0.2</h3>

<ul>
    <li>The <span class="NDLSystemFont"><a href=
    "../NiCollision/NiUnionBV.htm">NiUnionBV</a></span> copy
    constructor was referencing the size value from the wrong
    array in a for loop, which could cause incorrect behavior.
    This behavior has been fixed.</li>

    <li><span class=
    "NDLSystemFont">NiBlendAccumTransformInterpolator::ReallocateArrays</span>
    was iterating over the new array size when copying data from
    the old array to the new array. Instead, the old array size
    is now stored and used for the iteration.</li>
</ul>

<h3><!--kadov_tag{{<ignored>}}-->Gamebryo
<!--kadov_tag{{</ignored>}}--> 2.0.0</h3>

<ul>
    <li>The <span class="NDLSystemFont">bLoadSequences</span>
    parameter of the <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiActorManager.htm">NiActorManager</a>::Create</span>
    function has changed in name to <span class=
    "NDLSystemFont">bLoadFilesFromDisk</span>. It now indicates
    whether or not to load NIF and KF files from disk during
    creation. <span class="NDLSystemFont">NiActorManager</span>
    used to always load the NIF file, and the <span class=
    "NDLSystemFont">bLoadSequences</span> parameter used to
    indicate whether or not to load KF files. Code using this
    parameter will compile without any errors, but be aware that
    the NIF file will no longer be automatically loaded from disk
    if the parameter is <span class="NDLSystemFont">false</span>.
    By specifying <span class="NDLSystemFont">false</span> for
    <span class="NDLSystemFont">bLoadFilesFromDisk</span>, it is
    possible to create an NiActorManager object that does not
    load anything from disk. The NIF root and all sequences can
    be specified after creation with the <span class=
    "NDLSystemFont">ReloadNIFFile</span>, <span class=
    "NDLSystemFont">ChangeNIFRoot</span>, <span class=
    "NDLSystemFont">LoadSequence</span>, and <span class=
    "NDLSystemFont">ChangeSequence</span> functions. <span class=
    "NDLSystemFont">ChangeNIFRoot</span> and <span class=
    "NDLSystemFont">ChangeSequence</span> are new and allow you
    to provide <span class="NDLSystemFont"><a href=
    "../NiMain/NiAVObject.htm">NiAVObject</a></span> and
    <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiControllerSequence.htm">NiControllerSequence</a></span>
    pointers directly rather than having to load those objects
    from an <span class="NDLSystemFont"><a href=
    "../NiMain/NiStream.htm">NiStream</a></span> object.</li>

    <li><span class="NDLSystemFont"><a href=
    "../NiAnimation/NiKFMTool.htm#Sequence">NiKFMTool::Sequence</a></span>
    no longer stores a sequence name. Instead, the sequence name
    should be retrieved from the <span class=
    "NDLSystemFont"><a href=
    "../NiAnimation/NiControllerSequence.htm">NiControllerSequence</a></span>
    object. This change was made to avoid mismatches between the
    name stored in the KFM file and the one stored in the
    <span class="NDLSystemFont">NiControllerSequence</span>. The
    interfaces for <span class=
    "NDLSystemFont">NiKFMTool::Sequence</span> have been changed
    to remove references to the sequence name. The number of
    constructor arguments has been changed, along with the
    <span class="NDLSystemFont">AddSequence</span> and
    <span class="NDLSystemFont">UpdateSequence</span> functions
    in <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiKFMTool.htm">NiKFMTool</a></span>.</li>

    <li>Changes were made to the way the <span class=
    "NDLSystemFont"><a href=
    "../NiAnimation/NiKFMTool.htm">NiKFMTool</a></span> class
    stores default transitions to reduce its memory footprint and
    the disk space requirements for KFM files. As a consequence
    of these changes, <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiKFMTool.htm#Transition">NiKFMTool::Transition</a></span>
    no longer stores its source and destination IDs or a pointer
    to the <span class="NDLSystemFont">NiKFMTool</span> object
    that owns it. The constructor and function interfaces for
    <span class="NDLSystemFont">NiKFMTool::Transition</span> were
    changed to reflect this. It is also no longer possible to set
    the stored type for the transition with the <span class=
    "NDLSystemFont">SetStoredType</span> function, which has been
    removed. The <span class=
    "NDLSystemFont">IsValidChainTransition</span> function in
    <span class="NDLSystemFont">NiKFMTool</span> was changed to
    now take source and destination IDs for the transition.</li>

    <li>Changed the <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiInterpController.htm">NiInterpController</a>::ResetTimeExtrema</span>
    function to not do anything if the controller's <span class=
    "NDLSystemFont">GetManagerControlled</span> flag is true.
    This is because the time extrema cannot be accurately
    determined if an <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiControllerManager.htm">NiControllerManager</a></span>
    is controlling the controller.</li>

    <li>Changed several animation interpolator classes to call
    the proper functions during extraction to prevent future
    bugs.</li>

    <li>Removed <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiControllerSequence.htm">NiControllerSequence</a></span><span class="NDLSystemFont">
    ::<!--kadov_tag{{<ignored>}}-->GetPhase
    <!--kadov_tag{{</ignored>}}--></span> and <span class=
    "NDLSystemFont"><a href=
    "../NiAnimation/NiControllerSequence.htm">NiControllerSequence</a></span><span class="NDLSystemFont">
    ::<!--kadov_tag{{<ignored>}}-->SetPhase
    <!--kadov_tag{{</ignored>}}--></span> functions. The concept
    of phase has been deprecated in this release. A user should
    use the offset time of a sequence to achieve similar effects
    that phase had provided.</li>

    <li>Fixed bug where <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiKeyBasedInterpolator.htm">NiKeyBasedInterpolator::GetAllocatedSize</a></span>
    did not properly account for <span class=
    "NDLSystemFont"><a href=
    "../NiAnimation/NiEulerRotKey.htm">NiEulerRotKey</a></span>
    size.</li>

    <li><a href="../NiAnimation/NiMorphData.htm"><span class=
    "NDLSystemFont">NiMorphData</span></a> was altered to use the
    Ni* primitive array streaming routines to avoid having
    per-platform logic in morph data for streaming in the morph
    vertices.</li>

    <li>Added <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiTextKeyMatch.htm">NiTextKeyMatch</a></span>
    class to animation system. This class is used by <span class=
    "NDLSystemFont"><a href=
    "../NiAnimation/NiActorManager.htm">NiActorManager</a>'s</span>
    callback system. Users can derive from <span class=
    "NDLSystemFont"><a href=
    "../NiAnimation/NiTextKeyMatch.htm">NiTextKeyMatch</a></span>
    if required flexibility is needed for performing more complex
    string parsing and comparison operations in text key
    matching. <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiActorManager.htm">NiActorManager</a></span>
    now provides versions of <span class=
    "NDLSystemFont">RegisterCallback</span>, <span class=
    "NDLSystemFont">UnregisterCallback</span>, and <span class=
    "NDLSystemFont">GetNextEventTime</span> that take a pointer
    to an <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiTextKeyMatch.htm">NiTextKeyMatch</a></span>
    object as a parameter. To facilitate these changes,
    <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiActorManager.htm">NiActorManager</a></span>'s
    <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiActorManager.htm#Callback_Objects">CallbackObject</a></span>
    class has been made pure virtual and <span class=
    "NDLSystemFont"><a href=
    "../NiAnimation/NiActorManager.htm#Callback_Objects">CallbackObject</a></span><span class="NDLSystemFont">
    ::TextKeyEvent</span> now takes a pointer to an <span class=
    "NDLSystemFont"><a href=
    "../NiAnimation/NiTextKeyMatch.htm">NiTextKeyMatch</a></span>
    object as well.</li>

    <li>Fixed a bug in <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiActorManager.htm">NiActorManager</a></span>
    that could prevent callbacks from being generated for events
    that happen within the first update after activating a
    sequence from scratch. Also fixed a bug that could otherwise
    prevent callbacks from being generated for the first frame of
    a sequence.</li>

    <li>Fixed a divide by zero error in <span class=
    "NDLSystemFont"><a href=
    "../NiAnimation/NiBlendInterpolator.htm">NiBlendInterpolator</a>::ComputeNormalizedWeights</span>.</li>

    <li>Fixed a bug in <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiControllerSequence.htm">NiControllerSequence</a></span>
    that could sometimes cause selective update flags to be set
    incorrectly when an <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiMultiTargetTransformController.htm">NiMultiTargetTransformController</a></span>
    is automatically added to the scene graph.</li>

    <li>Fixed a bug in <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiLookAtInterpolator.htm">NiLookAtInterpolator</a></span>
    extraction that could cause a crash upon sequence
    attachment.</li>

    <li>Added a function, <span class=
    "NDLSystemFont">RefreshControllerManager</span>, to
    <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiActorManager.htm">NiActorManager</a></span>
    that will refresh the internal pointer that the actor manager
    has to its <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiControllerManager.htm">NiControllerManager</a></span>.
    This function is useful when you programmatically change the
    <span class="NDLSystemFont">NiControllerManager</span> object
    to a different one and need the <span class=
    "NDLSystemFont">NiActorManager</span> to reflect that
    change.</li>

    <li>Fixed a crash bug in <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiGeomMorpherController.htm">NiGeomMorpherController</a></span>
    that could occur while cloning.</li>

    <li>Fixed a bug in <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiBlendInterpolator.htm">NiBlendInterpolator</a></span>
    that could cause priority level bookkeeping to be incorrect,
    resulting in visible animation pops instead of smooth
    blends.</li>

    <li>Fixed bugs in <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiActorManager.htm">NiActorManager</a>::ActivateSequence</span>
    and <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiActorManager.htm">NiActorManager</a>::DeactivateSequence</span>
    that could prevent callbacks for sequences activated via
    those functions.</li>

    <li>Eliminated a possible crash in <span class=
    "NDLSystemFont"><a href=
    "../NiAnimation/NiActorManager.htm">NiActorManager</a>::UnloadSequence</span>.</li>

    <li>In <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiActorManager.htm">NiActorManager</a></span>,
    a fix was made to <span class=
    "NDLSystemFont">ANIM_ACTIVATED</span> and <span class=
    "NDLSystemFont">ANIM_DEACTIVATED</span> event handling to
    handle edge cases when sequences are activated and
    deactivated in the absence of transitions.</li>

    <li>Fixed conversion of <span class=
    "NDLSystemFont">NiLookAtController</span> and <span class=
    "NDLSystemFont">NiRollController</span> objects from previous
    NIF versions.</li>

    <li>Implemented a fix for blending two sequences at a higher
    priority than a currently executing sequence. The blending
    between priorities did not work properly with previous
    releases due to a logic flaw in the code. Two sequence states
    were added to <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiControllerSequence.htm">NiControllerSequence</a></span>,
    <span class="NDLSystemFont">TRANSSOURCE</span> and
    <span class="NDLSystemFont">TRANSDEST</span>, that apply to
    all sequences that are in the process of a transition instead
    of <span class="NDLSystemFont">EASEIN</span> and <span class=
    "NDLSystemFont">EASEOUT</span>. The latter two states only
    apply now when sequences are actually easing in and out. This
    allows the animation system to treat these two situations
    differently and behave appropriately.</li>

    <li>Fixed <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiGeomMorpherController.htm">NiGeomMorpherController</a></span>
    to not set morph target weights to zero when the interpolator
    update fails.</li>

    <li>Added code to unregister streaming functions for
    <span class="NDLSystemFont">NiKeyframeData</span> to avoid a
    crash at <span class="NDLSystemFont">NiShutdown</span>.</li>

    <li>Changed <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiActorManager.htm">NiActorManager</a></span>
    to eliminate multiple callbacks generated from "end" text key
    events with clamped sequences.</li>

    <li>Made <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiStringPalette.htm">NiStringPalette</a></span>
    share strings properly to reduce KF file size. Also made
    sequences exported in the same KF file share string
    palettes.</li>

    <li>Fixed animation popping that was occurring when
    activating multiple sequences of a higher priority over a
    sequence at a lower priority. These fixes were made to
    <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiBlendInterpolator.htm">NiBlendInterpolator</a></span>.</li>
</ul>

<a name="Known_Issues_and_Limitations" id="Known_Issues_and_Limitations"></a><h2>Known Issues and Limitations</h2>

<h3>Gamebryo 2.5 Specific Notes</h3>

<ul>
    <li><a href=
    "../NiAnimation/NiMultiTargetTransformController.htm">NiMultiTargetTransformController</a>
    and <a href=
    "../NiAnimation/NiLookAtInterpolator.htm">NiLookAtInterpolator</a>
    objects whose targets are <a href=
    "../NiMain/NiGeometry.htm">NiGeometry</a> objects are not
    re-targeted by <a href=
    "../NiMesh/NiGeometryConverter.htm">NiGeometryConverter</a>
    to point to converted <a href=
    "../NiMesh/NiMesh.htm">NiMesh</a> objects.</li>
</ul>

<h3>All Releases</h3>

<ul>
    <li>The accumulation root for a character should not be used
    as a bone for skinning any vertices. This is because some of
    the transformations on that bone will be propagated to a
    NonAccum node, and the skinning will no longer look
    correct.</li>

    <li>NiEulerRotKeys have limitations in how they are used for
    rotation accumulation. If any axis is specified for rotation
    accumulation, then all axes will be accumulated.</li>

    <li>If a controller has keys that are looped in the source
    art package and the sequence time range does not include
    those keys, a single clamped value will be computed from the
    keys and used for that sequence, eliminating the looping
    behavior. A workaround for this is to manually loop the
    animation keyframes within the sequence time range. Specified
    types of controllers can also be excluded from extraction
    with the <a href=
    "../Tool_Plug_ins/Controller_Extractor.htm">Controller
    Extractor</a> plug-in. This problem also affects IFL files
    that are used with sequences. In the case of an IFL file, one
    workaround is to manually loop the listed frames in the IFL
    file itself so that the animation loops throughout the entire
    time range.</li>

    <li>Particle system emitters only use the highest weighted
    interpolator encountered by the <span class=
    "NDLSystemFont"><a href=
    "../NiAnimation/NiPoseBlender.htm">NiPoseBlender</a></span>
    or <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiBlendInterpolator.htm">NiBlendInterpolator</a>.</span>
    If the highest weighted interpolator does not have active
    keys, no particles will be emitted in that frame.</li>

    <li>A <span class="NDLSystemFont">NiActorManager</span> object cannot be cloned
    via the normal method if it has an invalid NIF root (NULL).  This can be run into
    if false is passed to the <span class="NDLSystemFont">Create</span> function to
    delay loading of the NIF file, in which case cloning will not be possible until
    <span class="NDLSystemFont">ChangeNIFRoot</span> has been called.
    However, the animations can be cloned even with a NULL root by using the
    <span class="NDLSystemFont">CloneOnlyAnimations</span> method.</li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
