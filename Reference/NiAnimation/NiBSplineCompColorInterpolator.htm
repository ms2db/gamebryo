<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiBSplineCompColorInterpolator</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiBSplineCompColorInterpolator</p>

<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="NiBSplineColorInterpolator.htm">NiBSplineColorInterpolator</a></span></p>

<p class="NDLRefHeaderFile">&lt;NiBSplineCompColorInterpolator.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiBSplineCompColorInterpolator 
 </span>provides all of the functionality of <a href="NiBSplineColorInterpolator.htm"><span 
 class="NDLSystemFont">NiBSplineColorInterpolator</span></a> with the additional 
 information required for using compact control points.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiBSplineCompColorInterpolator()</p>

<p class="NDLRefMemberDescription">This constructor creates an <span class="NDLSystemFont">NiBSplineCompColorInterpolator</span> 
 containing invalid data.</p>

<p class="NDLRefMemberFunction">NiBSplineCompColorInterpolator(<a HREF="NiBSplineData.htm">NiBSplineData</a>* 
 pkData, <a HREF="NiBSplineData.htm#Handle">NiBSplineData::Handle</a> kColorACPHandle 
 = NiBSplineData::INVALID_HANDLE, <a HREF="NiBSplineBasisData.htm">NiBSplineBasisData</a>* 
 pkBasisData = NULL)</p>

<p class="NDLRefMemberDescription">This constructor creates an <span class="NDLSystemFont">NiBSplineCompColorInterpolator 
 </span>with the specified data objects and control point handles.</p>

<p class="NDLRefMemberFunction">NiBSplineCompColorInterpolator(const <span 
 class="NDLSystemFont"><a href="../../Reference/NiMain/NiColorA.htm">NiColorA</a>&amp;</span> kPoseValue)</p>

<p class="NDLRefMemberDescription">This constructor creates an <span class="NDLSystemFont">NiBSplineCompColorInterpolator 
 </span>with the specified pose and no data object.</p>

<p class="NDLRefHead1">Virtual Function Overrides</p>

<p class="NDLRefMemberFunction">virtual bool Update(float fTime, <a href="../../Reference/NiMain/NiObjectNET.htm">NiObjectNET</a>* 
 pkInterpTarget, <span 
 class="NDLSystemFont"><a href="../../Reference/NiMain/NiColorA.htm">NiColorA</a></span>&amp; kValue) </p>

<p class="NDLRefMemberDescription">Overridden from <span class="NDLSystemFont"><a 
 href="NiInterpolator.htm#GetValue">NiInterpolator</a></span>. Returns 
 true to indicate that the returned <span 
 class="NDLSystemFont"><a href="../../Reference/NiMain/NiColorA.htm">NiColorA</a></span> 
 value is valid. </p>

<p class="NDLRefMemberFunction">virtual bool UsesCompressedControlPoints() 
 const</p>

<p class="NDLRefMemberDescription">This function returns true since this 
 class uses compressed control points.</p>

<p class="NDLRefHead1">Supported Member Functions </p>

<p class="NDLRefMemberFunction">float GetOffset(unsigned short usChannel) 
 const</p>

<p class="NDLRefMemberFunction">void SetOffset(float fOffset, unsigned short 
 usChannel)</p>

<p class="NDLRefMemberDescription">Get and set the offset used by the specified 
 channel of compressed control points. This value is used to decompress 
 the control points.</p>

<p class="NDLRefMemberFunction">float GetHalfRange(unsigned short usChannel) 
 const</p>

<p class="NDLRefMemberFunction">void SetHalfRange(float fHalfRange, unsigned 
 short usChannel)</p>

<p class="NDLRefMemberDescription">Get and set the range used by the specified 
 channel of compressed control points. This value is used to decompress 
 the control points.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
