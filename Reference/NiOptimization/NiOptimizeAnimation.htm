<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiOptimizeAnimation</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiOptimizeAnimation</p>

<p class="NDLRefHeaderFile">&lt;NiOptimizeAnimation.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiOptimizeAnimation</span>
contains static functions for use when reducing or optimizing
animation keys..</p>

<p class="NDLRefHead1">Static Member Functions</p>

<p class="NDLRefMemberFunction">static void
ReduceAnimationKeys(NiAVObject* pkObject, float fTolerance, float
fRotationTolerance);</p>

<p class="NDLRefMemberDescription">Reduces redundant animation
keys for all NiTransformControllers in the scene graph rooted at
pkObject. fTolerance and fRotationTolerance specifies a ratio of
how far off keys are allowed to be to still be considered
redundant.</p>

<p class="NDLRefMemberFunction">static void
ReduceAnimationKeys(NiTransformController* pkCtlr, float
fTolerance, float fRotationTolerance);</p>

<p class="NDLRefMemberDescription">Reduces redundant animation
keys for the specified NiTransformController fTolerance and
fRotationTolerance specifies a ratio of how far off keys are
allowed to be to still be considered redundant.</p>

<p class="NDLRefMemberFunction">static void
MergeXYZFloatKeys(NiFloatKey* pkXFloatKeys, NiFloatKey*
pkYFloatKeys, NiFloatKey* pkZFloatKeys, NiAnimationKey::KeyType
eXFloatKeyType, NiAnimationKey::KeyType eYFloatKeyType,
NiAnimationKey::KeyType eZFloatKeyType, unsigned int uiXNumKeys,
unsigned int uiYNumKeys, unsigned int uiZNumKeys, NiPosKey*&amp;
pkCompositeKeys, NiAnimationKey::KeyType&amp; eCompositeKeyType,
unsigned int&amp; uiNumCompositeKeys);</p>

<p class="NDLRefMemberDescription">Create a composite pos key
from individual X, Y, &amp; Z float keys. When possible, this
will create a Bezier Pos Key. The final result will be passed by
reference. Note that this is an expensive function.</p>

<p class="NDLRefMemberFunction">static void
CurveFitAnimationKeys(NiAVObject* pkObject,
NiAnimationKey::KeyType eTargetType, float fTolerance, float
fRotationTolerance);</p>

<p class="NDLRefMemberDescription">Converts animation keys for
all NiTransformControllers in the scene graph rooted at pkObject.
eType specifies what form the new keys should take. fTolerance
and fRotationTolerance specifies a ratio of how far off keys are
allowed to be to still be considered redundant.</p>

<p class="NDLRefMemberFunction">static void
CurveFitAnimationKeys(NiTransformController* pkCtlr,
NiAnimationKey::KeyType eTargetType, float fTolerance, float
fRotationTolerance);</p>

<p class="NDLRefMemberDescription">Converts animation keys for
the specified NiTransformControllers. eType specifies what form
the new keys should take. fTolerance and fRotationTolerance
specifies a ratio of how far off keys are allowed to be to still
be considered redundant.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
