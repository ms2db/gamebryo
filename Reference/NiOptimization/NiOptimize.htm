<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiOptimize</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>

<!--(Begin Body)================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiOptimize</p>

<p class="NDLRefHeaderFile">&lt;NiOptimize.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiOptimize</span> contains static functions that can be called on a
scene graph to optimize it in various ways.</p>

<p class="NDLRefHead1">Static Supported Member Functions</p>

<p class="NDLRefMemberFunction">static void RemoveDupProperties(<a href=
"../../Reference/NiMain/NiAVObject.htm">NiAVObject</a>* pkObject)</p>

<p class="NDLRefMemberDescription">Removes all the duplicate properties in the scene graph rooted
at <span class="NDLSystemFont">pkObject</span>. This function calls <span class=
"NDLSystemFont">RecursiveRemoveDupProperties</span> and <span class=
"NDLSystemFont">IsPropertyUnique</span> to achieve this.</p>

<p class="NDLRefMemberFunction">static bool CollectChildlessNodes(<a href=
"../../Reference/NiMain/NiNode.htm">NiNode</a>* pkNode, NiNodeArray&amp; apkNodes)</p>

<p class="NDLRefMemberDescription">Detects the presence of childless nodes that can be removed by
<span class="NDLSystemFont">RemoveChildlessNodes</span> in the scene graph rooted at <span class=
"NDLSystemFont">pkNode</span> and stores a pointer to each in <span class=
"NDLSystemFont">apkNodes</span>. The return value is <span class="NDLSystemFont">true</span> if
childless nodes exist and <span class="NDLSystemFont">false</span> otherwise.</p>

<p class="NDLRefMemberFunction">static void RemoveChildlessNodes(<a href=
"../../Reference/NiMain/NiNode.htm">NiNode</a>* pkNode)</p>

<p class="NDLRefMemberDescription">Removes all childless nodes in the scene graph rooted at
<span class="NDLSystemFont">pkNode</span>. A node will not be removed if it is singled out by
<span class="NDLSystemFont">BuildHashTable</span> or has a "<span class=
"NDLSystemFont">NiOptimizeKeep</span>" extra data tag.</p>

<p class="NDLRefMemberFunction">static bool CollectMultiMtlNodes(<a href=
"../../Reference/NiMain/NiNode.htm">NiNode</a>* pkNode, NiNodeArray&amp; apkNodes)</p>

<p class="NDLRefMemberDescription">Detects the presence of multi-material nodes that can be removed
by <span class="NDLSystemFont">RemoveMultiMtlNodes</span> in the scene graph rooted at <span class=
"NDLSystemFont">pkNode</span> and stores a pointer to each in <span class=
"NDLSystemFont">apkNodes</span>. The return value is <span class="NDLSystemFont">true</span> if
multi-material nodes exist and <span class="NDLSystemFont">false</span> otherwise.</p>

<p class="NDLRefMemberFunction">static void RemoveMultiMtlNodes(<a href=
"../../Reference/NiMain/NiNode.htm">NiNode</a>* pkNode)</p>

<p class="NDLRefMemberDescription">Recursively removes all multi-material nodes. A node will not be
removed if it is singled out by <span class="NDLSystemFont">BuildHashTable</span>, has an
"<span class="NDLSystemFont">NiOptimizeKeep</span>" extra data tag, or has any controllers attached
to it.</p>

<p class="NDLRefMemberFunction">static bool CollectSingleChildNodes(<a href=
"../../Reference/NiMain/NiNode.htm">NiNode</a>* pkNode, NiNodeArray&amp; apkNodes)</p>

<p class="NDLRefMemberDescription">Detects the presence of single-child nodes that can be removed
by <span class="NDLSystemFont">RemoveSingleChildNodes</span> in the scene graph rooted at
<span class="NDLSystemFont">pkNode</span> and stores a pointer to each in <span class=
"NDLSystemFont">apkNodes</span>. The return value is <span class="NDLSystemFont">true</span> if
single-child nodes exist and <span class="NDLSystemFont">false</span> otherwise.</p>

<p class="NDLRefMemberFunction">static void RemoveSingleChildNodes(<a href=
"../../Reference/NiMain/NiNode.htm">NiNode</a>* pkNode)</p>

<p class="NDLRefMemberDescription">Recursively removes all single-child nodes in the scene graph
rooted at <span class="NDLSystemFont">pkNode</span> of exact type <span class=
"NDLSystemFont">NiNode</span>, propagating their properties, transforms and names to the single
child. A node will not be removed if it is singled out by <span class=
"NDLSystemFont">BuildHashTable</span>, has an "<span class="NDLSystemFont">NiOptimizeKeep</span>"
extra data tag, has any controllers attached to it, or whose child has any controllers attached to
it. The name will not be propagated to a child that has an "<span class=
"NDLSystemFont">NiOptimizeKeep</span>" extra data tag.</p>

<p class="NDLRefMemberFunction">static void MergeSiblingNodes(<a href=
"../../Reference/NiMain/NiNode.htm">NiNode</a>* pkNode)</p>

<p class="NDLRefMemberDescription">Recursively merges sibling nodes in the scene graph rooted at
<span class="NDLSystemFont">pkNode</span>. A node will not be merged if it is singled out by
<span class="NDLSystemFont">BuildHashTable</span>, has an "<span class=
"NDLSystemFont">NiOptimizeKeep</span>" extra data tag, has any controllers attached to it, has an
ABV, has any extra data, or whose children have any controllers attached to them. Two nodes will be
merged if the following holds:</p>

<p class="NDLRefMemberDescription">The nodes are</p>

<div class="indent1">
    <ul>
        <li>sibling nodes</li>

        <li>of exact type <span class="NDLSystemFont">NiNode</span></li>
    </ul>
</div>

<p class="NDLRefMemberDescription">and they have</p>

<div class="indent1">
    <ul>
        <li>a parent of exact type <span class="NDLSystemFont">NiNode</span></li>

        <li>the same properties attached to them</li>

        <li>the same <span class="NDLSystemFont">AppCulled</span> flag value</li>
    </ul>
</div>

<p class="NDLRefMemberDescription">If two nodes can be merged and have different transforms on
them, the transforms for both nodes are pushed down to their children before they are merged.</p>

<p class="NDLRefMemberFunction">static void OptimizeMeshes(<a href=
"../../Reference/NiMain/NiNode.htm">NiNode</a>* pkNode, const float cfSizeModifier = 1.0f, const
float cfNormalModifier = 1.0f, const float cfPositionModifier = 1.0f, const NiUInt32
uiVertexCacheSize = 16)</p>

<p class="NDLRefMemberFunction">static bool OptimizeMeshes(<a href=
"../../Reference/NiMesh/NiMesh.htm">NiMesh</a>* pkMesh, const float cfSizeModifier = 1.0f, const
float cfNormalModifier = 1.0f, const float cfPositionModifier = 1.0f, const NiUInt32
uiVertexCacheSize = 16)</p>

<p class="NDLRefMemberDescription">The first function recurses through the scene graph rooted at
<span class="NDLSystemFont">pkNode</span>, calling the second function on all <span class=
"NDLSystemFont">NiMesh</span> objects. The second function calls <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMeshTools/NiMeshTools.htm#ViewIndependentOptimization">NiMeshTools::ViewIndependentOptimization</a></span>
and <span class="NDLSystemFont"><a href=
"../../Reference/NiMeshTools/NiMeshTools.htm#VertexCacheOptimization">NiMeshTools::VertexCacheOptimization</a></span>.
The arguments are passed directly through to the called functions. Add extra data with string value
"NiNoOptimizeMesh" to prevent any processing of a node or its children.</p>

<p class="NDLRefMemberFunction">static void MergeSiblingMeshes(<a href=
"../../Reference/NiMain/NiNode.htm">NiNode</a>* pkNode, bool bNoMergeOnAlpha)</p>

<p class="NDLRefMemberDescription">Recursively merges all sibling <span class=
"NDLSystemFont">NiMesh</span> objects in the scene graph rooted at <span class=
"NDLSystemFont">pkNode</span> except those singled out by <span class=
"NDLSystemFont">BuildHashTable</span> and those with an "<span class=
"NDLSystemFont">NiOptimizeKeep</span>" extra data tag. If <span class=
"NDLSystemFont">bNoMergeOnAlpha</span> is true, recursive merging does not occur below nodes with
an <span class="NDLSystemFont">NiAlphaProperty</span> attached when alpha blending is enabled or
sorters are allowed. Two <span class="NDLSystemFont">NiMesh</span> objects will be merged if the
following holds:</p>

<p class="NDLRefMemberDescription">They have</p>

<div class="indent1">
    <ul>
        <li>a common parent of exact type <span class="NDLSystemFont">NiNode</span>,</li>

        <li>the same number of properties,</li>

        <li>the same set of property pointers,</li>

        <li>the same number of texture sets,</li>

        <li>no time controllers attached,</li>

        <li>no cloned data streams,</li>

        <li>the same extra data,</li>

        <li>the same AppCulled flag.</li>
    </ul>
</div>

<p class="NDLRefMemberFunction">static void RemoveExtraUVSets(<a href=
"../../Reference/NiMain/NiAVObject.htm">NiAVObject</a>* pkObject)</p>

<p class="NDLRefMemberDescription">Removes all UV sets in geometry in the scene graph rooted at
<span class="NDLSystemFont">pkObject</span> that are not used by any <span class=
"NDLSystemFont">NiTexturingProperty</span> attached to the current or a higher node. If an object
has an <span class="NDLSystemFont">NiTexturingProperty</span> that has any shader maps defined,
this function does nothing for that object.</p>

<p class="NDLRefMemberFunction">static void RemoveUnnecessaryNormals(<a href=
"../../Reference/NiMain/NiAVObject.htm">NiAVObject</a>* pkObject)</p>

<p class="NDLRefMemberDescription">Recursively removes normals that are not needed from all
<span class="NDLSystemFont">NiMesh</span> objects in the scene graph rooted at <span class=
"NDLSystemFont">pkObject</span>. This function will NOT automatically remove all normals from
scenes that have no lights in them. If you want your geometry object to be exported with normals,
make sure that its material properties do not exclude lighting (i.e., a texture apply mode of
APPLY_REPLACE or a vertex color lighting mode of LIGHTING_E).</p>

<p class="NDLRefMemberFunction">static bool CollectUnnecessaryVisControllers(<a href=
"../../Reference/NiMain/NiAVObject.htm">NiAVObject</a>* pkObject, <a href=
"../../Reference/NiMain/NiTPrimitiveArray.htm">NiTPrimitiveArray</a>&lt;<a href=
"../../Reference/NiAnimation/NiVisController.htm">NiVisController</a>*&gt;&amp; apkCtlrs)</p>

<p class="NDLRefMemberDescription">Detects the presence of any <span class=
"NDLSystemFont">NiVisControllers</span> in the scene graph rooted at <span class=
"NDLSystemFont">pkObject</span> whose keys all have the same visibility data. Adds a pointer to
each offending controller to <span class="NDLSystemFont">apkCtlrs</span>. The return value is
<span class="NDLSystemFont">true</span> if any unnecessary <span class=
"NDLSystemFont">NiVisControllers</span> were found and <span class="NDLSystemFont">false</span>
otherwise.</p>

<p class="NDLRefMemberFunction">static void RemoveUnnecessaryVisControllers(<a href=
"../../Reference/NiMain/NiAVObject.htm">NiAVObject</a>* pkObject)</p>

<p class="NDLRefMemberDescription">Removes all <span class="NDLSystemFont">NiVisControllers</span>
in the scene graph rooted at <span class="NDLSystemFont">pkObject</span> whose keys all have the
same visibility data. If that data is not the same as the <span class=
"NDLSystemFont">AppCulled</span> flag value of <span class="NDLSystemFont">pkObject</span>,
<span class="NDLSystemFont">pkObject</span>'s <span class="NDLSystemFont">AppCulled</span> flag is
updated to reflect the visibility data.</p>

<p class="NDLRefMemberFunction">static void RemoveNames(<a href=
"../../Reference/NiMain/NiAVObject.htm">NiAVObject</a>* pkObject)</p>

<p class="NDLRefMemberDescription">Removes the name string from all objects and their material
properties in the scene graph rooted at <span class="NDLSystemFont">pkObject</span>.</p>

<p class="NDLRefMemberFunction">static void RemovePartialPaths(<a href=
"../NiMain/NiAVObject.htm">NiAVObject</a>* pkObject)</p>

<p class="NDLRefMemberDescription">Removes the partial path from the name string from all objects
in the scene graph rooted at <span class="NDLSystemFont">pkObject</span>.</p>

<p class="NDLRefMemberFunction">static void NameUnnamedObjects(<a href=
"../../Reference/NiMain/NiAVObject.htm">NiAVObject</a>* pkObject)</p>

<p class="NDLRefMemberDescription">Adds unique names to all objects that have none in the scene
graph rooted at <span class="NDLSystemFont">pkObject</span>.</p>

<p class="NDLRefMemberFunction">static bool CollectBadTexturingProps(<a href=
"../../Reference/NiMain/NiAVObject.htm">NiAVObject</a>* pkObject, <a href=
"../../Reference/NiMain/NiTMap.htm">NiTMap</a>&lt;<a href=
"../../Reference/NiMain/NiTexturingProperty.htm">NiTexturingProperty</a>*,bool&gt;&amp;
kBadProps)</p>

<p class="NDLRefMemberDescription">Detects the presence of <span class=
"NDLSystemFont">NiTexturingProperties</span> with no image data in the scene graph rooted at
<span class="NDLSystemFont">pkObject</span> and those that use a nonexistent set of texture
coordinates. Will ignore bad texturing properties on <span class=
"NDLSystemFont">NiPSParticleSystem</span> objects. Stores a pointer to each bad texturing property
in <span class="NDLSystemFont">kBadProps</span>. The return value is <span class=
"NDLSystemFont">true</span> if bad texturing properties are found and <span class=
"NDLSystemFont">false</span> otherwise.</p>

<p class="NDLRefMemberFunction">static void RemoveBadTexturingProps(<a href=
"../../Reference/NiMain/NiAVObject.htm">NiAVObject</a>* pkObject)</p>

<p class="NDLRefMemberDescription">Removes NiTexturingProperties with no image data in the scene
graph rooted at <span class="NDLSystemFont">pkObject</span> and those that use a nonexistent set of
texture coordinates. This function only removes bad texturing properties if they are directly
attached to the objects that use them (and aren't just inherited from ancestors). Will not remove
bad texturing properties on <span class="NDLSystemFont">NiPSParticleSystem</span> objects.</p>

<p class="NDLRefMemberFunction">static void RemoveUnnecessaryExtraData(<a href=
"../../Reference/NiMain/NiAVObject.htm">NiAVObject</a>* pkObject, bool bRemoveKeepTags)</p>

<p class="NDLRefMemberDescription">Removes extra data strings that are empty or that contain the
strings "<span class="NDLSystemFont">zMode</span>" or "<span class=
"NDLSystemFont">billboard</span>". If <span class="NDLSystemFont">bRemoveKeepTags</span> is true,
extra data strings that contain the strings "<span class="NDLSystemFont">NiOptimizeKeep</span>" and
"<span class="NDLSystemFont">sgoKeep</span>" are also removed.</p>

<p class="NDLRefMemberFunction">static void RemoveUnnecessaryLookAtControllers(<a href=
"../../Reference/NiMain/NiAVObject.htm">NiAVObject</a>* pkObject)</p>

<p class="NDLRefMemberDescription">Removes transform controllers with <span class=
"NDLSystemFont">NiLookAtInterpolator</span> objects in the scene graph rooted at <span class=
"NDLSystemFont">pkObject</span> if there are no transform controllers on either the target, the
<span class="NDLSystemFont">LookAt</span> of the controller, or above them in the scene graph.</p>

<p class="NDLRefMemberFunction">static void RemoveHiddenBoneMesh(<a href=
"../../Reference/NiMain/NiAVObject.htm">NiAVObject</a>* pkObject)</p>

<p class="NDLRefMemberDescription">Removes any <span class="NDLSystemFont">NiMesh</span> object in
the scene graph rooted at <span class="NDLSystemFont">pkObject</span> that is a child of a bone and
whose <span class="NDLSystemFont">AppCulled</span> flag is true.</p>

<p class="NDLRefMemberFunction">static void ReduceAnimationKeys(<a href=
"../../Reference/NiMain/NiAVObject.htm">NiAVObject</a>* pkObject, float fTolerance)</p>

<p class="NDLRefMemberFunction">static void ReduceAnimationKeys(NiTransformController* pkCtlr,
float fTolerance)</p>

<p class="NDLRefMemberDescription">Reduces redundant animation keys for all <span class=
"NDLSystemFont">NiTransformController</span> objects in the scene graph rooted at <span class=
"NDLSystemFont">pkObject</span> or in <span class="NDLSystemFont">pkCtlr</span>. <span class=
"NDLSystemFont">fTolerance</span> specifies a ratio of how far off a key is allowed to be from an
interpolation between the two keys on either side of it to still be considered redundant.</p>

<p class="NDLRefMemberFunction">static void SortByTexturingProp(<a href=
"../../Reference/NiMain/NiNode.htm">NiNode</a>* pkNode)</p>

<p class="NDLRefMemberDescription">Recursively sorts all the children of each node in the scene
graph rooted at <span class="NDLSystemFont">pkNode</span> by the address of the <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMain/NiTexturingProperty.htm">NiTexturingProperty</a></span> object present in
their property states. Children with no <span class="NDLSystemFont">NiTexturingProperty</span>
objects in their property state are sorted first.</p>

<p class="NDLRefMemberFunction">static bool CollectImproperlySizedTextures(<a href=
"../../Reference/NiMain/NiAVObject.htm">NiAVObject</a>* pkObject, <a href=
"../../Reference/NiMain/NiTMap.htm">NiTMap</a>&lt;<a href=
"../../Reference/NiMain/NiTexture.htm">NiTexture</a>*,bool&gt;&amp; kBadTex)</p>

<p class="NDLRefMemberDescription">Detects if there are any images in the scene graph rooted at
<span class="NDLSystemFont">pkObject</span> whose dimensions are not powers of two. A pointer to
each improperly sized texture is stored in <span class="NDLSystemFont">kBadTex</span>. The return
value is <span class="NDLSystemFont">true</span> if any improperly-sized textures are found and
<span class="NDLSystemFont">false</span> otherwise.</p>

<p class="NDLRefMemberFunction">static void OptimizeSkinData(<a href=
"../../Reference/NiMain/NiAVObject.htm">NiAVObject</a>* pkObject, bool bHardwareSkin, bool
bSoftwareSkin, unsigned int uiBonesPerPartition, bool bForcePalette)</p>

<p class="NDLRefMemberDescription">Optimizes skin data for all geometry objects in the scene graph
rooted at <span class="NDLSystemFont">pkObject</span>. This will create skin partitions if
<span class="NDLSystemFont">bHardwareSkin</span> is true and will retain software skinning info if
<span class="NDLSystemFont">bSoftwareSkin</span> is true. <span class=
"NDLSystemFont">uiBonesPerPartition</span> indicates how many bones should be placed in a
partition, and <span class="NDLSystemFont">bForcePalette</span> forces the skin partitions to use a
palette. This function calls <span class="NDLSystemFont"><a href=
"../../Reference/NiMeshTools/NiMeshTools.htm#MakeSubmeshesForGPUSkinning">NiMeshTools::MakeSubmeshesForGPUSkinning</a></span>
using these options.</p>

<p class="NDLRefMemberFunction">static void WeldSkin(<a href=
"../../Reference/NiMain/NiAVObject.htm">NiAVObject</a>* pkScene);</p>

<p class="NDLRefMemberDescription">Due to the strict limit on vertex-bone interactions when using
hardware-accelerated skinning, it is possible that the code that prepares a skinned object for
rendering on a platform that supports hardware-accelerated skinning can create a crack at an edge
shared by two triangles in two different objects. This function eliminates those cracks by making
sure that if any pair of vertices with equal bind-pose coordinates exists in two different objects
with equal world transforms, those two vertices will also have identical bone influences. A mesh
will not be welded if it has an <span class="NDLSystemFont">NiOptimizeKeep</span> extra data
tag.</p>

<p class="NDLRefMemberFunction">static void CleanUpAnimationKeys(<a href=
"../../Reference/NiMain/NiAVObject.htm">NiAVObject</a>* pkObject)</p>

<p class="NDLRefMemberDescription">Calls <span class=
"NDLSystemFont">GuaranteeKeysAtStartAndEnd</span> for every <span class=
"NDLSystemFont">NiTimeController</span> in the scene graph rooted at <span class=
"NDLSystemFont">pkObject</span>.</p>

<p class="NDLRefMemberFunction">static bool RemoveDegenerateTriangles(<a href=
"../../Reference/NiMesh/NiMesh.htm">NiMesh</a>* pkMesh);</p>

<p class="NDLRefMemberDescription">Removes degenerate triangles from the given indexed <span class=
"NDLSystemFont">NiMesh</span> object. Returns true if all triangles were degenerate. Note this
function should not be used on <span class="NDLSystemFont">NiPSParticleSystem</span> objects.</p>

<p class="NDLRefMemberFunction">static void RemoveDegenerateVertices(<a href=
"../../Reference/NiMesh/NiMesh.htm">NiMesh</a>* pkMesh, unsigned int* puiNewToOld = NULL);</p>

<p class="NDLRefMemberDescription">Remove degenerate vertices in the given <span class=
"NDLSystemFont">NiMesh</span> object. Note this function should not be used on <span class=
"NDLSystemFont">NiPSParticleSystem</span> objects. The <span class=
"NDLSystemFont">puiNewToOld</span> map is filled during execution with a mapping each removed
vertex to the vertex that now represents it.</p>

<p class="NDLRefMemberFunction">static bool RemoveLowInfluenceBones(<a href=
"../../Reference/NiMesh/NiMesh.htm">NiMesh</a>* pkMesh, float fMinInfluence);</p>

<p class="NDLRefMemberDescription">Remove bones that have almost no effect to shorten the necessary
bone list and improve partitioning behavior.</p>

<p class="NDLRefMemberFunction">static void OptimizeIndexBuffers(<a href=
"../../Reference/NiMain/NiNode.htm">NiNode</a>* pkNode);</p>

<p class="NDLRefMemberDescription">Looks at the vertices on the mesh to see if the index buffer can
be made using a smaller data type.</p>

<p class="NDLRefMemberFunction">static void RemoveAppCulledObjects(<a href=
"../../Reference/NiMain/NiAVObject.htm">NiAVObject</a>* pkObject);</p>

<p class="NDLRefMemberDescription">Remove AppCulled objects from the scene graph.</p>

<p class="NDLRefMemberFunction">static bool CloseTo(float fA, float fB, float fEpsilon =
ms_fEpsilon);</p>

<p class="NDLRefMemberDescription">Determines if float <span class="NDLSystemFont">fA</span> is
within <span class="NDLSystemFont">fEpsilon</span> of float <span class=
"NDLSystemFont">fB</span>.</p>

<p class="NDLRefMemberFunction">static bool Point3CloseTo(const <a href=
"../../Reference/NiMain/NiPoint3.htm">NiPoint3</a>&amp; kP1, const <a href=
"../../Reference/NiMain/NiPoint3.htm">NiPoint3</a>&amp; kP2, float fEpsilon = ms_fEpsilon);</p>

<p class="NDLRefMemberDescription">Determines if point <span class="NDLSystemFont">kP1</span> is
within <span class="NDLSystemFont">fEpsilon</span> of point <span class=
"NDLSystemFont">kP2</span>.</p>

<p class="NDLRefMemberFunction">static bool Matrix3CloseTo(const <a href=
"../../Reference/NiMain/NiMatrix3.htm">NiMatrix3</a>&amp; kM1, const <a href=
"../../Reference/NiMain/NiMatrix3.htm">NiMatrix3</a>&amp; kM2, float fEpsilon = ms_fEpsilon);</p>

<p class="NDLRefMemberDescription">Determines if matrix <span class="NDLSystemFont">kM1</span> is
within <span class="NDLSystemFont">fEpsilon</span> of matrix <span class=
"NDLSystemFont">kM2</span>.</p>

<p class="NDLRefMemberFunction">static bool QuatCloseTo(const <a href=
"../../Reference/NiMain/NiQuaternion.htm">NiQuaternion</a>&amp; kQ1, const <a href=
"../../Reference/NiMain/NiQuaternion.htm">NiQuaternion</a>&amp; kQ2, float fEpsilon =
ms_fEpsilon);</p>

<p class="NDLRefMemberDescription">Determines if quaternion <span class="NDLSystemFont">kQ1</span>
is within <span class="NDLSystemFont">fEpsilon</span> of quaternion <span class=
"NDLSystemFont">kQ2</span>.</p>

<p class="NDLRefMemberFunction">static bool IsPowerOf2(unsigned int uiNum);</p>

<p class="NDLRefMemberDescription">Determines if the provided integer is a power of two.</p>

<p class="NDLRefMemberFunction">static bool NonDegenerateTriangle(unsigned int uiI0, unsigned uiI1,
unsigned int uiI2, const <a href="../../Reference/NiMain/NiPoint3.htm">NiPoint3</a>&amp; kP0, const
<a href="../../Reference/NiMain/NiPoint3.htm">NiPoint3</a>&amp; kP1, const <a href=
"../../Reference/NiMain/NiPoint3.htm">NiPoint3</a>&amp; kP2);</p>

<p class="NDLRefMemberDescription">Checks if a given triangle is degenerate. Returns false if
triangle *IS* degenerate.</p>

<p class="NDLRefMemberFunction">static void ReduceLinFloatKeys(unsigned int uiNumKeys, <a href=
"../../Reference/NiAnimation/NiFloatKey.htm">NiFloatKey</a>* pkKeys, unsigned int&amp;
uiNumNewKeys, <a href="../../Reference/NiAnimation/NiFloatKey.htm">NiFloatKey</a>*&amp; pkNewKeys,
float fTolerance);</p>

<p class="NDLRefMemberDescription">Removes redundant <span class="NDLSystemFont"><a href=
"../../Reference/NiAnimation/NiLinFloatKey.htm">NiLinFloatKeys</a></span>.</p>

<p class="NDLRefMemberFunction">static bool CheckForExtraDataTags(<a href=
"../../Reference/NiMain/NiAVObject.htm">NiAVObject</a>* pkObject);</p>

<p class="NDLRefMemberDescription">Checks for extra data strings that indicate an object should not
be removed.</p>

<p class="NDLRefMemberFunction">static bool CheckForExtraDataTags(<a href=
"../../Reference/NiMain/NiAVObject.htm">NiAVObject</a>* pkObject, const char* ppcTags[], unsigned
int uiNumTags);</p>

<p class="NDLRefMemberDescription">Checks for the string extra data tags in <span class=
"NDLSystemFont">ppcTags</span>.</p>

<p class="NDLRefMemberFunction">static bool CalculateBoneBounds(<a href=
"../../Reference/NiMesh/NiMesh.htm">NiMesh</a>* pkMesh);</p>

<p class="NDLRefMemberDescription">Calculate bone bounds given a mesh in its bind pose. This
function will calculate the bounds of each bone that is influencing a given mesh. It does this by
finding each position that is influenced by a particular bone and creating a bound that contains
them all. It makes the following assumptions:</p>

<div class="indent1">
    <ul>
        <li>The mesh has a filled in POSITION data stream of format F_FLOAT32_3.</li>

        <li>The mesh has a filled in BONEINDICES data stream of format F_INT16_4.</li>

        <li>The mesh has a filled in BLENDWEIGHT data stream of format F_FLOAT32_4.</li>

        <li>The mesh has a <a href="../../Reference/NiMesh/NiSkinningMeshModifier.htm"><span class=
        "NDLSystemFont">NiSkinningMeshModifier</span></a> attached.</li>
    </ul>
</div>

<p class="NDLRefMemberFunction">static void BuildHashTable(<a href=
"../../Reference/NiMain/NiAVObject.htm">NiAVObject</a>* pkObject, <a href=
"../../Reference/NiMain/NiTPointerMap.htm">NiTPointerMap</a>&lt;<a href=
"../../Reference/NiMain/NiAVObject.htm">NiAVObject</a>*,bool&gt;&amp; kMap);</p>

<p class="NDLRefMemberDescription">Builds a hash table containing the pointers of objects that
should not be removed by removal or merge functions. The following objects are added to kMap:</p>

<div class="indent1">
    <ul>
        <li>LookAt targets of <span class="NDLSystemFont">NiLookAtInterpolator</span> objects.</li>

        <li>Objects referenced by particle systems.</li>

        <li>Objects with ABV's.</li>

        <li>Affected nodes of dynamic effects.</li>

        <li>All bones.</li>

        <li>Biped Footsteps.</li>

        <li>Objects used with the NiPortal system.</li>
    </ul>
</div>

<p class="NDLRefMemberFunction">static bool RemoveNameValuePairsFromStringExtraData(<a href=
"../../Reference/NiMain/NiAVObject.htm">NiAVObject</a>* pObject, const char* ppNames[],
unsigned int nameCount, char delimiter)</p>

<p class="NDLRefMemberDescription">Removes a block of text from any string extra data 
object that starts with any of the given name strings and runs to the next occurrance of 
the delimiter character.</p>

<p class="NDLRefMemberDescription">Returns true if any strings were reduced, false otherwise.</p>

<p class="NDLRefMemberFunction">static bool RemoveNameValuePairsRecursive(<a href=
"../../Reference/NiMain/NiAVObject.htm">NiAVObject</a>* pObject, const char* ppNames[],
unsigned int nameCount, char delimiter)</p>

<p class="NDLRefMemberDescription">Calls RemoveNameValuePairsFromStringExtraData recursively on 
the scenegraph starting with the initial pObject arg.</p>

<p class="NDLRefMemberDescription">Returns true if any strings were reduced, false otherwise.</p>

<p class="NDLRefMemberFunction">static bool RemoveWhitespaceStringExtraData(<a href=
"../../Reference/NiMain/NiAVObject.htm">NiAVObject</a>* pObject)</p>

<p class="NDLRefMemberDescription">Removes any string extra data that only contains spaces, 
tabs, and line feeds.</p>

<p class="NDLRefMemberDescription">Returns true if any extra data was removed, false otherwise.</p>

<p class="NDLRefMemberFunction">static bool RemoveWhitespaceRecursive(<a href=
"../../Reference/NiMain/NiAVObject.htm">NiAVObject</a>* pObject)</p>

<p class="NDLRefMemberDescription">Calls RemoveWhitespaceRecursive recursively on the scenegraph 
starting with the initial pObject arg.</p>

<p class="NDLRefMemberDescription">Returns true if any extra data was removed, false otherwise.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>