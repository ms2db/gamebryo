<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Entity Manager (EntityManager) Quick Reference</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->

<!--(Begin Links)===================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<h1>Entity Manager (EntityManager) Quick Reference</h1>

<p>For more information about this service, see the <span class="NDLSystemFont">
<a href="../egf/egf__EntityManager.htm">egf::EntityManager</a></span> class reference documentation.</p>

<h4>Library/Namespace</h4>

<p><span class="NDLSystemFont">egf</span></p>

<!--Display Name is used to identify the service in logs and other situations
where a text string identifier is required. Each service should be linked to
its corresponding summary page.-->

<h4>Display Name</h4>

<p><span class="NDLSystemFont">EntityManager</span></p>

<!--Default Priority is the default priority suggested for this service. The priority should be linked to the page that lists all the priorities, and or the page describing priorities.-->

<h4>Default Priority</h4>

<p>5450</p>

<!--Required services must be present in the application in order for this
service to function. The service may assert, fail to initialize, or crash if
they are not present. Each service should be linked to its corresponding summary page.-->

<h4>Required Services</h4>

<ul>
  <li><span class="NDLSystemFont"><a href="../efd/efd__MessageService.htm">MessageService</a></span></li>
</ul>

<!--Supporting Services are services that the current service will use, if available, for additional functionality, and what that functionality is. They are not required in all situations. Each service should be linked to its corresponding summary page.-->

<h4>Supporting Services</h4>

<ul>
  <li><span class="NDLSystemFont"><a href="../egf/egf__FlatModelManager.htm">FlatModelManager</a></span></li>
  <li><span class="NDLSystemFont"><a href="../efd/efd__AssetLocatorService.htm">AssetLocatorService</a></span></li>
</ul>

<!--Configuration options are all of the options that this service looks for in
a Config file, via the IConfigManager. Each Section should be linked to the
configuration reference pages corresponding section (which should have more
description of what each config option means).-->

<h4>Configuration</h4>

<ul>
    <li>None</li>
</ul>

<!--Asset Changes Processed is the set of asset mime types for which this
service will process asset change messages. Each of these should be linked to
the list of mime types that the asset controller knows about, or to some other
doc about asset controller and asset change messages.-->

<h4>Asset Changes Processed</h4>

<ul>
  <li>None</li>
</ul>

<!--Entity Properties Recognized is the set of entity models that the service
recognizes and acts upon. Each of these properties should be linked to the
reference page for the property or the model that contains the property.-->

<h4>Entity Properties Recognized</h4>

<ul>
  <li>StandardModelLibrary::Preloadable - When the preloadable mix-in is present for an Entity, the EntityManager will
  request the load of any preloadable assets associated with the entity. These preloads complete before Entities 
  are made active.</li>
</ul>

<!--Messages Sent is the set of messages that this service may send, and when.
Each message should be linked to the message class for the message.-->

<h4>Messages Sent</h4>
<table>
<thead><tr><th>Message</th><th>Handler Declaration</th><th>Sent To</th><th>Sent How</th><th>Details</th></tr></thead>
<tbody>
  <tr>
    <td><span class="NDLSystemFont"><a href="../egf/egf__EntityChangeMessage.htm">efd::MessageWrapper&lt;<br/>
    egf::EntityChangeMessage,<br/>
    efd::kMSGID_OwnedEntityAdded&gt;</a></span></td>
    
    <td><pre>EE_HANDLER_WRAP(
    ClassName,
    HandlerName,
    egf::EntityChangeMessage,
    efd::kMSGID_OwnedEntityAdded)</pre></td>
    
    <td>kCAT_LocalMessage</td>
    <td>SendImmediate</td>
    <td>Sent when an owned entity finished creation after being added to the EntityManager.</td>
  </tr>

  <tr>
    <td><span class="NDLSystemFont"><a href="../egf/egf__EntityChangeMessage.htm">efd::MessageWrapper&lt;<br/>
    egf::EntityChangeMessage,<br/>
    efd::kMSGID_OwnedEntityEnterWorld&gt;</a></span></td>
    
    <td><pre>EE_HANDLER_WRAP(
    ClassName,
    HandlerName,
    egf::EntityChangeMessage,
    efd::kMSGID_OwnedEntityEnterWorld)</pre></td>
    
    <td>kCAT_LocalMessage</td>
    <td>SendImmediate</td>
    <td>Sent when an owned entity enters the world. An entity cannot enter the world until after
        its OnCreate lifecycle has completed.</td>
  </tr>

  <tr>
    <td><span class="NDLSystemFont"><a href="../egf/egf__EntityChangeMessage.htm">efd::MessageWrapper&lt;<br/>
    egf::EntityChangeMessage,<br/>
    efd::kMSGID_OwnedEntityUpdated&gt;</a></span></td>
    
    <td><pre>EE_HANDLER_WRAP(
    ClassName,
    HandlerName,
    egf::EntityChangeMessage,
    efd::kMSGID_OwnedEntityUpdated)</pre></td>
    
    <td>kCAT_LocalMessage</td>
    <td>SendImmediate</td>
    <td>Sent during OnTick for any owned entity which has had properties modified since the last OnTick.</td>
  </tr>

  <tr>
    <td><span class="NDLSystemFont"><a href="../egf/egf__EntityChangeMessage.htm">efd::MessageWrapper&lt;<br/>
    egf::EntityChangeMessage,<br/>
    efd::kMSGID_OwnedEntityExitWorld&gt;</a></span></td>
    
    <td><pre>EE_HANDLER_WRAP(
    ClassName,
    HandlerName,
    egf::EntityChangeMessage,
    efd::kMSGID_OwnedEntityExitWorld)</pre></td>
    
    <td>kCAT_LocalMessage</td>
    <td>SendImmediate</td>
    <td>Sent when an owned entity exit the world. An entity cannot exit the world until after
        it has successfully entered the world.</td>
  </tr>

  <tr>
    <td><span class="NDLSystemFont"><a href="../egf/egf__EntityChangeMessage.htm">MessageWrapper&lt;<br/>
    EntityChangeMessage,<br/>
    kMSGID_OwnedEntityRemoved&gt;</a></span></td>
    
    <td><pre>EE_HANDLER_WRAP(
    ClassName,
    HandlerName,
    egf::EntityChangeMessage,
    efd::kMSGID_OwnedEntityRemoved)</pre></td>
    
    <td>kCAT_LocalMessage</td>
    <td>SendImmediate</td>
    <td>Sent when an owned entity is being removed from the EntityManager for the purpose of being deleted.</td>
  </tr>

    <tr>
    <td><span class="NDLSystemFont"><a href="../egf/egf__EntityPreloadRequest.htm">egf::EntityPreloadRequest</a></span></td>
    
    <td><pre>EE_HANDLER(
    ClassName,
    HandlerName,
    egf::EntityPreloadRequest)</pre></td>
    
    <td>GetEntityPreloadCategory()</td>
    <td>SendLocal</td>
    <td>Sent to all registered Preload system services responsible for preloading Entity assets. When an
    Entity is added to the EntityManager, the EntityManager will send an egf::EntityPreloadRequest message
    to all registered Preload services (see egf::EntityManager::RegisterPreloadService). Preload services
    are responsible for listening for these messages and preloading assets required for the Entity. The
    services are also responsible for sending back an egf::EntityPreloadResponse message for each request
    they receive, regardless of whether or not the entity has preloadable assets belonging to the service.</td>
  </tr>

  <tr>
    <td><span class="NDLSystemFont"><a href="../egf/egf__EntityFactoryResponse.htm">egf::EntityFactoryResponse</a></span></td>
    
    <td><pre>EE_HANDLER_SUBCLASS(
    ClassName,
    HandlerName,
    efd::AssetLoadResponse,
    egf::EntityFactoryResponse)</pre></td>
    
    <td>User supplied callback category.</td>
    <td>SendLocal on failure, SendImmediate on success.</td>
    <td>egf::EntityFactoryResponse messages are sent in response to an EntityFactoryRequest messages when
    creating entities at runtime. The caller to EntityManager::CreateEntity can provide a callback category.
    The egf::EntitYFactoryResponse messages are forwarded to this callback category when the factory
    completes processing. If the entity failed to factory, the message is forwarded using SendLocal. If the 
    factory was successful, the message is forwarded using SendImmediate after the Entity completes any 
    preloading and after any lifecycle behaviors complete.<br/><br/>
    Note: Handlers for this message type should also handle efd::AssetLoadResponse messages. AssetLoadResponse
    messages are forwarded in the event that the requested asset is not found. EntityFactoryResponse messages
    are forwarded when the request is successful, or there is an error parsing or reading the underlying
    flat model file.</td>
  </tr>
  
</tbody>
</table>


<!--Behaviors invoked by this service. Each of these should be linked to the reference page for the
    behavior.-->

<h4>Behaviors Invoked</h4>

<ul>
  <li>OnCreate</li>
  <li>OnAssetsLoaded</li>
  <li>OnEntitySetFinished</li>
  <li>OnEnterWorld</li>
  <li>OnExitWorld</li>
  <li>OnDestroy</li>
</ul>

<!--Built-ins provided by this service. Each of these should be linked to the reference page for
    the built-in.-->

<h4>Related Built-ins</h4>

<ul>
  <li>CallBehavior</li>
  <li>FindProperties</li>
  <li>FindPropertyKeys</li>
  <li>GetNextPropertyKey</li>
  <li>FindAllEntities</li>
  <li>FindEntityByDataID</li>
  <li>CreateEntity</li>
</ul>

<h4>Notes</h4>

<ul>
  <li>None</li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>