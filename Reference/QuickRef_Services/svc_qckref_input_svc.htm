<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Input Service (InputService) Quick Reference</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<h1>Input Service (InputService) Quick Reference</h1>

<p>For more information about this service, see the <a href="../ecrInput/ecrInput__InputService.htm">ecrInput::InputService</a> class reference documentation.</p>


<h4>Library/Namespace</h4>

<p>Found in the <a href="../ecrInput/Introduction_to_ecrInput_Class_Reference.htm">ecrInput</a> library and namespace.</p>

<!--Display Name is used to identify the service in logs and other situations
where a text string identifier is required. Each service should be linked to
its corresponding summary page.-->

<h4>Display Name</h4>

<p>InputService</p>

<!--Default Priority is the default priority suggested for this service. The priority should be linked to the page that lists all the priorities, and or the page describing priorities.-->

<h4>Default Priority</h4>

<p>4500</p>

<!--Required services must be present in the application in order for this
service to function. The service may assert, fail to initialize, or crash if
they are not present. Each service should be linked to its corresponding summary page.-->

<h4>Required Services</h4>

<ul>
  <li><a href="../efd/efd__AssetFactoryManager.htm">AssetFactoryManager</a>- InputService uses
      the Asset Factory Manager to load action maps.</li>
  <li><a href="../efd/efd__MessageService.htm">MessageService</a>- InputService sends 
      messages about input events and receives messages about asset locate requests.</li>
  <li><a href="../egf/egf__Scheduler.htm">Scheduler</a> - InputService queries the 
      schedule for game time.</li>
</ul>

<!--Supporting Services are services that the current service will use, if available, for additional functionality, and what that functionality is. They are not required in all situations. Each service should be linked to its corresponding summary page.-->

<h4>Supporting Services</h4>

<ul>
  <li><a href="../efd/efd__Win32PlatformService.htm">Win32PlatformService</a> - When 
      present, instance and window references will be automatically determined. If not 
      present, the application must manually call SetInstanceRef and SetWindowRef 
      before OnInit.</li>
  <li><a href="../efd/efd__AssetFactoryManager.htm">AssetFactoryManager</a> - Used to 
      load action maps.</li>
  <li><a href="../efd/efd__MessageService.htm">MessageService</a> - Used to 
      send messages to the application and other services.</li>
</ul>

<!--Configuration options are all of the options that this service looks for in
a Config file, via the IConfigManager. Each Section should be linked to the
configuration reference pages corresponding section (which should have more
description of what each config option means).-->

<h4>Configuration</h4>
<ul>
  <li>None</li>
</ul>

<!--Asset Changes Processed is the set of asset mime types for which this
service will process asset change messages. Each of these should be linked to
the list of mime types that the asset controller knows about, or to some other
doc about asset controller and asset change messages.-->

<h4>Asset Changes Processed</h4>

<ul>
  <li>None</li>
</ul>

<!--Entity Properties Recognized is the set of entity models that the service
recognizes and acts upon. Each of these properties should be linked to the
reference page for the property or the model that contains the property.-->

<h4>Entity Properties Recognized</h4>

<ul>
  <li>None</li>
</ul>	

<!--Messages Sent is the set of messages that this service may send, and when.
Each message should be linked to the message class for the message.-->

<h4>Messages Sent</h4>

<table>
<thead><tr><th>Message</th><th>Handler Declaration</th><th>Sent To</th><th>Sent How</th><th>Details</th></tr></thead>
<tbody>
  <tr>
    <td><a href="../ecrInput/ecrInput__InputActionMessage.htm">InputActionMessage</a></td>     

    <td>
    <pre>EE_HANDLER(
    ClassName,
    HandlerName,
    ecrInput::InputActionMessage)</pre></td>    
    
    <td>various</td>
    <td>SendLocal</td>
    <td>Sent for changes to buttons as well as when an action from an action map is triggered.
        Sent to a user specified callback category as passed to ListenForInputActionEvent or,
        in legacy mode, to the category specified in the actionmap file.</td>
  </tr>
  <tr>
    <td><a href="../ecrInput/ecrInput__InputStickMessage.htm">InputStickMessage</a></td>
    
    <td>
    <pre>EE_HANDLER(
    ClassName,
    HandlerName,
    ecrInput::InputStickMessage)</pre></td>    
    
    <td>various</td>
    <td>SendLocal</td>
    <td>Sent when a gamepad stick changes. Also used as the base for MouseMoveMessage.
        Sent to a user specified callback category as passed to ListenForInputStickEvent or,
        in legacy mode, to the category specified in the actionmap file.</td>
  </tr>
  <tr>
    <td><a href="../ecrInput/ecrInput__KeyDownMessage.htm">KeyDownMessage</a></td>
    
    <td>
    <pre>EE_HANDLER(
    ClassName,
    HandlerName,
    ecrInput::KeyDownMessage)</pre></td>
    
    <td>kCAT_LocalMessage</td>
    <td>SendLocal</td>
    <td>Sent when a keyboard key is pressed.</td>
  </tr>
  <tr>
    <td><a href="../ecrInput/ecrInput__KeyUpMessage.htm">KeyUpMessage</a></td>
    
    <td>
    <pre>EE_HANDLER(
    ClassName,
    HandlerName,
    ecrInput::KeyUpMessage)</pre></td>
    
    <td>kCAT_LocalMessage</td>
    <td>SendLocal</td>
    <td>Sent when a keyboard key is released.</td>
  </tr>
  <tr>
    <td><a href="../ecrInput/ecrInput__MouseMoveMessage.htm">MouseMoveMessage</a></td>
    
    <td>
    <pre>EE_HANDLER(
    ClassName,
    HandlerName,
    ecrInput::MouseMoveMessage)</pre></td>
    
    <td>kCAT_LocalMessage</td>
    <td>SendLocal</td>
    <td>Sent when the mouse moves.</td>
  </tr>
  <tr>
    <td><a href="../ecrInput/ecrInput__MouseDownMessage.htm">MouseDownMessage</a></td>
    
    <td>
    <pre>EE_HANDLER(
    ClassName,
    HandlerName,
    ecrInput::MouseDownMessage)</pre></td>
    
    <td>kCAT_LocalMessage</td>
    <td>SendLocal</td>
    <td>Sent when a mouse button is pressed.</td>
  </tr>
  <tr>
    <td><a href="../ecrInput/ecrInput__MouseUpMessage.htm">MouseUpMessage</a></td>
    
    <td>
    <pre>EE_HANDLER(
    ClassName,
    HandlerName,
    ecrInput::MouseUpMessage)</pre></td>
    
    <td>kCAT_LocalMessage</td>
    <td>SendLocal</td>
    <td>Sent when a mouse button is released.</td>
  </tr>
  <tr>
    <td><a href="../ecrInput/ecrInput__InputActionMapsLoaded.htm">InputActionMapsLoaded</a></td>
    <td>
    <pre>EE_HANDLER(
    ClassName,
    HandlerName,
    ecrInput::InputActionMapsLoaded)</pre></td>
    
    <td>ecrInput::InputService::MessageCategory()</td>
    <td>SendLocal</td>
    <td>Sent when an action map is loaded or has failed to load</td>
  </tr>
</tbody>
</table>

<!--Behaviors invoked by this service. Each of these should be linked to the
reference page for the behavior.-->

<h4>Behaviors Invoked</h4>

<ul>
  <li>None</li>
</ul>

<!--Built-ins provided by this service. Each of these should be linked to the
reference page for the built-in.-->

<h4>Related Built-ins</h4>

<ul>
  <li>None</li>
</ul>

<h4>Notes</h4>

<ul>
  <li>InputService supports two modes, action maps and single input.
      <ul>
          <li>The action map mode is preferred and should be used by all applications.
          </li>
          <li>Single input mode will fire a message as each input for each device changes.
          </li>
      </ul>
  </li>
  <li>Changes to action maps are not detected during Rapid Iteration. An application must be
      re-started to force re-loading of action maps.
  </li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
