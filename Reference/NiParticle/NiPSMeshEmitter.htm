<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiPSMeshEmitter</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiPSMeshEmitter</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="NiPSEmitter.htm">NiPSEmitter</a></span></p>


<p class="NDLRefHeaderFile">&lt;NiPSMeshEmitter.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/class_ni_p_s_mesh_emitter.gif" alt="Inheritance graph for NiPSMeshEmitter"/>
  <p class="FigureCaption">Inheritance graph for NiPSMeshEmitter</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">Emits particles from one or more <span class="NDLSystemFont"><a href="../NiMesh/NiMesh.htm">NiMesh</a></span> objects using a variety of options. </p>
<p class="NDLNormal"><span class="NDLSystemFont"><a href="../NiMesh/NiMesh.htm">NiMesh</a></span> objects associated with this class are called mesh emitters. A random mesh emitter is selected for each particle emission, and the data on that mesh is used to compute the initial position and velocity of the particle.</p>
<p class="NDLNormal">Particles can be emitted from vertices, faces, or edges of a mesh emitter, and the normal at the emission point can be used to determine the direction of the initial velocity. Skinned meshes are supported, with the skinning for the appropriate vertices being performed in software to obtain the final emission position.</p>
<p class="NDLNormal">
<p class="NDLNormal">Certain criteria must be met for any <span class="NDLSystemFont"><a href="../NiMesh/NiMesh.htm">NiMesh</a></span> object that is to be used as a mesh emitter. See the documentation for the AddMeshEmitter function for a list of these requirements. </p></p>

<a name="public_types"></a>
<p class="NDLRefHead1">Public Types</p>
<a name="class_ni_p_s_mesh_emitter_1a17c9d793e2fe08706172fcdb8c8d5445"></a>
<p class=NDLRefHead2>NiPSMeshEmitter::MeshEmissionType</p>


<p class="NDLRefMemberDescription">Determines how the data on the mesh emitter will be used to compute the emission position for a particle. </p>


<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">EMIT_FROM_VERTICES</span></td>
    <td>Emit from a random vertex in the mesh. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">EMIT_FROM_FACE_CENTER</span></td>
    <td>Emit from the center of a random triangle in the mesh. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">EMIT_FROM_EDGE_CENTER</span></td>
    <td>Emit from the center of a random edge of a random triangle in the mesh. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">EMIT_FROM_FACE_SURFACE</span></td>
    <td>Emit from a random position inside a random triangle in the mesh. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">EMIT_FROM_EDGE_SURFACE</span></td>
    <td>Emit from a random position along a random edge of a random triangle in the mesh. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">EMIT_MAX</span></td>
    <td>An invalid value indicating the maximum number of defined MeshEmissionType enumerations. </td>
</tr>

  </tbody>
</table>
</div>

<a name="class_ni_p_s_mesh_emitter_1ad8f27cac5fb4326f7434a347a223bcf7"></a>
<p class=NDLRefHead2>NiPSMeshEmitter::InitialVelocityType</p>


<p class="NDLRefMemberDescription">Determines how the initial velocity direction for a particle is computed. </p>


<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">VELOCITY_USE_NORMALS</span></td>
    <td>Use the vertex/triangle normals to determine the velocity direction. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">VELOCITY_USE_RANDOM</span></td>
    <td>Use a random velocity direction. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">VELOCITY_USE_DIRECTION</span></td>
    <td>Use the direction specified in the base emitter as the velocity direction. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">VELOCITY_MAX</span></td>
    <td>An invalid value indicating the maximum number of defined InitialVelocityType enumerations. </td>
</tr>

  </tbody>
</table>
</div>


<a name="construction_and_destruction"></a>
<p class="NDLRefHead1">Construction and Destruction</p>


<a name="class_ni_p_s_mesh_emitter_1a8fb45edc2c8a2d1173528e3d61816548"></a>
<p class="NDLRefMemberFunction">NiPSMeshEmitter(<br/>const <span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>& kName, <br/><span class="NDLSystemFont"><a href="../NiMain/NiAVObject.htm">NiAVObject</a></span>* pkEmitterObj = NULL, <br/><span class="NDLSystemFont"><a href="../NiMesh/NiMesh.htm">NiMesh</a></span>* pkMeshEmitter = NULL, <br/><span class="NDLSystemFont"><a href="NiPSMeshEmitter.htm#class_ni_p_s_mesh_emitter_1a17c9d793e2fe08706172fcdb8c8d5445">MeshEmissionType</a></span> eMeshEmissionType = EMIT_FROM_VERTICES, <br/><span class="NDLSystemFont"><a href="NiPSMeshEmitter.htm#class_ni_p_s_mesh_emitter_1ad8f27cac5fb4326f7434a347a223bcf7">InitialVelocityType</a></span> eInitialVelocityType = VELOCITY_USE_NORMALS, <br/>float fSpeed = 1.0f, <br/>float fSpeedVar = 0.0f, <br/>float fSpeedFlipRatio = 0.0f, <br/>float fDeclination = 0.0f, <br/>float fDeclinationVar = 0.0f, <br/>float fPlanarAngle = 0.0f, <br/>float fPlanarAngleVar = 0.0f, <br/>float fSize = 1.0f, <br/>float fSizeVar = 0.0f, <br/>float fLifeSpan = 1.0f, <br/>float fLifeSpanVar = 0.0f, <br/>float fRotAngle = 0.0f, <br/>float fRotAngleVar = 0.0f, <br/>float fRotSpeed = 0.0f, <br/>float fRotSpeedVar = 0.0f, <br/><span class="NDLSystemFont">bool</span> bRandomRotSpeedSign = false, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kRotAxis = NiPoint3::UNIT_X, <br/><span class="NDLSystemFont">bool</span> bRandomRotAxis = true)</p>
<p class="NDLRefMemberDescription">Main constructor. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kName</span></td>
    <td>The name of the emitter. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkEmitterObj</span></td>
    <td>A <span class="NDLSystemFont"><a href="../NiMain/NiAVObject.htm">NiAVObject</a></span> object that is used to define the direction of the emitter in the world. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkMeshEmitter</span></td>
    <td>An <span class="NDLSystemFont"><a href="../NiMesh/NiMesh.htm">NiMesh</a></span> object to use as a mesh emitter. Mesh emitters can be added after construction with the AddMeshEmitter function. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">eMeshEmissionType</span></td>
    <td>The method by which the initial particle position will be computed. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">eInitialVelocityType</span></td>
    <td>The method by which the initial particle velocity direction will be computed. is VELOCITY_USE_DIRECTION. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fSpeed</span></td>
    <td>The speed assigned to new particles. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fSpeedVar</span></td>
    <td>The speed variation for new particles. The resulting speed values assigned to new particles will be evenly distributed over the range [fSpeed - fSpeedVar/2, fSpeed + fSpeedVar/2]. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fSpeedFlipRatio</span></td>
    <td>The proportion of particles that have their velocity negated from the value defined by other parameters. The value must be in the range [0.0, 1.0]. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fDeclination</span></td>
    <td>The declination angle in radians from the positive z-axis for the velocity vector of newly created particles. The expected range of declination is from 0.0, which will set the velocity vector to [0,0,1], to NI_PI, which will set the velocity vector to [0,0,-1]. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fDeclinationVar</span></td>
    <td>The declination variation in radians for new particles. The resulting declination values assigned to new particles will be evenly distributed over the range [fDeclination - fDeclinationVar, fDeclination + fDeclinationVar]. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fPlanarAngle</span></td>
    <td>The planar angle in radians about the z-axis from the positive x-axis that will serve as the plane in which the declination will occur. The expected range of the planar angle is [0, 2*NI_PI). </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fPlanarAngleVar</span></td>
    <td>The planar angle variation in radians for new particles. The resulting planar angle values assigned to new particles will be evenly distributed over the range [fPlanarAngle - fPlanarAngleVar, fPlanarAngle + fPlanarAngleVar]. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fSize</span></td>
    <td>The radius assigned to new particles. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fSizeVar</span></td>
    <td>The radius variation for new particles. The resulting radius values assigned to new particles will be evenly distributed over the range [fSize - fSizeVar, fSize + fSizeVar]. If fSizeVar is larger than fSize, it is possible that the radius will be set to a negative value. In this case, the particle will be flipped, and the bounding volume may be computed incorrectly. Thus, it is recommended that fSizeVar be less than or equal to fSize. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fLifeSpan</span></td>
    <td>The life span in seconds assigned to new particles. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fLifeSpanVar</span></td>
    <td>The life span variation for new particles. The resulting life span values assigned to new particles will be evenly distributed over the range [fLifeSpan - fLifeSpanVar/2, fLifeSpan + fLifeSpanVar/2]. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fRotAngle</span></td>
    <td>The rotation angle in radians assigned to new particles. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fRotAngleVar</span></td>
    <td>The rotation angle variation in radians for new particles. The resulting rotation angle values assigned to new particles will be evenly distributed over the range [fRotAngle - fRotAngleVar, fRotAngle + fRotAngleVar]. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fRotSpeed</span></td>
    <td>The rotation speed in radians per second assigned to new particles. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fRotSpeedVar</span></td>
    <td>The rotation speed variation in radians per second for new particles. The resulting rotation speed values assigned to new particles will be evenly distributed over the range [fRotSpeed - fRotSpeedVar, fRotSpeed + fRotSpeedVar]. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">bRandomRotSpeedSign</span></td>
    <td>Whether or not the rotation speed sign should be randomly flipped when being assigned to new particles. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kRotAxis</span></td>
    <td>The rotation axis assigned to new particles. This value is only used if bRandomRotAxis is false. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">bRandomRotAxis</span></td>
    <td>Whether or not a random rotation axis will be assigned to new particles. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_p_s_mesh_emitter_1aa969be68726dc70c9a65f1900292dde8"></a>
<p class="NDLRefMemberFunction">NiPSMeshEmitter()</p>
<p class="NDLRefMemberDescription">Protected default constructor for cloning and streaming only. </p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="class_ni_p_s_mesh_emitter_1ab5fd9f625fd61be0570a094a6e2a39c9"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../NiMain/NiAVObject.htm">NiAVObject</a></span>*  GetEmitterObj() const</p>
<p class="NDLRefMemberDescription">Accesses the object in the scene graph whose world-space transformation will be used to represent the orientation of the emitter. </p>

<a name="class_ni_p_s_mesh_emitter_1a0134e6d2b0e0357b00c8bcc22f425056"></a>
<p class="NDLRefMemberFunction">void  SetEmitterObj(<span class="NDLSystemFont"><a href="../NiMain/NiAVObject.htm">NiAVObject</a></span>* pkEmitterObj)</p>
<p class="NDLRefMemberDescription">Accesses the object in the scene graph whose world-space transformation will be used to represent the orientation of the emitter. </p>

<a name="class_ni_p_s_mesh_emitter_1ad28ecf65b98e3fed15e4ba7d0789fac6"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiPSMeshEmitter.htm#class_ni_p_s_mesh_emitter_1a17c9d793e2fe08706172fcdb8c8d5445">MeshEmissionType</a></span>  GetMeshEmissionType()</p>
<p class="NDLRefMemberDescription">Accesses the method by which the initial particle position will be computed. </p>

<a name="class_ni_p_s_mesh_emitter_1a19ebad64734a874e44492311eeee941f"></a>
<p class="NDLRefMemberFunction">void  SetMeshEmissionType(<span class="NDLSystemFont"><a href="NiPSMeshEmitter.htm#class_ni_p_s_mesh_emitter_1a17c9d793e2fe08706172fcdb8c8d5445">MeshEmissionType</a></span> eMeshEmissionType)</p>
<p class="NDLRefMemberDescription">Accesses the object in the scene graph whose world-space transformation will be used to represent the orientation of the emitter. </p>

<a name="class_ni_p_s_mesh_emitter_1a10a57729bbe19c29b5b5dc4bfe0b98e5"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiPSMeshEmitter.htm#class_ni_p_s_mesh_emitter_1ad8f27cac5fb4326f7434a347a223bcf7">InitialVelocityType</a></span>  GetInitialVelocityType()</p>
<p class="NDLRefMemberDescription">Accesses the method by which the initial particle velocity direction will be computed. </p>

<a name="class_ni_p_s_mesh_emitter_1a7def3571a1396f32cf505ebf26ec3636"></a>
<p class="NDLRefMemberFunction">void  SetInitialVelocityType(<span class="NDLSystemFont"><a href="NiPSMeshEmitter.htm#class_ni_p_s_mesh_emitter_1ad8f27cac5fb4326f7434a347a223bcf7">InitialVelocityType</a></span> eInitialVelocityType)</p>
<p class="NDLRefMemberDescription">Accesses the object in the scene graph whose world-space transformation will be used to represent the orientation of the emitter. </p>
<a name="mesh_emitter_management_functions"></a>
<p class="NDLRefHead1">Mesh Emitter Management Functions</p>


<a name="class_ni_p_s_mesh_emitter_1a1d3df27b53b31027c8781c808371bf53"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  AddMeshEmitter(<span class="NDLSystemFont"><a href="../NiMesh/NiMesh.htm">NiMesh</a></span>* pkMeshEmitter)</p>
<p class="NDLRefMemberDescription">Adds an <span class="NDLSystemFont"><a href="../NiMesh/NiMesh.htm">NiMesh</a></span> object that should be used for particle emission. </p>
<p class="NDLRefMemberDetailedDescription">An <span class="NDLSystemFont"><a href="../NiMesh/NiMesh.htm">NiMesh</a></span> object passed to this function must meet certain criteria in order to be successfully added:</p>
<p class="NDLRefMemberDetailedDescription">
<ul>
<li>pkMeshEmitter-&gt;GetPrimitiveType() must return <span class="NDLSystemFont">NiPrimitiveType::PRIMITIVE_POINTS</span>, <span class="NDLSystemFont">NiPrimitiveType::PRIMITIVE_TRIANGLES</span>, or <span class="NDLSystemFont">NiPrimitiveType::PRIMITIVE_TRISTRIPS</span>.</li>
<li>If the mesh has an <span class="NDLSystemFont"><a href="../NiMesh/NiSkinningMeshModifier.htm">NiSkinningMeshModifier</a></span> attached, it must have the following data streams in the following formats (optional data streams are indicated with an asterisk but must have the indicated format if they are present):
<ul>
<li>POSITION_BP - F_FLOAT32_3 or F_FLOAT16_4 or F_FLOAT16_3</li>
<li>NORMAL_BP* - F_FLOAT32_3 or F_FLOAT16_4 or F_FLOAT16_3</li>
<li>BLENDWEIGHT - F_FLOAT32_3 or F_FLOAT32_4</li>
<li>BLENDINDICES - F_UINT8_4 or F_INT16_4</li>
<li>BONE_PALETTE* - F_UNIT16_1</li></ul></li>
<li>If the mesh is not skinned, it must have the following data streams in the following formats (optional streams are again marked with an asterisk):
<ul>
<li>POSITION - F_FLOAT32_3 or F_FLOAT16_4 or F_FLOAT16_3</li>
<li>NORMAL* - F_FLOAT32_3 or F_FLOAT16_4 or F_FLOAT16_3</li></ul></li>
<li>All data streams listed above (with the addition of the INDEX data stream) must allow for CPU reading. If the data stream is an <span class="NDLSystemFont"><a href="../NiMesh/NiToolDataStream.htm">NiToolDataStream</a></span>, it will automatically be made readable. Otherwise, validation will fail.</li></ul></p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pkMeshEmitter</span></td>
    <td>The <span class="NDLSystemFont"><a href="../NiMesh/NiMesh.htm">NiMesh</a></span> object to use as a mesh emitter. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Whether or not the mesh emitter was successfully added. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_p_s_mesh_emitter_1ab4ecdbefbc553b9548dad8a1c4f6a24c"></a>
<p class="NDLRefMemberFunction">void  RemoveMeshEmitter(<span class="NDLSystemFont">NiUInt32</span> uiIndex)</p>
<p class="NDLRefMemberDescription">Removes the mesh emitter at the specified index. </p>
<p class="NDLRefMemberDetailedDescription">Calling this function may have the result of changing the indices and/or the order of other mesh emitters. </p>

<a name="class_ni_p_s_mesh_emitter_1aa6086e7741df0d534f3996b67eeeaa1b"></a>
<p class="NDLRefMemberFunction">void  RemoveAllMeshEmitters()</p>
<p class="NDLRefMemberDescription">Removes all mesh emitters. </p>

<a name="class_ni_p_s_mesh_emitter_1a570b9e38dfdf305ee93a250d7008409b"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../NiMesh/NiMesh.htm">NiMesh</a></span>*  GetMeshEmitter(<span class="NDLSystemFont">NiUInt32</span> uiIndex)</p>
<p class="NDLRefMemberDescription">Returns the mesh emitter at the specified index. </p>
<p class="NDLRefMemberDetailedDescription">The index passed in must be less than the value returned by GetMeshEmitterCount. </p>

<a name="class_ni_p_s_mesh_emitter_1a49a9b5db7af4912f05fbe70f8ab8b8f3"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  GetMeshEmitterCount()</p>
<p class="NDLRefMemberDescription">Returns the number of mesh emitters. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
