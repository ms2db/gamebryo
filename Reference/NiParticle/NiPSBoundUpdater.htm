<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiPSBoundUpdater</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiPSBoundUpdater</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../NiMain/NiObject.htm">NiObject</a></span></p>


<p class="NDLRefHeaderFile">&lt;NiPSBoundUpdater.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/class_ni_p_s_bound_updater.gif" alt="Inheritance graph for NiPSBoundUpdater"/>
  <p class="FigureCaption">Inheritance graph for NiPSBoundUpdater</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">Updates the bounding volume for an <span class="NDLSystemFont"><a href="NiPSParticleSystem.htm">NiPSParticleSystem</a></span> object. </p>
<p class="NDLNormal">This updates the bounding volume for both <span class="NDLSystemFont"><a href="NiPSParticleSystem.htm">NiPSParticleSystem</a></span> objects and <span class="NDLSystemFont"><a href="NiPSMeshParticleSystem.htm">NiPSMeshParticleSystem</a></span> objects. For an <span class="NDLSystemFont"><a href="NiPSParticleSystem.htm">NiPSParticleSystem</a></span> object, the bound is computed by creating an axis-aligned minimum bounding box around the particle positions, taking the radius and size of the particles into account. For an <span class="NDLSystemFont"><a href="NiPSMeshParticleSystem.htm">NiPSMeshParticleSystem</a></span> object, the bounding volumes of all mesh particles are merged.</p>
<p class="NDLNormal">If a particle system does not have one of these objects attached, its bounding volume will not be updated. In that case, the model bounding volume on the particle system must be manually set to an appropriate value. Not having an <span class="NDLSystemFont">NiPSBoundUpdater</span> object attached also causes the bounding volume of the particle system to be treated differently with world-space particles. See the <span class="NDLSystemFont"><a href="NiPSParticleSystem.htm">NiPSParticleSystem</a></span> documentation for more details.</p>
<p class="NDLNormal">The bounding volume computation is optimized by only updating the bound of (1 / UpdateSkip) of the total particles every frame. In practice, this means that the final bound is accounting for all the particles, but the locations of some particles may be up to UpdateSkip frames out of date. Reducing UpdateSkip will reduce the number of frames that a particle may be out of date, while increasing the number of particles processed on each frame. Set the UpdateSkip value to 1 if you would like every particle accurately bound on every frame. This may be necessary for particle systems with bounds that change rapidly. </p>

<a name="public_types"></a>
<p class="NDLRefHead1">Public Types</p>
<a name="class_ni_p_s_bound_updater_1ac6969bc4eb16ff5de78fd7eae29650ce"></a>
<p class=NDLRefHead2>anonymous enum</p>




<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">AUTO_SKIP_UPDATE</span></td>
    <td>Indicates that the UpdateSkip value should be automatically computed. When this UpdateSkip value is specified, the UpdateSkip is computed based on the maximum number of particles in the system according to the following expression: UpdateSkip = (MaxNumParticles / 50) + 1.The constant is 20 (rather than 50) if the particle system uses mesh particles. </td>
</tr>

  </tbody>
</table>
</div>


<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="class_ni_p_s_bound_updater_1a990a84cc531004bacb5eebbd62a2f92d"></a>
<p class="NDLRefMemberFunction">virtual void  UpdateBound(<span class="NDLSystemFont"><a href="NiPSParticleSystem.htm">NiPSParticleSystem</a></span>* pkParticleSystem)</p>
<p class="NDLRefMemberDescription">Updates the bounding volume for the specified particle system. </p>
<p class="NDLRefMemberDetailedDescription">For an <span class="NDLSystemFont"><a href="NiPSParticleSystem.htm">NiPSParticleSystem</a></span> object, the bound is computed by creating an axis-aligned minimum bounding box around the particle positions, taking the radius and size of the particles into account. For an <span class="NDLSystemFont"><a href="NiPSMeshParticleSystem.htm">NiPSMeshParticleSystem</a></span> object, the bounding volumes of all mesh particles are merged.</p>
<p class="NDLRefMemberDetailedDescription">The bounding volume computation is optimized by only computing the bound of (1 / UpdateSkip) of the total particles every frame. This object maintains UpdateSkip bounding volumes, each bounding NumParticles / UpdateSkip particles. For example, if UpdateSkip is 2 there will be two bounds, one bounding particles 0, 2, 4, 6 etc, and the other bounding particle 1, 3, 5, 7, etc. Each call to UpdateBound updates one of these bounds, with successive calls updating successive bounds. All of the partial bounds are then merged into the final bound. In practice, this means that the final bound is accounting for all the particles, but the locations of some particles may be up to UpdateSkip frames out of date.</p>
<p class="NDLRefMemberDetailedDescription">If, after this computation, the bounding radius is zero and at least one particle exists in the system, that radius is set to be the first entry in the radii particle data array.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pkParticleSystem</span></td>
    <td>The particle system for which the bound should be computed. </td>
</tr>

        </tbody>
    </table>
</div>


<a name="constructor_and_destructor"></a>
<p class="NDLRefHead1">Constructor and Destructor</p>


<a name="class_ni_p_s_bound_updater_1a133645a8f7508f68e8c0333e840189e6"></a>
<p class="NDLRefMemberFunction">NiPSBoundUpdater(<span class="NDLSystemFont">NiInt16</span> sUpdateSkip = AUTO_SKIP_UPDATE)</p>
<p class="NDLRefMemberDescription">Main constructor. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">sUpdateSkip</span></td>
    <td>The initial UpdateSkip value to set. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_p_s_bound_updater_1a36cf7d8fabb4c62d0d8026a3a2d157c2"></a>
<p class="NDLRefMemberFunction">virtual ~NiPSBoundUpdater()</p>
<p class="NDLRefMemberDescription">Virtual destructor. </p>
<a name="updateskip_functions"></a>
<p class="NDLRefHead1">UpdateSkip Functions</p>


<a name="class_ni_p_s_bound_updater_1a37b73ed3fd207a06c3aff617a43987ec"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiInt16</span>  GetUpdateSkip() const</p>
<p class="NDLRefMemberDescription">Gets the UpdateSkip value. </p>

<a name="class_ni_p_s_bound_updater_1aacbfd0b6ad97ea4265a1d24d05b9a305"></a>
<p class="NDLRefMemberFunction">void  SetUpdateSkip(<span class="NDLSystemFont">NiInt16</span> sUpdateSkip)</p>
<p class="NDLRefMemberDescription">Sets the UpdateSkip value. </p>
<p class="NDLRefMemberDetailedDescription">The initial value is set from the parameter to the constructor. </p>

<a name="class_ni_p_s_bound_updater_1a7fd0a4bb4d5ad5a806194f4de91fc2a3"></a>
<p class="NDLRefMemberFunction">void  ResetUpdateSkipBounds()</p>
<p class="NDLRefMemberDescription">Resets the stored UpdateSkip bounding volumes to the identity. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
