<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiPSAlignedQuadGenerator</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiPSAlignedQuadGenerator</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../NiMesh/NiMeshModifier.htm">NiMeshModifier</a></span></p>


<p class="NDLRefHeaderFile">&lt;NiPSAlignedQuadGenerator.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/class_ni_p_s_aligned_quad_generator.gif" alt="Inheritance graph for NiPSAlignedQuadGenerator"/>
  <p class="FigureCaption">Inheritance graph for NiPSAlignedQuadGenerator</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">A mesh modifier that uses particle system data to generate aligned quads for each particle. </p>
<p class="NDLNormal">Each quad is actually two triangles. If texture animation is enabled, the texture coordinates will be set to select a sub-texture/cell from the supplied texture which contains multiple frames. If texture animation is disabled, the texture coordinates for each quad are fixed and range from 0 to 1. The orientation of the quad is determined by the alignment parameters of the particle system: each of the normal and "v" texture coordinate (up) directions must be specified. These directions can be fixed for all particles or computed per-particle. The "u" texture direction is perpendicular to both the normal and up direction. Specifying the same method for both up and normal will result in undefined behavior, with the exception of the camera method.</p>
<p class="NDLNormal">The normals for each vertex are perpendicular to the quad face. Vertex colors are used if color data exists. Rotation data, if present, is applied after alignment. Hence, the alignment may be viewed as defining the local coordinate system for the particle.</p>
<p class="NDLNormal">
<p class="NDLNormal">This mesh modifier must be attached to an <span class="NDLSystemFont"><a href="NiPSParticleSystem.htm">NiPSParticleSystem</a></span> object. </p></p>

<a name="construction_and_destruction"></a>
<p class="NDLRefHead1">Construction and Destruction</p>


<a name="class_ni_p_s_aligned_quad_generator_1a57dd72fc3371edce9e11a21afff259eb"></a>
<p class="NDLRefMemberFunction">NiPSAlignedQuadGenerator()</p>
<p class="NDLRefMemberDescription">Default constructor. </p>
<a name="base_class_overrides"></a>
<p class="NDLRefHead1">Base Class Overrides</p>


<a name="class_ni_p_s_aligned_quad_generator_1af98015b08844b2b5e71bcac65375683f"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  Attach(<span class="NDLSystemFont"><a href="../NiMesh/NiMesh.htm">NiMesh</a></span>* pkMesh)</p>
<p class="NDLRefMemberDescription">Attach is called when a modifier is attached to a mesh or is otherwise required to do any set-up need for updating. </p>
<p class="NDLRefMemberDetailedDescription">Most commonly, the modifier will add <span class="NDLSystemFont"><a href="../NiFloodgate/NiStreamProcessor.htm">NiStreamProcessor</a></span> (Floodgate) tasks and attach kernels, input streams, output streams, etc. Any of these streams may be associated with a data stream on the mesh.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">AreRequirementsMet should be called prior to this method. This allows Attach to be leaner in implementation. This behavior is enforced by <span class="NDLSystemFont"><a href="../NiMesh/NiMesh.htm">NiMesh</a></span>. </p></p>

<a name="class_ni_p_s_aligned_quad_generator_1ada11495555bed480530152e209702a29"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  Detach(<span class="NDLSystemFont"><a href="../NiMesh/NiMesh.htm">NiMesh</a></span>* pkMesh)</p>
<p class="NDLRefMemberDescription">Performs any work needed to remove the modifier from a mesh. </p>
<p class="NDLRefMemberDetailedDescription">The calling function is responsible for ensuring that all outstanding Floodgate tasks are completed. All tasks should be deleted, streams released, etc. Code in this function can assume that CompleteTasks has been performed for all sync points. </p>

<a name="class_ni_p_s_aligned_quad_generator_1abeb94918cecb62d6bb4c8dbeb7cdae81"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  SubmitTasks(<br/><span class="NDLSystemFont"><a href="../NiMesh/NiMesh.htm">NiMesh</a></span>* pkMesh, <br/><span class="NDLSystemFont"><a href="../NiMain/NiSyncArgs.htm">NiSyncArgs</a></span>* pkArgs, <br/><span class="NDLSystemFont"><a href="../NiFloodgate/NiSPWorkflowManager.htm">NiSPWorkflowManager</a></span>* pkWFManager)</p>
<p class="NDLRefMemberDescription">This function is the entry point for an update, when a parallel processing modifier will submit its Floodgate tasks to the given workflow manager. </p>
<p class="NDLRefMemberDetailedDescription">Mesh modifiers that do not do any parallel work may choose to use this function as the primary work function. It will be called whenever a specific supported start sync point is hit.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">NiMeshModifier-derived classes must construct a Task Group ID for use with the <span class="NDLSystemFont"><a href="../NiFloodgate/NiSPWorkflowManager.htm">NiSPWorkflowManager</a></span> class using the <span class="NDLSystemFont"><a href="../NiMain/NiSyncArgs.htm">NiSyncArgs::GetTaskGroupID(SyncPoint, SyncPoint)</a></span> function. </p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pkMesh</span></td>
    <td>The mesh to which the modifier is attached. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkArgs</span></td>
    <td>Information about the sync point to submit for. If the submit point is specific, then the pkArgs is guaranteed to be of a matching type. When the submit point is SYNC_UPDATE or SYNC_POST_UPDATE, pkArgs is of type <span class="NDLSystemFont"><a href="../NiMain/NiUpdateSyncArgs.htm">NiUpdateSyncArgs</a></span>. When the submit point is SYNC_VISIBLE, pkArgs is of type <span class="NDLSystemFont"><a href="../NiMain/NiCullingSyncArgs.htm">NiCullingSyncArgs</a></span>. No specific type is guaranteed at other times. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkWFManager</span></td>
    <td>The workflow manager object that is to be used for Floodgate tasks. Tasks should be submitted using the functions provided by the workflow manager, and a <span class="NDLSystemFont"><a href="../NiFloodgate/NiSPWorkflow.htm">NiSPWorkflow</a></span> object will typically be provided in return. Mesh modifiers must hold on to the returned workflow in a smart pointer, as it is the only handle they have for completing the tasks and cleaning up.</td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The function should return true if any tasks are submitted to the workflow manager.</td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_p_s_aligned_quad_generator_1a8ac7924ceb8017dcda029d797e71f44b"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  CompleteTasks(<br/><span class="NDLSystemFont"><a href="../NiMesh/NiMesh.htm">NiMesh</a></span>* pkMesh, <br/><span class="NDLSystemFont"><a href="../NiMain/NiSyncArgs.htm">NiSyncArgs</a></span>* pkArgs)</p>
<p class="NDLRefMemberDescription">This function is used to force tasks to complete. </p>
<p class="NDLRefMemberDetailedDescription">Tasks with the given start and end sync points must be forced to complete. The value NiAVObject::SYNC_ANY may be given for either the start or end sync point, in which case all the tasks starting or ending at that point should be completed. After completing all the tasks for a particular <span class="NDLSystemFont"><a href="../NiFloodgate/NiSPWorkflow.htm">NiSPWorkflow</a></span> object, any smart pointers to that workflow should be released.</p>
<p class="NDLRefMemberDetailedDescription">Mesh modifiers should, in this function, also do any other work required to complete an update step, such as computations that depend on the output of the Floodgate tasks.</p>
<p class="NDLRefMemberDetailedDescription">Mesh modifiers that do not use Floodgate could use this function to perform any work associated with the given pair of sync points.</p>
<p class="NDLRefMemberDetailedDescription">This function will only be called with SYNC_ANY or sync points that have been specified as starting or ending. There is no guarantee that the pkArgs variable is of any specific type.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>The function should return true if tasks were successfully completed. False indicates an error condition. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_p_s_aligned_quad_generator_1a8d90fe3c25dcf80169076613cda50548"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  IsComplete(<br/><span class="NDLSystemFont"><a href="../NiMesh/NiMesh.htm">NiMesh</a></span>* pkMesh, <br/><span class="NDLSystemFont"><a href="../NiMain/NiSyncArgs.htm">NiSyncArgs</a></span>* pkArgs)</p>
<p class="NDLRefMemberDescription">Returns true if the mesh modifier has completed all required work for the provided sync points. </p>

<a name="class_ni_p_s_aligned_quad_generator_1a58d2fdaeb073d38f19f7f03470ec3c81"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  AreRequirementsMet(<br/><span class="NDLSystemFont"><a href="../NiMesh/NiMesh.htm">NiMesh</a></span>* pkMesh, <br/>NiSystemDesc::RendererID ePlatform) const</p>
<p class="NDLRefMemberDescription">Validates the data stream requirements against the mesh. </p>
<p class="NDLRefMemberDetailedDescription">A caller may choose to remove the mesh modifier if the mesh does not satisfy the requirements.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">In some cases, NiSystemDesc::RENDERER_GENERIC is passed into this method. In those scenarios, it should be treated as if any renderer is being passed in. If certain requirements are renderer specific allow RENDERER_GENERIC satisfy those requirements. </p></p>

<a name="class_ni_p_s_aligned_quad_generator_1ab9ab0d2b841bc5dc630c9156194434aa"></a>
<p class="NDLRefMemberFunction">virtual void  RetrieveRequirements(<span class="NDLSystemFont"><a href="../NiMesh/NiMeshRequirements.htm">NiMeshRequirements</a></span>& kRequirements) const</p>
<p class="NDLRefMemberDescription">Retrieve the requirements from the mesh modifier. </p>
<a name="animating_sprite_texture_over_the_particle's_lifespan"></a>
<p class="NDLRefHead1">Animating sprite texture over the particle's lifespan</p>

<p class="NDLRefMemberDescription">These functions provide access to the variables controlling the animation of the texture applied to each particle over its lifespan.</p>
<p class="NDLRefMemberDescription">A single texture holds several frames for the texture animation. The LoopBehavior specifies the sequencing through the frames while the initial and final frames along with the initial and final times specifies how quickly to run through the sequence. </p>

<a name="class_ni_p_s_aligned_quad_generator_1abba1f195fdee77b0e29e21462d8895f2"></a>
<p class="NDLRefMemberFunction">void  SetUVScrolling(const <span class="NDLSystemFont">bool</span> bValue)</p>
<p class="NDLRefMemberDescription">Specify whether or not to scroll smoothly through texture coordinates or snap to frames in the sprite animation texture. </p>
<p class="NDLRefMemberDetailedDescription">If true, the texture coordinates can vary continuously. In effect, this textures the sprite with a sliding window over the texture, which gives a particular effect that might be good in some cases such as con trails, or lightning.</p>
<p class="NDLRefMemberDetailedDescription">If false, the sprite will always show a complete frame. </p>

<a name="class_ni_p_s_aligned_quad_generator_1afc574ecf3d929bf87c9dc935b1f4124b"></a>
<p class="NDLRefMemberFunction">void  SetNumFramesAcross(const <span class="NDLSystemFont">NiUInt16</span> uiValue)</p>
<p class="NDLRefMemberDescription">Specify the number of frames across in the supplied texture. </p>

<a name="class_ni_p_s_aligned_quad_generator_1aa61946769871ce18f1e86979a5091238"></a>
<p class="NDLRefMemberFunction">void  SetNumFramesDown(const <span class="NDLSystemFont">NiUInt16</span> uiValue)</p>
<p class="NDLRefMemberDescription">Specify the number of frames down in the supplied texture. </p>

<a name="class_ni_p_s_aligned_quad_generator_1a4225db3bc21a371ee01bf9233b32c390"></a>
<p class="NDLRefMemberFunction">void  SetPingPong(const <span class="NDLSystemFont">bool</span> bValue)</p>
<p class="NDLRefMemberDescription">Specify if we wish to ping pong when sprite texture animation frames are played. </p>

<a name="class_ni_p_s_aligned_quad_generator_1afcf280325a526a634558edb2d5f43199"></a>
<p class="NDLRefMemberFunction">void  SetInitialFrame(const <span class="NDLSystemFont">NiUInt16</span> uiValue)</p>
<p class="NDLRefMemberDescription">Specify the initial texture frame to be displayed. </p>

<a name="class_ni_p_s_aligned_quad_generator_1ab63132d0271efed9d3df0e8fa1877558"></a>
<p class="NDLRefMemberFunction">void  SetInitialFrameVar(const float fValue)</p>
<p class="NDLRefMemberDescription">Specify the initial texture frame variance. </p>

<a name="class_ni_p_s_aligned_quad_generator_1a684f9306dadb7d4e521f37554073fde0"></a>
<p class="NDLRefMemberFunction">void  SetNumFrames(const <span class="NDLSystemFont">NiUInt16</span> uiValue)</p>
<p class="NDLRefMemberDescription">Specify the number of frames to play. </p>

<a name="class_ni_p_s_aligned_quad_generator_1a41130514113de59f5213db7a323512d9"></a>
<p class="NDLRefMemberFunction">void  SetNumFramesVar(const float fValue)</p>
<p class="NDLRefMemberDescription">Specify the number of frames to play variance. </p>

<a name="class_ni_p_s_aligned_quad_generator_1a89d28e38b5c722423fd565a39e9aee51"></a>
<p class="NDLRefMemberFunction">void  SetInitialTime(const float fValue)</p>
<p class="NDLRefMemberDescription">Specify the time that the initial texture frame should be displayed. </p>

<a name="class_ni_p_s_aligned_quad_generator_1a3b38fa4f8dce959cafcc424b407da647"></a>
<p class="NDLRefMemberFunction">void  SetFinalTime(const float fValue)</p>
<p class="NDLRefMemberDescription">Specify the time that the final texture frame should be displayed. </p>

<a name="class_ni_p_s_aligned_quad_generator_1adce50dcc8d74f952a57bbc85505d46cc"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetUVScrolling() const</p>
<p class="NDLRefMemberDescription">Returns true when scrolling smoothly through texture coordinates or false when snapping to frames in the sprite animation texture. </p>
<p class="NDLRefMemberDetailedDescription">If true, the texture coordinates can vary continuously. In effect, this textures the sprite with a sliding window over the texture, which gives a particular effect that might be good in some cases such as con trails, or lightning.</p>
<p class="NDLRefMemberDetailedDescription">If false, the sprite will always show a complete frame. </p>

<a name="class_ni_p_s_aligned_quad_generator_1ac8ec90293b93df22fac9909eb4e4dcf6"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt16</span>  GetNumFramesAcross() const</p>
<p class="NDLRefMemberDescription">Returns the number of frames across in the supplied texture. </p>

<a name="class_ni_p_s_aligned_quad_generator_1a69f0fb865b31da8428ecf0e1a17b5871"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt16</span>  GetNumFramesDown() const</p>
<p class="NDLRefMemberDescription">Returns the number of frames down in the supplied texture. </p>

<a name="class_ni_p_s_aligned_quad_generator_1a020e8a86845b4a4607c7b7b04be097db"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetPingPong() const</p>
<p class="NDLRefMemberDescription">Returns the ping pong state of the sprite texture animation . </p>

<a name="class_ni_p_s_aligned_quad_generator_1a41b44d660f768442ec5bef31a6a8c993"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt16</span>  GetInitialFrame() const</p>
<p class="NDLRefMemberDescription">Returns the initial texture frame to be displayed. </p>

<a name="class_ni_p_s_aligned_quad_generator_1a58707c8561007333ffcff94f391e71a5"></a>
<p class="NDLRefMemberFunction">float  GetInitialFrameVar() const</p>
<p class="NDLRefMemberDescription">Returns the initial texture frame variance. </p>

<a name="class_ni_p_s_aligned_quad_generator_1a5aa3a90609f5465460f7472749495c29"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt16</span>  GetNumFrames() const</p>
<p class="NDLRefMemberDescription">Returns the number of frames to play. </p>

<a name="class_ni_p_s_aligned_quad_generator_1a09560ef7c07a145fe1476b0dfb5e8209"></a>
<p class="NDLRefMemberFunction">float  GetNumFramesVar() const</p>
<p class="NDLRefMemberDescription">Returns the number of frames to play variance. </p>

<a name="class_ni_p_s_aligned_quad_generator_1a77edd9bdae62625b23c57c648a516079"></a>
<p class="NDLRefMemberFunction">float  GetInitialTime() const</p>
<p class="NDLRefMemberDescription">Returns the time that the initial texture frame should be displayed. </p>

<a name="class_ni_p_s_aligned_quad_generator_1ab10c607dae01de3808e745b994886c3e"></a>
<p class="NDLRefMemberFunction">float  GetFinalTime() const</p>
<p class="NDLRefMemberDescription">Returns the time that the final texture frame should be displayed. </p>

<a name="class_ni_p_s_aligned_quad_generator_1afd12c60819bdb12f977d173b10e49fba"></a>
<p class="NDLRefMemberFunction">void  SetCenterU(const float fValue)</p>
<p class="NDLRefMemberDescription">Specify a pivot point offset in the U direction. </p>
<p class="NDLRefMemberDetailedDescription">The point at which the particles will rotate. </p>

<a name="class_ni_p_s_aligned_quad_generator_1addebef80532d1c3667e315be9eae9643"></a>
<p class="NDLRefMemberFunction">void  SetCenterV(const float fValue)</p>
<p class="NDLRefMemberDescription">Specify a pivot point offset in the V direction. </p>
<p class="NDLRefMemberDetailedDescription">The point at which the particles will rotate. </p>

<a name="class_ni_p_s_aligned_quad_generator_1a47a9852ac02b94a8774f84d89099ac5c"></a>
<p class="NDLRefMemberFunction">float  GetCenterU() const</p>
<p class="NDLRefMemberDescription">Returns the pivot point offset in the U direction. </p>
<p class="NDLRefMemberDetailedDescription">The point at which the particles will rotate. </p>

<a name="class_ni_p_s_aligned_quad_generator_1a4b1b7afdb76b9b34a3ab342ecebad359"></a>
<p class="NDLRefMemberFunction">float  GetCenterV() const</p>
<p class="NDLRefMemberDescription">Returns the pivot point offset in the V direction. </p>
<p class="NDLRefMemberDetailedDescription">The point at which the particles will rotate. </p>
<a name="stretching/squashing_with_speed"></a>
<p class="NDLRefHead1">Stretching/Squashing with Speed</p>

<p class="NDLRefMemberDescription">These functions provide access to the variables controlling the shape of the particle as a function of particle speed.</p>
<p class="NDLRefMemberDescription">The V direction is up (the V direction of a texture applied to the particle) while U is perpendicular to V. </p>

<a name="class_ni_p_s_aligned_quad_generator_1a4481375f923567a9154eff23cc87e70b"></a>
<p class="NDLRefMemberFunction">void  SetScaleAmountU(const float fValue)</p>
<p class="NDLRefMemberDescription">Specify a ratio for stretching/squashing of particles along the U direction with respect to the velocity. </p>
<p class="NDLRefMemberDetailedDescription">A positive ratio will stretch particles up to a limited scale specified using SetScaleLimitU. A positive ratio will squash particles down to a limited scale specified using SetScaleLimitU. </p>

<a name="class_ni_p_s_aligned_quad_generator_1abcf4e53a75f289eee2eb88fc0f5a0f1e"></a>
<p class="NDLRefMemberFunction">void  SetScaleLimitU(const float fValue)</p>
<p class="NDLRefMemberDescription">Specify a limit for stretching/squashing of particles along the U direction. </p>
<p class="NDLRefMemberDetailedDescription">Set limit &lt;1 for a positive ratio (stretching). Set limit&gt; 1 for a negative ratio (squashing). </p>

<a name="class_ni_p_s_aligned_quad_generator_1a63ebe0b8c0f64b894886fd6f83035242"></a>
<p class="NDLRefMemberFunction">void  SetScaleRestU(const float fValue)</p>
<p class="NDLRefMemberDescription">Specify a scale for stretching/squashing of particles along the U direction when the speed is zero. </p>
<p class="NDLRefMemberDetailedDescription">Set limit &lt;rest for a positive ratio (stretching). Set limit&gt; rest for a negative ratio (squashing). </p>

<a name="class_ni_p_s_aligned_quad_generator_1a016c9f4b6b1c43142c4cb5709eb627a8"></a>
<p class="NDLRefMemberFunction">void  SetScaleAmountV(const float fValue)</p>
<p class="NDLRefMemberDescription">Specify a ratio for stretching/squashing of particles along the V direction with respect to the velocity. </p>
<p class="NDLRefMemberDetailedDescription">A positive ratio will stretch particles up to a limited scale specified using SetScaleLimitV. A negative ratio will squash particles down to a limited scale specified using SetScaleLimitV. </p>

<a name="class_ni_p_s_aligned_quad_generator_1a0afcf0e661168cceefc179832f32e7dc"></a>
<p class="NDLRefMemberFunction">void  SetScaleLimitV(const float fValue)</p>
<p class="NDLRefMemberDescription">Specify a limit for stretching/squashing of particles along the V direction. </p>
<p class="NDLRefMemberDetailedDescription">Set limit &lt;1 for a positive ratio (stretching). Set limit&gt; 1 for a negative ratio (squashing). </p>

<a name="class_ni_p_s_aligned_quad_generator_1aa0c3033bb6b179daaebbc153853ed36a"></a>
<p class="NDLRefMemberFunction">void  SetScaleRestV(const float fValue)</p>
<p class="NDLRefMemberDescription">Specify a scale for stretching/squashing of particles along the V direction when the speed is zero. </p>
<p class="NDLRefMemberDetailedDescription">Set limit &lt;rest for a positive ratio (stretching). Set limit&gt; rest for a negative ratio (squashing). </p>

<a name="class_ni_p_s_aligned_quad_generator_1aa551a144b39430c7ace49d56a121c3e0"></a>
<p class="NDLRefMemberFunction">float  GetScaleAmountU() const</p>
<p class="NDLRefMemberDescription">Returns the ratio for stretching/squashing of particles along the U direction with respect to the velocity. </p>
<p class="NDLRefMemberDetailedDescription">A positive ratio will stretch particles up to a limited scale specified using SetScaleLimitU. A positive ratio will squash particles down to a limited scale specified using SetScaleLimitU. </p>

<a name="class_ni_p_s_aligned_quad_generator_1a7285f8445936c46aa01270270dd6d671"></a>
<p class="NDLRefMemberFunction">float  GetScaleLimitU() const</p>
<p class="NDLRefMemberDescription">Returns the limit for stretching/squashing of particles along the U direction. </p>

<a name="class_ni_p_s_aligned_quad_generator_1a6c8a2f6d35dec037ff68df179140520d"></a>
<p class="NDLRefMemberFunction">float  GetScaleRestU() const</p>
<p class="NDLRefMemberDescription">Returns the scale for stretching/squashing of particles along the U direction when the speed is zero. </p>

<a name="class_ni_p_s_aligned_quad_generator_1a5964e2e5c5c9927fa833160cd75cbc45"></a>
<p class="NDLRefMemberFunction">float  GetScaleAmountV() const</p>
<p class="NDLRefMemberDescription">Returns the ratio for stretching/squashing of particles along the V direction with respect to the velocity. </p>
<p class="NDLRefMemberDetailedDescription">A positive ratio will stretch particles up to a limited scale specified using SetScaleLimitV. A negative ratio will squash particles down to a limited scale specified using SetScaleLimitV. </p>

<a name="class_ni_p_s_aligned_quad_generator_1a469d44930a6697d666135be601b06623"></a>
<p class="NDLRefMemberFunction">float  GetScaleLimitV() const</p>
<p class="NDLRefMemberDescription">Returns the limit for stretching/squashing of particles along the V direction. </p>

<a name="class_ni_p_s_aligned_quad_generator_1ad8bb6bf3c3ce2da636c33757405177c7"></a>
<p class="NDLRefMemberFunction">float  GetScaleRestV() const</p>
<p class="NDLRefMemberDescription">Returns the scale for stretching/squashing of particles along the V direction when the speed is zero. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
