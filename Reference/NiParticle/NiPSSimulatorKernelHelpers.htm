<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiPSSimulatorKernelHelpers</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiPSSimulatorKernelHelpers</p>


<p class="NDLRefHeaderFile">&lt;NiPSSimulatorKernelHelpers.h&gt;</p>


<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">Contains static helper functions used for various particle simulation tasks. </p>
<p class="NDLNormal">The <span class="NDLSystemFont"><a href="NiPSSimulatorGeneralKernel.htm">NiPSSimulatorGeneralKernel</a></span> and <span class="NDLSystemFont"><a href="NiPSSimulatorFinalKernel.htm">NiPSSimulatorFinalKernel</a></span> Floodgate kernels call the static helper functions contained in this class to implement various aspects of the particle simulation.</p>
<p class="NDLNormal">Due to the implementation of Floodgate kernels on different platforms, it is necessary that all output (non-const) parameters to these functions get set to some value. It is not valid to simply not set an output value, as garbage memory could result on some platforms. </p>

<a name="public_static_methods"></a>
<p class="NDLRefHead1">Public Static Methods</p>


<a name="class_ni_p_s_simulator_kernel_helpers_1a2db5c22e7537b88b456ece48f648d5b2"></a>
<p class="NDLRefMemberFunction">static void  UpdateParticlePosition(<br/><span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kOPosition, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kIPosition, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kIVelocity, <br/>const float fILastUpdate, <br/>const float fCurrentTime)</p>
<p class="NDLRefMemberDescription">Updates a particle's new position based on its current position, its velocity, and the time delta since the last update. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kOPosition</span></td>
    <td>The computed new position of the particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kIPosition</span></td>
    <td>The current position of the particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kIVelocity</span></td>
    <td>The velocity of the particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fILastUpdate</span></td>
    <td>The last time at which the particle was updated. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fCurrentTime</span></td>
    <td>The current simulation time. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_p_s_simulator_kernel_helpers_1ae3b22650c4972f67ce8d5eee6ffce564"></a>
<p class="NDLRefMemberFunction">static void  UpdateParticleSize(<br/>float& fOSize, <br/>const <span class="NDLSystemFont">NiUInt16</span> usIGeneration, <br/>const float fIAge, <br/>const float fILifeSpan, <br/>const float fGrowTime, <br/>const float fShrinkTime, <br/>const <span class="NDLSystemFont">NiUInt16</span> usGrowGeneration, <br/>const <span class="NDLSystemFont">NiUInt16</span> usShrinkGeneration, <br/>const <span class="NDLSystemFont">NiUInt8</span> ucNumKeys, <br/>const <span class="NDLSystemFont"><a href="NiPSKernelFloatKey.htm">NiPSKernelFloatKey</a></span>* pkKeys, <br/>const <span class="NDLSystemFont">NiPSLoopBehavior</span> eLoopBehavior)</p>
<p class="NDLRefMemberDescription">Calculates the size parameter for a particle based on its grow/shrink settings and animation keys. </p>
<p class="NDLRefMemberDetailedDescription">The size value for a particle ranges from 0.0 to 1.0 and is multiplied by the particle initial size to calculate the final particle size.</p>
<p class="NDLRefMemberDetailedDescription">Size keys are linearly interpolated.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">fOSize</span></td>
    <td>The computed particle size. Will be between 0.0 and 1.0. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">usIGeneration</span></td>
    <td>The generation of the particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fIAge</span></td>
    <td>The age of the particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fILifeSpan</span></td>
    <td>The life span of the particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fGrowTime</span></td>
    <td>The time in seconds during which the particle size will be ramped from 0.0 to 1.0. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fShrinkTime</span></td>
    <td>The time in seconds during which the particle size will be ramped from 1.0 to 0.0. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">usGrowGeneration</span></td>
    <td>The generation during which the particle will grow. If the particle's generation is different from this value, no grow computation will be applied. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">usShrinkGeneration</span></td>
    <td>The generation during which the particle will shrink. If the particle's generation is different from this value, no shrink computation will be applied. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">ucNumKeys</span></td>
    <td>The number of size animation keys. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkKeys</span></td>
    <td>An array of size keys that specify size animation over the lifetime of the particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">eLoopBehavior</span></td>
    <td>The desired looping behavior. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_p_s_simulator_kernel_helpers_1ac0f4eb7f1bc9997ccb2ada476eca1c60"></a>
<p class="NDLRefMemberFunction">static void  UpdateParticleColor(<br/><span class="NDLSystemFont"><a href="../NiMain/NiRGBA.htm">NiRGBA</a></span>& kOColor, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiRGBA.htm">NiRGBA</a></span>& kIColor, <br/>const float fIAge, <br/>const float fILifeSpan, <br/>const <span class="NDLSystemFont">NiUInt8</span> ucNumKeys, <br/>const <span class="NDLSystemFont"><a href="NiPSKernelColorKey.htm">NiPSKernelColorKey</a></span>* pkKeys, <br/>const <span class="NDLSystemFont">NiPSLoopBehavior</span> eLoopBehavior, <br/>const <span class="NDLSystemFont">NiUInt8</span> ucBGRA)</p>
<p class="NDLRefMemberDescription">Performs color animation for a particle. </p>
<p class="NDLRefMemberDetailedDescription">A color key array is used to determine the color of a particle throughout its life time. Color keys are linearly interpolated. If no keys are present, the existing color is copied to the output.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kOColor</span></td>
    <td>The computed color for the particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kIColor</span></td>
    <td>The current color for the particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fIAge</span></td>
    <td>The age of the particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fILifeSpan</span></td>
    <td>The life span of the particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">ucNumKeys</span></td>
    <td>The number of color animation keys. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkKeys</span></td>
    <td>An array of color keys that specify color animation over the lifetime of the particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">eLoopBehavior</span></td>
    <td>The desired looping behavior. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">ucBGRA</span></td>
    <td>Support for BGRA format. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_p_s_simulator_kernel_helpers_1a563df19f71b553d5810321375cb32d89"></a>
<p class="NDLRefMemberFunction">static void  UpdateParticleRotation(<br/>float& fORotAngle, <br/>const float fIRotAngle, <br/>const float fIRotSpeed, <br/>const float fIAge, <br/>const float fILifeSpan, <br/>const <span class="NDLSystemFont">NiUInt8</span> ucNumKeys, <br/>const <span class="NDLSystemFont"><a href="NiPSKernelFloatKey.htm">NiPSKernelFloatKey</a></span>* pkKeys, <br/>const <span class="NDLSystemFont">NiPSLoopBehavior</span> eLoopBehavior)</p>
<p class="NDLRefMemberDescription">Updates the rotation angle for a particle based on its rotation speed. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">fORotAngle</span></td>
    <td>The computed rotation angle for the particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fIRotAngle</span></td>
    <td>The initial rotation angle for the particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fIRotSpeed</span></td>
    <td>The rotation speed for the particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fIAge</span></td>
    <td>The age of the particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fILifeSpan</span></td>
    <td>The life span of the particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">ucNumKeys</span></td>
    <td>The number of rotation animation keys. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkKeys</span></td>
    <td>An array of rotation keys that specify rotation animation over the lifetime of the particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">eLoopBehavior</span></td>
    <td>The desired looping behavior. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_p_s_simulator_kernel_helpers_1a3038d4434831ebec846a4aa4c337df52"></a>
<p class="NDLRefMemberFunction">static void  UpdateParticleAgeDeath(<br/>float& fOAge, <br/>float& fOLastUpdateTime, <br/><span class="NDLSystemFont">NiUInt32</span>& uiOFlags, <br/>const float fIAge, <br/>const float fILifeSpan, <br/>const float fILastUpdateTime, <br/>const <span class="NDLSystemFont">NiUInt32</span> uiIFlags, <br/>const float fCurrentTime, <br/>const <span class="NDLSystemFont">bool</span> bSpawnOnDeath, <br/>const <span class="NDLSystemFont">NiUInt16</span> ucSpawnerID)</p>
<p class="NDLRefMemberDescription">Updates the age of a particle, killing off the particle if its age exceeds its life time. </p>
<p class="NDLRefMemberDetailedDescription">When a particle is killed, the appropriate bits in its flags bitfield are set. If bSpawnOnDeath is specified, the appropriate bit will be set in the particle flags, along with the spawner ID specified by ucSpawnerID. Killed and spawned particles will be resolved when the simulation completes.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">fOAge</span></td>
    <td>The computed age of the particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fOLastUpdateTime</span></td>
    <td>Holds the time of death if bSpawnOnDeath is true and the particle has died. Otherwise, the input last update time is simply passed through to this parameter. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiOFlags</span></td>
    <td>The updated particle flags bitfield. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fIAge</span></td>
    <td>The current age of the particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fILifeSpan</span></td>
    <td>The life span of the particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fILastUpdateTime</span></td>
    <td>The last time at which the particle was updated. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiIFlags</span></td>
    <td>The current particle flags bitfield. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fCurrentTime</span></td>
    <td>The current simulation time. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">bSpawnOnDeath</span></td>
    <td>Whether or not the spawn flag should be set for the particle if it has been killed. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">ucSpawnerID</span></td>
    <td>The spawner ID to use when spawing on death. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_p_s_simulator_kernel_helpers_1a4aa24fa6ab9ba4c3105280fc65fd442c"></a>
<p class="NDLRefMemberFunction">static void  UpdateMeshAlignmentFF(<br/>float& fOScale, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kIVelocity, <br/>const float fIRadius, <br/>const float fISize, <br/>const float fScaleAmount = 0.0f, <br/>const float fScaleRest = 0.0f, <br/>const float fScaleLimit = 10e6f)</p>
<p class="NDLRefMemberDescription">Updates the transformation of a mesh particle and applies velocity-driven scaling when the alignment of the particle is given by a constant up and constant normal. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<p class="NDLRefMemberDetailedDescription">This function does not set the rotation - the calling code must do that. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">fOScale</span></td>
    <td>The computed scale of the mesh particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kIVelocity</span></td>
    <td>The velocity of the particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fIRadius</span></td>
    <td>The radius of the particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fISize</span></td>
    <td>The size of the particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fScaleAmount</span></td>
    <td>The amount of scaling increases as the speed increases. If negative, the particle will shrink as the speed increases. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fScaleRest</span></td>
    <td>The scale when the speed is zero. This value must not be the same as the limit. If the Scale Amount is positive, this value must be less than the limit. If the Scale Amount is negative, it must be greater than the limit. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fScaleLimit</span></td>
    <td>The maximum value for scale (or the minimum if the scale amount is negative). The scale will approach this value as the speed goes to infinity.</td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_p_s_simulator_kernel_helpers_1a87a6fe056ae532cde5014b57af1dbbe3"></a>
<p class="NDLRefMemberFunction">static void  UpdateMeshAlignmentFFR(<br/><span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kORotCol0, <br/><span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kORotCol1, <br/><span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kORotCol2, <br/>float& fOScale, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiMatrix3.htm">NiMatrix3</a></span>& kIBasis, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kIVelocity, <br/>const float fIRadius, <br/>const float fISize, <br/>const float fIRotAngle, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& fIRotAxis, <br/>const float fIAge, <br/>const float fILifeSpan, <br/>const <span class="NDLSystemFont">NiUInt8</span> ucNumRotationKeys, <br/>const <span class="NDLSystemFont"><a href="NiPSKernelQuaternionKey.htm">NiPSKernelQuaternionKey</a></span>* pkKeys, <br/>const <span class="NDLSystemFont">NiPSLoopBehavior</span> eLoopBehavior, <br/>const float fScaleAmount = 0.0f, <br/>const float fScaleRest = 0.0f, <br/>const float fScaleLimit = 10e6f)</p>
<p class="NDLRefMemberDescription">Updates the transformation of a mesh particle and applies velocity-driven scaling when the alignment of the particle is given by a constant up and constant normal, and particles have per-particle rotations. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kORotCol0</span></td>
    <td>The first column of the computed rotation of the mesh particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kORotCol1</span></td>
    <td>The second column of the computed rotation of the mesh particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kORotCol2</span></td>
    <td>The third column of the computed rotation of the mesh particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fOScale</span></td>
    <td>The computed scale of the mesh particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kIBasis</span></td>
    <td>The matrix defining the desired fixed orientation for the particles. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kIVelocity</span></td>
    <td>The velocity of the particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fIRadius</span></td>
    <td>The radius of the particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fISize</span></td>
    <td>The size of the particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fIRotAngle</span></td>
    <td>The rotation angle of the particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fIRotAxis</span></td>
    <td>The rotation axis of the particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fIAge</span></td>
    <td>The age of the particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fILifeSpan</span></td>
    <td>The life span of the particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">ucNumRotationKeys</span></td>
    <td>The number of rotation animation keys. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkKeys</span></td>
    <td>An array of rotation keys that specify rotation animation over the lifetime of the particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">eLoopBehavior</span></td>
    <td>The desired looping behavior. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fScaleAmount</span></td>
    <td>The amount of scaling increases as the speed increases. If negative, the particle will shrink as the speed increases. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fScaleRest</span></td>
    <td>The scale when the speed is zero. This value must not be the same as the limit. If the Scale Amount is positive, this value must be less than the limit. If the Scale Amount is negative, it must be greater than the limit. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fScaleLimit</span></td>
    <td>The maximum value for scale (or the minimum if the scale amount is negative). The scale will approach this value as the speed goes to infinity. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_p_s_simulator_kernel_helpers_1ad8f7f21ff87530e7b5b53de682e1b141"></a>
<p class="NDLRefMemberFunction">static void  UpdateMeshAlignmentVV(<br/><span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kORotCol0, <br/><span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kORotCol1, <br/><span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kORotCol2, <br/>float& fOScale, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kINormal, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kIUp, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kIVelocity, <br/>const float fIRadius, <br/>const float fISize, <br/>const float fScaleAmount = 0.0f, <br/>const float fScaleRest = 0.0f, <br/>const float fScaleLimit = 10e6f)</p>
<p class="NDLRefMemberDescription">Updates the transformation of a mesh particle and applies velocity-driven scaling when the alignment of the particle is given by per-particle up and normal vectors. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kORotCol0</span></td>
    <td>The first column of the computed rotation of the mesh particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kORotCol1</span></td>
    <td>The second column of the computed rotation of the mesh particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kORotCol2</span></td>
    <td>The third column of the computed rotation of the mesh particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fOScale</span></td>
    <td>The computed scale of the mesh particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kINormal</span></td>
    <td>The (normalized) vector to use for the particle normal (x-axis). </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kIUp</span></td>
    <td>The target z-axis direction, which will projected to be perpendicular to the normal. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kIVelocity</span></td>
    <td>The velocity of the particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fIRadius</span></td>
    <td>The radius of the particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fISize</span></td>
    <td>The size of the particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fScaleAmount</span></td>
    <td>The amount of scaling increases as the speed increases. If negative, the particle will shrink as the speed increases. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fScaleRest</span></td>
    <td>The scale when the speed is zero. This value must not be the same as the limit. If the Scale Amount is positive, this value must be less than the limit. If the Scale Amount is negative, it must be greater than the limit. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fScaleLimit</span></td>
    <td>The maximum value for scale (or the minimum if the scale amount is negative). The scale will approach this value as the speed goes to infinity. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_p_s_simulator_kernel_helpers_1aad52d0fa69a57742b590b0469eeb4702"></a>
<p class="NDLRefMemberFunction">static void  UpdateMeshAlignmentVVR(<br/><span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kORotCol0, <br/><span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kORotCol1, <br/><span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kORotCol2, <br/>float& fOScale, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kINormal, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kIUp, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kIVelocity, <br/>const float fIRadius, <br/>const float fISize, <br/>const float fIRotAngle, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& fIRotAxis, <br/>const float fIAge, <br/>const float fILifeSpan, <br/>const <span class="NDLSystemFont">NiUInt8</span> ucNumRotationKeys, <br/>const <span class="NDLSystemFont"><a href="NiPSKernelQuaternionKey.htm">NiPSKernelQuaternionKey</a></span>* pkKeys, <br/>const <span class="NDLSystemFont">NiPSLoopBehavior</span> eLoopBehavior, <br/>const float fScaleAmount = 0.0f, <br/>const float fScaleRest = 0.0f, <br/>const float fScaleLimit = 10e6f)</p>
<p class="NDLRefMemberDescription">Updates the transformation of a mesh particle and applies velocity-driven scaling when the alignment of the particle is given by per-particle up and normal vectors, and particles have per-particle rotations. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kORotCol0</span></td>
    <td>The first column of the computed rotation of the mesh particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kORotCol1</span></td>
    <td>The second column of the computed rotation of the mesh particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kORotCol2</span></td>
    <td>The third column of the computed rotation of the mesh particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fOScale</span></td>
    <td>The computed scale of the mesh particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kINormal</span></td>
    <td>The (normalized) vector to use for the particle normal (x-axis). </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kIUp</span></td>
    <td>The target z-axis direction, which will projected to be perpendicular to the normal. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kIVelocity</span></td>
    <td>The velocity of the particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fIRadius</span></td>
    <td>The radius of the particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fISize</span></td>
    <td>The size of the particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fIRotAngle</span></td>
    <td>The rotation angle of the particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fIRotAxis</span></td>
    <td>The rotation axis of the particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fIAge</span></td>
    <td>The age of the particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fILifeSpan</span></td>
    <td>The life span of the particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">ucNumRotationKeys</span></td>
    <td>The number of rotation animation keys. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkKeys</span></td>
    <td>An array of rotation keys that specify rotation animation over the lifetime of the particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">eLoopBehavior</span></td>
    <td>The desired looping behavior. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fScaleAmount</span></td>
    <td>The amount of scaling increases as the speed increases. If negative, the particle will shrink as the speed increases. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fScaleRest</span></td>
    <td>The scale when the speed is zero. This value must not be the same as the limit. If the Scale Amount is positive, this value must be less than the limit. If the Scale Amount is negative, it must be greater than the limit. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fScaleLimit</span></td>
    <td>The maximum value for scale (or the minimum if the scale amount is negative). The scale will approach this value as the speed goes to infinity. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_p_s_simulator_kernel_helpers_1af4b5ab5390c311b31ef8c111b0a8d525"></a>
<p class="NDLRefMemberFunction">static float  ComputeAnimationTime(<br/>const float fAge, <br/>const float fLife, <br/>const <span class="NDLSystemFont">NiPSLoopBehavior</span> eLoop, <br/>const float fFirstKeyTime, <br/>const float fLastKeyTime)</p>
<p class="NDLRefMemberDescription">Calculate the effective particle animation time. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">fAge</span></td>
    <td>The age of the particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fLife</span></td>
    <td>The lifetime of the particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">eLoop</span></td>
    <td>The desired looping behavior. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fFirstKeyTime</span></td>
    <td>The first time among the keys. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fLastKeyTime</span></td>
    <td>The last time among the keys. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The time with which to sample the keys. </td>
</tr>

        </tbody>
    </table>
</div>


 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
