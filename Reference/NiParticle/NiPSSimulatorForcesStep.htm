<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiPSSimulatorForcesStep</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiPSSimulatorForcesStep</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="NiPSSimulatorStep.htm">NiPSSimulatorStep</a></span></p>


<p class="NDLRefHeaderFile">&lt;NiPSSimulatorForcesStep.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/class_ni_p_s_simulator_forces_step.gif" alt="Inheritance graph for NiPSSimulatorForcesStep"/>
  <p class="FigureCaption">Inheritance graph for NiPSSimulatorForcesStep</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">Encapsulates a Floodgate kernel that simulates particle forces. </p>
<p class="NDLNormal">This simulator step owns an array of <span class="NDLSystemFont"><a href="NiPSForce.htm">NiPSForce</a></span> objects. When the step is updated, it builds a buffer containing the data blocks provided by all the forces and sends it to the Floodgate kernel as a fixed input. This buffer is aligned to 16 bytes, as is each data block contained in the buffer.</p>
<p class="NDLNormal">This step uses the <span class="NDLSystemFont"><a href="NiPSSimulatorForcesKernel.htm">NiPSSimulatorForcesKernel</a></span> Floodgate kernel. The kernel is only executed if one or more forces exist. </p>

<a name="construction_and_destruction"></a>
<p class="NDLRefHead1">Construction and Destruction</p>


<a name="class_ni_p_s_simulator_forces_step_1aaa00b8c60f84cf6e5c7f8d1fb283f2c2"></a>
<p class="NDLRefMemberFunction">NiPSSimulatorForcesStep()</p>
<p class="NDLRefMemberDescription">Default constructor. </p>

<a name="class_ni_p_s_simulator_forces_step_1a40d94b9f0a90b97d1c2b16803c5508e9"></a>
<p class="NDLRefMemberFunction">virtual ~NiPSSimulatorForcesStep()</p>
<p class="NDLRefMemberDescription">Virtual destructor. </p>
<a name="base_class_overrides"></a>
<p class="NDLRefHead1">Base Class Overrides</p>


<a name="class_ni_p_s_simulator_forces_step_1a0e087d1a0ae7bfca9492af44b400691c"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../NiFloodgate/NiSPKernel.htm">NiSPKernel</a></span>*  GetKernel()</p>
<p class="NDLRefMemberDescription">Returns the Floodgate kernel associated with the step, which will be of type <span class="NDLSystemFont"><a href="NiPSSimulatorForcesKernel.htm">NiPSSimulatorForcesKernel</a></span>. </p>

<a name="class_ni_p_s_simulator_forces_step_1a360d8db6b6fb15ab43a8371f72cfe1cb"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">NiUInt16</span>  GetLargestInputStride()</p>
<p class="NDLRefMemberDescription">Returns the largest stride value of all the input streams in the step. </p>

<a name="class_ni_p_s_simulator_forces_step_1aadae4289249cb0da9c69457f0bc07c70"></a>
<p class="NDLRefMemberFunction">virtual void  PrepareInputStream(<br/><span class="NDLSystemFont"><a href="NiPSParticleSystem.htm">NiPSParticleSystem</a></span>* pkParticleSystem, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>& kSemantic, <br/><span class="NDLSystemFont"><a href="../NiFloodgate/NiSPStream.htm">NiSPStream</a></span>* pkStream)</p>
<p class="NDLRefMemberDescription">Prepares the input stream with the specified semantic for execution. </p>
<p class="NDLRefMemberDetailedDescription">The following semantics are recognized: <span class="NDLSystemFont"><a href="NiPSCommonSemantics.htm#class_ni_p_s_common_semantics_1aa3579a49e7dcfa1765e02054adedd4d3">NiPSCommonSemantics::PARTICLEPOSITION</a></span>, <span class="NDLSystemFont"><a href="NiPSCommonSemantics.htm#class_ni_p_s_common_semantics_1a0aae7415b83f863e7bc14d35b963f114">NiPSCommonSemantics::PARTICLEVELOCITY</a></span> and <span class="NDLSystemFont"><a href="NiPSCommonSemantics.htm#class_ni_p_s_common_semantics_1ab0b1dd2ce4174b29a0aa35c7ab4482ae">NiPSCommonSemantics::PARTICLELASTUPDATE</a></span>. Other semantics will assert in Debug builds. </p>

<a name="class_ni_p_s_simulator_forces_step_1ab0f22c1b76edd441fb3022b0057dbf2d"></a>
<p class="NDLRefMemberFunction">virtual void  PrepareOutputStream(<br/><span class="NDLSystemFont"><a href="NiPSParticleSystem.htm">NiPSParticleSystem</a></span>* pkParticleSystem, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>& kSemantic, <br/><span class="NDLSystemFont"><a href="../NiFloodgate/NiSPStream.htm">NiSPStream</a></span>* pkStream)</p>
<p class="NDLRefMemberDescription">Prepares the output stream with the specified semantic for execution. </p>
<p class="NDLRefMemberDetailedDescription">The <span class="NDLSystemFont"><a href="NiPSCommonSemantics.htm#class_ni_p_s_common_semantics_1a0aae7415b83f863e7bc14d35b963f114">NiPSCommonSemantics::PARTICLEVELOCITY</a></span> semantic is the only one recognized. Other semantics will assert in Debug builds. </p>

<a name="class_ni_p_s_simulator_forces_step_1aebf5d80c43b0d5409d6585d50b037984"></a>
<p class="NDLRefMemberFunction">virtual NiSPTaskPtr  Attach(<span class="NDLSystemFont"><a href="NiPSParticleSystem.htm">NiPSParticleSystem</a></span>* pkParticleSystem)</p>
<p class="NDLRefMemberDescription">Creates a task and add several input and output streams, including the fixed inputs. </p>

<a name="class_ni_p_s_simulator_forces_step_1a129e1ef1c7d6567ee4f695d924df9808"></a>
<p class="NDLRefMemberFunction">virtual void  Detach(<span class="NDLSystemFont"><a href="NiPSParticleSystem.htm">NiPSParticleSystem</a></span>* pkParticleSystem)</p>
<p class="NDLRefMemberDescription">Sets all pointers to data streams to NULL. </p>

<a name="class_ni_p_s_simulator_forces_step_1adc4fb04f2e7573d52e6683a0392131ef"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  Update(<br/><span class="NDLSystemFont"><a href="NiPSParticleSystem.htm">NiPSParticleSystem</a></span>* pkParticleSystem, <br/>float fTime)</p>
<p class="NDLRefMemberDescription">Update function called each frame. </p>
<p class="NDLRefMemberDetailedDescription">This function sets the block count on all streams. It iterates through all of the forces associated with the particle systems and constructs a stream of data for the Floodgate task. The function returns true if there are any forces active, and false otherwise. </p>
<a name="force_management_functions"></a>
<p class="NDLRefHead1">Force Management Functions</p>


<a name="class_ni_p_s_simulator_forces_step_1aa86df7f8ab97c7c700101f4187a9ca0a"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  GetForcesCount() const</p>
<p class="NDLRefMemberDescription">Returns the number of force objects owned by the step. </p>

<a name="class_ni_p_s_simulator_forces_step_1aa3a59c99d4f4f1225e1aff0c95f471c5"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiPSForce.htm">NiPSForce</a></span>*  GetForceAt(<span class="NDLSystemFont">NiUInt32</span> uiIndex) const</p>
<p class="NDLRefMemberDescription">Returns the force object stored at an index. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">uiIndex</span></td>
    <td>The index of the force object to get. Must be less than the value returned by GetForcesCount. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The force stored at uiIndex. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_p_s_simulator_forces_step_1acbfafd99cf1b2a842b2aa0f1a3f84c07"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiPSForce.htm">NiPSForce</a></span>*  GetForceByName(const <span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>& kName) const</p>
<p class="NDLRefMemberDescription">Returns the first force found with a particular name. </p>
<p class="NDLRefMemberDetailedDescription">If more than one force exists with the same name, only the first force with that name will be returned by this function.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kName</span></td>
    <td>The name of the force to find. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The force found with the specified name. Will be NULL if no force is found with that name. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_p_s_simulator_forces_step_1a91b293cfb34134b0c6d7496a23d03ed7"></a>
<p class="NDLRefMemberFunction">void  AddForce(<span class="NDLSystemFont"><a href="NiPSForce.htm">NiPSForce</a></span>* pkForce)</p>
<p class="NDLRefMemberDescription">Adds the specified force object to the array of forces for the step. </p>

<a name="class_ni_p_s_simulator_forces_step_1a5beee4c363780f6e11b08f3589276b2d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">NiPSForcePtr</a></span>  SetForceAt(<br/><span class="NDLSystemFont">NiUInt32</span> uiIndex, <br/><span class="NDLSystemFont"><a href="NiPSForce.htm">NiPSForce</a></span>* pkForce)</p>
<p class="NDLRefMemberDescription">Replaces the force stored at an index with another force. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">uiIndex</span></td>
    <td>The index at which to replace the force. Must be less than the value returned by GetForcesCount. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkForce</span></td>
    <td>The force to set at uiIndex. Must not be NULL. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A smart pointer to the force that used to be stored at uiIndex. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_p_s_simulator_forces_step_1aa10a6b12546d79acd305a683e4a55e83"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  RemoveForce(<span class="NDLSystemFont"><a href="NiPSForce.htm">NiPSForce</a></span>* pkForce)</p>
<p class="NDLRefMemberDescription">Removes a force from the step. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pkForce</span></td>
    <td>The force to remove. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Whether or not pkForce was found. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_p_s_simulator_forces_step_1a48295660fd138264e7ee641fc6058b98"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">NiPSForcePtr</a></span>  RemoveForceAt(<span class="NDLSystemFont">NiUInt32</span> uiIndex)</p>
<p class="NDLRefMemberDescription">Removes the force at an index from the step. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">uiIndex</span></td>
    <td>The index of the force to be removed. Must be less than the value returned by GetForcesCount. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A smart pointer to the force that was removed. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_p_s_simulator_forces_step_1a7391e25feda20982881278530a990b9b"></a>
<p class="NDLRefMemberFunction">void  RemoveAllForces()</p>
<p class="NDLRefMemberDescription">Removes all forces from the step. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
