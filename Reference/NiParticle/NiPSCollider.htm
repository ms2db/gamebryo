<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiPSCollider</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiPSCollider</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../NiMain/NiObject.htm">NiObject</a></span></p>


<p class="NDLRefHeaderFile">&lt;NiPSCollider.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/class_ni_p_s_collider.gif" alt="Inheritance graph for NiPSCollider"/>
  <p class="FigureCaption">Inheritance graph for NiPSCollider</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">An abstract base class for all particle colliders. </p>
<p class="NDLNormal">Multiple colliders can be owned by an <span class="NDLSystemFont"><a href="NiPSSimulatorCollidersStep.htm">NiPSSimulatorCollidersStep</a></span> object, which is attached to the <span class="NDLSystemFont"><a href="NiPSSimulator.htm">NiPSSimulator</a></span> mesh modifier of a particle system. Each collider provides a block of memory that contains the data it needs to properly execute. In its Update function, it updates that data as necessary. The <span class="NDLSystemFont"><a href="NiPSSimulatorCollidersStep.htm">NiPSSimulatorCollidersStep</a></span> object will concatenate the data from all its colliders into a single data buffer that gets sent to a Floodgate kernel.</p>
<p class="NDLNormal">In order to apply its collision behavior inside the Floodgate kernel, two functions need to be added for each collider to the <span class="NDLSystemFont"><a href="NiPSColliderHelpers.htm">NiPSColliderHelpers</a></span> class: one to detect a collision and one to handle it. For each particle, the <span class="NDLSystemFont"><a href="NiPSSimulatorCollidersKernel.htm">NiPSSimulatorCollidersKernel</a></span> Floodgate kernel loops over all the colliders, calling the collision detection function for each and providing that collider's data buffer to that function. The closest collider that returns a positive result will have its collision handler function called for the particle, which takes care of updating the particle's position and velocity appropriately.</p>
<p class="NDLNormal">An <span class="NDLSystemFont"><a href="NiPSSpawner.htm">NiPSSpawner</a></span> object may be optionally associated with a collider, which will be used if the collider is set to spawn upon collision. There is also an option for particles to die upon collision. </p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="class_ni_p_s_collider_1a3a2e6a945ec159c8c557ff734d90784c"></a>
<p class="NDLRefMemberFunction">float  GetBounce() const</p>
<p class="NDLRefMemberDescription">Accesses the amount of bounce that particles will have upon collision. </p>
<p class="NDLRefMemberDetailedDescription">The bounce is multiplied by the particle velocity when the collision is handled, so a bounce of 1.0 has no effect. </p>

<a name="class_ni_p_s_collider_1a56552b3094158547eb71a0d4c2086234"></a>
<p class="NDLRefMemberFunction">void  SetBounce(float fBounce)</p>
<p class="NDLRefMemberDescription">Accesses the amount of bounce that particles will have upon collision. </p>
<p class="NDLRefMemberDetailedDescription">The bounce is multiplied by the particle velocity when the collision is handled, so a bounce of 1.0 has no effect. </p>

<a name="class_ni_p_s_collider_1a6a8f97c104ec5b54dd709dc2a6736781"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetSpawnOnCollide() const</p>
<p class="NDLRefMemberDescription">Accesses whether or not new particles should be spawned when a particle collides. </p>
<p class="NDLRefMemberDetailedDescription">How particles get spawned is controlled by the spawner associated with the collider.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">A spawner must be set with SetSpawner when this value is true in order for any particles to spawn. </p></p>

<a name="class_ni_p_s_collider_1a6a19c050afafecb360e8c3bff5d2e96d"></a>
<p class="NDLRefMemberFunction">void  SetSpawnOnCollide(<span class="NDLSystemFont">bool</span> bSpawnOnCollide)</p>
<p class="NDLRefMemberDescription">Accesses the amount of bounce that particles will have upon collision. </p>
<p class="NDLRefMemberDetailedDescription">The bounce is multiplied by the particle velocity when the collision is handled, so a bounce of 1.0 has no effect. </p>

<a name="class_ni_p_s_collider_1a0cd1f0c4e675822b764099f1ebe439ec"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetDieOnCollide() const</p>
<p class="NDLRefMemberDescription">Accesses whether or not particles that collide should immediately die. </p>

<a name="class_ni_p_s_collider_1a8f4dc95c57ccc5989e3d66d87a1540fd"></a>
<p class="NDLRefMemberFunction">void  SetDieOnCollide(<span class="NDLSystemFont">bool</span> bDieOnCollide)</p>
<p class="NDLRefMemberDescription">Accesses the amount of bounce that particles will have upon collision. </p>
<p class="NDLRefMemberDetailedDescription">The bounce is multiplied by the particle velocity when the collision is handled, so a bounce of 1.0 has no effect. </p>

<a name="class_ni_p_s_collider_1a6052690b1dd3dcd1d4245b170f94fdd9"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiPSSpawner.htm">NiPSSpawner</a></span>*  GetSpawner() const</p>
<p class="NDLRefMemberDescription">Accesses the spawner to use when spawning upon collision. </p>
<p class="NDLRefMemberDetailedDescription">The spawner may belong to a different particle system than the collider, if particles are to be spawned from that system.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">A spawner should be set whenever SpawnOnCollide is true. If not, no particles will be spawned. </p></p>

<a name="class_ni_p_s_collider_1af5f8b5530ce813fbc788e74eb5f577ad"></a>
<p class="NDLRefMemberFunction">void  SetSpawner(<span class="NDLSystemFont"><a href="NiPSSpawner.htm">NiPSSpawner</a></span>* pkSpawner)</p>
<p class="NDLRefMemberDescription">Accesses the amount of bounce that particles will have upon collision. </p>
<p class="NDLRefMemberDetailedDescription">The bounce is multiplied by the particle velocity when the collision is handled, so a bounce of 1.0 has no effect. </p>

<a name="class_ni_p_s_collider_1a81b1e0eea2b429f99984734902cec86b"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetActive() const</p>
<p class="NDLRefMemberDescription">Accesses whether or not the collider is active. </p>
<p class="NDLRefMemberDetailedDescription">Inactive colliders will not be included during kernel execution. </p>

<a name="class_ni_p_s_collider_1ad533350525308220477f9142a8abcee8"></a>
<p class="NDLRefMemberFunction">void  SetActive(<span class="NDLSystemFont">bool</span> bActive)</p>
<p class="NDLRefMemberDescription">Accesses the amount of bounce that particles will have upon collision. </p>
<p class="NDLRefMemberDetailedDescription">The bounce is multiplied by the particle velocity when the collision is handled, so a bounce of 1.0 has no effect. </p>

<a name="class_ni_p_s_collider_1a20583bf09a9d9dfa6761bac4e83102ba"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiPSColliderDefinitions.htm#class_ni_p_s_collider_definitions_1a4bed26c6326743278f04f2abfec85c00">NiPSColliderDefinitions::ColliderType</a></span>  GetType() const</p>
<p class="NDLRefMemberDetailedDescription">Returns the type of this collider. </p>

<a name="class_ni_p_s_collider_1a4f31db5871fc432cfe9147e369f2813f"></a>
<p class="NDLRefMemberFunction">virtual size_t  GetDataSize() const = 0</p>
<p class="NDLRefMemberDescription">Returns the size in bytes of the data block provided by the collider. </p>

<a name="class_ni_p_s_collider_1a9248f77ca1025b1f9910d8e7d118f658"></a>
<p class="NDLRefMemberFunction">virtual void*  GetData() const = 0</p>
<p class="NDLRefMemberDescription">Returns a pointer to the data block provided by the collider. </p>

<a name="class_ni_p_s_collider_1ab3b7322e3446a287b202127bf9f4a314"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  Update(<br/><span class="NDLSystemFont"><a href="NiPSParticleSystem.htm">NiPSParticleSystem</a></span>* pkParticleSystem, <br/>float fTime)</p>
<p class="NDLRefMemberDescription">Updates the data for the collider. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
