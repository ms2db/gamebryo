<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiPSSpawner</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiPSSpawner</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../NiMain/NiObject.htm">NiObject</a></span></p>


<p class="NDLRefHeaderFile">&lt;NiPSSpawner.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/class_ni_p_s_spawner.gif" alt="Inheritance graph for NiPSSpawner"/>
  <p class="FigureCaption">Inheritance graph for NiPSSpawner</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">Creates a new particle whose initial parameters are based on an existing particle. </p>
<p class="NDLNormal">Each <span class="NDLSystemFont"><a href="NiPSParticleSystem.htm">NiPSParticleSystem</a></span> object owns a set of <span class="NDLSystemFont">NiPSSpawner</span> objects. It also references a "death spawner", which is used to spawn new particles when particles in that system are killed. Additionally, each <span class="NDLSystemFont"><a href="NiPSCollider.htm">NiPSCollider</a></span> object can optionally reference a spawner from which particles should be spawned upon a collision.</p>
<p class="NDLNormal">The spawner that is referenced by particle systems and particle colliders need not be owned by the same particle system. Thus, it is possible to spawn particles from a different particle system instead of from the current system. This allows spawned particles to look different from the original particles.</p>
<p class="NDLNormal">Each time a particle is spawned, its generation value is incremented. The generation value is used by <span class="NDLSystemFont"><a href="NiPSMeshParticleSystem.htm">NiPSMeshParticleSystem</a></span> objects to determine which master particle to use when emitting the particle. It is also used to grow and shrink particles over time.</p>
<p class="NDLNormal">The number of particles to spawn can be set in this class, along with a randomization value. The speed, direction, and life span for spawned particles can also be randomized. All other particle parameters are copied from the original particle when a particle is spawned.</p>
<p class="NDLNormal">The IDs of spawners are globally managed. At most 255 spawners may be in the application at any one time. After loading or otherwise creating 255 spawners, any attempt to add another spawner will assert in debug builds and fail in other configuration. Deleting a particle system and its spawners provides space for another spawner. </p>

<a name="public_static_attributes"></a>
<p class="NDLRefHead1">Public Static Attributes</p>


<a name="class_ni_p_s_spawner_1a6e6d367a5bcfd447bcff86df81b9bb23"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont">NiUInt16</span>  INVALID_ID</p>
<p class="NDLRefMemberDetailedDescription">Used to indicate an invalid spawner ID. </p>
<a name="construction_and_destruction"></a>
<p class="NDLRefHead1">Construction and Destruction</p>


<a name="class_ni_p_s_spawner_1aef3e707808da3955726cd09d9d572e04"></a>
<p class="NDLRefMemberFunction">NiPSSpawner(<br/><span class="NDLSystemFont">NiUInt16</span> usNumSpawnGenerations = 1, <br/>float fPercentageSpawned = 1.0f, <br/><span class="NDLSystemFont">NiUInt32</span> uiMinNumToSpawn = 1, <br/><span class="NDLSystemFont">NiUInt32</span> uiMaxNumToSpawn = 1, <br/>float fSpawnSpeedFactor = 1.0f, <br/>float fSpawnSpeedFactorVar = 0.0f, <br/>float fSpawnDirChaos = 0.0f, <br/>float fLifeSpan = 0.0f, <br/>float fLifeSpanVar = 0.0f, <br/><span class="NDLSystemFont">bool</span> bRelativeSpeed = true)</p>
<p class="NDLRefMemberDescription">Main constructor. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">usNumSpawnGenerations</span></td>
    <td>The number of generations allowed for spawning particles. Particles whose generation equals or exceeds this value will not be spawned. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fPercentageSpawned</span></td>
    <td>A ratio determining the likelihood of a particular particle being spawned. Must be between 0.0 and 1.0. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiMinNumToSpawn</span></td>
    <td>The minimum number of particles to spawn for any given original particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiMaxNumToSpawn</span></td>
    <td>The maximum number of particles to spawn for any given original particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fSpawnSpeedFactor</span></td>
    <td>Determines how much the speed of the spawned particle will inherit from that of the original particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fSpawnSpeedFactorVar</span></td>
    <td>Determines the amount by which the speed factor will vary for each spawned particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fSpawnDirChaos</span></td>
    <td>Determines how much the direction of the spawned particle will vary from that of the original particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fLifeSpan</span></td>
    <td>The life span to assign to spawned particles. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fLifeSpanVar</span></td>
    <td>Determines the amount by which the life span for the spawned particle will vary from that of the original particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">bRelativeSpeed</span></td>
    <td>Determines if the speed of the spawned particle will vary from that of the original particle. </td>
</tr>

        </tbody>
    </table>
</div>


<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="class_ni_p_s_spawner_1a6a9c0fabf4cad48f630db74b76384575"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt16</span>  GetNumSpawnGenerations() const</p>
<p class="NDLRefMemberDescription">Accesses the number of generations allowed for spawning particles. </p>
<p class="NDLRefMemberDetailedDescription">Particles whose generation equals or exceeds this value will not be spawned. </p>

<a name="class_ni_p_s_spawner_1a31a4ca85a837715ebc24d1355c6b124d"></a>
<p class="NDLRefMemberFunction">void  SetNumSpawnGenerations(<span class="NDLSystemFont">NiUInt16</span> usNumSpawnGenerations)</p>
<p class="NDLRefMemberDescription">Accesses the number of generations allowed for spawning particles. </p>
<p class="NDLRefMemberDetailedDescription">Particles whose generation equals or exceeds this value will not be spawned. </p>

<a name="class_ni_p_s_spawner_1a86d9a49d711738c5e85c50c27b6c05d4"></a>
<p class="NDLRefMemberFunction">float  GetPercentageSpawned() const</p>
<p class="NDLRefMemberDescription">Accesses a ratio determining the likelihood of a particular particle being spawned. </p>
<p class="NDLRefMemberDetailedDescription">This value must be between 0.0 and 1.0 and is multiplied by a random number to determine if a particular particle should get spawned. </p>

<a name="class_ni_p_s_spawner_1ac722ead4c1755dd5f5518098563612c9"></a>
<p class="NDLRefMemberFunction">void  SetPercentageSpawned(float fPercentageSpawned)</p>
<p class="NDLRefMemberDescription">Accesses the number of generations allowed for spawning particles. </p>
<p class="NDLRefMemberDetailedDescription">Particles whose generation equals or exceeds this value will not be spawned. </p>

<a name="class_ni_p_s_spawner_1a6ba22420dc04ddb6c8c50867029c921e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  GetMinNumToSpawn() const</p>
<p class="NDLRefMemberDescription">Accesses the minimum number of particles to spawn for any given original particle. </p>
<p class="NDLRefMemberDetailedDescription">This value may be the same as the maximum number of particles to spawn, in which case the same number of particles will always be spawned. If these values differ, the number of particles actually spawned will be randomly selected from this range.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">This value must be less than or equal to the maximum number of particles to spawn. </p></p>

<a name="class_ni_p_s_spawner_1a5c652c353367c8efcca885f0ad866579"></a>
<p class="NDLRefMemberFunction">void  SetMinNumToSpawn(<span class="NDLSystemFont">NiUInt32</span> uiMinNumToSpawn)</p>
<p class="NDLRefMemberDescription">Accesses the number of generations allowed for spawning particles. </p>
<p class="NDLRefMemberDetailedDescription">Particles whose generation equals or exceeds this value will not be spawned. </p>

<a name="class_ni_p_s_spawner_1a2de38a19f4f5c97778fc53b22fe20675"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  GetMaxNumToSpawn() const</p>
<p class="NDLRefMemberDescription">Accesses the maximum number of particles to spawn for any given original particle. </p>
<p class="NDLRefMemberDetailedDescription">This value may be the same as the minimum number of particles to spawn, in which case the same number of particles will always be spawned. If these values differ, the number of particles actually spawned will be randomly selected from this range.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">This value must be greater than or equal to the minimum number of particles to spawn. </p></p>

<a name="class_ni_p_s_spawner_1a67469c4d4e3bb76285c2148249a5c42f"></a>
<p class="NDLRefMemberFunction">void  SetMaxNumToSpawn(<span class="NDLSystemFont">NiUInt32</span> uiMaxNumToSpawn)</p>
<p class="NDLRefMemberDescription">Accesses the number of generations allowed for spawning particles. </p>
<p class="NDLRefMemberDetailedDescription">Particles whose generation equals or exceeds this value will not be spawned. </p>

<a name="class_ni_p_s_spawner_1a5c2ee5181e883bb0552d69abf2a24b54"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetRelativeSpeed() const</p>
<p class="NDLRefMemberDescription">Accesses a value determining if the speed of the spawned particle will vary from that of the original particle. </p>
<p class="NDLRefMemberDetailedDescription">If true the speed of the spawned particles are determined relative to the speed of the original particle. If false the speed of the spawned particles are absolute speed given by the value in the speed chaos value. </p>

<a name="class_ni_p_s_spawner_1a7e6470802310ddfd533f06e206d8bb85"></a>
<p class="NDLRefMemberFunction">void  SetRelativeSpeed(<span class="NDLSystemFont">bool</span> bRelativeSpeed)</p>
<p class="NDLRefMemberDescription">Accesses the number of generations allowed for spawning particles. </p>
<p class="NDLRefMemberDetailedDescription">Particles whose generation equals or exceeds this value will not be spawned. </p>

<a name="class_ni_p_s_spawner_1af666403f17d56d6ba30afa6e81d1c1ef"></a>
<p class="NDLRefMemberFunction">float  GetSpawnSpeedFactor() const</p>
<p class="NDLRefMemberDescription">Accesses a value determining how much the speed of the spawned particle will vary from that of the original particle. </p>
<p class="NDLRefMemberDetailedDescription">NewSpeed = OriginalSpeed + (OriginalSpeed* (SpeedFactor + (SpeedFactor* SpeedFactorVar* SymetricalRand)) </p>

<a name="class_ni_p_s_spawner_1ad03f2591a7aa355fde237a7d6e88ef18"></a>
<p class="NDLRefMemberFunction">float  GetSpawnSpeedFactorVar() const</p>
<p class="NDLRefMemberDescription">Accesses the number of generations allowed for spawning particles. </p>
<p class="NDLRefMemberDetailedDescription">Particles whose generation equals or exceeds this value will not be spawned. </p>

<a name="class_ni_p_s_spawner_1a7dd258cccac0d83cb55905b995471820"></a>
<p class="NDLRefMemberFunction">void  SetSpawnSpeedFactor(float fSpawnSpeedFactor)</p>
<p class="NDLRefMemberDescription">Accesses the number of generations allowed for spawning particles. </p>
<p class="NDLRefMemberDetailedDescription">Particles whose generation equals or exceeds this value will not be spawned. </p>

<a name="class_ni_p_s_spawner_1a589b33450ab61a651cbb4f32cd55f6e9"></a>
<p class="NDLRefMemberFunction">void  SetSpawnSpeedFactorVar(float fSpawnSpeedFactorVar)</p>
<p class="NDLRefMemberDescription">Accesses the number of generations allowed for spawning particles. </p>
<p class="NDLRefMemberDetailedDescription">Particles whose generation equals or exceeds this value will not be spawned. </p>

<a name="class_ni_p_s_spawner_1aa451d4b5b35ce78073a2eeb0ee8c119d"></a>
<p class="NDLRefMemberFunction">float  GetSpawnDirChaos() const</p>
<p class="NDLRefMemberDescription">Accesses a value determining how much the direction of the spawned particle will vary from that of the original particle. </p>
<p class="NDLRefMemberDetailedDescription">This value must be between 0.0 and 1.0 and indicates how much the direction spawned velocity is allowed to deviate from the original velocity. Here are some examples:</p>
<p class="NDLRefMemberDetailedDescription">
<ul>
<li>0.0 indicates no variance.</li>
<li>0.5 allows the spawned velocity to deviate from the original velocity by up to 90 degrees.</li>
<li>1.0 causes the spawned velocity to be in any random direction. </li></ul></p>

<a name="class_ni_p_s_spawner_1a5b036c0fd4048d933e1a1d9faf1617b2"></a>
<p class="NDLRefMemberFunction">void  SetSpawnDirChaos(float fSpawnDirChaos)</p>
<p class="NDLRefMemberDescription">Accesses the number of generations allowed for spawning particles. </p>
<p class="NDLRefMemberDetailedDescription">Particles whose generation equals or exceeds this value will not be spawned. </p>

<a name="class_ni_p_s_spawner_1aad303c183882ec8afce7163e29f38cdb"></a>
<p class="NDLRefMemberFunction">float  GetLifeSpan() const</p>
<p class="NDLRefMemberDescription">Accesses the life span to assign to spawned particles. </p>

<a name="class_ni_p_s_spawner_1a01a93f237aed6e314d929a7de618632f"></a>
<p class="NDLRefMemberFunction">void  SetLifeSpan(float fLifeSpan)</p>
<p class="NDLRefMemberDescription">Accesses the number of generations allowed for spawning particles. </p>
<p class="NDLRefMemberDetailedDescription">Particles whose generation equals or exceeds this value will not be spawned. </p>

<a name="class_ni_p_s_spawner_1a1ee625575feaf30f0cb44db70d98ce58"></a>
<p class="NDLRefMemberFunction">float  GetLifeSpanVar() const</p>
<p class="NDLRefMemberDescription">Accesses a value determining the amount by which the life span for the spawned particle will vary from that of the original particle. </p>
<p class="NDLRefMemberDetailedDescription">The life span assigned to spawned particles will be evenly distributed over the range [LifeSpan - LifeSpanVar/2, LifeSpan + LifeSpanVar/2]. </p>

<a name="class_ni_p_s_spawner_1a419a3e2703157ed8a4d55921f04780a2"></a>
<p class="NDLRefMemberFunction">void  SetLifeSpanVar(float fLifeSpanVar)</p>
<p class="NDLRefMemberDescription">Accesses the number of generations allowed for spawning particles. </p>
<p class="NDLRefMemberDetailedDescription">Particles whose generation equals or exceeds this value will not be spawned. </p>

<a name="class_ni_p_s_spawner_1a436e7eb63eb192bbbc9fa6bd4ffcd0f6"></a>
<p class="NDLRefMemberFunction">~NiPSSpawner()</p>
<p class="NDLRefMemberDescription">Destructor. </p>

<a name="class_ni_p_s_spawner_1a06a5249bcef53a34d0ba4717b87b81e1"></a>
<p class="NDLRefMemberFunction">virtual void  SpawnParticles(<br/>float fCurrentTime, <br/>float fSpawnTime, <br/><span class="NDLSystemFont">NiUInt32</span> uiOldIndex, <br/><span class="NDLSystemFont"><a href="NiPSParticleSystem.htm">NiPSParticleSystem</a></span>* pkOldPSystem)</p>
<p class="NDLRefMemberDescription">Uses the stored spawning variables to determine how many particles to spawn, calling SpawnParticle to spawn each particle appropriately. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">fCurrentTime</span></td>
    <td>The current simulation time. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fSpawnTime</span></td>
    <td>The time at which the spawn occurred. This value should be less than fCurrentTime. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiOldIndex</span></td>
    <td>The original particle index. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkOldPSystem</span></td>
    <td>The particle system containing the original particle. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_p_s_spawner_1a67904b04abc89d131113043c861147cc"></a>
<p class="NDLRefMemberFunction">virtual void  SpawnParticle(<br/>float fCurrentTime, <br/>float fSpawnTime, <br/><span class="NDLSystemFont">NiUInt32</span> uiOldIndex, <br/><span class="NDLSystemFont"><a href="NiPSParticleSystem.htm">NiPSParticleSystem</a></span>* pkOldPSystem)</p>
<p class="NDLRefMemberDescription">Spawns a single particle. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">fCurrentTime</span></td>
    <td>The current simulation time. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fSpawnTime</span></td>
    <td>The time at which the spawn occurred. This value should be less than fCurrentTime. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiOldIndex</span></td>
    <td>The original particle index. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkOldPSystem</span></td>
    <td>The particle system containing the original particle. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_p_s_spawner_1ab7b059642a2310a70dfa847d06c228ef"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiPSParticleSystem.htm">NiPSParticleSystem</a></span>*  GetMasterPSystem() const</p>
<p class="NDLRefMemberDescription">The master particle system. </p>
<p class="NDLRefMemberDetailedDescription">Accesses the pointer that is used to store the master particle system. This system is responsible for managing the spawned particles. </p>

<a name="class_ni_p_s_spawner_1a3f818e5b9fc4209a72f0717874c8c9e0"></a>
<p class="NDLRefMemberFunction">void  SetMasterPSystem(<span class="NDLSystemFont"><a href="NiPSParticleSystem.htm">NiPSParticleSystem</a></span>* pkMasterPSystem)</p>
<p class="NDLRefMemberFunction"></p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
