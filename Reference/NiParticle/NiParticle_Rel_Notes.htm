<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiParticle Library Release Notes</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>NiParticle Library Release Notes</h1>

<p><a href="#Added_Features_and_Fixed_Bugs">Added Features,
Changed Behavior, and Fixed Bugs</a></p>

<p><a href="#Known_Issues_and_Limitations">Known Issues and
Limitations</a></p>

<a name="Added_Features_and_Fixed_Bugs" id="Added_Features_and_Fixed_Bugs"></a><h2>Added Features, Changed Behavior, and Fixed Bugs</h2>

<h3>Gamebryo LightSpeed 3.2</h3>

<ul>
  <li>None in this release.</li>
</ul>

<h3>Gamebryo LightSpeed 3.1.1</h3>

<ul>
    <li>The starting location of particles emitted from a moving emitter are now
    interpolated according to the particle's age and the emitter's motion. For example,
    previously all of the particles emitted from a moving rocket on a single frame would
    start at the rocket's position on that frame. Now, they will be emitted along the rocket's
    interpolated path from the previous frame.</li>

    <li>Fixed the normal vector on aligned particles for the first frame, when the alignment is
    camera-defined or fixed. The previous behavior always used a normal of (0, 0, 1) for the first
    ever rendering of a particle system using the <span class="NDLSystemFont">
    <a href="NiPSAlignedQuadGenerator.htm" class="NDLSystemFont">NiPSAlignedQuadGenerator</a></span> class.
    The normal is now correctly set on every frame.
    </li>

    <li>Fixed a bug in the cloning of parameters controlling stretched particles. The problem previously
    manifested as non-stretched particles on cloned systems, or all particles exploiting stretch
    in the Game Framework. Now stretched particles behave as expected.</li>
    
    <li>Fixed a bug in the use of <span class="NDLSystemFont">NiPSResetOnLoopCtlr</span> particle
    system controllers. In cases where particles were emitted on the same frame as the controller
    reset the system, the new particles would have infinite age and other code would be
    called with negative infinite time. The fix causes the system to correct set the last update
    time when the controller does the reset.
    </li>
</ul>

<h3>Gamebryo LightSpeed 3.1</h3>

<ul>
  <li>
  Fixed an issue with the <span class="NDLSystemFont">
  <a href="NiPSSpawner.htm" class="NDLSystemFont">NiPSSpawner</a></span> class
  that could cause a memory leak for certain scene graph configurations (it kept an extra reference
  to the target particle system, preventing it from being destructed).
  </li>

  <li>
  Fixed problems with mesh particle alignment when the direction from which the alignment was derived,
  such as velocity, was zero. Now the system attempts to maintain frame to frame alignment coherence
  when an alignment direction is zero.
  </li>
</ul>

<h3>Gamebryo LightSpeed 3.0</h3>

<ul>
    <li>Several NiParticle API and behaviors have been changed in this release. Refer to
        <a href="../../Convert/Previous/Converting_Particles_Lightspeed.htm">Converting 
        Particles to Gamebryo LightSpeed</a> for a list of classes that will need to be 
        modified if creating particle systems programmatically. In addition, new 
        features have been added to the NiParticle runtime:<ul>
            <li><span class="NDLSystemFont"><a href="NiPSAlignedQuadGenerator.htm">NiPSAlignedQuadGenerator</a></span> - enables 
                additional sprite alignment options (such as velocity aligned), scaling with 
                speed, and texture animation</li>
            <li><span class="NDLSystemFont"><a href="NiPSSimulatorMeshAlignStep.htm">NiPSSimularMeshAlignStep</a></span> and 
                kernels - enables alignment options for mesh particles</li>
            <li><span class="NDLSystemFont"><a href="NiPSCurveEmitter.htm">NiPSCurveEmitter</a></span> - emits particles from a 
                curve</li>
            <li><span class="NDLSystemFont"><a href="NiPSTorusEmitter.htm">NiPSTorusEmitter</a></span> - torus volume emitter</li>
        </ul>
    </li>
</ul>

<h3>Gamebryo 2.6</h3>

<ul>
    <li>Modified the handling of spawner IDs in the <a href=
    "../NiParticle/NiPSParticleSystem.htm">NiPSParticleSystem</a>
    class and related classes. Any given particle system can now
    have up to 4095 spawners involved in its simulation. This
    change has also reduced the maximum number of particle
    generations to 4095. Finally, the global application limit of
    255 active spawners has been lifted - there may now be any
    number of spawners in the application.</li>

    <li>Modified the <a href=
    "../NiParticle/NiPSParticleSystem.htm">NiPSParticleSystem</a>
    class and related classes to update the system bounding
    volume immediately when new particles are added and there
    were no existing particles. This resolves an issue by which
    particle systems had a zero sized bound for the first frame
    after particle emission.</li>

    <li>Extended <span class="NDLSystemFont"><a href=
    "../NiParticle/NiPSEmitParticlesCtlr.htm">NiPSEmitParticlesCtlr</a></span>
    to support evaluator-based sequence animation via
    <span class="NDLSystemFont"><a href=
    "../NiParticle/NiPSEmitParticlesCtlr.htm#public_methods">UpdateValue</a></span>.</li>
</ul>

<h3>Gamebryo 2.5.0</h3>

<ul>
    <li>The particle system classes have been completely reworked
    for Gamebryo 2.5.0. Particle simulation has been moved to
    Floodgate tasks that execute in multiple threads and on the
    PS3 SPUs, and the names of all classes have been changed. See
    the <span class="NDLSystemFont"><a href=
    "../../Convert/Previous/NiParticle_Conversion.htm">NiParticle
    conversion notes</a></span> for more details about what has
    changed since Gamebryo 2.3.</li>

    <li>The behavior of <a href=
    "../../Programmer/NiParticle/Particle_System_Colliders.htm">particle
    collision</a> has been changed from "at most one collision
    per frame per particle" to "at most one collision per frame
    per particle per collider". In practice, this means that
    particles fired into a corner where two colliders meet will
    now collide with each collider and bounce out of the corner.
    Previously, a particle would bounce off the first collider it
    hit and then pass through the second collider.</li>

    <li>Particle performance may see some degradation from in 2.5
    on single core PCs when there are very large numbers of
    particles in the scene. For smaller numbers of particles
    (e.g. 5k) there should be no change in performance from 2.3.
    Other platforms and machines with more cores should see
    performance improvements, even with extremely large numbers
    of particles.</li>
</ul>

<h3>Gamebryo 2.3.0</h3>

<ul>
    <li>PhysX-based mesh particle systems were crashing when
    loaded into Asset Viewer. To fix this bug the <span class=
    "NDLSystemFont">NiPSysMeshUpdateModifier</span> class has
    been modified to test for a valid target particle system in
    its post-load step.</li>
</ul>

<h3>Gamebryo 2.2.0</h3>

<ul>
    <li>The deprecated <span class=
    "NDLSystemFont">NiOldParticle</span> and <span class=
    "NDLSystemFont">NiOldParticleConversion</span> libraries were
    removed.</li>

    <li><span class=
    "NDLSystemFont">NiPSysUpdateTaskManager</span> has been
    removed. Its functionality was subsumed by <span class=
    "NDLSystemFont"><a href=
    "../NiMain/NiParallelUpdateTaskManager.htm">NiParallelUpdateTaskManager</a></span>
    and flags in <span class=
    "NDLSystemFont">NiParticleSystem</span>.</li>

    <li>The algorithm for emitting particles from mesh faces in
    <span class="NDLSystemFont">NiPSysMeshEmitter</span> has been
    improved to uniformly sample the triangle, as Max and Maya
    do.</li>

    <li>Particle systems with static bounding volumes (in other
    words, without <span class=
    "NDLSystemFont">NiPSysBoundUpdateModifier</span> objects
    attached) have been changed to always transform their static
    bounding volumes with the <span class=
    "NDLSystemFont">NiParticleSystem</span> object, event for
    world-space particle systems. Previously, the static bounding
    volume was considered to be in world-space and was never
    moved for world-space particle systems. This was nonintuitive
    for the case when the emitter was also being transformed with
    the <span class="NDLSystemFont">NiParticleSystem</span>
    object, as the static bounding volume would be left behind
    and would cause the entire system to disappear at unexpected
    times. Static bounding volumes should now be considered to be
    in the <span class="NDLSystemFont">NiParticleSystem</span>
    object's local space, even for world-space particle systems.
    Dynamic bounding volumes will behave exactly as before.</li>
</ul>

<h3>Gamebryo 2.1.0</h3>

<ul>
    <li>A new class, <span class=
    "NDLSystemFont">NiPSysUpdateTaskManager</span>, has been
    added. This class allows particle systems to update on a
    second thread independent of the main update process. Using
    this class can significantly increase application performance
    but will cause the application to use the previous frame's
    bounding information for some calculations. Please refer to
    the class documentation for more information.</li>
</ul>

<h3>Gamebryo 2.0.0</h3>

<ul>
    <li>Fixed a bug in <span class=
    "NDLSystemFont">NiPSysAgeDeathModifier</span> that could
    sometimes cause some mesh particles to never die.</li>

    <li>The following controllers were added to animate the
    declination variation and the planar angle variation of
    particle emitters: <span class=
    "NDLSystemFont">NiPSysEmitterDeclinationVarCtlr</span> and
    <span class=
    "NDLSystemFont">NiPSysEmitterPlanarAngleVarCtlr</span>.</li>

    <li>The constructors for <span class=
    "NDLSystemFont">NiParticleSystem</span>, <span class=
    "NDLSystemFont">NiPSysData</span>, <span class=
    "NDLSystemFont">NiMeshParticleSystem</span>, and <span class=
    "NDLSystemFont">NiMeshPSysData</span> were changed to no
    longer accept pointers to arrays of particle data. Since none
    of the data in the arrays passed in was being used and there
    was no way to guarantee that the passed-in arrays were the
    correct size, the constructors were changed to only take the
    maximum number of particles along with Boolean variables
    indicating whether or not to allocate data for colors and
    rotations. All per-particle data arrays are now allocated by
    these constructors and are thus guaranteed to be of the
    proper size.</li>

    <li><span class="NDLSystemFont">NiPSysRotationModifier</span>
    was changed to support rotation of sprite-based particles in
    addition to mesh-based particles. The storage of rotation
    data (angles and axes) was optimized so that full quaternions
    are no longer stored in <span class=
    "NDLSystemFont">NiParticleInfo</span> or <span class=
    "NDLSystemFont"><a href=
    "../NiMain/NiParticlesData.htm">NiParticlesData</a></span>
    and only angles (and not axes) are stored for sprite-based
    particles (since the axis of rotation is always towards the
    camera in this case). The rotation angles and axes for
    particles are accessible through <span class=
    "NDLSystemFont"><a href=
    "../NiMain/NiParticlesData.htm">NiParticlesData</a></span>. A
    per-particle rotation speed was added to <span class=
    "NDLSystemFont">NiPSysData</span>. An initial rotation angle
    setting and variation values for both initial rotation speed
    and angle were added to <span class=
    "NDLSystemFont">NiPSysRotationModifier</span>. The following
    controllers were added to animate these initial rotation
    values over time: <span class=
    "NDLSystemFont">NiPSysInitialRotSpeedCtlr</span>,
    <span class="NDLSystemFont">NiPSysInitialRotSpeedVarCtlr</span>,
    <span class="NDLSystemFont">NiPSysInitialRotAngleCtlr</span>,
    and <span class=
    "NDLSystemFont">NiPSysInitialRotAngleVarCtlr</span>. New
    interfaces in 3ds max and Maya were also added to support
    these new parameters.</li>

    <li>A new initial radius variation parameter was added to the
    constructors for all <span class=
    "NDLSystemFont">NiPSysEmitter</span>-derived classes. It was
    given a default value, so current code should still compile.
    This value is accessible via the <span class=
    "NDLSystemFont">SetRadiusVar</span> and <span class=
    "NDLSystemFont">GetRadiusVar</span> functions.</li>

    <li>Fixed a bug in <span class=
    "NDLSystemFont">NiPSysEmitterCtlr</span> to properly handle
    posed <span class="NDLSystemFont"><a href=
    "../NiAnimation/NiBoolInterpolator.htm">NiBoolInterpolators</a></span>
    to eliminate a bug that could result in fewer particles being
    emitted than should be.</li>

    <li>Fixed a crash bug in <span class=
    "NDLSystemFont">NiPSysEmitterCtlr::GetViewerStrings</span>
    that was due to a missing null pointer check.</li>

    <li>Fixed conversion of old particle systems to the new
    animation system. The time extrema range was not being set
    properly for the <span class=
    "NDLSystemFont">NiPSysEmitterCtlr</span> that was being
    created, resulting in a crash.</li>

    <li>Fixed <span class="NDLSystemFont">NiPSysData</span>
    cloning function to copy its internal <span class=
    "NDLSystemFont"><a href=
    "../NiMain/NiBound.htm">NiBound</a></span> member to fix a
    bug where cloned particle systems without <span class=
    "NDLSystemFont">NiPSysBoundUpdateModifier</span> objects
    attached were not displaying.</li>
</ul>

<a name="Known_Issues_and_Limitations" id="Known_Issues_and_Limitations"></a><h2>Known Issues and Limitations</h2>

<ul>
    <li>Mesh emitters do not take morphing geometry into account.
    Skinned mesh emitters will work properly, but geometry that
    is morphed (with or without skinning) may not have particles
    get emitted from precisely the correct locations. Particles
    will be emitted from the positions of the vertices as if the
    object were not morphed.</li>

    <li>When extracting a particle system into an animation
    sequence using the <a href=
    "../Tool_Plug_ins/Controller_Extractor.htm">Controller
    Extractor</a> tool plug-in, the particle system should not be
    set to reset on loop. If it is, you may experience seemingly
    asynchronous or random resetting that is not coordinated with
    the sequences that are active. Ensure that you have the
    "Reset On Loop" option for particle systems turned off in
    <a href=
    "../../Art/Max/Particles.htm#Particle_System_Custom_Attributes">
    Max</a> and <a href=
    "../../Art/Maya/Emitter_Attribute_Window.htm">Maya</a> if you
    will be extracting them into sequences.</li>

    <li>Particle colliders do not store nor track their velocity.
    Thus, a moving collider will impart no force to a stationary
    cloud of particles. To avoid odd behavior like this, ensure
    that particles are moving significantly faster than particle
    colliders.</li>

    <li>Particle system emitters only use the highest weighted
    interpolator encountered in the <span class=
    "NDLSystemFont"><a href=
    "../NiAnimation/NiBlendInterpolator.htm">NiBlendInterpolator</a></span>.
    If the highest weighted interpolator does not have active
    keys, no particles will be emitted in that frame. This same
    limitation applies to the highest weighted evaluator in
    sequence animation.</li>

    <li><span class="NDLSystemFont"><a href=
    "../NiParticle/NiPSEmitParticlesCtlr.htm">NiPSEmitParticlesCtlr</a></span>
    objects cannot have a time range of 0.0, even if both the
    emitter active interpolator and the birth rate interpolator
    are posed. The internal logic of this class will fail to emit
    any particles if the scaled time never increases. If two
    posed interpolators are desired, set the time range for the
    controller to be some non-zero value, such as 1.0, in order
    for particles to emit properly. This same limitation applies
    to the posed evaluators in sequence animation.</li>

    <li>When a particle collider is set to spawn on collide but
    not die on collide, the surviving collided particle has its
    last update time corrupted by the collision time. In most
    cases, these collision time is very close to the actual last
    update time, but they do not usually match exactly. This can
    cause a minor difference in the particle's position for the
    subsequent frame.</li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
