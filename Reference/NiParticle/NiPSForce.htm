<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiPSForce</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiPSForce</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../NiMain/NiObject.htm">NiObject</a></span></p>


<p class="NDLRefHeaderFile">&lt;NiPSForce.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/class_ni_p_s_force.gif" alt="Inheritance graph for NiPSForce"/>
  <p class="FigureCaption">Inheritance graph for NiPSForce</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">The abstract base class for all particle forces. </p>
<p class="NDLNormal">Multiple forces can be owned by an <span class="NDLSystemFont"><a href="NiPSSimulatorForcesStep.htm">NiPSSimulatorForcesStep</a></span> object, which is attached to the <span class="NDLSystemFont"><a href="NiPSSimulator.htm">NiPSSimulator</a></span> mesh modifier of a particle system. Each force provides a block of memory that contains the data it needs to properly execute. In its Update function, it updates that data as necessary. The <span class="NDLSystemFont"><a href="NiPSSimulatorForcesStep.htm">NiPSSimulatorForcesStep</a></span> object will concatenate the data from all its forces into a single data buffer that gets sent to a Floodgate kernel.</p>
<p class="NDLNormal">In order to properly modify the particle velocity each frame, a function needs to be added for each force to the <span class="NDLSystemFont"><a href="NiPSForceHelpers.htm">NiPSForceHelpers</a></span> class. The <span class="NDLSystemFont"><a href="NiPSSimulatorForcesKernel.htm">NiPSSimulatorForcesKernel</a></span> Floodgate kernel loops over all the forces, calling the helper function for each and providing that force's data buffer to that function. Each force's helper function is provided with the array of particle data and is expected to modify the velocity of each particle as necessary.</p>
<p class="NDLNormal">The only information stored by this base class are the force name, the force type, and whether or not the force is active. It contains three pure virtual functions used to access the block of data for the force and to update the force parameters prior to execution in a Floodgate kernel. </p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="class_ni_p_s_force_1af16dd7dcd15b7956440636ad5a0a5f41"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>&  GetName() const</p>
<p class="NDLRefMemberDescription">Accesses the name of the force. </p>
<p class="NDLRefMemberDetailedDescription">The force name is used by time controllers to resolve which force should be animated by that controller.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">The force name should not be programmatically changed unless no time controllers exist that reference the force. </p></p>

<a name="class_ni_p_s_force_1aa7daee9299cf2e6867f2274749386bfb"></a>
<p class="NDLRefMemberFunction">void  SetName(const <span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>& kName)</p>
<p class="NDLRefMemberDescription">Accesses the name of the force. </p>
<p class="NDLRefMemberDetailedDescription">The force name is used by time controllers to resolve which force should be animated by that controller.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">The force name should not be programmatically changed unless no time controllers exist that reference the force. </p></p>

<a name="class_ni_p_s_force_1a62d317e43193a06c231de7f060a24214"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetActive() const</p>
<p class="NDLRefMemberDescription">Accesses whether or not the force is active. </p>
<p class="NDLRefMemberDetailedDescription">Inactive forces will not be included during kernel execution. </p>

<a name="class_ni_p_s_force_1acd40f19729b400a7a6966957a3c68051"></a>
<p class="NDLRefMemberFunction">void  SetActive(<span class="NDLSystemFont">bool</span> bActive)</p>
<p class="NDLRefMemberDescription">Accesses the name of the force. </p>
<p class="NDLRefMemberDetailedDescription">The force name is used by time controllers to resolve which force should be animated by that controller.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">The force name should not be programmatically changed unless no time controllers exist that reference the force. </p></p>

<a name="class_ni_p_s_force_1acf9209c15d2809df68b849c1a7d3ce6e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiPSForceDefinitions.htm#class_ni_p_s_force_definitions_1a03f7700bce49f6c2de094850a41f5919">NiPSForceDefinitions::ForceType</a></span>  GetType() const</p>
<p class="NDLRefMemberDescription">Accesses the type of the force. </p>
<p class="NDLRefMemberDetailedDescription">The force type is set by each derived class and cannot be changed. </p>

<a name="class_ni_p_s_force_1a4626698655b3212a0ad23c444c53129c"></a>
<p class="NDLRefMemberFunction">virtual size_t  GetDataSize() const = 0</p>
<p class="NDLRefMemberDescription">Returns the size in bytes of the data block provided by the force. </p>

<a name="class_ni_p_s_force_1adee0d851a07e54730676ebc2fc7312a2"></a>
<p class="NDLRefMemberFunction">virtual void*  GetData() const = 0</p>
<p class="NDLRefMemberDescription">Returns a pointer to the data block provided by the force. </p>

<a name="class_ni_p_s_force_1a91eb2c69c7a75054da4eed55787c39a6"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  Update(<br/><span class="NDLSystemFont"><a href="NiPSParticleSystem.htm">NiPSParticleSystem</a></span>* pkParticleSystem, <br/>float fTime) = 0</p>
<p class="NDLRefMemberDescription">Updates the data for the force. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
