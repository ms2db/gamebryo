<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiPSSimulatorGeneralStep</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiPSSimulatorGeneralStep</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="NiPSSimulatorStep.htm">NiPSSimulatorStep</a></span></p>


<p class="NDLRefHeaderFile">&lt;NiPSSimulatorGeneralStep.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/class_ni_p_s_simulator_general_step.gif" alt="Inheritance graph for NiPSSimulatorGeneralStep"/>
  <p class="FigureCaption">Inheritance graph for NiPSSimulatorGeneralStep</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">Encapsulates a Floodgate kernel that updates particle size, colors, and rotations. </p>
<p class="NDLNormal">Size keys may be specified for this step. Additional properties control the time scaling and looping behavior of the size animations. Note that the size computed here is multiplied by the initial size of the particle, set in the emitter. This enables random particle sizes to still be scaled over the particle life.</p>
<p class="NDLNormal">A grow time and a shrink time can be specified for this step. These control durations of time during which particles will grow from size 0.0 to their specified size and will shrink from their radius to 0.0. The grow and shrink generation values specify which particle generation to use for the growing and shrinking action. The most common case is for the grow generation to be 0 and the shrink generation to be the highest generation supported by the particle system (so that particles will grow when born and shrink when dying). Grow and shrink is applied in addition to the animated size, so particles will grow and shrink regardless of their animated size.</p>
<p class="NDLNormal">Color keys can be specified that define color animation over the lifetime of each particle.</p>
<p class="NDLNormal">Rotation keys may be given to provide an additional rotation angle that is added to the particle's initial rotation value. The value derived from the keys is added to the rotation angle that is computed from the rotation speed for the particle. This allows the for random variation in the rotations through random variation in the rotation speed parameter. Furthermore, rotation keys are not typically used on mesh-based particles because a distinct set of rotation keys on the <span class="NDLSystemFont"><a href="NiPSSimulatorMeshAlignStep.htm">NiPSSimulatorMeshAlignStep</a></span> object uses quaternions to animate 3D rotation of the mesh scene graph.</p>
<p class="NDLNormal">All key-framed values are linearly interpolated (slerped in the case of rotations). It is valid to provide only a single key, in which case the given value will be treated as a constant over the life of the particle. The same set of keys is used for particles of all generations. If you would like different keys, then spawn dead particles into a different particle system.</p>
<p class="NDLNormal">This step uses the <span class="NDLSystemFont"><a href="NiPSSimulatorGeneralKernel.htm">NiPSSimulatorGeneralKernel</a></span> Floodgate kernel. The kernel is only executed if one of the following conditions is met:</p>
<p class="NDLNormal">
<ul>
<li>The grow time is greater than 0.0.</li>
<li>The shrink time is greater than 0.0.</li>
<li>There are size keys.</li>
<li>The particle system has colors and color keys have been specified.</li>
<li>The particle system has rotations. </li></ul></p>

<a name="construction_and_destruction"></a>
<p class="NDLRefHead1">Construction and Destruction</p>


<a name="class_ni_p_s_simulator_general_step_1a0c208ff0d1677cf7651393950bb218b3"></a>
<p class="NDLRefMemberFunction">NiPSSimulatorGeneralStep()</p>
<p class="NDLRefMemberDescription">Constructor. </p>

<a name="class_ni_p_s_simulator_general_step_1a2ca773ff0a49e41f4c6c68cfb75f5351"></a>
<p class="NDLRefMemberFunction">virtual ~NiPSSimulatorGeneralStep()</p>
<p class="NDLRefMemberDescription">Virtual destructor. </p>
<a name="base_class_overrides"></a>
<p class="NDLRefHead1">Base Class Overrides</p>


<a name="class_ni_p_s_simulator_general_step_1a3e9b006ef240a06f7860f360d1e14af5"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../NiFloodgate/NiSPKernel.htm">NiSPKernel</a></span>*  GetKernel()</p>
<p class="NDLRefMemberDescription">Returns the Floodgate kernel associated with the step, which will be of type <span class="NDLSystemFont"><a href="NiPSSimulatorGeneralKernel.htm">NiPSSimulatorGeneralKernel</a></span>. </p>

<a name="class_ni_p_s_simulator_general_step_1aebc26fdb98bb0e0dcd6368123f7de083"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">NiUInt16</span>  GetLargestInputStride()</p>
<p class="NDLRefMemberDescription">Returns the largest stride value of all the input streams in the step. </p>

<a name="class_ni_p_s_simulator_general_step_1ac854fcc42d6335a8cd365566fdb602ca"></a>
<p class="NDLRefMemberFunction">virtual void  PrepareInputStream(<br/><span class="NDLSystemFont"><a href="NiPSParticleSystem.htm">NiPSParticleSystem</a></span>* pkParticleSystem, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>& kSemantic, <br/><span class="NDLSystemFont"><a href="../NiFloodgate/NiSPStream.htm">NiSPStream</a></span>* pkStream)</p>
<p class="NDLRefMemberDescription">Prepares the input stream with the specified semantic for execution. </p>
<p class="NDLRefMemberDetailedDescription">The following semantics are recognized: <span class="NDLSystemFont"><a href="NiPSCommonSemantics.htm#class_ni_p_s_common_semantics_1a8506fb1e7db214713e7132f47b42b446">NiPSCommonSemantics::PARTICLECOLOR</a></span>, <span class="NDLSystemFont"><a href="NiPSCommonSemantics.htm#class_ni_p_s_common_semantics_1a7efcbd4ba341e8db7fe65966b6fdc1b1">NiPSCommonSemantics::PARTICLEFLAGS</a></span>, <span class="NDLSystemFont"><a href="NiPSCommonSemantics.htm#class_ni_p_s_common_semantics_1a958e9db30a054b77931a6202dd844333">NiPSCommonSemantics::PARTICLEAGE</a></span>, <span class="NDLSystemFont"><a href="NiPSCommonSemantics.htm#class_ni_p_s_common_semantics_1a8f1e0f12718cd2345449025307bd9c27">NiPSCommonSemantics::PARTICLELIFESPAN</a></span>, <span class="NDLSystemFont"><a href="NiPSCommonSemantics.htm#class_ni_p_s_common_semantics_1a41c1735ccb9a06d041b54dd0aa77b0f0">NiPSCommonSemantics::PARTICLEROTANGLE</a></span> and <span class="NDLSystemFont"><a href="NiPSCommonSemantics.htm#class_ni_p_s_common_semantics_1a68545e92fd20d9bafa7f8afb53f18531">NiPSCommonSemantics::PARTICLEROTSPEED</a></span>. Other semantics will assert in Debug builds. </p>

<a name="class_ni_p_s_simulator_general_step_1a415e879ded2737fc570d835c2b9cdca2"></a>
<p class="NDLRefMemberFunction">virtual void  PrepareOutputStream(<br/><span class="NDLSystemFont"><a href="NiPSParticleSystem.htm">NiPSParticleSystem</a></span>* pkParticleSystem, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>& kSemantic, <br/><span class="NDLSystemFont"><a href="../NiFloodgate/NiSPStream.htm">NiSPStream</a></span>* pkStream)</p>
<p class="NDLRefMemberDescription">Prepares the output stream with the specified semantic for execution. </p>
<p class="NDLRefMemberDetailedDescription">The following semantics are recognized: <span class="NDLSystemFont"><a href="NiPSCommonSemantics.htm#class_ni_p_s_common_semantics_1a6cc1f40e2eefce1edb35d42a0a3c2255">NiPSCommonSemantics::PARTICLESIZE</a></span>, <span class="NDLSystemFont"><a href="NiPSCommonSemantics.htm#class_ni_p_s_common_semantics_1a8506fb1e7db214713e7132f47b42b446">NiPSCommonSemantics::PARTICLECOLOR</a></span>, <span class="NDLSystemFont"><a href="NiPSCommonSemantics.htm#class_ni_p_s_common_semantics_1a41c1735ccb9a06d041b54dd0aa77b0f0">NiPSCommonSemantics::PARTICLEROTANGLE</a></span>. Other semantics will assert in Debug builds. </p>

<a name="class_ni_p_s_simulator_general_step_1ab040371b1d4872eea46c8efec9ed2862"></a>
<p class="NDLRefMemberFunction">virtual NiSPTaskPtr  Attach(<span class="NDLSystemFont"><a href="NiPSParticleSystem.htm">NiPSParticleSystem</a></span>* pkParticleSystem)</p>
<p class="NDLRefMemberDescription">Creates a task and add several input and output streams, including the fixed inputs. </p>

<a name="class_ni_p_s_simulator_general_step_1a0d842bef778ebbbf1db412f34d4f798f"></a>
<p class="NDLRefMemberFunction">virtual void  Detach(<span class="NDLSystemFont"><a href="NiPSParticleSystem.htm">NiPSParticleSystem</a></span>* pkParticleSystem)</p>
<p class="NDLRefMemberDescription">Sets all pointers to data streams to NULL. </p>

<a name="class_ni_p_s_simulator_general_step_1a3546cc67719973802acf5fbaf0d5342e"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  Update(<br/><span class="NDLSystemFont"><a href="NiPSParticleSystem.htm">NiPSParticleSystem</a></span>* pkParticleSystem, <br/>float fTime)</p>
<p class="NDLRefMemberDescription">Update function called each frame. </p>
<p class="NDLRefMemberDetailedDescription">This function sets the block count on all streams. The function returns true if any of the following are true: the particles have non-zero grow time, the particles have non-zero fade time, the particles have animated size keys, the particles have colors and there are color keys, or the particles have rotations. If none are true, then the function returns false. </p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="class_ni_p_s_simulator_general_step_1a8cd4c399ec10cd3d566a4f30b9ab7c94"></a>
<p class="NDLRefMemberFunction">float  GetGrowTime() const</p>
<p class="NDLRefMemberDescription">Accesses the grow time for particles, in seconds. </p>
<p class="NDLRefMemberDetailedDescription">The grow time for a particle is the amount of time over which its size is ramped from 0.0 to 1.0. The particle size is multiplied by the particle radius to compute the final size for the particle. </p>

<a name="class_ni_p_s_simulator_general_step_1ac30865356ba7037abb5567947af688da"></a>
<p class="NDLRefMemberFunction">void  SetGrowTime(float fGrowTime)</p>
<p class="NDLRefMemberDescription">Accesses the grow time for particles, in seconds. </p>
<p class="NDLRefMemberDetailedDescription">The grow time for a particle is the amount of time over which its size is ramped from 0.0 to 1.0. The particle size is multiplied by the particle radius to compute the final size for the particle. </p>

<a name="class_ni_p_s_simulator_general_step_1af80025f01db15c8464cda56190a0f5b0"></a>
<p class="NDLRefMemberFunction">float  GetShrinkTime() const</p>
<p class="NDLRefMemberDescription">Accesses the shrink time for particles, in seconds. </p>
<p class="NDLRefMemberDetailedDescription">The shrink time for a particle is the amount of time over which its size is ramped from 1.0 to 0.0. The particle size is multiplied by the particle radius to compute the final size for the particle. </p>

<a name="class_ni_p_s_simulator_general_step_1a67966ee46105c00b967a5094063f6595"></a>
<p class="NDLRefMemberFunction">void  SetShrinkTime(float fShrinkTime)</p>
<p class="NDLRefMemberDescription">Accesses the grow time for particles, in seconds. </p>
<p class="NDLRefMemberDetailedDescription">The grow time for a particle is the amount of time over which its size is ramped from 0.0 to 1.0. The particle size is multiplied by the particle radius to compute the final size for the particle. </p>

<a name="class_ni_p_s_simulator_general_step_1add042a3c3a9250a188a3be33f2b01442"></a>
<p class="NDLRefMemberFunction">virtual void  InitializeNewParticle(<br/><span class="NDLSystemFont"><a href="NiPSParticleSystem.htm">NiPSParticleSystem</a></span>* pkParticleSystem, <br/><span class="NDLSystemFont">NiUInt32</span> uiIndex)</p>
<p class="NDLRefMemberDescription">Initialize the size, color and rotation for a new particle. </p>
<p class="NDLRefMemberDetailedDescription">Called in cases where the particle will be updated or drawn without a simulation step. </p>

<a name="class_ni_p_s_simulator_general_step_1ae7228d56da9cb8737da612093990d09e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiPSKernelFloatKey.htm">NiPSKernelFloatKey</a></span>*  GetSizeKeys(<span class="NDLSystemFont">NiUInt8</span>& ucNumSizeKeys) const</p>
<p class="NDLRefMemberDescription">Gets the size keys that have been assigned to the step. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">ucNumSizeKeys</span></td>
    <td>Returns the size of the returned size key array. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A pointer to an array of size keys. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_p_s_simulator_general_step_1ad28f00b91d7c295a13ff51e19e45cd71"></a>
<p class="NDLRefMemberFunction">void  CopySizeKeys(<br/>const <span class="NDLSystemFont"><a href="NiPSKernelFloatKey.htm">NiPSKernelFloatKey</a></span>* pkSizeKeys, <br/>const <span class="NDLSystemFont">NiUInt8</span> ucNumKeys)</p>
<p class="NDLRefMemberDescription">Copies the input array of size keys, allocating aligned memory internally and copying the data. </p>
<p class="NDLRefMemberDetailedDescription">It is valid to specify NULL for pkSizeKeys, but ucNumSizeKeys must also be zero. If pkSizeKeys is not NULL, ucNumSizeKeys must be greater than zero.</p>
<p class="NDLRefMemberDetailedDescription">Is it valid to provide a single key representing a constant size.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">This function does not take ownership of pkSizeKeys. The calling code is responsible for memory management of that data.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pkSizeKeys</span></td>
    <td>A pointer to the array of size keys to copy. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">ucNumKeys</span></td>
    <td>The number of keys in the pkSizeKeys array. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_p_s_simulator_general_step_1a4f0f4e79feb1f45c90e1351b619a2f0a"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiPSLoopBehavior</span>  GetSizeLoopBehavior() const</p>
<p class="NDLRefMemberDescription">Get the size key looping behavior. </p>

<a name="class_ni_p_s_simulator_general_step_1a4f600f9f2a0f93960b2272d86e6d5171"></a>
<p class="NDLRefMemberFunction">void  SetSizeLoopBehavior(const <span class="NDLSystemFont">NiPSLoopBehavior</span> eBehavior)</p>
<p class="NDLRefMemberDescription">Set the size key looping behavior. </p>

<a name="class_ni_p_s_simulator_general_step_1aed245cd6d63fd21ed08d76f09483343c"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiPSKernelColorKey.htm">NiPSKernelColorKey</a></span>*  GetColorKeys(<span class="NDLSystemFont">NiUInt8</span>& ucNumColorKeys) const</p>
<p class="NDLRefMemberDescription">Gets the color keys that have been assigned to the step. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">ucNumColorKeys</span></td>
    <td>Returns the size of the returned key array. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A pointer to an array of color keys. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_p_s_simulator_general_step_1afe9625bfa7e0b70e886d958fa9c9a572"></a>
<p class="NDLRefMemberFunction">void  CopyColorKeys(<br/>const <span class="NDLSystemFont"><a href="NiPSKernelColorKey.htm">NiPSKernelColorKey</a></span>* pkColorKeys, <br/>const <span class="NDLSystemFont">NiUInt8</span> ucNumKeys)</p>
<p class="NDLRefMemberDescription">Copies the input array of color keys, allocating aligned memory internally and copying the data. </p>
<p class="NDLRefMemberDetailedDescription">It is valid to specify NULL for pkColorKeys, but ucNumColorKeys must also be zero. If pkColorKeys is not NULL, ucNumColorKeys must be greater than zero.</p>
<p class="NDLRefMemberDetailedDescription">Is it valid to provide a single key representing a constant color.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">This function does not take ownership of pkColorKeys. The calling code is responsible for memory management of that data.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pkColorKeys</span></td>
    <td>A pointer to the array of color keys to copy. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">ucNumKeys</span></td>
    <td>The number of keys in the pkColorKeys array. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_p_s_simulator_general_step_1a114de43c3dba314b38b37d009afd5c82"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiPSLoopBehavior</span>  GetColorLoopBehavior() const</p>
<p class="NDLRefMemberDescription">Get the color key looping behavior. </p>

<a name="class_ni_p_s_simulator_general_step_1a016a063388a6dce07bbe3bdf2f4a386c"></a>
<p class="NDLRefMemberFunction">void  SetColorLoopBehavior(const <span class="NDLSystemFont">NiPSLoopBehavior</span> eBehavior)</p>
<p class="NDLRefMemberDescription">Set the color key looping behavior. </p>
<p class="NDLRefMemberDetailedDescription">The loop behavior is always clamping when only one key is given. </p>

<a name="class_ni_p_s_simulator_general_step_1ad4fa643814b9bc730c5ca03f774b857e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiPSKernelFloatKey.htm">NiPSKernelFloatKey</a></span>*  GetRotationKeys(<span class="NDLSystemFont">NiUInt8</span>& ucNumRotationsKeys) const</p>
<p class="NDLRefMemberDescription">Get the rotation keys that have been assigned to the step. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">ucNumRotationsKeys</span></td>
    <td>Returns the size of the returned rotation key array. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A pointer to an array of rotation keys. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_p_s_simulator_general_step_1ae5596432e09e8303b0ab4f52d138ca03"></a>
<p class="NDLRefMemberFunction">void  CopyRotationKeys(<br/>const <span class="NDLSystemFont"><a href="NiPSKernelFloatKey.htm">NiPSKernelFloatKey</a></span>* pkRotationKeys, <br/>const <span class="NDLSystemFont">NiUInt8</span> ucNumKeys)</p>
<p class="NDLRefMemberDescription">Copies the input array of rotation keys, allocating aligned memory internally and copying the data. </p>
<p class="NDLRefMemberDetailedDescription">It is valid to specify NULL for pkRotationKeys, but ucNumRotationKeys must also be zero. If pkRotationKeys is not NULL, ucNumRotationKeys must be greater than zero.</p>
<p class="NDLRefMemberDetailedDescription">Is it valid to provide a single key representing a constant rotation value.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">This function does not take ownership of pkRotationKeys. The calling code is responsible for memory management of that data.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pkRotationKeys</span></td>
    <td>A pointer to the array of rotation keys to copy. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">ucNumKeys</span></td>
    <td>The number of keys in the pkRotationKeys array. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_p_s_simulator_general_step_1a25c53e99f84d8d66d44c42e50e5d40f9"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiPSLoopBehavior</span>  GetRotationLoopBehavior() const</p>
<p class="NDLRefMemberDescription">Get the rotation key looping behavior. </p>

<a name="class_ni_p_s_simulator_general_step_1a96f4e5e4b79f042f72004b1ad6317971"></a>
<p class="NDLRefMemberFunction">void  SetRotationLoopBehavior(const <span class="NDLSystemFont">NiPSLoopBehavior</span> eBehavior)</p>
<p class="NDLRefMemberDescription">Set the rotation key looping behavior. </p>
<p class="NDLRefMemberDetailedDescription">The loop behavior is always clamping when only one key is given. </p>

<a name="class_ni_p_s_simulator_general_step_1ae7c696ddee4142909f55b9b465ef3659"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt16</span>  GetGrowGeneration() const</p>
<p class="NDLRefMemberDescription">Accesses the grow generation for particles. </p>
<p class="NDLRefMemberDetailedDescription">The grow generation specifies the particle generation to which the grow effect should be applied. This is usually generation 0, so that newly created particles will grow. </p>

<a name="class_ni_p_s_simulator_general_step_1a77ce5a7ff2b957e9fbcf444947d8256c"></a>
<p class="NDLRefMemberFunction">void  SetGrowGeneration(<span class="NDLSystemFont">NiUInt16</span> usGrowGeneration)</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_p_s_simulator_general_step_1a15728386ba37958f8ae2c07a03db2b99"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt16</span>  GetShrinkGeneration() const</p>
<p class="NDLRefMemberDescription">Accesses the shrink generation for particles. </p>
<p class="NDLRefMemberDetailedDescription">The shrink generation specifies the particle generation to which the shrink effect should be applied. This is usually the highest supported generation for the particle system, so that particles will shrink immediately before getting killed. </p>

<a name="class_ni_p_s_simulator_general_step_1ae48e929b79e846020e4e1b3aada5d78e"></a>
<p class="NDLRefMemberFunction">void  SetShrinkGeneration(<span class="NDLSystemFont">NiUInt16</span> usShrinkGeneration)</p>
<p class="NDLRefMemberFunction"></p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
