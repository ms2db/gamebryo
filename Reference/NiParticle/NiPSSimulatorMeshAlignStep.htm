<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiPSSimulatorMeshAlignStep</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiPSSimulatorMeshAlignStep</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="NiPSSimulatorStep.htm">NiPSSimulatorStep</a></span></p>


<p class="NDLRefHeaderFile">&lt;NiPSSimulatorMeshAlignStep.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/class_ni_p_s_simulator_mesh_align_step.gif" alt="Inheritance graph for NiPSSimulatorMeshAlignStep"/>
  <p class="FigureCaption">Inheritance graph for NiPSSimulatorMeshAlignStep</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">Encapsulates a Floodgate kernel that updates mesh particle alignment and transforms. </p>
<p class="NDLNormal">This step should be attached last in the <span class="NDLSystemFont"><a href="NiPSSimulator.htm">NiPSSimulator</a></span> mesh modifier for mesh particles. It may only be attached to a <span class="NDLSystemFont"><a href="NiPSMeshParticleSystem.htm">NiPSMeshParticleSystem</a></span>.</p>
<p class="NDLNormal">Rotation keys may be given, per generation, to provide an additional rotation that is added to the per-particle rotation computed by the <span class="NDLSystemFont"><a href="NiPSSimulatorGeneralStep.htm">NiPSSimulatorGeneralStep</a></span>. The value derived from the keys is multiplied onto the rotation that is computed from the rotation speed and axis for the particle. This allows the for random variation in the rotations through random variation in the rotation speed parameter.</p>
<p class="NDLNormal">All key-framed values are slerped. It is valid to provide only a single key, in which case the given value will be treated as a constant over the life of that particle generation.</p>
<p class="NDLNormal">This step uses the NiPSSimulatorMeshAlignKernel Floodgate kernel. The kernel is always executed. </p>

<a name="construction_and_destruction"></a>
<p class="NDLRefHead1">Construction and Destruction</p>


<a name="class_ni_p_s_simulator_mesh_align_step_1a1cf5993fa30f5500309c7d3752c2580a"></a>
<p class="NDLRefMemberFunction">NiPSSimulatorMeshAlignStep(<br/>const float fScaleAmount = 0.0f, <br/>const float fScaleRest = 1.0f, <br/>const float fScaleLimit = 1e4f)</p>
<p class="NDLRefMemberDescription">Constructor. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">fScaleAmount</span></td>
    <td>The amount of scaling increases as the speed increases. If negative, the particle will shrink as the speed increases. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fScaleRest</span></td>
    <td>The scale when the speed is zero. This value must not be the same as the limit. If the Scale Amount is positive, this value must be less than the limit. If the Scale Amount is negative, it must be greater than the limit. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fScaleLimit</span></td>
    <td>The maximum value for scale (or the minimum if the scale amount is negative). The scale will approach this value as the speed goes to infinity. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_p_s_simulator_mesh_align_step_1a5d1977d77cd47e29bd98312fe8fb98a1"></a>
<p class="NDLRefMemberFunction">virtual ~NiPSSimulatorMeshAlignStep()</p>
<p class="NDLRefMemberDescription">Destructor. </p>
<a name="base_class_overrides"></a>
<p class="NDLRefHead1">Base Class Overrides</p>


<a name="class_ni_p_s_simulator_mesh_align_step_1a5e0fa52f1e445dd99f66ad559e601914"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../NiFloodgate/NiSPKernel.htm">NiSPKernel</a></span>*  GetKernel()</p>
<p class="NDLRefMemberDescription">Returns the Floodgate kernel associated with the step, which will be of type <span class="NDLSystemFont"><a href="NiPSSimulatorFinalKernel.htm">NiPSSimulatorFinalKernel</a></span>. </p>

<a name="class_ni_p_s_simulator_mesh_align_step_1af10a6c2182567d39dea7ec5108fa9047"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">NiUInt16</span>  GetLargestInputStride()</p>
<p class="NDLRefMemberDescription">Returns the largest stride value of all the input streams in the step. </p>

<a name="class_ni_p_s_simulator_mesh_align_step_1a9a5aec6e5cb349774d68a65dab39e43b"></a>
<p class="NDLRefMemberFunction">virtual void  PrepareInputStream(<br/><span class="NDLSystemFont"><a href="NiPSParticleSystem.htm">NiPSParticleSystem</a></span>* pkParticleSystem, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>& kSemantic, <br/><span class="NDLSystemFont"><a href="../NiFloodgate/NiSPStream.htm">NiSPStream</a></span>* pkStream)</p>
<p class="NDLRefMemberDescription">Prepares the input stream with the specified semantic for execution. </p>
<p class="NDLRefMemberDetailedDescription">The following semantics are recognized: <span class="NDLSystemFont"><a href="NiPSCommonSemantics.htm#class_ni_p_s_common_semantics_1aa3579a49e7dcfa1765e02054adedd4d3">NiPSCommonSemantics::PARTICLEPOSITION</a></span>, <span class="NDLSystemFont"><a href="NiPSCommonSemantics.htm#class_ni_p_s_common_semantics_1a0aae7415b83f863e7bc14d35b963f114">NiPSCommonSemantics::PARTICLEVELOCITY</a></span>, NiPSCommonSemantics::PARTICLERADIUS, <span class="NDLSystemFont"><a href="NiPSCommonSemantics.htm#class_ni_p_s_common_semantics_1a6cc1f40e2eefce1edb35d42a0a3c2255">NiPSCommonSemantics::PARTICLESIZE</a></span>, <span class="NDLSystemFont"><a href="NiPSCommonSemantics.htm#class_ni_p_s_common_semantics_1a41c1735ccb9a06d041b54dd0aa77b0f0">NiPSCommonSemantics::PARTICLEROTANGLE</a></span>, <span class="NDLSystemFont"><a href="NiPSCommonSemantics.htm#class_ni_p_s_common_semantics_1aa77e19caecd2d117473a05bdca66975e">NiPSCommonSemantics::PARTICLEROTAXIS</a></span>, <span class="NDLSystemFont"><a href="NiPSCommonSemantics.htm#class_ni_p_s_common_semantics_1a958e9db30a054b77931a6202dd844333">NiPSCommonSemantics::PARTICLEAGE</a></span>, <span class="NDLSystemFont"><a href="NiPSCommonSemantics.htm#class_ni_p_s_common_semantics_1a8f1e0f12718cd2345449025307bd9c27">NiPSCommonSemantics::PARTICLELIFESPAN</a></span>, <span class="NDLSystemFont"><a href="NiPSCommonSemantics.htm#class_ni_p_s_common_semantics_1a7efcbd4ba341e8db7fe65966b6fdc1b1">NiPSCommonSemantics::PARTICLEFLAGS</a></span>. Other semantics will assert in Debug builds. </p>

<a name="class_ni_p_s_simulator_mesh_align_step_1a11e55d0602ccd45d5fbfbe53256da2f6"></a>
<p class="NDLRefMemberFunction">virtual void  PrepareOutputStream(<br/><span class="NDLSystemFont"><a href="NiPSParticleSystem.htm">NiPSParticleSystem</a></span>* pkParticleSystem, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>& kSemantic, <br/><span class="NDLSystemFont"><a href="../NiFloodgate/NiSPStream.htm">NiSPStream</a></span>* pkStream)</p>
<p class="NDLRefMemberDescription">Prepares the output stream with the specified semantic for execution. </p>
<p class="NDLRefMemberDetailedDescription">The following semantics are recognized: <span class="NDLSystemFont"><a href="NiPSCommonSemantics.htm#class_ni_p_s_common_semantics_1a379315045998900419ac434b9f13875b">NiPSCommonSemantics::PARTICLEROTATION</a></span>, <span class="NDLSystemFont"><a href="NiPSCommonSemantics.htm#class_ni_p_s_common_semantics_1a5c2846e0960a7321113800f1255de761">NiPSCommonSemantics::PARTICLESCALE</a></span>. Other semantics will assert in Debug builds. </p>

<a name="class_ni_p_s_simulator_mesh_align_step_1ab6ef09be1d60f645ccb2b44be4e168ce"></a>
<p class="NDLRefMemberFunction">virtual NiSPTaskPtr  Attach(<span class="NDLSystemFont"><a href="NiPSParticleSystem.htm">NiPSParticleSystem</a></span>* pkParticleSystem)</p>
<p class="NDLRefMemberDescription">Creates a task and add several input and output streams, including the fixed inputs. </p>

<a name="class_ni_p_s_simulator_mesh_align_step_1ad183d46b8ecd7d6d65a65ddc1e6977ff"></a>
<p class="NDLRefMemberFunction">virtual void  Detach(<span class="NDLSystemFont"><a href="NiPSParticleSystem.htm">NiPSParticleSystem</a></span>* pkParticleSystem)</p>
<p class="NDLRefMemberDescription">Sets all pointers to data streams to NULL. </p>

<a name="class_ni_p_s_simulator_mesh_align_step_1ab250330a5488582d36281b738aa9a055"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  Update(<br/><span class="NDLSystemFont"><a href="NiPSParticleSystem.htm">NiPSParticleSystem</a></span>* pkParticleSystem, <br/>float fTime)</p>
<p class="NDLRefMemberDescription">Update function called each frame. </p>
<p class="NDLRefMemberDetailedDescription">This function sets the block count on all streams and prepares any spawner data. Always returns true. </p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="class_ni_p_s_simulator_mesh_align_step_1a0e53c0f464c3bbe62afceedee220ee36"></a>
<p class="NDLRefMemberFunction">virtual void  InitializeNewParticle(<br/><span class="NDLSystemFont"><a href="NiPSMeshParticleSystem.htm">NiPSMeshParticleSystem</a></span>* pkParticleSystem, <br/><span class="NDLSystemFont">NiUInt32</span> uiIndex)</p>
<p class="NDLRefMemberDescription">Initialize the orientation for a new particle. </p>
<a name="rotation_animation_keys"></a>
<p class="NDLRefHead1">Rotation Animation Keys</p>


<a name="class_ni_p_s_simulator_mesh_align_step_1a5612ed7e2965f0d3c2e54349f925a768"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiPSKernelQuaternionKey.htm">NiPSKernelQuaternionKey</a></span>*  GetRotationKeys(<span class="NDLSystemFont">NiUInt8</span>& ucNumRotationsKeys) const</p>
<p class="NDLRefMemberDescription">Get the rotation keys that have been assigned to the step. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">ucNumRotationsKeys</span></td>
    <td>Returns the size of the returned rotation key array. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A pointer to an array of rotation keys. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_p_s_simulator_mesh_align_step_1ab2906a75f0485a5aeb78c0946dd7dad1"></a>
<p class="NDLRefMemberFunction">void  CopyRotationKeys(<br/>const <span class="NDLSystemFont"><a href="NiPSKernelQuaternionKey.htm">NiPSKernelQuaternionKey</a></span>* pkRotationKeys, <br/>const <span class="NDLSystemFont">NiUInt8</span> ucNumKeys)</p>
<p class="NDLRefMemberDescription">Copies the input array of rotation keys, allocating aligned memory internally and copying the data. </p>
<p class="NDLRefMemberDetailedDescription">It is valid to specify NULL for pkRotationKeys, but ucNumRotationKeys must also be zero. If pkRotationKeys is not NULL, ucNumRotationKeys must be greater than zero.</p>
<p class="NDLRefMemberDetailedDescription">Is it valid to provide a single key representing a constant rotation value.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">This function does not take ownership of pkRotationKeys. The calling code is responsible for memory management of that data.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pkRotationKeys</span></td>
    <td>A pointer to the array of rotation keys to copy. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">ucNumKeys</span></td>
    <td>The number of keys in the pkRotationKeys array. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_p_s_simulator_mesh_align_step_1a75c5dc3fee3725476fbb01381323f971"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiPSLoopBehavior</span>  GetRotationLoopBehavior() const</p>
<p class="NDLRefMemberDescription">Get the rotation key looping behavior. </p>

<a name="class_ni_p_s_simulator_mesh_align_step_1a3fcde36ee8490e970bad5eb0ea26465f"></a>
<p class="NDLRefMemberFunction">void  SetRotationLoopBehavior(const <span class="NDLSystemFont">NiPSLoopBehavior</span> kBehavior)</p>
<p class="NDLRefMemberDescription">Set the rotation key looping behavior. </p>
<p class="NDLRefMemberDetailedDescription">The loop behavior is always clamping when only one key is given. </p>
<a name="velocity-derived_scaling_parameters"></a>
<p class="NDLRefHead1">Velocity-Derived Scaling Parameters</p>

<p class="NDLRefMemberDescription">These parameters control scaling of the mesh particles based on the particle speed.</p>
<p class="NDLRefMemberDescription">This scaling is applied as a multiplier to the particle size determined from the emitter and and size animation or grow-fade.</p>
<p class="NDLRefMemberDescription">When the speed is zero, the scale will be ScaleRest, which must be positive. The rate at which scale grows or shrinks with velocity is defined by ScaleAmount, which may be negative to have the particle shrink as it moves faster. The scale is limited to the value ScaleLimit as the speed increases to infinity. The ScaleLimit must be greater than ScaleRest if ScaleAmount is positive, or less than ScaleRest when ScaleLimit is negative. </p>

<a name="class_ni_p_s_simulator_mesh_align_step_1a47a783d32833edca4b0b17170344c2e0"></a>
<p class="NDLRefMemberFunction">float  GetScaleAmount() const</p>
<p class="NDLRefMemberDescription">Get the scale amount. </p>

<a name="class_ni_p_s_simulator_mesh_align_step_1aaf00e6d94a7a33a482cfdf7f7a9e6dea"></a>
<p class="NDLRefMemberFunction">void  SetScaleAmount(const float fAmount)</p>
<p class="NDLRefMemberDescription">Set the scale amount. </p>

<a name="class_ni_p_s_simulator_mesh_align_step_1a2e20029fe2b530e37ecaa8e52a4a6a72"></a>
<p class="NDLRefMemberFunction">float  GetScaleRest() const</p>
<p class="NDLRefMemberDescription">Get the scale rest value. </p>

<a name="class_ni_p_s_simulator_mesh_align_step_1ab504517b10ea3059a59658bc0a6c8177"></a>
<p class="NDLRefMemberFunction">void  SetScaleRest(const float fRest)</p>
<p class="NDLRefMemberDescription">Set the scale rest value. </p>

<a name="class_ni_p_s_simulator_mesh_align_step_1a9678bfb526be6f44709abcf49fcd05fe"></a>
<p class="NDLRefMemberFunction">float  GetScaleLimit() const</p>
<p class="NDLRefMemberDescription">Get the scale limit. </p>

<a name="class_ni_p_s_simulator_mesh_align_step_1af1078552e89156a56c7e7944931925df"></a>
<p class="NDLRefMemberFunction">void  SetScaleLimit(const float fLimit)</p>
<p class="NDLRefMemberDescription">Set the scale limit. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
