<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiPSColliderHelpers</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiPSColliderHelpers</p>


<p class="NDLRefHeaderFile">&lt;NiPSColliderHelpers.h&gt;</p>


<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">Contains static helper functions used for particle collision. </p>
<p class="NDLNormal">The <span class="NDLSystemFont"><a href="NiPSSimulatorCollidersKernel.htm">NiPSSimulatorCollidersKernel</a></span> Floodgate kernel calls the static helper functions contained in this class to detect and handle particle collisions. Each particle collider has two functions in this class: one to detect a collision and one to handle a collision. For any given particle, only the collider with the closest collision will have its collision handler function called.</p>
<p class="NDLNormal">Due to the implementation of Floodgate kernels on different platforms, it is necessary that all output (non-const) parameters to these functions get set to some value. It is not valid to simply not set an output value, as garbage memory could result on some platforms.</p>
<p class="NDLNormal">If a new particle collider class is added, both detection and handler functions must be added to this class, and the <span class="NDLSystemFont"><a href="NiPSSimulatorCollidersKernel.htm">NiPSSimulatorCollidersKernel</a></span> Floodgate kernel must be changed to call those functions. </p>

<a name="public_static_methods"></a>
<p class="NDLRefHead1">Public Static Methods</p>


<a name="class_ni_p_s_collider_helpers_1aa28a1cfada33a40694e0e7967b067f92"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  DetectPlanarCollision(<br/>float& fCollisionTime, <br/><span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kCollisionPoint, <br/>const float fInitialTime, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kParticlePosition, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kParticleVelocity, <br/>const <span class="NDLSystemFont"><a href="NiPSColliderDefinitions__PlanarColliderData.htm">NiPSColliderDefinitions::PlanarColliderData</a></span>& kInputData)</p>
<p class="NDLRefMemberDescription">Detects a collision between a particle and a plane. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">fCollisionTime</span></td>
    <td>Holds the time at which the collision would occur if one is detected. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kCollisionPoint</span></td>
    <td>Holds the point in space at which the particle would collide if a collision is detected. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fInitialTime</span></td>
    <td>The current time. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kParticlePosition</span></td>
    <td>The current position of the particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kParticleVelocity</span></td>
    <td>The current velocity of the particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kInputData</span></td>
    <td>A structure containing the data needed to detect a planar collision. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Whether or not a collision was detected. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_p_s_collider_helpers_1a72caad97245cd6b2fe104e0fe679a1ee"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  DetectSphericalCollision(<br/>float& fCollisionTime, <br/><span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kCollisionPoint, <br/>const float fInitialTime, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kParticlePosition, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kParticleVelocity, <br/>const <span class="NDLSystemFont"><a href="NiPSColliderDefinitions__SphericalColliderData.htm">NiPSColliderDefinitions::SphericalColliderData</a></span>& kInputData)</p>
<p class="NDLRefMemberDescription">Detects a collision between a particle and a sphere. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">fCollisionTime</span></td>
    <td>Holds the time at which the collision would occur if one is detected. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kCollisionPoint</span></td>
    <td>Holds the point in space at which the particle would collide if a collision is detected. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fInitialTime</span></td>
    <td>The current time. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kParticlePosition</span></td>
    <td>The current position of the particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kParticleVelocity</span></td>
    <td>The current velocity of the particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kInputData</span></td>
    <td>A structure containing the data needed to detect a spherical collision. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Whether or not a collision was detected. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_p_s_collider_helpers_1af13b2d0fc43e1ded0e8bd8677e580d3b"></a>
<p class="NDLRefMemberFunction">static void  HandlePlanarCollision(<br/><span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kOParticlePosition, <br/><span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kOParticleVelocity, <br/><span class="NDLSystemFont">NiUInt32</span>& uiOParticleFlags, <br/>float& fOLastUpdateTime, <br/>const float fCollisionTime, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kCollisionPoint, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kIParticleVelocity, <br/>const <span class="NDLSystemFont">NiUInt32</span> uiIParticleFlags, <br/>const float fILastUpdateTime, <br/>const <span class="NDLSystemFont"><a href="NiPSColliderDefinitions__PlanarColliderData.htm">NiPSColliderDefinitions::PlanarColliderData</a></span>& kInputData, <br/>const float fCurrentTime)</p>
<p class="NDLRefMemberDescription">Handles a planar collision. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kOParticlePosition</span></td>
    <td>The new particle position after the collision. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kOParticleVelocity</span></td>
    <td>The new particle velocity after the collision. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiOParticleFlags</span></td>
    <td>The new flags bitfield for the particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fOLastUpdateTime</span></td>
    <td>The new last update time for the particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fCollisionTime</span></td>
    <td>The time at which the collision will occur. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kCollisionPoint</span></td>
    <td>The point in space at which the collision will occur. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kIParticleVelocity</span></td>
    <td>The current velocity of the particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiIParticleFlags</span></td>
    <td>The current flags bitfield for the particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fILastUpdateTime</span></td>
    <td>The current last update time for the particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kInputData</span></td>
    <td>A structure containing the data needed to handle the planar collision. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fCurrentTime</span></td>
    <td>The current time. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_p_s_collider_helpers_1a02b77e7d5bc5aee216be06dd71f9647f"></a>
<p class="NDLRefMemberFunction">static void  HandleSphericalCollision(<br/><span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kOParticlePosition, <br/><span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kOParticleVelocity, <br/><span class="NDLSystemFont">NiUInt32</span>& uiOParticleFlags, <br/>float& fOLastUpdateTime, <br/>const float fCollisionTime, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kCollisionPoint, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kIParticleVelocity, <br/>const <span class="NDLSystemFont">NiUInt32</span> uiIParticleFlags, <br/>const float fILastUpdateTime, <br/>const <span class="NDLSystemFont"><a href="NiPSColliderDefinitions__SphericalColliderData.htm">NiPSColliderDefinitions::SphericalColliderData</a></span>& kInputData, <br/>const float fCurrentTime)</p>
<p class="NDLRefMemberDescription">Handles a spherical collision. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kOParticlePosition</span></td>
    <td>The new particle position after the collision. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kOParticleVelocity</span></td>
    <td>The new particle velocity after the collision. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiOParticleFlags</span></td>
    <td>The new flags bitfield for the particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fOLastUpdateTime</span></td>
    <td>The new last update time for the particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fCollisionTime</span></td>
    <td>The time at which the collision will occur. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kCollisionPoint</span></td>
    <td>The point in space at which the collision will occur. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kIParticleVelocity</span></td>
    <td>The current velocity of the particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiIParticleFlags</span></td>
    <td>The current flags bitfield for the particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fILastUpdateTime</span></td>
    <td>The current last update time for the particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kInputData</span></td>
    <td>A structure containing the data needed to handle the spherical collision. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fCurrentTime</span></td>
    <td>The current time. </td>
</tr>

        </tbody>
    </table>
</div>


 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
