<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiMilesSource</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>


<p class="NDLRefHeadClassTitle">NiMilesSource</p>

<p class="NDLRefParentage">: public <u><span><a HREF="NiAudioSource.htm">NiAudioSource</a></span></u></p>

<p class="NDLRefHeaderFile"><span class="NDLSystemFont">&lt;NiMilesSource.h&gt;</span></p>

<p class="NDLRefHead1">Description </p>

<p><span class="NDLSystemFont">NiMilesSource</span> 
 objects are the sound emitters in a Gamebryo application. They access 
 file data for audio playback. The <span class="NDLSystemFont">NiMilesSource</span> class, like <span class="NDLSystemFont"><a href="NiMilesListener.htm">NiMilesListener</a></span>, 
 is derived from <span class="NDLSystemFont"><a href="../../Reference/NiMain/NiAVObject.htm">NiAVObject</a></span>, 
 making it possible to attach the source to a Gamebryo scene graph. 
 Like any <span class="NDLSystemFont"><a href="../../Reference/NiMain/NiAVObject.htm">NiAVObject</a></span> 
 based class, the world space location of a <span class="NDLSystemFont">NiMilesSource</span> is defined 
 by the accumulation of transforms in the scene graph. This capability 
 makes it simple to position an audio source in an application's 3D world 
 using the same operations used in positioning any visual object. 
 For example, a source can be attached to an animated <span class="NDLSystemFont"><a href="../../Reference/NiMain/NiNode.htm">NiNode</a></span> scene graph element.</p>

<p><span class="NDLSystemFont">NiMilesSource</span> supports 3D spatialized sound sources as well as streaming and ambient sources. </p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiMilesSource(unsigned int uiType = TYPE_DEFAULT)</p>

<p class="NDLRefMemberDescription">The <span class="NDLSystemFont">NiMilesSource</span> constructor takes an <span class="NDLSystemFont">unsigned integer</span> parameter, which represents one of three enumerated type flags. This parameter indicates to the source what its initial source-type should be. Class-scoped enumerated types of <span class="NDLSystemFont"><a href="NiAudioSource.htm">NiAudioSource</a></span> identify the source types. The specific details for these types are listed below:</p>

<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
	<thead>
		<tr>
			<th>Type Enumeration</th>
			<th>Description</th>
		</tr>
	</thead>
	<tbody>
		<tr>						
       	<td>TYPE_3D</td>
       	<td>This type should typically be chosen for any source that will have a position in 3D. It represents a 3D source set for loading static audio data (as opposed to streaming data).
</td>
		</tr>
		<tr>
       	<td>TYPE_AMBIENT</td>
       	<td>A native source is useful for playing back music or sound effects that are pre-encoded with spatial information.
</td>
		</tr>
		<tr>						
       	<td>TYPE_DEFAULT</td>
       	<td>This type is the default source type, and is the same as TYPE_3D. Applications will likely use this type most frequently.</td>
		</tr>
	</tbody>	
</table>
</div>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">virtual unsigned int GetType()</p>

<p class="NDLRefMemberDescription">Returns the source-type that was set in 
 the constructor.</p>

<p class="NDLRefMemberFunction">virtual void SetAllowSharing(bool bAllowSharing)</p>

<p class="NDLRefMemberDescription">Within the audio system it is possible 
 for similar sounds to share their audio data. Sharing after a source 
 has already been loaded may not make sense. Within the Miles audio 
 system only TYPE_3D (or TYPE_DEFAULT) sounds can share sound data.</p>

<p class="NDLRefMemberFunction">virtual void SetStreamed(bool bStream);</p>

<p class="NDLRefMemberDescription">Within the audio system, it is possible 
 to mark a source so it will be streamed from disk. Within the Miles audio 
 system, only TYPE_AMBIENT sounds can be streamed.</p>

<p class="NDLRefMemberFunction">virtual void SetFilename(const char* pcFilename)</p>

<p class="NDLRefMemberDescription"><span class="NDLSystemFont">SetFilename()</span> 
 and <span class="NDLSystemFont">GetFilename()</span> 
 provide access to the character string the source will use to load audio 
 data. Note that <span class="NDLSystemFont">SetFilename()</span> 
 makes internal copies of the character string it is sent as a filename. 
 It is the application's responsibility to clean up any memory it has allocated 
 itself for the character string. Note also that <span class="NDLSystemFont">SetFilename()</span> does not 
 cause any wave file data to be loaded into memory. This function 
 must be called before the <span class="NDLSystemFont">Load()</span> 
 function or loading will fail.</p>

<p class="NDLRefMemberFunction">virtual bool Load()</p>

<p class="NDLRefMemberDescription">The <span class="NDLSystemFont">Load()</span> 
 function attempts to load audio data into the source object. The 
 <span class="NDLSystemFont">SetFilename()</span> 
 function must be called before this function is called. <span class="NDLSystemFont">Load()</span> returns <span 
 class="NDLSystemFont">true</span> 
 if the loading succeeds. It returns <span class="NDLSystemFont">false</span> if the filename 
 has not yet been set, or if the audio data loading fails. During 
 loading, Miles handles and file images are created. Miles can load 
 a variety of different file types: PCM_WAV, ADPCM_WAV, and MP3.</p>

<p class="NDLRefMemberFunction">virtual bool Unload()</p>

<p class="NDLRefMemberDescription"><span class="NDLSystemFont">Unload()</span> 
 attempts to free allocated data for a sound source. It returns a 
 value of <span class="NDLSystemFont">true</span> 
 if it succeeds, or <span class="NDLSystemFont">false</span> 
 otherwise.</p>

<p class="NDLRefMemberFunction">virtual void Release()</p>

<p class="NDLRefMemberDescription"><span class="NDLSystemFont">Release()</span> 
 will release the Miles resource handles. This function will not 
 remove the file image. It is called when a source stops playing.</p>

<p class="NDLRefMemberFunction">void CreateHandle()</p>

<p class="NDLRefMemberDescription"><span class="NDLSystemFont">CreateHandle()</span> 
 will create the Miles resource handle based on the current source type. 
 Handles will be created when the source is played.</p>

<p class="NDLRefHead2">Three-Dimensional Audio</p>

<p>The following few functions are for 3D audio sources. 
 The ambient sources will not be affected by calls to these functions.</p>

<p class="NDLRefMemberFunction">virtual bool SetConeData(float fAngle1Deg, 
 float fAngle2Deg, floatfGain)</p>

<p class="NDLRefMemberFunction">virtual void GetConeData(float&amp; fAngle1Deg, 
 float&amp; fAngle2Deg, float&amp; fGain)</p>

<p class="NDLRefMemberDescription">These functions provide access to the 
 values that define the directionality of a source cone. <span class="NDLSystemFont">SetConeData()</span> specifies 
 the cone angles for directional sound sources. Note that some drivers 
 do not provide cone sources as an option. The two angles, represented 
 by the parameters <span class="NDLSystemFont">fAngle1Deg</span> 
 and <span class="NDLSystemFont">fAngleDeg2</span>, 
 define the size of the cone by its inner and outer angles, respectively. 
 The gain of the source is at its maximum inside the region defined by 
 the inner angle value. Between the inner angle value and the outer 
 angle value, the gain is multiplied by an interpolated value between <span 
 class="NDLSystemFont">1.0</span> 
 and the value specified by the <span class="NDLSystemFont">fGain</span> 
 parameter. Beyond the outer angle, the gain is always multiplied 
 by <span class="NDLSystemFont">fGain</span>. 
 A call to <span class="NDLSystemFont">SetConeData()</span> 
 also tags a source as being a cone source. </p>

<p class="NDLRefMemberFunction">virtual bool SetMinMaxDistance(float fMin, 
 float fMax)</p>

<p class="NDLRefMemberFunction">virtual void GetMinMaxDistance(float&amp; 
 fMin, float&amp; fMax)</p>

<p class="NDLRefMemberDescription">These functions set and get the range 
 over which the audio system distance model will be applied to the source. 
 The <span class="NDLSystemFont">fMin</span> 
 parameter specifies the minimum distance from the listener at which point 
 the source's sound will begin to be attenuated. The <span class="NDLSystemFont">fMax</span> parameter defines 
 the maximum distance from the listener where the distance model will still 
 have effect on the source. </p>

<p class="NDLRefHead2">General Audio Functions</p>

<p class="NDLRefMemberFunction">virtual bool SetGain(float fGain)</p>

<p class="NDLRefMemberFunction">virtual float GetGain()</p>

<p class="NDLRefMemberDescription"><span class="NDLSystemFont">SetGain()</span> 
 and <span class="NDLSystemFont">GetGain()</span> 
 access the source level gain setting. A value of <span class="NDLSystemFont">0.0</span> represents silence, 
 whereas <span class="NDLSystemFont">1.0</span> 
 represents the maximum loudness for a source. The default value is <span 
 class="NDLSystemFont">1.0</span>.</p>

<p class="NDLRefMemberFunction">virtual void SetLoopCount(int iLoopCount)</p>

<p class="NDLRefMemberFunction">virtual int GetLoopCount()</p>

<p class="NDLRefMemberDescription">Setting and getting the loop count determines 
 how many times the source will play. The number of times it will 
 play is from 1 to <span class="NDLSystemFont">LOOP_INFINITE</span>.</p>

<p class="NDLRefMemberFunction">virtual bool SetPlaybackRate(long lRate)</p>

<p class="NDLRefMemberFunction">virtual long GetPlaybackRate()</p>

<p class="NDLRefMemberDescription"><span class="NDLSystemFont">SetPlaybackRate()</span> 
 and <span class="NDLSystemFont">GetPlaybackRate</span> 
 set/get how the sound will be played. Check the Miles documentation 
 for a description of this function.</p>

<p class="NDLRefMemberFunction">virtual bool Play()</p>

<p class="NDLRefMemberDescription">This function begins playback immediately. 
 Therefore, it is a good idea to ensure that all 3D sources and the listener 
 are positioned before calling this function.</p>

<p class="NDLRefMemberDescription">If the positions and orientations are 
 not set before playing begins, an audible &quot;rip&quot; can be heard 
 as the positions are quickly changed. Calling this function on an 
 already started source will start the source playing from the beginning. 
 This function returns <span class="NDLSystemFont">true</span> 
 if the call to play the source was successful, or <span class="NDLSystemFont">false</span> otherwise. 
 Because there are a limited number of resource handles in Miles, only 
 when a source is played will a resource handle be created.</p>

<p class="NDLRefMemberFunction">virtual bool Stop()</p>

<p class="NDLRefMemberDescription"><span class="NDLSystemFont">Stop()</span> 
 stops a source playing. The <span class="NDLSystemFont">Stop()</span> 
 function returns <span class="NDLSystemFont">true</span> 
 on success, or <span class="NDLSystemFont">false</span> 
 otherwise. Because there are a limited number of resource handles 
 in Miles, when a source is stopped the resource handle will be released.</p>

<p class="NDLRefMemberFunction">Virtual void Rewind()</p>

<p class="NDLRefMemberDescription">The <span class="NDLSystemFont">Rewind()</span> 
 function rewinds the playback cursor of a source to the beginning of the 
 audio data. </p>

<p class="NDLRefMemberFunction">virtual Status GetStatus()</p>

<p class="NDLRefMemberDescription"><span class="NDLSystemFont">GetStatus()</span> 
 returns a <span class="NDLSystemFont"><a 
 href="NiAudioSource.htm">NiAudioSource</a></span> 
 class-scoped enumerated-type value representing the current status of 
 the source. The possible returned values are <span class="NDLSystemFont">LAYING</span>, <span class="NDLSystemFont">LOOPING</span>, <span class="NDLSystemFont">WAITING</span>, <span class="NDLSystemFont">STOPPED</span>, or <span class="NDLSystemFont">NOT_SET</span> (if the status 
 can't be obtained).</p>

<p class="NDLRefMemberFunction">virtual bool SetPlayTime(float fTime)</p>

<p class="NDLRefMemberFunction">virtual float GetPlayTime()</p>

<p class="NDLRefMemberDescription"><span class="NDLSystemFont">SetPlayTime()</span> 
 and <span class="NDLSystemFont">GetPlayTime()</span> 
 set and get the playback cursor's time-relative position in the source's 
 audio data. The <span class="NDLSystemFont">fTime</span> 
 parameter for <span class="NDLSystemFont">SetPlayTime()</span> 
 and the return value of <span class="NDLSystemFont">GetPlayTime()</span> 
 represent seconds from the beginning of the wave data. If the time 
 is larger than the length of the audio file, regardless of playback mode, 
 <span class="NDLSystemFont">SetPlayTime()</span> 
 will fail and return false.</p>

<p class="NDLRefMemberFunction">virtual bool GetPlayLength(float&amp; fTime)</p>

<p class="NDLRefMemberDescription"><span class="NDLSystemFont">GetPlayLength()</span> 
 will get the length of the sound in seconds. This function will 
 return true if the call succeeds.</p>

<p class="NDLRefMemberFunction">virtual bool SetPlayPosition(unsigned int 
 uiPos)</p>

<p class="NDLRefMemberFunction">virtual unsigned int GetPlayPosition()</p>

<p class="NDLRefMemberDescription"><span class="NDLSystemFont">SetPlayPosition()</span> 
 and <span class="NDLSystemFont">GetPlayPosition()</span> 
 set and get the playback cursor's byte-relative position in the source's 
 audio data. The <span class="NDLSystemFont">uiPos</span> 
 parameter for <span class="NDLSystemFont">SetPlayPosition()</span> 
 and the return value of <span class="NDLSystemFont">GetPlayPosition()</span> 
 represent the number of bytes from the beginning of the audio data. 
 If the position is larger than the size of the audio file, regardless 
 of playback mode, <span class="NDLSystemFont">SetPlayPosition()</span> 
 will fail and return <span class="NDLSystemFont">false</span>. 
 </p>

<p class="NDLRefMemberFunction">virtual void SetLoaded(bool bLoaded)</p>

<p class="NDLRefMemberFunction">virtual bool GetLoaded()</p>

<p class="NDLRefMemberDescription"><span class="NDLSystemFont">SetLoaded()</span> 
 and <span class="NDLSystemFont">GetLoaded()</span> 
 access the Boolean data member flag of <span class="NDLSystemFont"><a href="NiAudioSource.htm">NiAudioSource</a></span> 
 that is used to indicate if audio data is loaded into the source. 
 It is set automatically during calls to <span class="NDLSystemFont">Load()</span>. It is exposed 
 to allow applications that perform self-streaming to set the flag. 
 The flag must have a <span class="NDLSystemFont">true</span> 
 value prior to playback.</p>

<p class="NDLRefMemberFunction">virtual void Update(float fTime)</p>

<p class="NDLRefMemberDescription">This function updates the audio system 
 with the status of the source. The source's world-space orientation 
 and location are updated in the audio system with every call to <span 
 class="NDLSystemFont">Update()</span>. 
 This function should be called any time the source is moved. It can be 
 called automatically by <span class="NDLSystemFont">NiMilesAudioSystem::Update()</span> 
 if that function is sent true for its <span class="NDLSystemFont">bUpdateAll</span> parameter. 
 This function has no effect on ambient sources. Miles has a limited 
 number of resource handles, when a source has finished playing it will 
 release its resource handle.</p>

<p class="NDLRefMemberFunction">virtual NiPoint3 GetPosition()</p>

<p class="NDLRefMemberFunction">virtual void GetOrientation(NiPoint3&amp; 
 kDir, NiPoint3&amp; kUp)</p>

<p class="NDLRefMemberFunction">virtual NiPoint3 GetVelocity()</p>

<p class="NDLRefMemberDescription">These three functions query the internal 
 audio system state of the source. Typically, the Gamebryo state 
 information maintained by <span class="NDLSystemFont">NiMilesSource</span> itself or its <span class="NDLSystemFont"><a href="../../Reference/NiMain/NiAVObject.htm">NiAVObject</a></span> 
 functionality should be sufficient. However, there may be cases 
 where these methods are needed. Note that the return values and 
 parameters of these methods are intentionally not references.</p>

<p class="NDLRefMemberFunction">void SetSamplePreference(char* pcPreferenceName, 
 void*pvPreferenceValue)</p>

<p class="NDLRefMemberFunction">void GetSamplePreference(char* pcPreferenceName, 
 void* pvPreferenceValue)</p>

<p class="NDLRefMemberDescription">Some drivers allow source level parameters 
 to be set. If a 3D source is associated with a driver that allows 
 such functionality these functions will allow access to the application. 
 See the Miles documentation for more information.</p>

<p class="NDLRefHead2">Access to Miles Data Structures</p>

<p>The following functions give access to internal Miles 
 data structures for the <span class="NDLSystemFont">NiMilesSource</span> 
 object. This allows applications to implement functionality that 
 is not covered by the <span class="NDLSystemFont">NiMilesSource</span> 
 interfaces but may be provided in Miles. They should only be used 
 by applications fluent in Miles internals.</p>

<p class="NDLRefMemberFunction">void* GetHandle()</p>

<p class="NDLRefMemberDescription">This function returns a pointer to the 
 Miles source handle. The data type of this function's return value 
 varies depending on the source type. It could either be <span class="NDLSystemFont">H3DSAMPLE</span> for 3D sources, 
 <span class="NDLSystemFont">HSAMPLE</span> 
 for ambient non-streamed sources, or <span class="NDLSystemFont">HSTREAM</span> 
 for ambient streamed sources. See the Miles documentation for details.</p>

<p class="NDLRefMemberFunction">void* GetFileImage()</p>

<p class="NDLRefMemberDescription">This function returns a pointer to the 
 actual buffer of digital sound data (file image), created during <span 
 class="NDLSystemFont">Load()</span>. 
 Format varies depending on source type. See the Miles documentation 
 for details, in particular functions such as <span class="NDLSystemFont">AIL_set_3D_sample_file()</span> 
 of the Miles SDK work with this data directly. The file image is shared 
 between sources.</p>

<p class="NDLRefHead2">Occlusion, obstruction and room effect</p>

<p>3D sources can be occluded and obstructed as well as 
 affected by reverb settings. These functions allow the application 
 to use this functionality. The specific implementation of the audio 
 system will determine if these functions are effective.</p>

<p class="NDLRefMemberFunction">bool SetRoomEffectLevel(float fLevel)</p>

<p class="NDLRefMemberFunction">float GetRoomEffectLevel()</p>

<p class="NDLRefMemberDescription">These functions are used to access the 
 amount that a source is affected by the reverb setting of the environment. 
 Reverb is an expensive feature CPU-wise and should be used sparingly. 
 These functions may be used to decrease the CPU-cost. Sources with 
 a lower effect level take up less processing time than those with higher 
 levels on some drivers. </p>

<p class="NDLRefMemberFunction">bool SetOcclusionFactor(float fLevel)</p>

<p class="NDLRefMemberFunction">float GetOcclusionFactor()</p>

<p class="NDLRefMemberDescription">A 3D source is occluded when it is completely 
 blocked off from the listener. These functions give access to the 
 amount that a source is occluded. Different drivers treat this parameter 
 in different manners. </p>

<p class="NDLRefMemberFunction">bool SetObstructionFactor(float fLevel)</p>

<p class="NDLRefMemberFunction">float GetObstructionFactor()</p>

<p class="NDLRefMemberDescription">A 3D source is obstructed when it is partially 
 blocked from the listener; a direct path does not exist but an indirect 
 path does. These functions give access to the amount that a source 
 is obstructed. Different drivers treat this parameter in different 
 manners. </p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
