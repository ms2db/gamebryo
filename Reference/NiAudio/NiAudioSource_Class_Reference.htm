<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>
<title>NiAudioSource</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiAudioSource</p>

<p class="NDLRefParentage">: public <span><a href=
"../../Reference/NiMain/NiAVObject.htm">NiAVObject</a></span></p>

<p class="NDLRefHeaderFile"><span class=
"NDLSystemFont">&lt;NiAudioSource.h&gt;</span></p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiAudioSource</span> objects are
the sound emitters in a Gamebryo application. They access file
data for audio playback. The <span class=
"NDLSystemFont">NiAudioSource</span> class, like <span class=
"NDLSystemFont"><a href=
"NiAudioListener.htm">NiAudioListener</a></span>, is derived from
<span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiAVObject.htm">NiAVObject</a></span>,
making it possible to attach the source to a Gamebryo scene
graph. As with any <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiAVObject.htm">NiAVObject</a></span>
based class, the world space location of a <span class=
"NDLSystemFont">NiAudioSource</span> is defined by the
accumulation of transforms in the scene graph. This capability
makes it simple to position an audio source in an application's
3D world, using the same operations used in positioning any
visual object. For example, a source may be attached to an
animated <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiNode.htm">NiNode</a></span> scene graph
element.</p>

<p><span class="NDLSystemFont">NiAudioSource</span> supports 3D
spatialized sound sources, as well as streaming and ambient
sources.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiAudioSource(unsigned int uiType
= TYPE_DEFAULT)</p>

<p class="NDLRefMemberDescription">The <span class=
"NDLSystemFont">NiAudioSource</span> constructor takes an
<span class="NDLSystemFont">unsigned</span> <span class=
"NDLSystemFont">integer</span> parameter, which represents one of
three enumerated type flags. This parameter indicates to the
source what its initial source-type should be. Class-scoped
enumerated types of <span class=
"NDLSystemFont">NiAudioSource</span> identify the source types.
The specific details for these types are listed below:</p>

<!--(Table)=========================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Type Enumeration</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">TYPE_3D</span></td>

                <td>This type should typically be chosen for any
                source that will have a position in 3D. It
                represents a 3D source set for loading static
                audio data (as opposed to streaming data).</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">TYPE_AMBIENT</span></td>

                <td>A native source is useful for playing back
                music or sound effects that are pre-encoded with
                spatial information.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">TYPE_DEFAULT</span></td>

                <td>This type is the default source type, and is
                the same as <span class=
                "NDLSystemFont">TYPE_3D</span>. Applications will
                likely use this type most frequently.</td>
            </tr>
        </tbody>
    </table>
</div>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">virtual unsigned int
GetType()</p>

<p class="NDLRefMemberDescription">Returns the source-type that
was set in the constructor.</p>

<p class="NDLRefMemberFunction">virtual void SetAllowSharing(bool
bAllowSharing)</p>

<p class="NDLRefMemberFunction">virtual bool GetAllowSharing()
const</p>

<p class="NDLRefMemberDescription">Within the audio system, it is
possible for similar sounds to share their audio data. The level
of sharing, and any restrictions, are dependent on the
implementation of the audio system. Furthermore, there may be
some restrictions on when you can set a source to allow sharing.
Sharing after a source has already been loaded may not make
sense.</p>

<p class="NDLRefMemberFunction">virtual void SetStreamed(bool
bStream);</p>

<p class="NDLRefMemberFunction">virtual bool GetStreamed()
const</p>

<p class="NDLRefMemberDescription">Within the audio system, it is
possible to mark a source so it will be streamed from disk. This
capability typically would be used for game music or longer
character speech. Any restrictions on streaming will be dependent
on the implementation of the audio system.</p>

<p class="NDLRefMemberFunction">virtual void SetFilename(const
char* pcFilename)</p>

<p class="NDLRefMemberFunction">virtual const char*
GetFilename()</p>

<p class="NDLRefMemberDescription"><span class=
"NDLSystemFont">SetFilename()</span> and <span class=
"NDLSystemFont">GetFilename()</span> provide access to the
character string the source will use to load audio data. Note
that <span class="NDLSystemFont">SetFilename()</span> makes
internal copies of the character string it is sent as a filename.
It is the application's responsibility to clean up any memory it
has allocated itself for the character string. Note also that
<span class="NDLSystemFont">SetFilename()</span> does not cause
any wave file data to be loaded into memory. This function must
be called before the <span class="NDLSystemFont">Load()</span>
function or loading will fail.</p>

<p class="NDLRefMemberFunction">Virtual const char*
GetLocalName()</p>

<p class="NDLRefMemberDescription">Get the local file name. This
name does not include the path.</p>

<p class="NDLRefMemberFunction">virtual bool Load()</p>

<p class="NDLRefMemberDescription">The <span class=
"NDLSystemFont">Load()</span> function attempts to load audio
data into the source object. The <span class=
"NDLSystemFont">SetFilename()</span> function must be called
before this function is called. <span class=
"NDLSystemFont">Load()</span> returns <span class=
"NDLSystemFont">true</span> if the loading succeeds. It returns
<span class="NDLSystemFont">false</span> if the filename has not
yet been set, or if the audio data loading fails.</p>

<p class="NDLRefMemberFunction">virtual bool Unload()</p>

<p class="NDLRefMemberDescription"><span class=
"NDLSystemFont">Unload()</span> attempts to free allocated data
for a sound source. It returns a value of <span class=
"NDLSystemFont">true</span> if it succeeds, or <span class=
"NDLSystemFont">false</span> otherwise.</p>

<p class="NDLRefHead2">Three-Dimensional Audio</p>

<p>The following few functions are for 3D audio sources. The
ambient sources will not be affected by calls to these
functions.</p>

<p class="NDLRefMemberFunction">virtual void
SetDirectionVector(const NiPoint3&amp; kDir)</p>

<p class="NDLRefMemberFunction">virtual const NiPoint3&amp;
GetDirectionVector() const</p>

<p class="NDLRefMemberFunction">virtual void SetUpVector(const
NiPoint3&amp; kUp)</p>

<p class="NDLRefMemberFunction">virtual const NiPoint3&amp;
GetUpVector() const</p>

<p class="NDLRefMemberDescription">Cone sources (see below)
require a coordinate frame to describe their orientation. As with
the <span class="NDLSystemFont"><a href=
"NiAudioListener.htm">NiAudioListener</a></span> object, the
"source space" direction and up vectors can be accessed using the
four functions listed above.</p>

<p class="NDLRefMemberDescription">Note that these vectors should
only be set for cone sources. They will have no effect on
omni-directional sources. In other words, they do not need to be
set if the source is not a cone source.</p>

<p class="NDLRefMemberFunction">virtual bool SetConeData(float
fAngle1Deg, float fAngle2Deg, float fGain) = 0</p>

<p class="NDLRefMemberFunction">virtual void
GetConeData(float&amp; fAngle1Deg, float&amp; fAngle2Deg,
float&amp; fGain) = 0</p>

<p class="NDLRefMemberDescription">These functions provide access
to the values that define the directionality of a source cone.
<span class="NDLSystemFont">SetConeData()</span> specifies the
cone angles for directional sound sources. Note that some
providers do not provide cone sources as an option.</p>

<p class="NDLRefMemberDescription">The two angles, represented by
the parameters <span class="NDLSystemFont">fAngle1Deg</span> and
<span class="NDLSystemFont">fAngleDeg2</span>, define the size of
the cone by its inner and outer angles, respectively. The gain of
the source is at its maximum inside the region defined by the
inner angle value. Between the inner angle value and the outer
angle value, the gain is multiplied by an interpolated value
between <span class="NDLSystemFont">1.0</span> and the value
specified by the <span class="NDLSystemFont">fGain</span>
parameter. Beyond the outer angle, the gain is always multiplied
by <span class="NDLSystemFont">fGain</span>. A call to
<span class="NDLSystemFont">SetConeData()</span> also tags a
source as being a cone source.</p>

<p class="NDLRefMemberFunction">virtual bool
SetMinMaxDistance(float fMin, float fMax) = 0</p>

<p class="NDLRefMemberFunction">virtual void
GetMinMaxDistance(float&amp; fMin, float&amp; fMax) = 0</p>

<p class="NDLRefMemberDescription">These functions set and get
the range over which the audio system distance model will be
applied to the source. The <span class=
"NDLSystemFont">fMin</span> parameter specifies the minimum
distance from the listener at which point the source's sound will
begin to be attenuated. The <span class=
"NDLSystemFont">fMax</span> parameter defines the maximum
distance from the listener where the distance model will still
have effect on the source.</p>

<p class="NDLRefHead2">General Audio Functions</p>

<p class="NDLRefMemberFunction">virtual bool SetGain(float fGain)
= 0</p>

<p class="NDLRefMemberFunction">virtual float GetGain() = 0</p>

<p class="NDLRefMemberDescription"><span class=
"NDLSystemFont">SetGain()</span> and <span class=
"NDLSystemFont">GetGain()</span> access the source level gain
setting. A value of <span class="NDLSystemFont">0.0</span>
represents silence, whereas <span class=
"NDLSystemFont">1.0</span> represents the maximum loudness for a
source. The default value is <span class=
"NDLSystemFont">1.0</span>.</p>

<p class="NDLRefMemberFunction">virtual bool FadeToGain(float
fGain, float fStartTime, float fDuration)</p>

<p class="NDLRefMemberDescription"><span class=
"NDLSystemFont">FadeToGain()</span> will linearly move the gain
from its current level to the destination level over time. This
function is handy for fading in and out music and sound
effects.</p>

<p class="NDLRefMemberFunction">virtual bool SetPlaybackRate(long
lRate) = 0</p>

<p class="NDLRefMemberFunction">virtual long GetPlaybackRate() =
0</p>

<p class="NDLRefMemberDescription">Get the playback rate for this
source.</p>

<p class="NDLRefMemberFunction">virtual void SetLoopCount(int
iLoopCount)</p>

<p class="NDLRefMemberFunction">virtual int GetLoopCount()</p>

<p class="NDLRefMemberDescription">Setting and getting the loop
count, which determines how many times the source will play. The
number of times it will play is from 1 to <span class=
"NDLSystemFont">LOOP_INFINITE</span>.</p>

<p class="NDLRefMemberFunction">virtual bool Play() = 0</p>

<p class="NDLRefMemberDescription">This function begins playback
immediately. Therefore, it is a good idea to ensure that all 3D
sources and the listener are positioned before calling this
function.</p>

<p class="NDLRefMemberDescription">If the positions and
orientations are not set before playing begins, an audible "rip"
can be heard as the positions are quickly changed. Calling this
function on an already started source will start the source
playing from the beginning. This function returns <span class=
"NDLSystemFont">true</span> if the call to play the source was
successful, or <span class="NDLSystemFont">false</span>
otherwise.</p>

<p class="NDLRefMemberFunction">virtual bool Stop() = 0</p>

<p class="NDLRefMemberDescription"><span class=
"NDLSystemFont">Stop()</span> stops a source playing. The
<span class="NDLSystemFont">Stop()</span> function returns
<span class="NDLSystemFont">true</span> on success, or
<span class="NDLSystemFont">false</span> otherwise.</p>

<p class="NDLRefMemberFunction">Virtual void Rewind() = 0</p>

<p class="NDLRefMemberDescription">The <span class=
"NDLSystemFont">Rewind()</span> function rewinds the playback
cursor of a source to the beginning of the audio data.</p>

<p class="NDLRefMemberFunction">virtual Status GetStatus() =
0</p>

<p class="NDLRefMemberDescription"><span class=
"NDLSystemFont">GetStatus()</span> returns a <span class=
"NDLSystemFont">NiAudioSource</span> class-scoped enumerated-type
value representing the current status of the source. The possible
returned values are <span class="NDLSystemFont">DONE</span>,
<span class="NDLSystemFont">PLAYING</span>, <span class=
"NDLSystemFont">STOPPED</span>, <span class=
"NDLSystemFont">FREE</span>, <span class=
"NDLSystemFont">PLAYINGBUTRELEASED</span>, <span class=
"NDLSystemFont">LOADED</span>, or <span class=
"NDLSystemFont">NOT_SET</span> (if the status can't be
obtained).</p>

<p class="NDLRefMemberFunction">virtual bool SetPlayTime(float
fTime) = 0</p>

<p class="NDLRefMemberFunction">virtual float GetPlayTime() =
0</p>

<p class="NDLRefMemberDescription"><span class=
"NDLSystemFont">SetPlayTime()</span> and <span class=
"NDLSystemFont">GetPlayTime()</span> set and get the playback
cursor's time-relative position in the source's audio data. The
<span class="NDLSystemFont">fTime</span> parameter for
<span class="NDLSystemFont">SetPlayTime()</span> and the return
value of <span class="NDLSystemFont">GetPlayTime()</span>
represent seconds from the beginning of the wave data. If the
time is larger than the length of the audio file, regardless of
playback mode, <span class="NDLSystemFont">SetPlayTime()</span>
will fail and return <span class=
"NDLSystemFont">false</span>.</p>

<p class="NDLRefMemberFunction">virtual bool
GetPlayLength(float&amp; fTime) = 0</p>

<p class="NDLRefMemberDescription"><span class=
"NDLSystemFont">GetPlayLength()</span> will get the length of the
sound in seconds. This function will return <span class=
"NDLSystemFont">true</span> if the call succeeds.</p>

<p class="NDLRefMemberFunction">virtual bool
SetPlayPosition(unsigned int uiPos) = 0</p>

<p class="NDLRefMemberFunction">virtual unsigned int
GetPlayPosition() = 0</p>

<p class="NDLRefMemberDescription"><span class=
"NDLSystemFont">SetPlayPosition()</span> and <span class=
"NDLSystemFont">GetPlayPosition()</span> set and get the playback
cursor's byte-relative position in the source's audio data. The
<span class="NDLSystemFont">uiPos</span> parameter for
<span class="NDLSystemFont">SetPlayPosition()</span> and the
return value of <span class=
"NDLSystemFont">GetPlayPosition()</span> represent the number of
bytes from the beginning of the audio data. If the position is
larger than the size of the audio file, regardless of playback
mode, <span class="NDLSystemFont">SetPlayPosition()</span> will
fail and return <span class="NDLSystemFont">false</span>.</p>

<p class="NDLRefMemberFunction">virtual void SetLoaded(bool
bLoaded)</p>

<p class="NDLRefMemberFunction">virtual bool GetLoaded()</p>

<p class="NDLRefMemberDescription"><span class=
"NDLSystemFont">SetLoaded()</span> and <span class=
"NDLSystemFont">GetLoaded()</span> access the Boolean data member
flag of <span class="NDLSystemFont">NiAudioSource</span> that is
used to indicate if audio data is loaded into the source. This
Boolean data member is set automatically during calls to
<span class="NDLSystemFont">Load()</span>. It is exposed to allow
applications that perform self-streaming to set the flag. The
flag must have a <span class="NDLSystemFont">true</span> value
prior to playback. NOTE: These functions are <span class=
"NDLSystemFont">protected</span>.</p>

<p class="NDLRefMemberFunction">virtual void Update(float
fTime)</p>

<p class="NDLRefMemberDescription">This function updates the
audio system with the status of the source. The source's
world-space orientation and location are updated in the audio
system with every call to <span class=
"NDLSystemFont">Update()</span>. This function should be called
any time the source is moved. It can be called automatically by
<span class="NDLSystemFont">NiAudioSystem::Update()</span> if
that function is sent true for its <span class=
"NDLSystemFont">bUpdateAll</span> parameter. This function has no
effect on ambient sources.</p>

<p class="NDLRefMemberFunction">virtual NiPoint3 GetPosition() =
0</p>

<p class="NDLRefMemberFunction">virtual void
GetOrientation(NiPoint3&amp; kDir, NiPoint3&amp; kUp) = 0</p>

<p class="NDLRefMemberFunction">virtual NiPoint3
GetVelocity()</p>

<p class="NDLRefMemberDescription">These three functions query
the internal audio system state of the source. Typically, the
Gamebryo state information maintained by <span class=
"NDLSystemFont">NiAudioSource</span> itself or its <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMain/NiAVObject.htm">NiAVObject</a></span>
functionality should be sufficient. However, there may be cases
where these methods are needed.</p>

<p class="NDLRefMemberDescription">Note that the return values
and parameters of these methods are intentionally not
references.</p>

<p class="NDLRefHead2">Occlusion, obstruction and room effect</p>

<p>3D sources can be occluded and obstructed, as well as affected
by reverb settings. These functions enable the application to use
this functionality. The specific implementation of the audio
system will determine if these functions are effective.</p>

<p class="NDLRefMemberFunction">bool SetRoomEffectLevel(float
fLevel) = 0</p>

<p class="NDLRefMemberFunction">float GetRoomEffectLevel() =
0</p>

<p class="NDLRefMemberDescription">This function is used to
access the amount that a source is affected by the reverb setting
of the environment. Reverb is an expensive feature CPU-wise and
should be used sparingly. If it is used, this function can be
used to try to decrease the CPU-cost. Sources with a lower effect
level take up less processing time than those with higher levels
on some providers.</p>

<p class="NDLRefMemberFunction">bool SetOcclusionFactor(float
fLevel) = 0</p>

<p class="NDLRefMemberFunction">float GetOcclusionFactor() =
0</p>

<p class="NDLRefMemberDescription">A 3D source is occluded when
it is completely blocked off from the listener. These functions
give access to the amount that a source is occluded. Different
providers treat this parameter in different manners.</p>

<p class="NDLRefMemberFunction">bool SetObstructionFactor(float
fLevel) = 0</p>

<p class="NDLRefMemberFunction">float GetObstructionFactor() =
0</p>

<p class="NDLRefMemberDescription">A 3D source is obstructed when
it is partially blocked from the listener; a direct path does not
exist but an indirect path does. These functions give access to
the amount that a source is obstructed. Different providers treat
this parameter in different manners.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
