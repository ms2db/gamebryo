<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiMilesAudioSystem</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiMilesAudioSystem</p>

<p class="NDLRefParentage">: public <u><span><a href=
"NiAudioSystem.htm">NiAudioSystem</a></span></u></p>

<p class="NDLRefHeaderFile"><span class=
"NDLSystemFont">&lt;NiMilesAudioSystem.h&gt;</span></p>

<p class="NDLRefHead1">Description</p>

<p>The <span class="NDLSystemFont">NiMilesAudioSystem</span> is
the Miles-specific implementation of the <span class=
"NDLSystemFont"><a href=
"NiAudioSystem.htm">NiAudioSystem</a></span>.</p>

<p class="NDLRefHead1">Constructors</p>

<p>There are no publicly available constructors or destructors
for <span class="NDLSystemFont">NiMilesAudioSystem</span>. The
single instance of the class is created automatically during
pre-main initialization for any application that links with a
<span class="NDLSystemFont">NiMilesAudioSystem</span>. 
Correspondingly, the instance is destroyed automatically during
an application's post-main operations. Pre-main initialization
is lightweight and is done solely to guarantee the existence of a
single sound system instance. The application maintains control
to start and shutdown the sound system as needed.</p>

<p>See the documentation for the <span class=
"NDLSystemFont">Startup</span> and <span class=
"NDLSystemFont">Shutdown</span> functions below.</p>

<p class="NDLRefMemberFunction">static NiMilesAudioSystem*
GetAudioSystem()</p>

<p class="NDLRefMemberDescription">Access to the single audio
system instance in an application is provided by the static
<span class="NDLSystemFont">GetAudioSystem</span> function.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">virtual void SetHWnd(HWND
hWnd)</p>

<p class="NDLRefMemberFunction">virtual HWND GetHWnd()</p>

<p class="NDLRefMemberDescription">The Miles audio system
requires an window handle before it can be started up
properly.</p>

<p class="NDLRefMemberFunction">NiMilesListener*
GetListener()</p>

<p class="NDLRefMemberDescription"><span class=
"NDLSystemFont">GetListener()</span> returns a pointer to the
unique instance of the <span class="NDLSystemFont"><a href=
"NiMilesListener.htm">NiMilesListener</a></span> class that is
created by the audio system. The application cannot set the
listener as it is automatically generated.</p>

<p class="NDLRefMemberFunction">virtual bool Startup(char*
pcDirectoryName)</p>

<p class="NDLRefMemberDescription"><span class=
"NDLSystemFont">Startup()</span> is responsible for initializing
the sound system and must be called before any sound playback can
begin. The <span class="NDLSystemFont">pcDirectoryName</span>
parameter is a character string representing the path from the
application directory to the Miles redistribution directory. 
This directory is the place Miles will look for the .M3D files
and filter data files. The M3D files contain information about
underlying audio technology and are used to provide the higher
level API to the user. The filter files contain data that Miles
uses for calculating reverb; without the filter files reverb will
have no effect.</p>

<p class="NDLRefMemberFunction">virtual void Shutdown()</p>

<p class="NDLRefMemberDescription"><span class=
"NDLSystemFont">Shutdown()</span> is responsible for releasing
resources related to the audio system. It releases the
<span class="NDLSystemFont"><a href=
"NiMilesListener.htm">NiMilesListener</a></span> object. This
function should be called at the end of your application.</p>

<p class="NDLRefMemberFunction">virtual NiAudioSource*
CreateSource(unsigned int uiType =
NiAudioSource::TYPE_DEFAULT)   </p>

<p class="NDLRefMemberDescription"><span class=
"NDLSystemFont">CreateSource()</span> enables the <span class=
"NDLSystemFont">NiMilesAudioSystem</span> to act as a factory for
creating sources. Sources may be created manually, but the
factory will abstract creation of sources of <span class=
"NDLSystemFont"><a href=
"NiMilesSource.htm">NiMilesSource</a></span>.</p>

<p class="NDLRefMemberFunction">virtual SpeakerType
GetSpeakerType()</p>

<p class="NDLRefMemberFunction">virtual bool
SetSpeakerType(unsigned int uiType = TYPE_3D_2_SPEAKER)</p>

<p class="NDLRefMemberFunction">virtual bool
SetBestSpeakerTypeAvailable()</p>

<p class="NDLRefMemberDescription">The speaker type that Miles
uses is set when Miles is first initialized and can not be
changed after start up. As recommend by Miles, when Gamebryo
initializes Miles speaker type <span class=
"NDLSystemFont">MSS_MC_USE_SYSTEM_CONFIG</span> is used so Miles
will use the speaker type specified by the user in the Windows
control-panel. Because the speaker type can only be specified
when initializing Miles <span class=
"NDLSystemFont">SetSpeakerType</span> and <span class=
"NDLSystemFont">SetBestSpeakerTypeAvailable</span> perform no
operation and return false. Since Miles does not recommend
relying on the OS to report a meaningful speaker configuration
<span class="NDLSystemFont">GetSpeakerType()</span> will always
return <span class="NDLSystemFont">TYPE_3D_2_SPEAKER</span>. See
the Miles documentation for more details.</p>

<p class="NDLRefMemberFunction">virtual char* GetLastError()</p>

<p class="NDLRefMemberDescription">This function returns the last
error that occurred in the Miles audio system.</p>

<p class="NDLRefMemberFunction">NiMilesSource*
GetFirstSource(NiTListIterator&amp; kIter)</p>

<p class="NDLRefMemberFunction">NiMilesSource*
GetNextSource(NiTListIterator&amp; kIter)</p>

<p class="NDLRefMemberDescription">These two functions provide
access to the contents of the list of <span class=
"NDLSystemFont"><a href=
"NiMilesSource.htm">NiMilesSource</a></span>s maintained by
<span class="NDLSystemFont">NiMilesAudioSystem</span>. These
functions use the related base class <span class=
"NDLSystemFont"><a href=
"NiAudioSystem.htm">NiAudioSystem</a></span> function and then
down-cast to <span class="NDLSystemFont"><a href=
"NiMilesSource.htm">NiMilesSource</a></span>.</p>

<p class="NDLRefMemberFunction">NiMilesSource*
FindDuplicateSource(NiAudioSource* pkOriginal)</p>

<p class="NDLRefMemberDescription">During the creation of new
<span class="NDLSystemFont"><a href=
"NiMilesSource.htm">NiMilesSource</a></span>s, you may use this
function to see if the new source will share data.</p>

<p class="NDLRefMemberFunction">bool
IsUniqueSource(NiMilesSource* pkOriginal)</p>

<p class="NDLRefMemberDescription">Check to see if there is a
source that uses the same File Image.</p>

<p class="NDLRefMemberFunction">virtual bool
SetUnitsPerMeter(float fUnits)</p>

<p class="NDLRefMemberDescription">Change the units per
meter.</p>

<p class="NDLRefMemberFunction">const unsigned int
GetNumberActiveSamples()</p>

<p class="NDLRefMemberDescription">Returns the number of
currently playing samples.</p>

<p class="NDLRefMemberFunction">void* GetDigitalDriver()</p>

<p class="NDLRefMemberDescription"><span class=
"NDLSystemFont">GetDigitalDriver()</span> returns the general
audio driver. This driver is used in ambient sounds that are
streamed and not streamed.</p>

<p class="NDLRefMemberFunction">void SetDriverProperty(char*
pcPreferenceName, void* pvPreferenceValue)</p>

<p class="NDLRefMemberFunction">void GetDriverProperty(char*
pcPreferenceName, void* pvPreferenceValue)</p>

<p class="NDLRefMemberDescription">These functions give the
application access to driver-specific functionality. The driver
must be open before calling this function. See the Miles
documentation for information on available preference strings and
values.</p>

<p class="NDLRefHead2">Reverb Related Functions</p>

<p>The functions in this section are exclusively related to
reverb usage. Reverb can be extremely expensive CPU-wise and
should be used sparingly. See the <span class=
"NDLSystemFont">SetRoomEffectLevel()</span> and <span class=
"NDLSystemFont">GetRoomEffectLevel()</span> functions in the
<span class="NDLSystemFont"><a href=
"NiMilesSource.htm">NiMilesSource</a></span> section for more
information. Any restrictions on the use of reverb will be on an
audio system specific basis. Not all audio systems implement
reverb.</p>

<p class="NDLRefMemberFunction">virtual bool
GetReverbAvailable()</p>

<p class="NDLRefMemberFunction">virtual bool
SetCurrentRoomReverb(DWORD dwPreset)</p>

<p class="NDLRefMemberFunction">virtual DWORD
GetCurrentRoomReverb()</p>

<p class="NDLRefMemberDescription">The above functions can give
access to the reverb functionality of the audio system. The
SetCurrentRoomReverb() function will return <span class=
"NDLSystemFont">false</span> if the audio system does not support
reverb.</p>

<p class="NDLRefHead1">Notes</p>

<p class="NDLRefHead2">NIF Streaming</p>

<p>The <span class="NDLSystemFont">NiMilesAudioSystem</span>
class supports Gamebryo file streaming. One of the following
conditions must hold for <span class=
"NDLSystemFont">NiMilesAudioSystem</span> data to be streamed.
Either the single <a href="NiMilesSource.htm">NiMilesSource</a>
object must be attached as part of the subtree of a scene graph
object that will be streamed, or the source itself must be
inserted directly in a stream to be saved.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
