<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiAudioSource</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>


<h1>NiAudioSource</h1>

<p><span class="NDLSystemFont"><a href=
"NiAudioSource_Class_Reference.htm">NiAudioSource</a></span> objects are the
sound emitters in a Gamebryo application. They access audio file
data for audio playback. <span class="NDLSystemFont">NiAudioSource</span> provides methods for
complete sound playback control as well as the specification of
source-specific audio parameters. These parameters include, among
other things, source level gain, distance attenuation factors,
and cone source specifications. There are two types of sound
sources available in a Gamebryo application: 2D and 3D
sounds.</p>

<p>The <span class="NDLSystemFont">NiAudioSource</span> class, like
<span class="NDLSystemFont"><a href=
"NiAudioListener_Class_Reference.htm">NiAudioListener</a></span>, is derived from
<span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiAVObject.htm">NiAVObject</a></span>,
making it possible to attach the sound source to a Gamebryo scene
graph. Like any <span class="NDLSystemFont">NiAVObject</span>
based class, the world space location of a <span class=
"NDLSystemFont">NiAudioSource</span> is defined by the
accumulation of transforms beginning with the root of the scene
graph and ending with the scene graph location of the sound
source. This capability makes it simple to position sound sources
in an application's 3D world, using the same operations that
position any visual object.</p>

<p>The audio system maintains a reference to all <span class=
"NDLSystemFont">NiAudioSource</span> objects. This
organization is significant because it gives an application the
option of accessing sources either through the sound system or
via traditional scene-graph-traversal methods.</p>

<p>Before a source begins playback, the source's position and
orientation should be updated with a call to <span class=
"NDLSystemFont">NiAudioSource::Update().</span></p>

<h2>Miles-Specific Implementation</h2>

<p>In Miles, all audio data passed into the audio system that is
to be used for 3D must be mono, uncompressed WAV files. Miles has
some conversion functions, but <span class=
"NDLSystemFont">NiAudio</span> does not expose these functions,
since it makes sense to do the decompression and resampling
before shipping the application, rather than at application run
time. Data for the 2D sources have a number of possible formats.
The Miles documentation states that uncompressed WAV files, ADPCM
compressed WAV files, wave-wrapped MP3, and standard MP3 files
are all valid. Please see the section in the Miles documentation
entitled MPEG Audio Overview for details on using the MP3 format
with Miles.</p>

<p>Depending on the driver used with Miles, there is a limit to
the number of audio sources which can play simultaneously. The
typical limit is 16 sounds using DirectSound.</p>

<p>Depending on the driver used with Miles, there is work
associated with preparing to play a sound. This additional work
is required when an available resource handle is associated with
sound data. This overhead is likely due to the conversion of
sound data from the native Miles format into the driver format,
for example DirectSound. The typical time for binding a 243k
sample is typically around 1.4ms. This amount of time is not
typically noticeable, but is worth noting.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
