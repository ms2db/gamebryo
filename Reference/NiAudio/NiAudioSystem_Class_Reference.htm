<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiAudioSystem</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiAudioSystem</p>

<p class="NDLRefParentage">: public <span><a href=
"../../Reference/NiMain/NiObject.htm">NiObject</a></span></p>

<p class="NDLRefHeaderFile"><span class=
"NDLSystemFont">&lt;NiAudioSystem.h&gt;</span></p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiAudioSystem</span> is the core
component for audio playback in a Gamebryo application.</p>

<p>Note that the <span class="NDLSystemFont">NiAudioSystem</span>
is derived from <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiObject.htm">NiObject</a></span> for the
purpose of NIF streaming.</p>

<p class="NDLRefHead1">Constructors</p>

<p>There are no publicly available constructors or destructors
for <span class="NDLSystemFont">NiAudioSystem</span> . The single
instance of the class is created automatically during pre-main
initialization for any application that links with <span class=
"NDLSystemFont">NiAudio</span>. Correspondingly, the instance is
destroyed automatically during an application's post-main
operations. Pre-main initialization is lightweight and is done
solely to guarantee the existence of a single sound system
instance. The application maintains control to start and shutdown
the sound system as needed.</p>

<p>See the documentation for the <span class=
"NDLSystemFont">Startup()</span> and <span class=
"NDLSystemFont">Shutdown()</span> functions below.</p>

<p class="NDLRefMemberFunction">static NiAudioSystem*
GetAudioSystem()</p>

<p class="NDLRefMemberDescription">Access to the single audio
system instance in an application is provided by the static
<span class="NDLSystemFont">GetAudioSystem()</span> function.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">NiAudioListener*
GetListener()</p>

<p class="NDLRefMemberDescription"><span class=
"NDLSystemFont">GetListener()</span> returns a pointer to the
unique instance of the <span class="NDLSystemFont"><a href=
"NiAudioListener.htm">NiAudioListener</a></span> class that is
created by the audio system. The application cannot set the
listener as it is automatically generated.</p>

<p class="NDLRefMemberFunction">virtual bool Startup(char*
pcDirectoryName) = 0</p>

<p class="NDLRefMemberDescription"><span class=
"NDLSystemFont">Startup()</span> is responsible for initializing
the sound system and must be called before any sound playback can
begin. The <span class="NDLSystemFont">pcDirectoryName</span>
parameter is a character string representing the path from the
application directory to the any data files the audio system
might need.</p>

<p class="NDLRefMemberFunction">virtual void Shutdown()</p>

<p class="NDLRefMemberDescription"><span class=
"NDLSystemFont">Shutdown()</span> is responsible for releasing
resources related to the audio system. It removes and releases
all allocated sources from its internal list of <span class=
"NDLSystemFont"><a href=
"NiAudioSource.htm">NiAudioSource</a></span> objects.
<span class="NDLSystemFont">Shutdown()</span> releases the
<span class="NDLSystemFont"><a href=
"NiAudioListener.htm">NiAudioListener</a></span> object. This
function should be called at the application shutdown.</p>

<p class="NDLRefMemberFunction">virtual NiAudioSource*
CreateSource(unsigned int uiType = NiAudioSource::TYPE_DEFAULT) =
0</p>

<p class="NDLRefMemberDescription"><span class=
"NDLSystemFont">CreateSource()</span> enables the <span class=
"NDLSystemFont">NiAudioSystem</span> to act as a factory for
creating sources. Sources may be created manually, but the
factory will abstract creation of sources of the current
implementation (e.g., <span class="NDLSystemFont"><a href=
"NiMilesSource.htm">NiMilesSource</a></span>).</p>

<p class="NDLRefMemberFunction">virtual SpeakerType
GetSpeakerType() = 0</p>

<p class="NDLRefMemberFunction">virtual bool
SetSpeakerType(unsigned int uiType = TYPE_3D_2_SPEAKER) = 0</p>

<p class="NDLRefMemberDescription">These two functions enable the
application to specify the speaker configuration that is being
used: 2-speaker, headphone, surround, 4-speaker, 5.1-speaker, or
7.1-speaker.</p>

<p class="NDLRefMemberFunction">virtual bool
SetBestSpeakerTypeAvailable() = 0</p>

<p class="NDLRefMemberDescription">Most applications will want to
use the best speaker configuration available. This function
attempts to use each type in turn from 5.1-speaker to 2-speaker.
If the audio system can't use a particular configuration, the
"next one" will be attempted.</p>

<p class="NDLRefMemberFunction">virtual char* GetLastError() =
0</p>

<p class="NDLRefMemberDescription">This function returns the last
error that occurred in the underlying audio system.</p>

<p class="NDLRefMemberFunction">virtual void
RemoveSource(NiAudioSource* pkSource)</p>

<p class="NDLRefMemberDescription">This method removes the
specified source from the audio system's internal list of all
<span class="NDLSystemFont"><a href=
"NiAudioSource.htm">NiAudioSource</a></span> objects. All sources
are removed automatically at shutdown. Sources are added
automatically to the audio system's list when they are created.
See the <span class="NDLSystemFont"><a href=
"NiAudioSource.htm">NiAudioSource</a></span> reference for more
information. NOTE: This function is <span class=
"NDLSystemFont">protected</span>.</p>

<p class="NDLRefMemberFunction">virtual void Update(float fTime,
bool bUpdateAll = false)</p>

<p class="NDLRefMemberDescription"><span class=
"NDLSystemFont">Update()</span> causes audio data accumulated
since the last call to <span class=
"NDLSystemFont">Update()</span> to be set. This data includes
position, orientation, and velocity of 3D sources. The
<span class="NDLSystemFont">bUpdateAll</span> parameter controls
whether the function should call <span class=
"NDLSystemFont">Update()</span> on all sources and the listener.
Typically, an application will want to call the function with a
parameter value of <span class="NDLSystemFont">true</span>, but
the default is <span class="NDLSystemFont">false</span> to ensure
awareness of the function's operation. <span class=
"NDLSystemFont">Update()</span> should normally be called once
per application frame to ensure that the spatialized sources,
listener and animated parameters are all up to date.</p>

<p class="NDLRefMemberFunction">virtual void PlayAllSources()</p>

<p class="NDLRefMemberFunction">virtual void StopAllSources()</p>

<p class="NDLRefMemberFunction">virtual void
UpdateAllSources(float fTime)</p>

<p class="NDLRefMemberDescription">These three functions are
simply convenience methods to control all <span class=
"NDLSystemFont"><a href=
"NiAudioSource.htm">NiAudioSource</a></span> objects with a
single call. They iterate over the sound system's list of
<span class="NDLSystemFont"><a href=
"NiAudioSource.htm">NiAudioSource</a></span>s and call
<span class="NDLSystemFont">Play()</span>, <span class=
"NDLSystemFont">Stop()</span>, and <span class=
"NDLSystemFont">Update()</span> respectively.</p>

<p class="NDLRefMemberFunction">NiAudioSource*
GetFirstSource(NiTListIterator&amp; kIter)</p>

<p class="NDLRefMemberFunction">NiAudioSource*
GetNextSource(NiTListIterator&amp; kIter)</p>

<p class="NDLRefMemberDescription">These two functions provide
access to the contents of the list of <span class=
"NDLSystemFont"><a href=
"NiAudioSource.htm">NiAudioSource</a></span>s maintained by
<span class="NDLSystemFont">NiAudioSystem</span>. See the inline
comments in <span class="NDLSystemFont">NiAudioSystem.h</span>
for an example of how to iterate over the list's contents. Note
that the references to sources maintained by the audio system are
not reference counted. It is assumed that applications will add
<span class="NDLSystemFont"><a href=
"NiAudioSource.htm">NiAudioSource</a></span> objects to a scene
graph or have other means to ensure accurate references.</p>

<p class="NDLRefMemberFunction">NiAudioSource*
FindDuplicateSource(NiAudioSource* pkOriginal)</p>

<p class="NDLRefMemberDescription">During the creation of new
<span class="NDLSystemFont"><a href=
"NiAudioSource.htm">NiAudioSource</a></span>s, you will check to
see if the new source will share data. <span class=
"NDLSystemFont">FindDuplicateSource()</span> will examine all of
the currently loaded sounds to see if one has the same filename
as the original source and if that source allows the sharing of
data.</p>

<p class="NDLRefMemberFunction">virtual bool
SetUnitsPerMeter(float fUnits)</p>

<p class="NDLRefMemberFunction">virtual float
GetUnitsPerMeter()</p>

<p class="NDLRefMemberDescription">The default unit of distance
is the meter. These functions allow access to a conversion factor
from meters to any other distance scale. For example, if the
units in an application are specified in inches, <span class=
"NDLSystemFont">SetUnitsPerMeter()</span> should be called with a
value of <span class="NDLSystemFont">39.37f</span>.</p>

<p class="NDLRefHead2">Reverb Related Functions</p>

<p>The functions in this section are exclusively related to
reverb usage. Reverb can be extremely expensive CPU-wise and
should be used sparingly. See the <span class=
"NDLSystemFont">SetRoomEffectLevel()</span> and <span class=
"NDLSystemFont">GetRoomEffectLevel()</span> functions in the
<span class="NDLSystemFont"><a href=
"NiAudioSource.htm">NiAudioSource</a></span> section for more
information. Any restrictions on the use of reverb will be on an
audio system specific basis. Not all audio systems implement
reverb.</p>

<p class="NDLRefMemberFunction">virtual bool GetReverbAvailable()
= 0</p>

<p class="NDLRefMemberFunction">virtual bool
SetCurrentRoomReverb(DWORD dwPreset) = 0</p>

<p class="NDLRefMemberFunction">virtual DWORD
GetCurrentRoomReverb() = 0</p>

<p class="NDLRefMemberDescription">The above functions can give
access to the reverb functionality of the audio system. The
<span class="NDLSystemFont">SetCurrentRoomReverb()</span>
function will return <span class="NDLSystemFont">false</span> if
the audio system does not support reverb.</p>

<p class="NDLRefHead1">Notes</p>

<p class="NDLRefHead2">NIF Streaming</p>

<p>The <span class="NDLSystemFont">NiAudioSystem</span> class
supports Gamebryo NIF file streaming. One of the following
conditions must hold for <span class=
"NDLSystemFont">NiAudioSystem</span> data to be streamed: either
the single <span class="NDLSystemFont"><a href=
"NiAudioListener.htm">NiAudioListener</a></span> object must be
attached as part of the subtree of a scene graph object that will
be streamed, or the listener itself must be inserted directly in
a stream to be saved.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
