<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiSPTask</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiSPTask</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../NiMain/NiRefObject.htm">NiRefObject</a></span></p>


<p class="NDLRefHeaderFile">&lt;NiSPTask.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/class_ni_s_p_task.gif" alt="Inheritance graph for NiSPTask"/>
  <p class="FigureCaption">Inheritance graph for NiSPTask</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">This class is the encapsulation of a Floodgate task. </p>
<p class="NDLNormal">An <span class="NDLSystemFont">NiSPTask</span> represents one stage in an <span class="NDLSystemFont"><a href="NiSPWorkflow.htm">NiSPWorkflow</a></span> and is used to parallelize the execution of a given operation on one or more streams of data. </p>

<a name="public_static_attributes"></a>
<p class="NDLRefHead1">Public Static Attributes</p>


<a name="class_ni_s_p_task_1a4bfad3ad5b38faee7ccf4a98d2a0a6ad"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont">NiUInt32</span>  AUTO_BLOCK_COUNT</p>
<p class="NDLRefMemberDescription">Constant value to use to obtain default behavior for the optimal block count. </p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="class_ni_s_p_task_1a2dd44582e91e587749b139be5f9a386a"></a>
<p class="NDLRefMemberFunction">void  SetKernel(<span class="NDLSystemFont"><a href="NiSPKernel.htm">NiSPKernel</a></span>* pkKernel)</p>
<p class="NDLRefMemberDescription">Specifies the kernel to be used for the task. </p>

<a name="class_ni_s_p_task_1acfb8a44b5dbd8f6605ba92a93c3bcd1f"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiSPKernel.htm">NiSPKernel</a></span>*  GetKernel() const</p>
<p class="NDLRefMemberDescription">Gets the kernel to be used for the task. </p>

<a name="class_ni_s_p_task_1abc94bbbd7afe430efde39278f6213b95"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  GetInputCount() const</p>
<p class="NDLRefMemberDescription">Gets the number of input streams. </p>

<a name="class_ni_s_p_task_1aaa18b2cea271517218685c098498adc7"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  GetOutputCount() const</p>
<p class="NDLRefMemberDescription">Gets the number of output streams. </p>

<a name="class_ni_s_p_task_1a95b197062297c7f99e881a46377b3a59"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  GetTotalCount() const</p>
<p class="NDLRefMemberDescription">Gets the total number of streams. </p>

<a name="class_ni_s_p_task_1a2eed497209b9855f06aca938ea22d593"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiSPStream.htm">NiSPStream</a></span>*  GetInputAt(<span class="NDLSystemFont">NiUInt32</span> uiIndex) const</p>
<p class="NDLRefMemberDescription">Gets an input stream by index. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">uiIndex</span></td>
    <td>The index of the <span class="NDLSystemFont"><a href="NiSPStream.htm">NiSPStream</a></span>. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The <span class="NDLSystemFont"><a href="NiSPStream.htm">NiSPStream</a></span> at the index specified. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_s_p_task_1a1a3bceda6a0123bbd6907f45eef5897d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiSPStream.htm">NiSPStream</a></span>*  GetOutputAt(<span class="NDLSystemFont">NiUInt32</span> uiIndex) const</p>
<p class="NDLRefMemberDescription">Gets an output stream by index. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">uiIndex</span></td>
    <td>The index of the <span class="NDLSystemFont"><a href="NiSPStream.htm">NiSPStream</a></span>. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The <span class="NDLSystemFont"><a href="NiSPStream.htm">NiSPStream</a></span> at the index specified. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_s_p_task_1a8a8e1a6ba75ca0837a8e89d4e2318992"></a>
<p class="NDLRefMemberFunction">void  AddInput(<span class="NDLSystemFont"><a href="NiSPStream.htm">NiSPStream</a></span>* pkInputStream)</p>
<p class="NDLRefMemberDescription">Adds an input stream to the task. </p>

<a name="class_ni_s_p_task_1aefd89d059775e55cb87ed277cb99f270"></a>
<p class="NDLRefMemberFunction">void  AddOutput(<span class="NDLSystemFont"><a href="NiSPStream.htm">NiSPStream</a></span>* pkOutputStream)</p>
<p class="NDLRefMemberDescription">Adds an output stream to the task. </p>

<a name="class_ni_s_p_task_1a8a34903baedd82ae57b6552b1e5f472d"></a>
<p class="NDLRefMemberFunction">void  RemoveInput(<span class="NDLSystemFont"><a href="NiSPStream.htm">NiSPStream</a></span>* pkInputStream)</p>
<p class="NDLRefMemberDescription">Removes an input stream from the task. </p>

<a name="class_ni_s_p_task_1a85f92d3c7e1f037ed5f66d005d994970"></a>
<p class="NDLRefMemberFunction">void  RemoveOutput(<span class="NDLSystemFont"><a href="NiSPStream.htm">NiSPStream</a></span>* pkOutputStream)</p>
<p class="NDLRefMemberDescription">Removes an output stream from the task. </p>

<a name="class_ni_s_p_task_1af2b8251ca965dec02df30dd3b39904d8"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsCacheable() const</p>
<p class="NDLRefMemberDescription">Returns whether or not the task can be cached by a workflow. </p>

<a name="class_ni_s_p_task_1ad9c407f30ccfcd7d094f269f77e76084"></a>
<p class="NDLRefMemberFunction">void  SetIsCacheable(<span class="NDLSystemFont">bool</span> bIsCacheable)</p>
<p class="NDLRefMemberDescription">Specifies whether or not the task can be cached by a workflow. </p>

<a name="class_ni_s_p_task_1acc64459ea4712bd0450b519f25b3f6c2"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsCompacted() const</p>
<p class="NDLRefMemberDescription">Returns whether or not the task should be compacted when it is initialized. </p>
<p class="NDLRefMemberDetailedDescription">The memory for a task comes from pools of pre-allocated objects that themselves contain heap allocated data, which is not by default re-sized to match the exact requirements of the task. If the task is compacted, all dynamically allocated data is re-allocated upon initialization to minimize memory consumption. There is no per-frame overhead to compacting if the size and number of input streams does not change.</p>
<p class="NDLRefMemberDetailedDescription">Tasks that never modify the properties of their data streams (block count, number of inputs and output, etc) after initial set-up should set compact to true. Tasks that do modify their streams might choose to compact if memory is tight and particularly if the number of input and output streams changes significantly. </p>

<a name="class_ni_s_p_task_1a4e7995702e0e2399f8b9d2cea54a2189"></a>
<p class="NDLRefMemberFunction">void  SetIsCompacted(<span class="NDLSystemFont">bool</span> bIsCompacted)</p>
<p class="NDLRefMemberDescription">Specifies whether or not the task is compacted. </p>

<a name="class_ni_s_p_task_1a87e21ee97a0e1371027a3f4e433d8a20"></a>
<p class="NDLRefMemberFunction">void  SetOptimalBlockCount(<span class="NDLSystemFont">NiUInt32</span> uiBlockCount)</p>
<p class="NDLRefMemberDescription">Specifies the optimal block count for the task. </p>
<p class="NDLRefMemberDetailedDescription">The optimal block count determines the size of each chunk of data for one kernel invocation. The total task is broken into sub-tasks, each receiving this many elements to compute. The optimal block count is typically set to a platform-specific default found by analyzing the data streams for the task and taking into account the specific platform characteristics. Applications may choose to set it themselves, although care must be taken.</p>
<p class="NDLRefMemberDetailedDescription">To override the default, call this function on the task before the task is submitted in a workflow. To restore the default, call this function with the value <span class="NDLSystemFont"><a href="NiSPTask.htm#class_ni_s_p_task_1a4bfad3ad5b38faee7ccf4a98d2a0a6ad">NiSPTask::AUTO_BLOCK_COUNT</a></span>. </p>

<a name="class_ni_s_p_task_1a87519bf40614494d6796adec3fd19cd6"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  GetOptimalBlockCount()</p>
<p class="NDLRefMemberDescription">Gets the current optimal block count for the task. </p>

<a name="class_ni_s_p_task_1a956db9467b3842e97cf9087394f66924"></a>
<p class="NDLRefMemberFunction">void  SetIsDataDecompositionEnabled(<span class="NDLSystemFont">bool</span> bEnable)</p>
<p class="NDLRefMemberDescription">Sets the task to be decomposed prior to execution. </p>

<a name="class_ni_s_p_task_1a28c8a555a76a5279462aaa8e81bdd81e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsDataDecompositionEnabled()</p>
<p class="NDLRefMemberDescription">Indicates if the task is to be decomposed prior to execution. </p>

<a name="class_ni_s_p_task_1acaef22c34731abf4d36313588c4b1a49"></a>
<p class="NDLRefMemberFunction">void  Clear(<span class="NDLSystemFont">bool</span> bIgnoreCaching = false)</p>
<p class="NDLRefMemberDescription">Clear the task. </p>
<p class="NDLRefMemberDetailedDescription">Only call this in situations where you are trying to release a task by setting its smart pointer to 0, while not releasing the <span class="NDLSystemFont"><a href="NiSPStream.htm">NiSPStream</a></span> objects that are used by the task. In such cases the smart pointers to the task held by the <span class="NDLSystemFont"><a href="NiSPStream.htm">NiSPStream</a></span> objects prevent removal of the task and can result in exhaustion of the pool of free tasks. Call Clear(true) on the task you wish to release and then set your smart pointer to 0.</p>
<p class="NDLRefMemberDetailedDescription">The method is not necessary in cases where the streams are released along with the task. </p>
<a name="public_static_methods"></a>
<p class="NDLRefHead1">Public Static Methods</p>


<a name="class_ni_s_p_task_1aa7a175f3230f74d40230254c02539d72"></a>
<p class="NDLRefMemberFunction">static void  InitializePools(<span class="NDLSystemFont">NiUInt32</span> uiTaskPoolSize)</p>
<p class="NDLRefMemberDescription">Initializes object pools. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">uiTaskPoolSize</span></td>
    <td>Number of tasks to be allocated in task pool. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_s_p_task_1a70e639e1460536ad3a720bc39054ca6b"></a>
<p class="NDLRefMemberFunction">static void  ShutdownPools()</p>
<p class="NDLRefMemberDescription">Shuts down object pools. </p>

<a name="class_ni_s_p_task_1a1ab8ae5dbb56425486931a8343b3e0b0"></a>
<p class="NDLRefMemberFunction">static NiSPTaskPtr  GetNewTask(<br/>const <span class="NDLSystemFont">NiUInt16</span> uiNumInputs = 1, <br/>const <span class="NDLSystemFont">NiUInt16</span> uiNumOutputs = 1)</p>
<p class="NDLRefMemberDescription">Get a new task. </p>
<p class="NDLRefMemberDetailedDescription">This task comes from a pool of available tasks and is released automatically when the reference count goes to zero.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">uiNumInputs</span></td>
    <td>A hint as to the number of input streams this task will have. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiNumOutputs</span></td>
    <td>A hint as to the number of output streams this task will have. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A smart pointer to the new task. </td>
</tr>

        </tbody>
    </table>
</div>


 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
