<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiSPWorkload</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiSPWorkload</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../efd/efd__MemObject.htm">efd::MemObject</a></span></p>


<p class="NDLRefHeaderFile">&lt;NiSPWorkload.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/class_ni_s_p_workload.gif" alt="Inheritance graph for NiSPWorkload"/>
  <p class="FigureCaption">Inheritance graph for NiSPWorkload</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">Stores data associated with a single block of Floodgate work. </p>
<p class="NDLNormal">This includes the kernel and information about all of the streams that the kernel is to operate on. A single task may get broken into many workloads in order to meet restrictions on DMA transfers, cache pre-fetch and the like.</p>
<p class="NDLNormal">This class is a platform specific implementation.  <span class="NDLNormal" style=" x-condition: PS3; "> The documentation given here is PS3 specific. It does not include functions available to SPU kernels - please see the platform specific header file. </span></p>
<p class="NDLNormal">For platforms other than PS3, this documentation is very incomplete. Please refer to the platform specific header file for complete documentation. </p>

<a name="public_attributes"></a>
<p class="NDLRefHead1">Public Attributes</p>


<a name="class_ni_s_p_workload_1a324f9b75cb9719626eb9834b5c2aaa13"></a>
<p class="NDLRefMemberFunction">struct <span class="NDLSystemFont"><a href="NiSPWorkload__Header.htm">NiSPWorkload::Header</a></span>  aligned</p>
<p class="NDLRefMemberDescription">A header to manage workload meta information within the <span class="NDLSystemFont">NiSPWorkload</span>. </p>

<a name="class_ni_s_p_workload_1a5e17d68edaaf86a50488ec269f395f25"></a>
<p class="NDLRefMemberFunction" style=" x-condition: PS3; "><span class="NDLSystemFont" style=" x-condition: PS3; "><a href="NiSPWorkload__Header.htm">Header</a></span>*  m_pkInputsOutputs</p>
<p class="NDLRefMemberDescription" style=" x-condition: PS3; ">Information about each input and output stream. </p>
<p class="NDLRefMemberDetailedDescription" style=" x-condition: PS3; ">Inputs come first, followed by outputs.  </p>

<a name="class_ni_s_p_workload_1adefe402c4b4251be3b995cb6f0f997f4"></a>
<p class="NDLRefMemberFunction" style=" x-condition: PS3; "><span class="NDLSystemFont" style=" x-condition: PS3; ">NiUInt32</span>  m_uiInOutCount</p>
<p class="NDLRefMemberDescription" style=" x-condition: PS3; "> The number of available inputs and outputs. </p>

<a name="class_ni_s_p_workload_1abe705369bd47c98a819f6da53fbddb6d"></a>
<p class="NDLRefMemberFunction" style=" x-condition: PS3; "><span class="NDLSystemFont" style=" x-condition: PS3; ">NiUInt32</span>  m_uiInputCount</p>
<p class="NDLRefMemberDescription" style=" x-condition: PS3; "> The number of input streams. </p>

<a name="class_ni_s_p_workload_1a927bb132cba8df0aae00e3e1246b4a20"></a>
<p class="NDLRefMemberFunction" style=" x-condition: PS3; "><span class="NDLSystemFont" style=" x-condition: PS3; ">NiUInt32</span>  m_uiOutputCount</p>
<p class="NDLRefMemberDescription" style=" x-condition: PS3; "> The number of output streams. </p>

<a name="class_ni_s_p_workload_1a5280cbda0075cd37b5cb25490f325fa8"></a>
<p class="NDLRefMemberFunction" style=" x-condition: PS3; "><span class="NDLSystemFont" style=" x-condition: PS3; ">NiUInt32</span>  m_uiBlockCount</p>
<p class="NDLRefMemberDescription" style=" x-condition: PS3; "> The number of blocks of data. </p>

<a name="class_ni_s_p_workload_1aacb671b5f434e1c89a4a08621bfa2fcb"></a>
<p class="NDLRefMemberFunction" style=" x-condition: PS3; "><span class="NDLSystemFont" style=" x-condition: PS3; ">NiUInt32</span>  m_uiRangeStart</p>
<p class="NDLRefMemberDescription" style=" x-condition: PS3; "> The start offset for this workload within the total task. </p>

<a name="class_ni_s_p_workload_1a320ad9a089509043e22b57249d4fdfe8"></a>
<p class="NDLRefMemberFunction" style=" x-condition: PS3; ">uint64_t  m_uiAtomicUpdateAddress</p>
<p class="NDLRefMemberDescription" style=" x-condition: PS3; "> Atomic Update Address. </p>

<a name="class_ni_s_p_workload_1a6a88735151404365b8271a8fb63a8665"></a>
<p class="NDLRefMemberFunction" style=" x-condition: PS3; ">void **  m_pvpInputsOutputs</p>
<p class="NDLRefMemberDescription" style=" x-condition: PS3; ">Array of pointers to input and output data. </p>
<p class="NDLRefMemberDetailedDescription" style=" x-condition: PS3; ">This member will be set inside the <span class="NDLSystemFont" style=" x-condition: PS3; "><a href="../../ee_goto.htm#Reference/NiFloodgate/NiSPSpuJob_PS3.htm">NiSPSpuJob</a></span> to point to a block of the output buffer.  </p>
<a name="signal_types"></a>
<p class="NDLRefHead1">Signal Types</p>

<p class="NDLRefMemberDescription">Static constants defining an enumeration for NiSPSignal type.</p>

<a name="class_ni_s_p_workload_1a63aec49f8f86062df9e258518974f3c8"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont">NiUInt32</span>  SIGNAL_NONE</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_s_p_workload_1affae3957b978ae75f39cf111256b78a0"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont">NiUInt32</span>  SIGNAL_COMPLETION</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_s_p_workload_1ae89a3f77b4d8802a2a00f101aea70259"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont">NiUInt32</span>  SIGNAL_GPU_COMPLETION</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_s_p_workload_1af69c599caf3ecbb339035f8947aaac66"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont">NiUInt32</span>  SIGNAL_PPU_TASK_NOTIFY</p>
<p class="NDLRefMemberFunction"></p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="class_ni_s_p_workload_1a759a8829eb9047ca71b57fef3c65b208"></a>
<p class="NDLRefMemberFunction">NiSPWorkload()</p>
<p class="NDLRefMemberDescription">Constructor needs to initialize dynamic arrays to NULL. </p>

<a name="class_ni_s_p_workload_1aa2b15b40c8cd97f228adf7a993b1ba10"></a>
<p class="NDLRefMemberFunction">~NiSPWorkload()</p>
<p class="NDLRefMemberDescription">Destructor just calls <span class="NDLSystemFont"><a href="NiSPWorkload.htm#class_ni_s_p_workload_1a785d1280b08c8a28b03384d4878c39c7">Clear()</a></span>. </p>

<a name="class_ni_s_p_workload_1a785d1280b08c8a28b03384d4878c39c7"></a>
<p class="NDLRefMemberFunction">void  Clear()</p>
<p class="NDLRefMemberDescription">Clears the workload. </p>
<p class="NDLRefMemberDetailedDescription">This frees memory. </p>

<a name="class_ni_s_p_workload_1a406b13db02b3a0b8c7af40416416e0a2"></a>
<p class="NDLRefMemberFunction">void  Reset(<br/><span class="NDLSystemFont">NiUInt32</span> uiInputCount, <br/><span class="NDLSystemFont">NiUInt32</span> uiOutputCount, <br/><span class="NDLSystemFont">bool</span> bCompact = false)</p>
<p class="NDLRefMemberDescription">Resets the workload and makes sure it has the required number of input and output stream headers. </p>
<p class="NDLRefMemberDetailedDescription">If told to compact, it reallocates internal memory to minimize consumption. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
