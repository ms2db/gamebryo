<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiSPWorkflow</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiSPWorkflow</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../efd/efd__MemObject.htm">efd::MemObject</a></span></p>


<p class="NDLRefHeaderFile">&lt;NiSPWorkflow.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/class_ni_s_p_workflow.gif" alt="Inheritance graph for NiSPWorkflow"/>
  <p class="FigureCaption">Inheritance graph for NiSPWorkflow</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">Wrapper around an acyclic directed graph of <span class="NDLSystemFont"><a href="NiSPTask.htm">NiSPTask</a></span> objects. </p>
<p class="NDLNormal">Each <span class="NDLSystemFont"><a href="NiSPTask.htm">NiSPTask</a></span> represents a node of this graph while each <span class="NDLSystemFont"><a href="NiSPStream.htm">NiSPStream</a></span> that is bound to 2 or more <span class="NDLSystemFont"><a href="NiSPTask.htm">NiSPTask</a></span> objects represents an edge of the graph. </p>

<a name="public_types"></a>
<p class="NDLRefHead1">Public Types</p>
<a name="class_ni_s_p_workflow_1a4d6e1ed3dad4cbcd47ae8236d48d8df6"></a>
<p class=NDLRefHead2>NiSPWorkflow::Status</p>


<p class="NDLRefMemberDescription">Workflow status. </p>


<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">IDLE</span></td>
    <td>The workflow is not currently in use. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">PENDING</span></td>
    <td>The workflow is ready for execution but has not yet been started. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">RUNNING</span></td>
    <td>The workflow is in currently executing. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">COMPLETED</span></td>
    <td>The workflow has completed successfully. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">ABORTED</span></td>
    <td>The workflow was aborted. </td>
</tr>

  </tbody>
</table>
</div>


<a name="additional_functions"></a>
<p class="NDLRefHead1">Additional Functions</p>

<p class="NDLRefMemberDescription">Most of the functionality of this class is accessed by the <span class="NDLSystemFont"><a href="NiStreamProcessor.htm">NiStreamProcessor</a></span> and related classes as part of workflow execution. </p>

<a name="class_ni_s_p_workflow_1adfa956922b2c7ccc10a334f261e69009"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  GetId() const</p>
<p class="NDLRefMemberDetailedDescription">Gets the id for a workflow. </p>

<a name="class_ni_s_p_workflow_1a3962775af6a7a5f89336a72f352d0ee8"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiInt32</span>  GetCurrentStage() const</p>
<p class="NDLRefMemberDescription">Gets the current stage being executed on other processing elements. </p>

<a name="class_ni_s_p_workflow_1a0345fa89ec62cda8f97833a3ce90f7a3"></a>
<p class="NDLRefMemberFunction">void  SetCurrentStage(<span class="NDLSystemFont">NiInt32</span> iStage)</p>
<p class="NDLRefMemberDescription">Sets the current stage being executed on other processing elements. </p>

<a name="class_ni_s_p_workflow_1a0d83507e48599d03efce138dca1a0f7f"></a>
<p class="NDLRefMemberFunction">void  AddPendingJobList(<span class="NDLSystemFont"><a href="NiSPJobList.htm">NiSPJobList</a></span>* pkJobList)</p>
<p class="NDLRefMemberDescription">Adds a job list pending on other processing elements. </p>

<a name="class_ni_s_p_workflow_1a7f28cfffc8fd527c03709c1be11c44d1"></a>
<p class="NDLRefMemberFunction">void  RemovePendingJobList(<span class="NDLSystemFont"><a href="NiSPJobList.htm">NiSPJobList</a></span>* pkJobList)</p>
<p class="NDLRefMemberDescription">Removes the job list pending on other processing elements. </p>

<a name="class_ni_s_p_workflow_1ac9f9ab9ecd8de65dd92d76652e8ae647"></a>
<p class="NDLRefMemberFunction">void  ClearPendingJobLists()</p>
<p class="NDLRefMemberDescription">Clears the pending job lists. </p>

<a name="class_ni_s_p_workflow_1a3a1bd2cdfc8fd315fed355b4e1158c54"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  GetNumPendingJobLists() const</p>
<p class="NDLRefMemberDescription">Gets the number of pending job lists. </p>

<a name="class_ni_s_p_workflow_1af371f315784c892859b5d929a5a8f912"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="NiSPJobList.htm">NiSPJobList</a></span>*  GetPendingJobList(<span class="NDLSystemFont">NiUInt32</span> uiIndex) const</p>
<p class="NDLRefMemberDescription">Gets the pending job list at the index specified. </p>

<a name="class_ni_s_p_workflow_1a156e707cbf77571ce841c711ee2c481d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiSPTask.htm">NiSPTask</a></span>*  FindTask(<span class="NDLSystemFont">NiUInt32</span> uiTaskId)</p>
<p class="NDLRefMemberDescription">Finds a task in the workflow. </p>

<a name="class_ni_s_p_workflow_1a84cc20364873a380c13649d91fc40aa1"></a>
<p class="NDLRefMemberFunction">void  Reset()</p>
<p class="NDLRefMemberDescription">Resets the workflow for new execution clearing any per execution info. </p>

<a name="class_ni_s_p_workflow_1a4374d2a0da382e0d6a46719b7e7da4eb"></a>
<p class="NDLRefMemberFunction">virtual void  HandleSignal(<span class="NDLSystemFont">NiUInt32</span> uiSignal)</p>
<p class="NDLRefMemberDescription">Handles an incoming signal that may require special processing. </p>

<a name="class_ni_s_p_workflow_1a43168b0540cd987ea62fefa45ee82e22"></a>
<p class="NDLRefMemberFunction">void  SetStatus(<span class="NDLSystemFont"><a href="NiSPWorkflow.htm#class_ni_s_p_workflow_1a4d6e1ed3dad4cbcd47ae8236d48d8df6">Status</a></span> eStatus)</p>
<p class="NDLRefMemberDescription">Sets the status of a workflow. </p>

<a name="class_ni_s_p_workflow_1ac56aaa7e04e225ccd6ac1042ac6369e8"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  Prepare()</p>
<p class="NDLRefMemberDescription">Prepares the workflow for scheduling and execution. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>True if scheduling was successful, false if scheduling should be tried again later. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_s_p_workflow_1a8b2985f1ac84835d47e3f4f91cb3fae1"></a>
<p class="NDLRefMemberFunction">void  Execute()</p>
<p class="NDLRefMemberDescription">Executes the workflow. </p>

<a name="class_ni_s_p_workflow_1aa387df0b8c76e92d5ef5490df3468d28"></a>
<p class="NDLRefMemberFunction">void  ExecuteSerial()</p>
<p class="NDLRefMemberDescription">Serially executes the workflow. </p>
<p class="NDLRefMemberDetailedDescription"><span class="NDLRefMemberDetailedDescription" style=" x-condition: PS3; "> Not available on PS3.  </span></p>

<a name="class_ni_s_p_workflow_1a18918cf9ea0cc1cbebf2dd6a62f6e27b"></a>
<p class="NDLRefMemberFunction">void  ExecutionComplete()</p>
<p class="NDLRefMemberDescription">Performs platform-specific completion of a workflow. </p>

<a name="class_ni_s_p_workflow_1ab3db67c8b4628aabe095c61fa76af4ca"></a>
<p class="NDLRefMemberFunction">void  SetCompletionHandler(<span class="NDLSystemFont"><a href="NiSPWorkflow__CompletionHandler.htm">CompletionHandler</a></span>* kHandler)</p>
<p class="NDLRefMemberDescription">Sets the completion handler for the workflow. </p>

<a name="class_ni_s_p_workflow_1af13beaa12f81a3779ee80f9289168c94"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsAtomicUpdateComplete() const</p>
<p class="NDLRefMemberDescription">Indicates if the workflow has completed execution. </p>

<a name="class_ni_s_p_workflow_1a51cd3791d68f244a9cacc667c628545c"></a>
<p class="NDLRefMemberFunction">void  ResetAtomicUpdateComplete()</p>
<p class="NDLRefMemberDescription">Resets the flag that tracks completion. </p>

<a name="class_ni_s_p_workflow_1ab36732bcd015ec83a918dc4da87aa368"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>*  GetAtomicUpdateCompleteAddress()</p>
<p class="NDLRefMemberDescription">Gets the memory address of the completion flag. </p>

<a name="class_ni_s_p_workflow_1a1ced098ce8713cb1f9d95c50044a0a87"></a>
<p class="NDLRefMemberFunction">void  SortTasksByStage()</p>
<p class="NDLRefMemberDescription">Sorts the tasks by their internal stage value. </p>
<a name="commonly_used_functions"></a>
<p class="NDLRefHead1">Commonly Used Functions</p>

<p class="NDLRefMemberDescription">While there are many functions for this class, only a few are regularly called by applications.</p>
<p class="NDLRefMemberDescription">The other functionality is used by the <span class="NDLSystemFont"><a href="NiStreamProcessor.htm">NiStreamProcessor</a></span> class and related classes to manage workflows. </p>

<a name="class_ni_s_p_workflow_1a93e369fcea5501728a3a1dbeeeb56874"></a>
<p class="NDLRefMemberFunction">static NiSPWorkflowPtr  GetFreeWorkflow()</p>
<p class="NDLRefMemberDescription">Gets a workflow from the object pool. </p>
<p class="NDLRefMemberDetailedDescription">This function should always be used to obtain a new workflow. </p>

<a name="class_ni_s_p_workflow_1a2f8d1b575f5d7a862b087bd66c9184fe"></a>
<p class="NDLRefMemberFunction">void  Add(<span class="NDLSystemFont"><a href="NiSPTask.htm">NiSPTask</a></span>* pkTask)</p>
<p class="NDLRefMemberDescription">Adds a task to the workflow. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pkTask</span></td>
    <td>Task to add to the workflow. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_s_p_workflow_1ab84625c74f52f0dc1505e0301589d749"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiSPTask.htm">NiSPTask</a></span>*  AddNewTask(<br/>const <span class="NDLSystemFont">NiUInt16</span> uiNumInputs = 1, <br/>const <span class="NDLSystemFont">NiUInt16</span> uiNumOutputs = 1, <br/>const <span class="NDLSystemFont">bool</span> bIsSignalTask = false)</p>
<p class="NDLRefMemberDescription">Obtains a new task from the task pool and adds it to the workflow. </p>
<p class="NDLRefMemberDetailedDescription">The returned task should be stored in a smart pointer if it should live beyond the life of the workflow.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">uiNumInputs</span></td>
    <td>A hint as to the number of input streams the task will have. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiNumOutputs</span></td>
    <td>A hint as to the number of output streams the task will have. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">bIsSignalTask</span></td>
    <td>Set this true if the task is to be a signal task that is used to indicate that a workflow is finished. Applications will almost never specify this - it is handled automatically. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_s_p_workflow_1acfc731e5985ad20a75fd43d49bbf96c1"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  GetSize() const</p>
<p class="NDLRefMemberDescription">Gets the number of tasks associated with the workflow. </p>

<a name="class_ni_s_p_workflow_1aef56f35e19f0bf567dcd43d3ed3d919a"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiSPTask.htm">NiSPTask</a></span>*  GetAt(<span class="NDLSystemFont">NiUInt32</span> uiTaskIdx) const</p>
<p class="NDLRefMemberDescription">Gets the task at the specified index. </p>

<a name="class_ni_s_p_workflow_1ab668e99ed047ac5f2d29cd8bee2158e0"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiSPWorkflow.htm#class_ni_s_p_workflow_1a4d6e1ed3dad4cbcd47ae8236d48d8df6">Status</a></span>  GetStatus() const</p>
<p class="NDLRefMemberDescription">Gets the status of a workflow. </p>

<a name="class_ni_s_p_workflow_1af021481a46c831edfbe7b0fb9ab6b52e"></a>
<p class="NDLRefMemberFunction">void  Clear()</p>
<p class="NDLRefMemberDescription">Clears the internal state of the workflow. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
