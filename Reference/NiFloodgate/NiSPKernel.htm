<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiSPKernel</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiSPKernel</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../efd/efd__MemObject.htm">efd::MemObject</a></span></p>


<p class="NDLRefHeaderFile">&lt;NiSPKernel.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/class_ni_s_p_kernel.gif" alt="Inheritance graph for NiSPKernel"/>
  <p class="FigureCaption">Inheritance graph for NiSPKernel</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">This class is the encapsulation of Floodgate kernels. </p>
<p class="NDLNormal">A kernel is a set of instructions that operate on one or more <span class="NDLSystemFont"><a href="NiSPStream.htm">NiSPStream</a></span> objects of varying or fixed data. Applications must always declare and define kernels using the macros found in NiSPKernelMacros.h.  <span class="NDLNormal" style=" x-condition: PS3; "> For PPU kernels, look in <span class="NDLSystemFont" style=" x-condition: PS3; ">NiSPPPUKernelMacros.h</span>.  </span> See the Programmer's Guide section on Floodgate or the Mesh Creation demo for examples of kernel definitions. </p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="class_ni_s_p_kernel_1a56e227db572bf1183847636a2499adf8"></a>
<p class="NDLRefMemberFunction">NiSPKernel()</p>
<p class="NDLRefMemberDescription">Default constructor. </p>

<a name="class_ni_s_p_kernel_1a24db3d9d72561475e6a53ff3064f7f4a"></a>
<p class="NDLRefMemberFunction">NiSPKernel(const char* pucName)</p>
<p class="NDLRefMemberDescription">Main constructor. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pucName</span></td>
    <td>The name of the kernel. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_s_p_kernel_1a2d64e9fe19d5e74d278357ec14338232"></a>
<p class="NDLRefMemberFunction">virtual ~NiSPKernel()</p>
<p class="NDLRefMemberDescription">Destructor. </p>

<a name="class_ni_s_p_kernel_1ab4bc1bdd8f6ceb30b3077bc49290da8f"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../NiMain/NiString.htm">NiString</a></span>&  GetName() const</p>
<p class="NDLRefMemberDescription">Returns the name of the kernel. </p>

<a name="class_ni_s_p_kernel_1ae6b4f0816b16de5cb851f300e5ee1915"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiSPKernel</span>&  operator=(const <span class="NDLSystemFont">NiSPKernel</span>& kKernel)</p>
<p class="NDLRefMemberDescription">Overloaded operator for assigning one kernel to another. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kKernel</span></td>
    <td>Source kernel. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_s_p_kernel_1a10536aeeb21cd1077db891578484d9f5"></a>
<p class="NDLRefMemberFunction">virtual void  Execute(<span class="NDLSystemFont"><a href="NiSPWorkload.htm">NiSPWorkload</a></span>& kWorkload)</p>
<p class="NDLRefMemberDescription">Implements the work for the kernel. </p>
<p class="NDLRefMemberDetailedDescription">Classes derived from <span class="NDLSystemFont">NiSPKernel</span> typically declare an instance of this function implicitly using NiSPDeclareKernel and define it using NiSPBeginKernelImpl. See the Description section above for information on the Execute function of this kernel.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kWorkload</span></td>
    <td>The workload to which this kernel belongs. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_s_p_kernel_1a8404eb468f70a28882795c62e03c2f62"></a>
<p class="NDLRefMemberFunction" style=" x-condition: PS3; ">virtual void  Execute(<span class="NDLSystemFont" style=" x-condition: PS3; "><a href="../../ee_goto.htm#Reference/NiFloodgate/NiSPPPUWorkload_PS3.htm">NiSPPPUWorkload</a></span>& )</p>
<p class="NDLRefMemberDescription" style=" x-condition: PS3; "> Implements the work for a PPU kernel. </p>
<p class="NDLRefMemberDetailedDescription" style=" x-condition: PS3; ">Classes derived from <span class="NDLSystemFont" style=" x-condition: PS3; ">NiSPKernel</span> typically declare an instance of this function implicitly using NiSPDeclarePPUKernel or NiSPDeclarePPUKernelLib, and define it using NiSPBeginKernelImpl. See the Description section above for information on the Execute function of this kernel. </p>

<a name="class_ni_s_p_kernel_1a1d356631bcfba41120c45acb7f8b9069"></a>
<p class="NDLRefMemberFunction" style=" x-condition: PS3; ">virtual char*  GetBinStart()</p>
<p class="NDLRefMemberDescription" style=" x-condition: PS3; "> Gets the starting memory address of the <span class="NDLSystemFont" style=" x-condition: PS3; ">NiSPKernel</span> to execute. </p>
<p class="NDLRefMemberDetailedDescription" style=" x-condition: PS3; ">This is not required on all platforms. </p>

<a name="class_ni_s_p_kernel_1a794149698801173c42333483864f7faf"></a>
<p class="NDLRefMemberFunction" style=" x-condition: PS3; ">virtual char*  GetBinSize()</p>
<p class="NDLRefMemberDescription" style=" x-condition: PS3; "> Gets the size of the <span class="NDLSystemFont" style=" x-condition: PS3; ">NiSPKernel</span> to execute. </p>
<p class="NDLRefMemberDetailedDescription" style=" x-condition: PS3; ">This is not required on all platforms. </p>

<a name="class_ni_s_p_kernel_1a00e4d27d9aa743e30224b874b800d304"></a>
<p class="NDLRefMemberFunction" style=" x-condition: PS3; ">virtual <span class="NDLSystemFont" style=" x-condition: PS3; ">bool</span>  IsPPUKernel()</p>
<p class="NDLRefMemberDescription" style=" x-condition: PS3; "> Indicates if this is a PPU based Kernel. </p>
<p class="NDLRefMemberDetailedDescription" style=" x-condition: PS3; ">PS3 only. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
