<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::ExternalMemAllocator</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::ExternalMemAllocator</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="efd__IAllocator.htm">efd::IAllocator</a></span></p>


<p class="NDLRefHeaderFile">&lt;ExternalMemAllocator.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classefd_1_1_external_mem_allocator.gif" alt="Inheritance graph for efd::ExternalMemAllocator"/>
  <p class="FigureCaption">Inheritance graph for efd::ExternalMemAllocator</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">Manage allocation of external memory resources. </p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classefd_1_1_external_mem_allocator_1a292f161b8708bc4ee199bbfbd90fc06f"></a>
<p class="NDLRefMemberFunction">virtual void*  Allocate(<br/>size_t& stSizeInBytes, <br/>size_t& stAlignment, <br/><span class="NDLSystemFont"><a href="efd__MemHint.htm">MemHint</a></span> kHint, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ad9c81f78b405eb346c527c73002e5382">MemEventType</a></span> eEventType, <br/>const char* pcFile, <br/>int iLine, <br/>const char* pcFunction)</p>
<p class="NDLRefMemberDescription">Allocate stSizeInBytes bytes of memory guaranteeing stAlignment alignment if possible for the returned address. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">that the size and alignment are passed-by-reference. This allows the allocator to adjust the values internally and pass the results back to the caller. This functionality is useful in the event of nesting allocators for memory tracking and debugging purposes. The additional arguments are used by memory tracking and debugging routines.</p><span class="NDLSystemFont"><a href="efd__MemHint.htm">MemHint</a></span> indicates the intended usage for the memory being allocated which allows the allocator to optionally pick the most efficient memory type or location, as well as providing additional information to the memory tracker when enabled.</p>
<p class="NDLRefMemberDetailedDescription">The eEventType argument indicates what external method was used to allocate the data. This may provide additional information to a memory debugging system or may be used at runtime to determine allocator behavior.</p>
<p class="NDLRefMemberDetailedDescription">pcFile, iLine, and pcFunction are the file name, line number, and function name for the function calling Allocate. </p>

<a name="classefd_1_1_external_mem_allocator_1aedbcd336fd09538215d14ef5b6544004"></a>
<p class="NDLRefMemberFunction">virtual void  Deallocate(<br/>void* pvMemory, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ad9c81f78b405eb346c527c73002e5382">MemEventType</a></span> eEventType, <br/>size_t stSizeInBytes)</p>
<p class="NDLRefMemberDescription">Free the memory at the specified address. </p>
<p class="NDLRefMemberDetailedDescription">In some situations, the deallocation routine may know how large it was when allocated. If so, the stSizeInBytes argument will be the size initially requested. If this size is unknown, the correct value for the argument is EE_MEM_DEALLOC_SIZE_DEFAULT.</p>
<p class="NDLRefMemberDetailedDescription">The eEventType argument indicates what external method was used to deallocate the data. This may provide additional information to a memory debugging system or may be used at runtime to determine allocator behavior. </p>

<a name="classefd_1_1_external_mem_allocator_1ac2e7831ed42b6b359b5f69a7261f47f0"></a>
<p class="NDLRefMemberFunction">virtual void*  Reallocate(<br/>void* pvMemory, <br/>size_t& stSizeInBytes, <br/>size_t& stAlignment, <br/><span class="NDLSystemFont"><a href="efd__MemHint.htm">MemHint</a></span> kHint, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ad9c81f78b405eb346c527c73002e5382">MemEventType</a></span> eEventType, <br/>size_t stSizeCurrent, <br/>const char* pcFile, <br/>int iLine, <br/>const char* pcFunction)</p>
<p class="NDLRefMemberDescription">Reallocate the memory at the specified address, guaranteeing stAlignment if possible for the returned address. </p>
<p class="NDLRefMemberDetailedDescription">Note that if stSizeInBytes is zero, this method functions like Deallocate. If pvMemory is NULL, this method functions exactly like Allocate. In some cases, the outer memory management system may know the size prior to deallocation or reallocation, in this case stSizeCurrent should match the size and the compiler provides size hint should be provided. If this size is unknown, the correct value for the argument is EE_MEM_DEALLOC_SIZE_DEFAULT.</p>
<p class="NDLRefMemberDetailedDescription"><span class="NDLSystemFont"><a href="efd__MemHint.htm">MemHint</a></span> indicates the intended usage for the memory being allocated which allows the allocator to optionally pick the most efficient memory type or location, as well as providing additional information to the memory tracker when enabled.</p>
<p class="NDLRefMemberDetailedDescription">The eEventType argument indicates what external method was used to reallocate the date. This may provide additional information to a memory debugging system or may be used at runtime to determine allocator behavior.</p>
<p class="NDLRefMemberDetailedDescription">pcFile, iLine, and pcFunction are the file name, line number, and function name for the function calling Reallocate. </p>

<a name="classefd_1_1_external_mem_allocator_1a1f34f0aae75c85d71e783240918fc640"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  TrackAllocate(<br/>const void *const  pvMemory, <br/>size_t stSizeInBytes, <br/><span class="NDLSystemFont"><a href="efd__MemHint.htm">MemHint</a></span> kHint, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ad9c81f78b405eb346c527c73002e5382">MemEventType</a></span> eEventType, <br/>const char* pcFile, <br/>int iLine, <br/>const char* pcFunction)</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_external_mem_allocator_1a08bfb56e64be49bb1ea95138941b7155"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  TrackDeallocate(<br/>const void *const  pvMemory, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ad9c81f78b405eb346c527c73002e5382">MemEventType</a></span> eEventType)</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_external_mem_allocator_1a7090892b30f46bd07e175dbce4930f98"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  SetMarker(<br/>const char* pcMarkerType, <br/>const char* pcClassifier, <br/>const char* pcString)</p>
<p class="NDLRefMemberDescription">Function to allow the marking of memory allocations. </p>
<p class="NDLRefMemberDetailedDescription">This is used by a memory tracker / debugger to identify specific allocations. pcMarkerType, pcClassifier, and pcString are all free form strings that uniquely identify the allocation. </p>

<a name="classefd_1_1_external_mem_allocator_1ab38c815c2272b88fac6e24fbb3a9c037"></a>
<p class="NDLRefMemberFunction">virtual void  Initialize()</p>
<p class="NDLRefMemberDescription">Initialize the allocator. Called prior to any allocations. </p>

<a name="classefd_1_1_external_mem_allocator_1a518e162d6b2d557a5a6a6489e6ab0cbd"></a>
<p class="NDLRefMemberFunction">virtual void  Shutdown()</p>
<p class="NDLRefMemberDescription">Shutdown the allocator. No allocations are allowed after shutdown. </p>

<a name="classefd_1_1_external_mem_allocator_1a456cbcceab428d227bb133866a3712dc"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  VerifyAddress(const void* pvMemory)</p>
<p class="NDLRefMemberDescription">Verify the provided address is valid and return false if it is not. </p>

<a name="classefd_1_1_external_mem_allocator_1a7e3757ee1a7404381d29c808238c607e"></a>
<p class="NDLRefMemberFunction">virtual void  CreateMemoryLogHandler()</p>
<p class="NDLRefMemberDescription">Function to allow the memory allocator an opportunity to create an <span class="NDLSystemFont"><a href="efd__IMemLogHandler.htm">IMemLogHandler</a></span> for logging memory allocations. </p>
<p class="NDLRefMemberDetailedDescription">This method will be called on the allocator after the <span class="NDLSystemFont"><a href="efd__MemManager.htm">MemManager</a></span> has been constructed. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
