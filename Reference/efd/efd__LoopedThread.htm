<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::LoopedThread</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::LoopedThread</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="efd__Thread.htm">efd::Thread</a></span></p>


<p class="NDLRefHeaderFile">&lt;LoopedThread.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classefd_1_1_looped_thread.gif" alt="Inheritance graph for efd::LoopedThread"/>
  <p class="FigureCaption">Inheritance graph for efd::LoopedThread</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal"><span class="NDLSystemFont">LoopedThread</span> is a class designed to facilitate the use of threads that need to be reused multiple times. </p>
<p class="NDLNormal">A common use for this class would be to allow an application to have a multithreaded update or culling pass. Instead of recreating threads each frame in such a case, an application could use this class to repeatedly perform a task.</p>
<p class="NDLNormal">
<p class="NDLNormal">Like a <span class="NDLSystemFont"><a href="efd__Thread.htm">Thread</a></span>, a <span class="NDLSystemFont">LoopedThread</span> is created suspended and must be resumed before it can be used.</p>
<p class="NDLNormal">Each <span class="NDLSystemFont"><a href="efd__LoopedThread.htm#classefd_1_1_looped_thread_1a1e933996842f249853eb0b2033fd376f">DoLoop()</a></span> should be paired with a <span class="NDLSystemFont"><a href="efd__LoopedThread.htm#classefd_1_1_looped_thread_1ad7890c628f4b6bec5fedb9d5aedea7fe">WaitForLoopCompletion()</a></span> call after it. <span class="NDLSystemFont"><a href="efd__LoopedThread.htm#classefd_1_1_looped_thread_1a1e933996842f249853eb0b2033fd376f">DoLoop()</a></span> cannot be called repeatedly to run the loop multiple times without blocking.</p>
<p class="NDLNormal">LoopedThreads may be destroyed by deleting them (via destructor). They may also be explicitly stopped via <span class="NDLSystemFont"><a href="efd__LoopedThread.htm#classefd_1_1_looped_thread_1a21c4882b3306c96b0416aaa4e075569d">Shutdown()</a></span>. Both <span class="NDLSystemFont"><a href="efd__LoopedThread.htm#classefd_1_1_looped_thread_1a21c4882b3306c96b0416aaa4e075569d">Shutdown()</a></span> and the destructor will wait until the loop procedure has finished running and will not interrupt it. <span class="NDLSystemFont"><a href="efd__LoopedThread.htm#classefd_1_1_looped_thread_1a21c4882b3306c96b0416aaa4e075569d">Shutdown()</a></span> and the destructor will block until the loop has terminated (which is not necessarily when the thread procedure has terminated (return condition <span class="NDLSystemFont"><a href="efd__set.htm">set</a></span>, status <span class="NDLSystemFont"><a href="efd__set.htm">set</a></span>, etc...) Once a thread has stopped, <span class="NDLSystemFont"><a href="efd__LoopedThread.htm#classefd_1_1_looped_thread_1a1e933996842f249853eb0b2033fd376f">DoLoop()</a></span> silently does nothing. </p></p>

<a name="public_static_methods"></a>
<p class="NDLRefHead1">Public Static Methods</p>


<a name="classefd_1_1_looped_thread_1aa76da2bd72103b18e39558128dac959a"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">LoopedThread</span>*  Create(<br/><span class="NDLSystemFont"><a href="efd__LoopedThreadProcedure.htm">LoopedThreadProcedure</a></span>* pProcedure, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> stackSize = USEDEF_STACK_SIZE, <br/>const char* pcThreadName = 0)</p>
<p class="NDLRefMemberDescription">Create a thread using a specified <span class="NDLSystemFont"><a href="efd__LoopedThreadProcedure.htm">LoopedThreadProcedure</a></span> and a <span class="NDLSystemFont"><a href="efd__stack.htm">stack</a></span> size. </p>
<p class="NDLRefMemberDetailedDescription">There are no publicly defined constructors for this class. Applications should create all threads through the static Create method to make sure the thread is properly initialized and managed.</p>
<p class="NDLRefMemberDetailedDescription">The thread does not take ownership of the <span class="NDLSystemFont"><a href="efd__LoopedThreadProcedure.htm">LoopedThreadProcedure</a></span> object so that a procedure may be shared across multiple worker threads. Like <span class="NDLSystemFont"><a href="efd__Thread.htm">Thread</a></span>, all LoopedThreads are created in the SUSPENDED state and must be resumed before any loop iterations will run.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pProcedure</span></td>
    <td>Pointer to a <span class="NDLSystemFont"><a href="efd__LoopedThreadProcedure.htm">LoopedThreadProcedure</a></span>. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">stackSize</span></td>
    <td>Stack size. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pcThreadName</span></td>
    <td>Optional thread name. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Pointer to a newly created <span class="NDLSystemFont">LoopedThread</span>. </td>
</tr>

        </tbody>
    </table>
</div>


<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classefd_1_1_looped_thread_1a194669df5d64af45602d822e0684534d"></a>
<p class="NDLRefMemberFunction">virtual ~LoopedThread()</p>
<p class="NDLRefMemberDescription">Virtual destructor. </p>

<a name="classefd_1_1_looped_thread_1ad7890c628f4b6bec5fedb9d5aedea7fe"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  WaitForLoopCompletion()</p>
<p class="NDLRefMemberDescription">Block until a loop iteration has completed. </p>
<p class="NDLRefMemberDetailedDescription">This function is usually used after a call to <span class="NDLSystemFont"><a href="efd__LoopedThread.htm#classefd_1_1_looped_thread_1a1e933996842f249853eb0b2033fd376f">DoLoop()</a></span>. If the thread has not terminated, then once this function returns, it will be suspended until the next time <span class="NDLSystemFont"><a href="efd__LoopedThread.htm#classefd_1_1_looped_thread_1a1e933996842f249853eb0b2033fd376f">DoLoop()</a></span> is called. </p>

<a name="classefd_1_1_looped_thread_1a1e933996842f249853eb0b2033fd376f"></a>
<p class="NDLRefMemberFunction">void  DoLoop()</p>
<p class="NDLRefMemberDescription">Signal the thread to run a single iteration of its loop. </p>
<p class="NDLRefMemberDetailedDescription">Calls to this function cannot be stacked. In other words, there should only be a single call to <span class="NDLSystemFont"><a href="efd__LoopedThread.htm#classefd_1_1_looped_thread_1a1e933996842f249853eb0b2033fd376f">DoLoop()</a></span> before a corresponding call to <span class="NDLSystemFont"><a href="efd__LoopedThread.htm#classefd_1_1_looped_thread_1ad7890c628f4b6bec5fedb9d5aedea7fe">WaitForLoopCompletion()</a></span>. </p>

<a name="classefd_1_1_looped_thread_1a21c4882b3306c96b0416aaa4e075569d"></a>
<p class="NDLRefMemberFunction">void  Shutdown()</p>
<p class="NDLRefMemberDescription">Use this function to signal the <span class="NDLSystemFont">LoopedThread</span> to terminate. </p>
<p class="NDLRefMemberDetailedDescription">This function will not shutdown a thread in the middle of a loop. In such a case, it will block until the loop has finished and then allow the thread to terminate. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
