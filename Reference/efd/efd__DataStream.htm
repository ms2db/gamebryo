<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::DataStream</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::DataStream</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="efd__MemObject.htm">efd::MemObject</a></span></p>


<p class="NDLRefHeaderFile">&lt;DataStream.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classefd_1_1_data_stream.gif" alt="Inheritance graph for efd::DataStream"/>
  <p class="FigureCaption">Inheritance graph for efd::DataStream</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">Interface used to stream information from one place to another. </p>
<p class="NDLNormal">An <span class="NDLSystemFont">DataStream</span> knows how to read and write Emergent data types to marshal / demarshal this data over the wire. </p>

<a name="public_types"></a>
<p class="NDLRefHead1">Public Types</p>
<a name="classefd_1_1_data_stream_1ac2b328d69dcb92011a75073bb4acb670"></a>
<p class=NDLRefHead2>anonymous enum</p>




<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">kDATA_STREAM_INITIAL_SIZE</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kDATA_STREAM_GROW_SIZE</span></td>
    <td>&nbsp;</td>
</tr>

  </tbody>
</table>
</div>


<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classefd_1_1_data_stream_1ae54535f8e2080523fd21707618d00548"></a>
<p class="NDLRefMemberFunction">void  Reset() const</p>
<p class="NDLRefMemberDescription">Resets the cursor in the buffer. </p>
<p class="NDLRefMemberDetailedDescription">This method should be called when the local message service receives the message, and before the first read happens. </p>

<a name="classefd_1_1_data_stream_1a9c28c4162583a0541da7828f1fe5302f"></a>
<p class="NDLRefMemberFunction">size_t  GetSize() const</p>
<p class="NDLRefMemberDescription">Get the total number of bytes this stream uses. </p>
<p class="NDLRefMemberDetailedDescription">This method does not count padded space that is not yet allocated.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>Number of bytes used by this stream. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_data_stream_1a21f8c2cf6e864a593abe5480971b62ff"></a>
<p class="NDLRefMemberFunction">void  ReadFromFile(const <span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span>& fileName)</p>
<p class="NDLRefMemberDescription">Destroys contents of a datastream and replaces it with contents of a named file. </p>

<a name="classefd_1_1_data_stream_1a80e2eb4a059355c441db7824fadd6acf"></a>
<p class="NDLRefMemberFunction">void  WriteToFile(const <span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span>& fileName) const</p>
<p class="NDLRefMemberDescription">Writes out entire contents of a datastream to a named file. </p>

<a name="classefd_1_1_data_stream_1a0f912f4b922739382b43ae7e7f15582f"></a>
<p class="NDLRefMemberFunction">void  ReadRawBuffer(<br/>void* pToBuffer, <br/>size_t dataSize) const</p>
<p class="NDLRefMemberDescription">Read an arbitrary number of bytes starting at the current cursor position. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">This method is called by all the other read methods for the basic (mundane) data types.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pToBuffer</span></td>
    <td>Pointer to which to write data. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">dataSize</span></td>
    <td>Number of bytes to read from stream. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_data_stream_1aef8e74729a063c907113d58894cb97ab"></a>
<p class="NDLRefMemberFunction">void  WriteRawBuffer(<br/>const void* pFromBuffer, <br/>size_t dataSize)</p>
<p class="NDLRefMemberDescription">Write an arbitrary number of bytes starting at the current cursor position. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">This method is called by all the other write methods for the basic (mundane) data types.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pFromBuffer</span></td>
    <td>Pointer to address from which the raw data is read. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">dataSize</span></td>
    <td>Number of bytes to write. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_data_stream_1ab52312559db02a1bd5c39731d6e9eb5b"></a>
<p class="NDLRefMemberFunction">void*  GetRawBufferForWriting(size_t dataSize)</p>
<p class="NDLRefMemberDescription">Get a pointer to a buffer for writing. </p>
<p class="NDLRefMemberDetailedDescription">Advances the stream to point to the end of the returned buffer. Data written into this buffer must already by formatted in the correct endianess. This is intended for special cases such as reading a data stream from the wire or other persisted binary form. Call SetRawBufferSize with the actual amount of data written if you write less data than the amount specified by dataSize.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">dataSize</span></td>
    <td>size of the buffer to return </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_data_stream_1a068bfef3d7f9d205a43ab7ceae3339f5"></a>
<p class="NDLRefMemberFunction">void*  GetRawBufferForReading()</p>
<p class="NDLRefMemberDescription">Get a pointer to a buffer for reading. </p>
<p class="NDLRefMemberDetailedDescription">This is intended for special cases such as writing a <span class="NDLSystemFont">DataStream</span> to the wire or other persisted binary form.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>: a pointer to the beginning of the buffer to send over the wire/write to disk </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_data_stream_1af77609bad37186a06d2375e8dd0fce26"></a>
<p class="NDLRefMemberFunction">void  SetRawBufferSize(size_t dataActuallyWritten)</p>
<p class="NDLRefMemberDescription">Tell <span class="NDLSystemFont">DataStream</span> how many bytes you really wrote into the buffer after calling GetRawBufferForWriting. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>Number of bytes used by this stream. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_data_stream_1a5e74cd1f454a1be0b64209d1530b67be"></a>
<p class="NDLRefMemberFunction">size_t  GetPos() const</p>
<p class="NDLRefMemberDescription">Returns the position in the stream. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>Location in the stream. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_data_stream_1ab8282e5a92aae4d1702faad7409246f5"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  Seek(size_t offsetPosition) const</p>
<p class="NDLRefMemberDescription">Seek to an arbitrary absolute position in the stream. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">offsetPosition</span></td>
    <td>Location to position. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if no error; false if there is an attempt to seek beyond the end of buffer. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_data_stream_1aa9e006d2a3880b035ba37bc0220e71cd"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  SeekFromCurrentPos(size_t bytes) const</p>
<p class="NDLRefMemberDescription">Seek to an arbitrary relative position in the stream. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">bytes</span></td>
    <td>Offset from current position to seek. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if no error; false if there is an attempt to seek beyond the end of buffer. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_data_stream_1a2814c4b357f1997a74fed6f9b609e856"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  ReadAt(<br/>size_t offsetPosition, <br/>void* pToBuffer, <br/>size_t dataSize)</p>
<p class="NDLRefMemberDescription">Read an arbitrary number of bytes starting at the specified location within the stream. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">offsetPosition</span></td>
    <td>Where in the stream from which to read the data. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pToBuffer</span></td>
    <td>Pointer to location where data from the stream will be written. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">dataSize</span></td>
    <td>Number of bytes to read from stream. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if seek/read is successful; false if an attempt was made to seek/read beyond the current stream. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_data_stream_1aef2a756c97c1896f8e4e955b5dc86dfb"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  WriteAt(<br/>size_t offsetPosition, <br/>const void* pFromBuffer, <br/>size_t dataSize)</p>
<p class="NDLRefMemberDescription">Write an arbitrary number of bytes starting at the specified location within the stream. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">offsetPosition</span></td>
    <td>Where in the stream to write the data. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pFromBuffer</span></td>
    <td>Pointer to where raw data will be read. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">dataSize</span></td>
    <td>Number of bytes to write to the stream. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if seek/write successful; false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_data_stream_1a0a966aab998649372f25d10c7b1e6ce5"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a59a3838ab5cdfe87f98f5b8371e4e91d">UInt8</a></span>*  GetRawBuffer() const</p>
<p class="NDLRefMemberDescription">Return a raw pointer to the current location in the stream. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">This method should not be used directly. It is implementation-dependent and is only needed to make the process of sending over the network use fewer copies. </p></p>

<a name="classefd_1_1_data_stream_1ac527c7f0c7f3dc87e6fe1d471b7ea9a0"></a>
<p class="NDLRefMemberFunction">size_t  GetRawBytesRemaining() const</p>
<p class="NDLRefMemberDescription">Get the number of bytes remaining. </p>
<a name="constructors_and_destructors"></a>
<p class="NDLRefHead1">Constructors and Destructors</p>


<a name="classefd_1_1_data_stream_1a44e70320d3022cee9ddad4e46e4d8a9c"></a>
<p class="NDLRefMemberFunction">DataStream(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">UInt32</a></span> initialSize = kDATA_STREAM_INITIAL_SIZE)</p>
<p class="NDLRefMemberDescription">Create with initial size. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">initialSize</span></td>
    <td>the initial size to allocate for the <span class="NDLSystemFont">DataStream</span></td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_data_stream_1a20e7d80cba844012ffcab0346b5cf6c0"></a>
<p class="NDLRefMemberFunction">DataStream(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a59a3838ab5cdfe87f98f5b8371e4e91d">efd::UInt8</a></span>* pBuffer, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">UInt32</a></span> size)</p>
<p class="NDLRefMemberDescription">Create a readonly <span class="NDLSystemFont">DataStream</span> from a buffer and size. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pBuffer</span></td>
    <td>pointer to the buffer </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">size</span></td>
    <td>the size of the buffer </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_data_stream_1a589830f863df76a8ed55d3fe3d10a63f"></a>
<p class="NDLRefMemberFunction">DataStream(<br/>const <span class="NDLSystemFont">DataStream</span>& cpy, <br/><span class="NDLSystemFont">bool</span> readOnly = false)</p>
<p class="NDLRefMemberDescription">Create a copy (possibly readonly) of a <span class="NDLSystemFont">DataStream</span> from another. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">cpy</span></td>
    <td><span class="NDLSystemFont">DataStream</span> to copy. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">readOnly</span></td>
    <td>True opens the stream in readonly state. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_data_stream_1a9dac3221a70ce6ca0320f79d3c37ce76"></a>
<p class="NDLRefMemberFunction">virtual ~DataStream()</p>
<p class="NDLRefMemberDescription">Destructor. </p>
<a name="readers"></a>
<p class="NDLRefHead1">Readers</p>


<a name="classefd_1_1_data_stream_1a2f436eb8ccc04d330471c354b0eef843"></a>
<p class="NDLRefMemberFunction">void  Read(<span class="NDLSystemFont">bool</span>& val) const</p>
<p class="NDLRefMemberDescription">Read a bool value from the stream. </p>

<a name="classefd_1_1_data_stream_1a0ca84890fdb0c85dda2d7b4cbb902fd5"></a>
<p class="NDLRefMemberFunction">void  Read(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a02da74c5f95666d41c684efde9efcd88">efd::SInt8</a></span>& val) const</p>
<p class="NDLRefMemberDescription">Read a char value from the stream. </p>

<a name="classefd_1_1_data_stream_1a83ea136fd00ec5ef7db78a625b069e32"></a>
<p class="NDLRefMemberFunction">void  Read(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a59a3838ab5cdfe87f98f5b8371e4e91d">efd::UInt8</a></span>& val) const</p>
<p class="NDLRefMemberDescription">Read a <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a59a3838ab5cdfe87f98f5b8371e4e91d">efd::UInt8</a></span> value from the stream. </p>

<a name="classefd_1_1_data_stream_1a12fafa2f2503e3562ac8b9d3f4178948"></a>
<p class="NDLRefMemberFunction">void  Read(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a78e418e4217f674682471407609a8aa8">efd::SInt16</a></span>& val) const</p>
<p class="NDLRefMemberDescription">Read a <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a78e418e4217f674682471407609a8aa8">efd::SInt16</a></span> value from the stream. </p>

<a name="classefd_1_1_data_stream_1acac8a2134cf47b578c20d797ea76117d"></a>
<p class="NDLRefMemberFunction">void  Read(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span>& val) const</p>
<p class="NDLRefMemberDescription">Read a float value from the stream. </p>

<a name="classefd_1_1_data_stream_1ab379b9a2cfe28e4689478e54d8820794"></a>
<p class="NDLRefMemberFunction">void  Read(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>& val) const</p>
<p class="NDLRefMemberDescription">Read a <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span> value from the stream. </p>

<a name="classefd_1_1_data_stream_1a96efae5e668eb63605cbbacdfdaf4451"></a>
<p class="NDLRefMemberFunction">void  Read(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>& val) const</p>
<p class="NDLRefMemberDescription">Read a <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> value from the stream. </p>

<a name="classefd_1_1_data_stream_1ad322a9485815e674424d45335e68f58d"></a>
<p class="NDLRefMemberFunction">void  Read(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a31570c844c29f8e0f335ac87dcb55401">efd::SInt64</a></span>& val) const</p>
<p class="NDLRefMemberDescription">Read a <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a31570c844c29f8e0f335ac87dcb55401">efd::SInt64</a></span> value from the stream. </p>

<a name="classefd_1_1_data_stream_1a04866670644a65181c8ae73fa10ef545"></a>
<p class="NDLRefMemberFunction">void  Read(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a845df149ec80fc0bf36f875ece09ef9d">efd::UInt64</a></span>& val) const</p>
<p class="NDLRefMemberDescription">Read a <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a845df149ec80fc0bf36f875ece09ef9d">efd::UInt64</a></span> value from the stream. </p>

<a name="classefd_1_1_data_stream_1a1cffbf3fd1ccc3eed83eb92bc781d5ec"></a>
<p class="NDLRefMemberFunction">void  Read(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>& val) const</p>
<p class="NDLRefMemberDescription">Read a <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> value from the stream. </p>

<a name="classefd_1_1_data_stream_1af790c41768bb130f265410f4d19a3c8d"></a>
<p class="NDLRefMemberFunction">void  Read(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aff0a9e9ca8001b330091eb01eeb190c2">efd::Float64</a></span>& val) const</p>
<p class="NDLRefMemberDescription">Read a <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aff0a9e9ca8001b330091eb01eeb190c2">efd::Float64</a></span> value from the stream. </p>

<a name="classefd_1_1_data_stream_1a05dbffd40faa9bd4f1d4f4103c422beb"></a>
<p class="NDLRefMemberFunction">void  Read(<span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span>& val) const</p>
<p class="NDLRefMemberDescription">Read a float <span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span> from the stream. </p>

<a name="classefd_1_1_data_stream_1a93bff449a43654e343f8d7c2ffaf53c6"></a>
<p class="NDLRefMemberFunction">void  Read(<span class="NDLSystemFont"><a href="efd__utf8char_t.htm">efd::utf8char_t</a></span>& val) const</p>
<p class="NDLRefMemberDescription">Read a <span class="NDLSystemFont"><a href="efd__utf8char_t.htm">utf8char_t</a></span> value from the stream. </p>

<a name="classefd_1_1_data_stream_1a242b413b73313fa2b19fa694b8a4f48c"></a>
<p class="NDLRefMemberFunction">void  Read(<span class="NDLSystemFont"><a href="efd__utf16char_t.htm">efd::utf16char_t</a></span>& val) const</p>
<p class="NDLRefMemberDescription">Read a WChar value from the stream. </p>

<a name="classefd_1_1_data_stream_1a415794ffa006694a6b067c980b5b91ca"></a>
<p class="NDLRefMemberFunction">void  Read(<span class="NDLSystemFont"><a href="efd__IStreamable.htm">IStreamable</a></span>& val) const</p>
<p class="NDLRefMemberDescription">Read a <span class="NDLSystemFont"><a href="efd__IStreamable.htm">IStreamable</a></span> value from the stream. </p>

<a name="classefd_1_1_data_stream_1afdc8fd0a6fbb52f3cbcc6cb460ba7087"></a>
<p class="NDLRefMemberFunction">void  Read(<span class="NDLSystemFont">DataStream</span>& val) const</p>
<p class="NDLRefMemberDescription">Read a <span class="NDLSystemFont">DataStream</span> value from the stream (extract stream from stream). </p>

<a name="classefd_1_1_data_stream_1acec6ff57a5a1712bb4b9545af7e4635c"></a>
<p class="NDLRefMemberFunction">void  Read(<span class="NDLSystemFont"><a href="efd__Color.htm">efd::Color</a></span>& val) const</p>
<p class="NDLRefMemberDescription">Read a bool value from the stream. </p>

<a name="classefd_1_1_data_stream_1a92aaee6a1d9dc72d5c358e12fc1dfb44"></a>
<p class="NDLRefMemberFunction">void  Read(<span class="NDLSystemFont"><a href="efd__ColorA.htm">efd::ColorA</a></span>& val) const</p>
<p class="NDLRefMemberDescription">Read a bool value from the stream. </p>

<a name="classefd_1_1_data_stream_1a7ce41c4a14817ed1cb53d410e0f2d7f9"></a>
<p class="NDLRefMemberFunction">void  Read(<span class="NDLSystemFont"><a href="efd__Matrix3.htm">efd::Matrix3</a></span>& val) const</p>
<p class="NDLRefMemberDescription">Read a bool value from the stream. </p>

<a name="classefd_1_1_data_stream_1accd11d837fe3eab9bab13c92f5078211"></a>
<p class="NDLRefMemberFunction">void  Read(<span class="NDLSystemFont"><a href="efd__Point2.htm">efd::Point2</a></span>& val) const</p>
<p class="NDLRefMemberDescription">Read a bool value from the stream. </p>

<a name="classefd_1_1_data_stream_1ad302942cdec7c4e7d682bb01f4d2c38d"></a>
<p class="NDLRefMemberFunction">void  Read(<span class="NDLSystemFont"><a href="efd__Point3.htm">efd::Point3</a></span>& val) const</p>
<p class="NDLRefMemberDescription">Read a bool value from the stream. </p>

<a name="classefd_1_1_data_stream_1a640814901fed3265fddf57e4298c9da6"></a>
<p class="NDLRefMemberFunction">void  Read(<span class="NDLSystemFont"><a href="efd__Point4.htm">efd::Point4</a></span>& val) const</p>
<p class="NDLRefMemberDescription">Read a bool value from the stream. </p>

<a name="classefd_1_1_data_stream_1abf69d4182b6d0d1eeb380e2e13965442"></a>
<p class="NDLRefMemberFunction">void  Read(<span class="NDLSystemFont"><a href="efd__Quaternion.htm">efd::Quaternion</a></span>& val) const</p>
<p class="NDLRefMemberDescription">Read a bool value from the stream. </p>

<a name="classefd_1_1_data_stream_1a47bc89e72c766dc4837f135420aa0f85"></a>
<p class="NDLRefMemberFunction">void  Read(<span class="NDLSystemFont"><a href="efd__ID128.htm">efd::ID128</a></span>& val) const</p>
<p class="NDLRefMemberDescription">Read a bool value from the stream. </p>

<a name="classefd_1_1_data_stream_1a0c6bd179b9bbb52003c1f97c5bc195cf"></a>
<p class="NDLRefMemberFunction">void  Read(<span class="NDLSystemFont"><a href="efd__AssetID.htm">efd::AssetID</a></span>& val) const</p>
<p class="NDLRefMemberDescription">Read a bool value from the stream. </p>
<a name="skip_functions"></a>
<p class="NDLRefHead1">Skip Functions</p>


<a name="classefd_1_1_data_stream_1acfc2a0feed1375c42019362c86066648"></a>
<p class="NDLRefMemberFunction">void  Skip(const <span class="NDLSystemFont">bool</span>& val) const</p>
<p class="NDLRefMemberDescription">The same as Read, except that it skips over the data, rather than updating the variable. </p>

<a name="classefd_1_1_data_stream_1a22eff9bb6b515c47ae19b8fe7fc8cc3e"></a>
<p class="NDLRefMemberFunction">void  Skip(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a02da74c5f95666d41c684efde9efcd88">efd::SInt8</a></span>& val) const</p>
<p class="NDLRefMemberDescription">The same as Read, except that it skips over the data, rather than updating the variable. </p>

<a name="classefd_1_1_data_stream_1ac564104113bc4b882c59c42ad958e17f"></a>
<p class="NDLRefMemberFunction">void  Skip(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a59a3838ab5cdfe87f98f5b8371e4e91d">efd::UInt8</a></span>& val) const</p>
<p class="NDLRefMemberDescription">The same as Read, except that it skips over the data, rather than updating the variable. </p>

<a name="classefd_1_1_data_stream_1a18772b8a2f4fab5088b4e75cce6e177c"></a>
<p class="NDLRefMemberFunction">void  Skip(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a78e418e4217f674682471407609a8aa8">efd::SInt16</a></span>& val) const</p>
<p class="NDLRefMemberDescription">The same as Read, except that it skips over the data, rather than updating the variable. </p>

<a name="classefd_1_1_data_stream_1a9c212a3092fa8cc2966275dda571c6b2"></a>
<p class="NDLRefMemberFunction">void  Skip(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span>& val) const</p>
<p class="NDLRefMemberDescription">The same as Read, except that it skips over the data, rather than updating the variable. </p>

<a name="classefd_1_1_data_stream_1a33b715669f414ffc300792ee6abc0e5a"></a>
<p class="NDLRefMemberFunction">void  Skip(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>& val) const</p>
<p class="NDLRefMemberDescription">The same as Read, except that it skips over the data, rather than updating the variable. </p>

<a name="classefd_1_1_data_stream_1a673f8ce4c7fdd3d86e9129a386d39607"></a>
<p class="NDLRefMemberFunction">void  Skip(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>& val) const</p>
<p class="NDLRefMemberDescription">The same as Read, except that it skips over the data, rather than updating the variable. </p>

<a name="classefd_1_1_data_stream_1a4ccc5f5aae03cbef6a083a59f5e824a3"></a>
<p class="NDLRefMemberFunction">void  Skip(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a31570c844c29f8e0f335ac87dcb55401">efd::SInt64</a></span>& val) const</p>
<p class="NDLRefMemberDescription">The same as Read, except that it skips over the data, rather than updating the variable. </p>

<a name="classefd_1_1_data_stream_1a6785822c592ad2cfbc6ed29eb8abd453"></a>
<p class="NDLRefMemberFunction">void  Skip(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a845df149ec80fc0bf36f875ece09ef9d">efd::UInt64</a></span>& val) const</p>
<p class="NDLRefMemberDescription">The same as Read, except that it skips over the data, rather than updating the variable. </p>

<a name="classefd_1_1_data_stream_1a96485788c68d1d47e644b0e6fc540298"></a>
<p class="NDLRefMemberFunction">void  Skip(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>& val) const</p>
<p class="NDLRefMemberDescription">The same as Read, except that it skips over the data, rather than updating the variable. </p>

<a name="classefd_1_1_data_stream_1a36a78627eeb2dcf6932959545306e464"></a>
<p class="NDLRefMemberFunction">void  Skip(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aff0a9e9ca8001b330091eb01eeb190c2">efd::Float64</a></span>& val) const</p>
<p class="NDLRefMemberDescription">The same as Read, except that it skips over the data, rather than updating the variable. </p>

<a name="classefd_1_1_data_stream_1a953ac6b420c7fbf5de482591db51731f"></a>
<p class="NDLRefMemberFunction">void  Skip(const <span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span>& val) const</p>
<p class="NDLRefMemberDescription">The same as Read, except that it skips over the data, rather than updating the variable. </p>

<a name="classefd_1_1_data_stream_1af88617c42b24b93f2077dc9299ced326"></a>
<p class="NDLRefMemberFunction">void  Skip(const <span class="NDLSystemFont"><a href="efd__utf8char_t.htm">efd::utf8char_t</a></span>& val) const</p>
<p class="NDLRefMemberDescription">The same as Read, except that it skips over the data, rather than updating the variable. </p>

<a name="classefd_1_1_data_stream_1aa5d55e7858420159e1d7ae368654837d"></a>
<p class="NDLRefMemberFunction">void  Skip(const <span class="NDLSystemFont"><a href="efd__utf16char_t.htm">efd::utf16char_t</a></span>& val) const</p>
<p class="NDLRefMemberDescription">The same as Read, except that it skips over the data, rather than updating the variable. </p>

<a name="classefd_1_1_data_stream_1ab2f32c346d436a67236562c035bae42f"></a>
<p class="NDLRefMemberFunction">void  Skip(const <span class="NDLSystemFont">DataStream</span>& val) const</p>
<p class="NDLRefMemberDescription">The same as Read, except that it skips over the data, rather than updating the variable. </p>

<a name="classefd_1_1_data_stream_1aa21e152705048eab0f822b56a26824d4"></a>
<p class="NDLRefMemberFunction">void  Skip(const <span class="NDLSystemFont"><a href="efd__Color.htm">efd::Color</a></span>& val) const</p>
<p class="NDLRefMemberDescription">The same as Read, except that it skips over the data, rather than updating the variable. </p>

<a name="classefd_1_1_data_stream_1a8e4fb57195b1606ba6dcc51429ed68c4"></a>
<p class="NDLRefMemberFunction">void  Skip(const <span class="NDLSystemFont"><a href="efd__ColorA.htm">efd::ColorA</a></span>& val) const</p>
<p class="NDLRefMemberDescription">The same as Read, except that it skips over the data, rather than updating the variable. </p>

<a name="classefd_1_1_data_stream_1a0786022fa7e66d9a4a07ac47765f7e01"></a>
<p class="NDLRefMemberFunction">void  Skip(const <span class="NDLSystemFont"><a href="efd__Matrix3.htm">efd::Matrix3</a></span>& val) const</p>
<p class="NDLRefMemberDescription">The same as Read, except that it skips over the data, rather than updating the variable. </p>

<a name="classefd_1_1_data_stream_1a7b7f51d1ed11cb14c3098f606e8f3460"></a>
<p class="NDLRefMemberFunction">void  Skip(const <span class="NDLSystemFont"><a href="efd__Point2.htm">efd::Point2</a></span>& val) const</p>
<p class="NDLRefMemberDescription">The same as Read, except that it skips over the data, rather than updating the variable. </p>

<a name="classefd_1_1_data_stream_1aea3f27ea88e6154534afdb2c332f18bd"></a>
<p class="NDLRefMemberFunction">void  Skip(const <span class="NDLSystemFont"><a href="efd__Point3.htm">efd::Point3</a></span>& val) const</p>
<p class="NDLRefMemberDescription">The same as Read, except that it skips over the data, rather than updating the variable. </p>

<a name="classefd_1_1_data_stream_1a6a4eaf914fd8c331b331008aa4ea9d9b"></a>
<p class="NDLRefMemberFunction">void  Skip(const <span class="NDLSystemFont"><a href="efd__Point4.htm">efd::Point4</a></span>& val) const</p>
<p class="NDLRefMemberDescription">The same as Read, except that it skips over the data, rather than updating the variable. </p>

<a name="classefd_1_1_data_stream_1a8ab51fee202ede34806be2815708a06a"></a>
<p class="NDLRefMemberFunction">void  Skip(const <span class="NDLSystemFont"><a href="efd__Quaternion.htm">efd::Quaternion</a></span>& val) const</p>
<p class="NDLRefMemberDescription">The same as Read, except that it skips over the data, rather than updating the variable. </p>

<a name="classefd_1_1_data_stream_1a46332aa0bd2ff91d87d582430c44ef60"></a>
<p class="NDLRefMemberFunction">void  Skip(const <span class="NDLSystemFont"><a href="efd__ID128.htm">efd::ID128</a></span>& val) const</p>
<p class="NDLRefMemberDescription">The same as Read, except that it skips over the data, rather than updating the variable. </p>

<a name="classefd_1_1_data_stream_1ad88051f7e744abe4da5ad3c20297a63a"></a>
<p class="NDLRefMemberFunction">void  Skip(const <span class="NDLSystemFont"><a href="efd__AssetID.htm">efd::AssetID</a></span>& val) const</p>
<p class="NDLRefMemberDescription">The same as Read, except that it skips over the data, rather than updating the variable. </p>
<a name="stream_support_methods"></a>
<p class="NDLRefHead1">Stream Support Methods</p>


<a name="classefd_1_1_data_stream_1aeaf00d54d4ecf72abaa8ca8503cf24fe"></a>
<p class="NDLRefMemberFunction">void  SetEndian(<span class="NDLSystemFont"><a href="efd__StreamInfo.htm#classefd_1_1_stream_info_1a9e1ab0a45a0f90247c094ef7abde353f">efd::StreamInfo::Endian</a></span> eType)</p>
<p class="NDLRefMemberDescription">Set the endianness for the associated stream. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">eType</span></td>
    <td><span class="NDLSystemFont"><a href="efd__Endian.htm">Endian</a></span> setting for the stream. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_data_stream_1a298b3cec31929af2efa128b390c49d45"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="efd__StreamInfo.htm#classefd_1_1_stream_info_1a9e1ab0a45a0f90247c094ef7abde353f">efd::StreamInfo::Endian</a></span>  GetEndian() const</p>
<p class="NDLRefMemberDescription">Get the endianness for the associated stream. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td><span class="NDLSystemFont"><a href="efd__Endian.htm">Endian</a></span> setting for the stream. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_data_stream_1a75e97e1b29a9e3dcc5f544f48c99eea1"></a>
<p class="NDLRefMemberFunction">void  SetVariant(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span> var)</p>
<p class="NDLRefMemberDescription">Set the variant (state ID) for this stream. </p>
<p class="NDLRefMemberDetailedDescription">Variants are a state enumeration that can be used to differentiate a stream condition (in packing/unpacking).</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">var</span></td>
    <td>Variant setting for the stream. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_data_stream_1a433e4a2ea14438a8c26f09cd5fb0dea9"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>  GetVariant() const</p>
<p class="NDLRefMemberDescription">Get the variant (state ID) for this stream. </p>
<p class="NDLRefMemberDetailedDescription">Variants are a state enumeration that can be used to differentiate a stream condition (in packing/unpacking).</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>Variant setting for the stream. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_data_stream_1a47804d06e3c5b7e4131c50efe8c09e65"></a>
<p class="NDLRefMemberFunction">void  SetVersion(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> version)</p>
<p class="NDLRefMemberDescription">Set the version ID for this stream. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">version</span></td>
    <td>Version ID for this stream. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_data_stream_1aa076a52e141a3751f40eafc59dbf0b46"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetVersion() const</p>
<p class="NDLRefMemberDescription">Get the version ID for this stream. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>Version ID for this stream. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_data_stream_1a74a6476cb525c95249fdd00f19b9cedc"></a>
<p class="NDLRefMemberFunction">void  SetReadOnly() const</p>
<p class="NDLRefMemberDescription">After writing to a stream has completed, it may be <span class="NDLSystemFont"><a href="efd__set.htm">set</a></span> as read-only to prevent any further writes. </p>
<p class="NDLRefMemberDetailedDescription">Once a stream becomes read-only, it can never become writable again. This function is const because read-only status is a mutable property. </p>

<a name="classefd_1_1_data_stream_1a58bbd05a1043a3371cf6d31a45cae67e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsReadOnly() const</p>
<p class="NDLRefMemberDescription">Check if the stream is read-only. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>True if stream is read-only; false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>


<a name="writers"></a>
<p class="NDLRefHead1">Writers</p>


<a name="classefd_1_1_data_stream_1a6ad4c7b6bc314f0067cbaaa83e806c52"></a>
<p class="NDLRefMemberFunction">void  Write(<span class="NDLSystemFont">bool</span> val)</p>
<p class="NDLRefMemberDescription">Write a bool value to the stream. </p>

<a name="classefd_1_1_data_stream_1a20567568165a4bfb93fe7a6e183d80d7"></a>
<p class="NDLRefMemberFunction">void  Write(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a02da74c5f95666d41c684efde9efcd88">efd::SInt8</a></span> val)</p>
<p class="NDLRefMemberDescription">Write a <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a02da74c5f95666d41c684efde9efcd88">efd::SInt8</a></span> value to the stream. </p>

<a name="classefd_1_1_data_stream_1a371907a849fd9cbedc4dd5e26dc98c85"></a>
<p class="NDLRefMemberFunction">void  Write(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a59a3838ab5cdfe87f98f5b8371e4e91d">efd::UInt8</a></span> val)</p>
<p class="NDLRefMemberDescription">Write a <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a59a3838ab5cdfe87f98f5b8371e4e91d">efd::UInt8</a></span> value to the stream. </p>

<a name="classefd_1_1_data_stream_1a9ff8c7cc85da52087b71fb66ade1db7a"></a>
<p class="NDLRefMemberFunction">void  Write(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a78e418e4217f674682471407609a8aa8">efd::SInt16</a></span> val)</p>
<p class="NDLRefMemberDescription">Write a <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a78e418e4217f674682471407609a8aa8">efd::SInt16</a></span> value to the stream. </p>

<a name="classefd_1_1_data_stream_1a4eed33175a55916a729868307c9e2661"></a>
<p class="NDLRefMemberFunction">void  Write(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span> val)</p>
<p class="NDLRefMemberDescription">Write a <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span> value to the stream. </p>

<a name="classefd_1_1_data_stream_1afe981663167108045314486f691008b0"></a>
<p class="NDLRefMemberFunction">void  Write(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span> val)</p>
<p class="NDLRefMemberDescription">Write a <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span> value to the stream. </p>

<a name="classefd_1_1_data_stream_1ab6d4b9705fcfa4aa4b2eaf8479228bbe"></a>
<p class="NDLRefMemberFunction">void  Write(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> val)</p>
<p class="NDLRefMemberDescription">Write a <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> value to the stream. </p>

<a name="classefd_1_1_data_stream_1ac657e07238e9b1918a257c4e304325d3"></a>
<p class="NDLRefMemberFunction">void  Write(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a31570c844c29f8e0f335ac87dcb55401">efd::SInt64</a></span> val)</p>
<p class="NDLRefMemberDescription">Write a <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a31570c844c29f8e0f335ac87dcb55401">efd::SInt64</a></span> value to the stream. </p>

<a name="classefd_1_1_data_stream_1aac8a334bc6b6097876eace3dbfbd7827"></a>
<p class="NDLRefMemberFunction">void  Write(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a845df149ec80fc0bf36f875ece09ef9d">efd::UInt64</a></span> val)</p>
<p class="NDLRefMemberDescription">Write a <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a845df149ec80fc0bf36f875ece09ef9d">efd::UInt64</a></span> value to the stream. </p>

<a name="classefd_1_1_data_stream_1a77c26dea38a4c7b9ca61e48426ed9182"></a>
<p class="NDLRefMemberFunction">void  Write(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> val)</p>
<p class="NDLRefMemberDescription">Write a float value to the stream. </p>

<a name="classefd_1_1_data_stream_1aea1ab475486cb8a2d02ec92cadf3fd8b"></a>
<p class="NDLRefMemberFunction">void  Write(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aff0a9e9ca8001b330091eb01eeb190c2">efd::Float64</a></span> val)</p>
<p class="NDLRefMemberDescription">Write a <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aff0a9e9ca8001b330091eb01eeb190c2">efd::Float64</a></span> value to the stream. </p>

<a name="classefd_1_1_data_stream_1a444c3e8a667e12be86148c5e47c11db8"></a>
<p class="NDLRefMemberFunction">void  Write(const <span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span>& val)</p>
<p class="NDLRefMemberDescription">Write a <span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span> value to the stream. </p>

<a name="classefd_1_1_data_stream_1ad87c3c78d213055e23e66f765621eb89"></a>
<p class="NDLRefMemberFunction">void  Write(const <span class="NDLSystemFont"><a href="efd__utf8char_t.htm">efd::utf8char_t</a></span>& val)</p>
<p class="NDLRefMemberDescription">Write a <span class="NDLSystemFont"><a href="efd__utf8char_t.htm">utf8char_t</a></span> value to the stream. </p>

<a name="classefd_1_1_data_stream_1ab2a110ac7c12bf9341fb30b6f7a826e2"></a>
<p class="NDLRefMemberFunction">void  Write(const <span class="NDLSystemFont"><a href="efd__utf16char_t.htm">efd::utf16char_t</a></span>& val)</p>
<p class="NDLRefMemberDescription">Write a WChar value to the stream. </p>

<a name="classefd_1_1_data_stream_1a16cd4cbd927775e8b3e49122d2167fbe"></a>
<p class="NDLRefMemberFunction">void  Write(const <span class="NDLSystemFont"><a href="efd__IStreamable.htm">IStreamable</a></span>& val)</p>
<p class="NDLRefMemberDescription">Write an <span class="NDLSystemFont"><a href="efd__IStreamable.htm">IStreamable</a></span> value to the stream. </p>

<a name="classefd_1_1_data_stream_1a15f4e632af40204a1397e4b5871d63a5"></a>
<p class="NDLRefMemberFunction">void  Write(const <span class="NDLSystemFont"><a href="efd__Color.htm">efd::Color</a></span>& val)</p>
<p class="NDLRefMemberDescription">Write a bool value to the stream. </p>

<a name="classefd_1_1_data_stream_1af06418f1776ac189e573ed486d3ce376"></a>
<p class="NDLRefMemberFunction">void  Write(const <span class="NDLSystemFont"><a href="efd__ColorA.htm">efd::ColorA</a></span>& val)</p>
<p class="NDLRefMemberDescription">Write a bool value to the stream. </p>

<a name="classefd_1_1_data_stream_1a3b915e6617db822cff3bdd1f36364162"></a>
<p class="NDLRefMemberFunction">void  Write(const <span class="NDLSystemFont"><a href="efd__Matrix3.htm">efd::Matrix3</a></span>& val)</p>
<p class="NDLRefMemberDescription">Write a bool value to the stream. </p>

<a name="classefd_1_1_data_stream_1af508e227e866679b6df0cd7d9f44eb86"></a>
<p class="NDLRefMemberFunction">void  Write(const <span class="NDLSystemFont"><a href="efd__Point2.htm">efd::Point2</a></span>& val)</p>
<p class="NDLRefMemberDescription">Write a bool value to the stream. </p>

<a name="classefd_1_1_data_stream_1a02324586c0b2b2673b9c745b39a736dd"></a>
<p class="NDLRefMemberFunction">void  Write(const <span class="NDLSystemFont"><a href="efd__Point3.htm">efd::Point3</a></span>& val)</p>
<p class="NDLRefMemberDescription">Write a bool value to the stream. </p>

<a name="classefd_1_1_data_stream_1affa71a00cf6abe2a66d2cd3a2fbc05b8"></a>
<p class="NDLRefMemberFunction">void  Write(const <span class="NDLSystemFont"><a href="efd__Point4.htm">efd::Point4</a></span>& val)</p>
<p class="NDLRefMemberDescription">Write a bool value to the stream. </p>

<a name="classefd_1_1_data_stream_1a78316ae8aad6f58432705f054d607412"></a>
<p class="NDLRefMemberFunction">void  Write(const <span class="NDLSystemFont"><a href="efd__Quaternion.htm">efd::Quaternion</a></span>& val)</p>
<p class="NDLRefMemberDescription">Write a bool value to the stream. </p>

<a name="classefd_1_1_data_stream_1abe22a17f3d24659af130f6adba536bb0"></a>
<p class="NDLRefMemberFunction">void  Write(const <span class="NDLSystemFont"><a href="efd__ID128.htm">efd::ID128</a></span>& val)</p>
<p class="NDLRefMemberDescription">Write a bool value to the stream. </p>

<a name="classefd_1_1_data_stream_1a67ab13423eb591bc26e7fbdba292d833"></a>
<p class="NDLRefMemberFunction">void  Write(const <span class="NDLSystemFont"><a href="efd__AssetID.htm">efd::AssetID</a></span>& val)</p>
<p class="NDLRefMemberDescription">Write a bool value to the stream. </p>

<a name="classefd_1_1_data_stream_1a58397b8d2b5645c80d969ad0deeb85c0"></a>
<p class="NDLRefMemberFunction">void  Write(const <span class="NDLSystemFont">DataStream</span>& i_source)</p>
<p class="NDLRefMemberDescription">Include an <span class="NDLSystemFont">DataStream</span> value to stream (stream into this stream). </p>
<p class="NDLRefMemberDetailedDescription">As a side effect, the source stream will have <span class="NDLSystemFont"><a href="efd__DataStream.htm#classefd_1_1_data_stream_1a74a6476cb525c95249fdd00f19b9cedc">SetReadOnly()</a></span> called on it. This Write method will stream the entire stream, regardless of considerations such as the current offset. The size of the buffer constitutes the first data streamed, followed by the raw data.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_source</span></td>
    <td><span class="NDLSystemFont">DataStream</span> to be included in this stream. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_data_stream_1a61378d2a51fb6bf93c21200e6d1a9c30"></a>
<p class="NDLRefMemberFunction">void  Write(<br/>const <span class="NDLSystemFont">DataStream</span>& val, <br/>size_t offset, <br/>size_t size)</p>
<p class="NDLRefMemberDescription">A version of data-stream writing that allows sub-sections of the buffer to be written. </p>
<p class="NDLRefMemberDetailedDescription">This method is the only way to write less than all of the data stream.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">val</span></td>
    <td><span class="NDLSystemFont">DataStream</span> to be included in this stream. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">offset</span></td>
    <td>Offset into val to start pulling data. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">size</span></td>
    <td>Size, in bytes, of the block to copy. </td>
</tr>

        </tbody>
    </table>
</div>


 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
