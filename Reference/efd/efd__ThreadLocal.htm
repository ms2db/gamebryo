<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::ThreadLocal</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::ThreadLocal</p>


<p class="NDLRefHeaderFile">&lt;ThreadLocal.h&gt;</p>


<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">A cross platform template class to support thread local storage. </p>
<p class="NDLNormal">Normally all threads receive memory from the same allocation pool. Stack allocated memory is isolated to the containing instance. Global or static class member data, however, is associated with the class and share a common memory location across instances. In a multithreaded application this data can be accessed from multiple threads. Access to this data across multiple threads must be controlled in a thread-safe manner.</p>
<p class="NDLNormal">There are times when its desirable to access data throughout a thread without having to worry about synchronization issues.</p>
<p class="NDLNormal"><span class="NDLSystemFont"><a href="efd__Thread.htm">Thread</a></span> local storage provides a way to share data across an entire thread in a thread-safe manner. Static or global variables that use thread local storage are unique to the containing thread. TLS static or global variables are considered thread safe as each thread has its own unique copy of the data.</p>
<p class="NDLNormal">An example declaring a static thread local variable of type MyClass: 
<pre>
    static efd::ThreadLocal&lt;MyClass&gt; ms_threadLocalMyClass;
     </pre>
</p>
<p class="NDLNormal">Warning: Static initialization to a non zero value is not supported. </p>

<a name="construction_and_destruction"></a>
<p class="NDLRefHead1">Construction and Destruction</p>


<a name="classefd_1_1_thread_local_1ae6f774a3c7de589fc2b1e14131555c01"></a>
<p class="NDLRefMemberFunction">ThreadLocal()</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_thread_local_1a850e70d219a85aded99a5a87f8357c9d"></a>
<p class="NDLRefMemberFunction">ThreadLocal(const ValueType& object)</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_thread_local_1a70a09291dc0fe24138ee453113bedace"></a>
<p class="NDLRefMemberFunction">~ThreadLocal()</p>
<p class="NDLRefMemberFunction"></p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classefd_1_1_thread_local_1ae7fde3724d7948fef9e77063b894d85c"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsValid() const</p>
<p class="NDLRefMemberDescription">Return true if this instance is valid thread local storage. </p>
<p class="NDLRefMemberDetailedDescription">The meaning of 'valid' is platform specific. </p>

<a name="classefd_1_1_thread_local_1a4a14cec641d8b9cfd7601e07c21a46ae"></a>
<p class="NDLRefMemberFunction">operator ValueType() const</p>
<p class="NDLRefMemberDescription">Implicit conversion to T. </p>

<a name="classefd_1_1_thread_local_1a48495463059671b9eccf242f46f06ead"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">ThreadLocal</span>&  operator=(const ValueType& object)</p>
<p class="NDLRefMemberDescription">Assignment operator. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
