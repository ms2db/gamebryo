<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::FixedString</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::FixedString</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="efd__MemObject.htm">efd::MemObject</a></span></p>


<p class="NDLRefHeaderFile">&lt;FixedString.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classefd_1_1_fixed_string.gif" alt="Inheritance graph for efd::FixedString"/>
  <p class="FigureCaption">Inheritance graph for efd::FixedString</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">This class encapsulates a memory efficient implementation of reference-counted ASCII strings. </p>
<p class="NDLNormal">Additionally, FixedStrings have the property that all strings with the same value point to the same efd::Character buffer in memory. This capability allows for fast comparison between FixedStrings. FixedStrings are not meant to be changed once created. Please see the notes section for details on streaming and using FixedStrings in function calls.</p>
<p class="NDLNormal">
<p class="NDLNormal">Streaming - FixedStrings work slightly differently from normal values in the streaming process. NiObject-derived classes that wish to save FixedStrings will first need to register the strings using the <span class="NDLSystemFont"><a href="../NiMain/NiStream.htm">NiStream::RegisterFixedString</a></span> method in their NiObject::RegisterStreamables implementation. In the NiObject::SaveBinary implementation, <span class="NDLSystemFont"><a href="../NiMain/NiStream.htm">NiStream::SaveFixedString</a></span> will need to be called. Upon load, there is no need for registration and therefore only <span class="NDLSystemFont"><a href="../NiMain/NiStream.htm">NiStream::LoadFixedString</a></span> will need to be called.</p>
<p class="NDLNormal">Usage In Function Calls - Passing FixedStrings directly down the <span class="NDLSystemFont"><a href="efd__stack.htm">stack</a></span> is quite expensive because a new <span class="NDLSystemFont">FixedString</span> is created every function call. New strings must increment and decrement the reference count, which means pointer de-referencing and cache misses. Instead of writing a function like this: void SetName(FixedString name) Write a function like this: void SetName(const FixedString& name) This subtle difference allows the compiler to pass the <span class="NDLSystemFont">FixedString</span> down the <span class="NDLSystemFont"><a href="efd__stack.htm">stack</a></span> without creating a new instance every call. </p></p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classefd_1_1_fixed_string_1a8e205b4971e925e868c04fd81643c3ff"></a>
<p class="NDLRefMemberFunction">FixedString()</p>
<p class="NDLRefMemberDescription">@ name Construction and Destruction </p>
<p class="NDLRefMemberDetailedDescription">Create a string with a value of NULL. </p>

<a name="classefd_1_1_fixed_string_1a5c89681678f2ee530cf5cd6cb297a69f"></a>
<p class="NDLRefMemberFunction">FixedString(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pCString)</p>
<p class="NDLRefMemberDescription">Create a string matching the value of pCString. </p>
<p class="NDLRefMemberDetailedDescription">If the string already exists in memory, increment its reference count. If the string does not already exist in memory, create a new one and <span class="NDLSystemFont"><a href="efd__set.htm">set</a></span> its reference count to one. </p>

<a name="classefd_1_1_fixed_string_1a46b82be005da3e2f0b6cc00ef387c160"></a>
<p class="NDLRefMemberFunction">FixedString(const <span class="NDLSystemFont">FixedString</span>& string)</p>
<p class="NDLRefMemberDescription">Create a string pointing to the same data as string and incrementing its reference count. </p>

<a name="classefd_1_1_fixed_string_1a56d45287d2e93fe7004354268183c20c"></a>
<p class="NDLRefMemberFunction">~FixedString()</p>
<p class="NDLRefMemberDescription">@ name Construction and Destruction </p>
<p class="NDLRefMemberDetailedDescription">Create a string with a value of NULL. </p>

<a name="classefd_1_1_fixed_string_1ae9a08f1db690fbd85b01b28417c865a0"></a>
<p class="NDLRefMemberFunction">friend <span class="NDLSystemFont">bool</span>  operator==(<br/>const <span class="NDLSystemFont">FixedString</span>& s1, <br/>const <span class="NDLSystemFont">FixedString</span>& s2)</p>
<p class="NDLRefMemberDescription">Helper functions that assist in comparing strings. </p>
<p class="NDLRefMemberDetailedDescription"><span class="NDLSystemFont">FixedString</span> to <span class="NDLSystemFont">FixedString</span> comparison is very fast since it is a simple pointer value comparison and does not need to de-reference the efd::Character array. <span class="NDLSystemFont">FixedString</span> to efd::Character array comparisons have been accelerated for the case where the efd::Character array is really pointing to an <span class="NDLSystemFont">FixedString</span>. </p>

<a name="classefd_1_1_fixed_string_1a4db7be56ff2f0dabeaf2b53ddcad962f"></a>
<p class="NDLRefMemberFunction">friend <span class="NDLSystemFont">bool</span>  operator!=(<br/>const <span class="NDLSystemFont">FixedString</span>& s1, <br/>const <span class="NDLSystemFont">FixedString</span>& s2)</p>
<p class="NDLRefMemberDescription">@ name Construction and Destruction </p>
<p class="NDLRefMemberDetailedDescription">Create a string with a value of NULL. </p>

<a name="classefd_1_1_fixed_string_1a60efe01d788b0d22698d5cfca4e8e87f"></a>
<p class="NDLRefMemberFunction">friend <span class="NDLSystemFont">bool</span>  operator==(<br/>const <span class="NDLSystemFont">FixedString</span>& s1, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* s2)</p>
<p class="NDLRefMemberDescription">@ name Construction and Destruction </p>
<p class="NDLRefMemberDetailedDescription">Create a string with a value of NULL. </p>

<a name="classefd_1_1_fixed_string_1a4a068934b7ccdf09c1f62437be7976c2"></a>
<p class="NDLRefMemberFunction">friend <span class="NDLSystemFont">bool</span>  operator!=(<br/>const <span class="NDLSystemFont">FixedString</span>& s1, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* s2)</p>
<p class="NDLRefMemberDescription">@ name Construction and Destruction </p>
<p class="NDLRefMemberDetailedDescription">Create a string with a value of NULL. </p>

<a name="classefd_1_1_fixed_string_1ac160a2e733da91d94cd29a2e58bc4bc9"></a>
<p class="NDLRefMemberFunction">friend <span class="NDLSystemFont">bool</span>  operator==(<br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* s1, <br/>const <span class="NDLSystemFont">FixedString</span>& s2)</p>
<p class="NDLRefMemberDescription">@ name Construction and Destruction </p>
<p class="NDLRefMemberDetailedDescription">Create a string with a value of NULL. </p>

<a name="classefd_1_1_fixed_string_1a168a1523c2be830a390e9204d2420839"></a>
<p class="NDLRefMemberFunction">friend <span class="NDLSystemFont">bool</span>  operator!=(<br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* s1, <br/>const <span class="NDLSystemFont">FixedString</span>& s2)</p>
<p class="NDLRefMemberDescription">@ name Construction and Destruction </p>
<p class="NDLRefMemberDetailedDescription">Create a string with a value of NULL. </p>

<a name="classefd_1_1_fixed_string_1a4c9c33829730dd221ec8b786b78d278d"></a>
<p class="NDLRefMemberFunction">operator const efd::Char *() const</p>
<p class="NDLRefMemberDescription">Access the internal efd::Character data of this string. </p>
<p class="NDLRefMemberDetailedDescription">The return value is constant to prevent data manipulation. </p>

<a name="classefd_1_1_fixed_string_1aab4bb404fa6aeaf4916cc9e0b542749a"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  Exists() const</p>
<p class="NDLRefMemberDescription">Determine whether or not this string is NULL. </p>

<a name="classefd_1_1_fixed_string_1a7732115abefa7b0db0cac92c40e95a4f"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">FixedString</span>&  operator=(const <span class="NDLSystemFont">FixedString</span>& string)</p>
<p class="NDLRefMemberDescription">Create a string pointing to the same data as string and incrementing its reference count. </p>
<p class="NDLRefMemberDetailedDescription">Decrement the current value of the string, deleting it if the reference count equals zero. </p>

<a name="classefd_1_1_fixed_string_1abd9865ba6ffa9c5c30eb0bad88e18291"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">FixedString</span>&  operator=(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pCString)</p>
<p class="NDLRefMemberDescription">Create a string matching the value of pCString. </p>
<p class="NDLRefMemberDetailedDescription">If the string already exists in memory, increment its reference count. If the string does not already exist in memory, create a new one and <span class="NDLSystemFont"><a href="efd__set.htm">set</a></span> its reference count to one. Decrement the current value of the <span class="NDLSystemFont">FixedString</span>, deleting it if the reference count equals zero. </p>

<a name="classefd_1_1_fixed_string_1a7e44a9ee4c5293a1702f25721b24af3f"></a>
<p class="NDLRefMemberFunction">size_t  GetLength() const</p>
<p class="NDLRefMemberDescription">Return the length of the internal efd::Character data. </p>

<a name="classefd_1_1_fixed_string_1ac22b7ac708c906212ce954d974b6ad21"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetRefCount() const</p>
<p class="NDLRefMemberDescription">Return the current reference count of the efd::Character data. </p>

<a name="classefd_1_1_fixed_string_1abe880b7ccc6659fe98fa4dcb056a1643"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  Equals(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pCStr) const</p>
<p class="NDLRefMemberDescription">Helper functions for comparing strings with and without case sensitivity. </p>

<a name="classefd_1_1_fixed_string_1ae5873248d656aa8743891087dfd42c49"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  EqualsNoCase(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pCStr) const</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_fixed_string_1ae9d13b14ccb5dc1e86b2fdb16fedbeb0"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  Contains(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pCStr) const</p>
<p class="NDLRefMemberDescription">Helper functions for determining if a string is a substring of this fixed string with and without case sensitivity. </p>

<a name="classefd_1_1_fixed_string_1a34815a86f87fefc042de47627ac70e01"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  ContainsNoCase(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pCStr) const</p>
<p class="NDLRefMemberFunction"></p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
