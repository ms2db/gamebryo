<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::LockFreeStack</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::LockFreeStack</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="efd__MemObject.htm">efd::MemObject</a></span></p>


<p class="NDLRefHeaderFile">&lt;LockFreeStack.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classefd_1_1_lock_free_stack.gif" alt="Inheritance graph for efd::LockFreeStack"/>
  <p class="FigureCaption">Inheritance graph for efd::LockFreeStack</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">This is an implementation of a single-reader, single-writer lock-free <span class="NDLSystemFont"><a href="efd__stack.htm">stack</a></span>. </p>
<p class="NDLNormal">Single-reader: Only one thread (the consumer thread) may be issuing calls to Pop at any given time. Single-writer: Only one thread (the producer thread) may be issuing calls to Push at any given time.</p>
<p class="NDLNormal">The producer and consumer threads can/should be different. A single thread may act as both producer and consumer only if there are no other threads producing or consuming at that time (the key is that there should never be multiple producers or multiple consumers).</p>
<p class="NDLNormal">These requirements are not internally enforced (if ignored, the container will become inconsistent). For example, it is up to the caller to ensure that only one thread is acting as a producer at any given moment.</p>
<p class="NDLNormal">Requirements on T (the type of values stored in the <span class="NDLSystemFont"><a href="efd__stack.htm">stack</a></span>):</p>
<ul>
<li>T must have an accessible default constructor (i.e., T value = T(); must be a valid statement).</li>
<li>T must have an accessible assignment-operator (which will be invoked when objects are pushed into the <span class="NDLSystemFont"><a href="efd__stack.htm">stack</a></span>, or popped from the <span class="NDLSystemFont"><a href="efd__stack.htm">stack</a></span>) These are naturally satisified by pointer and integral types.</li></ul>
<p class="NDLNormal">The constructor takes an initial size reservation parameter to prevent per-operation memory allocation, and as long as the working size of the <span class="NDLSystemFont"><a href="efd__stack.htm">stack</a></span> is below the initial size, no operation on the <span class="NDLSystemFont"><a href="efd__stack.htm">stack</a></span> will force a context switch. </p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classefd_1_1_lock_free_stack_1a469c7dba5990510130fc544142aea134"></a>
<p class="NDLRefMemberFunction">LockFreeStack(size_t initialSize = 0)</p>
<p class="NDLRefMemberDescription">Constructs a single-reader, single-writer lock-free <span class="NDLSystemFont"><a href="efd__stack.htm">stack</a></span>. </p>
<p class="NDLRefMemberDetailedDescription">Since allocations could cause a temporary lock inside of the memory manager, a warning will be emitted by the destructor in debug builds if the initialSize parameter was too small. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">initialSize</span></td>
    <td>The number of nodes to preallocate. If too many items are pushed in the <span class="NDLSystemFont"><a href="efd__stack.htm">stack</a></span>, it will grow by dynamically allocating additional nodes, so it is a good idea to conservatively choose a large-enough initialSize. As long as the working size of the <span class="NDLSystemFont"><a href="efd__stack.htm">stack</a></span> is below the initial size, no operation on this <span class="NDLSystemFont"><a href="efd__stack.htm">stack</a></span> will force a context switch.</td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_lock_free_stack_1a2f15450c7e2391483ec5bf6618e22da1"></a>
<p class="NDLRefMemberFunction">~LockFreeStack()</p>
<p class="NDLRefMemberDescription">Destructs a lock-free <span class="NDLSystemFont"><a href="efd__stack.htm">stack</a></span>. </p>
<p class="NDLRefMemberDetailedDescription">The caller is responsible for ensuring that there are no threads currently pushing to or popping from the <span class="NDLSystemFont"><a href="efd__stack.htm">stack</a></span>. </p>

<a name="classefd_1_1_lock_free_stack_1a3af19ae163ba12a43ce7274900b89570"></a>
<p class="NDLRefMemberFunction">void  Push(const T& newValue)</p>
<p class="NDLRefMemberDescription">Pushes a node on to the <span class="NDLSystemFont"><a href="efd__stack.htm">stack</a></span>. </p>

<a name="classefd_1_1_lock_free_stack_1a90e5c466359fccf157c540e8c1aa6a60"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  Pop(T& outValue)</p>
<p class="NDLRefMemberDescription">Pops a value from the <span class="NDLSystemFont"><a href="efd__stack.htm">stack</a></span> if the <span class="NDLSystemFont"><a href="efd__stack.htm">stack</a></span> is not empty. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">outValue</span></td>
    <td>The value removed from the <span class="NDLSystemFont"><a href="efd__stack.htm">stack</a></span>. Only valid if the method returns True. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>bool True if a node was consumed (outValue is valid). False if the <span class="NDLSystemFont"><a href="efd__stack.htm">stack</a></span> was empty. </td>
</tr>

        </tbody>
    </table>
</div>


 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
