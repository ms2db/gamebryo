<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::IAssetFactory</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::IAssetFactory</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="efd__IBase.htm">efd::IBase</a></span></p>


<p class="NDLRefHeaderFile">&lt;IAssetFactory.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classefd_1_1_i_asset_factory.gif" alt="Inheritance graph for efd::IAssetFactory"/>
  <p class="FigureCaption">Inheritance graph for efd::IAssetFactory</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">The interface from which all Asset Factories are derived. </p>
<p class="NDLNormal">Asset factories are used with the egf::AssetManager service. </p>

<a name="public_types"></a>
<p class="NDLRefHead1">Public Types</p>
<a name="classefd_1_1_i_asset_factory_1a0724c480863f94648ecba9d81c98b262"></a>
<p class=NDLRefHead2>efd::IAssetFactory::LoadStatus</p>




<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">LOAD_COMPLETE</span></td>
    <td>The load has complete processing, and the response is available. The response may contain an error condition, but it is ready to send. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">LOAD_RUNNING</span></td>
    <td>The load is partially complete but did enough work to preclude another loader from running in the same tick. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">LOAD_BLOCKED</span></td>
    <td>The load is blocked on something and did no work. </td>
</tr>

  </tbody>
</table>
</div>

<a name="classefd_1_1_i_asset_factory_1a2f4ee7b12ae60252047e3c5e5c11bac4"></a>
<p class=NDLRefHead2>efd::IAssetFactory::ThreadSafetyDescription</p>




<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">LOADER_FG_ONLY</span></td>
    <td>The loader may only execute in the foreground thread. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">LOADER_BG_ONLY</span></td>
    <td>The loader may only execute in the background thread. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">LOADER_FG_AND_BG</span></td>
    <td>The loader may execute in the foreground or the background, simultaneously. </td>
</tr>

  </tbody>
</table>
</div>


<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classefd_1_1_i_asset_factory_1a855f2f166c462c650807949263be5c40"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="efd__IAssetFactory.htm#classefd_1_1_i_asset_factory_1a0724c480863f94648ecba9d81c98b262">LoadStatus</a></span>  LoadAsset(<br/><span class="NDLSystemFont"><a href="efd__AssetFactoryManager.htm">AssetFactoryManager</a></span>* pFactoryManager, <br/>const <span class="NDLSystemFont"><a href="efd__AssetLoadRequest.htm">AssetLoadRequest</a></span>* pRequest, <br/><span class="NDLSystemFont"><a href="efd__SmartPointer.htm">SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="efd__AssetLoadResponse.htm">AssetLoadResponse</a></span>&gt;& o_spResponse) = 0</p>
<p class="NDLRefMemberDescription">The function to implement loading an asset from media. </p>
<p class="NDLRefMemberDetailedDescription">All derived classes must implement this function to load an asset from disk into a newly created <span class="NDLSystemFont"><a href="efd__AssetLoadResponse.htm">AssetLoadResponse</a></span> message. In typical usage, the <span class="NDLSystemFont"><a href="efd__AssetLoadResponse.htm">AssetLoadResponse</a></span> message is likely to be a derived class that includes asset-specific data handling. This function may be invoked in either of the threads allowed by the the <span class="NDLSystemFont"><a href="efd__IAssetFactory.htm#classefd_1_1_i_asset_factory_1a649fac60ed33843faa76dce578f3a8f5">GetThreadSafety()</a></span> method.</p>
<p class="NDLRefMemberDetailedDescription">The message that is returned should be allocated using EE_NEW. Upon return the message is owned by the system and application level code must not delete it.</p>
<p class="NDLRefMemberDetailedDescription">A message should be returned even on error, with the error code in the message <span class="NDLSystemFont"><a href="efd__set.htm">set</a></span> appropriately.</p>
<p class="NDLRefMemberDetailedDescription">Loads are asynchronous. The return value to LoadAsset indicates that current state of the request. LOAD_RUNNING indicates the load is in progress and has not yet completed. LOAD_COMPLETE indicates the load has completed and the response is properly allocated and <span class="NDLSystemFont"><a href="efd__set.htm">set</a></span>. LOAD_FAILED indicates the load failed and the response is properly allocated and <span class="NDLSystemFont"><a href="efd__set.htm">set</a></span>.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pFactoryManager</span></td>
    <td>The asset factory making the request. Any asset locates done by the loader must go through this manager. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pRequest</span></td>
    <td>An instance of a load request. This is owned by the caller. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">o_spResponse</span></td>
    <td>reference-to-SmartPointer to the response. This is allocated by the loader. Ownership transfers to the caller through the smart pointer reference. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_asset_factory_1a649fac60ed33843faa76dce578f3a8f5"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="efd__IAssetFactory.htm#classefd_1_1_i_asset_factory_1a2f4ee7b12ae60252047e3c5e5c11bac4">ThreadSafetyDescription</a></span>  GetThreadSafety() const = 0</p>
<p class="NDLRefMemberDescription">Return the thread safety description for this loader. </p>
<p class="NDLRefMemberDetailedDescription">Any given loader may be thread safe in a variety of ways, or in no way at all. The implementation must return the appropriate ThreadSafetyDescription. If in doubt, use LOADER_FG_ONLY and the loader will only be invoked in the foreground thread. </p>

<a name="classefd_1_1_i_asset_factory_1a671fd5d96db07c5d150617b1d3cf9d5b"></a>
<p class="NDLRefMemberFunction">virtual void  HandleAssetLocate(<br/>const <span class="NDLSystemFont"><a href="efd__AssetLocatorResponse.htm">efd::AssetLocatorResponse</a></span>* pResponse, <br/><span class="NDLSystemFont"><a href="efd__Category.htm">efd::Category</a></span> targetCategory)</p>
<p class="NDLRefMemberDescription">The function to implement to received asset locate responses. </p>
<p class="NDLRefMemberDetailedDescription">A factory may need to locate other assets as it tries to create the requested asset. It can call <span class="NDLSystemFont"><a href="efd__AssetFactoryManager.htm#classefd_1_1_asset_factory_manager_1a241d9645098c9961118e4af4454dae00">AssetFactoryManager::AssetLocate</a></span> function to locate these assets. The <span class="NDLSystemFont"><a href="efd__AssetFactoryManager.htm">AssetFactoryManager</a></span> will forward the <span class="NDLSystemFont"><a href="efd__AssetLocatorResponse.htm">AssetLocatorResponse</a></span> message to this function.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pResponse</span></td>
    <td><span class="NDLSystemFont"><a href="efd__AssetLocatorResponse.htm">AssetLocatorResponse</a></span> instance sent by the <span class="NDLSystemFont"><a href="efd__AssetLocatorService.htm">AssetLocatorService</a></span>. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">targetCategory</span></td>
    <td><span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span> the response is sent to. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_asset_factory_1ab6ecfbeafe6f4e6ffa94914bffb915fc"></a>
<p class="NDLRefMemberFunction">virtual void  Shutdown()</p>
<p class="NDLRefMemberDescription">Implement this function to receive a shutdown command in the background. </p>
<p class="NDLRefMemberDetailedDescription">A factory may need to clean up internal state before destruction. Implement this function to clean up these resources in the background thread.</p>
<p class="NDLRefMemberDetailedDescription">The default implementation does nothing. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
