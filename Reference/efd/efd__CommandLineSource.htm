<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::CommandLineSource</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::CommandLineSource</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="efd__ConfigSource.htm">efd::ConfigSource</a></span></p>


<p class="NDLRefHeaderFile">&lt;ConfigSource.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classefd_1_1_command_line_source.gif" alt="Inheritance graph for efd::CommandLineSource"/>
  <p class="FigureCaption">Inheritance graph for efd::CommandLineSource</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">Class for processing command-line parameters to the application. </p>
<p class="NDLNormal">It automatically finds the command-line parameters passed to the application and processes them.</p>
<p class="NDLNormal">Parameters passed on the command-line must be in the following form and surrounded by quotes if they contain spaces:</p>
<p class="NDLNormal">
<pre>
        Name=Value
         </pre>
</p>
<p class="NDLNormal">For a link:</p>
<p class="NDLNormal">
<pre>
        LinkName&gt;NameToLinkTo
         </pre>
</p>
<p class="NDLNormal">To load an additional configuration file (other the default Config.ini), you can use the plus symbol (+) with the name and path of the file to load. Optionally, you may include a section/subsection specifier to the left of the plus sign to load all contents of the file as children of that section. Whenever a file is loaded via the plus operator (+), the contents of that file are loaded at a lower priority, so that items in the file or command-line that loaded the file take precedent over the other values.</p>
<p class="NDLNormal">
<pre>
        +Path\And\Name\Of\Additional\Config\File\To\Load
        Section.Subsection+Path\And\Name\Of\Additional\Config\File\To\Load\As\Children
         </pre>
</p>
<p class="NDLNormal">To Add/Update values/links in sections use dots to separate the sections in the forms:</p>
<p class="NDLNormal">
<pre>
        Section.SubSection.SubSubSection.Name=Value
        Section.SubSection.SubSubSection.LinkName&gt;Section.SubSection.NameToLinkTo
         </pre>
</p>
<p class="NDLNormal">If name/value pairs have spaces in them, the entire name/value pair must be enclosed in quotes so that they will appear as a single command-line parameter.</p>
<p class="NDLNormal">All command-line parameters that do not conform to the name/value or link syntax automatically will be added to the default section (kDefaultSection) for the command-line source, and will be assigned the name kParam_name with the parameter number appended to it. This approach enables the configuration manager to handle current applications parameters in a backwards compatible manner. One exception to the naming convention is the application name, which is always the first parameter to a program. It will be added to the default section but for convenience be assigned the name kExeName.</p>
<p class="NDLNormal">So the following example command-line:</p>
<p class="NDLNormal">
<pre>
        c:\Apps\MyApp.exe NotANameVal Repeats=5 &quot;Output=Say Hello&quot; Addresses.Mine=127.0.0.1
            +AnotherConfig.ini MyConfig+MyConfig.ini
         </pre>
</p>
<p class="NDLNormal">would be equivalent to the following configuration INI <span class="NDLSystemFont"><a href="efd__File.htm">File</a></span>:</p>
<p class="NDLNormal">
<pre>
        ;Whatever is in the file AnotherConfig.ini
        Repeats=5
        Output=Say Hello
        [CommandLineSource]
        ExeName=c:\Apps\MyApp.exe
        Param1=NotANameVal
        [Addresses]
        Mine=127.0.0.1
        [MyConfig]
        ;What ever is in the file MyConfig.ini
         </pre>
</p>

<a name="public_static_attributes"></a>
<p class="NDLRefHead1">Public Static Attributes</p>


<a name="classefd_1_1_command_line_source_1a32d7b380eb58f5572b1e4de0e08d9366"></a>
<p class="NDLRefMemberFunction">static const char*  kDefaultSection</p>
<p class="NDLRefMemberDescription">Default section name for storing command-line parameters that do not conform to the name/value syntax. </p>

<a name="classefd_1_1_command_line_source_1a37d1f7531fb861dcbe07c00e5b7acd1f"></a>
<p class="NDLRefMemberFunction">static const char*  kParam_name</p>
<p class="NDLRefMemberDescription">Prefix of the name assigned to parameters that do not conform to the name/value syntax. </p>

<a name="classefd_1_1_command_line_source_1a526d1d0d34d44ae574ec8e4ba4f5c80a"></a>
<p class="NDLRefMemberFunction">static const char*  kExeName</p>
<p class="NDLRefMemberDescription">Name assigned to the application name parameter. </p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classefd_1_1_command_line_source_1a8040588b77f08d044b77575b4e964527"></a>
<p class="NDLRefMemberFunction">CommandLineSource(<br/>int argcInit, <br/>char ** argvInit)</p>
<p class="NDLRefMemberDescription">Command-line source constructor. </p>

<a name="classefd_1_1_command_line_source_1adf049e61479decba29c134b4ffaece7a"></a>
<p class="NDLRefMemberFunction">virtual ~CommandLineSource()</p>
<p class="NDLRefMemberDescription">Virtual destructor. </p>

<a name="classefd_1_1_command_line_source_1a980339c429c9602627c2c1e5be0277c8"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  ReadConfiguration(<span class="NDLSystemFont"><a href="efd__IConfigManager.htm">IConfigManager</a></span>* pManager)</p>
<p class="NDLRefMemberDescription">Reads the source data and add or modifies sections and name/value pairs in the root hierarchy. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pManager</span></td>
    <td>Pointer to the configuration manager. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the configuration data was read correctly. </td>
</tr>

        </tbody>
    </table>
</div>


 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
