<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::Point3</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::Point3</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="efd__MemObject.htm">efd::MemObject</a></span></p>


<p class="NDLRefHeaderFile">&lt;Point3.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classefd_1_1_point3.gif" alt="Inheritance graph for efd::Point3"/>
  <p class="FigureCaption">Inheritance graph for efd::Point3</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">This is a basic 3D point class. </p>
<p class="NDLNormal">The only data members are x, y, and z, which are both declared as public 32-bit floating point values. This arrangement enables them to be accessed using structure-style notation (i.e. value = vector.x). </p>

<a name="friend_members"></a>
<p class="NDLRefHead1">Friend Members</p>


<a name="classefd_1_1_point3_1ad555b3c2ab7836d34d8f3d87eec3e120"></a>
<p class="NDLRefMemberFunction">friend <span class="NDLSystemFont">Point3</span>  operator*(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> scalar, <br/>const <span class="NDLSystemFont">Point3</span>& pt)</p>
<p class="NDLRefMemberDescription">scalar multiplication operator. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">scalar</span></td>
    <td>The scalar value.. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pt</span></td>
    <td>The point with which to scale. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A newly constructed point containing the scaled version of the specified point. </td>
</tr>

        </tbody>
    </table>
</div>


<a name="public_attributes"></a>
<p class="NDLRefHead1">Public Attributes</p>


<a name="classefd_1_1_point3_1a659acaa710bdab790689a89621efee09"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  x</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_point3_1a15ea173d1cee0bec117ee6f6e225bfca"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  y</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_point3_1afe710e44a9e2ad301fca9f4e94682337"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  z</p>
<p class="NDLRefMemberFunction"></p>
<a name="public_static_attributes"></a>
<p class="NDLRefHead1">Public Static Attributes</p>


<a name="classefd_1_1_point3_1aada5417fd49da6be831ab48ce49c645b"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont">Point3</span>  ZERO</p>
<p class="NDLRefMemberDescription">Convenience static 3D point for a zero <span class="NDLSystemFont"><a href="efd__vector.htm">vector</a></span>. </p>

<a name="classefd_1_1_point3_1ac3c7af6569d83feb1e90ce0ea67ea206"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont">Point3</span>  UNIT_X</p>
<p class="NDLRefMemberDescription">Convenience static 3D point for an x-axis unit <span class="NDLSystemFont"><a href="efd__vector.htm">vector</a></span> (1,0,0). </p>

<a name="classefd_1_1_point3_1a5c19da28311a4e8cce897a4b75776476"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont">Point3</span>  UNIT_Y</p>
<p class="NDLRefMemberDescription">Convenience static 3D point for a y-axis unit <span class="NDLSystemFont"><a href="efd__vector.htm">vector</a></span> (0,1,0). </p>

<a name="classefd_1_1_point3_1a9d75635d653c1bf33f2474c0469907af"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont">Point3</span>  UNIT_Z</p>
<p class="NDLRefMemberDescription">Convenience static 3D point for a z-axis unit <span class="NDLSystemFont"><a href="efd__vector.htm">vector</a></span> (0,0,1). </p>

<a name="classefd_1_1_point3_1a99157cbde0671ca2dfc81a41e44f001e"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont">Point3</span>  UNIT_ALL</p>
<p class="NDLRefMemberDescription">Convenience static 3D point for a unit <span class="NDLSystemFont"><a href="efd__vector.htm">vector</a></span> (1,1,1). </p>
<a name="public_static_methods"></a>
<p class="NDLRefHead1">Public Static Methods</p>


<a name="classefd_1_1_point3_1afa0153c48d5fc0960d6a92c22ad8531b"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">Point3</span>  ComponentProduct(<br/>const <span class="NDLSystemFont">Point3</span>& p0, <br/>const <span class="NDLSystemFont">Point3</span>& p1)</p>
<p class="NDLRefMemberDescription">Performs a component wise multiplication of the two specified points. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">p0</span></td>
    <td>The first point. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">p1</span></td>
    <td>The second point. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The result of the first point multiplied by the second point in a component wise fashion. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_point3_1a4ac659964fb7ba14a030db103c056af1"></a>
<p class="NDLRefMemberFunction">static void  _SDMInit()</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_point3_1a6c18b195e2494937c52449f52a1ffaff"></a>
<p class="NDLRefMemberFunction">static void  _SDMShutdown()</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_point3_1a9a69f5171fa33cd0e62c544dd69f7553"></a>
<p class="NDLRefMemberFunction">static void  UnitizeVectors(<br/><span class="NDLSystemFont">Point3</span> *EE_RESTRICT pVectors, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> count, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> stride)</p>
<p class="NDLRefMemberDescription">Processes an array of vectors and normalizes each of them. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<p class="NDLRefMemberDetailedDescription">These results are generally faster than their full-precision counterparts (except on modern PC hardware), but are only worth 7 bits of binary precision (1 in 128). </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pVectors</span></td>
    <td>A pointer to an array of vectors to process. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">count</span></td>
    <td>The number of vectors in the array. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">stride</span></td>
    <td>The number of bytes between each <span class="NDLSystemFont"><a href="efd__vector.htm">vector</a></span> in the array. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_point3_1a0c74cf48188b7bccd778726361db9e91"></a>
<p class="NDLRefMemberFunction">static void  UnitizeVector(<span class="NDLSystemFont">Point3</span>& v)</p>
<p class="NDLRefMemberDescription">Normalizes the specified <span class="NDLSystemFont"><a href="efd__vector.htm">vector</a></span> using a fast, but less precise square root algorithm. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">v</span></td>
    <td>The <span class="NDLSystemFont"><a href="efd__vector.htm">vector</a></span> to normalize. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_point3_1a6b83fef1b639d3947ec13de0dde4718c"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  VectorLength(const <span class="NDLSystemFont">Point3</span>& v)</p>
<p class="NDLRefMemberDescription">Calculates the length of the specified <span class="NDLSystemFont"><a href="efd__vector.htm">vector</a></span> using a fast, but less precise square root algorithm. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">v</span></td>
    <td>The <span class="NDLSystemFont"><a href="efd__vector.htm">vector</a></span> with which to calculate the length. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The length of the specified <span class="NDLSystemFont"><a href="efd__vector.htm">vector</a></span>. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_point3_1a0ae3f9cd130cb8eddc803a2e7d28d434"></a>
<p class="NDLRefMemberFunction">static void  PointsPlusEqualFloatTimesPoints(<br/><span class="NDLSystemFont">Point3</span> *EE_RESTRICT pDst, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> f, <br/>const <span class="NDLSystemFont">Point3</span> *EE_RESTRICT pSrc, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> count)</p>
<p class="NDLRefMemberDescription">Multiplies each point in the source array by the specified scalar and adds the result to the corresponding point in the destination array. </p>
<p class="NDLRefMemberDetailedDescription">(Ex: pDst[i] += f* pSrc[i]) </p>
<p class="NDLRefMemberDetailedDescription">Both the source and destination arrays must be of equal length. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pDst</span></td>
    <td>An array of points with which to write the results. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">f</span></td>
    <td>The scalar with which to multiply each incoming source point. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pSrc</span></td>
    <td>A source array of points. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">count</span></td>
    <td>The number of points in both arrays. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_point3_1aec0d5c742c5ce70e8bb5fb6654a043e2"></a>
<p class="NDLRefMemberFunction">static void  WeightedPointsPlusWeightedPoints(<br/><span class="NDLSystemFont">Point3</span> *EE_RESTRICT pDst, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> weight, <br/>const <span class="NDLSystemFont">Point3</span> *EE_RESTRICT pSrc, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> count)</p>
<p class="NDLRefMemberDescription">Multiplies (1.0f - weight) by each point in the source array and weight by the corresponding point in the destination array, storing the result in the destination. </p>
<p class="NDLRefMemberDetailedDescription">(Ex: pDst[i] = oneMinusWeight* pSrc[i] + weight* pDst[i]) </p>
<p class="NDLRefMemberDetailedDescription">Both the source and destination arrays must be of equal length. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pDst</span></td>
    <td>An array of points with which to multiply the weights and store the results. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">weight</span></td>
    <td>The weight. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pSrc</span></td>
    <td>A source array of points with which to multiply the inverse weight and add to the results. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">count</span></td>
    <td>The number of points in the source and destination arrays. </td>
</tr>

        </tbody>
    </table>
</div>


<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classefd_1_1_point3_1a8c786ab0183dae9731e5e70c620c6ed8"></a>
<p class="NDLRefMemberFunction">Point3()</p>
<p class="NDLRefMemberDescription">Constructs a new point but does not initialize the data members so that fast construction of arrays is possible in situations where the points will be filled in by application code. </p>

<a name="classefd_1_1_point3_1a3d5fc358e86f97de3aa621e9feac7093"></a>
<p class="NDLRefMemberFunction">Point3(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> x0, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> y0, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> z0)</p>
<p class="NDLRefMemberDescription">Constructs a point from the specified values. </p>

<a name="classefd_1_1_point3_1aafd863c8dd4082a0f8065296ff4ab1df"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>&  operator[](<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span> i) const</p>
<p class="NDLRefMemberDescription">Allows access to the point using array referencing. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">This method assumes the class member data is 4-byte aligned. </p></p>

<a name="classefd_1_1_point3_1ac674336ad524442cee4b31fc5f9b88ab"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>&  operator[](<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span> i)</p>
<p class="NDLRefMemberDescription">Const version of the array reference operator. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">This method assumes the class member data is 4-byte aligned. </p></p>

<a name="classefd_1_1_point3_1a7ac366364b26cb74023aad7368694f4e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  operator==(const <span class="NDLSystemFont">Point3</span>& pt) const</p>
<p class="NDLRefMemberDescription">Equality operator using an  comparison. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pt</span></td>
    <td>Point with which to compare to this point. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if exactly equal, false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_point3_1aee182688be566f914f99a929c097020c"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  operator!=(const <span class="NDLSystemFont">Point3</span>& pt) const</p>
<p class="NDLRefMemberDescription">Inequality operator using an  comparison. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pt</span></td>
    <td>Point with which to compare to this point. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if not equal, false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_point3_1a2b7fcae6b06964aaaa2ff9a456c8fb35"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">Point3</span>&  operator=(const <span class="NDLSystemFont">Point3</span>& pt)</p>
<p class="NDLRefMemberDescription">Assignment operator, copies each member. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pt</span></td>
    <td><span class="NDLSystemFont">Point3</span> to copy from. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A reference to this <span class="NDLSystemFont">Point3</span> instance. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_point3_1a2e0152ecf62e63717a47ac8b221dc4eb"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">Point3</span>  operator+(const <span class="NDLSystemFont">Point3</span>& pt) const</p>
<p class="NDLRefMemberDescription">Performs a component wise addition. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pt</span></td>
    <td>The point to add to this one. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A newly constructed point containing the sum of this point and the specified point. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_point3_1ac76284e4f7bc574d63ce4787298e9c92"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">Point3</span>  operator-(const <span class="NDLSystemFont">Point3</span>& pt) const</p>
<p class="NDLRefMemberDescription">Performs a component wise subtraction. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pt</span></td>
    <td>The point to subtract from this one. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A newly constructed point containing the difference of this point and the specified point. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_point3_1a6c23ad7fed77a373715a390cc8243cba"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  operator*(const <span class="NDLSystemFont">Point3</span>& pt) const</p>
<p class="NDLRefMemberDescription">Dot product operator. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pt</span></td>
    <td>The second point with which to calculate the dot product. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The dot product of this point with the specified point. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_point3_1a41eabe1731b178557146916f3e1a4977"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">Point3</span>  operator*(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> scalar) const</p>
<p class="NDLRefMemberDescription">Performs a scalar multiplication. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">scalar</span></td>
    <td>The value with which to scale this point. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A newly constructed point representing the scaled version of this point. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_point3_1abe7123dda553975dab7ed8235f3e46de"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">Point3</span>  operator/(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> scalar) const</p>
<p class="NDLRefMemberDescription">Performs a scalar division. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">scalar</span></td>
    <td>The value with which to scale this point. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A newly constructed point representing the scaled version of this point. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_point3_1aaf8179d440ec40a0356cefee309b3a93"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">Point3</span>  operator-() const</p>
<p class="NDLRefMemberDescription">Unary negation operator. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>A point containing the negated version of this point. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_point3_1a1e232d3163ce72373f32a3e400fc02c0"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">Point3</span>&  operator+=(const <span class="NDLSystemFont">Point3</span>& pt)</p>
<p class="NDLRefMemberDescription">Performs an in place component wise addition. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pt</span></td>
    <td>The point to add to this point. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A reference to this point plus the specified point. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_point3_1abfa7151a5d86b2d8695319b9acc9bce3"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">Point3</span>&  operator-=(const <span class="NDLSystemFont">Point3</span>& pt)</p>
<p class="NDLRefMemberDescription">Performs an in place component wise subtraction. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pt</span></td>
    <td>The point to subtract from this point. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A reference to this point subtracted by the specified point. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_point3_1adfcbbfa7fc442903152662c7553fd62a"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">Point3</span>&  operator*=(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> scalar)</p>
<p class="NDLRefMemberDescription">In place scalar multiplication of this point. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">scalar</span></td>
    <td>The scalar value. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A reference to this point scaled by the specified scalar. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_point3_1a7f0e105b39c2476c851d55a293daf32e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">Point3</span>&  operator/=(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> scalar)</p>
<p class="NDLRefMemberDescription">In place division of this point. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">scalar</span></td>
    <td>The scalar value. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A reference to this point divided by the specified scalar. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_point3_1a098fd4eadeada973a4190fab485de981"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  Length() const</p>
<p class="NDLRefMemberDescription">Calculates the <span class="NDLSystemFont"><a href="efd__vector.htm">vector</a></span> length of this point. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>The <span class="NDLSystemFont"><a href="efd__vector.htm">vector</a></span> length. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_point3_1a844f2480a862c8924a86d6d71f405cc6"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  SqrLength() const</p>
<p class="NDLRefMemberDescription">Calculates the squared <span class="NDLSystemFont"><a href="efd__vector.htm">vector</a></span> length of this point. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>The squared <span class="NDLSystemFont"><a href="efd__vector.htm">vector</a></span> length. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_point3_1a212b5d8e04a1c3219731bdb1373aab81"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  Dot(const <span class="NDLSystemFont">Point3</span>& pt) const</p>
<p class="NDLRefMemberDescription">Calculates the dot product. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pt</span></td>
    <td>The second point with which to calculate the dot product. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The dot product of this point with the specified point. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_point3_1af1769e5bfcedebc5f73c05ba5db6d810"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  Unitize()</p>
<p class="NDLRefMemberDescription">Converts this <span class="NDLSystemFont"><a href="efd__vector.htm">vector</a></span> into a unit <span class="NDLSystemFont"><a href="efd__vector.htm">vector</a></span>. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<p class="NDLRefMemberDetailedDescription">If this method is called on a zero <span class="NDLSystemFont"><a href="efd__vector.htm">vector</a></span>, it remains unchanged and a value of zero is returned as the result. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>The original length of the <span class="NDLSystemFont"><a href="efd__vector.htm">vector</a></span> before it was normalized. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_point3_1afc418a7543e0865140fe0751017473ef"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  Unitize(const <span class="NDLSystemFont">Point3</span>& zeroLengthDefault)</p>
<p class="NDLRefMemberDescription">Converts this <span class="NDLSystemFont"><a href="efd__vector.htm">vector</a></span> into a unit <span class="NDLSystemFont"><a href="efd__vector.htm">vector</a></span>. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">zeroLengthDefault</span></td>
    <td><span class="NDLSystemFont"><a href="efd__vector.htm">vector</a></span> to default to if <span class="NDLSystemFont"><a href="efd__vector.htm">vector</a></span> length is zero. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The original length of the <span class="NDLSystemFont"><a href="efd__vector.htm">vector</a></span> before it was normalized. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_point3_1a8bd56a3e6dc7d3a66d3574cf3fd559f1"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">Point3</span>  Cross(const <span class="NDLSystemFont">Point3</span>& pt) const</p>
<p class="NDLRefMemberDescription">Calculates the cross product of this <span class="NDLSystemFont"><a href="efd__vector.htm">vector</a></span> with the specified <span class="NDLSystemFont"><a href="efd__vector.htm">vector</a></span>. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">Both this <span class="NDLSystemFont"><a href="efd__vector.htm">vector</a></span> and the one specified are not modified. </p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pt</span></td>
    <td>The <span class="NDLSystemFont"><a href="efd__vector.htm">vector</a></span> with which to take the cross product. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A <span class="NDLSystemFont"><a href="efd__vector.htm">vector</a></span> containing this <span class="NDLSystemFont"><a href="efd__vector.htm">vector</a></span> cross pt. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_point3_1a6a4a90a3ce58ae4087830be7a6e6ed82"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">Point3</span>  UnitCross(const <span class="NDLSystemFont">Point3</span>& pt) const</p>
<p class="NDLRefMemberDescription">Calculates the cross product of this <span class="NDLSystemFont"><a href="efd__vector.htm">vector</a></span> with the specified <span class="NDLSystemFont"><a href="efd__vector.htm">vector</a></span>. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">Both this <span class="NDLSystemFont"><a href="efd__vector.htm">vector</a></span> and the one specified are not modified. </p>
<p class="NDLRefMemberDetailedDescription">This method is slower than the normal Cross method since the resulting <span class="NDLSystemFont"><a href="efd__vector.htm">vector</a></span> must be normalized. </p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pt</span></td>
    <td>The <span class="NDLSystemFont"><a href="efd__vector.htm">vector</a></span> with which to take the cross product. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A unit length <span class="NDLSystemFont"><a href="efd__vector.htm">vector</a></span> containing this <span class="NDLSystemFont"><a href="efd__vector.htm">vector</a></span> cross pt. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_point3_1a7bdb7ef2614b6e15b97b72b97e405f96"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">Point3</span>  Perpendicular() const</p>
<p class="NDLRefMemberDescription">Computes one of the infinite <span class="NDLSystemFont"><a href="efd__set.htm">set</a></span> of perpendicular vectors to this <span class="NDLSystemFont"><a href="efd__vector.htm">vector</a></span>. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>A perpendicular <span class="NDLSystemFont"><a href="efd__vector.htm">vector</a></span> to this one. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_point3_1aa62022ed54538db5bb3be73615e642a0"></a>
<p class="NDLRefMemberFunction">void  Serialize(<span class="NDLSystemFont"><a href="efd__Archive.htm">efd::Archive</a></span>& ar)</p>
<p class="NDLRefMemberDescription">Serialization. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
