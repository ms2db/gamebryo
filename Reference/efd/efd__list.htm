<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::list</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::list</p>
<p class="NDLRefParentage">: public efd::stlport::list< _data, efd::CustomAllocator< _data > ></p>


<p class="NDLRefHeaderFile">&lt;StdContainers.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classefd_1_1list.gif" alt="Inheritance graph for efd::list"/>
  <p class="FigureCaption">Inheritance graph for efd::list</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">An STL <span class="NDLSystemFont">list</span> that uses Emergent's memory allocator. </p>

<a name="public_types"></a>
<p class="NDLRefHead1">Public Types</p>


<a name="classefd_1_1list_1ac6e1c85701fd7662cb193a8f19472707"></a>
<p class="NDLRefMemberFunction">typedef efd::stlport::list&lt;_data, <span class="NDLSystemFont"><a href="efd__CustomAllocator.htm">efd::CustomAllocator</a></span>&lt;_data&gt;&gt;  BaseClass</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1list_1a0f65eeccfa1c4c92d8e6f3aa683793cd"></a>
<p class="NDLRefMemberFunction">typedef _data  value_type</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1list_1a2771f3807801bbdb4377e3e1515fed3b"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="efd__list.htm#classefd_1_1list_1a0f65eeccfa1c4c92d8e6f3aa683793cd">value_type</a></span>*  pointer</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1list_1aee378c4ff13ca9de1e441d886ce77237"></a>
<p class="NDLRefMemberFunction">typedef const <span class="NDLSystemFont"><a href="efd__list.htm#classefd_1_1list_1a0f65eeccfa1c4c92d8e6f3aa683793cd">value_type</a></span>*  const_pointer</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1list_1a742e84a08c7b6d1bb78648ed12d6e92b"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="efd__list.htm#classefd_1_1list_1a0f65eeccfa1c4c92d8e6f3aa683793cd">value_type</a></span>&  reference</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1list_1a3ac1aacdf121edbd25b276a7d55a9c8a"></a>
<p class="NDLRefMemberFunction">typedef const <span class="NDLSystemFont"><a href="efd__list.htm#classefd_1_1list_1a0f65eeccfa1c4c92d8e6f3aa683793cd">value_type</a></span>&  const_reference</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1list_1a8d320018c5f8c41c8d97ce9d9f50254e"></a>
<p class="NDLRefMemberFunction">typedef size_t  size_type</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1list_1aeab80964570622ad1a9832269523fb20"></a>
<p class="NDLRefMemberFunction">typedef ptrdiff_t  difference_type</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1list_1a656baa1466b73f7bafb6e432a839f541"></a>
<p class="NDLRefMemberFunction">typedef BaseClass::allocator_type  allocator_type</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1list_1ae79762a07a0edca216a7be7ca519bb8f"></a>
<p class="NDLRefMemberFunction">typedef BaseClass::iterator  iterator</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1list_1af4cab1ba16a6f22803e51d2b5ae0684f"></a>
<p class="NDLRefMemberFunction">typedef BaseClass::const_iterator  const_iterator</p>
<p class="NDLRefMemberFunction"></p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classefd_1_1list_1a07054e3f3803a6a39eaf6f784b5087ef"></a>
<p class="NDLRefMemberFunction">list()</p>
<p class="NDLRefMemberDescription">Construct a <span class="NDLSystemFont">list</span>. </p>
<p class="NDLRefMemberDetailedDescription">Semantics are identical to std::list. </p>

<a name="classefd_1_1list_1ad721e4810bc37eba6ccc7b92bab4fc95"></a>
<p class="NDLRefMemberFunction">list(<span class="NDLSystemFont"><a href="efd__list.htm#classefd_1_1list_1a8d320018c5f8c41c8d97ce9d9f50254e">size_type</a></span> _Count)</p>
<p class="NDLRefMemberDescription">Construct a <span class="NDLSystemFont">list</span>. </p>
<p class="NDLRefMemberDetailedDescription">Semantics are identical to std::list. </p>

<a name="classefd_1_1list_1a30767f9e80305812c2d4ff3a96dff9e7"></a>
<p class="NDLRefMemberFunction">list(<br/><span class="NDLSystemFont"><a href="efd__list.htm#classefd_1_1list_1a8d320018c5f8c41c8d97ce9d9f50254e">size_type</a></span> _Count, <br/>const _data& _Val)</p>
<p class="NDLRefMemberDescription">Construct a <span class="NDLSystemFont">list</span>. </p>
<p class="NDLRefMemberDetailedDescription">Semantics are identical to std::list. </p>

<a name="classefd_1_1list_1a9d79d2e253bee23c14563358cce1832c"></a>
<p class="NDLRefMemberFunction">list(const <span class="NDLSystemFont">list</span>& _Right)</p>
<p class="NDLRefMemberDescription">Construct a <span class="NDLSystemFont">list</span>. </p>
<p class="NDLRefMemberDetailedDescription">Semantics are identical to std::list. </p>

<a name="classefd_1_1list_1a5bf3c0fccf8d3542d28142b3dbd3d3d2"></a>
<p class="NDLRefMemberFunction">list(const <span class="NDLSystemFont"><a href="efd__list.htm#classefd_1_1list_1ac6e1c85701fd7662cb193a8f19472707">BaseClass</a></span>& _Right)</p>
<p class="NDLRefMemberDescription">Construct a <span class="NDLSystemFont">list</span>. </p>
<p class="NDLRefMemberDetailedDescription">Semantics are identical to std::list. </p>

<a name="classefd_1_1list_1aefba185696ef97a919a7b29cbc12e802"></a>
<p class="NDLRefMemberFunction">template &lt;class InputIterator  &gt; list(<br/>InputIterator _First, <br/>InputIterator _Last)</p>
<p class="NDLRefMemberDescription">Construct a <span class="NDLSystemFont">list</span>. </p>
<p class="NDLRefMemberDetailedDescription">Semantics are identical to std::list. </p>

<a name="classefd_1_1list_1a6ecf956fa858fd51ba927b45f5b6b296"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="efd__list.htm#classefd_1_1list_1ae79762a07a0edca216a7be7ca519bb8f">iterator</a></span>  find(const _data& i_data)</p>
<p class="NDLRefMemberDescription">Returns an iterator addressing the first location of an element in a <span class="NDLSystemFont">list</span> that has a data value equivalent to a specified value. </p>
<p class="NDLRefMemberDetailedDescription">This simply thunks to EE_STL_NAMESPACE::find.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_data</span></td>
    <td></td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1list_1aba283d20f1887d8905eceeb0e20e40a7"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="efd__list.htm#classefd_1_1list_1af4cab1ba16a6f22803e51d2b5ae0684f">const_iterator</a></span>  find(const _data& i_data) const</p>
<p class="NDLRefMemberDescription">Construct a <span class="NDLSystemFont">list</span>. </p>
<p class="NDLRefMemberDetailedDescription">Semantics are identical to std::list. </p>

<a name="classefd_1_1list_1ad246dc084367408163769959865bc2af"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  pop_front(_data& o_data)</p>
<p class="NDLRefMemberDescription">Deletes the element at the beginning of a <span class="NDLSystemFont">list</span>. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">o_data</span></td>
    <td>If the <span class="NDLSystemFont">list</span> is non-empty, first item is copied here. If the <span class="NDLSystemFont">list</span> is empty, then this value is guaranteed to remain unchanged from its initial value. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>bool True if the head was removed, false if the <span class="NDLSystemFont">list</span> was empty. </td>
</tr>

        </tbody>
    </table>
</div>


 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
