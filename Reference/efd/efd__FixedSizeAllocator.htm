<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::FixedSizeAllocator</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::FixedSizeAllocator</p>


<p class="NDLRefHeaderFile">&lt;FixedSizeAllocator.h&gt;</p>


<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">The following class is used by <span class="NDLSystemFont"><a href="efd__SmallObjectAllocator.htm">SmallObjectAllocator</a></span> internally for allocation management. </p>
<p class="NDLNormal">This class allocates memory of a particular size from an internal pool of memory chunks. When no more chunks have open slots, a new Chunk will be allocated. Note that each <span class="NDLSystemFont">FixedSizeAllocator</span> has a critical section that manages its various chunks. This can improve memory performance in a multi-threaded environment. </p>

<a name="public_types"></a>
<p class="NDLRefHead1">Public Types</p>
<a name="classefd_1_1_fixed_size_allocator_1acd7f90988d122fcd4bf50e49fd2a6dfd"></a>
<p class=NDLRefHead2>anonymous enum</p>




<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">CacheRefillCount</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">MaxCacheCount</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">CacheReleaseCount</span></td>
    <td>&nbsp;</td>
</tr>

  </tbody>
</table>
</div>


<a name="construction_and_destruction"></a>
<p class="NDLRefHead1">Construction and Destruction</p>


<a name="classefd_1_1_fixed_size_allocator_1a8c45c050484d0d7f545e29d220b44115"></a>
<p class="NDLRefMemberFunction">FixedSizeAllocator()</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_fixed_size_allocator_1adb31baed7cb4ccc5a476a6db57e83609"></a>
<p class="NDLRefMemberFunction">~FixedSizeAllocator()</p>
<p class="NDLRefMemberFunction"></p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classefd_1_1_fixed_size_allocator_1aa1f923e42477d72ef2c86fa3c3ac5d59"></a>
<p class="NDLRefMemberFunction">void  Init(<br/><span class="NDLSystemFont"><a href="efd__IAllocator.htm">IAllocator</a></span>* pkAllocator, <br/>size_t stBlockSizem, <br/>size_t stOptimalChunkSize)</p>
<p class="NDLRefMemberDescription">Create a <span class="NDLSystemFont">FixedSizeAllocator</span> able to manage blocks of 'blockSize' size. </p>

<a name="classefd_1_1_fixed_size_allocator_1ae38220fcfe8ce3c6940e992534fba41a"></a>
<p class="NDLRefMemberFunction">void*  Allocate(PerThreadSmallBlockCache* pkCache)</p>
<p class="NDLRefMemberDescription">Allocate a memory block. </p>

<a name="classefd_1_1_fixed_size_allocator_1a1035df0554f7a020ef173f338a107139"></a>
<p class="NDLRefMemberFunction">void  Deallocate(<br/>void* p, <br/>PerThreadSmallBlockCache* pkCache)</p>
<p class="NDLRefMemberDescription">Deallocate a memory block previously allocated with <span class="NDLSystemFont"><a href="efd__FixedSizeAllocator.htm#classefd_1_1_fixed_size_allocator_1ae38220fcfe8ce3c6940e992534fba41a">Allocate()</a></span>. </p>
<p class="NDLRefMemberDetailedDescription">(if that's not the case, the behavior is undefined) </p>

<a name="classefd_1_1_fixed_size_allocator_1a6648b0581be2ab59768bedab6b8d3974"></a>
<p class="NDLRefMemberFunction">void  ReleaseAllElementsInCache(PerThreadSmallBlockCache* pkCache)</p>
<p class="NDLRefMemberDescription">Releases all elements in a cache. </p>

<a name="classefd_1_1_fixed_size_allocator_1ac7af7847b55d973d70a13a73858d72e8"></a>
<p class="NDLRefMemberFunction">size_t  BlockSize() const</p>
<p class="NDLRefMemberDescription">Returns the block size with which the <span class="NDLSystemFont">FixedSizeAllocator</span> was initialized. </p>

<a name="classefd_1_1_fixed_size_allocator_1a00c0ddf66e0b2aff160c2d3cfe9384af"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  operator&lt;(size_t rhs) const</p>
<p class="NDLRefMemberDescription">Comparison operator for sorting. </p>

<a name="classefd_1_1_fixed_size_allocator_1ad351f955d7c390944724da87822c383c"></a>
<p class="NDLRefMemberFunction">size_t  GetNumChunks() const</p>
<p class="NDLRefMemberDescription">Returns the number of chunks allocated. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
