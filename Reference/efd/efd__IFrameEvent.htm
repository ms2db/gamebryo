<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::IFrameEvent</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::IFrameEvent</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="efd__MemObject.htm">efd::MemObject</a></span></p>


<p class="NDLRefHeaderFile">&lt;IFrameEvent.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classefd_1_1_i_frame_event.gif" alt="Inheritance graph for efd::IFrameEvent"/>
  <p class="FigureCaption">Inheritance graph for efd::IFrameEvent</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">A frame event is an event that occurs once per frame while your application is running for which various responders can perform work in a specific order. </p>
<p class="NDLNormal">Services interested in the event can register to be notified each time the event occurs. Frame events work in conjunction with system services and are invoked interspersed with the registered services during the OnTick phase of each frame. As such, the events themselves use the same priority system that controls the ticking of services, but in addition each handler for the event is also registered with a specific priority and the handlers are invoked in priority order. In fact, frame events are very similar to sending a local message but with the addition of being able to control the handler invocation order using priority. The other difference between a local message and a frame event is that the handler methods for frame event are invoked through a specific interface function that is defined by the event itself. Objects handling a specific frame event must derive from an interface specific to the event they wish to handle and override a method which is also specific to that event. There is no "IMessage"-like payload associated with a frame event.</p>
<p class="NDLNormal">Frame events are typically added to the <span class="NDLSystemFont"><a href="efd__ServiceManager.htm">ServiceManager</a></span> during the OnInit phase of an owning system service and are removed during the OnShutdown phase of the same service. Well-known frame events can then be used by other services to implement functionality related to the event. Any service that utilizes a frame event should also register a service dependency on the owning system service during their OnPreInit call.</p>
<p class="NDLNormal">A service can also register itself as a handler for it's own frame event as a method of effectively receiving multiple "OnTick"-like function calls each frame at different priorities.</p>
<p class="NDLNormal">
<p class="NDLNormal">If a frame event has the exact same priority as a system service, the system service will receive its OnTick call before the frame event is executed.</p>
<p class="NDLNormal">Once added to the <span class="NDLSystemFont"><a href="efd__ServiceManager.htm">ServiceManager</a></span>, it assumes ownership of the frame event object and will delete the object when it is removed. </p></p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classefd_1_1_i_frame_event_1a9ebce6e744d83b482acd17dd3bb34a32"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  AddHandler(<br/><span class="NDLSystemFont"><a href="efd__IBase.htm">efd::IBase</a></span>* pHandler, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span> priority) = 0</p>
<p class="NDLRefMemberDescription">This method is called by the <span class="NDLSystemFont"><a href="efd__ServiceManager.htm">efd::ServiceManager</a></span> in response to requests to add a handler to a frame event. </p>
<p class="NDLRefMemberDetailedDescription">This method should not be called directly, instead you should call <span class="NDLSystemFont"><a href="efd__ServiceManager.htm#classefd_1_1_service_manager_1a924045a06e62f75d00569225605d2781">ServiceManager::AddFrameEventHandler</a></span>.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pHandler</span></td>
    <td>The handler object, which must implement the interface specific to this frame event. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">priority</span></td>
    <td>The priority at which to register the handler. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the handler was added, false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_frame_event_1ae915ba72d172ae1a907e7415488f3e76"></a>
<p class="NDLRefMemberFunction">virtual void  DoEvent() = 0</p>
<p class="NDLRefMemberDescription">This method will be called once per frame for each active frame event. </p>
<p class="NDLRefMemberDetailedDescription">In turn it will invoke all registered handlers for the event in priority order. This method will be called interspersed with the various system service OnTick methods as controlled by the priority with which the frame event is registered with the service manager. </p>

<a name="classefd_1_1_i_frame_event_1a839cdc30de804b299aff226872a2e971"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  RemoveHandler(<span class="NDLSystemFont"><a href="efd__IBase.htm">efd::IBase</a></span>* pHandler) = 0</p>
<p class="NDLRefMemberDescription">This method is called by the <span class="NDLSystemFont"><a href="efd__ServiceManager.htm">efd::ServiceManager</a></span> in response to requests to remove a handler from a frame event. </p>
<p class="NDLRefMemberDetailedDescription">This method should not be called directly, instead you should call <span class="NDLSystemFont"><a href="efd__ServiceManager.htm#classefd_1_1_service_manager_1ac23870d7b01299e6395cf7b561acef25">ServiceManager::RemoveFrameEventHandler</a></span>.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pHandler</span></td>
    <td>The handler object, which must implement the interface specific to this frame event. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the handler was removed, false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_frame_event_1a7cb087f7782ce269f5a77bce5806a307"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  CountHandlers() const = 0</p>
<p class="NDLRefMemberDescription">Return the number of handlers for this frame event. </p>

<a name="classefd_1_1_i_frame_event_1a1c6247df0d99f3580940f8128936b418"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>  GetDefaultPriority() const</p>
<p class="NDLRefMemberDescription">Get the default priority for this frame event. </p>
<p class="NDLRefMemberDetailedDescription">The priority determines the order in which <span class="NDLSystemFont"><a href="efd__IFrameEvent.htm#classefd_1_1_i_frame_event_1ae915ba72d172ae1a907e7415488f3e76">IFrameEvent::DoEvent</a></span> and <span class="NDLSystemFont"><a href="efd__ISystemService.htm#classefd_1_1_i_system_service_1a028f8ed6c314689703526e6a3efe863a">ISystemService::OnTick</a></span> is called for all <span class="NDLSystemFont">IFrameEvent</span> and <span class="NDLSystemFont"><a href="efd__ISystemService.htm">ISystemService</a></span> objects registered with the <span class="NDLSystemFont"><a href="efd__ServiceManager.htm">ServiceManager</a></span>. Higher numerical values are called before lower values. The priority can be overridden when the frame event is registered with the <span class="NDLSystemFont"><a href="efd__ServiceManager.htm">ServiceManager</a></span>, but if it is not overridden than this default priority will be used. </p>

<a name="classefd_1_1_i_frame_event_1aeea5c79a77f6efa77720ac24e31fe1e9"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span>&  GetName() const</p>
<p class="NDLRefMemberDescription">Returns the name of this frame event. </p>
<p class="NDLRefMemberDetailedDescription">Each frame event must have a unique name and handlers are added to a frame event by referencing this name.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>The name of this frame event </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_frame_event_1a5b299abae9a61fa35c9ea9e7d34ad0a6"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsActive() const</p>
<p class="NDLRefMemberDescription">Determine if this frame event is active. </p>
<p class="NDLRefMemberDetailedDescription">Only active frame events are invoked each frame. Frame events can be deactivated without unregistering them in order to preserve the registered handlers. </p>

<a name="classefd_1_1_i_frame_event_1a96544ce1f5bc71cd09e12383e568ab22"></a>
<p class="NDLRefMemberFunction">void  SetActive(<span class="NDLSystemFont">bool</span> active)</p>
<p class="NDLRefMemberDescription">Activate or deactivate this frame event. </p>
<p class="NDLRefMemberDetailedDescription">Only active frame events are invoked each frame. Frame events default to the active state. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
