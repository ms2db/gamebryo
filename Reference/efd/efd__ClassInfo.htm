<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::ClassInfo</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::ClassInfo</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="efd__MemObject.htm">efd::MemObject</a></span></p>


<p class="NDLRefHeaderFile">&lt;ClassInfo.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classefd_1_1_class_info.gif" alt="Inheritance graph for efd::ClassInfo"/>
  <p class="FigureCaption">Inheritance graph for efd::ClassInfo</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">Class that encapsulates Run-Time Type Identification (RTTI) behavior for the Emergent <span class="NDLSystemFont"><a href="efd__ServiceManager.htm">ServiceManager</a></span>. </p>
<p class="NDLNormal">
<p class="NDLNormal">Since this class does not perform any dynamic memory allocations, there is a maximum number of parent classes and interfaces supported. This maximum value is enumerated as MAX_PARENT_IDS. </p>
<p class="NDLNormal">The first entry in the <span class="NDLSystemFont">ClassInfo</span> class array should be the most derived type of the class. </p></p>

<a name="public_types"></a>
<p class="NDLRefHead1">Public Types</p>


<a name="classefd_1_1_class_info_1a229dc65e0dd94e00d881d849d442b7f3"></a>
<p class="NDLRefMemberFunction">typedef void(*  CLASSINFO_FUNC)(ClassInfo *pClassInfo, efd::UInt32 offsetFromClass)</p>
<p class="NDLRefMemberDescription">Typedef for all SetupClassInfo static functions. </p>
<a name="public_static_methods"></a>
<p class="NDLRefHead1">Public Static Methods</p>


<a name="classefd_1_1_class_info_1af7ec84da4358833fa5e822b6c44fe51e"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  IsKindOf(<br/>const <span class="NDLSystemFont">ClassInfo</span>* pClassInfo, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">ClassID</a></span> classID)</p>
<p class="NDLRefMemberDescription">Static method used to determine if a <span class="NDLSystemFont">ClassInfo</span> contains a known class ID. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pClassInfo</span></td>
    <td>Pointer to a <span class="NDLSystemFont">ClassInfo</span> instance. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">classID</span></td>
    <td>A known class ID. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the <span class="NDLSystemFont">ClassInfo</span> contains a known class ID; false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_class_info_1a70e59ee464d4d01fe121adc5c6967361"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  IsExactKindOf(<br/>const <span class="NDLSystemFont">ClassInfo</span>* pClassInfo, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">ClassID</a></span> classID)</p>
<p class="NDLRefMemberDescription">Static method used to determine if a ClassInfo's zeroth class ID matches a known class ID. </p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classefd_1_1_class_info_1afd856eb15eacc57be76ddcb6a911ce6e"></a>
<p class="NDLRefMemberFunction">ClassInfo(<span class="NDLSystemFont"><a href="efd__ClassInfo.htm#classefd_1_1_class_info_1a229dc65e0dd94e00d881d849d442b7f3">CLASSINFO_FUNC</a></span> pClassInfoFunc)</p>
<p class="NDLRefMemberDescription">Constructor. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pClassInfoFunc</span></td>
    <td>Pointer to a static function that initializes this <span class="NDLSystemFont">ClassInfo</span>. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_class_info_1ab4c3dbf6acc77620fba6c79f5846616d"></a>
<p class="NDLRefMemberFunction">void*  TypeCast(<br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">ClassID</a></span> classID, <br/>const void* pSrc) const</p>
<p class="NDLRefMemberDescription">Query if a class, or any of its parent classes implements the ClassID specified. </p>
<p class="NDLRefMemberDetailedDescription">This method assumes that pSrc != NULL.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">classID</span></td>
    <td>Class ID that we are attempting to become. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pSrc</span></td>
    <td>Address of the object we are trying to convert. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Pointer address after a typecast of pSrc. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_class_info_1a35e7558f4da253b69fa778d549d2f4a6"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">ClassID</a></span>  GetClassID() const</p>
<p class="NDLRefMemberDescription">Get the ID of this class. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>Class ID. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_class_info_1ae9700e1fd1792880a7602164999ce8c4"></a>
<p class="NDLRefMemberFunction">const char*  GetClassName() const</p>
<p class="NDLRefMemberDescription">Get the class name of this class. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>Class name. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_class_info_1a68482ae11f1f790f37cb34787a51de8e"></a>
<p class="NDLRefMemberFunction">void  AddClass(<br/>const char* name, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">ClassID</a></span> id, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> offset, <br/>const <span class="NDLSystemFont">ClassInfo</span>* parent)</p>
<p class="NDLRefMemberDescription">Add a parent class or interface. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">name</span></td>
    <td>A statically defined character string that is the name of a parent class. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">id</span></td>
    <td>ClassID of the parent class. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">offset</span></td>
    <td>Given a pointer to the most derived type in the <span class="NDLSystemFont"><a href="efd__list.htm">list</a></span>, offset specifies how many bytes should be added to the pointer to create a pointer that is addressable as the parent type. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">parent</span></td>
    <td>Parent <span class="NDLSystemFont">ClassInfo</span> instance. If this value is NULL, then the <span class="NDLSystemFont">ClassInfo</span> will assume that an interface is being stored. </td>
</tr>

        </tbody>
    </table>
</div>


 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
