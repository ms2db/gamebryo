<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::StaticDataManager</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::StaticDataManager</p>


<p class="NDLRefHeaderFile">&lt;StaticDataManager.h&gt;</p>


<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">The <span class="NDLSystemFont">StaticDataManager</span> manages creation and cleanup of all dynamically allocated non-local static objects in the system. </p>
<p class="NDLNormal">The foundation avoids allocating memory from the heap pre-main where possible. Therefore, the <span class="NDLSystemFont">StaticDataManager</span> allows callbacks to be registered with the system during C++ static initialization time which are then called once the system is initialized. </p>

<a name="public_types"></a>
<p class="NDLRefHead1">Public Types</p>


<a name="classefd_1_1_static_data_manager_1ad3160035aa96efb6b2a34b2493f78caa"></a>
<p class="NDLRefMemberFunction">typedef void(*  InitFunction)(void)</p>
<p class="NDLRefMemberDescription">Callback function signature of the Init function. </p>

<a name="classefd_1_1_static_data_manager_1a9aae289f2b46f26eb1ba2629ef20d581"></a>
<p class="NDLRefMemberFunction">typedef void(*  ShutdownFunction)(void)</p>
<p class="NDLRefMemberDescription">Callback function signature of the Shutdown function. </p>
<a name="public_static_methods"></a>
<p class="NDLRefHead1">Public Static Methods</p>


<a name="classefd_1_1_static_data_manager_1a6dfa89f36683423630aef7822712b81f"></a>
<p class="NDLRefMemberFunction">static void  AddLibrary(<br/>const char* libraryName, <br/><span class="NDLSystemFont"><a href="efd__StaticDataManager.htm#classefd_1_1_static_data_manager_1ad3160035aa96efb6b2a34b2493f78caa">InitFunction</a></span> pInit, <br/><span class="NDLSystemFont"><a href="efd__StaticDataManager.htm#classefd_1_1_static_data_manager_1a9aae289f2b46f26eb1ba2629ef20d581">ShutdownFunction</a></span> pShutdown, <br/><span class="NDLSystemFont"><a href="efd__StaticDataManager.htm#classefd_1_1_static_data_manager_1ad3160035aa96efb6b2a34b2493f78caa">InitFunction</a></span> pPerThreadInit, <br/><span class="NDLSystemFont"><a href="efd__StaticDataManager.htm#classefd_1_1_static_data_manager_1a9aae289f2b46f26eb1ba2629ef20d581">ShutdownFunction</a></span> pPerThreadShutdown, <br/>const char* dependencies)</p>
<p class="NDLRefMemberDescription">This function is called by the SDM constructor of each library. </p>
<p class="NDLRefMemberDetailedDescription">It is used to register the given library name with the given the Init and Shutdown functions. The dependencies string should contain a space-separated <span class="NDLSystemFont"><a href="efd__list.htm">list</a></span> of library names with SDM functions that must be initialized before this library is initialized. The <span class="NDLSystemFont"><a href="../../ee_goto.htm#Reference/Namespaces/efd.htm">efd</a></span> library should not appear in this <span class="NDLSystemFont"><a href="efd__list.htm">list</a></span>. For example, the string for <span class="NDLSystemFont"><a href="../NiMesh/NiMesh.htm">NiMesh</a></span> is "NiFloodgate NiMain". routine. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">libraryName</span></td>
    <td>The name of the library being registered </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pInit</span></td>
    <td>A pointer to the init method. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pShutdown</span></td>
    <td>A pointer to the shutdown method. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pPerThreadInit</span></td>
    <td>Callback function for init. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pPerThreadShutdown</span></td>
    <td>Callback function for shutdown. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">dependencies</span></td>
    <td>A space-separated <span class="NDLSystemFont"><a href="efd__list.htm">list</a></span> of libraries that this library depends on </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_static_data_manager_1aeb7d44822cfc03048810b22fe1c93924"></a>
<p class="NDLRefMemberFunction">static void  RemoveLibrary(const char* libraryName)</p>
<p class="NDLRefMemberDescription">This function exists to prevent libraries from being shut down after they are unloaded. </p>
<p class="NDLRefMemberDetailedDescription">With DLL's, this function is called by the DLL_PROCESS_DETACH case of DllMain for that library. It is not called by statically linked Gamebryo libraries, because there is no way to "unload" a statically linked library.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">libraryName</span></td>
    <td>The name of the library that was previously registered. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_static_data_manager_1a46acb7430261a5d14704ab128f988acf"></a>
<p class="NDLRefMemberFunction">static void  Init(const <span class="NDLSystemFont"><a href="efd__InitOptions.htm">InitOptions</a></span>* pOptions = 0)</p>
<p class="NDLRefMemberDescription">This function is called by EE_INIT. </p>
<p class="NDLRefMemberDetailedDescription">The method initializes components in the following manor: </p>
<p class="NDLRefMemberDetailedDescription">will call all Init functions that have been registered in the order that they are added. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">Since Init functions are registered during C++ static init time, the order is not deterministic. Therefore, static data should not depend on other static data across modules. </p></p>

<a name="classefd_1_1_static_data_manager_1a3171fe82edb336ea5dc4778fb3a7a047"></a>
<p class="NDLRefMemberFunction">static void  Shutdown()</p>
<p class="NDLRefMemberDescription">This function is called by EE_SHUTDOWN. </p>
<p class="NDLRefMemberDetailedDescription">It calls the Shutdown function for all registered libraries in the following manor: </p>
<p class="NDLRefMemberDetailedDescription">Shutdown method of all remaining libraries that have been registered is invoked. </p>

<a name="classefd_1_1_static_data_manager_1a5c3fdae393d03b86966320bd58a7b97d"></a>
<p class="NDLRefMemberFunction">static void  PerThreadInit()</p>
<p class="NDLRefMemberDescription">This function is called by EE_INIT on the main thread, or by <span class="NDLSystemFont"><a href="efd__Thread.htm">efd::Thread</a></span> on all other Emergent threads, and should be called explicitly if a custom threading solution is used. </p>
<p class="NDLRefMemberDetailedDescription">It initializes thread-local mechanisms such as per-thread allocation pools. </p>

<a name="classefd_1_1_static_data_manager_1afc853d3d8dc6df951c77a617a0a1f65f"></a>
<p class="NDLRefMemberFunction">static void  PerThreadShutdown()</p>
<p class="NDLRefMemberDescription">This function is called by EE_SHUTDOWN on the main thread, or by <span class="NDLSystemFont"><a href="efd__Thread.htm">efd::Thread</a></span> on all other Emergent threads, and should be called explicitly if a custom threading solution is used. </p>
<p class="NDLRefMemberDetailedDescription">It cleans up thread-local mechanisms such as per-thread allocation pools. </p>

<a name="classefd_1_1_static_data_manager_1a763f58a11c69f1c87ada968736b9d3ff"></a>
<p class="NDLRefMemberFunction">static void  ProcessAccumulatedLibraries()</p>
<p class="NDLRefMemberDescription">This function is called by the DLL_PROCESS_ATTACH section of DllMain for each library, as well as by <span class="NDLSystemFont"><a href="efd__StaticDataManager.htm#classefd_1_1_static_data_manager_1a46acb7430261a5d14704ab128f988acf">StaticDataManager::Init</a></span>. </p>
<p class="NDLRefMemberDetailedDescription">It causes the <span class="NDLSystemFont">StaticDataManager</span> to initialize all libraries, using each library's registered Init function, that have been added (via AddLibrary) but have not yet been initialized. The function is not called directly by statically linked libraries - it is called via EE_INIT.</p>
<p class="NDLRefMemberDetailedDescription">This function does nothing if Init has not been called. The first time this function is called after Init (typically from Init itself), the libraries are dependency sorted before processing. Subsequence calls will check that all the dependencies of newly added libraries have already been initialized, but will not process dependencies for those new libraries. </p>

<a name="classefd_1_1_static_data_manager_1a496e0b58c75806fbe7cca35444606936"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont"><a href="efd__InitOptions.htm">InitOptions</a></span>*  GetInitOptions()</p>
<p class="NDLRefMemberDescription">Gets a pointer to the initialization options that were passed to the static data manager when it was created using EE_INIT. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>A pointer to the system's initialization options. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_static_data_manager_1af0d4ad655db53a0eb245a7fe6c95d31b"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  IsInitialized()</p>
<p class="NDLRefMemberDescription">The static data manager is initialized during <span class="NDLSystemFont"><a href="efd__StaticDataManager.htm#classefd_1_1_static_data_manager_1a46acb7430261a5d14704ab128f988acf">Init()</a></span> and uninitialized during <span class="NDLSystemFont"><a href="efd__StaticDataManager.htm#classefd_1_1_static_data_manager_1a3171fe82edb336ea5dc4778fb3a7a047">Shutdown()</a></span>. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>True if the static data manager is currently initialized </td>
</tr>

        </tbody>
    </table>
</div>


 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
