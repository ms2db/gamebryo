<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::MemTracker</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::MemTracker</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="efd__IAllocator.htm">efd::IAllocator</a></span></p>


<p class="NDLRefHeaderFile">&lt;MemTracker.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classefd_1_1_mem_tracker.gif" alt="Inheritance graph for efd::MemTracker"/>
  <p class="FigureCaption">Inheritance graph for efd::MemTracker</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">A platform-independent wrapper class to handle memory tracking and debugging. </p>
<p class="NDLNormal">There are four major areas of functionality provided by the memory tracker:</p>
<p class="NDLNormal">Memory Debugging - Provide functionality to assist in tracking down common memory errors.</p>
<p class="NDLNormal">Memory Leak Tracking - Provide functionality to detect and help correct leaked memory.</p>
<p class="NDLNormal">Memory Logging - Provide functionality to understand an application's memory behavior over time.</p>
<p class="NDLNormal">Memory Summary Statistics - Provide functionality to quickly get a snapshot of the memory behavior over time.</p>
<p class="NDLNormal">Please see the notes for commentary on the supported functionality for the tracker.</p>
<p class="NDLNormal">
<p class="NDLNormal">that while the <span class="NDLSystemFont">MemTracker</span> provides thread safety for itself and its internal allocator, all allocator classes should be responsible for their own thread-safety.</p>
<p class="NDLNormal">Memory Debugging - The tracker provides several levels of debugging functionality to catch common memory errors. These errors are caught by using asserts. Should a user encounter one of the asserts, please read the comments surrounding the assert. The comment should provide useful clues about the source of the assert. The debugger can then be used to inspect the current <span class="NDLSystemFont"><a href="efd__AllocUnit.htm">AllocUnit</a></span> for more information about the allocation. Additionally, there are several variables that can be used to help trap when certain memory errors occur once specific information is known about the memory.</p>
<p class="NDLNormal">Memory Leaks - When the application exits, all currently active allocations will be reported. There are two formats for the report, output debug strings and an XML log file. These log file, stored as "Memory-Leaks.xml", can be viewed in a variety of packages. On the Windows platform, double-clicking the file will display the contents of the XML file filtered by the corresponding XSL stylesheet in your default web browser. Note that these logs can sometimes be very large and can take some time to load in Internet Explorer or Firefox. The debug strings will be visible if bOutputLeaksToDebugStream is <span class="NDLSystemFont"><a href="efd__set.htm">set</a></span> to true. In some packages, like Microsoft Developer Studio, double-clicking on the individual leak records in the output stream will open the code browser to the line in which the allocation occurred.</p>
<p class="NDLNormal">Memory Logs - The tracker will write all allocation records to file as they are deallocated. These records, stored in "Memory-Overview.xml", can be viewed in a variety of packages. On the Windows platform, double-clicking the file will display the contents of the XML file filtered by the corresponding XSL stylesheet in your default web browser. Note that these logs can sometimes be very large and can take some time to load in Internet Explorer or Firefox. </p></p>

<a name="public_types"></a>
<p class="NDLRefHead1">Public Types</p>


<a name="classefd_1_1_mem_tracker_1a4e2387f1e5e162f30a958271286f35c9"></a>
<p class="NDLRefMemberFunction">typedef void(*  ReportActiveAllocUnit)(AllocUnit *pkActiveAllocUnit, IMemLogHandler *pLogHandler)</p>
<p class="NDLRefMemberDescription">callback function called for active allocations. </p>
<a name="public_static_attributes"></a>
<p class="NDLRefHead1">Public Static Attributes</p>


<a name="classefd_1_1_mem_tracker_1ade23803f580d2d38c078fd71e3d3d179"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  ms_bOutputLeaksToDebugStream</p>
<p class="NDLRefMemberDescription">The tracker will output leaks to the debug stream if this boolean is true. </p>

<a name="classefd_1_1_mem_tracker_1ae7e742c7f4c601744f137b56417a0a66"></a>
<p class="NDLRefMemberFunction">static size_t  ms_stBreakOnAllocID</p>
<p class="NDLRefMemberDescription">The tracker will assert when the allocation unit's m_stAllocationID equals this value upon allocate/reallocate/deallocate. </p>

<a name="classefd_1_1_mem_tracker_1a2b39a5ff64ac3a42b9d440681c643163"></a>
<p class="NDLRefMemberFunction">static void*  ms_pvBreakOnAllocRangeStart</p>
<p class="NDLRefMemberDescription">The tracker will assert when the allocation unit's memory address equals this value upon allocate/reallocate/deallocate. </p>

<a name="classefd_1_1_mem_tracker_1ab4beeeac1ef4ee9ca69a5511df5c4d2b"></a>
<p class="NDLRefMemberFunction">static void*  ms_pvBreakOnAllocRangeEnd</p>
<p class="NDLRefMemberDescription">The tracker will assert when the allocation unit's memory address equals this value upon allocate/reallocate/deallocate. </p>

<a name="classefd_1_1_mem_tracker_1a167432099449352c8d68c55386c6a7f1"></a>
<p class="NDLRefMemberFunction">static const char*  ms_pcBreakOnFunctionName</p>
<p class="NDLRefMemberDescription">The tracker will assert when the allocation unit's m_pcFunc equals this value upon allocate/reallocate. </p>

<a name="classefd_1_1_mem_tracker_1a952c3c326952e684c9831fd928ef7e8d"></a>
<p class="NDLRefMemberFunction">static size_t  ms_stBreakOnSizeRequested</p>
<p class="NDLRefMemberDescription">The tracker will assert when the allocation unit's size equals this value. </p>
<a name="public_attributes"></a>
<p class="NDLRefHead1">Public Attributes</p>


<a name="classefd_1_1_mem_tracker_1a26239942d3d6bc3fc807e466198922f1"></a>
<p class="NDLRefMemberFunction">size_t  m_stActiveMemory</p>
<p class="NDLRefMemberDescription">Tracks the current amount of memory allocated in bytes. </p>

<a name="classefd_1_1_mem_tracker_1a790e18de4b6bf9017b9c48189d4ef234"></a>
<p class="NDLRefMemberFunction">size_t  m_stPeakMemory</p>
<p class="NDLRefMemberDescription">Tracks the maximum amount of memory (in bytes) used at any point in the past by the application. </p>
<p class="NDLRefMemberDetailedDescription">This corresponds to the "high water mark" for the application. </p>

<a name="classefd_1_1_mem_tracker_1aa97986bcd13544cf92b47865468564f6"></a>
<p class="NDLRefMemberFunction">size_t  m_stAccumulatedMemory</p>
<p class="NDLRefMemberDescription">Tracks the accumulated total amount of memory (in bytes) used by the application. </p>

<a name="classefd_1_1_mem_tracker_1a78f641955ad03a63ce23b10e8811499b"></a>
<p class="NDLRefMemberFunction">size_t  m_stUnusedButAllocatedMemory</p>
<p class="NDLRefMemberDescription">Tracks the total amount of memory (in bytes) that has been allocated but still filled with the sentinel bytes when deallocated. </p>

<a name="classefd_1_1_mem_tracker_1a52d23fc5604dd81fe08b46ba02b87a14"></a>
<p class="NDLRefMemberFunction">size_t  m_stActiveAllocationCount</p>
<p class="NDLRefMemberDescription">Tracks the current number of allocations that are active. </p>

<a name="classefd_1_1_mem_tracker_1a0c05264ca6392a9fa629ba373a3d1131"></a>
<p class="NDLRefMemberFunction">size_t  m_stPeakAllocationCount</p>
<p class="NDLRefMemberDescription">Tracks the maximum number of allocations used at any point in the past by the application. </p>

<a name="classefd_1_1_mem_tracker_1a2e598b4c71098ddadd802087739a1c75"></a>
<p class="NDLRefMemberFunction">size_t  m_stAccumulatedAllocationCount</p>
<p class="NDLRefMemberDescription">Tracks the accumulated number of allocations made by the application. </p>

<a name="classefd_1_1_mem_tracker_1a95d79452ce58544e2a630637d7fbab02"></a>
<p class="NDLRefMemberFunction">size_t  m_stActiveTrackerOverhead</p>
<p class="NDLRefMemberDescription">Tracks the current amount of memory (in bytes) used by the memory] tracking system. </p>
<p class="NDLRefMemberDetailedDescription">Note that this number is not included in m_stActiveMemory. </p>

<a name="classefd_1_1_mem_tracker_1a8f466d437b647219d219c1cd3083cf38"></a>
<p class="NDLRefMemberFunction">size_t  m_stPeakTrackerOverhead</p>
<p class="NDLRefMemberDescription">Tracks the maximum amount of memory (in bytes) used by the memory tracking system in the past. </p>
<p class="NDLRefMemberDetailedDescription">Note that this number is not included in m_stPeakMemory. </p>

<a name="classefd_1_1_mem_tracker_1a0df7bbc2a0ccd6b807cc43a557bda98f"></a>
<p class="NDLRefMemberFunction">size_t  m_stAccumulatedTrackerOverhead</p>
<p class="NDLRefMemberDescription">Tracks the total amount of memory (in bytes) used by the memory tracking system. </p>
<p class="NDLRefMemberDetailedDescription">Note that this number is not included in m_stAccumulatedMemory. </p>

<a name="classefd_1_1_mem_tracker_1a560b17392cbc91e34bff5d69cc4e7a90"></a>
<p class="NDLRefMemberFunction">size_t  m_stActiveExternalMemory</p>
<p class="NDLRefMemberDescription">Tracks the total amount of memory (in bytes) of external memory. </p>

<a name="classefd_1_1_mem_tracker_1afb5121ca93f2c285eaa86aab42c66478"></a>
<p class="NDLRefMemberFunction">size_t  m_stPeakExternalMemory</p>
<p class="NDLRefMemberDescription">Tracks the peak amount of memory (in bytes) of external memory. </p>

<a name="classefd_1_1_mem_tracker_1a5f6a919d16fa3ccd6e4c1a5fd98f6127"></a>
<p class="NDLRefMemberFunction">size_t  m_stAccumulatedExternalMemory</p>
<p class="NDLRefMemberDescription">Tracks the accumulated total amount of memory (in bytes) of external memory. </p>

<a name="classefd_1_1_mem_tracker_1a89ed016e11f209923bf189f819f53b27"></a>
<p class="NDLRefMemberFunction">size_t  m_stActiveExternalAllocationCount</p>
<p class="NDLRefMemberDescription">Tracks the total number of active memory allocations of external memory. </p>

<a name="classefd_1_1_mem_tracker_1ab2a313ad86664e6379f529503fe556d6"></a>
<p class="NDLRefMemberFunction">size_t  m_stPeakExternalAllocationCount</p>
<p class="NDLRefMemberDescription">Tracks the peak number of memory allocations of external memory. </p>

<a name="classefd_1_1_mem_tracker_1ab5ab01ed2a5d775a776c0384484ad992"></a>
<p class="NDLRefMemberFunction">size_t  m_stAccumulatedExternalAllocationCount</p>
<p class="NDLRefMemberDescription">Tracks the total amount of memory of external memory over the app's lifetime. </p>

<a name="classefd_1_1_mem_tracker_1a7edac1206bd77c6bdc3639f2687c3df1"></a>
<p class="NDLRefMemberFunction">double  m_fPeakMemoryTime</p>
<p class="NDLRefMemberDescription">Tracks the point in time as reported by GetCurrentTimeInSec when m_stPeakMemory was <span class="NDLSystemFont"><a href="efd__set.htm">set</a></span> to its current value. </p>

<a name="classefd_1_1_mem_tracker_1ae8e3ce733919d0c44c9276c14dd0eb5d"></a>
<p class="NDLRefMemberFunction">double  m_fPeakAllocationCountTime</p>
<p class="NDLRefMemberDescription">Tracks the point in time as reported by GetCurrentTimeInSec when m_stPeakAllocationCount was <span class="NDLSystemFont"><a href="efd__set.htm">set</a></span> to its current value. </p>
<a name="public_static_methods"></a>
<p class="NDLRefHead1">Public Static Methods</p>


<a name="classefd_1_1_mem_tracker_1ad0319e960b4b2b7e97a2e07d14c185a9"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">MemTracker</span>*  Get()</p>
<p class="NDLRefMemberDetailedDescription">Accessor for the singleton instance of the <span class="NDLSystemFont">MemTracker</span></p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classefd_1_1_mem_tracker_1ae742c29d7f7815c657b28901d9fb6b8f"></a>
<p class="NDLRefMemberFunction">MemTracker(<br/><span class="NDLSystemFont"><a href="efd__IAllocator.htm">IAllocator</a></span>* pkActualAllocator, <br/><span class="NDLSystemFont">bool</span> bWriteToLog = false, <br/>unsigned int uiInitialSize = 65536, <br/>unsigned int uiGrowBy = 4096, <br/><span class="NDLSystemFont">bool</span> bAlwaysValidateAll = false, <br/><span class="NDLSystemFont">bool</span> bCheckArrayOverruns = true, <br/><span class="NDLSystemFont">bool</span> assertOutsideOfMain = true)</p>
<p class="NDLRefMemberDescription">Creates a <span class="NDLSystemFont">MemTracker</span>. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pkActualAllocator</span></td>
    <td>Perform all actual allocations. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiInitialSize</span></td>
    <td>Size of the initial pool of allocation tracking units </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiGrowBy</span></td>
    <td>The growth factor of the pool of allocation units when no units are available. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">bAlwaysValidateAll</span></td>
    <td>If true, the tracker will test all allocation units for errors upon alloc, realloc, or free. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">bCheckArrayOverruns</span></td>
    <td>If true, the tracker will add sentinel bytes to the beginning and end of the allocation to guarantee that code does not stomp over the end of the array. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">bWriteToLog</span></td>
    <td>If false, memory tracking is enabled, but no memory logs are written. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">assertOutsideOfMain</span></td>
    <td>When true, the <span class="NDLSystemFont">MemTracker</span> will assert if an attempt is made to allocate memory outside of main. This flag is useful for identifying and removing pre-main allocations. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_mem_tracker_1ae14dabadf9660f61254246ef5dda381d"></a>
<p class="NDLRefMemberFunction">virtual ~MemTracker()</p>
<p class="NDLRefMemberDescription">Destructor. </p>

<a name="classefd_1_1_mem_tracker_1a488368b21a0afe31f0a80ecf718a193d"></a>
<p class="NDLRefMemberFunction">virtual void*  Allocate(<br/>size_t& stSizeInBytes, <br/>size_t& stAlignment, <br/><span class="NDLSystemFont"><a href="efd__MemHint.htm">MemHint</a></span> kHint, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ad9c81f78b405eb346c527c73002e5382">MemEventType</a></span> eEventType, <br/>const char* pcFile, <br/>int iLine, <br/>const char* pcFunction)</p>
<p class="NDLRefMemberDescription">Allocate stSizeInBytes bytes of memory guaranteeing stAlignment alignment if possible for the returned address. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">that the size and alignment are passed-by-reference. This allows the allocator to adjust the values internally and pass the results back to the caller. This functionality is useful in the event of nesting allocators for memory tracking and debugging purposes. The additional arguments are used by memory tracking and debugging routines.</p><span class="NDLSystemFont"><a href="efd__MemHint.htm">MemHint</a></span> indicates the intended usage for the memory being allocated which allows the allocator to optionally pick the most efficient memory type or location, as well as providing additional information to the memory tracker when enabled.</p>
<p class="NDLRefMemberDetailedDescription">The eEventType argument indicates what external method was used to allocate the data. This may provide additional information to a memory debugging system or may be used at runtime to determine allocator behavior.</p>
<p class="NDLRefMemberDetailedDescription">pcFile, iLine, and pcFunction are the file name, line number, and function name for the function calling Allocate. </p>

<a name="classefd_1_1_mem_tracker_1a07962fac748e716cb79fdce7444ee564"></a>
<p class="NDLRefMemberFunction">virtual void  Deallocate(<br/>void* pvMemory, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ad9c81f78b405eb346c527c73002e5382">MemEventType</a></span> eEventType, <br/>size_t stSizeInBytes)</p>
<p class="NDLRefMemberDescription">Free the memory at the specified address. </p>
<p class="NDLRefMemberDetailedDescription">In some situations, the deallocation routine may know how large it was when allocated. If so, the stSizeInBytes argument will be the size initially requested. If this size is unknown, the correct value for the argument is EE_MEM_DEALLOC_SIZE_DEFAULT.</p>
<p class="NDLRefMemberDetailedDescription">The eEventType argument indicates what external method was used to deallocate the data. This may provide additional information to a memory debugging system or may be used at runtime to determine allocator behavior. </p>

<a name="classefd_1_1_mem_tracker_1a950876315eabb3f07b70e8e8c0b187f9"></a>
<p class="NDLRefMemberFunction">virtual void*  Reallocate(<br/>void* pvMemory, <br/>size_t& stSizeInBytes, <br/>size_t& stAlignment, <br/><span class="NDLSystemFont"><a href="efd__MemHint.htm">MemHint</a></span> kHint, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ad9c81f78b405eb346c527c73002e5382">MemEventType</a></span> eEventType, <br/>size_t stSizeCurrent, <br/>const char* pcFile, <br/>int iLine, <br/>const char* pcFunction)</p>
<p class="NDLRefMemberDescription">Reallocate the memory at the specified address, guaranteeing stAlignment if possible for the returned address. </p>
<p class="NDLRefMemberDetailedDescription">Note that if stSizeInBytes is zero, this method functions like Deallocate. If pvMemory is NULL, this method functions exactly like Allocate. In some cases, the outer memory management system may know the size prior to deallocation or reallocation, in this case stSizeCurrent should match the size and the compiler provides size hint should be provided. If this size is unknown, the correct value for the argument is EE_MEM_DEALLOC_SIZE_DEFAULT.</p>
<p class="NDLRefMemberDetailedDescription"><span class="NDLSystemFont"><a href="efd__MemHint.htm">MemHint</a></span> indicates the intended usage for the memory being allocated which allows the allocator to optionally pick the most efficient memory type or location, as well as providing additional information to the memory tracker when enabled.</p>
<p class="NDLRefMemberDetailedDescription">The eEventType argument indicates what external method was used to reallocate the date. This may provide additional information to a memory debugging system or may be used at runtime to determine allocator behavior.</p>
<p class="NDLRefMemberDetailedDescription">pcFile, iLine, and pcFunction are the file name, line number, and function name for the function calling Reallocate. </p>

<a name="classefd_1_1_mem_tracker_1a9e7fb296b03d88017572113ee541e63b"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  TrackAllocate(<br/>const void *const  pvMemory, <br/>size_t stSizeInBytes, <br/><span class="NDLSystemFont"><a href="efd__MemHint.htm">MemHint</a></span> kHint, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ad9c81f78b405eb346c527c73002e5382">MemEventType</a></span> eEventType, <br/>const char* pcFile, <br/>int iLine, <br/>const char* pcFunction)</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_mem_tracker_1afbe1011cb39ee39af38d196018bfdbf2"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  TrackDeallocate(<br/>const void *const  pvMemory, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ad9c81f78b405eb346c527c73002e5382">MemEventType</a></span> eEventType)</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_mem_tracker_1abb49289a229abaa3ea65a6ac463ca77e"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  SetMarker(<br/>const char* pcMarkerType, <br/>const char* pcClassifier, <br/>const char* pcString)</p>
<p class="NDLRefMemberDescription">Function to allow the marking of memory allocations. </p>
<p class="NDLRefMemberDetailedDescription">This is used by a memory tracker / debugger to identify specific allocations. pcMarkerType, pcClassifier, and pcString are all free form strings that uniquely identify the allocation. </p>

<a name="classefd_1_1_mem_tracker_1a8aaab8a33eecb7969ffebafdcf1a5e9c"></a>
<p class="NDLRefMemberFunction">virtual void  Initialize()</p>
<p class="NDLRefMemberDescription">Called by the memory manager during Init(). </p>

<a name="classefd_1_1_mem_tracker_1acc90becbc488fd125ebedb2709252986"></a>
<p class="NDLRefMemberFunction">virtual void  Shutdown()</p>
<p class="NDLRefMemberDescription">Called by the memory manager during <span class="NDLSystemFont"><a href="efd__MemTracker.htm#classefd_1_1_mem_tracker_1acc90becbc488fd125ebedb2709252986">Shutdown()</a></span>. </p>

<a name="classefd_1_1_mem_tracker_1a28594e6face2231c45b9b722a45ea750"></a>
<p class="NDLRefMemberFunction">virtual void  PerThreadInit()</p>
<p class="NDLRefMemberDescription">Initialize any per-thread aspects of the allocator. Called once for each thread. </p>

<a name="classefd_1_1_mem_tracker_1a678cd332dc280c0e490b66731862061e"></a>
<p class="NDLRefMemberFunction">virtual void  PerThreadShutdown()</p>
<p class="NDLRefMemberDescription">Shutdown any per-thread aspects of the allocator. Called once for each thread. </p>

<a name="classefd_1_1_mem_tracker_1a058419326192d059f54e7ed41ec066c0"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  VerifyAddress(const void* pvMemory)</p>
<p class="NDLRefMemberDescription">Verify the provided address is valid and return false if it is not. </p>

<a name="classefd_1_1_mem_tracker_1a990f2e32be402517bd26ac450ecec788"></a>
<p class="NDLRefMemberFunction">virtual void*  FindContainingAllocation(const void* pvMemory)</p>
<p class="NDLRefMemberDescription">Find the address of an allocation that contains pvMemory. </p>

<a name="classefd_1_1_mem_tracker_1a5b555d25e929232d6f752c60df0d9090"></a>
<p class="NDLRefMemberFunction">size_t  GetCurrentAllocationID() const</p>
<p class="NDLRefMemberDescription">Determine the counter for the current allocation ID. </p>

<a name="classefd_1_1_mem_tracker_1a2f36d39db87acb987849eec880a895dd"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="efd__AllocUnit.htm">AllocUnit</a></span>*  FindAllocUnit(const void* pvMem) const</p>
<p class="NDLRefMemberDescription">Find the allocation for the given memory. </p>

<a name="classefd_1_1_mem_tracker_1a2da5fbbd4613b7957c34193782c91927"></a>
<p class="NDLRefMemberFunction">void  ReportActiveAllocations(<span class="NDLSystemFont"><a href="efd__MemTracker.htm#classefd_1_1_mem_tracker_1a4e2387f1e5e162f30a958271286f35c9">ReportActiveAllocUnit</a></span> pfnReportCallBack)</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_mem_tracker_1a0c34b1dceca867c8f5c2631439771c77"></a>
<p class="NDLRefMemberFunction">virtual void  ResetSummaryStats()</p>
<p class="NDLRefMemberDescription">Reset the counts on all summary stats. </p>
<p class="NDLRefMemberDetailedDescription">This can potentially be a hazardous operation and should be used with caution. </p>

<a name="classefd_1_1_mem_tracker_1ac144d061a2b2fa267b057152310c8ea4"></a>
<p class="NDLRefMemberFunction">void  OutputLeakedMemoryToDebugStream(<span class="NDLSystemFont">bool</span> bUseLog) const</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_mem_tracker_1a5a0598c64ea7593eb482e50a57768e0c"></a>
<p class="NDLRefMemberFunction">void  OutputAllocUnitToDebugStream(const <span class="NDLSystemFont"><a href="efd__AllocUnit.htm">AllocUnit</a></span>* pkUnit) const</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_mem_tracker_1a63559949286de26deee532633a6be967"></a>
<p class="NDLRefMemberFunction">void  OutputMemorySummaryToDebugStream() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_mem_tracker_1ae82487bf29ee944394a09883bb032d09"></a>
<p class="NDLRefMemberFunction">void  OutputAllocUnitToLog(<br/>const <span class="NDLSystemFont"><a href="efd__AllocUnit.htm">AllocUnit</a></span>* pkUnit, <br/><span class="NDLSystemFont">bool</span> outputDebugString = false) const</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_mem_tracker_1a560f0488d03aaa69f18593c7c225040a"></a>
<p class="NDLRefMemberFunction">void  OutputActiveToDebugStream(<br/>const char* pcStringId, <br/>size_t stMinAllocID) const</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_mem_tracker_1ae2aeef8accbb9ca98750c1bc82aea8e6"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetAlwaysValidateAll() const</p>
<p class="NDLRefMemberDescription">Determine whether or not the tracker validates all of its internal allocation units upon allocate/deallocate/reallocate. </p>

<a name="classefd_1_1_mem_tracker_1a19302a5215d578ed450c2d9ef26082ac"></a>
<p class="NDLRefMemberFunction">void  SetAlwaysValidateAll(<span class="NDLSystemFont">bool</span> bOn)</p>
<p class="NDLRefMemberDescription">Sets m_bAlwaysValidateAll. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">bOn</span></td>
    <td>boolean value </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_mem_tracker_1afe5b5d480d721cc513226589ea0bc98a"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetCheckForArrayOverruns() const</p>
<p class="NDLRefMemberDescription">Check to see if the tracker will try to detect memory overflows. </p>

<a name="classefd_1_1_mem_tracker_1a03ecc744175595024ef6efa45005b48a"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  ValidateAllocUnit(const <span class="NDLSystemFont"><a href="efd__AllocUnit.htm">AllocUnit</a></span>* pkUnit) const</p>
<p class="NDLRefMemberDescription">Determine if the memory specified by an alloc unit is valid. </p>

<a name="classefd_1_1_mem_tracker_1ad2d659bb43878b9a2c41c91894aaab9d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  ValidateAllAllocUnits() const</p>
<p class="NDLRefMemberDescription">Validate all alloc units. </p>

<a name="classefd_1_1_mem_tracker_1a66f871c647d2c85e4d18c44675d48757"></a>
<p class="NDLRefMemberFunction">void  SetWriteToLog(<span class="NDLSystemFont">bool</span> bOn)</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_mem_tracker_1a0bf8f970e9fd025fca3b8f4b4f951810"></a>
<p class="NDLRefMemberFunction">virtual void  CreateMemoryLogHandler()</p>
<p class="NDLRefMemberDescription">Function to allow the memory allocator to create an <span class="NDLSystemFont"><a href="efd__IMemLogHandler.htm">IMemLogHandler</a></span> for logging memory allocations. </p>
<p class="NDLRefMemberDetailedDescription">This method will be called on the allocator after the <span class="NDLSystemFont"><a href="efd__MemManager.htm">MemManager</a></span> has been constructed.</p>
<p class="NDLRefMemberDetailedDescription">The IMemHandler implementation used is defined in the implementation of <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aee543b044968b09c686e0aaecbff381a">InitializeMemoryLogHandler()</a></span>. The method <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aee543b044968b09c686e0aaecbff381a">InitializeMemoryLogHandler()</a></span> is explicitly defined as an extern to allow applications to specify a unique implementation of <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aee543b044968b09c686e0aaecbff381a">InitializeMemoryLogHandler()</a></span>. This allows applications to specify the IMemHandler implementation used by <span class="NDLSystemFont">MemTracker</span>. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
