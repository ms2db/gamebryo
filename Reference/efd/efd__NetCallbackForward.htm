<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::NetCallbackForward</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::NetCallbackForward</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="efd__INetCallback.htm">efd::INetCallback</a></span></p>


<p class="NDLRefHeaderFile">&lt;INetCallback.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classefd_1_1_net_callback_forward.gif" alt="Inheritance graph for efd::NetCallbackForward"/>
  <p class="FigureCaption">Inheritance graph for efd::NetCallbackForward</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">This class is a helper for handling multiple <span class="NDLSystemFont"><a href="efd__INetCallback.htm">INetCallback</a></span> callbacks in a single class. </p>
<p class="NDLNormal">You can use <span class="NDLSystemFont">NetCallbackForward</span> to route the HandleNetMessage call to another function with a different name but the same syntax. Simply declare a variable of type <span class="NDLSystemFont">NetCallbackForward</span> using the parent class and the handler method as the template parameters. For example, to add two different handlers to class Foo you might use:</p>
<p class="NDLNormal">
<pre>          class Foo : public efd::ISystemService
          {
          public:
              void HandleServerMessage(const IMessage* pIncoming, const ConnectionID& sender);
              void HandleClientMessage(const IMessage* pIncoming, const ConnectionID& sender);

          public:
              void OnInit()
              {
                  INetService* pNet = m_pServiceManager-&gt;GetSystemServiceAs&lt;INetService&gt;();
                  pNet-&gt;Subscribe(ServerCategory, kMASK_ALL, &m_ServerMessageHandler);
                  pNet-&gt;Subscribe(ClientCategory, kMASK_ALL, &m_ClientMessageHandler);
              }
          };
</pre>
</p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classefd_1_1_net_callback_forward_1a4b865e415bc78ec0bc7369a69b6a0849"></a>
<p class="NDLRefMemberFunction">NetCallbackForward(T* i_pHandler)</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_net_callback_forward_1a5591a762b59a972eb732a5d60b11880a"></a>
<p class="NDLRefMemberFunction">NetCallbackForward()</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_net_callback_forward_1a1f6a7558fc926e6e294e216af83bfbab"></a>
<p class="NDLRefMemberFunction">void  Set(T* i_pHandler)</p>
<p class="NDLRefMemberFunction"></p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
