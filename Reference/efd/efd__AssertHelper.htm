<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::AssertHelper</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::AssertHelper</p>


<p class="NDLRefHeaderFile">&lt;Helpers.h&gt;</p>


<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">The <span class="NDLSystemFont">AssertHelper</span> class is used to capture all the parameter information for an assert for later use. </p>

<a name="public_static_attributes"></a>
<p class="NDLRefHead1">Public Static Attributes</p>


<a name="classefd_1_1_assert_helper_1a36d0a09a523d35d04a8f69f86793d282"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a02da74c5f95666d41c684efde9efcd88">efd::SInt8</a></span>  kIgnore</p>
<p class="NDLRefMemberDescription">Value returned by an assert handler to say the assert should be ignored for the rest of the applications execution. </p>

<a name="classefd_1_1_assert_helper_1aa9141aa57877ba2a4f4def5bf1ce3d71"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a02da74c5f95666d41c684efde9efcd88">efd::SInt8</a></span>  kIgnoreOnce</p>
<p class="NDLRefMemberDescription">Value returned by an assert handler to say the assert should be ignored this time only. </p>

<a name="classefd_1_1_assert_helper_1a83c13a4fcff3ec62a2420c90645ecdfc"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a02da74c5f95666d41c684efde9efcd88">efd::SInt8</a></span>  kDebugAbort</p>
<p class="NDLRefMemberDescription">Value returned by an assert handler to invoke a debug break, core, etc... </p>

<a name="classefd_1_1_assert_helper_1a3725d1efad552590416472c03e05f6e9"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a02da74c5f95666d41c684efde9efcd88">efd::SInt8</a></span>  kInvalidReturn</p>
<p class="NDLRefMemberDescription">This is a return value that is guaranteed never to be returned from DoAssert or DoVerify. </p>
<a name="public_static_methods"></a>
<p class="NDLRefHead1">Public Static Methods</p>


<a name="classefd_1_1_assert_helper_1a39d49840f74813c9ec7057aab85451c0"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a02da74c5f95666d41c684efde9efcd88">efd::SInt8</a></span>  DoAssert(<br/>const char* pPredicate, <br/>const char* pFile, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span> line, <br/>const char* pFunction, <br/>const char* pMessage = 0)</p>
<p class="NDLRefMemberDescription">Passes the arguments from an assert statement to the logging system for output. </p>
<p class="NDLRefMemberDetailedDescription">This is only called once we already know the assert has failed.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pPredicate</span></td>
    <td>The string version of the assert predicate (expression that was asserted to be true). </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pFile</span></td>
    <td>The path and filename that the assert occurred in. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">line</span></td>
    <td>The line number the assert occurred at. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pFunction</span></td>
    <td>The function the assert occurred in, if available </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pMessage</span></td>
    <td>Plain string for the assert statement, or NULL to use the predicate string as the message. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Value to indicate how the assert should be handled </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_assert_helper_1a411d1a10faf8aabb471b3de322fde4a0"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a02da74c5f95666d41c684efde9efcd88">efd::SInt8</a></span>  DoVerify(<br/>const char* pPredicate, <br/>const char* pFile, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span> line, <br/>const char* pFunction, <br/>const char* pMessage = 0)</p>
<p class="NDLRefMemberDescription">Passes the arguments from a verify statement to the logging system for output. </p>
<p class="NDLRefMemberDetailedDescription">This is only called once we already know the verify has failed.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pPredicate</span></td>
    <td>The string version of the assert predicate (expression that was asserted to be true). </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pFile</span></td>
    <td>The path and filename that the assert occurred in. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">line</span></td>
    <td>The line number the assert occurred at. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pFunction</span></td>
    <td>The function the assert occurred in. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pMessage</span></td>
    <td>Plain string for the verify statement, or NULL to use the predicate string as the message. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Value to indicate how the assert should be handled. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_assert_helper_1a63b434363e6a001b0195b8102990d317"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a1b6261a63501c421a3d0e49113accd99">AssertHandler</a></span>  GetAssertHandler()</p>
<p class="NDLRefMemberDescription">Gets the assert handler for the application. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>The assert handler </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_assert_helper_1a1f2209b66c4a3865ef5e2645853aeb05"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a1b6261a63501c421a3d0e49113accd99">AssertHandler</a></span>  SetAssertHandler(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a1b6261a63501c421a3d0e49113accd99">AssertHandler</a></span> handler)</p>
<p class="NDLRefMemberDescription">Sets the assert handler for the application. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">handler</span></td>
    <td>The new assert handler to call </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The old assert handler </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_assert_helper_1adf3fbde7465228a96c8939eaf4cc8f18"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a02da74c5f95666d41c684efde9efcd88">efd::SInt8</a></span>  IgnoringAssertHandler(<br/>const char* pFile, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span> line, <br/>const char* pFunction, <br/>const char* pPredicate, <br/>const char* pMessage, <br/>const char* pStackTrace, <br/><span class="NDLSystemFont">efd::Bool</span> isAVerify)</p>
<p class="NDLRefMemberDescription">An assert handler that prints a message but otherwise ignores the assert and attempts to continue. </p>
<p class="NDLRefMemberDetailedDescription">Most commonly used in automated tests. </p>

<a name="classefd_1_1_assert_helper_1aa2232a1ea64f2f0d9ec557ee4927b6ff"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a02da74c5f95666d41c684efde9efcd88">efd::SInt8</a></span>  StandardAssertHandler(<br/>const char* pFile, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span> line, <br/>const char* pFunction, <br/>const char* pPredicate, <br/>const char* pMessage, <br/>const char* pStackTrace, <br/><span class="NDLSystemFont">efd::Bool</span> isAVerify)</p>
<p class="NDLRefMemberDescription">An assert handler that logs the message and breaks. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
