<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::IBase</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::IBase</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="efd__MemObject.htm">efd::MemObject</a></span></p>


<p class="NDLRefHeaderFile">&lt;IBase.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classefd_1_1_i_base.gif" alt="Inheritance graph for efd::IBase"/>
  <p class="FigureCaption">Inheritance graph for efd::IBase</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">Abstract base class for all interfaces in the Emergent <span class="NDLSystemFont"><a href="efd__ServiceManager.htm">ServiceManager</a></span>. </p>
<p class="NDLNormal"><span class="NDLSystemFont">IBase</span> is the base class for all interfaces in the Emergent <span class="NDLSystemFont"><a href="efd__ServiceManager.htm">ServiceManager</a></span>. It provides two major capabilities: 1) Run-Time Type Identification (RTTI). This capability enables a generic interface to be queried for its derived types. 2) Reference Counting. This capability enables a generic interface to be used throughout the codebase, yet still be deleted at the appropriate time.</p>
<p class="NDLNormal">
<p class="NDLNormal">Unlike COM's implementation of <span class="NDLSystemFont">IBase</span>, there is no QueryInterface method. Instead, a generic type conversion process is applied. </p>
<p class="NDLNormal">RefCounts are not incremented when performing a type cast. Instead, values should be stored in smart pointers. </p>
<p class="NDLNormal">ClassIDs must be unique within the context of an application. Values for ClassIDs that are declared by EE_DECLARE_EXTERNAL_CLASSID are restricted to the 0x06200000-0x062fffff range. </p></p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classefd_1_1_i_base_1afb95ecc142d13927765aaf79e464e89c"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  TypeCast(<br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">ClassID</a></span> id, <br/>void ** ppValue) const = 0</p>
<p class="NDLRefMemberDescription">Cast "this" to a pointer of the specified class type. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">TypeCast does NOT increment the reference count internally, which means that the inner workings of TypeCast CANNOT take a reference to the value returned through ppValue.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">id</span></td>
    <td>ClassID that "this" should be cast into. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">ppValue</span></td>
    <td>Address of the pointer that will hold the type-cast "this" pointer. This value will be NULL if the cast was not successful. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Boolean True if the cast succeeded; false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_base_1a5424fc94de84753861eaf38bdec85aad"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  TypeCast(<br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">ClassID</a></span> id, <br/>const void ** ppValue) const = 0</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_i_base_1aa01d3e9eb8f334defaafc174a4c97117"></a>
<p class="NDLRefMemberFunction">virtual const <span class="NDLSystemFont"><a href="efd__ClassInfo.htm">ClassInfo</a></span>*  GetClassDesc() const = 0</p>
<p class="NDLRefMemberDescription">Get access to the class RTTI information. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription"><span class="NDLSystemFont"><a href="efd__IBase.htm#classefd_1_1_i_base_1aa01d3e9eb8f334defaafc174a4c97117">GetClassDesc()</a></span> is virtual, so this function will return the most derived <span class="NDLSystemFont"><a href="efd__ClassInfo.htm">ClassInfo</a></span> by default. </p>
<p class="NDLRefMemberDetailedDescription">The function is named "GetClassDesc()" to avoid name collisions with Microsoft Windows' "GetClassInfo()".</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>const ClassInfo* : Pointer to <span class="NDLSystemFont"><a href="efd__ClassInfo.htm">ClassInfo</a></span> instance. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_base_1a43f3de99ec1dc7d7ea9ece3f8f1e6d7c"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">ClassID</a></span>  GetClassID() const</p>
<p class="NDLRefMemberDescription">Helper method to directly get ClassID. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">GetClassDesc is virtual, so this function will return the most derived ClassID by default. GetClassID is virtual to support creating multiple "virtual" classes from the same C++ class. E.g., using MessageWrapper&lt;&gt;, or supporting subclasses that do not use EE_DECLARE_CLASS macros.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>ClassID Returned class ID. </td>
</tr>

        </tbody>
    </table>
</div>


 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
