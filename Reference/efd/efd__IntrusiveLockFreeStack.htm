<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::IntrusiveLockFreeStack</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::IntrusiveLockFreeStack</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="efd__MemObject.htm">efd::MemObject</a></span></p>


<p class="NDLRefHeaderFile">&lt;IntrusiveLockFreeStack.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classefd_1_1_intrusive_lock_free_stack.gif" alt="Inheritance graph for efd::IntrusiveLockFreeStack"/>
  <p class="FigureCaption">Inheritance graph for efd::IntrusiveLockFreeStack</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">This is an implementation of an intrusive single-producer, single-consumer lock-free <span class="NDLSystemFont"><a href="efd__stack.htm">stack</a></span>. </p>
<p class="NDLNormal">When a node is pushed into the <span class="NDLSystemFont"><a href="efd__stack.htm">stack</a></span>, the <span class="NDLSystemFont"><a href="efd__stack.htm">stack</a></span> takes ownership for the node. When a node is popped from the <span class="NDLSystemFont"><a href="efd__stack.htm">stack</a></span>, the <span class="NDLSystemFont"><a href="efd__stack.htm">stack</a></span> gives ownership to the caller.</p>
<p class="NDLNormal">This class does no memory allocations or deletions unless nodes are left in it at destruction time.</p>
<p class="NDLNormal">The NodeType template parameter is required to have a public member "NodeType* m_pNext" which will be used as part of the <span class="NDLSystemFont"><a href="efd__stack.htm">stack</a></span> data structure for the duration of it's stay in the <span class="NDLSystemFont"><a href="efd__stack.htm">stack</a></span>. There are no other requirements on NodeType. </p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classefd_1_1_intrusive_lock_free_stack_1a7e2bb2d10c6f86a29bf111404aa09791"></a>
<p class="NDLRefMemberFunction">IntrusiveLockFreeStack()</p>
<p class="NDLRefMemberDescription">Constructs a single-reader, single-writer lock-free <span class="NDLSystemFont"><a href="efd__stack.htm">stack</a></span>. </p>
<p class="NDLRefMemberDetailedDescription">The producer and consumer threads must be different.</p>
<p class="NDLRefMemberDetailedDescription">Single-reader: Only one thread (the consumer thread) may be issuing calls to Pop at any given time. Single-writer: Only one thread (the producer thread) may be issuing calls to Push at any given time.</p>
<p class="NDLRefMemberDetailedDescription">The producer and consumer threads can/should be different. A single thread may act as both producer and consumer only if there are no other threads producing or consuming at that time (the key is that there should never be multiple producers or multiple consumers).</p>
<p class="NDLRefMemberDetailedDescription">These requirements are not internally enforced (if ignored, the container will become inconsistent). For example, it is up to the caller to ensure that only one thread is acting as a producer at any given moment.</p>
<p class="NDLRefMemberDetailedDescription">Requirements on NodeType:</p>
<ul>
<li>T must have a public member NodeType* m_pNext. </li></ul>

<a name="classefd_1_1_intrusive_lock_free_stack_1a2328965091edd2d8e6833e8bef1484fe"></a>
<p class="NDLRefMemberFunction">~IntrusiveLockFreeStack()</p>
<p class="NDLRefMemberDescription">Destructs a lock-free <span class="NDLSystemFont"><a href="efd__stack.htm">stack</a></span>. </p>
<p class="NDLRefMemberDetailedDescription">The caller is responsible for ensuring that there are no threads currently pushing to or popping from the <span class="NDLSystemFont"><a href="efd__stack.htm">stack</a></span>. </p>

<a name="classefd_1_1_intrusive_lock_free_stack_1a3e08771854d2700d36eba1a4e1f8b4ba"></a>
<p class="NDLRefMemberFunction">void  Push(NodeType* newNode)</p>
<p class="NDLRefMemberDescription">Pushes a node on to the <span class="NDLSystemFont"><a href="efd__stack.htm">stack</a></span>. </p>
<p class="NDLRefMemberDetailedDescription">The caller gives up ownership of the node's memory. </p>

<a name="classefd_1_1_intrusive_lock_free_stack_1ab012f2bd323e6d0ba8cf9966a4cc9637"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  Pop(NodeType *& outValue)</p>
<p class="NDLRefMemberDescription">Pops a node from the <span class="NDLSystemFont"><a href="efd__stack.htm">stack</a></span> if the <span class="NDLSystemFont"><a href="efd__stack.htm">stack</a></span> is not empty. </p>
<p class="NDLRefMemberDetailedDescription">The caller takes ownership of the node's memory.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">outValue</span></td>
    <td>The node removed from the <span class="NDLSystemFont"><a href="efd__stack.htm">stack</a></span>. Only valid if the method returns True </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>bool True if a node was consumed (outResult is valid). False if the <span class="NDLSystemFont"><a href="efd__stack.htm">stack</a></span> was empty. </td>
</tr>

        </tbody>
    </table>
</div>


 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
