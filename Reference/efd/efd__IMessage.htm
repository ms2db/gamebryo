<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::IMessage</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::IMessage</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="efd__IStreamable.htm">efd::IStreamable</a></span></p>


<p class="NDLRefHeaderFile">&lt;IMessage.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classefd_1_1_i_message.gif" alt="Inheritance graph for efd::IMessage"/>
  <p class="FigureCaption">Inheritance graph for efd::IMessage</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">The base-level message class used as the prototype for other message classes. </p>
<p class="NDLNormal"><span class="NDLSystemFont">IMessage</span> is an interface. It must be derived from before being used. Derived classes must properly use Foundation RTTI to provide a unique ClassID.</p>
<p class="NDLNormal">A Message can be transmitted over the network, so must be able to be streamed. When it arrives it must be able to be Factoried, requiring the application to register a Factory method.</p>
<p class="NDLNormal"><span class="NDLSystemFont">IMessage</span> has rich debugging support. Each Message instance will have a unique identifier (counter) assigned to it as it is being transmitted. This allows the developer to use the Emergent logging system to track a message as it moves around the system. There are several settings available to explicitly log or break execution as a message passes certain phases. This can be done on a per instance basis. The class id system and message-specific support allows rich text logging of messages. All messaged sent via <span class="NDLSystemFont"><a href="efd__MessageService.htm">MessageService</a></span> must be subclassed from <span class="NDLSystemFont">IMessage</span>. The <span class="NDLSystemFont">IMessage</span> interface is use throughout the system to abstract specific message implementations.</p>
<p class="NDLNormal"><span class="NDLSystemFont">IMessage</span> instances are instantiated using EE_NEW. To facilitate delivery, consumers of the message must register a factory method with the Service Manager that knows how to construct a new message. This is then used in the messaging layer when receiving messages of a particular class. These behaviors are encapsulated in the IMessageWrapper and RegisterMessageWrapperFactory macros defined below.</p>
<p class="NDLNormal">The following sequence shows how to successfully create a new message class, and send / receive an <span class="NDLSystemFont">IMessage</span> base message.</p>
<p class="NDLNormal">
<ol>
<li>Subclass <span class="NDLSystemFont">IMessage</span> and give your new message class a unique ClassID.</li>
<li>Implement Serialize to marshal the contents of your message to an <span class="NDLSystemFont"><a href="efd__Archive.htm">Archive</a></span>.</li>
<li>Instantiate an instance of your message class using EE_NEW.</li>
<li>Use one of the <span class="NDLSystemFont"><a href="efd__MessageService.htm">MessageService</a></span> 'Send' methods to deliver the message to the Message Service.</li>
<li>On the receiving end, register a Message Factory for you message ClassID with the Service Manager so it knows how to demarshal your message.</li>
<li>Create a IMessageTarget instance that receives the incoming message and register this with the <span class="NDLSystemFont"><a href="efd__MessageService.htm">MessageService</a></span> giving it the message ClassID as an identifier.</li>
<li>Messages received are then routed to your IMessageHandler.</li></ol>The message, once delivered to the Message Service, is then owned by the Message Service. The receiver is not responsible for deallocation and can depend on memory being freed at the network layer. </p>

<a name="public_types"></a>
<p class="NDLRefHead1">Public Types</p>
<a name="classefd_1_1_i_message_1afdfa8fbecc48d28c9b10535d4a94b5a7"></a>
<p class=NDLRefHead2>efd::IMessage::MessageDebugFlags</p>


<p class="NDLRefMemberDescription">A <span class="NDLSystemFont"><a href="efd__set.htm">set</a></span> of debugging flags that enables the sender of the message to trace the message as it works its way through the system. </p>

<p class="NDLRefMemberDetailedDescription">These flags can be combined using the or (|) operator. </p>

<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">mdf_BreakOnFirstLocalDelivery</span></td>
    <td>Break when MessageServer considers delivery of this message. Will break even if no handlers are present. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">mdf_BreakOnEachLocalDelivery</span></td>
    <td>Break in <span class="NDLSystemFont"><a href="efd__MessageService.htm">MessageService</a></span> before calling each handler. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">mdf_BreakOnFirstNetDelivery</span></td>
    <td>Break when <span class="NDLSystemFont"><a href="../efdNetwork/efd__NetService.htm">NetService</a></span> considers delivery of this message. Will break even if no handlers are present. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">mdf_BreakOnEachNetDelivery</span></td>
    <td>Break in <span class="NDLSystemFont"><a href="../efdNetwork/efd__NetService.htm">NetService</a></span> before passing this message to each handler. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">mdf_BreakOnNetQueue</span></td>
    <td>Break in recv thread when adding this to the delivery <span class="NDLSystemFont"><a href="efd__queue.htm">queue</a></span>. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">mdf_BreakOnNetReceive</span></td>
    <td>Break when this message is read off the wire. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">mdf_BreakOnNetSend</span></td>
    <td>Break before this message is sent out on a transport. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">mdf_BreakOnLocalPost</span></td>
    <td>Break when posted added to the <span class="NDLSystemFont"><a href="efd__MessageService.htm">MessageService</a></span>. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">mdf_BreakOnDelayedLocalPost</span></td>
    <td>Break when posted with a delay to the <span class="NDLSystemFont"><a href="efd__MessageService.htm">MessageService</a></span>. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">mdf_TraceOnly</span></td>
    <td>Only print trace statements, do not break. </td>
</tr>

  </tbody>
</table>
</div>


<a name="public_attributes"></a>
<p class="NDLRefHead1">Public Attributes</p>


<a name="classefd_1_1_i_message_1a54cf8ed41d13e7223481f73e3a752271"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  m_uniqueIdentifier</p>
<p class="NDLRefMemberFunction"></p>
<a name="public_static_methods"></a>
<p class="NDLRefHead1">Public Static Methods</p>


<a name="classefd_1_1_i_message_1a91187ec998dfbc233995335613d71b4a"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span>  ClassIDToString(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span> type)</p>
<p class="NDLRefMemberDescription">Utility method to convert a message's classID into a human readable string. </p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classefd_1_1_i_message_1a93fc1a9d6b2a584bc8d6a117da8aa248"></a>
<p class="NDLRefMemberFunction">virtual void  Serialize(<span class="NDLSystemFont"><a href="efd__Archive.htm">efd::Archive</a></span>& io_ar)</p>
<p class="NDLRefMemberDescription">Serialize a polymorphic type to or from an <span class="NDLSystemFont"><a href="efd__Archive.htm">Archive</a></span>. </p>
<p class="NDLRefMemberDetailedDescription">This method must be overridden, but if your streamable object has no data the override can be an empty function. A typical implementation of this method will make one call to <span class="NDLSystemFont"><a href="../Namespaces/efd__Serializer.htm#namespaceefd_1_1_serializer_1a63e0b99047011bde53be44786ab9ee7b">efd::Serializer::SerializeObject</a></span> for each member of the class. If you are derived from another streamable class you should be sure to call to parent implementation of this method as well; it is recommended that the parent class be serialized first before adding the data for the derived class. If your class contains complex data such as STL-style contianers or pointers to allocated data then you can simplify the implementation of Serialize by using the templated helper functions in &lt;<span class="NDLSystemFont">efd/SerializeRoutines.h</span>&gt;; these can serialize even the most complex data structures with a single method call and will reduce the chance of making common mistakes (which could introduce security vulnerabilities if marshalling data from untrusted sources).</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">io_ar</span></td>
    <td>The <span class="NDLSystemFont"><a href="efd__Archive.htm">Archive</a></span> to serialize to or from. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_message_1a3931d204a9a302d1a0e8df628157862d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  CheckDebugFlag(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> i_flag) const</p>
<p class="NDLRefMemberDescription">Check if a debug flag or <span class="NDLSystemFont"><a href="efd__set.htm">set</a></span> of flags is <span class="NDLSystemFont"><a href="efd__set.htm">set</a></span> on this message. </p>

<a name="classefd_1_1_i_message_1a68178a122fe0481e91ec17e20a7b4264"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetDebugFlags() const</p>
<p class="NDLRefMemberDescription">Get all of the <span class="NDLSystemFont"><a href="efd__set.htm">set</a></span> debug flags for this message. </p>

<a name="classefd_1_1_i_message_1a289802af32b06696db6dc6b6104b2352"></a>
<p class="NDLRefMemberFunction">void  SetDebugFlags(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> i_flags) const</p>
<p class="NDLRefMemberDescription">Set the debug flags for this message. </p>

<a name="classefd_1_1_i_message_1ad09b4d90fe14057baab02268be60f1d2"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetUniqueIdentifier() const</p>
<p class="NDLRefMemberDescription">The unique id (message instance counter) that can be used to track a message instance as it moves around the system. </p>
<p class="NDLRefMemberDetailedDescription">This is intended for debugging, not core system logic. </p>

<a name="classefd_1_1_i_message_1a4c89454674f20811e2c6b122fb750229"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span>  GetDescription() const</p>
<p class="NDLRefMemberDescription">A message sub-class specific text description/dump of the message for use in logging/debugging. </p>

<a name="classefd_1_1_i_message_1a9f044fd474b0508abf4c76b8b2e9aeb1"></a>
<p class="NDLRefMemberFunction">virtual const <span class="NDLSystemFont"><a href="efd__Category.htm">efd::Category</a></span>&  GetSenderCategory() const</p>
<p class="NDLRefMemberDescription">A <span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span> that can be used to send a reply message to the logical process that originally sent this message. </p>
<p class="NDLRefMemberDetailedDescription">Local messages don't contain the space; this returns a default value. </p>

<a name="classefd_1_1_i_message_1ad2cbe6cad1a34f6586477ca9dfd0bee7"></a>
<p class="NDLRefMemberFunction">virtual const <span class="NDLSystemFont"><a href="efd__Category.htm">efd::Category</a></span>&  GetDestinationCategory() const</p>
<p class="NDLRefMemberDescription">The <span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span> that is used to route this message. Local messages use a default value. </p>

<a name="classefd_1_1_i_message_1af876fd763593774b0590968d993ab27f"></a>
<p class="NDLRefMemberFunction">IMessage()</p>
<p class="NDLRefMemberDescription">The <span class="NDLSystemFont">IMessage</span> base construct is declared protected to prevent direct creation of an <span class="NDLSystemFont">IMessage</span>. </p>
<p class="NDLRefMemberDetailedDescription">You must construct a class derived from <span class="NDLSystemFont">IMessage</span> to use this class. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
