<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::IMemLogHandler</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::IMemLogHandler</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="efd__IBase.htm">efd::IBase</a></span></p>


<p class="NDLRefHeaderFile">&lt;IMemLogHandler.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classefd_1_1_i_mem_log_handler.gif" alt="Inheritance graph for efd::IMemLogHandler"/>
  <p class="FigureCaption">Inheritance graph for efd::IMemLogHandler</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">Interface used to log all memory allocations and memory leaks. </p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classefd_1_1_i_mem_log_handler_1acdcc1a334a04e6959393059e80036121"></a>
<p class="NDLRefMemberFunction">IMemLogHandler()</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_i_mem_log_handler_1af2e8a5a09095075c87a74ad30450a462"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">efd::Bool</span>  OnInit() = 0</p>
<p class="NDLRefMemberDescription">Initializes any internal data structures that will be needed. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>True if the initialization was successful. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_mem_log_handler_1a63ee39c52d432c3aa783899bf11d7484"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">efd::Bool</span>  OnShutdown() = 0</p>
<p class="NDLRefMemberDescription">Shutdown all internal data structures. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>True if the shutdown was successful. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_mem_log_handler_1ac93dc6b17b7a68dc0078c191a3ffa1a6"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">efd::Bool</span>  IsInitialized() = 0</p>
<p class="NDLRefMemberDescription">Returns true if the <span class="NDLSystemFont">IMemLogHandler</span> has been initialized. </p>

<a name="classefd_1_1_i_mem_log_handler_1ac3057d62679e252fc2842e46d6dd109c"></a>
<p class="NDLRefMemberFunction">virtual void  LogAllocUnit(<br/>const <span class="NDLSystemFont"><a href="efd__AllocUnit.htm">AllocUnit</a></span>* pkUnit, <br/>const char* pcPrefix = "", <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ad9c81f78b405eb346c527c73002e5382">MemEventType</a></span> eDeallocType = EE_MET_UNKNOWN, <br/>double fDeallocTime = -FLT_MAX, <br/>unsigned long ulDeallocThreadId = 0, <br/>size_t stSizeUnused = 0) const = 0</p>
<p class="NDLRefMemberDescription">This method is responsible for logging an allocation event. </p>

<a name="classefd_1_1_i_mem_log_handler_1ad81cffa0f43a454029ac745884d8d214"></a>
<p class="NDLRefMemberFunction">virtual void  LogAllocUnitLeak(<br/>const <span class="NDLSystemFont"><a href="efd__AllocUnit.htm">AllocUnit</a></span>* pkUnit, <br/>const char* pcPrefix = "") const = 0</p>
<p class="NDLRefMemberDescription">This method is responsible for logging a memory leak. </p>

<a name="classefd_1_1_i_mem_log_handler_1a5f84eb7184280955a331e714761720fb"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  SetMarker(<br/>const char* pcMarkerType, <br/>const char* pcClassifier, <br/>const char* pcString) = 0</p>
<p class="NDLRefMemberDescription">The method allows applications to <span class="NDLSystemFont"><a href="efd__set.htm">set</a></span> a mark between allocation events that can be used to help better track and organize all memory allocations. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pcMarkerType</span></td>
    <td>Arbitrary string to identify the type of marker </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pcClassifier</span></td>
    <td>Arbitrary string to identify the class of marker </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pcString</span></td>
    <td>Arbitrary string to provide information about the marker </td>
</tr>

        </tbody>
    </table>
</div>


<a name="snapshot_methods"></a>
<p class="NDLRefHead1">Snapshot methods</p>

<p class="NDLRefMemberDescription">Optional methods that provide support for logging a snapshot of allocations.</p>
<p class="NDLRefMemberDescription">The default implementation simply does nothing resulting in </p>

<a name="classefd_1_1_i_mem_log_handler_1a7590a4d326d2b67a2d712b01f96503f2"></a>
<p class="NDLRefMemberFunction">virtual void  BeginSnapshotLog(const char* pszNameSuffix)</p>
<p class="NDLRefMemberDescription">This method is responsible for beginning a snapshot log dump. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pszNameSuffix</span></td>
    <td>A suffix string appended to the log file name. Must contain only valid file name characters. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_mem_log_handler_1a94ca96f0e76039ce08d28cf824bf9af0"></a>
<p class="NDLRefMemberFunction">virtual void  LogAllocUnitSnapshot(const <span class="NDLSystemFont"><a href="efd__AllocUnit.htm">AllocUnit</a></span>* pUnit)</p>
<p class="NDLRefMemberDescription">This method is responsible for logging an <span class="NDLSystemFont"><a href="efd__AllocUnit.htm">AllocUnit</a></span> to a snapshot log dump. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pUnit</span></td>
    <td>An <span class="NDLSystemFont"><a href="efd__AllocUnit.htm">AllocUnit</a></span> that is part of the snapshot </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_mem_log_handler_1abf421b6e4efa1026ed447de009372457"></a>
<p class="NDLRefMemberFunction">virtual void  EndSnapshotLog()</p>
<p class="NDLRefMemberDescription">This method completes a snapshot log dump. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
