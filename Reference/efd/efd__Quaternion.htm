<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::Quaternion</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::Quaternion</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="efd__MemObject.htm">efd::MemObject</a></span></p>


<p class="NDLRefHeaderFile">&lt;Quaternion.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classefd_1_1_quaternion.gif" alt="Inheritance graph for efd::Quaternion"/>
  <p class="FigureCaption">Inheritance graph for efd::Quaternion</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">This class supports quaternions for the representation of rotations. </p>
<p class="NDLNormal">Basic algebraic and calculus operations are provided as well as linear and cubic interpolation routines. </p>

<a name="friend_members"></a>
<p class="NDLRefHead1">Friend Members</p>


<a name="classefd_1_1_quaternion_1a0d235e63e937ced77ef4569c7f591c13"></a>
<p class="NDLRefMemberFunction">friend <span class="NDLSystemFont">Quaternion</span>  operator*(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> c, <br/>const <span class="NDLSystemFont">Quaternion</span>& q)</p>
<p class="NDLRefMemberDescription">Performs a scaler multiplication of this quaternion. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">c</span></td>
    <td>The value by which to scale this quaternion. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">q</span></td>
    <td>The quaternion to multiply with this one. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The scaled quaternion. </td>
</tr>

        </tbody>
    </table>
</div>


<a name="public_attributes"></a>
<p class="NDLRefHead1">Public Attributes</p>


<a name="classefd_1_1_quaternion_1ad07d8d48a3a0166a620e93a317df57ec"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  m_w</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_quaternion_1a57afaa4350c0f7277a1ba348ec1a3696"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  m_fW</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_quaternion_1a4c483ecbfe90eef954a44aad559ed482"></a>
<p class="NDLRefMemberFunction">union efd::Quaternion::@282  @283</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_quaternion_1afa4d01c6fb797ff093462e191736c72a"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  m_x</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_quaternion_1a90e5994be99aecc7ae9c2d355009d461"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  m_fX</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_quaternion_1a87fa8de3b0b5eb018d0a5f571a57d271"></a>
<p class="NDLRefMemberFunction">union efd::Quaternion::@284  @285</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_quaternion_1a2bd5459f544f8d30d94d8da840ebc71b"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  m_y</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_quaternion_1ac6c80595bdca169cb95a8900176349a7"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  m_fY</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_quaternion_1a884f672b67e0f48d2a23d197468dd773"></a>
<p class="NDLRefMemberFunction">union efd::Quaternion::@286  @287</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_quaternion_1a611ca5d937acf2d60959200573ed4e56"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  m_z</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_quaternion_1a8d911ea654f3bbab28fb92b7d536eef0"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  m_fZ</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_quaternion_1a6138e9c73521e8392c950aadd2373250"></a>
<p class="NDLRefMemberFunction">union efd::Quaternion::@288  @289</p>
<p class="NDLRefMemberFunction"></p>
<a name="public_static_attributes"></a>
<p class="NDLRefHead1">Public Static Attributes</p>


<a name="classefd_1_1_quaternion_1aba70146586e3529b7b7e8a888c248d60"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont">Quaternion</span>  IDENTITY</p>
<p class="NDLRefMemberDescription"><span class="NDLSystemFont">Quaternion</span> corresponding to the identity matrix. </p>

<a name="classefd_1_1_quaternion_1a89da262dfd9f32b615057fd5ef0250ff"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  ms_epsilon</p>
<p class="NDLRefMemberDescription">Epsilon constant used by several internal calculations. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">Intended for Emergent internal usage only. </p></p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classefd_1_1_quaternion_1a40a1729fc06faafad03700cd78922e38"></a>
<p class="NDLRefMemberFunction">Quaternion()</p>
<p class="NDLRefMemberDescription">Constructs a new quaternion but does not initialize the data members so that fast construction of arrays is possible in situations where the rotations will be filled in by application code. </p>

<a name="classefd_1_1_quaternion_1a06abd9e0f2740f1d04662d2fce1d5820"></a>
<p class="NDLRefMemberFunction">Quaternion(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> w, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> x, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> y, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> z)</p>
<p class="NDLRefMemberDescription">Constructs a quaternion from the specified values. </p>

<a name="classefd_1_1_quaternion_1a4b50cffc672c18a76e4b43f7272e5edf"></a>
<p class="NDLRefMemberFunction">Quaternion(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> angle, <br/>const <span class="NDLSystemFont"><a href="efd__Point3.htm">efd::Point3</a></span>& axis)</p>
<p class="NDLRefMemberDescription">Constructs a unit quaternion that corresponds to the rotation about the specified axis. </p>
<p class="NDLRefMemberDetailedDescription">This rotation is counter clockwise about the axis when looking towards the origin. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">angle</span></td>
    <td>The angle in radians. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">axis</span></td>
    <td>The axis to rotate about. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_quaternion_1aec1847d8d31af4d85379f6e2330de0b7"></a>
<p class="NDLRefMemberFunction">void  SetW(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> w)</p>
<p class="NDLRefMemberDescription">Sets the w component of the quaternion. </p>

<a name="classefd_1_1_quaternion_1adb0b064666942d10bb3212531ea15bce"></a>
<p class="NDLRefMemberFunction">void  SetX(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> x)</p>
<p class="NDLRefMemberDescription">Sets the x component of the quaternion. </p>

<a name="classefd_1_1_quaternion_1a367ff83aa33153944a53f660ef303fff"></a>
<p class="NDLRefMemberFunction">void  SetY(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> y)</p>
<p class="NDLRefMemberDescription">Sets the y component of the quaternion. </p>

<a name="classefd_1_1_quaternion_1aff13a80b5af08a17535dd85f2573bd7b"></a>
<p class="NDLRefMemberFunction">void  SetZ(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> z)</p>
<p class="NDLRefMemberDescription">Sets the z component of the quaternion. </p>

<a name="classefd_1_1_quaternion_1a061722850d8d87f24d8afb818c7d13f6"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  GetW() const</p>
<p class="NDLRefMemberDescription">Gets the w component of the quaternion. </p>

<a name="classefd_1_1_quaternion_1a451bdbf7cb14ce95e448e77018a8f9af"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  GetX() const</p>
<p class="NDLRefMemberDescription">Gets the x component of the quaternion. </p>

<a name="classefd_1_1_quaternion_1a663cc414414347cff243133b588809a7"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  GetY() const</p>
<p class="NDLRefMemberDescription">Gets the y component of the quaternion. </p>

<a name="classefd_1_1_quaternion_1a73fe9fb20b0ee3e25629c2278ff313b4"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  GetZ() const</p>
<p class="NDLRefMemberDescription">Gets the z component of the quaternion. </p>

<a name="classefd_1_1_quaternion_1aab9aae2dc17a0609acec63ef73e25aba"></a>
<p class="NDLRefMemberFunction">void  SetValues(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> w, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> x, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> y, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> z)</p>
<p class="NDLRefMemberDescription">Sets the components of the quaternion. </p>

<a name="classefd_1_1_quaternion_1a8c074c2981932c850e84efb7d49be998"></a>
<p class="NDLRefMemberFunction">void  GetValues(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>& w, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>& x, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>& y, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>& z) const</p>
<p class="NDLRefMemberDescription">Extracts each component from the quaternion. </p>

<a name="classefd_1_1_quaternion_1a96c83e27072c850e1efe047ed8d4cff1"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  operator==(const <span class="NDLSystemFont">Quaternion</span>& q) const</p>
<p class="NDLRefMemberDescription">Performs an  equality test. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">q</span></td>
    <td>The quaternion to compare with this one. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if exactly equal, false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_quaternion_1a67360a120ffd4695572da311d764ef41"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  operator!=(const <span class="NDLSystemFont">Quaternion</span>& q) const</p>
<p class="NDLRefMemberDescription">Performs an  in-equality test. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">q</span></td>
    <td>The quaternion to compare with this one. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if not equal, false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_quaternion_1ab70da316147e6046a2da4e7573359a65"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">Quaternion</span>  operator*(const <span class="NDLSystemFont">Quaternion</span>& q) const</p>
<p class="NDLRefMemberDescription">Performs a quaternion multiplication. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription"><span class="NDLSystemFont">Quaternion</span> multiplication is generally not commutative so in most cases p*q != q*p. </p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">q</span></td>
    <td>The quaternion to multiply with this one. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The product of this quaternion and the specified quaternion. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_quaternion_1a2e51e9dd1c993acf0996d1efabee4fd9"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="efd__Point3.htm">Point3</a></span>  operator*(const <span class="NDLSystemFont"><a href="efd__Point3.htm">Point3</a></span>& p) const</p>
<p class="NDLRefMemberDescription">Performs a quaternion rotation of a 3-vector. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">p</span></td>
    <td>The point that will be rotated as if the quaternion repsented a rotation. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The rotated point. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_quaternion_1ac34dedaf8502eef923ac560b3c058bbd"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">Quaternion</span>  operator*(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> c) const</p>
<p class="NDLRefMemberDescription">Performs a scaler multiplication of this quaternion. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">c</span></td>
    <td>The value by which to scale this quaternion. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The scaled quaternion. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_quaternion_1aa6ec48223228ffff7e9f0722647ecbcd"></a>
<p class="NDLRefMemberFunction">void  FromAngleAxisX(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> angle)</p>
<p class="NDLRefMemberDescription">Fast path version of converting an angle/axis rotation to a quaternion. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">angle</span></td>
    <td>Angle in radians about the x-axis. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_quaternion_1a467852104a95c2567648442dbfc2d71f"></a>
<p class="NDLRefMemberFunction">void  FromAngleAxisY(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> angle)</p>
<p class="NDLRefMemberDescription">Fast path version of converting an angle/axis rotation to a quaternion. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">angle</span></td>
    <td>Angle in radians about the y-axis. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_quaternion_1a41f56e5ed9957ce3fe019aaf5e8bbbf4"></a>
<p class="NDLRefMemberFunction">void  FromAngleAxisZ(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> angle)</p>
<p class="NDLRefMemberDescription">Fast path version of converting an angle/axis rotation to a quaternion. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">angle</span></td>
    <td>Angle in radians about the z-axis. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_quaternion_1a4f1a582a62fd0cdd2580e4e25f9f6589"></a>
<p class="NDLRefMemberFunction">void  FromAngleAxesXYZ(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> angleX, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> angleY, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> angleZ)</p>
<p class="NDLRefMemberDescription">Fast path version of converting an angle/axis rotation to a quaternion. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">angleX</span></td>
    <td>Angle in radians about the x-axis. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">angleY</span></td>
    <td>Angle in radians about the y-axis. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">angleZ</span></td>
    <td>Angle in radians about the z-axis. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_quaternion_1afdcc8658811e1a2d1493390f1ba31219"></a>
<p class="NDLRefMemberFunction">void  ToRotation(<span class="NDLSystemFont"><a href="efd__Matrix3.htm">Matrix3</a></span>& rot) const</p>
<p class="NDLRefMemberDescription">Converts this quaternion into a 3x3 rotation matrix. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">rot</span></td>
    <td>Stores the resulting conversion. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_quaternion_1af4e1d42cbe695d495132efc40336599d"></a>
<p class="NDLRefMemberFunction">void  Normalize()</p>
<p class="NDLRefMemberDescription">Normalizes this quaternion and is mostly used by sleep. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">Intended for Emergent internal usage only. </p></p>

<a name="classefd_1_1_quaternion_1ae96ccab96af4b0cb31ec582bc500ea62"></a>
<p class="NDLRefMemberFunction">void  FastNormalize()</p>
<p class="NDLRefMemberDescription">Faster, but less accurate method to normalize a quaternion. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">Intended for Emergent internal usage only. </p></p>

<a name="classefd_1_1_quaternion_1a80fb4b78121b5a2ccb70b334909b9a07"></a>
<p class="NDLRefMemberFunction">void  Serialize(<span class="NDLSystemFont"><a href="efd__Archive.htm">efd::Archive</a></span>& io_archive)</p>
<p class="NDLRefMemberDescription">Serialize method for using <span class="NDLSystemFont">Quaternion</span> with <span class="NDLSystemFont"><a href="efd__Archive.htm">Archive</a></span> and <span class="NDLSystemFont"><a href="efd__ParameterList.htm">ParameterList</a></span>. </p>

<a name="classefd_1_1_quaternion_1a1c49688bcff8fc233df29c94f51d1531"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">Quaternion</span>  operator+(const <span class="NDLSystemFont">Quaternion</span>& q) const</p>
<p class="NDLRefMemberDescription">Performs a component wise addition. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">q</span></td>
    <td>The quaternion to add to this one. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A newly constructed quaternion containing the sum of this quaternion and the specified quaternion. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_quaternion_1a77096b64f5ccf2b3b7bb37ff5a1215ec"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">Quaternion</span>  operator-(const <span class="NDLSystemFont">Quaternion</span>& q) const</p>
<p class="NDLRefMemberDescription">Performs a component wise subtraction. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">q</span></td>
    <td>The quaternion to add to this one. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A newly constructed quaternion containing the difference of this quaternion and the specified quaternion. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_quaternion_1ad9427899129266385111c4ca84cf9501"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">Quaternion</span>  operator-() const</p>
<p class="NDLRefMemberDescription">Unary negation operator. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>A quaternion containing the negated version of this one. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_quaternion_1a2ddc88f080a4a09453249ff5e18fdc45"></a>
<p class="NDLRefMemberFunction">void  ToAngleAxis(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>& angle, <br/><span class="NDLSystemFont"><a href="efd__Point3.htm">Point3</a></span>& axis) const</p>
<p class="NDLRefMemberDescription">Converts a unit length quaternion to its angle-axis representation. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<p class="NDLRefMemberDetailedDescription">This method makes two function calls, one to <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a6619215a57e913b2ea67e981df8b0218">efd::Sqrt</a></span> and one to <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a49a576fd1b813cb6f520d71f042e35c7">efd::ACos</a></span>. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">angle</span></td>
    <td>Stores the resulting angle in radians in the interval [0,EE_PI]. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">axis</span></td>
    <td>Stores the resulting unit length axis <span class="NDLSystemFont"><a href="efd__vector.htm">vector</a></span>. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_quaternion_1a166a4ee9f77b4b57fcaa8da852a21ae9"></a>
<p class="NDLRefMemberFunction">void  FromAngleAxis(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> angle, <br/>const <span class="NDLSystemFont"><a href="efd__Point3.htm">Point3</a></span>& axis)</p>
<p class="NDLRefMemberDescription">Converts from and angle/axis rotation representation to a quaternion and stores the result in this quaternion. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<p class="NDLRefMemberDetailedDescription">This method makes two functions calls, one to <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ad599971e00eded462e975d6272058f9d">efd::Sin</a></span> and one to <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1af526364bd929451adbc03237fdc2a061">efd::Cos</a></span>. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">angle</span></td>
    <td>The angle in radians between the interval [0,EE_PI]. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">axis</span></td>
    <td>The unit length axis. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_quaternion_1a49c65c5a87fee1e7786aad873ed504e4"></a>
<p class="NDLRefMemberFunction">void  FromRotation(const <span class="NDLSystemFont"><a href="efd__Matrix3.htm">Matrix3</a></span>& rot)</p>
<p class="NDLRefMemberDescription">Converts the specified rotation matrix to a quaternion and stores the result in this quaternion. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">rot</span></td>
    <td>The rotation matrix to convert. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_quaternion_1a40773578413b22d5b87d0df872385094"></a>
<p class="NDLRefMemberFunction">void  Snap()</p>
<p class="NDLRefMemberDescription">Snaps all de-normalized floats to zero. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">Intended for Emergent internal usage only. </p></p>
<a name="public_static_methods"></a>
<p class="NDLRefHead1">Public Static Methods</p>


<a name="classefd_1_1_quaternion_1acc48e13885413006cd5c4b52c2d662ab"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">Quaternion</span>  Slerp(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> t, <br/>const <span class="NDLSystemFont">Quaternion</span>& p, <br/>const <span class="NDLSystemFont">Quaternion</span>& q)</p>
<p class="NDLRefMemberDescription">This function computes the spherical linear interpolate of the specified quaternions. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<p class="NDLRefMemberDetailedDescription">This function assumes the dot product of p and q is non-negative. (i.e. The angle between p and q is acute.) </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">t</span></td>
    <td>Parametric value and must be in the interval [0,1]. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">p</span></td>
    <td>The first quaternion. Must be of unit length. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">q</span></td>
    <td>The second quaternion. Must be of unit length. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_quaternion_1a05c9ee7775a53541d2c99b9cc5295c74"></a>
<p class="NDLRefMemberFunction">static void  Slerp(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> t, <br/>const <span class="NDLSystemFont">Quaternion</span>& p, <br/>const <span class="NDLSystemFont">Quaternion</span>& q, <br/><span class="NDLSystemFont">Quaternion</span>* pResults)</p>
<p class="NDLRefMemberDescription">This function computes the spherical linear interpolate of the specified quaternions. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<p class="NDLRefMemberDetailedDescription">This function assumes the dot product of p and q is non-negative. (i.e. The angle between p and q is acute.) </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">t</span></td>
    <td>Parametric value and must be in the interval [0,1]. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">p</span></td>
    <td>The first quaternion. Must be of unit length. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">q</span></td>
    <td>The second quaternion. Must be of unit length. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pResults</span></td>
    <td>The destination quaternion. Used to store the results. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_quaternion_1ab7b1890e34bf92238b3839744746dd72"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  Dot(<br/>const <span class="NDLSystemFont">Quaternion</span>& p, <br/>const <span class="NDLSystemFont">Quaternion</span>& q)</p>
<p class="NDLRefMemberDescription">Computes the dot product of the two input quaternions by treating them as 4-tuples. </p>

<a name="classefd_1_1_quaternion_1a648a1c701e7ab20258d801de736c12f4"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">Quaternion</span>  UnitInverse(const <span class="NDLSystemFont">Quaternion</span>& q)</p>
<p class="NDLRefMemberDescription">Computes the inverse of the specified quaternion. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">q</span></td>
    <td>A quaternion of unit length. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The multiplicative inverse of the specified quaternion. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_quaternion_1a7331f8eeb9f593abf832089eda4af35f"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">Quaternion</span>  Exp(const <span class="NDLSystemFont">Quaternion</span>& q)</p>
<p class="NDLRefMemberDescription">Computes a quaternion exponential and is primarily used by Slerp and Squad. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">q</span></td>
    <td>A quaternion of unit length. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_quaternion_1a4456ec0a4a1dbb5289d209c7353f2911"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">Quaternion</span>  Log(const <span class="NDLSystemFont">Quaternion</span>& q)</p>
<p class="NDLRefMemberDescription">Computes a quaternion logarithm and is primarily used by Slerp and Squad. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">q</span></td>
    <td>A quaternion of unit length. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_quaternion_1ab34d23d0cfcd0d90ca8944fad78c858c"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">Quaternion</span>  Intermediate(<br/>const <span class="NDLSystemFont">Quaternion</span>& q0, <br/>const <span class="NDLSystemFont">Quaternion</span>& q1, <br/>const <span class="NDLSystemFont">Quaternion</span>& q2)</p>
<p class="NDLRefMemberDescription">This function is used to compute intermediate quaternions and is used by the quadratic spherical interpolation routines. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">All input quaternions must be normalized. </p></p>

<a name="classefd_1_1_quaternion_1a970ec62165ce8e2f35b897526d5846e6"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">Quaternion</span>  Squad(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> t, <br/>const <span class="NDLSystemFont">Quaternion</span>& p, <br/>const <span class="NDLSystemFont">Quaternion</span>& a, <br/>const <span class="NDLSystemFont">Quaternion</span>& b, <br/>const <span class="NDLSystemFont">Quaternion</span>& q)</p>
<p class="NDLRefMemberDescription">This function computes the spherical quadratic interpolate of the two input quaternions p and q. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<p class="NDLRefMemberDetailedDescription">The function assumes that the dot product of p and q is nonnegative (i.e. The angle between p and q is acute). </p>
<p class="NDLRefMemberDetailedDescription">All quaternions must be of unit length. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">t</span></td>
    <td>Parametric value that must be in the interval [0,1]. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">p</span></td>
    <td>Start input quaternion. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">a</span></td>
    <td>First input quaternion computed by <span class="NDLSystemFont"><a href="efd__Quaternion.htm#classefd_1_1_quaternion_1ab34d23d0cfcd0d90ca8944fad78c858c">Quaternion::Intermediate</a></span></td>
</tr>
<tr>
    <td><span class="NDLSystemFont">b</span></td>
    <td>Second input quaternion computed by <span class="NDLSystemFont"><a href="efd__Quaternion.htm#classefd_1_1_quaternion_1ab34d23d0cfcd0d90ca8944fad78c858c">Quaternion::Intermediate</a></span></td>
</tr>
<tr>
    <td><span class="NDLSystemFont">q</span></td>
    <td>End input quaternion. </td>
</tr>

        </tbody>
    </table>
</div>


 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
