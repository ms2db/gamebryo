<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::FetchAssetDataResponse</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::FetchAssetDataResponse</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="efd__AssetLocatorResponse.htm">efd::AssetLocatorResponse</a></span></p>


<p class="NDLRefHeaderFile">&lt;AssetLocatorResponse.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classefd_1_1_fetch_asset_data_response.gif" alt="Inheritance graph for efd::FetchAssetDataResponse"/>
  <p class="FigureCaption">Inheritance graph for efd::FetchAssetDataResponse</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">Response to an Asset Fetch request. </p>
<p class="NDLNormal">Contains the number of bytes retrieved and a buffer to hold the data. </p>

<a name="public_types"></a>
<p class="NDLRefHead1">Public Types</p>
<a name="classefd_1_1_fetch_asset_data_response_1a54c4bd3c6e179e883915884c119c6df3"></a>
<p class=NDLRefHead2>efd::FetchAssetDataResponse::FetchResult</p>




<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">kFETCH_SUCCESS</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kFETCH_ASSET_NOT_FOUND</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kFETCH_ASSET_PERMISSION_DENIED</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kFETCH_ASSET_EOF</span></td>
    <td>&nbsp;</td>
</tr>

  </tbody>
</table>
</div>


<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classefd_1_1_fetch_asset_data_response_1a1c70c0024fe54fdad47b4b7deed1ac13"></a>
<p class="NDLRefMemberFunction">FetchAssetDataResponse()</p>
<p class="NDLRefMemberDescription">Constructor. </p>

<a name="classefd_1_1_fetch_asset_data_response_1a3c708cda4848c352a4abb0d72fa4b94e"></a>
<p class="NDLRefMemberFunction">~FetchAssetDataResponse()</p>
<p class="NDLRefMemberDescription">Destructor. </p>

<a name="classefd_1_1_fetch_asset_data_response_1a798f0bb10c928bd31366fab523d85f41"></a>
<p class="NDLRefMemberFunction">char*  AllocateBuffer(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> size)</p>
<p class="NDLRefMemberDescription">Allocate a buffer of the given size. </p>
<p class="NDLRefMemberDetailedDescription">The returned buffer is owned by the <span class="NDLSystemFont">FetchAssetDataResponse</span> message and should not be freed. Use it only to populate the payload for this message. </p>

<a name="classefd_1_1_fetch_asset_data_response_1af06330286a7f9bb5c1ec8ec6f0f4e259"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetBufferSize() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_fetch_asset_data_response_1acdbbb108c1a93bf64c74b2e3024bedbd"></a>
<p class="NDLRefMemberFunction">void  SetBytesRead(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> bytesRead)</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_fetch_asset_data_response_1ab714b7445e1d9af796a8ffe238309737"></a>
<p class="NDLRefMemberFunction">void  SetResult(<span class="NDLSystemFont"><a href="efd__FetchAssetDataResponse.htm#classefd_1_1_fetch_asset_data_response_1a54c4bd3c6e179e883915884c119c6df3">FetchResult</a></span> result)</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_fetch_asset_data_response_1ac7b0df125157ad82c05366154454dc66"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="efd__FetchAssetDataResponse.htm#classefd_1_1_fetch_asset_data_response_1a54c4bd3c6e179e883915884c119c6df3">FetchResult</a></span>  GetResult() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_fetch_asset_data_response_1a53957f0d2050c20027c71c3e888e3d47"></a>
<p class="NDLRefMemberFunction">const char*  GetAssetData() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_fetch_asset_data_response_1a7e8808dbc0afa0c2b07f5874a121d4b9"></a>
<p class="NDLRefMemberFunction">virtual void  Serialize(<span class="NDLSystemFont"><a href="efd__Archive.htm">efd::Archive</a></span>& io_ar)</p>
<p class="NDLRefMemberDescription">Serialize a polymorphic type to or from an <span class="NDLSystemFont"><a href="efd__Archive.htm">Archive</a></span>. </p>
<p class="NDLRefMemberDetailedDescription">This method must be overridden, but if your streamable object has no data the override can be an empty function. A typical implementation of this method will make one call to <span class="NDLSystemFont"><a href="../Namespaces/efd__Serializer.htm#namespaceefd_1_1_serializer_1a63e0b99047011bde53be44786ab9ee7b">efd::Serializer::SerializeObject</a></span> for each member of the class. If you are derived from another streamable class you should be sure to call to parent implementation of this method as well; it is recommended that the parent class be serialized first before adding the data for the derived class. If your class contains complex data such as STL-style contianers or pointers to allocated data then you can simplify the implementation of Serialize by using the templated helper functions in &lt;<span class="NDLSystemFont">efd/SerializeRoutines.h</span>&gt;; these can serialize even the most complex data structures with a single method call and will reduce the chance of making common mistakes (which could introduce security vulnerabilities if marshalling data from untrusted sources).</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">io_ar</span></td>
    <td>The <span class="NDLSystemFont"><a href="efd__Archive.htm">Archive</a></span> to serialize to or from. </td>
</tr>

        </tbody>
    </table>
</div>


 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
