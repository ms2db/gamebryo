<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::Matrix3</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::Matrix3</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="efd__MemObject.htm">efd::MemObject</a></span></p>


<p class="NDLRefHeaderFile">&lt;Matrix3.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classefd_1_1_matrix3.gif" alt="Inheritance graph for efd::Matrix3"/>
  <p class="FigureCaption">Inheritance graph for efd::Matrix3</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">This class represents a 3x3 matrix. </p>
<p class="NDLNormal">All <span class="NDLSystemFont">Matrix3</span> rotation creation functions create rotation matrices whose rotations are clockwise about the given axis when looking toward the origin (assuming a positive rotation angle). In other words, a 90-degree rotation of [0,1,0] about [0,0,1] gives the <span class="NDLSystemFont"><a href="efd__vector.htm">vector</a></span> [1,0,0]. </p>

<a name="friend_members"></a>
<p class="NDLRefHead1">Friend Members</p>


<a name="classefd_1_1_matrix3_1a16b1e7dc6ef0f55da69c53d4ebf332bf"></a>
<p class="NDLRefMemberFunction">friend <span class="NDLSystemFont"><a href="efd__Point3.htm">efd::Point3</a></span>  operator*(<br/>const <span class="NDLSystemFont"><a href="efd__Point3.htm">efd::Point3</a></span>& pt, <br/>const <span class="NDLSystemFont">efd::Matrix3</span>& mat)</p>
<p class="NDLRefMemberDescription">Transforms a point using the transpose of the specified matrix. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pt</span></td>
    <td>The point with which to transform. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">mat</span></td>
    <td>The transformation matrix. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A new point transformed by the transpose of this specified matrix. </td>
</tr>

        </tbody>
    </table>
</div>


<a name="public_static_attributes"></a>
<p class="NDLRefHead1">Public Static Attributes</p>


<a name="classefd_1_1_matrix3_1ad0135dc154692d0300f790c8ec257101"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont">Matrix3</span>  ZERO</p>
<p class="NDLRefMemberDescription">Convenience object for the zero matrix. </p>

<a name="classefd_1_1_matrix3_1ac99624e16ead292c8a3f202f113076b2"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont">Matrix3</span>  IDENTITY</p>
<p class="NDLRefMemberDescription">Convenience object for the identity matrix. </p>
<a name="public_static_methods"></a>
<p class="NDLRefHead1">Public Static Methods</p>


<a name="classefd_1_1_matrix3_1ae5191c7ea369f9a230d43331b003adcb"></a>
<p class="NDLRefMemberFunction">static void  TransformVertices(<br/>const <span class="NDLSystemFont">Matrix3</span>& rot, <br/>const <span class="NDLSystemFont"><a href="efd__Point3.htm">Point3</a></span>& trn, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> vertexCount, <br/>const <span class="NDLSystemFont"><a href="efd__Point3.htm">Point3</a></span>* pInVertex, <br/><span class="NDLSystemFont"><a href="efd__Point3.htm">Point3</a></span>* pOutVertex)</p>
<p class="NDLRefMemberDescription">Transforms the given array of input vertices by the given rotation and translation transforms, placing the result in the pOutVertex array, which is assumed to be allocated and have at least vertexCount elements. </p>
<p class="NDLRefMemberDetailedDescription">The input and output arrays must not be the same array. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">rot</span></td>
    <td>The rotation transformation to apply. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">trn</span></td>
    <td>The translation transformation to apply. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">vertexCount</span></td>
    <td>The number of vertices in the source vertex array. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pInVertex</span></td>
    <td>Input vertex array. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pOutVertex</span></td>
    <td>Output vertex array that must contain at least the same number of elements as the input vertex array. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_matrix3_1aa992beb20c1c162eb4ea14de981bd91f"></a>
<p class="NDLRefMemberFunction">static void  TransformNormals(<br/>const <span class="NDLSystemFont">Matrix3</span>& rot, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> normalCount, <br/>const <span class="NDLSystemFont"><a href="efd__Point3.htm">Point3</a></span>* pInNormal, <br/><span class="NDLSystemFont"><a href="efd__Point3.htm">Point3</a></span>* pOutNormal)</p>
<p class="NDLRefMemberDescription">Transforms the given array of input normals by the given rotation matrix, placing the result in the pOutNormal array, which is assumed to be allocated and have at least normalCount elements. </p>
<p class="NDLRefMemberDetailedDescription">The input and output arrays must not be the same array. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">rot</span></td>
    <td>The rotation transformation to apply. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">normalCount</span></td>
    <td>The number of normals in the source normal array. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pInNormal</span></td>
    <td>Input normal array. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pOutNormal</span></td>
    <td>Output normal array that must contain at least the same number of elements as the input normal array. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_matrix3_1a744ac3a3ef5ef423832fa2fbb6e1f55e"></a>
<p class="NDLRefMemberFunction">static void  TransformVerticesAndNormals(<br/>const <span class="NDLSystemFont">Matrix3</span>& rot, <br/>const <span class="NDLSystemFont"><a href="efd__Point3.htm">Point3</a></span>& trn, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> count, <br/>const <span class="NDLSystemFont"><a href="efd__Point3.htm">Point3</a></span>* pInVertex, <br/><span class="NDLSystemFont"><a href="efd__Point3.htm">Point3</a></span>* pOutVertex, <br/>const <span class="NDLSystemFont"><a href="efd__Point3.htm">Point3</a></span>* pInNormal, <br/><span class="NDLSystemFont"><a href="efd__Point3.htm">Point3</a></span>* pOutNormal)</p>
<p class="NDLRefMemberDescription">Performs the combination of the above methods. </p>
<p class="NDLRefMemberDetailedDescription">The two input and output array are assumed to be of the same size. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">rot</span></td>
    <td>The rotation transformation to apply. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">trn</span></td>
    <td>The translation transformation to apply. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">count</span></td>
    <td>Number of elements in the source and destination arrays. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pInVertex</span></td>
    <td>Source vertex array. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pOutVertex</span></td>
    <td>Destination vertex array. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pInNormal</span></td>
    <td>Source normal array. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pOutNormal</span></td>
    <td>Destination normal array. </td>
</tr>

        </tbody>
    </table>
</div>


<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classefd_1_1_matrix3_1ad05c1bba06e2f57c62ed53424e3f5de7"></a>
<p class="NDLRefMemberFunction">void  GetRow(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> index, <br/><span class="NDLSystemFont"><a href="efd__Point3.htm">efd::Point3</a></span>& row) const</p>
<p class="NDLRefMemberDescription">Gets/Sets the specified row in the matrix. </p>

<a name="classefd_1_1_matrix3_1a1d4ea1fa498f1482d3d43bf76a5368d1"></a>
<p class="NDLRefMemberFunction">void  SetRow(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> index, <br/>const <span class="NDLSystemFont"><a href="efd__Point3.htm">efd::Point3</a></span>& row)</p>
<p class="NDLRefMemberDescription">Gets/Sets the specified row in the matrix. </p>

<a name="classefd_1_1_matrix3_1a8b07ee6ae0d5a877d4ff63a80bb05e1e"></a>
<p class="NDLRefMemberFunction">void  GetRow(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> index, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>& f0, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>& f1, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>& f2) const</p>
<p class="NDLRefMemberDescription">Gets/Sets the specified row in the matrix. </p>

<a name="classefd_1_1_matrix3_1ac464351b8ae40bc10e3d7a2344facaf6"></a>
<p class="NDLRefMemberFunction">void  SetRow(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> index, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> f0, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> f1, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> f2)</p>
<p class="NDLRefMemberDescription">Gets/Sets the specified row in the matrix. </p>

<a name="classefd_1_1_matrix3_1adb309ee24dbac3d82513f2804136261a"></a>
<p class="NDLRefMemberFunction">void  GetRow(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> index, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>* pRow) const</p>
<p class="NDLRefMemberDescription">Gets/Sets the specified row in the matrix. </p>

<a name="classefd_1_1_matrix3_1acc0bd879ab3e94d7f20301ad4892a770"></a>
<p class="NDLRefMemberFunction">void  SetRow(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> index, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>* pRow)</p>
<p class="NDLRefMemberDescription">Gets/Sets the specified row in the matrix. </p>

<a name="classefd_1_1_matrix3_1a54151d5115e9eb12c2ba39112a7385df"></a>
<p class="NDLRefMemberFunction">void  GetCol(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> index, <br/><span class="NDLSystemFont"><a href="efd__Point3.htm">efd::Point3</a></span>& col) const</p>
<p class="NDLRefMemberDescription">Gets/Sets the specified column in the matrix. </p>

<a name="classefd_1_1_matrix3_1ac9cc2481ef775468ac1587203208b623"></a>
<p class="NDLRefMemberFunction">void  SetCol(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> index, <br/>const <span class="NDLSystemFont"><a href="efd__Point3.htm">efd::Point3</a></span>& col)</p>
<p class="NDLRefMemberDescription">Gets/Sets the specified row in the matrix. </p>

<a name="classefd_1_1_matrix3_1a8578a15380242b1243cbefcde362e474"></a>
<p class="NDLRefMemberFunction">void  GetCol(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> index, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>& f0, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>& f1, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>& f2) const</p>
<p class="NDLRefMemberDescription">Gets/Sets the specified row in the matrix. </p>

<a name="classefd_1_1_matrix3_1a0eddb15062fa6af132ac5952cdc6db65"></a>
<p class="NDLRefMemberFunction">void  SetCol(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> index, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> f0, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> f1, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> f2)</p>
<p class="NDLRefMemberDescription">Gets/Sets the specified row in the matrix. </p>

<a name="classefd_1_1_matrix3_1aeb763d3732fee297f3df77488c5df2e5"></a>
<p class="NDLRefMemberFunction">void  GetCol(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> index, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>* pCol) const</p>
<p class="NDLRefMemberDescription">Gets/Sets the specified row in the matrix. </p>

<a name="classefd_1_1_matrix3_1ae04e90b291aea9df8fe7f932531ba7f2"></a>
<p class="NDLRefMemberFunction">void  SetCol(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> index, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>* pCol)</p>
<p class="NDLRefMemberDescription">Gets/Sets the specified row in the matrix. </p>

<a name="classefd_1_1_matrix3_1af41f62a58c3e09622bf35724b75458b4"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  ToEulerAnglesXYZ(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>& xAngle, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>& yAngle, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>& zAngle) const</p>
<p class="NDLRefMemberDescription">Converts the matrix to a series of rotations about the specified axes which indicate some ordering of X, Y, and Z. </p>
<p class="NDLRefMemberDetailedDescription">The matrix must be orthonormal in order for these functions to return meaningful results. Angles are defined in radians. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>True if there was a unique factorization, false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_matrix3_1a477a3a44ad43ec868fffa04e5266dcd2"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  ToEulerAnglesXZY(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>& xAngle, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>& zAngle, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>& yAngle) const</p>
<p class="NDLRefMemberDescription">Gets/Sets the specified row in the matrix. </p>

<a name="classefd_1_1_matrix3_1aebc441f50715339362fda983634ff012"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  ToEulerAnglesYXZ(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>& yAngle, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>& xAngle, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>& zAngle) const</p>
<p class="NDLRefMemberDescription">Gets/Sets the specified row in the matrix. </p>

<a name="classefd_1_1_matrix3_1ab20b8c79e9a3b59fd7264112378c3541"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  ToEulerAnglesYZX(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>& yAngle, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>& zAngle, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>& xAngle) const</p>
<p class="NDLRefMemberDescription">Gets/Sets the specified row in the matrix. </p>

<a name="classefd_1_1_matrix3_1a76c4572a19ccf7fca0b4bc939abd04ac"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  ToEulerAnglesZXY(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>& zAngle, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>& xAngle, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>& yAngle) const</p>
<p class="NDLRefMemberDescription">Gets/Sets the specified row in the matrix. </p>

<a name="classefd_1_1_matrix3_1abf4f4a4a0c54eb33f535747576ccdc11"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  ToEulerAnglesZYX(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>& zAngle, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>& yAngle, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>& xAngle) const</p>
<p class="NDLRefMemberDescription">Gets/Sets the specified row in the matrix. </p>

<a name="classefd_1_1_matrix3_1a5c1ea6d647e3e0925da238425b5baa88"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  ToEulerAnglesXYZ_Legacy(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>& xAngle, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>& yAngle, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>& zAngle) const</p>
<p class="NDLRefMemberDescription">Legacy versions of the equivalent "ToEulerAngles" functions. </p>
<p class="NDLRefMemberDetailedDescription">These legacy functions do not include recent bug fixes and can be used if recent fixes breaks code that had been worked around.</p>
<p class="NDLRefMemberDetailedDescription">Converts the matrix to a series of rotations about the specified axes which indicate some ordering of X, Y, and Z. The matrix must be orthonormal in order for these functions to return meaningful results. Angles are defined in radians. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>True if there was a unique factorization, false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_matrix3_1abe773cf2d06357ad9be8c6e46295c8ed"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  ToEulerAnglesYZX_Legacy(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>& yAngle, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>& zAngle, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>& xAngle) const</p>
<p class="NDLRefMemberDescription">Gets/Sets the specified row in the matrix. </p>

<a name="classefd_1_1_matrix3_1a1378ec9ede9474f9645fe46a1e19aba5"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  ToEulerAnglesZXY_Legacy(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>& zAngle, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>& xAngle, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>& yAngle) const</p>
<p class="NDLRefMemberDescription">Gets/Sets the specified row in the matrix. </p>

<a name="classefd_1_1_matrix3_1a6471df61fa26500a3b6e1f9d6b343cba"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  ToEulerAnglesZYX_Legacy(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>& zAngle, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>& yAngle, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>& xAngle) const</p>
<p class="NDLRefMemberDescription">Gets/Sets the specified row in the matrix. </p>

<a name="classefd_1_1_matrix3_1ab9cec0e37014b549b96eb988d561126b"></a>
<p class="NDLRefMemberFunction">void  FromEulerAnglesXYZ(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> xAngle, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> yAngle, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> zAngle)</p>
<p class="NDLRefMemberDescription">Builds the matrix from the series of rotations about the specified axes indicated by the method signature. </p>
<p class="NDLRefMemberDetailedDescription">Angles are defined in radians. </p>

<a name="classefd_1_1_matrix3_1a9f43b0e73db12208b11aa559a5a29e7d"></a>
<p class="NDLRefMemberFunction">void  FromEulerAnglesXZY(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> xAngle, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> zAngle, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> yAngle)</p>
<p class="NDLRefMemberDescription">Gets/Sets the specified row in the matrix. </p>

<a name="classefd_1_1_matrix3_1aea72588a222d62bc3c3694249727233a"></a>
<p class="NDLRefMemberFunction">void  FromEulerAnglesYXZ(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> yAngle, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> xAngle, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> zAngle)</p>
<p class="NDLRefMemberDescription">Gets/Sets the specified row in the matrix. </p>

<a name="classefd_1_1_matrix3_1a2ee869789190206b0da47d9da6a5ce1c"></a>
<p class="NDLRefMemberFunction">void  FromEulerAnglesYZX(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> yAngle, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> zAngle, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> xAngle)</p>
<p class="NDLRefMemberDescription">Gets/Sets the specified row in the matrix. </p>

<a name="classefd_1_1_matrix3_1a99b62eef7ce2f8b6f547edb6ca68faf6"></a>
<p class="NDLRefMemberFunction">void  FromEulerAnglesZXY(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> zAngle, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> xAngle, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> yAngle)</p>
<p class="NDLRefMemberDescription">Gets/Sets the specified row in the matrix. </p>

<a name="classefd_1_1_matrix3_1a82b99dddea6f3d01e5f06e66e254a802"></a>
<p class="NDLRefMemberFunction">void  FromEulerAnglesZYX(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> zAngle, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> yAngle, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> xAngle)</p>
<p class="NDLRefMemberDescription">Gets/Sets the specified row in the matrix. </p>

<a name="classefd_1_1_matrix3_1a8e3296344d66c24b6a8d2070990637fe"></a>
<p class="NDLRefMemberFunction">Matrix3()</p>
<p class="NDLRefMemberDescription">Constructs a new matrix but for performance reasons does not initialize the values. </p>

<a name="classefd_1_1_matrix3_1a858deacaeb72e15260ad662337587bfe"></a>
<p class="NDLRefMemberFunction">Matrix3(<br/>const <span class="NDLSystemFont"><a href="efd__Point3.htm">efd::Point3</a></span>& col0, <br/>const <span class="NDLSystemFont"><a href="efd__Point3.htm">efd::Point3</a></span>& col1, <br/>const <span class="NDLSystemFont"><a href="efd__Point3.htm">efd::Point3</a></span>& col2)</p>
<p class="NDLRefMemberDescription">Constructs a new matrix using the specified columns. </p>

<a name="classefd_1_1_matrix3_1a17bc0e0dc426f87023842dada14dae4c"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  GetEntry(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> row, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> col) const</p>
<p class="NDLRefMemberDescription">Gets the value at the specified row and column in the matrix. </p>

<a name="classefd_1_1_matrix3_1acae19887c916ff4cc65654ef4047d86b"></a>
<p class="NDLRefMemberFunction">void  SetEntry(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> row, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> col, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> entry)</p>
<p class="NDLRefMemberDescription">Sets the value at the specified row and column in the matrix. </p>

<a name="classefd_1_1_matrix3_1a5c66274ab9fcda6d359a0fee998b43ae"></a>
<p class="NDLRefMemberFunction">void  MakeZero()</p>
<p class="NDLRefMemberDescription">Sets this matrix to the zero matrix. </p>

<a name="classefd_1_1_matrix3_1a6e79e21948114778e5bffeb13f1cca55"></a>
<p class="NDLRefMemberFunction">void  MakeRotation(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> angle, <br/>const <span class="NDLSystemFont"><a href="efd__Point3.htm">efd::Point3</a></span>& axis)</p>
<p class="NDLRefMemberDescription">Sets this matrix to the rotation about the specified axis. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<p class="NDLRefMemberDetailedDescription">The rotation axis should be normalized. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">angle</span></td>
    <td>Angle in radians. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">axis</span></td>
    <td>Axis with which to rotate about. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_matrix3_1a33b02a586287a5f9d03d2083d2095ef9"></a>
<p class="NDLRefMemberFunction">void  MakeRotation(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> angle, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> x, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> y, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> z)</p>
<p class="NDLRefMemberDescription">Sets this matrix to the rotation about the specified axis. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<p class="NDLRefMemberDetailedDescription">The rotation axis should be normalized. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">angle</span></td>
    <td>Angle in radians. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">x</span></td>
    <td>X component of the axis. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">y</span></td>
    <td>Y component of the axis. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">z</span></td>
    <td>Z component of the axis. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_matrix3_1aa0c7201b011b3f6e048eab8866c6e0a6"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  operator!=(const <span class="NDLSystemFont">Matrix3</span>& mat) const</p>
<p class="NDLRefMemberDescription">Tests for  member wise in-equality. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">mat</span></td>
    <td>Matrix with which to compare against. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if not equal, false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_matrix3_1ad5c217c6e6fc80337283e650e3b284c7"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  operator==(const <span class="NDLSystemFont">Matrix3</span>& mat) const</p>
<p class="NDLRefMemberDescription">Tests for  member wise equality. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">mat</span></td>
    <td>Matrix with which to compare against. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if exactly equal, false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_matrix3_1aea238212b485ce3f58d9e3600ceee9ae"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">Matrix3</span>  operator*(const <span class="NDLSystemFont">Matrix3</span>& mat) const</p>
<p class="NDLRefMemberDescription">Implements matrix multiplication. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">mat</span></td>
    <td>The matrix to multiply with this one. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A new matrix containing this matrix multiplied with the specified matrix. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_matrix3_1a34e156c79589fe7149ac647535a0862d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">Matrix3</span>  operator*(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> scalar) const</p>
<p class="NDLRefMemberDescription">Member wise matrix scale. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">scalar</span></td>
    <td>Scalar value to apply. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A new matrix containing the member wise multiplication of this matrix with the specified scalar. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_matrix3_1a190cf5bca0c63a844caf03b17aef3554"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="efd__Point3.htm">efd::Point3</a></span>  operator*(const <span class="NDLSystemFont"><a href="efd__Point3.htm">efd::Point3</a></span>& pt) const</p>
<p class="NDLRefMemberDescription">Transforms the specified point by this matrix. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pt</span></td>
    <td>The point with which to transform. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A new point representing the specified point transformed by this matrix. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_matrix3_1acf05fd102ac799d3c96f64ebf0bde427"></a>
<p class="NDLRefMemberFunction">void  MakeIdentity()</p>
<p class="NDLRefMemberDescription">Sets this matrix to be the identity matrix. </p>

<a name="classefd_1_1_matrix3_1a936c2436c302ba4f9aa90301a7a04dd5"></a>
<p class="NDLRefMemberFunction">void  MakeDiagonal(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> diag0, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> diag1, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> diag2)</p>
<p class="NDLRefMemberDescription">Sets this matrix to a pure diagonal matrix with the specified diagonal entries. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">diag0</span></td>
    <td>Assigned to row 0 column 0. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">diag1</span></td>
    <td>Assigned to row 1 column 1. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">diag2</span></td>
    <td>Assigned to row 2 column 2. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_matrix3_1a7644f2ead1341ca31347bcd1b2313d9d"></a>
<p class="NDLRefMemberFunction">void  MakeXRotation(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> angle)</p>
<p class="NDLRefMemberDescription">Sets a rotation about the x-axis. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">angle</span></td>
    <td>Angle in radians. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_matrix3_1af684d563b4113ad762b61f65847a0ad7"></a>
<p class="NDLRefMemberFunction">void  MakeYRotation(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> angle)</p>
<p class="NDLRefMemberDescription">Sets a rotation about the y-axis. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">angle</span></td>
    <td>Angle in radians. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_matrix3_1a4d79822fa6cc277af8eba851b14fb5a7"></a>
<p class="NDLRefMemberFunction">void  MakeZRotation(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> angle)</p>
<p class="NDLRefMemberDescription">Sets a rotation about the z-axis. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">angle</span></td>
    <td>Angle in radians. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_matrix3_1a6a55da0405a24eee1612f57041d57bba"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">Matrix3</span>  operator+(const <span class="NDLSystemFont">Matrix3</span>& mat) const</p>
<p class="NDLRefMemberDescription">Performs a component wise addition. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">mat</span></td>
    <td>The matrix to add with this one. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A new matrix containing the component wise sum of this matrix and the specified matrix. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_matrix3_1aaa33798d5f076c1c73a49d0965f03517"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">Matrix3</span>  operator-(const <span class="NDLSystemFont">Matrix3</span>& mat) const</p>
<p class="NDLRefMemberDescription">Performs a component wise subtraction. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">mat</span></td>
    <td>The matrix to subtract from this one. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A new matrix containing the component wise difference of this matrix and the specified matrix. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_matrix3_1a72be386f0ab33caa1d67f3931be39e3e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">Matrix3</span>  Inverse() const</p>
<p class="NDLRefMemberDescription">Computes the inverse of this matrix. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>The inverse of this matrix. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_matrix3_1aae8a75c33166eee8fd3b0da043f32f78"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  Inverse(<span class="NDLSystemFont">Matrix3</span>& inv) const</p>
<p class="NDLRefMemberDescription">Computes the inverse of this matrix. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">inv</span></td>
    <td>Contains the inverse of this matrix when the operation has completed. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if this matrix was inverted, false if not. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_matrix3_1a4b40b3406b10c712355054470db30979"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">Matrix3</span>  Transpose() const</p>
<p class="NDLRefMemberDescription">Computes the transpose of this matrix. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<p class="NDLRefMemberDetailedDescription">The use of this method can often be avoided by using the Point3*Matrix operator and the TransposeTimes method. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>The transpose of this matrix. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_matrix3_1a9e2fbfc2f00255d25d516fc64013002b"></a>
<p class="NDLRefMemberFunction">void  ExtractAngleAndAxis(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>& angle, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>& x, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>& y, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>& z) const</p>
<p class="NDLRefMemberDescription">Converts this matrix to an angle-axis rotation. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<p class="NDLRefMemberDetailedDescription">The rotation matrix must be a rigid, normalized matrix. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">angle</span></td>
    <td>Stores the resulting angle in radians. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">x</span></td>
    <td>Stores the x component of the axis. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">y</span></td>
    <td>Stores the y component of the axis. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">z</span></td>
    <td>Stores the z component of the axis. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_matrix3_1afea9237dceb3843853d72929686e25a7"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  Reorthogonalize()</p>
<p class="NDLRefMemberDescription">This routine should only be applied to rotation matrices. </p>
<p class="NDLRefMemberDetailedDescription">It implements Gram-Schmidt orthogonalization (the QR algorithm) and replaces the old rotation matrix with the orthogonal part Q of the decomposition. </p>

<a name="classefd_1_1_matrix3_1a32844c8c683845df208ac87ffc41b75f"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">Matrix3</span>  TransposeTimes(const <span class="NDLSystemFont">Matrix3</span>& mat) const</p>
<p class="NDLRefMemberDescription">Computes the transpose of this matrix multiplied with the specified matrix. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">mat</span></td>
    <td>The matrix to multiply. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A new matrix containing the product of the transpose of this matrix with the specified matrix. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_matrix3_1a9de4ee49332b1e37b4a4655792400dd1"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">Matrix3</span>  Congruence(const <span class="NDLSystemFont">Matrix3</span>& rot) const</p>
<p class="NDLRefMemberDescription">Computes the congruence transformation rot*this*Transpose(rot). </p>
<p class="NDLRefMemberDetailedDescription">The matrix 'rot' must be orthogonal. The congruence transformation is a special form of a similarity transformation mat*this*Inverse(mat) where 'mat' can be any invertible matrix. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">For Transpose(rot)*this*rot, use rot.TransposeTimes(mat)*rot. </p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">rot</span></td>
    <td>Rotation matrix that must be orthogonal. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A new matrix containing the resulting calculation. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_matrix3_1a55434c03706a23b651492f895d59514b"></a>
<p class="NDLRefMemberFunction">void  EigenSolveSymmetric(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> eigenvalue, <br/><span class="NDLSystemFont"><a href="efd__Point3.htm">efd::Point3</a></span> eigenvector)</p>
<p class="NDLRefMemberDescription">Computes the eigenvalues and corresponding eigenvectors of the calling matrix, which must be symmetric. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">eigenvalue</span></td>
    <td>Stores the resulting eigenvalues. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">eigenvector</span></td>
    <td>Stores the resulting eigenvectors. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_matrix3_1a856879559a34a71e632d7dba0798cf91"></a>
<p class="NDLRefMemberFunction">void  Serialize(<span class="NDLSystemFont"><a href="efd__Archive.htm">efd::Archive</a></span>& ar)</p>
<p class="NDLRefMemberDescription">Serialization. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
