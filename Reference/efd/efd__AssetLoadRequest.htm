<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::AssetLoadRequest</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::AssetLoadRequest</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="efd__IMessage.htm">efd::IMessage</a></span></p>


<p class="NDLRefHeaderFile">&lt;AssetLoadRequest.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classefd_1_1_asset_load_request.gif" alt="Inheritance graph for efd::AssetLoadRequest"/>
  <p class="FigureCaption">Inheritance graph for efd::AssetLoadRequest</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">A message class for requests to load an asset. </p>

<a name="construction_and_destruction"></a>
<p class="NDLRefHead1">Construction and Destruction</p>


<a name="classefd_1_1_asset_load_request_1aa0fe900246fa81a62ee034a4c4799a29"></a>
<p class="NDLRefMemberFunction">AssetLoadRequest()</p>
<p class="NDLRefMemberDescription">Default constructor to allow handler definition. </p>

<a name="classefd_1_1_asset_load_request_1a75e46c6be5d2c1fa679cae0cd195e7a6"></a>
<p class="NDLRefMemberFunction">AssetLoadRequest(<br/>const <span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span>& urn, <br/>const <span class="NDLSystemFont"><a href="efd__Category.htm">efd::Category</a></span>& responseCategory, <br/>const <span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span>& assetPath = efd::utf8string::NullString(), <br/>const <span class="NDLSystemFont">bool</span> isBackground = true, <br/>const <span class="NDLSystemFont">bool</span> isPreemptive = false, <br/><span class="NDLSystemFont">bool</span> isReload = false)</p>
<p class="NDLRefMemberDescription">Constructor requires the asset URN and the category on which to send the response. </p>
<p class="NDLRefMemberDetailedDescription">The category is also used to select the appropriate loader for the asset.</p>
<p class="NDLRefMemberDetailedDescription">If the assetPath value is non-empty when the message is received by the <span class="NDLSystemFont"><a href="efd__AssetFactoryManager.htm">efd::AssetFactoryManager</a></span> service, the file will be loaded directly from the path and the URN in the message will be ignored. Otherwise, an asset locator request will be done for the URN and the resulting file passed to the factory.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">urn</span></td>
    <td>The asset to load, or ignored if assetPath is specified. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">responseCategory</span></td>
    <td>The category to send results to. Each loader has a unique response category so this category can also identify which loader should be used. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">assetPath</span></td>
    <td>An optional file path for loading the asset. If provided, the urn is ignored and the asset is loaded from the specified file. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">isBackground</span></td>
    <td>Is true the load is done in the background thread, unless the factory can only operate in the foreground thread. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">isPreemptive</span></td>
    <td>If true the load is done as soon as possible in the requested thread. Request will be placed in a high priority <span class="NDLSystemFont"><a href="efd__queue.htm">queue</a></span> that is emptied before items from the normal <span class="NDLSystemFont"><a href="efd__queue.htm">queue</a></span> are processed. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">isReload</span></td>
    <td>A hint to the factory indicating this is a reload request. This hint might bypass checks for the asset already being cached on the assumption the source data has changed. </td>
</tr>

        </tbody>
    </table>
</div>


<a name="getters"></a>
<p class="NDLRefHead1">Getters</p>

<p class="NDLRefMemberDescription">{ </p>

<a name="classefd_1_1_asset_load_request_1a83c1c903fe98d7b434329a52e2fdb13b"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span>&  GetURN() const</p>
<p class="NDLRefMemberDescription">Get the request asset URN. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td><span class="NDLSystemFont"><a href="efd__utf8string.htm">utf8string</a></span> request asset URN. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_asset_load_request_1ac97ec9b7e3e03e5490581f3b043b0e46"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="efd__Category.htm">efd::Category</a></span>&  GetResponseCategory() const</p>
<p class="NDLRefMemberDescription">Get the request response category. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td><span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span>& request response category. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_asset_load_request_1a78cedbf63d157856aa43ab00afdfec08"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span>&  GetAssetPath() const</p>
<p class="NDLRefMemberDescription">Get the fully qualified path to the underlying asset on disk. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td><span class="NDLSystemFont"><a href="efd__utf8string.htm">utf8string</a></span> AssetPath. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_asset_load_request_1ab7702c73e4622eecfb50ee23e8cd5b3c"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetIsBackground() const</p>
<p class="NDLRefMemberDescription">Get the flag controlling background loading. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>bool True if the load should be done in the background. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_asset_load_request_1a9fc0f8ec4e1ee2da34ccdd3d347ce1df"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetIsPreemptive() const</p>
<p class="NDLRefMemberDescription">Get the flag controlling preemptive loading. </p>
<p class="NDLRefMemberDetailedDescription">See <span class="NDLSystemFont"><a href="efd__AssetFactoryManager.htm">efd::AssetFactoryManager</a></span> for the definition of preemptive in this context.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>bool True if the load should be done as soon as possible. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_asset_load_request_1aa280fb7fc7abf83bb1c2b59288545944"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetIsReload() const</p>
<p class="NDLRefMemberDescription">Get the flag indicating this is a reload request. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>bool True if this is a reload, false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_asset_load_request_1ae47e8a668068d767fd344c5411160900"></a>
<p class="NDLRefMemberFunction">void  SetURN(const <span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span>& urn)</p>
<p class="NDLRefMemberDescription">Set the request asset URN. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">urn</span></td>
    <td>The request asset URN. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_asset_load_request_1ad221045b737367d2ccf2c0fa4a3c8309"></a>
<p class="NDLRefMemberFunction">void  SetResponseCategory(const <span class="NDLSystemFont"><a href="efd__Category.htm">efd::Category</a></span>& responseCategory)</p>
<p class="NDLRefMemberDescription">Set the request response category. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">responseCategory</span></td>
    <td>The request response category. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_asset_load_request_1a7952f130e33cff7d2b3086c47c378d6b"></a>
<p class="NDLRefMemberFunction">void  SetAssetPath(const <span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span>& assetPath)</p>
<p class="NDLRefMemberDescription">Set the fully qualified path to the underlying flat model asset on disk. </p>
<p class="NDLRefMemberDetailedDescription">If this value is non-empty when the message is received by the <span class="NDLSystemFont"><a href="efd__AssetFactoryManager.htm">efd::AssetFactoryManager</a></span> service the file will be loaded directly from the path and the URN in the message will be ignored.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">assetPath</span></td>
    <td>The fully qualified path to the asset. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_asset_load_request_1a72b8e0d67141d1e697d8df49df467182"></a>
<p class="NDLRefMemberFunction">void  SetIsBackground(const <span class="NDLSystemFont">bool</span> isBackground)</p>
<p class="NDLRefMemberDescription">Set the flag controlling background loading. </p>
<p class="NDLRefMemberDetailedDescription">This flag may not be respected if the factory for the asset can only operate in the foreground thread.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">isBackground</span></td>
    <td>True if the load should be tried in the background. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_asset_load_request_1aa8a5e7d2294ebc002fd4420850590f3c"></a>
<p class="NDLRefMemberFunction">void  SetIsPreemptive(const <span class="NDLSystemFont">bool</span> isPreemptive)</p>
<p class="NDLRefMemberDescription">Set the flag controlling preemptive loading. </p>
<p class="NDLRefMemberDetailedDescription">See <span class="NDLSystemFont"><a href="efd__AssetFactoryManager.htm">efd::AssetFactoryManager</a></span> for the definition of preemptive in this context.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">isPreemptive</span></td>
    <td>True if the load should be done as soon as possible, false for an in-requested-order load. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_asset_load_request_1a51670d3e078d69b0b9742d2ad7468dba"></a>
<p class="NDLRefMemberFunction">void  SetIsReload(<span class="NDLSystemFont">bool</span> isReload)</p>
<p class="NDLRefMemberDescription">Set the flat identifying this as a reload request. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">isReload</span></td>
    <td>True if this this a reload request, false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>


<a name="istreamable_interface_methods."></a>
<p class="NDLRefHead1">IStreamable interface methods.</p>


<a name="classefd_1_1_asset_load_request_1afa74212a68f31a90ec5a32ea945e4dce"></a>
<p class="NDLRefMemberFunction">virtual void  Serialize(<span class="NDLSystemFont"><a href="efd__Archive.htm">efd::Archive</a></span>& io_ar)</p>
<p class="NDLRefMemberDescription">Serialize a polymorphic type to or from an <span class="NDLSystemFont"><a href="efd__Archive.htm">Archive</a></span>. </p>
<p class="NDLRefMemberDetailedDescription">This method must be overridden, but if your streamable object has no data the override can be an empty function. A typical implementation of this method will make one call to <span class="NDLSystemFont"><a href="../Namespaces/efd__Serializer.htm#namespaceefd_1_1_serializer_1a63e0b99047011bde53be44786ab9ee7b">efd::Serializer::SerializeObject</a></span> for each member of the class. If you are derived from another streamable class you should be sure to call to parent implementation of this method as well; it is recommended that the parent class be serialized first before adding the data for the derived class. If your class contains complex data such as STL-style contianers or pointers to allocated data then you can simplify the implementation of Serialize by using the templated helper functions in &lt;<span class="NDLSystemFont">efd/SerializeRoutines.h</span>&gt;; these can serialize even the most complex data structures with a single method call and will reduce the chance of making common mistakes (which could introduce security vulnerabilities if marshalling data from untrusted sources).</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">io_ar</span></td>
    <td>The <span class="NDLSystemFont"><a href="efd__Archive.htm">Archive</a></span> to serialize to or from. </td>
</tr>

        </tbody>
    </table>
</div>


 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
