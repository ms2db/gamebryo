<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::CriticalSection</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::CriticalSection</p>


<p class="NDLRefHeaderFile">&lt;CriticalSection.h&gt;</p>


<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">A platform-independent wrapper class to handle critical sections for threading. </p>
<p class="NDLNormal">When entering the critical section the Lock method should be called. When exiting, the Unlock method. The critical section will automatically release upon destruction.</p>
<p class="NDLNormal">This <span class="NDLSystemFont">CriticalSection</span> implementation is recursive. The same thread can requests a critical section lock multiple times without deadlock. These requests are tracked and the critical section released only when an equal number of unlock calls is made from the thread. </p>

<a name="construction_and_destruction"></a>
<p class="NDLRefHead1">Construction and Destruction</p>


<a name="classefd_1_1_critical_section_1add0613c94126ef4cd24354d04318fd4f"></a>
<p class="NDLRefMemberFunction">CriticalSection(const char* pcDebugName = 0)</p>
<p class="NDLRefMemberDescription">Default constructor. </p>

<a name="classefd_1_1_critical_section_1ab8f796e9f3127d13466464a61a0ad247"></a>
<p class="NDLRefMemberFunction">~CriticalSection()</p>
<p class="NDLRefMemberDescription">Destructor. </p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classefd_1_1_critical_section_1a1f32211bae3a27b57e0544758e2d6f66"></a>
<p class="NDLRefMemberFunction">void  Lock()</p>
<p class="NDLRefMemberDescription">Locks the critical section. </p>
<p class="NDLRefMemberDetailedDescription">This prevents other threads from entering the protected code block. Each call to Lock increments to lock count. </p>

<a name="classefd_1_1_critical_section_1aa2365f2f699337c961589489b76d7b5b"></a>
<p class="NDLRefMemberFunction">void  Unlock()</p>
<p class="NDLRefMemberDescription">Decrement the lock count and unlocks the critical section when it falls to zero. </p>

<a name="classefd_1_1_critical_section_1aaf55dcd142cebb420b4ab36e27d57ec2"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetOwningThreadID() const</p>
<p class="NDLRefMemberDescription">Gets the ID of the thread that last locked the critical section. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>The ID of the last thread to lock the critical section or 0 if the critical section is not locked. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_critical_section_1ad0dcd6f07c2106d3f13947bb9ec759e6"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetCurrentLockCount() const</p>
<p class="NDLRefMemberDescription">Gets the current count of calls to Lock by the same thread. </p>
<p class="NDLRefMemberDetailedDescription">The critical section will not be unlocked until Unlock has been called this many times.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>The number of times the critical section has been locked by the same thread. </td>
</tr>

        </tbody>
    </table>
</div>


 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
