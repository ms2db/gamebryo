<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::XMLMemLogHandler</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::XMLMemLogHandler</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="efd__IMemLogHandler.htm">efd::IMemLogHandler</a></span></p>


<p class="NDLRefHeaderFile">&lt;XMLMemLogHandler.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classefd_1_1_x_m_l_mem_log_handler.gif" alt="Inheritance graph for efd::XMLMemLogHandler"/>
  <p class="FigureCaption">Inheritance graph for efd::XMLMemLogHandler</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">This class is an XML based memory logger. </p>
<p class="NDLNormal">The logger will produce a Memory-Overview.xml file and a Memory-Leaks.xml file. The Memory-Overview.xml file contains a log of all memory allocations performed by the application. The only exception to this is the memory allocations performed by <span class="NDLSystemFont"><a href="efd__IMemLogHandler.htm#classefd_1_1_i_mem_log_handler_1af2e8a5a09095075c87a74ad30450a462">IMemLogHandler::OnInit()</a></span> will not be logged. Also a Memory-Leaks.xml file will be produced listing any memory leaked by the application.</p>
<p class="NDLNormal">Each xml file has an associated style sheet (MemoryReport.xsl& MemoryLeak.xsl) that will be produced in the same folder as the xml files. The style sheets allow the xml files to be view in an web-browser with easy to read formating. </p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classefd_1_1_x_m_l_mem_log_handler_1a862cc800ba1f5661ec54320685399fe4"></a>
<p class="NDLRefMemberFunction">XMLMemLogHandler()</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_x_m_l_mem_log_handler_1a7e9ab26e583689f648bcfda6dbf59ede"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">efd::Bool</span>  OnInit()</p>
<p class="NDLRefMemberDescription">Initializes any internal data structures that will be needed. </p>
<p class="NDLRefMemberDetailedDescription">This includes all XML file handles. This method is also responsible for creating the MemoryReport.xsl& MemoryLeaks.xsl files if they do not already exist.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>True if the initialization was successful. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_x_m_l_mem_log_handler_1a7446bccb4c73c1a36cf0d79ba7b7b732"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">efd::Bool</span>  OnShutdown()</p>
<p class="NDLRefMemberDescription">Shutdown all internal data structures. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>True if the shutdown was successful. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_x_m_l_mem_log_handler_1a788208d92be52b28fd0e30fb292c09b7"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">efd::Bool</span>  IsInitialized()</p>
<p class="NDLRefMemberDescription">Returns true if the <span class="NDLSystemFont"><a href="efd__IMemLogHandler.htm">IMemLogHandler</a></span> has been initialized. </p>

<a name="classefd_1_1_x_m_l_mem_log_handler_1a647638b0ffc25d6cc7876777011fcf42"></a>
<p class="NDLRefMemberFunction">virtual void  LogAllocUnit(<br/>const <span class="NDLSystemFont"><a href="efd__AllocUnit.htm">AllocUnit</a></span>* pkUnit, <br/>const char* pcPrefix = "", <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ad9c81f78b405eb346c527c73002e5382">MemEventType</a></span> eDeallocType = EE_MET_UNKNOWN, <br/>double fDeallocTime = -FLT_MAX, <br/>unsigned long ulDeallocThreadId = 0, <br/>size_t stSizeUnused = 0) const</p>
<p class="NDLRefMemberDescription">This method writes a line of XML code describing the to allocation unit (pkUnit) to the specified <span class="NDLSystemFont"><a href="../NiSystem/NiLogger.htm">NiLogger</a></span> channel (iChannel). </p>
<p class="NDLRefMemberDetailedDescription">Other arguments are specified if this line is meant to log information about the deallocation. </p>

<a name="classefd_1_1_x_m_l_mem_log_handler_1a5f76157a30899c0c4c08441794108d9f"></a>
<p class="NDLRefMemberFunction">virtual void  LogAllocUnitLeak(<br/>const <span class="NDLSystemFont"><a href="efd__AllocUnit.htm">AllocUnit</a></span>* pkUnit, <br/>const char* pcPrefix = "") const</p>
<p class="NDLRefMemberDescription">This method is responsible for logging a memory leak. </p>

<a name="classefd_1_1_x_m_l_mem_log_handler_1a4791c547892b38867683b8db4edcd85a"></a>
<p class="NDLRefMemberFunction">void  LogMemoryReport() const</p>
<p class="NDLRefMemberDescription">Write data to the memory leak log file about all active allocations. </p>

<a name="classefd_1_1_x_m_l_mem_log_handler_1a66476a2538a36e1a9565138d3ad40000"></a>
<p class="NDLRefMemberFunction">void  LogSummaryStats() const</p>
<p class="NDLRefMemberDescription">Write a summary of the memory statistics to the memory overview log file. </p>

<a name="classefd_1_1_x_m_l_mem_log_handler_1aff8cb4008cfc432c0237a95f45d1e108"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  SetMarker(<br/>const char* pcMarkerType, <br/>const char* pcClassifier, <br/>const char* pcString)</p>
<p class="NDLRefMemberDescription">The method allows applications to <span class="NDLSystemFont"><a href="efd__set.htm">set</a></span> a mark between allocation events that can be used to help better track and organize all memory allocations. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
