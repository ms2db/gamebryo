<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::FixedNodePool</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::FixedNodePool</p>


<p class="NDLRefHeaderFile">&lt;FixedNodePool.h&gt;</p>


<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">This class represents a simple fixed-length buffer of nodes that cannot be resized. </p>
<p class="NDLNormal">It does not internally track which nodes are free or used, but it is capable of determining if a given node is part of it's buffer, which allows it to be used as a useful component of other containers. In this usage pattern, the outer container will create a fixed pool and initialize it's freelist with that pool. If the freelist is exhausted and new allocations are created, then they will be individually deleted when ReleaseNode is called on them. </p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classefd_1_1_fixed_node_pool_1a50fb74f6f6482fa4a0cef50320bab6c6"></a>
<p class="NDLRefMemberFunction">FixedNodePool(size_t size)</p>
<p class="NDLRefMemberDescription">Create a fixed-size pool of nodes. </p>

<a name="classefd_1_1_fixed_node_pool_1a7c966f800677b92ca3861e7eb55d5b3f"></a>
<p class="NDLRefMemberFunction">~FixedNodePool()</p>
<p class="NDLRefMemberDescription">Destroy the fixed-size pool, releasing the memory used by it. </p>

<a name="classefd_1_1_fixed_node_pool_1ab6ed958b7bbd33d47e6a6b6563c1238f"></a>
<p class="NDLRefMemberFunction">NodeType*  GetAt(unsigned int ui)</p>
<p class="NDLRefMemberDescription">Returns the indexed node. </p>

<a name="classefd_1_1_fixed_node_pool_1adb006fe2142a86a243c6ea81724807cd"></a>
<p class="NDLRefMemberFunction">size_t  GetSize()</p>
<p class="NDLRefMemberDescription">Returns the size of the fixed pool. </p>

<a name="classefd_1_1_fixed_node_pool_1a744a04c9442a67c4ca3c32ba139d948c"></a>
<p class="NDLRefMemberFunction">size_t  ReleaseNode(NodeType* pNodeToDelete)</p>
<p class="NDLRefMemberDescription">'Release' the node back to the pool. </p>
<p class="NDLRefMemberDetailedDescription">If the node was not part of the fixed pool, it will be deleted. Returns 0 if the node belonged to the pool, and 1 if it was deleted.</p>
<p class="NDLRefMemberDetailedDescription">Note: The pool does not keep track of which nodes are free or used, that is up to the caller. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
