<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::File</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::File</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="efd__BinaryStream.htm">efd::BinaryStream</a></span></p>


<p class="NDLRefHeaderFile">&lt;File.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classefd_1_1_file.gif" alt="Inheritance graph for efd::File"/>
  <p class="FigureCaption">Inheritance graph for efd::File</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">Platform-independent abstract class that defines the interface for writing to and reading from files. </p>
<p class="NDLNormal">In addition to defining the interface it also provides a mechanism to replace the default concrete implementation of the <span class="NDLSystemFont">File</span> interface. </p>

<a name="public_types"></a>
<p class="NDLRefHead1">Public Types</p>
<a name="classefd_1_1_file_1aebb61699dfb91f58aa1a287ff8dad1c5"></a>
<p class=NDLRefHead2>efd::File::OpenMode</p>


<p class="NDLRefMemberDescription">Enumerates how a file is to be opened. </p>


<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">READ_ONLY</span></td>
    <td>The file is opened in binary read-only mode, and no data may be written to the file. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">WRITE_ONLY</span></td>
    <td>The file is opened in binary write-only mode, and no data may be read from the file. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">APPEND_ONLY</span></td>
    <td>The file is opened in binary append-only mode, and data may only be appended to the end of the file. It is illegal to call <span class="NDLSystemFont"><a href="efd__File.htm#classefd_1_1_file_1aa210fdecc154717e13f7c47708a25f72">Seek()</a></span> for a <span class="NDLSystemFont">File</span> that is opened in this mode. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">READ_ONLY_TEXT</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">WRITE_ONLY_TEXT</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">APPEND_ONLY_TEXT</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">READ_ONLY_ENCRYPTED</span></td>
    <td>The file is opened in binary read-only mode. If encryption support is enabled, the file must be validly encrypted, otherwise the file will fail to be read/opened. 
<p class="NDLNormal">This mode is currently only supported on the PS3 platform. On other platforms this behaves identically to READ_ONLY </p></td>
</tr>

  </tbody>
</table>
</div>

<a name="classefd_1_1_file_1a8f5eb7d45e5cf11a53aaa2961158cf2d"></a>
<p class=NDLRefHead2>efd::File::SeekOrigin</p>


<p class="NDLRefMemberDescription">Enumerates where a seek is to start. </p>


<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">SO_BEGIN</span></td>
    <td>Seek from the beginning of the stream (<span class="NDLSystemFont"><a href="efd__set.htm">set</a></span> the offset). </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SO_CURRENT</span></td>
    <td>Seek from the current position in the stream. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SO_END</span></td>
    <td>Seek from the end of the stream. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">ms_iSeekSet</span></td>
    <td>These names are deprecated, and remain only for backwards compatibility. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">ms_iSeekCur</span></td>
    <td>These names are deprecated, and remain only for backwards compatibility. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">ms_iSeekEnd</span></td>
    <td>&nbsp;</td>
</tr>

  </tbody>
</table>
</div>

<a name="classefd_1_1_file_1a4852a12947623f36328d8d2462efe318"></a>
<p class=NDLRefHead2>efd::File::FileError</p>


<p class="NDLRefMemberDescription">Enumerates the type of file error that occurred. </p>


<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">FILE_ERROR_OPEN</span></td>
    <td>An error occurred opening the file. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">FILE_ERROR_CLOSE</span></td>
    <td>An error occurred closing the file. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">FILE_ERROR_SEEK</span></td>
    <td>An error occurred while seeking within the file. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">FILE_ERROR_READ</span></td>
    <td>An error occurred while reading from the file. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">FILE_ERROR_WRITE</span></td>
    <td>An error occurred while writing to the file. </td>
</tr>

  </tbody>
</table>
</div>



<a name="classefd_1_1_file_1a5455d6264af146fba6b8e4077aaf32a7"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont">File</span> *(*  FILECREATEFUNC)(const char *pcName, OpenMode eMode, unsigned int uiBufferSize, bool flushOnWrite)</p>
<p class="NDLRefMemberDescription">Define a function to create <span class="NDLSystemFont">File</span> objects. </p>

<a name="classefd_1_1_file_1a1c95db437a767a4083c3163079a3bcbd"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont">bool</span>(*  FILEACCESSFUNC)(const char *pcName, OpenMode eMode)</p>
<p class="NDLRefMemberDescription">Define a function to check if a file exists and can be accessed. </p>

<a name="classefd_1_1_file_1aff4de7ea4e599eab4597d45366b22852"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont">bool</span>(*  CREATEDIRFUNC)(const char *pcName)</p>
<p class="NDLRefMemberDescription">Define a function to create a single directory. </p>

<a name="classefd_1_1_file_1abfd784c892df8f9d6817cc4e7af8e27b"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont">bool</span>(*  DIREXISTSFUNC)(const char *pcName)</p>
<p class="NDLRefMemberDescription">Define a function to check if a directory exists. </p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classefd_1_1_file_1aaab6a3d5aebc356ca7176d29b626423e"></a>
<p class="NDLRefMemberFunction">virtual ~File()</p>
<p class="NDLRefMemberDescription">Virtual destructor. </p>

<a name="classefd_1_1_file_1a3ac1913600a8c9df6b7fb51d734d0856"></a>
<p class="NDLRefMemberFunction">virtual operator bool() const = 0</p>
<p class="NDLRefMemberDescription">Operator to report on current success state of the <span class="NDLSystemFont">File</span> instance. </p>

<a name="classefd_1_1_file_1a87f2d82b94144c6a69d5773c766992cd"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  Flush() = 0</p>
<p class="NDLRefMemberDescription">Flush all buffered data to the file. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>: True if flush of all buffered data to file succeeded; false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_file_1aa210fdecc154717e13f7c47708a25f72"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  Seek(int iNumBytes)</p>
<p class="NDLRefMemberDescription">Advances the current read/write position of the stream by the number of bytes given by iNumBytes. </p>
<p class="NDLRefMemberDetailedDescription">Passing a negative value into iNumBytes will move the current position back towards the beginning of the file, while a positive value will advance the position towards the end of the file.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">iNumBytes</span></td>
    <td>Number of bytes to move (forward or backward) the current read/write position of the stream. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>true if successful, false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_file_1afd153b03fbe09b66727316d447e89bde"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  Seek(<br/>int offset, <br/><span class="NDLSystemFont"><a href="efd__File.htm#classefd_1_1_file_1a8f5eb7d45e5cf11a53aaa2961158cf2d">SeekOrigin</a></span> seekFrom) = 0</p>
<p class="NDLRefMemberDescription">Reset the current read/write position of the file. </p>
<p class="NDLRefMemberDetailedDescription">The new position is determined by an offset and a starting location. The starting location for the seek operation can be one of the following:</p>
<p class="NDLRefMemberDetailedDescription">
<ul>
<li>Beginning of the file</li>
<li>End of the file</li>
<li>Current location in the file.</li></ul></p>
<p class="NDLRefMemberDetailedDescription">Passing a negative value into iOffset will move the current position back towards the beginning of the file, while a positive value will advance the position towards the end of the file.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">offset</span></td>
    <td>Number of bytes to move (forward or backward) from the starting location of the seek operation. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">seekFrom</span></td>
    <td>Starting location of the seek operation. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>true if successful, false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_file_1a20df4a1b54d2e2b0f142af296d414bea"></a>
<p class="NDLRefMemberFunction">virtual unsigned int  GetFileSize() const = 0</p>
<p class="NDLRefMemberDescription">Return the size of the file in bytes. </p>

<a name="classefd_1_1_file_1a7dbca4ff6b92bb5a81f8f68cbd46a1a4"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  eof() = 0</p>
<p class="NDLRefMemberDescription">Return true if we've reached the end of file. </p>

<a name="classefd_1_1_file_1a1bb75be66ae2c21cab37cb95977d9a4b"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  IsGood() = 0</p>
<p class="NDLRefMemberDescription">Return true if the file is in a known-good state ready for read and/or write. </p>
<a name="public_static_methods"></a>
<p class="NDLRefHead1">Public Static Methods</p>


<a name="classefd_1_1_file_1a4cd8fa24087bee2d83de4b79b4a3b702"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">File</span>*  GetFile(<br/>const char* pcName, <br/><span class="NDLSystemFont"><a href="efd__File.htm#classefd_1_1_file_1aebb61699dfb91f58aa1a287ff8dad1c5">OpenMode</a></span> eMode, <br/>unsigned int uiBufferSize = 32768, <br/><span class="NDLSystemFont">bool</span> flushOnWrite = false)</p>
<p class="NDLRefMemberDescription">Create an instance of a <span class="NDLSystemFont">File</span> object. </p>
<p class="NDLRefMemberDetailedDescription">By default, it calls a function that simply allocates a <span class="NDLSystemFont">File</span> object. To override its behavior, an application can cause its own version of the function to be called instead by passing a pointer to its version of the function to <span class="NDLSystemFont"><a href="efd__File.htm#classefd_1_1_file_1ad011de001135908bc4a24ecb6406ccdf">File::SetFileCreateFunc()</a></span>.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pcName</span></td>
    <td>Filename. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">eMode</span></td>
    <td>Open mode (read versus write versus append). </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiBufferSize</span></td>
    <td>Buffer size (defaults to 32768). </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">flushOnWrite</span></td>
    <td>if false buffer writes until we fill the buffer. If true, flush after every write call. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Pointer to an instance of a <span class="NDLSystemFont">File</span> object. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_file_1ad011de001135908bc4a24ecb6406ccdf"></a>
<p class="NDLRefMemberFunction">static void  SetFileCreateFunc(<span class="NDLSystemFont"><a href="efd__File.htm#classefd_1_1_file_1a5455d6264af146fba6b8e4077aaf32a7">FILECREATEFUNC</a></span> pfnFunc)</p>
<p class="NDLRefMemberDescription">Set the file creation function or restore to the default value if pfnFunc is NULL. </p>
<p class="NDLRefMemberDetailedDescription">This function can be useful if the application wishes to override the creation of <span class="NDLSystemFont">File</span> objects when Emergent products internally create a <span class="NDLSystemFont">File</span> object to read a file (for example, to read an external texture referenced by a NIF file). Use <span class="NDLSystemFont"><a href="efd__File.htm#classefd_1_1_file_1ad011de001135908bc4a24ecb6406ccdf">SetFileCreateFunc()</a></span> to override the behavior of <span class="NDLSystemFont"><a href="efd__File.htm#classefd_1_1_file_1a4cd8fa24087bee2d83de4b79b4a3b702">GetFile()</a></span>.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pfnFunc</span></td>
    <td>Pointer to a file creation function. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_file_1af16480ca439fab3f4caacabc4b6ba00a"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  Access(<br/>const char* pcName, <br/><span class="NDLSystemFont"><a href="efd__File.htm#classefd_1_1_file_1aebb61699dfb91f58aa1a287ff8dad1c5">OpenMode</a></span> eMode)</p>
<p class="NDLRefMemberDescription">Determine whether a file with the name pcName exists and can be accessed with permissions defined by eMode. </p>
<p class="NDLRefMemberDetailedDescription">The behavior of this function depends on the requested access mode.</p>
<p class="NDLRefMemberDetailedDescription">When eMode is <span class="NDLSystemFont"><a href="efd__set.htm">set</a></span> to READ_ONLY, the Access function returns false if the file does not exist or if you do not have permission to open the file.</p>
<p class="NDLRefMemberDetailedDescription">When eMode is <span class="NDLSystemFont"><a href="efd__set.htm">set</a></span> to WRITE_ONLY or APPEND_ONLY, the Access function returns false only if you do not have permission to write to the file.</p>
<p class="NDLRefMemberDetailedDescription">The behavior of this function can be overridden by calling <span class="NDLSystemFont"><a href="efd__File.htm#classefd_1_1_file_1a918adae4455c1a68cccebd49b142150f">SetFileAccessFunc()</a></span>.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pcName</span></td>
    <td>Filename. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">eMode</span></td>
    <td>Open mode (read versus write versus append). </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>False if you do not have permissions to open the file for the given OpenMode or if the file does not exist when requesting READ_ONLY access. True if you do have permission to open the file. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_file_1a918adae4455c1a68cccebd49b142150f"></a>
<p class="NDLRefMemberFunction">static void  SetFileAccessFunc(<span class="NDLSystemFont"><a href="efd__File.htm#classefd_1_1_file_1a1c95db437a767a4083c3163079a3bcbd">FILEACCESSFUNC</a></span> pfnFunc)</p>
<p class="NDLRefMemberDescription">Set the pointer to the function that is used to determine whether a file exists and can be accessed. </p>
<p class="NDLRefMemberDetailedDescription">If pfnFunc is NULL, then the default value is restored. If <span class="NDLSystemFont"><a href="efd__File.htm#classefd_1_1_file_1ad011de001135908bc4a24ecb6406ccdf">SetFileCreateFunc()</a></span> is used to override the creation of <span class="NDLSystemFont">File</span> objects, it is usually also necessary to use <span class="NDLSystemFont"><a href="efd__File.htm#classefd_1_1_file_1a918adae4455c1a68cccebd49b142150f">SetFileAccessFunc()</a></span> to override the determination of file existence. <span class="NDLSystemFont"><a href="efd__File.htm#classefd_1_1_file_1a918adae4455c1a68cccebd49b142150f">SetFileAccessFunc()</a></span> overrides the behavior of <span class="NDLSystemFont"><a href="efd__File.htm#classefd_1_1_file_1af16480ca439fab3f4caacabc4b6ba00a">File::Access()</a></span> in the same way that <span class="NDLSystemFont"><a href="efd__File.htm#classefd_1_1_file_1ad011de001135908bc4a24ecb6406ccdf">File::SetFileCreateFunc()</a></span> overrides the behavior of <span class="NDLSystemFont"><a href="efd__File.htm#classefd_1_1_file_1a4cd8fa24087bee2d83de4b79b4a3b702">File::GetFile()</a></span>.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pfnFunc</span></td>
    <td>Pointer to a function to check if a file exists and can be accessed. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_file_1aa053ea2063f5ba2646dc503d70c7ca46"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  CreateDirectory(const char* pcDirName)</p>
<p class="NDLRefMemberDescription">Create a single named directory. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">Only the last directory in the path specified will be created.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pcDirName</span></td>
    <td>Name of directory to be created. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if directory was created successfully; false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_file_1a02a99987f2ac0be2fc8127006ceda3e0"></a>
<p class="NDLRefMemberFunction">static void  SetCreateDirectoryFunc(<span class="NDLSystemFont"><a href="efd__File.htm#classefd_1_1_file_1aff4de7ea4e599eab4597d45366b22852">CREATEDIRFUNC</a></span> pfnFunc)</p>
<p class="NDLRefMemberDescription">Set the pointer to the function that creates a directory. </p>
<p class="NDLRefMemberDetailedDescription">If pfnFunc is NULL, the default value is restored. If <span class="NDLSystemFont"><a href="efd__File.htm#classefd_1_1_file_1a02a99987f2ac0be2fc8127006ceda3e0">SetCreateDirectoryFunc()</a></span> is used to override the creation of a directory, it is usually also necessary to use <span class="NDLSystemFont"><a href="efd__File.htm#classefd_1_1_file_1a1543b65ee4e6a5bb2f2e228603bc0d45">SetDirectoryExistsFunc()</a></span> to override the determination of directory existence. This function overrides the behavior of <span class="NDLSystemFont"><a href="efd__File.htm#classefd_1_1_file_1aa053ea2063f5ba2646dc503d70c7ca46">File::CreateDirectory()</a></span> in the same way that <span class="NDLSystemFont"><a href="efd__File.htm#classefd_1_1_file_1ad011de001135908bc4a24ecb6406ccdf">File::SetFileCreateFunc()</a></span> overrides the behavior of <span class="NDLSystemFont"><a href="efd__File.htm#classefd_1_1_file_1a4cd8fa24087bee2d83de4b79b4a3b702">File::GetFile()</a></span>.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pfnFunc</span></td>
    <td>Pointer to a function to create a single directory. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_file_1a878cf98c28b632d17e1c79c127e82ead"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  DirectoryExists(const char* pcDirName)</p>
<p class="NDLRefMemberDescription">Determine whether or not a directory path exists. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pcDirName</span></td>
    <td>Name of directory to be checked. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if directory exists; false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_file_1a1543b65ee4e6a5bb2f2e228603bc0d45"></a>
<p class="NDLRefMemberFunction">static void  SetDirectoryExistsFunc(<span class="NDLSystemFont"><a href="efd__File.htm#classefd_1_1_file_1abfd784c892df8f9d6817cc4e7af8e27b">DIREXISTSFUNC</a></span> pfnFunc)</p>
<p class="NDLRefMemberDescription">Set the pointer to the function that determines if a directory exists. </p>
<p class="NDLRefMemberDetailedDescription">If pfnFunc is NULL, the default value is restored. If <span class="NDLSystemFont"><a href="efd__File.htm#classefd_1_1_file_1a02a99987f2ac0be2fc8127006ceda3e0">SetCreateDirectoryFunc()</a></span> is used to override the creation of a directory, it is usually also necessary to use <span class="NDLSystemFont"><a href="efd__File.htm#classefd_1_1_file_1a1543b65ee4e6a5bb2f2e228603bc0d45">SetDirectoryExistsFunc()</a></span> to override the determination of directory existence. This function overrides the behavior of <span class="NDLSystemFont"><a href="efd__File.htm#classefd_1_1_file_1a878cf98c28b632d17e1c79c127e82ead">File::DirectoryExists()</a></span> in the same way that <span class="NDLSystemFont"><a href="efd__File.htm#classefd_1_1_file_1ad011de001135908bc4a24ecb6406ccdf">File::SetFileCreateFunc()</a></span> overrides the behavior of <span class="NDLSystemFont"><a href="efd__File.htm#classefd_1_1_file_1a4cd8fa24087bee2d83de4b79b4a3b702">File::GetFile()</a></span>.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pfnFunc</span></td>
    <td>Pointer to a function to check if a directory exists. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_file_1ade5d5cfdfa47a333a2cd513ceb02eb34"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  CreateDirectoryRecursive(const char* pcFullPath)</p>
<p class="NDLRefMemberDescription">Recursively check to see if all named directories exist in the path, and if not, create them one at a time. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">All directories in the path that do not exist will be created.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pcFullPath</span></td>
    <td>Pointer to full path string. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if function is successful; false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_file_1ae8345c1949aa4cba4142d18e675e8d34"></a>
<p class="NDLRefMemberFunction">static void  SetEncryptionCheckEnabled(<span class="NDLSystemFont">bool</span> enabled)</p>
<p class="NDLRefMemberDescription">Enables or disables enforcement of the READ_ONLY_ENCRYPTED semantics. </p>
<p class="NDLRefMemberDetailedDescription">Note: This currently only affects the behavior of the PS3. </p>

<a name="classefd_1_1_file_1a0bd63efa3cc9f700fe1bf3c0dcf7abac"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  GetEncryptionCheckEnabled()</p>
<p class="NDLRefMemberDescription">Returns the state of the encryption checking when READ_ONLY_ENCRYPTED is specified. </p>
<a name="default_overridable_functions.__see_corresponding_function_for_more_info."></a>
<p class="NDLRefHead1">Default overridable functions.  See corresponding function for more info.</p>


<a name="classefd_1_1_file_1af4e390cb953103f29d05adcb2cb19d41"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">File</span>*  DefaultFileCreateFunc(<br/>const char* pcName, <br/><span class="NDLSystemFont"><a href="efd__File.htm#classefd_1_1_file_1aebb61699dfb91f58aa1a287ff8dad1c5">OpenMode</a></span> eMode, <br/>unsigned int uiBufferSize, <br/><span class="NDLSystemFont">bool</span> flushOnWrite = false)</p>
<p class="NDLRefMemberDescription">Default <span class="NDLSystemFont"><a href="efd__File.htm#classefd_1_1_file_1a4cd8fa24087bee2d83de4b79b4a3b702">GetFile()</a></span>. </p>

<a name="classefd_1_1_file_1a81b40ef1f8d66a05369bc375ca91df46"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  DefaultFileAccessFunc(<br/>const char* pcName, <br/><span class="NDLSystemFont"><a href="efd__File.htm#classefd_1_1_file_1aebb61699dfb91f58aa1a287ff8dad1c5">OpenMode</a></span> eMode)</p>
<p class="NDLRefMemberDescription">Default <span class="NDLSystemFont"><a href="efd__File.htm#classefd_1_1_file_1af16480ca439fab3f4caacabc4b6ba00a">Access()</a></span>. </p>

<a name="classefd_1_1_file_1a94cb9e37a0e2b76b7b9b140cf3e8b659"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  DefaultCreateDirectoryFunc(const char* pcDir)</p>
<p class="NDLRefMemberDescription">Default <span class="NDLSystemFont"><a href="efd__File.htm#classefd_1_1_file_1aa053ea2063f5ba2646dc503d70c7ca46">CreateDirectory()</a></span>. </p>

<a name="classefd_1_1_file_1aa23d3b225d2eff6c94caf12e3cba5aa4"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  DefaultDirectoryExistsFunc(const char* pcDir)</p>
<p class="NDLRefMemberDescription">Default <span class="NDLSystemFont"><a href="efd__File.htm#classefd_1_1_file_1a878cf98c28b632d17e1c79c127e82ead">DirectoryExists()</a></span>. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
