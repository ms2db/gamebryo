<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::CustomAllocator</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::CustomAllocator</p>


<p class="NDLRefHeaderFile">&lt;customalloc.h&gt;</p>


<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">Custom allocator for general case. </p>

<a name="public_types"></a>
<p class="NDLRefHead1">Public Types</p>


<a name="classefd_1_1_custom_allocator_1a2ec17236630bdb5e304e1fe947134b30"></a>
<p class="NDLRefMemberFunction">typedef size_t  size_type</p>
<p class="NDLRefMemberDescription">Define pointers, const pointers, and other general types for custom allocator. </p>

<a name="classefd_1_1_custom_allocator_1ac97c11269a8428b416b115bb9b5ccbbd"></a>
<p class="NDLRefMemberFunction">typedef ptrdiff_t  difference_type</p>
<p class="NDLRefMemberDescription">Define pointers, const pointers, and other general types for custom allocator. </p>

<a name="classefd_1_1_custom_allocator_1a8ef7abf7fc762d31bd4ffa705c0377e3"></a>
<p class="NDLRefMemberFunction">typedef T*  pointer</p>
<p class="NDLRefMemberDescription">Define pointers, const pointers, and other general types for custom allocator. </p>

<a name="classefd_1_1_custom_allocator_1abd59aac1368019bc438f17b042eb8b2b"></a>
<p class="NDLRefMemberFunction">typedef const T*  const_pointer</p>
<p class="NDLRefMemberDescription">Define pointers, const pointers, and other general types for custom allocator. </p>

<a name="classefd_1_1_custom_allocator_1adec9744761a3c6585bde4bacb4856c37"></a>
<p class="NDLRefMemberFunction">typedef T&  reference</p>
<p class="NDLRefMemberDescription">Define pointers, const pointers, and other general types for custom allocator. </p>

<a name="classefd_1_1_custom_allocator_1a6b32ae7f11571d8dcac8be7e4880ffa2"></a>
<p class="NDLRefMemberFunction">typedef const T&  const_reference</p>
<p class="NDLRefMemberDescription">Define pointers, const pointers, and other general types for custom allocator. </p>

<a name="classefd_1_1_custom_allocator_1a48e1a9b4c421350c8ae6587dcfcdd469"></a>
<p class="NDLRefMemberFunction">typedef T  value_type</p>
<p class="NDLRefMemberDescription">Define pointers, const pointers, and other general types for custom allocator. </p>

<a name="classefd_1_1_custom_allocator_1a4baf1d97d837e83f5e80d811ad8658c8"></a>
<p class="NDLRefMemberFunction">CustomAllocator(const <span class="NDLSystemFont">CustomAllocator</span>& )</p>
<p class="NDLRefMemberDescription">Custom allocator copy constructors. </p>

<a name="classefd_1_1_custom_allocator_1ab1283bed6d3a1b78b026c179eb38f283"></a>
<p class="NDLRefMemberFunction">template &lt;class U  &gt; CustomAllocator(const <span class="NDLSystemFont">CustomAllocator</span>&lt;U&gt;& )</p>
<p class="NDLRefMemberDescription">Define pointers, const pointers, and other general types for custom allocator. </p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classefd_1_1_custom_allocator_1a37cce9a31e012fde73ae0909aa05f2b5"></a>
<p class="NDLRefMemberFunction">CustomAllocator()</p>
<p class="NDLRefMemberDescription">Custom allocator constructor. </p>

<a name="classefd_1_1_custom_allocator_1a1981e6f06f4d51e30c73a0ae59d8d3d3"></a>
<p class="NDLRefMemberFunction">~CustomAllocator()</p>
<p class="NDLRefMemberDescription">Custom allocator destructor. </p>

<a name="classefd_1_1_custom_allocator_1a325b71f680f9849e067bffbfe952e774"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="efd__CustomAllocator.htm#classefd_1_1_custom_allocator_1a8ef7abf7fc762d31bd4ffa705c0377e3">pointer</a></span>  address(<span class="NDLSystemFont"><a href="efd__CustomAllocator.htm#classefd_1_1_custom_allocator_1adec9744761a3c6585bde4bacb4856c37">reference</a></span> x) const</p>
<p class="NDLRefMemberDescription">Return the address of a reference as a pointer. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">x</span></td>
    <td>Reference to allocated memory of a particular type. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Address of the reference, as a pointer. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_custom_allocator_1a1999db352e60f3d695078cd38fec275c"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="efd__CustomAllocator.htm#classefd_1_1_custom_allocator_1abd59aac1368019bc438f17b042eb8b2b">const_pointer</a></span>  address(<span class="NDLSystemFont"><a href="efd__CustomAllocator.htm#classefd_1_1_custom_allocator_1a6b32ae7f11571d8dcac8be7e4880ffa2">const_reference</a></span> x) const</p>
<p class="NDLRefMemberDescription">Return the address of a const reference as a const pointer. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">x</span></td>
    <td>Const reference to allocated memory of a particular type. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Address of the const reference, as a const pointer. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_custom_allocator_1a99e6af15b837b989777f1b26a8efcc2b"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="efd__CustomAllocator.htm#classefd_1_1_custom_allocator_1a8ef7abf7fc762d31bd4ffa705c0377e3">pointer</a></span>  allocate(<br/><span class="NDLSystemFont"><a href="efd__CustomAllocator.htm#classefd_1_1_custom_allocator_1a2ec17236630bdb5e304e1fe947134b30">size_type</a></span> count, <br/><span class="NDLSystemFont">CustomAllocator</span>&lt;void&gt;::<span class="NDLSystemFont"><a href="efd__CustomAllocator.htm#classefd_1_1_custom_allocator_1abd59aac1368019bc438f17b042eb8b2b">const_pointer</a></span> hint = 0)</p>
<p class="NDLRefMemberDescription">Allocate memory of size "count" objects of a particular type. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">count</span></td>
    <td>Number of objects of a particular type to allocate. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">hint</span></td>
    <td>Currently not used. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Pointer to allocated memory of size "count" objects of a particular type. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_custom_allocator_1a83594e949e969c0163ddf83e7c07a89f"></a>
<p class="NDLRefMemberFunction">void  deallocate(<br/><span class="NDLSystemFont"><a href="efd__CustomAllocator.htm#classefd_1_1_custom_allocator_1a8ef7abf7fc762d31bd4ffa705c0377e3">pointer</a></span> p, <br/><span class="NDLSystemFont"><a href="efd__CustomAllocator.htm#classefd_1_1_custom_allocator_1a2ec17236630bdb5e304e1fe947134b30">size_type</a></span> n)</p>
<p class="NDLRefMemberDescription">Deallocate a chunk of memory. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">p</span></td>
    <td>Pointer to allocated memory of a particular type. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">n</span></td>
    <td>Currently not used. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_custom_allocator_1a4c9834e07680a3aa018d337d61f935c8"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="efd__CustomAllocator.htm#classefd_1_1_custom_allocator_1a2ec17236630bdb5e304e1fe947134b30">size_type</a></span>  max_size() const</p>
<p class="NDLRefMemberDescription">Return the maximum size, in number of objects, that STL is being allowed to allocate. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>Maximum number of objects STL is being allowed to allocate. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_custom_allocator_1a955d62603aa5c90c35da2faf6dac0f45"></a>
<p class="NDLRefMemberFunction">void  construct(<br/><span class="NDLSystemFont"><a href="efd__CustomAllocator.htm#classefd_1_1_custom_allocator_1a8ef7abf7fc762d31bd4ffa705c0377e3">pointer</a></span> p, <br/>const T& val)</p>
<p class="NDLRefMemberDescription">Use placement new and T's copy constructor to construct the object at the address specified by p. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">p</span></td>
    <td>Pointer to previously allocated memory for an object. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">val</span></td>
    <td>Object of a particular type whose copy constructor is being used. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_custom_allocator_1a56f9cf12a51d2bf340c1f3cc78707c24"></a>
<p class="NDLRefMemberFunction">void  destroy(<span class="NDLSystemFont"><a href="efd__CustomAllocator.htm#classefd_1_1_custom_allocator_1a8ef7abf7fc762d31bd4ffa705c0377e3">pointer</a></span> p)</p>
<p class="NDLRefMemberDescription">Destroy the object whose address is stored in p. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">p</span></td>
    <td>Pointer to object of a particular type. </td>
</tr>

        </tbody>
    </table>
</div>


 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
