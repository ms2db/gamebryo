<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::utf8string</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::utf8string</p>


<p class="NDLRefHeaderFile">&lt;utf8string.h&gt;</p>


<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">A implementation of a std::string container that is UTF-8 aware. </p>
<p class="NDLNormal">The <span class="NDLSystemFont">efd::utf8string</span> class is the default string used in Foundation and Game Framework. </p>

<a name="construction_and_destruction"></a>
<p class="NDLRefHead1">Construction and Destruction</p>


<a name="classefd_1_1utf8string_1a34295e9cb786c68cfd566d12a3fdf503"></a>
<p class="NDLRefMemberFunction">utf8string()</p>
<p class="NDLRefMemberDescription">Default constructor. </p>

<a name="classefd_1_1utf8string_1adb15b09e56c5040a78154bd996b9c5b2"></a>
<p class="NDLRefMemberFunction">utf8string(<br/>const char* src, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a38efb34dc16abdbce574c5a95b41d0f2">_CountType</a></span> ct, <br/>size_type count)</p>
<p class="NDLRefMemberDescription">Construct a <span class="NDLSystemFont">utf8string</span> as a partial copy of a C string. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">This does NOT convert the string from the local codepage, it assumes the string already contains UTF8 formatted data!</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">src</span></td>
    <td>Pointer to the src buffer. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">ct</span></td>
    <td>The count type. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">count</span></td>
    <td>The count. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1a0ea2b687eba11da359225f63f8f2a79f"></a>
<p class="NDLRefMemberFunction">utf8string(<br/>const <span class="NDLSystemFont">utf8string</span>& src, <br/>size_type pos_mb, <br/>size_type count_mb = npos)</p>
<p class="NDLRefMemberDescription">Construct a <span class="NDLSystemFont">utf8string</span> as a partial copy of another <span class="NDLSystemFont">utf8string</span>. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">src</span></td>
    <td>The source. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pos_mb</span></td>
    <td>The position. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">count_mb</span></td>
    <td>The count. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1a9533373dbff473b5ba52c84ca5a1c699"></a>
<p class="NDLRefMemberFunction">utf8string(const char* src_sz)</p>
<p class="NDLRefMemberDescription">Construct a <span class="NDLSystemFont">utf8string</span> as a copy of a C string. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">This does NOT convert the string from the local codepage, it assumes the string already contains UTF8 formatted data!</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">src_sz</span></td>
    <td>Pointer to the const char buffer. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1a15a504e410aef480dcd3b166942a642b"></a>
<p class="NDLRefMemberFunction">utf8string(const <span class="NDLSystemFont">utf8string</span>& src_utf8)</p>
<p class="NDLRefMemberDescription">Construct a <span class="NDLSystemFont">utf8string</span> as a copy of another <span class="NDLSystemFont">utf8string</span> (copy ctor). </p>

<a name="classefd_1_1utf8string_1a8b8dc5e0630974fbe7153c416aa7f1ef"></a>
<p class="NDLRefMemberFunction">utf8string(<br/>size_type count_mb, <br/>const <span class="NDLSystemFont"><a href="efd__utf8char_t.htm">utf8char_t</a></span>& uc)</p>
<p class="NDLRefMemberDescription">Construct a <span class="NDLSystemFont">utf8string</span> as multiple characters. </p>

<a name="classefd_1_1utf8string_1a550db5a9c5dd547bb364a40e30443b4a"></a>
<p class="NDLRefMemberFunction">utf8string(<br/>_Formatted , <br/>const char* format_sz, <br/>... )</p>
<p class="NDLRefMemberDescription">Construct a <span class="NDLSystemFont">utf8string</span> using printf-style formating. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">This does NOT convert strings from the local codepage, it assumes all strings already contain UTF8 formatted data! See sprintf for more restrictions.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">format_sz</span></td>
    <td>The format string. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1a4795b84d0f749bbd5f1da84167875df3"></a>
<p class="NDLRefMemberFunction">~utf8string()</p>
<p class="NDLRefMemberDescription">Destructor. </p>
<a name="public_static_methods"></a>
<p class="NDLRefHead1">Public Static Methods</p>


<a name="classefd_1_1utf8string_1a24d97c2ec209635e14a805beda82f564"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont">utf8string</span>&  NullString()</p>
<p class="NDLRefMemberDescription">NullString is a global const string that is <span class="NDLSystemFont"><a href="efd__set.htm">set</a></span> to the empty or "null" string. </p>
<p class="NDLRefMemberDetailedDescription">This is very helpful if you have a function that returns a "const utf8string&" and you want to return a default or failure value. </p>

<a name="classefd_1_1utf8string_1a368939fb64a987c618b062c01a3db756"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont">utf8string</span>&  WhiteSpace()</p>
<p class="NDLRefMemberDescription">WhiteSpace is a global const string that contains " \t\n\r\l". </p>
<p class="NDLRefMemberDetailedDescription">It is the default argument to the trim function. </p>

<a name="classefd_1_1utf8string_1ac74f4c15c07c8f9e0a788634876ee065"></a>
<p class="NDLRefMemberFunction">static size_type  utf8_mb_to_sb(<br/>const char* buffer_sz, <br/>utf8string::size_type pos_mb, <br/>utf8string::size_type sizelimit_sb)</p>
<p class="NDLRefMemberDescription"><span class="NDLSystemFont"><a href="efd__utf8string.htm#classefd_1_1utf8string_1ac74f4c15c07c8f9e0a788634876ee065">utf8_mb_to_sb()</a></span> Translates between multibyte (character) position to byte offset within a UTF-8-encoded buffer. </p>
<p class="NDLRefMemberDetailedDescription">If the requested position is beyond sizelimit_sb then it will return npos </p>

<a name="classefd_1_1utf8string_1ac199fdaef598aac9668f1ba1309df032"></a>
<p class="NDLRefMemberFunction">static size_type  utf8_sb_to_mb(<br/>const char* buffer_sz, <br/>utf8string::size_type pos_sb, <br/>utf8string::size_type sizelimit_sb)</p>
<p class="NDLRefMemberDescription"><span class="NDLSystemFont"><a href="efd__utf8string.htm#classefd_1_1utf8string_1ac199fdaef598aac9668f1ba1309df032">utf8_sb_to_mb()</a></span> Translates between byte offset and multibyte (character) position within a UTF-8-encoded buffer </p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classefd_1_1utf8string_1a1399f973ba89cea56cc2547e762e5b0e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">utf8string</span>&  toupper()</p>
<p class="NDLRefMemberDescription">These are only placeholder functions, they do not behave correctly with respect to locale. </p>
<p class="NDLRefMemberDetailedDescription">Currently they will only effect ASCII characters according to English rules. </p>

<a name="classefd_1_1utf8string_1a9db4ef1ed84bfc3e251c4306776c9950"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">utf8string</span>&  tolower()</p>
<p class="NDLRefMemberDescription">These are only placeholder functions, they do not behave correctly with respect to locale. </p>
<p class="NDLRefMemberDetailedDescription">Currently they will only effect ASCII characters according to English rules. </p>

<a name="classefd_1_1utf8string_1ab7165aa6ab06008992be6a12926d8b9c"></a>
<p class="NDLRefMemberFunction">int  replace_substr(<br/>const char* find_sz, <br/>const char* replace_sz)</p>
<p class="NDLRefMemberDescription">Replace all occurrences of a substr with another string. </p>
<p class="NDLRefMemberDetailedDescription">This will perform a single pass over the string from front to back replacing only those occurrences in the original string.</p>
<p class="NDLRefMemberDetailedDescription">Examples: "fooo".replace_substr("oo", "o") =&gt; "foo" "foo".replace_substr("o", "oo") =&gt; "foooo" "flolol".replace_substr("lol", "l") =&gt; "flol"</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>The number of replacements that were made. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1a77ff78ac4ba87dab905313dc47e07518"></a>
<p class="NDLRefMemberFunction">int  replace_substr(<br/>const <span class="NDLSystemFont">utf8string</span>& find_str, <br/>const <span class="NDLSystemFont">utf8string</span>& replace_str)</p>
<p class="NDLRefMemberDescription">These are only placeholder functions, they do not behave correctly with respect to locale. </p>
<p class="NDLRefMemberDetailedDescription">Currently they will only effect ASCII characters according to English rules. </p>

<a name="classefd_1_1utf8string_1a91ddf680a04c15cc61e4a49f1427263f"></a>
<p class="NDLRefMemberFunction">int  ol_replace_substr(<br/>const char* find_sz, <br/>const char* replace_sz)</p>
<p class="NDLRefMemberDescription">Overlapping Replace Substring This will replace all occurrences of the find string with the replace string including any occurrences which are the result of a previous substitution. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">If the replacement string contains the find sting this function will return -1 and make no modifications to the string. Examples: "foooooo".ol_replace_substr("oo", "o") =&gt; "fo" "flolol".replace_substr("lol", "l") =&gt; "fl" </p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>The number of replacements that were made, or -1 if the arguments are invalid. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1a62c31cec4812b3e41da7bab8b65bcb1e"></a>
<p class="NDLRefMemberFunction">int  ol_replace_substr(<br/>const <span class="NDLSystemFont">utf8string</span>& find_str, <br/>const <span class="NDLSystemFont">utf8string</span>& replace_str)</p>
<p class="NDLRefMemberDescription">These are only placeholder functions, they do not behave correctly with respect to locale. </p>
<p class="NDLRefMemberDetailedDescription">Currently they will only effect ASCII characters according to English rules. </p>

<a name="classefd_1_1utf8string_1a04d07f8aa51b2163b0991fcfdf5106a7"></a>
<p class="NDLRefMemberFunction">int  icompare(const <span class="NDLSystemFont">utf8string</span>& cmp_utf8) const</p>
<p class="NDLRefMemberDescription">Compares this character string to the specified string ignoring case. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">cmp_utf8</span></td>
    <td>The string to compare against. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>An integer indicating the relationship between this string and the specified string: 
<ul>
<li>&lt;0 Means this string is less than the specified string </li>
<li>0 Means this string is identical to the specified string </li>
<li>&gt; 0 Means this string is greater than the specified string </li></ul></td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1ac69bc053b3eddcce58318cf95b0f995c"></a>
<p class="NDLRefMemberFunction">int  icompare(const char* cmp_sz) const</p>
<p class="NDLRefMemberDescription">This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">cmp_sz</span></td>
    <td>The string to compare against. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1aa6d60feefa50e250992306fc33194aed"></a>
<p class="NDLRefMemberFunction">int  icompare(<br/>size_type pos_mb, <br/>size_type count_mb, <br/>const <span class="NDLSystemFont">utf8string</span>& cmp_utf8) const</p>
<p class="NDLRefMemberDescription">This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pos_mb</span></td>
    <td>The first character in this string at which the comparison starts. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">count_mb</span></td>
    <td>The number of characters to consider in this string. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">cmp_utf8</span></td>
    <td>The string to compare against. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1ae796457dd24a896fd8a749f53fc16f5d"></a>
<p class="NDLRefMemberFunction">int  icompare(<br/>size_type pos_mb, <br/>size_type count_mb, <br/>const <span class="NDLSystemFont">utf8string</span>& cmp_utf8, <br/>size_type pos2_mb, <br/>size_type count2_mb) const</p>
<p class="NDLRefMemberDescription">This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pos_mb</span></td>
    <td>The first character in this string at which the comparison starts. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">count_mb</span></td>
    <td>The number of characters to consider in this string. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">cmp_utf8</span></td>
    <td>The string to compare against. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pos2_mb</span></td>
    <td>The first character in the specified string at which the comparison starts. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">count2_mb</span></td>
    <td>The number of characters to consider in the specified string. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1a5e5b76709279d100ea08a0c7a3231622"></a>
<p class="NDLRefMemberFunction">int  icompare(<br/>size_type pos_mb, <br/>size_type count_mb, <br/>const char* cmp_sz, <br/>size_type count2_mb) const</p>
<p class="NDLRefMemberDescription">This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pos_mb</span></td>
    <td>The first character in this string at which the comparison starts. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">count_mb</span></td>
    <td>The number of characters to consider in this string. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">cmp_sz</span></td>
    <td>The string to compare against. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">count2_mb</span></td>
    <td>The number of characters to consider in the specified string. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1a5fbe92d2fb5db1936f4f10420ad5c8df"></a>
<p class="NDLRefMemberFunction">int  icompare(<br/>size_type pos_mb, <br/>size_type count_mb, <br/>const char* cmp_sz) const</p>
<p class="NDLRefMemberDescription">This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pos_mb</span></td>
    <td>The first character in this string at which the comparison starts. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">count_mb</span></td>
    <td>The number of characters to consider in this string. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">cmp_sz</span></td>
    <td>The string to compare against. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1a72583226cb5e5cdea59df6747bcd36ae"></a>
<p class="NDLRefMemberFunction">const char*  c_str() const</p>
<p class="NDLRefMemberDescription">Provide access to the raw string buffer as a C-style string. </p>

<a name="classefd_1_1utf8string_1ade7e7cd6fea83e4342072d361ecc5369"></a>
<p class="NDLRefMemberFunction">const char*  data() const</p>
<p class="NDLRefMemberDescription">Provide access to the raw string buffer as a C-style string. </p>

<a name="classefd_1_1utf8string_1a6e0543906ed6b4a4e3e7e6f041ff8a14"></a>
<p class="NDLRefMemberFunction">const internal_string&  raw() const</p>
<p class="NDLRefMemberDescription">Provide access to the raw string buffer as a C++-style string. </p>

<a name="classefd_1_1utf8string_1a83582e82adbdd1c677df217313152392"></a>
<p class="NDLRefMemberFunction">const internal_string&  base() const</p>
<p class="NDLRefMemberDescription">Provide access to the base string buffer as a C++-style string. </p>

<a name="classefd_1_1utf8string_1a8d38a02d5cc06ae201f2a3b5622b1f1c"></a>
<p class="NDLRefMemberFunction">iterator  begin()</p>
<p class="NDLRefMemberDescription">Create an iterator to the beginning of the string. </p>

<a name="classefd_1_1utf8string_1aad91671825450888b5349b8e3e0bed55"></a>
<p class="NDLRefMemberFunction">iterator  end()</p>
<p class="NDLRefMemberDescription">Create an iterator at the end of the string. </p>

<a name="classefd_1_1utf8string_1a576ed487c406fd61890901c0923a985c"></a>
<p class="NDLRefMemberFunction">const_iterator  begin() const</p>
<p class="NDLRefMemberDescription">Create a const iterator to the beginning of the string. </p>

<a name="classefd_1_1utf8string_1a5e40dce9a4914dd706e46a95027c38da"></a>
<p class="NDLRefMemberFunction">const_iterator  end() const</p>
<p class="NDLRefMemberDescription">Create a const iterator at the end of the string. </p>

<a name="classefd_1_1utf8string_1ad655e2a13991d5f6d29b49fc5932258b"></a>
<p class="NDLRefMemberFunction">reverse_iterator  rbegin()</p>
<p class="NDLRefMemberDescription">Create a reverse iterator at the beginning of the string. </p>

<a name="classefd_1_1utf8string_1a03fc44d96d8d384bba03999cbfc57887"></a>
<p class="NDLRefMemberFunction">reverse_iterator  rend()</p>
<p class="NDLRefMemberDescription">Create a reverse iterator at the end of the string. </p>

<a name="classefd_1_1utf8string_1a64975cfbf221b5daafa717dfe59fa3ca"></a>
<p class="NDLRefMemberFunction">const_reverse_iterator  rbegin() const</p>
<p class="NDLRefMemberDescription">Create a const reverse iterator at the beginning of the string. </p>

<a name="classefd_1_1utf8string_1a9fda40380f6a89bb10c18e458f899060"></a>
<p class="NDLRefMemberFunction">const_reverse_iterator  rend() const</p>
<p class="NDLRefMemberDescription">Create a const reverse iterator at the end of the string. </p>

<a name="classefd_1_1utf8string_1a2867f30dcc88b7a764cf83d71a88de12"></a>
<p class="NDLRefMemberFunction">const value_type  operator[](size_type pos) const</p>
<p class="NDLRefMemberDescription">Read-only random access accessor. </p>

<a name="classefd_1_1utf8string_1a39a90e4ecce37c415a30f34e7096bd52"></a>
<p class="NDLRefMemberFunction">const value_type  at(size_type pos) const</p>
<p class="NDLRefMemberDescription">Read-only random access accessor. </p>

<a name="classefd_1_1utf8string_1a6646c855f4437506373367656298b15f"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">utf8string</span>  substr(<br/>size_type pos_mb = 0, <br/>size_type count_mb = npos) const</p>
<p class="NDLRefMemberDescription">Returns a sub string of size count_mb that begins at pos_mb. </p>

<a name="classefd_1_1utf8string_1ad1693ef3ac9b123df1f3c8e6a98f002a"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">utf8string</span>&  operator=(const <span class="NDLSystemFont">utf8string</span>& rhs_utf8)</p>
<p class="NDLRefMemberDescription">assignment operator </p>

<a name="classefd_1_1utf8string_1a085e90411aef0a9d5f7c2261ec4aff08"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">utf8string</span>&  operator=(const internal_string& rhs_str)</p>
<p class="NDLRefMemberDescription">assignment operator </p>

<a name="classefd_1_1utf8string_1a421d73d57609bd5aa427ff5c4bac9e0d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">utf8string</span>&  operator=(const char* rhs_sz)</p>
<p class="NDLRefMemberDescription">assignment operator </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">rhs_sz is assumed to point to valid UTF8 formated data </p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">rhs_sz</span></td>
    <td>Points to valid UTF8 formatted data. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1a6235c549b064354fd12ff84eed5afa90"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">utf8string</span>&  operator=(const <span class="NDLSystemFont"><a href="efd__utf8char_t.htm">utf8char_t</a></span>& uc)</p>
<p class="NDLRefMemberDescription">assignment operator </p>

<a name="classefd_1_1utf8string_1a5fd0ca1c6cfe6b040e82a46a19b47956"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">utf8string</span>&  operator+=(const <span class="NDLSystemFont">utf8string</span>& rhs_utf8)</p>
<p class="NDLRefMemberDescription">concatenation operator </p>

<a name="classefd_1_1utf8string_1a15083f0291c5b63c1dbc7f4119b7fea6"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">utf8string</span>&  operator+=(const char* rhs_sz)</p>
<p class="NDLRefMemberDescription">concatenation operator </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">rhs_sz is assumed to point to valid UTF8 formated data </p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">rhs_sz</span></td>
    <td>The right hand side. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1a829b1fca1366146b10173552aad9e60b"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">utf8string</span>&  operator+=(const <span class="NDLSystemFont"><a href="efd__utf8char_t.htm">utf8char_t</a></span>& uc)</p>
<p class="NDLRefMemberDescription">concatenation operator </p>

<a name="classefd_1_1utf8string_1aab1d712e9294bbee88d772f8a1f3b794"></a>
<p class="NDLRefMemberFunction">void  push_back(const <span class="NDLSystemFont"><a href="efd__utf8char_t.htm">utf8char_t</a></span>& uc)</p>
<p class="NDLRefMemberDescription">Add the character to this string. </p>

<a name="classefd_1_1utf8string_1a4338303f95115dd40c9b128e0c59f199"></a>
<p class="NDLRefMemberFunction">void  clear()</p>
<p class="NDLRefMemberDescription">Clears the string. </p>

<a name="classefd_1_1utf8string_1a12ca5255c4655c49f0cdf7218d2e5245"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  empty() const</p>
<p class="NDLRefMemberDescription">Returns true if the string is empty. </p>

<a name="classefd_1_1utf8string_1ad00fb0eb454efd7996687326545199a5"></a>
<p class="NDLRefMemberFunction">size_type  size() const</p>
<p class="NDLRefMemberDescription">Returns the number of octets in the string. </p>
<p class="NDLRefMemberDetailedDescription">Unlike std::string, this is not necessarily the same as <span class="NDLSystemFont"><a href="efd__utf8string.htm#classefd_1_1utf8string_1a3755958c7d59e5885a297c6768416f48">length()</a></span>. </p>

<a name="classefd_1_1utf8string_1a3755958c7d59e5885a297c6768416f48"></a>
<p class="NDLRefMemberFunction">size_type  length() const</p>
<p class="NDLRefMemberDescription">Returns the number of characters in the string. </p>
<p class="NDLRefMemberDetailedDescription">Unlike std::string, this is not necessarily the same as <span class="NDLSystemFont"><a href="efd__utf8string.htm#classefd_1_1utf8string_1ad00fb0eb454efd7996687326545199a5">size()</a></span>. </p>

<a name="classefd_1_1utf8string_1aeaaa0a3fa90911b0da9fdb0d8bb425f6"></a>
<p class="NDLRefMemberFunction">void  swap(<span class="NDLSystemFont">utf8string</span>& rhs_utf8)</p>
<p class="NDLRefMemberDescription">Swap strings. </p>

<a name="classefd_1_1utf8string_1afac6fd1b5927f0fde87a69960cee1a86"></a>
<p class="NDLRefMemberFunction">void  reserve(size_type count_sb = 0)</p>
<p class="NDLRefMemberDescription">Request that the string's capacity be changed. </p>
<p class="NDLRefMemberDetailedDescription">The postcondition for this is, once called, <span class="NDLSystemFont"><a href="efd__utf8string.htm#classefd_1_1utf8string_1ad6afecd795c3e6267a0702201e915587">capacity()</a></span>&gt;= count_sb. </p>
<p class="NDLRefMemberDetailedDescription">The argument for this call is in single bytes, not characters. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">count_sb</span></td>
    <td>The number of bytes of capacity requested. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1a40460ec6818aa2d6cb79d893627b1c4f"></a>
<p class="NDLRefMemberFunction">void  resize(size_type count_sb = 0)</p>
<p class="NDLRefMemberDescription">Appends characters, or erases characters from the end, as necessary to make the string's size exactly count_sb bytes. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<p class="NDLRefMemberDetailedDescription">The argument for this call is in single bytes, not characters. If,after resizing, the trailing utf8 character has been severed, it will be removed entirely, such that the final utf8 character of the string remains valid. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">count_sb</span></td>
    <td>The number of bytes of capacity requested. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1a29b2b44e7343eab85841c3c4b233c8a0"></a>
<p class="NDLRefMemberFunction">void  resize(<br/>size_type count_sb, <br/>const <span class="NDLSystemFont"><a href="efd__utf8char_t.htm">utf8char_t</a></span>& uc)</p>
<p class="NDLRefMemberDescription">This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">count_sb</span></td>
    <td>The number of bytes of capacity requested. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uc</span></td>
    <td>The character used to fill additional string space. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1ad6afecd795c3e6267a0702201e915587"></a>
<p class="NDLRefMemberFunction">size_type  capacity() const</p>
<p class="NDLRefMemberDescription">Returns the size, in bytes, to which the string can grow before memory must be reallocated. </p>

<a name="classefd_1_1utf8string_1aa8f46f5040ff86d93350cab0f7338de8"></a>
<p class="NDLRefMemberFunction">size_type  max_size() const</p>
<p class="NDLRefMemberDescription">Returns the largest possible size of the string in bytes. </p>

<a name="classefd_1_1utf8string_1a6a7896a5fcdd53e3a7050953e63b6fe2"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  is_ascii() const</p>
<p class="NDLRefMemberDescription">Returns true if all chars in string are ASCII. </p>

<a name="classefd_1_1utf8string_1aef0712176e2266c627b359455f1c9d33"></a>
<p class="NDLRefMemberFunction">void  trim(<br/>_Trim t = TrimAll, <br/>const <span class="NDLSystemFont">utf8string</span>& set = utf8string::WhiteSpace())</p>
<p class="NDLRefMemberDescription">Remove characters from the beginning and/or end of the string. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">t</span></td>
    <td>Either TrimFront, TrimBack, or TrimAll. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont"><span class="NDLSystemFont"><a href="efd__set.htm">set</a></span></span></td>
    <td>Characters to trim. Defaults to <span class="NDLSystemFont"><a href="efd__set.htm">set</a></span> of standard whitespace characters </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1a8a56fb6b4e673ccf89456d79713f65da"></a>
<p class="NDLRefMemberFunction">void  trim(<br/>_Trim t, <br/>const char* set)</p>
<p class="NDLRefMemberDescription">Remove characters from the beginning and/or end of the string. </p>
<p class="NDLRefMemberDetailedDescription">Set must contain only single byte characters, to handle multi-byte use the other version.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">t</span></td>
    <td>Either TrimFront, TrimBack, or TrimAll. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont"><span class="NDLSystemFont"><a href="efd__set.htm">set</a></span></span></td>
    <td>Characters to trim. Defaults to <span class="NDLSystemFont"><a href="efd__set.htm">set</a></span> of standard whitespace characters </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1ad1c05cadd4d532d2de0fc31146123699"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  split(<br/>const <span class="NDLSystemFont">utf8string</span>& i_set, <br/><span class="NDLSystemFont"><a href="efd__vector.htm">efd::vector</a></span>&lt;<span class="NDLSystemFont">utf8string</span>&gt;& o_results) const</p>
<p class="NDLRefMemberDescription">Split a string into multiple sub-strings by matching against a <span class="NDLSystemFont"><a href="efd__set.htm">set</a></span> of delimiters. </p>
<p class="NDLRefMemberDetailedDescription">Similar to strtok. </p>

<a name="classefd_1_1utf8string_1a70936d70fec6689acf522ca2b947345a"></a>
<p class="NDLRefMemberFunction">void  Serialize(<span class="NDLSystemFont"><a href="efd__Archive.htm">efd::Archive</a></span>& ar)</p>
<p class="NDLRefMemberDescription">Serialization. </p>
<a name="append_overloads"></a>
<p class="NDLRefHead1">Append overloads</p>


<a name="classefd_1_1utf8string_1a18b92dd8d682b3a7521898e544490017"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">utf8string</span>&  append(const <span class="NDLSystemFont">utf8string</span>& src_utf8)</p>
<p class="NDLRefMemberDescription">Append the specified string to this string. </p>

<a name="classefd_1_1utf8string_1a360cede5ae846880a0b580000a0996ef"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">utf8string</span>&  append(const <span class="NDLSystemFont"><a href="efd__utf8char_t.htm">utf8char_t</a></span>& uc)</p>
<p class="NDLRefMemberDescription">Append the character to this string. </p>

<a name="classefd_1_1utf8string_1a6915db5271be55cfa778fff1d4e526b5"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">utf8string</span>&  append(<br/>const <span class="NDLSystemFont">utf8string</span>& src_utf8, <br/>size_type pos_mb, <br/>size_type count_mb)</p>
<p class="NDLRefMemberDescription">Append a number of characters from the given string to *this. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">src_utf8</span></td>
    <td>The string to append from. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pos_mb</span></td>
    <td>The position within the specified string to start appending from. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">count_mb</span></td>
    <td>The number of characters to append. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1a53d050b783a4ed20867f7acae2c5c168"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">utf8string</span>&  append(const char* src_sz)</p>
<p class="NDLRefMemberDescription">Append the specified string to this string. </p>

<a name="classefd_1_1utf8string_1a4e0408ccb61c0703cc39048ab3ae3138"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">utf8string</span>&  append(<br/>const char* src_sz, <br/>size_type count_mb)</p>
<p class="NDLRefMemberDescription">Append a number of characters from the given string to *this. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">src_sz</span></td>
    <td>The string to append from. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">count_mb</span></td>
    <td>The number of characters to append. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1a8b50795a1f80982590d3d2c4240de647"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">utf8string</span>&  append(<br/>size_type count_mb, <br/>const <span class="NDLSystemFont"><a href="efd__utf8char_t.htm">utf8char_t</a></span>& uc)</p>
<p class="NDLRefMemberDescription">Append multiple copies of the given character *this. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">count_mb</span></td>
    <td>The number of copies of the character to append to this string. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uc</span></td>
    <td>The character. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1a11730faef011dcc0a62649e91f37846a"></a>
<p class="NDLRefMemberFunction">template &lt;typename InputIterator  &gt; <span class="NDLSystemFont">utf8string</span>&  append(<br/>InputIterator itFirst, <br/>InputIterator itLast)</p>
<p class="NDLRefMemberDescription">Append a number of characters from the InputIterator to *this. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">itFirst</span></td>
    <td>The starting point to append from. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">itLast</span></td>
    <td>The ending point to append from. </td>
</tr>

        </tbody>
    </table>
</div>


<a name="assign_overloads"></a>
<p class="NDLRefHead1">Assign overloads</p>


<a name="classefd_1_1utf8string_1a05fd811f62a2ec778cd5a3d11bc1546c"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">utf8string</span>&  assign(<br/>size_type count_mb, <br/>const <span class="NDLSystemFont"><a href="efd__utf8char_t.htm">utf8char_t</a></span>& uc)</p>
<p class="NDLRefMemberDescription">Assign multiple copies of the given character *this. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">count_mb</span></td>
    <td>The number of copies of the character to assign to the string. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uc</span></td>
    <td>The character. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1a6517151648faa19ef03e606ce62c812d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">utf8string</span>&  assign(const char* str_sz)</p>
<p class="NDLRefMemberDescription">Assign a string to *this. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">str_sz</span></td>
    <td>The string. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1a38c57bf6396c3b2be3993c9c87c7ba7e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">utf8string</span>&  assign(<br/>const char* str_sz, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a38efb34dc16abdbce574c5a95b41d0f2">_CountType</a></span> ct, <br/>size_type count)</p>
<p class="NDLRefMemberDescription">Assign a number of characters from the given string to *this. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">str_sz</span></td>
    <td>The string to assign from. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">ct</span></td>
    <td>Specifies how the count parameter is interpreted. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">count</span></td>
    <td>The number of characters to assign. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1a0d59ca9c0a2382b7ea42c1e133fdc3a5"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">utf8string</span>&  assign(<br/>const char* str_sz, <br/>size_type pos_mb, <br/>size_type count_mb)</p>
<p class="NDLRefMemberDescription">Assign a number of characters from the given string to *this. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">str_sz</span></td>
    <td>The string to assign from. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pos_mb</span></td>
    <td>The position within the specified string to start assigning from. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">count_mb</span></td>
    <td>The number of characters to assign. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1a5e528eeb9a589560448e3f68fac410e5"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">utf8string</span>&  assign(const <span class="NDLSystemFont">utf8string</span>& str_utf8)</p>
<p class="NDLRefMemberDescription">Assign the given string to *this. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">str_utf8</span></td>
    <td>The string to assign from. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1a6ac02486d5be99076fb3b36c33d1f1a9"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">utf8string</span>&  assign(<br/>const <span class="NDLSystemFont">utf8string</span>& str_utf8, <br/>size_type count_mb)</p>
<p class="NDLRefMemberDescription">Assign a number of characters from the given string to *this. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">str_utf8</span></td>
    <td>The string to assign from. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">count_mb</span></td>
    <td>The number of characters to assign. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1a7f981a684fabcf23ed9e6c86c23fc48c"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">utf8string</span>&  assign(<br/>const <span class="NDLSystemFont">utf8string</span>& str_utf8, <br/>size_type pos_mb, <br/>size_type count_mb)</p>
<p class="NDLRefMemberDescription">Assign a number of characters from the given string to *this. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">str_utf8</span></td>
    <td>The string to assign from. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pos_mb</span></td>
    <td>The position within the specified string to start assigning from. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">count_mb</span></td>
    <td>The number of characters to assign. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1ad2c1718e334fb6326847ae9aadefaa02"></a>
<p class="NDLRefMemberFunction">template &lt;typename InputIterator  &gt; <span class="NDLSystemFont">utf8string</span>&  assign(<br/>InputIterator itBegin, <br/>InputIterator itEnd)</p>
<p class="NDLRefMemberDescription">Assign a number of characters from the InputIterator to *this. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">itBegin</span></td>
    <td>The starting point to assign from. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">itEnd</span></td>
    <td>The ending point to assign from. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1a886f602b6b662a1f4a0cff993c8f2efa"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">utf8string</span>&  assign(<br/>const char* str_sz, <br/>size_type count_mb)</p>
<p class="NDLRefMemberDescription">Assign a number of characters from the given string to *this. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">str_sz</span></td>
    <td>The string to assign from. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">count_mb</span></td>
    <td>The number of characters to assign. </td>
</tr>

        </tbody>
    </table>
</div>


<a name="c_run-time_style_formating_routines"></a>
<p class="NDLRefHead1">C Run-Time style formating routines</p>


<a name="classefd_1_1utf8string_1a62d23d7a5747b09d55a43c90dcd84a78"></a>
<p class="NDLRefMemberFunction">int  sprintf(<br/>const char* format, <br/>... )</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">Format strings are compiler specific, you must take care to pass in a valid string especially if you support multiple compilers. For example 64bit integer tags vary between compiles ("%I64d" on MSVC verse "%lld" on gnu). </p>
<p class="NDLRefMemberDetailedDescription">Do NOT attempt to convert wide or narrow strings via formatting. The result will not be a valid UTF8 string. Do not use ls, ws, S, lc, or C tags. All char* strings passed in are assumed to already point to valid UTF8 formatted data. </p>
<p class="NDLRefMemberDetailedDescription">You cannot use utf8char as an argument to these format routines. Instead pass in the result of utf8char::c_str() matched to a "%s" tag.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">format</span></td>
    <td>The printf-style format string. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The number of bytes (not characters) written. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1a2fafa00e2ee06588cf9323ce6750c9b7"></a>
<p class="NDLRefMemberFunction">int  sprintf(<br/>const <span class="NDLSystemFont">utf8string</span>& format, <br/>... )</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">format</span></td>
    <td>The printf-style format string. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The number of bytes (not characters) written. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1ab178f39eb0264a2f1dd4ffc774597573"></a>
<p class="NDLRefMemberFunction">int  vsprintf(<br/>const char* format, <br/>va_list args)</p>
<p class="NDLRefMemberDescription">Print variable argument <span class="NDLSystemFont"><a href="efd__list.htm">list</a></span> into string. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">format</span></td>
    <td>The printf-style format string. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">args</span></td>
    <td>Pointer to <span class="NDLSystemFont"><a href="efd__list.htm">list</a></span> of arguments. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The number of bytes (not characters) written. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1a1ffb70c7a61d00055e38717b9089c570"></a>
<p class="NDLRefMemberFunction">int  vsprintf(<br/>const <span class="NDLSystemFont">utf8string</span>& format, <br/>va_list args)</p>
<p class="NDLRefMemberDescription">Print variable argument <span class="NDLSystemFont"><a href="efd__list.htm">list</a></span> into string. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">format</span></td>
    <td>The printf-style format string. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">args</span></td>
    <td>Pointer to <span class="NDLSystemFont"><a href="efd__list.htm">list</a></span> of arguments. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The number of bytes (not characters) written. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1acbafe5fd4eecae089788497962b68b58"></a>
<p class="NDLRefMemberFunction">int  sprintf_append(<br/>const char* format, <br/>... )</p>
<p class="NDLRefMemberDescription">Operates as vsprintf with append. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">format</span></td>
    <td>The printf-style format string. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The number of bytes (not characters) written. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1af3cdf03e7664fe3a8b1ebc2405cabe4a"></a>
<p class="NDLRefMemberFunction">int  sprintf_append(<br/>const <span class="NDLSystemFont">utf8string</span>& format, <br/>... )</p>
<p class="NDLRefMemberDescription">Operates as sprintf with append. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">format</span></td>
    <td>The printf-style format string. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The number of bytes (not characters) written. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1a505a7dae46fcdaea3f60a84e096ed8b7"></a>
<p class="NDLRefMemberFunction">int  vsprintf_append(<br/>const char* format, <br/>va_list args)</p>
<p class="NDLRefMemberDescription">Operates as vsprintf with append. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">format</span></td>
    <td>The printf-style format string. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">args</span></td>
    <td>Pointer to <span class="NDLSystemFont"><a href="efd__list.htm">list</a></span> of arguments. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The number of bytes (not characters) written. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1a1235abd15b2408a4a6f7de06a7541cb0"></a>
<p class="NDLRefMemberFunction">int  vsprintf_append(<br/>const <span class="NDLSystemFont">utf8string</span>& format, <br/>va_list args)</p>
<p class="NDLRefMemberDescription">Operates as vsprintf with append. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">format</span></td>
    <td>The printf-style format string. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">args</span></td>
    <td>Pointer to <span class="NDLSystemFont"><a href="efd__list.htm">list</a></span> of arguments. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The number of bytes (not characters) written. </td>
</tr>

        </tbody>
    </table>
</div>


<a name="erase_overloads"></a>
<p class="NDLRefHead1">Erase overloads</p>


<a name="classefd_1_1utf8string_1a4667d0dbfb30759f9055143dcebda9a8"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">utf8string</span>&  erase(<br/>size_type pos_mb, <br/>size_type count_mb = npos)</p>
<p class="NDLRefMemberDescription">Erases a number of characters starting at the given position. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pos_mb</span></td>
    <td>The position to start erasing. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">count_mb</span></td>
    <td>The number of characters to erase. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1a923258a2e4a0c93023147e67eebc0767"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">utf8string</span>&  erase()</p>
<p class="NDLRefMemberDescription">Erases the entire string. </p>

<a name="classefd_1_1utf8string_1a8fc2ca2cccba2f6d61b3c7a55928f868"></a>
<p class="NDLRefMemberFunction">iterator  erase(iterator itPos)</p>
<p class="NDLRefMemberDescription">Erases a number of characters starting at the given position. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">itPos</span></td>
    <td>The position to start erasing. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1aef1b2ead98920c24f1e2711d71e566e0"></a>
<p class="NDLRefMemberFunction">iterator  erase(<br/>iterator itBegin, <br/>iterator itEnd)</p>
<p class="NDLRefMemberDescription">Erases a number of characters using iterators. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">itBegin</span></td>
    <td>The position to start erasing. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">itEnd</span></td>
    <td>The position to end erasing. </td>
</tr>

        </tbody>
    </table>
</div>


<a name="find_routines"></a>
<p class="NDLRefHead1">Find routines</p>

<p class="NDLRefMemberDescription">All of these routines return utf8string::npos when the search finds nothing.</p>

<a name="classefd_1_1utf8string_1aff3f7f953b478149631a422062cf6399"></a>
<p class="NDLRefMemberFunction">size_type  find(<br/>const <span class="NDLSystemFont">utf8string</span>& str_utf8, <br/>size_type pos_mb = 0) const</p>
<p class="NDLRefMemberDescription">Finds the position of the specified string or character within this string. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">str_utf8</span></td>
    <td>The string to find. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pos_mb</span></td>
    <td>The position in this string to start looking for the specified string. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The position of the specified string within this string. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1a59bc9c9f0a66d8372d05640a657623fd"></a>
<p class="NDLRefMemberFunction">size_type  find(<br/>const char* str_sz, <br/>size_type pos_mb, <br/>size_type count_mb) const</p>
<p class="NDLRefMemberDescription">This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">str_sz</span></td>
    <td>The string to find. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pos_mb</span></td>
    <td>The position in this string to start looking for the specified string. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">count_mb</span></td>
    <td>The number of characters to consider in this string. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1a188b8d5274e204a10579242b4c0cb5b0"></a>
<p class="NDLRefMemberFunction">size_type  find(<br/>const char* str_sz, <br/>size_type pos_mb = 0) const</p>
<p class="NDLRefMemberDescription">This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">str_sz</span></td>
    <td>The string to find. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pos_mb</span></td>
    <td>The position in this string to start looking for the specified string. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1a3098f4bd20836dab63434b24f4d678ba"></a>
<p class="NDLRefMemberFunction">size_type  find(<br/>const <span class="NDLSystemFont"><a href="efd__utf8char_t.htm">utf8char_t</a></span>& uc, <br/>size_type pos_mb = 0) const</p>
<p class="NDLRefMemberDescription">This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">uc</span></td>
    <td>The character to find. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pos_mb</span></td>
    <td>The position in this string to start looking for the specified string. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1a4f17ed99c8d5399a859bafa30317d0ab"></a>
<p class="NDLRefMemberFunction">size_type  rfind(<br/>const <span class="NDLSystemFont">utf8string</span>& str_utf8, <br/>size_type pos_mb = npos) const</p>
<p class="NDLRefMemberDescription">Finds the position of the specified string or character within this string starting from the end of the string. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">str_utf8</span></td>
    <td>The string to find. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pos_mb</span></td>
    <td>The position in this string to start looking for the specified string. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The position of the specified string within this string. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1aa0239d8e0954635ee2f0831326752435"></a>
<p class="NDLRefMemberFunction">size_type  rfind(<br/>const char* str_sz, <br/>size_type pos_mb, <br/>size_type count_mb) const</p>
<p class="NDLRefMemberDescription">This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">str_sz</span></td>
    <td>The string to find. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pos_mb</span></td>
    <td>The position in this string to start looking for the specified string. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">count_mb</span></td>
    <td>The number of characters to consider in this string. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1a7ed4dccd21294b60e7e1f0d76f8f5deb"></a>
<p class="NDLRefMemberFunction">size_type  rfind(<br/>const char* str_sz, <br/>size_type pos_mb = npos) const</p>
<p class="NDLRefMemberDescription">This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">str_sz</span></td>
    <td>The string to find. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pos_mb</span></td>
    <td>The position in this string to start looking for the specified string. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1a6429c4a2efcf4043f5a68a7e33f4d500"></a>
<p class="NDLRefMemberFunction">size_type  rfind(<br/>const <span class="NDLSystemFont"><a href="efd__utf8char_t.htm">utf8char_t</a></span>& uc, <br/>size_type pos_mb = npos) const</p>
<p class="NDLRefMemberDescription">This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">uc</span></td>
    <td>The character to find. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pos_mb</span></td>
    <td>The position in this string to start looking for the specified string. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1a112eaf283977692179f1e20ea72f52f3"></a>
<p class="NDLRefMemberFunction">utf8string::size_type  find_first_of(<br/>const <span class="NDLSystemFont">utf8string</span>& match_utf8, <br/>utf8string::size_type pos_mb = 0) const</p>
<p class="NDLRefMemberDescription">Finds the first occurrence of a specified character within this string. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">match_utf8</span></td>
    <td>The string containing characters to find. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pos_mb</span></td>
    <td>The position in this string to start looking for the specified character. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The position of the character found within this string. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1af1ada3703e7aff54b2c60405f20197af"></a>
<p class="NDLRefMemberFunction">size_type  find_first_of(<br/>const char* match_sz, <br/>size_type pos_mb, <br/>size_type count_mb) const</p>
<p class="NDLRefMemberDescription">This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">match_sz</span></td>
    <td>The string containing characters to find. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pos_mb</span></td>
    <td>The position in this string to start looking for the specified character. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">count_mb</span></td>
    <td>The number of characters to consider starting from the beginning of the specified string. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1a1c6cc2f679147b45999b6f977fa01625"></a>
<p class="NDLRefMemberFunction">size_type  find_first_of(<br/>const char* match_sz, <br/>size_type pos_mb = 0) const</p>
<p class="NDLRefMemberDescription">This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">match_sz</span></td>
    <td>The string containing characters to find. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pos_mb</span></td>
    <td>The position in this string to start looking for the specified character. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1ab892f020488a146c2cbc0a2b74021bba"></a>
<p class="NDLRefMemberFunction">size_type  find_first_of(<br/>const <span class="NDLSystemFont"><a href="efd__utf8char_t.htm">utf8char_t</a></span>& uc, <br/>size_type pos_mb = 0) const</p>
<p class="NDLRefMemberDescription">This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">uc</span></td>
    <td>The character to find. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pos_mb</span></td>
    <td>The position in this string to start looking for the specified character. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1a3e43c7a8b145d138b0238a1cf5db3ad6"></a>
<p class="NDLRefMemberFunction">size_type  find_last_of(<br/>const <span class="NDLSystemFont">utf8string</span>& match_utf8, <br/>size_type pos_mb = npos) const</p>
<p class="NDLRefMemberDescription">Finds the last occurrence of a specified character within this string. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">match_utf8</span></td>
    <td>The string containing characters to find. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pos_mb</span></td>
    <td>The position in this string to start looking for the specified character. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The position of the character found within this string. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1a3a3c8b434e65fe1bfb8557ec8e764b8d"></a>
<p class="NDLRefMemberFunction">size_type  find_last_of(<br/>const char* match_sz, <br/>size_type pos_mb, <br/>size_type count_mb) const</p>
<p class="NDLRefMemberDescription">This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">match_sz</span></td>
    <td>The string containing characters to find. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pos_mb</span></td>
    <td>The position in this string to start looking for the specified character. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">count_mb</span></td>
    <td>The number of characters to consider starting from the beginning of the specified string. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1a9a69f07fb6939a57391f3b9a2a1deb09"></a>
<p class="NDLRefMemberFunction">size_type  find_last_of(<br/>const char* match_sz, <br/>size_type pos_mb = npos) const</p>
<p class="NDLRefMemberDescription">This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">match_sz</span></td>
    <td>The string containing characters to find. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pos_mb</span></td>
    <td>The position in this string to start looking for the specified character. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1a3dfd5321848b78b580cc04e7b7e05f69"></a>
<p class="NDLRefMemberFunction">size_type  find_last_of(<br/>const <span class="NDLSystemFont"><a href="efd__utf8char_t.htm">utf8char_t</a></span>& uc, <br/>size_type pos_mb = npos) const</p>
<p class="NDLRefMemberDescription">This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">uc</span></td>
    <td>The character to find. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pos_mb</span></td>
    <td>The position in this string to start looking for the specified character. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1aca17807c0b793a3d6d407f3fdadbb02d"></a>
<p class="NDLRefMemberFunction">size_type  find_first_not_of(<br/>const <span class="NDLSystemFont">utf8string</span>& match_utf8, <br/>size_type pos_mb = 0) const</p>
<p class="NDLRefMemberDescription">Finds the first occurrence of a character within this string that is  the specified character. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">match_utf8</span></td>
    <td>The string containing characters to look for. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pos_mb</span></td>
    <td>The position in this string to start looking for characters that do  match the specified character. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The position of the character found within this string. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1a8ca6d40b245c42f29426c4d0f6dccb59"></a>
<p class="NDLRefMemberFunction">size_type  find_first_not_of(<br/>const char* match_sz, <br/>size_type pos_mb, <br/>size_type count_mb) const</p>
<p class="NDLRefMemberDescription">This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">match_sz</span></td>
    <td>The string containing characters to look for. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pos_mb</span></td>
    <td>The position in this string to start looking for characters that do  match the specified character. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">count_mb</span></td>
    <td>The number of characters to consider starting from the beginning of the specified string. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1a7a1d17f7940eaf2f28b4a2ac23fa08a5"></a>
<p class="NDLRefMemberFunction">size_type  find_first_not_of(<br/>const char* match_sz, <br/>size_type pos_mb = 0) const</p>
<p class="NDLRefMemberDescription">This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">match_sz</span></td>
    <td>The string containing characters to look for. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pos_mb</span></td>
    <td>The position in this string to start looking for characters that do  match the specified character. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1a7a9a9dca9996fc251a9d53062a5dabbc"></a>
<p class="NDLRefMemberFunction">size_type  find_first_not_of(<br/>const <span class="NDLSystemFont"><a href="efd__utf8char_t.htm">utf8char_t</a></span>& uc, <br/>size_type pos_mb = 0) const</p>
<p class="NDLRefMemberDescription">This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">uc</span></td>
    <td>The character to look for. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pos_mb</span></td>
    <td>The position in this string to start looking for characters that do  match the specified character. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1a9e07d6dc3abfc394183b9e55027d467e"></a>
<p class="NDLRefMemberFunction">size_type  find_last_not_of(<br/>const <span class="NDLSystemFont">utf8string</span>& match_utf8, <br/>size_type pos_mb = npos) const</p>
<p class="NDLRefMemberDescription">Finds the last occurrence of a character within this string that is  the specified character. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">match_utf8</span></td>
    <td>The string containing characters to look for. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pos_mb</span></td>
    <td>The position in this string to start looking for characters that do  match the specified character. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The position of the character found within this string. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1ac62ddc998149beb851302183d355289d"></a>
<p class="NDLRefMemberFunction">size_type  find_last_not_of(<br/>const char* match_sz, <br/>size_type pos_mb, <br/>size_type count_mb) const</p>
<p class="NDLRefMemberDescription">This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">match_sz</span></td>
    <td>The string containing characters to look for. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pos_mb</span></td>
    <td>The position in this string to start looking for characters that do  match the specified character. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">count_mb</span></td>
    <td>The number of characters to consider starting from the beginning of the specified string. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1a26e8020e7e25a4d4ce180d52273e537c"></a>
<p class="NDLRefMemberFunction">size_type  find_last_not_of(<br/>const char* match_sz, <br/>size_type pos_mb = npos) const</p>
<p class="NDLRefMemberDescription">This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">match_sz</span></td>
    <td>The string containing characters to look for. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pos_mb</span></td>
    <td>The position in this string to start looking for characters that do  match the specified character. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1abb0101496da52796de4818fd888328d8"></a>
<p class="NDLRefMemberFunction">size_type  find_last_not_of(<br/>const <span class="NDLSystemFont"><a href="efd__utf8char_t.htm">utf8char_t</a></span>& uc, <br/>size_type pos_mb = npos) const</p>
<p class="NDLRefMemberDescription">This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">uc</span></td>
    <td>The character to look for. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pos_mb</span></td>
    <td>The position in this string to start looking for characters that do  match the specified character. </td>
</tr>

        </tbody>
    </table>
</div>


<a name="insert_overloads"></a>
<p class="NDLRefHead1">Insert overloads</p>


<a name="classefd_1_1utf8string_1a305333b7620b331ada5cc9a8ccffa498"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">utf8string</span>&  insert(<br/>size_type pos_mb, <br/>const <span class="NDLSystemFont">utf8string</span>& src_utf8)</p>
<p class="NDLRefMemberDescription">Inserts a string before the given position in this string. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pos_mb</span></td>
    <td>The position to insert the given string. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">src_utf8</span></td>
    <td>The string to insert. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1a8e3615c672bce6240a640bf217a1fd9b"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">utf8string</span>&  insert(<br/>size_type pos_mb, <br/>const char* src_sz)</p>
<p class="NDLRefMemberDescription">Inserts a string before the given position in this string. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pos_mb</span></td>
    <td>The position to insert the given string. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">src_sz</span></td>
    <td>The string to insert. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1ad2fcd6ecdc3de76d3f51abf4632ce534"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">utf8string</span>&  insert(<br/>size_type pos_mb, <br/>const <span class="NDLSystemFont">utf8string</span>& src_utf8, <br/>size_type pos2_mb, <br/>size_type count_mb)</p>
<p class="NDLRefMemberDescription">Inserts a substring before the given position in this string. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pos_mb</span></td>
    <td>The position to insert the given substring. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">src_utf8</span></td>
    <td>The string containing the substring. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pos2_mb</span></td>
    <td>The starting position of the substring. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">count_mb</span></td>
    <td>The number of characters in the substring. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1a164e0ef9514e453ee314aadc615b1dc3"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">utf8string</span>&  insert(<br/>size_type pos_mb, <br/>const char* src_sz, <br/>size_type count_mb)</p>
<p class="NDLRefMemberDescription">Inserts a substring before the given position in this string. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pos_mb</span></td>
    <td>The position to insert the given substring. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">src_sz</span></td>
    <td>The string containing the substring. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">count_mb</span></td>
    <td>The number of characters in the substring. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1a6e8d98cbcffec3d0faf79c865d6e708d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">utf8string</span>&  insert(<br/>size_type pos_mb, <br/>size_type count_mb, <br/>const <span class="NDLSystemFont"><a href="efd__utf8char_t.htm">utf8char_t</a></span>& uc)</p>
<p class="NDLRefMemberDescription">Inserts multiple copies of the given character before the given position in this string. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pos_mb</span></td>
    <td>The position to insert the characters. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">count_mb</span></td>
    <td>The number of copies of the character to insert. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uc</span></td>
    <td>The character. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1aa8eecaf1ea559c94d7259bf4553cfb28"></a>
<p class="NDLRefMemberFunction">iterator  insert(<br/>iterator itPos, <br/>const <span class="NDLSystemFont"><a href="efd__utf8char_t.htm">utf8char_t</a></span>& uc)</p>
<p class="NDLRefMemberDescription">Inserts the given character before the given position in this string. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">itPos</span></td>
    <td>The position to insert the character. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uc</span></td>
    <td>The character. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>An iterator pointing to the newly-inserted character. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1a1ec3e4cef1e1bce5339aa886cfc06ca2"></a>
<p class="NDLRefMemberFunction">void  insert(<br/>iterator itPos, <br/>size_type count_mb, <br/>const <span class="NDLSystemFont"><a href="efd__utf8char_t.htm">utf8char_t</a></span>& uc)</p>
<p class="NDLRefMemberDescription">Inserts multiple copies of the given character before the given position in this string. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">itPos</span></td>
    <td>The position to insert the characters. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">count_mb</span></td>
    <td>The number of copies of the character to insert. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uc</span></td>
    <td>The character. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1aaa4af810835f399929b13cc1deaf2eed"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">utf8string</span>&  insert(<br/>size_type pos_mb, <br/>const <span class="NDLSystemFont">utf8string</span>& src_utf8, <br/>size_type count_mb)</p>
<p class="NDLRefMemberDescription">Inserts the first count_mb characters of src_utf8 at pos_mb. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">This flavor of insert does not match any valid std::basic_string::insert function. In fact, some STL implementations might provide a default parameter to the: insert(size_type P0, const Self& _Str, size_type _Off, size_type _Count = npos) flavor, in which case you might expect this flavor to take an offset into the source string instead of a count of source characters. Just be sure you mean to be calling this flavor. </p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pos_mb</span></td>
    <td>The position to insert the given substring. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">src_utf8</span></td>
    <td>The string containing the substring. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">count_mb</span></td>
    <td>The number of characters in the substring. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1afc0f15d9337d73c2eb949034d1df19f4"></a>
<p class="NDLRefMemberFunction">template &lt;typename InputIterator  &gt; void  insert(<br/>iterator itPos, <br/>InputIterator itBegin, <br/>InputIterator itEnd)</p>
<p class="NDLRefMemberDescription">Insert a number of characters from the InputIterator to *this. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">itPos</span></td>
    <td>The position to insert the characters. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">itBegin</span></td>
    <td>The starting point to insert from. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">itEnd</span></td>
    <td>The ending point to insert from. </td>
</tr>

        </tbody>
    </table>
</div>


<a name="replace_overloads"></a>
<p class="NDLRefHead1">Replace overloads</p>


<a name="classefd_1_1utf8string_1a77ea1ac0cc77b17d3b8b26216d16631a"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">utf8string</span>&  replace(<br/>size_type pos_mb, <br/>size_type count_mb, <br/>const <span class="NDLSystemFont">utf8string</span>& src_utf8)</p>
<p class="NDLRefMemberDescription">Replaces a substring of *this with the given string. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pos_mb</span></td>
    <td>The position to start replacing characters with the substring. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">count_mb</span></td>
    <td>The number of characters in the substring. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">src_utf8</span></td>
    <td>The string containing the substring. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1a18bb32a38326e55d70193bb037e2b82f"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">utf8string</span>&  replace(<br/>size_type pos_mb, <br/>size_type count_mb, <br/>const <span class="NDLSystemFont">utf8string</span>& src_utf8, <br/>size_type pos2_mb, <br/>size_type count2_mb)</p>
<p class="NDLRefMemberDescription">Replaces a substring of *this with a substring of the given string. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pos_mb</span></td>
    <td>The position to start replacing characters with the substring. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">count_mb</span></td>
    <td>The number of characters in the substring. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">src_utf8</span></td>
    <td>The string containing the substring. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pos2_mb</span></td>
    <td>The starting position of the substring from the given string. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">count2_mb</span></td>
    <td>The number of characters in the substring from the given string. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1a8bfe2ca6ed8b290d2e87297cde677150"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">utf8string</span>&  replace(<br/>size_type pos_mb, <br/>size_type count_mb, <br/>const char* src_sz)</p>
<p class="NDLRefMemberDescription">Replaces a substring of *this with the given string. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pos_mb</span></td>
    <td>The position to start replacing characters with the substring. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">count_mb</span></td>
    <td>The number of characters in the substring. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">src_sz</span></td>
    <td>The string containing the substring. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1acd64c1ac750edf3800001419806bd9f6"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">utf8string</span>&  replace(<br/>size_type pos_mb, <br/>size_type count_mb, <br/>const <span class="NDLSystemFont">utf8string</span>& src_utf8, <br/>size_type count2_mb)</p>
<p class="NDLRefMemberDescription">Replaces a substring of *this with a substring of the given string. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pos_mb</span></td>
    <td>The position to start replacing characters with the substring. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">count_mb</span></td>
    <td>The number of characters in the substring. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">src_utf8</span></td>
    <td>The string containing the substring. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">count2_mb</span></td>
    <td>The number of characters in the substring starting from the beginning of the given string. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1a9f73cfdaa5bf6daa1c2c928c78584110"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">utf8string</span>&  replace(<br/>size_type pos_mb, <br/>size_type count_mb, <br/>size_type count2_mb, <br/>const <span class="NDLSystemFont"><a href="efd__utf8char_t.htm">utf8char_t</a></span>& uc)</p>
<p class="NDLRefMemberDescription">Replaces a substring of *this with multiple copies of the given character. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pos_mb</span></td>
    <td>The position to start replacing characters with the substring. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">count_mb</span></td>
    <td>The number of characters in the substring. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">count2_mb</span></td>
    <td>The number of copies of the given character in the replacing substring. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uc</span></td>
    <td>The character. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1a4e090ad5d47083a43c10103de9b3325e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">utf8string</span>&  replace(<br/>iterator itBegin, <br/>iterator itEnd, <br/>const <span class="NDLSystemFont">utf8string</span>& src_utf8)</p>
<p class="NDLRefMemberDescription">Replace a number of characters in *this with characters from the InputIterator. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">itBegin</span></td>
    <td>The starting point to insert from. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">itEnd</span></td>
    <td>The ending point to insert from. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">src_utf8</span></td>
    <td>The string containing characters to replace. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1a3a8c01987618e5964fd2242651239bf2"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">utf8string</span>&  replace(<br/>iterator itBegin, <br/>iterator itEnd, <br/>const char* src_sz)</p>
<p class="NDLRefMemberDescription">Replace a number of characters in *this with characters from the InputIterator. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">itBegin</span></td>
    <td>The starting point to insert from. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">itEnd</span></td>
    <td>The ending point to insert from. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">src_sz</span></td>
    <td>The string containing characters to replace. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1a1d2bb5d7e42fef40d58f0bb824be9427"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">utf8string</span>&  replace(<br/>iterator itBegin, <br/>iterator itEnd, <br/>const char* src_sz, <br/>size_type count_mb)</p>
<p class="NDLRefMemberDescription">Replace substring of *this with the specified number of characters from the specified string. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">itBegin</span></td>
    <td>The starting point to insert from. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">itEnd</span></td>
    <td>The ending point to insert from. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">src_sz</span></td>
    <td>The string containing characters to replace. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">count_mb</span></td>
    <td>The number of copies of the given character in the replacing substring. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1a7e3b1b77595f3314e4a8d83baca5b89f"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">utf8string</span>&  replace(<br/>iterator itBegin, <br/>iterator itEnd, <br/>size_type count_mb, <br/>const <span class="NDLSystemFont"><a href="efd__utf8char_t.htm">utf8char_t</a></span>& uc)</p>
<p class="NDLRefMemberDescription">Replace substring of *this with the specified number of the specified character. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">itBegin</span></td>
    <td>The starting point to insert from. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">itEnd</span></td>
    <td>The ending point to insert from. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">count_mb</span></td>
    <td>The number of copies of the given character in the replacing substring. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uc</span></td>
    <td>The character. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1a4057f1fe1b9b8f931b6f9eb3781b4c08"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">utf8string</span>&  replace(<br/>iterator itBegin, <br/>iterator itEnd, <br/>const <span class="NDLSystemFont">utf8string</span>& src_utf8, <br/>size_type count_mb)</p>
<p class="NDLRefMemberDescription">Replace substring of *this with the specified number of characters from the specified string. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">This is a non-standard signature for replace. It doesn't match any similar signature from std::basic_string::replace. </p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">itBegin</span></td>
    <td>The starting point to insert from. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">itEnd</span></td>
    <td>The ending point to insert from. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">src_utf8</span></td>
    <td>The string containing characters to replace. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">count_mb</span></td>
    <td>The number of copies of the given character in the replacing substring. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1ae7d98daee5fd21916352aa2b12caa3d4"></a>
<p class="NDLRefMemberFunction">template &lt;typename InputIterator  &gt; <span class="NDLSystemFont">utf8string</span>&  replace(<br/>iterator itDestBegin, <br/>iterator itDestEnd, <br/>InputIterator itSrcBegin, <br/>InputIterator itSrcEnd)</p>
<p class="NDLRefMemberDescription">Replace substring of *this with characters from the specified range. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">itDestBegin</span></td>
    <td>The starting point to replace. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">itDestEnd</span></td>
    <td>The ending point to replace. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">itSrcBegin</span></td>
    <td>The starting point to replace from. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">itSrcEnd</span></td>
    <td>The ending point to replace from. </td>
</tr>

        </tbody>
    </table>
</div>


<a name="string_comparison_routines"></a>
<p class="NDLRefHead1">String comparison routines</p>


<a name="classefd_1_1utf8string_1a44348f06c3eb71b7075ff02405b123cc"></a>
<p class="NDLRefMemberFunction">int  compare(const <span class="NDLSystemFont">utf8string</span>& cmp_utf8) const</p>
<p class="NDLRefMemberDescription">Compares this character string to the specified string. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">cmp_utf8</span></td>
    <td>The string to compare against. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>An integer indicating the relationship between this string and the specified string: 
<ul>
<li>&lt;0 Means this string is less than the specified string </li>
<li>0 Means this string is identical to the specified string </li>
<li>&gt; 0 Means this string is greater than the specified string </li></ul></td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1af988a9a4339bca3acb9d5fb75f77b794"></a>
<p class="NDLRefMemberFunction">int  compare(const char* cmp_sz) const</p>
<p class="NDLRefMemberDescription">This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">cmp_sz</span></td>
    <td>The string to compare against. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1a8c296208e89a753c7653b699e74cc685"></a>
<p class="NDLRefMemberFunction">int  compare(<br/>size_type pos_mb, <br/>size_type count_mb, <br/>const <span class="NDLSystemFont">utf8string</span>& cmp_utf8) const</p>
<p class="NDLRefMemberDescription">This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pos_mb</span></td>
    <td>The first character in this string at which the comparison starts. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">count_mb</span></td>
    <td>The number of characters to consider in this string. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">cmp_utf8</span></td>
    <td>The string to compare against. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1ab43e9b276435096b666ec602ebcbe10a"></a>
<p class="NDLRefMemberFunction">int  compare(<br/>size_type pos_mb, <br/>size_type count_mb, <br/>const <span class="NDLSystemFont">utf8string</span>& cmp_utf8, <br/>size_type pos2_mb, <br/>size_type count2_mb) const</p>
<p class="NDLRefMemberDescription">This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pos_mb</span></td>
    <td>The first character in this string at which the comparison starts. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">count_mb</span></td>
    <td>The number of characters to consider in this string. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">cmp_utf8</span></td>
    <td>The string to compare against. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pos2_mb</span></td>
    <td>The first character in the specified string at which the comparison starts. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">count2_mb</span></td>
    <td>The number of characters to consider in the specified string. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1ac0716818c9cb005d3b32cced828d23e5"></a>
<p class="NDLRefMemberFunction">int  compare(<br/>size_type pos_mb, <br/>size_type count_mb, <br/>const char* cmp_sz, <br/>size_type count2_mb) const</p>
<p class="NDLRefMemberDescription">This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pos_mb</span></td>
    <td>The first character in this string at which the comparison starts. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">count_mb</span></td>
    <td>The number of characters to consider in this string. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">cmp_sz</span></td>
    <td>The string to compare against. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">count2_mb</span></td>
    <td>The number of characters to consider in the specified string. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1utf8string_1a236d4a90faff62fa3551b339118fd1f7"></a>
<p class="NDLRefMemberFunction">int  compare(<br/>size_type pos_mb, <br/>size_type count_mb, <br/>const char* cmp_sz) const</p>
<p class="NDLRefMemberDescription">This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pos_mb</span></td>
    <td>The first character in this string at which the comparison starts. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">count_mb</span></td>
    <td>The number of characters to consider in this string. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">cmp_sz</span></td>
    <td>The string to compare against. </td>
</tr>

        </tbody>
    </table>
</div>


 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
