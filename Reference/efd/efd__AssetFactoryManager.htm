<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::AssetFactoryManager</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::AssetFactoryManager</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="efd__ISystemService.htm">efd::ISystemService</a></span></p>


<p class="NDLRefHeaderFile">&lt;AssetFactoryManager.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classefd_1_1_asset_factory_manager.gif" alt="Inheritance graph for efd::AssetFactoryManager"/>
  <p class="FigureCaption">Inheritance graph for efd::AssetFactoryManager</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">The <span class="NDLSystemFont">AssetFactoryManager</span> is a system service that handles the loading of assets. </p>

<a name="asset_factory_registration"></a>
<p class="NDLRefHead1">Asset Factory Registration</p>

<p class="NDLRefMemberDescription">All asset factory registration functions are thread safe.</p>

<a name="classefd_1_1_asset_factory_manager_1a31ed08586434215cd23cc111da7268de"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  RegisterAssetFactory(<br/>const <span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span> responseCategory, <br/><span class="NDLSystemFont"><a href="efd__IAssetFactory.htm">IAssetFactory</a></span>* pAssetFactory)</p>
<p class="NDLRefMemberDescription">Register an asset factory that will response to request on the given category. </p>
<p class="NDLRefMemberDetailedDescription">The AssetFactory is now owned by the <span class="NDLSystemFont">AssetFactoryManager</span>. Callers should not attempt to delete the factory once it is registered.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">This method can be called during OnPreInit or OnInit of any system service. It is recommended that asset factory instances be registered during OnPreInit of an owning system service. </p>
<p class="NDLRefMemberDetailedDescription">Any service that registers an <span class="NDLSystemFont"><a href="efd__IAssetFactory.htm">IAssetFactory</a></span> must also add a dependency on the AssetFactorManager during OnPreInit. The <span class="NDLSystemFont">AssetFactoryManager</span> cannot shutdown while there are outstanding factories.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">responseCategory</span></td>
    <td>The category under which to register the factory. Messages sent to the <span class="NDLSystemFont">AssetFactoryManager</span> contain a response category that is used to match the message to the registered loader of the same category. Response messages are then sent on the same category. The category should be unique among factories. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pAssetFactory</span></td>
    <td>A pointer to an instance of a class that implements the <span class="NDLSystemFont"><a href="efd__IAssetFactory.htm">efd::IAssetFactory</a></span> interface.</td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>False if a factory is already registered at the given category. Otherwise true. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_asset_factory_manager_1aad3f435429b46f0a45e356c1f5359445"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="efd__IAssetFactory.htm">IAssetFactory</a></span>*  UnregisterAssetFactory(const <span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span> responseCategory)</p>
<p class="NDLRefMemberDescription">Unregister the asset factory for the given category. </p>
<p class="NDLRefMemberDetailedDescription">The factory is now available for cleanup. The <span class="NDLSystemFont">AssetFactoryManager</span> will call <span class="NDLSystemFont"><a href="efd__IAssetFactory.htm#classefd_1_1_i_asset_factory_1ab6ecfbeafe6f4e6ffa94914bffb915fc">IAssetFactory::Shutdown</a></span> on this factory during shutdown.</p>
<p class="NDLRefMemberDetailedDescription">To avoid memory leaks all asset factories that are registered must be unregistered before the application terminates.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">This method can be called during OnPreInit or OnInit of any system service. It is recommended that any service which registered a asset factory call this method during the OnShutdown of the owning service.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">responseCategory</span></td>
    <td>The response category to unregister.</td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The asset factory pointer registered to category, or NULL if no factory was registered. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_asset_factory_manager_1ac7bdbc5334f9dd6890390ebdb850d337"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="efd__IAssetFactory.htm">IAssetFactory</a></span>*  GetAssetFactory(const <span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span> responseCategory)</p>
<p class="NDLRefMemberDescription">Obtain a pointer to the asset factory registered for a given response category. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">This method can be called during OnPreInit or OnInit of any system service. </p></p>
<a name="asset_location_functions"></a>
<p class="NDLRefHead1">Asset Location Functions</p>


<a name="classefd_1_1_asset_factory_manager_1a241d9645098c9961118e4af4454dae00"></a>
<p class="NDLRefMemberFunction">void  AssetLocate(<br/>const <span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span>& urn, <br/><span class="NDLSystemFont"><a href="efd__Category.htm">efd::Category</a></span> targetCategory)</p>
<p class="NDLRefMemberDescription">Locate an asset required by a factory. </p>
<p class="NDLRefMemberDetailedDescription">A factory may need to located required assets needed to construct the asset. The LocateAsset function performs the asset location in the foreground thread and later posts the response to the provided waiting factory.</p>
<p class="NDLRefMemberDetailedDescription">The factory must implement the HandleAssetLocate function. This function is called by the <span class="NDLSystemFont">AssetFactoryManager</span> background thread when a locate response is received.</p>
<p class="NDLRefMemberDetailedDescription">If called on the foreground instance of the service, the request is passed directly to the <span class="NDLSystemFont"><a href="efd__AssetLocatorService.htm">efd::AssetLocatorService</a></span> instance.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">urn</span></td>
    <td>URN of the asset(s) to locate. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">targetCategory</span></td>
    <td>category expecting an <span class="NDLSystemFont"><a href="efd__AssetLocatorResponse.htm">AssetLocatorResponse</a></span>. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_asset_factory_manager_1a1efaed40433da97666bf9d41ea14b0b4"></a>
<p class="NDLRefMemberFunction">void  RegisterAssetLocateHandler(<br/><span class="NDLSystemFont"><a href="efd__Category.htm">efd::Category</a></span> targetCategory, <br/><span class="NDLSystemFont"><a href="efd__IAssetFactory.htm">efd::IAssetFactory</a></span>* factory)</p>
<p class="NDLRefMemberDescription">Associate an asset locator request category with the factory that is expecting a response. </p>
<p class="NDLRefMemberDetailedDescription">An <span class="NDLSystemFont"><a href="efd__IAssetFactory.htm">IAssetFactory</a></span> may request the location of assets for use in the background thread. To deliver the <span class="NDLSystemFont"><a href="efd__AssetLocatorResponse.htm">AssetLocatorResponse</a></span> message to the intended target, the category used by the factory must be registered using this method.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">This method can be called during OnPreInit or OnInit of any system service. Classes derived from <span class="NDLSystemFont"><a href="efd__IAssetFactory.htm">efd::IAssetFactory</a></span> will typically register themselves by calling this method during their constructors.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">factory</span></td>
    <td><span class="NDLSystemFont"><a href="efd__IAssetFactory.htm">IAssetFactory</a></span> that expects locator response messages. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">targetCategory</span></td>
    <td>the target category the factory will used for these messages. </td>
</tr>

        </tbody>
    </table>
</div>


<a name="callback_registration."></a>
<p class="NDLRefHead1">Callback Registration.</p>


<a name="classefd_1_1_asset_factory_manager_1a62bde753666d5fc117b913a7327705ab"></a>
<p class="NDLRefMemberFunction">void  RegisterAssetCallback(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span> factoryClassID, <br/>const <span class="NDLSystemFont"><a href="efd__Category.htm">efd::Category</a></span>& callback)</p>
<p class="NDLRefMemberDescription">Register a callback category used to forward load response messages. </p>
<p class="NDLRefMemberDetailedDescription">Any <span class="NDLSystemFont"><a href="efd__AssetLoadResponse.htm">AssetLoadResponse</a></span> message created by factory with the given class ID will be forwarded to the provided category. This can be useful if you want to know when a particular asset type is factoried.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">Receiving the factory response does not imply the asset is ready for use, only that the process of factoring the asset completed. The original requester may need to perform additional work before the asset is commonly available.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">factoryClassID</span></td>
    <td>ClassID of the factory creating the response messages. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">callback</span></td>
    <td>Callback category to receive response messages. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_asset_factory_manager_1a25c7c334407c4946f05b3e9c79495b61"></a>
<p class="NDLRefMemberFunction">void  UnregisterAssetCallback(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span> factoryClassID, <br/>const <span class="NDLSystemFont"><a href="efd__Category.htm">efd::Category</a></span>& callback)</p>
<p class="NDLRefMemberDescription">Unregister for callback notifications. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">factoryClassID</span></td>
    <td>ClassID of the factory creating the response messages. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">callback</span></td>
    <td>Callback category to unregister. </td>
</tr>

        </tbody>
    </table>
</div>


<a name="messaging_helpers"></a>
<p class="NDLRefHead1">Messaging Helpers</p>


<a name="classefd_1_1_asset_factory_manager_1ae17be9f9d3f29e27e964e6e81bff61b3"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span>  MessageCategory()</p>
<p class="NDLRefMemberDescription">The category to use for all messages sent to the Asset Factory Manager service. </p>
<a name="thread_information"></a>
<p class="NDLRefHead1">Thread Information</p>


<a name="classefd_1_1_asset_factory_manager_1a1e4202974fead65b5477906c5dc0383c"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsFgInstance() const</p>
<p class="NDLRefMemberDescription">Return true when this instance is in the foreground. </p>

<a name="classefd_1_1_asset_factory_manager_1a4a34ad986ab2a5fb1d484a80d51a9949"></a>
<p class="NDLRefMemberFunction">void  SetSleepInterval(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> sleepInterval)</p>
<p class="NDLRefMemberDescription">Set the interval that the background thread will sleep, per tick, when no data is loaded. </p>
<p class="NDLRefMemberDetailedDescription">Value is in milliseconds for passing to <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a6f1aa55c06fd77f1d8f27a62a88018dd">efd::Sleep</a></span>. </p>

<a name="classefd_1_1_asset_factory_manager_1a1bed720f88ba9461631643548d428ec2"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetSleepInterval() const</p>
<p class="NDLRefMemberDescription">Get the interval, in milliseconds, that the background thread will sleep on a tick when no data is loaded. </p>

<a name="classefd_1_1_asset_factory_manager_1a4c6d73f91df02379ea78b437eeca83eb"></a>
<p class="NDLRefMemberFunction">void  SetBackgroundMessageCapPerTick(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> maxMessageCountPerTick)</p>
<p class="NDLRefMemberDescription">Set the maximum number of messages from the background to process in a single foreground tick. </p>

<a name="classefd_1_1_asset_factory_manager_1a1ea9e2cef378674d533b9f8c7cd37583"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetBackgroundMessageCapPerTick() const</p>
<p class="NDLRefMemberDescription">Gets the maximum number of messages from the background to process in a single foreground tick. </p>

<a name="classefd_1_1_asset_factory_manager_1a647fd462c5f78f524ffa0c57ac2d9f66"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  SetBgThreadAffinity(const <span class="NDLSystemFont"><a href="efd__ProcessorAffinity.htm">efd::ProcessorAffinity</a></span>& affinity)</p>
<p class="NDLRefMemberDescription">Set the processor affinity for the background thread. </p>
<p class="NDLRefMemberDetailedDescription">This function must be called on the foreground instance to have any effect. The new affinity is applied the next time the OS schedules the thread. The default is <span class="NDLSystemFont"><a href="efd__ProcessorAffinity.htm">efd::ProcessorAffinity</a></span>(<span class="NDLSystemFont">ProcessorAffinity::PROCESSOR_1</span>, (<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>)<span class="NDLSystemFont">ProcessorAffinity::PROCESSOR_DONT_CARE</span>) for Win32, <span class="NDLSystemFont"><a href="efd__ProcessorAffinity.htm">efd::ProcessorAffinity</a></span>(<span class="NDLSystemFont">ProcessorAffinity::PROCESSOR_XENON_CORE_2_THREAD_0</span>, (<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>)<span class="NDLSystemFont">ProcessorAffinity::PROCESSOR_DONT_CARE</span>) for Xbox360, and <span class="NDLSystemFont"><a href="efd__ProcessorAffinity.htm">efd::ProcessorAffinity</a></span>(<span class="NDLSystemFont">ProcessorAffinity::PROCESSOR_DONT_CARE</span>, (<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>)<span class="NDLSystemFont">ProcessorAffinity::PROCESSOR_DONT_CARE</span>) for PS3.</p>
<p class="NDLRefMemberDetailedDescription">The return value is false if the system could not <span class="NDLSystemFont"><a href="efd__set.htm">set</a></span> the affinity as requested. It is true when the system <span class="NDLSystemFont"><a href="efd__set.htm">set</a></span> the affinity as requested. </p>

<a name="classefd_1_1_asset_factory_manager_1a7ac9f4046b30bf2f8b1327994133d994"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="efd__ProcessorAffinity.htm">efd::ProcessorAffinity</a></span>  GetBgThreadAffinity()</p>
<p class="NDLRefMemberDescription">Get the processor affinity for the background thread. </p>
<p class="NDLRefMemberDetailedDescription">This function must be called on the foreground instance to get a valid return value. </p>

<a name="classefd_1_1_asset_factory_manager_1adfc00e0a8769d7fc860532d6b22f3bb3"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  SetBgThreadPriority(const <span class="NDLSystemFont"><a href="efd__Thread.htm#classefd_1_1_thread_1a44db06bd9bf5477854bbee550b9c96dd">efd::Thread::Priority</a></span> priority)</p>
<p class="NDLRefMemberDescription">Set the thead priority for the background thread. </p>
<p class="NDLRefMemberDetailedDescription">This function must be called on the foreground instance to have any effect. See <span class="NDLSystemFont"><a href="efd__Thread.htm#classefd_1_1_thread_1a785f141063b4a0e073339d7a48320f72">efd::Thread::SetPriority</a></span> for more details. The default is <span class="NDLSystemFont">efd::Thread::NORMAL</span>.</p>
<p class="NDLRefMemberDetailedDescription">The return value is false if the system could not <span class="NDLSystemFont"><a href="efd__set.htm">set</a></span> the priority as requested. It is true when the system <span class="NDLSystemFont"><a href="efd__set.htm">set</a></span> the priority as requested. </p>

<a name="classefd_1_1_asset_factory_manager_1abd833bdbaa604870880090870404883e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="efd__Thread.htm#classefd_1_1_thread_1a44db06bd9bf5477854bbee550b9c96dd">efd::Thread::Priority</a></span>  GetBgThreadPriority() const</p>
<p class="NDLRefMemberDescription">Get the priority for the background thread. </p>
<p class="NDLRefMemberDetailedDescription">This function must be called on the foreground instance to get a valid return value. See <span class="NDLSystemFont"><a href="efd__Thread.htm#classefd_1_1_thread_1ace6300f0b651d5ae89fc69042c959b0f">efd::Thread::GetPriority</a></span> for more details. </p>
<a name="construction_and_destruction"></a>
<p class="NDLRefHead1">Construction and Destruction</p>


<a name="classefd_1_1_asset_factory_manager_1ad709c4d80a4f4aa1b0a70fddb349bc31"></a>
<p class="NDLRefMemberFunction">virtual ~AssetFactoryManager()</p>
<p class="NDLRefMemberDescription">Destructor. </p>

<a name="classefd_1_1_asset_factory_manager_1abc424d05872376cfdd60feec05b8029f"></a>
<p class="NDLRefMemberFunction">AssetFactoryManager(<br/>const size_t requestQueueSize = 16, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> sleepInterval = 8, <br/><span class="NDLSystemFont">AssetFactoryManager</span>* pForeInstance = 0)</p>
<p class="NDLRefMemberDescription">Constructor used to create an instance of the <span class="NDLSystemFont">AssetFactoryManager</span>. </p>
<p class="NDLRefMemberDetailedDescription">When the pForeInstance argument is NULL, this instance is presumed to be the one running in the main thread. In such cases another thread is started to perform background loading. There can be at most one foreground instance. The constructor will assert if called more than once.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">requestQueueSize</span></td>
    <td>The size of the <span class="NDLSystemFont"><a href="efd__queue.htm">queue</a></span> used to send messages to the other thread. This size is the maximum number of load requests that may be made, without a context switch, by the foreground thread during a single tick of the background service. The system will still function if more messages are queued, but more slowly. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">sleepInterval</span></td>
    <td>The period the background thread will sleep when no data is loaded on a tick, in milliseconds. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pForeInstance</span></td>
    <td>The instance of this service in the other, master, thread. This must be NULL for the first instance created, typically the instance in the main thread. When NULL, the service creates a background loading thread and another instance of itself in that thread. </td>
</tr>

        </tbody>
    </table>
</div>


 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
