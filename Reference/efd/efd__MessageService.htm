<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::MessageService</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::MessageService</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="efd__ISystemService.htm">efd::ISystemService</a></span></p>


<p class="NDLRefHeaderFile">&lt;MessageService.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classefd_1_1_message_service.gif" alt="Inheritance graph for efd::MessageService"/>
  <p class="FigureCaption">Inheritance graph for efd::MessageService</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal"><span class="NDLSystemFont">MessageService</span> implements message sending through a <span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span> based publish-subscribe model. </p>
<p class="NDLNormal">Message delivery callbacks are created statically using the various EE_HANDLER macros and are then dynamically associated with a <span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span> through the Subscribe method. Messages are pushed to a given <span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span> using the various Send methods and all interested callbacks are notified.</p>
<p class="NDLNormal">The message service can be extended to support networking through the addition of a <span class="NDLSystemFont"><a href="../efdNetwork/efd__NetService.htm">NetService</a></span> while continuing to support the exact same publish-subscribe model. This allows code to be written identically to support either local or online scenarios. </p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classefd_1_1_message_service_1a9159b3a2d538782a7ff9117bddd6c04e"></a>
<p class="NDLRefMemberFunction">MessageService()</p>
<p class="NDLRefMemberDescription">Default Constructor. </p>

<a name="classefd_1_1_message_service_1a2f10e0a8ded877dbbe5df3d3c046cc8b"></a>
<p class="NDLRefMemberFunction">virtual void  Send(<br/>const <span class="NDLSystemFont"><a href="efd__IMessage.htm">IMessage</a></span>* pMessage, <br/>const <span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span>& cat, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a3f46b06120f84d47e33a25e39034ed8e">QualityOfService</a></span> defaultQOS = QOS_RELIABLE)</p>
<p class="NDLRefMemberDescription">Send a message to all interested subscribers both locally and remotely. </p>
<p class="NDLRefMemberDetailedDescription">This is the default method for message sending and is normally what you will want to use under most conditions.</p>
<p class="NDLRefMemberDetailedDescription">Internally, this simply calls SendRemote and/or SendLocal as is appropriate based on the category and internal state.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<p class="NDLRefMemberDetailedDescription">A <span class="NDLSystemFont"><a href="efd__SmartPointer.htm">SmartPointer</a></span> to pMessage is held until all handlers have been called and/or the <span class="NDLSystemFont"><a href="efd__IMessage.htm">IMessage</a></span> has been sent remotely. The <span class="NDLSystemFont">MessageService</span> assumes ownership of the message, and it must not be modified any time after calling any <span class="NDLSystemFont">MessageService</span> Send method. </p>
<p class="NDLRefMemberDetailedDescription">If <span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span> is already mapped to an existing QOS, that QOS will be used instead of defaultQOS, and an error will be logged. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMessage</span></td>
    <td>Pointer to message for delivery. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">cat</span></td>
    <td><span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span> to send on. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">defaultQOS</span></td>
    <td>default QOS to send to if <span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span> is not already mapped to an existing QOS.</td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_message_service_1a584872eb92027f9f3579c387d2ddf2dd"></a>
<p class="NDLRefMemberFunction">void  Send(const <span class="NDLSystemFont"><a href="efd__IMessage.htm">IMessage</a></span>* pMessage)</p>
<p class="NDLRefMemberDescription">Send a message to all interested subscribers both locally and remotely. </p>
<p class="NDLRefMemberDetailedDescription">This is the default method for message sending and is normally what you will want to use under most conditions.</p>
<p class="NDLRefMemberDetailedDescription">Internally, this simply calls SendRemote and/or SendLocal as is appropriate based on the category and internal state.</p>
<p class="NDLRefMemberDetailedDescription">Messages are delivered to the message's destination category as determined by calling pMessage-&gt;GetDestinationCategory using the default quality of service.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<p class="NDLRefMemberDetailedDescription">A <span class="NDLSystemFont"><a href="efd__SmartPointer.htm">SmartPointer</a></span> to pMessage is held until all handlers have been called and/or the <span class="NDLSystemFont"><a href="efd__IMessage.htm">IMessage</a></span> has been sent remotely. The <span class="NDLSystemFont">MessageService</span> assumes ownership of the message, and it must not be modified any time after calling any <span class="NDLSystemFont">MessageService</span> Send method. </p>
<p class="NDLRefMemberDetailedDescription">If <span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span> is already mapped to an existing QOS, that QOS will be used instead of defaultQOS, and an error will be logged. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMessage</span></td>
    <td>Pointer to message for delivery.</td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_message_service_1a90addeb0b9ef3c59cfefeb01cadc7940"></a>
<p class="NDLRefMemberFunction">virtual void  SendImmediate(<br/>const <span class="NDLSystemFont"><a href="efd__IMessage.htm">IMessage</a></span>* pMessage, <br/><span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span> targetChannel, <br/><span class="NDLSystemFont">bool</span> producerMessage = false)</p>
<p class="NDLRefMemberDescription">Deliver a message immediately to all local targets currently subscribed to the target category. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">This function is called internally by <span class="NDLSystemFont"><a href="efd__MessageService.htm#classefd_1_1_message_service_1a8bd3613a7c994a29b11e5d5a68e15d4f">MessageService::OnTick</a></span> to deliver messages that have been queued by <span class="NDLSystemFont"><a href="efd__MessageService.htm#classefd_1_1_message_service_1a2f10e0a8ded877dbbe5df3d3c046cc8b">MessageService::Send</a></span> or <span class="NDLSystemFont"><a href="efd__MessageService.htm#classefd_1_1_message_service_1a55298ab62f30e3cf636e5577fdec8596">MessageService::SendLocal</a></span>.</p></p>
<p class="NDLRefMemberDetailedDescription">This method is not thread safe and can only be safely called from the same thread as the <span class="NDLSystemFont">MessageService</span> instance it is called on.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMessage</span></td>
    <td>Pointer to the message to send </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">targetChannel</span></td>
    <td><span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span> to deliver message on </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">producerMessage</span></td>
    <td>If true, pMessage will be delivered to callbacks that have been registered with BeginCategoryProduction instead of Subscribe. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_message_service_1a704e0289f0978fcdea69a8999e4e3f78"></a>
<p class="NDLRefMemberFunction">void  SendImmediate(const <span class="NDLSystemFont"><a href="efd__IMessage.htm">IMessage</a></span>* pMessage)</p>
<p class="NDLRefMemberDescription">Deliver a message immediately to all local targets currently subscribed to the target category as determined by pMessage-&gt;GetDestinationCategory. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">This method is not thread safe and can only be safely called from the same thread as the <span class="NDLSystemFont">MessageService</span> instance it is called on.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMessage</span></td>
    <td>Pointer to the message to send. The message must have a valid destination category <span class="NDLSystemFont"><a href="efd__set.htm">set</a></span>. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_message_service_1a55298ab62f30e3cf636e5577fdec8596"></a>
<p class="NDLRefMemberFunction">virtual void  SendLocal(<br/>const <span class="NDLSystemFont"><a href="efd__IMessage.htm">IMessage</a></span>* pMessage, <br/><span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span> targetChannel, <br/><span class="NDLSystemFont">bool</span> producerMessage = false)</p>
<p class="NDLRefMemberDescription">Causes message pMessage to be handled the next time this service is ticked by all targets in the current process registered for a matching message type and subscribed to the given targetChannel at that time. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">Threading: This method is thread-safe, and is the preferred way for threads to interact with each other.</p>
<p class="NDLRefMemberDetailedDescription">A <span class="NDLSystemFont"><a href="efd__SmartPointer.htm">SmartPointer</a></span> to pMessage is held until all handlers have been called and/or the <span class="NDLSystemFont"><a href="efd__IMessage.htm">IMessage</a></span> has been sent remotely. The <span class="NDLSystemFont">MessageService</span> assumes ownership of the message, and it must not be modified any time after calling any <span class="NDLSystemFont">MessageService</span> Send method.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMessage</span></td>
    <td>Pointer to the message to post </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">targetChannel</span></td>
    <td><span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span> to deliver message on </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">producerMessage</span></td>
    <td>if true this message is for producers of targetChannel not consumers </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_message_service_1a6fc72e829584a778ea81c20dd2421baa"></a>
<p class="NDLRefMemberFunction">void  SendLocal(const <span class="NDLSystemFont"><a href="efd__IMessage.htm">IMessage</a></span>* pMessage)</p>
<p class="NDLRefMemberDescription">Causes message pMessage to be handled the next time this service is ticked by all targets in the current process registered for a matching message type and subscribed to the given category as determined by pMessage-&gt;GetDestinationCategory. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">Threading: This method is thread-safe, and is the preferred way for threads to interact with each other.</p>
<p class="NDLRefMemberDetailedDescription">A <span class="NDLSystemFont"><a href="efd__SmartPointer.htm">SmartPointer</a></span> to pMessage is held until all handlers have been called and/or the <span class="NDLSystemFont"><a href="efd__IMessage.htm">IMessage</a></span> has been sent remotely. The <span class="NDLSystemFont">MessageService</span> assumes ownership of the message, and it must not be modified any time after calling any <span class="NDLSystemFont">MessageService</span> Send method.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMessage</span></td>
    <td>Pointer to the message to post </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_message_service_1a57923f354dc6322c26ed952546bcf183"></a>
<p class="NDLRefMemberFunction">virtual void  SendLocalDelayed(<br/>const <span class="NDLSystemFont"><a href="efd__IMessage.htm">IMessage</a></span>* pMessage, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a37c593debc73d82d7ddc571c725f0e2d">efd::TimeType</a></span> fDelay, <br/><span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span> targetChannel)</p>
<p class="NDLRefMemberDescription">Causes message pMessage to be handled the next time this service is ticked after the given delay time has elapsed by all targets registered for a matching message type and subscribed to targetChannel at the time of delivery. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">Threading: This method is thread-safe, and is the preferred way for threads to interact with each other.</p>
<p class="NDLRefMemberDetailedDescription">A <span class="NDLSystemFont"><a href="efd__SmartPointer.htm">SmartPointer</a></span> to pMessage is held until all handlers have been called and/or the <span class="NDLSystemFont"><a href="efd__IMessage.htm">IMessage</a></span> has been sent remotely. The <span class="NDLSystemFont">MessageService</span> assumes ownership of the message, and it must not be modified any time after calling any <span class="NDLSystemFont">MessageService</span> Send method.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMessage</span></td>
    <td>Pointer to the message to post for later delivery </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fDelay</span></td>
    <td>Time in seconds to delay the message delivery </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">targetChannel</span></td>
    <td><span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span> to deliver message on </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_message_service_1a9450a7075b5be2c242e93fee43bc4ad1"></a>
<p class="NDLRefMemberFunction">void  SendLocalDelayed(<br/>const <span class="NDLSystemFont"><a href="efd__IMessage.htm">IMessage</a></span>* pMessage, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a37c593debc73d82d7ddc571c725f0e2d">efd::TimeType</a></span> fDelay)</p>
<p class="NDLRefMemberDescription">Causes message pMessage to be handled the next time this service is ticked after the given delay time has elapsed by all targets registered for a matching message type and subscribed at the time of delivery to the target channel as determined by pMessage-&gt;GetDestinationCategory. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<p class="NDLRefMemberDetailedDescription">Threading: This method is thread-safe, and is the preferred way for threads to interact with each other.</p>
<p class="NDLRefMemberDetailedDescription">A <span class="NDLSystemFont"><a href="efd__SmartPointer.htm">SmartPointer</a></span> to pMessage is held until all handlers have been called and/or the <span class="NDLSystemFont"><a href="efd__IMessage.htm">IMessage</a></span> has been sent remotely. The <span class="NDLSystemFont">MessageService</span> assumes ownership of the message, and it must not be modified any time after calling any <span class="NDLSystemFont">MessageService</span> Send method. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMessage</span></td>
    <td>Pointer to the message to post for later delivery </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fDelay</span></td>
    <td>Time in seconds to delay the message delivery</td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_message_service_1a8ec8387e3ca56d6867e99a40c1b1a03a"></a>
<p class="NDLRefMemberFunction">virtual void  BeginCategoryProduction(<br/>const <span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span>& cat, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a3f46b06120f84d47e33a25e39034ed8e">QualityOfService</a></span> qualityOfService, <br/><span class="NDLSystemFont"><a href="efd__IBase.htm">IBase</a></span>* pProducerCallback)</p>
<p class="NDLRefMemberDescription">BeginCategoryProduction assigns a quality of service to a category and notifies the ChannelManager of the intention of this <span class="NDLSystemFont">MessageService</span> to produce messages destined for the specified category. </p>
<p class="NDLRefMemberDetailedDescription">Every call to BeginCategoryProduction should be matched with an eventual call to EndCategoryProduction once you no longer produce messages onto the target category.</p>
<p class="NDLRefMemberDetailedDescription">If you wish to respond to SendToProducer messages then you must also provide a callback to which these messages will be delivered. If a callback is specified in the Begin call then the same callback must be passed to the matching End call. If the same callback is registered multiple times it will still be called no more than one time for any arriving message. Regardless every call to Begin needs a matching call to End.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<p class="NDLRefMemberDetailedDescription">BeginCategoryProduction/EndCategoryProduction is not needed to send messages unless you need to receive producer message callbacks. If a you need to send a message do not need producer messages in response pass a QualityOfSerice to Send/SendRemote. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">cat</span></td>
    <td>The category onto which we will be producing messages </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">qualityOfService</span></td>
    <td>Quality of service for this category </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pProducerCallback</span></td>
    <td>The callback to be invoked if someone uses SendToProducers on this category.</td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_message_service_1a7ddc218b408d471bdbf23c814b4ff3cb"></a>
<p class="NDLRefMemberFunction">virtual void  EndCategoryProduction(<br/>const <span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span>& cat, <br/><span class="NDLSystemFont"><a href="efd__IBase.htm">IBase</a></span>* pProducerCallback = 0)</p>
<p class="NDLRefMemberDescription">EndCategoryProduction notifies the ChannelManager of the intention of this <span class="NDLSystemFont">MessageService</span> to no longer produce messages destined for the specified category. </p>
<p class="NDLRefMemberDetailedDescription">If a producer callback was specified when beginning production, that same callback must be specified in the end call.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<p class="NDLRefMemberDetailedDescription">BeginCategoryProduction/EndCategoryProduction is not needed to send messages unless you need to receive producer message callbacks. If a you need to send a message do not need producer messages in response pass a QualityOfSerice to Send/SendRemote. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">cat</span></td>
    <td>The category for which we are no longer producing messages. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pProducerCallback</span></td>
    <td>[optional] : The callback used when calling BeginCategoryProduction.</td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_message_service_1a77897cc3b8d714cee35b9311e1f7a184"></a>
<p class="NDLRefMemberFunction">virtual void  SendRemote(<br/><span class="NDLSystemFont"><a href="efd__IMessage.htm">IMessage</a></span>* pMessage, <br/>const <span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span>& cat, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a3f46b06120f84d47e33a25e39034ed8e">QualityOfService</a></span> defaultQOS = QOS_RELIABLE)</p>
<p class="NDLRefMemberDescription">Send a message remotely only. </p>
<p class="NDLRefMemberDetailedDescription">Sends to any interested remote connection.</p>
<p class="NDLRefMemberDetailedDescription">Calls <span class="NDLSystemFont"><a href="../efdNetwork/efd__NetService.htm#classefd_1_1_net_service_1afd97062ad6bbb3245d8f2140f6faa850">NetService::SendRemote()</a></span> internally.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<p class="NDLRefMemberDetailedDescription">A <span class="NDLSystemFont"><a href="efd__SmartPointer.htm">SmartPointer</a></span> to pMessage is held until all handlers have been called and/or the <span class="NDLSystemFont"><a href="efd__IMessage.htm">IMessage</a></span> has been sent remotely. The <span class="NDLSystemFont">MessageService</span> assumes ownership of the message, and it must not be modified any time after calling any <span class="NDLSystemFont">MessageService</span> Send method. </p>
<p class="NDLRefMemberDetailedDescription">If <span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span> is already mapped to an existing QOS, that QOS will be used instead of defaultQOS, and an error will be logged. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMessage</span></td>
    <td>Pointer to message for delivery </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">cat</span></td>
    <td><span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span> to send with </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">defaultQOS</span></td>
    <td>default QOS to send to if <span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span> is not already mapped to an existing QOS.</td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_message_service_1a3c8b37687f98b1021bedd2dd9fdff0ca"></a>
<p class="NDLRefMemberFunction">void  SendRemote(<span class="NDLSystemFont"><a href="efd__IMessage.htm">IMessage</a></span>* pMessage)</p>
<p class="NDLRefMemberDescription">Send a message remotely only. </p>
<p class="NDLRefMemberDetailedDescription">Sends to any interested remote connection. Calls <span class="NDLSystemFont"><a href="../efdNetwork/efd__NetService.htm#classefd_1_1_net_service_1afd97062ad6bbb3245d8f2140f6faa850">NetService::SendRemote()</a></span> internally. Messages are sent using pMessages destination category using the default quality of service.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<p class="NDLRefMemberDetailedDescription">A <span class="NDLSystemFont"><a href="efd__SmartPointer.htm">SmartPointer</a></span> to pMessage is held until all handlers have been called and/or the <span class="NDLSystemFont"><a href="efd__IMessage.htm">IMessage</a></span> has been sent remotely. The <span class="NDLSystemFont">MessageService</span> assumes ownership of the message, and it must not be modified any time after calling any <span class="NDLSystemFont">MessageService</span> Send method. </p>
<p class="NDLRefMemberDetailedDescription">If <span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span> is already mapped to an existing QOS, that QOS will be used instead of defaultQOS, and an error will be logged. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMessage</span></td>
    <td>Pointer to message for delivery</td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_message_service_1aa9f3da4c870f64c302c5a96b18fbb64b"></a>
<p class="NDLRefMemberFunction">virtual void  SendRemote(<br/><span class="NDLSystemFont"><a href="efd__IMessage.htm">IMessage</a></span>* pMessage, <br/>const <span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span>& cat, <br/>const <span class="NDLSystemFont"><a href="efd__ConnectionID.htm">ConnectionID</a></span>& cid)</p>
<p class="NDLRefMemberDescription">Send a message remotely only. </p>
<p class="NDLRefMemberDetailedDescription">Sends to the specified remote connection, regardless of interest. Calls <span class="NDLSystemFont"><a href="../efdNetwork/efd__NetService.htm#classefd_1_1_net_service_1afd97062ad6bbb3245d8f2140f6faa850">NetService::SendRemote()</a></span> internally.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<p class="NDLRefMemberDetailedDescription">A <span class="NDLSystemFont"><a href="efd__SmartPointer.htm">SmartPointer</a></span> to pMessage is held until all handlers have been called and/or the <span class="NDLSystemFont"><a href="efd__IMessage.htm">IMessage</a></span> has been sent remotely. The <span class="NDLSystemFont">MessageService</span> assumes ownership of the message, and it must not be modified any time after calling any <span class="NDLSystemFont">MessageService</span> Send method. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMessage</span></td>
    <td>Pointer to message for delivery </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">cat</span></td>
    <td><span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span> to send with </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">cid</span></td>
    <td><span class="NDLSystemFont"><a href="efd__ConnectionID.htm">ConnectionID</a></span> of the remote connection to send to</td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_message_service_1a20085c0c32bc2af834dc1ca40c1cc094"></a>
<p class="NDLRefMemberFunction">virtual void  ProducerSend(<br/><span class="NDLSystemFont"><a href="efd__IMessage.htm">IMessage</a></span>* pMessage, <br/>const <span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span>& categoryProduced, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a3f46b06120f84d47e33a25e39034ed8e">QualityOfService</a></span> qualityOfService = QOS_RELIABLE)</p>
<p class="NDLRefMemberDescription">Delivers to local producers and calls <span class="NDLSystemFont"><a href="../efdNetwork/efd__NetService.htm#classefd_1_1_net_service_1a7df16bf367b5687c469928ccf41750d6">NetService::ProducerSendRemote()</a></span>. </p>
<p class="NDLRefMemberDetailedDescription">Used to send a message to any target that has registered by passing a producer callback to BeginCategoryProduction.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMessage</span></td>
    <td>Pointer to message for delivery </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">categoryProduced</span></td>
    <td>send message to anyone who produces this category </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">qualityOfService</span></td>
    <td>the quality of service to use when sending. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_message_service_1a7d7deb3c5f93da22301c56027f86dc26"></a>
<p class="NDLRefMemberFunction">virtual void  ProducerSendRemote(<br/><span class="NDLSystemFont"><a href="efd__IMessage.htm">IMessage</a></span>* pMessage, <br/>const <span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span>& categoryProduced, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a3f46b06120f84d47e33a25e39034ed8e">QualityOfService</a></span> qualityOfService = QOS_RELIABLE)</p>
<p class="NDLRefMemberDescription">Calls <span class="NDLSystemFont"><a href="../efdNetwork/efd__NetService.htm#classefd_1_1_net_service_1a7df16bf367b5687c469928ccf41750d6">NetService::ProducerSendRemote()</a></span>. </p>
<p class="NDLRefMemberDetailedDescription">Used to send a message to any target that has registered by passing a producer callback to BeginCategoryProduction.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMessage</span></td>
    <td>Pointer to message for delivery </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">categoryProduced</span></td>
    <td>send message to anyone who produces this category </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">qualityOfService</span></td>
    <td>the quality of service to use when sending. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_message_service_1a226529381273ef7dd3ae45c74d7c5bcb"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetNetID() const</p>
<p class="NDLRefMemberDescription">Get the NetID for this MessageService/ServiceManager. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">there should only be one <span class="NDLSystemFont">MessageService</span> and <span class="NDLSystemFont"><a href="efd__ServiceManager.htm">ServiceManager</a></span> per thread. </p>
<p class="NDLRefMemberDetailedDescription">This function is not valid to be called until after an <span class="NDLSystemFont"><a href="efd__IMessage.htm">IMessage</a></span> of type kMSGID_SetNetID on kCAT_LocalMessage has been received. </p></p>

<a name="classefd_1_1_message_service_1aa775f699efc001018e5c07a1d52928e0"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetVirtualProcessID() const</p>
<p class="NDLRefMemberDescription">Get the VirtualProcessID for this MessageService/ServiceManager. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">there should only be one <span class="NDLSystemFont">MessageService</span> and <span class="NDLSystemFont"><a href="efd__ServiceManager.htm">ServiceManager</a></span> per thread. </p>
<p class="NDLRefMemberDetailedDescription">This function is not valid to be called until after an <span class="NDLSystemFont"><a href="efd__IMessage.htm">IMessage</a></span> of type kMSGID_SetNetID on kCAT_LocalMessage has been received. </p></p>

<a name="classefd_1_1_message_service_1a3098bb0b2a31067b85020ff6ebc054ea"></a>
<p class="NDLRefMemberFunction">virtual void  Subscribe(<br/><span class="NDLSystemFont"><a href="efd__IBase.htm">IBase</a></span>* pTarget, <br/>const <span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span>& consumeFrom, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a3f46b06120f84d47e33a25e39034ed8e">QualityOfService</a></span> qualityOfService = QOS_INVALID, <br/><span class="NDLSystemFont">bool</span> producerSubscribe = false)</p>
<p class="NDLRefMemberDescription">Subscribe to receive any messages that are on the given <span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span>. </p>
<p class="NDLRefMemberDetailedDescription">They will be delivered to pTarget and associated method for the given pTarget's class only if one exists for an arriving message's classID.</p>
<p class="NDLRefMemberDetailedDescription">For each message ClassID there must be a handler registered for each target class. See the EE_HANDLER macro for details.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<p class="NDLRefMemberDetailedDescription">Subscribe/Unsubscribe should be called in matching pairs for a given <span class="NDLSystemFont"><a href="efd__IBase.htm">IBase</a></span> and <span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span>. An <span class="NDLSystemFont"><a href="efd__IBase.htm">IBase</a></span> can be subscribed multiple times to the same <span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span> but the handler method will only be called once per message. Messages will continue being delivered until the same number of Unsubscribe calls have been made. </p>
<p class="NDLRefMemberDetailedDescription">RTTI must be configured correctly for pTarget. </p>
<p class="NDLRefMemberDetailedDescription">Proper refcounting semantics must be followed for pTarget. This means that pTarget-&gt;GetRefCount must return non-zero. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pTarget</span></td>
    <td>Pointer to the object to which the message will be delivered. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">consumeFrom</span></td>
    <td><span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span> the message will be sent on. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">qualityOfService</span></td>
    <td>the quality of service to use when sending. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">producerSubscribe</span></td>
    <td>True indicates a producer subscribe message type.</td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_message_service_1a08e820f2be20b58532ebcd42b1106cb9"></a>
<p class="NDLRefMemberFunction">virtual void  Unsubscribe(<br/><span class="NDLSystemFont"><a href="efd__IBase.htm">IBase</a></span>* pTarget, <br/>const <span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span>& consumeFrom, <br/><span class="NDLSystemFont">bool</span> producerSubscribe = false)</p>
<p class="NDLRefMemberDescription">Unsubscribe to stop receiving any messages that are on the given <span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span>. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<p class="NDLRefMemberDetailedDescription">Subscribe/Unsubscribe should be called in matching pairs for a given <span class="NDLSystemFont"><a href="efd__IBase.htm">IBase</a></span> and <span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span>. An <span class="NDLSystemFont"><a href="efd__IBase.htm">IBase</a></span> can be subscribed multiple times to the same <span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span> but the handler method will only be called once per message. Messages will continue being delivered until the same number of Unsubscribe calls have been made. </p>
<p class="NDLRefMemberDetailedDescription">RTTI must be configured correctly for pTarget. </p>
<p class="NDLRefMemberDetailedDescription">Proper refcounting semantics must be followed for pTarget. This means that pTarget-&gt;GetRefCount must return non-zero. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pTarget</span></td>
    <td>Pointer to the object the message will be delivered to. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">consumeFrom</span></td>
    <td><span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span> the message will be sent on. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">producerSubscribe</span></td>
    <td>True indicates a producer subscribe message type.</td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_message_service_1a87d222daf962488ec3e6402005ad212a"></a>
<p class="NDLRefMemberFunction">virtual void  SetOfflineMode(<span class="NDLSystemFont">bool</span> isOffline)</p>
<p class="NDLRefMemberDescription">If your application never uses a <span class="NDLSystemFont"><a href="../efdNetwork/efd__NetService.htm">NetService</a></span> then you can enable "offline mode" in the message service. </p>
<p class="NDLRefMemberDetailedDescription">Setting this mode will slightly reduce memory consumption as the message service will not maintain category mappings for remote communication. Setting this mode will actually not prevent adding a <span class="NDLSystemFont"><a href="../efdNetwork/efd__NetService.htm">NetService</a></span>, but if this mode is <span class="NDLSystemFont"><a href="efd__set.htm">set</a></span> then any calls to Subscribe and Unsubscribe prior to the creation of the <span class="NDLSystemFont"><a href="../efdNetwork/efd__NetService.htm">NetService</a></span> will be in an indeterminate state and may behave erratically. </p>

<a name="classefd_1_1_message_service_1a80e2a0c7587776c5c3feeca445a0595b"></a>
<p class="NDLRefMemberFunction">virtual void  SetSendRemote(<span class="NDLSystemFont">bool</span> sendRemote)</p>
<p class="NDLRefMemberDescription">Enable remote message sending. </p>
<p class="NDLRefMemberDetailedDescription">This is used internally by the <span class="NDLSystemFont"><a href="../efdNetwork/efd__NetService.htm">NetService</a></span>, once a connection is established it calls this to indicate that remote message sending should be enabled. Prior to this being enabled any remote sending function will fail. This should not be called by anyone else. </p>

<a name="classefd_1_1_message_service_1a4a27a94dbaa1acfcb1e14a53f3fe6eef"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  GetSendRemote()</p>
<p class="NDLRefMemberDescription">Determine if remote message sending is enabled. </p>

<a name="classefd_1_1_message_service_1aee11989f5236d0ec69ad4aa2892d3bce"></a>
<p class="NDLRefMemberFunction">virtual void  SetNetService(<span class="NDLSystemFont"><a href="efd__INetService.htm">efd::INetService</a></span>* pNetService)</p>
<p class="NDLRefMemberDescription">Set the <span class="NDLSystemFont"><a href="../efdNetwork/efd__NetService.htm">NetService</a></span> this <span class="NDLSystemFont">MessageService</span> will use. </p>

<a name="classefd_1_1_message_service_1a2d073623927ee6a64ab11259bd02c1ed"></a>
<p class="NDLRefMemberFunction">virtual void  HandleNetMessage(<br/>const <span class="NDLSystemFont"><a href="efd__IMessage.htm">IMessage</a></span>* pIncomingMessage, <br/>const <span class="NDLSystemFont"><a href="efd__ConnectionID.htm">ConnectionID</a></span>& senderConnectionID)</p>
<p class="NDLRefMemberDescription">Handles messages that originate from the <span class="NDLSystemFont"><a href="../efdNetwork/efd__NetService.htm">NetService</a></span>. </p>
<a name="categorization_functions"></a>
<p class="NDLRefHead1">Categorization functions</p>


<a name="classefd_1_1_message_service_1a51bb62ef55bdae7323fcf177fefddd57"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span>  GetServicePrivateCategory(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">ClassID</a></span> serviceID)</p>
<p class="NDLRefMemberDescription">Get a private <span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span> for the instance of the <span class="NDLSystemFont"><a href="efd__ISystemService.htm">ISystemService</a></span> local to this process. </p>
<p class="NDLRefMemberDetailedDescription">Only a single private <span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span> can be generated in this way and is unique to the process that generates it. Subsequent calls to this method by the same process will produce the same result.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">serviceID</span></td>
    <td>The ClassID of the <span class="NDLSystemFont"><a href="efd__ISystemService.htm">ISystemService</a></span> to create the <span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span> for. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td><span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span> generated. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_message_service_1ad212b8830dd2ac0dc54f28bc2b04a971"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span>  GetServiceProcessUniqueCategory(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">ClassID</a></span> serviceID)</p>
<p class="NDLRefMemberDescription">Allocate a <span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span> that is unique only in the context of this process. </p>
<p class="NDLRefMemberDetailedDescription">Subsequent calls to this method with the same ClassID by any process will produce a different result. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">serviceID</span></td>
    <td>The ClassID of the <span class="NDLSystemFont"><a href="efd__ISystemService.htm">ISystemService</a></span> to create the <span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span> for. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td><span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span> generated. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_message_service_1a8e9fefb2884a0c37cda34bbdd88f8a1a"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span>  GetGloballyUniqueCategory()</p>
<p class="NDLRefMemberDescription">Allocate a globally unique <span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span>. </p>
<p class="NDLRefMemberDetailedDescription">Subsequent calls to this method by any process will produce a different result. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td><span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span> generated. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_message_service_1aebd209ea8d6bfb26cc0c36f9b1e9cd30"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span>  GetServicePublicCategory(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">ClassID</a></span> serviceID, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">UInt32</a></span> categoryIndex = kNetID_ISystemService)</p>
<p class="NDLRefMemberDescription">Get a public <span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span> as determined by the <span class="NDLSystemFont"><a href="efd__ISystemService.htm">ISystemService</a></span> ClassID and an optional index. </p>
<p class="NDLRefMemberDetailedDescription">If multiple public Categories are desired, categoryIndex can be <span class="NDLSystemFont"><a href="efd__set.htm">set</a></span> to a value other than the default to create a new public <span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span>. Public Categories are not unique to a specific process. Categories generated by this function will be the same if multiple processes pass in the same values for serviceID and categoryIndex. Subsequent calls to this method by the any process will produce the same result.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">serviceID</span></td>
    <td>The ClassID of the <span class="NDLSystemFont"><a href="efd__ISystemService.htm">ISystemService</a></span> to create the <span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span> for. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">categoryIndex</span></td>
    <td>The <span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span> number for the specified <span class="NDLSystemFont"><a href="efd__ISystemService.htm">ISystemService</a></span> to create. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td><span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span> generated. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_message_service_1a038187e691421d7771900cb0672ea318"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span>  GetServicePrivateCategory(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">ClassID</a></span> serviceID, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">UInt32</a></span> netID)</p>
<p class="NDLRefMemberDescription">Get a private <span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span> for the instance of the <span class="NDLSystemFont"><a href="efd__ISystemService.htm">ISystemService</a></span> in the process specified by the passed in netID. </p>
<p class="NDLRefMemberDetailedDescription">Only a single private <span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span> can be generated in this way and is unique to the process that generates it. Subsequent calls to this method by the same process will produce the same result.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">serviceID</span></td>
    <td>The ClassID of the <span class="NDLSystemFont"><a href="efd__ISystemService.htm">ISystemService</a></span> to create the <span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span> for. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">netID</span></td>
    <td>The NetID of the process you want the private category for. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td><span class="NDLSystemFont"><a href="efd__Category.htm">Category</a></span> generated. </td>
</tr>

        </tbody>
    </table>
</div>


 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
