<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::ILogger</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::ILogger</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="efd__IBase.htm">efd::IBase</a></span></p>


<p class="NDLRefHeaderFile">&lt;ILogger.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classefd_1_1_i_logger.gif" alt="Inheritance graph for efd::ILogger"/>
  <p class="FigureCaption">Inheritance graph for efd::ILogger</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">Interface to the logging system. </p>
<p class="NDLNormal">This class receives all log, assert, and verify statements, which it filters and passes to the proper destination to be recorded. </p>

<a name="log_level_masks"></a>
<p class="NDLRefHead1">Log Level Masks</p>

<p class="NDLRefMemberDescription">Mask definitions used in calls to <span class="NDLSystemFont"><a href="efd__ILogger.htm#classefd_1_1_i_logger_1acdb624e8118b02d1d3973b4ef1487eb1">ILogger::SetLogLevel</a></span>.</p>
<p class="NDLRefMemberDescription">These refer to one or more of the "Log Levels" values above. </p>

<a name="classefd_1_1_i_logger_1afbffcb5beb3be985cbce18e9204d2f7d"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a59a3838ab5cdfe87f98f5b8371e4e91d">efd::UInt8</a></span>  kLogMask_Err0</p>
<p class="NDLRefMemberDescription">Turn of logging. </p>

<a name="classefd_1_1_i_logger_1a96d3d57c324f24586fe0eaf0813c0218"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a59a3838ab5cdfe87f98f5b8371e4e91d">efd::UInt8</a></span>  kLogMask_Err1</p>
<p class="NDLRefMemberDescription">Turn of logging. </p>

<a name="classefd_1_1_i_logger_1acb85c7911ae9d9eed4242a60457a35f6"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a59a3838ab5cdfe87f98f5b8371e4e91d">efd::UInt8</a></span>  kLogMask_Err2</p>
<p class="NDLRefMemberDescription">Turn of logging. </p>

<a name="classefd_1_1_i_logger_1a06214e4727c4f0ecfc0797748f1bb1b1"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a59a3838ab5cdfe87f98f5b8371e4e91d">efd::UInt8</a></span>  kLogMask_Err3</p>
<p class="NDLRefMemberDescription">Turn of logging. </p>

<a name="classefd_1_1_i_logger_1a46967c02320fee23fdac9940e9691226"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a59a3838ab5cdfe87f98f5b8371e4e91d">efd::UInt8</a></span>  kLogMask_Lvl0</p>
<p class="NDLRefMemberDescription">Turn of logging. </p>

<a name="classefd_1_1_i_logger_1ad1e8910d4757ed48bc475b59204241c6"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a59a3838ab5cdfe87f98f5b8371e4e91d">efd::UInt8</a></span>  kLogMask_Lvl1</p>
<p class="NDLRefMemberDescription">Turn of logging. </p>

<a name="classefd_1_1_i_logger_1a3c819a28b213979edce161fa9bcfbfdf"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a59a3838ab5cdfe87f98f5b8371e4e91d">efd::UInt8</a></span>  kLogMask_Lvl2</p>
<p class="NDLRefMemberDescription">Turn of logging. </p>

<a name="classefd_1_1_i_logger_1a4872b01f3e0eb43a508f798bf8804951"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a59a3838ab5cdfe87f98f5b8371e4e91d">efd::UInt8</a></span>  kLogMask_Lvl3</p>
<p class="NDLRefMemberDescription">Turn of logging. </p>

<a name="classefd_1_1_i_logger_1a1c9d8c952375a3842584316cdd42993b"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a59a3838ab5cdfe87f98f5b8371e4e91d">efd::UInt8</a></span>  kLogMask_UptoErr1</p>
<p class="NDLRefMemberDescription">Turn of logging. </p>

<a name="classefd_1_1_i_logger_1ae739a93e66b82afdc982e11d2b5b3aef"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a59a3838ab5cdfe87f98f5b8371e4e91d">efd::UInt8</a></span>  kLogMask_UptoErr2</p>
<p class="NDLRefMemberDescription">Turn of logging. </p>

<a name="classefd_1_1_i_logger_1aff334bc8a2f150c2b33aff1312e84128"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a59a3838ab5cdfe87f98f5b8371e4e91d">efd::UInt8</a></span>  kLogMask_UptoErr3</p>
<p class="NDLRefMemberDescription">Turn of logging. </p>

<a name="classefd_1_1_i_logger_1a2b7fd76839e8552ae7b186131552d22f"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a59a3838ab5cdfe87f98f5b8371e4e91d">efd::UInt8</a></span>  kLogMask_UptoLvl1</p>
<p class="NDLRefMemberDescription">Turn of logging. </p>

<a name="classefd_1_1_i_logger_1ac91148b10f82b8c6d05aa6da0b321618"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a59a3838ab5cdfe87f98f5b8371e4e91d">efd::UInt8</a></span>  kLogMask_UptoLvl2</p>
<p class="NDLRefMemberDescription">Turn of logging. </p>

<a name="classefd_1_1_i_logger_1a46fbe56909ae3d7cdda19a8e6d28f7a5"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a59a3838ab5cdfe87f98f5b8371e4e91d">efd::UInt8</a></span>  kLogMask_UptoLvl3</p>
<p class="NDLRefMemberDescription">Turn of logging. </p>

<a name="classefd_1_1_i_logger_1a1ca8fadb865bc719e1e7600f42d7045f"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a59a3838ab5cdfe87f98f5b8371e4e91d">efd::UInt8</a></span>  kLogMask_All</p>
<p class="NDLRefMemberDescription">Turn of logging. </p>

<a name="classefd_1_1_i_logger_1a374c1e2db7ce68ef0cdb133f9ae6430b"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a59a3838ab5cdfe87f98f5b8371e4e91d">efd::UInt8</a></span>  kLogMask_None</p>
<p class="NDLRefMemberDescription">Turn of logging. </p>
<a name="log_levels"></a>
<p class="NDLRefHead1">Log Levels</p>

<p class="NDLRefMemberDescription">Level definitions used in calls to <span class="NDLSystemFont"><a href="efd__ILogger.htm#classefd_1_1_i_logger_1a90f9df717c79b3cced4f1db500356438">ILogger::Log</a></span> and the EE_LOG* macros </p>

<a name="classefd_1_1_i_logger_1ad42d8b2f0331523f4fa828d4ea7697b8"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a59a3838ab5cdfe87f98f5b8371e4e91d">efd::UInt8</a></span>  kERR0</p>
<p class="NDLRefMemberDescription">System fatal errors. </p>

<a name="classefd_1_1_i_logger_1a1b732a35922fb20784fc4c364407b57c"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a59a3838ab5cdfe87f98f5b8371e4e91d">efd::UInt8</a></span>  kERR1</p>
<p class="NDLRefMemberDescription">Serious errors (lost connection, etc.). </p>

<a name="classefd_1_1_i_logger_1a4f7b8f563f75b771b1279c2d03a1c2ed"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a59a3838ab5cdfe87f98f5b8371e4e91d">efd::UInt8</a></span>  kERR2</p>
<p class="NDLRefMemberDescription">Common and recoverable errors. </p>

<a name="classefd_1_1_i_logger_1a10635be41afc8bdf0e8c93e58ad0237f"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a59a3838ab5cdfe87f98f5b8371e4e91d">efd::UInt8</a></span>  kERR3</p>
<p class="NDLRefMemberDescription">Trivial errors. </p>

<a name="classefd_1_1_i_logger_1aa6a70c2a175e5365b9f1280bd3de0ffc"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a59a3838ab5cdfe87f98f5b8371e4e91d">efd::UInt8</a></span>  kLVL0</p>
<p class="NDLRefMemberDescription">Rare, important events, such as client connects, disconnects, DB connection established. </p>

<a name="classefd_1_1_i_logger_1abb8586170b454c09387141ed871e323b"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a59a3838ab5cdfe87f98f5b8371e4e91d">efd::UInt8</a></span>  kLVL1</p>
<p class="NDLRefMemberDescription">Significant, but more common events (e.g., avatar moves between locales). </p>

<a name="classefd_1_1_i_logger_1ac2c5c11d6e7a4521f1fa994d31196f4b"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a59a3838ab5cdfe87f98f5b8371e4e91d">efd::UInt8</a></span>  kLVL2</p>
<p class="NDLRefMemberDescription">Common events (a message is handled). </p>

<a name="classefd_1_1_i_logger_1a46295be53e627df01887a171383f295f"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a59a3838ab5cdfe87f98f5b8371e4e91d">efd::UInt8</a></span>  kLVL3</p>
<p class="NDLRefMemberDescription">Debugging (generally only enabled during development). </p>

<a name="classefd_1_1_i_logger_1ae4665730956fe7afe2abf79bf073b070"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a59a3838ab5cdfe87f98f5b8371e4e91d">efd::UInt8</a></span>  kUknownLevel</p>
<p class="NDLRefMemberDescription">An unknown level has been detected. </p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classefd_1_1_i_logger_1a44a5b234b77a0f98f4a6d44fb785f43d"></a>
<p class="NDLRefMemberFunction">ILogger()</p>
<p class="NDLRefMemberDescription">Constructor. </p>

<a name="classefd_1_1_i_logger_1a90f9df717c79b3cced4f1db500356438"></a>
<p class="NDLRefMemberFunction">virtual void  Log(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span> module, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a59a3838ab5cdfe87f98f5b8371e4e91d">efd::UInt8</a></span> level, <br/>const char* pFile, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span> line, <br/>const char* pMsg) = 0</p>
<p class="NDLRefMemberDescription">Receives the log message from the helper class and forwards it to the proper destination. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">module</span></td>
    <td>Module ID that generated the log message. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">level</span></td>
    <td>Log message level. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pFile</span></td>
    <td>Source file where the log message was generated. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">line</span></td>
    <td>Source line where the log message was generated. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pMsg</span></td>
    <td>Formatted log message. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_logger_1a8ad51186d9942d15b0eb8caab79cb492"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">efd::Bool</span>  AssertMessage(<br/>const char* pFile, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span> line, <br/>const char* pFunction, <br/>const char* pPred, <br/>const char* pMsg, <br/>const char* pStack = 0) = 0</p>
<p class="NDLRefMemberDescription">Receives the assert or verify message from the helper class and forwards it to the proper destination. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pFile</span></td>
    <td>Source file where the log message was generated. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">line</span></td>
    <td>Source line where the log message was generated. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pFunction</span></td>
    <td>Function where the log message was generated. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pPred</span></td>
    <td>Predicate of the assert that failed. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pMsg</span></td>
    <td>Optional formatted assert message. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pStack</span></td>
    <td>Optional If EE_USE_ASSERT_STACKTRACE was defined at compile time, a <span class="NDLSystemFont"><a href="efd__stack.htm">stack</a></span> backtrace is passed in. If enabled and NoStackTraceOnAssert has not been called the backtrace will be included in the output. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if successful; false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_logger_1ae69bb44ba85d6c58eebb0e58f5da12d6"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span>  RegisterModuleName(const char* pName) = 0</p>
<p class="NDLRefMemberDescription">Registers the name of a new module name and automatically assigns an ID to it. </p>
<p class="NDLRefMemberDetailedDescription">If this method is called with an already known module name the previously assigned module ID will be returned.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pName</span></td>
    <td>Name of the new module. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Module ID assigned to the new module. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_logger_1ad110249e9958bf6477b026b0685ce40f"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  RegisterModuleName(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span> module, <br/>const char* pName) = 0</p>
<p class="NDLRefMemberDescription">Registers the name of a new module name and assigns it the specified ID. </p>
<p class="NDLRefMemberDetailedDescription">If the specified ID is already in use this method will fail.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">module</span></td>
    <td>ID of the module for which to register the name. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pName</span></td>
    <td>Name to assign to the module ID. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the module was registered, false if it conflicts with existing entries. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_logger_1a4ed1db331deb5f7b945df9287134e0c3"></a>
<p class="NDLRefMemberFunction">virtual void  RegisterLevelMaskName(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a59a3838ab5cdfe87f98f5b8371e4e91d">efd::UInt8</a></span> levelMask, <br/>const char* pName) = 0</p>
<p class="NDLRefMemberDescription">Register the name of a level mask. </p>
<p class="NDLRefMemberDetailedDescription">A level mask is one or more bits which correspond by index to the "Log Levels" used by <span class="NDLSystemFont"><a href="efd__ILogger.htm#classefd_1_1_i_logger_1a90f9df717c79b3cced4f1db500356438">ILogger::Log</a></span>. Combinations of bits can be given a name and this name can then be used to configure logging through the <span class="NDLSystemFont"><a href="efd__ConfigManager.htm">ConfigManager</a></span> service. Typically you won't need to call this method since default names are registered automatically for all of the standard masks and these default names can be combined together using the '|' character. However you may wish to register additional names for convenience or in order to have more control over the mask value. For example, your code could register a string name using a different mask value based on the compile target so that a single configuration name behaved differently in debug and release builds.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">In order to use the names you register in the configuration you must call this method prior to calling <span class="NDLSystemFont"><a href="efd__ILogger.htm#classefd_1_1_i_logger_1a7380bbeff7361319db30607aad53c34d">ILogger::ReadConfig</a></span>.</p>
<p class="NDLRefMemberDetailedDescription">The default mask names that are automatically registered for use in the configuration files are: 
<pre>
            String Name     Corresponding Mask
            -----------     ------------------
            &quot;Err0&quot;          kLogMask_Err0
            &quot;Err1&quot;          kLogMask_Err1
            &quot;Err2&quot;          kLogMask_Err2
            &quot;Err3&quot;          kLogMask_Err3

            &quot;Lvl0&quot;          kLogMask_Lvl0
            &quot;Lvl1&quot;          kLogMask_Lvl1
            &quot;Lvl2&quot;          kLogMask_Lvl2
            &quot;Lvl3&quot;          kLogMask_Lvl3

            &quot;UptoLvl1&quot;      kLogMask_UptoLvl1
            &quot;UptoLvl2&quot;      kLogMask_UptoLvl2
            &quot;UptoLvl3&quot;      kLogMask_UptoLvl3

            &quot;UptoErr1&quot;      kLogMask_UptoErr1
            &quot;UptoErr2&quot;      kLogMask_UptoErr2
            &quot;UptoErr3&quot;      kLogMask_UptoErr3

            &quot;All&quot;           kLogMask_All
            &quot;None&quot;          kLogMask_None
         </pre>
</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">levelMask</span></td>
    <td>Mask of the level(s) for which to register the name. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pName</span></td>
    <td>The string name to assign to the level mask. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_logger_1acdb624e8118b02d1d3973b4ef1487eb1"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">efd::Bool</span>  SetLogLevel(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span> module, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a59a3838ab5cdfe87f98f5b8371e4e91d">efd::UInt8</a></span> levelMask, <br/>const <span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span>& destination = "") = 0</p>
<p class="NDLRefMemberDescription">Sets the log level for the specified module ID. </p>
<p class="NDLRefMemberDetailedDescription">Use one or more "Log Level Masks" values logically ORed (|) together to specify which log levels should be enabled. Calls to logging methods like EE_LOG will do nothing if the given log level is not enabled. By default</p>
<p class="NDLRefMemberDetailedDescription">If the provided module is efd::kALL then this will <span class="NDLSystemFont"><a href="efd__set.htm">set</a></span> all modules to use the given level. This will override previous settings for a specific module. So, for example, calling SetLogLevel(efd::kALL, kLogMask_None) would disable all logging regardless of previous configuration. Future calls to SetLogLevel would work as normal.</p>
<p class="NDLRefMemberDetailedDescription">You may also optionally specify a specific log destination in order to only adjust the settings for that single destination. Passing an empty string ("") as the destination will result in all currently registered log destination being affected. When all destinations are selected by using the empty string this call can override previous settings specific to a single destination. If a destination name is provided but no destination of the given name exists then SetLogLevel will do nothing and return failure.</p>
<p class="NDLRefMemberDetailedDescription">Based on how SetLogLevel overriding works, generally you will want to <span class="NDLSystemFont"><a href="efd__set.htm">set</a></span> your most generic log options first and provide more specific settings last.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">module</span></td>
    <td>Module ID to register the level. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">levelMask</span></td>
    <td>The "Log Level Masks" to accept. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">destination</span></td>
    <td>Log destination to which to write the statements. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the destination was found and the log level was <span class="NDLSystemFont"><a href="efd__set.htm">set</a></span>; false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_logger_1a6c54331f3148ddf834725c51f59dd0ae"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">efd::Bool</span>  AddDest(<br/><span class="NDLSystemFont"><a href="efd__ILogDestination.htm">ILogDestination</a></span>* pDest, <br/><span class="NDLSystemFont">bool</span> useDefaults = false, <br/><span class="NDLSystemFont">bool</span> overrideExisting = false) = 0</p>
<p class="NDLRefMemberDescription">Adds the destination to the logger and initializes it. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pDest</span></td>
    <td>Pointer to the new log destination class. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">useDefaults</span></td>
    <td>If true, the destination is initialized to the default module / log levels are <span class="NDLSystemFont"><a href="efd__set.htm">set</a></span>. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">overrideExisting</span></td>
    <td>If true, the destination will replace any previous destination with the same name. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if successful; false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_logger_1a223c59249beda483e68a8ac3b5c76593"></a>
<p class="NDLRefMemberFunction">virtual void  RemoveDest(const <span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span>& name) = 0</p>
<p class="NDLRefMemberDescription">Removes a log destination by name. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">Reserved for future use when multiple destinations are supported.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">name</span></td>
    <td>Name used to refer to the destination. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_logger_1a6f8cfddd12c1b15353d17c7e8a1ca498"></a>
<p class="NDLRefMemberFunction">virtual void  RemoveDest(<span class="NDLSystemFont"><a href="efd__ILogDestination.htm">ILogDestination</a></span>* pDest) = 0</p>
<p class="NDLRefMemberDescription">Removes a log destination by pointer. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pDest</span></td>
    <td>Pointer to the new log destination class. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_logger_1a6fbde4532d65b8adf394ef849549deb8"></a>
<p class="NDLRefMemberFunction">virtual void  RemoveAllDests() = 0</p>
<p class="NDLRefMemberDescription">Removes all the log destinations. </p>

<a name="classefd_1_1_i_logger_1ad80535a4e2ff9d0fd8c05e10cf104336"></a>
<p class="NDLRefMemberFunction">virtual void  GetDestinationNames(<span class="NDLSystemFont"><a href="efd__set.htm">efd::set</a></span>&lt;<span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span>&gt;& names) = 0</p>
<p class="NDLRefMemberDescription">Get the names of all registered destinations. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">names</span></td>
    <td>Set of destination names. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_logger_1a7d0589a8f384aabac094275b3cd536bd"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">efd::Bool</span>  IsDestination(const <span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span>& name) const = 0</p>
<p class="NDLRefMemberDescription">True if 'name' is a destination. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">name</span></td>
    <td>Name to query. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the name is a destination name; false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_logger_1a5b19775fa38f7372758f932e1c11853f"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">efd::Bool</span>  IsLogging(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span> module, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a59a3838ab5cdfe87f98f5b8371e4e91d">efd::UInt8</a></span> level) const = 0</p>
<p class="NDLRefMemberDescription">Returns true if the logger is logging messages for the specified log mask to one or more log destinations. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">module</span></td>
    <td>Logging module to check. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">level</span></td>
    <td>Level bits to check. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the module and level are being logged; false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_logger_1a408920f1068423fb5e22bb68ccfd5c60"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span>  GetModuleInt(const <span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span>& moduleName) = 0</p>
<p class="NDLRefMemberDescription">Retrieves the module ID, given a module name. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">moduleName</span></td>
    <td>Name of the module to lookup. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Module ID, if not found kUnknownModule. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_logger_1a845abc95e75300d2985c77093d666e99"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a59a3838ab5cdfe87f98f5b8371e4e91d">efd::UInt8</a></span>  GetLevelMaskByName(const <span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span>& levelName) = 0</p>
<p class="NDLRefMemberDescription">Parses a string into a level mask. </p>
<p class="NDLRefMemberDetailedDescription">This will convert any default mask name or mask name passed to RegisterLevelMaskName into the corresponding mask bits. In addition it will parse combinations of known mask names separated by the '|' character into the corresponding logically or'ed mask. Finally, it can also parse a string containing a decimal integer.</p>
<p class="NDLRefMemberDetailedDescription">See <span class="NDLSystemFont"><a href="efd__ILogger.htm#classefd_1_1_i_logger_1a4ed1db331deb5f7b945df9287134e0c3">ILogger::RegisterLevelMaskName</a></span> for a <span class="NDLSystemFont"><a href="efd__list.htm">list</a></span> of the default mask names.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">levelName</span></td>
    <td>Name of the level to lookup. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Level ID, if not found kUnknownLevel. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_logger_1a5ec014cb17986f5e28da133cad018cce"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span>  GetModuleName(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span> module) = 0</p>
<p class="NDLRefMemberDescription">Retrieves the module name, given the module ID. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">module</span></td>
    <td>Module ID to look up. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Module name. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_logger_1ac3f136b156ea35a999a0667ff876850c"></a>
<p class="NDLRefMemberFunction">virtual const char*  GetLevelName(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a59a3838ab5cdfe87f98f5b8371e4e91d">efd::UInt8</a></span> level) = 0</p>
<p class="NDLRefMemberDescription">Retrieves the level name, given the level ID. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">level</span></td>
    <td>Level ID to look up. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>level name </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_logger_1a7380bbeff7361319db30607aad53c34d"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">efd::Bool</span>  ReadConfig(<br/><span class="NDLSystemFont"><a href="efd__IConfigManager.htm">efd::IConfigManager</a></span>* pConfigManager, <br/><span class="NDLSystemFont"><a href="efd__EnumManager.htm">efd::EnumManager</a></span>* pEnumManager, <br/><span class="NDLSystemFont">bool</span> force = false) = 0</p>
<p class="NDLRefMemberDescription">Reads the configuration information from the <span class="NDLSystemFont"><a href="efd__ConfigManager.htm">ConfigManager</a></span> and sets up the <span class="NDLSystemFont"><a href="efd__Logger.htm">Logger</a></span> as specified. </p>
<p class="NDLRefMemberDetailedDescription">[Log.FileDests."&lt;name&gt;"] is a section that specifies the file destination for the logger. The "&lt;name&gt;" is the name assigned to the log file and is reserved for future use when multiple destinations are supported. The section contains two keys, FileName and FileMode, that specify the file to open and how to open it. FileInfoWithMsg, if <span class="NDLSystemFont"><a href="efd__set.htm">set</a></span> to true, is used to turn on file and line reporting for log messages. FileInfoWithAssert, if <span class="NDLSystemFont"><a href="efd__set.htm">set</a></span> to false, is used to turn off file and line reporting for asserts.</p>
<p class="NDLRefMemberDetailedDescription">The [Log.Modules] section is used to specify string names for module <span class="NDLSystemFont"><a href="efd__IDs.htm">IDs</a></span>. It contains one key value pair for each module that needs a name. The key is the module string name and the value is the ID.</p>
<p class="NDLRefMemberDetailedDescription">The [Log.Levels] section is used to specify string names for level <span class="NDLSystemFont"><a href="efd__IDs.htm">IDs</a></span>. It contains one key value pair for each level that needs a name. The key is the level string name and the value is the ID. The value can either be a numeric version of the level bits or a string of registered level names to be combined. The individual level names are separated with '|' characters.</p>
<p class="NDLRefMemberDetailedDescription">The [Log.Filters."&lt;name&gt;"] section is used to setup the log filters. It contains key value pairs for each module that is to be logged. The key is the module in either numeric or string form. The value is the filter level in either numeric or string form. The optional name is the name of the log destination (not the log file name) to which you want the filter applied.</p>
<p class="NDLRefMemberDetailedDescription">Below is example configuration information for the <span class="NDLSystemFont"><a href="efd__Logger.htm">Logger</a></span>:</p>
<p class="NDLRefMemberDetailedDescription">
<pre>
            [Log]
            ; Module names are defined using enum files.  You can specify which enum file should
            ; be loaded.  When the enum is loaded this allows you to use friendly string names
            ; for configuring the Log.Filters and also uses those friendly names in the log file
            ; output.
            ModuleEnum=efdLogIds

            ; Override the default log destination.  The destination name &quot;default&quot; is the name
            ; that is typically used from code when adding the initial log destination.  By
            ; reusing the same name here we can replace the hardcoded destination with an override.
            ; Some programs may create multiple or differently named destinations in code, all
            ; of those can be overridden in this same way.
            [Log.Destinations.default]
            Type = File
            FileName = LogCfgMn.log
            FileMode = FileOverwrite

            ; Create a second log destination which we will config to only get error messages.
            ; Note:  The name given to the log destination is placed in the section header and in
            ; this case it is &quot;ErrorFile&quot;.  Any name can be used.
            [Log.Destinations.ErrorFile]
            Type = File
            ; By default newly added destinations typically log nothing until a filter config is
            ; specified.  If you want, you can instead set UseDefaults to true and the new
            ; destination will have the default config applied.  The default is equivalent to a
            ; filter of &quot;ALL = UptoErr3 | UptoLvl2&quot;.
            UseDefaults = true
            FileName = ErrsOnly.log
            FileMode = FileOverwrite

            ; Besides file based log destinations, there are 'Printf' and 'DebugOut' destinations
            ; registered by default.  These can also be extended by your program to provide new
            ; types.
            [Log.Destinations.DebugOutput]
            Type = DebugOut

            ; Create a custom named level mask.  These can be used for convenience when setting log
            ; filters.
            [Log.Levels]
            MyDefaultLevels = UptoErr3 | UptoLvl1

            ; Set the default log filters to be used for all log destinations.
            ; Note:  No destination name is used, this applies to all destinations.
            ; Each line of the filter takes the form &quot;&lt;ModuleName&gt; = &lt;Log Level Mask&gt;&quot;.  The
            ; module name can be specified as an integer or as a friendly name.  However, in order
            ; to use friendly names you need to configure Log.ModuleEnum, Enum.Path and use the
            ; EnumManager service.  For a list of valid log level mask strings, see
            ; ILogger::RegisterLevelMaskName.
            [Log.Filters]
            1 = UptoErr3 | UptoLvl3
            Testing = All
            Foundation = None
            TestModule2 = MyDefaultLevels

            ; Create log filters for the ErrorFile log destination by providing its name as part
            ; of the section header.
            [Log.Filters.ErrorFile]
            ALL = UptoErr3

            [Log.Filters.DebugOutput]
            ALL = Err0
             </pre>
</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pConfigManager</span></td>
    <td>Pointer to the configuration manager from which to read the configuration information. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pEnumManager</span></td>
    <td>Pointer to the <span class="NDLSystemFont"><a href="efd__EnumManager.htm">EnumManager</a></span>. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">force</span></td>
    <td>If true, we are re-reading the configuration due to settings changes. Normally only the first call to ReadConfig has any effect but this can override that. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if a log section is found; false otherwise. True does not mean the method found any settings, merely that it found the section. This behavior is due to the fact that all settings are optional. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_logger_1ae7ed6c03537709d266e166b5967faec2"></a>
<p class="NDLRefMemberFunction">virtual void  ResetLogLevels() = 0</p>
<p class="NDLRefMemberDescription">Clears the module/level filters and sets it to log nothing. </p>

<a name="classefd_1_1_i_logger_1a100cab4bbe8e66bcecaae756a3f518df"></a>
<p class="NDLRefMemberFunction">virtual void  ResetLogLevels(const <span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span>& dest) = 0</p>
<p class="NDLRefMemberDescription">Reset the log levels for the destination. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">dest</span></td>
    <td>Log destination to which to write the statements. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_logger_1a3ef21b69ee570348b823dd431fde9d53"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a59a3838ab5cdfe87f98f5b8371e4e91d">efd::UInt8</a></span>  GetLogLevel(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span> moduleId, <br/>const <span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span>& destination) const = 0</p>
<p class="NDLRefMemberDescription">Look up the log level for a module. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">moduleId</span></td>
    <td>Module ID. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">destination</span></td>
    <td>Log destination to which to write the statements. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Log level for the module specified. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_logger_1ae7cf6e160ab979bceffdafa3b15d2aae"></a>
<p class="NDLRefMemberFunction">virtual void  GetModules(<span class="NDLSystemFont"><a href="efd__map.htm">efd::map</a></span>&lt;<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span>, <span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span>&gt;& names) const = 0</p>
<p class="NDLRefMemberDescription">Get a <span class="NDLSystemFont"><a href="efd__map.htm">map</a></span> of all modules. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">names</span></td>
    <td>Map of all modules. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_logger_1ab2fc75775261aa596e2abe2eb0907658"></a>
<p class="NDLRefMemberFunction">virtual void  GetLevelNames(<span class="NDLSystemFont"><a href="efd__set.htm">efd::set</a></span>&lt;<span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span>&gt;& names) const = 0</p>
<p class="NDLRefMemberDescription">Get all the level names registered with the logger. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">names</span></td>
    <td>Set of all level names. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_logger_1a353fae742db854ad60e45ffd24a6c60e"></a>
<p class="NDLRefMemberFunction">virtual const <span class="NDLSystemFont"><a href="efd__ILogDestination.htm">ILogDestination</a></span>*  GetDefaultDestination() const = 0</p>
<p class="NDLRefMemberDescription">Get the default logger. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>Pointer to the <span class="NDLSystemFont"><a href="efd__ILogDestination.htm">ILogDestination</a></span> for the default logger. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_logger_1a334ad7c475b11a3ea12777b6c702a9c7"></a>
<p class="NDLRefMemberFunction">virtual void  SetDefaultLogLevels(const <span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span>& destName) = 0</p>
<p class="NDLRefMemberDescription">Set the default log levels for the log destination to which to write the statements. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">destName</span></td>
    <td>Name of the log destination. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_logger_1ab55854fe0a6cc7a3c956fdf72a6f16ec"></a>
<p class="NDLRefMemberFunction">virtual void  Flush() = 0</p>
<p class="NDLRefMemberDescription">Force all the registered log destinations to flush their buffers. </p>

<a name="classefd_1_1_i_logger_1afbc4cd47efc39fa2217bb6de47b223ec"></a>
<p class="NDLRefMemberFunction">virtual void  SetModuleEnum(<span class="NDLSystemFont"><a href="efd__DataDrivenEnumBase.htm">efd::DataDrivenEnumBase</a></span>* pEnum) = 0</p>
<p class="NDLRefMemberDescription">Set the enumeration for mapping module names to module ids and vice versa. </p>

<a name="classefd_1_1_i_logger_1a04ec2c146b5f857b5ec441f5a404503f"></a>
<p class="NDLRefMemberFunction">void  NoStackTraceOnAssert()</p>
<p class="NDLRefMemberDescription">Force all the registered log destinations to flush their buffers. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
