<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::Category</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::Category</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="efd__UniversalID.htm">efd::UniversalID</a></span></p>


<p class="NDLRefHeaderFile">&lt;Category.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classefd_1_1_category.gif" alt="Inheritance graph for efd::Category"/>
  <p class="FigureCaption">Inheritance graph for efd::Category</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">A <span class="NDLSystemFont">Category</span> is used to determine the destination of a message. </p>
<p class="NDLNormal">A producer (sender) chooses what <span class="NDLSystemFont">Category</span> to send a message on while consumers (receivers) decide which categories they wish to receive messages from by subscribing. This allows consumers to filter out messages they don't wish to receive and gives producers the ability to direct messages to groups of consumers that are interested. </p>

<a name="public_types"></a>
<p class="NDLRefHead1">Public Types</p>
<a name="classefd_1_1_category_1aee7a8d80b484a2f2f2936bc2c738156a"></a>
<p class=NDLRefHead2>efd::Category::ExpectedChannelUsage</p>


<p class="NDLRefMemberDescription">Publicly expose some of the types from <span class="NDLSystemFont"><a href="efd__UniversalID.htm">UniversalID</a></span>. </p>


<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  

  </tbody>
</table>
</div>


<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classefd_1_1_category_1ab4ead1d40f2d68e2555c1035baec0375"></a>
<p class="NDLRefMemberFunction">Category()</p>
<p class="NDLRefMemberDescription">Default constructor. </p>

<a name="classefd_1_1_category_1a8fe8968c7c73e7665d750723414a9c7c"></a>
<p class="NDLRefMemberFunction">Category(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a845df149ec80fc0bf36f875ece09ef9d">efd::UInt64</a></span> cat)</p>
<p class="NDLRefMemberDescription">Constructor for Net Message category, using 64-bit unsigned int. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">cat</span></td>
    <td>64-bit unsigned int used to initialize category or mask. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_category_1ab478910ed39fea02e5fff394feb10611"></a>
<p class="NDLRefMemberFunction">Category(const <span class="NDLSystemFont">Category</span>& other)</p>
<p class="NDLRefMemberDescription">Constructor for Net Message category (clone operation). </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">other</span></td>
    <td>Reference to existing category instance (clone operation). </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_category_1a603b0e624d878e37b0eafa0518e5b0d3"></a>
<p class="NDLRefMemberFunction">Category(<br/><span class="NDLSystemFont"><a href="efd__UniversalID.htm#classefd_1_1_universal_i_d_1aee7a8d80b484a2f2f2936bc2c738156a">ExpectedChannelUsage</a></span> usage, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> netID, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> baseID)</p>
<p class="NDLRefMemberDescription">Constructor for <span class="NDLSystemFont">Category</span>, using usage, netID, and baseID. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">usage</span></td>
    <td>Expected channel usage. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">netID</span></td>
    <td>32-bit unsigned int for net ID. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">baseID</span></td>
    <td>32-bit unsigned int for base ID. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_category_1af2da0ff009846da3ebf30cfe483bbdc7"></a>
<p class="NDLRefMemberFunction">~Category()</p>
<p class="NDLRefMemberDescription">Empty destructor (avoids unused argument warnings). </p>

<a name="classefd_1_1_category_1a9105f738326b91ecc41a622d34e1d234"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsValid() const</p>
<p class="NDLRefMemberDescription">Determines whether this category represents a valid category. </p>
<p class="NDLRefMemberDetailedDescription">To be valid, it must have the system bit <span class="NDLSystemFont"><a href="efd__set.htm">set</a></span> and be of type Channel or <span class="NDLSystemFont"><a href="EntityID.htm">EntityID</a></span>, and it must have some other bits <span class="NDLSystemFont"><a href="efd__set.htm">set</a></span> to non-zero values.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>True if this category represents a valid category. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_category_1a3d65a987f6afcd4208fad67a8115275c"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsZero() const</p>
<p class="NDLRefMemberDescription">Tests for the specific case of a completely zero value, which is used for the sentinel value kCAT_INVALID. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">This function is not the opposite of <span class="NDLSystemFont"><a href="efd__Category.htm#classefd_1_1_category_1a9105f738326b91ecc41a622d34e1d234">IsValid()</a></span>. A category may be <span class="NDLSystemFont"><a href="efd__set.htm">set</a></span> to all zero without assert, but any other invalid assignment will result in an assert.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>True if this category has a zero value. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_category_1aa1a2a4e5354a252e63aecc414709b27b"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetNetID() const</p>
<p class="NDLRefMemberDescription">Gets the numeric representation of the NetID bits in the ID. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>Value of the Net ID that created this ID. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_category_1ae3d44e06e729d05d9032954a177bf217"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  SetNetID(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> i_netID)</p>
<p class="NDLRefMemberDescription">Sets the numeric representation of the NetID bits in the ID. </p>
<p class="NDLRefMemberDetailedDescription">The value will be ignored if it is outside of the valid range.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_netID</span></td>
    <td>32-bit unsigned int representing the net ID. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the input value is in range; false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_category_1a99ae1f17b233e4cbdfdb3ec308502260"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a845df149ec80fc0bf36f875ece09ef9d">efd::UInt64</a></span>  GetBaseID() const</p>
<p class="NDLRefMemberDescription">Gets the numeric representation of the base bits in the ID. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>Value of the base ID without the extra info baked in. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_category_1ab1674a2926bfdb630e0cb22d4780e1de"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  SetBaseID(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a845df149ec80fc0bf36f875ece09ef9d">efd::UInt64</a></span> i_base)</p>
<p class="NDLRefMemberDescription">Sets the numeric representation of the base bits in the ID. </p>
<p class="NDLRefMemberDetailedDescription">The value will be ignored if it is outside of the valid range.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_base</span></td>
    <td>64-bit unsigned int representing the base ID. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the input value is in range; false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_category_1a26b90dfc5e752d0d813ef1e2dc1fff5f"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span>  ToString() const</p>
<p class="NDLRefMemberDescription">Returns a string of 64-bit category/mask. </p>
<p class="NDLRefMemberDetailedDescription">Used as key for hash maps; also used for pretty print output logs. Use .c_str() to get at the real string (for printf).</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>String representing the 64-bit category/mask. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_category_1aed32b22c623401ce2491657a8239cb7e"></a>
<p class="NDLRefMemberFunction">void  Serialize(<span class="NDLSystemFont"><a href="efd__Archive.htm">efd::Archive</a></span>& io_archive)</p>
<p class="NDLRefMemberDescription">Object serialization for use with <span class="NDLSystemFont"><a href="efd__ParameterList.htm">ParameterList</a></span>. </p>
<a name="assignment_operators."></a>
<p class="NDLRefHead1">Assignment operators.</p>


<a name="classefd_1_1_category_1a25dd04cd446476bc99baa77a8c8bdebd"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">Category</span>  operator=(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a845df149ec80fc0bf36f875ece09ef9d">efd::UInt64</a></span> lhs)</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_category_1a5b8c4be39abda45bff3e2d4ee7e2b861"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">Category</span>  operator=(const <span class="NDLSystemFont">Category</span>& other)</p>
<p class="NDLRefMemberDescription">Assignment operator taking an <span class="NDLSystemFont"><a href="EntityID.htm">EntityID</a></span>. </p>
<a name="comparison_operators."></a>
<p class="NDLRefHead1">Comparison operators.</p>

<p class="NDLRefMemberDescription">We don't want to be able to compare different types of <span class="NDLSystemFont"><a href="efd__IDs.htm">IDs</a></span>; we only share <span class="NDLSystemFont"><a href="efd__UniversalID.htm">UniversalID</a></span> so that we have a single place to put all the bit fields we use; we override other members with Category-specific implementations that still use the bit fields defined in <span class="NDLSystemFont"><a href="efd__UniversalID.htm">UniversalID</a></span>.</p>

<a name="classefd_1_1_category_1afa5c11c639c19f5d013eda79f29d3e45"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  operator==(const <span class="NDLSystemFont">Category</span>& other) const</p>
<p class="NDLRefMemberDescription">Equality operator. </p>

<a name="classefd_1_1_category_1a204521cfe570259173a89adae94d565e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  operator!=(const <span class="NDLSystemFont">Category</span>& other) const</p>
<p class="NDLRefMemberDescription">Inequality operator. </p>

<a name="classefd_1_1_category_1a89ad4f21ab9b23c1668d05ee870671b9"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  operator&gt;(const <span class="NDLSystemFont">Category</span>& lhs) const</p>
<p class="NDLRefMemberDescription">Less Than operator. </p>

<a name="classefd_1_1_category_1a2426b990404be7440d875477d7e4e1b2"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  operator&lt;(const <span class="NDLSystemFont">Category</span>& rhs) const</p>
<p class="NDLRefMemberDescription">Greater Than operator. To support usage as the key in an <span class="NDLSystemFont"><a href="efd__map.htm">efd::map</a></span>. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
