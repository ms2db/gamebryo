<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::MemObject</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::MemObject</p>


<p class="NDLRefHeaderFile">&lt;MemObject.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classefd_1_1_mem_object.gif" alt="Inheritance graph for efd::MemObject"/>
  <p class="FigureCaption">Inheritance graph for efd::MemObject</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal"><span class="NDLSystemFont">MemObject</span> implements interfaces overriding the global "new" and "delete" operators. </p>
<p class="NDLNormal">All derived classes will funnel their allocations/deallocations through the <span class="NDLSystemFont"><a href="efd__MemManager.htm">MemManager</a></span> object.</p>
<p class="NDLNormal">External code should never call "new" or "delete" on MemObjects directly. Rather, they should use "EE_NEW" and "EE_DELETE". This approach enables allocation tracking in builds defining the EE_MEMORY_DEBUGGER symbol. </p>

<a name="overloaded_operator_delete_functions"></a>
<p class="NDLRefHead1">Overloaded Operator Delete Functions</p>

<p class="NDLRefMemberDescription">These delete and delete[] operators must be implemented in EE_MEMORY_DEBUGGER and non-EE_MEMORY_DEBUGGER builds.</p>

<a name="classefd_1_1_mem_object_1a6cbd62021788b3dc0d1812ab083dcf59"></a>
<p class="NDLRefMemberFunction">static void  operator delete(<br/>void* pvMem, <br/>size_t stElementSize)</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_mem_object_1af0a3ec5296bf847ac2cf03f3fa0961a2"></a>
<p class="NDLRefMemberFunction">static void  operator delete[](<br/>void* pvMem, <br/>size_t stElementSize)</p>
<p class="NDLRefMemberFunction"></p>
<a name="overloaded_operator_new_functions_for_in-place_construction."></a>
<p class="NDLRefHead1">Overloaded Operator New Functions for In-Place Construction.</p>

<p class="NDLRefMemberDescription">Placement new and delete operators must be exposed as well to enable in-place construction.</p>

<a name="classefd_1_1_mem_object_1acd2e8ec2223b3fdba6e27fa8a9052f72"></a>
<p class="NDLRefMemberFunction">static void*  operator new(<br/>size_t , <br/>void* p)</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_mem_object_1a26a9a24e0b0bbb1670cb6f263f2c367f"></a>
<p class="NDLRefMemberFunction">static void*  operator new[](<br/>size_t , <br/>void* p)</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_mem_object_1a93ccb421fad7fd0a3fb58c0f39431b7d"></a>
<p class="NDLRefMemberFunction">static void  operator delete(<br/>void* , <br/>void* )</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_mem_object_1a7df6bb95a95ececd467cd272d001c50f"></a>
<p class="NDLRefMemberFunction">static void  operator delete[](<br/>void* , <br/>void* )</p>
<p class="NDLRefMemberFunction"></p>
<a name="overloaded_operator_new_functions_with_memoryhints"></a>
<p class="NDLRefHead1">Overloaded Operator New Functions with MemoryHints</p>


<a name="classefd_1_1_mem_object_1a5fe175ec8cb4a5c394745c72ece0a3c0"></a>
<p class="NDLRefMemberFunction">static void*  operator new(<br/>size_t stSize, <br/><span class="NDLSystemFont"><a href="efd__MemHint.htm">MemHint</a></span> kHint)</p>
<p class="NDLRefMemberDescription">Overloaded operator new functions to handle allocation and construction of new objects using a custom memory manager. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">stSize</span></td>
    <td>Size of the memory being allocated. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kHint</span></td>
    <td>Indicates the intended usage for the memory being allocated, which enables the allocator to optionally pick the most efficient memory type or location, as well as providing additional information to the memory tracker when enabled. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Pointer to void (standard return value for new()). </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_mem_object_1a564808c28594aa89dfa428bbb056bd49"></a>
<p class="NDLRefMemberFunction">static void*  operator new[](<br/>size_t stSize, <br/><span class="NDLSystemFont"><a href="efd__MemHint.htm">MemHint</a></span> kHint)</p>
<p class="NDLRefMemberDescription">Overloaded operator new functions to handle allocation and construction of new objects using a custom memory manager. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">stSize</span></td>
    <td>Size of the memory being allocated. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kHint</span></td>
    <td>Indicates the intended usage for the memory being allocated, which enables the allocator to optionally pick the most efficient memory type or location, as well as providing additional information to the memory tracker when enabled. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Pointer to void (standard return value for new()). </td>
</tr>

        </tbody>
    </table>
</div>


 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
