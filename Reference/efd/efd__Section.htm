<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::Section</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::Section</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="efd__ISection.htm">efd::ISection</a></span></p>


<p class="NDLRefHeaderFile">&lt;ConfigSection.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classefd_1_1_section.gif" alt="Inheritance graph for efd::Section"/>
  <p class="FigureCaption">Inheritance graph for efd::Section</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">Implementation class for the configuration manager section, which contains all the subsections and name/value pairs for this section. </p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classefd_1_1_section_1ad0eeb259ebadf41a1b2e7bf9517fca69"></a>
<p class="NDLRefMemberFunction">Section(<br/>const <span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span>& strName, <br/><span class="NDLSystemFont">Section</span>* pParent, <br/><span class="NDLSystemFont"><a href="efd__IConfigSource.htm">IConfigSource</a></span>* pSource, <br/><span class="NDLSystemFont">Section</span>* pLink = 0)</p>
<p class="NDLRefMemberDescription">Constructor for the section which creates and initializes the section values. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">strName</span></td>
    <td>Name of the section. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pParent</span></td>
    <td>Pointer to the parent section for this section. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pSource</span></td>
    <td>Pointer to the source that created this section. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pLink</span></td>
    <td>Pointer to the linked section if this section is a link. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_section_1af179719017346d3a0705a8cdc3e85518"></a>
<p class="NDLRefMemberFunction">virtual ~Section()</p>
<p class="NDLRefMemberDescription">Destructor clears the <span class="NDLSystemFont"><a href="efd__map.htm">map</a></span> of sections and value entries. </p>

<a name="classefd_1_1_section_1a25c847e60dcfdd0680e03cba8dd4474f"></a>
<p class="NDLRefMemberFunction">virtual const <span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span>&  GetName() const</p>
<p class="NDLRefMemberDescription">Retrieves the name of the section. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>The section name. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_section_1aea03c5665c82560a159e104d0e13984f"></a>
<p class="NDLRefMemberFunction">virtual const <span class="NDLSystemFont"><a href="efd__ISection.htm">ISection</a></span>*  GetParent() const</p>
<p class="NDLRefMemberDescription">Returns a pointer to the parent section of this section. </p>
<p class="NDLRefMemberDetailedDescription">This version returns a const section that cannot be modified.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>A pointer to the section parent. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_section_1a64fd8cb524ff4b5e85b83fa1cc6def0c"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="efd__ISection.htm">ISection</a></span>*  GetParent()</p>
<p class="NDLRefMemberDescription">Returns a pointer to the parent section of this section. </p>
<p class="NDLRefMemberDetailedDescription">This version returns a pointer to the section which can be modified. So, if you are able to modify the current section, then you will be able to modify the parent.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>A pointer to the section parent. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_section_1a4db22ca4c32c2ca275500388d3ac3a66"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a5e55008d602c7c0cb0896425fb483dee">SectionIter</a></span>  GetBeginChildSectionIterator() const</p>
<p class="NDLRefMemberDescription">Retrieves an iterator for cycling through all the sections that are children of this section. </p>
<p class="NDLRefMemberDetailedDescription">The iterator follows STL conventions.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>SectionIter A section iterator. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_section_1af1be422353e724e5473dc0db902b7171"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a5e55008d602c7c0cb0896425fb483dee">SectionIter</a></span>  GetEndChildSectionIterator() const</p>
<p class="NDLRefMemberDescription">Retrieves an end iterator for comparing against the begin iterator. </p>
<p class="NDLRefMemberDetailedDescription">Use as you would an STL end iterator.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>SectionIter An end iterator. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_section_1a513393a3e74fbe1f9909ace721353815"></a>
<p class="NDLRefMemberFunction">virtual const <span class="NDLSystemFont"><a href="efd__ISection.htm">ISection</a></span>*  FindSection(const <span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span>& strName) const</p>
<p class="NDLRefMemberDescription">Searches for a given child section by name. </p>
<p class="NDLRefMemberDetailedDescription">If a dot separated section hierarchy is specified, it will start searching beginning with the current section as the parent. This version returns a const section that cannot be modified.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">strName</span></td>
    <td>Name of the section to retrieve. Dot separated section hierarchy names are accepted. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A pointer to the requested section if found; otherwise NULL. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_section_1a2b3c0eab8b9d32bcbf3c51b873925438"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="efd__ISection.htm">ISection</a></span>*  FindSection(const <span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span>& strName)</p>
<p class="NDLRefMemberDescription">Searches for a given child section by name. </p>
<p class="NDLRefMemberDetailedDescription">If a dot separated section hierarchy is specified, it will start searching beginning with the current section as the parent. This version returns a pointer to the section, which can be modified. So if you are able to modify the current section, you will be able to modify the found section.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">strName</span></td>
    <td>Name of the section to retrieve. Dot separated section hierarchy names are accepted. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A pointer to the requested section if found; otherwise NULL. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_section_1a894d2dfca205d350efd25ce44fd9b296"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a9f533a6ed1fe1b795f939464b9213eab">ValueIter</a></span>  GetBeginValueIterator() const</p>
<p class="NDLRefMemberDescription">Retrieves an iterator for cycling through all the values that are contained in this section. </p>
<p class="NDLRefMemberDetailedDescription">The iterator follows STL conventions.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>A value iterator or type ValueIter. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_section_1ac59324f64199633c22bec44c35dac337"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a9f533a6ed1fe1b795f939464b9213eab">ValueIter</a></span>  GetEndValueIterator() const</p>
<p class="NDLRefMemberDescription">Retrieves an end iterator for comparing against the begin iterator. </p>
<p class="NDLRefMemberDetailedDescription">Use as you would an STL end iterator.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>A value iterator or type ValueIter. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_section_1a9d75eea00448cd5fab698dae13361d7b"></a>
<p class="NDLRefMemberFunction">virtual const <span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span>&  FindValue(const <span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span>& strName) const</p>
<p class="NDLRefMemberDescription">Searches for a given child value by name. </p>
<p class="NDLRefMemberDetailedDescription">If a dot separated section hierarchy is specified, it will start searching beginning with the current section as the parent. It will then traverse the section hierarchy and find the value by name in the section specified. This version returns a const value string that cannot be modified.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">strName</span></td>
    <td>Name of the section to retrieve. Dot separated section hierarchy names are accepted. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The value if found or an empty string if not found. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_section_1a8536fe0b94054206edd80f5d6cb3d130"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  FindValue(<br/>const <span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span>& strName, <br/><span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span>& o_value) const</p>
<p class="NDLRefMemberDescription">Searches for a given child value by name. </p>
<p class="NDLRefMemberDetailedDescription">If a dot separated section hierarchy is specified, it will start searching beginning with the current section as the parent. It will then traverse the section hierarchy and find the value by name in the section specified. This version of <span class="NDLSystemFont"><a href="efd__Section.htm#classefd_1_1_section_1a9d75eea00448cd5fab698dae13361d7b">FindValue()</a></span> supports setting empty strings. This version returns a reference to a value string, which can be modified.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">strName</span></td>
    <td>Name of the value to retrieve. Dot separated section hierarchy names are accepted. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">o_value</span></td>
    <td>Value, or unchanged if not found.</td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>bool True if the value was found. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_section_1ac7000058deeca915744d039379d93cbd"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  IsTrue(<br/>const <span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span>& strName, <br/><span class="NDLSystemFont">bool</span> defaultValue = false) const</p>
<p class="NDLRefMemberDescription">Checks if the specified value represents a true value. </p>
<p class="NDLRefMemberDetailedDescription">If the value is equal to the string "true" (ignoring case) or the integer "1" then the value is considered true. All other values are considered false. If the value is not found at all then the defaultValue is returned.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">strName</span></td>
    <td>Name of the value to retrieve. Dot separated section hierarchy names are accepted. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">defaultValue</span></td>
    <td>The return value if the specified strName is not found. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the value represents a true value, false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_section_1ac25174b76514b64d45728d3da305180f"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  IsFalse(<br/>const <span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span>& strName, <br/><span class="NDLSystemFont">bool</span> defaultValue = true) const</p>
<p class="NDLRefMemberDescription">Checks if the specified value represents a false value. </p>
<p class="NDLRefMemberDetailedDescription">If the value is equal to the string "false" (ignoring case) or the integer "0" then the value is considered false. All other values are considered true. If the value is not found at all then the defaultValue is returned.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">strName</span></td>
    <td>Name of the value to retrieve. Dot separated section hierarchy names are accepted. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">defaultValue</span></td>
    <td>The return value if the specified strName is not found. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>False if the value represents a false value, true otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_section_1a67646845b2d5239380e713a3dd6704f1"></a>
<p class="NDLRefMemberFunction">virtual const <span class="NDLSystemFont"><a href="efd__ISectionEntry.htm">ISectionEntry</a></span>*  FindEntry(const <span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span>& strName) const</p>
<p class="NDLRefMemberDescription">Searches for a given child value by name as does <span class="NDLSystemFont"><a href="efd__Section.htm#classefd_1_1_section_1a9d75eea00448cd5fab698dae13361d7b">FindValue()</a></span>, but it returns the entire entry structure so that the source and priority may be accessed by the application. </p>
<p class="NDLRefMemberDetailedDescription">If a dot separated section hierarchy is specified, it will start searching beginning with the current section as the parent. It will then traverse the section hierarchy and find the entry by name in the section specified. This version returns a const section entry that cannot be modified.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">strName</span></td>
    <td>Name of the section to retrieve. Dot separated section hierarchy names are accepted. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>const <span class="NDLSystemFont"><a href="efd__ISectionEntry.htm">ISectionEntry</a></span>* : Pointer to the entry class, or NULL if not found. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_section_1aca277ab379d85a4893bfa3bfc086faf0"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="efd__ISectionEntry.htm">ISectionEntry</a></span>*  FindEntry(const <span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span>& strName)</p>
<p class="NDLRefMemberDescription">Searches for a given child value by name as does <span class="NDLSystemFont"><a href="efd__Section.htm#classefd_1_1_section_1a9d75eea00448cd5fab698dae13361d7b">FindValue()</a></span>, but it returns the entire entry structure so that the source and priority may be accessed by the application. </p>
<p class="NDLRefMemberDetailedDescription">If a dot separated section hierarchy is specified, it will start searching beginning with the current section as the parent. It will then traverse the section hierarchy and find the entry by name in the section specified. This version returns a non-const pointer if you have a non-const section.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">strName</span></td>
    <td>Name of the section to retrieve. Dot separated section hierarchy names are accepted. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>const <span class="NDLSystemFont"><a href="efd__ISectionEntry.htm">ISectionEntry</a></span>* : Pointer to the entry class, or NULL if not found. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_section_1a003c16c738a923ec23d427ea69f969e9"></a>
<p class="NDLRefMemberFunction">virtual unsigned int  GetSourceType() const</p>
<p class="NDLRefMemberDescription">Get the <span class="NDLSystemFont"><a href="efd__ConfigSource.htm">ConfigSource</a></span> type of this section. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>Type of the <span class="NDLSystemFont"><a href="efd__ConfigSource.htm">ConfigSource</a></span> this section is from. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_section_1a942b6d35ca023469bca9f66f2228b947"></a>
<p class="NDLRefMemberFunction">virtual const <span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span>&  GetSourceName() const</p>
<p class="NDLRefMemberDescription">Get the <span class="NDLSystemFont"><a href="efd__ConfigSource.htm">ConfigSource</a></span> name of this section. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>Name of the <span class="NDLSystemFont"><a href="efd__ConfigSource.htm">ConfigSource</a></span> this section is from. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_section_1afe722982cc7c4001172f08159977b8bb"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span>  GetSourceByString() const</p>
<p class="NDLRefMemberDescription">Get the <span class="NDLSystemFont"><a href="efd__ConfigSource.htm">ConfigSource</a></span> pretty human readable name of this section. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>Pretty human readableName of the <span class="NDLSystemFont"><a href="efd__ConfigSource.htm">ConfigSource</a></span> this section is from. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_section_1af7aa67cb71af698beee4dfc1b4f1a156"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="efd__ISection.htm">ISection</a></span>*  AddSection(<br/>const <span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span>& strName, <br/><span class="NDLSystemFont"><a href="efd__IConfigSource.htm">IConfigSource</a></span>* pSource)</p>
<p class="NDLRefMemberDescription">Adds a new section as a child of the current section. </p>
<p class="NDLRefMemberDetailedDescription">If a dot separated section hierarchy is specified, it will add the section(s) as a child of the current section. If a section exists, it will use that section; otherwise it will add the new section specified.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">A section name may not contain the characters specified by <span class="NDLSystemFont"><a href="efd__IConfigManager.htm#classefd_1_1_i_config_manager_1a3c6ec8e67f2ea75b90bffceb12cd3a77">IConfigManager::kIllegalSectionChars</a></span>.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">strName</span></td>
    <td>Name of the section to retrieve. Dot separated section hierarchy names are accepted. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pSource</span></td>
    <td>Pointer to the source that added the section. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td><span class="NDLSystemFont"><a href="efd__ISection.htm">ISection</a></span>* : Pointer to the section specified(regardless of whether it was added or an existing section was found), or NULL if the section names specified are illegal. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_section_1ac3ef0ae1d4ba77fe5ed847efb9424fa3"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  AddValue(<br/><span class="NDLSystemFont"><a href="efd__ISection.htm">ISection</a></span>* pRoot, <br/>const <span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span>& strName, <br/>const <span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span>& strValue, <br/>int iPriority, <br/><span class="NDLSystemFont"><a href="efd__IConfigSource.htm">IConfigSource</a></span>* pSource)</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_section_1afb358c77dd3a2dae0b82c745f13b642e"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  AddLink(<br/><span class="NDLSystemFont"><a href="efd__ISection.htm">ISection</a></span>* pRoot, <br/>const <span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span>& strName, <br/>const <span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span>& strLink, <br/>const <span class="NDLSystemFont"><a href="efd__ISectionEntry.htm">ISectionEntry</a></span>* pILink, <br/>int iPriority, <br/><span class="NDLSystemFont"><a href="efd__IConfigSource.htm">IConfigSource</a></span>* pSource)</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_section_1ae60b987b1496911c673ea8a47071f0f8"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  AddSectionLink(<br/>const <span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span>& strName, <br/><span class="NDLSystemFont"><a href="efd__ISection.htm">ISection</a></span>* pILink, <br/><span class="NDLSystemFont"><a href="efd__IConfigSource.htm">IConfigSource</a></span>* pSource)</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_section_1a0456ad928c97e9950303d114d5042905"></a>
<p class="NDLRefMemberFunction">virtual void  WriteConfiguration(<br/><span class="NDLSystemFont"><a href="efd__File.htm">File</a></span>* pFile, <br/>const <span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span>& strParents, <br/>const <span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span>& strIndent, <br/><span class="NDLSystemFont">bool</span> bPrintRelative = true)</p>
<p class="NDLRefMemberDescription">Writes out a copy of the current configuration in the INI file style. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">This method is called by the <span class="NDLSystemFont"><a href="efd__IConfigManager.htm#classefd_1_1_i_config_manager_1add652a86c109cb3844ee62f8f4a8b72a">IConfigManager::WriteConfiguration()</a></span> method to write this section. It is not recommended to call this method directly.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pFile</span></td>
    <td>Pointer to an open file into which to write the configuration. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">strParents</span></td>
    <td>Dot separated string of the parents of this section. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">strIndent</span></td>
    <td>String of spaces to use to create the indent level. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">bPrintRelative</span></td>
    <td>True if the output should be formatted using the relative section style; false for absolute section names. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_section_1a4de5810b876d886644097314cef5251f"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span>  GetMetricSectionName(const <span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span>& strPrefix = "") const</p>
<p class="NDLRefMemberDescription">Generates a metric name for a section by adding each section parent name to the prefix string provided with a dot separating each name in all caps. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">strPrefix</span></td>
    <td>Prefix of the metric name.</td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Final metric name containing all the parent section names. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_section_1aae05f053e620d0569522354ef7da46a1"></a>
<p class="NDLRefMemberFunction">void  RemoveConfigSource(<span class="NDLSystemFont"><a href="efd__IConfigSource.htm">IConfigSource</a></span>* pSource)</p>
<p class="NDLRefMemberDescription">A method to remove all sub-sections or values that came from the given source. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
