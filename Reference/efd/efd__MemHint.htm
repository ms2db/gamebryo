<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::MemHint</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::MemHint</p>


<p class="NDLRefHeaderFile">&lt;MemHint.h&gt;</p>


<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">Indicates the intended usage for the memory being allocated which allows the allocator to optionally pick the most efficient memory type or location, as well as providing additional information to the memory tracker when enabled. </p>

<a name="public_types"></a>
<p class="NDLRefHead1">Public Types</p>
<a name="classefd_1_1_mem_hint_1ac621e62eb93ad8e621135388310d21fa"></a>
<p class=NDLRefHead2>efd::MemHint::Bits</p>




<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">PLATFORM_NONE</span></td>
    <td>Bits 7..0 are per-platform memory hints; although 00000000 is reserved to mean no hint was given. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">LIFETIME_APPLICATION</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">LIFETIME_LONG</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">LIFETIME_SHORT</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">LIFETIME_FRAME</span></td>
    <td>Bits 9..8 provide lifetime information. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">COMPILER_PROVIDES_SIZE_ON_DEALLOCATE</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SIZE_PROVIDED_ON_DEALLOCATE</span></td>
    <td>Bit 10 If true, the compiler will pass in the allocation size on deallocation or reallocation calls, or the user will call an explicit known size free, so it does not have to be stored explicitly. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">ACCESS_CPU</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">ACCESS_VOLATILE</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">ACCESS_MUTABLE</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">ACCESS_STATIC</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">ACCESS_GPU</span></td>
    <td>Bit 15..11 - Access types </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">USAGE_UNKNOWN</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">USAGE_POOL</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">USAGE_TEXTURE</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">USAGE_AUDIO</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">USAGE_VIDEO</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">USAGE_INDEX</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">USAGE_VERTEX</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">USAGE_PHYSICS</span></td>
    <td>Bit 21..16 - Usage hints Bits 29..22 - Currently unused </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">IS_BULK</span></td>
    <td>Bit 30 indicates that the allocation is a bulk allocation instead of a 'metadata' allocation (e.g., GPU visible data instead of <span class="NDLSystemFont"><a href="../NiMain/NiTexture.htm">NiTexture</a></span>) </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">TYPE_GB</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">TYPE_CUSTOM</span></td>
    <td>Bit 31 indicates how bits 30..16 behave. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">NONE</span></td>
    <td>Normal memory allocation. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">TEXTURE</span></td>
    <td>GPU texture allocation </td>
</tr>

  </tbody>
</table>
</div>


<a name="construction_and_destruction"></a>
<p class="NDLRefHead1">Construction and Destruction</p>


<a name="classefd_1_1_mem_hint_1ac06873fb8b8c8f406047c3088d22eee6"></a>
<p class="NDLRefMemberFunction">MemHint()</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_mem_hint_1ac021d0eadc9546b3656d720a031e8317"></a>
<p class="NDLRefMemberFunction">MemHint(<span class="NDLSystemFont"><a href="efd__MemHint.htm#classefd_1_1_mem_hint_1ac621e62eb93ad8e621135388310d21fa">Bits</a></span> eValue)</p>
<p class="NDLRefMemberFunction"></p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classefd_1_1_mem_hint_1a2cd786135fe892af35e6997de51fe71f"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="efd__MemHint.htm#classefd_1_1_mem_hint_1ac621e62eb93ad8e621135388310d21fa">Bits</a></span>  GetPlatform() const</p>
<p class="NDLRefMemberDescription">Returns the platform-specific hint (masks all but bits 7..0). </p>

<a name="classefd_1_1_mem_hint_1a33962073b2cfc0934f6d21761ed9184e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="efd__MemHint.htm#classefd_1_1_mem_hint_1ac621e62eb93ad8e621135388310d21fa">Bits</a></span>  GetLifetime() const</p>
<p class="NDLRefMemberDescription">Returns the lifetime hint (masks all but bits 9..8). </p>

<a name="classefd_1_1_mem_hint_1af639cb5f8a33b57ba712f98ab74091c1"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  CompilerProvidesSizeOnDeallocate() const</p>
<p class="NDLRefMemberDescription">Returns true if the hint specifies that the compiler will provide an accurate size on deallocations (bit 10). </p>

<a name="classefd_1_1_mem_hint_1a108bdc665fc4b3a9ff62d96ecb4d73e1"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="efd__MemHint.htm#classefd_1_1_mem_hint_1ac621e62eb93ad8e621135388310d21fa">Bits</a></span>  GetAccess() const</p>
<p class="NDLRefMemberDescription">Returns the access hint (masks all but bits 15..11). </p>

<a name="classefd_1_1_mem_hint_1a33d1cafcbc4ac90319918daac938160a"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="efd__MemHint.htm#classefd_1_1_mem_hint_1ac621e62eb93ad8e621135388310d21fa">Bits</a></span>  GetUsage() const</p>
<p class="NDLRefMemberDescription">Returns the usage hint (masks all but bits 21..16). </p>

<a name="classefd_1_1_mem_hint_1a40d1cf9f76810f9385a9229d869e17be"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsBulk() const</p>
<p class="NDLRefMemberDescription">Returns true if the hint indicated that it is a bulk allocation (bit 30). </p>

<a name="classefd_1_1_mem_hint_1a45d7dbefd4d047da791b32b86a82e442"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsCustomHint() const</p>
<p class="NDLRefMemberDescription">Returns true if the hint is a custom hint (if so, bits 30..16 are not defined and not used by the standard allocators). </p>

<a name="classefd_1_1_mem_hint_1a327ca8afb50266846e151ea92138bc7b"></a>
<p class="NDLRefMemberFunction">unsigned int  GetRaw() const</p>
<p class="NDLRefMemberDescription">Returns the internal representation of the hint. </p>
<a name="standard_operators"></a>
<p class="NDLRefHead1">Standard Operators</p>


<a name="classefd_1_1_mem_hint_1ae208840943bdb679a0f14efdb226d3ad"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">MemHint</span>&  operator|=(const <span class="NDLSystemFont">MemHint</span> kRhs)</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_mem_hint_1a25b6acb4c211ef58ea32e80c153d8b5f"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">MemHint</span>&  operator|=(const <span class="NDLSystemFont"><a href="efd__MemHint.htm#classefd_1_1_mem_hint_1ac621e62eb93ad8e621135388310d21fa">MemHint::Bits</a></span> eRhs)</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_mem_hint_1a25c52a2827b56ee0133dc85100ca7421"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">MemHint</span>  operator|(const <span class="NDLSystemFont">MemHint</span> kRhs) const</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_mem_hint_1acfa935ca57520df90f5f9371a53a09d8"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">MemHint</span>  operator|(const <span class="NDLSystemFont"><a href="efd__MemHint.htm#classefd_1_1_mem_hint_1ac621e62eb93ad8e621135388310d21fa">MemHint::Bits</a></span> eRhs) const</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_mem_hint_1a27df5fd9e377a85a2c27ea83d935c90b"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  operator==(const <span class="NDLSystemFont">MemHint</span> kRhs) const</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_mem_hint_1ae7304e53336f6450f264d2a288e3a62f"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  operator!=(const <span class="NDLSystemFont">MemHint</span> kRhs) const</p>
<p class="NDLRefMemberFunction"></p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
