<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::MemManager</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::MemManager</p>


<p class="NDLRefHeaderFile">&lt;MemManager.h&gt;</p>


<p class="NDLRefHead1">Description</p>
<p class="NDLNormal"><span class="NDLSystemFont">MemManager</span> is a platform-independent wrapper that is designed to provide an entry point for user-defined memory management. </p>
<p class="NDLNormal">The <span class="NDLSystemFont">MemManager</span> contains an <span class="NDLSystemFont"><a href="efd__IAllocator.htm">IAllocator</a></span> instance and forwards all alloc/dealloc/realloc requests through that instance. The <span class="NDLSystemFont"><a href="efd__IAllocator.htm">IAllocator</a></span> is specified through the InitializeMemoryManager function. In static libs, this function can be declared by the application code. "DefaultInitializeMemoryManager.h" contains the default implementation of this function and should only be included if default behavior is desired. Dynamic libraries must use the default implementation. The Get method will create the singleton, allowing for static/pre-main allocations to occur. </p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classefd_1_1_mem_manager_1a5963a4267351ca31cc5457151f88716d"></a>
<p class="NDLRefMemberFunction">void*  Allocate(<br/>size_t stSize, <br/>size_t stAlignment, <br/><span class="NDLSystemFont"><a href="efd__MemHint.htm">MemHint</a></span> kHint, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ad9c81f78b405eb346c527c73002e5382">MemEventType</a></span> eEventType, <br/>const char* pcSourceFile = EE_MEM_FILE_DEFAULT, <br/>int iSourceLine = EE_MEM_LINE_DEFAULT, <br/>const char* pcFunction = EE_MEM_FUNCTION_DEFAULT)</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription"><span class="NDLSystemFont"><a href="efd__IAllocator.htm#classefd_1_1_i_allocator_1ad99959bb52a7932ab12a3a8c4b6b7a41">IAllocator::Allocate</a></span></p></p>

<a name="classefd_1_1_mem_manager_1ae03cab6d346c8ef5dac21190975587d7"></a>
<p class="NDLRefMemberFunction">void*  Reallocate(<br/>void* pvMem, <br/>size_t stSize, <br/>size_t stAlignment, <br/><span class="NDLSystemFont"><a href="efd__MemHint.htm">MemHint</a></span> kHint, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ad9c81f78b405eb346c527c73002e5382">MemEventType</a></span> eEventType, <br/>size_t stSizeCurrent = EE_MEM_DEALLOC_SIZE_DEFAULT, <br/>const char* pcSourceFile = EE_MEM_FILE_DEFAULT, <br/>int iSourceLine = EE_MEM_LINE_DEFAULT, <br/>const char* pcFunction = EE_MEM_FUNCTION_DEFAULT)</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription"><span class="NDLSystemFont"><a href="efd__IAllocator.htm#classefd_1_1_i_allocator_1a465bfb8bbb27162d97258acfe1c4c719">IAllocator::Reallocate</a></span></p></p>

<a name="classefd_1_1_mem_manager_1a4266a8d376843cb250547d6e23f91f6b"></a>
<p class="NDLRefMemberFunction">void  Deallocate(<br/>void* pvMem, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ad9c81f78b405eb346c527c73002e5382">MemEventType</a></span> eEventType, <br/>size_t stSizeinBytes = EE_MEM_DEALLOC_SIZE_DEFAULT)</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription"><span class="NDLSystemFont"><a href="efd__IAllocator.htm#classefd_1_1_i_allocator_1aec04fa68cab7f0be99bb154dce7dbfff">IAllocator::Deallocate</a></span></p></p>

<a name="classefd_1_1_mem_manager_1ae6f1ab0bf39b531e122ba1e0bef5de47"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  TrackAllocate(<br/>const void *const  pvMemory, <br/>size_t stSizeInBytes, <br/><span class="NDLSystemFont"><a href="efd__MemHint.htm">MemHint</a></span> kHint, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ad9c81f78b405eb346c527c73002e5382">MemEventType</a></span> eEventType, <br/>const char* pcSourceFile = EE_MEM_FILE_DEFAULT, <br/>int iSourceLine = EE_MEM_LINE_DEFAULT, <br/>const char* pcFunction = EE_MEM_FUNCTION_DEFAULT)</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription"><span class="NDLSystemFont"><a href="efd__IAllocator.htm#classefd_1_1_i_allocator_1afefae4b9f7318f4efb1fa269389e00a3">IAllocator::TrackAllocate</a></span></p></p>

<a name="classefd_1_1_mem_manager_1adace89ac9b52e47109e278d749f5b41e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  TrackDeallocate(<br/>const void *const  pvMemory, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ad9c81f78b405eb346c527c73002e5382">MemEventType</a></span> eEventType)</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription"><span class="NDLSystemFont"><a href="efd__IAllocator.htm#classefd_1_1_i_allocator_1ae9866bef43bb0b7205f7c2e91eebb830">IAllocator::TrackDeallocate</a></span></p></p>

<a name="classefd_1_1_mem_manager_1a3c2f7e3ca710f22044bcd00789f58399"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  SetMarker(<br/>const char* pcMarkerType, <br/>const char* pcClassifier, <br/>const char* pcString)</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription"><span class="NDLSystemFont"><a href="efd__IAllocator.htm#classefd_1_1_i_allocator_1ac3ce0200db2ed92f64b083cf423ecc48">IAllocator::SetMarker</a></span></p></p>
<a name="public_static_methods"></a>
<p class="NDLRefHead1">Public Static Methods</p>


<a name="classefd_1_1_mem_manager_1a92be1eb7df13cf39088e93c8941a8615"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">MemManager</span>&  Get()</p>
<p class="NDLRefMemberDescription">Singleton access. The first call will create the manager. </p>

<a name="classefd_1_1_mem_manager_1a2bc12dff772faef68ca300283d4e32e8"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  IsInitialized()</p>
<p class="NDLRefMemberDescription">Return true if the <span class="NDLSystemFont">MemManager</span> is initialized. </p>

<a name="classefd_1_1_mem_manager_1ae80ba124940a47b899460c41a9bf5870"></a>
<p class="NDLRefMemberFunction">static void  _SDMInit()</p>
<p class="NDLRefMemberDescription">Static init. </p>

<a name="classefd_1_1_mem_manager_1ab41efe4f826942d17ba5d76f36d9e07a"></a>
<p class="NDLRefMemberFunction">static void  _SDMShutdown()</p>
<p class="NDLRefMemberDescription">Static shutdown. </p>

<a name="classefd_1_1_mem_manager_1a26603caf17682a37116389c641a741d1"></a>
<p class="NDLRefMemberFunction">static void  _SDMPerThreadInit()</p>
<p class="NDLRefMemberDescription">Per-thread static init. </p>

<a name="classefd_1_1_mem_manager_1a631725d5fa7a15b287d26538a98fd998"></a>
<p class="NDLRefMemberFunction">static void  _SDMPerThreadShutdown()</p>
<p class="NDLRefMemberDescription">Per-thread static shutdown. </p>

<a name="classefd_1_1_mem_manager_1af94426d5e3acf3aa7fa4c75d61873e56"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  VerifyAddress(const void* pvMemory)</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription"><span class="NDLSystemFont"><a href="efd__IAllocator.htm#classefd_1_1_i_allocator_1a8312b165f299e55cbcb132d3ad9a0375">IAllocator::VerifyAddress</a></span></p></p>

<a name="classefd_1_1_mem_manager_1a3f1a84d33d282a9f8fc4a39a7c6c8b19"></a>
<p class="NDLRefMemberFunction">static const char*  MemEventTypeToString(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ad9c81f78b405eb346c527c73002e5382">MemEventType</a></span> eEventType)</p>
<p class="NDLRefMemberDescription">Utility functions to "toString" an event type enumeration. </p>

<a name="classefd_1_1_mem_manager_1a32611730677a0aa781c11f918477aa62"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont"><a href="efd__IAllocator.htm">IAllocator</a></span>*  GetAllocator()</p>
<p class="NDLRefMemberDescription">Returns the allocator in use. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
