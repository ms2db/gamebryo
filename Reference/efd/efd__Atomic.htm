<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::Atomic</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::Atomic</p>


<p class="NDLRefHeaderFile">&lt;AtomicOperations.h&gt;</p>


<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">This class contains various atomic helper template methods that ease the use of the atomic operations. </p>

<a name="public_static_methods"></a>
<p class="NDLRefHead1">Public Static Methods</p>


<a name="classefd_1_1_atomic_1a10581316f0f7fcba6ef38bb1c4ba7cf6"></a>
<p class="NDLRefMemberFunction">template &lt;typename T  &gt; static T  CompareAndSwapReturnInit(<br/>volatile T* pDestination, <br/>T comparand, <br/>T exchange)</p>
<p class="NDLRefMemberDescription">Performs an atomic compare-and-swap (CAS) operation on the specified values. </p>
<p class="NDLRefMemberDetailedDescription">In pseudocode, this function performs the following operation: 
<pre>           atomic
           {
               UInt32 oldValue = *pDestination;
               if (oldValue == comparand)
                   *pDestination = exchange;
               return oldValue;
           }
</pre>
</p>
<p class="NDLRefMemberDetailedDescription">This operation includes a memory barrier.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pDestination</span></td>
    <td>The memory location tested and potentially modified </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">comparand</span></td>
    <td>The value to test against *pDestination </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">exchange</span></td>
    <td>The new value written to *pDestination if the comparison passed </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>T The initial value of *pDestination </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_atomic_1a356ad91a5c9636e5b22b9692231aba5c"></a>
<p class="NDLRefMemberFunction">template &lt;typename T  &gt; static <span class="NDLSystemFont">bool</span>  CompareAndSwap(<br/>volatile T* pDestination, <br/>T comparand, <br/>T exchange)</p>
<p class="NDLRefMemberDescription">Performs an atomic compare-and-swap (CAS) operation on the specified values. </p>
<p class="NDLRefMemberDetailedDescription">In pseudocode, this function performs the following operation: 
<pre>           atomic
           {
               UInt32 oldValue = *pDestination;
               if (oldValue == comparand)
               {
                   *pDestination = exchange;
                   return true;
               }
               else
               {
                   return false;
               }
           }
</pre>
</p>
<p class="NDLRefMemberDetailedDescription">This operation includes a memory barrier.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pDestination</span></td>
    <td>The memory location tested and potentially modified </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">comparand</span></td>
    <td>The value to test against *pDestination </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">exchange</span></td>
    <td>The new value written to *pDestination if the comparison passed </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>bool True if the exchange took place </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_atomic_1a0c23cff55454e5d2b3daf3d96b0603ac"></a>
<p class="NDLRefMemberFunction">template &lt;typename T  &gt; static void  SetValue(<br/>volatile T* pLocation, <br/>T newValue)</p>
<p class="NDLRefMemberDescription">Sets a memory location to a value atomically (with a memory barrier). </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
