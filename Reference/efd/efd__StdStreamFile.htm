<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::StdStreamFile</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::StdStreamFile</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="efd__FileCommon.htm">efd::FileCommon</a></span></p>


<p class="NDLRefHeaderFile">&lt;StdStreamFile.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classefd_1_1_std_stream_file.gif" alt="Inheritance graph for efd::StdStreamFile"/>
  <p class="FigureCaption">Inheritance graph for efd::StdStreamFile</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal"><span class="NDLSystemFont"><a href="efd__File.htm">File</a></span> implementation to write to STDOUT/STDERR and read from STDIN. </p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classefd_1_1_std_stream_file_1adaeef9a3f9488edec078b21a2e51f3e2"></a>
<p class="NDLRefMemberFunction">virtual ~StdStreamFile()</p>
<p class="NDLRefMemberDescription">Virtual destructor. </p>
<p class="NDLRefMemberDetailedDescription">As noted in the comment for the <span class="NDLSystemFont"><a href="efd__StdStreamFile.htm#classefd_1_1_std_stream_file_1ade5b4382d7c6ad5caa4f9a45a42dd501">GetFile()</a></span> method, the FILE object passed in at the construction will NOT be freed. The user must manage the FILE object. </p>

<a name="classefd_1_1_std_stream_file_1ad887284acd09b4a2f3ea34d529a61105"></a>
<p class="NDLRefMemberFunction">virtual unsigned int  Read(<br/>void* pvBuffer, <br/>unsigned int uiBytes)</p>
<p class="NDLRefMemberDescription">Read uiBytes of raw bytes from the stream and put them into pvBuffer, without considering endianness. </p>
<p class="NDLRefMemberDetailedDescription">If there are fewer than uiBytes available in the stream to be read, this function will only read as many bytes as are available.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">Memory for pvBuffer must have been allocated before this call.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pvBuffer</span></td>
    <td>Data read from the stream is stored into this buffer. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiBytes</span></td>
    <td>Number of bytes of data to be read from the stream. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Number of bytes successfully read into pvBuffer. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_std_stream_file_1a197cbcdfdbb4621570cf10450c3c79de"></a>
<p class="NDLRefMemberFunction">virtual unsigned int  Write(<br/>const void* pvBuffer, <br/>unsigned int uiBytes)</p>
<p class="NDLRefMemberDescription">Write uiBytes raw bytes to the stream from pvBuffer. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pvBuffer</span></td>
    <td>Data written to the stream originates from this buffer. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiBytes</span></td>
    <td>Number of bytes of data to be written to the stream. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Number of bytes successfully written to the stream. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_std_stream_file_1ae7a1bc336d2114e99e5b2ef0a8f90bf8"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  Flush()</p>
<p class="NDLRefMemberDescription">Flush all buffered data to the file. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>: True if flush of all buffered data to file succeeded; false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_std_stream_file_1a829145f5e9ce01a2bd93c2a5e3f6c956"></a>
<p class="NDLRefMemberFunction">virtual operator bool() const</p>
<p class="NDLRefMemberDescription">Operator to report on current success state of the <span class="NDLSystemFont"><a href="efd__File.htm">File</a></span> instance. </p>

<a name="classefd_1_1_std_stream_file_1ad820d823e1fe3941b775c3dc4de72da2"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  Seek(int iNumBytes)</p>
<p class="NDLRefMemberDescription">Advances the current read/write position of the stream by the number of bytes given by iNumBytes. </p>
<p class="NDLRefMemberDetailedDescription">Passing a negative value into iNumBytes will move the current position back towards the beginning of the file, while a positive value will advance the position towards the end of the file.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">iNumBytes</span></td>
    <td>Number of bytes to move (forward or backward) the current read/write position of the stream. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>true if successful, false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_std_stream_file_1a710513b80d19c29b6fc2612f9c4c7fda"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  Seek(<br/>int offset, <br/><span class="NDLSystemFont"><a href="efd__File.htm#classefd_1_1_file_1a8f5eb7d45e5cf11a53aaa2961158cf2d">SeekOrigin</a></span> seekFrom)</p>
<p class="NDLRefMemberDescription">Reset the current read/write position of the file. </p>
<p class="NDLRefMemberDetailedDescription">The new position is determined by an offset and a starting location. The starting location for the seek operation can be one of the following:</p>
<p class="NDLRefMemberDetailedDescription">
<ul>
<li>Beginning of the file</li>
<li>End of the file</li>
<li>Current location in the file.</li></ul></p>
<p class="NDLRefMemberDetailedDescription">Passing a negative value into iOffset will move the current position back towards the beginning of the file, while a positive value will advance the position towards the end of the file.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">offset</span></td>
    <td>Number of bytes to move (forward or backward) from the starting location of the seek operation. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">seekFrom</span></td>
    <td>Starting location of the seek operation. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>true if successful, false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_std_stream_file_1afa5aab8370cd16c528626a745c9beb4a"></a>
<p class="NDLRefMemberFunction">virtual unsigned int  GetFileSize() const</p>
<p class="NDLRefMemberDescription">Return the size of the file in bytes. </p>

<a name="classefd_1_1_std_stream_file_1a98626936273c41fb72b145c924b10b45"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  eof()</p>
<p class="NDLRefMemberDescription">Return true if we've reached the end of file. </p>

<a name="classefd_1_1_std_stream_file_1a165703592524a7e8e1a2dfc91c8bc02e"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  IsGood()</p>
<p class="NDLRefMemberDescription">Return true if the file is in a known-good state ready for read and/or write. </p>

<a name="classefd_1_1_std_stream_file_1aeb7d60c3ca1c9db1648551dba6ffe6be"></a>
<p class="NDLRefMemberFunction">virtual void  SetEndianSwap(<span class="NDLSystemFont">bool</span> bDoSwap)</p>
<p class="NDLRefMemberDescription">Set whether endian swapping is needed. </p>
<p class="NDLRefMemberDetailedDescription">The base class has two function pointers that point to the current read and write functions for a given binary stream. Derived functions should <span class="NDLSystemFont"><a href="efd__set.htm">set</a></span> those function pointers to either raw I/O functions or to functions that endian swap, based on the value bDoSwap.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">bDoSwap</span></td>
    <td>Whether endian swapping is needed. </td>
</tr>

        </tbody>
    </table>
</div>


<a name="public_static_methods"></a>
<p class="NDLRefHead1">Public Static Methods</p>


<a name="classefd_1_1_std_stream_file_1ade5b4382d7c6ad5caa4f9a45a42dd501"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">StdStreamFile</span>*  GetFile(FILE* stream)</p>
<p class="NDLRefMemberDescription">Create an instance of a <span class="NDLSystemFont">StdStreamFile</span> object. </p>
<p class="NDLRefMemberDetailedDescription">It creates an instance with the FILE object passed in as the argument. This FILE object will not be freed when the <span class="NDLSystemFont">StdStreamFile</span> object is destroyed. It's the responsibility of the user to manage the FILE object.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">stream</span></td>
    <td>Pointer to the FILE object to be used for this <span class="NDLSystemFont">StdStreamFile</span> instance. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Pointer to an instance of a <span class="NDLSystemFont">StdStreamFile</span> object. </td>
</tr>

        </tbody>
    </table>
</div>


 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
