<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::AssetMonitorService</title>

<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">efd::AssetMonitorService</p>

<p class="NDLRefParentage">: public <a href="efd__ISystemService.htm">efd::ISystemService</a></p>

<p class="NDLRefHeaderFile">&lt;AssetMonitorService.h&gt;</p>

<div class="FigureContainer">
    <img src="./images/classefd_1_1_asset_monitor_service.png"
    alt="Inheritance graph for efd::AssetMonitorService">

    <p class="FigureCaption">Inheritance graph for
    efd::AssetMonitorService</p>
</div>

<p class="NDLRefHead1">Description</p>

<p>The AssetMonitorService manages one or more
IAssetMonitor instances. These instances are responsible for
monitoring the status of Assets stored in an asset web. The
monitors generate lists of the relative paths for all assets that
have changed since the last tick. The AssetMonitorService
collects these events during its OnTick event and invokes the
AssetServer's ChangeNotify method. Eventually, the AssetServer
generates AssetChangeNotify messages for these assets and sends
these off to interested Asset Locator Services.</p>

<p>One or more IAssetMonitors track changes to
the content store. The AssetMonitorService owns all instances of
IAssetMonitor and is responsible for the lifetime of each
monitor. Individual monitors do not send ChangeNotify messages
directly. Instead, they cache the relative path to each asset
that changed. It is the AssetMonitorService's responsibly to
collect each monitor's cached messages during the
AssetMonitorService's OnTick event.</p>

<p>This service is internal to the
AssetController and not a general use system service. It is
included here simply for informational purposes and is not
intended for use outside the AssetController.</p>

<p> </p><a name="construction_and_destruction"
id="construction_and_destruction"></a>

<p class="NDLRefHead1">Construction and Destruction</p><a name=
"classefd_1_1_asset_monitor_service_" id=
"classefd_1_1_asset_monitor_service_"></a>

<p class="NDLRefMemberFunction">
efd::AssetMonitorService::AssetMonitorService (  ) </p>

<p class="NDLRefMemberDescription">Constructor.</p>

<p class="NDLRefMemberDetailedDescription"> </p><a name=
"classefd_1_1_asset_monitor_service_" id=
"classefd_1_1_asset_monitor_service_"></a>

<p class="NDLRefMemberFunction">virtual
efd::AssetMonitorService::~AssetMonitorService (  ) </p>

<p class="NDLRefMemberDescription">Destructor.</p>

<p class="NDLRefMemberDetailedDescription"> </p><a name=
"member_function_documentation" id=
"member_function_documentation"></a>

<p class="NDLRefHead1">Member Function Documentation</p><a name=
"classefd_1_1_asset_monitor_service_" id=
"classefd_1_1_asset_monitor_service_"></a>

<p class="NDLRefMemberFunction">void
efd::AssetMonitorService::AddAssetMonitor ( IAssetMonitor * 
monitor  ) </p>

<p class="NDLRefMemberDescription">Adds an asset monitor to the
list of monitors.</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">monitor</span></td>

                <td>Pointer to the monitor to add to the
                list.</td>
            </tr>
        </tbody>
    </table>
</div>

<p class="NDLRefMemberDetailedDescription"> </p><a name=
"classefd_1_1_asset_monitor_service_" id=
"classefd_1_1_asset_monitor_service_"></a>

<p class="NDLRefMemberFunction">void
efd::AssetMonitorService::CrawlAssets ( const efd::utf8string
&amp;  from_dir, efd::Bool  use_timestamps  )</p>

<p class="NDLRefMemberDescription">Crawls the assets in the
specified directory.</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">from_dir</span></td>

                <td>Directory to start crawl in.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">use_timestamps</span></td>

                <td>True to exclude files that are older than the
                meta-data.</td>
            </tr>

            <tr>
                <td><em>Return Value</em></td>

                <td></td>
            </tr>
        </tbody>
    </table>
</div>

<p class="NDLRefMemberDetailedDescription"> </p><a name=
"classefd_1_1_asset_monitor_service_" id=
"classefd_1_1_asset_monitor_service_"></a>

<p class="NDLRefMemberFunction">virtual const char*
efd::AssetMonitorService::GetDisplayName (  )  const</p>

<p class="NDLRefMemberDescription">Returns the name of this
service.</p>

<p class="NDLRefMemberDetailedDescription">This name is used only
for improving the readability of various log statements and has
no impact on functionality. Overriding this method in derived
services is completely optional but highly recommended.
Returns:const char* Display name for the current service.</p>

<p class="NDLRefMemberDetailedDescription">Reimplemented from
efd::ISystemService.</p>

<p class="NDLRefMemberDetailedDescription"> </p><a name=
"classefd_1_1_asset_monitor_service_" id=
"classefd_1_1_asset_monitor_service_"></a>

<p class="NDLRefMemberFunction">void
efd::AssetMonitorService::HandleAssetConfigNotify ( const
efd::AssetConfigurationMessage *  pMessage, efd::Category 
targetChannel  )</p>

<p class="NDLRefMemberDescription">Handles messages about
configuration changes and updates the asset web as necessary.</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">pMessage</span></td>

                <td>Pointer to the configuration message.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">targetChannel</span></td>

                <td>The channel the message was received on.</td>
            </tr>
        </tbody>
    </table>
</div>

<p class="NDLRefMemberDetailedDescription"> </p><a name=
"classefd_1_1_asset_monitor_service_" id=
"classefd_1_1_asset_monitor_service_"></a>

<p class="NDLRefMemberFunction">virtual efd::AsyncResult
efd::AssetMonitorService::OnInit (  )</p>

<p class="NDLRefMemberDescription">Called by the framework after
the service has had OnPreInit called and before the service
receives its first OnTick.</p>

<p class="NDLRefMemberDetailedDescription">This allows the
service to perform any initialization that it requires. During
the OnInit phase it should be safe or call methods on other
services since all services will have had a chance to be
pre-initialized already. This phase is primarily intended for
establishing cross-service relationships such as the registering
of message handlers. The OnInit phase is asynchronous meaning
that you can stay in this phase for multiple ticks. Once a
service returns AsyncResult_Complete from OnInit on the next tick
OnTick will be called even if not all of the other services have
completed their OnInit. Returns:AsyncResult the service's
progress through the initialization state, one of:
AsyncResult_Pending : More initialization work is required.
OnInit will be called again until it completes or
fails. AsyncResult_Failure : Initialization has critically failed.
The entire framework will be shut down and the process will
exit. AsyncResult_Complete : Initialization has completed for this
service. It will receive no more OnInit calls.</p>

<p class="NDLRefMemberDetailedDescription">Reimplemented from
efd::ISystemService.</p>

<p class="NDLRefMemberDetailedDescription"> </p><a name=
"classefd_1_1_asset_monitor_service_" id=
"classefd_1_1_asset_monitor_service_"></a>

<p class="NDLRefMemberFunction">virtual efd::SyncResult
efd::AssetMonitorService::OnPreInit (  )</p>

<p class="NDLRefMemberDescription">Called by the framework after
the service has been registered and before the service receives
the call to OnInit.</p>

<p class="NDLRefMemberDetailedDescription">This allows the
service to perform any synchronous setup. Although you may query
for the existence of other services, for example in order to
cache a smart pointer to a tightly coupled service, at this point
you should not call any methods on other services unless the
method explicitly states it is safe to call during OnPreInit. If
the method does not indicate it is safe to call from OnPreInit,
you should not call it because they may not have had a change to
setup yet. Wait until OnInit before you rely on cross-service
interaction. Returns:SyncResult the service's progress through
the initialization state, one of: SyncResult_Success : The
PreInit phase succeeded and this service is ready to be moved to
the OnInit queue.SyncResult_Failure : The PreInit phase failed,
this will cause framework to begin shutdown and unloading of all
services.</p>

<p class="NDLRefMemberDetailedDescription">Reimplemented from
efd::ISystemService.</p>

<p class="NDLRefMemberDetailedDescription"> </p><a name=
"classefd_1_1_asset_monitor_service_" id=
"classefd_1_1_asset_monitor_service_"></a>

<p class="NDLRefMemberFunction">virtual efd::AsyncResult
efd::AssetMonitorService::OnShutdown (  )</p>

<p class="NDLRefMemberDescription">Called by the framework after
the framework shutdown has been requested.</p>

<p class="NDLRefMemberDetailedDescription">This allows the
service to perform any clean up that it requires. The service
should cleanly shutdown. This might involve persisting various
states. If the service is unregistered while the framework is
running, it should be careful not to spend too much time in a
single block and should instead do a small amount of work on each
call while returning "pending" to request additional calls.
Returns:AsyncResult the service's progress through the
initialization state, one of: AsyncResult_Pending : More shutdown
work is required. OnShutdown will be called again until it
completes or fails.AsyncResult_Failure : Shutdown has critically
failed. The framework shutdown state will be aborted and the
process will exit immediately.AsyncResult_Complete : Shutdown has
completed for this service. It will receive no more OnShutdown
calls.</p>

<p class="NDLRefMemberDetailedDescription">Reimplemented from
efd::ISystemService.</p>

<p class="NDLRefMemberDetailedDescription"> </p><a name=
"classefd_1_1_asset_monitor_service_" id=
"classefd_1_1_asset_monitor_service_"></a>

<p class="NDLRefMemberFunction">virtual efd::AsyncResult
efd::AssetMonitorService::OnTick (  )</p>

<p class="NDLRefMemberDescription">Called by the framework every
cycle to allow the service to do its work.</p>

<p class="NDLRefMemberDetailedDescription">The service should
perform a small slice of work and return as quickly as possible.
This is where your application will spend the vast majority of
its lifetime. Returns:AsyncResult the service's progress through
the running state, one of: AsyncResult_Pending : This is the
normal result, your service is still running and will continue to
receive future OnTick calls.AsyncResult_Failure : The service has
critically failed. The entire framework will be shut down and the
process will exit.AsyncResult_Complete : The service no longer
requires OnTick calls. It will remain registered and might still
have things like message handlers that are active but it will not
receive future OnTick calls.</p>

<p class="NDLRefMemberDetailedDescription">Reimplemented from
efd::ISystemService.</p>

<p class="NDLRefMemberDetailedDescription"> </p><a name=
"classefd_1_1_asset_monitor_service_" id=
"classefd_1_1_asset_monitor_service_"></a>

<p class="NDLRefMemberFunction">void
efd::AssetMonitorService::RemoveAssetMonitors (  )</p>

<p class="NDLRefMemberDescription">Removes all the asset monitors
from the service.</p>

<p class="NDLRefMemberDetailedDescription"> </p><a name=
"classefd_1_1_asset_monitor_service_" id=
"classefd_1_1_asset_monitor_service_"></a>

<p class="NDLRefMemberFunction">void
efd::AssetMonitorService::SetMonitorPath ( const efd::utf8string
&amp;  assetWebRoot  )</p>

<p class="NDLRefMemberDescription">Enable an asset monitor for
the specified path.</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">assetWebRoot</span></td>

                <td>The path to monitor.</td>
            </tr>
        </tbody>
    </table>
</div>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
