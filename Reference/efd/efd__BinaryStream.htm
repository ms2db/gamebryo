<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::BinaryStream</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::BinaryStream</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="efd__MemObject.htm">efd::MemObject</a></span></p>


<p class="NDLRefHeaderFile">&lt;BinaryStream.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classefd_1_1_binary_stream.gif" alt="Inheritance graph for efd::BinaryStream"/>
  <p class="FigureCaption">Inheritance graph for efd::BinaryStream</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">This abstract base class for all binary streams, such as memory streams or files, is designed to wrap platform-dependent implementations of streaming systems. </p>
<p class="NDLNormal">Derived classes need to implement some particular behavior to support endian swapping. Such details are described in the documentation about how to derive from <span class="NDLSystemFont">BinaryStream</span>. By default, all files will be written in the endianness of the current platform. </p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classefd_1_1_binary_stream_1a316b324ff3845342a18c61fe775ebec4"></a>
<p class="NDLRefMemberFunction">BinaryStream()</p>
<p class="NDLRefMemberDescription">This abstract base class has no useful constructors. </p>

<a name="classefd_1_1_binary_stream_1a22a395fbd9a4aef18f388a2b3997be8f"></a>
<p class="NDLRefMemberFunction">virtual ~BinaryStream()</p>
<p class="NDLRefMemberDescription">Virtual destructor. </p>

<a name="classefd_1_1_binary_stream_1a1cd450582563518a6eccae03bd57ad29"></a>
<p class="NDLRefMemberFunction">virtual operator bool() const = 0</p>
<p class="NDLRefMemberDescription">For streams that may or may not always be ready to use, such as files, this operator returns true if the stream is ready to be written to or read from, or false if the stream is not ready to use. </p>
<p class="NDLRefMemberDetailedDescription">Streams that have no such limitations always return true. </p>

<a name="classefd_1_1_binary_stream_1a04cb3975a9659f7348210a06f5a25af8"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  Seek(int iNumBytes) = 0</p>
<p class="NDLRefMemberDescription">Advances the current read/write position of the stream by the number of bytes given by iNumBytes. </p>
<p class="NDLRefMemberDetailedDescription">Passing a negative value into iNumBytes will move the current position back towards the beginning of the file, while a positive value will advance the position towards the end of the file.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">iNumBytes</span></td>
    <td>Number of bytes to move (forward or backward) the current read/write position of the stream. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>true if successful, false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_binary_stream_1a238b3c5db454c27b04283d75a9c83895"></a>
<p class="NDLRefMemberFunction">virtual unsigned int  GetPosition() const</p>
<p class="NDLRefMemberDescription">Returns the current read or write position in the stream. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>Current read/write position in the stream. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_binary_stream_1aa08be157ac763f70b5738e12338fe73c"></a>
<p class="NDLRefMemberFunction">unsigned int  BinaryRead(<br/>void* pvBuffer, <br/>unsigned int uiTotalBytes, <br/>unsigned int* puiComponentSizes, <br/>unsigned int uiNumComponents = 1)</p>
<p class="NDLRefMemberDescription">Endian-aware struct reading. </p>
<p class="NDLRefMemberDetailedDescription">This method reads uiTotalBytes from the stream and stores them into pvBuffer, which must be allocated before this call. If endian-swapping needs to occur, then it will use the array puiComponentSizes of size uiNumComponents for information about how the data is structured. It will then do the endian-swapping based on those component sizes. If there are fewer than uiTotalBytes available in the stream to be read, this function will only read as many bytes as are available.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pvBuffer</span></td>
    <td>Data read from the stream is stored into this buffer. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiTotalBytes</span></td>
    <td>Number of bytes of data to be read from the stream. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">puiComponentSizes</span></td>
    <td>Array of component size information of size uiNumComponents. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiNumComponents</span></td>
    <td>Number of components in the puiComponentSizes array. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Number of bytes successfully read into pvBuffer. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_binary_stream_1a6181577a58b412e5ada772565d7dd3c6"></a>
<p class="NDLRefMemberFunction">unsigned int  BinaryWrite(<br/>const void* pvBuffer, <br/>unsigned int uiTotalBytes, <br/>unsigned int* puiComponentSizes, <br/>unsigned int uiNumComponents = 1)</p>
<p class="NDLRefMemberDescription">Endian-aware struct writing. </p>
<p class="NDLRefMemberDetailedDescription">This method writes uiTotalBytes from pvBuffer. If endian-swapping needs to occur, then it will use the array puiComponentSizes of size uiNumComponents for information about how pvBuffer is structured. It will do the endian-swapping based on those component sizes. Because endian-swapping will occur and pvBuffer will be modified, pvBuffer should not point to the original data.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pvBuffer</span></td>
    <td>Data written to the stream originates from this buffer. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiTotalBytes</span></td>
    <td>Number of bytes of data to be written to the stream. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">puiComponentSizes</span></td>
    <td>Array of component size information of size uiNumComponents. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiNumComponents</span></td>
    <td>Number of components in the puiComponentSizes array. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Number of bytes that were successfully written to the stream. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_binary_stream_1a58442dfac3f53c7fd81c24384e201971"></a>
<p class="NDLRefMemberFunction">virtual unsigned int  Read(<br/>void* pvBuffer, <br/>unsigned int uiBytes)</p>
<p class="NDLRefMemberDescription">Read uiBytes of raw bytes from the stream and put them into pvBuffer, without considering endianness. </p>
<p class="NDLRefMemberDetailedDescription">If there are fewer than uiBytes available in the stream to be read, this function will only read as many bytes as are available.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">Memory for pvBuffer must have been allocated before this call.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pvBuffer</span></td>
    <td>Data read from the stream is stored into this buffer. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiBytes</span></td>
    <td>Number of bytes of data to be read from the stream. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Number of bytes successfully read into pvBuffer. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_binary_stream_1adb6e0687921e2bb38085635289e2ad29"></a>
<p class="NDLRefMemberFunction">virtual unsigned int  Write(<br/>const void* pvBuffer, <br/>unsigned int uiBytes)</p>
<p class="NDLRefMemberDescription">Write uiBytes raw bytes to the stream from pvBuffer. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pvBuffer</span></td>
    <td>Data written to the stream originates from this buffer. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiBytes</span></td>
    <td>Number of bytes of data to be written to the stream. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Number of bytes successfully written to the stream. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_binary_stream_1a2fb65fc613b4a76068adbeb50b7adaa8"></a>
<p class="NDLRefMemberFunction">unsigned int  GetLine(<br/>char* pvBuffer, <br/>unsigned int uiMaxBytes)</p>
<p class="NDLRefMemberDescription">Read bytes from the stream into pcBuffer until a newline character is reached, the end of the stream is reached, or (uiMaxBytes - 1) bytes have been read. </p>
<p class="NDLRefMemberDetailedDescription">The final newline character, if it exists, is not copied into pcBuffer, but pcBuffer is terminated with a "\0".</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">Memory for pcBuffer must have been allocated before this call.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pvBuffer</span></td>
    <td>Data read from the stream is stored into this buffer. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiMaxBytes</span></td>
    <td>Maximum number of bytes of data to be read from the stream. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Number of bytes successfully read from the file (including any newline or return characters, even though they are not placed in pcBuffer). If the return value is 0, then the end of the file was reached. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_binary_stream_1a6999c000557ffedc0fe543484760a672"></a>
<p class="NDLRefMemberFunction">unsigned int  PutS(const char* pvBuffer)</p>
<p class="NDLRefMemberDescription">Writes pcBuffer, a NULL-terminated string, to the stream. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">The final "\0" is not written to the stream.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pvBuffer</span></td>
    <td>Data written to the stream originates from this buffer. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Number of bytes successfully written. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_binary_stream_1a68c4758f91d61b5138eb5f99a77fbe2e"></a>
<p class="NDLRefMemberFunction">virtual void  SetEndianSwap(<span class="NDLSystemFont">bool</span> bDoSwap) = 0</p>
<p class="NDLRefMemberDescription">Set whether endian swapping is needed. </p>
<p class="NDLRefMemberDetailedDescription">The base class has two function pointers that point to the current read and write functions for a given binary stream. Derived functions should <span class="NDLSystemFont"><a href="efd__set.htm">set</a></span> those function pointers to either raw I/O functions or to functions that endian swap, based on the value bDoSwap.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">bDoSwap</span></td>
    <td>Whether endian swapping is needed. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_binary_stream_1ab730aba5ee6a2c00a349740ec5100976"></a>
<p class="NDLRefMemberFunction">void  WriteCString(const char* pcString)</p>
<p class="NDLRefMemberDescription">Writes a null-terminated (C-style) string to the stream. </p>
<p class="NDLRefMemberDetailedDescription">A C-style string consists of a 4-byte length, followed by length characters from the stream. No null-terminator is written to the stream.</p>
<p class="NDLRefMemberDetailedDescription">If the input string is NULL or the empty string "\0", then no characters are written (only a 4-byte zero). When such as string is read with ReadCString, it will return NULL.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pcString</span></td>
    <td>Null-terminated (C-style) string. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_binary_stream_1a88ba29d1643e7d40e1763b8337a3ddf3"></a>
<p class="NDLRefMemberFunction">char*  ReadCString()</p>
<p class="NDLRefMemberDescription">Reads a 4-byte length from the stream, allocates a string of (length + 1) bytes, reads length bytes from the stream, and then null-terminates the string. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>The allocated string. The caller is responsible for ultimately freeing the memory. If the string read in was of length zero, the function will return NULL. </td>
</tr>

        </tbody>
    </table>
</div>


<a name="public_static_methods"></a>
<p class="NDLRefHead1">Public Static Methods</p>


<a name="classefd_1_1_binary_stream_1a369ed5b6d69a17c53e219f38a80eb750"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  GetEndianMatchHint()</p>
<p class="NDLRefMemberDescription">Access the endian match hint, a static setting. </p>
<p class="NDLRefMemberDetailedDescription">The endian match hint gives a hint to derived classes whether or not they should load files that do not match the current platform's endianness. By default, it is false. If <span class="NDLSystemFont"><a href="efd__set.htm">set</a></span> to true, then streaming systems which respect this hint (such as Gamebryo's <span class="NDLSystemFont"><a href="../NiAnimation/NiActorManager.htm">NiActorManager</a></span> and <span class="NDLSystemFont"><a href="../NiMain/NiStream.htm">NiStream</a></span>) will fail to load files that are not in the native endian format. </p>

<a name="classefd_1_1_binary_stream_1ade0af214626509a1124e6f2e5f15b030"></a>
<p class="NDLRefMemberFunction">static void  SetEndianMatchHint(<span class="NDLSystemFont">bool</span> bForceMatch)</p>
<p class="NDLRefMemberDescription">Access the endian match hint, a static setting. </p>
<p class="NDLRefMemberDetailedDescription">The endian match hint gives a hint to derived classes whether or not they should load files that do not match the current platform's endianness. By default, it is false. If <span class="NDLSystemFont"><a href="efd__set.htm">set</a></span> to true, then streaming systems which respect this hint (such as Gamebryo's <span class="NDLSystemFont"><a href="../NiAnimation/NiActorManager.htm">NiActorManager</a></span> and <span class="NDLSystemFont"><a href="../NiMain/NiStream.htm">NiStream</a></span>) will fail to load files that are not in the native endian format. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
