<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::SR_FactoryAlloc</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::SR_FactoryAlloc</p>


<p class="NDLRefHeaderFile">&lt;SerializeRoutines.h&gt;</p>


<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">The FactoryAlloc takes a factory class and allocates based on a TypeID. </p>
<p class="NDLNormal">You need to implement the factory yourself, it needs three things: 1.) a typedef for the TypeID, 2.) a static function to fetch the ID from an existing object, and 3.) a static function to allocate the correct object given the objects type ID. For example, a Factory for registered COM objects might look like (theoretical sample code follows):</p>
<p class="NDLNormal">
<pre>     struct ComFactory
     {
       typedef GUID TypeID;
       static bool GetType(IMyInterface** ppUnk, const GUID& guid)
       {
         guid = (*ppUnk)-&gt;GetIID();
         return true;
       }
       static bool Allocate(const GUID& guid, IMyInterface** ppUnk)
       {
         return SUCCEEDED(CoCreateInstance(guid, NULL, 0, IID_IMyInterface, ppUnk));
       }
     }
</pre>
</p>

<a name="public_static_methods"></a>
<p class="NDLRefHead1">Public Static Methods</p>


<a name="structefd_1_1_s_r___factory_alloc_1acb3a9eafd5b13f6007a98429b1f9100f"></a>
<p class="NDLRefMemberFunction">template &lt;typename DATATYPE  &gt; static void  Serialize(<br/>DATATYPE& io_object, <br/><span class="NDLSystemFont"><a href="efd__Archive.htm">efd::Archive</a></span>& io_archive)</p>
<p class="NDLRefMemberFunction"></p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
