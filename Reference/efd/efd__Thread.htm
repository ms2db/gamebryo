<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::Thread</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::Thread</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="efd__MemObject.htm">efd::MemObject</a></span></p>


<p class="NDLRefHeaderFile">&lt;Thread.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classefd_1_1_thread.gif" alt="Inheritance graph for efd::Thread"/>
  <p class="FigureCaption">Inheritance graph for efd::Thread</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">A platform-independent wrapper class to handle thread manipulation. </p>

<a name="enums"></a>
<p class="NDLRefHead1">Enums</p>
<a name="classefd_1_1_thread_1a419961b84a1acc7ca5385f8476491bba"></a>
<p class=NDLRefHead2>anonymous enum</p>




<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">USEDEF_STACK_SIZE</span></td>
    <td>&nbsp;</td>
</tr>

  </tbody>
</table>
</div>

<a name="classefd_1_1_thread_1a44db06bd9bf5477854bbee550b9c96dd"></a>
<p class=NDLRefHead2>efd::Thread::Priority</p>




<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">IDLE</span></td>
    <td>The thread is scheduled with the lowest priority so that it only runs when no other thread needs processor time. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">LOWEST</span></td>
    <td>The lowest, non-idle priority available. This thread will only preempt idle threads. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">BELOW_NORMAL</span></td>
    <td>The thread is scheduled at below normal priority to avoid interrupting regular tasks. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">NORMAL</span></td>
    <td>The thread is scheduled at normal priority and shares time with other common task threads. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">ABOVE_NORMAL</span></td>
    <td>The thread is scheduled above normal priority and will preempt normal priority threads to complete its task. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">HIGHEST</span></td>
    <td>The highest regular priority available. This thread will run with priority execution over any thread not marked as TIME_CRITICAL </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">TIME_CRITICAL</span></td>
    <td>This maps to the absolute highest system priority meaning that this thread will never be preempted unless there are other TIME_CRITICAL threads. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">NUM_PRIORITIES</span></td>
    <td>&nbsp;</td>
</tr>

  </tbody>
</table>
</div>

<a name="classefd_1_1_thread_1a697fdb8e7b8bedab9861dc23b6d48cf8"></a>
<p class=NDLRefHead2>efd::Thread::Status</p>




<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">RUNNING</span></td>
    <td>The thread is currently active although not necessarily scheduled and executing. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SUSPENDED</span></td>
    <td>The thread is suspended and not eligible for scheduling. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">COMPLETE</span></td>
    <td>The thread has completed and exited with a return value. </td>
</tr>

  </tbody>
</table>
</div>


<a name="constructor_and_virtual_destructor"></a>
<p class="NDLRefHead1">Constructor and Virtual Destructor</p>


<a name="classefd_1_1_thread_1a987c862667f325ac63d97efb4e687580"></a>
<p class="NDLRefMemberFunction">virtual ~Thread()</p>
<p class="NDLRefMemberDescription">There are no publicly defined constructors forThread. </p>
<p class="NDLRefMemberDetailedDescription">Applications should create all threads through the static Create method to make sure the thread is properly initialized and managed. Virtual Destructor </p>
<a name="static_member_functions"></a>
<p class="NDLRefHead1">Static Member Functions</p>


<a name="classefd_1_1_thread_1a3f953eca61593c17d1336a9013e00ef3"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">Thread</span>*  Create(<br/><span class="NDLSystemFont"><a href="efd__ThreadFunctor.htm">ThreadFunctor</a></span>* pProcedure, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> stackSize = USEDEF_STACK_SIZE, <br/>const char* pcThreadName = 0)</p>
<p class="NDLRefMemberDescription">Create a thread using a specified ThreadProcedure and <span class="NDLSystemFont"><a href="efd__stack.htm">stack</a></span> size. </p>
<p class="NDLRefMemberDetailedDescription">The thread does not take ownership of the ThreadProcedure object so that a procedure can be shared across multiple worker threads. All threads are created in the SUSPENDED state. </p>

<a name="classefd_1_1_thread_1a113cf09565c6e70ff10c006269c35d77"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">Thread</span>*  GetThread()</p>
<p class="NDLRefMemberDescription">Get the <span class="NDLSystemFont">Thread</span> pointer for the current thread context. </p>
<p class="NDLRefMemberDetailedDescription">If the current thread context was not created using the <span class="NDLSystemFont">Thread</span> API, this value will be NULL. </p>
<a name="supported_member_functions"></a>
<p class="NDLRefHead1">Supported Member Functions</p>


<a name="classefd_1_1_thread_1ab5821886bfe60afc91c4c9a02b45a288"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="efd__ThreadFunctor.htm">ThreadFunctor</a></span>*  GetProcedure() const</p>
<p class="NDLRefMemberDescription">Get a pointer to the thread procedure used by an <span class="NDLSystemFont">Thread</span> object. </p>

<a name="classefd_1_1_thread_1a785f141063b4a0e073339d7a48320f72"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  SetPriority(<span class="NDLSystemFont"><a href="efd__Thread.htm#classefd_1_1_thread_1a44db06bd9bf5477854bbee550b9c96dd">Priority</a></span> newPriority)</p>
<p class="NDLRefMemberDescription">Set the priority of the thread. </p>
<p class="NDLRefMemberDetailedDescription">The priority enumeration is listed below. It is possible for this value to be stale since the class member's priority will only be <span class="NDLSystemFont"><a href="efd__set.htm">set</a></span> after the system level priority is <span class="NDLSystemFont"><a href="efd__set.htm">set</a></span>. </p>

<a name="classefd_1_1_thread_1ace6300f0b651d5ae89fc69042c959b0f"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="efd__Thread.htm#classefd_1_1_thread_1a44db06bd9bf5477854bbee550b9c96dd">Priority</a></span>  GetPriority() const</p>
<p class="NDLRefMemberDescription">Get the priority of the thread. </p>
<p class="NDLRefMemberDetailedDescription">The priority enumeration is listed below. It is possible for this value to be stale since the class member's priority will only be <span class="NDLSystemFont"><a href="efd__set.htm">set</a></span> after the system level priority is <span class="NDLSystemFont"><a href="efd__set.htm">set</a></span>. </p>

<a name="classefd_1_1_thread_1ad2070680f78da16089242196b7468e18"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  SetThreadAffinity(const <span class="NDLSystemFont"><a href="efd__ProcessorAffinity.htm">ProcessorAffinity</a></span>& affinity)</p>
<p class="NDLRefMemberDescription">Set the processor affinity for the thread using the <span class="NDLSystemFont"><a href="efd__ProcessorAffinity.htm">ProcessorAffinity</a></span> class. </p>
<p class="NDLRefMemberDetailedDescription">This setting will take place the next time the OS schedules the thread. </p>

<a name="classefd_1_1_thread_1a96bf6aea26e1161f640d66fd99e568f8"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="efd__ProcessorAffinity.htm">ProcessorAffinity</a></span>  GetThreadAffinity()</p>
<p class="NDLRefMemberDescription">Get the processor affinity for the thread using the <span class="NDLSystemFont"><a href="efd__ProcessorAffinity.htm">ProcessorAffinity</a></span> class. </p>
<p class="NDLRefMemberDetailedDescription">This setting will take place the next time the OS schedules the thread. </p>

<a name="classefd_1_1_thread_1adb6d96291e100f06c5f86a3c3b95eeea"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="efd__Thread.htm#classefd_1_1_thread_1a697fdb8e7b8bedab9861dc23b6d48cf8">Status</a></span>  GetStatus() const</p>
<p class="NDLRefMemberDescription">Get the current status of a thread. </p>
<p class="NDLRefMemberDetailedDescription">It is possible for this member to be stale since the class member's status will only be <span class="NDLSystemFont"><a href="efd__set.htm">set</a></span> after the system level routines return. </p>

<a name="classefd_1_1_thread_1abdc369d5b89aabb40cd756db5e7b932a"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetReturnValue() const</p>
<p class="NDLRefMemberDescription">Get the return value of a completed thread. </p>

<a name="classefd_1_1_thread_1ab677ff2fd4ad94a946a6b82dedea403c"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>*  GetName() const</p>
<p class="NDLRefMemberDescription">Get and <span class="NDLSystemFont"><a href="efd__set.htm">set</a></span> the name of the thread for debugging purposes. </p>

<a name="classefd_1_1_thread_1a1730a0dec25b27fcbba18ac17c4bb4e7"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>  Suspend()</p>
<p class="NDLRefMemberDescription">Suspend or resume a thread. </p>
<p class="NDLRefMemberDetailedDescription">The system will return -1 if these calls fail. Successful completion will return an integer that depends on the operating system. Usually, this value is the thread's suspend count prior to the call. Thus, a return of 0 indicates that a thread was running at the time of the call. Any positive, non-zero value indicates a suspended thread. </p>

<a name="classefd_1_1_thread_1acda6efff86adae94e54d0386af3021d9"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>  Resume()</p>
<p class="NDLRefMemberDescription">Suspend or resume a thread. </p>
<p class="NDLRefMemberDetailedDescription">The system will return -1 if these calls fail. Successful completion will return an integer that depends on the operating system. Usually, this value is the thread's suspend count prior to the call. Thus, a return of 0 indicates that a thread was running at the time of the call. Any positive, non-zero value indicates a suspended thread. </p>

<a name="classefd_1_1_thread_1a3508138c700aa0cd144a9b1a0ec14340"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  WaitForCompletion()</p>
<p class="NDLRefMemberDescription">Returns true if the thread was running and the system waited for termination. </p>
<p class="NDLRefMemberDetailedDescription">If the thread was not running, the function will return false. This may be because the thread has already completed execution. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
