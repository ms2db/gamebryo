<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::FileDestination</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::FileDestination</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="efd__ILogDestination.htm">efd::ILogDestination</a></span></p>


<p class="NDLRefHeaderFile">&lt;FileDestination.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classefd_1_1_file_destination.gif" alt="Inheritance graph for efd::FileDestination"/>
  <p class="FigureCaption">Inheritance graph for efd::FileDestination</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal"><span class="NDLSystemFont"><a href="efd__File.htm">File</a></span> destination class receives messages from the logger and writes them to a file. </p>

<a name="public_types"></a>
<p class="NDLRefHead1">Public Types</p>
<a name="classefd_1_1_file_destination_1a5979239f6e5eaa6cc6f7a36ebb7ec167"></a>
<p class=NDLRefHead2>efd::FileDestination::FileOption</p>



<p class="NDLRefMemberDetailedDescription">Enumerates options for opening the file. </p>

<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">kFileAppend</span></td>
    <td>Option to append to the existing file. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kFileOverwrite</span></td>
    <td>Option to overwrite the contents of the existing file. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kUniqueFileName</span></td>
    <td>Option to create a unique filename, if a file exists with the provided filename. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kIndexedFileName</span></td>
    <td>Option to create a unique filename by incrementing an index. This doesn't protect from stomping a log file between sessions (for that, use kUniqueFileName), but it will allow debugging multiple instances of the application simultaneously (with separate log files). </td>
</tr>

  </tbody>
</table>
</div>


<a name="public_static_methods"></a>
<p class="NDLRefHead1">Public Static Methods</p>


<a name="classefd_1_1_file_destination_1ad7b1b187fef65c5bf4037409b7ce1340"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont"><a href="efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont">FileDestination</span>&gt;  CreateAndOpen(<br/><span class="NDLSystemFont"><a href="efd__ILogger.htm">ILogger</a></span>* pLogger, <br/>const <span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span>& name, <br/><span class="NDLSystemFont"><a href="efd__FileDestination.htm#classefd_1_1_file_destination_1a5979239f6e5eaa6cc6f7a36ebb7ec167">FileOption</a></span> option = kFileOverwrite, <br/><span class="NDLSystemFont">efd::Bool</span> fileInfoWithMsg = false, <br/><span class="NDLSystemFont">efd::Bool</span> fileInfoWithAssert = true, <br/><span class="NDLSystemFont">efd::Bool</span> flushOnWrite = false)</p>
<p class="NDLRefMemberDescription">Static factory that creates a <span class="NDLSystemFont">FileDestination</span> and registers it with the <span class="NDLSystemFont"><a href="efd__ILogger.htm">ILogger</a></span> that is passed in. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pLogger</span></td>
    <td>Pointer to logger. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">name</span></td>
    <td>Name for this destination; ".log" is appended for the log file name. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">option</span></td>
    <td>Option specifying how to open the file. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fileInfoWithMsg</span></td>
    <td>True if the file and line number should be included when a log message is written; false otherwise (default is false). </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fileInfoWithAssert</span></td>
    <td>True if the file and line number should be included when an assert message is written; false otherwise (default is true). </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">flushOnWrite</span></td>
    <td>Every write will flush the buffer to disk. (default is false). </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Smart pointer to <span class="NDLSystemFont">FileDestination</span>. </td>
</tr>

        </tbody>
    </table>
</div>


<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classefd_1_1_file_destination_1a33c7f187373899c013937e1a8d0d218e"></a>
<p class="NDLRefMemberFunction">FileDestination(<br/>const <span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span>& name, <br/>const <span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span>& fileName, <br/><span class="NDLSystemFont"><a href="efd__FileDestination.htm#classefd_1_1_file_destination_1a5979239f6e5eaa6cc6f7a36ebb7ec167">FileOption</a></span> option = kFileOverwrite, <br/><span class="NDLSystemFont">efd::Bool</span> fileInfoWithMsg = false, <br/><span class="NDLSystemFont">efd::Bool</span> fileInfoWithAssert = true, <br/><span class="NDLSystemFont">efd::Bool</span> flushOnWrite = false)</p>
<p class="NDLRefMemberDescription">Constructor simply receives the filename and file option for later use. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">name</span></td>
    <td>Name for this destination. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fileName</span></td>
    <td>Name, and optional path, for the file. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">option</span></td>
    <td>Option specifying how to open the file. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fileInfoWithMsg</span></td>
    <td>True if the file and line number should be included when a log message is written; false otherwise (default is false). </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fileInfoWithAssert</span></td>
    <td>True if the file and line number should be included when an assert message is written; false otherwise (default is true). </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">flushOnWrite</span></td>
    <td>Immediately flush to disk on every write (default is false). </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_file_destination_1a9af25b35227cf9fc9c5f8ee7eb38cabb"></a>
<p class="NDLRefMemberFunction">virtual ~FileDestination()</p>
<p class="NDLRefMemberDescription">Destructor closes the file. </p>

<a name="classefd_1_1_file_destination_1ac30b4651df5eb1f5d836adbb900a03f1"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">efd::Bool</span>  OnInit()</p>
<p class="NDLRefMemberDescription">Initializes the destination and prepares it for use. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>True if the destination initialized properly </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_file_destination_1aa8bff1ec4d92a0115363b765c71171fb"></a>
<p class="NDLRefMemberFunction">virtual void  BeginLog(<br/><span class="NDLSystemFont">efd::Bool</span> assert, <br/>const char* timeStampMachine, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a37c593debc73d82d7ddc571c725f0e2d">efd::TimeType</a></span> timeStampGame, <br/>const char* pModule, <br/>const char* pLevel, <br/>const char* pFile, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span> line)</p>
<p class="NDLRefMemberDescription">Begin receiving a multi-part log message from the logger to be written to the destination. </p>
<p class="NDLRefMemberDetailedDescription">This call must be followed by zero or more calls to ContinueLog and then exactly one call to EndLog.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">assert</span></td>
    <td>True if the message is from an assert of verify </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">timeStampMachine</span></td>
    <td>The time stamp that the log message occurred as a date time string based on the local machines clock. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">timeStampGame</span></td>
    <td>The time stamp that the log message occurred as a float in game time. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pModule</span></td>
    <td>The name of the module that generated the log message. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pLevel</span></td>
    <td>The level the log message is. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pFile</span></td>
    <td>The source file where the log message was generated. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">line</span></td>
    <td>The source line where the log message was generated. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_file_destination_1ae27974cccc562e1cc2b2a3c4e7246ac9"></a>
<p class="NDLRefMemberFunction">virtual void  ContinueLog(const char* pMsg)</p>
<p class="NDLRefMemberDescription">Add output to the current log following a BeginLog call. </p>

<a name="classefd_1_1_file_destination_1a93adbba9f4d3c924795d07fc15d7c332"></a>
<p class="NDLRefMemberFunction">virtual void  EndLog()</p>
<p class="NDLRefMemberDescription">Used to complete a multi-part log statement. </p>

<a name="classefd_1_1_file_destination_1a5f709eaa2bcb25382840b29f09b3a4bd"></a>
<p class="NDLRefMemberFunction">virtual void  Flush()</p>
<p class="NDLRefMemberDescription">Flush all data buffered for write. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
