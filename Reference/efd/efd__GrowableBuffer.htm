<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::GrowableBuffer</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::GrowableBuffer</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="efd__MemObject.htm">efd::MemObject</a></span></p>


<p class="NDLRefHeaderFile">&lt;GrowableBuffer.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classefd_1_1_growable_buffer.gif" alt="Inheritance graph for efd::GrowableBuffer"/>
  <p class="FigureCaption">Inheritance graph for efd::GrowableBuffer</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal"><span class="NDLSystemFont">GrowableBuffer</span> is simply a reference counted chunk of memory. </p>
<p class="NDLNormal">The memory can either be owned by the buffer or borrowed from an external source. </p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classefd_1_1_growable_buffer_1ae9e5029dd24947b67446e6bbb5507af6"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a59a3838ab5cdfe87f98f5b8371e4e91d">efd::UInt8</a></span>*  GetBuffer()</p>
<p class="NDLRefMemberDescription">Access the memory buffer. </p>

<a name="classefd_1_1_growable_buffer_1a416f8a70f30006e5b4a7165601c2a9a5"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a59a3838ab5cdfe87f98f5b8371e4e91d">efd::UInt8</a></span>*  GetBuffer() const</p>
<p class="NDLRefMemberDescription">Access the memory buffer. </p>

<a name="classefd_1_1_growable_buffer_1af2aa115374fabc74ea5b062988afc3b9"></a>
<p class="NDLRefMemberFunction">GrowableBuffer()</p>
<p class="NDLRefMemberDetailedDescription">Default Constructor. Creates a growable, owned, initially NULL buffer. </p>

<a name="classefd_1_1_growable_buffer_1acb5b981aa6017b5eb1d219ff19b257c5"></a>
<p class="NDLRefMemberFunction">GrowableBuffer(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> i_cbInitialSize)</p>
<p class="NDLRefMemberDescription">Constructor. Creates a growable, owned buffer of the given initial size. </p>

<a name="classefd_1_1_growable_buffer_1a096245653769102d40cee98e93112cd1"></a>
<p class="NDLRefMemberFunction">GrowableBuffer(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1abd1722e6416223f55fb106ab3c6cf2fa">_Borrow</a></span> , <br/>void* i_pData, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> i_cbData)</p>
<p class="NDLRefMemberDescription">Borrow Constructor. </p>
<p class="NDLRefMemberDetailedDescription">Borrows a reference to the provided memory. The caller must maintain the lifetime of the memory used and must ensure the memory remains available for the life of the <span class="NDLSystemFont">GrowableBuffer</span>. Borrowed buffers cannot be grown, only the borrowed memory will be used. </p>

<a name="classefd_1_1_growable_buffer_1ae2627deaf7c9cdbd3254dcb93e5bcbe8"></a>
<p class="NDLRefMemberFunction">GrowableBuffer(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a805d2ba8fe04738f2b7417afc3da9513">_Adopt</a></span> , <br/>void* i_pData, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> i_cbData)</p>
<p class="NDLRefMemberDescription">Adopt Constructor. </p>
<p class="NDLRefMemberDetailedDescription">The provided memory is adopted by the <span class="NDLSystemFont">GrowableBuffer</span> and will be freed using EE_EXTERNAL_DELETE when the <span class="NDLSystemFont">GrowableBuffer</span> is destroyed. </p>

<a name="classefd_1_1_growable_buffer_1afb1ceaa1f960b04ca24c5222233d07d1"></a>
<p class="NDLRefMemberFunction">virtual ~GrowableBuffer()</p>
<p class="NDLRefMemberDescription">Destructor. </p>

<a name="classefd_1_1_growable_buffer_1a56491b5d97725927c6dd39631f9d0e3d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  Grow(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> i_cbSize)</p>
<p class="NDLRefMemberDescription">Grow to at least the given size. </p>
<p class="NDLRefMemberDetailedDescription">Data from the previous buffer is copied into the new buffer. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>The actual size when done. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_growable_buffer_1aa82fbf81b86bc60c9881dd5053e190e0"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GrowExact(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> i_cbSize)</p>
<p class="NDLRefMemberDescription">Grow to exactly the given size. </p>
<p class="NDLRefMemberDetailedDescription">Data from the previous buffer is copied into the new buffer. This will not shrink the buffer if the used space already exceeds the requested size. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>The actual size when done. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_growable_buffer_1a12fbbf54cf19ce16deb4eb55c9b8013d"></a>
<p class="NDLRefMemberFunction">void  Adopt(<br/>void* i_pData, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> i_cbData)</p>
<p class="NDLRefMemberDescription">Any previously owned buffer is freed and the provided memory is adopted by the <span class="NDLSystemFont">GrowableBuffer</span>. </p>
<p class="NDLRefMemberDetailedDescription">The memory will be freed using EE_EXTERNAL_DELETE when the <span class="NDLSystemFont">GrowableBuffer</span> is destroyed. </p>

<a name="classefd_1_1_growable_buffer_1ab30d3576e4b5359476eb1038dbcf31a0"></a>
<p class="NDLRefMemberFunction">void  Borrow(<br/>void* i_pData, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> i_cbData)</p>
<p class="NDLRefMemberDescription">Any previously owned buffer is freed and the provided memory is borrowed by the <span class="NDLSystemFont">GrowableBuffer</span>. </p>
<p class="NDLRefMemberDetailedDescription">The caller must maintain the lifetime of the memory used and must ensure the memory remains available for the life of the <span class="NDLSystemFont">GrowableBuffer</span>. Borrowed buffers cannot be grown, only the borrowed memory will be used. </p>

<a name="classefd_1_1_growable_buffer_1abdc339d51857f0bedcfc92706c58ba3b"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a59a3838ab5cdfe87f98f5b8371e4e91d">efd::UInt8</a></span>*  Orphan()</p>
<p class="NDLRefMemberDescription">Relinquishes ownership of the memory buffer to the caller. </p>
<p class="NDLRefMemberDetailedDescription">The <span class="NDLSystemFont">GrowableBuffer</span> will continue to reference the memory buffer but will not free the memory upon destruction. The caller must eventually free the returned memory using EE_EXTERNAL_DELETE. If the memory buffer is not owned this will return NULL. </p>

<a name="classefd_1_1_growable_buffer_1af84541d05caeba59ff78cb2bc9993c41"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetSize() const</p>
<p class="NDLRefMemberDescription">Get the size of the memory buffer. </p>

<a name="classefd_1_1_growable_buffer_1a0cf65b9ceae4b3e83a1ae17e6680c02a"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  CanGrow() const</p>
<p class="NDLRefMemberDescription">Determine if the buffer can be grown. </p>

<a name="classefd_1_1_growable_buffer_1a4b45e6ca1d0e639c9fca79ae2f736aaa"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  OwnsBuffer() const</p>
<p class="NDLRefMemberDescription">Determine if the buffer is owned. </p>

<a name="classefd_1_1_growable_buffer_1a8999a4e3522a5ba723bfefadb8ed3bd7"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsExclusive() const</p>
<p class="NDLRefMemberDescription">Returns true if only one reference exists to this buffer implying that it is exclusively owned and not currently being shared. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
