<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::DirectedGraph</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::DirectedGraph</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="efd__MemObject.htm">efd::MemObject</a></span></p>


<p class="NDLRefHeaderFile">&lt;DependencyGraph.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classefd_1_1_directed_graph.gif" alt="Inheritance graph for efd::DirectedGraph"/>
  <p class="FigureCaption">Inheritance graph for efd::DirectedGraph</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">Storage for a directed graph. </p>
<p class="NDLNormal">Can store either a forest of graphs or a single graph. Can compute a topological order (for non-cyclical graphs).</p>
<p class="NDLNormal"></p>

<a name="public_types"></a>
<p class="NDLRefHead1">Public Types</p>


<a name="classefd_1_1_directed_graph_1ace7db1fef1958a9fd31613e86109ab96"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont">DirectedGraph</span>&lt;VertexData, AllowCycles, AllowForest&gt;  GraphType</p>
<p class="NDLRefMemberDescription">Convenience typedef for the templated type. </p>

<a name="classefd_1_1_directed_graph_1a56150c46dfec78864ff11d9fcd614d88"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont">bool</span>(*  SortFunction)(const VertexData &, const VertexData &)</p>
<p class="NDLRefMemberDescription">Function for providing a secondary sort of the topological order in GetTopologicalOrder. </p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classefd_1_1_directed_graph_1a630bcee0ca6b869fb163caee506a0984"></a>
<p class="NDLRefMemberFunction">DirectedGraph()</p>
<p class="NDLRefMemberDescription">Constructor. </p>

<a name="classefd_1_1_directed_graph_1ae5b4a735faeb406500dedddd7bc542ac"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  AddNode(const VertexData& node)</p>
<p class="NDLRefMemberDescription">Will add a new node with no dependencies to the graph. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>True if the node was added, false if it was not. If the node is already in the graph or if the node would start a new tree and AllowForest is not enabled then this will return false. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_directed_graph_1a3f85a8203e61c8bdf1d5ff503fd9b935"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  AddDirectedEdge(<br/>const VertexData& from, <br/>const VertexData& to)</p>
<p class="NDLRefMemberDescription">Will add nodes for the from and to vertices if needed and creates a directed edge between the specified nodes. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>True if the edge either already exists or was successfully created. False if the nodes could not be created (for example, the source node would create a separate tree in a graph that only allows one tree) or the specified edge is invalid (for example, would create a cycle in a graph that doesn't allow cycles). </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_directed_graph_1a5f26fa9701a33bc3de0b39256ec4fc7d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetTopologicalOrder(<br/><span class="NDLSystemFont"><a href="efd__list.htm">efd::list</a></span>&lt;VertexData*&gt;& o_topologicalOrder, <br/><span class="NDLSystemFont"><a href="efd__DirectedGraph.htm#classefd_1_1_directed_graph_1a56150c46dfec78864ff11d9fcd614d88">SortFunction</a></span> pfn = 0)</p>
<p class="NDLRefMemberDescription">Get a valid topological ordering of the directed graph(s). </p>
<p class="NDLRefMemberDetailedDescription">The resulting order has an additional sort applied based on traversal depth in the graph and further those items with the same traversal depth can have and additional sort applied on them if desired by providing an additional sort functor such as std::less</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>True if the graph is acyclic and false if the graph has one or more cycles. When the graph contains cycles there is no Topological Order but we still return a <span class="NDLSystemFont"><a href="efd__list.htm">list</a></span> filled with all the nodes in the graph sorted as best as could be managed. The sort order of the VertexData data will indirectly determine the order in which cycles are output, the <span class="NDLSystemFont"><a href="efd__set.htm">set</a></span> of all nodes is walked in that order (depth-first from each sorted node) and the first node of a cycle visited will be the last node from that cycle in the <span class="NDLSystemFont"><a href="efd__list.htm">list</a></span>. </td>
</tr>

        </tbody>
    </table>
</div>


 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
