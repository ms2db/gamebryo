<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::ConfigManager</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::ConfigManager</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="efd__IConfigManager.htm">efd::IConfigManager</a></span></p>


<p class="NDLRefHeaderFile">&lt;ConfigManager.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classefd_1_1_config_manager.gif" alt="Inheritance graph for efd::ConfigManager"/>
  <p class="FigureCaption">Inheritance graph for efd::ConfigManager</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal"><span class="NDLSystemFont">ConfigManager</span> is the implementation class for the Configuration Manager. </p>
<p class="NDLNormal">which provides applications access to a hierarchical configuration of name/value pairs drawn from multiple sources.</p>
<p class="NDLNormal">
<p class="NDLNormal">See the <span class="NDLSystemFont"><a href="efd__CommandLineSource.htm">CommandLineSource</a></span> and <span class="NDLSystemFont"><a href="efd__IniSource.htm">IniSource</a></span> classes for details on specifying configuration information. </p></p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classefd_1_1_config_manager_1a5b2e8a59597ea51a50b6077859f4e3d4"></a>
<p class="NDLRefMemberFunction">ConfigManager(<br/>const <span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span>& configFile, <br/>int argcInit, <br/>char ** argvInit, <br/><span class="NDLSystemFont">bool</span> processEnvVars = false)</p>
<p class="NDLRefMemberDescription">Constructor that creates the Configuration Service and creates the default command-line and default INI file sources. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">configFile</span></td>
    <td>Optional path and file name of the config file. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">argcInit</span></td>
    <td>Number of command line arguments passed to the application. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">argvInit</span></td>
    <td>Array of strings containing each of the command line arguments. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">processEnvVars</span></td>
    <td>True to create an Environment Variables source(EnvVarSource) and read in all the environment variables into the configuration. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_config_manager_1ac01519a4804e151730ca1a9da1b8e098"></a>
<p class="NDLRefMemberFunction">virtual void  WriteConfiguration(<br/>const <span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span>& strFileName, <br/><span class="NDLSystemFont">bool</span> bPrintRelative = true)</p>
<p class="NDLRefMemberDescription">Writes a copy of the current configuration data to the specified file. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">strFileName</span></td>
    <td>Filename for the file in which to write the data. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">bPrintRelative</span></td>
    <td>True means the INI file should be formatted with a relative section hierarchy. False will produce absolute section headers. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_config_manager_1a4295c360ea3f2c03acef1b87dee4a690"></a>
<p class="NDLRefMemberFunction">virtual void  AddConfigSource(<br/><span class="NDLSystemFont"><a href="efd__IConfigSource.htm">IConfigSource</a></span>* pSource, <br/>int iPriority)</p>
<p class="NDLRefMemberDescription">Adds a new configuration source to the available sources and immediately processed the source for new configuration values. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pSource</span></td>
    <td>Pointer to the new source. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">iPriority</span></td>
    <td>Priority of the configuration source. It does not determine the order that sources are processed. It does how ever determine what happens when two sources attempt to <span class="NDLSystemFont"><a href="efd__set.htm">set</a></span> the same entry. A higher source will overwrite a value from a lower source. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_config_manager_1a21666a4fceeb6a23f149cc9a5f3bdf62"></a>
<p class="NDLRefMemberFunction">virtual void  RemoveConfigSource(<span class="NDLSystemFont"><a href="efd__IConfigSource.htm">IConfigSource</a></span>* pSource)</p>
<p class="NDLRefMemberDescription">Removes a previously added configuration source from the available sources. </p>
<p class="NDLRefMemberDetailedDescription">This will remove any sections or values that were added by this source. Removing sources is not recommended (see the notes below) and should only be done in situations where the value and section names added by the given source are unique to that source. Otherwise the results of source removal can be confusing.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">All sections added by this source are removed even if a later source extended that section. This can result in some sections or values being removed that were actually added by other sources loaded after the given source. </p>
<p class="NDLRefMemberDetailedDescription">Values overridden by the removed source will be removed, they will not be returned to the previous value prior to being overridden. This can result in some values being removed that were actually added by other sources loaded before the given source. </p>
<p class="NDLRefMemberDetailedDescription">Links to sections or values owned by the removed source will remain after the source is removed. This can result in some sections or values added by this source remaining after the source is removed.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pSource</span></td>
    <td>Pointer to the existing source to remove. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_config_manager_1a1fa5788f5e7e67152b8c73c9d7a736e4"></a>
<p class="NDLRefMemberFunction">virtual const <span class="NDLSystemFont"><a href="efd__ISection.htm">ISection</a></span>*  GetConfiguration()</p>
<p class="NDLRefMemberDescription">Returns the root configuration section that contains all the configuration data and sections. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>Pointer to the root configuration section. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_config_manager_1a2faac8cff522142823c518fec5e6aca6"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  FindValue(<br/>const <span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span>& strName, <br/><span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span>& o_value) const</p>
<p class="NDLRefMemberDescription">Searches for a given child value by name(alternate interface). </p>
<p class="NDLRefMemberDetailedDescription">If a dot separated section hierarchy is specified, it will start searching beginning with the current section as the parent. It will then traverse the section hierarchy and find the value by name in the section specified. This version of FindValue can distinguish between missing values and values <span class="NDLSystemFont"><a href="efd__set.htm">set</a></span> to empty strings.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">If you need to find multiple values from the same section, then it is more efficient to use GetConfiguration to get the root <span class="NDLSystemFont"><a href="efd__ISection.htm">ISection</a></span> and then use FindSection to find the section containing the values you need to read. Then use FindValue to read each value. This approach avoids parsing the section hierarchy multiple times.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">strName</span></td>
    <td>Name of the section to retrieve. Dot separated section hierarchy names are accepted. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">o_value</span></td>
    <td>The value, or unchanged if not found. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the value was found. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_config_manager_1adacd3c4932b6440dd011a5441bd938f8"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span>  FindValue(const <span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span>& strName) const</p>
<p class="NDLRefMemberDescription">Searches for a given child value by name. </p>
<p class="NDLRefMemberDetailedDescription">If a dot separated section hierarchy is specified, it will start searching beginning with the current section as the parent. It will then traverse the section hierarchy and find the value by name in the section specified. This version of FindValue cannot distinguish between a missing values and a values <span class="NDLSystemFont"><a href="efd__set.htm">set</a></span> to an empty string.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">If you need to find multiple values from the same section, then it is more efficient to use <span class="NDLSystemFont"><a href="efd__ConfigManager.htm#classefd_1_1_config_manager_1a1fa5788f5e7e67152b8c73c9d7a736e4">GetConfiguration()</a></span> to get the root <span class="NDLSystemFont"><a href="efd__ISection.htm">ISection</a></span> and then use FindSection() to find the section containing the values you need to read. Then use <span class="NDLSystemFont"><a href="efd__ConfigManager.htm#classefd_1_1_config_manager_1a2faac8cff522142823c518fec5e6aca6">FindValue()</a></span> to read each value. This approach avoids parsing the section hierarchy multiple times.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">strName</span></td>
    <td>Name of the section to retrieve. Dot separated section hierarchy names are accepted. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The value, or unchanged if not found. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_config_manager_1a6a194b9a055f70de9776a4b96ab56813"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  IsTrue(<br/>const <span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span>& strName, <br/><span class="NDLSystemFont">bool</span> defaultValue = false) const</p>
<p class="NDLRefMemberDescription">Checks if the specified value represents a true value. </p>
<p class="NDLRefMemberDetailedDescription">If the value is equal to the string "true" (ignoring case) or the integer "1" then the value is considered true. All other values are considered false. If the value is not found at all then the defaultValue is returned.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">strName</span></td>
    <td>Name of the value to retrieve. Dot separated section hierarchy names are accepted. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">defaultValue</span></td>
    <td>The return value if the specified strName is not found. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the value represents a true value, false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_config_manager_1acd5a03c0c1bcdc8538c40207895916de"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  IsFalse(<br/>const <span class="NDLSystemFont"><a href="efd__utf8string.htm">efd::utf8string</a></span>& strName, <br/><span class="NDLSystemFont">bool</span> defaultValue = true) const</p>
<p class="NDLRefMemberDescription">Checks if the specified value represents a false value. </p>
<p class="NDLRefMemberDetailedDescription">If the value is equal to the string "false" (ignoring case) or the integer "0" then the value is considered false. All other values are considered true. If the value is not found at all then the defaultValue is returned.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">strName</span></td>
    <td>Name of the value to retrieve. Dot separated section hierarchy names are accepted. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">defaultValue</span></td>
    <td>The return value if the specified strName is not found. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>False if the value represents a false value, true otherwise. </td>
</tr>

        </tbody>
    </table>
</div>


 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
