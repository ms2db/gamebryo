<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NSBAttributeDesc</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NSBAttributeDesc</p>

<p class="NDLRefParentage">: public <a href="../../Reference/NiSystem/NiMemObject.htm"><span>NiMemObject</span></a></p>

<p class="NDLRefHeaderFile">&lt;NSBAttributeDesc.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NSBAttributeDesc</span> 
 represents a single attribute in the shader. Collections of <span class="NDLSystemFont">NSBAttributeDesc</span> 
 objects are stored in the <span class="NDLSystemFont"><a HREF="NSBAttributeTable.htm">NSBAttributeTable</a></span>..</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NSBAttributeDesc()</p>

<p class="NDLRefMemberDescription">Creates an 'empty' instance.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction"><a HREF="../../Reference/NiMain/NiShaderAttributeDesc.htm">NiShaderAttributeDesc</a>* 
 GetShaderAttributeDesc()</p>

<p class="NDLRefMemberDescription">Returns an <a href="../../Reference/NiMain/NiShaderAttributeDesc.htm"><span 
 class="NDLSystemFont">NiShaderAttributeDesc</span></a> that describes the 
 attribute.</p>

<p class="NDLRefMemberFunction">const char* GetName() const</p>

<p class="NDLRefMemberFunction">void SetName(const char* pcName)</p>

<p class="NDLRefMemberDescription">Sets and gets the name.</p>

<p class="NDLRefMemberFunction">const char* GetDescription() const</p>

<p class="NDLRefMemberFunction">void SetDescription(const char* pcDesc)</p>

<p class="NDLRefMemberDescription">Sets and gets a text description of the 
 attribute.</p>

<p class="NDLRefMemberFunction"><a HREF="../../Reference/NiMain/NiShaderAttributeDesc.htm#AttributeType_Enumerations">NiShaderAttributeDesc::AttributeType</a> 
 GetType() const</p>

<p class="NDLRefMemberDescription">Returns the type of the attribute.</p>

<p class="NDLRefMemberFunction">unsigned int GetFlags() const</p>

<p class="NDLRefMemberDescription">Returns the flags on the attribute. These 
 flags are the <span class="NDLSystemFont"><a HREF="../../Reference/NiMain/NiShaderAttributeDesc.htm#Flags_Enumerations">NiShaderAttributeDesc</a></span> flags.</p>

<p class="NDLRefMemberFunction">bool GetValue_Bool(bool&amp; bValue) const</p>

<p class="NDLRefMemberFunction">bool GetValue_String(const char*&amp; pcValue) 
 const</p>

<p class="NDLRefMemberFunction">bool GetValue_UnsignedInt(unsigned int&amp; 
 uiValue) const</p>

<p class="NDLRefMemberFunction">bool GetValue_Float(float&amp; fValue) const</p>

<p class="NDLRefMemberFunction">bool GetValue_Point2(NiPoint2&amp; kPt2Value) 
 const</p>

<p class="NDLRefMemberFunction">bool GetValue_Point3(NiPoint3&amp; kPtValue) 
 const</p>

<p class="NDLRefMemberFunction">bool GetValue_Point4(float*&amp; pfValue) 
 const</p>

<p class="NDLRefMemberFunction">bool GetValue_Matrix3(NiMatrix3&amp; kMatValue) 
 const</p>

<p class="NDLRefMemberFunction">bool GetValue_Matrix4(float*&amp; pfValue, 
 unsigned int uiSizeBytes) const</p>

<p class="NDLRefMemberFunction">bool GetValue_Color(NiColor&amp; kClrValue) 
 const</p>

<p class="NDLRefMemberFunction">bool GetValue_ColorA(NiColorA&amp; kClrValue) 
 const</p>

<p class="NDLRefMemberFunction">bool GetValue_Texture(unsigned int&amp; uiValue, 
 const char*&amp; pcValue) const</p>

<p class="NDLRefMemberFunction">bool GetValue_Array(void* pvValue, unsigned 
 int uiValueBufferSize) const</p>

<p class="NDLRefMemberDescription">Returns the value of the attribute, if 
 it is of the requested type. If it is, then the value is returned in the 
 parameter that is passed by reference, and the function returns true. 
 If not, the function returns false. In the case of <span class="NDLSystemFont">GetValue_Texture</span>, 
 the <span class="NDLSystemFont">uiValue</span> parameter gets the <span 
 class="NDLSystemFont"><a HREF="../../Reference/NiMain/NiTextureStage.htm#TSTextureFlagsEnumerations">NiTextureStage::TSTextureFlags</a></span> 
 description of the texture, while the <span class="NDLSystemFont">pcValue</span> 
 parameter returns the texture name. In the case of <span class="NDLSystemFont">GetValue_Array</span>, 
 <span class="NDLSystemFont">uiValueBufferSize</span> holds the size of the 
 buffer whose address are passed in to hold the data. This size can be 
 determined using the results of <span class="NDLSystemFont">GetArrayParams</span>.</p>

<p class="NDLRefMemberFunction">bool GetArrayParams(<a href="../../Reference/NiMain/NiShaderAttributeDesc.htm#AttributeType_Enumerations">NiShaderAttributeDesc::AttributeType</a>&amp; 
 eSubType, unsigned int&amp; uiElementSize, unsigned int&amp; uiNumElements) 
 const</p>

<p class="NDLRefMemberDescription">If the attribute is an array, the value 
 of the type, element size, and number of elements for the attribute are 
 returned in the appropriate parameters, and the function returns true. 
 If not, the function returns false.</p>

<p class="NDLRefMemberFunction">bool IsHidden() const</p>

<p class="NDLRefMemberDescription">Returns whether or not the attribute is 
 hidden from the artist, as opposed to having a UI that allows the artist 
 to set the value.</p>

<p class="NDLRefMemberFunction">bool IsRanged() const</p>

<p class="NDLRefMemberDescription">Returns whether or not the attribute has 
 a range that is exposed to the artist.</p>

<p class="NDLRefMemberFunction">bool GetRange_UnsignedInt(unsigned int&amp; 
 uiLow, unsigned int&amp; uiHigh) const</p>

<p class="NDLRefMemberFunction">bool GetRange_Float(float&amp; fLow, float&amp; 
 fHigh) const</p>

<p class="NDLRefMemberFunction">bool GetRange_Point2(NiPoint2&amp; kPt2Low, 
 NiPoint2&amp; kPt2High) const</p>

<p class="NDLRefMemberFunction">bool GetRange_Point3(NiPoint3&amp; kPtLow, 
 NiPoint3&amp; kPtHigh) const</p>

<p class="NDLRefMemberFunction">bool GetRange_Floats(unsigned int uiCount, 
 float* pfLow, float* pfHigh) const</p>

<p class="NDLRefMemberFunction">bool GetRange_Color(NiColor&amp; kClrLow, 
 NiColor&amp; kClrHigh) const</p>

<p class="NDLRefMemberFunction">bool GetRange_ColorA(NiColorA&amp; kClrLow, 
 NiColorA&amp; kClrHigh) const</p>

<p class="NDLRefMemberFunction">bool GetRange_Array(void*&amp; pvLow, void*&amp; 
 pvHigh, unsigned int uiBufferSize) const</p>

<p class="NDLRefMemberDescription">Returns the range for a given attribute. 
 If the attribute is ranged, the values of the high and low end of the 
 range are returned in the parameters that are passed by reference, and 
 the function returns true. If not, the function returns false. In the 
 case of <span class="NDLSystemFont">GetRange_Array</span>, <span class="NDLSystemFont">uiBufferSize</span> 
 holds the size of the buffers whose addresses are passed in to hold the 
 data. This size can be determined using the results of <span class="NDLSystemFont">GetArrayParams</span>.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
