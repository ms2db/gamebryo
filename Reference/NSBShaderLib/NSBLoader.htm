<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NSBLoader</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NSBLoader</p>

<p class="NDLRefParentage">: public <a href=
"../../Reference/NiSystem/NiMemObject.htm"><span>NiMemObject</span></a></p>

<p class="NDLRefHeaderFile">&lt;NSBLoader.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NSBLoader</span> is a helper class
which performs the operations required to load NSB instances from
disk. The class is being documented strictly for instructional
purposes, as no application should ever access it.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberDescription">The constructor is protected
the access point for <span class="NDLSystemFont">NSBLoader</span>
instances is the static <span class="NDLSystemFont">Create</span>
function.</p>

<p class="NDLRefHead1">Static Member Functions</p>

<p class="NDLRefMemberFunction">static NSBLoader * Create()</p>

<p class="NDLRefMemberDescription">If the static <span class=
"NDLSystemFont">ms_pkLoader</span> instance is 0, the class is
created and the pointer is set and returned.</p>

<p class="NDLRefMemberFunction">static void Destroy()</p>

<p class="NDLRefMemberDescription">Destroys the static
<span class="NDLSystemFont">ms_pkLoader</span> instance.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">bool
LoadNSBFile(NSBShaderLibrary* pkLibrary, const char* pcFile)</p>

<p class="NDLRefMemberDescription">Loads a NSBShader from pcFile
and adds it to pkLibrary.</p>

<p class="NDLRefMemberFunction">bool
LoadAllNSBFiles(NSBShaderLibrary* pkLibrary, const char*
pcDirectory, bool bRecurseDirectories)</p>

<p class="NDLRefMemberDescription">This function will call the
internal function <span class=
"NDLSystemFont">FindAllNSBFiles</span>, which will search the
given directory, recursing subfolders if <span class=
"NDLSystemFont">bRecurseDirectories</span> is true, and add all
found files to a list held by the class. Once the list is
assembled, <span class="NDLSystemFont">LoadAllNSBFiles</span> is
called, which will attempt to create and load an <span class=
"NDLSystemFont">NSBShader</span> instance for each file in the
list.</p>

<p class="NDLRefMemberFunction">unsigned int
GetBinaryFileCount()</p>

<p class="NDLRefMemberDescription">Returns the number of NSB
files the loader has found.</p>

<p class="NDLRefMemberFunction">const char*
GetFirstBinaryFile(NiTListIterator&amp; kIter)</p>

<p class="NDLRefMemberDescription">Retrieves the name of the
first NSB file the loader has found. The function will use <span class="NDLSystemFont">kIter</span> as the iterator.</p>

<p class="NDLRefMemberFunction">const char*
GetNextBinaryFile(NiTListIterator&amp; kIter)</p>

<p class="NDLRefMemberDescription">Retrieves the name of the next
NSB file the loader has found, based on the iterator <span class="NDLSystemFont">kIter</span>. 
This function is used with <span class=
"NDLSystemFont">GetFirstBinaryFile</span> to iterate over the NSB
files. The following example demonstrates this:</p>

<pre class="indent1">
// Assuming pkLoader is a pointer to a valid NSBLoader.
NiTListIterator kIter = 0;
const char* pkFile = pkLoader-&gt;GetFirstBinaryFile(kIter);
while (pkDesc)
{
    // Process the pkFile here
    pkFile = pkTpkLoaderable-&gt;GetNextBinaryFile(kIter);
}
</pre>

<p class="NDLRefMemberFunction"><a href="NSBShader.htm">NSBShader</a>* 
GetNSBShader(const char* pcName)</p>

<p class="NDLRefMemberDescription">Searches for an NSB shader with the given name and returns it if found.</p>

<p class="NDLRefMemberFunction">unsigned int
GetNSBShaderCount()</p>

<p class="NDLRefMemberDescription">Returns the number of NSB
shaders the loader has created based on NSB files.</p>

<p class="NDLRefMemberFunction"><a href="NSBShader.htm">NSBShader</a>*
GetFirstNSBShader(NiTListIterator&amp; kIter)</p>

<p class="NDLRefMemberDescription">Retrieves the first NSB shader the loader has created. 
The function will use <span class="NDLSystemFont">kIter</span> as the iterator.</p>

<p class="NDLRefMemberFunction"><a href="NSBShader.htm">NSBShader</a>*
GetNextNSBShader(NiTListIterator&amp; kIter)</p>

<p class="NDLRefMemberDescription">Retrieves the next
NSB shader the loader has created, based on the iterator <span class="NDLSystemFont">kIter</span>. 
This function is used with <span class=
"NDLSystemFont">GetFirstNSBShader</span> to iterate over the NSB
shaders. 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
