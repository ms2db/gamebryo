<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NSBUtility</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NSBUtility</p>

<p class="NDLRefParentage">: public <a href="../../Reference/NiSystem/NiMemObject.htm"><span>NiMemObject</span></a></p>

<p class="NDLRefHeaderFile">&lt;NSBUtility.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NSBUtility</span> 
 is a utility class provided to aid in the usage of the <span class="NDLSystemFont">NiBinaryShaderLib</span>. 
 It is a static interface class providing functions to aid in the streaming 
 of certain classes  specifically the <span class="NDLSystemFont">NSBStateGroup</span> 
 and <span class="NDLSystemFont">NSBConstantMap</span> classes. 
 These functions should not be called directly  they are used internally 
 by the streaming functions of the <span class="NDLSystemFont">NiBinaryShaderLib</span> 
 classes.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberDescription">As the class only provides a static interface, 
 no constructor is present.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">static bool SaveBinaryStateGroup(<a HREF="../../Reference/efd/efd__BinaryStream.htm">efd::BinaryStream</a>&amp; 
 kStream, <a HREF="NSBStateGroup.htm">NSBStateGroup</a>* pkStateGroup)</p>

<p class="NDLRefMemberDescription">If the given state group, <span class="NDLSystemFont">pkStateGroup</span>, 
 is valid (i.e., not <span class="NDLSystemFont">NULL</span>), 
 a flag is written to the given stream indicating that a state group is 
 present, and the group is saved via the given stream instance, <span class="NDLSystemFont">kStream. 
 </span>If it is not valid, a flag indicating no state group is written 
 to the stream and the function returns.</p>

<p class="NDLRefMemberFunction">static bool LoadBinaryStateGroup(<a HREF="../../Reference/efd/efd__BinaryStream.htm">efd::BinaryStream</a>&amp; 
 kStream, <a HREF="NSBStateGroup.htm">NSBStateGroup</a>*&amp; pkStateGroup)</p>

<p class="NDLRefMemberDescription">The flag indicating whether a state group 
 was written to the stream is read in. If it is zero, the function returns, 
 as no state group was written. If it is one, then <span class="NDLSystemFont">pkStateGroup</span> 
 is set to a newly created <span class="NDLSystemFont"><a 
 HREF="NSBStateGroup.htm">NSBStateGroup</a></span> instance, and the group 
 is read in from the stream. If the reading of the group fails, the instance 
 is deleted and <span class="NDLSystemFont">false</span> 
 is returned, otherwise the functions returns <span class="NDLSystemFont">true</span> 
 indicating success.</p>

<p class="NDLRefMemberFunction">static bool SaveBinaryConstantMap(<a HREF="../../Reference/efd/efd__BinaryStream.htm">efd::BinaryStream</a>&amp; 
 kStream, <a HREF="NSBConstantMap.htm">NSBConstantMap</a>* pkMap)</p>

<p class="NDLRefMemberDescription">If the given constant map, <span class="NDLSystemFont">pkMap</span>, 
 is valid (i.e., not <span class="NDLSystemFont">NULL</span>), 
 a flag is written to the given stream indicating that a constant map is 
 present, and the map is saved via the given stream instance, <span class="NDLSystemFont">kStream. 
 </span>If it is not valid, a flag indicating no constant map is written 
 to the stream and the function returns.</p>

<p class="NDLRefMemberFunction">static bool LoadBinaryConstantMap(<a HREF="../../Reference/efd/efd__BinaryStream.htm">efd::BinaryStream</a>&amp; 
 kStream, <a HREF="NSBConstantMap.htm">NSBConstantMap</a>*&amp; pkMap)</p>

<p class="NDLRefMemberDescription">The flag indicating whether a constant 
 map was written to the stream is read in. If it is zero, the function 
 returns, as no constant map was written. If it is one, then <span class="NDLSystemFont">pkMap</span>is 
 set to a newly created <span class="NDLSystemFont"><a HREF="NSBConstantMap.htm">NSBConstantMap</a></span> 
 instance, and the map is read in from the stream. If the reading of the 
 map fails, the instance is deleted and <span class="NDLSystemFont">false</span> 
 is returned; otherwise the functions returns <span class="NDLSystemFont">true</span> 
 indicating success.</p>

<p class="NDLRefMemberFunction">static unsigned int SetString(char*&amp; pcDest, unsigned int uiDestSize,
        const char* pcSrc)</p>

<p class="NDLRefMemberDescription">Utility function to copy the string in <span class="NDLSystemFont">pcSrc</span>, 
into the <span class="NDLSystemFont">pcDest</span> buffer, which is size <span class="NDLSystemFont">uiDestSize</span>. 
If necessary, <span class="NDLSystemFont">pcDest</span> will be reallocated. The function will return the new size of
<span class="NDLSystemFont">pcDest</span> buffer. If <span class="NDLSystemFont">pcDest</span> is NULL, then an 
appropriately-sized buffer will be allocated for it.</p>

<p class="NDLRefMemberFunction">static bool WriteData(<a HREF="../../Reference/efd/efd__BinaryStream.htm">efd::BinaryStream</a>&amp; kStream, void* pvData,
        unsigned int uiSize, unsigned int uiComponentSize = 1)</p>

<p class="NDLRefMemberDescription">Utility function to write the data in <span class="NDLSystemFont">pvData</span> to the 
<span class="NDLSystemFont">kStream</span> binary stream. <span class="NDLSystemFont">uiSize</span> is the size of the buffer to write.</p>

<p class="NDLRefMemberFunction">static bool ReadData(<a HREF="../../Reference/efd/efd__BinaryStream.htm">efd::BinaryStream</a>&amp; kStream, void*&amp; pvData,
        unsigned int&amp; uiSize)</p>

<p class="NDLRefMemberDescription">Utility function to read the data into <span class="NDLSystemFont">pvData</span> from the 
<span class="NDLSystemFont">kStream</span> binary stream. <span class="NDLSystemFont">uiSize</span> gets the size of the buffer that was read.</p>

<p class="NDLRefMemberFunction">static bool AllocateAndReadData(<a HREF="../../Reference/efd/efd__BinaryStream.htm">efd::BinaryStream</a>&amp; kStream, void*&amp; pvData,
        unsigned int&amp; uiDataSize, unsigned int uiComponentSize = 1)</p>

<p class="NDLRefMemberDescription">Utility function to allocate the <span class="NDLSystemFont">pvData</span> buffer and and read the data into it from the 
<span class="NDLSystemFont">kStream</span> binary stream. <span class="NDLSystemFont">uiSize</span> gets the size of the buffer that was read.</p>


<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
