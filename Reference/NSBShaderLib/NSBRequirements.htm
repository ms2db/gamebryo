<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NSBRequirements</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type=
"text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NSBRequirements</p>

<p class="NDLRefParentage">: public <a href=
"../../Reference/NiSystem/NiMemObject.htm"><span>NiMemObject</span></a></p>

<p class="NDLRefHeaderFile">&lt;NSBRequirements.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NSBRequirements</span> represents the
requirements of a shader in the Gamebryo engine. It provides methods for
identifying the shader program versions the shader requires, a user-definable
version, and platforms it will run on. A flag provided indicates whether the
shader should use the <span class="NDLSystemFont"><a href=
"../../Reference/NiDX9Renderer/NiDX9RenderState.htm">NiDX9RenderState</a></span><span class="NDLSystemFont">
::UpdateRenderState</span> function to apply the properties attached to the
object. Skinning-related requirements are also exposed, as well as the method
the shader expects tangent space data to be calculated with (if at all).</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NSBRequirements()</p>

<p class="NDLRefMemberDescription">The constructor for <span class=
"NDLSystemFont">NSBRequirements</span> creates an 'empty' requirements
instance.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction"><a href="#NSBFeatureLevel">NSBFeatureLevel</a> GetFeatureLevel() const</p>

<p class="NDLRefMemberDescription">Returns the required feature level.</p>

<p class="NDLRefMemberFunction">void SetFeatureLevel(<a href="#NSBFeatureLevel">NSBFeatureLevel</a> eFeatureLevel)</p>

<p class="NDLRefMemberDescription">Sets the required feature level.</p>

<p class="NDLRefMemberFunction">unsigned int GetVSVersion() const</p>

<p class="NDLRefMemberDescription">Returns the required vertex shader program
version. Use the <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiShaderFactory.htm">NiShaderFactory</a>::</span><span class="NDLSystemFont">
GetMajorVertexShaderVersion</span> and <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiShaderFactory.htm">NiShaderFactory</a></span><span class="NDLSystemFont">
::</span><span class="NDLSystemFont">GetMinorVertexShaderVersion</span>
functions to retrieve the major and minor versions, respectively.</p>

<p class="NDLRefMemberFunction">void SetVSVersion(unsigned int uiVersion)</p>

<p class="NDLRefMemberDescription">Sets the required vertex shader program
version. Use the <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiShaderFactory.htm">NiShaderFactory</a></span><span class="NDLSystemFont">
::CreateVertexShaderVersion</span> function to create the <span class=
"NDLSystemFont">uiVersion</span> parameter.</p>

<p class="NDLRefMemberFunction">unsigned int GetGSVersion() const</p>

<p class="NDLRefMemberDescription">Returns the required geometry shader program
version. Use the <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiShaderFactory.htm">NiShaderFactory</a></span><span class="NDLSystemFont">
::</span><span class="NDLSystemFont">GetMajorGeometryShaderVersion</span> and
<span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiShaderFactory.htm">NiShaderFactory</a></span><span class="NDLSystemFont">
::</span><span class="NDLSystemFont">GetMinorGeometryShaderVersion</span>
functions to retrieve the major and minor versions, respectively.</p>

<p class="NDLRefMemberFunction">void SetGSVersion(unsigned int uiVersion)</p>

<p class="NDLRefMemberDescription">Sets the required geometry shader program
version. Use the <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiShaderFactory.htm">NiShaderFactory</a></span><span class="NDLSystemFont">
::CreateGeometryShaderVersion</span> function to create the <span class=
"NDLSystemFont">uiVersion</span> parameter.</p>

<p class="NDLRefMemberFunction">unsigned int GetPSVersion() const</p>

<p class="NDLRefMemberDescription">Returns the required pixel shader program
version. Use the <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiShaderFactory.htm">NiShaderFactory</a></span><span class="NDLSystemFont">
::</span><span class="NDLSystemFont">GetMajorPixelShaderVersion</span> and
<span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiShaderFactory.htm">NiShaderFactory</a></span><span class="NDLSystemFont">
::</span><span class="NDLSystemFont">GetMinorPixelShaderVersion</span>
functions to retrieve the major and minor versions, respectively.</p>

<p class="NDLRefMemberFunction">void SetPSVersion(unsigned int uiVersion)</p>

<p class="NDLRefMemberDescription">Sets the required pixel shader program
version. Use the <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiShaderFactory.htm">NiShaderFactory</a></span><span class="NDLSystemFont">
::CreatePixelShaderVersion</span> function to create the <span class=
"NDLSystemFont">uiVersion</span> parameter.</p>

<p class="NDLRefMemberFunction">unsigned int GetCSVersion() const</p>

<p class="NDLRefMemberDescription">Returns the required compute shader program
version. Use the <span class="NDLSystemFont"><a href=
"../../Reference/ecrD3D11Renderer/ecr__D3D11ShaderFactory.htm">ecr::D3D11ShaderFactory</a></span><span class="NDLSystemFont">
::</span><span class="NDLSystemFont">GetMajorComputeShaderVersion</span> and
<span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiShaderFactory.htm">NiShaderFactory</a></span><span class="NDLSystemFont">
::</span><span class="NDLSystemFont">GetMinorComputeShaderVersion</span>
functions to retrieve the major and minor versions, respectively.</p>

<p class="NDLRefMemberFunction">void SetCSVersion(unsigned int uiVersion)</p>

<p class="NDLRefMemberDescription">Sets the required compute shader program
version. Use the <span class="NDLSystemFont"><a href=
"../../Reference/ecrD3D11Renderer/ecr__D3D11ShaderFactory.htm">ecr::D3D11ShaderFactory</a></span><span class="NDLSystemFont">
::CreateComputeShaderVersion</span> function to create the <span class=
"NDLSystemFont">uiVersion</span> parameter.</p>

<p class="NDLRefMemberFunction">unsigned int GetUserVersion() const</p>

<p class="NDLRefMemberDescription">Returns the required user-defined version.
Use the <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiShaderFactory.htm">NiShaderFactory</a></span><span class="NDLSystemFont">
::</span><span class="NDLSystemFont">GetMajorVertexShaderVersion</span> and
<span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiShaderFactory.htm">NiShaderFactory</a></span><span class="NDLSystemFont">
::</span><span class="NDLSystemFont">GetMinorVertexShaderVersion</span>
functions to retrieve the major and minor versions, respectively.</p>

<p class="NDLRefMemberFunction">void SetUserVersion(unsigned int uiVersion)</p>

<p class="NDLRefMemberDescription">Sets the required user-defined version. Use
the <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiShaderFactory.htm">NiShaderFactory</a></span><span class="NDLSystemFont">
::CreateVertexShaderVersion</span> function to create the <span class=
"NDLSystemFont">uiVersion</span> parameter.</p>

<p class="NDLRefMemberFunction">unsigned int GetPlatformFlags() const</p>

<p class="NDLRefMemberDescription">Gets the platform flags. See the
<span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiShader.htm#Platform_Enumeration">NiShader::PLATFORM</a></span>
enumeration for valid values.</p>

<p class="NDLRefMemberFunction">void SetPlatformFlags(unsigned int uiFlags)</p>

<p class="NDLRefMemberDescription">Sets the platform flags. See the
<span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiShader.htm#Platform_Enumeration">NiShader::PLATFORM</a></span>
enumeration for valid values.</p>

<p class="NDLRefMemberFunction">bool UsesNiRenderState() const</p>

<p class="NDLRefMemberDescription">Returns <span class=
"NDLSystemFont">true</span> if the shader requires the render state to be
updated via <span class="NDLSystemFont"><a href=
"../../Reference/NiDX9Renderer/NiDX9RenderState.htm">NiDX9RenderState</a></span><span class="NDLSystemFont">
::UpdateRenderState</span> function.</p>

<p class="NDLRefMemberFunction">void SetUsesNiRenderState(bool bUses)</p>

<p class="NDLRefMemberDescription">Sets the flag which indicates whether the
shader requires the render state to be updated via <span class=
"NDLSystemFont"><a href=
"../../Reference/NiDX9Renderer/NiDX9RenderState.htm">NiDX9RenderState</a></span><span class="NDLSystemFont">
::UpdateRenderState</span> function.</p>

<p class="NDLRefMemberFunction">bool UsesNiLightState() const</p>

<p class="NDLRefMemberDescription">Returns <span class=
"NDLSystemFont">true</span> if the shader requires the lights to be updated via
<span class="NDLSystemFont"><a href=
"../../Reference/NiDX9Renderer/NiDX9LightManager.htm">NiDX9LightManager</a>::SetState</span>
function.</p>

<p class="NDLRefMemberFunction">void SetUsesNiLightState(bool bUses)</p>

<p class="NDLRefMemberDescription">Sets the flag which indicates whether the
shader requires the lights to be updated via <span class=
"NDLSystemFont"><a href=
"../../Reference/NiDX9Renderer/NiDX9LightManager.htm">NiDX9LightManager</a></span><span class="NDLSystemFont">
::SetState</span> function.</p>

<p class="NDLRefMemberFunction"><a href=
"../../Reference/NiMain/NiShaderRequirementDesc.htm#NBTFlags">NiShaderRequirementDesc::NBTFlags</a>
GetBinormalTangentMethod() const</p>

<p class="NDLRefMemberDescription">Retrieves the flag indicating the tangent
space data calculation method required.</p>

<p class="NDLRefMemberFunction">void SetBinormalTangentMethod(<a href=
"../../Reference/NiMain/NiShaderRequirementDesc.htm#NBTFlags">NiShaderRequirementDesc::NBTFlags</a>
eNBTMethod)</p>

<p class="NDLRefMemberDescription">Sets the flag indicating the tangent space
data calculation method required.</p>

<p class="NDLRefMemberFunction">unsigned int GetBinormalTangentUVSource()
const</p>

<p class="NDLRefMemberDescription">Retrieves the UV set used for calculating
the tangent space vectors.</p>

<p class="NDLRefMemberFunction">void SetBinormalTangentUVSource(unsigned int
uiSource)</p>

<p class="NDLRefMemberDescription">Sets the UV set used for calculating the
tangent space vectors.</p>

<p class="NDLRefMemberFunction">bool GetSoftwareVPAcceptable() const</p>

<p class="NDLRefMemberDescription">Retrieves the flag indicating that it is
acceptable to run this shader with software vertex processing if the hardware
is not capable.</p>

<p class="NDLRefMemberFunction">void SetSoftwareVPAcceptable(bool
bSoftwareVP)</p>

<p class="NDLRefMemberDescription">Sets the flag indicating that it is
acceptable to run this shader with software vertex processing if the hardware
is not capable.</p>

<p class="NDLRefMemberFunction">bool GetSoftwareVPRequired() const</p>

<p class="NDLRefMemberDescription">Retrieves the flag indicating that it this
shader must be run with software vertex processing.</p>

<p class="NDLRefMemberFunction">void SetSoftwareVPRequired(bool
bSoftwareVP)</p>

<p class="NDLRefMemberDescription">Sets the flag indicating that it this shader
must be run with software vertex processing.</p>

<p class="NDLRefMemberFunction">unsigned int GetBonesPerPartition() const</p>

<p class="NDLRefMemberDescription">Gets the bones per partition count the
shader requires. This quantity is the maximum number of bones that the shader
can handle, and indicates that models should be partitioned as such.</p>

<p class="NDLRefMemberFunction">void SetBonesPerPartition(unsigned int
uiBones)</p>

<p class="NDLRefMemberDescription">Sets the bones per partition count the
shader requires.</p>

<p class="NDLRefMemberFunction">unsigned int GetBoneMatrixRegisters() const</p>

<p class="NDLRefMemberDescription">Gets the registers taken per bone matrix the
shader requires. Will be either 3 or 4.</p>

<p class="NDLRefMemberFunction">void SetBoneMatrixRegisters(unsigned int
uiRegisters)</p>

<p class="NDLRefMemberDescription">Sets the number of registers taken per bone
matrix.</p>

<p class="NDLRefMemberFunction"><a href="#BoneMatrixCalcMethod">BoneMatrixCalcMethod</a>
GetBoneCalcMethod() const</p>

<p class="NDLRefMemberDescription">Returns the bone calculation method
indicating whether the shader expects the <span class=
"NDLSystemFont">SkinWorld</span> matrix to be concatenated onto the bone
matrices or not.</p>

<p class="NDLRefMemberFunction">void SetBoneCalcMethod(<a href=
"#BoneMatrixCalcMethod">BoneMatrixCalcMethod</a> eMethod)</p>

<p class="NDLRefMemberDescription">Sets the bone calculation method indicating
whether the shader expects the <span class="NDLSystemFont">SkinWorld</span>
matrix to be concatenated onto the bone matrices or not.</p>

<a name="BoneMatrixCalcMethod" id="BoneMatrixCalcMethod"></a><p class="NDLRefHead2">BoneMatrixCalcMethod Enumeration</p>

<p>The BoneMatrixCalcMethod enumeration indicates how the bone matrices are expected to be set up
values.</p>

<!--(Table)=========================================================-->

<table><thead>
    <tr>
        <th>Enumeration</th>

        <th>Mapped Value</th></tr></thead><tbody>

    <tr>
        <td><span class=
        "NDLSystemFont">BONECALC_SKIN</span></td>

        <td>Bone matrices include <span class="NDLSystemFont">SkinWorld</span> transform</td>
    </tr>

    <tr>
        <td><span class=
        "NDLSystemFont">BONECALC_NO_SKIN</span></td>

        <td>Bone matrices do not include <span class="NDLSystemFont">SkinWorld</span> transform</td>
    </tr>
</tbody></table>

<a name="NSBFeatureLevel" id="NSBFeatureLevel"></a><p class="NDLRefHead2">NSBFeatureLevel Enumeration</p>

<p>The feature level enumeration provides a mapping for
<span class="NDLSystemFont">D3D_FEATURE_LEVEL</span>
values.</p>

<!--(Table)=========================================================-->

<table><thead>
    <tr>
        <th>Enumeration</th>

        <th>Mapped Value</th></tr></thead><tbody>

    <tr>
        <td><span class=
        "NDLSystemFont">NSB_FEATURE_LEVEL_INVALID</span></td>

        <td>No mapping</td>
    </tr>

    <tr>
        <td><span class=
        "NDLSystemFont">NSB_FEATURE_LEVEL_9_1</span></td>

        <td><span class=
        "NDLSystemFont">D3D_FEATURE_LEVEL_9_1</span></td>
    </tr>

    <tr>
        <td><span class=
        "NDLSystemFont">NSB_FEATURE_LEVEL_9_2</span></td>

        <td><span class=
        "NDLSystemFont">D3D_FEATURE_LEVEL_9_2</span></td>
    </tr>

    <tr>
        <td><span class=
        "NDLSystemFont">NSB_FEATURE_LEVEL_9_3</span></td>

        <td><span class=
        "NDLSystemFont">D3D_FEATURE_LEVEL_9_3</span></td>
    </tr>

    <tr>
        <td><span class=
        "NDLSystemFont">NSB_FEATURE_LEVEL_10_0</span></td>

        <td><span class=
        "NDLSystemFont">D3D_FEATURE_LEVEL_10_0</span></td>
    </tr>

    <tr>
        <td><span class=
        "NDLSystemFont">NSB_FEATURE_LEVEL_10_1</span></td>

        <td><span class=
        "NDLSystemFont">D3D_FEATURE_LEVEL_10_1</span></td>
    </tr>

    <tr>
        <td><span class=
        "NDLSystemFont">NSB_FEATURE_LEVEL_11_0</span></td>

        <td><span class=
        "NDLSystemFont">D3D_FEATURE_LEVEL_11_0</span></td>
    </tr>
</tbody></table>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
