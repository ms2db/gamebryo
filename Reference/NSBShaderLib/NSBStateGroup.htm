<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NSBStateGroup</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>


<p class="NDLRefHeadClassTitle">NSBStateGroup</p>

<p class="NDLRefParentage">: public <a href="../../Reference/NiSystem/NiMemObject.htm"><span>NiMemObject</span></a></p>

<p class="NDLRefHeaderFile">&lt;NSBStateGroup.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NSBStateGroup</span> 
 represents a platform-independent group of states to be set in a shader. 
 The class is utilized in both render state groups and texture state groups. 
 </p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NSBStateGroup()</p>

<p class="NDLRefMemberDescription">The constructor for <span class="NDLSystemFont">NSBStateGroup</span> creates 
 an empty group instance.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">void SetState(unsigned int uiState, unsigned 
 int uiValue, bool bSave, bool bUseMapValue = false)</p>

<p class="NDLRefMemberDescription">If the state is not already in the group, 
 it is added. The <span class="NDLSystemFont">uiValue</span>, <span class="NDLSystemFont">bSave</span>, 
 and <span class="NDLSystemFont">bUseMapValue</span> parameters are used 
 to set the state - <span class="NDLSystemFont">uiValue</span> is the value 
 of the state, <span class="NDLSystemFont">bSave</span> indicates whether 
 or not the state should be saved and restored after rendering, and <span 
 class="NDLSystemFont">bUseMapValue</span> forces the state (if texture-related) 
 to be obtained from the applicable <span class="NDLSystemFont"><a HREF="../../Reference/NiMain/NiTexturingProperty_Map.htm">NiTexturingProperty::Map</a></span>. 
 If the state is already in the group, a warning is given to notify the 
 user of the 'overwrite', and the <span class="NDLSystemFont">uiValue</span>, 
 <span class="NDLSystemFont">bSave</span>, and <span class="NDLSystemFont">bUseMapValue</span> 
 parameters are used to update the state setting.</p>

<p class="NDLRefMemberDescription">As this class is used for render states, 
 texture states and sample states, the class takes an <span class="NDLSystemFont">unsigned 
 int</span> for the state parameter. This is to allow for using this class 
 in all cases.</p>

<p class="NDLRefMemberFunction">void SetState(unsigned int uiState, const 
 char* pcAttribute, bool bSave, bool bUseMapValue = false)</p>

<p class="NDLRefMemberDescription">If the state is not already in the group, 
 it is added. The <span class="NDLSystemFont">pcAttribute</span>, <span class="NDLSystemFont">bSave</span>, 
 and <span class="NDLSystemFont">bUseMapValue</span> parameters are used 
 to set the state - <span class="NDLSystemFont">pcAttribute</span> indicates 
 the source of the value of the state, <span class="NDLSystemFont">bSave</span> 
 indicates whether or not the state should be saved and restored after 
 rendering, and <span class="NDLSystemFont">bUseMapValue</span> forces the 
 state (if texture-related) to be obtained from the applicable <span class="NDLSystemFont"><a href="../../Reference/NiMain/NiTexturingProperty_Map.htm">NiTexturingProperty::Map</a></span>. 
 If the state is already in the group, a warning is given to notify the 
 user of the 'overwrite', and the <span class="NDLSystemFont">pcAttribute</span>, 
 <span class="NDLSystemFont">bSave</span>, and <span class="NDLSystemFont">bUseMapValue</span> 
 parameters are used to update the state setting. [NOTE: Attribute mapping 
 of states is not supported in the current release of Gamebryo.]</p>

<p class="NDLRefMemberFunction">unsigned int GetStateCount()</p>

<p class="NDLRefMemberDescription">Returns the number of states held in the 
 group.</p>

<p class="NDLRefMemberFunction"><a HREF="NSBStateGroup_NSBSGEntry.htm">NSBSGEntry</a>* 
 GetFirstState(NiTListIterator&amp; kIter)</p>

<p class="NDLRefMemberDescription">Retrieves the first state held in the 
 group. The function will use <span class="NDLSystemFont">kIter</span> as the iterator.</p>

<p class="NDLRefMemberFunction"><a HREF="NSBStateGroup_NSBSGEntry.htm">NSBSGEntry</a>* 
 GetNextState(NiTListIterator&amp; kIter)</p>

<p class="NDLRefMemberDescription">Retrieves the next state held in the group, 
based on the iterator <span class="NDLSystemFont">kIter</span>. This function is 
used in conjunction with the <span class="NDLSystemFont">GetFirstState</span> 
 function to iterate over the states in the group. The following example 
 demonstrates this:</p>

<pre class="indent1">
// Assuming pkGroup is a pointer to a valid NSBStateGroup.
NiTListIterator kIter = 0;
NSBSGEntry * pkEntry = pkGroup-&gt;GetFirstState(kIter);
while (pkEntry)
{
    // Process the pkEntry here
    pkEntry = pkGroup-&gt;GetNextState(kIter);
}
</pre> 

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
