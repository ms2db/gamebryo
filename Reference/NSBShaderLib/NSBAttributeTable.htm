<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NSBAttributeTable</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NSBAttributeTable</p>

<p class="NDLRefParentage">: public <a href="../../Reference/NiSystem/NiMemObject.htm"><span>NiMemObject</span></a></p>

<p class="NDLRefHeaderFile">&lt;NSBAttributeTable.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NSBAttributeTable</span> 
 represents the attributes the shader requires. It is important to note 
 that these are implementation independent, i.e., there is only one global 
 attribute table and one per-object attribute table per shader, regardless 
 of its implementation count.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NSBAttributeTable()</p>

<p class="NDLRefMemberDescription">Creates an 'empty' instance.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">bool AddAttribDesc(<a HREF="NSBAttributeDesc.htm">NSBAttributeDesc</a>* 
 pkDesc)</p>

<p class="NDLRefMemberDescription">Adds the given attribute description to 
 the table. Returns <span class="NDLSystemFont">true</span> 
 if successful, <span class="NDLSystemFont">false</span> 
 if failure occurs.</p>

<p class="NDLRefMemberFunction">bool AddAttribDesc_Bool(char* pcName, char* 
 pcDesc, bool bHidden, bool bInitValue)</p>

<p class="NDLRefMemberDescription">Creates an attribute description for a 
 Boolean type, using the given name, description, hidden flag, and initial 
 value. Adds the new attribute description to the table. Returns <span class="NDLSystemFont">true</span> if successful, <span class="NDLSystemFont">false</span> 
 if failure occurs.</p>

<p class="NDLRefMemberFunction">bool AddAttribDesc_String(char* pcName, char* 
 pcDesc, bool bHidden, char* pcInitValue, unsigned int uiMaxLen = 0)</p>

<p class="NDLRefMemberDescription">Creates an attribute description for a 
 string type, using the given name, description, hidden flag, and initial 
 value. If <span class="NDLSystemFont">uiMaxLen</span> is 
 not equal to zero, the range allowed for the data will be set to it. Adds 
 the new attribute description to the table. Returns <span class="NDLSystemFont">true</span> 
 if successful, <span class="NDLSystemFont">false</span> 
 if failure occurs.</p>

<p class="NDLRefMemberFunction">bool AddAttribDesc_UnsignedInt(char* pcName, 
 char* pcDesc, bool bHidden, unsigned int uiInitValue, unsigned int uiLow 
 = 0, unsigned int uiHigh = 0)</p>

<p class="NDLRefMemberDescription">Creates an attribute description for an 
 unsigned int type, using the given name, description, hidden flag, and 
 initial value. If <span class="NDLSystemFont">uiLow</span> and <span class="NDLSystemFont">uiHigh</span> 
 are not equal to zero, the range allowed for the data will be set to it. 
 Adds the new attribute description to the table. Returns <span class="NDLSystemFont">true</span> 
 if successful, <span class="NDLSystemFont">false</span> 
 if failure occurs.</p>

<p class="NDLRefMemberFunction">bool AddAttribDesc_Float(char* pcName, char* 
 pcDesc, bool bHidden, float fInitValue, float fLow = 0.0f, float fHigh 
 = 0.0f)</p>

<p class="NDLRefMemberDescription">Creates an attribute description for a 
 float type, using the given name, description, hidden flag, and initial 
 value. If <span class="NDLSystemFont">fLow</span> and <span class="NDLSystemFont">fHigh</span> are 
 not equal to zero, the range allowed for the data will be set to it. Adds 
 the new attribute description to the table. Returns <span class="NDLSystemFont">true</span> 
 if successful, <span class="NDLSystemFont">false</span> 
 if failure occurs.</p>

<p class="NDLRefMemberFunction">bool AddAttribDesc_Point2(char* pcName, char* 
 pcDesc, bool bHidden, float* pfInitValue, float* pfLow = 0, float* pfHigh 
 = 0)</p>

<p class="NDLRefMemberDescription">Creates an attribute description for a 
 point2 type, using the given name, description, hidden flag, and initial 
 value. If <span class="NDLSystemFont">pfLow</span><span 
 style="border: none;"> and </span><span class="NDLSystemFont">pfHigh</span> 
 are not equal to zero, the range allowed for the data will be set to it. 
 Adds the new attribute description to the table. Returns <span class="NDLSystemFont">true</span> 
 if successful, <span class="NDLSystemFont">false</span> 
 if failure occurs.</p>

<p class="NDLRefMemberFunction">bool AddAttribDesc_Point3(char* pcName, char* 
 pcDesc, bool bHidden, float* pfInitValue, float* pfLow = 0, float* pfHigh 
 = 0)</p>

<p class="NDLRefMemberDescription">Creates an attribute description for a 
 point3 type, using the given name, description, hidden flag, and initial 
 value. If <span class="NDLSystemFont">pfLow</span><span 
 style="border: none;"> and </span><span class="NDLSystemFont">pfHigh</span> 
 are not equal to zero, the range allowed for the data will be set to it. 
 Adds the new attribute description to the table. Returns <span class="NDLSystemFont">true</span> 
 if successful, <span class="NDLSystemFont">false</span> 
 if failure occurs.</p>

<p class="NDLRefMemberFunction">bool AddAttribDesc_Point4(char* pcName, char* 
 pcDesc, bool bHidden, float* pfInitValue, float* pfLow = 0, float* pfHigh 
 = 0)</p>

<p class="NDLRefMemberDescription">Creates an attribute description for a 
 point4 type, using the given name, description, hidden flag, and initial 
 value. If <span class="NDLSystemFont">pfLow</span><span 
 style="border: none;"> and </span><span class="NDLSystemFont">pfHigh</span> 
 are not equal to zero, the range allowed for the data will be set to it. 
 Adds the new attribute description to the table. Returns <span class="NDLSystemFont">true</span> 
 if successful, <span class="NDLSystemFont">false</span> 
 if failure occurs.</p>

<p class="NDLRefMemberFunction">bool AddAttribDesc_Matrix3(char* pcName, 
 char* pcDesc, bool bHidden, float* pfInitValue)</p>

<p class="NDLRefMemberDescription">Creates an attribute description for a 
 matrix3 type, using the given name, description, hidden flag, and initial 
 value. Adds the new attribute description to the table. Returns <span class="NDLSystemFont">true</span> if successful, <span class="NDLSystemFont">false</span> 
 if failure occurs.</p>

<p class="NDLRefMemberFunction">bool AddAttribDesc_Matrix4(char* pcName, 
 char* pcDesc, bool bHidden, float* pfInitValue)</p>

<p class="NDLRefMemberDescription">Creates an attribute description for a 
 matrix4 type, using the given name, description, hidden flag, and initial 
 value. Adds the new attribute description to the table. Returns <span class="NDLSystemFont">true</span> if successful, <span class="NDLSystemFont">false</span> 
 if failure occurs.</p>

<p class="NDLRefMemberFunction">bool AddAttribDesc_Color(char* pcName, char* 
 pcDesc, bool bHidden, float* pfInitValue, float* pfLow = 0, float* pfHigh 
 = 0)</p>

<p class="NDLRefMemberDescription">Creates an attribute description for a 
 color (rgb  alpha forced to <span class="NDLSystemFont">1.0f</span>) 
 type, using the given name, description, hidden flag, and initial value. 
 If <span class="NDLSystemFont">pfLow</span><span style="border: none;"> 
 and </span><span class="NDLSystemFont">pfHigh</span> are 
 not equal to zero, the range allowed for the data will be set to it. Adds 
 the new attribute description to the table. Returns <span class="NDLSystemFont">true</span> 
 if successful, <span class="NDLSystemFont">false</span> 
 if failure occurs.</p>

<p class="NDLRefMemberFunction">bool AddAttribDesc_ColorA(char* pcName, char* 
 pcDesc, bool bHidden, float* pfInitValue, float* pfLow = 0, float* pfHigh 
 = 0)</p>

<p class="NDLRefMemberDescription">Creates an attribute description for a 
 color (rgba) type, using the given name, description, hidden flag, and 
 initial value. If <span class="NDLSystemFont">pfLow</span><span 
 style="border: none;"> and </span><span class="NDLSystemFont">pfHigh</span> 
 are not equal to zero, the range allowed for the data will be set to it. 
 Adds the new attribute description to the table. Returns <span class="NDLSystemFont">true</span> 
 if successful, <span class="NDLSystemFont">false</span> 
 if failure occurs.</p>

<p class="NDLRefMemberFunction">bool AddAttribDesc_Texture(char* pcName, 
 char* pcDesc, bool bHidden, unsigned int uiSlot, const char* pcDefault 
 = 0)</p>

<p class="NDLRefMemberDescription">Creates an attribute description for a 
 texture type, using the given name, description, hidden flag, and initial 
 value. If <span class="NDLSystemFont">pcDefault</span><span 
 style="border: none;"> is </span>not equal to zero, the default image 
 file for the data will be set to it. Adds the new attribute description 
 to the table. Returns <span class="NDLSystemFont">true</span> 
 if successful, <span class="NDLSystemFont">false</span> 
 if failure occurs.</p>

<p class="NDLRefMemberFunction">bool AddAttribDesc_Array(char* pcName, char* 
 pcDesc, bool bHidden, <a HREF="../../Reference/NiMain/NiShaderAttributeDesc.htm#AttributeType_Enumerations">NiShaderAttributeDesc::AttributeType</a> 
 eType, unsigned int uiArraySize, float* pfInitValue); </p>

<p class="NDLRefMemberDescription">Creates an attribute description for an 
 float array type, using the given name, description, hidden flag, attribute 
 type, array size, and initial values. If <span class="NDLSystemFont">pfInitValue</span><span 
 style="border: none;"> is </span>not equal to zero, the array will be 
 initialized to those data values. Adds the new attribute description to 
 the table. Returns <span class="NDLSystemFont">true</span> 
 if successful, <span class="NDLSystemFont">false</span> 
 if failure occurs.</p>

<p class="NDLRefMemberFunction">unsigned int GetAttributeCount()</p>

<p class="NDLRefMemberDescription">Returns the number of attributes in the 
 table.</p>

<p class="NDLRefMemberFunction"><a href="NSBAttributeDesc.htm">NSBAttributeDesc</a>* 
 GetFirstAttribute(NiTListIterator&amp; kIter)</p>

<p class="NDLRefMemberDescription">Retrieves the first attribute description 
 in the table. The function will use <span class="NDLSystemFont">kIter</span> as the iterator.</p>

<p class="NDLRefMemberFunction"><a href="NSBAttributeDesc.htm">NSBAttributeDesc</a>* 
 GetNextAttribute(NiTListIterator&amp; kIter)</p>

<p class="NDLRefMemberDescription">Retrieves the next attribute description 
 in the table, based on the iterator <span class="NDLSystemFont">kIter</span>. This function is
 used with <span class="NDLSystemFont">GetFirstAttribute</span> 
 to iterate over the attribute entries. The following example demonstrates 
 this:</p>

<pre class="indent1">
// Assuming pkTable is a pointer to a valid NSBAttributeTable.
NiTListIterator kIter = 0;
NSBAttributeDesc* pkDesc = pkTable-&gt;GetFirstAttribute(kIter);
while (pkDesc)
{
    // Process the pkDesc here
    pkDesc = pkTable-&gt;GetNextAttribute(kIter);
}
</pre> 

<p class="NDLRefMemberFunction"><a href="NSBAttributeDesc.htm">NSBAttributeDesc</a>* 
 GetAttributeByName(char* pcName)</p>

<p class="NDLRefMemberDescription">Retrieve the attribute description of 
 the given name. Returns <span class="NDLSystemFont">NULL</span> 
 if not found.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
