<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NSBPass</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>


<p class="NDLRefHeadClassTitle">NSBPass</p>

<p class="NDLRefParentage">: public <a href="../../Reference/NiSystem/NiMemObject.htm"><span>NiMemObject</span></a></p>

<p class="NDLRefHeaderFile">&lt;NSBPass.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NSBPass</span> 
 represents a pass utilized in an <span class="NDLSystemFont">NSBImplementation</span>.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NSBPass()</p>

<p class="NDLRefMemberDescription">The constructor for <span class="NDLSystemFont">NSBPass</span> creates an 'empty' 
 instance.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">const char* GetName()</p>

<p class="NDLRefMemberDescription">Retrieves the name of the pass. The name 
 is optional, so the function may return <span class="NDLSystemFont">NULL</span>.</p>

<p class="NDLRefMemberFunction">void SetName(const char* pcName)</p>

<p class="NDLRefMemberDescription">Sets the name of the pass to the given 
 <span class="NDLSystemFont">pcName</span>.</p>

<p class="NDLRefMemberFunction"><a HREF="NSBStateGroup.htm">NSBStateGroup</a>* 
 GetRenderStateGroup()</p>

<p class="NDLRefMemberDescription">Retrieves the render state group for the 
 pass. Returns <span class="NDLSystemFont">NULL</span> if 
 none is assigned.</p>

<p class="NDLRefMemberFunction">const char* GetShaderProgramFile(<a HREF="../../Reference/NiSystem/NiSystemDesc.htm#RendererIDEnum">NiSystemDesc::RendererID</a> 
 eRenderer, <a HREF="../../Reference/NiMain/NiGPUProgram.htm#ProgramType">NiGPUProgram::ProgramType</a> 
 eType) const</p>

<p class="NDLRefMemberDescription">Retrieves the name of the shader program 
 of the specified type to be used for the pass, when using the specified 
 renderer. Returns <span class="NDLSystemFont">NULL</span> 
 if no shader program has been assigned.</p>

<p class="NDLRefMemberFunction">void SetShaderProgramFile(const char* pcProgramName, 
 <a href="../../Reference/NiSystem/NiSystemDesc.htm#RendererIDEnum">NiSystemDesc::RendererID</a> 
 eRenderer, <a href="../../Reference/NiMain/NiGPUProgram.htm#ProgramType">NiGPUProgram::ProgramType</a> 
 eType)</p>

<p class="NDLRefMemberDescription">Sets the name of the shader program of 
 the specified type to be <span class="NDLSystemFont">pcProgramName</span> 
 when using the specified renderer.</p>

<p class="NDLRefMemberFunction">const char* GetShaderProgramEntryPoint(<a 
 href="../../Reference/NiSystem/NiSystemDesc.htm#RendererIDEnum">NiSystemDesc::RendererID</a> 
 eRenderer, <a href="../../Reference/NiMain/NiGPUProgram.htm#ProgramType">NiGPUProgram::ProgramType</a> 
 eType) const</p>

<p class="NDLRefMemberDescription">Retrieves the entry point for the shader 
 program of the specified type to be used for the pass when using the specified 
 renderer. This is only valid for shader programs written in a high-level 
 shader language such as the DirectX HLSL.</p>

<p class="NDLRefMemberFunction">void SetShaderProgramEntryPoint(const char* 
 pcEntryPoint, <a href="../../Reference/NiSystem/NiSystemDesc.htm#RendererIDEnum">NiSystemDesc::RendererID</a> 
 eRenderer, <a href="../../Reference/NiMain/NiGPUProgram.htm#ProgramType">NiGPUProgram::ProgramType</a> 
 eType)</p>

<p class="NDLRefMemberDescription">Sets the entry point for the shader program 
 of the specified type to use for this pass when using the specified renderer. 
 This is only valid for shader programs written in a high-level shader 
 language such as the DirectX HLSL.</p>

<p class="NDLRefMemberFunction">const char* GetShaderProgramShaderTarget(<a 
 href="../../Reference/NiSystem/NiSystemDesc.htm#RendererIDEnum">NiSystemDesc::RendererID</a> 
 eRenderer <a href="../../Reference/NiMain/NiGPUProgram.htm#ProgramType">NiGPUProgram::ProgramType</a> 
 eType) const</p>

<p class="NDLRefMemberDescription">Retrieves the text representing the shader 
 target for the shader program of the specified type to be used for the 
 pass when using the specified renderer. Possible values for this include 
 &quot;vs_1_1&quot;, &quot;vs_2_a&quot;, and others listed in the DirectX 
 documentation. This is only valid for shader programs written in a high-level 
 shader language such as the DirectX HLSL.</p>

<p class="NDLRefMemberFunction">void SetShaderProgramEntryPoint(const char* 
 pcEntryPoint, <a href="../../Reference/NiSystem/NiSystemDesc.htm#RendererIDEnum">NiSystemDesc::RendererID</a> 
 eRenderer, <a href="../../Reference/NiMain/NiGPUProgram.htm#ProgramType">NiGPUProgram::ProgramType</a> 
 eType)</p>

<p class="NDLRefMemberDescription">Sets the shader target for the shader 
 program of the specified type to use for this pass when using the specified 
 renderer. Possible values for this include &quot;vs_1_1&quot;, &quot;vs_2_a&quot;, 
 and others listed in the DirectX documentation. This is only valid for 
 shader programs written in a high-level shader language such as the DirectX 
 HLSL.</p>

<p class="NDLRefMemberFunction">bool GetShaderPresent(<a href="../../Reference/NiMain/NiGPUProgram.htm#ProgramType">NiGPUProgram::ProgramType</a> 
 eType) const</p>

<p class="NDLRefMemberDescription">This method returns whether or not a shader 
 program of the specified type is in use for this pass.</p>

<p class="NDLRefMemberFunction">bool GetSoftwareVertexProcessing() const</p>

<p class="NDLRefMemberDescription">Returns a Boolean value indicating whether 
 the current pass expects to be rendered using software vertex processing. 
 Refer to the documentation on <a href="../../Programmer/NiShader/Software_Vertex_Processing.htm">software 
 vertex processing</a> for more information.</p>

<p class="NDLRefMemberFunction">void SetSoftwareVertexProcessing(bool bSWVertexProcessing)</p>

<p class="NDLRefMemberDescription">Sets a Boolean value indicating whether 
 the current pass expects to be rendered using software vertex processing. 
 Refer to the documentation on <a href="../../Programmer/NiShader/Software_Vertex_Processing.htm">software 
 vertex processing</a> for more information.</p>
 
 <p class="NDLRefMemberFunction">void SetComputeThreadGroupCounts(
        unsigned int uiTGCountX, 
        unsigned int uiTGCountY, 
        unsigned int uiTGCountZ)</p>

<p class="NDLRefMemberDescription">Sets the thread group counts that the shader expects to be invoked with. 
Only valid for passes that consist of compute shaders, rather than standard rendering passes.</p>

<p class="NDLRefMemberFunction">unsigned int GetComputeThreadGroupCountX()</p>

<p class="NDLRefMemberDescription">Sets the thread group count in the Y dimension that the shader expects to be invoked with. 
Only valid for passes that consist of compute shaders, rather than standard rendering passes.</p>

<p class="NDLRefMemberFunction">unsigned int GetComputeThreadGroupCountX()</p>

<p class="NDLRefMemberDescription">Sets the thread group count in the Y dimension that the shader expects to be invoked with. 
Only valid for passes that consist of compute shaders, rather than standard rendering passes.</p>

<p class="NDLRefMemberFunction">unsigned int GetComputeThreadGroupCountZ()</p>

<p class="NDLRefMemberDescription">Sets the thread group count in the Z dimension that the shader expects to be invoked with. 
Only valid for passes that consist of compute shaders, rather than standard rendering passes.</p>

<p class="NDLRefMemberFunction">unsigned int GetVertexConstantMapCount()</p>

<p class="NDLRefMemberDescription">Gets the number of vertex constant maps 
 on the pass.</p>

<p class="NDLRefMemberFunction">unsigned int GetGeometryConstantMapCount()</p>

<p class="NDLRefMemberDescription">Gets the number of geometry constant maps 
 on the pass.</p>

<p class="NDLRefMemberFunction">unsigned int GetPixelConstantMapCount()</p>

<p class="NDLRefMemberDescription">Gets the number of pixel constant maps 
 on the pass.</p>

<p class="NDLRefMemberFunction"><a HREF="NSBConstantMap.htm">NSBConstantMap</a>* 
 GetVertexConstantMap(unsigned int uiIndex) const</p>

<p class="NDLRefMemberDescription">Retrieves the <span class="NDLSystemFont"><a 
 HREF="NSBConstantMap.htm">NSBConstantMap</a></span> instance with index 
 <span class="NDLSystemFont">uiIndex</span> for the vertex shader constant 
 mapping of the pass. Returns <span class="NDLSystemFont">NULL</span> 
 if none is assigned.</p>

<p class="NDLRefMemberFunction"><a href="NSBConstantMap.htm">NSBConstantMap</a>* 
 GetGeometryConstantMap(unsigned int uiIndex) const</p>

<p class="NDLRefMemberDescription">Retrieves the <span class="NDLSystemFont"><a 
 href="NSBConstantMap.htm">NSBConstantMap</a></span> instance with index 
 <span class="NDLSystemFont">uiIndex</span> for the geometryshader constant 
 mapping of the pass. Returns <span class="NDLSystemFont">NULL</span> 
 if none is assigned.</p>

<p class="NDLRefMemberFunction"><a HREF="NSBConstantMap.htm">NSBConstantMap</a>* 
 GetPixelConstantMap(unsigned int uiIndex) const</p>

<p class="NDLRefMemberDescription">Retrieves the <span class="NDLSystemFont"><a 
 HREF="NSBConstantMap.htm">NSBConstantMap</a></span> instance with index 
 <span class="NDLSystemFont">uiIndex</span> for the pixel shader constant 
 mapping of the pass. Returns <span class="NDLSystemFont">NULL</span> 
 if none is assigned.</p>

<p class="NDLRefMemberFunction">unsigned int GetConstantMapCount(<a href="../../Reference/NiMain/NiGPUProgram.htm#ProgramType">NiGPUProgram::ProgramType</a> eType)</p>

<p class="NDLRefMemberDescription">Retrieves the number of constant 
 maps for the given shader type in the pass.</p>

 <p class="NDLRefMemberFunction"><a HREF="NSBConstantMap.htm">NSBConstantMap</a>* 
 GetConstantMap(<a href="../../Reference/NiMain/NiGPUProgram.htm#ProgramType">NiGPUProgram::ProgramType</a> eType, unsigned int uiIndex)</p>

<p class="NDLRefMemberDescription">Retrieves the pixel shader constant 
 map with the given shader type and index for the implementation in the pass.</p>

 <p class="NDLRefMemberFunction">unsigned int AddConstantMap(<a href="../../Reference/NiMain/NiGPUProgram.htm#ProgramType">NiGPUProgram::ProgramType</a> eType)</p>

<p class="NDLRefMemberDescription">Creates a new constant map for the given shader type in the pass.</p>

<p class="NDLRefMemberFunction">unsigned int GetStageCount()</p>

<p class="NDLRefMemberDescription">Gets the number of texture stages contained 
 in the pass.</p>

<p class="NDLRefMemberFunction"><a HREF="NSBTextureStage.htm">NSBTextureStage</a>* 
 GetStage(unsigned int uiIndex, bool bCreate = true)</p>

<p class="NDLRefMemberDescription">Gets the texture stage at the given index. 
 If <span class="NDLSystemFont">bCreate</span> is <span class="NDLSystemFont">true</span> 
 and no stage is at the given index, one is created, put in that slot, 
 and returned. If <span class="NDLSystemFont">bCreate</span> 
 is <span class="NDLSystemFont">false</span>, the function 
 will return <span class="NDLSystemFont">NULL</span> if no 
 stage exists at that index.</p>

<p class="NDLRefMemberFunction">unsigned int GetTextureCount()</p>

<p class="NDLRefMemberDescription">Gets the number of textures contained 
 in the pass.</p>

<p class="NDLRefMemberFunction"><a HREF="NSBTexture.htm">NSBTexture</a>* 
 GetTexture(unsigned int uiIndex, bool bCreate = true)</p>

<p class="NDLRefMemberDescription">Gets the texture at the given index. If 
 <span class="NDLSystemFont">bCreate</span> is <span class="NDLSystemFont">true</span> 
 and no texture is at the given index, one is created, put in that slot, 
 and returned. If <span class="NDLSystemFont">bCreate</span> 
 is <span class="NDLSystemFont">false</span>, the function 
 will return <span class="NDLSystemFont">NULL</span> if no 
 texture exists at that index.</p>

<p class="NDLRefMemberFunction"><a HREF="NSBUserDefinedDataSet.htm">NSBUserDefinedDataSet</a>* 
 GetUserDefinedDataSet</p>

<p class="NDLRefMemberFunction">void SetUserDefinedDataSet(<a HREF="NSBUserDefinedDataSet.htm">NSBUserDefinedDataSet</a>* 
 pkUUDSet)</p>

<p class="NDLRefMemberDescription">Get and set the user defined data set 
 for this pass.</p>

<p class="NDLRefMemberFunction"><a HREF="../../Reference/NiMain/NiStreamOutSettings.htm">NiStreamOutSettings</a>&amp; 
 GetStreamOutSettings()</p>

<p class="NDLRefMemberDescription">Get the stream out settings object, which 
 dictates which output streams attached to the <span class="NDLSystemFont"><a 
 href="../../Reference/NiMesh/NiMesh.htm">NiMesh</a></span> 
 are set up to receive the output data.</p>

<p class="NDLRefMemberFunction">&nbsp;</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
