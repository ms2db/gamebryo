<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiTerrain</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiTerrain</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../NiMain/NiNode.htm">NiNode</a></span></p>


<p class="NDLRefHeaderFile">&lt;NiTerrain.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/class_ni_terrain.gif" alt="Inheritance graph for NiTerrain"/>
  <p class="FigureCaption">Inheritance graph for NiTerrain</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">The terrain class is the main entry point to the <span class="NDLSystemFont">NiTerrain</span> library. </p>
<p class="NDLNormal">As a <span class="NDLSystemFont"><a href="../NiMain/NiNode.htm">NiNode</a></span>, it can be attached to a scene and can hold <span class="NDLSystemFont"><a href="NiTerrainSector.htm">NiTerrainSector</a></span> as children. The terrain does not hold any geometry as this is left to the <span class="NDLSystemFont"><a href="NiTerrainSector.htm">NiTerrainSector</a></span> that are attached to it. </p>

<a name="public_types"></a>
<p class="NDLRefHead1">Public Types</p>
<a name="class_ni_terrain_1a99499427c4b4fd5a4db7129a6d2e441e"></a>
<p class=NDLRefHead2>NiTerrain::ErrorCodes</p>




<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">EC_INVALID_ARCHIVE_PATH</span></td>
    <td>Terrain file loading errors Defined path does not exist. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">EC_TERRAIN_FILE_INVALID</span></td>
    <td>An error code indicating an invalid terrain file. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">EC_TERRAIN_FILE_OUTOFDATE</span></td>
    <td>An error code indicating the file is of an old format. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">EC_TERRAIN_MISSING_DATA</span></td>
    <td>An error code indicating the file was missing data. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">EC_SECTOR_INVALID_FILE</span></td>
    <td>Sector file loading errors Failed to load from a sector file. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">EC_SECTOR_OUTOFDATE</span></td>
    <td>File format is not of the latest supported version. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">EC_SECTOR_INVALID_SECTOR_SIZE</span></td>
    <td>Sector size and size defined in the file do not correspond to the terrain. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">EC_SECTOR_STREAM_CREATION_ERROR</span></td>
    <td>failed to create the streams </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">EC_SECTOR_MISSING_DATA</span></td>
    <td>File has missing data. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">EC_SECTOR_LOADED</span></td>
    <td>The file was loaded successfully. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">EC_SECTOR_UNLOADED</span></td>
    <td>The file was loaded successfully. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">EC_SECTOR_SAVED</span></td>
    <td>The file was saved successfully. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">EC_SECTOR_IS_READ_ONLY</span></td>
    <td>The file is read only. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">EC_SECTOR_STREAMING_CANCELLED</span></td>
    <td>The streaming task on a sector was cancelled. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">EC_SECTOR_SAVE_CUSTOM_DATA_FAILED</span></td>
    <td>Saving of custom data failed. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">EC_SECTOR_LOAD_CUSTOM_DATA_FAILED</span></td>
    <td>Loading of custom data failed. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">EC_SURFACE_INVALID_PACKAGE</span></td>
    <td>Surface errors An error code indicating an invalid surface package was specified. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">EC_SURFACE_EMPTY_PACKAGENAME</span></td>
    <td>An error code indicating an empty surface package was specified. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">EC_SURFACE_FAILED_LOADSURFACE</span></td>
    <td>An error code indicating a surface failed to load. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">EC_LRT_RENDERING_FAILED</span></td>
    <td>Low detail texture rendering error codes An error code indicating the low resolution texture failed to be rendered. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">EC_LRT_INSUFICIENT_VRAM</span></td>
    <td>Insufficient video memory to render low detail texture. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">EC_LRT_SCENE_CREATION_FAILED</span></td>
    <td>Required data is not loaded to render the low detail texture. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">EC_LRT_TEXTURE_CREATION_FAILED</span></td>
    <td>Low detail texture creation failed. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">EC_LRT_CLICK_CREATION_FAILED</span></td>
    <td>Low detail texture render click creation failed. </td>
</tr>

  </tbody>
</table>
</div>


<a name="expose_resourcemanager_type_enumerations"></a>
<p class="NDLRefHead1">Expose ResourceManager type enumerations</p>


<a name="class_ni_terrain_1a571fc9cbfcdbd17d5e5eb2650905b343"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="NiTerrainResourceManager__TextureType.htm">NiTerrainResourceManager::TextureType</a></span>  TextureType</p>
<p class="NDLRefMemberDescription">Texture type enumeration. </p>

<a name="class_ni_terrain_1ad6276b9088a8f59d03da827495b315a6"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="NiTerrainResourceManager__StreamType.htm">NiTerrainResourceManager::StreamType</a></span>  StreamType</p>
<p class="NDLRefMemberDescription">Stream type enumeration. </p>
<a name="public_static_methods"></a>
<p class="NDLRefHead1">Public Static Methods</p>


<a name="class_ni_terrain_1a93a5ec409db85c2b4115406249095fff"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont"><a href="NiTerrainConfiguration.htm">NiTerrainConfiguration</a></span>  GetDefaultConfiguration()</p>
<p class="NDLRefMemberDescription">Get the default platform configuration to use for any terrains created. </p>
<p class="NDLRefMemberDetailedDescription">The configuration will determine how the terrain's data is stored in memory and allows configuration of the terrain for different platforms. </p>

<a name="class_ni_terrain_1a25ff50791670486367fe28cce4b25780"></a>
<p class="NDLRefMemberFunction">static void  SetDefaultConfiguration(<span class="NDLSystemFont"><a href="NiTerrainConfiguration.htm">NiTerrainConfiguration</a></span> kConfig)</p>
<p class="NDLRefMemberDescription">Set the default platform configuration to use for any terrains created. </p>
<p class="NDLRefMemberDetailedDescription">The configuration will determine how the terrain's data is stored in memory and allows configuration of the terrain for different platforms. </p>

<a name="class_ni_terrain_1a9b3cce60bdb94c947c10ab6dba0abdea"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  InToolMode()</p>
<p class="NDLRefMemberDescription">Returns whether or not the terrain engine is in tool mode. </p>

<a name="class_ni_terrain_1a0179e0f73c9f7085ec3d0b907de852fd"></a>
<p class="NDLRefMemberFunction">static void  SetInToolMode(<span class="NDLSystemFont">bool</span> bInToolMode)</p>
<p class="NDLRefMemberDescription">Sets whether or not the terrain engine is in tool mode. </p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="class_ni_terrain_1a9faf700172b43c815154afb518769fff"></a>
<p class="NDLRefMemberFunction">void  SetLODScale(float fScale)</p>
<p class="NDLRefMemberDescription">The factor used to adjust the LOD viewable at different distances. </p>
<p class="NDLRefMemberDetailedDescription">Values above 1 adjust the LOD ranges geometrically, increasing distant and foreground detail equally. Values below 1 linearly shift the LOD ranges closer to the camera, until only lower levels of detail can be seen. </p>

<a name="class_ni_terrain_1a076e33bf1fba45314b103709a51e5a9f"></a>
<p class="NDLRefMemberFunction">float  GetLODScale() const</p>
<p class="NDLRefMemberDescription">The factor used to adjust the LOD viewable at different distances. </p>
<p class="NDLRefMemberDetailedDescription">Values above 1 adjust the LOD ranges geometrically, increasing distant and foreground detail equally. Values below 1 linearly shift the LOD ranges closer to the camera, until only lower levels of detail can be seen. </p>

<a name="class_ni_terrain_1afcedfa8e6bc1beaeeb1cb6fa522ca59a"></a>
<p class="NDLRefMemberFunction">float  GetLODShift() const</p>
<p class="NDLRefMemberDescription">The factor used to adjust the LOD viewable at different distances. </p>
<p class="NDLRefMemberDetailedDescription">Values above 1 adjust the LOD ranges geometrically, increasing distant and foreground detail equally. Values below 1 linearly shift the LOD ranges closer to the camera, until only lower levels of detail can be seen. </p>

<a name="class_ni_terrain_1a9ea9b103e9b09e103ffe6a85024a72ee"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  InitializeDeformationBuffer(<br/>const <span class="NDLSystemFont"><a href="../NiMain/NiRect.htm">NiRect</a></span>&lt;<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>&gt;& kWorldSpaceRegion, <br/><span class="NDLSystemFont"><a href="NiTerrainDeformationBuffer.htm">SurfaceMaskBuffer</a></span>* pkBuffer)</p>
<p class="NDLRefMemberDescription">Initialize a deformation buffer for the selected world space region. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kWorldSpaceRegion</span></td>
    <td>affected worldspace region </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkBuffer</span></td>
    <td>the surface mask buffer to initialize </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>true if successful </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_1a33f7f5282d524b3a57e8b5d5bcb7a6a6"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  InitializeDeformationBuffer(<br/>const <span class="NDLSystemFont"><a href="../NiMain/NiRect.htm">NiRect</a></span>&lt;<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>&gt;& kWorldSpaceRegion, <br/><span class="NDLSystemFont"><a href="NiTerrainDeformationBuffer.htm">HeightMapBuffer</a></span>* pkBuffer)</p>
<p class="NDLRefMemberDescription">Initialize a deformation buffer for the selected world space region. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kWorldSpaceRegion</span></td>
    <td>affected worldspace region </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkBuffer</span></td>
    <td>the height map buffer to initialize </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>true if successful </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_1a0b0763326594bc1061565550b367ef88"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetSurfaceMask(<br/>const <span class="NDLSystemFont"><a href="NiSurface.htm">NiSurface</a></span>* pkSurface, <br/><span class="NDLSystemFont"><a href="../NiMain/NiRect.htm">NiRect</a></span>&lt;<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>&gt; kTerrainSpaceRegion, <br/><span class="NDLSystemFont"><a href="NiTerrainDeformationBuffer.htm">SurfaceMaskBuffer</a></span>* pkMaskBuffer, <br/><span class="NDLSystemFont"><a href="NiTerrainDeformationBuffer.htm">SurfaceMaskBuffer</a></span>* pkMaskSumBuffer = NULL, <br/><span class="NDLSystemFont"><a href="NiTerrainDataSnapshot.htm">NiTerrainDataSnapshot</a></span>* pkSnapshot = NULL)</p>
<p class="NDLRefMemberDescription">Get the mask that a surface uses based on the given heightmap region. </p>
<p class="NDLRefMemberDetailedDescription">This function will populate the given buffer with the relevant information for that mask. The top-left coordinate used is given by the top-left sectorID and the heightmap region coordinate. The bottom-right coordinate is specified in the same way. NOTE: The returned buffer will contain the official region of the returned mask as it may differ from the region given.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pkSurface</span></td>
    <td>The surface that the mask is for. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kTerrainSpaceRegion</span></td>
    <td>The coordinates of the top-left and bottom-right pixels in heightmap space. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkMaskBuffer</span></td>
    <td>The buffer that contains the mask data to apply to the terrain. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkMaskSumBuffer</span></td>
    <td>the buffer that conatins the mask's sum data to use on the terrain </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkSnapshot</span></td>
    <td>the terrain's cells current data buffers </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>true if successful </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_1a84cc13bc25d72104d707f866df62b89e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetSurfaceMask(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span> uiSurfaceIndex, <br/><span class="NDLSystemFont"><a href="../NiMain/NiRect.htm">NiRect</a></span>&lt;<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>&gt; kTerrainSpaceRegion, <br/><span class="NDLSystemFont"><a href="NiTerrainDeformationBuffer.htm">SurfaceMaskBuffer</a></span>* pkMaskBuffer, <br/><span class="NDLSystemFont"><a href="NiTerrainDeformationBuffer.htm">SurfaceMaskBuffer</a></span>* pkMaskSumBuffer = NULL, <br/><span class="NDLSystemFont"><a href="NiTerrainDataSnapshot.htm">NiTerrainDataSnapshot</a></span>* pkSnapshot = NULL)</p>
<p class="NDLRefMemberDescription">Get the mask that a surface uses based on the given heightmap region. </p>
<p class="NDLRefMemberDetailedDescription">This function will populate the given buffer with the relevant information for that mask. The top-left coordinate used is given by the top-left sectorID and the heightmap region coordinate. The bottom-right coordinate is specified in the same way. NOTE: The returned buffer will contain the official region of the returned mask as it may differ from the region given.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">uiSurfaceIndex</span></td>
    <td>The surface index that the mask is for. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kTerrainSpaceRegion</span></td>
    <td>The coordinates of the top-left and bottom-right pixels in heightmap space. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkMaskBuffer</span></td>
    <td>The buffer that contains the mask data to apply to the terrain. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkMaskSumBuffer</span></td>
    <td>the buffer that conatins the mask's sum data to use on the terrain </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkSnapshot</span></td>
    <td>the terrain's cells current data buffers </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>true if successful </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_1a711a0efb97eefac8384f8e92b852afb2"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  SetSurfaceMask(<br/>const <span class="NDLSystemFont"><a href="NiSurface.htm">NiSurface</a></span>* pkSurface, <br/><span class="NDLSystemFont"><a href="NiTerrainDeformationBuffer.htm">SurfaceMaskBuffer</a></span>* pkBuffer, <br/><span class="NDLSystemFont"><a href="NiTerrainDeformationBuffer.htm">SurfaceMaskBuffer</a></span>* pkMaskSumBuffer)</p>
<p class="NDLRefMemberDescription">Set the mask that a surface uses within a specific region. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pkSurface</span></td>
    <td>The surface to set the mask of. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkBuffer</span></td>
    <td>The buffer that contains the mask data to apply to the terrain. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkMaskSumBuffer</span></td>
    <td>the buffer that conatins the mask's sum data to use on the terrain </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>true if successful </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_1af10024a9104614dd74246f2b04fa637b"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  SetSurfaceMask(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span> uiSurfaceIndex, <br/><span class="NDLSystemFont"><a href="NiTerrainDeformationBuffer.htm">SurfaceMaskBuffer</a></span>* pkBuffer, <br/><span class="NDLSystemFont"><a href="NiTerrainDeformationBuffer.htm">SurfaceMaskBuffer</a></span>* pkMaskSumBuffer)</p>
<p class="NDLRefMemberDescription">Set the mask that a surface uses within a specific region. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">uiSurfaceIndex</span></td>
    <td>The surface index to set the mask of. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkBuffer</span></td>
    <td>The buffer that contains the mask data to apply to the terrain. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkMaskSumBuffer</span></td>
    <td>the buffer that conatins the mask's sum data to use on the terrain </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>true if successful </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_1a7fc5f243831182e4bfe6badaa5a286bd"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  AddSurface(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> uiSurfaceIndex, <br/><span class="NDLSystemFont"><a href="../NiMain/NiRect.htm">NiRect</a></span>&lt;<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>&gt; kAffectedSectorRange, <br/><span class="NDLSystemFont"><a href="../NiMain/NiRect.htm">NiRect</a></span>&lt;<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>&gt; kMaskRegion)</p>
<p class="NDLRefMemberDescription">Add the specified surface to the cells in the given region. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">uiSurfaceIndex</span></td>
    <td>the Index to add the surface at </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kAffectedSectorRange</span></td>
    <td>the Range on the affected sector </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kMaskRegion</span></td>
    <td>the affected mask region </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>true if successful </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_1a4046eb2363579ca683c8466e72e43dc2"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetHeightMap(<br/><span class="NDLSystemFont"><a href="../NiMain/NiRect.htm">NiRect</a></span>&lt;<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>&gt; kTerrainSpaceRegion, <br/><span class="NDLSystemFont"><a href="NiTerrainDeformationBuffer.htm">HeightMapBuffer</a></span>* pkBuffer, <br/><span class="NDLSystemFont"><a href="NiTerrainDataSnapshot.htm">NiTerrainDataSnapshot</a></span>* pkSnapshot = NULL)</p>
<p class="NDLRefMemberDescription">Get the heightmap from a particular region of the terrain and return it in a buffer. </p>
<p class="NDLRefMemberDetailedDescription">The heightmap region specified is in terrain space and is an inclusive range.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kTerrainSpaceRegion</span></td>
    <td>the inclusive region of the heightmap to fetch. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkBuffer</span></td>
    <td>a pointer to the buffer to fill with the requested data </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkSnapshot</span></td>
    <td>the terrain's cells current data buffers </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>true if the operation was successful </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_1a4f1d81cf4048d963a9e3ee49003f315b"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  SetHeightMap(<span class="NDLSystemFont"><a href="NiTerrainDeformationBuffer.htm">HeightMapBuffer</a></span>* pkBuffer)</p>
<p class="NDLRefMemberDescription">Set the heightmap of a particular region of the terrain based on the contents of the specified buffer. </p>
<p class="NDLRefMemberDetailedDescription">The buffer must have been initialized first by a call to GetHeightMap. NOTE: This function will only succeed if the terrain is in tool mode.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pkBuffer</span></td>
    <td>The buffer containing the new data. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>true if the operation was successful </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_1adcf3839700e072b9eaba575e9c23baa2"></a>
<p class="NDLRefMemberFunction">void  RestoreDataSnapshot(<span class="NDLSystemFont"><a href="NiTerrainDataSnapshot.htm">NiTerrainDataSnapshot</a></span>* pkSnapshot)</p>
<p class="NDLRefMemberDescription">Restore a snapshot of the terrain's data immediately. </p>
<p class="NDLRefMemberDetailedDescription">The snapshot is generally built up over a series of GetHeightmap and GetSurfaceMask calls in connection with later set operations. This function thus allows an 'undo' of any actions performed. NOTE: This function will only succeed if the terrain is in tool mode. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pkSnapshot</span></td>
    <td>the snapshot to retore </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_1adba5fcc0632a7125589710c166acaceb"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  Collide(<br/><span class="NDLSystemFont"><a href="NiRay.htm">NiRay</a></span>& kRay, <br/><span class="NDLSystemFont">NiUInt32</span> uiDetailLOD = NiTerrainUtils::ms_uiMAX_LOD) const</p>
<p class="NDLRefMemberDescription">Find the closest point of collision on the terrain with the given ray. </p>
<p class="NDLRefMemberDetailedDescription">The collision information is placed within the ray itself. This includes collision point, collision normal and collided cell.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kRay</span></td>
    <td>Ray with which to find the collision point. This is as well a return parameter and information about the collision point will be added in the ray. The ray should hold information about its origin and its direction. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiDetailLOD</span></td>
    <td>Maximum detail level in which to search for an intersection. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>true if collided false otherwise </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_1a23b518d0a0688dde24f2c67e013cff3c"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  Test(<br/><span class="NDLSystemFont"><a href="NiRay.htm">NiRay</a></span>& kRay, <br/><span class="NDLSystemFont">NiUInt32</span> uiDetailLOD = NiTerrainUtils::ms_uiMAX_LOD) const</p>
<p class="NDLRefMemberDescription">Test for a collision. </p>
<p class="NDLRefMemberDetailedDescription">No actual collision points are found as this function only tests to see if a collision exists.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kRay</span></td>
    <td>Ray with which to find the collision point. The ray should hold information about its origin and its direction. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiDetailLOD</span></td>
    <td>Maximum detail level in which to search for an intersection. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>true if collision was detected </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_1a4d84d4115934f8fa175b99d5640830eb"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiTerrainDecal.htm">NiTerrainDecal</a></span>*  CreateDecal(<br/><span class="NDLSystemFont"><a href="../NiMain/NiTexture.htm">NiTexture</a></span>* pkDecalTexture, <br/><span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span> kPosition, <br/><span class="NDLSystemFont">NiUInt32</span> uiSize = 2, <br/><span class="NDLSystemFont">NiUInt32</span> uiRatio = 1, <br/>float fTimeOfDeath = 0.0f, <br/>float fDecayLength = -1.0f, <br/>float fDepthBiasOffset = 0.005f)</p>
<p class="NDLRefMemberDescription">Creates a decal on the terrain according to the information given. </p>
<p class="NDLRefMemberDetailedDescription">Note that if only a texture and a position are given, the decal will be created with default values.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pkDecalTexture</span></td>
    <td><span class="NDLSystemFont"><a href="../NiMain/NiTexture.htm">NiTexture</a></span> to apply on the decal. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kPosition</span></td>
    <td>Position in world coordinates around which to center the decal. The decal will be aligned and projected to the surface of the terrain. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiSize</span></td>
    <td>Side length of the decal. The decal will always be square so this represents both the X and Y components </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiRatio</span></td>
    <td>The scale of the decal texture itself within the decal. A larger ratio value will result in a smaller texture within the decal. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fTimeOfDeath</span></td>
    <td>accum application time at which the decal will be destroyed </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fDecayLength</span></td>
    <td>Time, in seconds, before fTimeOfDeath that the decal will start to become transparent </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fDepthBiasOffset</span></td>
    <td>Small offset to apply to the decal such that it does not cause depth buffer fighting artifacts. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A pointer to the created decal object. Care should be taken, as this pointer will become invalid once the decal has expired. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_1abfff2e9f7f17e09a3fecc21344de628c"></a>
<p class="NDLRefMemberFunction">void  AddDecal(<span class="NDLSystemFont"><a href="NiTerrainDecal.htm">NiTerrainDecal</a></span>* pkDecal)</p>
<p class="NDLRefMemberDescription">Add a decal object to the terrain's decal manager. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pkDecal</span></td>
    <td>the decal to add to the manager </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_1a086609a3c96b42d66954f80969fc785b"></a>
<p class="NDLRefMemberFunction">void  RemoveDecal(<span class="NDLSystemFont"><a href="NiTerrainDecal.htm">NiTerrainDecal</a></span>* pkDecal)</p>
<p class="NDLRefMemberDescription">Remove a decal object from the terrain. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pkDecal</span></td>
    <td>pointer to the decal to remove </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_1a69eb672c07c8fc8a136c700820172ed5"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetSurfaceOpacity(<br/><span class="NDLSystemFont"><a href="NiRay.htm">NiRay</a></span>& kRay, <br/>const <span class="NDLSystemFont"><a href="NiSurface.htm">NiSurface</a></span>* pkSurface, <br/><span class="NDLSystemFont">NiUInt8</span>& ucOpacity, <br/><span class="NDLSystemFont">NiUInt32</span> uiDetailLevel = NiTerrainUtils::ms_uiMAX_LOD, <br/><span class="NDLSystemFont">bool</span> bIncludeLowerDetail = true) const</p>
<p class="NDLRefMemberDescription">Collide the given ray with the terrain, at the given detail level to find the alpha of the given surface at that point. </p>
<p class="NDLRefMemberDetailedDescription">Collision world location is placed in the ray</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kRay</span></td>
    <td>ray to collide with the terrain </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkSurface</span></td>
    <td>Surface we want the alpha value of </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">ucOpacity</span></td>
    <td>Discovered alpha value. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiDetailLevel</span></td>
    <td>Detail level </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">bIncludeLowerDetail</span></td>
    <td>Checks lower detail levels for mask values as well. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>returns true if successful false otherwise </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_1aae30df119f6a1829c5452acd83c0b048"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetMetaData(<br/><span class="NDLSystemFont"><a href="NiRay.htm">NiRay</a></span>& kRay, <br/><span class="NDLSystemFont"><a href="../efd/efd__map.htm">efd::map</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>, <span class="NDLSystemFont"><a href="NiMetaData.htm">NiMetaData</a></span>&gt;& kMetaData) const</p>
<p class="NDLRefMemberDescription">Gets all the meta-data from the terrain where the point at which the meta-data is retrieved is computed by intersecting with the terrain along the specified ray. </p>
<p class="NDLRefMemberDetailedDescription">Note, the meta-data associated with materials that are not impacting the terrain at the computed intersection (the layer mask has a zero weight) are not returned. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kRay</span></td>
    <td>Ray with which to intersect the terrain. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kMetaData</span></td>
    <td>Map of terrain materials to the meta-data associated with that material. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if successful, false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_1a39e2832857e78d76ad7f67f2381c9d2f"></a>
<p class="NDLRefMemberFunction">void  GetMetaData(<br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kIntersectionPt, <br/>const <span class="NDLSystemFont"><a href="NiTerrainCell.htm">NiTerrainCell</a></span>* pkLeaf, <br/><span class="NDLSystemFont"><a href="../efd/efd__map.htm">efd::map</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>, <span class="NDLSystemFont"><a href="NiMetaData.htm">NiMetaData</a></span>&gt;& kMetaData) const</p>
<p class="NDLRefMemberDescription">Gets all the meta-data from the terrain at the specified intersection point. </p>
<p class="NDLRefMemberDetailedDescription">Note, the meta-data associated with materials that are not impacting the terrain at the computed intersection (the layer mask has a zero weight) are not returned. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kIntersectionPt</span></td>
    <td>Intersection point with which to retrieve meta data. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkLeaf</span></td>
    <td>Terrain leaf at which the intersection occurred. This is usually retrieved from the ray after a collision has occurred. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kMetaData</span></td>
    <td>Map of terrain materials to the meta-data associated with that material. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_1ac516666503f42dd1f20175f83f497ae1"></a>
<p class="NDLRefMemberFunction">void  QueryMetaData(<br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kIntersectionPt, <br/>const <span class="NDLSystemFont"><a href="NiTerrainCellLeaf.htm">NiTerrainCellLeaf</a></span>* pkLeaf, <br/><span class="NDLSystemFont"><a href="NiTerrain__MetaDataVisitor.htm">MetaDataVisitor</a></span>* pkVisitor) const</p>
<p class="NDLRefMemberDescription">Calls a visitor functor for each meta-data object on a surface with a non-zero opacity at the specified intersection point. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kIntersectionPt</span></td>
    <td>Intersection point with which to retrieve meta-data. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkLeaf</span></td>
    <td>Terrain leaf at which the intersection occurred. This is usually retrieved from the ray after a collision has occurred. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkVisitor</span></td>
    <td>Visitor functor that will be called for each meta-data object found on a surface with non-zero opacity at the intersection pt. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_1a34e9a039792d47e6ffaaed726598c29b"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetBlendedMetaData(<br/><span class="NDLSystemFont"><a href="NiRay.htm">NiRay</a></span>& kRay, <br/><span class="NDLSystemFont"><a href="../efd/efd__map.htm">efd::map</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>, <span class="NDLSystemFont"><a href="NiMetaData.htm">NiMetaData</a></span>&gt;& kMetaData, <br/><span class="NDLSystemFont"><a href="NiMetaData.htm">NiMetaData</a></span>& kBlendedMetaData) const</p>
<p class="NDLRefMemberDescription">Gets all the meta-data from the terrain at the intersection point between the given ray and the terrain. </p>
<p class="NDLRefMemberDetailedDescription">Also returns a blended meta-data for all the meta data values at this point. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kRay</span></td>
    <td>Ray with which to intersect the terrain. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kMetaData</span></td>
    <td>Map of terrain materials to the meta-data associated with that material. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kBlendedMetaData</span></td>
    <td>the resulting blended meta data values </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if successful, false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_1a584fb631837ae5f7f553c977ae7d70ae"></a>
<p class="NDLRefMemberFunction">void  GetBlendedMetaData(<br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kIntersectionPt, <br/>const <span class="NDLSystemFont"><a href="NiTerrainCell.htm">NiTerrainCell</a></span>* pkLeaf, <br/><span class="NDLSystemFont"><a href="../efd/efd__map.htm">efd::map</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>, <span class="NDLSystemFont"><a href="NiMetaData.htm">NiMetaData</a></span>&gt;& kMetaData, <br/><span class="NDLSystemFont"><a href="NiMetaData.htm">NiMetaData</a></span>& kBlendedMetaData) const</p>
<p class="NDLRefMemberDescription">Gets all the meta-data from the terrain at the given point. </p>
<p class="NDLRefMemberDetailedDescription">Also returns a blended meta-data for all the meta data values at this point. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kIntersectionPt</span></td>
    <td>Intersection point with which to retrieve meta data. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkLeaf</span></td>
    <td>Terrain leaf at which the intersection occurred. This is usually retrieved from the ray after a collision has occurred. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kMetaData</span></td>
    <td>Map of terrain materials to the meta-data associated with that material. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kBlendedMetaData</span></td>
    <td>the resulting blended meta data values </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if successful, false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_1a2e5736aabf5ef8f31eab9c912779391a"></a>
<p class="NDLRefMemberFunction">float  GetSurfaceMaskDensity()</p>
<p class="NDLRefMemberDescription">Get the density of the material mask pixels per vertex. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>The resulting density </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_1a70bd15e6c7125162b7a3c40f10b71cbc"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiInt32</span>  AddSurface(const <span class="NDLSystemFont"><a href="NiSurface.htm">NiSurface</a></span>* pkSurface)</p>
<p class="NDLRefMemberDescription">Add a surface to the terrain surface index to allow that surface to be painted on a sector of this terrain. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pkSurface</span></td>
    <td>the surface to allow painting with </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>the index that surface is added to </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_1a141dc16cdc00a355665eb6814c5155fd"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  InsertSurface(<br/>const <span class="NDLSystemFont"><a href="NiSurface.htm">NiSurface</a></span>* pkSurface, <br/><span class="NDLSystemFont">NiInt32</span> uiSurfaceIndex)</p>
<p class="NDLRefMemberDescription">Insert a surface to the specified terrain index. </p>
<p class="NDLRefMemberDetailedDescription">The index must be empty in order to successfully insert the surface. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pkSurface</span></td>
    <td>the surface that should be inserted </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiSurfaceIndex</span></td>
    <td>the index where to insert the surface </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>true is insertion was succesful </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_1a0cbfeed7ef054699ffed6c690654a685"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiInt32</span>  RemoveSurface(const <span class="NDLSystemFont"><a href="NiSurface.htm">NiSurface</a></span>* pkSurface)</p>
<p class="NDLRefMemberDescription">Remove a surface from the terrain surface index. </p>
<p class="NDLRefMemberDetailedDescription">This will result in the surface being removed from all sectors.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pkSurface</span></td>
    <td>the surface to allow painting with </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The index where the surface was found. -1 if surface is null </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_1a8b8fc80ed8cbbbcd7c81cb352ab63f3d"></a>
<p class="NDLRefMemberFunction">void  RemoveAllSurfaces()</p>
<p class="NDLRefMemberDescription">Remove all surfaces on a terrain. </p>
<p class="NDLRefMemberDetailedDescription">This will reset the terrain surface index as well. </p>

<a name="class_ni_terrain_1af6bde591fb0b07e4a8df59bee3d50f2a"></a>
<p class="NDLRefMemberFunction">void  OnSurfacePackageUpdated(<br/><span class="NDLSystemFont"><a href="NiSurfacePackage.htm">NiSurfacePackage</a></span>* pkPackage, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& kAssetID)</p>
<p class="NDLRefMemberDescription">This event is fired whenever a material package reference has been resolved by the relevant asset resolver. </p>

<a name="class_ni_terrain_1ac34defd7d0aeeff9be588c312a8976ce"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  CheckPackageIteration(<span class="NDLSystemFont"><a href="NiSurfacePackage.htm">NiSurfacePackage</a></span>* pkPackage) const</p>
<p class="NDLRefMemberDescription">Check if pkPackage's iteration matches the surface references used by this terrain object. </p>
<p class="NDLRefMemberDetailedDescription">If this function returns true, then the terrain should be resaved from the tools. </p>

<a name="class_ni_terrain_1a9f07480c7a9efbe343fe4fb65b9cf1be"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetSurfaceEntry(<br/><span class="NDLSystemFont">NiUInt32</span> uiSurfaceIndex, <br/><span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>& kPackageID, <br/><span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>& kSurfaceID)</p>
<p class="NDLRefMemberDescription">Fetch the data required to resolve a surface and the pointer that needs to be modified in order to set the surface. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">uiSurfaceIndex</span></td>
    <td>the index we want to get surface data at </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kPackageID</span></td>
    <td>OUT The package ID found for the index </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kSurfaceID</span></td>
    <td>OUT The surface ID found for the index </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True is successful false ortherwise </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_1a4b5cf1adea70c7e529538eb9e8247057"></a>
<p class="NDLRefMemberFunction">void  UpdateSurfaceEntry(<br/><span class="NDLSystemFont">NiUInt32</span> uiSurfaceIndex, <br/><span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span> kPackageID, <br/><span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span> kSurfaceID, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> uiPackageIteration)</p>
<p class="NDLRefMemberDescription">Update the surface entry at the given position. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">uiSurfaceIndex</span></td>
    <td>the index we want to get surface data at </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kPackageID</span></td>
    <td>the new package ID </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kSurfaceID</span></td>
    <td>the new surface ID </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiPackageIteration</span></td>
    <td>the iteration of the package to reference </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_1a02f13764b4bca7391801867d95ed026a"></a>
<p class="NDLRefMemberFunction">void  ResolveSurface(<br/><span class="NDLSystemFont">NiUInt32</span> uiSurfaceIndex, <br/><span class="NDLSystemFont"><a href="NiSurface.htm">NiSurface</a></span>* pkSurface)</p>
<p class="NDLRefMemberDescription">Resolve a single surface's entry into an actual surface object. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">uiSurfaceIndex</span></td>
    <td>the index to resolve the surface at </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkSurface</span></td>
    <td>the surface to resolve </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_1aa5b9676f34acb98cac57c09af22d369f"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetNumUnresolvedSurfaces()</p>
<p class="NDLRefMemberDescription">Get the number of unresolved surfaces on the terrain. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>the number of unresolved surfaces </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_1a90f1c5ccd650141d3fc12f85c96289de"></a>
<p class="NDLRefMemberFunction">void  NotifySurfacePackageLoaded(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& kAssetID, <br/><span class="NDLSystemFont"><a href="NiSurfacePackage.htm">NiSurfacePackage</a></span>* pkPackage)</p>
<p class="NDLRefMemberDescription">Notify the terrain that a specific surface package has just loaded. </p>
<p class="NDLRefMemberDetailedDescription">This will cause terrain to look through the package for any surfaces it requires and compile them. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kAssetID</span></td>
    <td>the Asset ID of the package that was just loaded. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkPackage</span></td>
    <td>The package that was just laoded. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_1ab8b39517bd4b1c650fe540af2c73ce22"></a>
<p class="NDLRefMemberFunction">void  NotifySurfaceChanged(const <span class="NDLSystemFont"><a href="NiSurface.htm">NiSurface</a></span>* pkSurface)</p>
<p class="NDLRefMemberDescription">Notify the terrain that a specific surface has changed in some way. </p>
<p class="NDLRefMemberDetailedDescription">Must be called after changing any of the properties of a surface that is used by this terrain.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pkSurface</span></td>
    <td>the Surface that was changed </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_1ad351e4c792e3326099b949f5f9d8c40e"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="NiSurface.htm">NiSurface</a></span>*  GetSurfaceAt(<span class="NDLSystemFont">NiUInt32</span> uiIndex)</p>
<p class="NDLRefMemberDescription">Fetch the surface that is represented by the given index. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">uiIndex</span></td>
    <td>the index used to represent the surface. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A pointer to the surface </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_1a47e0aa0f3d50822702d73b345bb67f4c"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiInt32</span>  GetSurfaceIndex(const <span class="NDLSystemFont"><a href="NiSurface.htm">NiSurface</a></span>* pkSurface)</p>
<p class="NDLRefMemberDescription">Get the index of a specific surface that the terrain uses to reference that surface. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pkSurface</span></td>
    <td>the surface to find the index of. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>the index of the given surface </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_1a014ef98cb7e4615913a7a3f11df9f0d2"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiInt32</span>  GetSurfaceIndex(<br/><span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span> kPackageID, <br/><span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span> kSurfaceID)</p>
<p class="NDLRefMemberDescription">Get the index of a specific surface by it's name and package ID. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kPackageID</span></td>
    <td>the Id of the package we want the index of </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kSurfaceID</span></td>
    <td>the id Of the surface we want the index of </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>the index of the surface </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_1a19ecc26c290ea42996f5eaa6ff7306b1"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  GetNumSurfaces()</p>
<p class="NDLRefMemberDescription">Get the number of surfaces that this terrain has registered for use. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>the number of surfaces </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_1a993cb037ce61a432eab608d81520f038"></a>
<p class="NDLRefMemberFunction">virtual void  UpdateDownwardPass(<span class="NDLSystemFont"><a href="../NiMain/NiUpdateProcess.htm">NiUpdateProcess</a></span>& kUpdate)</p>
<p class="NDLRefMemberDescription">Modify the default behaviour of <span class="NDLSystemFont"><a href="../NiMain/NiNode.htm">NiNode</a></span> so that all bounding information is retrieved from the base level of detail. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription"><span class="NDLSystemFont"><a href="../NiMain/NiNode.htm">NiNode</a></span></p></p>

<a name="class_ni_terrain_1a8a9c0cee281eda93160b0c95f8f3636d"></a>
<p class="NDLRefMemberFunction">virtual void  UpdateSelectedDownwardPass(<span class="NDLSystemFont"><a href="../NiMain/NiUpdateProcess.htm">NiUpdateProcess</a></span>& kUpdate)</p>
<p class="NDLRefMemberDescription">Modify the default behaviour of <span class="NDLSystemFont"><a href="../NiMain/NiNode.htm">NiNode</a></span> so that all bounding information is retrieved from the base level of detail. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription"><span class="NDLSystemFont"><a href="../NiMain/NiNode.htm">NiNode</a></span></p></p>

<a name="class_ni_terrain_1a4726545148ca214bec997f0b33bc5d90"></a>
<p class="NDLRefMemberFunction">virtual void  UpdateRigidDownwardPass(<span class="NDLSystemFont"><a href="../NiMain/NiUpdateProcess.htm">NiUpdateProcess</a></span>& kUpdate)</p>
<p class="NDLRefMemberDescription">Modify the default behaviour of <span class="NDLSystemFont"><a href="../NiMain/NiNode.htm">NiNode</a></span> so that all bounding information is retrieved from the base level of detail. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription"><span class="NDLSystemFont"><a href="../NiMain/NiNode.htm">NiNode</a></span></p></p>

<a name="class_ni_terrain_1af6e6c93f0b38e0a01ac6cf81d7124142"></a>
<p class="NDLRefMemberFunction">void  EnforceValidBound()</p>
<p class="NDLRefMemberDescription">Modify the default behaviour of <span class="NDLSystemFont"><a href="../NiMain/NiNode.htm">NiNode</a></span> so that all bounding information is retrieved from the base level of detail. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription"><span class="NDLSystemFont"><a href="../NiMain/NiNode.htm">NiNode</a></span></p></p>

<a name="class_ni_terrain_1aa62431e5f33d1822e6d5c7ddef286e2b"></a>
<p class="NDLRefMemberFunction">virtual void  UpdateEffectsDownward(<span class="NDLSystemFont"><a href="../NiMain/NiDynamicEffectState.htm">NiDynamicEffectState</a></span>* pkParentState)</p>
<p class="NDLRefMemberDescription">Modify the default behavior of <span class="NDLSystemFont"><a href="../NiMain/NiNode.htm">NiNode</a></span> so we can keep data on the effect and property states. </p>

<a name="class_ni_terrain_1a6ba22bd5ad92a32022dd5177d527e652"></a>
<p class="NDLRefMemberFunction">virtual void  UpdatePropertiesDownward(<span class="NDLSystemFont"><a href="../NiMain/NiPropertyState.htm">NiPropertyState</a></span>* pkParentState)</p>
<p class="NDLRefMemberDescription">Modify the default behavior of <span class="NDLSystemFont"><a href="../NiMain/NiNode.htm">NiNode</a></span> so we can keep data on the effect and property states. </p>

<a name="class_ni_terrain_1a89db4b0950a537bf5a052baeb978660d"></a>
<p class="NDLRefMemberFunction">virtual void  OnVisible(<span class="NDLSystemFont"><a href="../NiMain/NiCullingProcess.htm">NiCullingProcess</a></span>& kCuller)</p>
<p class="NDLRefMemberDescription">Controls the way a sector's visible set is built when using the <span class="NDLSystemFont"><a href="../NiMain/NiNode.htm">NiNode</a></span> system. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription"><span class="NDLSystemFont"><a href="../NiMain/NiNode.htm">NiNode</a></span></p></p>

<a name="class_ni_terrain_1a009378d4e1ef9cc08474444739e17f05"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  HasShapeChangedLastUpdate()</p>
<p class="NDLRefMemberDescription">This function will return true if during the last update a deformation or translation/scaling/rotation of the terrain occurred. </p>
<p class="NDLRefMemberDetailedDescription">This function is useful in determining when to update any water objects associated with this terrain. </p>

<a name="class_ni_terrain_1a83322b7d9ec2241acc2bdf67a9b83922"></a>
<p class="NDLRefMemberFunction">void  SetShapeChangedLastUpdate(<span class="NDLSystemFont">bool</span> bChanged)</p>
<p class="NDLRefMemberDescription">This function will return true if during the last update a deformation or translation/scaling/rotation of the terrain occurred. </p>
<p class="NDLRefMemberDetailedDescription">This function is useful in determining when to update any water objects associated with this terrain. </p>

<a name="class_ni_terrain_1a4637bb0dd7db82c9b0dbe3d5187661f6"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>  CreateSurfacePath(const <span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>& kTerrainPath)</p>
<p class="NDLRefMemberDescription">Generate the absolute path to the surfaces used for this terrain based upon the terrain path given. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kTerrainPath</span></td>
    <td>the terrain path </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>the absolute path to use </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_1a99d0911db6d4a158273ad63cb8876957"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  Save(<br/>const char* pcFileName = 0, <br/><span class="NDLSystemFont">NiUInt32</span>* puiErrorCode = 0)</p>
<p class="NDLRefMemberDescription">Trigger a save of all attached sectors data to disk, in the directory and format currently specified by this component. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pcFileName</span></td>
    <td>The archive directory to save to. If this value is 0 then the currently set archive directory will be used. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">puiErrorCode</span></td>
    <td>Pointer to the OR'd mask of error codes from the operation. Error codes are enumerated in <span class="NDLSystemFont"><a href="NiTerrainSector.htm">NiTerrainSector</a></span>. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>whether saving was successful or not </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_1ae1caaf3e05475b735d870ee44079c71d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  Load(<br/>const char* pcFileName = 0, <br/><span class="NDLSystemFont">NiUInt32</span>* puiErrorCode = 0)</p>
<p class="NDLRefMemberDescription">Trigger a load of all attached sectors data from disk, according to to the format currently specified.3. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pcFileName</span></td>
    <td>The archive directory to load from. If this value is 0 then the currently set archive directory will be used. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">puiErrorCode</span></td>
    <td>Pointer to the OR'd mask of error codes from the operation. Error codes are enumerated in <span class="NDLSystemFont"><a href="NiTerrainSector.htm">NiTerrainSector</a></span>. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>whether loading was successful or not </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_1af19120501e89d1a4b4b52cd2a7e4e874"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  PageSector(<br/><span class="NDLSystemFont">NiInt16</span> sIndexX, <br/><span class="NDLSystemFont">NiInt16</span> sIndexY, <br/><span class="NDLSystemFont">NiInt32</span> iLOD)</p>
<p class="NDLRefMemberDescription">Adds a load or unload task to the paging manager as required so that the given is loaded in the background to the specified LOD. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">sIndexX</span></td>
    <td>the x index of the sector we want to load </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">sIndexY</span></td>
    <td>the y index of the sector we want to load </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">iLOD</span></td>
    <td>the LOD that should be loaded for this sector </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>true if this page request was successfully added to the loading managers queue, false if it could not be added (for example, the sector is already being paged) </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_1af8de772347f6c87283008d7af571b6be"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  CreateBlankSector(<br/><span class="NDLSystemFont">NiInt16</span> sIndexX, <br/><span class="NDLSystemFont">NiInt16</span> sIndexY, <br/><span class="NDLSystemFont">bool</span> bWaitForCompletion = false)</p>
<p class="NDLRefMemberDescription">Creates a new task in the loading manager to create a new sector at the given index with a blank height map. </p>
<p class="NDLRefMemberDetailedDescription">The task will be executed as normal in the background, if enabled. This function assumes that no sector has been paged in at this index.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">sIndexX</span></td>
    <td>the x coordinate of the sector to create a task for </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">sIndexY</span></td>
    <td>the y coordinate of the sector to create a task for </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">bWaitForCompletion</span></td>
    <td>whether we should wait for the end of the task </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>false if a task could not be added to the loading manager, or a sector already exists at the given index. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_1a7d770fce2cb5ccfe16876083abfd72c0"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  RebuildGeometry()</p>
<p class="NDLRefMemberDescription">Request that the terrain rebuild the geometry on all it's loaded sectors. </p>
<p class="NDLRefMemberDetailedDescription">This function should be called after setting the min and max heights and other functions that affect the geometry of a terrain. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>whether rebuilding was successful or not </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_1a1a020ddced8ebce1629c444e9bc69fb8"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsSectorOnDisk(<br/><span class="NDLSystemFont">NiInt16</span> iSectorX, <br/><span class="NDLSystemFont">NiInt16</span> iSectorY)</p>
<p class="NDLRefMemberDescription">Check to see if the specified sector exists on the disk. </p>
<p class="NDLRefMemberDetailedDescription">This function is to be used in figuring out if a sector exists before requesting that sector to load. Loading a sector that does not exist on disk will result in a blank sector being created at that position.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">iSectorX</span></td>
    <td>X coordinate of the sector to check </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">iSectorY</span></td>
    <td>Y coordinate of the sector to check </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>returns true if the sector was found. false otherwise </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_1ab714b7dc738b92651056e2effa300150"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  LoadSectorMaterialMasks(<br/><span class="NDLSystemFont">NiInt16</span> sXIndex, <br/><span class="NDLSystemFont">NiInt16</span> sYIndex, <br/><span class="NDLSystemFont">NiUInt32</span>* puiErrorCode = 0)</p>
<p class="NDLRefMemberDescription">Loads the layer material masks for the sector specified by the given sector coordinates. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">sXIndex</span></td>
    <td>X index of the sector to load. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">sYIndex</span></td>
    <td>Y index of the sector to load. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">puiErrorCode</span></td>
    <td>Optional pointer to an OR'd mask of error codes from the operation. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>whether this was successful or not </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_1ae849449a0abcd970114a88624cb99a5f"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>&  GetArchivePath() const</p>
<p class="NDLRefMemberDescription">The path containing all the sector folders to be used by this terrain. </p>
<p class="NDLRefMemberDetailedDescription">An update must be executed on the terrain for changes to this value to be reflected in the sectors.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">during runtime, changing the storage filename could cause a large amount of loading to occur on the next update. It is recommended set the storage filename once upon initialization of the terrain. </p></p>

<a name="class_ni_terrain_1a3ae6f2cf63a4eef65a309c6d42f582f5"></a>
<p class="NDLRefMemberFunction">void  SetArchivePath(const <span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>& kArchive)</p>
<p class="NDLRefMemberDescription">The path containing all the sector folders to be used by this terrain. </p>
<p class="NDLRefMemberDetailedDescription">An update must be executed on the terrain for changes to this value to be reflected in the sectors.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">during runtime, changing the storage filename could cause a large amount of loading to occur on the next update. It is recommended set the storage filename once upon initialization of the terrain. </p></p>

<a name="class_ni_terrain_1aa9133b17330b6be6429ec4ca6b3ed450"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  GetLODMode() const</p>
<p class="NDLRefMemberDescription">Use these functions to control the method used to perform LOD transitions on the terrain. </p>
<p class="NDLRefMemberDetailedDescription">The following modes are supported: LOD_MODE_2D - Uses the camera's X and Y position to determine the level of detail to display. Z is ignored. LOD_MODE_25D - Uses the camera's X and Y position as in 2D mode, but a maximum level of detail is placed on the terrain according to the camera's Z height. LOD_MODE_3D - Uses the camera's XYZ position to determine the level of detail to display. This mode may cause cracks and popping to appear on terrains that have quite steep regions. </p>

<a name="class_ni_terrain_1a2af55e981ec42eebaa4f68711909e064"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  SetLODMode(<span class="NDLSystemFont">NiUInt32</span> uiLODMode)</p>
<p class="NDLRefMemberDescription">Use these functions to control the method used to perform LOD transitions on the terrain. </p>
<p class="NDLRefMemberDetailedDescription">The following modes are supported: LOD_MODE_2D - Uses the camera's X and Y position to determine the level of detail to display. Z is ignored. LOD_MODE_25D - Uses the camera's X and Y position as in 2D mode, but a maximum level of detail is placed on the terrain according to the camera's Z height. LOD_MODE_3D - Uses the camera's XYZ position to determine the level of detail to display. This mode may cause cracks and popping to appear on terrains that have quite steep regions. </p>

<a name="class_ni_terrain_1a79e52ee71fff7ed776a1318d88836673"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  GetCellSize() const</p>
<p class="NDLRefMemberDescription">The size of each quadtree block in the terrain in quads. </p>
<p class="NDLRefMemberDetailedDescription">The width of the block in vertices will be (BlockSize + 1).</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">a each block shares vertices with neighboring blocks. </p></p>

<a name="class_ni_terrain_1a723f639be85293b5d3822db36ef95e6c"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  SetCellSize(<span class="NDLSystemFont">NiUInt32</span> uiCellSize)</p>
<p class="NDLRefMemberDescription">The size of each quadtree block in the terrain in quads. </p>
<p class="NDLRefMemberDetailedDescription">The width of the block in vertices will be (BlockSize + 1).</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">a each block shares vertices with neighboring blocks. </p></p>

<a name="class_ni_terrain_1a88c5de94cdca7f794843bb959066e819"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  GetNumLOD() const</p>
<p class="NDLRefMemberDescription">The number of levels of detail to allow per sector NOT including the highest level of detail. </p>
<p class="NDLRefMemberDetailedDescription">i.e. a setting of 0 effectively makes the terrain a simple heightfield. </p>

<a name="class_ni_terrain_1a9d2c901cf3b28885c4747a8316f4d42b"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  SetNumLOD(<span class="NDLSystemFont">NiUInt32</span> uiNumLOD)</p>
<p class="NDLRefMemberDescription">The number of levels of detail to allow per sector NOT including the highest level of detail. </p>
<p class="NDLRefMemberDetailedDescription">i.e. a setting of 0 effectively makes the terrain a simple heightfield. </p>

<a name="class_ni_terrain_1a5ebafa60dabcd78803aee951a338ed6a"></a>
<p class="NDLRefMemberFunction">void  SetMaxHeight(float fHeight)</p>
<p class="NDLRefMemberDescription">The minimum and maximum heights of the terrain. </p>
<p class="NDLRefMemberDetailedDescription">These values are used to interpret the height map of the terrain during loading and saving. A call to RebuildGeometry must be made after changing these values. </p>

<a name="class_ni_terrain_1abb40b66befe85e976edce669ca94368b"></a>
<p class="NDLRefMemberFunction">float  GetMaxHeight() const</p>
<p class="NDLRefMemberDescription">The minimum and maximum heights of the terrain. </p>
<p class="NDLRefMemberDetailedDescription">These values are used to interpret the height map of the terrain during loading and saving. A call to RebuildGeometry must be made after changing these values. </p>

<a name="class_ni_terrain_1a540145055bd73eb1f0f3e1e441e65c61"></a>
<p class="NDLRefMemberFunction">void  SetMinHeight(float fHeight)</p>
<p class="NDLRefMemberDescription">The minimum and maximum heights of the terrain. </p>
<p class="NDLRefMemberDetailedDescription">These values are used to interpret the height map of the terrain during loading and saving. A call to RebuildGeometry must be made after changing these values. </p>

<a name="class_ni_terrain_1aa4c3f682e0d33744af726700c08bc50d"></a>
<p class="NDLRefMemberFunction">float  GetMinHeight() const</p>
<p class="NDLRefMemberDescription">The minimum and maximum heights of the terrain. </p>
<p class="NDLRefMemberDetailedDescription">These values are used to interpret the height map of the terrain during loading and saving. A call to RebuildGeometry must be made after changing these values. </p>

<a name="class_ni_terrain_1aea691e2d4482398b76304196168bf812"></a>
<p class="NDLRefMemberFunction">void  SetVertexSpacing(float fSpacing)</p>
<p class="NDLRefMemberDescription">The distance between each vertex of the terrain. </p>
<p class="NDLRefMemberDetailedDescription">(Allows X-Y scaling without the Z). </p>

<a name="class_ni_terrain_1a5a083849370db2f635181278126c1611"></a>
<p class="NDLRefMemberFunction">float  GetVertexSpacing() const</p>
<p class="NDLRefMemberDescription">The distance between each vertex of the terrain. </p>

<a name="class_ni_terrain_1a46d30c97f59256563674665259aa07d5"></a>
<p class="NDLRefMemberFunction">float  CalcTerrainSpaceHeight(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span> heightMapValue)</p>
<p class="NDLRefMemberDescription">Transform a terrain's heightmap value into a terrain space height. </p>

<a name="class_ni_terrain_1a11d63b43e452c41635a51d59c7046c7d"></a>
<p class="NDLRefMemberFunction">float  CalcWorldSpaceHeight(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span> heightMapValue)</p>
<p class="NDLRefMemberDescription">Transform a terrain's heightmap value into a world space height. </p>

<a name="class_ni_terrain_1a468c79048c8f242630d5b8dcf3c8272e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetMaskSize() const</p>
<p class="NDLRefMemberDescription">Get function for the sector mask size. </p>

<a name="class_ni_terrain_1a73627fd668cbfa698aeb7c4f0bce13c8"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  SetMaskSize(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> uiMaskSize)</p>
<p class="NDLRefMemberDescription">Set function for the sector mask size. </p>

<a name="class_ni_terrain_1a163c9e16396d7e29120fc8c6304eb4aa"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  GetLowDetailTextureSize() const</p>
<p class="NDLRefMemberDescription">Get function for the sector low detail texture size. </p>

<a name="class_ni_terrain_1abb28813e0bbd33e1aed0b3bacc73bc88"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  SetLowDetailTextureSize(<span class="NDLSystemFont">NiUInt32</span> uiMaskSize)</p>
<p class="NDLRefMemberDescription">Set function for the sector low detail texture size. </p>

<a name="class_ni_terrain_1a73d3aa963f203a11c0ed1ec7795e6867"></a>
<p class="NDLRefMemberFunction">float  GetLowDetailSpecularPower() const</p>
<p class="NDLRefMemberDescription">Get function for the low detail specular power. </p>

<a name="class_ni_terrain_1ad3675e2392c4c76695af6e6b2e7bcdf6"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  SetLowDetailSpecularPower(float fPower)</p>
<p class="NDLRefMemberDescription">Set function for the low detail specular power. </p>

<a name="class_ni_terrain_1a492406041e6d8d4f2ec307e69cdd8fc6"></a>
<p class="NDLRefMemberFunction">float  GetLowDetailSpecularIntensity() const</p>
<p class="NDLRefMemberDescription">Getfunction for the low detail specular intensity. </p>

<a name="class_ni_terrain_1a5eff39c72bdb7ad4994083147bb310c6"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  SetLowDetailSpecularIntensity(float fIntensity)</p>
<p class="NDLRefMemberDescription">Set function for the low detail specular intensity. </p>

<a name="class_ni_terrain_1ad0167a9b61705c2570b430e2025fba9f"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  GetCalcSectorSize() const</p>
<p class="NDLRefMemberDescription">The size of a sector in vertices based upon the block size and NumLOD settings. </p>
<p class="NDLRefMemberDetailedDescription">The calculated sector size is calculated using the following formula: BlockSize* (2 ^ NumLOD) + 1.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>the size of a sector </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_1aa2f5a74850e92e837586ba9b7fb71ea5"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../NiMain/NiTMap.htm">NiTMap</a></span>&lt;<span class="NDLSystemFont">NiUInt32</span>, <span class="NDLSystemFont"><a href="NiTerrainSector.htm">NiTerrainSector</a></span>*&gt;&  GetLoadedSectors() const</p>
<p class="NDLRefMemberDescription">Function that returns a map of all the sectors currently loaded. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>sectors currently loaded </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_1aad4346ce82eff5846579df35cc5fc941"></a>
<p class="NDLRefMemberFunction">void  SetRenderedCellsPerFrame(<span class="NDLSystemFont">NiUInt32</span> uiNumCells)</p>
<p class="NDLRefMemberDescription">Sets the number of cells that can be rendered in one frame during a low detail texture update. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">uiNumCells</span></td>
    <td>Number of cells to be rendered </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_1afdcca64bdb074db6f0a45b92f21cbcb2"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  GetRenderedCellsPerFrame()</p>
<p class="NDLRefMemberDescription">Gets the number of cells that can be rendered in one frame during a low detail texture update. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>the number of cells to be rendered </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_1adf3033d02f7bc1a08bf23e363170be66"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../NiMain/NiRenderStep.htm">NiRenderStep</a></span>*  GetLowDetailRenderStep()</p>
<p class="NDLRefMemberDescription">Get the <span class="NDLSystemFont"><a href="../NiMain/NiRenderStep.htm">NiRenderStep</a></span> used to update the Low detail textures on all of the sectors. </p>
<p class="NDLRefMemberDetailedDescription">The first call to this function will create the renderstep, all other calls will simply return the previously created one. This function may be called to allow terrains that are often modified to be updated using the frame rendering system.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>the low detail render step </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_1a9d9f9c353e683225743bf0f59c29acd6"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  RenderLowDetailTextures(<span class="NDLSystemFont">NiUInt32</span>* puiErrorCode = 0)</p>
<p class="NDLRefMemberDescription">Calling this function forces the low detail textures of the terrain's sectors to be updated immediately. </p>
<p class="NDLRefMemberDetailedDescription">This may involve rendering to a number of offscreen textures during this call. This method is provided as an alternative to using the frame rendering system, and allows the textures to be explicitly told to update.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">puiErrorCode</span></td>
    <td>returned code to give extra information upon failure </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>true if successful </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_1abfee1c4a34b05837916620b4a71d2b36"></a>
<p class="NDLRefMemberFunction">void  InvalidateLowDetailTexture()</p>
<p class="NDLRefMemberDescription">Call this function to mark the entire terrain for re-rendering to the low detail diffuse texture during the next call to RenderLowDetailTextures. </p>

<a name="class_ni_terrain_1a7923b365ef02320e6fe4038515a0b56a"></a>
<p class="NDLRefMemberFunction">void  DoUpdate(<br/><span class="NDLSystemFont"><a href="../NiMain/NiUpdateProcess.htm">NiUpdateProcess</a></span>& kUpdate, <br/><span class="NDLSystemFont">bool</span> bUpdateWorldData = false)</p>
<p class="NDLRefMemberDescription">Trigger an update of internal data, if required. </p>
<p class="NDLRefMemberDetailedDescription">All data loading, preparation and cache updates are performed within this function. If any deformation has occurred on the terrain, Update MUST be called before any attempt to render. Note this function does not propagate the update to children and is only public to allow NiTerrainComponent access to it. </p>

<a name="class_ni_terrain_1a9b8477f9d5cc18cfec986c907327d1b4"></a>
<p class="NDLRefMemberFunction">void  UpdateStreaming()</p>
<p class="NDLRefMemberDescription">Perform streaming update operations including queuing sectors to be loaded/unloaded according to the policy defined by the assigned sector selector object. </p>

<a name="class_ni_terrain_1a84a0f561da759224b5598b65330cccc6"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="NiTerrainConfiguration.htm">NiTerrainConfiguration</a></span>  GetConfiguration() const</p>
<p class="NDLRefMemberDescription">Returns a copy of the current terrain configuration. </p>

<a name="class_ni_terrain_1ab6c8168b30c387d105679af833b915eb"></a>
<p class="NDLRefMemberFunction">void  SetResourceManager(<span class="NDLSystemFont"><a href="NiTerrainResourceManager.htm">NiTerrainResourceManager</a></span>* pkManager)</p>
<p class="NDLRefMemberDescription">Set the allocator used to allocate all the objects involved in terrain management. </p>
<p class="NDLRefMemberDetailedDescription">Allocators may only be set/changed whilst no objects are active in the current allocator. The default allocator is the NiTerrainStandardAllocator. </p>

<a name="class_ni_terrain_1a54ee2f923e9c0a8d5243faa6a26d1961"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiTerrainResourceManager.htm">NiTerrainResourceManager</a></span>*  GetResourceManager()</p>
<p class="NDLRefMemberDescription">Get the allocator used to allocate all the objects involved in terrain management. </p>
<p class="NDLRefMemberDetailedDescription">Allocators may only be set/changed whilst no objects are active in the current allocator. The default allocator is the NiTerrainStandardAllocator. </p>

<a name="class_ni_terrain_1a2a2d4d9ef0bab8dcbb0e1adf2ec2c2b4"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../NiMain/NiMaterial.htm">NiMaterial</a></span>*  GetMaterial()</p>
<p class="NDLRefMemberDescription">Get the material to use on all terrain objects. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>the Material currently in use </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_1ac4df07055232252342309f47f89cab47"></a>
<p class="NDLRefMemberFunction">void  SetSurfaceLibrary(<span class="NDLSystemFont"><a href="NiTerrainSurfaceLibrary.htm">NiTerrainSurfaceLibrary</a></span>* pkLibrary)</p>
<p class="NDLRefMemberDescription">Set the surface library object that is used to managed all the surfaces that this terrain references. </p>
<p class="NDLRefMemberDetailedDescription">Multiple terrains may share a common library, allowing the data to be shared across them all.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pkLibrary</span></td>
    <td>The library to manage this terrain's surfaces </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_1a7ced7679ff402e07ae8c8edefb219d71"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiTerrainSurfaceLibrary.htm">NiTerrainSurfaceLibrary</a></span>*  GetSurfaceLibrary()</p>
<p class="NDLRefMemberDescription">Get the surface library object that is used to managed all the surfaces that this terrain references. </p>

<a name="class_ni_terrain_1a2d6fdb5aea2ca74f9635cec4d4adfceb"></a>
<p class="NDLRefMemberFunction">void  SetSectorSelector(<span class="NDLSystemFont"><a href="NiTerrainSectorSelector.htm">NiTerrainSectorSelector</a></span>* pkSelector)</p>
<p class="NDLRefMemberDescription">Set the sector selector object that is used to select which sectors will be loaded and unloaded. </p>

<a name="class_ni_terrain_1ae514cf406fe23fd44d11d62eab8f4cdf"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiTerrainSectorSelector.htm">NiTerrainSectorSelector</a></span>*  GetSectorSelector()</p>
<p class="NDLRefMemberDescription">Get the sector selector object that is used to select which sectors will be loaded and unloaded. </p>

<a name="class_ni_terrain_1a3e612c5207e1804938461f7a5842c8de"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="NiTerrain__StoragePolicy.htm">StoragePolicy</a></span>&  GetStoragePolicy()</p>
<p class="NDLRefMemberDescription">Get the storage policy to use for this terrain object. </p>

<a name="class_ni_terrain_1a6ce748afb3a0e1234f736934933e2153"></a>
<p class="NDLRefMemberFunction">void  SetStoragePolicy(const <span class="NDLSystemFont"><a href="NiTerrain__StoragePolicy.htm">StoragePolicy</a></span>& kPolicy)</p>
<p class="NDLRefMemberDescription">Set the storage policy to use for this terrain object. </p>

<a name="class_ni_terrain_1ac6b7f39c250ea929b6ea43aa496b292d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiTerrain__CustomDataPolicy.htm">CustomDataPolicy</a></span>*  GetCustomDataPolicy()</p>
<p class="NDLRefMemberDescription">Get the custom data policy that this terrain uses. </p>

<a name="class_ni_terrain_1a4a99d6d7f8d88c43a99a41ffc952f0ac"></a>
<p class="NDLRefMemberFunction">void  SetCustomDataPolicy(<span class="NDLSystemFont"><a href="NiTerrain__CustomDataPolicy.htm">CustomDataPolicy</a></span>* pkPolicy)</p>
<p class="NDLRefMemberDescription">Set the custom data policy that this terrain uses. </p>

<a name="class_ni_terrain_1aed0720e97de3bde279600e77f0b8f6a1"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiTerrainSectorFile.htm">NiTerrainSectorFile</a></span>*  OpenSectorFile(<br/><span class="NDLSystemFont">NiInt32</span> iSectorX, <br/><span class="NDLSystemFont">NiInt32</span> iSectorY, <br/><span class="NDLSystemFont">bool</span> bWrite, <br/>const char* pucArchive = NULL)</p>
<p class="NDLRefMemberDescription">Opens a particular sector's storage file(s) for read or write. </p>

<a name="class_ni_terrain_1ab6887a3f4798b54625e6df060f536032"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiTerrainFile.htm">NiTerrainFile</a></span>*  OpenTerrainFile(<br/><span class="NDLSystemFont">bool</span> bWrite, <br/>const char* pucArchive = NULL)</p>
<p class="NDLRefMemberDescription">Opens the terrain's storage file for read or write. </p>
<a name="constructor_and_destructor"></a>
<p class="NDLRefHead1">Constructor and Destructor</p>


<a name="class_ni_terrain_1ac8ed3f521bcbd57f73722a7a72f5e340"></a>
<p class="NDLRefMemberFunction">NiTerrain()</p>
<p class="NDLRefMemberDescription">Default constructor. </p>
<p class="NDLRefMemberDetailedDescription">If a null meta data store is given, then the default static meta data store singleton is used. </p>

<a name="class_ni_terrain_1a145d673e8e8ecf70ca7ae57133f3a6ac"></a>
<p class="NDLRefMemberFunction">virtual ~NiTerrain(void )</p>
<p class="NDLRefMemberDescription">Destructor. </p>

<a name="class_ni_terrain_1a116508fff278c51953cb01ff66d9e233"></a>
<p class="NDLRefMemberFunction">void  DestroyData()</p>
<p class="NDLRefMemberDescription">Destroy the data stored within this object to allow the SDM etc to be shutdown whilst this object still exists. </p>
<p class="NDLRefMemberDetailedDescription">Once this function is called, all calls to this <span class="NDLSystemFont">NiTerrain</span> object are invalid and should be avoided. The only function that should be called upon this object once it's data has been destroyed is the <span class="NDLSystemFont"><a href="../NiMain/NiRefObject.htm">NiRefObject</a></span> interface and its destructor. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
