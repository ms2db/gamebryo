<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiTerrainTaskQueue</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiTerrainTaskQueue</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../efd/efd__MemObject.htm">efd::MemObject</a></span></p>


<p class="NDLRefHeaderFile">&lt;NiTerrainTaskProcessor.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/class_ni_terrain_task_queue.gif" alt="Inheritance graph for NiTerrainTaskQueue"/>
  <p class="FigureCaption">Inheritance graph for NiTerrainTaskQueue</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">This class is used to manage the streaming task queues. </p>
<p class="NDLNormal">Each instance of this class represents the queue for a particular action being executed on a streaming task. </p>

<a name="public_types"></a>
<p class="NDLRefHead1">Public Types</p>


<a name="class_ni_terrain_task_queue_1a3bb3dfeb6700690a788eb3ad29393107"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="NiTerrainStreamingTask.htm">NiTerrainStreamingTask</a></span>  TaskType</p>
<p class="NDLRefMemberDescription">Task type exposure. </p>

<a name="class_ni_terrain_task_queue_1a2ed4a748f8b41996eddf27134d4195ae"></a>
<p class="NDLRefMemberFunction">typedef void(*  ProcessCallbackType)(void *pvArg, TaskType *pkTask, efd::UInt32 uiWorkUnit)</p>
<p class="NDLRefMemberDescription">Task callback type. </p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="class_ni_terrain_task_queue_1abb6a4ac4f0ddf16ab5002ac279898811"></a>
<p class="NDLRefMemberFunction">NiTerrainTaskQueue()</p>
<p class="NDLRefMemberDescription">Constructor. </p>

<a name="class_ni_terrain_task_queue_1a15ad3c822875f69e31749803ab1005d8"></a>
<p class="NDLRefMemberFunction">~NiTerrainTaskQueue()</p>
<p class="NDLRefMemberDescription">Destructor. </p>

<a name="class_ni_terrain_task_queue_1ac3b78d0839c7adb5ab0065ce27bcbe58"></a>
<p class="NDLRefMemberFunction">void  SubmitTask(<span class="NDLSystemFont"><a href="NiTerrainStreamingTask.htm">TaskType</a></span>* pkNewTask)</p>
<p class="NDLRefMemberDescription">Submit a task to the queue to wait for a thread to process it. </p>
<p class="NDLRefMemberDetailedDescription">The task will be queried for the number of work units that are pending in it's current state, and these work units will then be queued for distribution to threads. </p>

<a name="class_ni_terrain_task_queue_1a0612b1b55bc6df853eacaf9cbf78d5fb"></a>
<p class="NDLRefMemberFunction">void  SetTaskProcessingCallback(<br/>const <span class="NDLSystemFont"><a href="NiTerrainTaskQueue.htm#class_ni_terrain_task_queue_1a2ed4a748f8b41996eddf27134d4195ae">ProcessCallbackType</a></span>& kProcessTaskCallback, <br/>void* pvCallbackArgument)</p>
<p class="NDLRefMemberDescription">Configure this queue with what callback should be called to process each task. </p>

<a name="class_ni_terrain_task_queue_1aa2e3e6ec54f54592f90ea5ebf046e17b"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetQueueSize()</p>
<p class="NDLRefMemberDescription">Query the number of work units in this queue. </p>

<a name="class_ni_terrain_task_queue_1a33fa88f37e5b9835c710da3baf2ddb0d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetNumUnreservedWorkUnits()</p>
<p class="NDLRefMemberDescription">Query the number of unreserved work units. </p>

<a name="class_ni_terrain_task_queue_1afbb05befdc17492e0ad5e928cfefd7f8"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetActiveWorkUnitCount()</p>
<p class="NDLRefMemberDescription">Query the number of active work units. </p>

<a name="class_ni_terrain_task_queue_1a54f3cb68b400c13f43426013b802f0d3"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  ReserveWorkUnit()</p>
<p class="NDLRefMemberDescription">Reserve a work unit from the queue for processing in the current thread. </p>

<a name="class_ni_terrain_task_queue_1a786ea57e6b30d337a4e1ee8676ea7d4a"></a>
<p class="NDLRefMemberFunction">void  ProcessWorkUnit()</p>
<p class="NDLRefMemberDescription">Execute the first work unit on the queue in the current thread. </p>
<p class="NDLRefMemberDetailedDescription">The ReserveWorkUnit function must have been called before calling this function and it must have returned true for this thread. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
