<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiFragmentOperations</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiFragmentOperations</p>
<p class="NDLRefParentage">: public NiFragment</p>


<p class="NDLRefHeaderFile">&lt;NiFragmentOperations.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/class_ni_fragment_operations.gif" alt="Inheritance graph for NiFragmentOperations"/>
  <p class="FigureCaption">Inheritance graph for NiFragmentOperations</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">This class is another helper <span class="NDLSystemFont">NiFragment</span> class used to provide basic vector operation functionality to any materials that reference it. </p>

<a name="public_types"></a>
<p class="NDLRefHead1">Public Types</p>
<a name="class_ni_fragment_operations_1a93f9707395fdd878d9b994322086a702"></a>
<p class=NDLRefHead2>NiFragmentOperations::ShaderVersion</p>


<p class="NDLRefMemberDescription">An enum storing the set of shader versions for this material. </p>


<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">VERTEX_VERSION</span></td>
    <td>The current vertex version. Adjusting this invalidates the vertex cache and forces new shaders to be generated. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">GEOMETRY_VERSION</span></td>
    <td>The current geometry version. Adjusting this invalidates the geometry cache and forces new shaders to be generated. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">PIXEL_VERSION</span></td>
    <td>The current pixel version. Adjusting this invalidates the pixel cache and forces new shaders to be generated. </td>
</tr>

  </tbody>
</table>
</div>


<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="class_ni_fragment_operations_1a8fdd8d647a3ce142705875ddce86868f"></a>
<p class="NDLRefMemberFunction">NiFragmentOperations()</p>
<p class="NDLRefMemberDetailedDescription">Constructor </p>

<a name="class_ni_fragment_operations_1aedab988ef177959632ccccaebb261cca"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  HandleAlphaTest(<br/>Context& kContext, <br/><span class="NDLSystemFont">bool</span> bAlphaTest, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkAlphaTestInput)</p>
<p class="NDLRefMemberDescription">This method controls the application of alpha testing to the pixel shade tree. </p>
<p class="NDLRefMemberDetailedDescription">This is currently only used for D3D10 and D3D11 shade trees. </p>

<a name="class_ni_fragment_operations_1ab752759de42206ef979d395926965727"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  NormalizeVector(<br/>Context& kContext, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span> *& pkVector)</p>
<p class="NDLRefMemberDescription">This is a utility method to add material nodes to normalize a float2, float3, or float4 vector. </p>

<a name="class_ni_fragment_operations_1ae8e9e77d2a041b1c77b927343d40831d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  ColorToLuminance(<br/>Context& kContext, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkColor, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span> *& pkLuminance)</p>
<p class="NDLRefMemberDescription">Convert a color to it's luminance value (useful for converting to greyscale). </p>

<a name="class_ni_fragment_operations_1a72fe9068be205c34087b53a38511159a"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  ExtractChannel(<br/>Context& kContext, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkVector, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> uiChannel, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span> *& pkOutput)</p>
<p class="NDLRefMemberDescription">Extract a specific channel from a vector. </p>

<a name="class_ni_fragment_operations_1afa593bb0eedad0b727b46e5e5d4397f8"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  AddVector(<br/>Context& kContext, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkVector1, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkVector2, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span> *& pkValue)</p>
<p class="NDLRefMemberDescription">This is a utility method to add material nodes to add float, float2, float3, or float4 vectors. </p>

<a name="class_ni_fragment_operations_1a07acdd5e2524853b917a3688f6b58495"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  MultiplyVector(<br/>Context& kContext, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkVector1, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkVector2, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span> *& pkValue)</p>
<p class="NDLRefMemberDescription">This is a utility method to add material nodes to multiply float, float2, float3, or float4 vectors. </p>

<a name="class_ni_fragment_operations_1a5af06339296d15f172d68dd38d8dc0b6"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  CrossVector(<br/>Context& kContext, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkVector1, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkVector2, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span> *& pkValue)</p>
<p class="NDLRefMemberDescription">This is a utility method to cross product two vectors of float3 format. </p>

<a name="class_ni_fragment_operations_1a333cbe326fde7c0ee9cdc4f234d3711c"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  MultiplyAddVector(<br/>Context& kContext, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkVector1, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkVector2, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkVector3, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span> *& pkValue)</p>
<p class="NDLRefMemberDescription">This is a utility method to add material nodes to multiply/add float3 vectors. </p>

<a name="class_ni_fragment_operations_1a30a9fb2f6bf5e20e5d1ff9e329bd15dc"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  LerpVector(<br/>Context& kContext, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkVector1, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkVector2, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkLerpAmount, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span> *& pkValue)</p>
<p class="NDLRefMemberDescription">This is a utility method to add material nodes to linearly interpolate float, float2, float3, or float4 vectors. </p>

<a name="class_ni_fragment_operations_1a0dec7c4b54538c72622b0821fa048b4a"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  ScaleVector(<br/>Context& kContext, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkVector, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkScale, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span> *& pkValue)</p>
<p class="NDLRefMemberDescription">This is a utility method to add material nodes to multiply a float, float2, float3, or float4 vector by a single float. </p>

<a name="class_ni_fragment_operations_1a095e0b512934f757ea4c8df6d0eab63e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  SaturateVector(<br/>Context& kContext, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkVector, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span> *& pkValue)</p>
<p class="NDLRefMemberDescription">This is a utility method to add material nodes to saturate float, float2, float3, or float4 vector. </p>

<a name="class_ni_fragment_operations_1ad2e1e99ee543779cfb2ac56a6097d9b9"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  MultiplyScalarSatAddVector(<br/>Context& kContext, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkVector1, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkVector2, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkScale, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span> *& pkValue)</p>
<p class="NDLRefMemberDescription">This is a utility method to add material nodes to multiply a float3 vector by the sum of another float3 vector and a scalar. </p>

<a name="class_ni_fragment_operations_1ae752892d9ad2e594f0e9ee933064f942"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  SplitColorAndOpacity(<br/>Context& kContext, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkColorAndOpacity, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span> *& pkColor, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span> *& pkOpacity)</p>
<p class="NDLRefMemberDescription">This method will add material nodes to split a float4 vector into float3 and float vectors. </p>

<a name="class_ni_fragment_operations_1abeb4e9571e0e6545a98a0bd4bae47520"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  SplitRGBA(<br/>Context& kContext, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkColorAndOpacity, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span> *& pkRed, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span> *& pkGreen, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span> *& pkBlue, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span> *& pkAlpha)</p>
<p class="NDLRefMemberDescription">This method will add material nodes to split a float4 vector into float3 and float vectors. </p>

<a name="class_ni_fragment_operations_1aaacddc5a95220aa55edb6d2176efb728"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  TypeCastBind(<br/>Context& kContext, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkSrc, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkDest)</p>
<p class="NDLRefMemberDescription">This utility method will invoke conversion functions when binding resources with common float count mismatches, i.e. </p>
<p class="NDLRefMemberDetailedDescription">binding a float4 to a float3 truncates the fourth float value. When the resources match types, a normal bind occurs. </p>

<a name="class_ni_fragment_operations_1ab9c8b4922944e0dbb7cf80101d375dd3"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  Combine(<br/>Context& kContext, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkInputA, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkInputB, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span> *& pkOutput)</p>
<p class="NDLRefMemberDescription">Given two vectors (type float), will attempt to combine them into a single float vector of the same dimension as the sum of the two inputs. </p>

<a name="class_ni_fragment_operations_1ae6c6a43a4aa4e848dcdeaae1dd1b0f80"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  CombineBind(<br/>Context& kContext, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkInputA, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkInputB, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkOutput)</p>
<p class="NDLRefMemberDescription">Given two vectors (type float), will attempt to combine them into a single float vector of the same dimension as the sum of the two inputs. </p>
<p class="NDLRefMemberDetailedDescription">Once they are combined this will also attempt to bind the output. </p>

<a name="class_ni_fragment_operations_1a728224669846e8d6bd5e5c5a76d33232"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  OptionalBind(<br/>Context& kContext, <br/><span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span> kSrcName, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialNode.htm">NiMaterialNode</a></span>* pkSrcNode, <br/><span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span> kDestName, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialNode.htm">NiMaterialNode</a></span>* pkDestNode)</p>
<p class="NDLRefMemberDescription">This utility methods will attempt to bind two resources together. </p>
<p class="NDLRefMemberDetailedDescription">If one of the resource does not exist, then the binding will not be attempted. </p>

<a name="class_ni_fragment_operations_1a00314e6771fd63c9d79b2e9b06a8788f"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  OptionalBind(<br/>Context& kContext, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkSrc, <br/><span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span> kDestName, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialNode.htm">NiMaterialNode</a></span>* pkDestNode)</p>
<p class="NDLRefMemberDescription">This utility methods will attempt to bind two resources together. </p>
<p class="NDLRefMemberDetailedDescription">If one of the resource does not exist, then the binding will not be attempted. </p>

<a name="class_ni_fragment_operations_1a13be0d3f6e97f670c3e0ba0b2f6d0846"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  OptionalBind(<br/>Context& kContext, <br/><span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span> kSrcName, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialNode.htm">NiMaterialNode</a></span>* pkSrcNode, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkDest)</p>
<p class="NDLRefMemberDescription">This utility methods will attempt to bind two resources together. </p>
<p class="NDLRefMemberDetailedDescription">If one of the resource does not exist, then the binding will not be attempted. </p>

<a name="class_ni_fragment_operations_1a787221a0ad88434fe9cfb5c53b43b309"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  OptionalBind(<br/>Context& kContext, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkSrc, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkDest)</p>
<p class="NDLRefMemberDescription">This utility methods will attempt to bind two resources together. </p>
<p class="NDLRefMemberDetailedDescription">If one of the resource does not exist, then the binding will not be attempted. </p>

<a name="class_ni_fragment_operations_1a44c44e0fc93fc00060d4d1916da4571f"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>*  GenerateShaderConstant(<br/>Context& kContext, <br/><span class="NDLSystemFont">bool</span> bValue)</p>
<p class="NDLRefMemberDescription">Generate a shader static constant based on the value passed in. </p>
<p class="NDLRefMemberDetailedDescription">Useful for converting C++ boolean values into shader booleans and integers etc. </p>

<a name="class_ni_fragment_operations_1a1c21a318f70748281bbd83a8f309a881"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>*  GenerateShaderConstant(<br/>Context& kContext, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span> iValue)</p>
<p class="NDLRefMemberDescription">Generate a shader static constant based on the value passed in. </p>
<p class="NDLRefMemberDetailedDescription">Useful for converting C++ boolean values into shader booleans and integers etc. </p>

<a name="class_ni_fragment_operations_1aafe5da252e372dda75c9737540315f6e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>*  GenerateShaderConstant(<br/>Context& kContext, <br/>float fValue)</p>
<p class="NDLRefMemberDescription">Generate a shader static constant based on the value passed in. </p>
<p class="NDLRefMemberDetailedDescription">Useful for converting C++ boolean values into shader booleans and integers etc. </p>

<a name="class_ni_fragment_operations_1af4c37bc9cbd048abafcb66bc9eff9906"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>*  GenerateShaderConstant(<br/>Context& kContext, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint4.htm">NiPoint4</a></span>& kPoint)</p>
<p class="NDLRefMemberDescription">Generate a shader static constant based on the value passed in. </p>
<p class="NDLRefMemberDetailedDescription">Useful for converting C++ boolean values into shader booleans and integers etc. </p>

<a name="class_ni_fragment_operations_1a88aaf550f095c1bc3c53c160470853f9"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>*  GenerateShaderConstant(<br/>Context& kContext, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kPoint)</p>
<p class="NDLRefMemberDescription">Generate a shader static constant based on the value passed in. </p>
<p class="NDLRefMemberDetailedDescription">Useful for converting C++ boolean values into shader booleans and integers etc. </p>

<a name="class_ni_fragment_operations_1af02eee1b910a18b300aca1635bfac90a"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>*  GenerateShaderConstant(<br/>Context& kContext, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint2.htm">NiPoint2</a></span>& kPoint)</p>
<p class="NDLRefMemberDescription">Generate a shader static constant based on the value passed in. </p>
<p class="NDLRefMemberDetailedDescription">Useful for converting C++ boolean values into shader booleans and integers etc. </p>

<a name="class_ni_fragment_operations_1a45a77426a2fd11a7b319062ff692d78c"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>*  GenerateShaderConstant(<br/>Context& kContext, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiColor.htm">NiColor</a></span>& kColor)</p>
<p class="NDLRefMemberDescription">Generate a shader static constant based on the value passed in. </p>
<p class="NDLRefMemberDetailedDescription">Useful for converting C++ boolean values into shader booleans and integers etc. </p>

<a name="class_ni_fragment_operations_1a8ace5fa78a2ed315b2a4ea4f6cedf573"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  TypeCast(<br/>Context& kContext, <br/><span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span> kDstType, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkInput, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span> *& pkOutput)</p>
<p class="NDLRefMemberDescription">Cast the source value into the specified type. </p>

<a name="class_ni_fragment_operations_1a733b561f2b44a29213b8431cc659df85"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  TransformPosition(<br/>Context& kContext, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkPosition, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkTransform, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span> *& pkTransformPos)</p>
<p class="NDLRefMemberDescription">This method will transform an input position by the given transformation. </p>
<p class="NDLRefMemberDetailedDescription">Useful in converting between world/view/projection spaces. </p>

<a name="class_ni_fragment_operations_1a3f8c0d29841d77c1c7783836ed6d476f"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  TransformDirection(<br/>Context& kContext, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkDirection, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkTransform, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span> *& pkTransformDir)</p>
<p class="NDLRefMemberDescription">This method will rotate an input direction by the given transformation. </p>
<p class="NDLRefMemberDetailedDescription">Useful in rotating things into world/view/projection spaces. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
