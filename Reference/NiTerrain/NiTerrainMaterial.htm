<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiTerrainMaterial</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiTerrainMaterial</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../NiMain/NiFragmentMaterial.htm">NiFragmentMaterial</a></span></p>


<p class="NDLRefHeaderFile">&lt;NiTerrainMaterial.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/class_ni_terrain_material.gif" alt="Inheritance graph for NiTerrainMaterial"/>
  <p class="FigureCaption">Inheritance graph for NiTerrainMaterial</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">This class implements the default terrain material. </p>
<p class="NDLNormal">The terrain material currently supports up to 4 layers, in which each layer can have a base map, detail map, normal map, parallax map and specular map. The material generates a unique shader depending on how many layers are present on the terrain, what lights are affecting the terrain, fogging, etc. </p>

<a name="public_types"></a>
<p class="NDLRefHead1">Public Types</p>
<a name="class_ni_terrain_material_1a40f0d5247650884f60ffac7ff88acd56"></a>
<p class=NDLRefHead2>anonymous enum</p>


<p class="NDLRefMemberDescription">Used for tracking the version of the terrain material. </p>


<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">MATERIAL_DESCRIPTOR_INDEX_COUNT</span></td>
    <td>The number of DWORDs to use for material descriptor bit field. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">PIXEL_PROGRAM_DESCRIPTOR_INDEX_COUNT</span></td>
    <td>The number of DWORDs to use for pixel program descriptor bit field. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">VERTEX_PROGRAM_DESCRIPTOR_INDEX_COUNT</span></td>
    <td>The number of DWORDs to use for vertex program descriptor bit field. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">VERTEX_VERSION</span></td>
    <td>Specifies the vertex shader version. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">PIXEL_VERSION</span></td>
    <td>Specifies the pixel shader version. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">GEOMETRY_VERSION</span></td>
    <td>Specifies the geometry shader version. </td>
</tr>

  </tbody>
</table>
</div>

<a name="class_ni_terrain_material_1a110f0faf3c6e5e8acbc68b4628f0a96c"></a>
<p class=NDLRefHead2>NiTerrainMaterial::Fog</p>


<p class="NDLRefMemberDescription">Allows the terrain to have distance fog. </p>


<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">FOG_NONE</span></td>
    <td>Specifies no fog. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">FOG_LINEAR</span></td>
    <td>Specifies to use linear fog. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">FOG_SQUARED</span></td>
    <td>Specifies squared fog. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">FOG_MAX</span></td>
    <td>The maximum specifications for fog. </td>
</tr>

  </tbody>
</table>
</div>

<a name="class_ni_terrain_material_1a9926bf45899188dab18baf2844517364"></a>
<p class=NDLRefHead2>anonymous enum</p>


<p class="NDLRefMemberDescription">Defines useful constants. </p>


<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">MAX_LAYERS_PER_CELL</span></td>
    <td>Maximum number of surface layers per leaf cell. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">BLEND_MAP</span></td>
    <td>Control map for blending the different surfaces on a leaf. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">BASE_MAP</span></td>
    <td>4 channel texture map. RGB contains albedo, alpha channel may contain data depending on the per platform packing. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">NORMAL_MAP</span></td>
    <td>4 channel texture map. RGB contains the normal map, alpha channel may contain data depending on the per platform packing. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SPEC_MAP</span></td>
    <td>4 channel texture map. RGB contains the specular map, alpha channel may contain data depending on the per platform packing. </td>
</tr>

  </tbody>
</table>
</div>


<a name="public_static_attributes"></a>
<p class="NDLRefHead1">Public Static Attributes</p>


<a name="class_ni_terrain_material_1a82229eb672e5f67e4fed3b0d6c83b4b9"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont"><a href="../NiMain/NiColor.htm">NiColor</a></span>  ms_kDefaultColor</p>
<p class="NDLRefMemberDetailedDescription">The default color of the terrain when no blend masks or textures are applied </p>
<a name="public_static_methods"></a>
<p class="NDLRefHead1">Public Static Methods</p>


<a name="class_ni_terrain_material_1aedc3cce2a63a9ae729dab6138a332d8b"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">NiTerrainMaterial</span>*  Create()</p>
<p class="NDLRefMemberDescription">Helper function for creating an instance of a terrain material. </p>
<p class="NDLRefMemberDetailedDescription">The function first looks up the material in Gamebryo's material database. If it is not found an instance of the <span class="NDLSystemFont">NiTerrainMaterial</span> is created.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">Since materials are basically singletons, the terrain material object is only created once. </p></p>

<a name="class_ni_terrain_material_1ad476e1d761c89871e9585adcae7e670a"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  DropNormalParallaxMap(<br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialDescriptor.htm">NiMaterialDescriptor</a></span>* pkMaterialDescriptor, <br/><span class="NDLSystemFont"><a href="../NiMain/NiFragmentMaterial.htm">ReturnCode</a></span> eFailedRC, <br/>unsigned int uiFailedPass, <br/><span class="NDLSystemFont"><a href="../NiMain/NiFragmentMaterial__RenderPassDescriptor.htm">RenderPassDescriptor</a></span>* pkRenderPasses, <br/>unsigned int uiMaxCount, <br/>unsigned int& uiCount, <br/>unsigned int& uiFunctionData)</p>
<p class="NDLRefMemberDescription">This method removes the parallax/normal maps from all the layers in the pixel shader. </p>
<p class="NDLRefMemberDetailedDescription">In addition, it disables passing tangents from the vertex shader to the pixel shader. </p>

<a name="class_ni_terrain_material_1a41038e6bbc05a2162e26a70d21733ac3"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  SplitPerPixelLights(<br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialDescriptor.htm">NiMaterialDescriptor</a></span>* pkMaterialDescriptor, <br/><span class="NDLSystemFont"><a href="../NiMain/NiFragmentMaterial.htm">ReturnCode</a></span> eFailedRC, <br/>unsigned int uiFailedPass, <br/><span class="NDLSystemFont"><a href="../NiMain/NiFragmentMaterial__RenderPassDescriptor.htm">RenderPassDescriptor</a></span>* pkRenderPasses, <br/>unsigned int uiMaxCount, <br/>unsigned int& uiCount, <br/>unsigned int& uiFunctionData)</p>
<p class="NDLRefMemberDescription">Create a new pass for each pass with lighting. </p>
<p class="NDLRefMemberDetailedDescription">The lights are evenly divided from the original pass into the new passes. Note that this only affects per-pixel lights. These passes will be additively blended. </p>

<a name="class_ni_terrain_material_1a1c141f63f9e93845135bd260f732e30b"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  DropPSSMShadowMaps(<br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialDescriptor.htm">NiMaterialDescriptor</a></span>* pkMaterialDescriptor, <br/><span class="NDLSystemFont"><a href="../NiMain/NiFragmentMaterial.htm">ReturnCode</a></span> eFailedRC, <br/>unsigned int uiFailedPass, <br/><span class="NDLSystemFont"><a href="../NiMain/NiFragmentMaterial__RenderPassDescriptor.htm">RenderPassDescriptor</a></span>* pkRenderPasses, <br/>unsigned int uiMaxCount, <br/>unsigned int& uiCount, <br/>unsigned int& uiFunctionData)</p>
<p class="NDLRefMemberDescription">This technique will disable any shadow maps that use PSSM. </p>
<p class="NDLRefMemberDetailedDescription">Note that it will completely disable the shadowmap for any light using PSSM rather than reverting to a regular shadowmap. </p>

<a name="class_ni_terrain_material_1ade5789c746947bfd8099be10c639c07c"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  DropPSSMShadowMapsThenSplitPerPixelLights(<br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialDescriptor.htm">NiMaterialDescriptor</a></span>* , <br/><span class="NDLSystemFont"><a href="../NiMain/NiFragmentMaterial.htm">ReturnCode</a></span> eFailedRC, <br/>unsigned int uiFailedPass, <br/><span class="NDLSystemFont"><a href="../NiMain/NiFragmentMaterial__RenderPassDescriptor.htm">RenderPassDescriptor</a></span>* pkRenderPasses, <br/>unsigned int uiMaxCount, <br/>unsigned int& uiCount, <br/>unsigned int& uiFunctionData)</p>
<p class="NDLRefMemberDescription">Combination of DropPSSMShadowMaps and SplitPerPixelLights. </p>

<a name="class_ni_terrain_material_1a7ba54cde6264c645718ad398405aae08"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  DropShadowMaps(<br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialDescriptor.htm">NiMaterialDescriptor</a></span>* pkMaterialDescriptor, <br/><span class="NDLSystemFont"><a href="../NiMain/NiFragmentMaterial.htm">ReturnCode</a></span> eFailedRC, <br/>unsigned int uiFailedPass, <br/><span class="NDLSystemFont"><a href="../NiMain/NiFragmentMaterial__RenderPassDescriptor.htm">RenderPassDescriptor</a></span>* pkRenderPasses, <br/>unsigned int uiMaxCount, <br/>unsigned int& uiCount, <br/>unsigned int& uiFunctionData)</p>
<p class="NDLRefMemberDescription">This technique will remove the shadow maps from the input passes. </p>

<a name="class_ni_terrain_material_1a61df7cf823742ca2d3b696f5237be804"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  DropShadowMapsThenSplitPerPixelLights(<br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialDescriptor.htm">NiMaterialDescriptor</a></span>* pkMaterialDescriptor, <br/><span class="NDLSystemFont"><a href="../NiMain/NiFragmentMaterial.htm">ReturnCode</a></span> eFailedRC, <br/>unsigned int uiFailedPass, <br/><span class="NDLSystemFont"><a href="../NiMain/NiFragmentMaterial__RenderPassDescriptor.htm">RenderPassDescriptor</a></span>* pkRenderPasses, <br/>unsigned int uiMaxCount, <br/>unsigned int& uiCount, <br/>unsigned int& uiFunctionData)</p>
<p class="NDLRefMemberDescription">This technique is a combination of DropShadowMaps and SplitPerPixelLights. </p>

<a name="class_ni_terrain_material_1a9fdc75f1ba758a2e984e85aaf2490582"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  SplitPerVertexLights(<br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialDescriptor.htm">NiMaterialDescriptor</a></span>* pkMaterialDescriptor, <br/><span class="NDLSystemFont"><a href="../NiMain/NiFragmentMaterial.htm">ReturnCode</a></span> eFailedRC, <br/>unsigned int uiFailedPass, <br/><span class="NDLSystemFont"><a href="../NiMain/NiFragmentMaterial__RenderPassDescriptor.htm">RenderPassDescriptor</a></span>* pkRenderPasses, <br/>unsigned int uiMaxCount, <br/>unsigned int& uiCount, <br/>unsigned int& uiFunctionData)</p>
<p class="NDLRefMemberDescription">Create a new pass for each pass with lighting. </p>
<p class="NDLRefMemberDetailedDescription">The lights are evenly divided from the original pass into the new passes. Note that this only affects per-vertex lighting. These passes will be additively blended. </p>

<a name="class_ni_terrain_material_1acf202b9da01b59c34eb3f12ee6ed0215"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  DropShadowMapsThenSplitTextureMaps(<br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialDescriptor.htm">NiMaterialDescriptor</a></span>* pkMaterialDescriptor, <br/><span class="NDLSystemFont"><a href="../NiMain/NiFragmentMaterial.htm">ReturnCode</a></span> eFailedRC, <br/>unsigned int uiFailedPass, <br/><span class="NDLSystemFont"><a href="../NiMain/NiFragmentMaterial__RenderPassDescriptor.htm">RenderPassDescriptor</a></span>* pkRenderPasses, <br/>unsigned int uiMaxCount, <br/>unsigned int& uiCount, <br/>unsigned int& uiFunctionData)</p>
<p class="NDLRefMemberDescription">This technique is a combination of DropShadowMaps and SplitTextureMaps. </p>

<a name="class_ni_terrain_material_1a276a3687358ea00198fc7e9317750268"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  DropNormalParallaxMapThenSplitLights(<br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialDescriptor.htm">NiMaterialDescriptor</a></span>* pkMaterialDescriptor, <br/><span class="NDLSystemFont"><a href="../NiMain/NiFragmentMaterial.htm">ReturnCode</a></span> eFailedRC, <br/>unsigned int uiFailedPass, <br/><span class="NDLSystemFont"><a href="../NiMain/NiFragmentMaterial__RenderPassDescriptor.htm">RenderPassDescriptor</a></span>* pkRenderPasses, <br/>unsigned int uiMaxCount, <br/>unsigned int& uiCount, <br/>unsigned int& uiFunctionData)</p>
<p class="NDLRefMemberDescription">This technique is a combination of DropParallaxMap and SplitPerPixelLights. </p>

<a name="class_ni_terrain_material_1a96a11e80a27e37c531118ad2ff18f048"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  DropPSSMShadowMapsThenNormalParallaxMapThenSplitLights(<br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialDescriptor.htm">NiMaterialDescriptor</a></span>* pkMaterialDescriptor, <br/><span class="NDLSystemFont"><a href="../NiMain/NiFragmentMaterial.htm">ReturnCode</a></span> eFailedRC, <br/>unsigned int uiFailedPass, <br/><span class="NDLSystemFont"><a href="../NiMain/NiFragmentMaterial__RenderPassDescriptor.htm">RenderPassDescriptor</a></span>* pkRenderPasses, <br/>unsigned int uiMaxCount, <br/>unsigned int& uiCount, <br/>unsigned int& uiFunctionData)</p>
<p class="NDLRefMemberDescription">Combination of DropPSSMShadowMaps, DropParallaxMap and SplitPerPixelLights. </p>

<a name="class_ni_terrain_material_1ae327b9e6ebadd74e117e72fdb3ba871a"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  DropShadowMapsThenDropNormalParallaxMapThenSplitLights(<br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialDescriptor.htm">NiMaterialDescriptor</a></span>* pkMaterialDescriptor, <br/><span class="NDLSystemFont"><a href="../NiMain/NiFragmentMaterial.htm">ReturnCode</a></span> eFailedRC, <br/>unsigned int uiFailedPass, <br/><span class="NDLSystemFont"><a href="../NiMain/NiFragmentMaterial__RenderPassDescriptor.htm">RenderPassDescriptor</a></span>* pkRenderPasses, <br/>unsigned int uiMaxCount, <br/>unsigned int& uiCount, <br/>unsigned int& uiFunctionData)</p>
<p class="NDLRefMemberDescription">This technique is a combination of DropShadowMaps, DropParallaxMap, and SplitPerPixelLights. </p>

<a name="class_ni_terrain_material_1a562fcfe0cc81304d9bf2f207e82f6611"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  UseTerrainReplacementShader(<br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialDescriptor.htm">NiMaterialDescriptor</a></span>* pkMaterialDescriptor, <br/><span class="NDLSystemFont"><a href="../NiMain/NiFragmentMaterial.htm">ReturnCode</a></span> eFailedRC, <br/>unsigned int uiFailedPass, <br/><span class="NDLSystemFont"><a href="../NiMain/NiFragmentMaterial__RenderPassDescriptor.htm">RenderPassDescriptor</a></span>* pkRenderPasses, <br/>unsigned int uiMaxCount, <br/>unsigned int& uiCount, <br/>unsigned int& uiFunctionData)</p>
<p class="NDLRefMemberDescription">Shader fallback to be used when all other fallbacks fail. </p>
<p class="NDLRefMemberDetailedDescription">This fall back will resort to using one of the replacement shaders that was inserted into the shader cache at cache creation time. These represent bare bones shaders that are exist to allow an object to be rendered. </p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="class_ni_terrain_material_1af666920e6b78457fc12f73e0d44118d7"></a>
<p class="NDLRefMemberFunction">virtual ~NiTerrainMaterial()</p>
<p class="NDLRefMemberDescription">Destructor. </p>

<a name="class_ni_terrain_material_1a6cdb4796af4a9969ab360e063c48b88c"></a>
<p class="NDLRefMemberFunction">void  SetForceEnableNormalParallaxMaps(<span class="NDLSystemFont">bool</span> bEnable)</p>
<p class="NDLRefMemberDescription">Since normal and parallax maps are automatically disabled when running on SM2_x cards, this method exists to force the support of normal and parallax maps even if the current shader model is 2_x. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">bEnable</span></td>
    <td>Enables or disables normal and parallax maps. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_material_1a0bf426feda7d10e22eae651eae342fd2"></a>
<p class="NDLRefMemberFunction">virtual void  AddDefaultFallbacks()</p>
<p class="NDLRefMemberDescription">Inherited from <span class="NDLSystemFont"><a href="../NiMain/NiFragmentMaterial.htm">NiFragmentMaterial</a></span>. </p>
<p class="NDLRefMemberDetailedDescription">Creates the default fallback functions. </p>

<a name="class_ni_terrain_material_1a0015971703917391738d24e06b5ac774"></a>
<p class="NDLRefMemberFunction">virtual void  AddReplacementShaders()</p>
<p class="NDLRefMemberDescription">Populates the shader cache with a set of fall back shaders. </p>
<p class="NDLRefMemberDetailedDescription">Replacement shaders are 'fail safe' shaders that can be used when shader compilation can not be performed. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
