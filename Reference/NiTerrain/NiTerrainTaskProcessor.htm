<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiTerrainTaskProcessor</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiTerrainTaskProcessor</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../efd/efd__MemObject.htm">efd::MemObject</a></span></p>


<p class="NDLRefHeaderFile">&lt;NiTerrainTaskProcessor.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/class_ni_terrain_task_processor.gif" alt="Inheritance graph for NiTerrainTaskProcessor"/>
  <p class="FigureCaption">Inheritance graph for NiTerrainTaskProcessor</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">This class manages a set of worker threads to process the contents of NiTerrainTaskQueues. </p>
<p class="NDLNormal">Whilst this class does not manage those queues, it abstracts the management of the threads from the rest of the system, allowing a smooth shift between threaded and unthreaded modes. </p>

<a name="public_types"></a>
<p class="NDLRefHead1">Public Types</p>


<a name="class_ni_terrain_task_processor_1a0356f995a0d1a9a66c48e90c82574458"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="NiTerrainTaskQueue.htm">NiTerrainTaskQueue</a></span> *(*  AquireTaskQueueCallbackType)(void *pvArg)</p>
<p class="NDLRefMemberDescription">Callback type for the task queue aquisition. </p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="class_ni_terrain_task_processor_1aafbfd36b3007d48c9711f08e246123d0"></a>
<p class="NDLRefMemberFunction">NiTerrainTaskProcessor()</p>
<p class="NDLRefMemberDescription">Constructor. </p>

<a name="class_ni_terrain_task_processor_1ad03b1b3394a0da94cf07cce3da8027d7"></a>
<p class="NDLRefMemberFunction">~NiTerrainTaskProcessor()</p>
<p class="NDLRefMemberDescription">Destructor. </p>

<a name="class_ni_terrain_task_processor_1a7233f6b1ed77fa2a8e4b3837d3202cc2"></a>
<p class="NDLRefMemberFunction">void  SetAquireTaskQueueCallback(<br/>void* pvArg, <br/><span class="NDLSystemFont"><a href="NiTerrainTaskProcessor.htm#class_ni_terrain_task_processor_1a0356f995a0d1a9a66c48e90c82574458">AquireTaskQueueCallbackType</a></span> kCallback)</p>
<p class="NDLRefMemberDescription">Configure the aquire task queue callback. </p>
<p class="NDLRefMemberDetailedDescription">This callback is used to select from which queue a task will be executed from. The aquire callback must reserve the task before returning or return NULL (no tasks to be executed).</p>
<p class="NDLRefMemberDetailedDescription">If the aquire callback does return NULL, the calling thread will be put to sleep until it is notified of another task being added. </p>

<a name="class_ni_terrain_task_processor_1a4a2da26edb025ab3586e1418dcb2f26c"></a>
<p class="NDLRefMemberFunction">void  NotifyTaskAdded()</p>
<p class="NDLRefMemberDescription">Notify the task processor that a task has been added to the queues that needs processing. </p>
<p class="NDLRefMemberDetailedDescription">If there are worker threads sleeping then this function will wake one up. If there are no worker threads then this function will attempt to process the task immediately using the current thread. </p>

<a name="class_ni_terrain_task_processor_1ae564f35958a4d60129ee85b485108356"></a>
<p class="NDLRefMemberFunction">void  SetNumWorkers(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> uiNumWorkers)</p>
<p class="NDLRefMemberDescription">Set the number of worker threads to use. </p>

<a name="class_ni_terrain_task_processor_1a483b2fd5e5ab9986241cf2b2d3dd5cf0"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetNumWorkers() const</p>
<p class="NDLRefMemberDescription">Get the number of worker threads being used. </p>

<a name="class_ni_terrain_task_processor_1a4e350aa03af68e983f8ffedf2ce77ff6"></a>
<p class="NDLRefMemberFunction">void  Shutdown()</p>
<p class="NDLRefMemberDescription">Shutdown the task processor. </p>
<p class="NDLRefMemberDetailedDescription">This function will reduce the worker count to 0, and wait for all the worker threads to complete their execution before returning. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
