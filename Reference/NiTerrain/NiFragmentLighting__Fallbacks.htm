<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiFragmentLighting::Fallbacks</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiFragmentLighting::Fallbacks</p>


<p class="NDLRefHeaderFile">&lt;NiFragmentLighting.h&gt;</p>


<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">This fallbacks structure is used to store the relevant fallback routine options available with <span class="NDLSystemFont"><a href="NiFragmentLighting.htm">NiFragmentLighting</a></span>. </p>
<p class="NDLNormal">These routines may be used with any compliant set of Descriptors (as described in the introduction to the <span class="NDLSystemFont"><a href="NiFragmentLighting.htm">NiFragmentLighting</a></span> class) as it uses the SetDescriptor and GetDescriptor functions. Alternatively, a developer may decide to write their own fallback routine, in which case, these templated routines may be used as a base. </p>

<a name="public_static_methods"></a>
<p class="NDLRefHead1">Public Static Methods</p>


<a name="struct_ni_fragment_lighting_1_1_fallbacks_1a42f51aa81cfbbe62b5253b359217270e"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  SplitPerPixelLights(<br/><span class="NDLSystemFont">ReturnCode</span> eFailedRC, <br/><span class="NDLSystemFont">NiUInt32</span> uiFailedPass, <br/>RenderPassDescriptor* pkRenderPasses, <br/><span class="NDLSystemFont">NiUInt32</span> uiMaxCount, <br/><span class="NDLSystemFont">NiUInt32</span>& uiCount)</p>
<p class="NDLRefMemberDescription">Create a new pass for each pass with lighting. </p>
<p class="NDLRefMemberDetailedDescription">The lights are evenly divided from the original pass into the new passes. Note that this only affects per-pixel lights. These passes will be additively blended. </p>

<a name="struct_ni_fragment_lighting_1_1_fallbacks_1a4c99b5ea5e66b00f5f5a5d67185f845e"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  DropPSSMShadowMaps(<br/><span class="NDLSystemFont">ReturnCode</span> eFailedRC, <br/><span class="NDLSystemFont">NiUInt32</span> uiFailedPass, <br/>RenderPassDescriptor* pkRenderPasses)</p>
<p class="NDLRefMemberDescription">This technique will remove any PSSM enabled shadow map from the failed passes. </p>

<a name="struct_ni_fragment_lighting_1_1_fallbacks_1a01226be9b47445293ce59efc18da3cf7"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  DropShadowMaps(<br/><span class="NDLSystemFont">ReturnCode</span> eFailedRC, <br/><span class="NDLSystemFont">NiUInt32</span> uiFailedPass, <br/>RenderPassDescriptor* pkRenderPasses)</p>
<p class="NDLRefMemberDescription">This technique will remove the shadow maps from the failed passes. </p>

<a name="struct_ni_fragment_lighting_1_1_fallbacks_1a08ef602628c59f46e10a1d1c2f7698cb"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  SplitPerVertexLights(<br/><span class="NDLSystemFont">ReturnCode</span> eFailedRC, <br/><span class="NDLSystemFont">NiUInt32</span> uiFailedPass, <br/>RenderPassDescriptor* pkRenderPasses, <br/><span class="NDLSystemFont">NiUInt32</span> uiMaxCount, <br/><span class="NDLSystemFont">NiUInt32</span>& uiCount)</p>
<p class="NDLRefMemberDescription">Create a new pass for each pass with lighting. </p>
<p class="NDLRefMemberDetailedDescription">The lights are evenly divided from the original pass into the new passes. Note that this only affects per-vertex lighting. These passes will be additively blended. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
