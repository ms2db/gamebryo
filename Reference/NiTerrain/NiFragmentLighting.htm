<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiFragmentLighting</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiFragmentLighting</p>
<p class="NDLRefParentage">: public NiFragment</p>


<p class="NDLRefHeaderFile">&lt;NiFragmentLighting.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/class_ni_fragment_lighting.gif" alt="Inheritance graph for NiFragmentLighting"/>
  <p class="FigureCaption">Inheritance graph for NiFragmentLighting</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal"><span class="NDLSystemFont">NiFragmentLighting</span> is an abstraction of the standard lighting pipeline for use in custom materials. </p>
<p class="NDLNormal">It allows consistent dynamic lighting to be applied to a scene without having to implement the code for each material written. The basic use involves instantiating the Fragment object in the material, setting the owner material with the setOwner function. Then generate the appropriate descriptor for lighting with GenerateDescriptor, and GenerateShaderDesc array.</p>
<p class="NDLNormal">The descriptors generated are generic and can be mapped into the material's descriptor easily either using the templated SetDescriptor functions, or by manually applying the descriptor bits in the material. To support the templated functions (including fallbacks) the following bits must be declared in some form on the descriptors:</p>
<p class="NDLNormal">Material <span class="NDLSystemFont"><a href="NiFragmentLighting__Descriptor.htm">Descriptor</a></span>: 1 bits - SPECULAR 1 bits - VERTEXCOLORS 2 bits - AMBDIFFEMISSIVE 1 bits - LIGHTINGMODE 1 bits - APPLYMODE 1 bits - PERVERTEXFORLIGHT 4 bits - POINTLIGHTCOUNT 4 bits - SPOTLIGHTCOUNT 4 bits - DIRLIGHTCOUNT 8 bits - SHADOWMAPFORLIGHT 2 bits - SHADOWTECHNIQUE 1 bits - PSSMSLICETRANSITIONSENABLED 3 bits - PSSMSLICECOUNT 4 bits - PSSMWHICHLIGHT</p>
<p class="NDLNormal">Vertex <span class="NDLSystemFont"><a href="NiFragmentLighting__Descriptor.htm">Descriptor</a></span>: 1 bits - OUTPUTWORLDPOS 1 bits - OUTPUTWORLDNBT 1 bits - OUTPUTWORLDVIEW 1 bits - SPECULAR 4 bits - POINTLIGHTCOUNT 4 bits - SPOTLIGHTCOUNT 4 bits - DIRLIGHTCOUNT 1 bits - VERTEXCOLORS 1 bits - VERTEXLIGHTSONLY 2 bits - AMBDIFFEMISSIVE 2 bits - LIGHTINGMODE 1 bits - APPLYMODE</p>
<p class="NDLNormal">Pixel <span class="NDLSystemFont"><a href="NiFragmentLighting__Descriptor.htm">Descriptor</a></span>: 1 bits - WORLDPOSITION 1 bits - WORLDNORMAL 1 bits - WORLDVIEW 4 bits - POINTLIGHTCOUNT 4 bits - SPOTLIGHTCOUNT 4 bits - DIRLIGHTCOUNT 8 bits - SHADOWMAPFORLIGHT 2 bits - AMBDIFFEMISSIVE 2 bits - LIGHTINGMODE 1 bits - APPLYAMBIENT 1 bits - APPLYEMISSIVE 4 bits - SHADOWTECHNIQUE 1 bits - PSSMSLICETRANSITIONSENABLED 3 bits - PSSMSLICECOUNT 4 bits - PSSMWHICHLIGHT 1 bits - APPLYMODE 1 bits - PERVERTEXLIGHTING </p>

<a name="public_types"></a>
<p class="NDLRefHead1">Public Types</p>


<a name="class_ni_fragment_lighting_1a168c6d3a429b2d45247e09e6d9ea3d16"></a>
<p class="NDLRefMemberFunction">typedef enum <span class="NDLSystemFont"><a href="../NiMain/NiStandardMaterial.htm">NiStandardMaterial::VertexColorType</a></span>  VertexColorType</p>
<p class="NDLRefMemberDescription">The standard material vertex color type enum. </p>

<a name="class_ni_fragment_lighting_1a1de7738e2ce40ad73d4c6e59734b489a"></a>
<p class="NDLRefMemberFunction">typedef enum <span class="NDLSystemFont"><a href="../NiMain/NiStandardMaterial.htm">NiStandardMaterial::AmbDiffEmissiveEnum</a></span>  AmbDiffEmissiveEnum</p>
<p class="NDLRefMemberDescription">The standard material ambient diffuse and emissive enum. </p>

<a name="class_ni_fragment_lighting_1a8f9a10036b5e47d8d88d1a068888d87f"></a>
<p class="NDLRefMemberFunction">typedef enum <span class="NDLSystemFont"><a href="../NiMain/NiStandardMaterial.htm">NiStandardMaterial::LightingModeEnum</a></span>  LightingModeEnum</p>
<p class="NDLRefMemberDescription">The standard material lighting mode enum. </p>

<a name="class_ni_fragment_lighting_1ad9f095a96fcf93d98faa12c78552cb62"></a>
<p class="NDLRefMemberFunction">typedef enum <span class="NDLSystemFont"><a href="../NiMain/NiStandardMaterial.htm">NiStandardMaterial::ApplyMode</a></span>  ApplyMode</p>
<p class="NDLRefMemberDescription">The standard material apply mode enum. </p>

<a name="class_ni_fragment_lighting_1a01cf70bc563dd6d362b18c1c61495fbf"></a>
<p class="NDLRefMemberFunction">typedef enum <span class="NDLSystemFont"><a href="../NiMain/NiStandardMaterial.htm">NiStandardMaterial::LightType</a></span>  LightType</p>
<p class="NDLRefMemberDescription">The standard material light type enum. </p>

<a name="class_ni_fragment_lighting_1a8106dfe336f0eccfeed6dbcd73a65eea"></a>
<p class="NDLRefMemberFunction">typedef enum <span class="NDLSystemFont"><a href="../NiMain/NiStandardMaterial.htm">NiStandardMaterial::TextureMap</a></span>  TextureMap</p>
<p class="NDLRefMemberDescription">The standard material Texture map enum. </p>

<a name="class_ni_fragment_lighting_1a5f775577ca7c97e07d096d9e3b1be66a"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../NiMain/NiStandardMaterial.htm">NiStandardMaterial</a></span>  EnumSource</p>
<p class="NDLRefMemberDescription">The source of the enum. </p>

<a name="class_ni_fragment_lighting_1a14d050cecb16d92c633f985e0fa3ca6f"></a>
<p class="NDLRefMemberFunction">typedef void*  ExtraLightingData</p>
<p class="NDLRefMemberDescription">Extra light data. </p><a name="class_ni_fragment_lighting_1ac2b05b86960825e79927c37bb05230ce"></a>
<p class=NDLRefHead2>anonymous enum</p>




<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">STANDARD_PIPE_MAX_LIGHTS</span></td>
    <td>The standard pipeline maximum number of lights. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">VERTEX_VERSION</span></td>
    <td>The current vertex version. Adjusting this invalidates the vertex cache and forces new shaders to be generated. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">GEOMETRY_VERSION</span></td>
    <td>The current geometry version. Adjusting this invalidates the geometry cache and forces new shaders to be generated. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">PIXEL_VERSION</span></td>
    <td>The current pixel version. Adjusting this invalidates the pixel cache and forces new shaders to be generated. </td>
</tr>

  </tbody>
</table>
</div>


<a name="public_static_methods"></a>
<p class="NDLRefHead1">Public Static Methods</p>


<a name="class_ni_fragment_lighting_1a2795c7ace544080fc320118141422c1a"></a>
<p class="NDLRefMemberFunction">template &lt;class Type  &gt; static void  SetDescriptor(<br/>Type* pkDescriptor, <br/>const <span class="NDLSystemFont"><a href="NiFragmentLighting__Descriptor.htm">Descriptor</a></span>& kDescriptor)</p>
<p class="NDLRefMemberDescription">Set the appropriate bits in a compliant material descriptor to match the details in a lighting descriptor. </p>
<p class="NDLRefMemberDetailedDescription">A description of the relevant bits to lighting can be found in the description of the <span class="NDLSystemFont">NiFragmentLighting</span> class. </p>

<a name="class_ni_fragment_lighting_1aaa0d1188695662b4bd360f3528ac25ca"></a>
<p class="NDLRefMemberFunction">template &lt;class Type  &gt; static void  GetDescriptor(<br/>const Type* pkDescriptor, <br/><span class="NDLSystemFont"><a href="NiFragmentLighting__Descriptor.htm">Descriptor</a></span>& kDescriptor)</p>
<p class="NDLRefMemberDescription">Get the appropriate bits in a compliant material descriptor and format them into a standard material descriptor. </p>
<p class="NDLRefMemberDetailedDescription">A description of the relevant bits to lighting can be found in the description of the <span class="NDLSystemFont">NiFragmentLighting</span> class. </p>

<a name="class_ni_fragment_lighting_1a111de44967d5009ab73f2e8ff11fead2"></a>
<p class="NDLRefMemberFunction">template &lt;class Type  &gt; static void  SetDescriptor(<br/>Type* pkVertexDesc, <br/>const <span class="NDLSystemFont"><a href="NiFragmentLighting__VertexDescriptor.htm">VertexDescriptor</a></span>& kDescriptor)</p>
<p class="NDLRefMemberDescription">Set the appropriate bits in a compliant vertex descriptor to match the details in a lighting vertex descriptor. </p>
<p class="NDLRefMemberDetailedDescription">A description of the relevant bits to lighting can be found in the description of the <span class="NDLSystemFont">NiFragmentLighting</span> class. </p>

<a name="class_ni_fragment_lighting_1a88d9d40119fb3a44ba3859fb9b86c751"></a>
<p class="NDLRefMemberFunction">template &lt;class Type  &gt; static void  SetDescriptor(<br/>Type* pkPixelDesc, <br/>const <span class="NDLSystemFont"><a href="NiFragmentLighting__PixelDescriptor.htm">PixelDescriptor</a></span>& kDescriptor)</p>
<p class="NDLRefMemberDescription">Set the appropriate bits in a compliant pixel descriptor to match the details in a lighting pixel descriptor. </p>
<p class="NDLRefMemberDetailedDescription">A description of the relevant bits to lighting can be found in the description of the <span class="NDLSystemFont">NiFragmentLighting</span> class. </p>

<a name="class_ni_fragment_lighting_1a52cd7908cc46ad58765f4f5632f5b665"></a>
<p class="NDLRefMemberFunction">template &lt;class Type  &gt; static void  GetDescriptor(<br/>const Type* pkVertexDesc, <br/><span class="NDLSystemFont"><a href="NiFragmentLighting__VertexDescriptor.htm">VertexDescriptor</a></span>& kDescriptor)</p>
<p class="NDLRefMemberDescription">Get the appropriate bits in a compliant vertex descriptor and format them into a lighting vertex descriptor. </p>
<p class="NDLRefMemberDetailedDescription">A description of the relevant bits to lighting can be found in the description of the <span class="NDLSystemFont">NiFragmentLighting</span> class. </p>

<a name="class_ni_fragment_lighting_1a89090cb88e98834b84471d4a05fe99f3"></a>
<p class="NDLRefMemberFunction">template &lt;class Type  &gt; static void  GetDescriptor(<br/>const Type* pkPixelDesc, <br/><span class="NDLSystemFont"><a href="NiFragmentLighting__PixelDescriptor.htm">PixelDescriptor</a></span>& kDescriptor)</p>
<p class="NDLRefMemberDescription">Get the appropriate bits in a compliant pixel descriptor and format them into a lighting pixel descriptor. </p>
<p class="NDLRefMemberDetailedDescription">A description of the relevant bits to lighting can be found in the description of the <span class="NDLSystemFont">NiFragmentLighting</span> class. </p>

<a name="class_ni_fragment_lighting_1ad1dcc97f59466fc11ae1b002ee85700c"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  GetTextureNameFromTextureEnum(<br/><span class="NDLSystemFont"><a href="NiFragmentLighting.htm#class_ni_fragment_lighting_1a8106dfe336f0eccfeed6dbcd73a65eea">TextureMap</a></span> eMap, <br/><span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>& kString, <br/><span class="NDLSystemFont">NiUInt32</span>& uiOccurance)</p>
<p class="NDLRefMemberDescription">Get the name of the texture and its index for that texture name from the texture enumeration. </p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="class_ni_fragment_lighting_1ab797f25806462f3ce76d6c501f90ddc6"></a>
<p class="NDLRefMemberFunction">NiFragmentLighting()</p>
<p class="NDLRefMemberDetailedDescription">Constructor </p>

<a name="class_ni_fragment_lighting_1afc7885df820f2dc08f3e681570afc28c"></a>
<p class="NDLRefMemberFunction">void  SetForcePerPixelLighting(<span class="NDLSystemFont">bool</span> bForce)</p>
<p class="NDLRefMemberDescription">Set a flag to force lighting to be done per-pixel. </p>

<a name="class_ni_fragment_lighting_1a5f2379051a0dfd92566a393fbcd00bc2"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetForcePerPixelLighting() const</p>
<p class="NDLRefMemberDescription">Get the value of the flag that forces per-pixel lighting. </p>

<a name="class_ni_fragment_lighting_1a0ad4db92aa6b6d9f4ca7a7f1f2f0d6a8"></a>
<p class="NDLRefMemberFunction">void  SetSaturateShading(<span class="NDLSystemFont">bool</span> bSaturate)</p>
<p class="NDLRefMemberDescription">Set the value of the flag that saturates the final lighting coefficients. </p>
<p class="NDLRefMemberDetailedDescription">When set to true, the maximum contribution of light to a pixel will be at maximum (1,1,1). When set to false, it is possible to have many lights affecting a pixel to cause that pixel to over expose and display pure white (what is called "White Saturation") </p>

<a name="class_ni_fragment_lighting_1a3e942a8a2124730aac9ab567f6c7e059"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetSaturateShading() const</p>
<p class="NDLRefMemberDescription">Get the value of the flag that saturates the final lighting coefficients. </p>

<a name="class_ni_fragment_lighting_1ac5a12d658b1983ea512c8111fd0c2953"></a>
<p class="NDLRefMemberFunction">void  SetSaturateTextures(<span class="NDLSystemFont">bool</span> bSaturate)</p>
<p class="NDLRefMemberDescription">Set a flag to saturate texture accumulation values before applying the shader coefficients. </p>

<a name="class_ni_fragment_lighting_1af2de0b83be6f93cf12c04bd5fc4b1306"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetSaturateTextures() const</p>
<p class="NDLRefMemberDescription">Get the value of a flag that, when set, saturates the texture accumulation values before applying the shader coefficients. </p>

<a name="class_ni_fragment_lighting_1add0095541399eaca54b7c52ffdcd7e63"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GenerateDescriptor(<br/>const <span class="NDLSystemFont"><a href="../NiMain/NiRenderObject.htm">NiRenderObject</a></span>* pkGeometry, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPropertyState.htm">NiPropertyState</a></span>* pkState, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiDynamicEffectState.htm">NiDynamicEffectState</a></span>* pkEffects, <br/><span class="NDLSystemFont"><a href="NiFragmentLighting__Descriptor.htm">Descriptor</a></span>& kMaterialDesc, <br/><span class="NDLSystemFont">bool</span> bNormals, <br/><span class="NDLSystemFont">bool</span> bParallaxMapping, <br/><span class="NDLSystemFont">bool</span> bNormalMapping)</p>
<p class="NDLRefMemberDescription">Generate a lighting descriptor to handle the application of lighting based on the state of this geometry. </p>

<a name="class_ni_fragment_lighting_1a2f47ceae9d8ba5ef58dfb21dfb688f99"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  SetupPackingRequirements(<br/><span class="NDLSystemFont"><a href="NiFragmentLighting__Descriptor.htm">Descriptor</a></span>& kDescriptor, <br/><span class="NDLSystemFont"><a href="../NiMain/NiShaderDeclaration.htm">NiShaderDeclaration</a></span>* pkShaderDecl, <br/>unsigned int& uiEntryCount)</p>
<p class="NDLRefMemberDescription">Adjust the shader declaration with appropriate stream entries for the lighting. </p>
<p class="NDLRefMemberDetailedDescription">At this point this may only include VertexColors </p>

<a name="class_ni_fragment_lighting_1a725c613444df2bc5b03176aa4eb650f9"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GenerateShaderDescArray(<br/><span class="NDLSystemFont"><a href="NiFragmentLighting__Descriptor.htm">Descriptor</a></span>& kMaterialDescriptor, <br/><span class="NDLSystemFont"><a href="NiFragmentLighting__PixelDescriptor.htm">PixelDescriptor</a></span>& kPixelDesc, <br/><span class="NDLSystemFont"><a href="NiFragmentLighting__VertexDescriptor.htm">VertexDescriptor</a></span>& kVertexDesc, <br/><span class="NDLSystemFont">NiUInt32</span> uiPassIndex, <br/><span class="NDLSystemFont">NiUInt32</span>& uiRequiredPassCount)</p>
<p class="NDLRefMemberDescription">By default this creates one render pass with an <span class="NDLSystemFont"><a href="../NiMain/NiStandardPixelProgramDescriptor.htm">NiStandardPixelProgramDescriptor</a></span> and an <span class="NDLSystemFont"><a href="../NiMain/NiStandardVertexProgramDescriptor.htm">NiStandardVertexProgramDescriptor</a></span>. </p>

<a name="class_ni_fragment_lighting_1ab657b04194854b712be910601f5b1f98"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  HandleInitialSpecAmbDiffEmissiveColor(<br/>Context& kContext, <br/><span class="NDLSystemFont">bool</span> bSpecularOn, <br/><span class="NDLSystemFont"><a href="NiFragmentLighting.htm#class_ni_fragment_lighting_1a1de7738e2ce40ad73d4c6e59734b489a">AmbDiffEmissiveEnum</a></span> eADF, <br/><span class="NDLSystemFont"><a href="NiFragmentLighting.htm#class_ni_fragment_lighting_1a8f9a10036b5e47d8d88d1a068888d87f">LightingModeEnum</a></span> eLightingMode, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span> *& pkDiffuseColorRes, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span> *& pkSpecularColorRes, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span> *& pkSpecularPowerRes, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span> *& pkAmbientColorRes, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span> *& pkEmissiveColorRes, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span> *& pkOpacityRes)</p>
<p class="NDLRefMemberDescription">This method adds the appropriate fragment to initialize the ambient/diffuse/specular/emissive colors from per-vertex values or <span class="NDLSystemFont"><a href="../NiMain/NiMaterialProperty.htm">NiMaterialProperty</a></span> constants for the pixel shader or vertex shader depending on the stage in which lighting occurs. </p>

<a name="class_ni_fragment_lighting_1a6e9d8b63a2725e2d1fd5cd86a98f65c6"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  HandleVertexLightingAndMaterials(<br/>Context& kContext, <br/><span class="NDLSystemFont"><a href="NiFragmentLighting__VertexDescriptor.htm">VertexDescriptor</a></span>& kVertexDesc, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkWorldPos, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkWorldNormal, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkWorldView)</p>
<p class="NDLRefMemberDescription">This method controls the lighting and material property pipeline for the vertex shader. </p>
<p class="NDLRefMemberDetailedDescription">It controls the application of per-vertex lighting or alternatively does the per-vertex work needed for per-pixel lighting. </p>

<a name="class_ni_fragment_lighting_1a964a0fa9ceddd04aadde1043aaddd45c"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  HandlePixelMaterialInitialValues(<br/>Context& kContext, <br/><span class="NDLSystemFont"><a href="NiFragmentLighting__PixelDescriptor.htm">PixelDescriptor</a></span>& kPixelDesc, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span> *& pkMatDiffuse, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span> *& pkMatSpecular, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span> *& pkSpecularPower, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span> *& pkGlossiness, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span> *& pkMatAmbient, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span> *& pkMatEmissive, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span> *& pkTexDiffuseAccum, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span> *& pkTexSpecularAccum, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span> *& pkDiffuseAccum, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span> *& pkSpecularAccum, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span> *& pkOpacityAccum, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span> *& pkLightDiffuseAccum, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span> *& pkLightSpecularAccum, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span> *& pkLightAmbientAccum)</p>
<p class="NDLRefMemberDescription">This method is called by GeneratePixelShadeTree to initialize most of the material variables for the texture and lighting pipelines. </p>
<p class="NDLRefMemberDetailedDescription">This also includes using the correct per-vertex parameters for per-pixel or per-vertex lighting. Variables are only instantiated if they are requested by the descriptor. </p>

<a name="class_ni_fragment_lighting_1aa8df4ea30de03ec70e430863cae9f770"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  HandleShadingCoefficients(<br/>Context& kContext, <br/><span class="NDLSystemFont">bool</span> bSaturateShading, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkMatEmissive, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkMatDiffuse, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkMatAmbient, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkMatSpecular, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkLightSpecularAccum, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkLightDiffuseAccum, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkLightAmbientAccum, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span> *& pkDiffuseCoeff, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span> *& pkSpecularCoeff)</p>
<p class="NDLRefMemberDescription">This method combines the input material and lighting values to compute the specular and diffuse coefficients of the shading equation. </p>
<p class="NDLRefMemberDetailedDescription">This method is called by either the vertex or pixel shader depending on the stage in which lighting is performed. </p>

<a name="class_ni_fragment_lighting_1aea1d0b8f58c1158b495151740662a928"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  HandleLighting(<br/>Context& kContext, <br/><span class="NDLSystemFont"><a href="NiFragmentLighting__PixelDescriptor.htm">PixelDescriptor</a></span>& kPixelDesc, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkWorldPos, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkWorldNorm, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkViewVector, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkSpecularPower, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span> *& pkAmbientAccum, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span> *& pkDiffuseAccum, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span> *& pkSpecularAccum, <br/><span class="NDLSystemFont"><a href="NiFragmentLighting.htm#class_ni_fragment_lighting_1a14d050cecb16d92c633f985e0fa3ca6f">ExtraLightingData</a></span> kExtraData = 0)</p>
<p class="NDLRefMemberDescription">This method is simply an overload of the more specific HandleLighting function, it simply expands the data found in the <span class="NDLSystemFont"><a href="NiFragmentLighting__PixelDescriptor.htm">PixelDescriptor</a></span> to supply the other function with the required information. </p>

<a name="class_ni_fragment_lighting_1af801901d3ecf6670f96a214206a78331"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  HandleLighting(<br/>Context& kContext, <br/><span class="NDLSystemFont">NiUInt32</span> uiShadowAtlasCells, <br/><span class="NDLSystemFont">NiUInt32</span> uiPSSMWhichLight, <br/><span class="NDLSystemFont">bool</span> bSliceTransitions, <br/><span class="NDLSystemFont">bool</span> bSpecular, <br/><span class="NDLSystemFont">NiUInt32</span> uiNumPoint, <br/><span class="NDLSystemFont">NiUInt32</span> uiNumDirectional, <br/><span class="NDLSystemFont">NiUInt32</span> uiNumSpot, <br/><span class="NDLSystemFont">NiUInt32</span> uiShadowBitfield, <br/><span class="NDLSystemFont">NiUInt32</span> uiShadowTechnique, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkWorldPos, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkWorldNorm, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkViewVector, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkSpecularPower, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span> *& pkAmbientAccum, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span> *& pkDiffuseAccum, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span> *& pkSpecularAccum, <br/><span class="NDLSystemFont"><a href="NiFragmentLighting.htm#class_ni_fragment_lighting_1a14d050cecb16d92c633f985e0fa3ca6f">ExtraLightingData</a></span> kExtraData = 0)</p>
<p class="NDLRefMemberDescription">This method controls the contribution of lighting to the object. </p>
<p class="NDLRefMemberDetailedDescription">It can be called from either the vertex or pixel shader depending on the context in which lighting is occurring. </p>

<a name="class_ni_fragment_lighting_1aee2f95fd281e230e7dba6e4b15df4566"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  HandleShadow(<br/>Context& kContext, <br/><span class="NDLSystemFont">NiUInt32</span> uiShadowAtlasCells, <br/><span class="NDLSystemFont">bool</span> bSliceTransitions, <br/><span class="NDLSystemFont">NiUInt32</span> uiLight, <br/><span class="NDLSystemFont"><a href="NiFragmentLighting.htm#class_ni_fragment_lighting_1a01cf70bc563dd6d362b18c1c61495fbf">LightType</a></span> eType, <br/><span class="NDLSystemFont">NiUInt32</span> uiLightByType, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkWorldPos, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkWorldNorm, <br/><span class="NDLSystemFont">NiUInt32</span> uiShadowTechnique, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span> *& pkShadow)</p>
<p class="NDLRefMemberDescription">This method computes the multiplier that a shadow applies to a given light. </p>
<p class="NDLRefMemberDetailedDescription">This method is called when generating a pixel shade tree. </p>

<a name="class_ni_fragment_lighting_1a1a362e34aea4fb9896ba9fe7ad983c94"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  HandleLight(<br/>Context& kContext, <br/><span class="NDLSystemFont">NiUInt32</span> uiLight, <br/><span class="NDLSystemFont"><a href="NiFragmentLighting.htm#class_ni_fragment_lighting_1a01cf70bc563dd6d362b18c1c61495fbf">LightType</a></span> eType, <br/><span class="NDLSystemFont">NiUInt32</span> uiLightByType, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkWorldPos, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkWorldNorm, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkViewVector, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkSpecularPower, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span> *& pkAmbientAccum, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span> *& pkDiffuseAccum, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span> *& pkSpecularAccum, <br/><span class="NDLSystemFont">bool</span> bSpecular, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkShadow, <br/><span class="NDLSystemFont"><a href="NiFragmentLighting.htm#class_ni_fragment_lighting_1a14d050cecb16d92c633f985e0fa3ca6f">ExtraLightingData</a></span> kExtraData = 0)</p>
<p class="NDLRefMemberDescription">This method controls the contribution of a single light to an object. </p>
<p class="NDLRefMemberDetailedDescription">This method can be called from either the vertex or pixel shade tree depending on where lighting is occurring. </p>

<a name="class_ni_fragment_lighting_1a30cdaa8c2244d1bff3535cb730e7a9cb"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  HandleColorAccumulation(<br/>Context& kContext, <br/><span class="NDLSystemFont"><a href="NiFragmentLighting__PixelDescriptor.htm">PixelDescriptor</a></span>& kPixelDesc, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkMatEmissive, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkMatDiffuse, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkMatAmbient, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkMatSpecular, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkLightSpecularAccum, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkLightDiffuseAccum, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkLightAmbientAccum, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkGlossiness, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkTexDiffuseAccum, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span>* pkTexSpecularAccum, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span> *& pkSpecularAccum, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialResource.htm">NiMaterialResource</a></span> *& pkDiffuseAccum)</p>
<p class="NDLRefMemberDescription">This method controls the combination of the shading coefficients from a material, textures, and lighting. </p>
<p class="NDLRefMemberDetailedDescription">This also handles the differences in computation needed for per-pixel and per-vertex lighting. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
