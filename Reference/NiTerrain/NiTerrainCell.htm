<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiTerrainCell</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiTerrainCell</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../NiMain/NiNode.htm">NiNode</a></span></p>


<p class="NDLRefHeaderFile">&lt;NiTerrainCell.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/class_ni_terrain_cell.gif" alt="Inheritance graph for NiTerrainCell"/>
  <p class="FigureCaption">Inheritance graph for NiTerrainCell</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">This abstract class represents a small portion of a terrain sector. </p>
<p class="NDLNormal">This portion is represented by a mesh and may be at any level of detail within the terrain. The two subclasses that are used to further define the terrain hierarchy are the <span class="NDLSystemFont"><a href="NiTerrainCellNode.htm">NiTerrainCellNode</a></span> and <span class="NDLSystemFont"><a href="NiTerrainCellLeaf.htm">NiTerrainCellLeaf</a></span>. </p>

<a name="public_types"></a>
<p class="NDLRefHead1">Public Types</p>
<a name="class_ni_terrain_cell_1abc69f71aa5cdac6fe25fec62eb899bf2"></a>
<p class=NDLRefHead2>NiTerrainCell::BORDERS</p>


<p class="NDLRefMemberDescription">Used to distinguish the different borders of this cell. </p>


<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">BORDER_NONE</span></td>
    <td>Unspecified border. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">BORDER_BOTTOM</span></td>
    <td>Borders the bottom. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">BORDER_RIGHT</span></td>
    <td>Borders the right. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">BORDER_TOP</span></td>
    <td>Borders the top. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">BORDER_LEFT</span></td>
    <td>Borders the left. </td>
</tr>

  </tbody>
</table>
</div>



<a name="class_ni_terrain_cell_1a4640fd5feb1b4f8ffd7ce004d557b256"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="NiTerrainResourceManager__TextureType.htm">NiTerrainResourceManager::TextureType</a></span>  TextureType</p>
<p class="NDLRefMemberDetailedDescription">Used to distinguish the different texture types </p>

<a name="class_ni_terrain_cell_1a8333f1d21c4bc47a53deb232e2149470"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="NiTerrainResourceManager__StreamType.htm">NiTerrainResourceManager::StreamType</a></span>  StreamType</p>
<p class="NDLRefMemberDescription">Used to distinguish the different stream types. </p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="class_ni_terrain_cell_1a63188cff055921139f8879e92b46c4e2"></a>
<p class="NDLRefMemberFunction">NiTerrainCell(<br/><span class="NDLSystemFont"><a href="NiTerrainSector.htm">NiTerrainSector</a></span>* pkSector, <br/><span class="NDLSystemFont">NiUInt32</span> uiLevel)</p>
<p class="NDLRefMemberDescription">Constructor. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pkSector</span></td>
    <td>The sector the cell belongs to </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiLevel</span></td>
    <td>the level of detail the cell is at </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_cell_1a0c84d8dbea764c65d32f0fae0e963a9a"></a>
<p class="NDLRefMemberFunction">virtual ~NiTerrainCell()</p>
<p class="NDLRefMemberDescription">Destructor. </p>

<a name="class_ni_terrain_cell_1a31f2b4515a9305077e9a63be3b018945"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  GetLevel() const</p>
<p class="NDLRefMemberDescription">Get the detail level of this tree node. </p>
<p class="NDLRefMemberDetailedDescription">From 0 at lowest detail, to n at the highest detail. </p>

<a name="class_ni_terrain_cell_1a3be1e00199b5e9fd22274f876ee5e907"></a>
<p class="NDLRefMemberFunction">void  SetLevel(<span class="NDLSystemFont">NiUInt32</span> uiLevel)</p>
<p class="NDLRefMemberDescription">Set the detail level of this tree node. </p>
<p class="NDLRefMemberDetailedDescription">From 0 at lowest detail, to n at the highest detail. </p>

<a name="class_ni_terrain_cell_1a771a86b33134f9145a2ef9aebc5f9069"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  GetNumSubDivisions() const</p>
<p class="NDLRefMemberDescription">Get the number of LOD subdivisions below this block's level. </p>
<p class="NDLRefMemberDetailedDescription">This is equivalent to Sector-&gt;GetNumLOD() - <span class="NDLSystemFont"><a href="NiTerrainCell.htm#class_ni_terrain_cell_1a31f2b4515a9305077e9a63be3b018945">GetLevel()</a></span> - 1. </p>

<a name="class_ni_terrain_cell_1ae00b3d4f9b228928af13528f9a4cbc5c"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  GetCellSize() const</p>
<p class="NDLRefMemberDescription">Retrieve the SIZE of the cell. </p>
<p class="NDLRefMemberDetailedDescription">Size is always a power of 2. </p>

<a name="class_ni_terrain_cell_1a052b5d4de0996994ce676a25bd007f63"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  GetWidthInVerts() const</p>
<p class="NDLRefMemberDescription">Retrieve the WIDTH of the cell, in vertices. </p>
<p class="NDLRefMemberDetailedDescription">This value will be equal to (2^n) + 1 for some n. </p>

<a name="class_ni_terrain_cell_1a929d165608748b320d09892c1629a098"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../NiMain/NiBound.htm">NiBound</a></span>&  GetLocalBound() const</p>
<p class="NDLRefMemberDescription">World Location bounding sphere. </p>

<a name="class_ni_terrain_cell_1a971253078ceee07706896680de7fb5ef"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../NiCollision/NiBoxBV.htm">NiBoxBV</a></span>&  GetLocalBoxBound() const</p>
<p class="NDLRefMemberDescription">World Location bounding box. </p>

<a name="class_ni_terrain_cell_1a5c4fd19d98ab3fdc9a483844194607a5"></a>
<p class="NDLRefMemberFunction">void  GetBottomLeftIndex(<span class="NDLSystemFont"><a href="NiIndex.htm">NiIndex</a></span>& kIndex) const</p>
<p class="NDLRefMemberDescription">Get the bottom left index of this cell. </p>
<p class="NDLRefMemberDetailedDescription">The bottom left index corresponds to the sector scope index of the vertex found at the bottom left of this cell.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kIndex</span></td>
    <td>Sector scope index of the bottom left vertex found in this cell. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_cell_1a689611a9198b2d3b8eba646b3c6b3e70"></a>
<p class="NDLRefMemberFunction">void  SetBottomLeftIndex(const <span class="NDLSystemFont"><a href="NiIndex.htm">NiIndex</a></span>& kIndex)</p>
<p class="NDLRefMemberDescription">Set the bottom left index of this cell. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kIndex</span></td>
    <td>Sector scope index of the bottom left vertex found in this cell. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_cell_1aaa5729a310c77164e9fc96b6f49e30fb"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  GetCellID() const</p>
<p class="NDLRefMemberDescription">The Block ID of a cell is a unique key that is used to identify any given cell, at any level. </p>
<p class="NDLRefMemberDetailedDescription">A Block ID takes into account the level of the cell and the bottom left index. </p>

<a name="class_ni_terrain_cell_1aa3e8f73fd661bd80424afa84bdb3a39a"></a>
<p class="NDLRefMemberFunction">void  SetCellID(<span class="NDLSystemFont">NiUInt32</span> uiRegionID)</p>
<p class="NDLRefMemberDescription">Set the block ID for this cell. </p>

<a name="class_ni_terrain_cell_1a53e32c1ff8e3940cc8a46f43685748c6"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  GetRegionID() const</p>
<p class="NDLRefMemberDescription">Get the region ID for this cell. </p>
<p class="NDLRefMemberDetailedDescription">The region ID also corresponds to the index of the <span class="NDLSystemFont"><a href="../NiMesh/NiDataStream__Region.htm">NiDataStream::Region</a></span> within the sectors static position stream that belongs to this cell. </p>

<a name="class_ni_terrain_cell_1aa43f5c5bdb3c4cb760b929669bd1b64b"></a>
<p class="NDLRefMemberFunction">void  SetRegionID(<span class="NDLSystemFont">NiUInt32</span> uiRegionID)</p>
<p class="NDLRefMemberDescription">Set the region ID for this cell. </p>

<a name="class_ni_terrain_cell_1a8a5256c3b6f246463d830fad625906a7"></a>
<p class="NDLRefMemberFunction">void  SetBoundData(<br/><span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span> kCenter, <br/>float fRadius)</p>
<p class="NDLRefMemberDescription">Reset the <span class="NDLSystemFont"><a href="../NiMain/NiBound.htm">NiBound</a></span> object according to the given center and radius, and store the given sum of positions. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kCenter</span></td>
    <td>Center of bounding sphere </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fRadius</span></td>
    <td>Radius of bounding sphere </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_cell_1af2490ee214e9493faa8c32959fbcf1c7"></a>
<p class="NDLRefMemberFunction">void  SetBoundVolumeBox(const <span class="NDLSystemFont"><a href="../NiCollision/NiBoxBV.htm">NiBoxBV</a></span>& kBox)</p>
<p class="NDLRefMemberDescription">Reset the bounding box according to the given box. </p>

<a name="class_ni_terrain_cell_1a5a431cdb9ca618845b11cb3a6c383b2c"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt8</span>  GetStitchingIndex() const</p>
<p class="NDLRefMemberDescription">Get the ID of the region in the index buffer to use for this cell. </p>
<p class="NDLRefMemberDetailedDescription">Generally universal across standard and custom index buffers. </p>

<a name="class_ni_terrain_cell_1a4b0795c1793943ae360e7008f1279f6d"></a>
<p class="NDLRefMemberFunction">void  SetWorldScale(float fScale)</p>
<p class="NDLRefMemberDescription">This override of the base class function SetWorldScale is used to update the morphing data when scaling is done on the terrain. </p>

<a name="class_ni_terrain_cell_1aae39bf476cd3e30d3ab886f0bb08d0a2"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiTerrainCell</span>*  GetParent()</p>
<p class="NDLRefMemberDescription">Retrieves the parent cell for this cell. </p>

<a name="class_ni_terrain_cell_1aa582729ebb1d16c1b7f86b5e51bfe4bd"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont">NiTerrainCell</span>*  GetParent() const</p>
<p class="NDLRefMemberDescription">Retrieves the parent cell for this cell. </p>

<a name="class_ni_terrain_cell_1a5a50f0b538ef8aa248306af28477825e"></a>
<p class="NDLRefMemberFunction">void  SetParent(<span class="NDLSystemFont">NiTerrainCell</span>* pkCell)</p>
<p class="NDLRefMemberDescription">Sets the parent cell for this cell. </p>

<a name="class_ni_terrain_cell_1aefac01ee85f36877efa0446782fcda96"></a>
<p class="NDLRefMemberFunction">void  GetVertexAt(<br/>const NiTerrainPositionRandomAccessIterator& kIterator, <br/><span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kVertex, <br/>const <span class="NDLSystemFont"><a href="NiIndex.htm">NiIndex</a></span>& kLocal) const</p>
<p class="NDLRefMemberDescription">Retrieves an NiTerrainVertex object that is found within this block. </p>
<p class="NDLRefMemberDetailedDescription">The given indices are in cell scope, meaning a value from 0 to GetSize() (inclusive).</p>
<p class="NDLRefMemberDetailedDescription"></p>
<p class="NDLRefMemberDetailedDescription">You can derive the local X, Y position of a vertex from the index itself. It is recommended to do so as opposed to calling this function where possible. </p>
<p class="NDLRefMemberDetailedDescription">Border vertices are conceptually shared between adjacent blocks, but the data itself is duplicated. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kIterator</span></td>
    <td>the iterator to be used to retrieve the vertex </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kVertex</span></td>
    <td>Resulting vertex. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kLocal</span></td>
    <td>CELL SCOPE index of the vertex within this leaf to retrieve. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_cell_1a85bc0a888523fdb0a23c3bb392cf612a"></a>
<p class="NDLRefMemberFunction">void  GetVertexAtSector(<br/>const NiTerrainPositionRandomAccessIterator& kIterator, <br/><span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kVertex, <br/>const <span class="NDLSystemFont"><a href="NiIndex.htm">NiIndex</a></span>& kSector) const</p>
<p class="NDLRefMemberDescription">Retrieves an NiTerrainVertex object that is found within the parent sector. </p>
<p class="NDLRefMemberDetailedDescription">The given indices are in Sector scope, meaning a value from 0 to SectorSize (inclusive).</p>
<p class="NDLRefMemberDetailedDescription"></p>
<p class="NDLRefMemberDetailedDescription">You can derive the local X, Y position of a vertex from the index itself. It is recommended to do so as opposed to calling this function where possible. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kIterator</span></td>
    <td>the iterator to be used to retrieve the vertex </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kVertex</span></td>
    <td>Resulting vertex. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kSector</span></td>
    <td>SECTOR SCOPE index of the vertex within this leaf to retrieve. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_cell_1a468c9ab8587573b32f424c789edf4d62"></a>
<p class="NDLRefMemberFunction">float  GetHeightAt(<br/>const NiTerrainPositionRandomAccessIterator& kIterator, <br/>const <span class="NDLSystemFont"><a href="NiIndex.htm">NiIndex</a></span>& kLocal) const</p>
<p class="NDLRefMemberDescription">Return the height of the vertex at the given cell scope index. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kIterator</span></td>
    <td>the iterator to be used to retrieve the vertex </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kLocal</span></td>
    <td>CELL SCOPE index of the vertex within this leaf to retrieve. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_cell_1a4be836777992b36c721bc8b33d747901"></a>
<p class="NDLRefMemberFunction">float  GetHeightAtSector(<br/>const NiTerrainPositionRandomAccessIterator& kIterator, <br/>const <span class="NDLSystemFont"><a href="NiIndex.htm">NiIndex</a></span>& kSector) const</p>
<p class="NDLRefMemberDescription">Return the height of the vertex at the given sector scope index. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kIterator</span></td>
    <td>the iterator to be used to retrieve the vertex </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kSector</span></td>
    <td>SECTOR SCOPE index of the vertex within this leaf to retrieve. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_cell_1a9f259dee34bbf1ef50cbeae0a3fbccf8"></a>
<p class="NDLRefMemberFunction">void  GetNormalAt(<br/>const NiTerrainNormalRandomAccessIterator& kIterator, <br/><span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kNormal, <br/>const <span class="NDLSystemFont"><a href="NiIndex.htm">NiIndex</a></span>& kLocal) const</p>
<p class="NDLRefMemberDescription">Return the normal of the vertex at the given cell scope index. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kIterator</span></td>
    <td>the iterator to be used to retrieve the normal </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kNormal</span></td>
    <td>Resulting normal. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kLocal</span></td>
    <td>CELL SCOPE index of the normal within this leaf to retrieve. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_cell_1a1b3a9e6bae2e7fcb0b5f49003f819870"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiTerrainCell</span>*  GetAdjacent(<span class="NDLSystemFont">NiUInt32</span> uiBorder)</p>
<p class="NDLRefMemberDescription">Attempts to find a cell adjacent to this cell, sharing the given border. </p>
<p class="NDLRefMemberDetailedDescription">Diagonals can be represented by bitwise AND-ing together two neighboring borders.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">uiBorder</span></td>
    <td>bitwise mask of <span class="NDLSystemFont"><a href="NiTerrainCell.htm#class_ni_terrain_cell_1abc69f71aa5cdac6fe25fec62eb899bf2">NiTerrainCell::BORDERS</a></span> enum dictating on which border to check for an adjacent cell. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Adjacent cell if found, null if no adjacent cell exists on given border. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_cell_1a5e4129b1e6fc15abece46e9bd4124ba6"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont">NiTerrainCell</span>*  GetAdjacent(<span class="NDLSystemFont">NiUInt32</span> uiBorder) const</p>
<p class="NDLRefMemberDescription">Attempts to find a cell adjacent to this cell, sharing the given border (const version). </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">uiBorder</span></td>
    <td>bitwise mask of <span class="NDLSystemFont"><a href="NiTerrainCell.htm#class_ni_terrain_cell_1abc69f71aa5cdac6fe25fec62eb899bf2">NiTerrainCell::BORDERS</a></span> enum dictating on which border to check for an adjacent cell. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Adjacent cell if found, bad pointer if no adjacent cell exists on given border </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_cell_1a0cb970dd39fd849e89ab82caeb5772bf"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiTerrainCell</span>*  GetAdjacentFast(<span class="NDLSystemFont">NiUInt32</span> uiBorder)</p>
<p class="NDLRefMemberDescription">Attempts to find a cell adjacent to this cell, sharing the given border. </p>
<p class="NDLRefMemberDetailedDescription">Diagonals can be represented by bitwise AND-ing together two neighboring borders. This is a fast method which always assumes that the adjacent exists.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">uiBorder</span></td>
    <td>bitwise mask of <span class="NDLSystemFont"><a href="NiTerrainCell.htm#class_ni_terrain_cell_1abc69f71aa5cdac6fe25fec62eb899bf2">NiTerrainCell::BORDERS</a></span> enum dictating on which border to check for an adjacent cell. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Adjacent cell if found, bad pointer if no adjacent cell exists on given border </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_cell_1a961f0be0c31213d6ce8b664bd8a31e3b"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont">NiTerrainCell</span>*  GetAdjacentFast(<span class="NDLSystemFont">NiUInt32</span> uiBorder) const</p>
<p class="NDLRefMemberDescription">Attempts to find a cell adjacent to this cell, sharing the given border (fast, const version). </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">uiBorder</span></td>
    <td>bitwise mask of <span class="NDLSystemFont"><a href="NiTerrainCell.htm#class_ni_terrain_cell_1abc69f71aa5cdac6fe25fec62eb899bf2">NiTerrainCell::BORDERS</a></span> enum dictating on which border to check for an adjacent cell. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Adjacent cell if found, bad pointer if no adjacent cell exists on given border </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_cell_1ad57b6097b154d106faae1250e8b50b77"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="NiIndex.htm">NiIndex</a></span>  SectorIndexFromLocal(const <span class="NDLSystemFont"><a href="NiIndex.htm">NiIndex</a></span>& kLocal) const</p>
<p class="NDLRefMemberDescription">Return the sector scope index, generated from a given cell scope index. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kLocal</span></td>
    <td>Cell Scope index </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Sector scope index </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_cell_1a7a98681e72ce56f47abb858687a17a78"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  SectorIndexToLocal(<br/>const <span class="NDLSystemFont"><a href="NiIndex.htm">NiIndex</a></span>& kSector, <br/><span class="NDLSystemFont"><a href="NiIndex.htm">NiIndex</a></span>& kLocal) const</p>
<p class="NDLRefMemberDescription">Convert a given sector scope index to a cell scope index within this cell. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kSector</span></td>
    <td>Sector scope index to convert. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kLocal</span></td>
    <td>Resulting cell scope index. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if given sector scope index corresponds to a local index </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_cell_1afc0d2262d67e39f86941c095cd4a3865"></a>
<p class="NDLRefMemberFunction">void  SectorIndexToLocalFast(<br/>const <span class="NDLSystemFont"><a href="NiIndex.htm">NiIndex</a></span>& kSector, <br/><span class="NDLSystemFont"><a href="NiIndex.htm">NiIndex</a></span>& kLocal) const</p>
<p class="NDLRefMemberDescription">Convert a given sector scope index to a cell scope index within this cell. </p>
<p class="NDLRefMemberDetailedDescription">This is an UNSAFE FUNCTION, it performs no bounds checking.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kSector</span></td>
    <td>Sector scope index to convert. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kLocal</span></td>
    <td>Resulting cell scope index. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_cell_1a3da6eee3d92da6b1cf5e48b145166657"></a>
<p class="NDLRefMemberFunction">virtual void  SetTextureRegion(<br/><span class="NDLSystemFont"><a href="../NiMain/NiPoint2.htm">NiPoint2</a></span> kOffset, <br/>float fScale, <br/><span class="NDLSystemFont"><a href="NiTerrainResourceManager__TextureType.htm#struct_ni_terrain_resource_manager_1_1_texture_type_1af7c56f974327b769cf7a20ad1bf6edba">NiTerrainCell::TextureType::Value</a></span> eTexType)</p>
<p class="NDLRefMemberDescription">Sets the offset and scale to be used by the cell for a texture region. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kOffset</span></td>
    <td>the offset for that texture </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fScale</span></td>
    <td>the scale to use on that texture </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">eTexType</span></td>
    <td>the texture region to affect (can be the Blend mask for a leaf or the low detail texture. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_cell_1a72cd194d3e2f4c65249b6979626473ba"></a>
<p class="NDLRefMemberFunction">virtual void  SetTexture(<br/><span class="NDLSystemFont"><a href="../NiMain/NiTexture.htm">NiTexture</a></span>* pkTexture, <br/><span class="NDLSystemFont"><a href="NiTerrainResourceManager__TextureType.htm#struct_ni_terrain_resource_manager_1_1_texture_type_1af7c56f974327b769cf7a20ad1bf6edba">NiTerrainCell::TextureType::Value</a></span> eTexType)</p>
<p class="NDLRefMemberDescription">Sets the texture to use for a particular texture region. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pkTexture</span></td>
    <td>the texture the texture region will point to </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">eTexType</span></td>
    <td>the texture region to affect (can be the Blend mask for a leaf or the low detail texture. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_cell_1a7298c36d20cba7015dad4f304795373b"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../NiMain/NiTexture.htm">NiTexture</a></span>*  GetTexture(<span class="NDLSystemFont"><a href="NiTerrainResourceManager__TextureType.htm#struct_ni_terrain_resource_manager_1_1_texture_type_1af7c56f974327b769cf7a20ad1bf6edba">NiTerrainCell::TextureType::Value</a></span> eTexType)</p>
<p class="NDLRefMemberDescription">Gets the texture to use for a particular texture region. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">eTexType</span></td>
    <td>the texture region to affect (can be the Blend mask for a leaf or the low detail texture. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>pkTexture the texture the texture region will point to </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_cell_1a70b8eee6a34d2f4cbfad90bdb2179b0f"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsInRange()</p>
<p class="NDLRefMemberDescription">Calculate whether this cell should be drawn, according to the camera position in the current rendering context. </p>
<p class="NDLRefMemberDetailedDescription">This function takes both raw 3D distance from camera and morph radius weightings into account. This function does not perform frustum culling.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>true if this block is a candidate for rendering </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_cell_1ad9b5a5b4d6ae403624efe425c59059fb"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  AddSurface(<br/><span class="NDLSystemFont">NiUInt32</span> uiSurfaceIndex, <br/><span class="NDLSystemFont">NiUInt32</span> uiNewPriority = 0)</p>
<p class="NDLRefMemberDescription">Add a surface to this cell. </p>
<p class="NDLRefMemberDetailedDescription">If the surface already exists, it will simply move that index to the given priority</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">uiSurfaceIndex</span></td>
    <td>the index of the new surface </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiNewPriority</span></td>
    <td>The position in the surface priority to insert. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the addition was successful, false if the leaf is full. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_cell_1aab0eaabc67744ce91a160f96e2132818"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  RemoveSurface(<span class="NDLSystemFont">NiUInt32</span> uiSurfaceIndex)</p>
<p class="NDLRefMemberDescription">Remove a surface from this cell. </p>
<p class="NDLRefMemberDetailedDescription">Optionally specify not to recalculate the best pixel spacing cache after the surface is removed, in which case it must be performed manually before any surface deformation occurs.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">uiSurfaceIndex</span></td>
    <td>the index of the surface to remove </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the surface was found. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_cell_1ac3ddc7fe02f1a39ef992eb8544fcdbd4"></a>
<p class="NDLRefMemberFunction">virtual const <span class="NDLSystemFont"><a href="NiTextureRegion.htm">NiTextureRegion</a></span>&  GetTextureRegion(<span class="NDLSystemFont"><a href="NiTerrainResourceManager__TextureType.htm#struct_ni_terrain_resource_manager_1_1_texture_type_1af7c56f974327b769cf7a20ad1bf6edba">NiTerrainCell::TextureType::Value</a></span> eType) const</p>
<p class="NDLRefMemberDescription">Functions that gets the texture region associated with the given type. </p>
<p class="NDLRefMemberDetailedDescription">Possible types are BLEND_MASK (for the Cell leaf only) LOW_RES_MASK or ALL_MASK. If ALL_MASK is given as a parameter, the low detail texture region will be returned.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">eType</span></td>
    <td>the texture region to affect (can be the Blend mask for a leaf or the low detail texture. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>the requested texture region </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_cell_1a00aec16f67366d38ab5035233d314a31"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="NiTextureRegion.htm">NiTextureRegion</a></span>&  GetTextureRegion(<span class="NDLSystemFont"><a href="NiTerrainResourceManager__TextureType.htm#struct_ni_terrain_resource_manager_1_1_texture_type_1af7c56f974327b769cf7a20ad1bf6edba">NiTerrainCell::TextureType::Value</a></span> eType)</p>
<p class="NDLRefMemberDescription">Functions that gets the texture region associated with the given type. </p>
<p class="NDLRefMemberDetailedDescription">Possible types are BLEND_MASK (for the Cell leaf only) LOW_RES_MASK or ALL_MASK. If ALL_MASK is given as a parameter, the low detail texture region will be returned.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">eType</span></td>
    <td>the texture region to affect (can be the Blend mask for a leaf or the low detail texture. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>the requested texture region </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_cell_1ab79aa1709079c5197fc44f528427045a"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">NiUInt8</span>  GetPixelAt(<br/><span class="NDLSystemFont"><a href="NiTerrainResourceManager__TextureType.htm#struct_ni_terrain_resource_manager_1_1_texture_type_1af7c56f974327b769cf7a20ad1bf6edba">NiTerrainCell::TextureType::Value</a></span> eType, <br/><span class="NDLSystemFont"><a href="NiIndex.htm">NiIndex</a></span> kCoordinates, <br/><span class="NDLSystemFont">NiUInt32</span> uiComponent) const</p>
<p class="NDLRefMemberDescription">Function that allows getting pixel values from the different texture regions. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">eType</span></td>
    <td>the texture region to affect (can be the Blend mask for a leaf or the low detail texture. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kCoordinates</span></td>
    <td>define the coordinates in the local texture space that we want to read the value at </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiComponent</span></td>
    <td>the channel of the texture we want the value for </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>returns the value found </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_cell_1aaf8cb85cc2a54fd3351a13a0220723e8"></a>
<p class="NDLRefMemberFunction">virtual void  SetPixelAt(<br/><span class="NDLSystemFont"><a href="NiTerrainResourceManager__TextureType.htm#struct_ni_terrain_resource_manager_1_1_texture_type_1af7c56f974327b769cf7a20ad1bf6edba">NiTerrainCell::TextureType::Value</a></span> eType, <br/><span class="NDLSystemFont"><a href="NiIndex.htm">NiIndex</a></span> kCoordinates, <br/><span class="NDLSystemFont">NiUInt32</span> uiComponent, <br/><span class="NDLSystemFont">NiUInt8</span> ucNewValue)</p>
<p class="NDLRefMemberDescription">Function that allows setting pixel values for the different texture regions. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">eType</span></td>
    <td>the texture region to affect (can be the Blend mask for a leaf or the low detail texture. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kCoordinates</span></td>
    <td>define the coordinates in the local texture space that we want to read the value at </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiComponent</span></td>
    <td>the channel of the texture we want the value for </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">ucNewValue</span></td>
    <td>out the new value we want to set </td>
</tr>

        </tbody>
    </table>
</div>


<a name="mesh_management"></a>
<p class="NDLRefHead1">Mesh Management</p>


<a name="class_ni_terrain_cell_1a61a0e746278ad0ae163d20cffb77ee89"></a>
<p class="NDLRefMemberFunction">void  CreateMesh()</p>
<p class="NDLRefMemberDescription">Creates the mesh for this cell using currently available data streams. </p>
<p class="NDLRefMemberDetailedDescription">The mesh will use any custom data streams it finds, but will fall back on the static streams found in the sector data. </p>

<a name="class_ni_terrain_cell_1a90b3acf76d43d989e527df757f1108ad"></a>
<p class="NDLRefMemberFunction">virtual void  DestroyMesh()</p>
<p class="NDLRefMemberDescription">Destroy the mesh associated with this cell, including surface blend textures and shader extra data. </p>
<p class="NDLRefMemberDetailedDescription">This function will not have any effect on associated dynamic streams, or delete any decals. </p>

<a name="class_ni_terrain_cell_1aefc742d6bd4bb0d3b141f7c7a1eb2f21"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../NiMesh/NiMesh.htm">NiMesh</a></span>&  GetMesh() const</p>
<p class="NDLRefMemberDescription">Return the <span class="NDLSystemFont"><a href="../NiMesh/NiMesh.htm">NiMesh</a></span> object currently attached to this cell. </p>
<p class="NDLRefMemberDetailedDescription">This function should only be called if a valid mesh exists in this block.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>the Mesh attached to the cell </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_cell_1aceaab64d437f3183ab8699fbee25254c"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiTerrainCellShaderData.htm">NiTerrainCellShaderData</a></span>&  GetShaderData()</p>
<p class="NDLRefMemberDescription">Gets a reference to the shader data bound to the mesh. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>The shader data passed on to either the vertex shader or the pixel shader. </td>
</tr>

        </tbody>
    </table>
</div>


<a name="parent_sector"></a>
<p class="NDLRefHead1">Parent Sector</p>


<a name="class_ni_terrain_cell_1a002b70c67f8bb0e1575244cd060d184c"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="NiTerrainSector.htm">NiTerrainSector</a></span>*  GetContainingSector() const</p>
<p class="NDLRefMemberDescription">Retrieve a pointer to the sector that owns this quadtree cell (const version). </p>

<a name="class_ni_terrain_cell_1ae70b85eb32e39418b36ea57d898d384e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiTerrainSector.htm">NiTerrainSector</a></span>*  GetContainingSector()</p>
<p class="NDLRefMemberDescription">Retrieve a pointer to the sector that owns this quadtree cell. </p>
<a name="streams_functionality"></a>
<p class="NDLRefHead1">Streams Functionality</p>


<a name="class_ni_terrain_cell_1a9125f0f2fb0c76780e03195b1670933b"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../NiMesh/NiDataStream.htm">NiDataStream</a></span>*  GetStream(<span class="NDLSystemFont"><a href="NiTerrainResourceManager__StreamType.htm#struct_ni_terrain_resource_manager_1_1_stream_type_1a8dd6567e6a1df2cc540b7d8c434cac07">StreamType::Value</a></span> eStreamType)</p>
<p class="NDLRefMemberDescription">Get the specified stream from the mesh of the cell. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">eStreamType</span></td>
    <td>the type of stream to retrieve </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>the corresponding stream </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_cell_1af02918d87ec588613f15d0ed480a9ad5"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  HasDynamicVertexStreams()</p>
<p class="NDLRefMemberDescription">Return true if this cell has been assigned a dynamic vertex stream, false otherwise. </p>

<a name="class_ni_terrain_cell_1af55a29e6a04403721d7a07349d74f271"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  HasDynamicUVStream()</p>
<p class="NDLRefMemberDescription">Return true if this cell has been assigned a dynamic UV stream, false otherwise. </p>

<a name="class_ni_terrain_cell_1aa44b8ad426f450cfed52970a63e8e687"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  HasDynamicIndexStream()</p>
<p class="NDLRefMemberDescription">Return true if this cell has been assigned a dynamic index stream, false otherwise. </p>

<a name="class_ni_terrain_cell_1a957170af7f18a330d9afda5b97f50e03"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../NiMesh/NiDataStream.htm">NiDataStream</a></span>*  GetDynamicStream(<span class="NDLSystemFont"><a href="NiTerrainResourceManager__StreamType.htm#struct_ni_terrain_resource_manager_1_1_stream_type_1a8dd6567e6a1df2cc540b7d8c434cac07">StreamType::Value</a></span> eStream)</p>
<p class="NDLRefMemberDescription">Return the dynamic stream corresponding to the given stream type, or NULL if no dynamic stream exists for the given type. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">eStream</span></td>
    <td>the type of stream to retrieve </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>the corresponding stream </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_cell_1ac044c576276541ebb8a8c36c7ead6837"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  SetDynamicVertexStreams(<br/><span class="NDLSystemFont"><a href="../NiMesh/NiDataStream.htm">NiDataStream</a></span>* pkPositionStream, <br/><span class="NDLSystemFont"><a href="../NiMesh/NiDataStream.htm">NiDataStream</a></span>* pkNormalTangentStream)</p>
<p class="NDLRefMemberDescription">Assign a dynamic vertex stream to this block. </p>
<p class="NDLRefMemberDetailedDescription">This will take the place of the static stream for this block only.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pkPositionStream</span></td>
    <td>The stream to use for positions </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkNormalTangentStream</span></td>
    <td>the stream to use for normal and tangent data </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>true if successful </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_cell_1af3250a1c289863c43f2660e9b49ecb7a"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  SetDynamicIndexStream(<span class="NDLSystemFont"><a href="../NiMesh/NiDataStream.htm">NiDataStream</a></span>* pkIndexStream)</p>
<p class="NDLRefMemberDescription">Assign a dynamic index stream to this block. </p>
<p class="NDLRefMemberDetailedDescription">This will take the place of the static stream for this block only. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pkIndexStream</span></td>
    <td>the stream to use for index data </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>true if successful </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_cell_1a006fb870aeb05a327081592ed5a8f659"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  SetDynamicUVStream(<span class="NDLSystemFont"><a href="../NiMesh/NiDataStream.htm">NiDataStream</a></span>* pkUVStream)</p>
<p class="NDLRefMemberDescription">Assign a dynamic texture coordinate stream to this block. </p>
<p class="NDLRefMemberDetailedDescription">This will take the place of the static stream for this block only. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pkUVStream</span></td>
    <td>the stream to use for UV data </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>true if successful </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_cell_1a7a6892004b110b97c79ba05dd83fb198"></a>
<p class="NDLRefMemberFunction">void  RemoveDynamicVertexStreams()</p>
<p class="NDLRefMemberDescription">Revert this cell to use a static vertex data streams if a dynamic streams were previously assigned. </p>
<p class="NDLRefMemberDetailedDescription">This function reverts the position, normal and tangent streams. </p>

<a name="class_ni_terrain_cell_1ae9b0eb10eb64c803db46674004ec1171"></a>
<p class="NDLRefMemberFunction">void  RemoveDynamicIndexStream()</p>
<p class="NDLRefMemberDescription">Revert this cell to use a static index data stream if a dynamic stream was previously assigned. </p>

<a name="class_ni_terrain_cell_1a625370b6d01105f1c52bbd8fa6ea9602"></a>
<p class="NDLRefMemberFunction">void  RemoveDynamicUVStream()</p>
<p class="NDLRefMemberDescription">Revert this cell to use a static texture coordinate data stream if a dynamic stream was previously assigned. </p>
<a name="update_functionality"></a>
<p class="NDLRefHead1">Update functionality</p>


<a name="class_ni_terrain_cell_1a1fca541f4bcb2bbb05271713bff96140"></a>
<p class="NDLRefMemberFunction">void  RequestUpdate()</p>
<p class="NDLRefMemberDescription">Request an update of the tree. </p>
<p class="NDLRefMemberDetailedDescription">If any vertices within this cell have changed their locations, an update must be requested. This is a recursive function, and will trigger an update request up to the root of the tree. This function does not perform the actual update, just flags that one is required. This function makes an assumption: if a parent already has new data, then all of its parents also have new data. </p>

<a name="class_ni_terrain_cell_1abfe4d7e7980ee9ec02715b2de1ad3e8e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  RequiresUpdate() const</p>
<p class="NDLRefMemberDescription">Returns true if this cell, or any cells below us require an update, otherwise false. </p>

<a name="class_ni_terrain_cell_1ab4ebe188f3809ff3679304691d6e1f4d"></a>
<p class="NDLRefMemberFunction">void  RequestBoundsUpdate()</p>
<p class="NDLRefMemberDescription">Request that when the cell is next updated, the bounds (for just this cell) should be recalculated. </p>
<p class="NDLRefMemberDetailedDescription">This does not call <span class="NDLSystemFont"><a href="NiTerrainCell.htm#class_ni_terrain_cell_1a1fca541f4bcb2bbb05271713bff96140">RequestUpdate()</a></span>, this needs to be done by the calling function. </p>

<a name="class_ni_terrain_cell_1a301c27fe1b1a585635bc889553f49a1e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsJustLoaded() const</p>
<p class="NDLRefMemberDescription">Returns true if this cell has just been paged in, or rebuilt. </p>
<p class="NDLRefMemberDetailedDescription">This flag is true if the cell has not been updated since it was created. </p>

<a name="class_ni_terrain_cell_1ac3499c0baec8f9d9f6eaf45d84de7bcd"></a>
<p class="NDLRefMemberFunction">virtual void  Update()</p>
<p class="NDLRefMemberDescription">Apply any incremental changes that were made to this cell's bounds via the RecenterCountainingBounds function. </p>

<a name="class_ni_terrain_cell_1a520b1504642882230ea9283d4d4a57ef"></a>
<p class="NDLRefMemberFunction">virtual void  UpdateEffectsDownward(<span class="NDLSystemFont"><a href="../NiMain/NiDynamicEffectState.htm">NiDynamicEffectState</a></span>* pkParentState)</p>
<p class="NDLRefMemberDescription">Request an update of the tree. </p>
<p class="NDLRefMemberDetailedDescription">If any vertices within this cell have changed their locations, an update must be requested. This is a recursive function, and will trigger an update request up to the root of the tree. This function does not perform the actual update, just flags that one is required. This function makes an assumption: if a parent already has new data, then all of its parents also have new data. </p>

<a name="class_ni_terrain_cell_1aed3418f7ecb525d7268405779e0fd4ba"></a>
<p class="NDLRefMemberFunction">virtual void  UpdatePropertiesDownward(<span class="NDLSystemFont"><a href="../NiMain/NiPropertyState.htm">NiPropertyState</a></span>* pkParentState)</p>
<p class="NDLRefMemberDescription">Request an update of the tree. </p>
<p class="NDLRefMemberDetailedDescription">If any vertices within this cell have changed their locations, an update must be requested. This is a recursive function, and will trigger an update request up to the root of the tree. This function does not perform the actual update, just flags that one is required. This function makes an assumption: if a parent already has new data, then all of its parents also have new data. </p>

<a name="class_ni_terrain_cell_1a0edd5f351606f970794e05509e7736a5"></a>
<p class="NDLRefMemberFunction">virtual void  UpdateBounds()</p>
<p class="NDLRefMemberDescription">This function forces an update of the bounding box/sphere that is used for this cell. </p>

<a name="class_ni_terrain_cell_1ad26d7db5fb9df292bc3800e14b2f4568"></a>
<p class="NDLRefMemberFunction">void  UpdateMorphConstants()</p>
<p class="NDLRefMemberDescription">This function updates the shader constant data for morphing. </p>
<p class="NDLRefMemberDetailedDescription">This function is called whenever the scaling of the terrain is changed, and when the LOD scale is changed. </p>

<a name="class_ni_terrain_cell_1aecc224d9a1c597c81ad1fbedea8ec553"></a>
<p class="NDLRefMemberFunction">void  ResetCullingResults()</p>
<p class="NDLRefMemberDescription">Set the 'Drawn' flags for all blocks in the quadtree to false. </p>
<p class="NDLRefMemberDetailedDescription">This function should only be called on the root node of the quadtree, as the drawn cache is shared by all cells in a tree </p>

<a name="class_ni_terrain_cell_1a160c6c3690485bca0e21cff7bc9ee352"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  ProcessLOD()</p>
<p class="NDLRefMemberDescription">Recursively build the visible set of cells, adding it to the visible set stored in the sector data's rendering context. </p>
<p class="NDLRefMemberDetailedDescription">This function also prepares the 'drawn' member variables to be used in ProcessBorders.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">To optimize, this function assumes that if any one child exists, all other children will be present.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>True if this cell or any of its children are visible. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_cell_1a957170a9eadd72b500d0a434cd80c402"></a>
<p class="NDLRefMemberFunction">virtual void  ProcessBorders()</p>
<p class="NDLRefMemberDescription">Update the index buffer region used by this cell according to which borders need to be stitched. </p>
<p class="NDLRefMemberDetailedDescription">This is a recursive function, that will also process the borders of all block children. </p>

<a name="class_ni_terrain_cell_1a1c3668683ba5dea0a6bc1cf4cb7aaaf8"></a>
<p class="NDLRefMemberFunction">void  MarkCellLoaded()</p>
<p class="NDLRefMemberDescription">Sets the UPDATE_CELL_JUST_LOADED flag to true. </p>
<p class="NDLRefMemberDetailedDescription">This will mark the cell as requiring to update its effects and properties </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
