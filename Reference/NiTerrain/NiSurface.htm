<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiSurface</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiSurface</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../efd/efd__MemObject.htm">efd::MemObject</a></span></p>


<p class="NDLRefHeaderFile">&lt;NiSurface.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/class_ni_surface.gif" alt="Inheritance graph for NiSurface"/>
  <p class="FigureCaption">Inheritance graph for NiSurface</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal"><span class="NDLSystemFont">NiSurface</span> objects are used to describe different patches of terrain. </p>
<p class="NDLNormal">An <span class="NDLSystemFont">NiSurface</span> object can be painted onto the terrain to create patches of grass, sand, snow, gravel, etc. This class is mainly used to define how these patches will be rendered by correlating all the relevant data ready to be sent to the <span class="NDLSystemFont"><a href="NiTerrainMaterial.htm">NiTerrainMaterial</a></span>. </p>

<a name="public_types"></a>
<p class="NDLRefHead1">Public Types</p>
<a name="class_ni_surface_1a12b3ca34aa6d07ea1246da72a73c0931"></a>
<p class=NDLRefHead2>NiSurface::SurfaceMapID</p>


<p class="NDLRefMemberDescription">The enumeration used to select different map channels:. </p>


<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">SURFACE_MAP_DIFFUSE</span></td>
    <td>Diffuse map which may or may not contain an alpha channel. If the alpha channel is present then alpha is interpreted as a detail map. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SURFACE_MAP_DETAIL</span></td>
    <td>Single channel detail map. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SURFACE_MAP_NORMAL</span></td>
    <td>Normal map which may or may not contain an alpha channel. If the alpha channel is present then alpha is interpreted as a parallax map. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SURFACE_MAP_PARALLAX</span></td>
    <td>Single channel parallax map. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SURFACE_MAP_DISTRIBUTION</span></td>
    <td>Distrubtion map is tiled the same number of times as the diffuse and normal map but is used to provide additional blending information per layer. This allows a non-linear blend around the borders of layers. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SURFACE_MAP_SPECULAR</span></td>
    <td>Specular map. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">NUM_SURFACE_MAPS</span></td>
    <td>Maximum number of maps that may be assigned to a surface/material. </td>
</tr>

  </tbody>
</table>
</div>

<a name="class_ni_surface_1a5c531ca04674cfe7cd0f327c94e06661"></a>
<p class=NDLRefHead2>NiSurface::SurfaceTextureID</p>


<p class="NDLRefMemberDescription">An enumeration used to select different textures from the surface's texturing property. </p>


<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">SURFACE_TEX_DIFFUSE_DETAIL</span></td>
    <td>The texture with RBG = Diffuse, A = Detail. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SURFACE_TEX_NORMAL_PARALLAX</span></td>
    <td>The texture with RBG = Normals, A = Parallax. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SURFACE_TEX_SPECULAR_DISTRIBUTION</span></td>
    <td>The texture with RBG = Specular, A = Distribution. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">NUM_SURFACE_TEXTURES</span></td>
    <td>Maximum number of textures in the texturing property. </td>
</tr>

  </tbody>
</table>
</div>

<a name="class_ni_surface_1aa68094cd7354805e012294e6d21cf3d4"></a>
<p class=NDLRefHead2>NiSurface::SurfaceMapCaps</p>


<p class="NDLRefMemberDescription">Values used to control layer capabilities. </p>


<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">SURFACE_CAPS_DIFFUSE</span></td>
    <td>Surface can support diffuse maps. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SURFACE_CAPS_DETAIL</span></td>
    <td>Surface can support detail maps. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SURFACE_CAPS_NORMAL</span></td>
    <td>Surface can support normal maps. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SURFACE_CAPS_PARALLAX</span></td>
    <td>Surface can support parallax maps. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SURFACE_CAPS_DISTRIBUTION</span></td>
    <td>Surface can support distribution maps. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SURFACE_CAPS_SPECULAR</span></td>
    <td>Surface can support specular maps. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SURFACE_CAPS_ALL</span></td>
    <td>Surface can support all map types. </td>
</tr>

  </tbody>
</table>
</div>


<a name="public_static_attributes"></a>
<p class="NDLRefHead1">Public Static Attributes</p>


<a name="class_ni_surface_1ad8185412f3a86b1d2c1d4b0f38046e0d"></a>
<p class="NDLRefMemberFunction">static const char*  CONFIG_EXTRADATA_KEY</p>
<p class="NDLRefMemberDescription">Key used to get the <span class="NDLSystemFont"><a href="../NiMain/NiExtraData.htm">NiExtraData</a></span> registered with a terrain cell's texture property. </p>
<p class="NDLRefMemberDetailedDescription">The extra data encodes information about that surfaces are on a given cell. </p>

<a name="class_ni_surface_1a460b971819bdf73b0244abfa48d21cbc"></a>
<p class="NDLRefMemberFunction">static const char*  MISSING_TEXTURE_PATH</p>
<p class="NDLRefMemberDescription">String used to identify a texture that has failed to resolve. </p>
<a name="public_static_methods"></a>
<p class="NDLRefHead1">Public Static Methods</p>


<a name="class_ni_surface_1afba29649f1aabd7e268a474d3a7d0db9"></a>
<p class="NDLRefMemberFunction">static void  SetErrorSurface(<span class="NDLSystemFont">NiSurface</span>* pkSurface)</p>
<p class="NDLRefMemberDetailedDescription">Set the surface to use when other surfaces are unavailable </p>

<a name="class_ni_surface_1a887f7d0df4a367873c50e457a064861f"></a>
<p class="NDLRefMemberFunction">static void  SetLoadingSurface(<span class="NDLSystemFont">NiSurface</span>* pkSurface)</p>
<p class="NDLRefMemberDescription">Set the surface to use when a surface is still loading. </p>

<a name="class_ni_surface_1a348083b57a86706cc9936bb3c94781a6"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">NiSurface</span>*  GetErrorSurface()</p>
<p class="NDLRefMemberDescription">Get the error surface. </p>

<a name="class_ni_surface_1a573cfe9b7c6576599e410458daf26e57"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">NiSurface</span>*  GetLoadingSurface()</p>
<p class="NDLRefMemberDescription">Get the loading surface. </p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="class_ni_surface_1a2f6873f1445904b16bb48b8441002da1"></a>
<p class="NDLRefMemberFunction">virtual ~NiSurface()</p>
<p class="NDLRefMemberDescription">Destructor. </p>
<a name="constructors"></a>
<p class="NDLRefHead1">Constructors</p>


<a name="class_ni_surface_1a8f3702dbadb8b60f53098402e08a402b"></a>
<p class="NDLRefMemberFunction">NiSurface()</p>
<p class="NDLRefMemberDescription">Constructor with parameters. </p>
<a name="package_management"></a>
<p class="NDLRefHead1">Package Management</p>


<a name="class_ni_surface_1adf91f773b2a2e2f468eddeb7c2129cad"></a>
<p class="NDLRefMemberFunction">void  SetPackage(<span class="NDLSystemFont"><a href="NiSurfacePackage.htm">NiSurfacePackage</a></span>* pkPackage)</p>
<p class="NDLRefMemberDescription">Sets a reference to the package that contains this surface instance. </p>
<p class="NDLRefMemberDetailedDescription">This function will update both the new and the old package to reflect the package change.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">If the new package is set to NULL, the user claims responsibility for deleting this surface when it is no longer used. </p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pkPackage</span></td>
    <td>The package that owns this surface instance. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_surface_1acde09a59ab2c4f4dfcb3ea98a84111b7"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiSurfacePackage.htm">NiSurfacePackage</a></span>*  GetPackage() const</p>
<p class="NDLRefMemberDescription">Gets a reference to the package that contains this surface instance. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>The package that owns this surface instance. </td>
</tr>

        </tbody>
    </table>
</div>


<a name="properties"></a>
<p class="NDLRefHead1">Properties</p>


<a name="class_ni_surface_1a5e5066413037eee472b8ee922eb35be1"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../NiMain/NiString.htm">NiString</a></span>&  GetName() const</p>
<p class="NDLRefMemberDescription">Get the name of this surface. </p>

<a name="class_ni_surface_1a1a989536db55250bd71413f80f1696ce"></a>
<p class="NDLRefMemberFunction">void  SetName(const <span class="NDLSystemFont"><a href="../NiMain/NiString.htm">NiString</a></span>& kName)</p>
<p class="NDLRefMemberDescription">Set the name of this surface. </p>
<p class="NDLRefMemberDetailedDescription">This function will also update the containing package to reflect the name change. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kName</span></td>
    <td>Name of this surface. </td>
</tr>

        </tbody>
    </table>
</div>


<a name="shader_interface"></a>
<p class="NDLRefHead1">Shader Interface</p>


<a name="class_ni_surface_1a8fdef949e05c19c867af0b27156c5e71"></a>
<p class="NDLRefMemberFunction">void  PrepareForUse()</p>
<p class="NDLRefMemberDescription">This function prepares the surface for use in a shader by making sure the surface has a valid texturing property available. </p>
<p class="NDLRefMemberDetailedDescription">This may be done by either loading compiled textures from disk, or compiling the textures from their input textures. </p>

<a name="class_ni_surface_1a1c9405efe331ca349202e74fe6d9ac57"></a>
<p class="NDLRefMemberFunction">void  LoadCachedTextures()</p>
<p class="NDLRefMemberDescription">Loads this surface's precompiled textures from disk and assigns them to the texturing property. </p>

<a name="class_ni_surface_1a1dd9bb571b07a9e93434a416830f620f"></a>
<p class="NDLRefMemberFunction">void  CompileSurface()</p>
<p class="NDLRefMemberDescription">This function loads all the texture files that have been specified and packs them into a platform specific format optimal for a given platform. </p>
<p class="NDLRefMemberDetailedDescription">Once this function is called, the surface is ready to be used for rendering if the compilation was successful. Check the existance of texturing property to see if it succeeded. </p>

<a name="class_ni_surface_1a4bd37e581a39891171f24fbfb9df3451"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../NiMain/NiTexturingProperty.htm">NiTexturingProperty</a></span>*  GenerateSurfaceTextures() const</p>
<p class="NDLRefMemberDescription">This function loads all the texture files that have been specified and packs them into a platform specific format optimal for a given platform. </p>
<p class="NDLRefMemberDetailedDescription">This function then returns this generated set of textures to the caller (used for saving) and does not prepare the surface to be rendered at all. </p>

<a name="class_ni_surface_1ab65d16ed1ac0aae6c4402b2238c4703c"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsCompiled() const</p>
<p class="NDLRefMemberDescription">Return true if this surface has been compiled through the CompileSurface function. </p>

<a name="class_ni_surface_1a2abef224b0a206b96be88a2226054c36"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsResolved() const</p>
<p class="NDLRefMemberDescription">Returns true if all texture asset ids have been resolved meaning this surface is ready to be compiled. </p>

<a name="class_ni_surface_1a2c8f43642ac83c413727677d6952dca9"></a>
<p class="NDLRefMemberFunction">void  SetTexturingProperty(<span class="NDLSystemFont"><a href="../NiMain/NiTexturingProperty.htm">NiTexturingProperty</a></span>* pkTexProp)</p>
<p class="NDLRefMemberDescription">Sets the texturing property representing the surface. </p>
<p class="NDLRefMemberDetailedDescription">This will mark the surface as compiled. </p>

<a name="class_ni_surface_1a2ce2625258a8b1c11f96f129f656c698"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../NiMain/NiTexturingProperty.htm">NiTexturingProperty</a></span>*  GetTexturingProperty() const</p>
<p class="NDLRefMemberDescription">Gets the texturing property representing the surface. </p>
<p class="NDLRefMemberDetailedDescription">Note, this is only valid after a surface has been successfully compiled. </p>

<a name="class_ni_surface_1a57e88549edaa27cb795ab283a9aa12a1"></a>
<p class="NDLRefMemberFunction">static const char*  GetTextureSlotName(<span class="NDLSystemFont"><a href="NiSurface.htm#class_ni_surface_1a12b3ca34aa6d07ea1246da72a73c0931">SurfaceMapID</a></span> eMapID)</p>
<p class="NDLRefMemberDescription">Helper function to get a string representation of the surface map enum. </p>
<a name="surface_configuration"></a>
<p class="NDLRefHead1">Surface Configuration</p>


<a name="class_ni_surface_1a079a9ddf66c4aee13b302a1364f74816"></a>
<p class="NDLRefMemberFunction">void  SetTextureSlotEntry(<br/><span class="NDLSystemFont"><a href="NiSurface.htm#class_ni_surface_1a12b3ca34aa6d07ea1246da72a73c0931">SurfaceMapID</a></span> eMapID, <br/><span class="NDLSystemFont"><a href="NiSurface__TextureSlotEntry.htm">TextureSlotEntry</a></span>* pkTexSlot)</p>
<p class="NDLRefMemberDescription">Sets a texture slot on the surface. </p>
<p class="NDLRefMemberDetailedDescription">If a texture already exists, it is deleted and the specified texture is assigned in its place. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">eMapID</span></td>
    <td>Texture type to assign. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkTexSlot</span></td>
    <td>New texture information. Specified NULL to clear the entry. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_surface_1afc21b59c5514e49c82b7186e1b31ac88"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiSurface__TextureSlotEntry.htm">TextureSlotEntry</a></span>*  GetTextureSlotEntry(<span class="NDLSystemFont"><a href="NiSurface.htm#class_ni_surface_1a12b3ca34aa6d07ea1246da72a73c0931">SurfaceMapID</a></span> eMapID) const</p>
<p class="NDLRefMemberDescription">Gets a pointer to the specified texture slot on the surface. </p>

<a name="class_ni_surface_1af4ef97b3eda68def2c8d888d0279dbc0"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  HasValidTextureSlots() const</p>
<p class="NDLRefMemberDescription">Checks for any non-null texture slots. </p>
<p class="NDLRefMemberDetailedDescription">If at least one is found, this method returns true, else, it returns false. </p>

<a name="class_ni_surface_1a9343151d7835fff6a99c129b3d27fda5"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  GetSurfaceCaps() const</p>
<p class="NDLRefMemberDescription">Gets a bit-mask containing bits set for each of the valid types of texture maps on the surface. </p>

<a name="class_ni_surface_1a4a9d265f2b23ef3b32e747377ead6832"></a>
<p class="NDLRefMemberFunction">float  GetTextureTiling() const</p>
<p class="NDLRefMemberDescription">Gets the amount of times the surface repeats across the terrain. </p>

<a name="class_ni_surface_1af87a754468913a795f5ac0326ee8784d"></a>
<p class="NDLRefMemberFunction">void  SetTextureTiling(float fValue)</p>
<p class="NDLRefMemberDescription">Sets the amount of times the surface repeats across the terrain. </p>

<a name="class_ni_surface_1a0d7b3327c1fa2afdf8c9530c9502dc15"></a>
<p class="NDLRefMemberFunction">float  GetDetailTextureTiling() const</p>
<p class="NDLRefMemberDescription">Gets the amount of times the detail texture repeats across the terrain. </p>

<a name="class_ni_surface_1ab4ea9b9ae6fbe14df9ccc714c865191d"></a>
<p class="NDLRefMemberFunction">void  SetDetailTextureTiling(float fValue)</p>
<p class="NDLRefMemberDescription">Sets the amount of times the detail texture repeats across the terrain. </p>

<a name="class_ni_surface_1a64fb4e0d6c669eca0be9e80a9d973df1"></a>
<p class="NDLRefMemberFunction">float  GetRotation() const</p>
<p class="NDLRefMemberDescription">Gets the rotation of the surface. </p>
<p class="NDLRefMemberDetailedDescription">The rotation is about the axis perpendicular to the surface as projected on the terrain. </p>

<a name="class_ni_surface_1a5f006818ce0ad7b4b036e2fa71c4d0d2"></a>
<p class="NDLRefMemberFunction">void  SetRotation(float fValue)</p>
<p class="NDLRefMemberDescription">Sets the rotation of the surface. </p>

<a name="class_ni_surface_1a24feba7573ee2dbb2d4b051df2415beb"></a>
<p class="NDLRefMemberFunction">float  GetParallaxStrength() const</p>
<p class="NDLRefMemberDescription">Gets the amount of influence from the parallax map on the surface. </p>

<a name="class_ni_surface_1a9040f105271cdffeb277bedbe301fd9f"></a>
<p class="NDLRefMemberFunction">void  SetParallaxStrength(float fValue)</p>
<p class="NDLRefMemberDescription">Sets the amount of influence from the parallax map on the surface. </p>

<a name="class_ni_surface_1a721a24aa3cab3c690cbdd2740679f0dc"></a>
<p class="NDLRefMemberFunction">float  GetDistributionMaskStrength() const</p>
<p class="NDLRefMemberDescription">Gets the scaler value applied to the distribution mask. </p>

<a name="class_ni_surface_1a1c07a9856933af3921d2f504dee4909b"></a>
<p class="NDLRefMemberFunction">void  SetDistributionMaskStrength(float fValue)</p>
<p class="NDLRefMemberDescription">Sets the distribution mask strength. </p>

<a name="class_ni_surface_1a3d6cc30352e1629132ce0b20d8583b3e"></a>
<p class="NDLRefMemberFunction">float  GetSpecularPower() const</p>
<p class="NDLRefMemberDescription">Gets the specular power. </p>

<a name="class_ni_surface_1aa33a8f975bc4fda2871895d99d6c8cc3"></a>
<p class="NDLRefMemberFunction">void  SetSpecularPower(float fValue)</p>
<p class="NDLRefMemberDescription">Sets the specular power. </p>
<p class="NDLRefMemberDetailedDescription">This is only used if a valid specular map is assigned to the surface. </p>

<a name="class_ni_surface_1af4ec7c34a896b284e05a10855a29dfbe"></a>
<p class="NDLRefMemberFunction">float  GetSpecularIntensity() const</p>
<p class="NDLRefMemberDescription">Gets the strength at which the specular map affects the surface. </p>

<a name="class_ni_surface_1a5b94d8fcc6dd7d925b4b45f8b44e61eb"></a>
<p class="NDLRefMemberFunction">void  SetSpecularIntensity(float fValue)</p>
<p class="NDLRefMemberDescription">Sets the strength at which the specular map affects the surface. </p>

<a name="class_ni_surface_1ad47eb41bd7b07f9dd8b6fe3123d602a1"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiMetaData.htm">NiMetaData</a></span>&  GetMetaData()</p>
<p class="NDLRefMemberDescription">Retrieve a reference to the <span class="NDLSystemFont"><a href="NiMetaData.htm">NiMetaData</a></span> object that this surface uses. </p>

<a name="class_ni_surface_1ae30493c9028f0d9aa40f0deae586c315"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="NiMetaData.htm">NiMetaData</a></span>&  GetMetaData() const</p>
<p class="NDLRefMemberDescription">Retrieve a const reference to the <span class="NDLSystemFont"><a href="NiMetaData.htm">NiMetaData</a></span> object that this surface uses. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
