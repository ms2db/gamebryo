<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiRay</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiRay</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../efd/efd__MemObject.htm">efd::MemObject</a></span></p>


<p class="NDLRefHeaderFile">&lt;NiRay.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/class_ni_ray.gif" alt="Inheritance graph for NiRay"/>
  <p class="FigureCaption">Inheritance graph for NiRay</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">The <span class="NDLSystemFont">NiRay</span> class is a special ray used in the terrain collision system. </p>
<p class="NDLNormal">Each ray is given an origin in world space, a direction vector and an optional length. When used in a collision with the terrain, the details of any collision will be stored within and is accessible from the ray object itself. </p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="class_ni_ray_1a421d0cc792f7ce9b431fec8ca9870fa7"></a>
<p class="NDLRefMemberFunction">float  DistanceTo(const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kPoint) const</p>
<p class="NDLRefMemberDescription">Given a point, this function will calculate the shortest distance from that point to the ray. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">This function introduces a slight floating point error margin, since it makes use of the faster <span class="NDLSystemFont"><a href="../efd/efd__Point3.htm#classefd_1_1_point3_1a6b83fef1b639d3947ec13de0dde4718c">NiPoint3::VectorLength</a></span> function. </p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kPoint</span></td>
    <td>World space coordinate to test against the ray </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Distance between the given point, and the ray.</td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_ray_1a5c41ecdc9da9276cd27df7439eafdbbd"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetPerpendicularPassingThrough(<br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kPoint, <br/><span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kIntersection, <br/><span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kDirection) const</p>
<p class="NDLRefMemberDescription">Finds a vector that originates on this ray and passes through the given point. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">This function introduces a slight floating point error margin, since it makes use of the faster <span class="NDLSystemFont"><a href="../efd/efd__Point3.htm#classefd_1_1_point3_1a6b83fef1b639d3947ec13de0dde4718c">NiPoint3::VectorLength</a></span> function. </p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kPoint</span></td>
    <td>Point in world space to test against the ray </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kIntersection</span></td>
    <td>Point in world space that lies on this ray, which the vector originates from. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kDirection</span></td>
    <td>Direction of the resulting perpendicular vector. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if a valid point was found</td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_ray_1a2660c7580bf5c3f9d2974f0edaaedbd7"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  PassesThroughBound(const <span class="NDLSystemFont"><a href="../NiMain/NiBound.htm">NiBound</a></span>& kBound) const</p>
<p class="NDLRefMemberDescription">Tests whether or not this ray passes through the given bounding sphere. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kBound</span></td>
    <td>Bounding sphere to test against this ray. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the ray and the sphere intersect at any point </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_ray_1a35f90a2fdedc853085ebcaea97e4d881"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  TryTriangle(<br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& k0, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& k1, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& k2, <br/><span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kCollisionPoint)</p>
<p class="NDLRefMemberDescription">Given a triangle, this function will pitch the ray against it to check for a collision. </p>
<p class="NDLRefMemberDetailedDescription">Triangle facing is taken into account; the ray will only collide with the upward face of the triangle.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">k0</span></td>
    <td>Corner 0 of triangle </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">k1</span></td>
    <td>Corner 1 of triangle </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">k2</span></td>
    <td>Corner 2 of triangle </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kCollisionPoint</span></td>
    <td>Point of collision between the triangle and ray </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if this ray collides with the triangle </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_ray_1accef37dcc66dfeaac278be742cd93d14"></a>
<p class="NDLRefMemberFunction">float  GetLength() const</p>
<p class="NDLRefMemberDescription">Retrieve the set length of the ray. </p>
<p class="NDLRefMemberDetailedDescription">A length of 0 indicates an infinite length. WARNING: Involves a Sqrt operation.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>The length of the ray. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_ray_1a89226761d347a3c878896e42386c89f8"></a>
<p class="NDLRefMemberFunction">void  SetRay(<br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kRayOrigin, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kRayDir, <br/>float fRayLength)</p>
<p class="NDLRefMemberDescription">Re-initializes the ray with the given parameters. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kRayOrigin</span></td>
    <td>Origin of the ray, in world space. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kRayDir</span></td>
    <td>Direction vector, optionally normalized. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fRayLength</span></td>
    <td>Maximum length of the ray, 0 = infinite length. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_ray_1a912044fb5c66b910f6bee048f3b56b75"></a>
<p class="NDLRefMemberFunction">void  TransformToSpace(const <span class="NDLSystemFont"><a href="../NiMain/NiTransform.htm">NiTransform</a></span>& kSpaceTransform)</p>
<p class="NDLRefMemberDescription">Converts values to terrain space (required for ray collision). </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kSpaceTransform</span></td>
    <td>The transformation to apply to the ray </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_ray_1a6601f3bd52ec82deecbd0889f496abdc"></a>
<p class="NDLRefMemberFunction">void  TransformToWorldSpace()</p>
<p class="NDLRefMemberDescription">Resets ray values to world space values. </p>

<a name="class_ni_ray_1a216677cd17615fba606957277689335e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../NiMain/NiTransform.htm">NiTransform</a></span>  GetTransform() const</p>
<p class="NDLRefMemberDescription">Get the origin and length of the ray packed into a transform. </p>
<p class="NDLRefMemberDetailedDescription">The origin is placed in the translation component of the transform, and the length of the ray is in the transform's scale field. </p>

<a name="class_ni_ray_1aaa308b6761170d81313d63bfca9fe886"></a>
<p class="NDLRefMemberFunction">void  SetTransform(<span class="NDLSystemFont"><a href="../NiMain/NiTransform.htm">NiTransform</a></span> kTransform)</p>
<p class="NDLRefMemberDescription">Set the origin of the ray and scale the length based on a transform. </p>
<p class="NDLRefMemberDetailedDescription">The transform's translation is used as the new ray origin, the ray direction is unchanged and the ray's length is scaled by the transform's scale. </p>

<a name="class_ni_ray_1afed7fa7160347177fcd309ef032e8122"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>&  GetDirection() const</p>
<p class="NDLRefMemberDescription">Get the direction vector (normalized) of the ray. </p>

<a name="class_ni_ray_1ae7ada2463f3832c57613e41d281eec11"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>&  GetOrigin() const</p>
<p class="NDLRefMemberDescription">Get the origin (world space) of the ray. </p>

<a name="class_ni_ray_1ad1f0244688cc3a2ccf401ea870182bfd"></a>
<p class="NDLRefMemberFunction">float  GetDistanceToIntersection() const</p>
<p class="NDLRefMemberDescription">Distance from the most recent intersection that this ray encountered to the ray origin. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>Distance to the most recent intersection </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_ray_1a8c990f9de65dc8cdf0fb045a4b739af2"></a>
<p class="NDLRefMemberFunction">void  ResetIntersection()</p>
<p class="NDLRefMemberDescription">Resets any intersection and collision data this ray may have collected. </p>
<p class="NDLRefMemberDetailedDescription">Should be called before any new collision test is performed. </p>

<a name="class_ni_ray_1a6c61a0db0c0b2e95e31be807f99ce629"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetIntersection(<br/><span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kIntersectionPoint, <br/><span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kIntersectionNormal) const</p>
<p class="NDLRefMemberDescription">Retrieves details about the last intersection that this ray encountered. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kIntersectionPoint</span></td>
    <td>location of intersection in world space </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kIntersectionNormal</span></td>
    <td>Normal of the triangle the ray intersected with </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if this ray has intersected with anything </td>
</tr>

        </tbody>
    </table>
</div>


<a name="constructors"></a>
<p class="NDLRefHead1">Constructors</p>


<a name="class_ni_ray_1a8cdb02c65346080a4ab4a73ffae129ab"></a>
<p class="NDLRefMemberFunction">NiRay()</p>
<p class="NDLRefMemberDescription">Default constructor. </p>

<a name="class_ni_ray_1aa7a0d4c02c6d88a092ed23bd301090d9"></a>
<p class="NDLRefMemberFunction">NiRay(<br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kRayOrigin, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kRayDir)</p>
<p class="NDLRefMemberDescription">Ray constructor, with parameters. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kRayOrigin</span></td>
    <td>Origin of the ray, in world space </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kRayDir</span></td>
    <td>Direction vector, optionally normalized </td>
</tr>

        </tbody>
    </table>
</div>


 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
