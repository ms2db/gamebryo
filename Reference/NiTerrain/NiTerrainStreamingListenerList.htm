<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiTerrainStreamingListenerList</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiTerrainStreamingListenerList</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="NiTerrainStreamingManager__Listener.htm">NiTerrainStreamingManager::Listener</a></span></p>


<p class="NDLRefHeaderFile">&lt;NiTerrainStreamingListenerList.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/class_ni_terrain_streaming_listener_list.gif" alt="Inheritance graph for NiTerrainStreamingListenerList"/>
  <p class="FigureCaption">Inheritance graph for NiTerrainStreamingListenerList</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">A basic streaming listener class to implement a list of streaming listeners. </p>
<p class="NDLNormal">Attach this class to the Streaming manager and attach any number of streaming listeners to this class to allow many classes to listen to streaming events at once. </p>

<a name="public_types"></a>
<p class="NDLRefHead1">Public Types</p>


<a name="class_ni_terrain_streaming_listener_list_1ab0dc0f3123ebb83178fd54ec21a8a9e6"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__list.htm">efd::list</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="NiTerrainStreamingManager__Listener.htm">NiTerrainStreamingManager::Listener</a></span>&gt;&gt;  ListenerList</p>
<p class="NDLRefMemberDescription">Defines a list of streaming listeners. </p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="class_ni_terrain_streaming_listener_list_1a930e57fd309964a98cfd95a8b80f4010"></a>
<p class="NDLRefMemberFunction">NiTerrainStreamingListenerList()</p>
<p class="NDLRefMemberDescription">Default constructor. </p>

<a name="class_ni_terrain_streaming_listener_list_1ad280ef2f2e99c088066c7f18d32cfdc1"></a>
<p class="NDLRefMemberFunction">virtual ~NiTerrainStreamingListenerList()</p>
<p class="NDLRefMemberDescription">Virtual destructor. </p>

<a name="class_ni_terrain_streaming_listener_list_1adb617921f5c98a401f79f40894b8b035"></a>
<p class="NDLRefMemberFunction">void  AddListener(<span class="NDLSystemFont"><a href="NiTerrainStreamingManager__Listener.htm">NiTerrainStreamingManager::Listener</a></span>* pkListener)</p>
<p class="NDLRefMemberDescription">Adds a listener to the event distribution list. </p>

<a name="class_ni_terrain_streaming_listener_list_1ab64f8e140b29856cf414bbf7f61b506c"></a>
<p class="NDLRefMemberFunction">void  RemoveListener(<span class="NDLSystemFont"><a href="NiTerrainStreamingManager__Listener.htm">NiTerrainStreamingManager::Listener</a></span>* pkListener)</p>
<p class="NDLRefMemberDescription">Removes a listener from the event distribution list. </p>

<a name="class_ni_terrain_streaming_listener_list_1a009720d4366b0d3138458fd9b0e0af83"></a>
<p class="NDLRefMemberFunction">void  RemoveAllListeners()</p>
<p class="NDLRefMemberDescription">Removes all listeners from the event distribution list. </p>
<a name="listener_implementation"></a>
<p class="NDLRefHead1">Listener implementation</p>


<a name="class_ni_terrain_streaming_listener_list_1ac6da2ba789707ddea9463e9d403b3f2a"></a>
<p class="NDLRefMemberFunction">virtual void  IncRefCount()</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_terrain_streaming_listener_list_1a0805aa54b3ba0c5267a8ebe5c550ad15"></a>
<p class="NDLRefMemberFunction">virtual void  DecRefCount()</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_terrain_streaming_listener_list_1adc462476bfbca4bcbea4a3b2ede2db15"></a>
<p class="NDLRefMemberFunction">virtual void  ReportStartTask(<br/><span class="NDLSystemFont"><a href="NiTerrainStreamingManager__Listener.htm#class_ni_terrain_streaming_manager_1_1_listener_1af9cb6753e574ba849b30a47b29b6a2ef">TaskID</a></span> kTaskID, <br/><span class="NDLSystemFont"><a href="NiTerrainStreamingManager__Listener.htm#class_ni_terrain_streaming_manager_1_1_listener_1a26a2d428654733ca912e4f3f0b13fe1a">SectorID</a></span> kSectorID, <br/><span class="NDLSystemFont"><a href="NiTerrainStreamingTask__TaskType.htm#struct_ni_terrain_streaming_task_1_1_task_type_1a1170d18ae8613bcb169b6ff943965d26">TaskType::VALUE</a></span> eTaskType)</p>
<p class="NDLRefMemberDescription">This function is called whenever a streaming task is started. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kTaskID</span></td>
    <td>The task ID used to link reporting calls together. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kSectorID</span></td>
    <td>The unique ID of the sector being manipulated in this task </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">eTaskType</span></td>
    <td>The type of task being executed on the sector </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_streaming_listener_list_1a498c2782ed7ad35dcfc80f82aa0ef094"></a>
<p class="NDLRefMemberFunction">virtual void  ReportTaskStatus(<br/><span class="NDLSystemFont"><a href="NiTerrainStreamingManager__Listener.htm#class_ni_terrain_streaming_manager_1_1_listener_1af9cb6753e574ba849b30a47b29b6a2ef">TaskID</a></span> kTaskID, <br/><span class="NDLSystemFont"><a href="NiTerrainStreamingTask__TaskType.htm#struct_ni_terrain_streaming_task_1_1_task_type_1a1170d18ae8613bcb169b6ff943965d26">TaskType::VALUE</a></span> eTaskType, <br/><span class="NDLSystemFont"><a href="NiTerrainStreamingTask__Status.htm#struct_ni_terrain_streaming_task_1_1_status_1a8e42e6c9b361f7ce7b162ae2bfd6451e">Status::VALUE</a></span> eStatus)</p>
<p class="NDLRefMemberDescription">This function is called whenever a streaming task's status is updated. </p>
<p class="NDLRefMemberDetailedDescription">Different status values relate to different stages in the streaming process and are different for each task type.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kTaskID</span></td>
    <td>The task ID used to link reporting calls together. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">eTaskType</span></td>
    <td>The type of task being executed on the sector </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">eStatus</span></td>
    <td>The new status of the task </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_terrain_streaming_listener_list_1a46dcbbf616c1b3643ced87ed25f93afb"></a>
<p class="NDLRefMemberFunction">virtual void  ReportFinishTask(<br/><span class="NDLSystemFont"><a href="NiTerrainStreamingManager__Listener.htm#class_ni_terrain_streaming_manager_1_1_listener_1af9cb6753e574ba849b30a47b29b6a2ef">TaskID</a></span> kTaskID, <br/><span class="NDLSystemFont"><a href="NiTerrainStreamingTask__TaskType.htm#struct_ni_terrain_streaming_task_1_1_task_type_1a1170d18ae8613bcb169b6ff943965d26">TaskType::VALUE</a></span> eTaskType, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> uiErrorCode)</p>
<p class="NDLRefMemberDescription">This function is called whenever a streaming task is completed. </p>
<p class="NDLRefMemberDetailedDescription">The error code returned allows errors in the streaming process to be reported.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kTaskID</span></td>
    <td>The task ID used to link reporting calls together. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">eTaskType</span></td>
    <td>The type of task being executed on the sector </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiErrorCode</span></td>
    <td>The final errorcode reported by the streaming process </td>
</tr>

        </tbody>
    </table>
</div>


 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
