<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>ecr::D3D11BinaryShaderLibrary</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">ecr::D3D11BinaryShaderLibrary</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../ecrD3D11Renderer/ecr__D3D11ShaderLibrary.htm">ecr::D3D11ShaderLibrary</a></span></p>


<p class="NDLRefHeaderFile">&lt;D3D11BinaryShaderLibrary.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classecr_1_1_d3_d11_binary_shader_library.gif" alt="Inheritance graph for ecr::D3D11BinaryShaderLibrary"/>
  <p class="FigureCaption">Inheritance graph for ecr::D3D11BinaryShaderLibrary</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal"><span class="NDLSystemFont">D3D11BinaryShaderLibrary</span> is the D3D11-specific shader library that exposes NSB shaders. </p>
<p class="NDLNormal">The library will create <span class="NDLSystemFont"><a href="ecr__D3D11BinaryShader.htm">D3D11BinaryShader</a></span> objects for shaders found from the <span class="NDLSystemFont"><a href="../NSBShaderLib/NSBShader.htm">NSBShader</a></span> objects returned <span class="NDLSystemFont"><a href="../NSBShaderLib/NSBLoader.htm">NSBLoader</a></span> component of NSBShaderLib.</p>
<p class="NDLNormal">Applications that link in <span class="NDLSystemFont">D3D11BinaryShaderLibrary</span> using static libraries should use the function D3D11BinaryShaderLib_LoadShaderLibrary, found in <span class="NDLSystemFont">D3D11BinaryShaderLib.h</span>. </p>

<a name="public_types"></a>
<p class="NDLRefHead1">Public Types</p>


<a name="classecr_1_1_d3_d11_binary_shader_library_1af004e7fef167d292893f17d5f5282967"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="ecr__D3D11BinaryShader.htm">ecr::D3D11BinaryShader</a></span> *(*  CREATED3D11BINARYSHADER)(const efd::Char *pClassName)</p>
<p class="NDLRefMemberDescription">Prototype for the callback function used to create a new <span class="NDLSystemFont"><a href="ecr__D3D11BinaryShader.htm">D3D11BinaryShader</a></span> instance. </p>
<p class="NDLRefMemberDetailedDescription">The callback receives the class name which was associated with the implementation that is being converted into a run-time shader. A registered callback should use the name to determine whether a custom D3D11BinaryShader-derived class is required and if so create and return it. Otherwise, they should return NULL and the system will create a standard <span class="NDLSystemFont"><a href="ecr__D3D11BinaryShader.htm">D3D11BinaryShader</a></span> instance.</p>
<p class="NDLRefMemberDetailedDescription">This allows applications to derive their own D3D11BinaryShader-based classes, allowing them to extend the functionality while still gaining the benefit of having the default NSF parsing do the file handling.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pClassName</span></td>
    <td>Class name to create. </td>
</tr>

        </tbody>
    </table>
</div>


<a name="construction_and_destruction"></a>
<p class="NDLRefHead1">Construction and Destruction</p>


<a name="classecr_1_1_d3_d11_binary_shader_library_1a7ee1443b307a908b28b936f0c95aea0f"></a>
<p class="NDLRefMemberFunction">virtual ~D3D11BinaryShaderLibrary()</p>
<p class="NDLRefMemberDescription">Destructor. </p>
<a name="public_static_methods"></a>
<p class="NDLRefHead1">Public Static Methods</p>


<a name="classecr_1_1_d3_d11_binary_shader_library_1a411429e576f7c8ca2430d0ed1b17e741"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">D3D11BinaryShaderLibrary</span>*  Create(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span> directoryCount, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pDirectories, <br/><span class="NDLSystemFont">efd::Bool</span> recurseSubFolders)</p>
<p class="NDLRefMemberDescription">Create an instance of the <span class="NDLSystemFont">D3D11BinaryShaderLibrary</span>. </p>
<p class="NDLRefMemberDetailedDescription">After the library is created, the function LoadNSBShaders is called, which passes the parameters to the library's <span class="NDLSystemFont"><a href="../NSBShaderLib/NSBLoader.htm">NSBLoader</a></span> object so it can load the NSB files it finds. The <span class="NDLSystemFont"><a href="../NSBShaderLib/NSBLoader.htm">NSBLoader</a></span> will search for all NSB files, loading them and adding them to the library's list of available shaders.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">directoryCount</span></td>
    <td>Number of directories in the pDirectories array. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pDirectories</span></td>
    <td>Array of directories to search for shaders. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">recurseSubFolders</span></td>
    <td>Whether or not to recursively search the directories specified in pDirectories. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The new library, if creation succeeded, otherwise NULL. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_d3_d11_binary_shader_library_1a9421f171445ae0ea6f5948d93137ee76"></a>
<p class="NDLRefMemberFunction">static void  Shutdown()</p>
<p class="NDLRefMemberDescription">Shut down the static instance of the <span class="NDLSystemFont">D3D11BinaryShaderLibrary</span>. </p>

<a name="classecr_1_1_d3_d11_binary_shader_library_1a871fa0faee3a373634ce9f3f5ce0a7be"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">D3D11BinaryShaderLibrary</span>*  GetLibrary()</p>
<p class="NDLRefMemberDescription">Return the static instance of the <span class="NDLSystemFont">D3D11BinaryShaderLibrary</span>. </p>

<a name="classecr_1_1_d3_d11_binary_shader_library_1ac7799d1167ee73e543aee6e42f52bbbc"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont"><a href="ecr__D3D11BinaryShaderLibrary.htm#classecr_1_1_d3_d11_binary_shader_library_1af004e7fef167d292893f17d5f5282967">CREATED3D11BINARYSHADER</a></span>  SetCreateD3D11BinaryShaderCallback(<span class="NDLSystemFont"><a href="ecr__D3D11BinaryShaderLibrary.htm#classecr_1_1_d3_d11_binary_shader_library_1af004e7fef167d292893f17d5f5282967">CREATED3D11BINARYSHADER</a></span> pCallback)</p>
<p class="NDLRefMemberDescription">Set the callback function for creating new binary shaders. </p>

<a name="classecr_1_1_d3_d11_binary_shader_library_1ab7274aafb4aca2783ef272c02f6e6e4f"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont"><a href="ecr__D3D11BinaryShaderLibrary.htm#classecr_1_1_d3_d11_binary_shader_library_1af004e7fef167d292893f17d5f5282967">CREATED3D11BINARYSHADER</a></span>  GetCreateD3D11BinaryShaderCallback()</p>
<p class="NDLRefMemberDescription">Return the callback function for creating new binary shaders. </p>

<a name="classecr_1_1_d3_d11_binary_shader_library_1ae2b7d254358ff09c198c801ac3d9c4d6"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont"><a href="ecr__D3D11BinaryShader.htm">D3D11BinaryShader</a></span>*  DefaultCreateD3D11BinaryShader(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pcClassName)</p>
<p class="NDLRefMemberDescription">Default callback function for creating new binary shaders. </p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classecr_1_1_d3_d11_binary_shader_library_1af1dc3646ec0b91072d5e51e232b0a6d2"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../NiMain/NiShader.htm">NiShader</a></span>*  GetShader(<br/><span class="NDLSystemFont"><a href="../NiMain/NiRenderer.htm">NiRenderer</a></span>* pRenderer, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pName, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> implementation)</p>
<p class="NDLRefMemberDescription">Return a specific shader, creating it it necessary, or return NULL if the shader library cannot create a shader with the given name and implementation. </p>

<a name="classecr_1_1_d3_d11_binary_shader_library_1af141a9974bb0d905b52725970eeb615c"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">efd::Bool</span>  ReleaseShader(<br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pName, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> implementationID)</p>
<p class="NDLRefMemberDescription">Release the shader library's reference to the given shader, and return whether or not the shader library had a reference to that shader. </p>

<a name="classecr_1_1_d3_d11_binary_shader_library_1a8991b5865bc302e23a060947abc8f98f"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">efd::Bool</span>  ReleaseShader(<span class="NDLSystemFont"><a href="../NiMain/NiShader.htm">NiShader</a></span>* pShader)</p>
<p class="NDLRefMemberDescription">Release the shader library's reference to the given shader, and return whether or not the shader library had a reference to that shader. </p>

<a name="classecr_1_1_d3_d11_binary_shader_library_1a68afab056ae2b5eb54752cdde1d1d4c2"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../NiMain/NiShaderLibraryDesc.htm">NiShaderLibraryDesc</a></span>*  GetShaderLibraryDesc()</p>
<p class="NDLRefMemberDescription">Return the shader library description. </p>

<a name="classecr_1_1_d3_d11_binary_shader_library_1a49662104be242884751f04db532ba5cf"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetNumSupportedMimeTypes() const</p>
<p class="NDLRefMemberDescription">Return the number of mime types the shader library supports. </p>

<a name="classecr_1_1_d3_d11_binary_shader_library_1a92360db46623d942fdb84ab72491c58e"></a>
<p class="NDLRefMemberFunction">virtual const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>*  GetSupportedMimeType(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> index) const</p>
<p class="NDLRefMemberDescription">Return one of the mime types the shader library supports. </p>

<a name="classecr_1_1_d3_d11_binary_shader_library_1a00426ca22854524f4f18309186fd9503"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">efd::Bool</span>  LoadShader(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pFile)</p>
<p class="NDLRefMemberDescription">Load an <span class="NDLSystemFont"><a href="../NSBShaderLib/NSBShader.htm">NSBShader</a></span> from the indicated file, and return whether or not the load was successful. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
