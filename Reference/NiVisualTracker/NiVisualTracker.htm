<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiVisualTracker</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiVisualTracker</p>

<p class="NDLRefParentage">: public NiVisualTrackerBase</p>

<p class="NDLRefHeaderFile">&lt;NiVisualTracker.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>The <span class="NDLSystemFont">NiVisualTracker</span> class
provides the ability to track application statistics over time
and graph those statistics as the application runs. The base
class <span class="NDLSystemFont">NiVisualTrackerBase</span>
provides abstraction for internal use only and should not be
inherited in user code.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiVisualTracker(
            const char* pName,
            NiRect&lt;float&gt; dataRange,
            NiRect&lt;float&gt; windowRect,
            unsigned int uiNumDecimalPlaces = 0,
            bool bShow = true,
            unsigned int uiNumGraphs = 5)</p>
            
<p class="NDLRefMemberDescription">Preffered constructor, allows the use of point scatter plots.
</p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pName</span></td>
    <td>The name for this chart, which is displayed at the top of the chart.</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">dataRange</span></td>
    <td>The expected range for data values. The vertical range effects all
        graph types, but the horizontal range is only used for scatter graphs. The range
        is in real coordinates (smaller numbers are to the lower left, larger numbers are
        to the upper right) scaled however you like. You can invert the data by swapping
        the left/right or top/bottom settings.</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">windowRect</span></td>
    <td>The display coordinates for showing this chart. The point {0.0f,0.0f}
        is the upper left corner and {1.0f, 1.0f} is the bottom right corner.</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiNumDecimalPlaces</span></td>
    <td>The number of decimal places to display on the axis labels.</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">bShow</span></td>
    <td>True if this chart is initially visible.</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiNumGraphs</span></td>
    <td>Number of graphs and data points you expect to add. This is not
        maximum limit, just an initial size.</td>
</tr>

        </tbody>
    </table>
</div>


<p class="NDLRefMemberFunction">NiVisualTracker(float fMaxValue,
unsigned int uiNumDecimalPlaces, NiRect&lt;float&gt; kWindowRect,
const char* pcName, bool bShow = true, unsigned int uiNumGraphs =
5)</p>

<p class="NDLRefMemberDescription">Creates an <span class=
"NDLSystemFont">NiVisualTracker</span> with the following
parameters: the maximum value to be shown on the graph (all
tracked statistics greater than this value are clamped for
graphing purposes), the number of decimal places used to format
the labels on the right side of the graph, the rectangle within
which to draw the graphs (this is in screen-normalized
coordinates, with (0.0, 0.0) as the upper-left corner, and (1.0,
1.0) as the lower right corner), the name to show above all the
graphs, the initial show/hide state of the tracker, and the
initial number of graphs to store.</p>

<p class="NDLRefMemberDescription">This is a legacy constructor. It assumes a data range from 0.0 to
<span class="NDLSystemFont">fMax</span> for the vertical axis and
assumes the horizontal axis will never be used.  As a result you cannot call
AddDataPoint on a graph created with this constructor, it only supports AddGraph.
</p>

<p class="NDLRefHead1">Destructor</p>

<p class="NDLRefMemberFunction">virtual ~NiVisualTracker()</p>

<p class="NDLRefMemberDescription">Releases all internal resources.
</p>

<p class="NDLRefHead1">Static Constant Members</p>

<p class="NDLRefMemberFunction">static const efd::UInt32 k_NO_SYMBOL</p>

<p class="NDLRefMemberDescription">Value to pass to <span class="NDLSystemFont">AddLegend</span>
to not use a symbol.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">unsigned int AddGraph(
    <a href="NiVisualTracker__GraphCallbackObject.htm">GraphCallbackObject</a>* pCallbackObject,
    const char* pcName,
    const NiColor&amp; kColor,
    unsigned int uiNumSamplesToKeep,
    float fSamplingTime,
    bool bShow)</p>

<p class="NDLRefMemberDescription">This adds a <span class=
"NDLSystemFont"><a href=
"NiVisualTracker__GraphCallbackObject.htm">GraphCallbackObject</a></span>
to the list of graphs maintained by the <span class=
"NDLSystemFont">NiVisualTracker</span>. A <span class=
"NDLSystemFont"><a href=
"NiVisualTracker__GraphCallbackObject.htm">GraphCallbackObject</a></span>
object maintains the current state of a tracked
statistic. <span class="NDLSystemFont">pcName</span> is the name
of the object as it is to be displayed below the graph.
<span class="NDLSystemFont">kColor</span> is the color for both
the lines drawn and the displayed name. <span class=
"NDLSystemFont">uiNumSamplesToKeep</span> is the number of
samples to keep in the history for that statistic. <span class=
"NDLSystemFont">fSamplingTime</span> is the minimum time that
must elapse between samples. <span class=
"NDLSystemFont">bShow</span> is the initial show/hide status for
that particular graph.</p>

<p class="NDLRefMemberFunction">unsigned int AddDataPoint(
    <a href="NiVisualTracker__DataPointCallbackObject.htm">DataPointCallbackObject</a>* pObject,
    const NiColor&amp; color,
    efd::UInt32 symbol,
    NiRect&lt;float&gt;&amp; dataRange,
    float fSamplingTime,
    bool bShow)</p>

<p class="NDLRefMemberDescription">This adds a <span class=
"NDLSystemFont"><a href=
"NiVisualTracker__DataPointCallbackObject.htm">DataPointCallbackObject</a></span>
to the set of points maintained by the <span class=
"NDLSystemFont">NiVisualTracker</span>. A <span class=
"NDLSystemFont">DataPointCallbackObject</a></span>
object maintains the current state of a tracked
point. 
<span class="NDLSystemFont">color</span> is the color for the displayed symbol.
<span class="NDLSystemFont">symbol</span> is the symbol to use for the point. See
the
<span class="NDLSystemFont"><a href="../egmVisualTracker/egmVisualTracker__VisualTrackerService.htm">
egmVisualTracker::VisualTrackerService</a></span> for the enumeration of valid symbols.
<span class="NDLSystemFont">dataRange</span> is the range that the sample may take.
<span class="NDLSystemFont">fSamplingTime</span> is the minimum time that
must elapse between samples. 
<span class="NDLSystemFont">bShow</span> is the initial show/hide status for
the particular point.</p>


<p class="NDLRefMemberFunction">bool AddLegend(const char* pLegendName,
            const NiColor& color,
            efd::UInt32 symbol = k_NO_SYMBOL)</p>

<p class="NDLRefMemberDescription">Add an entry to the legend. Note that
<span class="NDLSystemFont">AddGraph</span> automatically creates legend entries
using the name and color of the graph line so you only need to call this when you are
creating scatter graphs using <span class="NDLSystemFont">AddDataPoint</psan></p>.

<p class="NDLRefMemberFunction">void RemoveGraph(const char* pcName)</p>

<p class="NDLRefMemberDescription">Removes a graph from the
<span class="NDLSystemFont">NiVisualTracker</span> by name.
Only works for line-graph style graphs that have names.</p>

<p class="NDLRefMemberFunction">void RemoveAll()</p>

<p class="NDLRefMemberDescription">Removes all graphs from the
<span class="NDLSystemFont">NiVisualTracker</span>, including all scatter
points.</p>

<p class="NDLRefMemberFunction">const char* GetName()</p>

<p class="NDLRefMemberDescription">Returns the name of the
<span class="NDLSystemFont">NiVisualTracker</span>.</p>

<p class="NDLRefMemberFunction">unsigned int GetGraphCount()</p>

<p class="NDLRefMemberDescription">Returns the number of graphs
maintained by the <span class=
"NDLSystemFont">NiVisualTracker</span>. Each line graph or scatter graph data point
is a separate tracker, so each call to <span class="NDLSystemFont">AddGraph</span>
or <span class="NDLSystemFont">AddDataPoint</span> increases this value.</p>

<p class="NDLRefMemberFunction">bool SetName(const char* pcName,
unsigned int uiWhichGraph)</p>

<p class="NDLRefMemberDescription">Finds a graph by index and
sets its name. Returns <span class="NDLSystemFont">true</span> if the name was set,
<span class="NDLSystemFont">false</span> if that graph item has no name.</p>

<p class="NDLRefMemberFunction">const char* GetName(unsigned int
uiWhichGraph);</p>

<p class="NDLRefMemberDescription">Finds a graph by index and
returns its name. Note that this will be an empty string
for data types such as scatter graph data points which have no name.</p>

<p class="NDLRefMemberFunction">unsigned int
GetGraphIndexByName(const char* pcName)</p>

<p class="NDLRefMemberDescription">Finds a graph by name and
returns its index. Note that this will be <span class="NDLSystemFont">(unsigned int) -1</span>
for data types such as scatter graph data points which have no name.</p>

<p class="NDLRefMemberFunction">void ShowGraph(bool bShow,
unsigned int uiWhichGraph)</p>

<p class="NDLRefMemberDescription">Finds a graph by index and
sets its show/hide status. This only effects line-graph style data trackers.</p>

<p class="NDLRefMemberFunction">bool GetGraphShow(unsigned int
uiWhichGraph)</p>

<p class="NDLRefMemberDescription">Finds a graph by index and
returns its show/hide status.</p>

<p class="NDLRefMemberFunction">virtual NiUInt32 Update()</p>

<p class="NDLRefMemberDescription">Samples each attached graph
and stores the current value in the history. The number of
callback objects removed during the update is returned.</p>

<p class="NDLRefMemberFunction">virtual void Draw()</p>

<p class="NDLRefMemberDescription">Draws the <span class=
"NDLSystemFont">NiVisualTracker</span> and all attached graphs. A
<span class="NDLSystemFont">NiVisualTracker</span> that has its
show/hide status set to false will not draw anything. In
addition, an attached graph that has individual show/hide status
of false will not draw its data.</p>

<p class="NDLRefMemberFunction">virtual void ResetTimeCounters()</p>

<p class="NDLRefMemberDescription">Sets the internal last sampled time
of all callback objects such that they will sample on the next update.
</p>

<p class="NDLRefHead1">Notes</p>

<p>Please see the documentation for the individual graph types
for important details on how the statistics are sampled.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
