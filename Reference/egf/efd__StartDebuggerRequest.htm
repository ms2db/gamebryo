<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::StartDebuggerRequest</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::StartDebuggerRequest</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../efd/efd__StreamMessage.htm">efd::StreamMessage</a></span></p>


<p class="NDLRefHeaderFile">&lt;BreakpointMessages.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classefd_1_1_start_debugger_request.gif" alt="Inheritance graph for efd::StartDebuggerRequest"/>
  <p class="FigureCaption">Inheritance graph for efd::StartDebuggerRequest</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">A request to start a debugger session. </p>
<p class="NDLNormal">Request to the simulator to connect to the python debugger on a certain host/port and start a session. This causes an immediate breakpoint in scheduler.py. Once a debugger is started, the caller is free to add/remove python behavior breakpoints. </p>

<a name="public_attributes"></a>
<p class="NDLRefHead1">Public Attributes</p>


<a name="classefd_1_1_start_debugger_request_1a97b27364aca13da82a03018a2ae224ef"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>  m_host</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_start_debugger_request_1a1ecd5366b17765543cfa20c11ff406d7"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  m_port</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_start_debugger_request_1acb87e5b07ff4f3a811c087119334a4cd"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span>  m_callback</p>
<p class="NDLRefMemberFunction"></p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classefd_1_1_start_debugger_request_1a06943cd26ac71ab05e276f923fb36ac9"></a>
<p class="NDLRefMemberFunction">StartDebuggerRequest()</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_start_debugger_request_1a0abcb40b47a02a96949c2cdf2b5fb343"></a>
<p class="NDLRefMemberFunction">virtual ~StartDebuggerRequest()</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_start_debugger_request_1ab1f1241e00664e187a27700142e6259a"></a>
<p class="NDLRefMemberFunction">StartDebuggerRequest(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& host, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> port, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span>& callback = efd::kCAT_INVALID)</p>
<p class="NDLRefMemberDescription">A request to connect to and start a python debugger session. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">host</span></td>
    <td>name of the host running the debugger </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">port</span></td>
    <td>port number the debugger is listening on </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">callback</span></td>
    <td>Callback category. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_start_debugger_request_1affd9914f406a04445366716e49776d9f"></a>
<p class="NDLRefMemberFunction">virtual void  ToStream(<span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">efd::DataStream</a></span>& strm) const</p>
<p class="NDLRefMemberDescription">Write this class into a stream of atomic types. </p>
<p class="NDLRefMemberDetailedDescription">If the class does not contains any data, such as a pure event class, then is it recommended and safe to add nothing to the stream.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">strm</span></td>
    <td>The stream to write the class into. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_start_debugger_request_1ac1789f89a10081c7024bb380b1c1a089"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  FromStream(const <span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">efd::DataStream</a></span>& strm)</p>
<p class="NDLRefMemberDescription">Read this class from the stream of atomic types and recreate the class. </p>
<p class="NDLRefMemberDetailedDescription">If the class does not contains any data, such as a pure event class, then is it recommended and safe to have an empty stream. In that case this method should simple return true.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">strm</span></td>
    <td>The stream to read the class from.</td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>true if successful, false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>


 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
