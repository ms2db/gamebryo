<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>egf::ScriptContext</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">egf::ScriptContext</p>


<p class="NDLRefHeaderFile">&lt;ScriptContext.h&gt;</p>


<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">A class containing context data that is needed during scripted behavior calls. </p>
<p class="NDLNormal">There is a global instance of this class which contains all the state needed during Behavior execution. This state is setup by the <span class="NDLSystemFont"><a href="egf__Scheduler.htm">Scheduler</a></span> and the <span class="NDLSystemFont"><a href="egf__ISchedulerScripting.htm">ISchedulerScripting</a></span> instances whenever a script behavior is invoked or resumed. Whenever the behavior makes calls back into C++ built-in APIs this context data is used to identify what <span class="NDLSystemFont"><a href="egf__Entity.htm">Entity</a></span> instance is running the behavior and which ServiceManager is managing this process. </p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classegf_1_1_script_context_1ad4c6d4ae3f0a5fbc8bbf4fddc318b035"></a>
<p class="NDLRefMemberFunction">ScriptContext()</p>
<p class="NDLRefMemberDescription">Constructor. </p>

<a name="classegf_1_1_script_context_1a9aeda1687153c1f495cca59f2c576a30"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  ContextIsActive() const</p>
<p class="NDLRefMemberDescription">Determine whether a behavior is currently active. </p>
<p class="NDLRefMemberDetailedDescription">Other methods of this class assume that they will only be called when the context is active and may assert if called at other times. This method allows you to safely check whether it is currently valid to call other methods on the context.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>bool True if the context is actively running a behavior. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_script_context_1ab6883f454ec5e0a3ed6ef5573af28d21"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="egf__Entity.htm">egf::Entity</a></span>*  GetScriptEntity() const</p>
<p class="NDLRefMemberDescription">Access the entity which is currently executing a behavior. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>Pointer to the current script entity, or NULL if no script behavior is running. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_script_context_1a17b564d67499d71ad9b84593e208cb6f"></a>
<p class="NDLRefMemberFunction">template &lt;typename T  &gt; T*  GetScriptEntityAs() const</p>
<p class="NDLRefMemberDescription">Access the entity which is currently executing a behavior and cast it to the requested class. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>Pointer to the current script entity cast to the specified type, or NULL if no script behavior is running or if the script entity is not of type T. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_script_context_1acfed94bac3450cef33b24cbf61a7ecc3"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../efd/efd__ServiceManager.htm">efd::ServiceManager</a></span>*  GetServiceManager() const</p>
<p class="NDLRefMemberDescription">Get the service manager that owns the scheduler that owns the entity that is running the current behavior. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>Pointer to the current ServiceManager. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_script_context_1ab84e814e6c9001b57c6672e8345e34e9"></a>
<p class="NDLRefMemberFunction">void  SetServiceManager(const <span class="NDLSystemFont"><a href="../efd/efd__ServiceManager.htm">efd::ServiceManager</a></span>* pMgr)</p>
<p class="NDLRefMemberDescription">Sets the current ServiceManager. </p>
<p class="NDLRefMemberDetailedDescription">This method should only be called by the scheduler.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMgr</span></td>
    <td>The ServiceManager which owns the scheduler running the script </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_script_context_1a3391c554fcfdb65d265ef073780ff689"></a>
<p class="NDLRefMemberFunction">template &lt;typename T  &gt; T*  GetSystemServiceAs() const</p>
<p class="NDLRefMemberDescription">A convenience method to call ServiceManager::GetSystemServiceAs in one step. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>Pointer to the requested service, or NULL if the service is not found. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_script_context_1a34e721f30728f0eefb46734a2d2427e3"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__ParameterList.htm">efd::ParameterList</a></span>*  GetArgumentList() const</p>
<p class="NDLRefMemberDescription">Gets the ParameterList containing the input arguments to the current behavior. </p>
<p class="NDLRefMemberDetailedDescription">This method should only be called by the scheduler or related behavior execution code.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>ParameterList containing the arguments to the current script </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_script_context_1a6344381825a3d1821281cf4c7e442e89"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  GetNonBlocking() const</p>
<p class="NDLRefMemberDescription">Determines if the currently running behavior is allowed to block. </p>
<p class="NDLRefMemberDetailedDescription">If the behavior is NonBlocking then it cannot call blocking methods such as Sleep or SendEventAndWait. Attempts to call a blocking method from a non-blocking context will assert in debug and could lead to undefined results in release.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>True if the current context prohibits making blocking calls. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_script_context_1acf706cb02b93e1912b7bc9e43e4006e1"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsImmediateMode() const</p>
<p class="NDLRefMemberDescription">Determines if the current script context is the result of an immediate behavior execution. </p>
<p class="NDLRefMemberDetailedDescription">Immediate behaviors called from within normal behaviors do not put the context into immediate mode, only when the bottom behavior in the stack is immediate is the stack considered immediate.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>True if the context is operating in Immediate Mode. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_script_context_1ab12c1de7083a202baa68145ffe526dbe"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  PushBehavior(<span class="NDLSystemFont"><a href="egf__PendingBehavior.htm">PendingBehavior</a></span>* pBehavior)</p>
<p class="NDLRefMemberDescription">Push the behavior that is about to execute or resume to the top of the context stack. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pBehavior</span></td>
    <td>The <span class="NDLSystemFont"><a href="egf__PendingBehavior.htm">PendingBehavior</a></span> representing the waiting or blocked behavior that is about to begin or resume execution. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_script_context_1a71380fc52dcef4144ecc72abab80d85f"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  PopBehavior(<span class="NDLSystemFont"><a href="egf__PendingBehavior.htm">PendingBehavior</a></span>* pBehavior)</p>
<p class="NDLRefMemberDescription">Pop the given behavior off the top of the context stack. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pBehavior</span></td>
    <td>The <span class="NDLSystemFont"><a href="egf__PendingBehavior.htm">PendingBehavior</a></span> that has either completed or yielded. This must be the top entity of the stack and is used only for error checking. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the given <span class="NDLSystemFont"><a href="egf__PendingBehavior.htm">PendingBehavior</a></span> was removed from the top of the stack. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_script_context_1ac289e97c232bd01432cb207461dde159"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="egf__PendingBehavior.htm">PendingBehavior</a></span>*  GetCurrentBehavior() const</p>
<p class="NDLRefMemberDescription">Get the top <span class="NDLSystemFont"><a href="egf__PendingBehavior.htm">PendingBehavior</a></span> from the context stack. </p>
<p class="NDLRefMemberDetailedDescription">This represents the behavior that is currently executing and stores all the state associated with that behavior. Built-in APIs meant to be called from script use this state to determine the current context.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">This method must only be called during the execution of a behavior. Calling at any other time will cause an assert and return NULL.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>The currently executing behavior </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_script_context_1a1da1e190b2459db1ae41fb2d2815adc0"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="egf__PendingBehavior.htm">PendingBehavior</a></span>*  GetBottomBehavior() const</p>
<p class="NDLRefMemberDescription">Get the bottom <span class="NDLSystemFont"><a href="egf__PendingBehavior.htm">PendingBehavior</a></span> from the context stack. </p>
<p class="NDLRefMemberDetailedDescription">For "extends" style behaviors this represents the behavior that started the current stack of behaviors. For reverse-extends behaviors this is simply the lowest priority leaf. For non-extends behaviors this will be the same as GetCurrentBehavior.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">This method must only be called during the execution of a behavior. Calling at any other time will cause an assert and return NULL.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>The behavior that started the current behavior stack </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_script_context_1ac65d499fb33e94a0da6704def68d0f54"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>  GetCurrentBehaviorContextString() const</p>
<p class="NDLRefMemberDescription">Get a string containing the name of the current running behavior and the name of the model that defines it. </p>
<p class="NDLRefMemberDetailedDescription">Used when formatting error messages to show the user which script is causing the message. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
