<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>egf::TPropertyScalar</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">egf::TPropertyScalar</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="egf__IProperty.htm">egf::IProperty</a></span></p>


<p class="NDLRefHeaderFile">&lt;TProperty.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classegf_1_1_t_property_scalar.gif" alt="Inheritance graph for egf::TPropertyScalar"/>
  <p class="FigureCaption">Inheritance graph for egf::TPropertyScalar</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">Templated class that implements scalar properties. </p>

<a name="public_static_attributes"></a>
<p class="NDLRefHead1">Public Static Attributes</p>


<a name="classegf_1_1_t_property_scalar_1a92bf229339bd75d7075d9ff2153348e8"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  CLASS_ID</p>
<p class="NDLRefMemberFunction"></p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classegf_1_1_t_property_scalar_1aeb8294b8cfe762605404e5553bc55377"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">TPropertyScalar</span>&lt;TType, TClassID&gt;&  operator=(const <span class="NDLSystemFont">TPropertyScalar</span>&lt;TType, TClassID&gt;& other)</p>
<p class="NDLRefMemberDescription">Assignment operator. </p>

<a name="classegf_1_1_t_property_scalar_1a288b0e8968603cde17810a3b01333156"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  operator==(const <span class="NDLSystemFont"><a href="egf__IProperty.htm">IProperty</a></span>& other) const</p>
<p class="NDLRefMemberFunction"></p>

<a name="classegf_1_1_t_property_scalar_1adde13963ddd1f91d3c41ded152ba60db"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">PropertyResult</a></span>  GetValue(<br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1af08acbbc1a28c9e4ee8dfb501449dc28">PropertyID</a></span> propID, <br/>void* data) const</p>
<p class="NDLRefMemberDescription">Assigns the current value of this property to the data parameter. </p>
<p class="NDLRefMemberDetailedDescription">If this is a built-in model, then data is set to the current value of the specified sub-property.</p>
<p class="NDLRefMemberDetailedDescription">No type safety is assumed at this level. Type safety is enforced at the <span class="NDLSystemFont"><a href="egf__Entity.htm">Entity</a></span> class where any call reaching these methods should be coming from. IProperties are never exposed through the <span class="NDLSystemFont"><a href="egf__Entity.htm">Entity</a></span> interface.</p>
<p class="NDLRefMemberDetailedDescription">The default implementation simply returns PropertyResult_PropertyNotScalar.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">propID</span></td>
    <td>The property ID to fetch data for. This is useful for built-in models that have multiple sub-properties. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">data</span></td>
    <td>Pointer to where to assign the value of this property to </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A value from the EntityError enum indicating success/failure </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_t_property_scalar_1a1d6d09ac2f5c94fe4b0fae8e2f2a0b3e"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">PropertyResult</a></span>  SetValue(<br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1af08acbbc1a28c9e4ee8dfb501449dc28">PropertyID</a></span> propID, <br/>const void* data)</p>
<p class="NDLRefMemberDescription">Assigns the value of the data parameter to this property. </p>
<p class="NDLRefMemberDetailedDescription">If this is a built-in model, then the value of the specified sub-property is set.</p>
<p class="NDLRefMemberDetailedDescription">No type safety is assumed at this level. Type safety is enforced at the <span class="NDLSystemFont"><a href="egf__Entity.htm">Entity</a></span> class where any call reaching these methods should be coming from. IProperties are never exposed through the <span class="NDLSystemFont"><a href="egf__Entity.htm">Entity</a></span> interface.</p>
<p class="NDLRefMemberDetailedDescription">The default implementation simply returns PropertyResult_PropertyNotScalar.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">propID</span></td>
    <td>The property ID to set the value of. This is useful for built-in models that have multiple sub-properties. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">data</span></td>
    <td>Pointer to where to copy the data from </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A value from the EntityError enum indicating success/failure </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_t_property_scalar_1a9a78036c10a6e2bedd7213812b3b6f9f"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">PropertyResult</a></span>  GetValue(<br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1af08acbbc1a28c9e4ee8dfb501449dc28">PropertyID</a></span> propID, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& key, <br/>void* data) const</p>
<p class="NDLRefMemberDescription">Assigns the current value of the specified key of this property to the data parameter. </p>
<p class="NDLRefMemberDetailedDescription">If this is a built-in model, then data is set to the current value of the specified key of the specified sub-property.</p>
<p class="NDLRefMemberDetailedDescription">No type safety is assumed at this level. Type safety is enforced at the <span class="NDLSystemFont"><a href="egf__Entity.htm">Entity</a></span> class where any call reaching these methods should be coming from. IProperties are never exposed through the <span class="NDLSystemFont"><a href="egf__Entity.htm">Entity</a></span> interface.</p>
<p class="NDLRefMemberDetailedDescription">The default implementation simply returns PropertyResult_PropertyNotAssociativeArray.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">propID</span></td>
    <td>The property ID to fetch data for. This is useful for built-in models that have multiple sub-properties. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">key</span></td>
    <td>The key of the map to retrieve the value from </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">data</span></td>
    <td>Pointer to where to assign the value of this property to </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A PropertyResult value indicating success/failure </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_t_property_scalar_1aec79173021f5ef9d36611c09f96cf0eb"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">PropertyResult</a></span>  SetValue(<br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1af08acbbc1a28c9e4ee8dfb501449dc28">PropertyID</a></span> propID, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& key, <br/>const void* data)</p>
<p class="NDLRefMemberDescription">Assigns the value of the data parameter to the specified key of this property. </p>
<p class="NDLRefMemberDetailedDescription">If this is a built-in model, then the specified key of the specified sub-property is set.</p>
<p class="NDLRefMemberDetailedDescription">No type safety is assumed at this level. Type safety is enforced at the <span class="NDLSystemFont"><a href="egf__Entity.htm">Entity</a></span> class where any call reaching these methods should be coming from. IProperties are never exposed through the <span class="NDLSystemFont"><a href="egf__Entity.htm">Entity</a></span> interface.</p>
<p class="NDLRefMemberDetailedDescription">The default implementation simply returns PropertyResult_PropertyNotAssociativeArray.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">propID</span></td>
    <td>The property ID to set the value of. This is useful for built-in models that have sub-properties. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">key</span></td>
    <td>The key of the map to set the value of </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">data</span></td>
    <td>Pointer to where to copy the data from </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A value from the PropertyResult enum indicating success/failure </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_t_property_scalar_1a4059ace7cb67a88a1aa94ccaba25ca89"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="egf__IProperty.htm">IProperty</a></span>*  Clone() const</p>
<p class="NDLRefMemberDescription">Clones this property, returning a pointer to the newly created instance. </p>
<p class="NDLRefMemberDetailedDescription">This is used for Copy-on-Write, among other things. The caller is responsible for deleting this property.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>A new <span class="NDLSystemFont"><a href="egf__IProperty.htm">IProperty</a></span> pointer that is a copy of this one. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_t_property_scalar_1a54323b9534a07e4ecae7018468cbf2b0"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">PropertyResult</a></span>  GetValueAsString(<br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1af08acbbc1a28c9e4ee8dfb501449dc28">PropertyID</a></span> propID, <br/><span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& data) const</p>
<p class="NDLRefMemberDescription">Assigns a string representation of the current value of this property to the data parameter. </p>
<p class="NDLRefMemberDetailedDescription">If this is a built-in model, then data is set to the current value of the specified sub-property.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">propID</span></td>
    <td>The property ID to fetch data for. This is useful for built-in models that have multiple sub-properties. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">data</span></td>
    <td>String to hold the value of the property. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A value from the PropertyResult enum indicating success/failure. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_t_property_scalar_1a7aeeb14d8a8b9fd6407125bb14050bd2"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">PropertyResult</a></span>  SetValueByString(<br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1af08acbbc1a28c9e4ee8dfb501449dc28">PropertyID</a></span> propID, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& data)</p>
<p class="NDLRefMemberDescription">Sets the value of this property by string. </p>
<p class="NDLRefMemberDetailedDescription">This is to allow for the creation of properties from values stored in files on disk (flat models and block files). This should not be used for normal property value manipulation.</p>
<p class="NDLRefMemberDetailedDescription">The default implementation simply returns PropertyResult_PropertyNotScalar.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">propID</span></td>
    <td>The property ID to set the value of. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">data</span></td>
    <td>A UTF8 string representation of the data </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A value from the PropertyResult enum indicating success/failure </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_t_property_scalar_1a1e3fef46bb648d6a1d1fa35b50815367"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetPropertyType() const</p>
<p class="NDLRefMemberDescription">Get the type of this property implementation. </p>
<p class="NDLRefMemberDetailedDescription">Every <span class="NDLSystemFont"><a href="egf__IProperty.htm">IProperty</a></span> implementation must have a unique property type ClassID.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>ClassID The property type of this property </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_t_property_scalar_1ae3586602220681cb72a4867604b28913"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetDataType(<span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1af08acbbc1a28c9e4ee8dfb501449dc28">PropertyID</a></span> i_propID) const</p>
<p class="NDLRefMemberDescription">Get the type of the data stored in this property. </p>
<p class="NDLRefMemberDetailedDescription">Many <span class="NDLSystemFont"><a href="egf__IProperty.htm">IProperty</a></span> implementations might store the same data type, perhaps with semantic restrictions applied to limit the valid range of the data. These implementations would all return the same data type class. Also associative properties return the data type stored in their maps. The value returned should be the same value that would be returned from <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a45d780d553ca698005605a76ef62513d">efd::GetClassIDFromObject</a></span> or <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a7585b02ecb37385365699a1497b3ba66">efd::GetClassIDFromType</a></span> as defined in &lt;<span class="NDLSystemFont">efd/ClassIDHelpers.h</span>&gt; for the data type stored inside the property. ClassID values for common primitive types are defined in &lt;efd/efdPrimitiveTypeIDs.h&gt; and these values are extended in various places.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_propID</span></td>
    <td>The property ID to determine the type of. Only used by multiple property providers such as <span class="NDLSystemFont"><a href="egf__IBuiltinModel.htm">IBuiltinModel</a></span>. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>ClassID The type of the value stored in this property </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_t_property_scalar_1a9b09c1f417b830a91744276048f27bf2"></a>
<p class="NDLRefMemberFunction">virtual void  SerializeProperty(<br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1af08acbbc1a28c9e4ee8dfb501449dc28">PropertyID</a></span> i_propID, <br/><span class="NDLSystemFont"><a href="../efd/efd__Archive.htm">efd::Archive</a></span>& ar)</p>
<p class="NDLRefMemberDescription">Read or write a given property from an archive. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">The serialized format for associative properties must match the format obtained by calling <span class="NDLSystemFont"><a href="../efd/efd__SR_StdMap.htm#structefd_1_1_s_r___std_map_1aff720c995573d02e46f1a1efd57d5f9b">efd::SR_StdMap<>::Serialize</a></span>&lt;efd::map&lt;efd::utf8string, T&gt;&gt; where 'T' can be any property data type. This is required even for <span class="NDLSystemFont"><a href="egf__IBuiltinModel.htm">egf::IBuiltinModel</a></span> implementations of associative properties. This restriction allows data transfer between ParameterList map-style parameters, <span class="NDLSystemFont"><a href="egf__TPropertyAssoc.htm">egf::TPropertyAssoc</a></span> based properties and <span class="NDLSystemFont"><a href="egf__IBuiltinModel.htm">egf::IBuiltinModel</a></span> based associative properties.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_propID</span></td>
    <td>The id of the property being streamed. Only used by multiple property providers such as <span class="NDLSystemFont"><a href="egf__IBuiltinModel.htm">IBuiltinModel</a></span>. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">ar</span></td>
    <td>The archive to read or write the class from </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_t_property_scalar_1aef4c23e862cc41ce38e4088b881d0ff0"></a>
<p class="NDLRefMemberFunction">virtual void  AdvanceStream(<br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1af08acbbc1a28c9e4ee8dfb501449dc28">PropertyID</a></span> i_propID, <br/><span class="NDLSystemFont"><a href="../efd/efd__Archive.htm">efd::Archive</a></span>& ar) const</p>
<p class="NDLRefMemberDescription">Read an instance of myself from the stream just like FromStream but without actually modifying my internal state. </p>
<p class="NDLRefMemberDetailedDescription">In other words, seek the stream forward by my streamed size.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_propID</span></td>
    <td>The id of the property being streamed. Only used by multiple property providers such as <span class="NDLSystemFont"><a href="egf__IBuiltinModel.htm">IBuiltinModel</a></span>. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">ar</span></td>
    <td>The archive to read or write the class from </td>
</tr>

        </tbody>
    </table>
</div>


 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
