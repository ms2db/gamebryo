<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>egf::RapidIterationSystemService</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">egf::RapidIterationSystemService</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../efd/efd__ISystemService.htm">efd::ISystemService</a></span></p>


<p class="NDLRefHeaderFile">&lt;RapidIterationService.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classegf_1_1_rapid_iteration_system_service.gif" alt="Inheritance graph for egf::RapidIterationSystemService"/>
  <p class="FigureCaption">Inheritance graph for egf::RapidIterationSystemService</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">This class is a central multiplexer to manage messages required during rapid iteration development scenarios. </p>
<p class="NDLNormal">This is the main pathway for Toolbench to communicate global game control and asset management commands to a running game.</p>
<p class="NDLNormal">During application development, you will normally want to create an instance of this system service in your application Main(). This will allow you to connect to your application from Toolbench, and to perform rapid iteration. This service provides the conduit for all the change notifications that are needed as you modify art assets, models, and scripts in development. Many of these changes can be immediately reflected in the running game via this service. </p>

<a name="public_static_methods"></a>
<p class="NDLRefHead1">Public Static Methods</p>


<a name="classegf_1_1_rapid_iteration_system_service_1a8a8428c6241e1bedb07dbe28b40e097a"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span>&  GetToolbenchPublicCategory()</p>
<p class="NDLRefMemberDescription">Get the public listener channel. </p>
<p class="NDLRefMemberDetailedDescription">Messages directed to the service should be sent on this category. Toolbench already defines one category that it uses for all its messaging.</p>
<p class="NDLRefMemberDetailedDescription">May be called during PreInit or Init. </p>

<a name="classegf_1_1_rapid_iteration_system_service_1a28b2525ff862306bc113b88cc971038a"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span>  GetPrivateCategory()</p>
<p class="NDLRefMemberDescription">Get the category to which responses should be sent. </p>
<p class="NDLRefMemberDetailedDescription">All EntityLoaderServices will listen on a pre-defined category. Load request messages will go to that category. We listen on this category for the responses.</p>
<p class="NDLRefMemberDetailedDescription">May be called during PreInit or Init. </p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classegf_1_1_rapid_iteration_system_service_1a935e2bb7abd7e18ed696f057c2060348"></a>
<p class="NDLRefMemberFunction">RapidIterationSystemService()</p>
<p class="NDLRefMemberDetailedDescription">Construction and Destruction </p>

<a name="classegf_1_1_rapid_iteration_system_service_1adf34c2c1bc9969377f5b65065a5fd335"></a>
<p class="NDLRefMemberFunction">virtual void  HandleGameControlMessage(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__IMessage.htm">efd::IMessage</a></span>* pMessage, <br/><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span> targetChannel)</p>
<p class="NDLRefMemberDescription">Message handlers. </p>

<a name="classegf_1_1_rapid_iteration_system_service_1acdd28cbf421476c3498dbb5785a65723"></a>
<p class="NDLRefMemberFunction">void  HandleAssetLocatorResponse(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__AssetLocatorResponse.htm">efd::AssetLocatorResponse</a></span>* pMessage, <br/><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span> targetChannel)</p>
<p class="NDLRefMemberDetailedDescription">Construction and Destruction </p>

<a name="classegf_1_1_rapid_iteration_system_service_1aa43aa193fd317eec0fe0309ed18022db"></a>
<p class="NDLRefMemberFunction">void  HandleNameResolutionResponse(<br/>const <span class="NDLSystemFont"><a href="../efdNetwork/efd__NameResolutionMessage.htm">efd::NameResolutionMessage</a></span>* pMessage, <br/><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span> targetChannel)</p>
<p class="NDLRefMemberDetailedDescription">Construction and Destruction </p>

<a name="classegf_1_1_rapid_iteration_system_service_1a9d262d1c896b98b9cbf7175543016da9"></a>
<p class="NDLRefMemberFunction">virtual void  HandleAssignNetIDMessage(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__AssignNetIDMessage.htm">efd::AssignNetIDMessage</a></span>* pAssignNetIDMessage, <br/><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span> targetCategory)</p>
<p class="NDLRefMemberDetailedDescription">Construction and Destruction </p>

<a name="classegf_1_1_rapid_iteration_system_service_1ab4c0a38ed93ef2d47b12166b19879a62"></a>
<p class="NDLRefMemberFunction">void  HandleAssetLoadResponse(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__AssetLoadResponse.htm">efd::AssetLoadResponse</a></span>* pMessage, <br/><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span> targetCategory)</p>
<p class="NDLRefMemberDetailedDescription">Construction and Destruction </p>

<a name="classegf_1_1_rapid_iteration_system_service_1aea773993cfadd320bcf750207a928f00"></a>
<p class="NDLRefMemberFunction">virtual ~RapidIterationSystemService()</p>
<p class="NDLRefMemberDetailedDescription">Construction and Destruction </p>

<a name="classegf_1_1_rapid_iteration_system_service_1a7bce6e5e34fb6d530cd729c5fd0f71f2"></a>
<p class="NDLRefMemberFunction">virtual void  HandleAssetChange(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& assetId, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& tag)</p>
<p class="NDLRefMemberDescription">Callback used for asset change notifications. </p>
<p class="NDLRefMemberDetailedDescription">The ReloadManager will invoke this callback for each registered tag. This service handles the reload functionality for several different asset types.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">assetId</span></td>
    <td>The unique asset Id for the changed asset </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">tag</span></td>
    <td>The tag value that matched this handler's registration </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_rapid_iteration_system_service_1a61c62a6116c8a9795df2c1a41e2a4511"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  WaitForAssetServer(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a37c593debc73d82d7ddc571c725f0e2d">efd::TimeType</a></span> timeout)</p>
<p class="NDLRefMemberDescription">This method has been deprecated. </p>

<a name="classegf_1_1_rapid_iteration_system_service_1a11f10cefea92db37fa7e20437b7d0494"></a>
<p class="NDLRefMemberFunction">void  CreateSimDebugger(<span class="NDLSystemFont"><a href="egf__SimDebugger.htm">egf::SimDebugger</a></span>* pInstance = 0)</p>
<p class="NDLRefMemberDescription">Creates the <span class="NDLSystemFont"><a href="egf__SimDebugger.htm">SimDebugger</a></span> instance, which is managed by RapidIterationService. </p>
<p class="NDLRefMemberDetailedDescription">May be called during PreInit or Init.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pInstance</span></td>
    <td>An optional, derived instance of <span class="NDLSystemFont"><a href="egf__SimDebugger.htm">SimDebugger</a></span> with game-specific extensions. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_rapid_iteration_system_service_1a094f9b4bbfe22058c9903bc24bb0865b"></a>
<p class="NDLRefMemberFunction">void  DestroySimDebugger()</p>
<p class="NDLRefMemberDescription">Destroys the <span class="NDLSystemFont"><a href="egf__SimDebugger.htm">SimDebugger</a></span> instance, which is managed by RapidIterationService. </p>
<p class="NDLRefMemberDetailedDescription">This will normally happen on RapidIterationService shutdown, but can be called directly if needed earlier. May be called during PreInit or Init. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
