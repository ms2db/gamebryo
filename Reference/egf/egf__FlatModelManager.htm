<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>egf::FlatModelManager</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">egf::FlatModelManager</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../efd/efd__ISystemService.htm">efd::ISystemService</a></span></p>


<p class="NDLRefHeaderFile">&lt;FlatModelManager.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classegf_1_1_flat_model_manager.gif" alt="Inheritance graph for egf::FlatModelManager"/>
  <p class="FigureCaption">Inheritance graph for egf::FlatModelManager</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">The system service for loading and parsing Flat Model files. </p>
<p class="NDLNormal">The Flat Model Manager provides services to keep track of the Flat Models that are available, and to find, load and parse them on demand. </p>

<a name="public_types"></a>
<p class="NDLRefHead1">Public Types</p>
<a name="classegf_1_1_flat_model_manager_1a011c599f6069aed658c9eaf19d272326"></a>
<p class=NDLRefHead2>egf::FlatModelManager::LoadResult</p>


<p class="NDLRefMemberDescription">Enumerated possible results for loading a flat model file. </p>


<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">OK</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">AlreadyLoaded</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">ModelFileNotFound</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">ParseError</span></td>
    <td>&nbsp;</td>
</tr>

  </tbody>
</table>
</div>


<a name="built-in_model_methods"></a>
<p class="NDLRefHead1">Built-in Model methods</p>


<a name="classegf_1_1_flat_model_manager_1a3c03096c2edccf63e6c49033eaba841f"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__GenericFactory.htm">efd::GenericFactory</a></span>&lt;<span class="NDLSystemFont"><a href="egf__IBuiltinModel.htm">IBuiltinModel</a></span>*&gt;  BuiltinModelFactory</p>
<p class="NDLRefMemberDescription">Factories a new built-in model. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_strBuiltinName</span></td>
    <td>the name of the built-in model being created. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>IBuiltinModel* : An <span class="NDLSystemFont"><a href="egf__IBuiltinModel.htm">IBuiltinModel</a></span> pointer of the newly created property. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_flat_model_manager_1aed388b6fe1dbf58c92525d6d89a89828"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="egf__IBuiltinModel.htm">IBuiltinModel</a></span>*  FactoryBuiltinModel(const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& i_strBuiltinName)</p>
<p class="NDLRefMemberDescription">Factories a new built-in model. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_strBuiltinName</span></td>
    <td>the name of the built-in model being created. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>IBuiltinModel* : An <span class="NDLSystemFont"><a href="egf__IBuiltinModel.htm">IBuiltinModel</a></span> pointer of the newly created property. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_flat_model_manager_1a416d72519fe28bc2a8dff7838c42a1ae"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="egf__IBuiltinModel.htm">IBuiltinModel</a></span>*  FactoryBuiltinModel(<span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a1df4e70ceef104ead07333c2a8cf0df8">FlatModelID</a></span> i_builtinID)</p>
<p class="NDLRefMemberDescription">Factories a new built-in model. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_builtinID</span></td>
    <td>the model ID of the built-in model being created. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>IBuiltinModel* : An <span class="NDLSystemFont"><a href="egf__IBuiltinModel.htm">IBuiltinModel</a></span> pointer of the newly created property. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_flat_model_manager_1a58ee9d9a3f3b04be0de73fcf7e7dfca3"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  RegisterBuiltinModelFactory(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& i_strName, <br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a1df4e70ceef104ead07333c2a8cf0df8">FlatModelID</a></span> compID, <br/><span class="NDLSystemFont"><a href="../efd/efd__GenericFactory.htm#classefd_1_1_generic_factory_1a6be5593c3fb4e7d076019c43beb4a630">BuiltinModelFactory::FactoryMethod</a></span> pfn, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span> i_priority = 0)</p>
<p class="NDLRefMemberDescription">Register a factory method for a built-in model. </p>
<p class="NDLRefMemberDetailedDescription">May be called during PreInit or Init.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_strName</span></td>
    <td>The name of the built-in model to register. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">compID</span></td>
    <td>The ID of the built-in model. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pfn</span></td>
    <td>The method to call to factory the built-in model. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_priority</span></td>
    <td>Set priority (future use) </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if there are no errors </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_flat_model_manager_1ab38e1e866421522e5677dd860f5a3f9e"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>&  GetBuiltinModelNameByID(<span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a1df4e70ceef104ead07333c2a8cf0df8">FlatModelID</a></span> i_id) const</p>
<p class="NDLRefMemberDescription">Map specific built-in model names to their built-in model IDs. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_id</span></td>
    <td>Model Id of the built-in model whose name is to be retrieved </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_flat_model_manager_1a2c68cf21a71293e118bfa75f3ec40876"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a1df4e70ceef104ead07333c2a8cf0df8">FlatModelID</a></span>  GetBuiltinModelIDByName(const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& i_name) const</p>
<p class="NDLRefMemberDescription">Map specific built-in model names to their built-in model IDs. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_name</span></td>
    <td>Name of the built-in model whose Model ID is to be retrieved </td>
</tr>

        </tbody>
    </table>
</div>


<a name="entity_factory_registration_methods"></a>
<p class="NDLRefHead1">Entity factory registration methods</p>


<a name="classegf_1_1_flat_model_manager_1ad750485fe2b95274b9bfdab8ffd117d4"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">EntityPtr</a></span>(*  EntityFactoryMethod)(const FlatModel *i_pModel, egf::EntityID i_eid, bool i_master)</p>
<p class="NDLRefMemberDescription">Function signature for the <span class="NDLSystemFont"><a href="egf__Entity.htm">Entity</a></span> factory method. </p>
<p class="NDLRefMemberDetailedDescription">This method should simply allocate the <span class="NDLSystemFont"><a href="egf__Entity.htm">Entity</a></span>, it does not need to perform any other initialization steps. Once allocated the factory method will construct the entity by calling the virtual Construct method. </p>

<a name="classegf_1_1_flat_model_manager_1aaccc4ac7e6ee064438aa0733b1063c49"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  RegisterEntityFactory(<br/><span class="NDLSystemFont"><a href="egf__FlatModelManager.htm#classegf_1_1_flat_model_manager_1ad750485fe2b95274b9bfdab8ffd117d4">EntityFactoryMethod</a></span> pfn, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span> i_priority = 0)</p>
<p class="NDLRefMemberDescription">Register the entity factory. </p>
<p class="NDLRefMemberDetailedDescription">There is a single entity factory used to allocate all entities. The default factory will simply allocate.</p>
<p class="NDLRefMemberDetailedDescription">May be called during PreInit or Init. </p>
<a name="property_methods"></a>
<p class="NDLRefHead1">Property methods</p>


<a name="classegf_1_1_flat_model_manager_1a3a65a3f3a99c4f73e6083384963c6a26"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__GenericFactory.htm">efd::GenericFactory</a></span>&lt;<span class="NDLSystemFont"><a href="egf__IProperty.htm">IProperty</a></span>*&gt;  PropertyFactory</p>
<p class="NDLRefMemberDescription">Factories a new property. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">classID</span></td>
    <td>the ClassID of the property being created. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>An <span class="NDLSystemFont"><a href="egf__IProperty.htm">IProperty</a></span> pointer of the newly created property. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_flat_model_manager_1a6a049a8a1e63e7e2e616bd4520894053"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="egf__IProperty.htm">IProperty</a></span>*  FactoryProperty(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span> classID)</p>
<p class="NDLRefMemberDescription">Factories a new property. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">classID</span></td>
    <td>the ClassID of the property being created. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>An <span class="NDLSystemFont"><a href="egf__IProperty.htm">IProperty</a></span> pointer of the newly created property. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_flat_model_manager_1a3d30e5596d02f9988d09e965047a68c1"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  RegisterPropertyFactory(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& name, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span> classID, <br/><span class="NDLSystemFont"><a href="../efd/efd__GenericFactory.htm#classefd_1_1_generic_factory_1a6be5593c3fb4e7d076019c43beb4a630">PropertyFactory::FactoryMethod</a></span> pfn)</p>
<p class="NDLRefMemberDescription">Register a factory method for a property. </p>
<p class="NDLRefMemberDetailedDescription">May be called during PreInit or Init.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">classID</span></td>
    <td>The ClassID of the property to register. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">name</span></td>
    <td>The name of the property to register. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pfn</span></td>
    <td>The method to call to factory the property </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if there are no errors </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_flat_model_manager_1a0b516e7390721fd627e22dab9c361e39"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>&  GetTypeNameByID(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span> i_id) const</p>
<p class="NDLRefMemberDescription">Mappings between the property type names and the class ID of the implementation. </p>
<p class="NDLRefMemberDetailedDescription">The various <span class="NDLSystemFont"><a href="egf__IProperty.htm">IProperty</a></span> implementations each have unique names that are used in various data files like Flat Models as the property type. So, for example, we have the "UInt32" property type which matches the UInt32ScalarProperty class. New types are adding by calling the RegisterPropertyFactory method.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_id</span></td>
    <td>Class Id of Type whose name is to be retrieved </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_flat_model_manager_1a75fada30114af70db4ae35b34a070b88"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetTypeIDByName(const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& i_name) const</p>
<p class="NDLRefMemberDescription">Mappings between the property type names and the class ID of the implementation. </p>
<p class="NDLRefMemberDetailedDescription">The various <span class="NDLSystemFont"><a href="egf__IProperty.htm">IProperty</a></span> implementations each have unique names that are used in various data files like Flat Models as the property type. So, for example, we have the "UInt32" property type which matches the UInt32ScalarProperty class. New types are adding by calling the RegisterPropertyFactory method.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_name</span></td>
    <td>Name of Type whose ID is to be retrieved </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_flat_model_manager_1a8a21bb03d23927b891babcfddee2dcab"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>&  GetPropertyNameByID(<span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1af08acbbc1a28c9e4ee8dfb501449dc28">PropertyID</a></span> i_id) const</p>
<p class="NDLRefMemberDescription">Map specific property names to their property IDs. </p>
<p class="NDLRefMemberDetailedDescription">Every property created in all the data files for a given project will have unique IDs. EMT assigns these IDs when the properties are created.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_id</span></td>
    <td>Class Id of Property whose name is to be retrieved </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_flat_model_manager_1ad4c60e6bd2544a7f023e9883edb19a9c"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetPropertyNameByID(<br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1af08acbbc1a28c9e4ee8dfb501449dc28">PropertyID</a></span> i_id, <br/><span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& o_name) const</p>
<p class="NDLRefMemberDescription">Map specific property names to their property IDs. </p>
<p class="NDLRefMemberDetailedDescription">Every property created in all the data files for a given project will have unique IDs. EMT assigns these IDs when the properties are created.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_id</span></td>
    <td>Class Id of Property whose name is to be retrieved </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">o_name</span></td>
    <td>The resulting name if found, unchanged otherwise. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the property ID was valid. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_flat_model_manager_1a14876bc4bc035425d37af1d7f579d366"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1af08acbbc1a28c9e4ee8dfb501449dc28">PropertyID</a></span>  GetPropertyIDByName(const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& i_name) const</p>
<p class="NDLRefMemberDescription">Map specific property names to their property IDs. </p>
<p class="NDLRefMemberDetailedDescription">Every property created in all the data files for a given project will have unique IDs. EMT assigns these IDs when the properties are created.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_name</span></td>
    <td>Name of Property whose ID is to be retrieved </td>
</tr>

        </tbody>
    </table>
</div>


<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classegf_1_1_flat_model_manager_1ac039d1ee8f4f3ff85e2d06d57392ad5e"></a>
<p class="NDLRefMemberFunction">FlatModelManager()</p>
<p class="NDLRefMemberDetailedDescription">Constructor </p>

<a name="classegf_1_1_flat_model_manager_1a72cec9b0b4c714191bf38d5410e4f21c"></a>
<p class="NDLRefMemberFunction">void  UpdateModelLocation(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& model, <br/><span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& path)</p>
<p class="NDLRefMemberDescription">Update a location for a model file. </p>
<p class="NDLRefMemberDetailedDescription">This is used when a change notify message from the Asset Server informs of a new model file at run-time.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">model</span></td>
    <td>The name of the model </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">path</span></td>
    <td>The full path for the model file </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_flat_model_manager_1af5e4cb95e371c3633536affac036ce72"></a>
<p class="NDLRefMemberFunction">void  SetModelPath(const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& fullPath)</p>
<p class="NDLRefMemberDescription">Externally set a specific file system path to be used for locating model files. </p>
<p class="NDLRefMemberDetailedDescription">May be called during PreInit or Init.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">fullPath</span></td>
    <td>Full file system path containing model files </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_flat_model_manager_1a6783efa249d4b9d7f3487270bbc28285"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  AddModel(<span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">FlatModelPtr</a></span> model)</p>
<p class="NDLRefMemberDescription">Adds a model to this class's data structures. </p>

<a name="classegf_1_1_flat_model_manager_1a411648a10a287d8a4f98af604c1b7466"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  ReloadModel(const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& modelName)</p>
<p class="NDLRefMemberDescription">ReloadModel will do a live update of an already loaded model. </p>
<p class="NDLRefMemberDetailedDescription">This includes updating any existing entities that are currently using that model. If the model in question is not already loaded then this method does nothing since the correct model should be loaded.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">modelName</span></td>
    <td>Name of the model to reload </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_flat_model_manager_1acbda89391b2119e40d02119cf7001114"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  RemoveModel(const <span class="NDLSystemFont"><a href="egf__FlatModel.htm">FlatModel</a></span>* pModel)</p>
<p class="NDLRefMemberDescription">Remove a model from the maps of loaded models. </p>
<p class="NDLRefMemberDetailedDescription">Any <span class="NDLSystemFont"><a href="egf__Entity.htm">Entity</a></span> instances currently using this model will continue to reference it but new FactoryEntity requests with this model will fail. The model can be reloaded by calling PreloadModel or <span class="NDLSystemFont"><a href="egf__EntityManager.htm#classegf_1_1_entity_manager_1a5959bdf6cb38233ab0f637f20a8ed72b">EntityManager::CreateEntity</a></span>.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">Should a rapid iteration request arrive changing this model it will no longer update any remaining entities using the removed model. As a result, it is recommended this API only be called if there are no entities of the given model type or if rapid iteration is not enabled.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pModel</span></td>
    <td>Pointer to the model to remove. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_flat_model_manager_1a8ca3869c7b11e395a041aec138c4677f"></a>
<p class="NDLRefMemberFunction">void  CleanModelMaps()</p>
<p class="NDLRefMemberDescription">Helper function to clean out and reset all model maps for rapid-iteration. </p>

<a name="classegf_1_1_flat_model_manager_1a1dd28292a80db517b0ca8430f3f3104b"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  ReloadAllModels(<span class="NDLSystemFont">bool</span> fromToolbench = true)</p>
<p class="NDLRefMemberDescription">ReloadAllModels will do a live update of every model already loaded. </p>

<a name="classegf_1_1_flat_model_manager_1a66dab9755b9b96441761bb5c7a47c725"></a>
<p class="NDLRefMemberFunction">void  ResetFlatModelRequest()</p>
<p class="NDLRefMemberDescription">ResetFlatModelRequest will clean out the model maps and location maps followed by a request for all "urn:emergent-flat-model". </p>

<a name="classegf_1_1_flat_model_manager_1a4a2c36b84668f5f418a45a255f05774c"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsAvailable()</p>
<p class="NDLRefMemberDescription">Tells whether the flat model manager is available to accept a request. </p>

<a name="classegf_1_1_flat_model_manager_1a34d35f3ec521e6a628356d5f8262622d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="egf__FlatModelFactory.htm">egf::FlatModelFactory</a></span>*  GetFlatModelFactory() const</p>
<p class="NDLRefMemberDescription">Returns the official instance of <span class="NDLSystemFont"><a href="egf__FlatModelFactory.htm">egf::FlatModelFactory</a></span>. </p>
<p class="NDLRefMemberDetailedDescription">We own one so that multiple factory instances don't overwrite each other's asset-loader message registrations. </p>
<a name="accessors_to_return_data_that_may_be_gathered_from_the_config_manager"></a>
<p class="NDLRefHead1">Accessors to return data that may be gathered from the config manager</p>


<a name="classegf_1_1_flat_model_manager_1a770325c07c73b3d63760ff5be68ab4c4"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>&  GetModelPath() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="classegf_1_1_flat_model_manager_1ac186d5abc8798c71d41e4ee83d6f7b0f"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>&  GetModelFileExt() const</p>
<p class="NDLRefMemberFunction"></p>
<a name="behavior_methods"></a>
<p class="NDLRefHead1">Behavior methods</p>


<a name="classegf_1_1_flat_model_manager_1a9fbdb1cb166de5282c81582b3a3fd762"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>&  GetBehaviorNameByID(<span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a1ebd2b58de9ca508c04d80dea3644fcb">BehaviorID</a></span> i_id) const</p>
<p class="NDLRefMemberDescription">Map specific behavior names to their behavior IDs. </p>
<p class="NDLRefMemberDetailedDescription">Every behavior created in all the data files for a given project will have unique IDs. EMT assigns these IDs when the behaviors are created.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_id</span></td>
    <td>Class Id of Behavior whose name is to be retrieved </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_flat_model_manager_1a77580baf227a40a376474e21f65033df"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a1ebd2b58de9ca508c04d80dea3644fcb">BehaviorID</a></span>  GetBehaviorIDByName(const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& i_name) const</p>
<p class="NDLRefMemberDescription">Map specific behavior names to their behavior IDs. </p>
<p class="NDLRefMemberDetailedDescription">Every behavior created in all the data files for a given project will have unique IDs. EMT assigns these IDs when the behaviors are created.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_name</span></td>
    <td>Name of Behavior whose ID is to be retrieved </td>
</tr>

        </tbody>
    </table>
</div>


<a name="entity_creation_methods"></a>
<p class="NDLRefHead1">Entity creation methods</p>


<a name="classegf_1_1_flat_model_manager_1ae957cbfc586b54bd47fabb0a21fd274b"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">EntityPtr</a></span>  FactoryEntity(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& i_strModelName, <br/><span class="NDLSystemFont"><a href="egf__EntityID.htm">egf::EntityID</a></span> i_eid = egf::kENTITY_INVALID, <br/><span class="NDLSystemFont">bool</span> i_master = true)</p>
<p class="NDLRefMemberDescription">Factories a new entity based on the given <span class="NDLSystemFont"><a href="egf__FlatModel.htm">FlatModel</a></span>. </p>
<p class="NDLRefMemberDetailedDescription">This method should be avoided when creating new entities outside of Game Framework classes. Instead <span class="NDLSystemFont"><a href="egf__EntityManager.htm#classegf_1_1_entity_manager_1a5959bdf6cb38233ab0f637f20a8ed72b">egf::EntityManager::CreateEntity</a></span> should be used to create new entities. The <span class="NDLSystemFont"><a href="egf__Entity.htm#classegf_1_1_entity_1a4c6ee2e2863705777d88a1a9d4ea41d1">Entity::CreateBuiltinModels</a></span> method will be called on this entity after it is allocated using the EntityFactoryMethod.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_strModelName</span></td>
    <td>The name of the flat model to use. This convenience method will look up the FlatModel* and call the pointer method. of a particular flat model. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_eid</span></td>
    <td>The entity ID to assign this entity, or kENTITY_INVALID if you want a new ID to be generated and assigned to the entity. Typically new entities are automatically assigned IDs when first created and you would only pass in a specific ID if you are recreating a previously existing entity, for example after reloading from a saved state. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_master</span></td>
    <td>Typical entities for use in behavior scheduling must be "master" entities. Certain test cases and replicated entities in a client-server setting will use non-master entities. Typically you should always leave this as true. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>EntityPtr A newly allocated entity.</td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_flat_model_manager_1ae6e222dd912802f95b16f7e9a0ac533d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">EntityPtr</a></span>  FactoryEntity(<br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a1df4e70ceef104ead07333c2a8cf0df8">FlatModelID</a></span> i_modelID, <br/><span class="NDLSystemFont"><a href="egf__EntityID.htm">egf::EntityID</a></span> i_eid = egf::kENTITY_INVALID, <br/><span class="NDLSystemFont">bool</span> i_master = true)</p>
<p class="NDLRefMemberDescription">Factories a new entity based on the given <span class="NDLSystemFont"><a href="egf__FlatModel.htm">FlatModel</a></span>. </p>
<p class="NDLRefMemberDetailedDescription">This method should be avoided when creating new entities outside of Game Framework classes. Instead <span class="NDLSystemFont"><a href="egf__EntityManager.htm#classegf_1_1_entity_manager_1a5959bdf6cb38233ab0f637f20a8ed72b">egf::EntityManager::CreateEntity</a></span> should be used to create new entities. The <span class="NDLSystemFont"><a href="egf__Entity.htm#classegf_1_1_entity_1a4c6ee2e2863705777d88a1a9d4ea41d1">Entity::CreateBuiltinModels</a></span> method will be called on this entity after it is allocated using the EntityFactoryMethod.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_modelID</span></td>
    <td>The id of the flat model to use. This convenience method will look up the FlatModel* and call the pointer method. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_eid</span></td>
    <td>The entity ID to assign this entity, or kENTITY_INVALID if you want a new ID to be generated and assigned to the entity. Typically new entities are automatically assigned IDs when first created and you would only pass in a specific ID if you are recreating a previously existing entity, for example after reloading from a saved state. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_master</span></td>
    <td>Typical entities for use in behavior scheduling must be "master" entities. Certain test cases and replicated entities in a client-server setting will use non-master entities. Typically you should always leave this as true. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>EntityPtr A newly allocated entity. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_flat_model_manager_1a126bcdfa0fa39d3b0d54a2142616ab1c"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">EntityPtr</a></span>  FactoryEntity(<br/>const <span class="NDLSystemFont"><a href="egf__FlatModel.htm">FlatModel</a></span>* i_pModel, <br/><span class="NDLSystemFont"><a href="egf__EntityID.htm">egf::EntityID</a></span> i_eid = egf::kENTITY_INVALID, <br/><span class="NDLSystemFont">bool</span> i_master = true)</p>
<p class="NDLRefMemberDescription">Factories a new entity based on the given <span class="NDLSystemFont"><a href="egf__FlatModel.htm">FlatModel</a></span>. </p>
<p class="NDLRefMemberDetailedDescription">This method should be avoided when creating new entities outside of Game Framework classes. Instead <span class="NDLSystemFont"><a href="egf__EntityManager.htm#classegf_1_1_entity_manager_1a5959bdf6cb38233ab0f637f20a8ed72b">egf::EntityManager::CreateEntity</a></span> should be used to create new entities. The <span class="NDLSystemFont"><a href="egf__Entity.htm#classegf_1_1_entity_1a4c6ee2e2863705777d88a1a9d4ea41d1">Entity::CreateBuiltinModels</a></span> method will be called on this entity after it is allocated using the EntityFactoryMethod.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_pModel</span></td>
    <td>The model definition to use. All entities are the instantiations of a particular flat model. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_eid</span></td>
    <td>The entity ID to assign this entity, or kENTITY_INVALID if you want a new ID to be generated and assigned to the entity. Typically new entities are automatically assigned IDs when first created and you would only pass in a specific ID if you are recreating a previously existing entity, for example after reloading from a saved state. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_master</span></td>
    <td>Typical entities for use in behavior scheduling must be "master" entities. Certain test cases and replicated entities in a client-server setting will use non-master entities. Typically you should always leave this as true. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>EntityPtr A newly allocated entity. </td>
</tr>

        </tbody>
    </table>
</div>


<a name="model_methods"></a>
<p class="NDLRefHead1">Model methods</p>


<a name="classegf_1_1_flat_model_manager_1a29158871ee7168bfd605b8f1ad71a85a"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="egf__FlatModelManager.htm#classegf_1_1_flat_model_manager_1a011c599f6069aed658c9eaf19d272326">LoadResult</a></span>  ParseModelFile(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& modelFile, <br/><span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">FlatModelPtr</a></span>& o_pModel)</p>
<p class="NDLRefMemberDescription">Creates a parser, adding each model to the data structures of this class. </p>
<p class="NDLRefMemberDetailedDescription">You must specify the complete filename with any required path information.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">modelFile</span></td>
    <td>Full filename to load the model data from </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">o_pModel</span></td>
    <td>Output smart pointer to the Flat Model object </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_flat_model_manager_1aa69a5b5a70925f81a8ab6eef73d62c97"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="egf__FlatModelManager.htm#classegf_1_1_flat_model_manager_1a011c599f6069aed658c9eaf19d272326">LoadResult</a></span>  ParseModel(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& modelName, <br/><span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">FlatModelPtr</a></span>& o_pModel)</p>
<p class="NDLRefMemberDescription">Creates a parser, adding each model to the data structures of this class. </p>
<p class="NDLRefMemberDetailedDescription">You pass just the model name and the correct path and file extension are added to form the full file name to load.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">modelName</span></td>
    <td>The model name to load </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">o_pModel</span></td>
    <td>Output smart pointer to the Flat Model object </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_flat_model_manager_1a2ccb01c93c2d705662273c3a3477427e"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="egf__FlatModelManager.htm#classegf_1_1_flat_model_manager_1a011c599f6069aed658c9eaf19d272326">LoadResult</a></span>  LoadModelFile(const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& modelFile)</p>
<p class="NDLRefMemberDescription">Creates a parser to load a single model file. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">enum <span class="NDLSystemFont"><a href="egf__FlatModelManager.htm#classegf_1_1_flat_model_manager_1a011c599f6069aed658c9eaf19d272326">LoadResult</a></span></p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">modelFile</span></td>
    <td>Full filename to load the model data from </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>LoadResult value depending on the outcome. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_flat_model_manager_1abf1c9bd64327999c7373f50e8e03a653"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="egf__FlatModelManager.htm#classegf_1_1_flat_model_manager_1a011c599f6069aed658c9eaf19d272326">LoadResult</a></span>  LoadModel(const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& modelName)</p>
<p class="NDLRefMemberDescription">Creates a parser to load a single model file. </p>
<p class="NDLRefMemberDetailedDescription">The correct path and file extension for the model is computed using the configuration settings. If the model already exists</p>
<p class="NDLRefMemberDetailedDescription"></p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">enum <span class="NDLSystemFont"><a href="egf__FlatModelManager.htm#classegf_1_1_flat_model_manager_1a011c599f6069aed658c9eaf19d272326">LoadResult</a></span></p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">modelName</span></td>
    <td>The name of the model to load </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>LoadResult value depending on the outcome. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_flat_model_manager_1a23550154293e391e00ecd094e74999fb"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="egf__FlatModel.htm">FlatModel</a></span>*  FindModel(<span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a1df4e70ceef104ead07333c2a8cf0df8">FlatModelID</a></span> i_id) const</p>
<p class="NDLRefMemberDescription">Finds a flat model that has already been added. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_id</span></td>
    <td>The FlatModelID of the model to find </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A pointer to the flat model. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_flat_model_manager_1af9871a731c1ab8145c720f1b96431690"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="egf__FlatModel.htm">FlatModel</a></span>*  FindModel(const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& i_name) const</p>
<p class="NDLRefMemberDescription">Finds a flat model that has already been added. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_name</span></td>
    <td>The name of the model to find </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A pointer to the flat model. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_flat_model_manager_1a809604133670b11fc02bc6aee47798cf"></a>
<p class="NDLRefMemberFunction">virtual const <span class="NDLSystemFont"><a href="egf__FlatModel.htm">FlatModel</a></span>*  FindOrLoadModel(const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& i_name)</p>
<p class="NDLRefMemberDetailedDescription">Finds a flat model. If the model doesn't exist it will attempt to load it.</p>
<p class="NDLRefMemberDetailedDescription">This function is only needed by applications that do not utilize the AssetFactoryManager, which generally would include only unit tests, servers, or tools that do not include graphical rendering functionality. A game application should not call this function because it is synchronous and will block rendering.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_name</span></td>
    <td>The name of the model to find </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A pointer to the flat model. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_flat_model_manager_1a4f23320e39df9e3df4c200a9495e35a7"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>&  GetModelNameByID(<br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a1df4e70ceef104ead07333c2a8cf0df8">FlatModelID</a></span> i_id, <br/><span class="NDLSystemFont">bool</span> i_bCheckMixins = true) const</p>
<p class="NDLRefMemberDescription">Lookup the name of a model given its ID. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_id</span></td>
    <td>The FlatModelID of the model to find </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_bCheckMixins</span></td>
    <td>True to also check mix-in models </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>utf8string The name of the flat model. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_flat_model_manager_1a8855690cd3c18e5dbe43637683d72326"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a1df4e70ceef104ead07333c2a8cf0df8">FlatModelID</a></span>  GetModelIDByName(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& i_name, <br/><span class="NDLSystemFont">bool</span> i_bCheckMixins = true) const</p>
<p class="NDLRefMemberDescription">Lookup the ID of a model given its name. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_name</span></td>
    <td>The name of the model to find </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_bCheckMixins</span></td>
    <td>True to also check mix-in models </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>FlatModelID the ID of the flat model. kFlatModelID_INVALID if model is not found. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_flat_model_manager_1ac6d715702eb3080cbd4adc9069d60a19"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  RegisterMixin(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& i_name, <br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a1df4e70ceef104ead07333c2a8cf0df8">FlatModelID</a></span> i_id)</p>
<p class="NDLRefMemberDescription">Register a "name-&gt;id" mapping for a model that is mixed in but might not be loaded. </p>
<p class="NDLRefMemberDetailedDescription">You can then lookup the ID using GetModelIDByName.</p>
<p class="NDLRefMemberDetailedDescription">This method may be called during PreInit or Init.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_name</span></td>
    <td>The name of the model </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_id</span></td>
    <td>The id of the model </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>bool True if the name and ID don't conflict. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_flat_model_manager_1a5ce09536ca5c3ff44cb443a248b66d00"></a>
<p class="NDLRefMemberFunction">void  PreloadModel(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& modelName, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span>& callback = efd::kCAT_INVALID)</p>
<p class="NDLRefMemberDescription">Preload a flat model independent of .xblock loading. </p>
<p class="NDLRefMemberDetailedDescription">This makes the model available for use even if the model is not loaded as part of an entity or world load. The provided callback will receive an AssetLoadResponse once the load completes. The act of preloading an model also calculates and load dependent mixin flat models and Lua behavior scripts.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">modelName</span></td>
    <td>Name of the model to preload. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">callback</span></td>
    <td>Category to forward the AssetLoadResponse message to. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_flat_model_manager_1a9e8242075bf1547b2bc579d2075b46af"></a>
<p class="NDLRefMemberFunction">void  PreloadModels(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& urn, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span>& callback = efd::kCAT_INVALID)</p>
<p class="NDLRefMemberDescription">Preload a set of flat model files bassed on the given URN. </p>
<p class="NDLRefMemberDetailedDescription">All flat model files that match the URN are preloaded. The caller can provide a callback category, which receives an AssetLoadResponse for each located flat model that was preloaded.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription"><span class="NDLSystemFont"><a href="egf__FlatModelManager.htm#classegf_1_1_flat_model_manager_1a5ce09536ca5c3ff44cb443a248b66d00">PreloadModel</a></span> for further details.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">urn</span></td>
    <td>URN of the flat models to preload. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">callback</span></td>
    <td>Category to forward the AssetLoadResponse messages to. </td>
</tr>

        </tbody>
    </table>
</div>


 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
