<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>egf::Scheduler</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">egf::Scheduler</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../efd/efd__ISystemService.htm">efd::ISystemService</a></span></p>


<p class="NDLRefHeaderFile">&lt;Scheduler.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classegf_1_1_scheduler.gif" alt="Inheritance graph for egf::Scheduler"/>
  <p class="FigureCaption">Inheritance graph for egf::Scheduler</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">The implementation class that is the basis for a scheduler process. </p>
<p class="NDLNormal">The <span class="NDLSystemFont">Scheduler</span> is a System Service that manages 'owned' entities. Each entity in the system is owned by one and only one <span class="NDLSystemFont">Scheduler</span> at a time. The <span class="NDLSystemFont">Scheduler</span> gets ticked once per framework tick. When the <span class="NDLSystemFont">Scheduler</span> is ticked, it feeds cycles to the behavior models of any Entities that need it (Executed Owned Entities). The <span class="NDLSystemFont">Scheduler</span> will call the behavior system once for each pending <span class="NDLSystemFont"><a href="egf__Entity.htm">Entity</a></span> behavior. </p>

<a name="public_static_attributes"></a>
<p class="NDLRefHead1">Public Static Attributes</p>


<a name="classegf_1_1_scheduler_1a62642cefea53cb4bfda738b2d33685ae"></a>
<p class="NDLRefMemberFunction">static const char*  kSchedulerSection</p>
<p class="NDLRefMemberDescription">Global <span class="NDLSystemFont">Scheduler</span> configuration defines. </p>

<a name="classegf_1_1_scheduler_1adafaccf4cf6e006100b651b702928b7d"></a>
<p class="NDLRefMemberFunction">static const char*  kMaxThread</p>
<p class="NDLRefMemberFunction"></p>

<a name="classegf_1_1_scheduler_1af1968d73a87774ae97f51416217cb8ce"></a>
<p class="NDLRefMemberFunction">static const char*  kShardID</p>
<p class="NDLRefMemberFunction"></p>
<a name="public_static_methods"></a>
<p class="NDLRefHead1">Public Static Methods</p>


<a name="classegf_1_1_scheduler_1a474c1c368deed00a1d5cc9353e98bf91"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  IsScriptedBehaviorType(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> behaviorType)</p>
<p class="NDLRefMemberDescription">Determine if the provided behavior type is a scripted type or one of the fixed base types. </p>
<p class="NDLRefMemberDetailedDescription">Any value which is not a well-known non-script type is considered to be a scripted type.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">behaviorType</span></td>
    <td>either an <span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1addeb6c47daeb31df2cb1531e64d65df2">egf::BehaviorTypes</a></span> enumeration value or a custom script value as would be used in a RegisterScriptingRuntime call. </td>
</tr>

        </tbody>
    </table>
</div>


<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classegf_1_1_scheduler_1aed460e4fbe8b0dd7bf148e8543d5bd93"></a>
<p class="NDLRefMemberFunction">Scheduler()</p>
<p class="NDLRefMemberDescription">Default constructor. </p>

<a name="classegf_1_1_scheduler_1ad6ce8bc67f70de9adbb97e686ca60ef9"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  QueueTask(<span class="NDLSystemFont"><a href="egf__ScheduledTask.htm">ScheduledTask</a></span>* pTask)</p>
<p class="NDLRefMemberDescription">Add a task to the global queue. </p>
<p class="NDLRefMemberDetailedDescription">The ExecutionTime set on the task determines when this task will run. Tasks are always executed during <span class="NDLSystemFont"><a href="egf__Scheduler.htm#classegf_1_1_scheduler_1aa5c5a62c3938d8080d591b4901edbbad">Scheduler::OnTick</a></span> at or after their ExecutionTime has been reached. All times for scheduled tasks are in game time, not real time, which means they are delayed by pausing the scheduler and effected by any changes to the game time clock.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pTask</span></td>
    <td>The task to execute </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_scheduler_1a75e6a1f06af2f9e326137a7f93dba1b7"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  QueueTaskOnEvent(<br/><span class="NDLSystemFont"><a href="egf__EventID.htm">EventID</a></span> replyEvent, <br/><span class="NDLSystemFont"><a href="egf__ScheduledTask.htm">ScheduledTask</a></span>* pTask)</p>
<p class="NDLRefMemberDescription">Add a task to a waiting queue until a response is received at which time the task will be automatically moved into the global queue at "time_Now" and executed on the next tick following the response. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">The initial ExecutionTime set on pTask is ignored. When this event is eventually added to the global queue it will always be queued using "time_Now".</p>
<p class="NDLRefMemberDetailedDescription">Only one task can be blocked on a given <span class="NDLSystemFont"><a href="egf__EventID.htm">EventID</a></span>.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">replyEvent</span></td>
    <td>The event this task is waiting for. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pTask</span></td>
    <td>The task waiting to be executed </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the event was queued, false on error. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_scheduler_1abb15db44ad0afbb86390816be3e89617"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  QueueTaskOnEntityCreation(<br/><span class="NDLSystemFont"><a href="egf__EntityID.htm">EntityID</a></span> waitingFor, <br/><span class="NDLSystemFont"><a href="egf__ScheduledTask.htm">ScheduledTask</a></span>* pTask)</p>
<p class="NDLRefMemberDescription">Add a task to a waiting queue until an <span class="NDLSystemFont"><a href="egf__EntityFactoryResponse.htm">EntityFactoryResponse</a></span> is received at which time the task will be automatically moved into the global queue at "time_Now" and executed on the next tick following the response. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">The initial ExecutionTime set on pTask is ignored. When this event is eventually added to the global queue it will always be queued using "time_Now".</p>
<p class="NDLRefMemberDetailedDescription">Only one task can be blocked on a given <span class="NDLSystemFont"><a href="egf__EntityID.htm">EntityID</a></span>.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">waitingFor</span></td>
    <td>The ID of the entity we're waiting for. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pTask</span></td>
    <td>The task waiting to be executed </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the event was queued, false on error. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_scheduler_1a7636e7e02d8458ef91be9c1b3e5bcf3c"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsBehaviorPending(<span class="NDLSystemFont"><a href="egf__EventID.htm">EventID</a></span> id) const</p>
<p class="NDLRefMemberDescription">Determine if an event has been queued but not yet executed. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">id</span></td>
    <td>The event to check </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the event is queued but not yet executed. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_scheduler_1a01a7a71596a1cf2c4938489417a17e61"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  RemovePendingBehavior(<span class="NDLSystemFont"><a href="egf__EventID.htm">EventID</a></span> id)</p>
<p class="NDLRefMemberDescription">Remove an event that has been queued but not yet executed. </p>
<p class="NDLRefMemberDetailedDescription"><span class="NDLSystemFont"><a href="egf__ScheduledTask.htm#classegf_1_1_scheduled_task_1a39bb7f245a02264a535f634fb607f88d">ScheduledTask::AbortTask</a></span> will be called on the event if it is found and removed.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">id</span></td>
    <td>The event to remove </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the event was removed. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_scheduler_1aa6b6a2406dc15c6ad6d2f28080564da5"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  DestroyEntity(<span class="NDLSystemFont"><a href="egf__EntityID.htm">egf::EntityID</a></span> entityID)</p>
<p class="NDLRefMemberDescription">Destroy an entity by invoking <span class="NDLSystemFont"><a href="egf__Entity.htm#classegf_1_1_entity_1a7c1e0c5ca590567c51f2a5c2e1bb1f36">Entity::Destroy</a></span>, which will check for a scripted OnDestroy behavior. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">entityID</span></td>
    <td>The <span class="NDLSystemFont"><a href="egf__EntityID.htm">EntityID</a></span> of the entity to destroy </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>true if the entity was found and the destroy function called </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_scheduler_1a928f56c1482cabeda2cc035c396cd68d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  DestroyEntity(<span class="NDLSystemFont"><a href="egf__Entity.htm">egf::Entity</a></span>* pEntity)</p>
<p class="NDLRefMemberDescription">Destroy an entity by invoking <span class="NDLSystemFont"><a href="egf__Entity.htm#classegf_1_1_entity_1a7c1e0c5ca590567c51f2a5c2e1bb1f36">Entity::Destroy</a></span>, which will check for a scripted OnDestroy behavior. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pEntity</span></td>
    <td>The Entity* of the entity to destroy </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>true if the entity was found and the destroy function called </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_scheduler_1a5df6e463d456551040636d635e9454b7"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="egf__Entity.htm">Entity</a></span>*  LookupEntity(const <span class="NDLSystemFont"><a href="egf__EntityID.htm">EntityID</a></span>& id) const</p>
<p class="NDLRefMemberDescription">Find an owned entity given its <span class="NDLSystemFont"><a href="egf__EntityID.htm">EntityID</a></span> class. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">id</span></td>
    <td>reference to an <span class="NDLSystemFont"><a href="egf__EntityID.htm">EntityID</a></span> class instance. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td><span class="NDLSystemFont"><a href="egf__Entity.htm">Entity</a></span> smart pointer to owned entity or NULL if not found. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_scheduler_1a8876227c20bb13ef2b974700340bb664"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="egf__Entity.htm">Entity</a></span>*  FindEntity(const <span class="NDLSystemFont"><a href="egf__EntityID.htm">EntityID</a></span>& id) const</p>
<p class="NDLRefMemberDescription">Find ANY entity (owned or replicated) given its <span class="NDLSystemFont"><a href="egf__EntityID.htm">EntityID</a></span> class. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">id</span></td>
    <td>reference to an <span class="NDLSystemFont"><a href="egf__EntityID.htm">EntityID</a></span> class instance. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td><span class="NDLSystemFont"><a href="egf__Entity.htm">Entity</a></span> smart pointer to owned entity or NULL if not found. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_scheduler_1a6a20446502038888d5b46e8eef568041"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="egf__Entity.htm">Entity</a></span>*  LookupEntityByDataFileID(const <span class="NDLSystemFont"><a href="../efd/efd__ID128.htm">efd::ID128</a></span>& id) const</p>
<p class="NDLRefMemberDescription">Find an entity given its data file id. </p>
<p class="NDLRefMemberDetailedDescription">This method simple delegates to the <span class="NDLSystemFont"><a href="egf__EntityManager.htm">EntityManager</a></span> and exists only for legacy compatibility.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">id</span></td>
    <td>reference to an <span class="NDLSystemFont"><a href="egf__EntityID.htm">EntityID</a></span> class instance. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td><span class="NDLSystemFont"><a href="egf__Entity.htm">Entity</a></span> pointer to an entity or NULL if not found. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_scheduler_1ac2ff3fcb1a8092211d3fdae389d2b786"></a>
<p class="NDLRefMemberFunction">void  SubscribeEntity(<br/><span class="NDLSystemFont"><a href="egf__Entity.htm">Entity</a></span>* pEntity, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span>& cat)</p>
<p class="NDLRefMemberDescription">Lets an entity subscribe to Behavior messages from particular categories This will subscribe the scheduler to kMSGID_Event and kMSGID_EventCancel messages on behalf of the given entity. </p>
<p class="NDLRefMemberDetailedDescription">The category should be either the entity's ID itself or else an event channel about which the entity is interested. Optionally you may also request return messages (kMSGID_EventReturn) if the entity</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pEntity</span></td>
    <td>The pointer to the entity that wants to receive the message </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">cat</span></td>
    <td>The "match" category bits </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_scheduler_1aacba6ef579b7c2f0f4419dda645454b5"></a>
<p class="NDLRefMemberFunction">void  UnsubscribeEntity(<br/><span class="NDLSystemFont"><a href="egf__Entity.htm">Entity</a></span>* pEntity, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span>& cat)</p>
<p class="NDLRefMemberDescription">Allows an entity to unsubscribe to Behavior messages from particular categories. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pEntity</span></td>
    <td>The pointer to the entity to stop receiving the messages </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">cat</span></td>
    <td>The "match" category bits </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_scheduler_1aa1fb64047a0cb4b8991daa1e4fc8bc83"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>  GetMaxThread() const</p>
<p class="NDLRefMemberDescription">Returns the number of script language threads each entity can run. </p>
<p class="NDLRefMemberDetailedDescription">May be called during PreInit or Init.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> number of script language threads that each entity can have open simultaneously. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_scheduler_1affe31b88081f610175657fde5a736b5b"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span>&  GetSchedulerCat() const</p>
<p class="NDLRefMemberDescription">Retrieves the private category for the scheduler process. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>The private <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span> for the this scheduler </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_scheduler_1a22d0a1707f7c75fb65cbbbb228a5d33a"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span>  GetAllSchedulersCat()</p>
<p class="NDLRefMemberDescription">Retrieves the private category for the scheduler process. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>The global <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span> used by all schedulers </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_scheduler_1a335753c0ff290ce5251fb6d7a496401d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span>  GetSchedulersAnnouceCat()</p>
<p class="NDLRefMemberDescription">Retrieves the scheduler announce channel for all the schedulers. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>The global <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span> used by all schedulers to announce that they are up and running. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_scheduler_1a14ff2985b3ecd0192f15d8ff4cd99c77"></a>
<p class="NDLRefMemberFunction">void  ProcessEventMessage(<br/><span class="NDLSystemFont"><a href="egf__Entity.htm">Entity</a></span>* pEntity, <br/>const <span class="NDLSystemFont"><a href="egf__EventMessage.htm">EventMessage</a></span>* pEventMessage, <br/><span class="NDLSystemFont">bool</span> isViewEvent = false)</p>
<p class="NDLRefMemberDescription">Entities directly receive their own EventMessages and then pass them to this method for processing. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pEntity</span></td>
    <td>The Entity* to process </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pEventMessage</span></td>
    <td>The EventMessage* to process </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">isViewEvent</span></td>
    <td>True if this is a view event. This effects error logging only. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_scheduler_1ac7ce53dbbbb8bc689cd55980b547931d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  RegisterScriptingRuntime(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& name, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> behaviorType, <br/><span class="NDLSystemFont"><a href="egf__ISchedulerScripting.htm">ISchedulerScripting</a></span>* engine)</p>
<p class="NDLRefMemberDescription">Register a scripting runtime with the scheduler. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">This method can be called as soon as the <span class="NDLSystemFont">Scheduler</span> is created. It is recommended that scripting runtime implementations be added either during system service creation or during OnPreInit of a system service.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">name</span></td>
    <td>the name of the scripting engine. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">behaviorType</span></td>
    <td>The type of behavior handled by this runtime. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">engine</span></td>
    <td>the scripting engine to register. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>true if the engine was added, false if it already exists. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_scheduler_1ab25c08f53535e89bcddea0764b169851"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="egf__ISchedulerScripting.htm">ISchedulerScripting</a></span>*  GetScriptingRuntime(const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& name)</p>
<p class="NDLRefMemberDescription">Get a pointer to a scripting runtime given that runtimes name. </p>
<p class="NDLRefMemberDetailedDescription">Returns null if the runtime is not available.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">name</span></td>
    <td>the name of the runtime </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>An <span class="NDLSystemFont"><a href="egf__ISchedulerScripting.htm">ISchedulerScripting</a></span> pointer, or null if the runtime was not found. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_scheduler_1a4e667e00b42c7ffd653a4ec4052bfbb7"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="egf__ISchedulerScripting.htm">ISchedulerScripting</a></span>*  GetScriptingRuntime(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> behaviorType)</p>
<p class="NDLRefMemberDescription">Get a pointer to a scripting runtime given that runtimes behavior id. </p>
<p class="NDLRefMemberDetailedDescription">Returns null if the runtime is not available.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">behaviorType</span></td>
    <td>The type of behavior handled by the runtime. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>An <span class="NDLSystemFont"><a href="egf__ISchedulerScripting.htm">ISchedulerScripting</a></span> pointer, or null if the runtime was not found. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_scheduler_1ad6b152ca09d8db49fc060fae771af76e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="egf__ISchedulerScripting.htm#classegf_1_1_i_scheduler_scripting_1afbef1604a644e0ce68cfa5bd67277e12">ISchedulerScripting::RuntimeStatus</a></span>  GetRuntimeStatus(const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& name)</p>
<p class="NDLRefMemberDescription">Get the status of the given runtime. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">name</span></td>
    <td>the string name of the runtime to check </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td><span class="NDLSystemFont"><a href="egf__ISchedulerScripting.htm#classegf_1_1_i_scheduler_scripting_1afbef1604a644e0ce68cfa5bd67277e12">ISchedulerScripting::RuntimeStatus</a></span> enum value </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_scheduler_1acf56d360d217c4383afc4681985b4e46"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="egf__ISchedulerScripting.htm#classegf_1_1_i_scheduler_scripting_1afbef1604a644e0ce68cfa5bd67277e12">ISchedulerScripting::RuntimeStatus</a></span>  GetRuntimeStatus(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> ID)</p>
<p class="NDLRefMemberDescription">Get the status of the given runtime. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">ID</span></td>
    <td>the ID of the runtime to check </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td><span class="NDLSystemFont"><a href="egf__ISchedulerScripting.htm#classegf_1_1_i_scheduler_scripting_1afbef1604a644e0ce68cfa5bd67277e12">ISchedulerScripting::RuntimeStatus</a></span> enum value </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_scheduler_1a290a56c05af9955a60f6e153dfeafe44"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  DoScriptBehavior(<span class="NDLSystemFont"><a href="egf__PendingBehavior.htm">egf::PendingBehavior</a></span>* pPendBehavior)</p>
<p class="NDLRefMemberDescription">Execute a behavior for the specified <span class="NDLSystemFont"><a href="egf__Entity.htm">Entity</a></span>. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pPendBehavior</span></td>
    <td>The PendingBehavior* to run </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>bool true on success </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_scheduler_1a1d46374f21637fd28c1cbc1b93dc46fb"></a>
<p class="NDLRefMemberFunction">void  PauseScheduler(<span class="NDLSystemFont">bool</span> pause)</p>
<p class="NDLRefMemberDescription">Request that the <span class="NDLSystemFont">Scheduler</span> and game time clock be paused or resumed. </p>
<p class="NDLRefMemberDetailedDescription">Pass true to request pausing and false to request resuming. The <span class="NDLSystemFont">Scheduler</span> accumulates all the requests to determine the final pause state. When paused the value of the game time clock will not increase.</p>
<p class="NDLRefMemberDetailedDescription">This method can only be called after <span class="NDLSystemFont"><a href="egf__Scheduler.htm#classegf_1_1_scheduler_1a667350bcdbce07882be0527e4bc28b5e">Scheduler::OnPreInit</a></span> has completed.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pause</span></td>
    <td>True to pause or false to unpause. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_scheduler_1aab86d3e34932b938f49588a453d853a1"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsPaused() const</p>
<p class="NDLRefMemberDescription">Reports whether the scheduler is paused, meaning that entities are not being ticked. </p>
<p class="NDLRefMemberDetailedDescription">This method can only be called after <span class="NDLSystemFont"><a href="egf__Scheduler.htm#classegf_1_1_scheduler_1a667350bcdbce07882be0527e4bc28b5e">Scheduler::OnPreInit</a></span> has completed.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>bool true if a match was found, false otherwise </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_scheduler_1aac61cf88efb9151cc5ea0f7c6152f2ad"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  StartSchedulerPaused()</p>
<p class="NDLRefMemberDescription">Request that the scheduler begin with the game time clock paused. </p>
<p class="NDLRefMemberDetailedDescription">If this method succeeds you must resume the scheduler by calling PauseScheduler(false) before behaviors can be executed.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">This method should be called before <span class="NDLSystemFont"><a href="egf__Scheduler.htm#classegf_1_1_scheduler_1a667350bcdbce07882be0527e4bc28b5e">Scheduler::OnPreInit</a></span> is called in order to ensure that the clock is paused before it begins ticking.</p>
<p class="NDLRefMemberDetailedDescription">When this method fails you may wish to simply call PauseScheduler(true) in order to go ahead and pause the clock. This can be useful if attempting to pause the scheduler from the OnPreInit of another service. Depending on the service priorities the other service could have OnPreInit called before or after the scheduler but in either case the game time clock will not have been advanced yet. Consider the following example:</p>
<pre>        // Example of ensuring the scheduler is paused from an OnPreInit method:
        efd::SyncResult SomeService::OnPreInit(efd::IDependencyRegistrar* pDependencyRegistrar)
        {
            m_pScheduler = m_pServiceManager-&gt;GetSystemServiceAs&lt;egf::Scheduler&gt;();
            if (!m_pScheduler-&gt;StartSchedulerPaused())
            {
                // Failure of StartSchedulerPaused tells us Scheduler::OnPreInit has run so we
                // can safely call PauseScheduler:
                m_pScheduler-&gt;PauseScheduler(true);
            }
            // Because we called this during OnPreInit we now know the scheduler is paused at the
            // initial game time. We will resume the scheduler later when we are ready
            ...
        }
        efd::AsyncResult SomeService::OnTick()
        {
            // For example, we may simply want to leave game time paused until intialization
            // is complete. Or perhaps you might wait until loading of a block begins. Remember
            // that no behaviors can run while paused and completion of a block load may require
            // execution of various lifecycle behavaiors such as OnCreate so you should unpause
            // no later than the elr_Loaded result (elr_Loading would be even better to avoid a
            // glut of lifecycle behaviors from building up).
            if (m_firstTick)
            {
                m_pScheduler-&gt;PauseScheduler(false);
                m_firstTick = false;
            }
            ...
        }
</pre>
</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>True if this method was called prior to OnPreInit and will thus take effect, or false if the game time clock has already been initialized. When false is returned the game time clock will NOT be paused and should therefore not be resumed. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_scheduler_1ae55bd6ec28af73771782d127eda0ff31"></a>
<p class="NDLRefMemberFunction">void  DeleteAllEntities()</p>
<p class="NDLRefMemberDescription">Tells the scheduler to delete all entities on the next tick. </p>
<p class="NDLRefMemberDetailedDescription">Any running or queued behaviors are discarded. This should only be called for rapid iteration and not in production as behaviors will be lost. Calls ClearEntities after next tick. </p>

<a name="classegf_1_1_scheduler_1ad0ed31e44e030edb72fec234da152fc6"></a>
<p class="NDLRefMemberFunction">void  CleanEntities()</p>
<p class="NDLRefMemberDescription">Delete Entities from internal maps, send a message to the server to unload assets. </p>
<p class="NDLRefMemberDetailedDescription">Caution this happens immediately, if a delay is practical use DeleteAllEntities. </p>

<a name="classegf_1_1_scheduler_1a8eb94576d3108949d33bea851942fa67"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a37c593debc73d82d7ddc571c725f0e2d">efd::TimeType</a></span>  GetGameTime() const</p>
<p class="NDLRefMemberDescription">Read the current value of the game time clock. </p>
<p class="NDLRefMemberDetailedDescription">This method can only be called after <span class="NDLSystemFont"><a href="egf__Scheduler.htm#classegf_1_1_scheduler_1a667350bcdbce07882be0527e4bc28b5e">Scheduler::OnPreInit</a></span> has completed. </p>

<a name="classegf_1_1_scheduler_1a08a2bf2907b92a2696607687ad042a36"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a37c593debc73d82d7ddc571c725f0e2d">efd::TimeType</a></span>  GetLastGameTimeDelta() const</p>
<p class="NDLRefMemberDescription">Returns the amount by which the game time clock advanced between the previous tick and this tick. </p>
<p class="NDLRefMemberDetailedDescription">When the <span class="NDLSystemFont">Scheduler</span> is paused this amount will be zero.</p>
<p class="NDLRefMemberDetailedDescription">This method can only be called after <span class="NDLSystemFont"><a href="egf__Scheduler.htm#classegf_1_1_scheduler_1a667350bcdbce07882be0527e4bc28b5e">Scheduler::OnPreInit</a></span> has completed. </p>

<a name="classegf_1_1_scheduler_1a519b21362c78b1b0cecd8a918e31f19d"></a>
<p class="NDLRefMemberFunction">void  SetDebuggerCallback(<span class="NDLSystemFont"><a href="egf__IDebuggerCallback.htm">IDebuggerCallback</a></span>* callback)</p>
<p class="NDLRefMemberDescription">Specifies a callback function for script debugging logic, executed during the scheduler update. </p>
<p class="NDLRefMemberDetailedDescription">Only one debugger callback can be registered at a time.</p>
<p class="NDLRefMemberDetailedDescription">May be called during PreInit or Init.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">callback</span></td>
    <td>script debugger callback to install </td>
</tr>

        </tbody>
    </table>
</div>


 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
