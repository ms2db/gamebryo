<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>egf::PendingBehavior</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">egf::PendingBehavior</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="egf__ScheduledTask.htm">egf::ScheduledTask</a></span></p>


<p class="NDLRefHeaderFile">&lt;PendingBehavior.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classegf_1_1_pending_behavior.gif" alt="Inheritance graph for egf::PendingBehavior"/>
  <p class="FigureCaption">Inheritance graph for egf::PendingBehavior</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">The implementation class for a pending behavior (event/method). </p>
<p class="NDLNormal">This class holds pointers to a behavior and arguments to the actual call. It is used to hold pending behaviors on the wait queue after they arrive in event or method messages. </p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classegf_1_1_pending_behavior_1a568de9c0a728e8d1fc0310cae07e11f6"></a>
<p class="NDLRefMemberFunction">virtual void  DoTask(<span class="NDLSystemFont"><a href="egf__Scheduler.htm">Scheduler</a></span>* )</p>
<p class="NDLRefMemberDescription">Executes the pending behavior. </p>

<a name="classegf_1_1_pending_behavior_1a523c7bd2868d8537ae628e2b81174688"></a>
<p class="NDLRefMemberFunction">virtual void  AbortTask(<span class="NDLSystemFont"><a href="egf__Scheduler.htm">Scheduler</a></span>* )</p>
<p class="NDLRefMemberDescription">Called if this task is aborted. In turn calls FinishBehavior. </p>

<a name="classegf_1_1_pending_behavior_1acf52230c80b6371c491b1456b74df736"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="egf__Entity.htm">egf::Entity</a></span>*  GetScriptEntity() const</p>
<p class="NDLRefMemberDescription">Get the <span class="NDLSystemFont"><a href="egf__Entity.htm">Entity</a></span> that will run this behavior. </p>

<a name="classegf_1_1_pending_behavior_1aba6fff48866738929a777c43e7732f17"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="egf__BehaviorDescriptor.htm">BehaviorDescriptor</a></span>*  GetBehaviorDescriptor() const</p>
<p class="NDLRefMemberDescription">Get the Descriptor of the behavior that will run. </p>

<a name="classegf_1_1_pending_behavior_1a649e7efdaf138a9e8077b927594a152b"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__ParameterList.htm">efd::ParameterList</a></span>*  GetArgumentList() const</p>
<p class="NDLRefMemberDescription">Get the list of arguments for this behavior. </p>
<p class="NDLRefMemberDetailedDescription">Arguments can be fetched by index and optionally by name (names should be used when calling extends style behaviors). </p>

<a name="classegf_1_1_pending_behavior_1a471edb94ceaab312b242bef5ada26b0d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="egf__EntityID.htm">EntityID</a></span>  GetReturnEntityID() const</p>
<p class="NDLRefMemberDescription">Get the <span class="NDLSystemFont"><a href="egf__EntityID.htm">EntityID</a></span> of the <span class="NDLSystemFont"><a href="egf__Entity.htm">Entity</a></span> that requested this behavior. </p>
<p class="NDLRefMemberDetailedDescription">If this behavior is the result of a SendEvent call then this is the <span class="NDLSystemFont"><a href="egf__EntityID.htm">EntityID</a></span> of the sender. This ID is the destination for methods like SendReply. </p>

<a name="classegf_1_1_pending_behavior_1a4bedc002464fa245f2656508169332d7"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetLifecycleToken() const</p>
<p class="NDLRefMemberDescription">Get the lifecycle token. </p>
<p class="NDLRefMemberDetailedDescription">This is a lifecycle identifier as would be passed to the Entity::_OnLifecycle and related methods. If set, the completion of this behavior will trigger an <span class="NDLSystemFont"><a href="egf__Entity.htm#classegf_1_1_entity_1a2f717f2cc3106933a626eaec2d672544">Entity::EndLifecycle</a></span> call. </p>

<a name="classegf_1_1_pending_behavior_1a66e01795b3c007acf2130eb047a8028d"></a>
<p class="NDLRefMemberFunction">void  SetLifecycleToken(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> lifecycle)</p>
<p class="NDLRefMemberDescription">Set the lifecycle token. </p>

<a name="classegf_1_1_pending_behavior_1a2e2ecd2a6dabbb80f777fcf569e1a9b1"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  Started() const</p>
<p class="NDLRefMemberDescription">Determine if execution has begun on this behavior. </p>

<a name="classegf_1_1_pending_behavior_1a75f46f9474c18b44e9af965238aeec62"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsImmediate() const</p>
<p class="NDLRefMemberDescription">Determines if the current behavior is being executed as an immediate behavior. </p>
<p class="NDLRefMemberDetailedDescription">Note that immediate behaviors can also be run normally, so this is not the same as checking the immediate trait on the behavior descriptor. </p>

<a name="classegf_1_1_pending_behavior_1a3f41c0b31720ef3c78be195481ee8a31"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsBlocked() const</p>
<p class="NDLRefMemberDescription">Determine if this behavior is blocked for any reason. </p>

<a name="classegf_1_1_pending_behavior_1a4970b04c57efa221fc8a5bc21521b085"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  CanBlock() const</p>
<p class="NDLRefMemberDescription">Determine if this behavior is allowed to block. </p>

<a name="classegf_1_1_pending_behavior_1a52b4c007a5b19a9c0c8f1cdd4cb7f0a7"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsBlockedForReply() const</p>
<p class="NDLRefMemberDescription">Check if this behavior is currently blocked waiting for a reply message. </p>

<a name="classegf_1_1_pending_behavior_1a6d46d42841ad3832f33126128e21ffd5"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  BlockForReply()</p>
<p class="NDLRefMemberDescription">Block this behavior for a reply message. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>True if this behavior successfully blocked, false if this behavior is NoBlock </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_pending_behavior_1a1d7e0b9482bd27c86c4c1a5e773c5b6e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  ResumeFromReply()</p>
<p class="NDLRefMemberDescription">Unblock this behavior once the reply message arrives. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>True if this behavior was blocked for reply. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_pending_behavior_1a6e4a6f79de68c5ca4dd048a6c66be419"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsBlockedForSleep() const</p>
<p class="NDLRefMemberDescription">Check if this behavior is currently blocked due to a sleep call. </p>

<a name="classegf_1_1_pending_behavior_1a2f39a143f8083c469aee9468bc7a9b22"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  BlockForSleep()</p>
<p class="NDLRefMemberDescription">Block this behavior for sleep. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>True if this behavior successfully blocked, false if this behavior is NoBlock </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_pending_behavior_1ae7d5173f803bdaf41521f216605ac26d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  ResumeFromSleep()</p>
<p class="NDLRefMemberDescription">Unblock this behavior after a sleep interval passes. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>True if this behavior was blocked for sleep. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_pending_behavior_1ac817eaec274b2b1a25e5a4f9610226f7"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsBlockedForDebug() const</p>
<p class="NDLRefMemberDescription">Check if this behavior is blocked due to a debugger break point. </p>

<a name="classegf_1_1_pending_behavior_1afb14f06ea9a053405a1f618288c2796a"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  BlockForDebug()</p>
<p class="NDLRefMemberDescription">Block this behavior for debugging. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>True if this behavior successfully blocked, false if this behavior is Immediate </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_pending_behavior_1a03121515cc6e1cd0bd6cdeefe81b51f0"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  ResumeFromDebug()</p>
<p class="NDLRefMemberDescription">Unblock this behavior after a debug break point resumes. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>True if this behavior was blocked for sleep. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_pending_behavior_1a654947fc525d462ab3f6e3396ffe9b62"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  BlockForEntityCreation()</p>
<p class="NDLRefMemberDescription">Block this behavior for <span class="NDLSystemFont"><a href="egf__Entity.htm">Entity</a></span> Creation. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>True if this behavior successfully blocked, false if this behavior is Immediate </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_pending_behavior_1a76ca60ce2810f640e8bd5f561a5f23e1"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  ResumeFromEntityCreation()</p>
<p class="NDLRefMemberDescription">Resume this behavior after <span class="NDLSystemFont"><a href="egf__Entity.htm">Entity</a></span> creation completes. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>True if this behavior was blocked for entity creation. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_pending_behavior_1a6c25ab08d6928085b7b3e1bc477b8108"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsBlockedForEntityCreation() const</p>
<p class="NDLRefMemberDescription">Check if this behavior is blocked waiting on an entity creation to complete. </p>

<a name="classegf_1_1_pending_behavior_1aab8b5178b49923176820f67b101588fc"></a>
<p class="NDLRefMemberFunction">void  FinishBehavior(<span class="NDLSystemFont">bool</span> success)</p>
<p class="NDLRefMemberDescription">When a pending behavior completes for any reason this is called. </p>
<p class="NDLRefMemberDetailedDescription">This method simply calls Entity::FinishBehavior passing itself. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">success</span></td>
    <td>True if this behavior finished by successfully completing. </td>
</tr>

        </tbody>
    </table>
</div>


<a name="public_static_methods"></a>
<p class="NDLRefHead1">Public Static Methods</p>


<a name="classegf_1_1_pending_behavior_1ac82a29a6f1ccb105ce1b1b23ddb15ce4"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont">PendingBehavior</span>&gt;  Create(<br/>const <span class="NDLSystemFont"><a href="egf__BehaviorDescriptor.htm">BehaviorDescriptor</a></span>* pBehavior, <br/><span class="NDLSystemFont"><a href="egf__Entity.htm">egf::Entity</a></span>* pEntity, <br/><span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::ParameterListPtr</a></span> spArgs, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a37c593debc73d82d7ddc571c725f0e2d">efd::TimeType</a></span> executeTime, <br/><span class="NDLSystemFont"><a href="egf__EventID.htm">EventID</a></span> eventID, <br/><span class="NDLSystemFont"><a href="egf__EntityID.htm">EntityID</a></span> returnID, <br/><span class="NDLSystemFont">bool</span> immediate = false)</p>
<p class="NDLRefMemberDescription">Method to create a new <span class="NDLSystemFont">PendingBehavior</span>. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pBehavior</span></td>
    <td>Pointer to the behavior to execute. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pEntity</span></td>
    <td>The entity on which the behavior is to run. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">spArgs</span></td>
    <td>Stream of arguments for the behavior. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">executeTime</span></td>
    <td>The time the behavior should execute. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">eventID</span></td>
    <td>The event ID of the behavior. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">returnID</span></td>
    <td>The entity ID to send the return value to. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">immediate</span></td>
    <td>Is this event immediate </td>
</tr>

        </tbody>
    </table>
</div>


 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
