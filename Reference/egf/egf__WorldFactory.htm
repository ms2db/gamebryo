<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>egf::WorldFactory</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">egf::WorldFactory</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../efd/efd__BaseAssetFactory.htm">efd::BaseAssetFactory</a></span></p>


<p class="NDLRefHeaderFile">&lt;WorldFactory.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classegf_1_1_world_factory.gif" alt="Inheritance graph for egf::WorldFactory"/>
  <p class="FigureCaption">Inheritance graph for egf::WorldFactory</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">An IAssetFactory that takes a <span class="NDLSystemFont"><a href="egf__WorldFactoryRequest.htm">WorldFactoryRequest</a></span> and attempts to load the xblock file from disk, locates all the flat models needed for this world, and instantiates each flat model. </p>
<p class="NDLNormal">The result of this request is returned using a <span class="NDLSystemFont"><a href="egf__WorldFactoryResponse.htm">WorldFactoryResponse</a></span>. All mix in models are also added to the response. If Lua scripting is available the <span class="NDLSystemFont">WorldFactory</span> will also include all required behavior scripts in the response message.</p>
<p class="NDLNormal">Callers to <span class="NDLSystemFont"><a href="egf__WorldFactory.htm#classegf_1_1_world_factory_1a5490497c4218a01d691bb660a1ac0e19">WorldFactory::LoadAsset</a></span> are responsible for looking up and setting the asset path to the underlying flat model file in the <span class="NDLSystemFont"><a href="egf__WorldFactoryRequest.htm">WorldFactoryRequest</a></span>.</p>
<p class="NDLNormal">The <span class="NDLSystemFont">WorldFactory</span> is not typically called directly. Instead, it responds to a request from the AssetFactoryManager to load a particular asset. The AssetFactoryManager is responsible for locating the fully qualified path using the provided URN and setting this value in the <span class="NDLSystemFont"><a href="egf__WorldFactoryRequest.htm">WorldFactoryRequest</a></span> object.</p>
<p class="NDLNormal">The caller is responsible for allocating and deallocating the <span class="NDLSystemFont"><a href="egf__WorldFactoryRequest.htm">WorldFactoryRequest</a></span>.</p>
<p class="NDLNormal">The <span class="NDLSystemFont">WorldFactory</span> allocates the response, it is the callers responsibility to deallocate it.</p>
<p class="NDLNormal">The <span class="NDLSystemFont">WorldFactory</span> does not add the resulting <span class="NDLSystemFont"><a href="egf__FlatModel.htm">FlatModel</a></span> instances to the <span class="NDLSystemFont"><a href="egf__FlatModelManager.htm">FlatModelManager</a></span>. The caller is responsible for doing so if required.</p>
<p class="NDLNormal">A World load goes through several stages: </p>
<ol>
<li>Load and parse the block file. </li>
<li>Locate dependent flat models. </li>
<li>Request loads for all dependent flat models. </li>
<li>Wait for flat model factories to complete. </li>
<li>Load completed and response is ready. </li></ol>
<p class="NDLNormal">Failure to load a flat model specified in the block file results in a failure, which is indicated in the <span class="NDLSystemFont"><a href="egf__WorldFactoryResponse.htm">WorldFactoryResponse</a></span> message sent back to the requester.</p>
<p class="NDLNormal">
<p class="NDLNormal">The <span class="NDLSystemFont">WorldFactory</span> is available in the background thread only. </p></p>

<a name="construction_and_destruction"></a>
<p class="NDLRefHead1">Construction and Destruction</p>

<p class="NDLRefMemberDescription">{ </p>

<a name="classegf_1_1_world_factory_1a4766043c00115b8ba389470e360990a1"></a>
<p class="NDLRefMemberFunction">WorldFactory(<br/><span class="NDLSystemFont"><a href="../efd/efd__AssetFactoryManager.htm">efd::AssetFactoryManager</a></span>* pFactoryManager, <br/><span class="NDLSystemFont"><a href="egf__FlatModelFactory.htm">egf::FlatModelFactory</a></span>* pFmLoader)</p>
<p class="NDLRefMemberDescription">Construct a new <span class="NDLSystemFont">WorldFactory</span>. </p>
<p class="NDLRefMemberDetailedDescription">The <span class="NDLSystemFont">WorldFactory</span> uses an egf::FlatModelLoader to load required flat models.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pFactoryManager</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/efd__AssetFactoryManager.htm">efd::AssetFactoryManager</a></span> responsible for this factory. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pFmLoader</span></td>
    <td><span class="NDLSystemFont"><a href="egf__FlatModelFactory.htm">FlatModelFactory</a></span> used to load flat model files. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_world_factory_1ad828d8ccb343672998a3ddb744921e1c"></a>
<p class="NDLRefMemberFunction">~WorldFactory()</p>
<p class="NDLRefMemberDescription">Cleanup any open resources. </p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classegf_1_1_world_factory_1a5490497c4218a01d691bb660a1ac0e19"></a>
<p class="NDLRefMemberFunction">IAssetFactory::LoadStatus  LoadAsset(<br/><span class="NDLSystemFont"><a href="../efd/efd__AssetFactoryManager.htm">efd::AssetFactoryManager</a></span>* pFactoryManager, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__AssetLoadRequest.htm">efd::AssetLoadRequest</a></span>* pRequest, <br/><span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::AssetLoadResponsePtr</a></span>& ppResponse)</p>
<p class="NDLRefMemberDescription">Attempt to load a block file. </p>
<p class="NDLRefMemberDetailedDescription">If the factory is processing a URN and a new request arrives for that same URN, the factory will not attempt to load them simultaneously. Instead, LoadAsset returns IAssetFactory::LOAD_BLOCKED to indicate the request was blocked. The caller can make the same request again later.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription"><span class="NDLSystemFont"><a href="../efd/efd__IAssetFactory.htm#classefd_1_1_i_asset_factory_1a0724c480863f94648ecba9d81c98b262">efd::IAssetFactory::LoadStatus</a></span> for further details.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pFactoryManager</span></td>
    <td>The AssetFactoryManager instance invoking this function. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pRequest</span></td>
    <td><span class="NDLSystemFont"><a href="egf__WorldFactoryRequest.htm">WorldFactoryRequest</a></span> instance. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">ppResponse</span></td>
    <td><span class="NDLSystemFont"><a href="egf__WorldFactoryResponse.htm">WorldFactoryResponse</a></span> allocated by this factory. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>IAssetFactory::LoadStatus status of this load request. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_world_factory_1a858acfc955ad8fcd16898ba2bea3e95f"></a>
<p class="NDLRefMemberFunction">virtual IAssetFactory::ThreadSafetyDescription  GetThreadSafety() const</p>
<p class="NDLRefMemberDescription">Thread status description. </p>
<p class="NDLRefMemberDetailedDescription">This loader is thread safe for foreground or background use. </p>

<a name="classegf_1_1_world_factory_1aa962b8a08c0241e1d9582ab8606ceb9a"></a>
<p class="NDLRefMemberFunction">virtual void  Shutdown()</p>
<p class="NDLRefMemberDescription">Shutdown function cleans up message subscriptions and smart pointers. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
