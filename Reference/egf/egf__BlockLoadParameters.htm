<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>egf::BlockLoadParameters</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">egf::BlockLoadParameters</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../efd/efd__MemObject.htm">efd::MemObject</a></span></p>


<p class="NDLRefHeaderFile">&lt;BlockLoadParameters.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classegf_1_1_block_load_parameters.gif" alt="Inheritance graph for egf::BlockLoadParameters"/>
  <p class="FigureCaption">Inheritance graph for egf::BlockLoadParameters</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">Configuration parameters for the loading of a block. </p>

<a name="public_types"></a>
<p class="NDLRefHead1">Public Types</p>
<a name="classegf_1_1_block_load_parameters_1ad6fbb4b072c77b0bf4907e9fcd257972"></a>
<p class=NDLRefHead2>egf::BlockLoadParameters::BlockLoadCallback</p>


<p class="NDLRefMemberDescription">Bitwise values which can be combined and passed to SetCallbackStyle. </p>


<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">blc_Loading</span></td>
    <td>Send the elr_Loading callback to indicate partial progress. 
<p class="NDLNormal">: This callback is not yet implemented. </p></td>
</tr>
<tr>
    <td><span class="NDLSystemFont">blc_Loaded</span></td>
    <td>Send the elr_Loaded callback when block parsing completes. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">blc_AlreadyLoaded</span></td>
    <td>Send the elr_AlreadyLoaded callback when requesting to load an already loaded block. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">blc_EntityCreationCompleted</span></td>
    <td>Send the elr_EntityCreationCompleted callback when block load is totally complete. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">blc_LoadCancelSuccess</span></td>
    <td>Send the elr_LoadCancelSuccess callback when a block load is canceled before completion. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">blc_Unloaded</span></td>
    <td>Send the elr_Unloaded callback when the block is hidden due to an unload request. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">blc_EntityDestructionCompleted</span></td>
    <td>Send the elr_EntityDestructionCompleted callback when all entities in an unloaded block complete their destruction. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">blc_Failed</span></td>
    <td>Send the elr_Failed callback indicating an unknown failure. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">blc_RequestFailure</span></td>
    <td>Send the elr_RequestFailure callback. This status is never sent. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">blc_EntitySetNotFound</span></td>
    <td>Send the elr_EntitySetNotFound callback if internal data structures for this block can not be found at a time when they are expected to be available. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">blc_AssetIDNotFound</span></td>
    <td>Send the elr_AssetIDNotFound callback if the block asset is not found. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">blc_ParseFailed</span></td>
    <td>Send the elr_ParseFailed callback if block parsing failure due to corrupt data. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">blc_AnyLoadSuccess</span></td>
    <td>All possible success values from a load attempt. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">blc_AnyUnloadSuccess</span></td>
    <td>All possible success values from an unload attempt. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">blc_AnyFailure</span></td>
    <td>All of the failure values. It is recommended that these always be included. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">blc_AnyFinalLoad</span></td>
    <td>If you want to receive exactly one callback this set of flags is your best bet. Any failure will be sent, otherwise you will get either an already loaded or final completion notification only. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">blc_Default</span></td>
    <td>Default flags. By default all status values are sent to the callback. </td>
</tr>

  </tbody>
</table>
</div>


<a name="public_attributes"></a>
<p class="NDLRefHead1">Public Attributes</p>


<a name="classegf_1_1_block_load_parameters_1a2bea6c706fb6ec3acb8f5d743f8c7dba"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a59a3838ab5cdfe87f98f5b8371e4e91d">efd::UInt8</a></span>  m_flags</p>
<p class="NDLRefMemberFunction"></p>

<a name="classegf_1_1_block_load_parameters_1ac4ec1cd744bbd185a5ae26cfc7b901e7"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">Flags</span>  m_bits</p>
<p class="NDLRefMemberFunction"></p>
<a name="public_static_attributes"></a>
<p class="NDLRefHead1">Public Static Attributes</p>


<a name="classegf_1_1_block_load_parameters_1a8f7d3721562c0b9b9f3eb3ece1c8a977"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  k_UseDefaultLimit</p>
<p class="NDLRefMemberDescription">Special value for use with SetLoadThresholdOverride or SetUnloadThresholdOverride to indicate the default threshold limit. </p>

<a name="classegf_1_1_block_load_parameters_1a6054511fa56563f046b364b08eee7136"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  k_Unlimited</p>
<p class="NDLRefMemberDescription">Special value for use with SetLoadThresholdOverride or SetUnloadThresholdOverride to indicate no threshold limit. </p>
<a name="public_static_methods"></a>
<p class="NDLRefHead1">Public Static Methods</p>


<a name="classegf_1_1_block_load_parameters_1a8f24787e05ceb5e13554ae8313566e32"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  GetDefaultAutoEnterWorld()</p>
<p class="NDLRefMemberDescription">Get the global default for whether entities should automatically enter the world when a block is loaded. </p>
<p class="NDLRefMemberDetailedDescription">By default the default is true to assist with migrations from previous versions of LightSpeed but it is recommended that the default be set to false. </p>

<a name="classegf_1_1_block_load_parameters_1a7cbe7f242d3747f3be062807a6bec231"></a>
<p class="NDLRefMemberFunction">static void  SetDefaultAutoEnterWorld(<span class="NDLSystemFont">bool</span> autoEnter)</p>
<p class="NDLRefMemberDescription">Set the global default for whether entities should automatically enter the world when a block is loaded. </p>
<p class="NDLRefMemberDetailedDescription">By default the default is true to assist with migrations from previous versions of LightSpeed but it is recommended that the default be set to false. </p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classegf_1_1_block_load_parameters_1aea1eed15538cfdd4f8f77264e307e338"></a>
<p class="NDLRefMemberFunction">BlockLoadParameters()</p>
<p class="NDLRefMemberDescription">Default constructor. </p>
<p class="NDLRefMemberDetailedDescription">Default settings are no callback, using <span class="NDLSystemFont"><a href="egf__BlockLoadParameters.htm#classegf_1_1_block_load_parameters_1a8f24787e05ceb5e13554ae8313566e32">GetDefaultAutoEnterWorld()</a></span> to set auto enter and default throttle limits. </p>

<a name="classegf_1_1_block_load_parameters_1af5735ed5a267708496332df3b050783e"></a>
<p class="NDLRefMemberFunction">BlockLoadParameters(const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span>& cat)</p>
<p class="NDLRefMemberDescription">Convenience constructor for the common case of loading a block with just a message-based callback and otherwise default parameters. </p>

<a name="classegf_1_1_block_load_parameters_1aee721a7a3f1e11a167cd387be7533546"></a>
<p class="NDLRefMemberFunction">virtual ~BlockLoadParameters()</p>
<p class="NDLRefMemberDescription">Virtual destructor. </p>

<a name="classegf_1_1_block_load_parameters_1abf151f598b9230c14259c35330d3cf5b"></a>
<p class="NDLRefMemberFunction">void  SetAutoEnterWorld(<span class="NDLSystemFont">bool</span> autoEnter)</p>
<p class="NDLRefMemberDescription">Control whether entities created from loading this block should automatically enter the world once created. </p>
<p class="NDLRefMemberDetailedDescription">If not set, the value of <span class="NDLSystemFont"><a href="egf__BlockLoadParameters.htm#classegf_1_1_block_load_parameters_1a8f24787e05ceb5e13554ae8313566e32">GetDefaultAutoEnterWorld()</a></span> at the time this class was created will be used. </p>

<a name="classegf_1_1_block_load_parameters_1acaa478d170e41ade8bc7396d19d9b301"></a>
<p class="NDLRefMemberFunction">void  SetMessageCallback(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span>& cat, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> context = 0)</p>
<p class="NDLRefMemberDescription">Request status callbacks via messages. </p>
<p class="NDLRefMemberDetailedDescription">Multiple <span class="NDLSystemFont"><a href="egf__EntityLoadResult.htm">egf::EntityLoadResult</a></span> messages will be sent to the given category to inform the callback of the loading and eventual unloading progress of the block.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">Setting a message callback overrides any behavior callback.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">cat</span></td>
    <td>The category to which the messages are delivered. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">context</span></td>
    <td>An optional context that will be passed back to the callback in the <span class="NDLSystemFont"><a href="egf__EntityLoadResult.htm">EntityLoadResult</a></span> message. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_block_load_parameters_1af16a3198a3f614a77025c2e2979f7b09"></a>
<p class="NDLRefMemberFunction">void  SetBehaviorCallback(<br/><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span> cat, <br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a1ebd2b58de9ca508c04d80dea3644fcb">egf::BehaviorID</a></span> behavior, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> context = 0)</p>
<p class="NDLRefMemberDescription">Request status callbacks via a behavior invocation. </p>
<p class="NDLRefMemberDetailedDescription">Multiple behavior invocations will be sent to inform the callback of the loading and eventual unloading progress of the block.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">Setting a behavior callback overrides any message callback.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">cat</span></td>
    <td>The <span class="NDLSystemFont"><a href="egf__EntityID.htm">EntityID</a></span> of a single entity or a Category to which one or more entities are subscribed for events. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">behavior</span></td>
    <td>The BehaviorID of the behavior to invoke on the target entity or entities. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">context</span></td>
    <td>An optional context that will be passed back to the behavior as a parameter named "Context". </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_block_load_parameters_1a709dc4db64b05324efb0532275eb0a65"></a>
<p class="NDLRefMemberFunction">void  SetActiveCallbacks(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> style)</p>
<p class="NDLRefMemberDescription">Control which types of callback notifications are sent to any provided callback. </p>
<p class="NDLRefMemberDetailedDescription">Pass in one or more BlockLoadCallback flags combined together. </p>

<a name="classegf_1_1_block_load_parameters_1a13d9ab131eaf22d76702bd054d754de7"></a>
<p class="NDLRefMemberFunction">void  SetBlockRotation(const <span class="NDLSystemFont"><a href="../efd/efd__Point3.htm">efd::Point3</a></span>& rotation)</p>
<p class="NDLRefMemberDescription">Apply a rotation about the origin that will adjust the "Position" and "Rotation" properties of all "Positionable" entities created when the block is loaded. </p>
<p class="NDLRefMemberDetailedDescription">Only those specific properties for entities that mix-in that specific model are effected. This change will be applied to each entity after initial allocation but before the OnCreate lifecycle. This is the same point in time at which block file property overrides are applied. If both a rotation and offset are applied, the block will first be rotated and then the offset will be applied to the result. The members of the rotation Point3 are degrees of rotation about each axis, which is the same form used by the "Rotation" property.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">The entire block is rotated about the origin. If you wish to apply rotations to a block it is recommended you implement the block such that the origin is at the center of the block.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">rotation</span></td>
    <td>The rotations about each axis in degrees. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_block_load_parameters_1a657240b353a55cabea6a74b53729be37"></a>
<p class="NDLRefMemberFunction">void  ClearBlockRotation()</p>
<p class="NDLRefMemberDescription">Remove a previously set block rotation. </p>
<p class="NDLRefMemberDetailedDescription">By default no rotation is set and there is no need to call this, but it is useful when reusing the same BlockLoadParameter instance. </p>

<a name="classegf_1_1_block_load_parameters_1a188677d3c116a86a85d6f7075460d47e"></a>
<p class="NDLRefMemberFunction">void  SetBlockOffset(const <span class="NDLSystemFont"><a href="../efd/efd__Point3.htm">efd::Point3</a></span>& offset)</p>
<p class="NDLRefMemberDescription">Apply a translation that will adjust the "Position" property of all "Positionable" entities created when the block is loaded. </p>
<p class="NDLRefMemberDetailedDescription">Only that specific property for entities that mix-in that specific model are effected. This change will be applied to each entity after initial allocation but before the OnCreate lifecycle. This is the same point in time at which block file property overrides are applied. If both a rotation and offset are applied, the block will first be rotated and then the offset will be applied to the result.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">offset</span></td>
    <td>The translation to apply to all entities in the block. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_block_load_parameters_1af2ab546372b9a3d28f095fad42830a98"></a>
<p class="NDLRefMemberFunction">void  ClearBlockOffset()</p>
<p class="NDLRefMemberDescription">Remove a previously set block offset. </p>
<p class="NDLRefMemberDetailedDescription">By default no offset is set and there is no need to call this, but it is useful when reusing the same BlockLoadParameter instance. </p>

<a name="classegf_1_1_block_load_parameters_1affc36c281b632d0c48bb044260551366"></a>
<p class="NDLRefMemberFunction">void  SetLoadThresholdOverride(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> override)</p>
<p class="NDLRefMemberDescription">Set an override for the load throttle when loading this block. </p>
<p class="NDLRefMemberDetailedDescription">This can allow an important block to be loaded more quickly regardless of frame rate hitches or an unimportant block to be loaded more slowly.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">Interaction between this setting and the default setting in the <span class="NDLSystemFont"><a href="egf__EntityLoaderService.htm">EntityLoaderService</a></span> is if fairly complicated:</p>
<ul>
<li>If this setting is higher then the default <span class="NDLSystemFont"><a href="egf__EntityLoaderService.htm">EntityLoaderService</a></span> value: When loading of this block begins the ELS will switch to using the higher value. Once this block finishes the ELS value will return to the default. If a previous block was loaded before your block the number of entities already loaded are counted against the new threshold. If additional block loads are queued they can proceed this tick only if the entities loaded this tick are below the resulting threshold.</li>
<li>If this setting is lower than the default <span class="NDLSystemFont"><a href="egf__EntityLoaderService.htm">EntityLoaderService</a></span> value: When this block begins to load the lower limit will be considered. If a previous block has already loaded this tick the reduced limit could already be exceeded in which case loading of this block will be delayed until the next tick. After considering this block the normal limit will be restored and the next queued block load will be considered. Even if this block was skipped due to the limit the next block may still be loaded if it is under the restored limit.</li></ul></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">override</span></td>
    <td>The maximum number of entities to create each tick when loading this block. The special value k_Unlimited can be used to ensure the entire block is loaded in a single tick. The special value k_UseDefaultLimit will ensure that the default value specified by the <span class="NDLSystemFont"><a href="egf__EntityLoaderService.htm">EntityLoaderService</a></span> is used. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_block_load_parameters_1a8cb3090760ceeaa3f56afdb919dc01af"></a>
<p class="NDLRefMemberFunction">void  SetUnloadThresholdOverride(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> override)</p>
<p class="NDLRefMemberDescription">Set an override for the unload throttle when unloading this block. </p>
<p class="NDLRefMemberDetailedDescription">This can allow a block to be unloaded more quickly. For example, if you know all entities in a block have no exit world or destruction behaviors you may wish to free up the memory consumed by the block more quickly than normal since it shouldn't generate much work.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">Interaction between this setting and the default setting in the <span class="NDLSystemFont"><a href="egf__EntityLoaderService.htm">EntityLoaderService</a></span> is similar to that described in SetLoadThresholdOverride.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">override</span></td>
    <td>The maximum number of entities to destroy each tick when unloading this block. The special value k_Unlimited can be used to ensure the entire block is destroyed in a single tick. The special value k_UseDefaultLimit will ensure that the default value specified by the <span class="NDLSystemFont"><a href="egf__EntityLoaderService.htm">EntityLoaderService</a></span> is used. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_block_load_parameters_1a7a605ab7ed4947a7011087b182869125"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetAutoEnterWorld() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="classegf_1_1_block_load_parameters_1a6b6706058efcf3b6b0b0bfd18dc1e1f4"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span>&  GetNotificationCategory() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="classegf_1_1_block_load_parameters_1a47c79c6c08fc9a0f7e59126bdcded00a"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetNotificationContext() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="classegf_1_1_block_load_parameters_1a105496129e441c22dcf62478419c977d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a1ebd2b58de9ca508c04d80dea3644fcb">egf::BehaviorID</a></span>  GetNotificationBehavior() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="classegf_1_1_block_load_parameters_1a63eec587ad802517ba34066b45f33b7f"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a1ebd2b58de9ca508c04d80dea3644fcb">egf::BehaviorID</a></span>  GetActiveCallbacks() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="classegf_1_1_block_load_parameters_1a566fc0b3a784e90f1597e2387855a19a"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  UseRotation() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="classegf_1_1_block_load_parameters_1a99e42f41fbbaeec68dbcc0c2c7a3f83b"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../efd/efd__Point3.htm">efd::Point3</a></span>&  GetRotation() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="classegf_1_1_block_load_parameters_1a7bdc132452c6a15d6590450567ce8b10"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  UseOffset() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="classegf_1_1_block_load_parameters_1a40ee93598902c0a87c5c62a6dc835787"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../efd/efd__Point3.htm">efd::Point3</a></span>&  GetOffset() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="classegf_1_1_block_load_parameters_1a8f389c7419a4b54b800f210e3202f455"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetLoadThresholdOverride() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="classegf_1_1_block_load_parameters_1a6d1be2fdee64dcc5666daf2ad66a8bd4"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetUnloadThresholdOverride() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="classegf_1_1_block_load_parameters_1a1e690f21feb644e7b29ea50aeb4e28f5"></a>
<p class="NDLRefMemberFunction">virtual void  Serialize(<span class="NDLSystemFont"><a href="../efd/efd__Archive.htm">efd::Archive</a></span>& io_ar)</p>
<p class="NDLRefMemberDescription">Serialization method for this class. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
