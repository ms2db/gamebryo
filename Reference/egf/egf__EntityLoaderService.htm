<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>egf::EntityLoaderService</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">egf::EntityLoaderService</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../efd/efd__IMessageHelperSystemService.htm">efd::IMessageHelperSystemService</a></span></p>


<p class="NDLRefHeaderFile">&lt;EntityLoaderService.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classegf_1_1_entity_loader_service.gif" alt="Inheritance graph for egf::EntityLoaderService"/>
  <p class="FigureCaption">Inheritance graph for egf::EntityLoaderService</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">The <span class="NDLSystemFont">EntityLoaderService</span> is an <span class="NDLSystemFont"><a href="../efd/efd__ISystemService.htm">efd::ISystemService</a></span> that is responsible for listening to and responding to <span class="NDLSystemFont"><a href="egf__Entity.htm">Entity</a></span> Set (block) Load and Unload requests. </p>
<p class="NDLNormal">The process of loading and unloading a set of entities is performed in an ISystemService to allow for asynchronous loading of Entities. Entities are loaded / unloaded during the <span class="NDLSystemFont">EntityLoaderService</span> OnTick invocation by the Service world Manager.</p>
<p class="NDLNormal">The <span class="NDLSystemFont">EntityLoaderService</span> uses the AssetLocatorService to find assets related to the <span class="NDLSystemFont"><a href="egf__Entity.htm">Entity</a></span>. If the RapidIterationService is enabled the Asset load requests can be forwarded to a remote AssetServer.</p>
<p class="NDLNormal">Only one xblock file can be loaded per request. If you need to load multiple block files, you'll need to request them one at a time.</p>
<p class="NDLNormal">Unload requests must use the same AssetID that was used to load the block. </p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classegf_1_1_entity_loader_service_1abbdc13c22f833baa64db408a8aa64535"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ad81d366c75ea1e1119513a730f79910d">efd::AsyncResult</a></span>  RequestEntitySetLoad(<br/>const <span class="NDLSystemFont"><a href="egf__BlockIdentification.htm">BlockIdentification</a></span>& i_requestID, <br/>const <span class="NDLSystemFont"><a href="egf__BlockLoadParameters.htm">BlockLoadParameters</a></span>* i_pParameters = 0)</p>
<p class="NDLRefMemberDescription">A simple method for loading a block file in the current virtual process. </p>
<p class="NDLRefMemberDetailedDescription">Various parameters can optionally be passed via the <span class="NDLSystemFont"><a href="egf__BlockLoadParameters.htm">BlockLoadParameters</a></span> object in order to control what notifications are sent, how often they are sent and other factors controlling how the block is loaded. Any callback settings provided will remain in effect for the duration of the block and will receive additional notifications in the event the block is later unloaded.</p>
<p class="NDLRefMemberDetailedDescription">
<pre>            // Example usage:
            egf::BlockLoadParameters blp;
            blp.SetMessageCallback(m_myPrivateCategory);
            blp.SetAutoEnterWorld(false);
            pEntityLoaderService-&gt;RequestEntitySetLoad(&quot;urn:emergent-world:MyBlock&quot;, &blp);
</pre>
</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_requestID</span></td>
    <td>Description of the block to load. This is the AssetID for the block resource plus an optional instance number if you wish to load multiple copies of the same block. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_pParameters</span></td>
    <td>An optional pointer to a structure containing configuration settings that specify how to load the block. If provided, settings from this structure are copied internally so the same <span class="NDLSystemFont"><a href="egf__BlockLoadParameters.htm">BlockLoadParameters</a></span> can be reused by the caller if desired. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>the state of the request. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_loader_service_1a5179afcfa63def778fd68ff224349a42"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ad81d366c75ea1e1119513a730f79910d">efd::AsyncResult</a></span>  RequestEntitySetLoad(const <span class="NDLSystemFont"><a href="egf__EntityLoadRequest.htm">EntityLoadRequest</a></span>* i_pMsg)</p>
<p class="NDLRefMemberDescription">Request the loading of a block file by passing an <span class="NDLSystemFont"><a href="egf__EntityLoadRequest.htm">EntityLoadRequest</a></span>. </p>
<p class="NDLRefMemberDetailedDescription">This version of block file loading is equivalent to sending the <span class="NDLSystemFont"><a href="egf__EntityLoadRequest.htm">EntityLoadRequest</a></span> message to the private channel of this service. You can directly call this method it you have a direct service pointer and you know you want to load the block file in the current virtual process.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_pMsg</span></td>
    <td>Pointer to an <span class="NDLSystemFont"><a href="egf__EntityLoadRequest.htm">EntityLoadRequest</a></span> message that contains block file data. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>the state of the request. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_loader_service_1abc88f3c35334212d9907695561fdc948"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ad81d366c75ea1e1119513a730f79910d">efd::AsyncResult</a></span>  RequestEntitySetEnterWorld(const <span class="NDLSystemFont"><a href="egf__BlockIdentification.htm">BlockIdentification</a></span>& i_requestID)</p>
<p class="NDLRefMemberDescription">Request that the entities from the already loaded block file enter the world. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_requestID</span></td>
    <td>The ID of a previously loaded block that should enter the world. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_loader_service_1a7ade616d41ed9ac6ae3186d8f52c324a"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ad81d366c75ea1e1119513a730f79910d">efd::AsyncResult</a></span>  RequestEntitySetExitWorld(const <span class="NDLSystemFont"><a href="egf__BlockIdentification.htm">BlockIdentification</a></span>& i_requestID)</p>
<p class="NDLRefMemberDescription">Request that the entities from the already loaded block file exit the world. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_requestID</span></td>
    <td>The ID of the previously loaded block that should exit the world. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_loader_service_1a026614d0db717cabfd09da00da31e6a2"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ad81d366c75ea1e1119513a730f79910d">efd::AsyncResult</a></span>  RequestEntitySetUnload(const <span class="NDLSystemFont"><a href="egf__EntityLoadRequest.htm">EntityLoadRequest</a></span>* i_pMsg)</p>
<p class="NDLRefMemberDescription">Request the unloading of a block file by passing an <span class="NDLSystemFont"><a href="egf__EntityLoadRequest.htm">EntityLoadRequest</a></span>. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">The original callbacks registered when the block was loaded will be notified of the block unload. You may pass an additional callback in the unload request but if the same callback was used during loading you will receive duplicate notifications. This applies to both behavior and message style callbacks.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_pMsg</span></td>
    <td>Pointer to an <span class="NDLSystemFont"><a href="egf__EntityLoadRequest.htm">EntityLoadRequest</a></span> message that contains block file data. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>the state of the request. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_loader_service_1ad4036454598b4ab36e5016e9817ceaf7"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ad81d366c75ea1e1119513a730f79910d">efd::AsyncResult</a></span>  RequestEntitySetUnload(<br/>const <span class="NDLSystemFont"><a href="egf__BlockIdentification.htm">BlockIdentification</a></span>& i_requestID, <br/><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span> i_entity = efd::kCAT_INVALID, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> i_context = 0, <br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a1ebd2b58de9ca508c04d80dea3644fcb">egf::BehaviorID</a></span> i_callback = 0)</p>
<p class="NDLRefMemberDescription">Request the unloading of a block file with a message or behavior callback. </p>
<p class="NDLRefMemberDetailedDescription">By default a message based callback is used and one or more <span class="NDLSystemFont"><a href="egf__EntityLoadResult.htm">EntityLoadResult</a></span> messages will be sent to the provided channel. If you specify the optional i_callback BehaviorID then one or more entity behavior events will instead be sent to the specified category.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">The original callbacks registered when the block was loaded will be notified of the block unload. You may pass an additional callback in the unload request but if the same callback was used during loading you will receive duplicate notifications. This applies to both behavior and message style callbacks.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_requestID</span></td>
    <td>ID of the block file to unload. This must match the ID used during the load request. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_entity</span></td>
    <td>The channel or <span class="NDLSystemFont"><a href="egf__EntityID.htm">EntityID</a></span> destination for the callback </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_context</span></td>
    <td>A user specified context that will be returned with the callback </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_callback</span></td>
    <td>The behavior to invoke as a callback, or 0 to use a message callback </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>the state of the request. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_loader_service_1aeb0b289d1a86985d5055fe72c34e2caa"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  CancelLoadRequest(<br/>const <span class="NDLSystemFont"><a href="egf__BlockIdentification.htm">BlockIdentification</a></span>& i_requestID, <br/><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span> i_cb = efd::kCAT_INVALID, <br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1aaf9f8451f799d2c1c85c2a02f1a844bf">Context</a></span> i_ctx = 0, <br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a1ebd2b58de9ca508c04d80dea3644fcb">egf::BehaviorID</a></span> i_callback = 0)</p>
<p class="NDLRefMemberDescription">Cancel the request for the loading of a block file. </p>
<p class="NDLRefMemberDetailedDescription">By default a message based callback is used and a <span class="NDLSystemFont"><a href="egf__EntityLoadResult.htm">EntityLoadResult</a></span> message will be sent to the provided channel. If you specify the optional i_callback BehaviorID then a behavior event will instead be sent to the specified category.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">The original callbacks registered when the block load was requested will be notified of the block load cancellation. You may pass an additional callback to this method but if the same callback was used during loading you will receive duplicate notifications. This applies to both behavior and message style callbacks.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_requestID</span></td>
    <td>The ID of the asset to cancel the request for. This must match the ID used during the load request. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_cb</span></td>
    <td>The Category to send the response message to. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_ctx</span></td>
    <td>The context to send with all response messages. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_callback</span></td>
    <td>The behavior to invoke as a callback, or 0 to use a message callback </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>bool indicating the status of the request. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_loader_service_1a8d83748a3753dde79120881ddd305fb1"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  ReloadWorld(const <span class="NDLSystemFont"><a href="../efd/efd__AssetID.htm">efd::AssetID</a></span>& assetUUID)</p>
<p class="NDLRefMemberDescription">Reload the world having the given AssetUUID. </p>
<p class="NDLRefMemberDetailedDescription">The RapidIterationService will invoke this callback after fetching the updated world file from the AssetController. All instances matching the given asset ID will be reloaded.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">assetUUID</span></td>
    <td>The unique asset Id for the changed asset. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The number of blocks reloaded. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_loader_service_1abcae61a8f36e2692c244bc9cb453767e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsLoaded(const <span class="NDLSystemFont"><a href="egf__BlockIdentification.htm">BlockIdentification</a></span>& requestID)</p>
<p class="NDLRefMemberDescription">Get the load status of a world by <span class="NDLSystemFont"><a href="egf__BlockIdentification.htm">BlockIdentification</a></span>. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">requestID</span></td>
    <td>The block identification of the world to check for. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the world is loaded. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_loader_service_1a6ebf543c90162338cb6cb42259843811"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span>  GetPrivateChannel()</p>
<p class="NDLRefMemberDescription">Get my personal private channel. </p>
<p class="NDLRefMemberDetailedDescription">This is the same as calling GetEntityLoaderServiceCategory using the net ID of the local net service. The returned value is valid only after OnInit has completed.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>the private category that the <span class="NDLSystemFont">EntityLoaderService</span> listens to. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_loader_service_1a624aff209c9dda38a2fbb8727356dbd7"></a>
<p class="NDLRefMemberFunction">void  OnWorldResetRequest()</p>
<p class="NDLRefMemberDescription">Called by the RapidIterationService when a reset world is requested from a connected Toolbench. </p>
<p class="NDLRefMemberDetailedDescription">In response to this request the <span class="NDLSystemFont"><a href="egf__Scheduler.htm">Scheduler</a></span> is paused, all entities are deleted, then we re-load all previously loaded block files before resuming the scheduler. </p>
<a name="configuration_settings"></a>
<p class="NDLRefHead1">Configuration settings</p>

<p class="NDLRefMemberDescription">Settings to control the general operation of the <span class="NDLSystemFont">EntityLoaderService</span>.</p>

<a name="classegf_1_1_entity_loader_service_1ab8f4d7af7702529f0de9df22b1a54d5a"></a>
<p class="NDLRefMemberFunction">void  SetMaxEntityLoadThrottle(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> entities)</p>
<p class="NDLRefMemberDescription">Sets the maximum number of entities to create during a single tick. </p>
<p class="NDLRefMemberDetailedDescription">If a block contains more entities that this limit than the block will be loaded incrementally over several ticks. If multiple blocks are being loaded concurrently this limit will apply to the total entities from all loading blocks; blocks will be loaded in the order requested until the limit is reached and remaining loading will continue on the next tick.</p>
<p class="NDLRefMemberDetailedDescription">If your game can preload blocks well in advance you may wish to use a low throttle to avoid possible frame rate hitches caused by loading and creating too many entities at once. Conversely, if you want to load a large block as quickly as possible regardless of frame rate hitches than you should use a large throttle.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">This method can be called at any time including during OnPreInit or OnInit.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">entities</span></td>
    <td>The maximum number of entities to parse each pass. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_loader_service_1a159bd741ff66e642d4b70b9ea4547cd9"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetMaxEntityLoadThrottle() const</p>
<p class="NDLRefMemberDescription">Gets the maximum number of entities to load at a time. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">This method can be called at any time including during OnPreInit or OnInit.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> The maximum number of entities to parse each pass. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_loader_service_1aaf3c4bdf8095040b60c75de8da889ee6"></a>
<p class="NDLRefMemberFunction">void  SetMaxEntityUnloadThrottle(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> entities)</p>
<p class="NDLRefMemberDescription">Sets the maximum number of entities to unload at a time. </p>
<p class="NDLRefMemberDetailedDescription">When a block is being unloaded all of the entities created through that block are destroyed which can generate various lifecycle behaviors and notification messages. This throttle will reduce the number of entities that are destroyed on each tick to avoid potential frame rate hitches that could otherwise result.</p>
<p class="NDLRefMemberDetailedDescription">When a block is unloaded all entities in that block are immediately told to exit the world. This gives the appearance of the block immediately disappearing regardless of the unload throttle value. A lower unload throttle can prevent frame rate hitches but at the cost of holding on to memory associated with the block that is unloading for longer.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">This method can be called at any time including during OnPreInit or OnInit.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">entities</span></td>
    <td>The maximum number of entities to parse each pass. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_loader_service_1a039f5382bda81f9dd07ce5a41e4edb99"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetMaxEntityUnloadThrottle() const</p>
<p class="NDLRefMemberDescription">Gets the maximum number of entities to unload at a time. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">This method can be called at any time including during OnPreInit or OnInit.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> The maximum number of entities to parse each pass. </td>
</tr>

        </tbody>
    </table>
</div>


<a name="construction_and_destruction"></a>
<p class="NDLRefHead1">Construction and Destruction</p>


<a name="classegf_1_1_entity_loader_service_1a598783dac99ea7633caed456e71073a1"></a>
<p class="NDLRefMemberFunction">~EntityLoaderService()</p>
<p class="NDLRefMemberFunction"></p>

<a name="classegf_1_1_entity_loader_service_1a53c7c69f331f16d6d484163411869244"></a>
<p class="NDLRefMemberFunction">EntityLoaderService()</p>
<p class="NDLRefMemberFunction"></p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
