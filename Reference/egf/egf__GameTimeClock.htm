<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>egf::GameTimeClock</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">egf::GameTimeClock</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../efd/efd__IClock.htm">efd::IClock</a></span></p>


<p class="NDLRefHeaderFile">&lt;GameTimeClock.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classegf_1_1_game_time_clock.gif" alt="Inheritance graph for egf::GameTimeClock"/>
  <p class="FigureCaption">Inheritance graph for egf::GameTimeClock</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">This class is the clock used by the <span class="NDLSystemFont"><a href="egf__Scheduler.htm">Scheduler</a></span> to maintain GameTime. </p>
<p class="NDLNormal">All behavior related times are GameTime times which use this clock. </p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classegf_1_1_game_time_clock_1afdbaad268725e781f6a89ce427f4089a"></a>
<p class="NDLRefMemberFunction">GameTimeClock(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a37c593debc73d82d7ddc571c725f0e2d">efd::TimeType</a></span> currentRealTime = 0.0)</p>
<p class="NDLRefMemberDescription">Constructor. </p>

<a name="classegf_1_1_game_time_clock_1a0916fb2a692d5d152028a11b35d92f1b"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a37c593debc73d82d7ddc571c725f0e2d">efd::TimeType</a></span>  GetCurrentTime() const</p>
<p class="NDLRefMemberDescription">Get the time for the current update of the clock. </p>

<a name="classegf_1_1_game_time_clock_1a0eeab2ab4b979d0b5984c022c02ed8fd"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a37c593debc73d82d7ddc571c725f0e2d">efd::TimeType</a></span>  GetLastDelta() const</p>
<p class="NDLRefMemberDescription">Returns the delta amount by which the clock was updated on the last Update call. </p>
<p class="NDLRefMemberDetailedDescription">This will return 0.0 if the clock was paused during the last update. The value is only changed by calls to Update, calling SetCurrentTime will not change the last delta. </p>

<a name="classegf_1_1_game_time_clock_1a52f16ecca042c14795332f103d437a57"></a>
<p class="NDLRefMemberFunction">virtual void  Update(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a37c593debc73d82d7ddc571c725f0e2d">efd::TimeType</a></span> serviceFrameTime)</p>
<p class="NDLRefMemberDescription">Advance the clock. </p>
<p class="NDLRefMemberDetailedDescription">Based on the current mode, this either advances by a fixed delta (fixed delta mode) or advances by the amount of real time that has passed (real-time mode), possibly modified by a scale factor. By default, real-time mode is used. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">serviceFrameTime</span></td>
    <td>The current real-time as reported by the ServiceManager </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_game_time_clock_1abeb7bee34fafba67e54f2c216c3f5199"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  SetCurrentTime(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a37c593debc73d82d7ddc571c725f0e2d">efd::TimeType</a></span> currentTime)</p>
<p class="NDLRefMemberDescription">Attempts to set the current time. </p>
<p class="NDLRefMemberDetailedDescription">Will be ignored if the provided value would cause time to move backwards. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">currentTime</span></td>
    <td>The current time </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_game_time_clock_1a300bc69c1927503f1dfc781daeff9968"></a>
<p class="NDLRefMemberFunction">void  Pause()</p>
<p class="NDLRefMemberDescription">Pause the advancement of GameTime. </p>
<p class="NDLRefMemberDetailedDescription">Every call to pause must be matched with a call to Resume. You can pause multiple times in a row so long as you eventually resume an equal number of times. </p>

<a name="classegf_1_1_game_time_clock_1a6a1c0f10e9fa1a936b606f97d60a6386"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsPaused() const</p>
<p class="NDLRefMemberDescription">Test if the clock is currently paused. </p>

<a name="classegf_1_1_game_time_clock_1a09543553a7f0bb6fe17421ec4638a561"></a>
<p class="NDLRefMemberFunction">void  Resume()</p>
<p class="NDLRefMemberDescription">Start moving the clock forward again. </p>

<a name="classegf_1_1_game_time_clock_1a5cdf12a727cce771089a5b8013cd14e5"></a>
<p class="NDLRefMemberFunction">void  UseFixedDeltaMode(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a37c593debc73d82d7ddc571c725f0e2d">efd::TimeType</a></span> deltaPerTick)</p>
<p class="NDLRefMemberDescription">Enter "fixed delta" mode instead of "real-time" mode, on each update of the clock GameTime will advance by the provided delta regardless of how much real-time has passed. </p>
<p class="NDLRefMemberDetailedDescription">This mode can help with debugging so that you can slowly step through the code. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">deltaPerTick</span></td>
    <td>The number of seconds to advance the clock on each Update </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_game_time_clock_1aded82b0b1c6afa1e450e2a6817cb645d"></a>
<p class="NDLRefMemberFunction">void  UseRealTimeMode()</p>
<p class="NDLRefMemberDescription">Enter "real-time" mode instead of "fixed delta" mode. </p>
<p class="NDLRefMemberDetailedDescription">Real-time mode is the default clock mode, in this mode each update will advance the clock based on the passage of time measured by the ServiceManager's high precision clock. </p>

<a name="classegf_1_1_game_time_clock_1a7fcdc7870982c6defacae9957e606aad"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  SetTimeScale(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aff0a9e9ca8001b330091eb01eeb190c2">efd::Float64</a></span> scale)</p>
<p class="NDLRefMemberDescription">Scale the passage of time relative to real time. </p>
<p class="NDLRefMemberDetailedDescription">"scale" must be greater than zero as time can never move backwards. The scale only applies when "real-time" mode is active. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">scale</span></td>
    <td>A scale factor which must be greater than zero. Using a scale of one will advance the clock at real time. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_game_time_clock_1a454d1a765d402330a7b4ead17837a06f"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  SetMaxDelta(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aff0a9e9ca8001b330091eb01eeb190c2">efd::Float64</a></span> delta)</p>
<p class="NDLRefMemberDescription">Prevent time from advancing by more than the provided delta. </p>
<p class="NDLRefMemberDetailedDescription">This prevents large time jumps during slow frames, for example when you are debugging the program. The default value for the maxDelta is 0.25 seconds. The maximum delta only applies when "real-time" mode is active. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">delta</span></td>
    <td>The maximum time in seconds </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_game_time_clock_1ad11af8e99abe2816b5d23ae92f17c97b"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClockClassID() const</p>
<p class="NDLRefMemberDescription">Get the class id for a game clock, which is kCLASSID_GameTimeClock. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
