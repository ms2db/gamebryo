<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::BreakpointRequest</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::BreakpointRequest</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../efd/efd__StreamMessage.htm">efd::StreamMessage</a></span></p>


<p class="NDLRefHeaderFile">&lt;BreakpointMessages.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classefd_1_1_breakpoint_request.gif" alt="Inheritance graph for efd::BreakpointRequest"/>
  <p class="FigureCaption">Inheritance graph for efd::BreakpointRequest</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">A breakpoint request. </p>
<p class="NDLNormal">Request to the simulator to add/remove breakpoints, etc. This base class is the basis for all breakpoint requests. </p>

<a name="public_attributes"></a>
<p class="NDLRefHead1">Public Attributes</p>


<a name="classefd_1_1_breakpoint_request_1a5c24e3d7af82364228c4e799fe69b903"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>  m_behaviorName</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_breakpoint_request_1aa793e3f5273e4837d54435c2146d2c0e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span>  m_callback</p>
<p class="NDLRefMemberFunction"></p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classefd_1_1_breakpoint_request_1ae0483ad67d7619dd9c3d05e137d092f6"></a>
<p class="NDLRefMemberFunction">BreakpointRequest()</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_breakpoint_request_1a0d137fe793885c68aa72a0c0c595e7e1"></a>
<p class="NDLRefMemberFunction">~BreakpointRequest()</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_breakpoint_request_1a27200df9af06b7feb3ff7fffef947631"></a>
<p class="NDLRefMemberFunction">BreakpointRequest(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& behaviorName, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span>& callback = efd::kCAT_INVALID)</p>
<p class="NDLRefMemberDescription">Create a new breakpoint request. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">behaviorName</span></td>
    <td></td>
</tr>
<tr>
    <td><span class="NDLSystemFont">callback</span></td>
    <td>the category used for responses </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_breakpoint_request_1a6385ca11e1ae217745ff92492fe45b21"></a>
<p class="NDLRefMemberFunction">virtual void  ToStream(<span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">efd::DataStream</a></span>& strm) const</p>
<p class="NDLRefMemberDescription">Write this class into a stream of atomic types. </p>
<p class="NDLRefMemberDetailedDescription">If the class does not contains any data, such as a pure event class, then is it recommended and safe to add nothing to the stream.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">strm</span></td>
    <td>The stream to write the class into. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_breakpoint_request_1a6ef5bd17fb02a7fb67aa706e45ef8f9f"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  FromStream(const <span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">efd::DataStream</a></span>& strm)</p>
<p class="NDLRefMemberDescription">Read this class from the stream of atomic types and recreate the class. </p>
<p class="NDLRefMemberDetailedDescription">If the class does not contains any data, such as a pure event class, then is it recommended and safe to have an empty stream. In that case this method should simple return true.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">strm</span></td>
    <td>The stream to read the class from.</td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>true if successful, false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>


 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
