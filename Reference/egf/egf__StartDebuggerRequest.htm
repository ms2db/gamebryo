<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>egf::StartDebuggerRequest</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">egf::StartDebuggerRequest</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../efd/efd__StreamMessage.htm">efd::StreamMessage</a></span></p>


<p class="NDLRefHeaderFile">&lt;BreakpointMessages.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classegf_1_1_start_debugger_request.gif" alt="Inheritance graph for egf::StartDebuggerRequest"/>
  <p class="FigureCaption">Inheritance graph for egf::StartDebuggerRequest</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">A request to start a debugger session. </p>
<p class="NDLNormal">Request to the simulator to connect to the python debugger on a certain host/port and start a session. This causes an immediate breakpoint in scheduler.py. Once a debugger is started, the caller is free to add/remove python behavior breakpoints. </p>

<a name="public_attributes"></a>
<p class="NDLRefHead1">Public Attributes</p>


<a name="classegf_1_1_start_debugger_request_1a6c2f547af04239ff08b48a923fc6d0b6"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>  m_host</p>
<p class="NDLRefMemberFunction"></p>

<a name="classegf_1_1_start_debugger_request_1ade216b7311c742fe801b650a5bed8016"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  m_port</p>
<p class="NDLRefMemberFunction"></p>

<a name="classegf_1_1_start_debugger_request_1ad95cc40c1a7f250bfd86fd32342f851d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span>  m_callback</p>
<p class="NDLRefMemberFunction"></p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classegf_1_1_start_debugger_request_1a50a9225569a647d5248c0c7ab960a850"></a>
<p class="NDLRefMemberFunction">StartDebuggerRequest()</p>
<p class="NDLRefMemberFunction"></p>

<a name="classegf_1_1_start_debugger_request_1a9096403a17e231749f5216033e2da980"></a>
<p class="NDLRefMemberFunction">virtual ~StartDebuggerRequest()</p>
<p class="NDLRefMemberFunction"></p>

<a name="classegf_1_1_start_debugger_request_1af44fa400a732d1b0821674c7d6162e58"></a>
<p class="NDLRefMemberFunction">StartDebuggerRequest(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& host, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> port, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span>& callback = efd::kCAT_INVALID)</p>
<p class="NDLRefMemberDescription">A request to connect to and start a python debugger session. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">host</span></td>
    <td>name of the host running the debugger </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">port</span></td>
    <td>port number the debugger is listening on </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">callback</span></td>
    <td>Callback category. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_start_debugger_request_1a66b764bf821ebf8c9708388d21742cc5"></a>
<p class="NDLRefMemberFunction">virtual void  Serialize(<span class="NDLSystemFont"><a href="../efd/efd__Archive.htm">efd::Archive</a></span>& io_ar)</p>
<p class="NDLRefMemberDescription">Serialize a polymorphic type to or from an Archive. </p>
<p class="NDLRefMemberDetailedDescription">This method must be overridden, but if your streamable object has no data the override can be an empty function. A typical implementation of this method will make one call to <span class="NDLSystemFont"><a href="../Namespaces/efd__Serializer.htm#namespaceefd_1_1_serializer_1a63e0b99047011bde53be44786ab9ee7b">efd::Serializer::SerializeObject</a></span> for each member of the class. If you are derived from another streamable class you should be sure to call to parent implementation of this method as well; it is recommended that the parent class be serialized first before adding the data for the derived class. If your class contains complex data such as STL-style contianers or pointers to allocated data then you can simplify the implementation of Serialize by using the templated helper functions in &lt;<span class="NDLSystemFont">efd/SerializeRoutines.h</span>&gt;; these can serialize even the most complex data structures with a single method call and will reduce the chance of making common mistakes (which could introduce security vulnerabilities if marshalling data from untrusted sources).</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">io_ar</span></td>
    <td>The Archive to serialize to or from. </td>
</tr>

        </tbody>
    </table>
</div>


 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
