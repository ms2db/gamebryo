<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>egf::Entity</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">egf::Entity</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../efd/efd__IBase.htm">efd::IBase</a></span></p>


<p class="NDLRefHeaderFile">&lt;Entity.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classegf_1_1_entity.gif" alt="Inheritance graph for egf::Entity"/>
  <p class="FigureCaption">Inheritance graph for egf::Entity</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">The implementation class for an entity. </p>
<p class="NDLNormal">An <span class="NDLSystemFont">Entity</span> is the smallest individual object in the virtual world. They are sometimes referred to as game objects.</p>
<p class="NDLNormal">An Emergent <span class="NDLSystemFont">Entity</span> is composed of Properties, and Behaviors. A Property is a member variable of an <span class="NDLSystemFont">Entity</span> and has a data type, an initial/default value, and a current value. Properties also have Traits associated with them, which are used to control automated management of the Properties, such as whether they are Persisted, or can be accessed on a Client.</p>
<p class="NDLNormal">An Emergent <span class="NDLSystemFont">Entity</span> system Behavior is a member function on an <span class="NDLSystemFont">Entity</span>. Behaviors also have Traits that restrict how they can be called. A Behavior can be implemented in one of many different scripting or compiled languages, and an <span class="NDLSystemFont">Entity</span> can be composed of any combination of these. </p>

<a name="friend_members"></a>
<p class="NDLRefHead1">Friend Members</p>


<a name="classegf_1_1_entity_1a74dcb6fd47dd8250bf9b2fcd0eb7bdf9"></a>
<p class="NDLRefMemberFunction">friend class  egf::Scheduler()</p>
<p class="NDLRefMemberFunction"></p>

<a name="classegf_1_1_entity_1a696d803689699b461e235d9498514760"></a>
<p class="NDLRefMemberFunction">friend class  egf::EntityManager()</p>
<p class="NDLRefMemberFunction"></p>

<a name="classegf_1_1_entity_1ae9fe32f713a8c57f56352c8196671911"></a>
<p class="NDLRefMemberFunction">friend class  egf::FlatModelManager()</p>
<p class="NDLRefMemberFunction"></p>
<a name="public_types"></a>
<p class="NDLRefHead1">Public Types</p>
<a name="classegf_1_1_entity_1a9f10b881ead623b7b8f0663e5bc39683"></a>
<p class=NDLRefHead2>egf::Entity::EntityProcFlags</p>


<p class="NDLRefMemberDescription"><span class="NDLSystemFont">Entity</span> process flags. </p>


<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">kInit</span></td>
    <td>In process of init (so read-only properties may be set). </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kOwned</span></td>
    <td>Owned by a scheduler. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kActive</span></td>
    <td>Has behaviors queued or running. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kCreated</span></td>
    <td>Has successfully finished creation. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kInWorld</span></td>
    <td>Is currently in the world. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kRequestDestroy</span></td>
    <td>Has this entity been requested to be destroyed. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kDestroyComplete</span></td>
    <td>Has completed an lifecycle_OnDestroy behavior. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kRequestEnterWorld</span></td>
    <td>Has this entity been requested to enter the world. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kEnterWorldInProgress</span></td>
    <td>Has the OnEnterWorld lifecycle started yet. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kRequestExitWorld</span></td>
    <td>Has this entity been requested to exit the world. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kExitWorldInProgress</span></td>
    <td>Has the OnExitWorld lifecycle started yet. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kAssetsLoaded</span></td>
    <td>Have the assets for this entity finished loading. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kEntitySetFishished</span></td>
    <td>Has the containing set of entities finished loading. </td>
</tr>

  </tbody>
</table>
</div>

<a name="classegf_1_1_entity_1a6114b150bddd1462f4dc1d2fcb26afdb"></a>
<p class=NDLRefHead2>egf::Entity::LifeCycles</p>


<p class="NDLRefMemberDescription">Lifecycle values for use in _OnLifecycleEvent and related methods. </p>


<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">lifecycle_Invalid</span></td>
    <td>Invalid lifecycle event. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">lifecycle_OnCreate</span></td>
    <td>Called after <span class="NDLSystemFont">Entity</span> has been created. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">lifecycle_OnAssetsLoaded</span></td>
    <td>Called after all assets the <span class="NDLSystemFont">Entity</span> requires are loaded. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">lifecycle_OnEntitySetFinished</span></td>
    <td>Called after all <span class="NDLSystemFont">Entity</span> objects in the same block file have had OnCreate called. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">lifecycle_OnEnterWorld</span></td>
    <td>Called after the <span class="NDLSystemFont">Entity</span> has been placed in the world. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">lifecycle_OnExitWorld</span></td>
    <td>Called after the <span class="NDLSystemFont">Entity</span> has been removed from the world. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">lifecycle_OnDestroy</span></td>
    <td>Called just before the <span class="NDLSystemFont">Entity</span> is destroyed. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">MAX_ENTITY_LIFECYCLE</span></td>
    <td>&nbsp;</td>
</tr>

  </tbody>
</table>
</div>



<a name="classegf_1_1_entity_1adb33a85f6a6c735dc00abd249415d133"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__map.htm">efd::map</a></span>&lt;<span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1af08acbbc1a28c9e4ee8dfb501449dc28">PropertyID</a></span>, <span class="NDLSystemFont"><a href="egf__IProperty.htm">IProperty</a></span>*&gt;  PropertyMap</p>
<p class="NDLRefMemberDescription">Container properties modified from the default. </p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classegf_1_1_entity_1a228ac2f26a9dc6e2e054aa3d65244bf6"></a>
<p class="NDLRefMemberFunction">virtual void  OnAdded(<span class="NDLSystemFont"><a href="../efd/efd__ParameterList.htm">efd::ParameterList</a></span>* pParameterList = 0)</p>
<p class="NDLRefMemberDescription">Called when the entity is added to the <span class="NDLSystemFont"><a href="egf__EntityManager.htm">EntityManager</a></span>. </p>
<p class="NDLRefMemberDetailedDescription">Passes the word on to any built-in models in the entity so that they can perform startup tasks. Also kicks off the lifecycle_OnCreate lifecycle which, if a scheduler is present, will invoke the OnCreate behavior.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pParameterList</span></td>
    <td>Optional ParameterList passed to OnCreate. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1ae09bbb7b6ebb849f507b5cd2abcccd04"></a>
<p class="NDLRefMemberFunction">virtual void  OnReinitialized()</p>
<p class="NDLRefMemberFunction"></p>

<a name="classegf_1_1_entity_1ab3f21d63240172f2c4d0a945262b5bcd"></a>
<p class="NDLRefMemberFunction">virtual void  OnAssetsLoaded()</p>
<p class="NDLRefMemberDescription">Called when assets have been loaded for a preload request, or immediately after OnAdded when preloading is not requested. </p>
<p class="NDLRefMemberDetailedDescription">Preload of assets is performed only for entities that mix-in the Preloadable model and have the PreloadAssets property set true. When the OnCreate lifecycle finishes all requested assets will be pre-loaded and once the preload is completed this method will be invoked. This method will be invoked immediately after the OnCreate lifecycle for entities that do not preload. In turn this method kicks off the OnAssetsLoaded lifecycle and, if a scheduler is present, its associated behavior. </p>

<a name="classegf_1_1_entity_1a38f9c2519acdc893fdc6e3434904086d"></a>
<p class="NDLRefMemberFunction">virtual void  OnEntitySetFinished()</p>
<p class="NDLRefMemberDescription">Called when all entities in an entity set have all completed their lifecycle_OnCreate. </p>
<p class="NDLRefMemberDetailedDescription">If the entity was loaded from a block then all entities in the block are a single set, the <span class="NDLSystemFont"><a href="egf__EntityLoaderService.htm">EntityLoaderService</a></span> calls this method in that case. For dynamically created entities each entity is it's own set and this method is called from <span class="NDLSystemFont"><a href="egf__EntityManager.htm">EntityManager</a></span> as soon as the OnCreate lifecycle completes. This method then begins the OnEntitySetFinished lifecycle (and its associated behavior if a scheduler is present). </p>

<a name="classegf_1_1_entity_1a7c1e0c5ca590567c51f2a5c2e1bb1f36"></a>
<p class="NDLRefMemberFunction">virtual void  Destroy()</p>
<p class="NDLRefMemberDescription">Call this function to invoke the lifecycle_OnDestroy for an entity. </p>
<p class="NDLRefMemberDetailedDescription">If a scheduler is present this will invoke the OnDestroy behavior. In order to destroy the entity it may be neccessary to first remove the entity from the world, which will be done automatically if required. </p>

<a name="classegf_1_1_entity_1a6e1458d01df73e3f3790b5a71890ce1e"></a>
<p class="NDLRefMemberFunction">virtual void  OnRemoved()</p>
<p class="NDLRefMemberDescription">Called when the entity is removed from the <span class="NDLSystemFont"><a href="egf__EntityManager.htm">EntityManager</a></span>. </p>
<p class="NDLRefMemberDetailedDescription">Passes the word on to any built-in models in the entity so that they can perform cleanup tasks. </p>

<a name="classegf_1_1_entity_1a5fa95ee049692fb4f5a63cd8545717f0"></a>
<p class="NDLRefMemberFunction">virtual void  EnterWorld()</p>
<p class="NDLRefMemberDescription">Call this function to invoke the lifecycle_OnEnterWorld for an entity. </p>
<p class="NDLRefMemberDetailedDescription">If a scheduler is present this will invoke the OnEnterWorld behavior. </p>

<a name="classegf_1_1_entity_1ae84cd7c216fe707d850f6fff34d09866"></a>
<p class="NDLRefMemberFunction">virtual void  ExitWorld()</p>
<p class="NDLRefMemberDescription">Call this function to invoke the lifecycle_OnExitWorld for an entity. </p>
<p class="NDLRefMemberDetailedDescription">If a scheduler is present this will invoke the OnExitWorld behavior. </p>
<a name="member_gets_and_sets"></a>
<p class="NDLRefHead1">Member Gets and Sets</p>


<a name="classegf_1_1_entity_1a8218281f8b6cfb4568e29a47346eee06"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="egf__EntityID.htm">EntityID</a></span>&  GetEntityID() const</p>
<p class="NDLRefMemberDescription">Get the entity ID class for this entity. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>Reference to the entity ID class. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a466811701a1da2dd32e1628947b9d383"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a845df149ec80fc0bf36f875ece09ef9d">efd::UInt64</a></span>  GetEntityIDValue() const</p>
<p class="NDLRefMemberDescription">Get the entity ID value for this entity. </p>
<p class="NDLRefMemberDetailedDescription">This should only be used for logging.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td><span class="NDLSystemFont">Entity</span> ID value. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a079acb3622bc323cee4c3fa6265dd039"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="egf__FlatModel.htm">FlatModel</a></span>*  GetModel() const</p>
<p class="NDLRefMemberDescription">Get a pointer to the flat model class for this entity. </p>
<p class="NDLRefMemberDetailedDescription">All entities will always have a valid <span class="NDLSystemFont"><a href="egf__FlatModel.htm">FlatModel</a></span> pointer as this member is set by the entity factory and is not cleared until the entity is destroyed.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>Const pointer to the flat model. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a533a18236824f74803670efac5ac0c69"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a1df4e70ceef104ead07333c2a8cf0df8">FlatModelID</a></span>  GetModelID() const</p>
<p class="NDLRefMemberDescription">Get the flat model ID for this entity. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>The flat model ID. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1ab866b15886dad0326d492e330a03c1ff"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>&  GetModelName() const</p>
<p class="NDLRefMemberDescription">Get the model name for this entity. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>A const reference to the model name. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a878a97f0c072910b708ee85c7d588346"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../efd/efd__ID128.htm">efd::ID128</a></span>&  GetDataFileID() const</p>
<p class="NDLRefMemberDescription">Returns the data file ID used to identify this entity in the block file it was loaded from. </p>
<p class="NDLRefMemberDetailedDescription">If the entity was not loaded from a data file this ID will be zero. Data file IDs are guaranteed to be universally unique across all entities in all block files (but remember that the same block can potentially be loaded multiple times).</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>An ID128 containing the data file ID for this entity, or 0 if none. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a62249d7461349bcac9ba36d893f2dc0c"></a>
<p class="NDLRefMemberFunction">void  SetDataFileID(const <span class="NDLSystemFont"><a href="../efd/efd__ID128.htm">efd::ID128</a></span>& id)</p>
<p class="NDLRefMemberDescription">Sets the value of the block file data ID for this entity (if loaded from a block file). </p>
<p class="NDLRefMemberDetailedDescription">This method is called by the internal block loading code and should never be used by any other code.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">id</span></td>
    <td>The data ID used in the block file to identify this entity </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a356877678af382abd8098457e2c7f2a3"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetBlockInstance() const</p>
<p class="NDLRefMemberDescription">Returns the block instance ID used when the block file containing this entity was loaded. </p>
<p class="NDLRefMemberDetailedDescription">If the entity was not loaded from a block file this ID will be zero.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>The block instance ID if this entity was loaded from a block, or 0 for dynamically created entities. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1abf81b8b561ab36b4a3649c784ad08b73"></a>
<p class="NDLRefMemberFunction">void  SetBlockInstance(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> instance)</p>
<p class="NDLRefMemberDescription">Sets the value of the block instance ID for this entity (if loaded from a block file). </p>
<p class="NDLRefMemberDetailedDescription">This method is called by the internal block loading code and should never be used by any other code.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">instance</span></td>
    <td>The instance ID used when loading the block file. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a93b607d79267f18a4a9bcd9418bcb53f"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetIterationCount() const</p>
<p class="NDLRefMemberDescription">Returns the iteration counter used to indicate revisions to the entity in a world file. </p>
<p class="NDLRefMemberDetailedDescription">If the entity was not loaded from a data file this count will be zero.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>UInt32 The iteration count for this entity, or 0 if none. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1abbf2b8082ec3f2dc3c01dfd4d8e049d8"></a>
<p class="NDLRefMemberFunction">void  SetIterationCount(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> iteration)</p>
<p class="NDLRefMemberDescription">Sets the value of the block file iteration counter for this entity. </p>
<p class="NDLRefMemberDetailedDescription">Only entities loaded from a block file set this value. It allows the entity to be compared to a previously loaded entity and changes detected. World Builder increments this number every time the entity is changed in the block file.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">iteration</span></td>
    <td>the numeric iteration </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1ab4c126bbb1a8981b4e66d38914f97ec5"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../efd/efd__ServiceManager.htm">efd::ServiceManager</a></span>*  GetServiceManager() const</p>
<p class="NDLRefMemberDescription">Convenience method to access the service manager which owns this entities <span class="NDLSystemFont"><a href="egf__EntityManager.htm">EntityManager</a></span>. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>Const pointer to the service manager. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a81b6a5c55e87d8757b3a73d741315860"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="egf__EntityManager.htm">egf::EntityManager</a></span>*  GetEntityManager() const</p>
<p class="NDLRefMemberDescription">Gets a the pointer to the <span class="NDLSystemFont"><a href="egf__EntityManager.htm">EntityManager</a></span> that owns this entity. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>Pointer to <span class="NDLSystemFont"><a href="egf__EntityManager.htm">EntityManager</a></span> instance that owns this entity. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1aaadfa4518def28711ec2593130260b88"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="egf__Scheduler.htm">egf::Scheduler</a></span>*  GetScheduler() const</p>
<p class="NDLRefMemberDescription">Get a pointer to the <span class="NDLSystemFont"><a href="egf__Scheduler.htm">Scheduler</a></span>, if set. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>Pointer to <span class="NDLSystemFont"><a href="egf__Scheduler.htm">Scheduler</a></span>, or NULL if not set. </td>
</tr>

        </tbody>
    </table>
</div>


<a name="messaging_methods"></a>
<p class="NDLRefHead1">Messaging Methods</p>


<a name="classegf_1_1_entity_1ac10135dc0362ae0f8c883e4234de5ccf"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span>  GetPrivateCatID() const</p>
<p class="NDLRefMemberDescription">Returns the private category for the entity. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>The private category for this entity. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a251c242f2fd38698e09ee0d30f2bab19"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="egf__EventID.htm">EventID</a></span>  SendEvent(<br/><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span> categoryID, <br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a1df4e70ceef104ead07333c2a8cf0df8">FlatModelID</a></span> modelID, <br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a1df4e70ceef104ead07333c2a8cf0df8">FlatModelID</a></span> invokeModelID, <br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a1ebd2b58de9ca508c04d80dea3644fcb">BehaviorID</a></span> behaviorID, <br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a1ebd2b58de9ca508c04d80dea3644fcb">BehaviorID</a></span> callbackBehaviorID = 0, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a37c593debc73d82d7ddc571c725f0e2d">efd::TimeType</a></span> delay = 0.0f, <br/><span class="NDLSystemFont"><a href="../efd/efd__ParameterList.htm">efd::ParameterList</a></span>* pParams = 0)</p>
<p class="NDLRefMemberDescription">Sends an event message to invoke the specified behavior on any entity listening on the specified category. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">categoryID</span></td>
    <td>The category to send the event message to. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">modelID</span></td>
    <td>The ID of a model that the target entity must mix-in in order for this event to be considered valid. Acts as a sort of type safety. This is optional, pass 0 to avoid using a mix-in restriction on target entities. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">invokeModelID</span></td>
    <td>The specific model that implements the behavior to invoke, or zero to automatically call the most derived implementation. Typically you always want to pass zero for this parameter. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">behaviorID</span></td>
    <td>The behavior ID to invoke. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">callbackBehaviorID</span></td>
    <td>The behavior ID to invoke when the return value is received. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">delay</span></td>
    <td>The time to delay before executing the behavior. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pParams</span></td>
    <td>The parameters required by the behavior. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The ID of the event that was generated. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1ab84d77c603447492891665b52d1701b1"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="egf__EventID.htm">EventID</a></span>  SendEvent(<br/><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span> idEntityOrChannel, <br/>const char* strModel, <br/>const char* strBehavior, <br/><span class="NDLSystemFont"><a href="../efd/efd__ParameterList.htm">efd::ParameterList</a></span>* pParams = 0, <br/>const char* strCallback = 0, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a37c593debc73d82d7ddc571c725f0e2d">efd::TimeType</a></span> delay = 0.0f)</p>
<p class="NDLRefMemberDescription">Sends an event message to invoke the specified behavior on any entity listening on the specified category. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">This version is just like SendEvent only it is for use by the scripting system.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">idEntityOrChannel</span></td>
    <td>The entity or channel to send to. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">strModel</span></td>
    <td>The name of a model that the target entity must mix-in in order for this event to be considered valid. Acts as a sort of type safety. This is optional, pass NULL to avoid using a mix-in restriction on target entities. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">strBehavior</span></td>
    <td>The name of the behavior to invoke which can contain a "Model:Method" style string. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pParams</span></td>
    <td>The parameters required by the behavior. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">strCallback</span></td>
    <td>The name of the behavior to invoke when the return value is received or NULL for no callback. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">delay</span></td>
    <td>The time to delay before executing the behavior. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The ID of the event that was generated. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1adf2730f4cbc0d4d16eb9ba9458a7894e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">EventMessagePtr</a></span>  CreateEventMessage(<br/><span class="NDLSystemFont"><a href="egf__EntityID.htm">egf::EntityID</a></span> entityID, <br/>const char* strModel, <br/>const char* strBehavior, <br/><span class="NDLSystemFont"><a href="../efd/efd__ParameterList.htm">efd::ParameterList</a></span>* pParams, <br/>const char* strCallback, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a37c593debc73d82d7ddc571c725f0e2d">efd::TimeType</a></span> delay, <br/><span class="NDLSystemFont">bool</span> needResponse)</p>
<p class="NDLRefMemberDescription">Creates an Event Message to be sent. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">entityID</span></td>
    <td>The replicated entity's ID. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">strModel</span></td>
    <td>The model that must be mixed into all target entities. This is optional, pass NULL to avoid filtering the behavior by mix-in model. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">strBehavior</span></td>
    <td>The behavior to invoke. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pParams</span></td>
    <td>The parameters required by the behavior. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">strCallback</span></td>
    <td>The name of the behavior to invoke when the return value is received. Pass NULL or an empty string for no callback. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">delay</span></td>
    <td>The time to delay before executing the behavior. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">needResponse</span></td>
    <td>True if the caller requires a return value message. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Smart pointer to the message created. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a51a924d46782e2fd67937da06eede044"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  PostEvent(const <span class="NDLSystemFont"><a href="egf__EventMessage.htm">EventMessage</a></span>* pMessage)</p>
<p class="NDLRefMemberDescription">Posts an event to this entity for processing. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMessage</span></td>
    <td>The event message to process. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the message was processed correctly. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a2bb20dfebb6418fddf783fa94929d7aa"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  SendReturnValue(<br/><span class="NDLSystemFont"><a href="egf__PendingBehavior.htm">egf::PendingBehavior</a></span>* pBehavior, <br/><span class="NDLSystemFont"><a href="../efd/efd__ParameterList.htm">efd::ParameterList</a></span>* pRetVals) const</p>
<p class="NDLRefMemberDescription">Sends a return value event message to the entity that that invoked the behavior. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pBehavior</span></td>
    <td>The running behavior that is returning a value. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pRetVals</span></td>
    <td>The return value parameters, if any. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if it is sent. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a7dff51fa08c6155f595eb36286e1f526"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span>  MakePrivateCatID(const <span class="NDLSystemFont"><a href="egf__EntityID.htm">EntityID</a></span>& entityID)</p>
<p class="NDLRefMemberDescription">Creates a private category ID based on the entity ID specified. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">entityID</span></td>
    <td>The entity ID for form category ID from. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The private category ID. </td>
</tr>

        </tbody>
    </table>
</div>


<a name="built-in_model_system_methods"></a>
<p class="NDLRefHead1">Built-in Model System Methods</p>


<a name="classegf_1_1_entity_1a75c450a1b70fef81728461f5e86b7874"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__map.htm">efd::map</a></span>&lt;<span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a1df4e70ceef104ead07333c2a8cf0df8">FlatModelID</a></span>, <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">IBuiltinModelPtr</a></span>&gt;  BuiltModelMap</p>
<p class="NDLRefMemberDescription">Typedef for the built-in model map. </p>

<a name="classegf_1_1_entity_1aa35eb62bbd273007b615a4448ef4e628"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__map.htm">BuiltModelMap</a></span>  m_BuiltinModels</p>
<p class="NDLRefMemberDescription">Map of all the built-in models in this entity. </p>

<a name="classegf_1_1_entity_1a541d5b8bb7d894582cb070ded57f1adc"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  AddBuiltinModel(<br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a1df4e70ceef104ead07333c2a8cf0df8">FlatModelID</a></span> i_builtinId, <br/><span class="NDLSystemFont"><a href="egf__IBuiltinModel.htm">IBuiltinModel</a></span>* i_pNewComp)</p>
<p class="NDLRefMemberDescription">Creates a new built-in model and adds it to the entity. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_builtinId</span></td>
    <td>The ID of the built-in model. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_pNewComp</span></td>
    <td>Pointer to the newly created built-in model. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if created, false if it already exists or could not be created. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a62046ca3beae756d453cf1c1219c9a96"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="egf__IBuiltinModel.htm">IBuiltinModel</a></span>*  FindBuiltinModel(const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& i_strComponentName) const</p>
<p class="NDLRefMemberDescription">Finds a built-in model by name. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_strComponentName</span></td>
    <td>The name of the built-in model to find. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Pointer to the built-in model, NULL if not found. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1aab68b861632e33fc55f67383d3dfeddf"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="egf__IBuiltinModel.htm">IBuiltinModel</a></span>*  FindBuiltinModel(<span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a1df4e70ceef104ead07333c2a8cf0df8">FlatModelID</a></span> i_builtinId) const</p>
<p class="NDLRefMemberDescription">Finds a built-in by ID. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_builtinId</span></td>
    <td>The ID of the built-in model to find. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Pointer to the built-in model, NULL if not found. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a46c12fcf97be659ee3b8d01f10b2866d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="egf__IBuiltinModel.htm">IBuiltinModel</a></span>*  FindBuiltinModelByClass(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span> i_classId) const</p>
<p class="NDLRefMemberDescription">Finds a built-in by the class ID of the built-in model's C++ class. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_classId</span></td>
    <td>The Class ID of the built-in model to find. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Pointer to the built-in model, NULL if not found. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a4c6ee2e2863705777d88a1a9d4ea41d1"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  CreateBuiltinModels(class <span class="NDLSystemFont"><a href="egf__FlatModelManager.htm">FlatModelManager</a></span>* i_pCompFactory)</p>
<p class="NDLRefMemberDescription">Creates all the built-in models specified in the flat model. </p>
<p class="NDLRefMemberDetailedDescription">Used at creation time to setup all the built-in models needed by the entity. Called by the <span class="NDLSystemFont"><a href="egf__FlatModelManager.htm#classegf_1_1_flat_model_manager_1ae957cbfc586b54bd47fabb0a21fd274b">FlatModelManager::FactoryEntity</a></span> method.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_pCompFactory</span></td>
    <td>Pointer to the flat model manager. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if all the built-in models were created successfully. </td>
</tr>

        </tbody>
    </table>
</div>


<a name="property_system_methods"></a>
<p class="NDLRefHead1">Property System Methods</p>


<a name="classegf_1_1_entity_1a27d9ff7df7781eee085308786c5e6a4e"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__set.htm">efd::set</a></span>&lt;<span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1af08acbbc1a28c9e4ee8dfb501449dc28">PropertyID</a></span>&gt;  DirtyPropertySet</p>
<p class="NDLRefMemberDescription">Container properties modified from the default. </p>

<a name="classegf_1_1_entity_1aee5e5e3c8723dafec1d9a49b04ae4634"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__map.htm">PropertyMap</a></span>  m_propertyMap</p>
<p class="NDLRefMemberDescription">The default map of properties. </p>

<a name="classegf_1_1_entity_1adadb54aa445e675e59886e3fcabf4c28"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__set.htm">DirtyPropertySet</a></span>  m_dirtyPropertySet</p>
<p class="NDLRefMemberDescription">Set of dirty properties. </p>

<a name="classegf_1_1_entity_1a483ffdc0b50d46fc6b270c66a71687bd"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">PropertyResult</a></span>  RemoveProperty(<span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1af08acbbc1a28c9e4ee8dfb501449dc28">PropertyID</a></span> propID)</p>
<p class="NDLRefMemberDescription">Remove a property from the <span class="NDLSystemFont">Entity</span>. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">propID</span></td>
    <td>The ID of the property to reset. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A PropertyResult value indicating the operation's status. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1ae44fcc2eee969c5f406c75925eed7950"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  ShouldPropertyUseBuiltinModel(const <span class="NDLSystemFont"><a href="egf__PropertyDescriptor.htm">PropertyDescriptor</a></span>* pDesc) const</p>
<p class="NDLRefMemberDescription">Checks if the given property should be read from and written to an <span class="NDLSystemFont"><a href="egf__IBuiltinModel.htm">IBuiltinModel</a></span> or if it should use a normal <span class="NDLSystemFont"><a href="egf__IProperty.htm">IProperty</a></span>. </p>
<p class="NDLRefMemberDetailedDescription">Looks at the property traits and whether the entity is owned or replicated in order to make that decision.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pDesc</span></td>
    <td>Pointer to the descriptor of the property to check. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if we should lookup and use an <span class="NDLSystemFont"><a href="egf__IBuiltinModel.htm">IBuiltinModel</a></span> for this property. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a534894c78e587ea62e86e7f6a18f8e44"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="egf__IProperty.htm">IProperty</a></span>*  GetPropertyForReading(const <span class="NDLSystemFont"><a href="egf__PropertyDescriptor.htm">PropertyDescriptor</a></span>* pDesc) const</p>
<p class="NDLRefMemberDescription">This will fetch the value from the property map if the value has been modified. </p>
<p class="NDLRefMemberDetailedDescription">Otherwise it will access the default value from the descriptor.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pDesc</span></td>
    <td>Pointer to the descriptor of the property to check. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Pointer to the property, might be either the current value or default value. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a032f53ebe67449b2a2c93195a6c9dc02"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">PropertyResult</a></span>  CheckWritability(const <span class="NDLSystemFont"><a href="egf__PropertyDescriptor.htm">PropertyDescriptor</a></span>* pDesc) const</p>
<p class="NDLRefMemberDescription">Tests whether the given property can be written to. </p>
<p class="NDLRefMemberDetailedDescription">A property must not have the ReadOnly trait in order to be written. In addition, it must either be owned or else have the Mutable trait.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pDesc</span></td>
    <td>Pointer to the descriptor of the property to check. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>PropertyResult_OK if the property can be written to. Otherwise an error value describing why the property cannot be written to. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a8801e74606e7eb340c6675aa82940010"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="egf__IProperty.htm">IProperty</a></span>*  GetPropertyForWriting(const <span class="NDLSystemFont"><a href="egf__PropertyDescriptor.htm">PropertyDescriptor</a></span>* pDesc)</p>
<p class="NDLRefMemberDescription">This will fetch the value from the property map if the value has been modified. </p>
<p class="NDLRefMemberDetailedDescription">Otherwise it will either clone the default value or lookup the owning built-in model depending on the type of property and then add the property to the property map.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pDesc</span></td>
    <td>Pointer to the descriptor of the property to check. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Pointer to the writable property, NULL if read only. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a29c502c13169a6d850df1b047540b92b"></a>
<p class="NDLRefMemberFunction">virtual void  SetDirty(<br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1af08acbbc1a28c9e4ee8dfb501449dc28">PropertyID</a></span> propID, <br/>const <span class="NDLSystemFont"><a href="egf__IProperty.htm">IProperty</a></span>* prop)</p>
<p class="NDLRefMemberDescription">Sets the specified property as being dirty. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">propID</span></td>
    <td>The ID of the property. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">prop</span></td>
    <td>Pointer to the property. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a0b5a7b737353af462e186ab7c8af3e2a"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1af08acbbc1a28c9e4ee8dfb501449dc28">PropertyID</a></span>  _Name2ID(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& propName, <br/>const char* pszMethod) const</p>
<p class="NDLRefMemberDescription">Looks in this entity's <span class="NDLSystemFont"><a href="egf__FlatModel.htm">FlatModel</a></span> for a property with the given name and returns its ID. </p>
<p class="NDLRefMemberDetailedDescription">As a result this method can only convert properties that are used by this entity. See <span class="NDLSystemFont"><a href="egf__FlatModelManager.htm#classegf_1_1_flat_model_manager_1a8a21bb03d23927b891babcfddee2dcab">FlatModelManager::GetPropertyNameByID</a></span> for a more universal conversion method.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">propName</span></td>
    <td>The name of the property. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pszMethod</span></td>
    <td>The name of the function that called _Name2ID, used for logging </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The ID of the property. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a651768d37fe2d2ddda6b97ef26a3ee56"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">PropertyResult</a></span>  _GetPropDesc(<br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1af08acbbc1a28c9e4ee8dfb501449dc28">PropertyID</a></span> i_propID, <br/>const <span class="NDLSystemFont"><a href="egf__PropertyDescriptor.htm">PropertyDescriptor</a></span> *& o_ppd) const</p>
<p class="NDLRefMemberDescription">Retrieves a descriptor for the specified property. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_propID</span></td>
    <td>The ID of the property </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">o_ppd</span></td>
    <td>A reference to a const pointer to the descriptor </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>PropertyResult_OK if the property descriptor was retrieved. Otherwise an error value describing why it failed. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a6efdebdcdef4e3f9e5d138f063ccf402"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">PropertyResult</a></span>  _GetPropDesc(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& i_strPropName, <br/>const <span class="NDLSystemFont"><a href="egf__PropertyDescriptor.htm">PropertyDescriptor</a></span> *& o_ppd) const</p>
<p class="NDLRefMemberDescription">Retrieves a descriptor for the specified property. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_strPropName</span></td>
    <td>The name of the property </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">o_ppd</span></td>
    <td>A reference to a const pointer to the descriptor </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>PropertyResult_OK if the property descriptor was retrieved. Otherwise an error value describing why it failed. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a882cadb73616237c331308134804dc27"></a>
<p class="NDLRefMemberFunction">void  FreeProperty(<br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1af08acbbc1a28c9e4ee8dfb501449dc28">PropertyID</a></span> propID, <br/><span class="NDLSystemFont"><a href="egf__IProperty.htm">IProperty</a></span>* prop)</p>
<p class="NDLRefMemberDescription">Releases the memory used by the specified property. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">propID</span></td>
    <td>The ID of the property </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">prop</span></td>
    <td>Pointer to the property </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a2b98253a3ac25b14f5e47cb3b343029b"></a>
<p class="NDLRefMemberFunction">void  RapidIterateResetProperty(<br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1af08acbbc1a28c9e4ee8dfb501449dc28">PropertyID</a></span> changedPropID, <br/>const <span class="NDLSystemFont"><a href="egf__PropertyDescriptor.htm">PropertyDescriptor</a></span>* newDesc)</p>
<p class="NDLRefMemberDescription">Similar to ResetProperty only it resets to the specified <span class="NDLSystemFont"><a href="egf__PropertyDescriptor.htm">PropertyDescriptor</a></span> value rather than our current default value. </p>
<p class="NDLRefMemberDetailedDescription">This is used during rapid iteration at a point where our model data still points to the old model but we are being updated to prepare for accepting a new model.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">changedPropID</span></td>
    <td>The ID of the property that has changed during rapid iteration </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">newDesc</span></td>
    <td>A description of the new property which might differ by traits, type and default values from our current description for the property. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a8195509bff066a3c77a7909a740607c8"></a>
<p class="NDLRefMemberFunction">void  RapidIterateDefaultPropertyValue(<br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1af08acbbc1a28c9e4ee8dfb501449dc28">PropertyID</a></span> changedPropID, <br/>const <span class="NDLSystemFont"><a href="egf__PropertyDescriptor.htm">PropertyDescriptor</a></span>* newDesc)</p>
<p class="NDLRefMemberDescription">Called by <span class="NDLSystemFont"><a href="egf__FlatModelManager.htm">FlatModelManager</a></span> when a flat model has been rapidly iterated resulting in a change to a property. </p>
<p class="NDLRefMemberDetailedDescription">When called our model data still points to the old model but we are being updated to prepare for accepting a new model.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">changedPropID</span></td>
    <td>The ID of the property that has changed during rapid iteration </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">newDesc</span></td>
    <td>A description of the new property which might differ by traits, type and default values from our current description for the property. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1aa15202f48f3a016ad7214f390222c3ef"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">PropertyResult</a></span>  ValidateTypeSafety(<br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1af08acbbc1a28c9e4ee8dfb501449dc28">PropertyID</a></span> propID, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span> classID, <br/>const <span class="NDLSystemFont"><a href="egf__PropertyDescriptor.htm">PropertyDescriptor</a></span> *& rpDescriptor) const</p>
<p class="NDLRefMemberDescription">Validates that the type of the specified classID can safely hold the data found in the specified property. </p>
<p class="NDLRefMemberDetailedDescription">Upon successful validation, the <span class="NDLSystemFont"><a href="egf__PropertyDescriptor.htm">PropertyDescriptor</a></span> argument will point the specified property's descriptor. This is useful because it is generally required to use the descriptor later in the code block, resulting in at least one extra virtual call.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">propID</span></td>
    <td>The ID of the property </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">classID</span></td>
    <td>The ClassID to check against </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">rpDescriptor</span></td>
    <td>Reference to a const pointer to the descriptor </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>PropertyResult_OK if the classID can safely hold the data. Otherwise an error value describing why it failed. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a9a97524b7bf5b5a77fa2250549322b80"></a>
<p class="NDLRefMemberFunction">template &lt;typename T  &gt; <span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">PropertyResult</a></span>  GetPropertyValue(<br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1af08acbbc1a28c9e4ee8dfb501449dc28">PropertyID</a></span> propID, <br/>T& data) const</p>
<p class="NDLRefMemberDescription">Type safely retrieves the current value from the specified property. </p>
<p class="NDLRefMemberDetailedDescription">If this entity is not overridden, the default data is retrieved from the flat model.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">propID</span></td>
    <td>The PropertyID to retrieve from. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">data</span></td>
    <td>A reference to a variable of type T that the value of this property will be assigned to. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A PropertyResult value indicating the operation's status. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a03e74c295736522a4e3c88346524763b"></a>
<p class="NDLRefMemberFunction">template &lt;typename T  &gt; <span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">PropertyResult</a></span>  GetPropertyValue(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& propName, <br/>T& data) const</p>
<p class="NDLRefMemberDescription">Type safely retrieves the current value from the specified property. </p>
<p class="NDLRefMemberDetailedDescription">If this entity is not overridden, the default data is retrieved from the flat model.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">propName</span></td>
    <td>The name of the property to retrieve. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">data</span></td>
    <td>A reference to a variable of type T that the value of this property will be assigned to. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A PropertyResult value indicating the operation's status. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a72acbe2275f6b900b177f35bbea97786"></a>
<p class="NDLRefMemberFunction">template &lt;typename T  &gt; <span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">PropertyResult</a></span>  GetPropertyValue(<br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1af08acbbc1a28c9e4ee8dfb501449dc28">PropertyID</a></span> propID, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& key, <br/>T& data) const</p>
<p class="NDLRefMemberDescription">Type safely retrieves the current value from the specified property by key. </p>
<p class="NDLRefMemberDetailedDescription">If this entity is not overridden, the default data is retrieved from the flat model.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">propID</span></td>
    <td>The PropertyID to retrieve from. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">key</span></td>
    <td>The key in the map to fetch data from an map property type. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">data</span></td>
    <td>A reference to a variable of type T that the value of this property will be assigned to. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A PropertyResult value indicating the operation's status. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1acabba9cab7f722d1bc71586ba9df4f58"></a>
<p class="NDLRefMemberFunction">template &lt;typename T  &gt; <span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">PropertyResult</a></span>  GetPropertyValue(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& propName, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& key, <br/>T& data) const</p>
<p class="NDLRefMemberDescription">Type safely retrieves the current value from the specified property by key. </p>
<p class="NDLRefMemberDetailedDescription">If this entity is not overridden, the default data is retrieved from the flat model.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">propName</span></td>
    <td>The name of the property to retrieve. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">key</span></td>
    <td>The key in the map to fetch data from an map property type. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">data</span></td>
    <td>A reference to a variable of type T that the value of this property will be assigned to. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A PropertyResult value indicating the operation's status. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a18ee04098d69e30d3aab7a5f0c82cc76"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">PropertyResult</a></span>  GetValueAsString(<br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1af08acbbc1a28c9e4ee8dfb501449dc28">PropertyID</a></span> propID, <br/><span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& data) const</p>
<p class="NDLRefMemberDescription">Retrieves a string representation of the current value from the specified property. </p>
<p class="NDLRefMemberDetailedDescription">If this property is not overridden, the default data is retrieved from the flat model.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">propID</span></td>
    <td>The PropertyID to retrieve from. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">data</span></td>
    <td>A string to hold the value of the property. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A PropertyResult value indicating the operation's status. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1aaa667c4436bfb8572b0741c69d6e328b"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">PropertyResult</a></span>  GetValueAsString(<br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1af08acbbc1a28c9e4ee8dfb501449dc28">PropertyID</a></span> propID, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& key, <br/><span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& data) const</p>
<p class="NDLRefMemberDescription">Retrieves a string representation of the current value from the specified property by key. </p>
<p class="NDLRefMemberDetailedDescription">If this property is not overridden, the default data is retrieved from the flat model.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">propID</span></td>
    <td>The PropertyID to retrieve from. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">key</span></td>
    <td>The key in the map to fetch data from. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">data</span></td>
    <td>A string to hold the value of the property. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A PropertyResult value indicating the operation's status. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a64a87bf7f733b5514b27dc8a792cf503"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1af08acbbc1a28c9e4ee8dfb501449dc28">PropertyID</a></span>  GetPropertyID(const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& i_propName) const</p>
<p class="NDLRefMemberDescription">Attempts to lookup the ID for the given property. </p>
<p class="NDLRefMemberDetailedDescription">Will return zero if the property is not found.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_propName</span></td>
    <td>The name of the property to retrieve. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The PropertyID of the specified property, or zero if the property is not found. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a1f5d1c6d7c6f25f7d4ab90ccdba63b86"></a>
<p class="NDLRefMemberFunction">template &lt;typename T  &gt; <span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">PropertyResult</a></span>  GetDefaultPropertyValue(<br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1af08acbbc1a28c9e4ee8dfb501449dc28">PropertyID</a></span> propID, <br/>T& data) const</p>
<p class="NDLRefMemberDescription">Type safely retrieves the default value from the specified property. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">propID</span></td>
    <td>The PropertyID to retrieve from. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">data</span></td>
    <td>A reference to a variable of type T that the value of this property will be assigned to. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A PropertyResult value indicating the operation's status. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1adc2111ab567df2d5f6962a752e0a0ad1"></a>
<p class="NDLRefMemberFunction">template &lt;typename T  &gt; <span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">PropertyResult</a></span>  GetDefaultPropertyValue(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& propName, <br/>T& data) const</p>
<p class="NDLRefMemberDescription">Type safely retrieves the default value from the specified property. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">propName</span></td>
    <td>The name of the property to retrieve from. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">data</span></td>
    <td>A reference to a variable of type T that the value of this property will be assigned to. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A PropertyResult value indicating the operation's status. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a0f2e43983cea9c3e5421e9404915a8bc"></a>
<p class="NDLRefMemberFunction">template &lt;typename T  &gt; <span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">PropertyResult</a></span>  GetDefaultPropertyValue(<br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1af08acbbc1a28c9e4ee8dfb501449dc28">PropertyID</a></span> propID, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& key, <br/>T& data) const</p>
<p class="NDLRefMemberDescription">Type safely retrieves the default value from the specified property by key. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">propID</span></td>
    <td>The PropertyID to retrieve from. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">key</span></td>
    <td>The key in the map to fetch data from an map property type. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">data</span></td>
    <td>A reference to a variable of type T that the value of this property will be assigned to. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A PropertyResult value indicating the operation's status. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a1b159919cb4d8c1423157f1bbc387efe"></a>
<p class="NDLRefMemberFunction">template &lt;typename T  &gt; <span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">PropertyResult</a></span>  GetDefaultPropertyValue(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& propName, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& key, <br/>T& data) const</p>
<p class="NDLRefMemberDescription">Type safely retrieves the default value from the specified property by key. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">propName</span></td>
    <td>The name of the property to retrieve from. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">key</span></td>
    <td>The key in the map to fetch data from an map property type. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">data</span></td>
    <td>A reference to a variable of type T that the value of this property will be assigned to. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A PropertyResult value indicating the operation's status. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1afb43b9ee9ae4d8b17d16703f9a566d9c"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">PropertyResult</a></span>  GetPropertyCount(<br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1af08acbbc1a28c9e4ee8dfb501449dc28">PropertyID</a></span> i_propID, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>& o_count) const</p>
<p class="NDLRefMemberDescription">Count the number of entries in the given associative property. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_propID</span></td>
    <td>The PropertyID to look up. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">o_count</span></td>
    <td>On success, the number of values for the given associative array. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A PropertyResult value indicating the operation's status. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1ae01aaf8bded15600bfb04111552c5835"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">PropertyResult</a></span>  GetPropertyCount(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& i_strName, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>& o_count) const</p>
<p class="NDLRefMemberDescription">Count the number of entries in the given associative property. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_strName</span></td>
    <td>The name of the Property to look up. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">o_count</span></td>
    <td>On success, the number of values for the given associative array. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A PropertyResult value indicating the operation's status. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a248c8ef915891c130d0b3044b0d6dae5"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">PropertyResult</a></span>  GetPropertyKeys(<br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1af08acbbc1a28c9e4ee8dfb501449dc28">PropertyID</a></span> i_propID, <br/><span class="NDLSystemFont"><a href="../efd/efd__list.htm">efd::list</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>&gt;& o_keys) const</p>
<p class="NDLRefMemberDescription">Retrieves the property keys from the specified associative property. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">This method is only valid for associative array property types.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_propID</span></td>
    <td>The ID of the property to retrieve the keys from. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">o_keys</span></td>
    <td>A reference to a list that will receive the key names. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A result value indicating the success or failure of the method. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a3ac3f8949a3a79393b971bb920336b2f"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">PropertyResult</a></span>  GetPropertyKeys(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& i_strName, <br/><span class="NDLSystemFont"><a href="../efd/efd__list.htm">efd::list</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>&gt;& o_keys) const</p>
<p class="NDLRefMemberDescription">Retrieves the property keys from the specified associative property. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">This method is only valid for associative array property types.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_strName</span></td>
    <td>The name of the property to retrieve the keys from. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">o_keys</span></td>
    <td>A reference to a list that will receive the key names. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A result value indicating the success or failure of the method. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a43bc8fa6e145edbd21cb877910681b28"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">PropertyResult</a></span>  GetNextPropertyKey(<br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1af08acbbc1a28c9e4ee8dfb501449dc28">PropertyID</a></span> i_propID, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& i_previousKey, <br/><span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& o_nextKey) const</p>
<p class="NDLRefMemberDescription">Retrieves the next property key name from the specified property. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">This method is only valid for associative array property types.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_propID</span></td>
    <td>The ID of the property to retrieve the keys from. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_previousKey</span></td>
    <td>The name of the previous property key. The first key should be returned in o_nextKey when i_previousKey is empty. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">o_nextKey</span></td>
    <td>A reference to a list that will receive the key names. This will be the empty string when there are no more keys. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A result value indicating the success or failure of the method. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1abfe411d8f841dba0da679c63d6b5558e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">PropertyResult</a></span>  GetNextPropertyKey(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& i_strName, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& i_previousKey, <br/><span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& o_nextKey) const</p>
<p class="NDLRefMemberDescription">Retrieves the next property key name from the specified property. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">This method is only valid for associative array property types.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_strName</span></td>
    <td>The name of the property to retrieve the keys from. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_previousKey</span></td>
    <td>The name of the previous property key. The first key should be returned in o_nextKey when i_previousKey is empty. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">o_nextKey</span></td>
    <td>A reference to a list that will receive the key names. This will be the empty string when there are no more keys. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A result value indicating the success or failure of the method. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a63d84d6d5f1ad77cd8202cbfff1ead5d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">PropertyResult</a></span>  GetPropertyType(<br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1af08acbbc1a28c9e4ee8dfb501449dc28">PropertyID</a></span> i_propID, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>& o_result) const</p>
<p class="NDLRefMemberDescription">Determine the type of a property given its ID. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_propID</span></td>
    <td>The PropertyID to look up. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">o_result</span></td>
    <td>The type for the property. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A PropertyResult value indicating the operation's status. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1ae94ae6d82a100a0dfe213562676f96c2"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">PropertyResult</a></span>  GetPropertyType(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& i_strName, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>& o_result) const</p>
<p class="NDLRefMemberDescription">Determine the type of a property given its name. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_strName</span></td>
    <td>The name of the Property to look up. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">o_result</span></td>
    <td>The type for the property. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A PropertyResult value indicating the operation's status. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1aaa5aa3d64cc6b2aa5a1058c377e053c8"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">PropertyResult</a></span>  GetDataStorageType(<br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1af08acbbc1a28c9e4ee8dfb501449dc28">PropertyID</a></span> i_propID, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>& o_result) const</p>
<p class="NDLRefMemberDescription">Determine the type of the storage elements for a property given its ID. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_propID</span></td>
    <td>The PropertyID to look up. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">o_result</span></td>
    <td>The storage type for the property. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A PropertyResult value indicating the operation's status. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1ae2caa77cb2730f170a4ffb035de2b634"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">PropertyResult</a></span>  GetDataStorageType(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& i_strName, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>& o_result) const</p>
<p class="NDLRefMemberDescription">Determine the type of the storage elements for a property given its name. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_strName</span></td>
    <td>The name of the Property to look up. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">o_result</span></td>
    <td>The storage type for the property. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A PropertyResult value indicating the operation's status. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a331f0ddc36dd030ee87f0997416b8bbf"></a>
<p class="NDLRefMemberFunction">template &lt;typename T  &gt; <span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">PropertyResult</a></span>  SetPropertyValue(<br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1af08acbbc1a28c9e4ee8dfb501449dc28">PropertyID</a></span> propID, <br/>const T& data)</p>
<p class="NDLRefMemberDescription">Type safely sets the value of this entity's specified property to the specified value. </p>
<p class="NDLRefMemberDetailedDescription">If this entity has not overridden, this will cause a new property to be created and bound to the entity to store the contents of data.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">propID</span></td>
    <td>The PropertyID to assign data to. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">data</span></td>
    <td>A reference to a variable of type T that contains the value that the property should be set to. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A PropertyResult value indicating the operation's status. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a231c81fea1e1938061a8f2876c2307e5"></a>
<p class="NDLRefMemberFunction">template &lt;typename T  &gt; <span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">PropertyResult</a></span>  SetPropertyValue(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& propName, <br/>const T& data)</p>
<p class="NDLRefMemberDescription">Type safely sets the value of this entity's specified property to the specified value. </p>
<p class="NDLRefMemberDetailedDescription">If this entity has not overridden, this will cause a new property to be created and bound to the entity to store the contents of data.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">propName</span></td>
    <td>The name of the property to assign data to. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">data</span></td>
    <td>A reference to a variable of type T that contains the value that the property should be set to. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A PropertyResult value indicating the operation's status. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1aef072e2194fde12318c4cb3d166e0384"></a>
<p class="NDLRefMemberFunction">template &lt;typename T  &gt; <span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">PropertyResult</a></span>  SetPropertyValue(<br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1af08acbbc1a28c9e4ee8dfb501449dc28">PropertyID</a></span> propID, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& key, <br/>const T& data)</p>
<p class="NDLRefMemberDescription">Type safely sets the value, by key, of this entity's specified property to the specified value. </p>
<p class="NDLRefMemberDetailedDescription">If this entity has not overridden, this will cause a new property to be created and bound to the entity to store the contents of data.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">propID</span></td>
    <td>The PropertyID of an associative property to assign data to. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">key</span></td>
    <td>The key within the property to set </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">data</span></td>
    <td>A reference to a variable of type T that contains the value that the property key should be set to. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A PropertyResult value indicating the operation's status. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1ae1cd5609a4c7f6508cc8735d018cddb0"></a>
<p class="NDLRefMemberFunction">template &lt;typename T  &gt; <span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">PropertyResult</a></span>  SetPropertyValue(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& propName, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& key, <br/>const T& data)</p>
<p class="NDLRefMemberDescription">Type safely sets the value, by key, of this entity's specified property to the specified value. </p>
<p class="NDLRefMemberDetailedDescription">If this entity has not overridden, this will cause a new property to be created and bound to the entity to store the contents of data.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">propName</span></td>
    <td>The name of the associative property to assign data to. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">key</span></td>
    <td>The key within the property to set </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">data</span></td>
    <td>A reference to a variable of type T that contains the value that the property should be set to. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A PropertyResult value indicating the operation's status. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1ae3d7720e58f3b162bf9ebe9da5686a16"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">PropertyResult</a></span>  SetPropertyValueByString(<br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1af08acbbc1a28c9e4ee8dfb501449dc28">PropertyID</a></span> propID, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& i_strValue)</p>
<p class="NDLRefMemberDescription">Type safely sets the value of this entity's specified property to the specified string value. </p>
<p class="NDLRefMemberDetailedDescription">If this entity has not overridden, this will cause a new property to be created and bound to the entity to store the contents of data.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">propID</span></td>
    <td>The PropertyID to assign data to. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_strValue</span></td>
    <td>A string that contains a text representation of the value that the property should be set to. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A PropertyResult value indicating the operation's status. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a1ab227ccac328d1bef5a861aac85c278"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">PropertyResult</a></span>  SetPropertyValueByString(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& i_strPropName, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& i_strValue)</p>
<p class="NDLRefMemberDescription">Type safely sets the value of this entity's specified property to the specified string value. </p>
<p class="NDLRefMemberDetailedDescription">If this entity has not overridden, this will cause a new property to be created and bound to the entity to store the contents of data.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_strPropName</span></td>
    <td>The string name of the property to assign data to. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_strValue</span></td>
    <td>A string that contains a text representation of the value that the property should be set to. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A PropertyResult value indicating the operation's status. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a5dcf44880fedb18a6b2872448bda712c"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">PropertyResult</a></span>  SetPropertyValueByString(<br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1af08acbbc1a28c9e4ee8dfb501449dc28">PropertyID</a></span> propID, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& i_strKey, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& i_strValue)</p>
<p class="NDLRefMemberDescription">Type safely sets the value, by key, of this entity's specified property to the specified string value. </p>
<p class="NDLRefMemberDetailedDescription">If this entity has not overridden, this will cause a new property to be created and bound to the entity to store the contents of data.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">propID</span></td>
    <td>The PropertyID to assign data to. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_strKey</span></td>
    <td>The key for the data item to set in an Assoc property. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_strValue</span></td>
    <td>A string that contains a text representation of the value that the property should be set to. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A PropertyResult value indicating the operation's status. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a0724e745706b37a12164c7d7ff623f47"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">PropertyResult</a></span>  SetPropertyValueByString(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& i_strPropName, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& i_strKey, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& i_strValue)</p>
<p class="NDLRefMemberDescription">Type safely sets the value, by key, of this entity's specified property to the specified string value. </p>
<p class="NDLRefMemberDetailedDescription">If this entity has not overridden, this will cause a new property to be created and bound to the entity to store the contents of data.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_strPropName</span></td>
    <td>The name of the property to assign data to. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_strKey</span></td>
    <td>The key for the data item to set in an Assoc property. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_strValue</span></td>
    <td>A string that contains a text representation of the value that the property should be set to. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A PropertyResult value indicating the operation's status. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a37f3d93f08bed68dbd503f9ae082d5a6"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">PropertyResult</a></span>  HasPropertyValue(<span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1af08acbbc1a28c9e4ee8dfb501449dc28">PropertyID</a></span> i_propID) const</p>
<p class="NDLRefMemberDescription">Checks whether the given property is valid for this entity. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_propID</span></td>
    <td>The ID of the property to check. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A PropertyResult value indicating the operation's status. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a565c739035bd4e61c62fd2e908b71106"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">PropertyResult</a></span>  HasPropertyValue(<br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1af08acbbc1a28c9e4ee8dfb501449dc28">PropertyID</a></span> i_propID, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& i_strKey) const</p>
<p class="NDLRefMemberDescription">Checks whether a property key with the given name exists for the given associative property. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_propID</span></td>
    <td>The ID of the property to check. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_strKey</span></td>
    <td>The key for the data item to check in an Assoc property. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A PropertyResult value indicating the operation's status. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a4b3b93a4f62263cc271bc09e9532f84c"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">PropertyResult</a></span>  HasPropertyValue(const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& i_strPropName) const</p>
<p class="NDLRefMemberDescription">Checks whether the given property is valid for this entity. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_strPropName</span></td>
    <td>The name of the property to check. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A PropertyResult value indicating the operation's status. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1ac1173eb57d1c39ff13f327fdda54b50a"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">PropertyResult</a></span>  HasPropertyValue(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& i_strPropName, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& i_strKey) const</p>
<p class="NDLRefMemberDescription">Checks whether a property key with the given name exists for the given associative property. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_strPropName</span></td>
    <td>The name of the property to check. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_strKey</span></td>
    <td>The key for the data item to check in an Assoc property. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A PropertyResult value indicating the operation's status. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a4acc8bff66d08b3102dd158cf93af235"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  IsDirty(<span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1af08acbbc1a28c9e4ee8dfb501449dc28">PropertyID</a></span> propID) const</p>
<p class="NDLRefMemberDescription">Checks if the specified property is locally dirty. </p>
<p class="NDLRefMemberDetailedDescription">Properties become locally dirty whenever a property value is set through SetPropertyValue or SetPropertyValueByString or reset using ResetProperty. The dirty flag is cleared by the <span class="NDLSystemFont"><a href="egf__EntityManager.htm">egf::EntityManager</a></span> during its OnTick once the local entity update notification message has been sent out.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">propID</span></td>
    <td>: The ID of the property to check. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the property is dirty. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1ac34283dfa178168b42714a648b3ce961"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  IsDirty(const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& propName) const</p>
<p class="NDLRefMemberDescription">Checks if the specified property is locally dirty. </p>
<p class="NDLRefMemberDetailedDescription">Properties become locally dirty whenever a property value is set through SetPropertyValue or SetPropertyValueByString or reset using ResetProperty. The dirty flag is cleared by the <span class="NDLSystemFont"><a href="egf__EntityManager.htm">egf::EntityManager</a></span> during its OnTick once the local entity update notification message has been sent out.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">propName</span></td>
    <td>The name of the property to check. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the property is dirty. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1af46c59e0251b2b399b5ea2dbd43e2416"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsPropertyOverridden(<span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1af08acbbc1a28c9e4ee8dfb501449dc28">PropertyID</a></span> pid) const</p>
<p class="NDLRefMemberDescription">Return true if the property has an overridden (non-default) value. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pid</span></td>
    <td>the property to check. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>true if the property is overridden, false if not. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1ab9aad691d610dff5121d499f74dcd6e0"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">PropertyResult</a></span>  ResetProperty(<span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1af08acbbc1a28c9e4ee8dfb501449dc28">PropertyID</a></span> propID)</p>
<p class="NDLRefMemberDescription">Reset a property to the default value. </p>
<p class="NDLRefMemberDetailedDescription">The default value is the value specified in the final flat model used to create this entity and does not reflect any overrides specified in the block file.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">propID</span></td>
    <td>The ID of the property to reset. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A PropertyResult value indicating the operation's status. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a9c72bf40777ba6e7f734d73807a485d0"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">PropertyResult</a></span>  ResetProperty(const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& propName)</p>
<p class="NDLRefMemberDescription">Reset a property to the default value. </p>
<p class="NDLRefMemberDetailedDescription">The default value is the value specified in the final flat model used to create this entity and does not reflect any overrides specified in the block file.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">propName</span></td>
    <td>The name of the property to reset. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A PropertyResult value indicating the operation's status. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1ac371d75dc2f86b4ee0a3212759504630"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">PropertyResult</a></span>  ResetAllProperties()</p>
<p class="NDLRefMemberDescription">Reset all overridden properties to their default value. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>A PropertyResult value indicating the operation's status. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1aa5fee93f880a90c41a10ddd377e00332"></a>
<p class="NDLRefMemberFunction">template &lt;typename T  &gt; <span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">PropertyResult</a></span>  IncrementPropertyValue(<br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1af08acbbc1a28c9e4ee8dfb501449dc28">PropertyID</a></span> propID, <br/>T& data, <br/>T increment_value = 1)</p>
<p class="NDLRefMemberDescription">Attempts to increment given property. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">propID</span></td>
    <td>The PropertyID to increment. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">data</span></td>
    <td>A reference to a variable of type T that the incremented value of the property should be assigned to. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">increment_value</span></td>
    <td>The amount to increment by. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A PropertyResult value indicating the operation's status. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1abadac0217887b2d86f790afaacc6e351"></a>
<p class="NDLRefMemberFunction">template &lt;typename T  &gt; <span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">PropertyResult</a></span>  IncrementPropertyValue(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& propName, <br/>T& data, <br/>T increment_value = 1)</p>
<p class="NDLRefMemberDescription">Attempts to increment given property. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">propName</span></td>
    <td>The name of the property to increment. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">data</span></td>
    <td>A reference to a variable of type T that the incremented value of the property should be assigned to. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">increment_value</span></td>
    <td>The amount to increment by. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A PropertyResult value indicating the operation's status. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a19ca2a5056e87636a2c3ceaae1e77fac"></a>
<p class="NDLRefMemberFunction">template &lt;typename T  &gt; <span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">PropertyResult</a></span>  DecrementPropertyValue(<br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1af08acbbc1a28c9e4ee8dfb501449dc28">PropertyID</a></span> propID, <br/>T& data, <br/>T decrement_value = 1)</p>
<p class="NDLRefMemberDescription">Attempts to decrement given property. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">propID</span></td>
    <td>The PropertyID to decrement. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">data</span></td>
    <td>A reference to a variable of type T that the decremented value of the property should be assigned to. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">decrement_value</span></td>
    <td>The amount to decrement by. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A PropertyResult value indicating the operation's status. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1ae7e1356bf8c68850e9319dd1b5d6c5d5"></a>
<p class="NDLRefMemberFunction">template &lt;typename T  &gt; <span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">PropertyResult</a></span>  DecrementPropertyValue(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& propName, <br/>T& data, <br/>T decrement_value = 1)</p>
<p class="NDLRefMemberDescription">Attempts to decrement given property. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">propName</span></td>
    <td>The name of the property to decrement. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">data</span></td>
    <td>A reference to a variable of type T that the decremented value of the property should be assigned to. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">decrement_value</span></td>
    <td>The amount to decrement by. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A PropertyResult value indicating the operation's status. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a75663710f5ad62907425ac0e496b965d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">PropertyResult</a></span>  RemovePropertyValue(<br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1af08acbbc1a28c9e4ee8dfb501449dc28">PropertyID</a></span> propID, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& key)</p>
<p class="NDLRefMemberDescription">Type safely removes a value, by key, from this entity's specified associative property. </p>
<p class="NDLRefMemberDetailedDescription">If this entity has not overridden the property from that of the flat model, a new property will be created and bound to the entity to store the changed data.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">propID</span></td>
    <td>The property ID to remove the value from </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">key</span></td>
    <td>A reference to a variable of type T that contains the value that the property should be set to. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A PropertyResult value indicating the operation's status. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a71bb7f3dbe29d3c5ea2f711276945956"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">PropertyResult</a></span>  RemovePropertyValue(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& propName, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& key)</p>
<p class="NDLRefMemberDescription">Type safely removes a value, by key, from this entity's specified associative property. </p>
<p class="NDLRefMemberDetailedDescription">If this entity has not overridden the property from that of the flat model, a new property will be created and bound to the entity to store the changed data.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">propName</span></td>
    <td>The name of the property to remove the value from </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">key</span></td>
    <td>A reference to a variable of type T that contains the value that the property should be set to. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A PropertyResult value indicating the operation's status. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a090ac274cc5d6f03bd7e75ee71433229"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  ApplyProperties(<span class="NDLSystemFont"><a href="../efd/efd__ParameterList.htm">efd::ParameterList</a></span>* pParameterList)</p>
<p class="NDLRefMemberDescription">Transfer properties from a parameter list to the entity. </p>
<p class="NDLRefMemberDetailedDescription">The parameter names must match properties on the current entity and the parameter types must match the property types. </p>

<a name="classegf_1_1_entity_1aa44394b11761b5e9b035e9cbce4bef23"></a>
<p class="NDLRefMemberFunction">void  BuiltinPropertyChanged(<br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1af08acbbc1a28c9e4ee8dfb501449dc28">PropertyID</a></span> propID, <br/><span class="NDLSystemFont"><a href="egf__IBuiltinModel.htm">IBuiltinModel</a></span>* prop)</p>
<p class="NDLRefMemberDescription">Sets the specified property as being dirty as result of a direct manipulation of a built-in model. </p>
<p class="NDLRefMemberDetailedDescription">Do not call this when a built-in model property is changing due to normal <span class="NDLSystemFont"><a href="egf__IBuiltinModel.htm">IBuiltinModel</a></span> API calls, only call this if the property value is being directly manipulated outside of a normal <span class="NDLSystemFont">Entity</span> property APIs.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">propID</span></td>
    <td>The ID of the property. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">prop</span></td>
    <td>Pointer to the builtin model that exposed the property. </td>
</tr>

        </tbody>
    </table>
</div>


<a name="behavior_system_methods"></a>
<p class="NDLRefHead1">Behavior System Methods</p>


<a name="classegf_1_1_entity_1a59f07ced8461143fc34df0d3d599a961"></a>
<p class="NDLRefMemberFunction">void  InsertBehavior(<span class="NDLSystemFont"><a href="egf__PendingBehavior.htm">PendingBehavior</a></span>* pPend)</p>
<p class="NDLRefMemberDescription">Insert a behavior directly on the queue. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pPend</span></td>
    <td>Pointer to the pending behavior event. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a82d27feb15fe8d1f94c755b308d96f42"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  CallImmediateBehavior(<br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a1ebd2b58de9ca508c04d80dea3644fcb">BehaviorID</a></span> id, <br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a1df4e70ceef104ead07333c2a8cf0df8">FlatModelID</a></span> mixinModelID = 0, <br/><span class="NDLSystemFont"><a href="../efd/efd__ParameterList.htm">efd::ParameterList</a></span>* pArgs = 0, <br/><span class="NDLSystemFont"><a href="egf__EventID.htm">EventID</a></span> eventID = 0, <br/><span class="NDLSystemFont"><a href="egf__EntityID.htm">EntityID</a></span> returnID = 0)</p>
<p class="NDLRefMemberDescription">Immediately execute a behavior. </p>
<p class="NDLRefMemberDetailedDescription">The behavior must have the Immediate trait, which also means the behavior cannot be a blocking behavior.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">A successful return result only indicates that a valid behavior was found and invoked. It does not imply that the behavior itself was able to successfully run.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">id</span></td>
    <td>The ID of the behavior to execute. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">mixinModelID</span></td>
    <td>A model that must be mixed in for this behavior to be valid. Can be zero in which case no mix-in restriction is enforced. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pArgs</span></td>
    <td>Pointer to the streamed arguments for the behavior. This pointer can be NULL if the behavior takes no arguments. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">eventID</span></td>
    <td>The ID of the event that triggered the behavior. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">returnID</span></td>
    <td>ID of the entity to send the return value to. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if behavior was successfully executed, false if an error occurred. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1ad8738b84a3fbd46ad11afea6bce46c24"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  CallImmediateBehavior(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& behaviorName, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& mixinModelName = efd::utf8string::NullString(), <br/><span class="NDLSystemFont"><a href="../efd/efd__ParameterList.htm">efd::ParameterList</a></span>* pArgs = 0, <br/><span class="NDLSystemFont"><a href="egf__EventID.htm">EventID</a></span> eventID = 0, <br/><span class="NDLSystemFont"><a href="egf__EntityID.htm">EntityID</a></span> returnID = 0)</p>
<p class="NDLRefMemberDescription">Immediately execute a behavior. </p>
<p class="NDLRefMemberDetailedDescription">The behavior must have the Immediate trait, which also means the behavior cannot be a blocking behavior.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">A successful return result only indicates that a valid behavior was found and invoked. It does not imply that the behavior itself was able to successfully run.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">behaviorName</span></td>
    <td>The name of the behavior to execute. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">mixinModelName</span></td>
    <td>A model that must be mixed in for this behavior to be valid. This can be an empty string in which case no mix-in restriction is enforced. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pArgs</span></td>
    <td>Pointer to the streamed arguments for the behavior. This pointer can be NULL if the behavior takes no arguments. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">eventID</span></td>
    <td>The ID of the event that triggered the behavior. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">returnID</span></td>
    <td>ID of the entity to send the return value to. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if behavior was successfully invoked, false if an error occurred. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a34bada5572e3a7bc38b39e72123b02ee"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  AddPendingBehavior(const <span class="NDLSystemFont"><a href="egf__EventMessage.htm">EventMessage</a></span>* pMessage)</p>
<p class="NDLRefMemberDescription">Add a behavior to the queue of those awaiting execution. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMessage</span></td>
    <td>Pointer to the event message that is invoking the behavior. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if behavior added successfully, false if error (behavior not found in this entity's model). </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1adc3a3e81d3334fd3703508f8ceb3cfc2"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  AddPendingBehavior(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& behaviorName, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& mixinModelName, <br/><span class="NDLSystemFont"><a href="../efd/efd__ParameterList.htm">efd::ParameterList</a></span>* pArgs = 0, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a37c593debc73d82d7ddc571c725f0e2d">efd::TimeType</a></span> executionTime = 0.0, <br/><span class="NDLSystemFont"><a href="egf__EventID.htm">EventID</a></span> eventID = 0, <br/><span class="NDLSystemFont"><a href="egf__EntityID.htm">EntityID</a></span> returnID = 0)</p>
<p class="NDLRefMemberDescription">Add a behavior to the queue of those awaiting execution. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">behaviorName</span></td>
    <td>The name of the behavior to execute. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">mixinModelName</span></td>
    <td>A model that must be mixed in for this behavior to be valid. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pArgs</span></td>
    <td>Pointer to the streamed arguments for the behavior. This pointer can be NULL if the behavior takes no arguments. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">executionTime</span></td>
    <td>The time, in seconds, at which the behavior should execute. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">eventID</span></td>
    <td>The ID of the event that triggered the behavior. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">returnID</span></td>
    <td>ID of the entity to send the return value to. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if behavior added successfully, false if error (behavior not found in this entity's model). </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1ab1006e3efc0752900c709485af9b137c"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  AddPendingBehavior(<br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a1ebd2b58de9ca508c04d80dea3644fcb">BehaviorID</a></span> id, <br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a1df4e70ceef104ead07333c2a8cf0df8">FlatModelID</a></span> mixinModelID, <br/><span class="NDLSystemFont"><a href="../efd/efd__ParameterList.htm">efd::ParameterList</a></span>* pArgs = 0, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a37c593debc73d82d7ddc571c725f0e2d">efd::TimeType</a></span> executionTime = 0.0, <br/><span class="NDLSystemFont"><a href="egf__EventID.htm">EventID</a></span> eventID = 0, <br/><span class="NDLSystemFont"><a href="egf__EntityID.htm">EntityID</a></span> returnID = 0)</p>
<p class="NDLRefMemberDescription">Add a behavior to the queue of those awaiting execution. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">id</span></td>
    <td>The ID of the behavior to execute. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">mixinModelID</span></td>
    <td>A model that must be mixed in for this behavior to be valid. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pArgs</span></td>
    <td>Pointer to the streamed arguments for the behavior. This pointer can be NULL if the behavior takes no arguments. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">executionTime</span></td>
    <td>The time in seconds that the behavior should execute. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">eventID</span></td>
    <td>The ID of the event that triggered the behavior. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">returnID</span></td>
    <td>ID of the entity to send the return value to. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if behavior added successfully, false if error (behavior not found in this entity's model). </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1aa7ccc7c341de7f7896cd80beb94ca159"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  AddPendingBehavior(<br/>const <span class="NDLSystemFont"><a href="egf__BehaviorDescriptor.htm">BehaviorDescriptor</a></span>* spBehavior, <br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a1df4e70ceef104ead07333c2a8cf0df8">FlatModelID</a></span> mixinModelID, <br/><span class="NDLSystemFont"><a href="../efd/efd__ParameterList.htm">efd::ParameterList</a></span>* pArgs = 0, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a37c593debc73d82d7ddc571c725f0e2d">efd::TimeType</a></span> executionTime = 0.0, <br/><span class="NDLSystemFont"><a href="egf__EventID.htm">EventID</a></span> eventID = 0, <br/><span class="NDLSystemFont"><a href="egf__EntityID.htm">EntityID</a></span> returnID = 0)</p>
<p class="NDLRefMemberDescription">Add a behavior to the queue of those awaiting execution. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">spBehavior</span></td>
    <td>Const pointer of the behavior to execute. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">mixinModelID</span></td>
    <td>A model that must be mixed in for this behavior to be valid. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pArgs</span></td>
    <td>Pointer to the streamed arguments for the behavior. This pointer can be NULL if the behavior takes no arguments. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">executionTime</span></td>
    <td>The time in seconds that the behavior should execute. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">eventID</span></td>
    <td>The ID of the event that triggered the behavior. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">returnID</span></td>
    <td>ID of the entity to send the return value to. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if behavior added successfully, false if error (behavior not found in this entity's model). </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a64c3bc3aad55692fe34fb6887d642636"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  RemovePendingBehavior(const <span class="NDLSystemFont"><a href="egf__EventMessage.htm">EventMessage</a></span>* pMessage)</p>
<p class="NDLRefMemberDescription">Remove a behavior from the queue of those awaiting execution. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMessage</span></td>
    <td>Pointer to the event message that is canceling the pending behavior. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if behavior removed/cancelled successfully, false if error (behavior not found). </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a40ee71c9ca7c679f8f5d444b12885dda"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  RemovePendingBehavior(<span class="NDLSystemFont"><a href="egf__EventID.htm">EventID</a></span> eventID)</p>
<p class="NDLRefMemberDescription">Remove a behavior to the queue of those awaiting execution. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">eventID</span></td>
    <td>The ID of the behavior event that should be removed. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if behavior removed/cancelled successfully, false if error (behavior not found). </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a8776df71e68cfbbbfe54497d7f9bf5fc"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  IsBehaviorPending(<span class="NDLSystemFont"><a href="egf__EventID.htm">EventID</a></span> id) const</p>
<p class="NDLRefMemberDescription">Method to test if a behavior exists on the pending queue. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">id</span></td>
    <td>The event ID of the behavior to find. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the behavior is pending. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1ac331447abb7a5e7a4d3fd0d5ab3bb63d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  HasPendingBehaviors() const</p>
<p class="NDLRefMemberDescription">Determine if any behaviors are pending on this entity. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>Bool True if any behaviors are pending, false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a131d0448903f095c6fd434c94ef008e1"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  HasExecutingBehaviors() const</p>
<p class="NDLRefMemberDescription">Determine if any behaviors are executing on this entity. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>Bool True if any behaviors are pending, false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a74fbe0f5a2e8571754ca6a874d286aa5"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  HasActiveBehaviors() const</p>
<p class="NDLRefMemberDescription">Determine if any behaviors are pending or executing on this entity. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>Bool True if any behaviors are pending or executing, false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a7474886680cfeaca2709cf50255012d8"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  StartBehavior(<span class="NDLSystemFont"><a href="egf__PendingBehavior.htm">PendingBehavior</a></span>* pBehavior)</p>
<p class="NDLRefMemberDescription">Whenever a behavior is about to begin on the entity this method is called. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pBehavior</span></td>
    <td>The behavior that is about to execute. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Return true to allow the behavior to run, or false to skip execution </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1aa0e2d7a71ad297d2cc0323eefaedc908"></a>
<p class="NDLRefMemberFunction">void  FinishEvent(<br/><span class="NDLSystemFont"><a href="egf__PendingBehavior.htm">PendingBehavior</a></span>* pBehavior, <br/><span class="NDLSystemFont">bool</span> success)</p>
<p class="NDLRefMemberDescription">Whenever a behavior completes whether successfully or through an error this method is called to perform any required cleanup. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pBehavior</span></td>
    <td>The behavior that has either completed, been cancelled or failed. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">success</span></td>
    <td>True if the behavior ran to completion, false if it was cancelled or failed. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1adb25f34f6645753930cd054c54461001"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  IsOwned() const</p>
<p class="NDLRefMemberDescription">Return the test of the flag bit for owned for this entity. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>True if entity is owned by a scheduler, false if it is a replication (not writable). </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a8affd441fda78e7c1ea046ff8185df27"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  IsCreated() const</p>
<p class="NDLRefMemberDescription">Return the test of the flag bit for creation for this entity. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>True if entity is has successfully completed creation. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a4f31d94c6a7113244fba1d353797a453"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  IsInWorld() const</p>
<p class="NDLRefMemberDescription">Return the test of the flag bit for in-world for this entity. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>True if entity is currently in the world. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a48a8a06a242d330d8a0d223d2bc6f4b2"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  IsDestroyInProgress() const</p>
<p class="NDLRefMemberDescription">Return the test of the flag bit for destroying for this entity. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>True if entity is in the process of being destroyed or has been destroyed. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1abf4cf1b374d5c7c0fd088554db391d67"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  IsBehaviorInvokeValid(<span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a1ebd2b58de9ca508c04d80dea3644fcb">BehaviorID</a></span> i_bid)</p>
<p class="NDLRefMemberDescription">Test if it is valid to execute a given behavior on the entity. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_bid</span></td>
    <td>The ID of the behavior to check if execution is valid. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the given behavior is valid to execute on this entity. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1ab4218aef7a38831e2827dcb43f218774"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  IsBehaviorInvokeValid(<br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a1ebd2b58de9ca508c04d80dea3644fcb">BehaviorID</a></span> bid, <br/><span class="NDLSystemFont"><a href="egf__Scheduler.htm">egf::Scheduler</a></span>* psim, <br/><span class="NDLSystemFont">bool</span> expectSuccess = false, <br/><span class="NDLSystemFont">bool</span> isViewEvent = false)</p>
<p class="NDLRefMemberDescription">Test if it is valid to execute a given behavior on the entity. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">bid</span></td>
    <td>The ID of the behavior to check if execution is valid. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">psim</span></td>
    <td>A pointer to the simulator to ask if execution is valid. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">expectSuccess</span></td>
    <td>If true, an error will be logged if this method returns false. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">isViewEvent</span></td>
    <td>If true, failure due to the "view only" trait will not log an error. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the given behavior is valid to execute on this entity. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1adbc714d181933e268682d27bf0811db2"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  IsBehaviorInvokeValid(<br/>const <span class="NDLSystemFont"><a href="egf__BehaviorDescriptor.htm">BehaviorDescriptor</a></span>* pBehavior, <br/><span class="NDLSystemFont"><a href="egf__Scheduler.htm">egf::Scheduler</a></span>* psim, <br/><span class="NDLSystemFont">bool</span> expectSuccess = false, <br/><span class="NDLSystemFont">bool</span> isViewEvent = false)</p>
<p class="NDLRefMemberDescription">Test if it is valid to execute a given behavior on the entity. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pBehavior</span></td>
    <td>Pointer to the behavior to check if execution is valid. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">psim</span></td>
    <td>A pointer to the simulator to ask if execution is valid. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">expectSuccess</span></td>
    <td>If true, an error will be logged if this method returns false. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">isViewEvent</span></td>
    <td>If true, failure due to the "view only" trait will not log an error. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the given behavior is valid to execute on this entity. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a7425a77269bc592172a18813bf27dbff"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="egf__Scheduler.htm">egf::Scheduler</a></span>*  GetExecutor() const</p>
<p class="NDLRefMemberDescription">Gets a the pointer to the <span class="NDLSystemFont"><a href="egf__Scheduler.htm">Scheduler</a></span> that controls behaviors for this entity. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>Pointer to scheduler instance for this entity. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1adebd017cc8a0027581245ca8824637b0"></a>
<p class="NDLRefMemberFunction">void  SetExecutor(<span class="NDLSystemFont"><a href="egf__Scheduler.htm">egf::Scheduler</a></span>* pSim)</p>
<p class="NDLRefMemberDescription">Sets the pointer to our "owner" scheduler, the scheduler that is allowed to execute behaviors on this entity. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">This must only be called to set an executer to the same scheduler that this entity is stored in.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pSim</span></td>
    <td>Pointer to scheduler instance that owns this entity. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a90d67c58c836c2bda4bf139ef06bc583"></a>
<p class="NDLRefMemberFunction">virtual void  HandleMessage(<br/>const <span class="NDLSystemFont"><a href="egf__EventMessage.htm">EventMessage</a></span>* pMsg, <br/><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span> targetChannel)</p>
<p class="NDLRefMemberDescription">Behavior invocation requests are delivered here. </p>
<p class="NDLRefMemberDetailedDescription">In turn we simply pass them to the scheduler to be processed.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMsg</span></td>
    <td>Pointer to the message that needs to be handled. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">targetChannel</span></td>
    <td>Channel that the message arrived on. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a8b0009fded0ae9c4dc9e7f6d46922832"></a>
<p class="NDLRefMemberFunction">void  SetEntityCreateCallbackBehavior(<br/>const <span class="NDLSystemFont"><a href="egf__EntityID.htm">egf::EntityID</a></span>& entityId, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& behavior)</p>
<p class="NDLRefMemberDescription">Set the name of a behavior to invoke when the entity with the provided EntityId is created. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">entityId</span></td>
    <td>EntityId for the entity we're waiting for. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">behavior</span></td>
    <td>Name of the behavior to invoke when the entity arrives. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a94541e02fea6f20a27a4b5c68b6b145d"></a>
<p class="NDLRefMemberFunction">virtual void  HandleEntityFactoryResponse(<br/>const <span class="NDLSystemFont"><a href="egf__EntityFactoryResponse.htm">egf::EntityFactoryResponse</a></span>* pMsg, <br/><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span> )</p>
<p class="NDLRefMemberDescription"><span class="NDLSystemFont"><a href="egf__EntityFactoryResponse.htm">EntityFactoryResponse</a></span> messages are delivered here. </p>
<p class="NDLRefMemberDetailedDescription">These are created in response to a <span class="NDLSystemFont"><a href="../Namespaces/BehaviorAPI.htm#namespace_behavior_a_p_i_1ac9bc1e9e5c1fd4fa81ed8782cbcb3087">BehaviorAPI::CreateEntity</a></span> call. If the script registered a callback behavior during this call, this handler will send an event to ourselves.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMsg</span></td>
    <td>EntityFactoryMessage instance to handle. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a4bdf43044db71f5932dcca9d030c33b2"></a>
<p class="NDLRefMemberFunction">void  SetOwned(<span class="NDLSystemFont">efd::Bool</span> ownFlag)</p>
<p class="NDLRefMemberDescription">Sets the flag that this entity is owned by a scheduler (whether or not it is actively executing OnTick()s). </p>
<p class="NDLRefMemberDetailedDescription">This flag set indicates that properties may be altered within behaviors executed by this scheduler.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">ownFlag</span></td>
    <td>True if a scheduler owns this entity, false if the entity exists only as a replication. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_1a3d8a933e79b53a2e5ad1c682bec4dbaf"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  QueuePendingBehavior(<br/>const <span class="NDLSystemFont"><a href="egf__BehaviorDescriptor.htm">BehaviorDescriptor</a></span>* pBehavior, <br/><span class="NDLSystemFont"><a href="../efd/efd__ParameterList.htm">efd::ParameterList</a></span>* spArgs, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a37c593debc73d82d7ddc571c725f0e2d">efd::TimeType</a></span> executionTime, <br/><span class="NDLSystemFont"><a href="egf__EventID.htm">EventID</a></span> eventID, <br/><span class="NDLSystemFont"><a href="egf__EntityID.htm">EntityID</a></span> returnID, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> lifeCycleAdvanceOnCompletion = 0)</p>
<p class="NDLRefMemberDescription">Apply supermodel invocation order policies and queue resulting behaviors. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pBehavior</span></td>
    <td>Pointer of the behavior to execute. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">spArgs</span></td>
    <td>Pointer to the streamed arguments for the behavior. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">executionTime</span></td>
    <td>The time, in seconds, at which the behavior should execute. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">eventID</span></td>
    <td>The ID of the event that triggered the behavior. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">returnID</span></td>
    <td>ID of the entity to send the return value to. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">lifeCycleAdvanceOnCompletion</span></td>
    <td>When set, indicates this behavior advances the specified entity lifecycle on completion. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if one or more behaviors were queued </td>
</tr>

        </tbody>
    </table>
</div>


 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
