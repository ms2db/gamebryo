<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>egf::EntityFactory</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">egf::EntityFactory</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../efd/efd__BaseAssetFactory.htm">efd::BaseAssetFactory</a></span></p>


<p class="NDLRefHeaderFile">&lt;EntityFactory.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classegf_1_1_entity_factory.gif" alt="Inheritance graph for egf::EntityFactory"/>
  <p class="FigureCaption">Inheritance graph for egf::EntityFactory</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">An IAssetFactory that takes an <span class="NDLSystemFont"><a href="egf__EntityFactoryRequest.htm">EntityFactoryRequest</a></span> and attempts to load the flat model from disk and create a <span class="NDLSystemFont"><a href="egf__Entity.htm">Entity</a></span> instance. </p>
<p class="NDLNormal">The result of this request is returned using an <span class="NDLSystemFont"><a href="egf__EntityFactoryResponse.htm">EntityFactoryResponse</a></span>. All mix in models that are not already registered with the <span class="NDLSystemFont"><a href="egf__FlatModelManager.htm">FlatModelManager</a></span> are also added to the response.</p>
<p class="NDLNormal">Callers to EntityLoader::LoadAsset are responsible for looking up and setting the asset path to the underlying flat model file in the <span class="NDLSystemFont"><a href="egf__EntityFactoryRequest.htm">EntityFactoryRequest</a></span>.</p>
<p class="NDLNormal">The <span class="NDLSystemFont">EntityFactory</span> is not typically called directly. Instead, it responds to a request from the AssetFactoryManager to load a particular asset. The AssetFactoryManager is responsible for locating the fully qualified path using the provided URN and setting this value in the <span class="NDLSystemFont"><a href="egf__EntityFactoryRequest.htm">EntityFactoryRequest</a></span> object.</p>
<p class="NDLNormal">For mix in models, the EntityLoader uses <span class="NDLSystemFont"><a href="egf__FlatModelFactory.htm">FlatModelFactory</a></span>, which in turn directly uses the AssetLocatorService directly to locate mix in underlying flat model file fully qualified paths.</p>
<p class="NDLNormal">The caller is responsible for allocating and deallocating the EnityFactoryRequest.</p>
<p class="NDLNormal">The <span class="NDLSystemFont">EntityFactory</span> allocates the response, it is the callers responsibility to deallocate it.</p>
<p class="NDLNormal">The <span class="NDLSystemFont">EntityFactory</span> does not add the resulting Entities to the <span class="NDLSystemFont"><a href="egf__EntityManager.htm">EntityManager</a></span> nor any flat model(s) to the <span class="NDLSystemFont"><a href="egf__FlatModelManager.htm">FlatModelManager</a></span>. The caller is responsible for doing so if required. </p>

<a name="construction_and_destruction"></a>
<p class="NDLRefHead1">Construction and Destruction</p>


<a name="classegf_1_1_entity_factory_1abef9328bf56c4914a4cd195e57b28510"></a>
<p class="NDLRefMemberFunction">EntityFactory(<span class="NDLSystemFont"><a href="egf__FlatModelFactory.htm">egf::FlatModelFactory</a></span>* fmLoader)</p>
<p class="NDLRefMemberDescription">Construct a new EntityLoader. </p>
<p class="NDLRefMemberDetailedDescription">The EntityLoader uses an egf::FlatModelLoader to load required flat models. It use the <span class="NDLSystemFont"><a href="egf__FlatModelManager.htm#classegf_1_1_flat_model_manager_1ae957cbfc586b54bd47fabb0a21fd274b">FlatModelManager::FactoryEntity</a></span> method to factory the resulting <span class="NDLSystemFont"><a href="egf__Entity.htm">Entity</a></span> pointer.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">fmLoader</span></td>
    <td><span class="NDLSystemFont"><a href="egf__FlatModelFactory.htm">FlatModelFactory</a></span> used to load flat model files. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_factory_1a788d8c9623d4be3c2fc37b0fbac22a9f"></a>
<p class="NDLRefMemberFunction">~EntityFactory()</p>
<p class="NDLRefMemberDescription">Cleanup any open resources. </p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classegf_1_1_entity_factory_1a9cb78841a917a20f648b03727e28802c"></a>
<p class="NDLRefMemberFunction">IAssetFactory::LoadStatus  LoadAsset(<br/><span class="NDLSystemFont"><a href="../efd/efd__AssetFactoryManager.htm">efd::AssetFactoryManager</a></span>* pFactoryManager, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__AssetLoadRequest.htm">efd::AssetLoadRequest</a></span>* pRequest, <br/><span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::AssetLoadResponsePtr</a></span>& ppResponse)</p>
<p class="NDLRefMemberDescription">Attempt to load an entity. </p>
<p class="NDLRefMemberDetailedDescription">If the loader is processing a URN and a new request arrives for that same URN, the loader will not attempt to load them simultaneously. Instead, LoadAsset returns IAssetFactory::LOAD_BLOCKED to indicate the request was blocked. The caller can make the same request again later.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription"><span class="NDLSystemFont"><a href="../efd/efd__IAssetFactory.htm#classefd_1_1_i_asset_factory_1a0724c480863f94648ecba9d81c98b262">efd::IAssetFactory::LoadStatus</a></span> for further details.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pFactoryManager</span></td>
    <td>The AssetFactoryManager instance invoking this function. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pRequest</span></td>
    <td>asset load request. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">ppResponse</span></td>
    <td>asset load response allocated by this factory. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>IAssetFactory::LoadStatus status of this load. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_entity_factory_1af3fc6c82f321c48b086a472110ea5cdc"></a>
<p class="NDLRefMemberFunction">virtual IAssetFactory::ThreadSafetyDescription  GetThreadSafety() const</p>
<p class="NDLRefMemberDescription">Thread status description. </p>
<p class="NDLRefMemberDetailedDescription">This loader is thread safe for foreground or background use. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
