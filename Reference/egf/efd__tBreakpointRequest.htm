<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::tBreakpointRequest</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::tBreakpointRequest</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="efd__BreakpointRequest.htm">efd::BreakpointRequest</a></span></p>


<p class="NDLRefHeaderFile">&lt;BreakpointMessages.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classefd_1_1t_breakpoint_request.gif" alt="Inheritance graph for efd::tBreakpointRequest"/>
  <p class="FigureCaption">Inheritance graph for efd::tBreakpointRequest</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">A templated breakpoint request. </p>
<p class="NDLNormal">The template argument is the behavior owner's identity type. e.g. <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">utf8string</a></span> for model names, <span class="NDLSystemFont"><a href="../efd/EntityID.htm">EntityID</a></span> for entities, etc.</p>
<p class="NDLNormal">Usage: tBreakpointRequest&lt;EntityID, kMSGID_InsertEntityBreakpoint&gt; </p>

<a name="public_attributes"></a>
<p class="NDLRefHead1">Public Attributes</p>


<a name="classefd_1_1t_breakpoint_request_1aa402e1c7b38fb2cb68dcb182f2955d3d"></a>
<p class="NDLRefMemberFunction">T  m_identity</p>
<p class="NDLRefMemberFunction"></p>
<a name="public_static_methods"></a>
<p class="NDLRefHead1">Public Static Methods</p>


<a name="classefd_1_1t_breakpoint_request_1a766d804f75832e2b5f254923ffad84ee"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::IBasePtr</a></span>  FactoryMsg()</p>
<p class="NDLRefMemberFunction"></p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classefd_1_1t_breakpoint_request_1a0a89abd55ba0f4f87e0d207a4e6ae044"></a>
<p class="NDLRefMemberFunction">tBreakpointRequest()</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1t_breakpoint_request_1a4f4493beecfb350ce27c776e6017b08d"></a>
<p class="NDLRefMemberFunction">tBreakpointRequest(<br/>const T& identity, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& behaviorName, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span>& callback = efd::kCAT_INVALID)</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1t_breakpoint_request_1aa1dc46ea0a32078a5d916a70d5c4a239"></a>
<p class="NDLRefMemberFunction">virtual void  ToStream(<span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">efd::DataStream</a></span>& strm) const</p>
<p class="NDLRefMemberDescription">Write this class into a stream of atomic types. </p>
<p class="NDLRefMemberDetailedDescription">If the class does not contains any data, such as a pure event class, then is it recommended and safe to add nothing to the stream.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">strm</span></td>
    <td>The stream to write the class into. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1t_breakpoint_request_1a08dde4d7030af5d987f82a1624c0b345"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  FromStream(const <span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">efd::DataStream</a></span>& strm)</p>
<p class="NDLRefMemberDescription">Read this class from the stream of atomic types and recreate the class. </p>
<p class="NDLRefMemberDetailedDescription">If the class does not contains any data, such as a pure event class, then is it recommended and safe to have an empty stream. In that case this method should simple return true.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">strm</span></td>
    <td>The stream to read the class from.</td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>true if successful, false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>


 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
