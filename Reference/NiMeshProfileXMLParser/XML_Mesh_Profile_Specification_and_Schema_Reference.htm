<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>XML Mesh Profile Specification and Schema Reference</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->

<!--(Begin Links)===================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>XML Mesh Profile Specification and Schema Reference</h1>

<p>In this section, the syntax and layout of the XML file
expected by the <span class=
"NDLSystemFont">NiMeshProfileXMLParser</span> library is
described. Additionally, details concerning how the XML is used
to generate in-memory mesh profile operations are given.</p>

<h4>&lt;?xml version="1.0" encoding="utf-8"?&gt;</h4>

<p>An XML file used to define one or more mesh profiles should
begin with the above XML declaration.</p>

<h4>&lt;MeshProfiles version="1"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:noNamespaceSchemaLocation="./NiMeshProfileSchema.xsd"&gt;</h4>

<p>As the <span class=
"NDLSystemFont">NiMeshProfileXMLParser</span> library allows for
multiple profiles to be defined within a single file, the first
tag expected is the <span class=
"NDLSystemFont">MeshProfiles</span> tag. Within this block, one
or more mesh profiles will be defined. The "<span class=
"NDLSystemFont">NiMeshProfileSchema.xsd</span>" is referenced to
help validate the XML, however, it is important to note that the
<span class="NDLSystemFont">NiMeshProfileXMLParser</span> library
itself does not validate against this schema. It uses its
internal validation methods. The schema, therefore, is used only
for highlighting errors as they are made within XML editors.</p>

<h4>&lt;Element [<em>Attributes</em>]&gt;</h4>

<p>Within the <span class="NDLSystemFont">MeshProfiles</span>
block, one or more <span class="NDLSystemFont">Element</span>
blocks may be defined. Element blocks are used to control how
specific data should be converted or formatted. When elements are
defined at this level (within the <span class=
"NDLSystemFont">MeshProfiles</span> block), those elements are
being defined at a global scope. This is an important point
because the <span class=
"NDLSystemFont">NiMeshProfileXMLParser</span> may read several
XML files and conflicts will occur between files if the elements
are defined at this scope more than once. In general, global
scope element definitions should be defined in a single place.
For example, Gamebryo provides the file "<span class=
"NDLSystemFont">GamebryoDefaultElements.xml</span>" which is used
specifically to define the most commonly desired formats and
conversions for various elements. A specific mesh profile may
override these element definitions as will be seen later. The
<span class="NDLSystemFont">Element</span> tag has the following
attributes:</p>
<!--(Table)=========================================================-->

<table>
    <thead>
        <tr>
            <th>Attribute</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>name</td>

            <td>Used to specify a semantic name of the given
            element. If this attribute is not specified, then the
            name is constructed using the <em>type</em> and
            <em>index</em> attributes. If the <em>index</em>
            attribute is missing or is 0, the name is constructed
            directly from the <em>type</em> attribute. If the
            <em>type</em> attribute is not present, an error will
            occur. The resulting name (either specified or
            constructed) may be referenced within the XML.</td>
        </tr>

        <tr>
            <td>type</td>

            <td>
                Used to correspond the element to one of the
                <span class="NDLSystemFont"><a href=
                "../../Reference/NiMain/NiCommonSemantics.htm">NiCommonSemantics::Enumeration</a></span>s.
                This represents the semantic name if a common one
                is desired. If a non standard semantic is
                desired, do not use this attribute. When this
                attribute is used it has priority over the
                semantic name described in the name attribute.
                This is useful for making sure that plug-ins that
                reference common semantics will function
                properly. The valid values for this attribute
                are:

                <ul>
                    <li><span class=
                    "NDLSystemFont">BINORMAL</span></li>

                    <li><span class=
                    "NDLSystemFont">BINORMAL_BP</span></li>

                    <li><span class=
                    "NDLSystemFont">BLENDINDICES</span></li>

                    <li><span class=
                    "NDLSystemFont">BLENDWEIGHT</span></li>

                    <li><span class=
                    "NDLSystemFont">BONEMATRICIES</span></li>

                    <li><span class=
                    "NDLSystemFont">BONE_PALETTE</span></li>

                    <li><span class=
                    "NDLSystemFont">COLOR</span></li>

                    <li><span class=
                    "NDLSystemFont">INDEX</span></li>

                    <li><span class=
                    "NDLSystemFont">MORPHWEIGHTS</span></li>

                    <li><span class=
                    "NDLSystemFont">NORMAL</span></li>

                    <li><span class=
                    "NDLSystemFont">NORMALSHAREGROUP</span></li>

                    <li><span class=
                    "NDLSystemFont">NORMALSHAREINDEX</span></li>

                    <li><span class=
                    "NDLSystemFont">NORMAL_BP</span></li>

                    <li><span class=
                    "NDLSystemFont">POSITION</span></li>

                    <li><span class=
                    "NDLSystemFont">POSITIONT</span></li>

                    <li><span class=
                    "NDLSystemFont">POSITION_BP</span></li>

                    <li><span class=
                    "NDLSystemFont">TANGENT</span></li>

                    <li><span class=
                    "NDLSystemFont">TANGENT_BP</span></li>

                    <li><span class=
                    "NDLSystemFont">TEXCOORD</span></li>
                </ul>
            </td>
        </tr>

        <tr>
            <td>index</td>

            <td>Used to specify the index that is to be used for
            the semantic name for this element. If this attribute
            is omitted, the default value is 0.</td>
        </tr>

        <tr>
            <td>range</td>

            <td>Used to specify that the element definition
            should apply to a range of indices for the semantic.
            This attribute allows the XML author to avoid having
            to specify an individual element tag for each
            possible index. It will be seen in succeeding blocks
            that globally defined element definitions can be
            referenced, but it is important to note here that
            when a global element is referenced, then that
            reference must also specify the range or else only
            the first index value of the range will be
            honored.</td>
        </tr>

        <tr>
            <td>convertformat</td>

            <td>
                Used to specify that each of the element's
                components should be converted to a particular
                data-type if not already of that type. The types
                that can be specified are listed below and
                correspond to the types found in <span class=
                "NDLSystemFont"><a href=
                "../../Reference/NiMesh/NiDataStreamElement.htm">NiDataStreamElement</a>::Type</span>.

                <ul>
                    <li><span class=
                    "NDLSystemFont">FLOAT16</span></li>

                    <li><span class=
                    "NDLSystemFont">FLOAT32</span></li>

                    <li><span class=
                    "NDLSystemFont">INT16</span></li>

                    <li><span class=
                    "NDLSystemFont">INT32</span></li>

                    <li><span class=
                    "NDLSystemFont">INT8</span></li>

                    <li><span class=
                    "NDLSystemFont">UINT16</span></li>

                    <li><span class=
                    "NDLSystemFont">UINT32</span></li>

                    <li><span class=
                    "NDLSystemFont">UINT8</span></li>
                </ul>Note that the element's component count will
                not change. For example, if the element has a
                format of <span class="NDLSystemFont"><a href=
                "../../Reference/NiMesh/NiDataStreamElement.htm">F_FLOAT32_4</a></span>
                and specifies the <em>convertformat</em> to have
                a value of "<span class=
                "NDLSystemFont">INT32</span>", then the resulting
                format will be <span class=
                "NDLSystemFont"><a href=
                "../../Reference/NiMesh/NiDataStreamElement.htm">F_INT32_4</a></span>.
                In other words, it will have 4 components. If
                this attribute is omitted, then the element is
                assumed to be in the desired format and no
                conversion takes place. Finally, this attribute
                cannot be used with the <em>specialformat</em>
                attribute. The two attributes are mutually
                exclusive.
            </td>
        </tr>

        <tr>
            <td>converttype</td>

            <td>
                Used in conjunction with the
                <em>convertformat</em> attribute in order to
                specify how conversions should take place. The
                four possible values for this attribute are:

                <ul>
                    <li><span class=
                    "NDLSystemFont">BLINDCAST</span></li>

                    <li><span class=
                    "NDLSystemFont">NORMALIZE</span></li>

                    <li><span class=
                    "NDLSystemFont">TYPECLAMP</span></li>

                    <li><span class=
                    "NDLSystemFont">SMARTCAST</span></li>
                </ul>These values correspond to the casting type
                enumerations allowed by the <a href=
                "../NiMeshProfileProcessor/Introduction_to_NiMeshProfileProcessor.htm#Mesh_Profile_Operations">
                Cast-Convert</a> operation of the <span class=
                "NDLSystemFont">NiMeshProfileProcessor</span>
                library. In the absence of the
                <em>converttype</em> attribute, the default value
                is "<span class="NDLSystemFont">TYPECLAMP</span>"
                which indicates that out of range values should
                be clamped to the minimum and maximize ranges of
                the destination data-type.
            </td>
        </tr>

        <tr>
            <td>specialformat</td>

            <td>
                Used to specify one of several special formats.
                When using the <em>specialformat</em> attribute,
                the <em>convertformat</em> and
                <em>converttype</em> attributes should not be
                used. They are mutually exclusive. The possible
                values of the <em>specialformat</em> attribute
                are:

                <ul>
                    <li><span class=
                    "NDLSystemFont">UINT_10_10_10_L1</span></li>

                    <li><span class=
                    "NDLSystemFont">NORMINT_10_10_10_L1</span></li>

                    <li><span class=
                    "NDLSystemFont">NORMINT_11_11_10</span></li>

                    <li><span class=
                    "NDLSystemFont">NORMINT_10_10_10_2</span></li>

                    <li><span class=
                    "NDLSystemFont">UINT_10_10_10_2</span></li>

                    <li><span class=
                    "NDLSystemFont">NORMUINT8_4_BGRA</span></li>
                </ul>These values correspond to the similarly
                named formats found in <span class=
                "NDLSystemFont"><a href=
                "../../Reference/NiMesh/NiDataStreamElement.htm">NiDataStreamElement</a>::Format</span>.<br>

                <br>
                With the exception of <span class=
                "NDLSystemFont">NORMUINT8_4_BGRA</span>, any of
                the above values indicates that a <a href=
                "../NiMeshProfileProcessor/Introduction_to_NiMeshProfileProcessor.htm#Mesh_Profile_Operations">
                Component Pack</a> operation should occur. In the
                case of <span class=
                "NDLSystemFont">NORMUINT8_4</span>, a <a href=
                "../NiMeshProfileProcessor/Introduction_to_NiMeshProfileProcessor.htm#Mesh_Profile_Operations">
                Merge and Swizzle</a> operation occurs, followed
                by a <a href=
                "../NiMeshProfileProcessor/Introduction_to_NiMeshProfileProcessor.htm#Mesh_Profile_Operations">
                Reinterpret Format</a> operation.
            </td>
        </tr>

        <tr>
            <td>renderer</td>

            <td>
                Used to specify for which renderer this element
                definition is intended. The possible values are:

                <ul>
                    <li><span class=
                    "NDLSystemFont">All</span></li>

                    <li><span class=
                    "NDLSystemFont">D3D10</span></li>

                    <li><span class=
                    "NDLSystemFont">D3D11</span></li>

                    <li><span class=
                    "NDLSystemFont">DX9</span></li>

                    <li><span class=
                    "NDLSystemFont">PS3</span></li>

                    <li><span class=
                    "NDLSystemFont">XENON</span></li>

                </ul>The default value for this attribute, if not
                specified, is "<span class=
                "NDLSystemFont">All</span>".
            </td>
        </tr>

        <tr>
            <td>required</td>

            <td>
                Used to specify the behavior for when the given
                element cannot be found. The possible values are:

                <ul>
                    <li><span class=
                    "NDLSystemFont">NOT_REQUIRED</span></li>

                    <li><span class=
                    "NDLSystemFont">REQUIRED_FAIL</span></li>
                </ul>When <span class=
                "NDLSystemFont">REQUIRED_FAIL</span> is
                specified, an error will be reported if the
                element cannot be found on the given mesh. The
                default value for this attribute is <span class=
                "NDLSystemFont">NOT_REQUIRED</span>, which
                indicates that it is acceptable if the element
                cannot be found.<br>
                <br>
                Note that requiring the existence of data streams
                may be necessary in some circumstances. For
                example, one might wish to ensure that normals,
                binormals, and tangents elements exist because
                the material that has been applied to the mesh
                requires those data-stream elements.
            </td>
        </tr>

        <tr>
            <td>strict</td>

            <td>
                Used to specify whether or not it is acceptable
                if portions of the element definition are not
                met. If the element is not strict about its
                definition, this setting will enable mesh
                modifiers to tweak the definition to meet their
                own requirements (see <a href=
                "../NiMeshProfileProcessor/Introduction_to_NiMeshProfileProcessor.htm#Merging_Mesh_Modifier_Requirements_into_Profiles">
                merging mesh modifier requirements</a> for more
                information).<br>
                <br>
                The <em>strict</em> attribute allows either or
                both of the following values to be specified (to
                specify both, it is only necessary to include
                both strings for the attribute value with
                whatever delimiter is desired):

                <ul>
                    <li><span class=
                    "NDLSystemFont">STRICT_FORMAT</span></li>

                    <li><span class=
                    "NDLSystemFont">STRICT_INTERLEAVE</span></li>
                </ul><span class=
                "NDLSystemFont">STRICT_FORMAT</span> indicates
                that the format cannot change and moreover, if
                the format specified by this element is not met,
                then an error should be reported.<br>
                <br>
                <span class=
                "NDLSystemFont">STRICT_INTERLEAVE</span>
                specifies that the element must exist in a stream
                exactly as defined; otherwise an error should
                occur.<br>
                <br>
                The default is for neither strictness value to be
                applied.
            </td>
        </tr>
    </tbody>
</table>

<h4>&lt;Component [<em>Attributes</em>]/&gt;</h4>

<p>Within an Element block, 1 through 4 components of an element
may be specified. By specifying the components explicitly, the
components can be rearranged (swizzled), combined with other
element components (merged), or even removed. It is important to
note that this tag generates operations that occur prior to the
operations generated by the Element tags attributes. For example,
the operations that are performed as a result of the
<em>converttype</em> and <em>specialformat</em> attributes will
occur after the operations generated by this tag.</p>

<p>The Component tag may contain the following attributes:</p>
<!--(Table)=========================================================-->

<table>
    <thead>
        <tr>
            <th>Attribute</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>value</td>

            <td>
                Used to reference an element component or specify
                a literal value. The attribute value may include
                references to streams that have been renamed.<br>
                <br>
                Component specifications can be given using one
                of the following conventions:

                <ul>
                    <li><span class="NDLSystemFont"><b>x, y, z,
                    w</b></span><br>
                    Example: <span class=
                    "NDLSystemFont">&lt;Component
                    value="BINORMAL</span>.<span class=
                    "NDLSystemFont"><b>x</b> /&gt;</span></li>

                    <li><span class="NDLSystemFont"><b>0, 1, 2,
                    3</b></span><br>
                    Example: <span class=
                    "NDLSystemFont">&lt;Component
                    value="BLENDWEIGHT</span>.<span class=
                    "NDLSystemFont"><b>0</b> /&gt;</span></li>

                    <li><span class="NDLSystemFont"><b>u,
                    v</b></span><br>
                    Example: <span class=
                    "NDLSystemFont">&lt;Component
                    value="TEXCOORD</span>.<span class=
                    "NDLSystemFont"><b>u</b> /&gt;</span></li>

                    <li><span class="NDLSystemFont"><b>r, g, b,
                    a</b></span><br>
                    Example: <span class=
                    "NDLSystemFont">&lt;Component
                    value="COLOR</span>.<span class=
                    "NDLSystemFont"><b>r</b> /&gt;</span></li>
                </ul>When dealing with ranges, the <b>[]</b>
                convention must be used as in:<br>
                <br>
                <span class="NDLSystemFont">&lt;Component
                value="COLOR<b>[]</b>.r"/&gt;</span><br>
                <br>
                Sometimes it is necessary to inject a new
                component to ensure the component count is
                correct for other operations. This step may be
                accomplished by introducing a literal value as in
                the following:<br>
                <br>
                <span class="NDLSystemFont">&lt;Component
                value="<b>1</b>"/&gt;</span><br>
                <br>
                Finally, the attribute value is a required
                attribute as there is no acceptable default
                value.
            </td>
        </tr>

        <tr>
            <td>clamp</td>

            <td>Used to clamp the component value to a specific
            minimum and maximum range. The value of the clamp
            attribute must be in the format "<span class=
            "NDLSystemFont">min x max y</span>", where x and y
            represent literal values. <span class=
            "NDLSystemFont">NiMeshProfileXMLParser</span> will
            always construct the clamp operation such that it
            occurs prior to the remap operation (if specified).
            For more information, see the <a href=
            "../NiMeshProfileProcessor/Introduction_to_NiMeshProfileProcessor.htm#Mesh_Profile_Operations">
            Clamp</a> operation.</td>
        </tr>

        <tr>
            <td>remap</td>

            <td>Used to remap the value of the component using
            source and destination ranges. The value of the remap
            attribute must be in the format of "<span class=
            "NDLSystemFont">src-a a1 src-b b1 dst-a a2 dst-b
            b2</span>", where a1, b1, a2, and b2 represent
            literal values. Inversion is possible. It is
            important to note that <span class=
            "NDLSystemFont">NiMeshProfileXMLParser</span> will
            always construct the remap operation such that it
            occurs after the clamp operation (if specified). For
            more information, see the <a href=
            "../NiMeshProfileProcessor/Introduction_to_NiMeshProfileProcessor.htm#Mesh_Profile_Operations">
            Remap</a> operation.</td>
        </tr>
    </tbody>
</table>

<p>As a final note, the <span class=
"NDLSystemFont">NiMeshProfileXMLParser</span> will always
construct a <a href=
"../NiMeshProfileProcessor/Introduction_to_NiMeshProfileProcessor.htm#Mesh_Profile_Operations">
Merge and Swizzle</a> operation, regardless if any merging and
swizzling are actually performed. Moreover, this operation will
always occur after clamping and remapping have been performed on
each of the components (if such has been specified).</p>

<h4>&lt;MeshProfile [<em>Attributes</em>]&gt;</h4>

<p>Within the <span class="NDLSystemFont">MeshProfiles</span>
(plural) block, one or more <span class=
"NDLSystemFont">MeshProfile</span> (not plural) blocks may be
defined. These blocks give a specific definition of a mesh
profile. The <span class="NDLSystemFont">MeshProfile</span> tag
may contain any of the following attributes:</p>
<!--(Table)=========================================================-->

<table>
    <thead>
        <tr>
            <th>Attribute</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>name</td>

            <td>Used to specify a unique name for the profile. If
            omitted, will default to the name "Default"</td>
        </tr>

        <tr>
            <td>description</td>

            <td>Used to specify a description of the profile
            which may be displayed by exporters and tools to give
            a user information about the profile. If this
            attribute is omitted, the default setting is no
            description.</td>
        </tr>

        <tr>
            <td>recomputenormals</td>

            <td>Used to specify if recomputing normals should be
            done as a post process in the <em>finalize</em>
            stage. The attribute value may be either "true" or
            "false". The default value is "false", indicating
            that normals should not be recomputed.<br>
            <br>
            Note that this attribute is primarily useful only if
            the profile has been authored such that it alters the
            positional data, since the positional data is used to
            calculate normals. For example, one can imagine that
            the "<span class="NDLSystemFont">POSITION</span>"
            stream may have been scaled using the remap
            functionality. In this situation, the normals would
            need to be recalculated since the positional data had
            changed. It should be noted that in order to
            recompute the normals, both the "<span class=
            "NDLSystemFont">POSITION</span>" and "<span class=
            "NDLSystemFont">NORMAL</span>" data stream elements
            must exists on the mesh.</td>
        </tr>

        <tr>
            <td>keepUnspecifiedFinalizeStreams</td>

            <td>Used to specify in the context of the
            <em>finalize</em>
            stage whether or not to remove data-streams that have
            not been declared in the finalize portion of the mesh
            profile. The attribute value may be either "true" or
            "false". The default value is "<span class=
            "NDLSystemFont">false</span>", which indicates that
            any unspecified data-streams on the mesh during the
            finalize stage should be removed.</td>
        </tr>
    </tbody>
</table>

<p>In most cases, only a unique name and a description needs to
be provided.</p>

<h4>&lt;FinalizeStream [<em>Attributes</em>]&gt;</h4>

<p>Within a <span class="NDLSystemFont">MeshProfile</span> block,
one or more <span class="NDLSystemFont">FinalizeStream</span>
blocks may be defined. A <span class=
"NDLSystemFont">FinalizeStream</span> block defines how elements
should be packed into a single data-stream, how those elements
are transformed, and how various data-stream characteristics
should be set - all within the context of the <em>Finalize</em>
stage.</p>
<!--(Table)=========================================================-->

<table>
    <thead>
        <tr>
            <th>Attribute</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>name</td>

            <td>Used to specify a unique name for the stream that
            can be referenced within the context of the XML file.
            This attribute is required, and there is no default
            provided.</td>
        </tr>

        <tr>
            <td>access</td>

            <td>
                Used to specify the <em>access</em> of the
                data-stream. The value for <em>access</em> may
                contain any of the following strings (any
                delimiter may be used) and corresponds to the
                access flags in <span class=
                "NDLSystemFont"><a href=
                "../../Reference/NiMesh/NiDataStream.htm">NiDataStream</a>::Access</span>:

                <ul>
                    <li><span class=
                    "NDLSystemFont">CPU_READ</span></li>

                    <li><span class=
                    "NDLSystemFont">CPU_WRITE_MUTABLE</span></li>

                    <li><span class=
                    "NDLSystemFont">CPU_WRITE_STATIC</span></li>

                    <li><span class=
                    "NDLSystemFont">CPU_WRITE_VOLATILE</span></li>

                    <li><span class=
                    "NDLSystemFont">GPU_READ</span></li>

                    <li><span class=
                    "NDLSystemFont">GPU_WRITE</span></li>
                </ul>As an example, the profile could assign
                <em>access</em> to have the following value:<br>
                <br>
                "<span class="NDLSystemFont">CPU_READ |
                CPU_WRITE_STATIC | GPU_READ</span>"<br>
                 <br>
                The default, if the attribute is omitted, is to
                inherit the access flags from the input stream.
            </td>
        </tr>

        <tr>
            <td>usage</td>

            <td>
                Used to specify the <em>usage</em> of the
                data-stream. The value for <em>usage</em> must be
                assigned to one of the following values:

                <ul>
                    <li><span class=
                    "NDLSystemFont">USAGE_USER</span></li>

                    <li><span class=
                    "NDLSystemFont">USAGE_VERTEX</span></li>

                    <li><span class=
                    "NDLSystemFont">USAGE_VERTEX_INDEX</span></li>
                </ul>If the <em>usage</em> attribute is omitted,
                then the default is to inherit the usage type
                from the input streams. (Note, however, that this
                assumes all packed elements have the same usage.
                Hence, errors will be reported at runtime if
                there is an attempt to pack multiple elements
                having different usage types).
            </td>
        </tr>

        <tr>
            <td>renderer</td>

            <td>
                Used to specify the renderer for which the stream
                definition is intended. The valid values for the
                <em>renderer</em> attribute are:

                <ul>
                    <li><span class=
                    "NDLSystemFont">All</span></li>

                    <li><span class=
                    "NDLSystemFont">D3D10</span></li>

                    <li><span class=
                    "NDLSystemFont">D3D11</span></li>

                    <li><span class=
                    "NDLSystemFont">DX9</span></li>

                    <li><span class=
                    "NDLSystemFont">PS3</span></li>

                    <li><span class=
                    "NDLSystemFont">XENON</span></li>

                </ul>If the <em>renderer</em> attribute is
                omitted, then the value of "<span class=
                "NDLSystemFont">All</span>" is used as the
                default.
            </td>
        </tr>
    </tbody>
</table>

<h4>&lt;Element [<em>Attributes</em>]&gt;</h4>

<p>Within a <span class="NDLSystemFont">FinalizeStream</span>
block, any number of <span class="NDLSystemFont">Element</span>
blocks may be defined. This arrangement reflects the fact that
interleaving (packing multiple elements into a single
data-stream) is allowed during the Finalize stage.</p>

<p>An <span class="NDLSystemFont">Element</span> within a
<span class="NDLSystemFont">FinalizeStream</span> block has the
exact same syntax as <span class="NDLSystemFont">Element</span>
blocks defined in the <span class=
"NDLSystemFont">MeshProfiles</span> scope, with one exception.
The exception is that the profile author can choose to
<em>reference</em> an already existing <span class=
"NDLSystemFont">Element</span> block that has been defined at the
global scope. For example, the following syntax could be used to
reference <span class="NDLSystemFont">POSITION</span>, which has
been defined at the global scope:</p>

<p><span class=
"NDLSystemFont">&lt;Element&gt;POSITION&lt;/Element&gt;</span></p>

<p>In the event that the <span class=
"NDLSystemFont">Element</span> block fully describes an element
that has already been defined at the global scope, then the new
definition will override the global definition.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
