<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiRoom</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiRoom</p>

<p class="NDLRefParentage">: public <span><a href=
"../../Reference/NiMain/NiNode.htm">NiNode</a></span></p>

<p class="NDLRefHeaderFile">&lt;NiRoom.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiRoom</span> objects represent
the "cells" in a cell-portal culling system. While <span class=
"NDLSystemFont"><a href="NiPortal.htm">NiPortal</a></span>
objects generally represent doorways or windows between adjacent
rooms in an interior scene, <span class=
"NDLSystemFont">NiRoom</span> objects represent the rooms
themselves. More specifically, an <span class=
"NDLSystemFont">NiRoom</span> object represents the convex region
in space that bounds (with a set of planes) a room in an interior
scene, along with references to the windows and doors (portals)
that look out of (and into) that room. The planes that bound the
room allow the cell-portal system to determine very quickly which
room (if any) in the scene contains the camera (or any other
object of interest).</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiRoom()</p>

<p class="NDLRefMemberDescription">Default constructor.
Constructs an empty room with no bounding planes and no
portals.</p>

<p class="NDLRefHead1">Static Member Functions</p>

<p class="NDLRefMemberFunction">static unsigned int
GetCurrentTimestamp()</p>

<p class="NDLRefMemberFunction">static void
SetCurrentTimestamp(unsigned int uiTimestamp)</p>

<p class="NDLRefMemberDescription">These functions get and set
the global timestamp, which is used by the <span class=
"NDLSystemFont">NiRoom</span> system to "mark" a room when it is
drawn. Whenever a room is drawn successfully (i.e. it is not
culled), the current timestamp value is copied into the room's
timestamp value. Applications opting to use the timestamp system
should manually increment this value each frame, or as often as
desired. See the notes below for information on the timestamp
system.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction"><a href=
"../../Reference/NiMain/NiTPrimitiveArray.htm">NiTPrimitiveArray</a>&lt;<a href="NiRoom.htm#NiRoom__Wall">
Wall</a>*&gt;&amp; GetWallArray()</p>

<p class="NDLRefMemberDescription">Retrieves the editable array
of all <span class="NDLSystemFont">Wall</span> objects that bound
the room. See the notes below for a discussion of <span class=
"NDLSystemFont">Wall</span> objects.</p>

<p class="NDLRefMemberFunction">const NiPortalList&amp;
GetOutgoingPortalList() const</p>

<p class="NDLRefMemberDescription">Retrieves the list of portals
that define ways of seeing out of the room. An <span class=
"NDLSystemFont">NiPortalList</span> object is defined in
<span class="NDLSystemFont">NiPortal.h</span> as <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMain/NiTPointerList.htm">NiTPointerList</a>&lt;<a href="NiPortal.htm">
NiPortalPtr</a>&gt;</span>.</p>

<p class="NDLRefMemberFunction">void
AttachOutgoingPortal(<a href="NiPortal.htm">NiPortal</a>*
pkPortal)</p>

<p class="NDLRefMemberFunction"><a href=
"NiPortal.htm">NiPortalPtr</a> DetachOutgoingPortal(<a href=
"NiPortal.htm">NiPortal</a>* pkPortal)</p>

<p class="NDLRefMemberDescription">Attach and detach the given
portal as a way of seeing out of the room. Will not attach more
than one pointer to a given portal at once (it avoids attaching
multiple references to the same portal). <span class=
"NDLSystemFont">DetachOutgoingPortal</span> returns the given
portal unless it was not found in the room, in which case it
returns <span class="NDLSystemFont">NULL</span> .</p>

<p class="NDLRefMemberFunction">const NiPortalList&amp;
GetIncomingPortalList() const</p>

<p class="NDLRefMemberDescription">Retrieves the list of portals
that define ways of seeing into the room. See the "Notes" below
for a discussion of incoming portals. An <span class=
"NDLSystemFont">NiPortalList</span> object is defined in
<span class="NDLSystemFont">NiPortal.h</span> as <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMain/NiTPointerList.htm">NiTPointerList</a>&lt;<a href="NiPortal.htm">
NiPortalPtr</a>&gt;</span>.</p>

<p class="NDLRefMemberFunction">void
AttachIncomingPortal(<a href="NiPortal.htm">NiPortal</a>*
pkPortal)</p>

<p class="NDLRefMemberFunction"><a href=
"NiPortal.htm">NiPortalPtr</a> DetachIncomingPortal(<a href=
"NiPortal.htm">NiPortal</a>* pkPortal)</p>

<p class="NDLRefMemberDescription">Attach and detach the given
portal as a way of seeing into the room. Will not attach more
that one pointer to a given portal at once. <span class=
"NDLSystemFont">DetachIncomingPortal</span> returns the given
portal unless it was not found in the room, in which case it
returns <span class="NDLSystemFont">NULL</span>. See the "Notes"
below for a discussion of incoming portals.</p>

<p class="NDLRefMemberFunction">const NiAVObjectList&amp;
GetFixtureList() const</p>

<p class="NDLRefMemberDescription">Retrieves the list of interior
objects in the room. See the notes below for a discussion of
fixtures. An <span class="NDLSystemFont">NiAVObjectList</span>
object is defined in <span class="NDLSystemFont">NiRoom.h</span>
as <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiTPointerList.htm">NiTPointerList</a>&lt;<a href="../../Reference/NiMain/NiAVObject.htm">
NiAVObjectPtr</a>&gt;</span>.</p>

<p class="NDLRefMemberFunction">void AttachFixture(<a href=
"../../Reference/NiMain/NiAVObject.htm">NiAVObject</a>*
pkFixture)</p>

<p class="NDLRefMemberFunction"><a href=
"../../Reference/NiMain/NiAVObject.htm">NiAVObjectPtr</a>
DetachFixture(<a href=
"../../Reference/NiMain/NiAVObject.htm">NiAVObject</a>*
pkFixture)</p>

<p class="NDLRefMemberDescription">Attach and detach the given
<span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiAVObject.htm">NiAVObject</a></span>
from the interior of the room. Will not attach more than one
pointer to a given object at one time. <span class=
"NDLSystemFont">DetachFixturePortal</span> returns the given
object unless it was not found in the room, in which case it
returns <span class="NDLSystemFont">NULL</span>. See the notes
below for a discussion of fixtures.</p>

<p class="NDLRefMemberFunction">bool ContainsPoint(const <a href=
"../../Reference/NiMain/NiPoint3.htm">NiPoint3</a>&amp; kPoint)
const</p>

<p class="NDLRefMemberDescription">Returns <span class=
"NDLSystemFont">true</span> if the given world-space point is
inside the room (as defined by its walls), or <span class=
"NDLSystemFont">false</span> if not.</p>

<p class="NDLRefMemberFunction">unsigned int
GetLastRenderedTimestamp() const</p>

<p class="NDLRefMemberDescription">Returns the timestamp (set
above using the static function <span class=
"NDLSystemFont">NiRoom::SetCurrentTimestamp</span>) that was
active when the room was last rendered. See the notes below for a
discussion of timestamps.</p>

<p class="NDLRefHead1">Nested Classes</p>

<a name="NiRoom__Wall" id="NiRoom__Wall"></a><p class="NDLRefHead2">NiRoom::Wall</p>

<pre>
class Wall : public NiMemObject
{
public:
    NiPlane m_kModelPlane;
    NiPlane m_kWorldPlane;
};
</pre>

<p><span class="NDLSystemFont">NiRoom::Wall</span> objects
represent the planes that bound an <span class=
"NDLSystemFont">NiRoom</span> object. Users of <span class=
"NDLSystemFont">NiRoom</span> generally use only the <span class=
"NDLSystemFont">m_kModelPlane</span> data member&mdash;this
member is an inward-facing model-space bound of a room.
Collectively, a set of these define an <span class=
"NDLSystemFont">NiRoom</span> object's region by bounding the
space it fills. The room's space is the set of points for which
all of its planes return non-negative values. The <span class=
"NDLSystemFont">m_kWorldPlane</span> member is a derived
value&mdash;applications need not set this, as it will be updated
with each call to Update upon the <span class=
"NDLSystemFont">NiRoom</span> object containing the given
<span class="NDLSystemFont">Wall</span> object.</p>

<p class="NDLRefHead1">Notes</p>

<p class="NDLRefHead2">Accumulators and Rooms</p>

<p>Sorting (Accumulators) can change the order in which objects
are rendered with respect to the order originally generated by
culling, so applications relying on rooms to control draw
ordering should take care when using sorting via accumulators.
Because portal-based culling occurs well prior to accumulation,
there is no direct interaction between the systems.</p>

<p class="NDLRefHead2">Wall Usage</p>

<p>Applications may add and remove walls as needed&mdash;however,
any <span class="NDLSystemFont">Wall</span> object that is
referenced by an <span class="NDLSystemFont">NiRoom</span>
object's wall array is owned and managed by that <span class=
"NDLSystemFont">NiRoom</span> object, and will be deleted by the
room when the room itself is deleted. Applications removing a
Wall from an <span class="NDLSystemFont">NiRoom</span> object are
responsible for the deletion of that <span class=
"NDLSystemFont">Wall</span> object. Applications should call
Update upon the room or an ancestor prior to rendering after
adding or removing a wall from an <span class=
"NDLSystemFont">NiRoom</span> object.</p>

<p class="NDLRefHead2">Fixtures</p>

<p>A fixture is any scene graph that contains geometry
representing the visible aspects of a room&mdash;its interior
walls, floor, ceiling, and furniture/contents. Fixtures are drawn
after all of a room's portals are drawn (since in most cases, the
objects seen through a room's portals are more distant than the
contents of the room itself).</p>

<p class="NDLRefHead2">Incoming Portal List</p>

<p>The incoming portals for a room are designed to be an optional
efficiency enhancement. When a room draws its outgoing portals,
it disables its incoming portals before doing so. This works
under the assumption that once the "view rays" leave a room
through a portal, they cannot reenter. This is based on the
simple geometric observation that if one assumes rooms do not
overlap, then a point leaving a convex region in a constant
linear direction cannot ever reenter the region. As a result,
there is no need to do any processing involving the incoming
portals.</p>

<p class="NDLRefHead2">Timestamps</p>

<p>The timestamp system is designed to allow advanced
applications to track the culling and rendering behavior of their
cell-portal scenes. Whenever any <span class=
"NDLSystemFont">NiRoom</span> object is rendered (i.e. is found
to be visible during a culling pass), that <span class=
"NDLSystemFont">NiRoom</span> object's local timestamp is set to
the current value of the global timestamp set by the application.
Applications must increment this timestamp manually, but may do
so at any desired frequency. This can be useful in determining
which parts of a portal scene are being actively visited at any
given time. By changing the timestamp every frame, an application
can determine which rooms were visible in the last frame. By
changing the timestamp only once (at the beginning of a level),
the application can determine if any rooms were never visible
during a particular session. Note that these values are
historical&mdash;they do not predict which rooms will be drawn in
the next frame, only which rooms were drawn in the last
frame.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
