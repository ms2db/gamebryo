<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Portals and Collision Detection</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Portals and Collision Detection</h1>

<p>Collision detection can be done efficiently in a large room
group by creating a collision group for each room. All of the
walls and fixtures for each room should be added to the room's
collision group. For each dynamic object in the scene, add the
object to only a single collision group - whichever group
corresponds to the room that contains the center point of the
object:</p>

<p><span class=
"NDLSystemFont">pkRoomGroup-&gt;WhichRoom(pkObject-&gt;GetWorldBound().GetCenter())</span></p>

<p>Whenever an object moves, simply check to see which room
contains the object. If the new room containing the object is not
the same as the previous room that contained it, remove the
object from the old collision group and add it to the new
one.</p>

<p>This trick will need to be modified somewhat if accurate
collisions between dynamic objects on opposite sides of a portal
are desired (i.e. a collision that happens in a doorway itself).
To achieve this, an object may need to be added to multiple
collision groups if its bounding volume intersects more than a
single room. If this is the case and the object is in multiple
collision groups, multiple callbacks for that object may need to
be resolved, also. In addition, static geometry near a portal
should be moved away from a portal or somehow added to the
multiple collision groups. One may also want to group several
rooms together to help resolve some of these issues. Grouping
rooms into a single <span class="NDLSystemFont"><a href=
"NiRoom.htm">NiRoom</a></span> object is also a good idea when
the rooms are sparsely populated or are very easy to see through,
because the cost of processing the portals between the rooms may
be greater than just drawing all of them.</p>

<p>Next Section: <a href="NiPortal.htm">Portals Class
Reference</a></p>

<p>Previous: <a href=
"Portals_and_Avoiding_Backbuffer_Clears.htm">Portals and Avoiding
Backbuffer Clears</a></p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
