<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::LogServiceResponse</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::LogServiceResponse</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../efd/efd__StreamMessage.htm">efd::StreamMessage</a></span></p>


<p class="NDLRefHeaderFile">&lt;LogServiceMessages.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classefd_1_1_log_service_response.gif" alt="Inheritance graph for efd::LogServiceResponse"/>
  <p class="FigureCaption">Inheritance graph for efd::LogServiceResponse</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">Base class for all responses to log service request messages. </p>
<p class="NDLNormal">This class defines the result codes for operations executed against the Log Service. It also contains the netId of the respondent. </p>

<a name="public_types"></a>
<p class="NDLRefHead1">Public Types</p>
<a name="classefd_1_1_log_service_response_1a6fcb182e2d47cd622cc75c1d2429ce10"></a>
<p class=NDLRefHead2>efd::LogServiceResponse::Result</p>




<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">lsr_Unknown</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">lsr_Success</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">lsr_Failure</span></td>
    <td>&nbsp;</td>
</tr>

  </tbody>
</table>
</div>


<a name="public_attributes"></a>
<p class="NDLRefHead1">Public Attributes</p>


<a name="classefd_1_1_log_service_response_1a1686b8394544cd0c595e0292fed2e77d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  m_netid</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_log_service_response_1ad9c2c2e163137271374fcb461f10f995"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="efd__LogServiceResponse.htm#classefd_1_1_log_service_response_1a6fcb182e2d47cd622cc75c1d2429ce10">Result</a></span>  m_result</p>
<p class="NDLRefMemberFunction"></p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classefd_1_1_log_service_response_1a5ba14227273b6de53aa332e23dcbedc7"></a>
<p class="NDLRefMemberFunction">LogServiceResponse()</p>
<p class="NDLRefMemberDescription">Constructor. </p>

<a name="classefd_1_1_log_service_response_1a3a0a0ecf85ef409394531326f21fa55d"></a>
<p class="NDLRefMemberFunction">void  Set(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> netId, <br/><span class="NDLSystemFont"><a href="efd__LogServiceResponse.htm#classefd_1_1_log_service_response_1a6fcb182e2d47cd622cc75c1d2429ce10">Result</a></span> result)</p>
<p class="NDLRefMemberDescription">Set method. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">netId</span></td>
    <td>Net ID of the respondent. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">result</span></td>
    <td>Result of the operation </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_log_service_response_1a9925829a033206ef2ed01ce846ed1bd6"></a>
<p class="NDLRefMemberFunction">virtual void  Serialize(<span class="NDLSystemFont"><a href="../efd/efd__Archive.htm">efd::Archive</a></span>& io_ar)</p>
<p class="NDLRefMemberDescription">Serialize a polymorphic type to or from an <span class="NDLSystemFont"><a href="../efd/efd__Archive.htm">Archive</a></span>. </p>
<p class="NDLRefMemberDetailedDescription">This method must be overridden, but if your streamable object has no data the override can be an empty function. A typical implementation of this method will make one call to <span class="NDLSystemFont"><a href="../Namespaces/efd__Serializer.htm#namespaceefd_1_1_serializer_1a63e0b99047011bde53be44786ab9ee7b">efd::Serializer::SerializeObject</a></span> for each member of the class. If you are derived from another streamable class you should be sure to call to parent implementation of this method as well; it is recommended that the parent class be serialized first before adding the data for the derived class. If your class contains complex data such as STL-style contianers or pointers to allocated data then you can simplify the implementation of Serialize by using the templated helper functions in &lt;<span class="NDLSystemFont">efd/SerializeRoutines.h</span>&gt;; these can serialize even the most complex data structures with a single method call and will reduce the chance of making common mistakes (which could introduce security vulnerabilities if marshalling data from untrusted sources).</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">io_ar</span></td>
    <td>The <span class="NDLSystemFont"><a href="../efd/efd__Archive.htm">Archive</a></span> to serialize to or from. </td>
</tr>

        </tbody>
    </table>
</div>


 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
