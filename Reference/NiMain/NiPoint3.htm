<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiPoint3</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiPoint3</p>

<p class="NDLRefParentage">: public <a href=
"../../Reference/NiSystem/NiMemObject.htm"><span>NiMemObject</span></a></p>

<p class="NDLRefHeaderFile">&lt;NiPoint3.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiPoint3</span> is a basic 3D
point class. The only data members are <span class=
"NDLSystemFont">x</span>, <span class="NDLSystemFont">y</span>
and <span class="NDLSystemFont">z</span>, which are all declared
as public floats.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiPoint3()</p>

<p class="NDLRefMemberDescription">The constructor does not
initialize the data members so that fast construction of arrays
is possible in situations where the points will be filled in by
application code.</p>

<p class="NDLRefMemberFunction">NiPoint3(float fX, float fY,
float fZ)</p>

<p class="NDLRefMemberDescription">Member-wise initialization
constructor.</p>

<p class="NDLRefHead1">Static Member Functions</p>

<p class="NDLRefMemberFunction">static NiPoint3
ComponentProduct(const NiPoint3&amp; kP0,
const NiPoint3&amp; kP1)</p>

<p class="NDLRefMemberDescription">Returns a vector containing
<span class="NDLSystemFont">[kP0.x * kP1.x, kP0.y * kP1.y, kP0.z
* kP1.z]</span>.</p>

<p class="NDLRefMemberFunction">static void UnitizeVector
(NiPoint3&amp; v)</p>

<p class="NDLRefMemberDescription">Makes vector into unit vector.
Uses a fast but lower-precision square-root.</p>

<p class="NDLRefMemberFunction">static void
UnitizeVectors(NiPoint3* pkV, unsigned int uiNum, unsigned int
uiStride)</p>

<p class="NDLRefMemberDescription">Makes an array of vectors into
unit length. Uses a fast but lower-precision square-root.
<span class="NDLSystemFont">uiStride</span> is the number of
bytes between <span class="NDLSystemFont">NiPoint3</span> vector
entries in the array.</p>

<p class="NDLRefMemberFunction">static float VectorLength
(NiPoint3&amp; v)</p>

<p class="NDLRefMemberDescription">Returns the vector length of
the point (L3 norm). Uses a fast but lower-precision
square-root.</p>

<p class="NDLRefMemberFunction">static void
PointsPlusEqualFloatTimesPoints(NiPoint3* pkDst, float f, const
NiPoint3* pkSrc, unsigned int uiVerts)</p>

<p class="NDLRefMemberDescription">Multiplies each point in the
<span class="NDLSystemFont">pkSrc</span> array by the scalar
<span class="NDLSystemFont">f</span> and adds the result to the
corresponding point in the <span class=
"NDLSystemFont">pkDst</span> array:</p>

<p class="indent1"><span class="NDLSystemFont">pkDst[i] += f *
pkSrc[i];</span></p>

<p class="NDLRefMemberFunction">static void
WeightedPointsPlusWeightedPoints(NiPoint3* pkDst, float fWeight,
const NiPoint3* pkSrc, unsigned int uiVerts)</p>

<p class="NDLRefMemberDescription">Multiplies <span class=
"NDLSystemFont">(1.0f - fWeight)</span> by each point in the
<span class="NDLSystemFont">pkSrc</span> array and <span class=
"NDLSystemFont">fWeight</span> by the corresponding point in the
<span class="NDLSystemFont">pkDst</span> array, storing the
result in <span class="NDLSystemFont">pkDst</span>:</p>

<p class="indent1"><span class="NDLSystemFont">pkDst[ui] =
fOneMinusWeight * pkSrc[ui] + fWeight * pkDst[ui];</span></p>

<p class="NDLRefHead1">Operators</p>

<p class="NDLRefMemberFunction">float&amp; operator[] (int i)
const</p>

<p class="NDLRefMemberDescription">The bracket operator, with
integer argument 0, 1, or 2, may be used as an alternative to
accessing the public x, y, and z members, respectively.</p>

<p class="NDLRefMemberFunction">bool operator== (const
NiPoint3&amp; kPt) const</p>

<p class="NDLRefMemberDescription">This operator is the exact
equality operator.</p>

<p class="NDLRefMemberFunction">bool operator!= (const
NiPoint3&amp; kPt) const</p>

<p class="NDLRefMemberDescription">This operator is the exact
inequality operator.</p>

<p class="NDLRefMemberFunction">NiPoint3 operator+ (const
NiPoint3&amp; kPt) const</p>

<p class="NDLRefMemberDescription">This operator is the
component-by-component addition operator.</p>

<p class="NDLRefMemberFunction">NiPoint3 operator- (const
NiPoint3&amp; kPt) const</p>

<p class="NDLRefMemberDescription">This operator is the
component-by-component subtraction operator.</p>

<p class="NDLRefMemberFunction">float operator* (const
NiPoint3&amp; kPt) const</p>

<p class="NDLRefMemberDescription">This operator is the dot
product operator.</p>

<p class="NDLRefMemberFunction">NiPoint3 operator* (float
fScalar) const</p>

<p class="NDLRefMemberDescription">This operator is the scalar
multiplication operator.</p>

<p class="NDLRefMemberFunction">NiPoint3 operator/ (float
fScalar) const</p>

<p class="NDLRefMemberDescription">This operator is the scalar
division operator.</p>

<p class="NDLRefMemberFunction">NiPoint3 operator- () const</p>

<p class="NDLRefMemberDescription">This operator is the unary
negation operator.</p>

<p class="NDLRefMemberFunction">friend NiPoint3 operator* (float
fScalar, const NiPoint3&amp; kPt)</p>

<p class="NDLRefMemberDescription">This operator is the second
scalar multiplication operator.</p>

<p class="NDLRefMemberFunction">NiPoint3&amp; operator+= (const
NiPoint3&amp; kPt)</p>

<p class="NDLRefMemberDescription">This operator is the
component-by-component increment operator.</p>

<p class="NDLRefMemberFunction">NiPoint3&amp; operator-= (const
NiPoint3&amp; kPt)</p>

<p class="NDLRefMemberDescription">This operator is the
component-by-component decrement operator.</p>

<p class="NDLRefMemberFunction">NiPoint3&amp; operator*= (float
fScalar)</p>

<p class="NDLRefMemberDescription">This operator is the
component-by-component in-place scaling operator.</p>

<p class="NDLRefMemberFunction">NiPoint3&amp; operator/= (float
fScalar)</p>

<p class="NDLRefMemberDescription">This operator is the
component-by-component in-place scalar division operator.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">float Length() const</p>

<p class="NDLRefMemberDescription">Returns the vector length of
the point (L3 norm).</p>

<p class="NDLRefMemberFunction">float SqrLength() const</p>

<p class="NDLRefMemberDescription">Returns the squared vector
length.</p>

<p class="NDLRefMemberFunction">float Dot(NiPoint3&amp; kPt)
const</p>

<p class="NDLRefMemberDescription">Dot product - alias for above
inline operator.</p>

<p class="NDLRefMemberFunction">float Unitize()</p>

<p class="NDLRefMemberDescription">Makes vector into unit vector
and returns original length--unitizing a zero vector will return
zero and leave the vector as-is.</p>

<p class="NDLRefMemberFunction">NiPoint3 Cross(NiPoint3&amp; kPt)
const</p>

<p class="NDLRefMemberDescription">Returns the cross product of
the two vectors "this X argument", leaving both source vectors
unchanged.</p>

<p class="NDLRefMemberFunction">NiPoint3 UnitCross(NiPoint3&amp;
kPt) const</p>

<p class="NDLRefMemberDescription">Works like the above function,
but returns the normalized cross product.</p>

<p class="NDLRefMemberFunction">NiPoint3 Perpendicular()
const</p>

<p class="NDLRefMemberDescription">Returns one of the infinite
sets of perpendicular vectors to the calling point (treated as a
vector).</p>

<p class="NDLRefHead1">Notes</p>

<a name="Convenience_Objects" id="Convenience_Objects"></a><p class="NDLRefHead2">Convenience Objects</p>

<p>The following public static constants are defined for
application convenience.</p>

<table class="NDLNoteContainer" width="100%">
    <tr align="left">
        <td class="NDLNoteContainerTD">
            <p class="NDLHeadingNoteContainer">Caution</p>

            <div class="NDLNote">
                Because these constants are static, and not
                <span class="NDLSystemFont">#defines</span>,
                applications must be careful not to reference
                them in static data declarations, as they may not
                be defined prior to the start of the "main"
                function.)
            </div>
        </td>
    </tr>
</table>

<!--(Table)=========================================================-->
<table>
    <thead>
        <tr>
            <th>Static Object</th>

            <th>Value</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><span class=
            "NDLSystemFont">NiPoint3::ZERO</span></td>

            <td><span class="NDLSystemFont">NiPoint3(0, 0,
            0)</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">NiPoint3::UNIT_X</span></td>

            <td><span class="NDLSystemFont">NiPoint3(1, 0,
            0)</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">NiPoint3::UNIT_Y</span></td>

            <td><span class="NDLSystemFont">NiPoint3(0, 1,
            0)</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">NiPoint3::UNIT_Z</span></td>

            <td><span class="NDLSystemFont">NiPoint3(0, 0,
            1)</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">NiPoint3::UNIT_ALL</span></td>

            <td><span class="NDLSystemFont">NiPoint3(1, 1,
            1)</span></td>
        </tr>
    </tbody>
</table>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
