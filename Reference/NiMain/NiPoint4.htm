<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiPoint4</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>


<p class="NDLRefHeadClassTitle">NiPoint4</p>

<p class="NDLRefHeaderFile">&lt;NiPoint4.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>This class encapsulates a 4 value point with coordinates 
 x, y, z, and w. This interface is generally cross platform, but its implementation 
 is platform specific.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiPoint4()</p>

<p class="NDLRefMemberDescription">This default constructor is available 
 on all platforms. The member variables are left uninitialized.</p>

<p class="NDLRefMemberFunction">NiPoint4(float fX, float fY, float fZ, float 
 fW)</p>

<p class="NDLRefMemberDescription">This constructor is available on all platforms.</p>

<p class="NDLRefMemberFunction">NiPoint4(const NiPoint3&amp; kPt, float fW 
 = 1.0f)</p>

<p class="NDLRefMemberDescription">This constructor is available on all platforms.</p>

<p class="NDLRefMemberFunction">NiPoint4(XMVECTOR 
 vPt)</p>

<p class="NDLRefMemberDescription">This 
 is an Xbox 360-only constructor.</p>

<p class="NDLRefMemberFunction">NiPoint4(vec_float4 
 vPt)</p>

<p class="NDLRefMemberDescription">This constructor 
 is only available on the PS3's SPUs.</p>

<p class="NDLRefMemberFunction">NiPoint4(vector 
 float vPt)</p>

<p class="NDLRefMemberDescription">This constructor 
 is only available on the PS3's PPU.</p>

<p class="NDLRefHead1">Operators</p>

<p class="NDLRefMemberFunction">float operator[](int i) const</p>

<p class="NDLRefMemberDescription">The bracket operator, with integer argument 
 0, 1, 2, or 3, may be used as an alternative to accessing the public <span 
 class="NDLSystemFont">X()</span>, <span class="NDLSystemFont">Y()</span>, 
 <span class="NDLSystemFont">Z()</span>, and <span class="NDLSystemFont">W()</span> 
 functions, respectively. Integer arguments outside that range will assert 
 and are not safe.</p>

<p class="NDLRefMemberFunction">NiPoint4 operator- () const</p>

<p class="NDLRefMemberDescription">This operator is the unary negation operator.</p>

<p class="NDLRefMemberFunction">NiPoint4 operator+ (const NiPoint4&amp; kPt) 
 const</p>

<p class="NDLRefMemberDescription">This operator is the component-by-component 
 addition operator.</p>

<p class="NDLRefMemberFunction">NiPoint4 operator* (float fScalar) const</p>

<p class="NDLRefMemberDescription">This operator is the scalar multiplication 
 operator.</p>

<p class="NDLRefMemberFunction">NiPoint4 operator/ (float fScalar) const</p>

<p class="NDLRefMemberDescription">This operator is the scalar division operator.</p>

<p class="NDLRefMemberFunction">NiPoint4 operator+= (const NiPoint4&amp; 
 kPt)</p>

<p class="NDLRefMemberDescription">This is the component-by-component increment 
 operator.</p>

<p class="NDLRefMemberFunction">NiPoint4 operator-= (const NiPoint4&amp; 
 kPt)</p>

<p class="NDLRefMemberDescription">This is the component-by-component decrement 
 operator.</p>

<p class="NDLRefMemberFunction">NiPoint4 operator*= (float fScalar)</p>

<p class="NDLRefMemberDescription">This is the component-by-component in-place 
 scalar multiplication operator.</p>

<p class="NDLRefMemberFunction">NiPoint4 operator/= (float fScalar)</p>

<p class="NDLRefMemberDescription">This is the component-by-component in-place 
 scalar division operator.</p>

<p class="NDLRefMemberFunction">bool operator== (const NiPoint4&amp; kPt) 
 const</p>

<p class="NDLRefMemberDescription">This is the exact equality operator.</p>

<p class="NDLRefMemberFunction">bool operator!= (const NiPoint4&amp; kPt) 
 const</p>

<p class="NDLRefMemberDescription">This is the exact inequality operator.</p>

<p class="NDLRefMemberFunction">operator NiPoint3()</p>

<p class="NDLRefMemberDescription">Conversion 
 from NiPoint4 to NiPoint3. Simply drops the w component.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">void MakeZero()</p>

<p class="NDLRefMemberDescription">Sets all components equal to zero.</p>

<p class="NDLRefMemberFunction">void Set(float fX, float fY, float fZ, float 
 fW)</p>

<p class="NDLRefMemberDescription">Initializes the four components from the 
 passed parameters.</p>

<p class="NDLRefMemberFunction">void Set(const <a href="NiPoint3.htm">NiPoint3</a>&amp; 
 kPt, float fW)</p>

<p class="NDLRefMemberDescription">Initializes the four components from the 
 passed parameters.</p>

<p class="NDLRefMemberFunction">void Set3VectorW0(const <a href="NiPoint3.htm">NiPoint3</a>&amp; 
 kPt)</p>

<p class="NDLRefMemberDescription">Initializes the x, y, and z components 
 from <span class="NDLSystemFont">kPt</span>, but sets the w component to 
 zero.</p>

<p class="NDLRefMemberFunction">void Set3VectorW0(float fX, float fY, float 
 fZ)</p>

<p class="NDLRefMemberDescription">Initializes the x, y, and z components 
 from the passed parameters, but sets the w component to zero.</p>

<p class="NDLRefMemberFunction">float Set(unsigned int uiComponent, float 
 fValue)</p>

<p class="NDLRefMemberDescription">Sets a particular component index to a 
 value.</p>

<p class="NDLRefMemberFunction">float X() const</p>

<p class="NDLRefMemberDescription">Returns the x component.</p>

<p class="NDLRefMemberFunction">float Y() const</p>

<p class="NDLRefMemberDescription">Returns the y component.</p>

<p class="NDLRefMemberFunction">float Z() const</p>

<p class="NDLRefMemberDescription">Returns the z component.</p>

<p class="NDLRefMemberFunction">float W() const</p>

<p class="NDLRefMemberDescription">Returns the w component.</p>

<p class="NDLRefMemberFunction">void SetX(float fX)</p>

<p class="NDLRefMemberDescription">Sets the x component.</p>

<p class="NDLRefMemberFunction">void SetY(float fY)</p>

<p class="NDLRefMemberDescription">Sets the y component.</p>

<p class="NDLRefMemberFunction">void SetZ(float fZ)</p>

<p class="NDLRefMemberDescription">Sets the z component.</p>

<p class="NDLRefMemberFunction">void SetW(float fW)</p>

<p class="NDLRefMemberDescription">Sets the w component.</p>

<p class="NDLRefMemberFunction">void CompressNormalizedIntoXY(const <a href="NiPoint3.htm">NiPoint3</a>&amp; 
 point)</p>

<p class="NDLRefMemberDescription">Given a normalized <span 
 class="NDLSystemFont"><a href="NiPoint3.htm">NiPoint3</a></span>, scales the x and y by dividing 
 by z.</p>

<p class="NDLRefMemberDetailedDescription">Sets our x = point.x, y = point.y 
 (note: point.z must be &gt; 0.0f)</p>

<p class="NDLRefMemberFunction">void CompressNormalizedIntoZW(const <a href="NiPoint3.htm">NiPoint3</a>&amp; 
 point)</p>

<p class="NDLRefMemberDescription">Given a normalized <span 
 class="NDLSystemFont"><a href="NiPoint3.htm">NiPoint3</a></span>, scales the x and y by dividing 
 by z.</p>

<p class="NDLRefMemberDetailedDescription">Sets our z = point.x, w = point.y 
 (note: point.z must be &gt; 0.0f)</p>

<p class="NDLRefMemberFunction">void DecompressXYIntoNormalized(<a 
 href="NiPoint3.htm">NiPoint3</a>&amp; point)</p>

<p class="NDLRefMemberDescription">Copies x, y into point(x,y) and sets point.z 
 = 1.0f</p>

<p class="NDLRefMemberFunction">void DecompressZWIntoNormalized(<a 
 href="NiPoint3.htm">NiPoint3</a>&amp; point)</p>

<p class="NDLRefMemberDescription">Copies z, w into point,(x,y) and sets 
 point.z = 1.0f</p>

<p class="NDLRefMemberFunction">void DecompressHighDetailIntoNormalized(<a href="NiPoint3.htm">NiPoint3</a>&amp; 
 point)</p>

<p class="NDLRefMemberDescription">If w is FLT_MAX, copies x,y,z into point(x,y,z) 
 otherwise copies only x and y into point and sets point.z = 1.0f </p>

<p class="NDLRefHead1">Supported Static Functions</p>

<p class="NDLRefMemberFunction">static 
 void UnitizeVectors(NiPoint4* p4In, unsigned int uiCount, <a href="NiPoint3.htm">NiPoint3</a>* 
 p3Out)</p>

<p class="NDLRefMemberDescription">This 
 function is specific to Xbox 360. It processes <span class="NDLSystemFont">uiCount</span> 
 elements of the array <span class="NDLSystemFont">p4In</span>. For each 
 p4In[i], it normalizes the vector, and then stores the first three components 
 in p3Out[i].</p>

<p class="NDLRefHead1">Convenience Objects</p>

<p><span class="NDLSystemFont">NiPoint4</span> provides the 
 convenience object <span class="NDLSystemFont">NiPoint4::ZERO</span> which 
 is statically initialized to be <span class="NDLSystemFont">NiPoint4(0, 
 0, 0, 0)</span>.</p>

<p>Warning: because that constant is static and not a <span 
 class="NDLSystemFont">#define</span>, applications should be careful not 
 to reference them in static data declarations, as they may not be defined 
 prior to the start of the &quot;main&quot; function.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
