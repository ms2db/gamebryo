<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiPixelFormat</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->

<!--(Begin Links)===================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiPixelFormat</p>

<p class="NDLRefParentage">: public <a href=
"../../Reference/NiSystem/NiMemObject.htm">NiMemObject</a></p>

<p class="NDLRefHeaderFile">&lt;NiPixelFormat.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiPixelFormat</span> objects
describe the layout of colors, indices or compressed data in a
block of image data such as an <span class=
"NDLSystemFont">NiPixelData</span> object. <span class=
"NDLSystemFont">NiPixelFormat</span> objects can represent 16-,
24- 32-, 64-, and 128-bit RGB(A) formats, as well as 8-bit
palettized formats, three different compressed formats and bump
map formats.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiPixelFormat()</p>

<p class="NDLRefMemberDescription">Creates an 8-bit palettized
format with no alpha in the palette entries.</p>

<p class="NDLRefMemberFunction">NiPixelFormat(const
NiPixelFormat&amp; kFormat)</p>

<p class="NDLRefMemberDescription">Copy constructor for
<span class="NDLSystemFont">NiPixelFormat</span>.</p>

<p class="NDLRefMemberFunction">NiPixelFormat(<span class=
"NDLSystemFont"><a href=
"NiPixelFormat.htm#Standard_Pixel_Formats">Format</a></span>
eFormat, <a href=
"NiPixelFormat.htm#Component_Enumerations">Component</a> eComp,
<span class="NDLSystemFont"><a href=
"NiPixelFormat.htm#Representation_Enumerations">Representation</a></span>
eRep, unsigned char ucBPP)</p>

<p class="NDLRefMemberDescription">Creates an object with the
specified <span class="NDLSystemFont"><a href=
"NiPixelFormat.htm#Standard_Pixel_Formats">Format</a>, <a href=
"NiPixelFormat.htm#Component_Enumerations">Component</a></span>,
and <span class="NDLSystemFont"><a href=
"NiPixelFormat.htm#Representation_Enumerations">Representation</a></span>
enumeration values at the specified bits per pixel with one
channel.</p>

<p class="NDLRefMemberFunction">NiPixelFormat(<span class=
"NDLSystemFont"><a href=
"NiPixelFormat.htm#Standard_Pixel_Formats">Format</a></span>
eFormat, <a href=
"NiPixelFormat.htm#Component_Enumerations">Component</a> eComp0,
<span class="NDLSystemFont"><a href=
"NiPixelFormat.htm#Representation_Enumerations">Representation</a></span>
eRep0, unsigned char ucBPC0, <a href=
"NiPixelFormat.htm#Component_Enumerations">Component</a> eComp1,
<span class="NDLSystemFont"><a href=
"NiPixelFormat.htm#Representation_Enumerations">Representation</a></span>
eRep1, unsigned char ucBPC1)</p>

<p class="NDLRefMemberDescription">Creates an object with the
specified <span class="NDLSystemFont"><a href=
"NiPixelFormat.htm#Standard_Pixel_Formats">Format</a>, <a href=
"NiPixelFormat.htm#Component_Enumerations">Component</a></span>,
and <span class="NDLSystemFont"><a href=
"NiPixelFormat.htm#Representation_Enumerations">Representation</a></span>
enumeration values at the specified bits per pixel with two
channels.</p>

<p class="NDLRefMemberFunction">NiPixelFormat(<span class=
"NDLSystemFont"><a href=
"NiPixelFormat.htm#Standard_Pixel_Formats">Format</a></span>
eFormat, <a href=
"NiPixelFormat.htm#Component_Enumerations">Component</a> eComp0,
<span class="NDLSystemFont"><a href=
"NiPixelFormat.htm#Representation_Enumerations">Representation</a></span>
eRep0, unsigned char ucBPC0, <a href=
"NiPixelFormat.htm#Component_Enumerations">Component</a> eComp1,
<span class="NDLSystemFont"><a href=
"NiPixelFormat.htm#Representation_Enumerations">Representation</a></span>
eRep1, unsigned char ucBPC1, <a href=
"NiPixelFormat.htm#Component_Enumerations">Component</a> eComp2,
<span class="NDLSystemFont"><a href=
"NiPixelFormat.htm#Representation_Enumerations">Representation</a></span>
eRep2, unsigned char ucBPC2)</p>

<p class="NDLRefMemberDescription">Creates an object with the
specified <span class="NDLSystemFont"><a href=
"NiPixelFormat.htm#Standard_Pixel_Formats">Format</a>, <a href=
"NiPixelFormat.htm#Component_Enumerations">Component</a></span>,
and <span class="NDLSystemFont"><a href=
"NiPixelFormat.htm#Representation_Enumerations">Representation</a></span>
enumeration values at the specified bits per pixel with three
channels.</p>

<p class="NDLRefMemberFunction">NiPixelFormat(<span class=
"NDLSystemFont"><a href=
"NiPixelFormat.htm#Standard_Pixel_Formats">Format</a></span>
eFormat, <a href=
"NiPixelFormat.htm#Component_Enumerations">Component</a> eComp0,
<a href=
"NiPixelFormat.htm#Representation_Enumerations">Representation</a>
eRep0, unsigned char ucBPC0, <a href=
"NiPixelFormat.htm#Component_Enumerations">Component</a> eComp1,
<span class="NDLSystemFont"><a href=
"NiPixelFormat.htm#Representation_Enumerations">Representation</a></span>
eRep1, unsigned char ucBPC1, <a href=
"NiPixelFormat.htm#Component_Enumerations">Component</a> eComp2,
<span class="NDLSystemFont"><a href=
"NiPixelFormat.htm#Representation_Enumerations">Representation</a></span>
eRep2, unsigned char ucBPC2, <a href=
"NiPixelFormat.htm#Component_Enumerations">Component</a> eComp3,
<span class="NDLSystemFont"><a href=
"NiPixelFormat.htm#Representation_Enumerations">Representation</a></span>
eRep3, unsigned char ucBPC3)</p>

<p class="NDLRefMemberDescription">Creates an object with the
specified <span class="NDLSystemFont"><a href=
"NiPixelFormat.htm#Standard_Pixel_Formats">Format</a>, <a href=
"NiPixelFormat.htm#Component_Enumerations">Component</a></span>,
and <span class="NDLSystemFont"><a href=
"NiPixelFormat.htm#Representation_Enumerations">Representation</a></span>
enumeration values at the specified bits per pixel with four
channels.</p>

<p class="NDLRefMemberFunction">NiPixelFormat(<span class=
"NDLSystemFont"><a href=
"NiPixelFormat.htm#Standard_Pixel_Formats">Format</a></span>
eFormat, unsigned char ucBPP, <span class=
"NDLSystemFont"><a href="NiPixelFormat.htm#Tiling">Tiling</a></span>
eTiled, bool bLittleEndian, unsigned int uiRendererHint, <a href=
"NiPixelFormat.htm#Component_Enumerations">Component</a> eComp0,
<span class="NDLSystemFont"><a href=
"NiPixelFormat.htm#Representation_Enumerations">Representation</a></span>
eRep0, unsigned char ucBPC0, bool bSigned0, <a href=
"NiPixelFormat.htm#Component_Enumerations">Component</a> eComp1,
<span class="NDLSystemFont"><a href=
"NiPixelFormat.htm#Representation_Enumerations">Representation</a></span>
eRep1, unsigned char ucBPC1, bool bSigned1, <a href=
"NiPixelFormat.htm#Component_Enumerations">Component</a> eComp2,
<span class="NDLSystemFont"><a href=
"NiPixelFormat.htm#Representation_Enumerations">Representation</a></span>
eRep2, unsigned char ucBPC2, bool bSigned2, <a href=
"NiPixelFormat.htm#Component_Enumerations">Component</a> eComp3,
<span class="NDLSystemFont"><a href=
"NiPixelFormat.htm#Representation_Enumerations">Representation</a></span>
eRep3, unsigned char ucBPC3, bool bSigned3)</p>

<p class="NDLRefMemberDescription">Creates an object with the
specified <span class="NDLSystemFont"><a href=
"NiPixelFormat.htm#Standard_Pixel_Formats">Format</a>, <a href=
"NiPixelFormat.htm#Component_Enumerations">Component</a></span>,
and <span class="NDLSystemFont"><a href=
"NiPixelFormat.htm#Representation_Enumerations">Representation</a></span>
enumeration values at the specified bits per pixel with four
channels. Additionally, the user can specify the <span class=
"NDLSystemFont"><a href=
"NiPixelFormat.htm#Tiling">Tiling</a></span>, endian-ness, and
renderer hint for the object as well whether each <a href=
"NiPixelFormat.htm#Component_Enumerations"><span class=
"NDLSystemFont">Component</span></a> is signed.</p>

<p class="NDLRefMemberFunction">NiPixelFormat(<span class=
"NDLSystemFont"><a href=
"NiPixelFormat.htm#Standard_Pixel_Formats">Format</a></span>
eFormat, unsigned char ucBPP, <span class=
"NDLSystemFont"><a href="NiPixelFormat.htm#Tiling">Tiling</a></span>
eTiled, bool bLittleEndian, unsigned int uiRendererHint, bool
bSRGBSpace, <a href=
"NiPixelFormat.htm#Component_Enumerations">Component</a> eComp0,
<span class="NDLSystemFont"><a href=
"NiPixelFormat.htm#Representation_Enumerations">Representation</a></span>
eRep0, unsigned char ucBPC0, bool bSigned0, <a href=
"NiPixelFormat.htm#Component_Enumerations">Component</a> eComp1,
<span class="NDLSystemFont"><a href=
"NiPixelFormat.htm#Representation_Enumerations">Representation</a></span>
eRep1, unsigned char ucBPC1, bool bSigned1, <a href=
"NiPixelFormat.htm#Component_Enumerations">Component</a> eComp2,
<span class="NDLSystemFont"><a href=
"NiPixelFormat.htm#Representation_Enumerations">Representation</a></span>
eRep2, unsigned char ucBPC2, bool bSigned2, <a href=
"NiPixelFormat.htm#Component_Enumerations">Component</a> eComp3,
<span class="NDLSystemFont"><a href=
"NiPixelFormat.htm#Representation_Enumerations">Representation</a></span>
eRep3, unsigned char ucBPC3, bool bSigned3)</p>

<p class="NDLRefMemberDescription">Creates an object with the
specified <span class="NDLSystemFont"><a href=
"NiPixelFormat.htm#Standard_Pixel_Formats">Format</a>, <a href=
"NiPixelFormat.htm#Component_Enumerations">Component</a></span>,
and <span class="NDLSystemFont"><a href=
"NiPixelFormat.htm#Representation_Enumerations">Representation</a></span>
enumeration values at the specified bits per pixel with four
channels. Additionally, the user can specify the <span class=
"NDLSystemFont"><a href=
"NiPixelFormat.htm#Tiling">Tiling</a></span>, endian-ness,
renderer hint, and whether the format represents sRGB space or
linear RGB space for the object as well as each <a href=
"NiPixelFormat.htm#Component_Enumerations"><span class=
"NDLSystemFont">Component</span></a> is signed.</p>

<p class="NDLRefHead1">Operators</p>

<p class="NDLRefMemberFunction">bool operator==(const
NiPixelFormat&amp; kPixDesc) const</p>

<p class="NDLRefMemberFunction">bool operator!=(const
NiPixelFormat&amp; kPixDesc) const</p>

<p class="NDLRefMemberDescription">Fast comparison functions for
exact format equality.</p>

<p class="NDLRefHead1">Static Member Functions</p>

<p class="NDLRefMemberFunction">static NiPixelFormat
CreateFromRGBAMasks(unsigned char ucBitsPerPixel, unsigned int
uiRedMask, unsigned int uiGreenMask, unsigned int uiBlueMask,
unsigned int uiAlphaMask)</p>

<p class="NDLRefMemberDescription">This method returns a 32, 16,
or 24-bit <span class="NDLSystemFont">NiPixelFormat</span> object
whose components are ordered according to the bit locations
specified by their masks.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction"><a href=
"NiPixelFormat.htm#Format_Classes_and_Name_Enumerations">Format</a>
GetFormat() const</p>

<p class="NDLRefMemberFunction">void SetFormat(<a href=
"NiPixelFormat.htm#Format_Classes_and_Name_Enumerations">Format</a>
eFormat)</p>

<p class="NDLRefMemberDescription">Get and set the format class
enum representing the pixel format. See the notes section below
on format classes.</p>

<p class="NDLRefMemberFunction">unsigned char GetBitsPerPixel()
const</p>

<p class="NDLRefMemberFunction">void SetBitsPerPixel(unsigned
char ucBPP)</p>

<p class="NDLRefMemberDescription">Returns the number of bits per
pixel in the format, or 0 for compressed formats.</p>

<p class="NDLRefMemberFunction">bool GetPalettized() const</p>

<p class="NDLRefMemberDescription">Returns <span class=
"NDLSystemFont">true</span> if the format is palettized, and
<span class="NDLSystemFont">false</span> otherwise.</p>

<p class="NDLRefMemberFunction">bool GetPaletteHasAlpha()
const</p>

<p class="NDLRefMemberDescription">Returns <span class=
"NDLSystemFont">true</span> if the format is palettized with
alpha in the palette entries, and <span class=
"NDLSystemFont">false</span> otherwise.</p>

<p class="NDLRefMemberFunction">bool GetCompressed() const</p>

<p class="NDLRefMemberDescription">Returns <span class=
"NDLSystemFont">true</span> if the format is one of the three
compressed formats, and <span class="NDLSystemFont">false</span>
otherwise.</p>

<p class="NDLRefMemberFunction">unsigned int GetMask(<a href=
"NiPixelFormat.htm#Component_Enumerations">Component</a> eComp)
const</p>

<p class="NDLRefMemberDescription">Returns the mask for the given
component of an RGB(A) or Bump(Luma) format. The mask is already
in its pre-shifted position (i.e. for a given format, at any bit
position, only one component's mask will be "1").</p>

<p class="NDLRefMemberFunction">unsigned char GetBits(<a href=
"NiPixelFormat.htm#Component_Enumerations">Component</a> eComp)
const</p>

<p class="NDLRefMemberDescription">Returns the number of bits per
component in an RGB(A) or Bump(Luma) format.</p>

<p class="NDLRefMemberFunction">unsigned char GetShift(<a href=
"NiPixelFormat.htm#Component_Enumerations">Component</a> eComp)
const</p>

<p class="NDLRefMemberDescription">Returns the number of bits
from the least significant bit of the pixel to the least
significant "1" bit of the component's mask.</p>

<p class="NDLRefMemberFunction">unsigned int GetRendererHint()
const</p>

<p class="NDLRefMemberFunction">void SetRendererHint(unsigned int
uiRendererHint)</p>

<p class="NDLRefMemberDescription">Get and set the renderer hint
for this object. This is used by the renderer to map to its
internal formats. If this value is equal to <span class=
"NDLSystemFont">NiPixelFormat::INVALID_RENDERER_HINT</span>, then
the value has not be set by the renderer.</p>

<p class="NDLRefMemberFunction">unsigned int GetExtraData()
const</p>

<p class="NDLRefMemberFunction">void SetExtraData(unsigned int
uiExtraData)</p>

<p class="NDLRefMemberDescription">Get and set the extra data
field for this object. This field is also used by renderers to
contain additional information about the format of this
object.</p>

<p class="NDLRefMemberFunction">bool GetLittleEndian() const</p>

<p class="NDLRefMemberFunction">void SetLittleEndian(bool
bLittleEndian)</p>

<p class="NDLRefMemberDescription">Get and set the "endian-ness"
of the pixel format. This setting is true on the PC platform and
false on Xenon.</p>

<p class="NDLRefMemberFunction">bool GetSRGBSpace() const</p>

<p class="NDLRefMemberFunction">void SetSRGBSpace(bool bSRGB)</p>

<p class="NDLRefMemberDescription">Get and set whether the pixel
format represents sRGB space as opposed to linear RGB space.</p>

<p class="NDLRefMemberFunction">bool GetComponent(unsigned int
uiWhichComponent, <span class="NDLSystemFont"><a href=
"NiPixelFormat.htm#Component_Enumerations">Component</a></span>&amp;
eComponent, <span class="NDLSystemFont"><a href=
"NiPixelFormat.htm#Representation_Enumerations">Representation</a></span>&amp;
eRep, unsigned char&amp; ucBPC, bool&amp; bSigned)</p>

<p class="NDLRefMemberFunction">void SetComponent(unsigned int
uiWhichComponent, <span class="NDLSystemFont"><a href=
"NiPixelFormat.htm#Component_Enumerations">Component</a></span>
eComponent, <span class="NDLSystemFont"><a href=
"NiPixelFormat.htm#Representation_Enumerations">Representation</a></span>
eRep, unsigned char ucBPC, bool bSigned)</p>

<p class="NDLRefMemberDescription">Get and set the values for the
individual channels of the pixel format.</p>

<p class="NDLRefMemberFunction">unsigned int GetNumComponents()
const</p>

<p class="NDLRefMemberDescription">Returns the number of
components in the format.</p>

<a name="Tiling" id="Tiling"></a><p class="NDLRefMemberFunction">Tiling GetTiling() const</p>

<p class="NDLRefMemberFunction">void SetTiling(Tiling
eTiling)</p>

<p class="NDLRefMemberDescription">These functions provide access
to a member that indicates whether pixels have been tiled from
their standard row-major format to a format optimized for a
particular platform. The <span class=
"NDLSystemFont">Tiling</span> enumeration, nested in <span class=
"NDLSystemFont">NiPixelFormat</span>, has the following possible
values:</p>

<div class="indent1">
<ul>
  <li><span class="NDLSystemFont">NiPixelFormat::TILE_NONE</span></li>
  <li><span class="NDLSystemFont">NiPixelFormat::TILE_XENON</span></li>
</ul>
</div>

<p class="NDLRefHead1">Notes</p>

<a name="Format_Classes_and_Name_Enumerations" id="Format_Classes_and_Name_Enumerations"></a><p class="NDLRefHead2">Format Classes and Name Enumerations</p>

<p>Gamebryo supports the following pixel format classes:</p>

<!--(Table)=========================================================-->
<table>
    <thead>
        <tr>
            <th>Format</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><span class=
            "NDLSystemFont">FORMAT_RGB</span></td>

            <td>A 3-component red, green, blue format. The bits
            per pixel, component mask, component bits and
            component shift values are all needed to define a
            format of this class.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">FORMAT_RGBA</span></td>

            <td>A 4-component red, green, blue and alpha format.
            The bits per pixel, component mask, component bits
            and component shift values are all needed to define a
            format of this class.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">FORMAT_PAL</span></td>

            <td>An 8-bit palettized format with no alpha.
            Currently, The enumeration alone completely defines
            this format, as it is assumed to have fixed-format
            32-bit palette entries, and 8-bit indices.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">FORMAT_PALALPHA</span></td>

            <td>An 8-bit palettized format with alpha in the
            palette entries. Currently, The enumeration alone
            completely defines this format, as it is assumed to
            have fixed-format 32-bit palette entries, and 8-bit
            indices.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">FORMAT_DXT1</span></td>

            <td>A compressed format, byte-equivalent to the DXTC1
            standard. The enumeration alone completely defines
            this format.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">FORMAT_DXT3</span></td>

            <td>A compressed format, byte-equivalent to the DXTC3
            standard. The enumeration alone completely defines
            this format.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">FORMAT_DXT5</span></td>

            <td>A compressed format, byte-equivalent to the DXTC5
            standard. The enumeration alone completely defines
            this format.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">FORMAT_RGB24NONINTERLEAVED</span></td>

            <td>This enumeration refers to a deprecated PS2
            format.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">FORMAT_BUMP</span></td>

            <td>An uncompressed dU/dV format that represents a
            gradient bump map. Each component is a signed pixel
            slope used in bump mapping.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">FORMAT_BUMPLUMA</span></td>

            <td>An uncompressed dU/dV/Luma format that represents
            a gradient bump map with luminance. The dU and dV
            components are signed pixel slopes used in bump
            mapping displacements, and the luma component is an
            unsigned component that represents the shininess of
            the object at that texel.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">FORMAT_RENDERERSPECIFIC</span></td>

            <td>A generic descriptor that applies to any
            renderer-supported pixel format that is not described
            by any of the other formats.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">FORMAT_ONE_CHANNEL</span></td>

            <td>A generic descriptor that defines a format that
            uses one component.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">FORMAT_TWO_CHANNEL</span></td>

            <td>A generic descriptor that defines a format that
            uses two components.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">FORMAT_THREE_CHANNEL</span></td>

            <td>A generic descriptor that defines a format that
            uses three components.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">FORMAT_FOUR_CHANNEL</span></td>

            <td>A generic descriptor that defines a format that
            uses four components.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">FORMAT_DEPTH_STENCIL</span></td>

            <td>This enumeration means that the NiPixelFormat is
            meant to be used on a depth/stencil surface in the
            renderer.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">FORMAT_UNKNOWN</span></td>

            <td>The format is of an unknown type.</td>
        </tr>
    </tbody>
</table>

<a name="Component_Enumerations" id="Component_Enumerations"></a><p class="NDLRefHead2">Component Enumerations</p>

<p>Gamebryo supports the following component enumeration values
when indexing masks, shifts and bits for an RGB(A) format:</p>

<!--(Table)=========================================================-->
<table>
    <thead>
        <tr>
            <th>Component</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><span class="NDLSystemFont">COMP_RED</span></td>

            <td>The component is the red color channel.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">COMP_GREEN</span></td>

            <td>The component is the green color channel.</td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">COMP_BLUE</span></td>

            <td>The component is the blue color channel.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">COMP_ALPHA</span></td>

            <td>The component is the alpha color channel.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">COMP_COMPRESSED</span></td>

            <td>The component is a compressed channel.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">COMP_OFFSET_U</span></td>

            <td>The component is the offset in the U axis.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">COMP_OFFSET_V</span></td>

            <td>The component is the offset in the V axis.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">COMP_OFFSET_W</span></td>

            <td>The component is the offset in the W axis.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">COMP_OFFSET_Q</span></td>

            <td>The component is the offset in the Q axis.</td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">COMP_LUMA</span></td>

            <td>The components is the glossiness channel of a
            bump map.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">COMP_HEIGHT</span></td>

            <td>The component is a height-field channel.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">COMP_VECTOR_X</span></td>

            <td>The component is the x component of a
            vector.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">COMP_VECTOR_Y</span></td>

            <td>The component is the y component of a
            vector.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">COMP_VECTOR_Z</span></td>

            <td>The component is the z component of a
            vector.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">COMP_PADDING</span></td>

            <td>The component has no meaningful representation
            and is used to pad the size of a pixel.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">COMP_INTENSITY</span></td>

            <td>The component is the intensity channel.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">COMP_INDEX</span></td>

            <td>The component is an index into a palette.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">COMP_DEPTH</span></td>

            <td>The component is the depth buffer channel.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">COMP_STENCIL</span></td>

            <td>The component is the stencil buffer channel.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">COMP_EMPTY</span></td>

            <td>The component has no meaningful representation
            and has no size.</td>
        </tr>
    </tbody>
</table>

<a name="Representation_Enumerations" id="Representation_Enumerations"></a><p class="NDLRefHead2">Representation Enumerations</p>

<p>Gamebryo supports the following representation enumeration
values, which indicate how each pixel should be accessed.</p>

<!--(Table)=========================================================-->
<table>
    <thead>
        <tr>
            <th><b>Component</b></th>

            <th><b>Description</b></th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><span class=
            "NDLSystemFont">REP_NORM_INT</span></td>

            <td>The component is represented as a integer whose
            value is normalized so the maximum value represents 1
            and the minimum value represents 0.</td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">REP_HALF</span></td>

            <td>The component is represented at 16-bit
            accuracy.</td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">REP_FLOAT</span></td>

            <td>The component is represented in full 32-bit IEEE
            floating point accuracy.</td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">REP_INDEX</span></td>

            <td>The component is a 4 or 8 bit palette index.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">REP_COMPRESSED</span></td>

            <td>The component is a representation of compressed
            pixel information.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">REP_UNKNOWN</span></td>

            <td>The component is of an unknown type.</td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">REP_INT</span></td>

            <td>The component is represented as an integer.</td>
        </tr>
    </tbody>
</table>

<a name="Standard_Pixel_Formats" id="Standard_Pixel_Formats"></a><p class="NDLRefHead2">Convenience Object and "Standard" Pixel
Formats</p>

<p>The following are the pre-defined "standard" Gamebryo pixel
formats. The <span class=
"NDLSystemFont">NiDevImageConverter</span> can convert from these
formats to most other pixel formats (but not from any pixel
format to any other). These formats are used in
platform-independent image data representations:</p>

<!--(Table)=========================================================-->
<table>
    <thead>
        <tr>
            <th><b>Object</b></th>

            <th><b>Description</b></th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><span class="NDLSystemFont">PAL4</span></td>

            <td>A 4-bit palettized format with no alpha.</td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">PALA4</span></td>

            <td>A 4-bit palettized format with alpha in the
            palette entries.</td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">PAL8</span></td>

            <td>An 8-bit palettized format with no alpha.</td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">PALA8</span></td>

            <td>An 8-bit palettized format with alpha in the
            palette entries.</td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">RGB24</span></td>

            <td>A 24-bit RGB format, which is stored as RGB (in
            that order) in files and in memory.</td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">RGBA32</span></td>

            <td>A 32-bit RGBA format, which is stored as RGBA (in
            that order) in files and in memory.</td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">BUMP16</span></td>

            <td>A 16-bit Bump format, which is stored as 8 bits
            of dU followed by 8 bits of dV.</td>
        </tr>

        <tr>
            <td>BUMPLUMA32</td>

            <td>A 32-bit BumpLuma format, which is stored as 8
            bits of dU followed by 8 bits of dV and then 8 bits
            of Luma. The remaining 8 bits are unused but are
            included in the format to align pixel data along
            32-bit boundaries.</td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">RGBA16</span></td>

            <td>A 16-bit format stored in the order specified
            with 5 bits of each color and 1 bit of alpha.</td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">BGRA16</span></td>

            <td>A 16-bit format stored in the order specified
            with 5 bits of each color and 1 bit of alpha.</td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">DXT1</span></td>

            <td>DXT1 compressed format.</td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">DXT3</span></td>

            <td>DXT3 compressed format.</td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">DXT5</span></td>

            <td>DXT5 compressed format.</td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">R16</span></td>

            <td>A 16-bit <span class=
            "NDLSystemFont">FORMAT_ONE_CHANNEL</span>
            format.</td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">R32</span></td>

            <td>A 32-bit <span class=
            "NDLSystemFont">FORMAT_ONE_CHANNEL</span>
            format.</td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">RG32</span></td>

            <td>A 32-bit <span class=
            "NDLSystemFont">FORMAT_TWO_CHANNEL</span> format,
            which is stored as RG (in that order) in files and in
            memory.</td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">RG64</span></td>

            <td>A 16-bit <span class=
            "NDLSystemFont">FORMAT_TWO_CHANNEL</span> format,
            which is stored as RG (in that order) in files and in
            memory.</td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">RGBA64</span></td>

            <td>A 64-bit RGBA format, which is stored as RGBA (in
            that order) in files and in memory.</td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">RGBA128</span></td>

            <td>A 128-bit RGBA format, which is stored as RGBA
            (in that order) in files and in memory.</td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">R16_BE</span></td>

            <td>A 16-bit <span class=
            "NDLSystemFont">FORMAT_ONE_CHANNEL</span> format,
            stored in big-endian byte order.</td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">R32_BE</span></td>

            <td>A 32-bit <span class=
            "NDLSystemFont">FORMAT_ONE_CHANNEL</span> format,
            stored in big-endian byte order.</td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">RG32_BE</span></td>

            <td>A 32-bit <span class=
            "NDLSystemFont">FORMAT_TWO_CHANNEL</span> format,
            which is stored as RG (in that order) in files and in
            memory. Each component is individually stored in
            big-endian byte order.</td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">RG64_BE</span></td>

            <td>A 16-bit <span class=
            "NDLSystemFont">FORMAT_TWO_CHANNEL</span> format,
            which is stored as RG (in that order) in files and in
            memory. Each component is individually stored in
            big-endian byte order.</td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">RGBA64_BE</span></td>

            <td>A 64-bit RGBA format, which is stored as RGBA (in
            that order) in files and in memory. Each component is
            individually stored in big-endian byte order.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">RGBA128_BE</span></td>

            <td>A 128-bit RGBA format, which is stored as RGBA
            (in that order) in files and in memory. Each
            component is individually stored in big-endian byte
            order.</td>
        </tr>
    </tbody>
</table>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
