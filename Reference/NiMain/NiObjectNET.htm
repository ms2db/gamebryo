<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiObjectNET</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>


<p class="NDLRefHeadClassTitle">NiObjectNET</p>

<p class="NDLRefParentage">: public <u><span style="color: #0000ff;"><a href="NiObject.htm"><span>NiObject</span></a></span></u></p>

<p class="NDLRefHeaderFile">&lt;NiObjectNET.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>An extension of <span class="NDLSystemFont">NiObject</span> 
 that supports names, extra data, and time controllers. This class is described 
 at length in the <a href="../../Programmer/Object_Systems/Introduction_to_Object_Systems.htm">object 
 system documentation</a>. A reference is provided here along with links 
 to specific sections of the <a href="../../Programmer/Object_Systems/Introduction_to_Object_Systems.htm">object 
 system documentation</a>.</p>

<p class="NDLRefHead1">Constructors</p>

<p>There are no public constructors for <span class="NDLSystemFont">NiObjectNET</span>. 
 All instances should be created via the streaming system creation functions 
 although generally an application will create subclasses of <span class="NDLSystemFont">NiObjectNET</span>.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<a name=Names></a><p class="NDLRefHead2">Names</p>

<p>Gamebryo uses string names as a mechanism to identify 
 an object. Names do not have to be unique in Gamebryo scenes, but it will 
 be useful to have unique names for method calls like <a href="NiAVObject.htm"><span 
 class="NDLSystemFont">NiAVObject::GetObjectByName</span></a>. Please see 
 the object system documentation on <a HREF="../../Programmer/Object_Systems/Names.htm">Names</a> 
 for more details.</p>

<p class="NDLRefMemberFunction">void SetName(const&nbsp;<a href="NiFixedString.htm">NiFixedString</a>&amp; 
 kName)</p>

<p class="NDLRefMemberFunction">const&nbsp;<a href="NiFixedString.htm">NiFixedString</a>&amp; 
 GetName() const</p>

<p class="NDLRefMemberDescription">Set and get the name of this <span class="NDLSystemFont">NiObjectNET</span>. 
  Note that 
 the set method will make a copy of the name internally.</p>

<a name=Extra_Data></a><p class="NDLRefHead2">Extra Data</p>

<p>Gamebryo uses <a href="NiExtraData.htm"><span class="NDLSystemFont">NiExtraData</span></a> 
 objects to add information into the scene that is useful to the application. 
 Please see the object system documentation on <a HREF="../../Programmer/Object_Systems/Extra_Data.htm">Extra 
 Data</a> for more details.</p>

<p class="NDLRefMemberFunction">unsigned short GetExtraDataSize() const</p>

<p class="NDLRefMemberFunction">bool AddExtraData(const&nbsp;<a href="NiFixedString.htm">NiFixedString</a>&amp; 
 kKey, NiExtraData* pkExtra)</p>

<p class="NDLRefMemberFunction">bool AddExtraData(NiExtraData* pkExtra)</p>

<p class="NDLRefMemberFunction">NiExtraData* GetExtraData(const&nbsp;<a href="NiFixedString.htm">NiFixedString</a>&amp; 
 kKey) const</p>

<p class="NDLRefMemberFunction">NiExtraData* GetExtraDataAt(unsigned short 
 usExtraDataIndex) const</p>

<p class="NDLRefMemberFunction">bool RemoveExtraData(const&nbsp;<a href="NiFixedString.htm">NiFixedString</a>&amp; 
 kKey)</p>

<p class="NDLRefMemberFunction">bool RemoveExtraDataAt(unsigned short usExtraDataIndex)</p>

<p class="NDLRefMemberFunction">void RemoveAllExtraData()</p>

<p class="NDLRefMemberFunction">bool SetExtraDataSize(unsigned short usSize)</p>

<p>&nbsp;</p>

<p><span class="NDLSystemFont">AddExtraData</span> returns 
 true if successful, false if a key of the same value is already present. 
 <span class="NDLSystemFont">RemoveExtraData</span> and <span class="NDLSystemFont">RemoveExtraDataAt</span> 
 return true if successful, false if unsuccessful.</p>

<p>&nbsp;</p>

<a name=Time_Controllers></a><p class="NDLRefHead2">Time Controllers</p>

<p>Gamebryo uses <span class="NDLSystemFont"><a href="NiTimeController.htm">NiTimeController</a></span> 
 objects to add information into the scene that is useful to the application. 
 Please see the object system documentation on <a HREF="../../Programmer/Object_Systems/Time_Controllers.htm">Time 
 Controllers</a> for more details.</p>

<p class="NDLRefMemberFunction">void PrependController(NiTimeController* 
 pkControl)</p>

<p class="NDLRefMemberFunction">void SetControllers(NiTimeController* pkControl)</p>

<p class="NDLRefMemberFunction">NiTimeController* GetControllers() const</p>

<p class="NDLRefMemberFunction">void RemoveController(NiTimeController* pkControl)</p>

<p class="NDLRefMemberFunction">void RemoveAllControllers()</p>

<p>In general, applications should never call <span class="NDLSystemFont">PrependController</span>, 
 <span class="NDLSystemFont">SetController</span>, or <span class="NDLSystemFont">RemoveController</span> 
 to add or remove an <span class="NDLSystemFont"><a href="NiTimeController.htm">NiTimeController</a></span> 
 from its target. Instead, the <span class="NDLSystemFont"><a HREF="NiTimeController.htm#SetTarget">NiTimeController::SetTarget</a></span> 
 function should be used for this purpose, since it will automatically 
 take care of inserting or removing the <span class="NDLSystemFont"><a 
 href="NiTimeController.htm">NiTimeController</a></span> into the <span 
 class="NDLSystemFont"><a href="NiObjectNET.htm">NiObjectNET</a></span>'s 
 list of controllers. To get a time controller of a particular type from 
 an NiObjectNET instance, the following macro can be used:</p>

<p class="NDLRefMemberFunction">NiGetController(classname, pkObjectNET)</p>

<p class="NDLRefMemberDescription">This macro takes the class name for the 
 type of time controller desired along with a pointer to an <span class="NDLSystemFont">NiObjectNET</span>. 
 It will return the first <span class="NDLSystemFont"><a HREF="NiTimeController.htm">NiTimeController</a></span> 
 of that type that is attached to <span class="NDLSystemFont">pkObjectNET</span> 
 or <span class="NDLSystemFont">NULL</span> if none exists. The returned 
 pointer will be cast to the <span class="NDLSystemFont">classname</span> 
 specified.</p>

<a name=Cloning></a><p class="NDLRefHead2">Cloning</p>

<p>Gamebryo <span class="NDLSystemFont">NiObjectNET</span> 
 adds minor functionality to the cloning system by specifying how the names 
 of strings are copied during a clone operation. Please see the object 
 system documentation on <a HREF="../../Programmer/Object_Systems/Cloning.htm">Cloning</a> 
 for more details.</p>

<p class="NDLRefMemberFunction">static void SetDefaultCopyType(CopyType eCopyType)</p>

<p class="NDLRefMemberFunction">static CopyType GetDefaultCopyType()</p>

<p class="NDLRefMemberFunction">static void SetDefaultAppendCharacter(char 
 cAppendCharacter)</p>

<p class="NDLRefMemberFunction">static char GetDefaultAppendCharacter()</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
