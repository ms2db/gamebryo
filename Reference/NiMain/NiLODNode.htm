<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiLODNode</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>


<p class="NDLRefHeadClassTitle">NiLODNode</p>

<p class="NDLRefParentage">: public <u><span style="color: #0000ff;"><a href="NiSwitchNode.htm"><span>NiSwitchNode</span></a></span></u></p>

<p class="NDLRefHeaderFile">&lt;NiLODNode.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiLODNode</span> 
 implements discrete level-of-detail (AKA static LOD). Level-of-detail 
 objects allow Gamebryo to automatically adjust the level of detail used 
 when rendering a scene graph object. The children of the <span class="NDLSystemFont">NiLODNode</span> 
 represent the different levels of detail. The specific algorithm used 
 to determine the current LOD level is based on the <a href="NiLODData.htm"><span 
 class="NDLSystemFont">NiLODData</span></a>. The application specifies the 
 geometry associated with each level of detail Whichever <span class="NDLSystemFont">NiLODNode</span> child chosen by 
 the <a href="NiLODData.htm"><span class="NDLSystemFont">NiLODData</span></a> 
 is the only <span class="NDLSystemFont">NiLODNode</span> 
 child that is rendered. Currently there are two types of <a href="NiLODData.htm"><span 
 class="NDLSystemFont">NiLODData</span></a>: <span class="NDLSystemFont"><a 
 HREF="NiRangeLODData.htm">NiRangeLODData</a></span> and <span class="NDLSystemFont"><a 
 HREF="NiScreenLODData.htm">NiScreenLODData</a></span>.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiLODNode()</p>

<p class="NDLRefMemberDescription">Default constructor. Constructs an <span class="NDLSystemFont">NiLODNode</span> 
 object with no levels of detail (<em>i.e.</em> no children). </p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">void SetLODActive(bool bLODActive)</p>

<p class="NDLRefMemberFunction">bool GetLODActive() const</p>

<p class="NDLRefMemberDescription">Get and set the LOD active attribute. 
 When the LOD is active it will recompute the visible LOD child during 
 the culling pass, in the function <span class="NDLSystemFont">OnVisible()</span>.</p>

<p class="NDLRefMemberFunction"><a href="NiLODData.htm">NiLODData</a>* GetLODData() 
 const</p>

<p class="NDLRefMemberDescription">Get the LOD data used to determine which 
 LOD child to show.</p>

<p class="NDLRefMemberFunction">void SetLODData(<a href="NiLODData.htm">NiLODData</a>* 
 pkLODData)</p>

<p class="NDLRefMemberDescription">Set the LOD data used to determine which 
 LOD child to show. The NiLODNode object will add a <a href="../../Programmer/Object_Systems/Reference_Counting_and_Smart_Pointers.htm">reference</a> 
 to the NiLODData object.</p>

<p class="NDLRefMemberFunction">static int GetGlobalLOD()</p>

<p class="NDLRefMemberFunction">static void SetGlobalLOD(int iNewLOD)</p>

<p class="NDLRefMemberDescription">These functions control a global LOD setting. 
 By setting this value to any value &gt;= 0 you will select the LOD child 
 shown by all <span class="NDLSystemFont">NiLODNode</span>s. This is useful 
 as a debugging tool for the generation of the art so you can see specific 
 LOD levels. Typically it is difficult to get a close look at the least 
 detailed LOD level.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
