<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiNode</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiNode</p>

<p class="NDLRefParentage">: public <a href=
"NiAVObject.htm">NiAVObject</a></p>

<p class="NDLRefHeaderFile">&lt;NiNode.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>The <span class="NDLSystemFont">NiNode</span> class represents
the internal nodes of a scene graph. Nodes can have an arbitrary
number of children. <a href="NiDynamicEffect.htm">Dynamic
effects</a> specify nodes to affect, in which case all objects
are in the subtree rooted at a node are affected. Node subclasses
can adjust sorting behavior for the scene graph subtree below.
Nodes also provide for recursive propagation of calls in the
picking and collision detection systems.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiNode(unsigned int uiNumChildren
= 0)</p>

<p class="NDLRefMemberDescription">This default constructor
creates an <span class="NDLSystemFont">NiNode</span> using the
default <span class="NDLSystemFont">NiAVObject</span>
constructor. The optional <span class=
"NDLSystemFont">uiNumChildren</span> argument is useful for
preallocating the node's child array if the number of children is
known at the time.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<a name="Child_Array_Functions" id="Child_Array_Functions"></a><p class="NDLRefHead2">Child Array Functions</p>

<p class="NDLRefMemberFunction">unsigned int GetArrayCount()
const</p>

<p class="NDLRefMemberDescription">Returns the size of the node's
child array. This size is the number of contiguous elements that
must be iterated upon to find all non-null children. This number
may be significantly larger than the number of non-<span class=
"NDLSystemFont">NULL</span> children (due to the existence of
<span class="NDLSystemFont">NULL</span> children), which is given
by the function below.</p>

<p class="NDLRefMemberFunction">unsigned int GetChildCount()
const</p>

<p class="NDLRefMemberDescription">Returns the number of
non-<span class="NDLSystemFont">NULL</span> children of the node.
Note that iterating from index <span class=
"NDLSystemFont">0</span> to index <span class=
"NDLSystemFont">GetChildCount()-1</span> will not necessarily
iterate over all non-<span class="NDLSystemFont">NULL</span>
children, as the non-<span class="NDLSystemFont">NULL</span>
children may be interspersed with <span class=
"NDLSystemFont">NULL</span> children.</p>

<p class="NDLRefMemberFunction">virtual void AttachChild(<a href=
"NiAVObject.htm">NiAVObject</a>* pkChild, bool bFirstAvail =
false)</p>

<p class="NDLRefMemberDescription">Attaches a child to the end of
the child array, or in the first empty slot in the child array if
<span class="NDLSystemFont">bFirstAvail</span> is true. Does not
check to see if the object is already in the child list</p>

<p class="NDLRefMemberFunction">virtual <a href=
"NiAVObject.htm">NiAVObjectPtr</a> DetachChild(NiAVObject*
pkChild)</p>

<p class="NDLRefMemberDescription">Detaches and returns a smart
pointer to the given child. Returns the pointer to the calling
object even if the object was not actually found in the child
array.</p>

<p class="NDLRefMemberFunction">virtual <a href=
"NiAVObject.htm">NiAVObjectPtr</a> DetachChildAt(unsigned int
i)</p>

<p class="NDLRefMemberDescription">Detaches the child at the
given index (if any) and returns a smart pointer to that object,
leaving the child array at that index set to <span class=
"NDLSystemFont">NULL</span>.</p>

<p class="NDLRefMemberFunction"><a href=
"NiAVObject.htm">NiAVObject</a>* GetAt(unsigned int i) const</p>

<p class="NDLRefMemberDescription">Returns a pointer to the child
at the given index, or <span class="NDLSystemFont">NULL</span> if
no children were attached at that index.</p>

<p class="NDLRefMemberFunction">virtual <a href=
"NiAVObject.htm">NiAVObjectPtr</a> SetAt(unsigned int i, <a href=
"NiAVObject.htm">NiAVObject</a>* pkChild)</p>

<p class="NDLRefMemberDescription">Sets the child at the given
index to the desired object, and returns the previous child that
was detached from that index as a smart pointer.</p>

<p class="NDLRefMemberFunction">virtual bool
GrowChildArray(unsigned int uiNewSize)</p>

<p class="NDLRefMemberDescription">Grows the child array to the
desired size. If uiNewSize is less than or equal to the currently
allocated array size, nothing is done. Returns true if the array
is resized, false if not.</p>

<a name="Transforms" id="Transforms"></a><p class="NDLRefHead2">Transforms</p>

<a name="Dynamic_Effect_Functions" id="Dynamic_Effect_Functions"></a><p class="NDLRefHead2">Dynamic Effect Functions</p>

<p class="NDLRefMemberFunction">const <a href=
"NiTPointerList.htm">NiDynamicEffectList</a>&amp; GetEffectList()
const</p>

<p class="NDLRefMemberDescription">Returns a constant (read-only)
version of the set of <span class="NDLSystemFont"><a href=
"NiDynamicEffect.htm">NiDynamicEffect</a></span> objects that are
attached as affecting this node's subtree.</p>

<p class="NDLRefMemberFunction">bool AttachEffect(<span class=
"NDLSystemFont"><a href=
"NiDynamicEffect.htm">NiDynamicEffect</a></span>* pkEffect)</p>

<p class="NDLRefMemberDescription">Attaches a dynamic effect to
the node. Attached effects affect the node and all of its child
subtree geometry. This function will not attach an effect twice
to the same object. The function will simply return false and not
attach the effect. If the effect is attached, the function will
return true.</p>

<p class="NDLRefMemberFunction">bool DetachEffect(<span class=
"NDLSystemFont"><a href=
"NiDynamicEffect.htm">NiDynamicEffect</a></span>* pkEffect)</p>

<p class="NDLRefMemberDescription">Detaches the given dynamic
effect from the effect list of the node, if the effect was
attached and returns true. If the effect was not attached to the
object, then the function does nothing, but returns false.</p>

<p class="NDLRefMemberFunction">bool DetachAllEffects()</p>

<p class="NDLRefMemberDescription">Detaches all dynamic effects
from the effect list of the node. If there were effects to
detach, the function returns true, otherwise it returns
false.</p>

<a name="Searching" id="Searching"></a><p class="NDLRefHead2">Searching</p>

<p class="NDLRefMemberFunction">virtual <a href=
"NiAVObject.htm">NiAVObject</a>* GetObjectByName(const <a href=
"NiFixedString.htm">NiFixedString</a>&amp; kName)</p>

<p class="NDLRefMemberDescription">Returns a pointer to an object
in the scene graph rooted at the current node if the object's
name is the same as the input name.</p>

<p class="NDLRefMemberFunction">virtual void
GetObjectsByType(const NiRTTI* pkRTTI,
NiTPointerList&lt;NiAVObject*&gt;&amp; kObjects)</p>

<p class="NDLRefMemberDescription">This utility function
recursively populates the passed array <span class=
"NDLSystemFont">kObjects</span> with all of the objects that
exactly match the RTTI type <span class=
"NDLSystemFont">pkRTTI</span>.</p>

<a name="UpdateFunctions" id="UpdateFunctions"></a><p class="NDLRefHead2">Update Functions</p>

<p class="NDLRefMemberFunction">virtual void
UpdateDownwardPass(NiUpdateProcess&amp; kUpdate)</p>

<p class="NDLRefMemberFunction">virtual void
UpdateSelectedDownwardPass(NiUpdateProcess&amp; kUpdate)</p>

<p class="NDLRefMemberFunction">virtual void
UpdateRigidDownwardPass(NiUpdateProcess&amp; kUpdate)</p>

<p class="NDLRefMemberDescription"><span class=
"NDLSystemFont">NiNode</span> overrides these three <span class=
"NDLSystemFont"><a href="NiAVObject.htm">NiAVObject</a></span>
functions to provide node-specific update capabilities. In
addition to the normal update work performed by <span class=
"NDLSystemFont"><a href="NiAVObject.htm">NiAVObject</a></span>,
the methods in <span class="NDLSystemFont">NiNode</span> update
the node's bounding volume by either merging the bounding volumes
of any children or by simple transformation in the event that
rigid bound updating is enabled via selective update flags and
<span class="NDLSystemFont">UpdateRigidDownwardPass</span> is
invoked. As noted in the <span class="NDLSystemFont"><a href=
"NiAVObject.htm">NiAVObject</a></span> documentation, classes
that override one of these methods should override all three.</p>

<p class="NDLRefMemberFunction">virtual void
UpdateUpwardPass()</p>

<p class="NDLRefMemberDescription">Called by <span class=
"NDLSystemFont">NiAVObject::Update</span> to notify parent nodes
of an update call not made to the root of a scene graph.
<span class="NDLSystemFont">UpdateUpwardPass</span> allows
ancestors of an <span class="NDLSystemFont"><a href=
"NiAVObject.htm">NiAVObject</a></span> to correctly update
hierarchical bounding volume information.</p>

<p class="NDLRefHead1">Notes</p>

<a name="Cloning_Behavior" id="Cloning_Behavior"></a><p class="NDLRefHead2">Cloning Behavior</p>

<p>When an <span class="NDLSystemFont">NiNode</span> object is
cloned by <span class="NDLSystemFont"><a href=
"NiAVObject.htm">NiAVObject::Clone</a></span>, a duplicate copy
of the calling <span class="NDLSystemFont">NiNode</span> and the
subtree below it is created and returned. This technique is a
so-called "deep copy", as all nodes in the calling scene graph
are copied, creating an exact duplicate of the scene graph. Note
that the new copy of the scene graph must have <span class=
"NDLSystemFont">Update</span> called upon it (or a parent) before
use.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
