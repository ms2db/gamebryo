<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiSourceTexture</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiSourceTexture</p>

<p class="NDLRefParentage">: public <a href=
"NiTexture.htm"><span>NiTexture</span></a></p>

<p class="NDLRefHeaderFile">&lt;NiSourceTexture.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiSourceTexture</span> represents
all texture image objects that are created from either an image
file or a block of in-memory pixel data. This class is the
<span class="NDLSystemFont"><a href=
"NiTexture.htm">NiTexture</a></span> subclass that applications
will use most frequently (many applications will use it
exclusively), either directly or via content imported from NIF
files.</p>

<p><span class="NDLSystemFont">NiSourceTexture</span> objects can
represent both static and dynamic content, as <span class=
"NDLSystemFont">NiSourceTexture</span> data objects can have
their pixel data modified on the fly to implement dynamic texture
behavior. Note, however, that if the dynamic content is
write-only, then using <span class="NDLSystemFont"><a href=
"NiDynamicTexture.htm">NiDynamicTexture</a></span> objects is
usually going to be significantly faster than using <span class=
"NDLSystemFont">NiSourceTexture</span> objects.</p>

<p class="NDLRefHead1">Constructors</p>

<p>No public constructors are available, as the creation
functions must be able to fail in some cases. As a result, all
creation is handled via the static <span class=
"NDLSystemFont">Create</span> functions below.</p>

<p class="NDLRefHead1">Static Member Functions</p>

<p class="NDLRefMemberFunction">static NiSourceTexture*
Create(const <a href="NiFixedString.htm">NiFixedString</a>&amp;
kFilename, <a href=
"NiTexture__FormatPrefs.htm">FormatPrefs</a>&amp; kPrefs
= ms_kDefaultPrefs, bool bLoadDirectToRendererHint = false, bool
bSrcRendererDataIsPersistent = false, bool bStatic = true)</p>

<p class="NDLRefMemberDescription">Creates an <span class=
"NDLSystemFont">NiSourceTexture</span> that represents the given
image file name. The format preferences are saved in the texture
and are passed to any renderer when the texture is loaded to that
renderer. The format preferences are a request only, and may be
ignored by any given renderer. If preloading is enabled, the
texture will be preloaded to all existing renderers prior to
being returned to the caller. See the notes section for a
discussion of preloading. If a platform-specific subdirectory has
been specified in the <span class="NDLSystemFont"><a href=
"NiImageConverter.htm">NiImageConverter</a></span> prior to the
creation of the <span class=
"NDLSystemFont">NiSourceTexture</span>, then it will be used. See
the notes section below for a discussion of platform-specific
image data loading. If <span class=
"NDLSystemFont">bLoadDirectToRendererHint</span> is <span class=
"NDLSystemFont">true</span>, then when the texture data is loaded
into the renderer, the renderer may choose to load a texture file
directly into a renderer-specific resource, bypassing the
application-level <span class="NDLSystemFont"><a href=
"NiPixelData.htm">NiPixelData</a></span> object and all
<span class="NDLSystemFont"><a href=
"NiImageConverter.htm">NiImageConverter</a></span>-based texture
conversion entirely. By default, no application-level
<span class="NDLSystemFont"><a href=
"NiPixelData.htm">NiPixelData</a></span> object will be stored
for this texture, as the file itself serves as backing store.  The <span class="NDLSystemFont">bStatic</span> parameter 
controls whether the image is assumed to be static; see the notes below
for a discussion of dynamic modification of pixel values.
<span class="NDLSystemFont">bSrcRendererDataIsPersistent</span>
indicates whether persistent source texture renderer data
(<span class="NDLSystemFont"><a href=
"NiPersistentSrcTextureRendererData.htm">NiPersistentSrcTextureRendererData</a></span>)
is to be created at <span class=
"NDLSystemFont">NiSourceTexture</span> creation time.</p>

<p class="NDLRefMemberFunction">static NiSourceTexture*
Create(<a href="NiPixelData.htm">NiPixelData</a>* pkRaw, <a href=
"NiTexture__FormatPrefs.htm">FormatPrefs</a>&amp; kPrefs
= ms_kDefaultPrefs, bool bStatic = true)</p>

<p class="NDLRefMemberDescription">Creates an <span class=
"NDLSystemFont">NiSourceTexture</span> that represents the given
<span class="NDLSystemFont"><a href=
"NiPixelData.htm">NiPixelData</a></span> object. A reference to
the <span class="NDLSystemFont"><a href=
"NiPixelData.htm">NiPixelData</a></span> object is held in the
<span class="NDLSystemFont">NiSourceTexture</span>. The format
preferences are saved in the texture and are passed to any
renderer when the texture is loaded to that renderer. The format
preferences are a request only, and may be ignored by any given
renderer. If preloading is enabled, the texture will be preloaded
to all existing renderers prior to being returned to the caller.
See the notes section for a discussion of preloading. The <span class="NDLSystemFont">bStatic</span> parameter 
controls whether the image is assumed to be static; see the notes below for a
discussion of dynamic modification of pixel values.</p>

<p class="NDLRefMemberFunction">static void SetUsePreloading(bool
bPreload)</p>

<p class="NDLRefMemberFunction">static bool
GetUsePreloading()</p>

<p class="NDLRefMemberDescription">These functions set and
retrieve the global flag to enable and disable <span class=
"NDLSystemFont">NiSourceTexture</span>s preloading to the set of
active renderers. If this flag is set to <span class=
"NDLSystemFont">true</span> (the default), then any created
<span class="NDLSystemFont">NiSourceTexture</span> will be
preloaded to all existing renderer objects prior to returning the
<span class="NDLSystemFont">NiSourceTexture</span> object from
the creation function. If the flag is set to <span class=
"NDLSystemFont">false</span>, then any <span class=
"NDLSystemFont">NiSourceTexture</span> objects created after the
flag is cleared will not be preloaded. These objects will have
their internal renderer data objects allocated the first time
that they are used in a rendered scene in this case. See the
notes below for a discussion of preloading.</p>

<p class="NDLRefMemberFunction">static void SetUseMipmapping(bool
bMipmap)</p>

<p class="NDLRefMemberFunction">static bool
GetUseMipmapping()</p>

<p class="NDLRefMemberDescription">These functions set and
retrieve the global flag to enable use of mipmapping. If this
flag is set to <span class="NDLSystemFont">true</span>, then the
engine will attempt to use a mipmap pyramid when possible. By
default the value is set to <span class=
"NDLSystemFont">true</span>.</p>

<p class="NDLRefMemberFunction">static void
SetDestroyAppDataFlag(bool bDestroy)</p>

<p class="NDLRefMemberFunction">static bool
GetDestroyAppDataFlag()</p>

<p class="NDLRefMemberDescription">These functions set and
retrieve the global flag to enable automatic disposal of the
application level backing store of pixel data. By default it is
set to <span class="NDLSystemFont">true</span>. If set to
<span class="NDLSystemFont">true</span>, then the application
level data will be destroyed after the renderer data is created.
This can occur during linking if the preloading flag is true or
during rendering.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">virtual unsigned int GetWidth()
const</p>

<p class="NDLRefMemberFunction">virtual unsigned int GetHeight()
const</p>

<p class="NDLRefMemberDescription">Return the width or height of
the texture, or zero if the texture is created from a filename
and has not yet been loaded to a renderer. (This latter situation
would only occur if the texture has not yet been rendered and no
renderers were active when the texture was created.)</p>

<p class="NDLRefMemberFunction">const <a href=
"NiFixedString.htm">NiFixedString</a>&amp; GetFilename()
const</p>

<p class="NDLRefMemberFunction">void SetFilename(const <a href=
"NiFixedString.htm">NiFixedString</a>&amp; pcFilename)</p>

<p class="NDLRefMemberDescription">Returns and sets the
platform-independent version of the filename from which the image
was created, or <span class="NDLSystemFont">NULL</span> if the
image was created from pixel data. See the notes below for a
discussion of platform-specific file loading.</p>

<p class="NDLRefMemberFunction">const <a href=
"NiFixedString.htm">NiFixedString</a>&amp;
GetPlatformSpecificFilename() const</p>

<p class="NDLRefMemberDescription">Returns the platform-specific
version of the filename from which the image was created, or
<span class="NDLSystemFont">NULL</span> if the image was created
from pixel data. See the notes below for a discussion of
platform-specific file loading.</p>

<p class="NDLRefMemberFunction"><a href=
"NiPixelData.htm">NiPixelData</a>* GetSourcePixelData()</p>

<p class="NDLRefMemberFunction">const <a href=
"NiPixelData.htm">NiPixelData</a>* GetSourcePixelData() const</p>

<p class="NDLRefMemberDescription">Return the app-level source
pixel data, if it exists (either because the texture was created
from an <span class="NDLSystemFont"><a href=
"NiPixelData.htm">NiPixelData</a></span> object, or because
<span class="NDLSystemFont">LoadPixelDataFromFile</span> has been
called). See the notes section below for notes on changing the
app-level pixel data dynamically.</p>

<p class="NDLRefMemberFunction">virtual void
LoadPixelDataFromFile()</p>

<p class="NDLRefMemberDescription">If the <span class=
"NDLSystemFont">NiSourceTexture</span> was created from a
filename, this function reads the image file using the current
image converter and stores the resulting <span class=
"NDLSystemFont"><a href="NiPixelData.htm">NiPixelData</a></span>
in the <span class="NDLSystemFont">NiSourceTexture</span>, as if
the texture had been created from the <span class=
"NDLSystemFont"><a href="NiPixelData.htm">NiPixelData</a></span>.
Once the pixel data exists, the renderers will refresh the
texture (if needed or indicated by the revision ID) from the
pixel data rather than the file. This approach may be used to
dynamically change the pixel values of a texture that was created
from a file. See the notes section below for notes on changing
the app-level pixel data dynamically.</p>

<p class="NDLRefMemberFunction">virtual void
DestroyAppPixelData()</p>

<p class="NDLRefMemberDescription">Clears the application-level
pixel data from the image. Applications should use care when
calling this function on <span class=
"NDLSystemFont">NiSourceTextures</span> created from <span class=
"NDLSystemFont"><a href="NiPixelData.htm">NiPixelData</a></span>
objects; as such textures use app pixel data as their only
renderer-independent backing store. If such a texture must be
loaded to a new renderer after the app-level pixel data is
cleared, the image will not be rendered. This issue does not
apply for <span class="NDLSystemFont">NiSourceTexture</span>
objects that are created from filenames, as the image file forms
a persistent backing store. However, if an application knows that
a <span class="NDLSystemFont">NiSourceTexture</span> has already
been preloaded to all renderers, it can delete the app-level
pixel data (if it exists) to save memory.</p>

<p class="NDLRefMemberFunction">bool GetStatic() const</p>

<p class="NDLRefMemberFunction">void SetStatic(bool bStatic)</p>

<p class="NDLRefMemberDescription">Get and set the static flag.
If this flag is <span class="NDLSystemFont">true</span>, then the
application cannot assume that any dynamic changes to the app
pixel data will be reflected in the rendered image, even if the
revision ID of the app pixel data is changed. If the flag is
<span class="NDLSystemFont">false</span>, then the changing the
revision ID of the app pixel data will cause the rendered version
of the texture to be updated. Renderers use this flag for
optimization purposes. The default setting is <span class=
"NDLSystemFont">true</span> by default, all <span class=
"NDLSystemFont">NiSourceTexture</span>s are assumed to be static.
Applications must manually clear this flag for textures they
intend to modify. See the notes section below for notes on
changing the app-level pixel data dynamically.</p>

<p class="NDLRefMemberFunction">void
SetLoadDirectToRendererHint(bool bDirect)</p>

<p class="NDLRefMemberFunction">bool
GetLoadDirectToRendererHint() const</p>

<p class="NDLRefMemberDescription">Get and set a hint to the
renderer that the texture can be loaded directly from a texture
file into a renderer-specific resource, bypassing the
application-level <span class="NDLSystemFont"><a href=
"NiPixelData.htm">NiPixelData</a></span> object and all
<span class="NDLSystemFont"><a href=
"NiImageConverter.htm">NiImageConverter</a></span> based texture
conversion entirely. The renderer may or may not support the
hint; see the documentation on the various renderers to determine
whether the feature is supported.</p>

<p class="NDLRefMemberFunction">
NiPersistentSrcTextureRendererData*
GetPersistentSourceRendererData();</p>

<p class="NDLRefMemberFunction">const
NiPersistentSrcTextureRendererData*
GetPersistentSourceRendererData() const;</p>

<p class="NDLRefMemberFunction">void
SetPersistentSourceRendererData(NiPersistentSrcTextureRendererData*
pkPersistentSrcRendererData);</p>

<p class="NDLRefMemberDescription">Get or set the
platform-specific persistent source texture renderer data
(<span class="NDLSystemFont"><a href=
"NiPersistentSrcTextureRendererData.htm">NiPersistentSrcTextureRendererData</a></span>),
if it exists (either because this data was created from an
<span class="NDLSystemFont"><a href=
"NiPixelData.htm">NiPixelData</a></span> object, or because it
has been streamed in from a NIF file).</p>

<p class="NDLRefMemberFunction">bool
GetSourceRendererDataIsPersistent() const;</p>

<p class="NDLRefMemberFunction">void
SetSourceRendererDataIsPersistent(bool
bSrcRendererDataIsPersistent);</p>

<p class="NDLRefMemberDescription">Get or set whether there is
persistent platform-specific source texture renderer data in the
NIF file which may be streamed. If present, then Gamebryo is able
to load the texture (already in optimal format for a specific
platform) directly into renderer-specific data structures. This
step bypasses the application-level <span class=
"NDLSystemFont"><a href="NiPixelData.htm">NiPixelData</a></span>
object, and all texture conversion, entirely.</p>

<p class="NDLRefHead1">Notes</p>

<p class="NDLRefHead2">Dynamic Pixel Data Modification</p>

<p>Applications may modify the app-level pixel data in an
<span class="NDLSystemFont">NiSourceTexture</span> (assuming that
it exists). The app-level pixel data may be queried from an
<span class="NDLSystemFont">NiSourceTexture</span> using
<span class=
"NDLSystemFont">NiSourceTexture::GetSourcePixelData</span>. If
the <span class="NDLSystemFont">NiSourceTexture</span> object was
created from a filename, then the application will have to call
<span class=
"NDLSystemFont">NiSourceTexture::LoadPixelDataFromFile</span> to
cause app-level pixel data to be allocated in the texture.</p>

<p>Once the pixel data object is retrieved, the pixel values may
be modified. However, once the values are modified, the
application must ensure that the <span class=
"NDLSystemFont">NiSourceTexture</span> is not marked as static
(i.e. <span class=
"NDLSystemFont">NiSourceTexture::SetStatic(false)</span> has been
called upon the object at some point). Then, after modifying the
data but before using the texture in a rendering operation, it
must call <span class="NDLSystemFont"><a href=
"NiPixelData.htm">NiPixelData</a></span><span class=
"NDLSystemFont">::MarkAsChanged()</span> on the app-level pixel
data. If either of these conditions is not met, the renderer may
not reload the changed pixel data to the destination device
texture data. These actions are optimizations to speed the use of
the more common case of static texture data.</p>

<p>Note, however, that if the dynamic content is write-only, then
using <span class="NDLSystemFont"><a href=
"NiDynamicTexture.htm">NiDynamicTexture</a></span> objects is
usually going to be significantly faster than using <span class=
"NDLSystemFont">NiSourceTexture</span> objects.</p>

<p class="NDLRefHead2">Texture Image Data Preloading</p>

<p>Unless disabled with a call to the static <span class=
"NDLSystemFont">NiSourceTexture::SetUsePreloading(false)</span>,
each <span class="NDLSystemFont">NiSourceTexture</span> will be
preloaded to the current renderer (if one exists) when the
texture is created, prior to returning the <span class=
"NDLSystemFont">NiSourceTexture</span> to the caller. This
preloading is an optimization to prevent disk loads or
reformatting during game runtime, which could cause "blips" in
the frame rate. The texture data is loaded from disk (if need
be), and then the source pixel data is converted to a
renderer-compatible format, using the current image converter
object. If this conversion fails, the behavior will be
renderer-specific. Preloading uses platform-specific image file
loading (see below for notes on platform-specific loading).</p>

<p class="NDLRefHead2">Loading Image Data with
LoadDirectToRenderer Hint</p>

<p>Gamebryo's streaming system does not necessarily load texture
images from external files immediately when they are encountered
in the stream, even when the <span class=
"NDLSystemFont">SetUsePreloading</span> flag has been enabled.
Instead, the images are added to a list to be precached later.
Normally this is transparent to the applications, but for image
files that will be loaded with the <span class=
"NDLSystemFont">LoadDirectToRenderer</span> hint, there may be an
additional impact: these textures will be able to provide valid
data for the functions <span class=
"NDLSystemFont">GetHeight</span> or <span class=
"NDLSystemFont">GetWidth</span> until the image files have been
loaded. To force the images to load, applications can call
<span class="NDLSystemFont">NiRenderer::PerformPrecache</span>
from the thread used to create the renderer.</p>

<p class="NDLRefHead2">Platform Specific Subdirectory Loading</p>

<p><span class="NDLSystemFont">NiSourceTexture</span> objects
support platform-specific data loading. This capability enables
applications to place pre-formatted image files for multiple
platforms in different subdirectories and select the desired
platform at runtime.</p>

<p>For example, an application that will run on D3D and Xbox 360
might place a standard-format "<span class=
"NDLSystemFont">Textures/MyTexture.NIF</span>" image file in the
"<span class="NDLSystemFont">Textures</span>" directory, and then
place an Xbox 360-formatted "<span class=
"NDLSystemFont">Textures/Xbox360/MyTexture.NIF</span>" image file
in an "Xbox360" subdirectory of the "<span class=
"NDLSystemFont">Textures</span>" directory. Having arranged the
files in this way, under normal circumstances, calling
<span class=
"NDLSystemFont">NiSourceTexture::Create("Textures/MyTexture.NIF")</span>
will load the standard-format file. However, if the application
calls <span class=
"NDLSystemFont">NiImageConverter::SetPlatformSpecificSubdirectory("Xbox360")</span>
prior to loading the <span class=
"NDLSystemFont">NiSourceTexture</span>, then the call to
<span class=
"NDLSystemFont">NiSourceTexture::Create("Textures/MyTexture.NIF")</span>
will load the Xbox 360-formatted file from the "Xbox360"
subdirectory.</p>

<p>Since it is not a requirement that a subdirectory represent a
platform, this trick can also be used to store textures of
different sizes for different levels of 3D hardware (e.g.
subdirectories such as "<span class=
"NDLSystemFont">64MegCards</span>", "<span class=
"NDLSystemFont">128MegCards</span>", etc).</p>

<p>Note that the platform-specific subdirectory is read and
copied into the filename only once at <span class=
"NDLSystemFont">NiSourceTexture</span> creation time. Later
changes to the platform-specific subdirectory will only affect
<span class="NDLSystemFont">NiSourceTexture</span> created
later.</p>

<p>Platform-specific subdirectory loading does not apply to
<span class="NDLSystemFont">NiSourceTexture</span> created from
<span class="NDLSystemFont"><a href=
"NiPixelData.htm">NiPixelData</a></span> objects, as these
<span class="NDLSystemFont">NiSourceTexture</span> objects have
no filenames.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
