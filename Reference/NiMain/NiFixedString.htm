<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiFixedString</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiFixedString</p>

<p class="NDLRefParentage">: public <a href=
"../../Reference/NiSystem/NiMemObject.htm">NiMemObject</a></p>

<p class="NDLRefHeaderFile">&lt;NiFixedString.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>This class encapsulates a memory efficient implementation of
reference-counted ASCII strings which are managed by a global
string table. Additionally, <span class=
"NDLSystemFont">NiFixedString</span> objects have the property
that all strings with the same value point to the same character
buffer in memory. This capability allows for fast comparison
between <span class="NDLSystemFont">NiFixedString</span> objects.
<span class="NDLSystemFont">NiFixedString</span> objects are not
meant to be changed once created. Please see the <a href=
"NiFixedString.htm#Notes">notes</a> section for details on
streaming and using <span class=
"NDLSystemFont">NiFixedString</span> objects in function
calls.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiFixedString()</p>

<p class="NDLRefMemberDescription">Create a string with a value
of <span class="NDLSystemFont">NULL</span>.</p>

<p class="NDLRefMemberFunction">NiFixedString(const char*
pcString)</p>

<p class="NDLRefMemberDescription">Create a string matching the
value of <span class="NDLSystemFont">pcString</span>. If the
string already exists in memory, increment its reference count.
If the string does not already exist in memory, create a new one
and set its reference count to two. Note that the reference count
of a new <span class="NDLSystemFont">NiFixedString</span> object
is two because the global string table holds a reference to the
string. <span class="NDLSystemFont">NiFixedString</span> objects
are limited to strings that are 65,535 characters or less. Debug
builds will assert on this limit.</p>

<p class="NDLRefMemberFunction">NiFixedString(const
NiFixedString&amp; kString)</p>

<p class="NDLRefMemberDescription">Create a string pointing to
the same data as <span class="NDLSystemFont">kString</span> and
incrementing its reference count.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<a name="Accessors" id="Accessors"></a><p class="NDLRefHead2">Accessors</p>

<p class="NDLRefMemberFunction">operator const char*() const</p>

<p class="NDLRefMemberDescription">Access the internal character
data of this string. The return value is constant to prevent data
manipulation.</p>

<p class="NDLRefMemberFunction">size_t GetLength() const</p>

<p class="NDLRefMemberDescription">Return the length of the
internal character data.</p>

<p class="NDLRefMemberFunction">unsigned int GetRefCount()
const</p>

<p class="NDLRefMemberDescription">Return the current reference
count of the character data.</p>

<p class="NDLRefMemberFunction">bool Exists() const</p>

<p class="NDLRefMemberDescription">Determine whether or not this
string is <span class="NDLSystemFont">NULL</span>.</p>

<a name="Overloaded_Operators" id="Overloaded_Operators"></a><p class="NDLRefHead2">Overloaded Operators</p>

<p class="NDLRefMemberFunction">NiFixedString&amp;
operator=(NiFixedString&amp; kString)</p>

<p class="NDLRefMemberDescription">Create a string pointing to
the same data as <span class="NDLSystemFont">kString</span> and
incrementing its reference count. Decrement the current value of
the string, attempting to remove the <span class=
"NDLSystemFont">NiFixedString</span> from the global string table
if the reference count drops to one.</p>

<p class="NDLRefMemberFunction">NiFixedString&amp;
operator=(const char* pcString)</p>

<p class="NDLRefMemberDescription">Create a string matching the
value of <span class="NDLSystemFont">pcString</span>. If the
string already exists in memory, increment its reference count.
If the string does not already exist in memory, create a new one
and set its reference count to one. Decrement the current value
of the <span class="NDLSystemFont">NiFixedString</span>,
attempting to remove the <span class=
"NDLSystemFont">NiFixedString</span> from the global string table
if the reference count drops to one.</p>

<p class="NDLRefMemberFunction">friend bool operator==(const
NiFixedString&amp; s1, const NiFixedString&amp; s2)</p>

<p class="NDLRefMemberFunction">friend bool operator==(const
NiFixedString&amp; s1, const char* s2)</p>

<p class="NDLRefMemberFunction">friend bool operator==(const
char* s1, const NiFixedString&amp; s2)</p>

<p class="NDLRefMemberFunction">friend bool operator!=(const
NiFixedString&amp; s1, const NiFixedString&amp; s2)</p>

<p class="NDLRefMemberFunction">friend bool operator!=(const
NiFixedString&amp; s1, const char* s2)</p>

<p class="NDLRefMemberFunction">friend bool operator!=(const
char* s1, const NiFixedString&amp; s2)</p>

<p class="NDLRefMemberDescription">Helper functions that assist
in comparing strings. <span class=
"NDLSystemFont">NiFixedString</span> to <span class=
"NDLSystemFont">NiFixedString</span> comparison is very fast
since it is a simple pointer value comparison and does not need
to de-reference the character array. <span class=
"NDLSystemFont">NiFixedString</span> to character array
comparisons have been accelerated for the case where the
character array is really pointing to an <span class=
"NDLSystemFont">NiFixedString.</span></p>

<p class="NDLRefMemberFunction">bool Equals(const char* pcStr)
const</p>

<p class="NDLRefMemberFunction">bool EqualsNoCase(const char*
pcStr) const</p>

<p class="NDLRefMemberDescription">Helper functions for comparing
strings with and without case sensitivity.</p>

<p class="NDLRefMemberFunction">bool Contains(const char* pcStr)
const</p>

<p class="NDLRefMemberFunction">bool ContainsNoCase(const char*
pcStr) const</p>

<p class="NDLRefMemberDescription">Helper functions for
determining if a string is a substring of this fixed string with
and without case sensitivity.</p>

<a name="Notes" id="Notes"></a><p class="NDLRefHead1">Notes</p>

<p class="NDLRefHead2">Streaming</p>

<p><span class="NDLSystemFont">NiFixedString</span>s work
slightly differently from normal values in the streaming process.
<span class="NDLSystemFont"><a href=
"NiObject.htm">NiObject</a></span> derived classes that wish to
save <span class="NDLSystemFont">NiFixedString</span>s will first
need to register the strings using the <span class=
"NDLSystemFont">NiStream::RegisterFixedString</span> method in
their <span class="NDLSystemFont"><a href=
"NiObject.htm#Streaming">NiObject::RegisterStreamables</a></span>
implementation. In the <a href=
"NiObject.htm#Streaming"><span class=
"NDLSystemFont">NiObject::SaveBinary</span></a> implementation,
<span class="NDLSystemFont">NiStream::SaveFixedString</span> will
need to be called. Upon load, there is no need for registration
and therefore only <span class=
"NDLSystemFont">NiStream::LoadFixedString</span> will need to be
called.</p>

<p class="NDLRefHead2">Usage In Function Calls</p>

<p>Passing <span class="NDLSystemFont">NiFixedString</span>s
directly down the stack is quite expensive because a new
<span class="NDLSystemFont">NiFixedString</span> is created every
function call. New strings must increment and decrement the
reference count, which means pointer de-referencing and cache
misses. Instead of writing a function like this:</p>

<p><span class="NDLSystemFont">void SetName(NiFixedString
kName)</span></p>

<p>Write a function like this:</p>

<p><span class="NDLSystemFont">void SetName(const
NiFixedString&amp; kName)</span></p>

<p>This subtle difference allows the compiler to pass the
<span class="NDLSystemFont">NiFixedString</span> down the stack
without creating a new instance every call.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
