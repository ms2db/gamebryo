<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiZBufferProperty</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiZBufferProperty</p>

<p class="NDLRefParentage">: public <a href=
"NiProperty.htm">NiProperty</a></p>

<p class="NDLRefHeaderFile"><span class=
"NDLSystemFont">&lt;NiZBufferProperty.h&gt;</span></p>

<p class="NDLRefHead1">Description</p>

<p>An <span class="NDLSystemFont">NiZBufferProperty</span> allows
an application to set the test and write modes of the renderer's
Z-buffer and to set the comparison function used for the Z-buffer
test.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiZBufferProperty()</p>

<p class="NDLRefMemberDescription">This default constructor
creates a property with Z-buffer tests and writes enabled and the
Z-buffer test function set to <span class=
"NDLSystemFont">TEST_LESSEQUAL</span>.</p>

<p class="NDLRefHead1">Static Member Function</p>

<p class="NDLRefMemberFunction">static int GetType()</p>

<p class="NDLRefMemberFunction">static NiZBufferProperty*
GetDefault()</p>

<p class="NDLRefMemberDescription">See <span class=
"NDLSystemFont"><a href="NiProperty.htm">NiProperty</a></span>
for details on these non-virtual functions.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">bool GetZBufferTest() const</p>

<p class="NDLRefMemberFunction">void SetZBufferTest(bool
bZBufferTest)</p>

<p class="NDLRefMemberDescription">Retrieve and set the Z-buffer
test enable flag. Setting this flag to <span class=
"NDLSystemFont">true</span> causes the Z-buffer's current value
for each pixel to be tested before writing a new pixel. Setting
the flag to <span class="NDLSystemFont">false</span> turns off
Z-buffer comparisons.</p>

<p class="NDLRefMemberFunction">bool GetZBufferWrite() const</p>

<p class="NDLRefMemberFunction">void SetZBufferWrite(bool
bZBufferWrite)</p>

<p class="NDLRefMemberDescription">Retrieve and set the Z-buffer
write enable flag. Setting this flag to <span class=
"NDLSystemFont">true</span> causes the Z-buffer to be written
whenever a pixel is written to the framebuffer.</p>

<p class="NDLRefMemberFunction">void SetTestFunction(TestFunction
eTest)</p>

<p class="NDLRefMemberFunction">TestFunction GetTestFunction()
const</p>

<p class="NDLRefMemberDescription">Retrieve and set the Z-buffer
test function. See the "Notes" section for discussion of
different Z-buffer tests.</p>

<p class="NDLRefMemberFunction">bool IsEqualFast(const
NiZBufferProperty&amp; kProp) const</p>

<p class="NDLRefMemberDescription">See <span class=
"NDLSystemFont"><a href="NiProperty.htm">NiProperty</a></span>
for details on this non-virtual function.</p>

<p class="NDLRefHead1">Notes</p>

<p class="NDLRefHead2">Using the Z-Buffer Property to Implement
Different Z-Buffer Behaviors</p>

<p>The <span class="NDLSystemFont">NiZBufferProperty</span> may
be used to implement four different Z-buffering modes, as
follows:</p>

<!--(Table)=========================================================-->
<table>
    <thead>
        <tr>
            <th>Z Write Test Flag</th>

            <th>Behavior</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><span class=
            "NDLSystemFont">false...false</span></td>

            <td>No Z-buffering occurs. All pixels written--later
            polygons obscure earlier polygons, Z-buffer is left
            untouched.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">false...true</span></td>

            <td>Pixels are tested against the Z-buffer before
            being written, but the Z-buffer is left
            untouched.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">true....false</span></td>

            <td>All pixels written--later polygons obscure
            earlier polygons, Z-buffer is overwritten by polygons
            in temporal order as well. Useful for presorted
            background environments.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">true....true</span></td>

            <td>Full Z-buffering occurs. Polygons obscured by
            nearer polygons, Z-buffer overwritten by nearer
            polygons.</td>
        </tr>
    </tbody>
</table>

<p class="NDLRefHead2">Z-Buffer Efficiency Tricks</p>

<p>One popular Z-Buffering trick is to draw presorted background
objects with the Z-buffer set to write, but not to compare. On
some hardware and almost all software, this approach is faster
than full Z-buffering. Having written the background parts of
the scene, the complex, dynamic objects (which tend to cover far
less of the screen than the backgrounds) may be drawn using full
Z-buffering. The dynamic objects will then be drawn correctly
with respect to themselves, each other, and the backgrounds.</p>

<p class="NDLRefHead2">Z-Buffer Comparison Test</p>

<p>The following table includes all the values that can be used
for the Z-buffer comparison test. These values are enumerated
inside the <span class="NDLSystemFont">NiZBufferProperty</span>
class. Note that "less than" means closer to the camera and
"greater than" means further from the camera, regardless of the
low-level hardware representation of <em>Z</em> values.</p>

<!--(Table)=========================================================-->
<table>
    <thead>
        <tr>
            <th>Z Buffer Test</th>

            <th>Behavior</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>TEST_ALWAYS</td>

            <td>Incoming Z value always passes</td>
        </tr>

        <tr>
            <td>TEST_LESS</td>

            <td>Incoming Z value passes if less than current
            value</td>
        </tr>

        <tr>
            <td>TEST_EQUAL</td>

            <td>Incoming Z value passes if equal to current
            value</td>
        </tr>

        <tr>
            <td>TEST_LESSEQUAL</td>

            <td>Incoming Z value passes if less than or equal to
            current value</td>
        </tr>

        <tr>
            <td>TEST_GREATER</td>

            <td>Incoming Z value passes if greater than current
            value</td>
        </tr>

        <tr>
            <td>TEST_NOTEQUAL</td>

            <td>Incoming Z value passes if not equal to current
            value</td>
        </tr>

        <tr>
            <td>TEST_GREATEREQUAL</td>

            <td>Incoming Z value passes if greater than or equal
            to current value</td>
        </tr>

        <tr>
            <td>TEST_NEVER</td>

            <td>Incoming Z value never passes</td>
        </tr>
    </tbody>
</table>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
