<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiDynamicEffectState</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiDynamicEffectState</p>

<p class="NDLRefParentage">: public <a href=
"NiRefObject.htm">NiRefObject</a></p>

<p class="NDLRefHeaderFile">&lt;NiDynamicEffectState.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiDynamicEffectState</span> is an
encapsulation of a set of <span class="NDLSystemFont"><a href=
"NiDynamicEffect.htm">NiDynamicEffect</a></span>s, and is
designed to be used by the renderers and the scene graph to
represent the set of active <span class="NDLSystemFont"><a href=
"NiDynamicEffect.htm">NiDynamicEffect</a></span>s at a given
<span class="NDLSystemFont"><a href=
"NiAVObject.htm">NiAVObject</a></span>. <span class=
"NDLSystemFont">NiDynamicEffectState</span> is generally a
Gamebryo internal-only object. It should not be used in an
application. However, if an application wants to create its own
sorter, it may have to deal with <span class=
"NDLSystemFont">NiDynamicEffectState</span> objects. See the
"<a href=
"../../Learn/Demos/StandardMaterial_Demo_Overview.htm">StandardMaterial</a>"
demo for an example of how to create your own sorter.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiDynamicEffectState()</p>

<p class="NDLRefMemberDescription">Creates an <span class=
"NDLSystemFont">NiDynamicEffectState</span> that is empty - it
contains no dynamic effects.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">NiDynamicEffectState* Copy()
const</p>

<p class="NDLRefMemberDescription">Returns an exact copy of the
calling <span class="NDLSystemFont">NiDynamicEffectState</span>.
This copy may be modified without changing the original. However,
each individual <span class="NDLSystemFont"><a href=
"NiDynamicEffect.htm">NiDynamicEffect</a></span> referenced by
the calling <span class=
"NDLSystemFont">NiDynamicEffectState</span> is not copied.</p>

<p class="NDLRefMemberFunction">void AddEffect(<span class=
"NDLSystemFont"><a href=
"NiDynamicEffect.htm">NiDynamicEffect</a></span>* pkEffect)</p>

<p class="NDLRefMemberFunction">void RemoveEffect(<span class=
"NDLSystemFont"><a href=
"NiDynamicEffect.htm">NiDynamicEffect</a></span>* pkEffect)</p>

<p class="NDLRefMemberDescription">These two functions add and
remove <span class="NDLSystemFont"><a href=
"NiDynamicEffect.htm">NiDynamicEffect</a></span>s from the
calling state.</p>

<p class="NDLRefMemberFunction">NiDynEffectStateIter
GetLightHeadPos() const</p>

<p class="NDLRefMemberFunction"><a href=
"NiLight.htm">NiLight</a>* GetNextLight(NiDynEffectStateIter&amp;
kIter) const</p>

<p class="NDLRefMemberDescription">These two functions implement
iteration over the <span class="NDLSystemFont"><a href=
"NiLight.htm">NiLight</a></span> objects in the calling state. If
<span class="NDLSystemFont">GetHeadPos</span> returns
<span class="NDLSystemFont">NULL</span>, then the state is empty;
if <span class="NDLSystemFont">GetNext</span> leaves the
<span class="NDLSystemFont">kIter</span> parameter <span class=
"NDLSystemFont">NULL</span>, then the end of the list has been
reached.</p>

<p class="NDLRefMemberFunction">NiDynEffectStateIter
GetProjLightHeadPos() const</p>

<p class="NDLRefMemberFunction"><a href=
"NiTextureEffect.htm">NiTextureEffect</a>*
GetNextProjLight(NiDynEffectStateIter&amp; kIter) const</p>

<p class="NDLRefMemberDescription">These two functions implement
iteration over the projected-light <span class=
"NDLSystemFont"><a href=
"NiTextureEffect.htm">NiTextureEffect</a></span> objects in the
calling state. If <span class="NDLSystemFont">GetHeadPos</span>
returns <span class="NDLSystemFont">NULL</span>, then the state
is empty; if <span class="NDLSystemFont">GetNext</span> leaves
the <span class="NDLSystemFont">kIter</span> parameter
<span class="NDLSystemFont">NULL</span>, then the end of the list
has been reached.</p>

<p class="NDLRefMemberFunction">NiDynEffectStateIter
GetProjShadowHeadPos() const</p>

<p class="NDLRefMemberFunction"><a href=
"NiTextureEffect.htm">NiTextureEffect</a>*
GetNextProjShadow(NiDynEffectStateIter&amp; kIter) const</p>

<p class="NDLRefMemberDescription">These two functions implement
iteration over the projected-shadow <span class=
"NDLSystemFont"><a href=
"NiTextureEffect.htm">NiTextureEffect</a></span> objects in the
calling state. If <span class="NDLSystemFont">GetHeadPos</span>
returns <span class="NDLSystemFont">NULL</span>, then the state
is empty; if <span class="NDLSystemFont">GetNext</span> leaves
the <span class="NDLSystemFont">kIter</span> parameter
<span class="NDLSystemFont">NULL</span>, then the end of the list
has been reached.</p>

<p class="NDLRefMemberFunction"><span class=
"NDLSystemFont"><a href=
"NiTextureEffect.htm">NiTextureEffect</a></span>*
GetEnvironmentMap() const</p>

<p class="NDLRefMemberDescription">Returns the environment map
<span class="NDLSystemFont"><a href=
"NiTextureEffect.htm">NiTextureEffect</a></span> object that is
present in the calling state, or <span class=
"NDLSystemFont">NULL</span> if one does not exist in the calling
state.</p>

<p class="NDLRefMemberFunction"><span class=
"NDLSystemFont"><a href=
"NiTextureEffect.htm">NiTextureEffect</a></span>* GetFogMap()
const;</p>

<p class="NDLRefMemberDescription">Returns the fog map
<span class="NDLSystemFont"><a href=
"NiTextureEffect.htm">NiTextureEffect</a></span> object that is
present in the calling state, or <span class=
"NDLSystemFont">NULL</span> if one does not exist in the calling
state.</p>

<p class="NDLRefMemberFunction">inline unsigned int
GetHashKey();</p>

<p class="NDLRefMemberDescription">Returns a hash key that can be
used to early out comparisons between two <span class=
"NDLSystemFont">NiDynamicEffectState</span> objects. It is not
guaranteed to be unique, so it cannot be used to check for
equality, only inequality.</p>

<p class="NDLRefMemberFunction">inline bool IsMultiTexture()
const;</p>

<p class="NDLRefMemberDescription">Returns a Boolean indicating
whether any multitexture effects (projected lights, projected
shadows, environment maps, fog maps) are attached to the
<span class="NDLSystemFont">NiDynamicEffectState</span>.</p>

<p class="NDLRefMemberFunction">NiBool Equal(const
NiDynamicEffectState* pkState) const</p>

<p class="NDLRefMemberDescription">Tests two states for equality
- returns true if they are equal and false if not.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
