<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiString</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiString</p>

<p class="NDLRefParentage">: public <a href=
"../../Reference/NiSystem/NiMemObject.htm"><span>NiMemObject</span></a></p>

<p class="NDLRefHeaderFile">&lt;NiString.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>This class implements a smart character string. The string is
reference counted in order to allow it to be shared by multiple
<span class="NDLSystemFont">NiString</span> objects. When an
<span class="NDLSystemFont">NiString</span>'s contents are
altered, a copy of the original character string is made and
adjusted.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiString(int iBuffLength =
256)</p>

<p class="NDLRefMemberDescription">Construct an <span class=
"NDLSystemFont">NiString</span> using the input buffer size. The
contents of the string are'<span class=
"NDLSystemFont">\0</span>'.</p>

<p class="NDLRefMemberFunction">NiString(char ch)</p>

<p class="NDLRefMemberDescription">Construct an <span class=
"NDLSystemFont">NiString</span> from a single char.</p>

<p class="NDLRefMemberFunction">NiString(const char* pcStr)</p>

<p class="NDLRefMemberDescription">Construct an <span class=
"NDLSystemFont">NiString</span> from a constant input string. 
The input string is copied by the <span class=
"NDLSystemFont">NiString</span> to guarantee safety in deletion
and alteration.</p>

<p class="NDLRefMemberFunction">
NiString(const NiString&amp; kString)</p>

<p class="NDLRefMemberDescription">Construct an <span class=
"NDLSystemFont">NiString</span> from another <span class=
"NDLSystemFont">NiString</span>. The reference count of the
internal character string is incremented and is shared by the two
<span class="NDLSystemFont">NiString</span>s.</p>

<p class="NDLRefHead1">Destructors</p>

<p class="NDLRefMemberFunction">~NiString()</p>

<p class="NDLRefMemberDescription">Destroys an <span class=
"NDLSystemFont">NiString</span>. The internal reference count of
the character string is decremented. If that reference count
reaches zero, the character string is deleted.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">unsigned int Length() const</p>

<p class="NDLRefMemberDescription">Gets the length of the
internal string.</p>

<p class="NDLRefMemberFunction">bool IsEmpty() const</p>

<p class="NDLRefMemberDescription">Tests whether the internal
string has any characters or if it is simply '<span class=
"NDLSystemFont">\0</span>'.</p>

<p class="NDLRefMemberFunction">void Empty()</p>

<p class="NDLRefMemberDescription">Forces a string to have zero
length. The internal string is now '<span class=
"NDLSystemFont">\0</span>'.</p>

<p class="NDLRefMemberFunction">char GetAt(unsigned int ui)
const</p>

<p class="NDLRefMemberDescription">Returns the character at the
specified position in the string. '<span class=
"NDLSystemFont">\0</span>' is returned if the requested index is
greater than the length of the string.</p>

<p class="NDLRefMemberFunction">void SetAt(unsigned int ui,
char c)</p>

<p class="NDLRefMemberDescription">Sets a character at the
specified position in the string. If the index specified is
greater than the length of the string, the function will do
nothing.</p>

<p class="NDLRefMemberFunction">int
Compare(const char* pNiString) const</p>

<p class="NDLRefMemberDescription">This method compares
<span class="NDLSystemFont">pNiString</span> lexicographically to
the current string and returns a value indicating their
relationship. The return values match <span class=
"NDLSystemFont">strcmp</span>. If the return value is less than
zero, then this <span class="NDLSystemFont">NiString</span> is
less than <span class="NDLSystemFont">pNiString</span>. If the
return value is zero then the strings are equal. If the return
value is greater than zero, then this <span class=
"NDLSystemFont">NiString</span> is greater than <span class=
"NDLSystemFont">pNiString</span> lexicographically.</p>

<p class="NDLRefMemberFunction">int
CompareNoCase(const char* pNiString) const</p>

<p class="NDLRefMemberDescription">This method compares
<span class="NDLSystemFont">pNiString</span> lexicographically to
a lowercase version of the current string and returns a value
indicating their relationship. The return values match
<span class="NDLSystemFont">Compare</span>'s return values.</p>

<p class="NDLRefMemberFunction">bool Equals(const char* pcStr)
const</p>

<p class="NDLRefMemberDescription">This method returns whether or
not the current string and <span class=
"NDLSystemFont">pcStr</span> are lexicographically equal.</p>

<p class="NDLRefMemberFunction">bool
EqualsNoCase(const char* pcStr) const</p>

<p class="NDLRefMemberDescription">This method returns whether a
the current string and <span class="NDLSystemFont">pcStr</span>
are lexicographically equal without regards to case.</p>

<p class="NDLRefMemberFunction">bool Contains(const char* pcStr)
const</p>

<p class="NDLRefMemberDescription">This method returns whether or
not the current string contains a copy of <span class=
"NDLSystemFont">pcStr</span>.</p>

<p class="NDLRefMemberFunction">bool
ContainsNoCase(const char* pcStr) const</p>

<p class="NDLRefMemberDescription">This method returns whether or
not the current string contains a copy of <span class=
"NDLSystemFont">pcStr</span> without regards to case.</p>

<p class="NDLRefMemberFunction">NiString
GetSubstring(unsigned int uiBegin, unsigned int uiEnd) const</p>

<p class="NDLRefMemberDescription">This method returns a separate
<span class="NDLSystemFont">NiString</span> that contains the
character string starting at <span class=
"NDLSystemFont">uiBegin</span> and ending at <span class=
"NDLSystemFont">uiEnd</span> in the current string. If
<span class="NDLSystemFont">uiBegin</span> is greater than
<span class="NDLSystemFont">uiEnd</span>, or <span class=
"NDLSystemFont">uiBegin</span> is greater than the length of the
string, or <span class="NDLSystemFont">uiEnd</span> is greater
than the length of the string, this method will return an empty
<span class="NDLSystemFont">NiString</span>. For example,
GetSubstring(0,4) on string "ABCDEFG" would return "ABCD".</p>

<p class="NDLRefMemberFunction">NiString
GetSubstring(unsigned int uiBegin, const char* pcDelimeters)
const</p>

<p class="NDLRefMemberDescription">This method returns a separate
<span class="NDLSystemFont">NiString</span> that begins at
<span class="NDLSystemFont">uiBegin</span> in the current string
and ends when the first matching character from <span class=
"NDLSystemFont">pcDelimeters</span> is found. If no matching
character is found or <span class="NDLSystemFont">uiBegin</span>
is greater than the length of the string, then the <span class=
"NDLSystemFont">NiString</span> returned is empty.</p>

<p class="NDLRefMemberFunction">unsigned int Find(char c,
unsigned int uiStart = 0) const</p>

<p class="NDLRefMemberDescription">This method finds a given
character within the current string, starting from index
<span class="NDLSystemFont">uiStart</span>. The return value is
the index at which the character occurs or <span class=
"NDLSystemFont">NiString::INVALID_INDEX</span>.</p>

<p class="NDLRefMemberFunction">unsigned int
Find(const char* pcStr, unsigned int uiStart = 0) const</p>

<p class="NDLRefMemberDescription">This method finds an entire
sub-string within the current string, starting from index
<span class="NDLSystemFont">uiStart</span>. The return value is
the index at which the character string occurs or <span class=
"NDLSystemFont">NiString::INVALID_INDEX</span>.</p>

<p class="NDLRefMemberFunction">unsigned int FindReverse(char c)
const</p>

<p class="NDLRefMemberDescription">This method finds a character
within the current string, starting from the end and working
backwards. The return value is the index at which the character
occurs or <span class=
"NDLSystemFont">NiString::INVALID_INDEX</span>.</p>

<p class="NDLRefMemberFunction">unsigned int FindReverse(char c,
unsigned int uiStartIdx) const</p>

<p class="NDLRefMemberDescription">This method finds a character
within the current string, starting from the uiSearchEnd and
working backwards. The return value is the index at which the
character occurs or <span class=
"NDLSystemFont">NiString::INVALID_INDEX</span>.</p>

<p class="NDLRefMemberFunction">unsigned int
FindOneOf(const char* pcStr, unsigned int uiStart = 0) const</p>

<p class="NDLRefMemberDescription">This method finds a character
within the current string from the set of characters specified by
<span class="NDLSystemFont">pcStr</span>, beginning at index
<span class="NDLSystemFont">uiStart</span>. The return value is
the index at which the character occurs or <span class=
"NDLSystemFont">NiString::INVALID_INDEX</span>.</p>

<p class="NDLRefMemberFunction">NiString
Mid(unsigned int uiBegin,
unsigned int nCount = NiString::INVALID_INDEX) const</p>

<p class="NDLRefMemberDescription">This method returns a
sub-string of the current string containing characters from
<span class="NDLSystemFont">uiBegin</span> to <span class=
"NDLSystemFont">uiBegin + nCount</span>. If <span class=
"NDLSystemFont">nCount</span> is greater than the length of the
string, then <span class="NDLSystemFont">Mid</span> returns all
characters starting at <span class="NDLSystemFont">uiBegin</span>
to the end of the string.</p>

<p class="NDLRefMemberFunction">NiString
Left(unsigned int nCount) const</p>

<p class="NDLRefMemberDescription">This method returns a
sub-string of the current string containing <span class=
"NDLSystemFont">nCount</span> characters from the start of the
string.</p>

<p class="NDLRefMemberFunction">NiString
Right(unsigned int nCount) const</p>

<p class="NDLRefMemberDescription">This method returns a
sub-string of the current string containing <span class=
"NDLSystemFont">nCount</span> characters from the end of the
string.</p>

<p class="NDLRefMemberFunction">void
Replace(const char* pcWhatToReplace,
const char* pcReplaceWith)</p>

<p class="NDLRefMemberDescription">This method alters the current
string by replacing all occurrences of <span class=
"NDLSystemFont">pcWhatToReplace</span> with the string
<span class="NDLSystemFont">pcReplaceWith</span>.</p>

<p class="NDLRefMemberFunction">void Insert(const char*
pcInsertString, unsigned int uiIndex)</p>

<p class="NDLRefMemberDescription">Insert the input string at the
specified index, shifting all subsequent characters to the right.
If the index is &gt;= the original string length, the insertion
string is concatenated. The address of the insertion string
cannot be within the address space of the internal string
buffer.</p>

<p class="NDLRefMemberFunction">void RemoveRange(unsigned int
uiStartIdx, unsigned int uiNumChars)</p>

<p class="NDLRefMemberDescription">Removes <span class=
"NDLSystemFont">uiNumChars</span> characters from the string,
starting at index, <span class=
"NDLSystemFont">uiStartIdx</span>.</p>

<p class="NDLRefMemberFunction">void
Format(const char* pcFormatString ...)</p>

<p class="NDLRefMemberDescription">This method allows
<span class="NDLSystemFont">printf</span> or <span class=
"NDLSystemFont">sprintf</span> type formatting of the current
string. It is guaranteed not to overflow past the length of the
buffer.</p>

<p class="NDLRefMemberFunction">void ToUpper()</p>

<p class="NDLRefMemberDescription">This method converts the
current string to uppercase internally.</p>

<p class="NDLRefMemberFunction">void ToLower()</p>

<p class="NDLRefMemberDescription">This method converts the
current string to lowercase internally.</p>

<p class="NDLRefMemberFunction">void Reverse()</p>

<p class="NDLRefMemberDescription">This method reverses the
current string internally.</p>

<p class="NDLRefMemberFunction">void TrimLeft(char c = ' ')</p>

<p class="NDLRefMemberDescription">This method trims all
contiguous occurrences of the character <span class=
"NDLSystemFont">c</span> from the front of the current
string.</p>

<p class="NDLRefMemberFunction">void TrimRight(char c = ' ')</p>

<p class="NDLRefMemberDescription">This method trims all
contiguous occurrences of the character <span class=
"NDLSystemFont">c</span> from the end of the current string.</p>

<p class="NDLRefMemberFunction">void
Concatenate(const char* pcStr)</p>

<p class="NDLRefMemberDescription">This method adds the string,
<span class="NDLSystemFont">pcStr</span>, to the end of the
current string.</p>

<p class="NDLRefMemberFunction">void Concatenate(char ch)</p>

<p class="NDLRefMemberDescription">This method adds the
character, <span class="NDLSystemFont">ch</span>, to the end of
the current string</p>

<p class="NDLRefMemberFunction">bool ToBool(bool&amp; b)</p>

<p class="NDLRefMemberDescription">This method tries to convert
the current string into a Boolean value. The converted value is
passed by reference through <span class=
"NDLSystemFont">b</span>. If the conversion was successful, this
method returns <span class="NDLSystemFont">true</span>.
<span class="NDLSystemFont">false</span> is returned otherwise. 
In order to have a value of <span class=
"NDLSystemFont">true</span>, the internal string must pass a case
insensitive comparison to the string "<span class=
"NDLSystemFont">true</span>".  Similarly, in order to have a
value of <span class="NDLSystemFont">false</span>, the internal
string must match a case insensitive comparison to the string
"<span class="NDLSystemFont">false</span>".</p>

<p class="NDLRefMemberFunction">bool ToFloat(float&amp; f)</p>

<p class="NDLRefMemberDescription">This method tries to convert
the current string into a floating-point value. The converted
value is passed by reference through <span class=
"NDLSystemFont">f</span>. If the conversion was successful, this
method returns <span class="NDLSystemFont">true</span>; otherwise
<span class="NDLSystemFont">false</span> is returned. In order
to successfully be converted to floating point, the string must
successfully convert using <span class=
"NDLSystemFont">atof</span>.</p>

<p class="NDLRefMemberFunction">bool ToInt(int&amp; i)</p>

<p class="NDLRefMemberDescription">This method tries to convert
the current string into an integer value. The converted value is
passed by reference through <span class=
"NDLSystemFont">i</span>. If the conversion was successful, this
method returns <span class="NDLSystemFont">true</span>; otherwise
<span class="NDLSystemFont">false</span> is returned. In order
to successfully be converted to an integer, the string must
successfully convert using <span class=
"NDLSystemFont">atoi</span>.</p>

<p class="NDLRefMemberFunction">bool
ToPoint3(NiPoint3&amp; kPoint)</p>

<p class="NDLRefMemberDescription">This method tries to convert
the current string into a <span class=
"NDLSystemFont">NiPoint3</span> value. The converted value is
passed by reference through <span class=
"NDLSystemFont">kPoint</span>. If the conversion was successful,
this method returns <span class="NDLSystemFont">true</span>;
otherwise <span class="NDLSystemFont">false</span> is returned. 
In order to successfully be converted to an <span class=
"NDLSystemFont">NiPoint3</span>, the string must be formatted: 
"<span class="NDLSystemFont">(x, y, z)</span>".</p>

<p class="NDLRefMemberFunction">bool
ToRGB(NiColor&amp; kColor)</p>

<p class="NDLRefMemberDescription">This method tries to convert
the current string into a <span class=
"NDLSystemFont">NiColor</span> value. The converted value is
passed by reference through <span class=
"NDLSystemFont">kColor</span>. If the conversion was successful,
this method returns <span class="NDLSystemFont">true</span>;
otherwise <span class="NDLSystemFont">false</span> is returned. 
In order to successfully be converted to a <span class=
"NDLSystemFont">NiColor</span>, the string must be formatted: 
"<span class="NDLSystemFont">#RGB(red, green, blue)</span>".</p>

<p class="NDLRefMemberFunction">bool
ToRGBA(NiColorA&amp; kColor)</p>

<p class="NDLRefMemberDescription">This method tries to convert
the current string into an <span class=
"NDLSystemFont">NiColorA</span> value. The converted value is
passed by reference through <span class=
"NDLSystemFont">kColor</span>. If the conversion was successful,
this method returns <span class="NDLSystemFont">true</span>;
otherwise <span class="NDLSystemFont">false</span> is returned. 
In order to successfully be converted to an <span class=
"NDLSystemFont">NiColorA</span>, the string must be formatted: 
"<span class="NDLSystemFont">#RGBA(red, green, blue,
alpha)</span>".</p>

<p class="NDLRefMemberFunction">static NiString
FromBool(bool b)</p>

<p class="NDLRefMemberDescription">This method returns a
<span class="NDLSystemFont">NiString</span> representation of the
Boolean, <span class="NDLSystemFont">b</span>.</p>

<p class="NDLRefMemberFunction">static NiString
FromFloat(float f)</p>

<p class="NDLRefMemberDescription">This method returns a
<span class="NDLSystemFont">NiString</span> representation of the
floating point value, <span class="NDLSystemFont">f</span>.</p>

<p class="NDLRefMemberFunction">static NiString
FromInt(int i)</p>

<p class="NDLRefMemberDescription">This method returns a
<span class="NDLSystemFont">NiString</span> representation of the
integer value, <span class="NDLSystemFont">i</span>.</p>

<p class="NDLRefMemberFunction">static NiString
FromPoint3(NiPoint3&amp; kPt)</p>

<p class="NDLRefMemberDescription">This method returns a
<span class="NDLSystemFont">NiString</span> representation of the
<span class="NDLSystemFont">NiPoint3</span> value, <span class=
"NDLSystemFont">kPt</span>.</p>

<p class="NDLRefMemberFunction">static NiString
FromRGB(NiColor&amp; kColor)</p>

<p class="NDLRefMemberDescription">This method returns a
<span class="NDLSystemFont">NiString</span> representation of the
<span class="NDLSystemFont">NiColor</span> value, <span class=
"NDLSystemFont">kColor</span>.</p>

<p class="NDLRefMemberFunction">static NiString
FromRGBA(NiColorA&amp; kColor)</p>

<p class="NDLRefMemberDescription">This method returns a
<span class="NDLSystemFont">NiString</span> representation of the
<span class="NDLSystemFont">NiColorA</span> value, <span class=
"NDLSystemFont">kColor</span>.</p>

<p class="NDLRefMemberFunction">char* MakeExternalCopy()</p>

<p class="NDLRefMemberDescription">This method creates a copy of
the internal string that is not referenced counted by this
<span class="NDLSystemFont">NiString</span></p>

<p class="NDLRefHead1">Supported operators</p>

<p class="NDLRefMemberFunction">operator const char*() const</p>

<p class="NDLRefMemberDescription">This operator casts the
current <span class="NDLSystemFont">NiString</span> to a
<span class="NDLSystemFont">const char*</span>. In order to be
valid, the <span class="NDLSystemFont">NiString</span> MUST
persist beyond the usage of the <span class="NDLSystemFont">const
char*</span> value.</p>

<p class="NDLRefMemberFunction">NiString&amp;
operator=(NiString&amp; stringSrc)</p>

<p class="NDLRefMemberFunction">NiString&amp;
operator=(char* lpsz)</p>

<p class="NDLRefMemberFunction">NiString&amp;
operator=(const char* psz)</p>

<p class="NDLRefMemberFunction">NiString&amp;
operator=(char ch)</p>

<p class="NDLRefMemberDescription">These operators assign values
to the current <span class="NDLSystemFont">NiString</span>. 
These values are copied into the current string.</p>

<p class="NDLRefMemberFunction">NiString&amp;
operator+=(NiString&amp; string)</p>

<p class="NDLRefMemberFunction">NiString&amp;
operator+=(char ch)</p>

<p class="NDLRefMemberFunction">NiString&amp;
operator+=(char* lpsz)</p>

<p class="NDLRefMemberFunction">NiString&amp;
operator+=(const char* pcString)</p>

<p class="NDLRefMemberDescription">These operators concatenate
values to the current <span class=
"NDLSystemFont">NiString</span>.</p>

<p class="NDLRefMemberFunction">NiString
operator+(const NiString&amp; string1,
const NiString&amp; string2)</p>

<p class="NDLRefMemberFunction">NiString
operator+(const NiString&amp; string, char ch)</p>

<p class="NDLRefMemberFunction">NiString operator+(char ch,
const NiString&amp; string)</p>

<p class="NDLRefMemberFunction">NiString
operator+(const NiString&amp; string, char* lpsz)</p>

<p class="NDLRefMemberFunction">NiString operator+(char* lpsz,
const NiString&amp; string)</p>

<p class="NDLRefMemberDescription">These operators create a
composite string containing argument one followed by argument
two</p>

<p class="NDLRefMemberFunction">bool
operator==(const NiString&amp; s1, const NiString&amp; s2)</p>

<p class="NDLRefMemberFunction">bool
operator==(const NiString&amp; s1, const char* s2)</p>

<p class="NDLRefMemberFunction">bool operator==(const char* s1,
const NiString&amp; s2)</p>

<p class="NDLRefMemberFunction">bool
operator!=(const NiString&amp; s1, const NiString&amp; s2)</p>

<p class="NDLRefMemberFunction">bool
operator!=(const NiString&amp; s1, const char* s2)</p>

<p class="NDLRefMemberFunction">bool operator!=(const char* s1,
const NiString&amp; s2)</p>

<p class="NDLRefMemberDescription">These operators test the
equality of argument one with argument two</p>

<p class="NDLRefMemberFunction">bool
operator&lt;(const NiString&amp; s1, const NiString&amp; s2)</p>

<p class="NDLRefMemberFunction">bool
operator&lt;(const NiString&amp; s1, const char* s2)</p>

<p class="NDLRefMemberFunction">bool operator&lt;(const char* s1,
const NiString&amp; s2)</p>

<p class="NDLRefMemberFunction">bool
operator&gt;(const NiString&amp; s1, const NiString&amp; s2)</p>

<p class="NDLRefMemberFunction">bool
operator&gt;(const NiString&amp; s1, const char* s2)</p>

<p class="NDLRefMemberFunction">bool operator&gt;(const char* s1,
const NiString&amp; s2)</p>

<p class="NDLRefMemberFunction">bool
operator&lt;=(const NiString&amp; s1, const NiString&amp; s2)</p>

<p class="NDLRefMemberFunction">bool
operator&lt;=(const NiString&amp; s1, const char* s2)</p>

<p class="NDLRefMemberFunction">bool
operator&lt;=(const char* s1, const NiString&amp; s2)</p>

<p class="NDLRefMemberFunction">bool
operator&gt;=(const NiString&amp; s1, const NiString&amp; s2)</p>

<p class="NDLRefMemberFunction">bool
operator&gt;=(const NiString&amp; s1, const char* s2)</p>

<p class="NDLRefMemberFunction">bool
operator&gt;=(const char* s1, const NiString&amp; s2)</p>

<p class="NDLRefMemberDescription">These operators
lexicographically compare argument one with argument two.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
