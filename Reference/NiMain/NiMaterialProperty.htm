<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiMaterialProperty</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiMaterialProperty</p>

<p class="NDLRefParentage">: public <a href=
"NiProperty.htm">NiProperty</a></p>

<p class="NDLRefHeaderFile">&lt;NiMaterialProperty.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>An <span class="NDLSystemFont">NiMaterialProperty</span>
allows an application to specify the surface properties of the
objects affected by the property. These surface properties
include translucency, ambient reflective color, diffuse
reflective color, emissive color intensity, and specular color.
See the <a href=
"../../Programmer/General_Topics/Property_Descriptions.htm">Gamebryo
Programming Manual</a> for details on how the material values are
used in the lighting model.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiMaterialProperty()</p>

<p class="NDLRefMemberDescription">Default constructor.
Constructs a property with the following values:</p>

<!--(Table)=========================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Variable</th>

                <th>Value</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td>Ambient color</td>

                <td><span class=
                "NDLSystemFont">[0.5,0.5,0.5]</span></td>
            </tr>

            <tr>
                <td>Diffuse color</td>

                <td><span class=
                "NDLSystemFont">[0.5,0.5,0.5]</span></td>
            </tr>

            <tr>
                <td>Specular color</td>

                <td><span class=
                "NDLSystemFont">[0.0,0.0,0.0]</span></td>
            </tr>

            <tr>
                <td>Emissive color</td>

                <td><span class=
                "NDLSystemFont">[0.0,0.0,0.0]</span></td>
            </tr>

            <tr>
                <td>Shine</td>

                <td><span class="NDLSystemFont">4.0</span></td>
            </tr>

            <tr>
                <td>Alpha</td>

                <td><span class="NDLSystemFont">1.0</span></td>
            </tr>
        </tbody>
    </table>
</div>

<p class="NDLRefHead1">Static Member Function</p>

<p class="NDLRefMemberFunction">static int GetType()</p>

<p class="NDLRefMemberFunction">static NiMaterialProperty*
GetDefault()</p>

<p class="NDLRefMemberDescription">See <span class=
"NDLSystemFont"><a href="NiProperty.htm">NiProperty</a></span>
for details on these non-virtual functions.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">const <a href=
"NiColor.htm">NiColor</a>&amp; GetAmbientColor() const</p>

<p class="NDLRefMemberFunction">void SetAmbientColor(const
<a href="NiColor.htm">NiColor</a>&amp; kC)</p>

<p class="NDLRefMemberDescription">Retrieve and set the ambient
material color. Setting this value also marks the material as
changed, so that renderers know to update their copies of the
material settings.</p>

<p class="NDLRefMemberFunction">const <a href=
"NiColor.htm">NiColor</a>&amp; GetDiffuseColor() const</p>

<p class="NDLRefMemberFunction">void SetDiffuseColor(const
<a href="NiColor.htm">NiColor</a>&amp; kC)</p>

<p class="NDLRefMemberDescription">Retrieve and set the diffuse
material color. Setting this value also marks the material as
changed, so that renderers know to update their copies of the
material settings.</p>

<p class="NDLRefMemberFunction">const <a href=
"NiColor.htm">NiColor</a>&amp; GetSpecularColor() const</p>

<p class="NDLRefMemberFunction">void SetSpecularColor(const
<a href="NiColor.htm">NiColor</a>&amp; kC)</p>

<p class="NDLRefMemberDescription">Retrieve and set the specular
material color. Setting this value also marks the material as
changed, so that renderers know to update their copies of the
material settings.</p>

<p class="NDLRefMemberFunction">const <a href=
"NiColor.htm">NiColor</a>&amp; GetEmittance() const</p>

<p class="NDLRefMemberFunction">void SetEmittance(const <a href=
"NiColor.htm">NiColor</a>&amp; kC)</p>

<p class="NDLRefMemberDescription">Retrieve and set the emissive
material color intensity. Setting this value also marks the
material as changed, so that renderers know to update their
copies of the material settings.</p>

<p class="NDLRefMemberFunction">float GetShineness() const</p>

<p class="NDLRefMemberFunction">void SetShineness(float fC)</p>

<p class="NDLRefMemberDescription">Retrieve and set the shine or
"gloss" of the material, used by some (but not all) renderers
when computing specular lighting. This number should be
non-negative; higher values tend to make the material appear to
have a more mirror-like finish (i.e. tighter specular
highlights). Setting this value also marks the material as
changed, so that renderers know to update their copies of the
material settings.</p>

<p class="NDLRefMemberFunction">float GetAlpha() const</p>

<p class="NDLRefMemberFunction">void SetAlpha(float fC)</p>

<p class="NDLRefMemberDescription">Retrieve and set the alpha or
"translucency" value of the material. This value should be a
floating-point value between <span class=
"NDLSystemFont">&gt;0.0</span> and <span class=
"NDLSystemFont">1.0</span> (values are not error-checked), with
<span class="NDLSystemFont">0.0</span> representing fully
translucent and <span class="NDLSystemFont">1.0</span>
representing fully opaque. Setting this value also marks the
material as changed, so that renderers know to update their
copies of the material settings.</p>

<p class="NDLRefMemberFunction">bool IsEqualFast(const
NiMaterialProperty&amp; kProp) const</p>

<p class="NDLRefMemberDescription">See <span class=
"NDLSystemFont"><a href="NiProperty.htm">NiProperty</a></span>
for details on this non-virtual function.</p>

<p class="NDLRefHead1">Notes</p>

<a name="Application_of_Material_Values" id="Application_of_Material_Values"></a><p class="NDLRefHead2">Application of Material Values</p>

<p>Note that instances of <span class=
"NDLSystemFont">NiMaterialProperty</span> are only one part of
the formula used to determine vertex colors (much less final
polygon surface appearance). In order for an <span class=
"NDLSystemFont">NiMaterialProperty</span> to have any effect at
all on surface appearance, the object must either have no base
texture or the <span class="NDLSystemFont"><a href=
"NiTexturingProperty.htm">NiTexturingProperty</a></span> must
have an apply mode setting of <span class=
"NDLSystemFont">APPLY_MODULATE</span>--otherwise, the texture
color is used directly and the vertex colors are ignored.
Furthermore, the <span class="NDLSystemFont"><a href=
"NiVertexColorProperty.htm">NiVertexColorProperty</a></span>'s
lighting and source settings control which parts of the material
are used, and which are replaced by vertex colors. See the
<span class="NDLSystemFont"><a href=
"NiVertexColorProperty.htm">NiVertexColorProperty</a></span>
documentation on the details of how it affects final vertex
colors. See the Programming Manual for details of the general
lighting/vertex color pipeline.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
