<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiMetricsTimer</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiMetricsTimer</p>

<p class="NDLRefHeaderFile">&lt;NiMetricsTimer.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>The <span class="NDLSystemFont">NiMetricsTimer.h</span> header
file defines a series of related classes. <span class=
"NDLSystemFont">NiMetricsTimer</span> is the base level timer
class that does nothing more than provide the functionality to
return the time elapsed. <a href=
"NiTMetricsTimer.htm"><span class=
"NDLSystemFont">NiTMetricsTimer</span></a> is a templated timer
class that derives from <span class=
"NDLSystemFont">NiMetricsTimer</span> that takes a timer type as
a templated parameter and adds starting and stopping
functionality. Finally, <span class=
"NDLSystemFont">NiMetricsClockTimer</span> and <span class=
"NDLSystemFont">NiMetricsPCTimer</span> are <span class=
"NDLSystemFont">#typedef</span>'d to particular templated
instances of <span class="NDLSystemFont">NiTMetricsTimer</span>
that use the system clock and the performance counter,
respectively. These last two types are the ones that will be used
primarily by instrumenting code.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiMetricsTimer(const char*
pcName)</p>

<p class="NDLRefMemberDescription">Instantiates a timer with this
particular metric name. The <span class=
"NDLSystemFont">pcName</span> parameter must not be <span class=
"NDLSystemFont">NULL</span>. Additionally, the pointer to the
name is copied shallowly and must remain valid for the lifetime
of this timer object.</p>

<p class="NDLRefHead1">Member Functions</p>

<p class="NDLRefMemberFunction">float GetElapsed() const</p>

<p class="NDLRefMemberDescription">Returns the time elapsed for
this particular timer.</p>

<p class="NDLRefMemberFunction">const char* GetName() const</p>

<p class="NDLRefMemberDescription">Returns the name of this
timer.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
