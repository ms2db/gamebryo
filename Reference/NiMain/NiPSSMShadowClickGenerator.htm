<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiPSSMShadowClickGenerator</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiPSSMShadowClickGenerator</p>

<p class="NDLRefParentage">: public <a href=
"../../Reference/NiMain/NiDefaultShadowClickGenerator.htm"><span>NiDefaultShadowClickGenerator</span></a></p>

<p class="NDLRefHeaderFile">
&lt;NiPSSMShadowClickGenerator.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>Click generator that supports Parallel Split Shadow Mapping
(PSSM). The shadow map is split into several cells using texture
atlassing, with each cell corresponding to a different
orthographic shadow frustum. The view camera frustum is split
into as many portions as there are shadow map cells along the
view axis. In other words, the near and far planes of the view
frustum are manipulated to create several sub-frustums. The
orthographic shadowmap frustums are sized to fit the
corresponding view frustum splits, resulting in different
shadowmap atlas cells corresponding to shadowmaps projected at
differing distances from the view camera. Various settings and
tweakables for PSSM can be found in the <a href=
"../../Reference/NiMain/NiPSSMConfiguration.htm">NiPSSMConfiguration</a>
class, which is bound to a shadow generator using the
NiPSSMShadowClickGenerator::BindConfiguration function.</p>

<p class="NDLRefHead1">Supported Static Member Functions</p>

<p class="NDLRefMemberFunction">void SetActiveGenerator(<a href=
"../../Reference/NiMain/NiShadowGenerator.htm">NiShadowGenerator</a>*
pkGenerator)<br>
const NiShadowGenerator* GetActiveGenerator();</p>

<p class="NDLRefMemberDescription">Currently, PSSM is limited to
a single generator at a time. This defines which generator (and
therefore light) will use PSSM.</p>

<p class="NDLRefMemberFunction">NiUInt32
EncodeDescriptorSliceCount(NiUInt32 uiSliceCount)</p>

<p class="NDLRefMemberDescription">Encode a slice count to the
format used by the <a href=
"../../Reference/NiMain/NiStandardMaterial.htm">NiStandardMaterial</a>
descriptors. This is a lossy compression; it quantizes the slice
count into the following ranges: ( [1], [2-4], [5-8], [9-12],
[13-16] ) then returns the index of the range the slice count
fits into.</p>

<p class="NDLRefMemberFunction">NiUInt32
DecodeDescriptorMaxSliceCount( NiUInt32 uiEncodedSliceCount)</p>

<p class="NDLRefMemberDescription">Decodes a slice count encoded
by the EncodeDescriptorSliceCount function, returning the maximum
number of slices that the given encoded slice count could
possibly represent.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">NiNoiseMap* GetNoiseMap()</p>

<p class="NDLRefMemberDescription">Return the noise map currently
used by the slice transitions.</p>

<p class="NDLRefMemberFunction">NiPSSMConfiguration*
GetConfiguration(const <a href=
"../../Reference/NiMain/NiShadowGenerator.htm">NiShadowGenerator</a>*
pkGenerator, bool bCreateFromDefault = true)</p>

<p class="NDLRefMemberDescription">Find the unique PSSM
configuration associated with the given generator. If no
configuration exists and bCreateFromDefault is 'true', a copy of
the default configuration (given upon the click generators
initialization) will be used. If no configuration exists and
bCreateFromDefault is 'false', NULL is returned.</p>

<p class="NDLRefMemberFunction">void BindConfiguration(const
<a href=
"../../Reference/NiMain/NiShadowGenerator.htm">NiShadowGenerator</a>*
pkGenerator, <a href=
"../../Reference/NiMain/NiPSSMConfiguration.htm">NiPSSMConfiguration</a>*
pkConfig)</p>

<p class="NDLRefMemberDescription">Bind the given PSSM
configuration to the given shadow generator. When the shadow
generator is handled by this click generator, the given
configuration will be used instead of the default configuration.
Smart pointers are used to reference pkConfig internally. A
configuration can only ever be bound to a single generator</p>

<p class="NDLRefMemberFunction">bool LightSupportsPSSM(const
<a href=
"../../Reference/NiMain/NiShadowGenerator.htm">NiShadowGenerator</a>*
pkGenerator, const <a href=
"../../Reference/NiMain/NiLight.htm">NiLight</a>* pkLight)</p>

<p class="NDLRefMemberDescription">Determines whether the given
light supports PSSM, when in the context of the given generators
PSSM configuration. Currently only <a href=
"../../Reference/NiMain/NiDirectionalLight.htm">NiDirectionalLight</a>
supports PSSM, and the PSSM configuration must define at least 2
PSSM slices.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
