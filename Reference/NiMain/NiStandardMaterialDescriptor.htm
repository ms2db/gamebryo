<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiStandardMaterialDescriptor</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiStandardMaterialDescriptor</p>

<p class="NDLRefParentage">: public <a href=
"NiMaterialDescriptor.htm">NiMaterialDescriptor</a></p>

<p class="NDLRefHeaderFile">
&lt;NiStandardMaterialDescriptor.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>This class describes how a fragment shader
should be configured to match the settings on a given piece of
geometry using the default pipeline.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">
NiStandardMaterialDescriptor()</p>

<p class="NDLRefMemberDescription">The default constructor. The
bitfield is zeroed out.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">bool AddLight(NiLight* pkLight,
unsigned int uiWhichLight, const <a href=
"NiRenderObject.htm">NiRenderObject</a>* pkGeometry = NULL))</p>

<p class="NDLRefMemberDescription">Add an <span class=
"NDLSystemFont"><a href="NiLight.htm">NiLight</a></span> to the
bitfield. <span class="NDLSystemFont">uiWhichLight</span> is
which slot to add the light in. If the light has a shadow
generator, then shadows will be added as well. This function
returns true if the light could be added.</p>

<p class="NDLRefMemberFunction">bool GetLightType(unsigned int
uiWhichLight, <a href=
"NiStandardMaterial.htm#LightType">NiStandardMaterial::LightType</a>&amp;
eLightType)</p>

<p class="NDLRefMemberDescription">If the specified light exists,
determine its type. Returns true if the light exists.</p>

<p class="NDLRefMemberFunction">bool GetLightInfo(unsigned int
uiWhichLight, bool&amp; bShadowed)</p>

<p class="NDLRefMemberDescription">Returns true if the specified
light exists and it is a shadow caster.</p>

<p class="NDLRefMemberFunction">void SetLightInfo(unsigned int
uiWhichLight, bool bShadowed)</p>

<p class="NDLRefMemberDescription">Set whether or not a light is
a shadow caster.</p>

<p class="NDLRefMemberFunction">void SetTextureUsage(unsigned int
uiWhichTexture, unsigned int uiInputUV, <a href=
"NiStandardMaterial.htm#TexGenOutput">NiStandardMaterial::TexGenOutput</a>
eTextureOutput)</p>

<p class="NDLRefMemberDescription">Set the input UV coordinate
and the UV transformation for a given texture.</p>

<p class="NDLRefMemberFunction">void GetTextureUsage(unsigned int
uiWhichTexture, unsigned int&amp; uiInputUV, <a href=
"NiStandardMaterial.htm#TexGenOutput">NiStandardMaterial::TexGenOutput</a>&amp;
eTextureOutput)</p>

<p class="NDLRefMemberDescription">Get the input UV coordinate
and the UV transformation for a given texture.</p>

<p class="NDLRefMemberFunction">void SetProjectedLight(unsigned
int uiWhichLight, bool bClipped, <a href=
"NiStandardMaterial.htm#TexEffectType">NiStandardMaterial::TexEffectType</a>
eType)</p>

<p class="NDLRefMemberDescription">Set whether or not a projected
light is clipped and whether it is parallel or perspective
projected.</p>

<p class="NDLRefMemberFunction">void GetProjectedLight(unsigned
int uiWhichLight, bool&amp; bClipped, <a href=
"NiStandardMaterial.htm#TexEffectType">NiStandardMaterial::TexEffectType</a>&amp;
eType)</p>

<p class="NDLRefMemberDescription">Get whether or not a projected
light is clipped and whether it is parallel or perspective
projected.</p>

<p class="NDLRefMemberFunction">void SetProjectedShadow(unsigned
int uiWhichShadow, bool bClipped, <a href=
"NiStandardMaterial.htm#TexEffectType">NiStandardMaterial::TexEffectType</a>
eType)</p>

<p class="NDLRefMemberDescription">Set whether or not a projected
shadow is clipped and whether it is parallel or perspective
projected.</p>

<p class="NDLRefMemberFunction">void GetProjectedShadow(unsigned
int uiWhichShadow, bool&amp; bClipped, <a href=
"NiStandardMaterial.htm#TexEffectType">NiStandardMaterial::TexEffectType</a>&amp;
eType)</p>

<p class="NDLRefMemberDescription">Get whether or not a projected
shadow is clipped and whether it is parallel or perspective
projected.</p>

<p class="NDLRefMemberFunction">unsigned int
GetStandardTextureCount()</p>

<p class="NDLRefMemberDescription">Get the number of textures
used.</p>

<p class="NDLRefMemberFunction"><a href=
"NiString.htm">NiString</a> ToString()</p>

<p class="NDLRefMemberDescription">Returns a string
representation of the state of the bitfield.</p>

<p class="NDLRefMemberFunction">bool SetTransformDescriptor(const
NiRenderObject* pkMesh, bool&amp; bHardwareSkinned)</p>

<p class="NDLRefMemberDescription">Set the transform bitfield
based on the state of the mesh. If the mesh is hardware skinned,
bHardwareSkinned is true.</p>

<p class="NDLRefMemberFunction">bool SetNBTDescriptor(const
NiRenderObject* pkMesh, bool bHardwareSkinned, bool&amp;
bNormals, bool&amp; bNBTs)</p>

<p class="NDLRefMemberDescription">Set the NBT bitfield entry
based on the contents of the mesh. If the mesh is hardware
skinned, the BP semantics are checked instead of the normal
semantics. If normals exist, bNormals is true. If binormals and
tangents exist, bNBTs is true.</p>

<p class="NDLRefMemberFunction">bool
SetVertexColorDescriptor(const NiRenderObject* pkMesh, bool&amp;
bVertexColors)</p>

<p class="NDLRefMemberDescription">Set the vertex color bitfield
based on existence of a vertex color vertex stream on the mesh.
If they exist, bVertexColors is true.</p>

<p class="NDLRefMemberFunction">bool
SetVertexColorPropertyDescriptor(const NiRenderObject* pkMesh,
const NiPropertyState* pkPropState, bool bVertexColors)</p>

<p class="NDLRefMemberDescription">Set the AMBDIFFEMISSIVE and
LIGHTINGMODE bitfield entries based on the NiVertexColorProperty
attached to the mesh.</p>

<p class="NDLRefMemberFunction">bool
SetSpecularPropertyDescriptor(const NiRenderObject* pkMesh, const
NiPropertyState* pkPropState, bool&amp; bSpecularEnabled)</p>

<p class="NDLRefMemberDescription">Set the SPECULAR entry based
on the NiSpecularProperty attached to the mesh.</p>

<p class="NDLRefMemberFunction">bool
SetMaterialPropertyDescriptor(const NiRenderObject* pkMesh, const
NiPropertyState* pkPropState)</p>

<p class="NDLRefMemberDescription">Since no bitfield entries are
associated with the material property, this method currently does
nothing.</p>

<p class="NDLRefMemberFunction">Set the FOGTYPE based on the
NiFogProperty attached to the mesh.</p>

<p class="NDLRefMemberDescription">bool
SetFogPropertyDescriptor(const NiRenderObject* pkMesh, const
NiPropertyState* pkPropState)</p>

<p class="NDLRefMemberFunction">bool
SetAlphaPropertyDescriptor(const NiRenderObject* pkMesh, const
NiPropertyState* pkPropState)</p>

<p class="NDLRefMemberDescription">Set the ALPHATEST property
based on the NiAlphaProperty attached to the mesh.</p>

<p class="NDLRefMemberFunction">bool SetBaseMapDescriptor(const
NiTexturingProperty* pkTexProp, const NiTexturingProperty::Map**
ppkActiveMaps, NiUInt32&amp; uiCurrentMapCount)</p>

<p class="NDLRefMemberDescription">If the base map exists on the
NiTexturingProperty on the mesh, the BASEMAPCOUNT is set to 1,
the base map slot in the ppkActiveMaps array is set, and the
current map count is incremented.</p>

<p class="NDLRefMemberFunction">bool SetNormalMapDescriptor(const
NiTexturingProperty* pkTexProp, const NiTexturingProperty::Map**
ppkActiveMaps, NiUInt32&amp; uiCurrentMapCount)</p>

<p class="NDLRefMemberDescription">If the normal map exists on
the NiTexturingProperty on the mesh and the NBT bitfield entries
are set, the NORMALMAPCOUNT is set to 1, the normal map slot in
the ppkActiveMaps array is set, the normal map type is set based
on the texture type, and the current map count is
incremented.</p>

<p class="NDLRefMemberFunction">bool
SetParallaxMapDescriptor(const NiTexturingProperty* pkTexProp,
const NiTexturingProperty::Map** ppkActiveMaps, NiUInt32&amp;
uiCurrentMapCount)</p>

<p class="NDLRefMemberDescription">If the parallax map exists on
the NiTexturingProperty on the mesh and the NBT bitfield entry is
set, the PARALLAXMAPCOUNT is set to 1, the parallax map slot in
the ppkActiveMaps array is set, and the current map count is
incremented.</p>

<p class="NDLRefMemberFunction">bool SetDarkMapDescriptor(const
NiTexturingProperty* pkTexProp, const NiTexturingProperty::Map**
ppkActiveMaps, NiUInt32&amp; uiCurrentMapCount)</p>

<p class="NDLRefMemberDescription">If the dark map exists on the
NiTexturingProperty on the mesh, the DARKMAPCOUNT is set to 1,
the dark map slot in the ppkActiveMaps array is set, and the
current map count is incremented.</p>

<p class="NDLRefMemberFunction">bool SetDetailMapDescriptor(const
NiTexturingProperty* pkTexProp, const NiTexturingProperty::Map**
ppkActiveMaps, NiUInt32&amp; uiCurrentMapCount)</p>

<p class="NDLRefMemberDescription">If the detail map exists on
the NiTexturingProperty on the mesh, the DETAILMAPCOUNT is set to
1, the detail map slot in the ppkActiveMaps array is set, and the
current map count is incremented.</p>

<p class="NDLRefMemberFunction">bool SetBumpMapDescriptor(const
NiTexturingProperty* pkTexProp, const NiTexturingProperty::Map**
ppkActiveMaps, NiUInt32&amp; uiCurrentMapCount, bool bEnvMap)</p>

<p class="NDLRefMemberDescription">If the bump map exists on the
NiTexturingProperty on the mesh and bEnvMap is true, the
BUMPMAPCOUNT is set to 1, the bump map slot in the ppkActiveMaps
array is set, and the current map count is incremented.</p>

<p class="NDLRefMemberFunction">bool SetGlossMapDescriptor(const
NiTexturingProperty* pkTexProp, const NiTexturingProperty::Map**
ppkActiveMaps, NiUInt32&amp; uiCurrentMapCount, bool bEnvMap,
bool bSpecularEnabled)</p>

<p class="NDLRefMemberDescription">If the gloss map exist on the
NiTexturingProperty on the mesh and bSpecularEnabled is true or
bEnvMap is true, the GLOSSMAPCOUNT is set to 1, the gloss map
slot in the ppkActiveMaps array is set, and the current map count
is incremented.</p>

<p class="NDLRefMemberFunction">bool SetGlowMapDescriptor(const
NiTexturingProperty* pkTexProp, const NiTexturingProperty::Map**
ppkActiveMaps, NiUInt32&amp; uiCurrentMapCount)</p>

<p class="NDLRefMemberDescription">If the glow map exists on the
NiTexturingProperty on the mesh, the GLOWMAPCOUNT is set to 1,
the glow map slot in the ppkActiveMaps array is set, and the
current map count is incremented.</p>

<p class="NDLRefMemberFunction">bool SetDecalMapsDescriptor(const
NiTexturingProperty* pkTexProp, const NiTexturingProperty::Map**
ppkActiveMaps, NiUInt32&amp; uiCurrentMapCount, NiUInt32
uiDecalMapMax)</p>

<p class="NDLRefMemberDescription">If any decal maps exist on the
NiTexturingProperty on the mesh, the DECALMAPCOUNT is set to
number of maps, the decal map slots in the ppkActiveMaps array
are set, and the current map count is incremented by the decal
map count.</p>

<p class="NDLRefMemberFunction">bool
SetShaderMapsDescriptor(const NiTexturingProperty* pkTexProp,
const NiTexturingProperty::Map** ppkActiveMaps, NiUInt32&amp;
uiCurrentMapCount, NiUInt32 uiShaderMapMax)</p>

<p class="NDLRefMemberDescription">If any shader maps exist on
the NiTexturingProperty on the mesh, the CUSTOMMAPXXCOUNT entry
is set where XX is the index of the shader map, the shader map
slots in the ppkActiveMaps array are set, and the current map
count is incremented by shader map count.</p>

<p class="NDLRefMemberFunction">bool
SetTexuringPropertyDescriptor(const NiRenderObject* pkMesh, const
NiPropertyState* pkPropState, const NiDynamicEffectState*
pkEffectState, const NiTexturingProperty::Map** ppkActiveMaps,
NiUInt32 uiMapMax, NiUInt32 uiDecalMapMax, NiUInt32
uiShaderMapMax, bool bSpecularEnabled)</p>

<p class="NDLRefMemberDescription">This method sets the
APPLYREPLACE bitfield as well as invoking the previous texturing
property map functions to set the textures on this bitfield.</p>

<p class="NDLRefMemberFunction">bool
SetTextureMapUVsDescriptor(const NiRenderObject* pkMesh, const
NiTexturingProperty::Map** ppkActiveMaps, NiUInt32 uiMapMax,
NiUInt32 uiNumInputTextureSets, NiUInt32 uiMaxUsedMap)</p>

<p class="NDLRefMemberDescription">This method sets the input UV
count based on the active map slots passed in.</p>

<p class="NDLRefMemberFunction">bool SetLightsDescriptor(const
NiRenderObject* pkMesh, const NiDynamicEffectState*
pkEffectState)</p>

<p class="NDLRefMemberDescription">This method invokes the
AddLight method for every light in the input effect state.</p>

<p class="NDLRefMemberFunction">bool SetEnvMapDescriptor(const
NiRenderObject* pkMesh, const NiDynamicEffectState*
pkEffectState)</p>

<p class="NDLRefMemberDescription">This method sets the
ENVMAPTYPE bitfield entry if an environment texture effect exists
in the effect state on the mesh.</p>

<p class="NDLRefMemberFunction">bool
SetProjLightMapDescriptor(const NiRenderObject* pkMesh, const
NiDynamicEffectState* pkEffectState)</p>

<p class="NDLRefMemberDescription">This method sets up to three
projected light maps based on the input effect state.</p>

<p class="NDLRefMemberFunction">bool
SetProjShadowMapDescriptor(const NiRenderObject* pkMesh, const
NiDynamicEffectState* pkEffectState)</p>

<p class="NDLRefMemberDescription">This method sets up to three
projected shadow maps based on the input effect state.</p>

<p class="NDLRefMemberFunction">bool
SetShadowTechniqueDescriptor(const NiRenderObject* pkMesh, const
NiDynamicEffectState* pkEffectState)</p>

<p class="NDLRefMemberDescription">This method sets the shadowing
bits based on the lights in the effect state attached to the
mesh.</p>

<h2>Notes</h2><a name="Bitfield" id="Bitfield"></a>

<p class="NDLRefHead2">Bitfield</p>

<p>In order to compress the storage of the data
for describing the vertex program, the data has been stored into
a 128-bit bitfield. The values are:</p>
<!--(Table)=========================================================-->

<table>
    <thead>
        <tr>
            <th>Enumeration</th>

            <th>Size (Bits)</th>

            <th>Meaning</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td class="Colspan" colspan="3"></td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">TRANSFORM</span></td>

            <td>2</td>

            <td><span class="NDLSystemFont"><a href=
            "NiStandardMaterial.htm#Transform_Type">NiStandardMaterial::TransformType</a></span></td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">NORMAL</span></td>

            <td>2</td>

            <td><span class="NDLSystemFont"><a href=
            "NiStandardMaterial.htm#NormalType">NiStandardMaterial::NormalType</a></span></td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">SPECULAR</span></td>

            <td>1</td>

            <td>Render with specularity</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">VERTEXCOLORS</span></td>

            <td>1</td>

            <td>Model has vertex colors</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">AMBDIFFEMISSIVE</span></td>

            <td>2</td>

            <td><span class="NDLSystemFont"><a href=
            "NiStandardMaterial.htm#AmbDiffEmissiveEnum1">NiStandardMaterial::AmbDiffEmissiveEnum</a></span></td>
        </tr>

        <tr>
            <td class="Colspan" colspan="3"></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">LIGHTINGMODE</span></td>

            <td>1</td>

            <td><span class="NDLSystemFont"><a href=
            "NiStandardMaterial.htm#LightingModeEnum">NiStandardMaterial::LightingMode</a></span></td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">APPLYMODE</span></td>

            <td>1</td>

            <td><span class="NDLSystemFont"><a href=
            "NiStandardMaterial.htm#ApplyMode">NiStandardMaterial::ApplyMode</a></span></td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">FOGTYPE</span></td>

            <td>2</td>

            <td><span class="NDLSystemFont"><a href=
            "NiStandardMaterial.htm#Fog">NiStandardMaterial::Fog</a></span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">INPUTUVCOUNT</span></td>

            <td>3</td>

            <td>Number of uv's in model</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">PARALLAXMAPCOUNT</span></td>

            <td>1</td>

            <td>Parallax map applied</td>
        </tr>

        <tr>
            <td class="Colspan" colspan="3"></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">BASEMAPCOUNT</span></td>

            <td>1</td>

            <td>Base map applied</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">NORMALMAPCOUNT</span></td>

            <td>1</td>

            <td>Normal map applied</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">NORMALMAPTYPE</span></td>

            <td>2</td>

            <td><span class="NDLSystemFont"><a href=
            "NiStandardMaterial.htm#NormalMapType">NiStandardMaterial::NormalMapType</a></span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">DARKMAPCOUNT</span></td>

            <td>1</td>

            <td>Dark map applied</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">DETAILMAPCOUNT</span></td>

            <td>1</td>

            <td>Detail map applied</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">BUMPMAPCOUNT</span></td>

            <td>1</td>

            <td>Bump map applied</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">GLOSSMAPCOUNT</span></td>

            <td>1</td>

            <td>Gloss map applied</td>
        </tr>

        <tr>
            <td class="Colspan" colspan="3"></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">GLOWMAPCOUNT</span></td>

            <td>1</td>

            <td>Glow map applied</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">ENVMAPTYPE</span></td>

            <td>3</td>

            <td><span class="NDLSystemFont"><a href=
            "NiStandardMaterial.htm#TexEffectType">NiStandardMaterial::TexEffectType</a></span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">CUSTOMMAP00COUNT</span></td>

            <td>1</td>

            <td>Shader map 00 applied (Bit for derived class
            use)</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">CUSTOMMAP01COUNT</span></td>

            <td>1</td>

            <td>Shader map 01 applied (Bit for derived class
            use)</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">CUSTOMMAP02COUNT</span></td>

            <td>1</td>

            <td>Shader map 02 applied (Bit for derived class
            use)</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">CUSTOMMAP03COUNT</span></td>

            <td>1</td>

            <td>Shader map 03 applied (Bit for derived class
            use)</td>
        </tr>

        <tr>
            <td class="Colspan" colspan="3"></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">CUSTOMMAP04COUNT</span></td>

            <td>1</td>

            <td>Shader map 04 applied (Bit for derived class
            use)</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">DECALMAPCOUNT</span></td>

            <td>2</td>

            <td>Decal maps applied (3 max)</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">PERVERTEXFORLIGHTS</span></td>

            <td>1</td>

            <td>Per-pixel/Per-vertex lighting</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">POINTLIGHTCOUNT</span></td>

            <td>4</td>

            <td>Number of point lights applied (8 max across all
            light types)</td>
        </tr>

        <tr>
            <td class="Colspan" colspan="3"></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SPOTLIGHTCOUNT</span></td>

            <td>4</td>

            <td>Number of spot lights applied (8 max across all
            light types)</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">DIRLIGHTCOUNT</span></td>

            <td>4</td>

            <td>Number of directional lights applied (8 max
            across all light types)</td>
        </tr>

        <tr>
            <td class="Colspan" colspan="3"></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SHADOWMAPFORLIGHT</span></td>

            <td>8</td>

            <td>Shadow maps applied for lights</td>
        </tr>

        <tr>
            <td class="Colspan" colspan="3"></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">PROJLIGHTMAPCOUNT</span></td>

            <td>2</td>

            <td>Number of projected lights (3 max)</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">PROJLIGHTMAPTYPES</span></td>

            <td>3</td>

            <td>Parallel or projected (1 bit per light)</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">PROJLIGHTMAPCLIPPED</span></td>

            <td>3</td>

            <td>Bit per projected light determining if it is
            clipped</td>
        </tr>

        <tr>
            <td class="Colspan" colspan="3"></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">PROJSHADOWMAPCOUNT</span></td>

            <td>2</td>

            <td>Number of projected shadows (3 max)</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">PROJSHADOWMAPTYPES</span></td>

            <td>3</td>

            <td>Parallel or projected (1 bit per shadow)</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">PROJSHADOWMAPCLIPPED</span></td>

            <td>3</td>

            <td>Bit per projected shadow determining if it is
            clipped</td>
        </tr>

        <tr>
            <td class="Colspan" colspan="3"></td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">MAP00</span></td>

            <td>3</td>

            <td>Input UV set for map</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">MAP00TEXOUTPUT</span></td>

            <td>1</td>

            <td>Texture transform applied or not</td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">MAP01</span></td>

            <td>3</td>

            <td>Input UV set for map</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">MAP01TEXOUTPUT</span></td>

            <td>1</td>

            <td>Texture transform applied or not</td>
        </tr>

        <tr>
            <td class="Colspan" colspan="3"></td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">MAP02</span></td>

            <td>3</td>

            <td>Input UV set for map</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">MAP02TEXOUTPUT</span></td>

            <td>1</td>

            <td>Texture transform applied or not</td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">MAP03</span></td>

            <td>3</td>

            <td>Input UV set for map</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">MAP03TEXOUTPUT</span></td>

            <td>1</td>

            <td>Texture transform applied or not</td>
        </tr>

        <tr>
            <td class="Colspan" colspan="3"></td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">MAP04</span></td>

            <td>3</td>

            <td>Input UV set for map</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">MAP04TEXOUTPUT</span></td>

            <td>1</td>

            <td>Texture transform applied or not</td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">MAP05</span></td>

            <td>3</td>

            <td>Input UV set for map</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">MAP05TEXOUTPUT</span></td>

            <td>1</td>

            <td>Texture transform applied or not</td>
        </tr>

        <tr>
            <td class="Colspan" colspan="3"></td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">MAP06</span></td>

            <td>3</td>

            <td>Input UV set for map</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">MAP06TEXOUTPUT</span></td>

            <td>1</td>

            <td>Texture transform applied or not</td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">MAP07</span></td>

            <td>3</td>

            <td>Input UV set for map</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">MAP07TEXOUTPUT</span></td>

            <td>1</td>

            <td>Texture transform applied or not</td>
        </tr>

        <tr>
            <td class="Colspan" colspan="3"></td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">MAP08</span></td>

            <td>3</td>

            <td>Input UV set for map</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">MAP08TEXOUTPUT</span></td>

            <td>1</td>

            <td>Texture transform applied or not</td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">MAP09</span></td>

            <td>3</td>

            <td>Input UV set for map</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">MAP09TEXOUTPUT</span></td>

            <td>1</td>

            <td>Texture transform applied or not</td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">MAP10</span></td>

            <td>3</td>

            <td>Input UV set for map</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">MAP10TEXOUTPUT</span></td>

            <td>1</td>

            <td>Texture transform applied or not</td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">MAP11</span></td>

            <td>3</td>

            <td>Input UV set for map</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">MAP11TEXOUTPUT</span></td>

            <td>1</td>

            <td>Texture transform applied or not</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">USERDEFINED00</span></td>

            <td>1</td>

            <td>Bit for derived class use</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">USERDEFINED01</span></td>

            <td>1</td>

            <td>Bit for derived class use</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">USERDEFINED02</span></td>

            <td>1</td>

            <td>Bit for derived class use</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">USERDEFINED03</span></td>

            <td>1</td>

            <td>Bit for derived class use</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SHADOWTECHNIQUE</span></td>

            <td>2</td>

            <td>Active shadow technique id</td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">ALPHATEST</span></td>

            <td>1</td>

            <td>Alpha testing enabled</td>
        </tr>
    </tbody>
</table>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
