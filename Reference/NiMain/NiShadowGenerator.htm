<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiShadowGenerator</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiShadowGenerator</p>

<p class="NDLRefParentage">: public <a href=
"NiObject.htm">NiObject</a></p>

<p class="NDLRefHeaderFile">&lt;NiShadowGenerator.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>This class is the focal point of the shadowing system. A
NiShadowGenerator object is attached to a <span class=
"NDLSystemFont"><a href=
"NiDynamicEffect.htm">NiDynamicEffect</a></span> object to inform
the shadowing system that the <span class=
"NDLSystemFont"><a href="NiDynamicEffect.htm">NiDynamicEffect</a></span>
object produces shadows. Currently <span class=
"NDLSystemFont"><a href=
"NiShadowGenerator.htm">NiShadowGenerator</a></span> objects can
only be attached to <span class="NDLSystemFont"><a href=
"NiSpotLight.htm">NiSpotLight</a></span>, <span class=
"NDLSystemFont"><a href=
"NiPointLight.htm">NiPointLight</a></span>, and <span class=
"NDLSystemFont"><a href=
"NiDirectionalLight.htm">NiDirectionalLight</a></span> dynamic
effect objects.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefHead2">Constructors</p>

<p class="NDLRefMemberFunction">NiShadowGenerator()</p>

<p class="NDLRefMemberDescription">Default constructor for the
NiShadowGenerator class. The NiShadowGenerator will be
initialized with the following default values:</p>

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Item</th>

                <th>Default Value</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td>Static Shadows</td>

                <td>FALSE</td>
            </tr>

            <tr>
                <td>Backface Rendering</td>

                <td>TRUE</td>
            </tr>

            <tr>
                <td>Shadow Map Size Hint</td>

                <td>1024</td>
            </tr>

            <tr>
                <td>Strictly Observe Size Hint</td>

                <td>FALSE</td>
            </tr>

            <tr>
                <td>Depth Bias</td>

                <td>0</td>
            </tr>

            <tr>
                <td>Automatically calculate near clipping
                distance</td>

                <td>TRUE</td>
            </tr>

            <tr>
                <td>Automatically calculate far clipping
                distance</td>

                <td>TRUE</td>
            </tr>

            <tr>
                <td>Automatically calculate frustum width</td>

                <td>TRUE</td>
            </tr>

            <tr>
                <td>Automatically calculate frustum position</td>

                <td>TRUE</td>
            </tr>
        </tbody>
    </table>
</div>

<p class="NDLRefMemberFunction">NiShadowGenerator(<a href=
"NiDynamicEffect.htm">NiDynamicEffect</a> pkDynEffect*)</p>

<p class="NDLRefMemberDescription">Constructor for the
NiShadowGenerator class. Initializes the shadow generator class
to the same default values as the default constructor above. Also
assigns the provided NiDynamicEffect to the constructed
NiShadowGenerator.</p>

<p class="NDLRefHead2">Infrastructure Methods</p>

<p class="NDLRefMemberFunction"><a href=
"NiDynamicEffect.htm">NiDynamicEffect</a>*
GetAssignedDynamicEffect()</p>

<p class="NDLRefMemberDescription">Returns the <span class=
"NDLSystemFont"><a href=
"NiDynamicEffect.htm">NiDynamicEffect</a></span> object the
shadow generator is assigned to. If the name does not correspond
to a valid shadow technique, then the default shadow technique
will be assigned.</p>

<p class="NDLRefMemberFunction">void SetShadowTechnique(const
NiFixedString&amp; kTechniqueName, bool bAssignDefaultDepthBias =
true)</p>

<p class="NDLRefMemberFunction">void SetShadowTechnique(<a href=
"NiShadowTechnique.htm">NiShadowTechnique</a>* pkTechnique, bool
bAssignDefaultDepthBias = true)</p>

<p class="NDLRefMemberFunction"><a href=
"NiShadowTechnique.htm">NiShadowTechnique</a>*
GetShadowTechnique()</p>

<p class="NDLRefMemberDescription">These functions are used to
get and set the <span class="NDLSystemFont"><a href=
"NiShadowTechnique.htm">NiShadowTechnique</a></span> used by the
shadow generator. The second parameter in the setting functions,
<span class="NDLSystemFont">bAssignDefaultDepthBias</span>,
determines if the shadow generator's depth bias will be set to
the newly assigned shadow technique's default depth bias.
Changing the <span class="NDLSystemFont"><a href=
"NiShadowTechnique.htm">NiShadowTechnique</a></span> used by the
shadow generator will force the shadow generator to release all
of its assigned shadow maps.</p>

<p class="NDLRefMemberFunction">bool AssignShadowMap(<a href=
"NiShadowMap.htm">NiShadowMap</a>* pkShadowMap, unsigned int
uiSMIndex, NiTListIterator kSMIter = NULL, <a href=
"NiRenderObject.htm">NiRenderObject</a>* pkGeometry = NULL)</p>

<p class="NDLRefMemberFunction"><a href=
"NiShadowMap.htm">NiShadowMap</a>* RetrieveShadowMap(unsigned int
uiSMIndex, <a href="NiRenderObject.htm">NiRenderObject</a>*
pkGeometry = NULL)</p>

<p class="NDLRefMemberDescription">These functions are used to
assign/retrieve a shadow map to the shadow generator. These
functions perform some book keeping required by the shadowing
system and then call the shadow generator's shadow map texture
assignment/retrieval callback.</p>

<p class="NDLRefMemberFunction"><a href=
"NiShadowMap.htm">NiShadowMap</a>* GetOwnedShadowMap(unsigned int
uiIndex)</p>

<p class="NDLRefMemberDescription">This function calls the shadow
generator's owned shadow map callback. It used to get the,
uiIndex, shadow map that is assigned to the shadow generator.
This function is used by the shadowing system to iterate through
the shadow maps assigned to a shadow generator.</p>

<p class="NDLRefMemberFunction">unsigned int
GetShadowMapCount()</p>

<p class="NDLRefMemberDescription">This function calls the shadow
generator's shadow map count callback. It returns the number of
shadow maps that are assigned to the shadow generator. This
function is used by the shadowing system to iterate through the
shadow maps assigned to a shadow generator.</p>

<p class="NDLRefMemberFunction">bool
SetShaderConstantData(<a href=
"NiRenderObject.htm">NiRenderObject</a>* pkGometry, unsigned int
uiSMIndex, <a href=
"NiShaderConstantMap.htm">NiShaderConstantMap::ObjectMappings</a>
eMapping, void* pkData)</p>

<p class="NDLRefMemberDescription">This function calls the shadow
generator's set shader constant data callback. This function can
be used to provide shader constant data that can be stored in a
custom data structure to later be used by <span class=
"NDLSystemFont">GetShaderConstantData()</span> when rendering a
geometry object.</p>

<p class="NDLRefMemberFunction">bool GetShaderConstantData(void*
pvData, unsigned int uiDataSize, <a href=
"NiRenderObject.htm">NiRenderObject</a>* pkGeometry, unsigned int
uiSMIndex, <a href=
"NiShaderConstantMap.htm">NiShaderConstantMap::ObjectMappings</a>
eMapping, const <a href=
"NiPropertyState.htm">NiPropertyState</a>* pkState, const
<a href="NiDynamicEffectState.htm">NiDynamicEffectState</a>*
pkEffects, const <a href="NiTransform.htm">NiTransform</a>&amp;
kWorld, const <a href="NiBound.htm">NiBound</a>&amp; kWorldBound,
unsigned int uiPass)</p>

<p class="NDLRefMemberDescription">This function calls the shadow
generator's get shader constant data callback. This function is
called when a geometry object is being rendered and a shadowing
specific shader constant needs to be set. The function should
populate the requested data of size <span class=
"NDLSystemFont">uiDataSize</span> and have <span class=
"NDLSystemFont">pvData</span> point to this data location.</p>

<p class="NDLRefMemberFunction">void
ForceMaterialNeedsUpdate()</p>

<p class="NDLRefMemberDescription">This method iterates over all
the shadow generator's shadow receivers and flags them and
requiring a material updated.</p>

<p class="NDLRefMemberFunction">void* SetSizeHint(unsigned short
usSizeHint)</p>

<p class="NDLRefMemberFunction">unsigned short GetSizeHit()</p>

<p class="NDLRefMemberDescription">These functions set and get
the shadow map size hit respectively. The shadow map size hint
represents the size of the shadow map the shadow generator
desires. It is up to the active <span class=
"NDLSystemFont"><a href=
"NiShadowClickGenerator.htm">NiShadowClickGenerator</a></span>'s
discretion to obey this hint or not.</p>

<p class="NDLRefMemberFunction">void
SetStrictlyObserveSizeHit(bool bStrictlyObserveSizeHit)</p>

<p class="NDLRefMemberFunction">bool
GetStrictlyObserveSizeHit()</p>

<p class="NDLRefMemberDescription">These functions set and get
the strictly observe size flag respectively. This flag is used to
indicate that the shadow generator will accept only shadow maps
that are exactly the requested size. It is up to the active
NiShadowClickGenerator's discretion to obey this flag or not.</p>

<p class="NDLRefMemberFunction">void SetDepthBias(float
fDepthBias)</p>

<p class="NDLRefMemberFunction">float GetDepthBias()</p>

<p class="NDLRefMemberDescription">These functions set and get
the shadow depth bias used by the shadow generator.</p>

<p class="NDLRefMemberFunction">bool IsDepthBiasDefault()</p>

<p class="NDLRefMemberDescription">This function returns a
boolean the describes if the depth bias used by the shadow
generator is the default depth bias of the shadow generator's
assigned shadow technique.</p>

<p class="NDLRefMemberFunction">void SetDepthBiasToDefault()</p>

<p class="NDLRefMemberDescription">This function sets the shadow
generators depth bias to the default depth bias of the shadow
technique assigned to the shadow generator.</p>

<p class="NDLRefMemberFunction">float GetNearClippingDist()</p>

<p class="NDLRefMemberFunction">void SetNearClippingDist(float
fNearClippingDist)</p>

<p class="NDLRefMemberDescription">These functions get and set
the near clipping plane distance for the view frustum used when
rendering to a shadow map.</p>

<p class="NDLRefMemberFunction">bool
GetAutoCalcNearClippingDist()</p>

<p class="NDLRefMemberFunction">boid
SetAutoCalcNearClippingDist(bool bAutoDetermine)</p>

<p class="NDLRefMemberDescription">These functions are used to
get and set the auto-calculate near clipping distance flag.
Setting this flag to true informs the NiShadowClickGenerator that
it should calculate the near clipping plane distance for the view
frustum used when rendering the shadow map. It is up to the
active NiShadowClickGenerator's discretion to obey this flag or
not.</p>

<p class="NDLRefMemberFunction">float GetFarClippingDist()</p>

<p class="NDLRefMemberFunction">void SetFarClippingDist(float
fFarClippingDist)</p>

<p class="NDLRefMemberDescription">These functions get and set
the far clipping plane distance for the view frustum used when
rendering to a shadow map.</p>

<p class="NDLRefMemberFunction">bool
GetAutoCalcFarClippingDist()</p>

<p class="NDLRefMemberFunction">boid
SetAutoCalcFarClippingDist(bool bAutoDetermine)</p>

<p class="NDLRefMemberDescription">These functions are used to
get and set the auto-calculate far clipping distance flag.
Setting this flag to true informs the <span class=
"NDLSystemFont">NiShadowClickGenerator</span> that it should
calculate the far clipping plane distance for the view frustum
used when rendering the shadow map. It is up to the active
<span class="NDLSystemFont">NiShadowClickGenerator'</span>s
discretion to obey this flag or not.</p>

<p class="NDLRefMemberFunction">float
GetDirLightFrustumWidth()</p>

<p class="NDLRefMemberFunction">void
SetDirLightFrustumWidth(float fDirLightFrustumWidth)</p>

<p class="NDLRefMemberDescription">These functions get and set
the frustum width used for directional lights when rendering to a
shadow map.</p>

<p class="NDLRefMemberFunction">bool
GetAutoCalcDirLightFrustumWidth()</p>

<p class="NDLRefMemberFunction">void
SetAutoCalcDirLightFrstumWidth(bool bAutoDetermine)</p>

<p class="NDLRefMemberDescription">These functions are used to
get and set the auto-calculate directional light frustum width
flag. Setting this flag to true informs the <a href=
"NiShadowClickGenerator.htm"><span class=
"NDLSystemFont">NiShadowClickGenerator</span></a> that it should
calculate the frustum width used for directional lights when
rendering the shadow map. It is up to the active <span class=
"NDLSystemFont"><a href=
"NiShadowClickGenerator.htm">NiShadowClickGenerator</a></span>'s
discretion to obey this flag or not.</p>

<p class="NDLRefMemberFunction">bool
GetAutoCalcDirLightFrustumPosition()</p>

<p class="NDLRefMemberFunction">void
SetAutoCalcDirLightFrustumPosition(bool bAutoCalc)</p>

<p class="NDLRefMemberDescription">These functions are used to
get and set the auto-calculate directional light camera position.
Setting this flag to true informs the <span class=
"NDLSystemFont"><a href=
"NiShadowClickGenerator.htm">NiShadowClickGenerator</a></span>
that it should calculate the camera position used for directional
lights when rendering the shadow map. It is up to the active
<span class="NDLSystemFont"><a href=
"NiShadowClickGenerator.htm">NiShadowClickGenerator</a></span>'s
discretion to obey this flag or not.</p>

<p class="NDLRefMemberFunction">void MarkShaowMapsDirty()</p>

<p class="NDLRefMemberDescription">This function will iterate
through all the shadow maps used by the shadow generator marking
them as dirty. This will in turn cause all of the shadow map's
render clicks to be marked as dirty.</p>

<p class="NDLRefMemberFunction">bool AreShaowMapsDirty()</p>

<p class="NDLRefMemberDescription">This function returns the
current dirty state of the shadow generator. Note: Calling this
function may result in search through all the render clicks of
all the shadow maps used by the shadow generator to obtain the
correct dirty state.</p>

<p class="NDLRefMemberFunction">void SetRenderViewsDirty(bool
bDirty)</p>

<p class="NDLRefMemberFunction">bool AreRenderViewsDirty()</p>

<p class="NDLRefMemberDescription">These functions are used to
set and get the dirty state of the render views associated with
the shadow maps used by the shadow generator. Each render click
used by a shadow map has a render view that contains a list of
all the scene graphs that need to be rendered. Constructing this
list can be an expensive process. To avoid this the render views
are only reconstructed with this flag is marked as dirty. After
the render views are reconstructed they will be marked as
clean.</p>

<p class="NDLRefMemberFunction">void SetStatic(bool bStatic)</p>

<p class="NDLRefMemberFunction">bool GetStatic()</p>

<p class="NDLRefMemberDescription">These functions set and get
the static state of shadow generator respectively. If a shadow
generator is flagged as static its shadow maps will only be
rendered when its shadow maps or render views are flagged as
dirty.</p>

<p class="NDLRefMemberFunction">void SetRenderBackfaces(bool
bBackfaces)</p>

<p class="NDLRefMemberFunction">bool GetRenderBackfaces()</p>

<p class="NDLRefMemberDescription">These functions set and get
the back face rendering state of the shadow generator. A shadow
generator that is flagged to render back faces will render the
back faces of geometry to its shadow maps instead of rendering
the front faces. This technique can be very effective at helping
to reduce incorrect self shadowing artifacts, sometimes referred
to as "shadow acne".</p>

<p class="NDLRefMemberDescription">To better understand these
effects, consider toggling the "<span class=
"NDLSystemFont">Render Backfaces</span>" check box in the
<span class="NDLSystemFont">ShadowMap</span> sample to show the
difference between rendering shadow maps with back faces and
front faces, especially for the <span class=
"NDLSystemFont">NiStandardShadowTechnique</span> technique.
Without rendering backfaces, the <span class=
"NDLSystemFont">NiStandardShadowTechnique</span> technique
exhibits many striping or "shadow acne" artifacts.</p>

<p class="NDLRefMemberFunction">void SetActive(bool bActive, bool
bForceMaterialUpdate = false, bool bRetainShadowMaps = false)</p>

<p class="NDLRefMemberFunction">bool GetActive()</p>

<p class="NDLRefMemberDescription">These functions set and get
the active state of the shadow generator. Inactive shadow
generators have no affect when rendering a scene. When changing
the active state of a shadow generator is maybe needed to update
the materials of all geometry that receives shadows from the
shadow generator. If this is desired, setting <span class=
"NDLSystemFont">bForceMaterialUpdate</span> flag will force all
shadow receiving geometry for the generator to require a material
update. By default when a shadow generator is deactivated any
shadow maps it was using will be added back to the pool of
available shadow maps. If this is not wanted the <span class=
"NDLSystemFont">bRetainShadowMaps</span> parameter can be set to
true, informing the shadowing generator to hold on to its shadow
maps while it is inactive. This can be useful for situations
where the active state of a shadow generator is toggled multiple
times a frame.</p>

<p class="NDLRefMemberFunction">unsigned short GetFlags()</p>

<p class="NDLRefMemberDescription">This function returns all the
shadow generator flags in a bitfield encoded unsigned short.</p>

<p class="NDLRefMemberFunction">void ReleaseAllShadowMaps()</p>

<p class="NDLRefMemberDescription">This function releases all the
shadow maps used by the shadow generator back to the shadow
manager.</p>

<p class="NDLRefHead2">Caster/Receiver List Methods</p>

<p class="NDLRefMemberFunction">void
GetCasterGeometryList(<a href=
"NiRenderObject.htm">NiRenderObjectList</a>&amp; kCasterList)</p>

<p class="NDLRefMemberFunction">void
GetReceiverGeometryList(<a href=
"NiRenderObject.htm">NiRenderObjectList</a>&amp;
kReceiverList)</p>

<p class="NDLRefMemberDescription">These functions provide a list
of all the shadow casting and shadow receiver geometry
respectively.</p>

<p class="NDLRefMemberFunction">const <a href=
"NiNode.htm">NiNodeList</a>&amp;
GetUnaffectedCasterNodeList()</p>

<p class="NDLRefMemberFunction">const <a href=
"NiNode.htm">NiNodeList</a>&amp;
GetUnaffectedReceiverNodeList()</p>

<p class="NDLRefMemberDescription">These functions return a node
list of the unaffected caster and receiver nodes
respectively.</p>

<p class="NDLRefMemberFunction">bool
AttachUnaffectedCasterNode(<a href="NiNode.htm">NiNode</a>*
pkUnaffectedCasterNode)</p>

<p class="NDLRefMemberFunction">bool
DetachUnaffectedCasterNode(<a href="NiNode.htm">NiNode</a>*
pkUnaffectedCasterNode)</p>

<p class="NDLRefMemberFunction">void
DetachAllUnaffectedCasterNodes()</p>

<p class="NDLRefMemberDescription">These functions are used to
attach and detach shadow caster nodes that are used by the shadow
generator.</p>

<p class="NDLRefMemberFunction">bool
AttachUnaffectedReceiverNode(<a href="NiNode.htm">NiNode</a>*
pkUnaffectedReceiverNode)</p>

<p class="NDLRefMemberFunction">bool
DetachUnaffectedReceiverNode(<a href="NiNode.htm">NiNode</a>*
pkUnaffectedReceiverNode)</p>

<p class="NDLRefMemberFunction">void
DetachAllUnaffectedReceiverNodes()</p>

<p class="NDLRefMemberDescription">These functions are used to
attach and detach shadow receiver nodes that are used by the
shadow generator.</p>

<p class="NDLRefHead2">Callback Management Methods</p>

<p class="NDLRefMemberFunction"> </p>

<p class="NDLRefMemberFunction">void
SetSMTextureAssignmentCallbackFun(AssignSMTextureCallback
pfnCallback)</p>

<p class="NDLRefMemberFunction">AssignSMTextureCallback
GetSMTextureAssignmentCallbackFunc()</p>

<p class="NDLRefMemberDescription">These functions set and get
the shadow map texture assignment callback function.</p>

<p class="NDLRefMemberFunction">void
SetSMTextureRetrievalCallbackFunc(RetrieveSMTextureCallback
pfnCallback)</p>

<p class="NDLRefMemberFunction">RetrieveSMTextureCallback
GetSMTextureRetrievalCallbackFunc()</p>

<p class="NDLRefMemberDescription">These functions set and get
the shadow map texture retrieval callback function.</p>

<p class="NDLRefMemberFunction">void
SetOwnedSMCallbackFunc(RetrieveOwnedShadowMap pfnCallback)</p>

<p class="NDLRefMemberFunction">RetrieveOwnedShadowMap
GetOwnedSmCallbackFunc()</p>

<p class="NDLRefMemberDescription">These functions set and get
the owned shadow map callback function.</p>

<p class="NDLRefMemberFunction">void
SetSMCountCallbackFunc(ShadowMapCountCallback pfnCallback)</p>

<p class="NDLRefMemberFunction">ShadowMapCountCallback
GetSMCountCallbackFunc()</p>

<p class="NDLRefMemberDescription">These functions set and get
the shadow map count callback function.</p>

<p class="NDLRefMemberFunction">void
SetSMConstantAssignmentCallbackFunc(SetSMConstantCallback
pfnCallback)</p>

<p class="NDLRefMemberFunction">SetSMConstantCallback
GetSmConstantAssignmentCallbackFunc()</p>

<p class="NDLRefMemberDescription">These functions set and get
the shadow map constant assignment callback function.</p>

<p class="NDLRefMemberFunction">void
SetExtraDataCleanupCallbackFunc(CleanupExtraDataCallback
pfnCallback)</p>

<p class="NDLRefMemberFunction">CleanupExtraDataCallback
GetExtraDataCleanupCallbackFunc()</p>

<p class="NDLRefMemberDescription">These functions set and get
the clean up callback function.</p>

<p class="NDLRefHead2">Default Callback Methods</p>

<p class="NDLRefMemberFunction">static bool
SingleShadowMapAssignmentCallback(<a href=
"NiShadowGenerator.htm">NiShadowGenerator</a>* pkGenerator,
<a href="NiRenderObject.htm">NiRenderObject</a>* pkGeometry,
NiShadowMap* pkShadowMap, unsigned int uiSMIndex)</p>

<p class="NDLRefMemberDescription">This callback function assigns
a single shadow map to the shadow generator. It uses the extra
data pointer to point to the location of the shadow map.</p>

<p class="NDLRefMemberFunction">static <a href=
"NiShadowMap.htm">NiShadowMap</a>*
SingleShadowMapRetrievalCallback(<a href=
"NiShadowGenerator.htm">NiShadowGenerator</a>* pkShadowGenerator,
NiRenderObject* pkGeometry, unsigned int uiSMIndex)</p>

<p class="NDLRefMemberDescription">This callback function
retrieves a single shadow map from the shadow generator. It
assumes the extra data pointer points to the location of the
shadow map.</p>

<p class="NDLRefMemberFunction">static <a href=
"NiShadowMap.htm">NiShadowMap</a>*
SingeShadowMapGetOwnedCallback(<a href=
"NiShadowGenerator.htm">NiShadowGenerator</a>* pkGenerator,
unsigned int uiIndex)</p>

<p class="NDLRefMemberDescription">This callback function
retrieves the single shadow map from the shadow generator. It
assumes the extra data pointer points to the location of the
shadow map.</p>

<p class="NDLRefMemberFunction">static unsigned int
SingleShadowMapCountCallback(<a href=
"NiShadowGenerator.htm">NiShadowGenerator</a>* pkGenerator)</p>

<p class="NDLRefMemberDescription">This callback function checks
to see if the extra data pointer references a shadow map and if
so returns a 1, otherwise this callback returns 0.</p>

<p class="NDLRefMemberFunction">static void
SingleShadowMapCleanupCallback(<a href=
"NiShadowGenerator.htm">NiShadowGenerator</a>* pkGenerator)</p>

<p class="NDLRefMemberDescription">This callback function assumes
that the extra data pointer points the one shadow map used by the
shadow generator and sets that pointer to NULL.</p>

<p class="NDLRefMemberFunction">static bool
DefaultGetShaderConstantCallback(void* pvData, unsigned int
uiDataSize, <a href=
"NiShadowGenerator.htm">NiShadowGenerator</a>* pkGenerator,
NiRenderObject* pkGeometry, unsigned int uiSMIndex, <a href=
"NiShaderConstantMap.htm">NiShaderConstantMap::ObjectMappings</a>
eMapping, const <a href=
"NiPropertyState.htm">NiPropertyState</a>*, const <a href=
"NiDynamicEffectState.htm">NiDynamicEffectState</a>* pkEffects,
const <a href="NiTransform.htm">NiTransform</a>&amp; kWorld,
const <a href="NiBound.htm">NiBound</a>&amp; kWorldBound,
unsigned int uiPass)</p>

<p class="NDLRefMemberDescription">This callback function
provides the required shader constant data for the shadow bias as
well as the specialized shader constants for the variance shadow
mapping shadow technique.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
