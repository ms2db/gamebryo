<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiRenderObject</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiRenderObject</p>

<p class="NDLRefParentage">: public <a href=
"NiAVObject.htm">NiAVObject</a></p>

<p class="NDLRefHeaderFile">&lt;NiRenderObject.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>This class is abstract and represents an object to be
rendered. <a href=
"../../Reference/NiMesh/NiMesh.htm"><span class="NDLSystemFont">NiMesh</span></a>
is the only implementation of NiRenderObject currently supported
by renderers. NiRenderObject exists to expose an interface in the
NiMain library. Games that wish to derive a custom render object
must derive from NiMesh, (or modify renderers to support the new
class).</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiRenderObject()</p>

<p class="NDLRefMemberDescription">The default constructor.</p>

<p class="NDLRefHead1">Virtual Member Functions</p>

<p class="NDLRefMemberFunction">virtual RenderImmediate(<a href=
"NiRenderer.htm">NiRenderer</a>* pkRenderer) = 0</p>

<p class="NDLRefMemberDescription">Renders the object
immediately.</p>

<p class="NDLRefMemberFunction">virtual bool
RequiresMaterialOption(const <a href=
"NiFixedString.htm">NiFixedString</a>&amp; kMaterialOption)</p>

<p class="NDLRefMemberDescription">Returns true if the material
should implement <span class=
"NDLSystemFont">kMaterialOption</span> and if the underlying
render object has the required data to implement that material
option.</p>

<p class="NDLRefMemberFunction">virtual bool ContainsData(const
<a href="NiFixedString.htm">NiFixedString</a>&amp; kSemantic,
NiUInt32 uiSemanticIndex = 0) const = 0</p>

<p class="NDLRefMemberDescription">Returns true if the specified
semantic exists on the render object.</p>

<p class="NDLRefMemberFunction">virtual NiUInt32
GetSemanticCount(const <a href=
"NiFixedString.htm">NiFixedString</a>&amp; kSemantic) const =
0</p>

<p class="NDLRefMemberDescription">Returns the number of elements
with the specified semantic across all semantic indices.</p>

<p class="NDLRefHead1">Supported Static Functions</p>

<p class="NDLRefMemberFunction">static bool
GetStreamingAppliesDefaultMaterial()</p>

<p class="NDLRefMemberDescription">This is a static method for
determining whether or not to apply the renderer's default
material when streaming in.</p>

<p class="NDLRefMemberFunction">static void
SetStreamingAppliesDefaultMaterial(bool bApplyDefault = true)</p>

<p class="NDLRefMemberDescription">This is a static method that
sets whether or not to apply the renderer's default material when
streaming in.</p>

<p class="NDLRefMemberFunction">static void
RecursiveSetMaterialNeedsUpdate(<a href=
"NiAVObject.htm">NiAVObject</a>* pkObject, bool bDirty)</p>

<p class="NDLRefMemberDescription">This utility function will
call <span class=
"NDLSystemFont">SetMaterialNeedsUpdate(bDirty)</span> on all
materials recursively found in the scene graph rooted at
<span class="NDLSystemFont">pkObject.</span></p>

<p class="NDLRefMemberFunction"><span class=
"NDLSystemFont">s</span>tatic void
RecursiveSetMaterialNeedsUpdateDefault(<a href=
"NiAVObject.htm">NiAVObject</a>* pkObject, bool bDirty)</p>

<p class="NDLRefMemberDescription">This utility function will
call <span class=
"NDLSystemFont">SetMaterialNeedsUpdateDefault(bDirty)</span> on
all materials recursively found in the scene graph rooted at
<span class="NDLSystemFont">pkObject.</span></p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction"><a href=
"NiPropertyState.htm">NiPropertyState</a>* GetPropertyState()
const</p>

<p class="NDLRefMemberFunction">void SetPropertyState(<a href=
"NiPropertyState.htm">NiPropertyState</a>* pkState)</p>

<p class="NDLRefMemberDescription">Get and sets the property
state.</p>

<p class="NDLRefMemberDescription">Note: The property state on a
render object is a cache of all properties that affect the
object, and a call to <span class=
"NDLSystemFont">UpdateProperties</span> will repopulate this
cache. If the property state is manually modified with
<span class="NDLSystemFont">SetPropertyState</span>, or via the
return value of <span class=
"NDLSystemFont">GetPropertyState</span>, then <span class=
"NDLSystemFont">UpdateProperties</span> should not be called.</p>

<p class="NDLRefMemberFunction"><a href=
"NiDynamicEffectState.htm">NiDynamicEffectState</a>*
GetEffectState() const</p>

<p class="NDLRefMemberFunction">void SetEffectState(<a href=
"NiDynamicEffectState.htm">NiDynamicEffectState</a>* pkState)</p>

<p class="NDLRefMemberDescription">Get and sets the effect
state.</p>

<p class="NDLRefMemberFunction">bool GetSortObject() const</p>

<p class="NDLRefMemberFunction">void SetSortObject(b Sort)</p>

<p class="NDLRefMemberDescription">Gets and sets the sort object
flag.</p>

<p class="NDLRefMemberFunction"><a href=
"NiShader.htm">NiShader</a>* GetShader() const</p>

<p class="NDLRefMemberDescription">Returns the cached <a href=
"NiShader.htm">NiShader</a> object for the active material.</p>

<p class="NDLRefMemberFunction"><a href=
"NiShader.htm">NiShader</a>* GetShaderFromMaterial()</p>

<p class="NDLRefMemberDescription">Returns the <a href=
"NiShader.htm">NiShader</a> from the active material, generating
a new one if necessary.</p>

<p class="NDLRefMemberFunction">void SetShader(<a href=
"NiShader.htm">NiShader</a>* pkShader)</p>

<p class="NDLRefMemberDescription">This is a legacy method for
attaching an NiSingleShaderMaterial to the render object.</p>

<p class="NDLRefMemberFunction">bool ApplyMaterial(const <a href=
"NiFixedString.htm">NiFixedString</a>&amp; kName, NiUInt32
uiMaterialExtraData = NiMaterialInstance::DEFAULT_EXTRA_DATA)</p>

<p class="NDLRefMemberDescription">Applies a material by name to
this render object and optionally adds extra data for it. Returns
true if the operation succeeded.</p>

<p class="NDLRefMemberFunction">bool ApplyMaterial(<a href=
"NiMaterial.htm">NiMaterial</a>* pkMaterial, NiUInt32
uiMaterialExtraData = NiMaterialInstance::DEFAULT_EXTRA_DATA)</p>

<p class="NDLRefMemberDescription">Applies a material to this
render object and optionally adds extra data for it. Returns true
if the operation succeeded.</p>

<p class="NDLRefMemberFunction">bool
ApplyAndSetActiveMaterial(const <a href=
"NiFixedString.htm">NiFixedString</a>&amp; kName, NiUInt32
uiMaterialExtraData = NiMaterialInstance::DEFAULT_EXTRA_DATA)</p>

<p class="NDLRefMemberDescription">Applies a material by name to
this render object, makes it the active material, and optionally
adds extra data for it. Returns true if the operation
succeeded.</p>

<p class="NDLRefMemberFunction">bool
ApplyAndSetActiveMaterial(<a href=
"NiMaterial.htm">NiMaterial</a>* pkMaterial, NiUInt32
uiMaterialExtraData = NiMaterialInstance::DEFAULT_EXTRA_DATA)</p>

<p class="NDLRefMemberDescription">Applies a material to this
render object, makes it the active material, and optionally adds
extra data for it. Returns true if the operation succeeded.</p>

<p class="NDLRefMemberFunction">bool RemoveMaterial(const
<a href="NiFixedString.htm">NiFixedString</a>&amp; kName)
const</p>

<p class="NDLRefMemberDescription">Removes a material by name.
Returns true if the removal succeeded.</p>

<p class="NDLRefMemberFunction">bool RemoveMaterial(<a href=
"NiMaterial.htm">NiMaterial</a>* pkMaterial)</p>

<p class="NDLRefMemberDescription">Removes a material from the
render object. Returns true if the removal succeeded.</p>

<p class="NDLRefMemberFunction">bool IsMaterialApplied(const
<a href="NiFixedString.htm">NiFixedString</a>&amp; kName)
const</p>

<p class="NDLRefMemberDescription">Returns true if the named
material has been applied to the render object.</p>

<p class="NDLRefMemberFunction">bool SetActiveMaterial(const
<a href="NiFixedString.htm">NiFixedString</a>&amp; kName)</p>

<p class="NDLRefMemberDescription">Sets a material by name to be
the active material on the render object. This material must have
been already attached for this to succeed. Retruns true if the
operation succeeded.</p>

<p class="NDLRefMemberFunction">bool SetActiveMaterial(const
<a href="NiMaterial.htm">NiMaterial</a>* pkMaterial)</p>

<p class="NDLRefMemberDescription">Sets a material to be the
active material on the render object. This material must have
been already attached for this to succeed. Returns</p>

<p class="NDLRefMemberFunction">const <a href=
"NiMaterial.htm">NiMaterial</a>* GetActiveMaterial() const</p>

<p class="NDLRefMemberDescription">Gets the active material.</p>

<p class="NDLRefMemberFunction">const <a href=
"NiMaterialInstance.htm">NiMaterialInstance</a>*
GetActiveMaterialInstance() const</p>

<p class="NDLRefMemberDescription">Gets the active material
instance.</p>

<p class="NDLRefMemberFunction">void SetMaterialNeedsUpdate(bool
bFlag)</p>

<p class="NDLRefMemberDescription">Sets the flag indicating that
materials for this render object need to be updated before
rendering with them.</p>

<p class="NDLRefMemberFunction">void
GetMaterialNeedsUpdateDefault() const</p>

<p class="NDLRefMemberDescription">Gets the flag of whether or
not all materials on this render object are always considered
dirty.</p>

<p class="NDLRefMemberFunction">void
SetMaterialNeedsUpdateDefault(bool bFlag)</p>

<p class="NDLRefMemberDescription">Sets the flag indicating that
the materials for this render object always needs to be updated
before rendering with them.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
