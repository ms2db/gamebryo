<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiPointShadowWriteMaterial</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiPointShadowWriteMaterial</p>

<p class="NDLRefParentage">: public <a href=
"NiStandardMaterial.htm">NiStandardMaterial</a></p>

<p class="NDLRefHeaderFile">
&lt;NiPointShadowWriteMaterial.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiPointShadowWriteMaterial</span>
is a material pipeline that is used by the shadowing system to
write to shadow maps used by point lights. This class inherits
from <a href="NiStandardMaterial.htm"><span class=
"NDLSystemFont">NiStandardMaterial</span></a> and to take
advantage of its fragment based material construction.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">
NiPointShadowWriteMaterial(<a href=
"NiMaterialNodeLibrary.htm">NiMaterialNodeLibrary</a>* pkLibrary,
bool bAutoCreateCaches = true)</p>

<p class="NDLRefMemberDescription">Create a default material
using the specified material node library. If <span class=
"NDLSystemFont">bAutoCreateCaches</span> is true, a cache is
created using the static renderer pointer.</p>

<p class="NDLRefMemberFunction">NiPointShadowWriteMaterial(const
<a href="NiFixedString.htm">NiFixedString</a>&amp; kName,
<a href="NiMaterialNodeLibrary.htm">NiMaterialNodeLibrary</a>*
pkLibrary, bool bAutoCreateCaches)</p>

<p class="NDLRefMemberDescription">This constructor creates a
default material using the specified material node library named
kName. If bAutoCreateCaches is true, a cache is created using the
static renderer pointer. Unlike the other protected constructor
which takes explicit version numbers (for derived classes that
implement their own versioning scheme), this function just uses
the shader version numbers internal to this class.</p>

<p class="NDLRefMemberFunction">NiPointShadowWriteMaterial(const
<a href="NiFixedString.htm">NiFixedString</a>&amp; kName,
<a href="NiMaterialNodeLibrary.htm">NiMaterialNodeLibrary</a>*
pkLibrary, unsigned int uiVertexVersion, unsigned int
uiGeometryVersion, unsigned int uiPixelVersion, bool
bAutoCreateCaches)</p>

<p class="NDLRefMemberDescription">This function takes the same
parameters as its parent class NiStandardMaterial. It creates a
standard material using the given node library. It names the
material kName. If bAutoCreateCaches is true, then a cache for
this type of material will be created using the static renderer
pointer. The version numbers will be stored in the cache so that
when a material is updated to a newer version, older cached
shaders will be invalidated and then regenerated.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefHead1">Protected Supported Member Functions</p>

<p class="NDLRefMemberFunction">virtual bool
GenerateDescriptor(const NiRenderObject* pkGeometry, const
NiPropertyState* pkState, const NiDynamicEffectState* pkEffects,
NiMaterialDescriptor&amp; kMaterialDesc)</p>

<p class="NDLRefMemberDescription">Inherited from
NiFragmentMaterial. Generate the descriptor object that matches
the state of this geometry. This descriptor will be a
NiStandardMaterialDescriptor object.</p>

<p class="NDLRefMemberFunction">virtual bool
GenerateVertexShadeTree(Context&amp; kContext,
NiGPUProgramDescriptor* pkDesc)</p>

<p class="NDLRefMemberDescription">This method controls the
wiring of the vertex shader material nodes.</p>

<p class="NDLRefMemberFunction">virtual bool
GeneratePixelShadeTree(Context&amp; kContext,
NiGPUProgramDescriptor* pkDesc)</p>

<p class="NDLRefMemberDescription">This method controls the
wiring of the pixel shader material nodes.</p>

<p class="NDLRefMemberFunction">virtual bool
HandleViewProjectionFragment(Context&amp; kContext, bool
bForceViewPos, NiMaterialResource* pkVertWorldPos,
NiMaterialResource*&amp; pkVertOutProjectedPos,
NiMaterialResource*&amp; pkVertOutViewPos)</p>

<p class="NDLRefMemberDescription">This method applies the view
projection matrix to the world position. If requested, this
method will generate resources for the computed view
position.</p>

<p class="NDLRefMemberFunction">virtual bool
HandleViewVectorFragment(Context&amp; kContext,
NiMaterialResource* pkWorldPos, NiMaterialResource* pkWorldNorm,
NiMaterialResource* pkWorldBinorm, NiMaterialResource*
pkWorldTangent, bool bComputeTangent, NiMaterialResource*&amp;
pkWorldViewVector, NiMaterialResource*&amp;
pkTangentViewVector)</p>

<p class="NDLRefMemberDescription">This method generates the view
vector and if requested generates the view vector in a specific
tangent space.</p>

<p class="NDLRefMemberFunction">virtual bool
SetupTransformPipeline(Context&amp; kContext, NiMaterialResource*
pkVertOutProjPos, NiStandardVertexProgramDescriptor* pkVertDesc,
bool bForceView, bool bForceViewPos, NiMaterialResource*&amp;
pkWorldPos, NiMaterialResource*&amp; pkViewPos,
NiMaterialResource*&amp; pkProjectedPos, NiMaterialResource*&amp;
pkWorldNormal, NiMaterialResource*&amp; pkWorldView)</p>

<p class="NDLRefMemberDescription">This method encapsulates the
vertex/normal/binormal/tangent pipeline. If requested, this
method will generate the world view vector.</p>

<p class="NDLRefMemberFunction">virtual ReturnCode
GenerateShaderDescArray( NiMaterialDescriptor*
pkMaterialDescriptor, RenderPassDescriptor* pkRenderPasses,
unsigned int uiMaxCount, unsigned int&amp; uiCountAdded)</p>

<p class="NDLRefMemberDescription">Inherited from
NiFragmentMaterial. By default this creates one render pass with
a NiStandardPixelProgramDescriptor and a
NiStandardVertexProgramDescriptor.</p>

<p class="NDLRefMemberFunction">virtual NiShader*
CreateShader(NiMaterialDescriptor* pkDesc)</p>

<p class="NDLRefMemberDescription">Inherited from
NiFragmentMaterial. Creates the NiShader that will be filled in
by later methods.</p>

<p class="NDLRefMemberFunction">virtual bool
SetupPackingRequirements(NiShader* pkShader,
NiMaterialDescriptor* pkMaterialDescriptor, RenderPassDescriptor*
pkRenderPasses, unsigned int uiCount)</p>

<p class="NDLRefMemberDescription">Inherited from
NiFragmentMaterial. Configures the shader's packing structures
for the requirements of this instance of the material. Note that
this method is considered deprecated, and GetVertexInputSemantics
should be used instead.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
