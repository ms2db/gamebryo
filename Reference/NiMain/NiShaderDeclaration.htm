<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiShaderDeclaration</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiShaderDeclaration</p>

<p class="NDLRefParentage">: public <a href=
"NiRefObject.htm">NiRefObject</a></p>

<p class="NDLRefHeaderFile">&lt;NiShaderDeclaration.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiShaderDeclaration</span> is the
implementation of Gamebryo Shader Declaration interface. This
class has been replaced by <span class="NDLSystemFont"><a href=
"NiSemanticAdapterTable.htm">NiSemanticAdapterTable</a></span>.</p>

<a name="ShaderParameter" id="ShaderParameter"></a><p class="NDLRefHead1">ShaderParameter Enumeration</p>

<p>The <span class="NDLSystemFont">ShaderParameter</span>
enumeration value defines what data to use for a given data
fragment.</p>

<!--(Table)=========================================================-->
<table>
    <thead>
        <tr>
            <th>Value</th>

            <th>Description (Source of data)</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><span class=
            "NDLSystemFont">SHADERPARAM_INVALID</span></td>

            <td>Internal values used to indicate an
            empty/uninitialized slot.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SHADERPARAM_NI_POSITION#</span></td>

            <td>Position data (where # is an integer from 0 to
            7)</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SHADERPARAM_NI_BLENDWEIGHT</span></td>

            <td>Skinning blend weight</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SHADERPARAM_NI_BLENDINDICES</span></td>

            <td>Skinning blend indices</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SHADERPARAM_NI_NORMAL</span></td>

            <td>Normal data</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SHADERPARAM_NI_COLOR</span></td>

            <td>Color data</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SHADERPARAM_NI_TEXCOORD#</span></td>

            <td>UV set (where # is an integer from 0 to 7)</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SHADERPARAM_NI_TANGENT</span></td>

            <td>Tangent data</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SHADERPARAM_NI_BINORMAL</span></td>

            <td>Binormal</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SHADERPARAM_NI_TRANSFORM#</span></td>

            <td>Transform (where # is an integer from 0 to
            3)</td>
        </tr>
    </tbody>
</table>

<p>Additional parameters include the following values:</p>

<!--(Table)=========================================================-->
<table>
    <thead>
        <tr>
            <th>Value</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><span class=
            "NDLSystemFont">SHADERPARAM_DATA_ZERO</span></td>

            <td>Data set to 0s</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SHADERPARAM_DATA_ONE</span></td>

            <td>Data set to 1s</td>
        </tr>
    </tbody>
</table>

<a name="ShaderParameterType" id="ShaderParameterType"></a><p class="NDLRefHead1">ShaderParameterType Enumeration</p>

<p>The <span class="NDLSystemFont">ShaderParameterType</span>
enumeration value defines how to output the data. Available
values and descriptions are shown in the following table:</p>

<!--(Table)=========================================================-->
<table>
    <thead>
        <tr>
            <th>Value</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><span class=
            "NDLSystemFont">SPTYPE_FLOAT1</span></td>

            <td>1D float (val, 0, 0, 1)</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SPTYPE_FLOAT2</span></td>

            <td>2D float (val, val, 0, 1)</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SPTYPE_FLOAT3</span></td>

            <td>3D float (val, val, val, 1)</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SPTYPE_FLOAT4</span></td>

            <td>4D float (val,val,val,val)</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SPTYPE_UBYTECOLOR</span></td>

            <td>4D packed unsigned bytes mapped to 0..1
            range</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SPTYPE_UBYTE4</span></td>

            <td>4D unsigned byte (val,val,val,val)</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SPTYPE_SHORT2</span></td>

            <td>2D signed short (val, val, 0, 1)</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SPTYPE_SHORT4</span></td>

            <td>4D signed short (val,val,val,val)</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SPTYPE_NORMUBYTE4</span></td>

            <td>4D normalized unsigned byte<br>
            <br>
            (val/255,val/255,val/255,val/255)</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SPTYPE_NORMSHORT2</span></td>

            <td>2D normalized signed short<br>
            <br>
            (val/32767, val/32767, 0, 1)</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SPTYPE_NORMSHORT4</span></td>

            <td>4D normalized signed short<br>
            <br>
            (val/32767, val/32767, val/32767, val/32767)</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SPTYPE_NORMUSHORT2</span></td>

            <td>2D normalized unsigned short<br>
            <br>
            (val/65535, val/65535, 0, 1)</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SPTYPE_NORMUSHORT4</span></td>

            <td>4D normalized unsigned short<br>
            <br>
            (val/65535, val/65535, val/65535, val/65535)</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SPTYPE_UDEC3</span></td>

            <td>3D unsigned 10-bit integers (val, val, val,
            1)</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SPTYPE_NORMDEC3</span></td>

            <td>3D normalized 10-bit integers<br>
            <br>
            (val/511, val/511, val/511, 1)</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SPTYPE_FLOAT16_2</span></td>

            <td>2D 16-bit floating point values (val, val, 0,
            1)</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SPTYPE_FLOAT16_4</span></td>

            <td>4D 16-bit floating point values (val, val, 0,
            1)</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SPTYPE_NONE</span></td>

            <td>No stream data</td>
        </tr>
    </tbody>
</table>

<a name="ShaderParameterUsage" id="ShaderParameterUsage"></a><p class="NDLRefHead1">ShaderParameterUsage Enumeration</p>

<p>The <span class="NDLSystemFont">ShaderParameterUsage</span>
enumeration value defines how the vertex element will be used.
These enumerations should not be confused with the <span class=
"NDLSystemFont">ShaderParameter</span> enumerations, which
dictate where in Gamebryo the data will come from, rather than
how the resulting data will be accessed once packed into a vertex
buffer.</p>

<!--(Table)=========================================================-->
<table>
    <thead>
        <tr>
            <th>Value</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><span class=
            "NDLSystemFont">SPUSAGE_POSITION</span></td>

            <td><span class=
            "NDLSystemFont">D3DDECLUSAGE_POSITION</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SPUSAGE_BLENDWEIGHT</span></td>

            <td><span class=
            "NDLSystemFont">D3DDECLUSAGE_BLENDWEIGHT</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SPUSAGE_BLENDINDICES</span></td>

            <td><span class=
            "NDLSystemFont">D3DDECLUSAGE_BLENDINDICES</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SPUSAGE_NORMAL</span></td>

            <td><span class=
            "NDLSystemFont">D3DDECLUSAGE_NORMAL</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SPUSAGE_PSIZE</span></td>

            <td><span class=
            "NDLSystemFont">D3DDECLUSAGE_PSIZE</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SPUSAGE_TEXCOORD</span></td>

            <td><span class=
            "NDLSystemFont">D3DDECLUSAGE_TEXCOORD</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SPUSAGE_TANGENT</span></td>

            <td><span class=
            "NDLSystemFont">D3DDECLUSAGE_TANGENT</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SPUSAGE_BINORMAL</span></td>

            <td><span class=
            "NDLSystemFont">D3DDECLUSAGE_BINORMAL</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SPUSAGE_TESSFACTOR</span></td>

            <td><span class=
            "NDLSystemFont">D3DDECLUSAGE_TESSFACTOR</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SPUSAGE_POSITIONT</span></td>

            <td><span class=
            "NDLSystemFont">D3DDECLUSAGE_POSITIONT</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SPUSAGE_COLOR</span></td>

            <td><span class=
            "NDLSystemFont">D3DDECLUSAGE_COLOR</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SPUSAGE_FOG</span></td>

            <td><span class=
            "NDLSystemFont">D3DDECLUSAGE_FOG</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SPUSAGE_DEPTH</span></td>

            <td><span class=
            "NDLSystemFont">D3DDECLUSAGE_DEPTH</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SPUSAGE_SAMPLE</span></td>

            <td><span class=
            "NDLSystemFont">D3DDECLUSAGE_SAMPLE</span></td>
        </tr>
    </tbody>
</table>

<a name="ShaderParameterTesselatorEnumerations" id="ShaderParameterTesselatorEnumerations"></a><p class="NDLRefHead1">ShaderParameterTesselator Enumeration</p>

<p>The <span class=
"NDLSystemFont">ShaderParameterTesselator</span> enumeration
value defines how the given vertex element needs to be
tessellated when using a procedural geometry routine.</p>

<!--(Table)=========================================================-->
<table>
    <thead>
        <tr>
            <th>Value</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><span class=
            "NDLSystemFont">SPTESS_DEFAULT</span></td>

            <td><span class=
            "NDLSystemFont">D3DDECLMETHOD_DEFAULT</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SPTESS_PARTIALU</span></td>

            <td><span class=
            "NDLSystemFont">D3DDECLMETHOD_PARTIALU</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SPTESS_PARTIALV</span></td>

            <td><span class=
            "NDLSystemFont">D3DDECLMETHOD_PARTIALV</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SPTESS_CROSSUV</span></td>

            <td><span class=
            "NDLSystemFont">D3DDECLMETHOD_CROSSUV</span></td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">SPTESS_UV</span></td>

            <td><span class=
            "NDLSystemFont">D3DDECLMETHOD_UV</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SPTESS_LOOKUP</span></td>

            <td><span class=
            "NDLSystemFont">D3DDECLMETHOD_LOOKUP</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SPTESS_LOOKUPPRESAMPLED</span></td>

            <td><span class=
            "NDLSystemFont">D3DDECLMETHOD_LOOKUPPRESAMPLED</span></td>
        </tr>
    </tbody>
</table>

<p class="NDLRefHead1">Static Member Functions</p>

<p class="NDLRefMemberFunction">static const NiFixedString&amp;
UsageToString(ShaderParameterUsage eUsage)</p>

<p class="NDLRefMemberFunction">static ShaderParameterUsage
StringToUsage(const NiFixedString&amp; kUsage)</p>

<p class="NDLRefMemberDescription">Converts <span class=
"NDLSystemFont">ShaderParameterUsage</span> to and from an
<span class="NDLSystemFont"><a href=
"NiFixedString.htm">NiFixedString</a></span>. This is useful in
conjunction with the <span class="NDLSystemFont">SetEntry</span>
methods when conversion is needed without accessing the global
string table.</p>

<p class="NDLRefMemberFunction">static bool
NiShaderDeclaration::ShaderParameterToSemanticAndIndex(NiShaderDeclaration::ShaderParameter
eParameter, <a href="NiFixedString.htm">NiFixedString</a>&amp;
kSemantic, unsigned int&amp; uiSemanticIndex, bool bSkinned =
false)</p>

<p class="NDLRefMemberDescription">Converts a <span class=
"NDLSystemFont">ShaderParameter</span> to a semantic string and
index value, which are returned in <span class=
"NDLSystemFont">kSemantic</span> and <span class=
"NDLSystemFont">uiSemanticIndex</span>, respectively. If the
conversion succeeds, the function returns <span class=
"NDLSystemFont">true</span>.</p>

<p class="NDLRefMemberFunction">static unsigned int
GetComponentCount(ShaderParameterType eType)</p>

<p class="NDLRefMemberDescription">Returns the number of
components in the <span class=
"NDLSystemFont">ShaderParameterType</span> that is passed in.</p>

<p class="NDLRefHead1">Supported Virtual Functions</p>

<p class="NDLRefMemberFunction">virtual bool SetEntry(unsigned
int uiStream, unsigned int uiEntry, ShaderParameter eInput,
ShaderParameterType eType, const NiFixedString&amp; kUsage,
unsigned int uiIndex, unsigned int uiExtraData)</p>

<p class="NDLRefMemberDescription">Set a data source for a stream
that is to be packed. <span class="NDLSystemFont">uiStream</span>
is the stream to pack into. <span class=
"NDLSystemFont">uiEntry</span> is the entry index, which should
be sequential as you are adding entries. <span class=
"NDLSystemFont">eInput</span> is the source of input data.
<span class="NDLSystemFont">eType</span> is the type of data
value and count. <span class="NDLSystemFont">kUsage</span> and
<span class="NDLSystemFont">uiIndex</span> are used together to
specify the semantic usage of this object, and <span class=
"NDLSystemFont">uiExtraData</span> indicates any extra data for
the element which may be used by platform specific renderers.</p>

<p class="NDLRefMemberFunction"><span class=
"NDLSystemFont">virtual bool SetEntry(unsigned int uiEntry,
ShaderParameter</span> eInput<span class="NDLSystemFont">,
ShaderParameterType eType, unsigned int uiStream = 0)</span></p>

<p class="NDLRefMemberDescription">Set a data source for a stream
that is to be packed. <span class="NDLSystemFont">uiEntry</span>
is the entry index, which should be sequential as you are adding
entries. <span class="NDLSystemFont">uiRegister</span> is the
vertex shader register to stream data into, which is unnecessary
under DX9 and therefore ignored. <span class=
"NDLSystemFont">eInput</span> is the source of input data.
<span class="NDLSystemFont">eType</span> is the type of data
value and count. <span class="NDLSystemFont">uiStream</span> is
the stream to pack into. The <span class=
"NDLSystemFont">NiShaderDeclaration</span> will fill in the
semantic usage, index, and tessellation method with appropriate
values based on the <span class="NDLSystemFont">eParam</span> and
<span class="NDLSystemFont">eType</span> parameters, but cannot
do so if the data source comes from an <span class=
"NDLSystemFont">NiAdditionalGeometryData</span> object.</p>

<p class="NDLRefMemberFunction">virtual bool RemoveEntry(unsigned
int uiEntry, unsigned int uiStream = 0)</p>

<p class="NDLRefMemberDescription">Remove the given entry,
<span class="NDLSystemFont">uiEntry</span>, from the given data
stream, <span class="NDLSystemFont">uiStream</span>.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">const ShaderRegisterEntry*
GetEntry(unsigned int uiEntry, unsigned int uiStream = 0)
const</p>

<p class="NDLRefMemberDescription">Retrieve the specified
entry.</p>

<p class="NDLRefMemberFunction">bool ClearAllEntries(unsigned int
uiStream)</p>

<p class="NDLRefMemberDescription">Completely clear all entries
for the stream, uiStream.</p>

<p class="NDLRefMemberFunction">unsigned int GetStreamCount()
const</p>

<p class="NDLRefMemberDescription">Retrieve the number of streams
for the given <span class=
"NDLSystemFont">NiShaderDeclaration</span>.</p>

<p class="NDLRefMemberFunction">unsigned int
GetEntryCount(unsigned int uiStream) const</p>

<p class="NDLRefMemberDescription">Retrieve the entry count for a
specific stream.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
