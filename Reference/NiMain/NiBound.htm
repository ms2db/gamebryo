<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiBound</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiBound</p>

<p class="NDLRefParentage">: public <a href=
"../../Reference/NiSystem/NiMemObject.htm"><span>NiMemObject</span></a></p>

<p class="NDLRefHeaderFile">&lt;NiBound.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiBound</span> represents a
3-dimensional bounding volume. Although the internal
representation may be any type of bounding volume (e.g. bounding
sphere, axis-aligned bounding box, convex polytope, etc.), there
are currently member functions to access the volume as a bounding
sphere. The bounding volume also stores a flag that the library
uses to note whether or not the bounding volume is out of date
with respect to the bound data.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiBound()</p>

<p class="NDLRefMemberDescription">Default constructor. Does not
initialize any member variables.</p>

<p class="NDLRefHead1">Static Member Functions</p>

<p class="NDLRefMemberFunction">bool TestIntersect(float fTime,
const NiBound&amp; kB0, const <a href=
"NiPoint3.htm">NiPoint3</a>&amp; kV0, const NiBound&amp; kB1,
const <a href="NiPoint3.htm">NiPoint3</a>&amp; kV1)</p>

<p class="NDLRefMemberFunction">bool FindIntersect(float fTime,
const NiBound&amp; kB0, const <a href=
"NiPoint3.htm">NiPoint3</a>&amp; kV0, const NiBound&amp; kB1,
const <a href="NiPoint3.htm">NiPoint3</a>&amp; kVv1, float&amp;
fIntrTime, <a href="NiPoint3.htm">NiPoint3</a>&amp; kIntrPt,
bool bCalcNormals, <a href=
"NiPoint3.htm">NiPoint3</a>&amp; kNormal0, <a href=
"NiPoint3.htm">NiPoint3</a>&amp; kNormal1)</p>

<p class="NDLRefMemberDescription"><span class=
"NDLSystemFont">TestIntersect</span> and <span class=
"NDLSystemFont">FindIntersect</span> check to see if two moving
bounding volumes will collide at any point in an implicit time
interval starting at time <span class="NDLSystemFont">0.0</span>,
and ending at <span class="NDLSystemFont">fTime</span>. Each
bounding volume is assumed to be at its <span class=
"NDLSystemFont">kB0</span> and <span class=
"NDLSystemFont">kB1</span> configurations respectively at the
start of the time interval in question. At the end of the time
interval in question, the two bounding volumes are assumed to be
at their initial configurations, translated by the velocity
vectors <span class="NDLSystemFont">kV0</span> and <span class=
"NDLSystemFont">kV1</span> integrated over time <span class=
"NDLSystemFont">fTime</span>, respectively. The bounding volumes
are assumed to be moving at constant linear velocities (given by
<span class="NDLSystemFont">kV0</span> and <span class=
"NDLSystemFont">kV1</span>) during the time interval. The
functions returns <span class="NDLSystemFont">true</span> if the
volumes would have collided during the implicit time interval,
and <span class="NDLSystemFont">false</span> if they had not done
so. <span class="NDLSystemFont">FindIntersect</span> also returns
the first time and point of contact between the spheres, which
are returned in <span class="NDLSystemFont">fIntrTime</span> and
<span class="NDLSystemFont">kIntrPt</span>. In addition, if
<span class="NDLSystemFont">bCalcNormals</span> is set to
<span class="NDLSystemFont">true</span>, <span class=
"NDLSystemFont">FindIntersect</span> will calculate the normals
of each bounding sphere at the point of contact, and return the
values in <span class="NDLSystemFont">kNormal0</span> and
<span class="NDLSystemFont">kNormal1</span>.</p>

<p class="NDLRefHead1">Operators</p>

<p class="NDLRefMemberFunction">NiBound&amp;
operator==(NiBound&amp; kBound)</p>

<p class="NDLRefMemberDescription">This operator is an exact
equality operator.</p>

<p class="NDLRefMemberFunction">NiBound&amp;
operator!=(NiBound&amp; kBound)</p>

<p class="NDLRefMemberDescription">This operator is an exact
inequality operator.</p>

<p class="NDLRefMemberFunction">NiBound&amp;
operator&lt;=(NiBound&amp; kBound)</p>

<p class="NDLRefMemberDescription">This operator determines
whether the right-hand bound contains or equals the left-hand
bound.</p>

<p class="NDLRefMemberFunction">NiBound&amp;
operator&gt;=(NiBound&amp; kBound)</p>

<p class="NDLRefMemberDescription">This operator determines
whether the left-hand bound contains or equals the right-hand
bound.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<a name="Attributes" id="Attributes"></a><p class="NDLRefHead2">Attributes</p>

<p class="NDLRefMemberFunction">const <a href=
"NiPoint3.htm">NiPoint3</a>&amp; GetCenter() const</p>

<p class="NDLRefMemberFunction">void SetCenter(float x, float y,
float z)</p>

<p class="NDLRefMemberFunction">void SetCenter(const <a href=
"NiPoint3.htm">NiPoint3</a>&amp; kCenter)</p>

<p class="NDLRefMemberDescription">Functions to retrieve or set
the bound center (as if it were a sphere). These functions do not
change the <span class="NDLSystemFont">NeedUpdate</span>
flag.</p>

<p class="NDLRefMemberFunction">float GetRadius() const</p>

<p class="NDLRefMemberFunction">void SetRadius(float fRadius)</p>

<p class="NDLRefMemberDescription">Functions to retrieve or set
the bound radius (as if it were a sphere). These functions do not
change the <span class="NDLSystemFont">NeedUpdate</span>
flag.</p>

<p class="NDLRefMemberFunction">void SetCenterAndRadius(const
<a href="NiPoint3.htm">NiPoint3</a>&amp; kCenter, float
fRadius)</p>

<p class="NDLRefMemberDescription">Sets the center and radius of
the bounding volume as if it were a sphere. This function clears
the <span class="NDLSystemFont">NeedUpdate</span>
flag.</p>

<a name="Updates_and_Computations" id="Updates_and_Computations"></a><p class="NDLRefHead2">Updates and Computations</p>

<p class="NDLRefMemberFunction">void ComputeFromData(int
iQuantity, const <a href="NiPoint3.htm">NiPoint3</a>* pkData)</p>

<p class="NDLRefMemberFunction">void ComputeFromData(int
iQuantity, const <a href="NiPoint4.htm">NiPoint4</a>* pkData)</p>

<p class="NDLRefMemberDescription">Computes a reasonable bounding
volume for the given array of points (whose length is given by
<span class="NDLSystemFont">iQuantity</span>). In other words,
following this call the calling bound will enclose the set of
points sent to the function. This operation clears the
<span class="NDLSystemFont">NeedUpdate</span> flag.</p>

<p class="NDLRefMemberFunction">void Update(const NiBound&amp;
kBound, const <a href="NiTransform.htm">NiTransform</a>&amp;
kXform)</p>

<p class="NDLRefMemberDescription">Applies the given set of
transforms to the calling bound. The transforms are applied
as:</p>

<div class="FigureContainer">
    <img src="images/image004.jpg" width="146" height="47" alt=
    "image004 (1K)"> 
    <!-- <p class="NDLFigureCaption">{Figure caption}</p> -->
</div>

<p class="NDLRefMemberDescription">Where C is the center, D is
the radius, R is the rotation matrix, s is the scalar scaling
value, and T is the translation vector.</p>

<p class="NDLRefMemberFunction">void ComputeMinimalBound(<a href=
"NiTPrimitiveArray.htm">NiTPrimitiveArray</a>&lt;const
NiBound*&gt;&amp; kBound)</p>

<p class="NDLRefMemberDescription">Sets the calling <span class=
"NDLSystemFont">NiBound</span> to be the (reasonably) minimal
bound of the set of <span class="NDLSystemFont">NiBound</span>
objects given in the array parameter. This operation uses
multiple calls to the <span class="NDLSystemFont">Merge</span>
function, documented below. Note that the calling bound is not
considered part of the array of objects to be bound. This
operation clears the <span class=
"NDLSystemFont">NeedUpdate</span> flag.</p>

<p class="NDLRefMemberFunction">void Merge(const NiBound*
pkBound)</p>

<p class="NDLRefMemberDescription">Sets the calling <span class=
"NDLSystemFont">NiBound</span> to contain whatever it already
contains plus the space enclosed by <span class=
"NDLSystemFont">pkBound</span>.</p>

<p class="NDLRefMemberFunction">int WhichSide(const <a href=
"NiPlane.htm">NiPlane</a>&amp; kPlane) const</p>

<p class="NDLRefMemberDescription">Returns an <span class=
"NDLSystemFont"><a href="NiPlane.htm">NiPlane</a></span>
class-local enumerated type that represents the spatial
relationship between the bound and the given <span class=
"NDLSystemFont"><a href="NiPlane.htm">NiPlane</a></span>. If the
plane intersects the given bound, the function returns
<span class="NDLSystemFont"><a href=
"NiPlane.htm">NiPlane</a></span><span class=
"NDLSystemFont">::NO_SIDE</span>; if the bound falls entirely on
the positive side of the plane, the function returns <span class=
"NDLSystemFont"><a href=
"NiPlane.htm">NiPlane</a></span><span class=
"NDLSystemFont">::POSITIVE_SIDE</span>; else (if the bound lies
entirely on the negative side of the plane), it returns
<span class="NDLSystemFont"><a href=
"NiPlane.htm">NiPlane</a></span><span class=
"NDLSystemFont">::NEGATIVE_SIDE</span>. Note that the plane's
normal should be unit length in order for this function to return
proper results. <span class="NDLSystemFont">NiPlane</span> does
not require that its normal be unit length, and this function
does not normalize it because of the negative performance
implications that would entail.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
