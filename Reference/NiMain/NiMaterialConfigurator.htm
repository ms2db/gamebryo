<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiMaterialConfigurator</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiMaterialConfigurator</p>

<p class="NDLRefParentage">: public <a href=
"NiRefObject.htm">NiRefObject</a></p>

<p class="NDLRefHeaderFile">&lt;NiMaterialConfigurator.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>This class encapsulates the platform-specific logic for
creating a shade-tree. This class is responsible for stitching
together any code fragments and wiring all inputs and outputs for
the shader program. Additionally, this class is responsible for
compiling the code into an <span class="NDLSystemFont"><a href=
"NiGPUProgram.htm">NiGPUProgram</a></span>.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiMaterialConfigurator (<a href=
"NiGPUProgramCache.htm">NiGPUProgramCache</a>* pkCache)</p>

<p class="NDLRefMemberDescription">Creates a configurator with
the appropriate program cache.</p>

<p class="NDLRefHead1">Supported Public Member Functions 
<!--kadov_tag{{<spaces>}}-->  <!--kadov_tag{{</spaces>}}--></p>

<p class="NDLRefMemberFunction">unsigned int GetNodeCount()</p>

<p class="NDLRefMemberDescription">Return the number of nodes in
the shade tree.</p>

<p class="NDLRefMemberFunction"><a href=
"NiMaterialNode.htm">NiMaterialNode</a>* GetNode(unsigned int
uiNode)</p>

<p class="NDLRefMemberDescription">Get a specific node in the
shade tree by index.</p>

<p class="NDLRefMemberFunction">void AddNode(<a href=
"NiMaterialNode.htm">NiMaterialNode</a>* pkNode)</p>

<p class="NDLRefMemberDescription">Add a specific node to the
shade tree.</p>

<p class="NDLRefMemberFunction"><a href=
"#ProgramDataInputType">ProgramDataInputType</a>
GetDataInputType();</p>

<p class="NDLRefMemberDescription">Returns the current data input
type. By default, this is <span class=
"NDLSystemFont">INPUT_STRUCT</span>. If this is an instancing
shader for Xenon, then it will be <span class=
"NDLSystemFont">INPUT_XENON_INDEX</span>.</p>

<p class="NDLRefMemberFunction">void
SetProgramDataInputType(<a href=
"#ProgramDataInputType">ProgramDataInputType</a>
eDataInputType)</p>

<p class="NDLRefMemberDescription">Sets the current data input
type.</p>

<p class="NDLRefMemberFunction">unsigned int
GetBindingCount()</p>

<p class="NDLRefMemberDescription">Get the number of resource
bindings in the shade-tree.</p>

<p class="NDLRefMemberFunction"><a href=
"NiMaterialResourceBinding.htm">NiMaterialResourceBinding</a>*
GetBinding(unsigned int uiBind)</p>

<p class="NDLRefMemberDescription">Get the resource binding at
the specified index.</p>

<p class="NDLRefMemberFunction"><a href=
"NiMaterialNode.htm">NiMaterialNode</a>*
GetNodeContainingResource(<a href=
"NiMaterialResource.htm">NiMaterialResource</a>* pkRes)</p>

<p class="NDLRefMemberDescription">Get the node that contains
this resource as an input or output.</p>

<p class="NDLRefMemberFunction"><a href=
"NiMaterialNode.htm">NiMaterialNode</a>* GetNodeByName(const
NiFixedString&amp; kName, unsigned int uiOccurance = 0)</p>

<p class="NDLRefMemberDescription">Get the n-th occurrence of a
node with the specified name.</p>

<p class="NDLRefMemberFunction">void AddBinding(<a href=
"NiMaterialResourceBinding.htm">NiMaterialResourceBinding</a>*
pkBinding)</p>

<p class="NDLRefMemberFunction">void AddBinding(<a href=
"NiMaterialResource.htm">NiMaterialResource</a>* pkOutputRes,
<a href="NiMaterialResource.htm">NiMaterialResource</a>*
pkInputRes)</p>

<p class="NDLRefMemberFunction">void AddBinding(const <a href=
"NiFixedString.htm">NiFixedString</a>&amp; kOutputVar, <a href=
"NiMaterialNode.htm">NiMaterialNode</a>* pkOutputNode, const
<a href="NiFixedString.htm">NiFixedString</a>&amp; kInputVar,
<a href="NiMaterialNode.htm">NiMaterialNode</a>* pkInputNode)</p>

<p class="NDLRefMemberFunction">void AddBinding(<a href=
"NiMaterialResource.htm">NiMaterialResource</a>* pkOutRes, const
<a href="NiFixedString.htm">NiFixedString</a>&amp; kInputVar,
<a href="NiMaterialNode.htm">NiMaterialNode</a>* pkInputNode)</p>

<p class="NDLRefMemberFunction">void AddBinding(const <a href=
"NiFixedString.htm">NiFixedString</a>&amp; kOutputVar, <a href=
"NiMaterialNode.htm">NiMaterialNode</a>* pkOutputNode, <a href=
"NiMaterialResource.htm">NiMaterialResource</a>* pkInRes)</p>

<p class="NDLRefMemberDescription">Add a binding from an output
resource to an input resource in the shade-tree.</p>

<p class="NDLRefMemberFunction">virtual void Reset()</p>

<p class="NDLRefMemberDescription">Clear the configurator of all
internal variables.</p>

<p class="NDLRefMemberFunction">virtual <a href=
"NiGPUProgram.htm">NiGPUProgram</a>* Evaluate(const char* pcName,
<a href=
"NiGPUProgram.htm#ProgramType">NiGPUProgram::ProgramType</a>
eType, <a href="NiTObjectSet.htm">NiTObjectPtrSet</a>&lt;<a href=
"NiMaterialResource.htm">NiMaterialResourcePtr</a>&gt;&amp;
kUniforms)</p>

<p class="NDLRefMemberDescription">Compile the shade-tree into a
GPU program. All resources used by the program are returned in
the set.</p>

<p class="NDLRefMemberFunction">const <a href=
"NiGPUProgramCache.htm">NiGPUProgramCache</a>*
GetGPUProgramCache() const</p>

<p class="NDLRefMemberDescription">Get the cache associated with
this configurator instance.</p>

<p class="NDLRefMemberFunction">const <a href=
"NiFixedString.htm">NiFixedString</a>&amp; GetPlatformString()
const</p>

<p class="NDLRefMemberDescription">Get the platform identifier
for this configurator instance..</p>

<p class="NDLRefMemberFunction">virtual bool CanBindTypes(const
<a href="NiFixedString.htm">NiFixedString</a>&amp; kSrcType,
const <a href="NiFixedString.htm">NiFixedString</a>&amp;
kDestType)</p>

<p class="NDLRefMemberDescription">Determine whether or not the
two resource types can be linked together.</p>

<p class="NDLRefHead1">Supported Protected Member Functions 
<!--kadov_tag{{<spaces>}}-->  <!--kadov_tag{{</spaces>}}--></p>

<p class="NDLRefMemberFunction">virtual bool CanBind(<a href=
"NiMaterialResourceBinding.htm">NiMaterialResourceBinding</a>*
pkBinding)</p>

<p class="NDLRefMemberDescription">This method determines whether
or not the given binding is possible. If the types do not match
or cannot be properly converted, the binding is deemed invalid
and false is returned.</p>

<p class="NDLRefMemberFunction"><a href=
"NiMaterialResourceBinding.htm">NiMaterialResourceBinding</a>*
GetOutputBindingForInput(<a href=
"NiMaterialResource.htm">NiMaterialResource</a>* pkRes, unsigned
int uiWhichOne = 0)</p>

<p class="NDLRefMemberDescription">This method will return the
specified output binding for a given input resource.</p>

<p class="NDLRefMemberFunction"><a href=
"NiMaterialResourceBinding.htm">NiMaterialResourceBinding</a>*
GetInputBindingForOutput(<a href=
"NiMaterialResource.htm">NiMaterialResource</a>* pkRes, unsigned
int uiWhichOne = 0)</p>

<p class="NDLRefMemberDescription">This method will return the
specified input binding for a given output resource.</p>

<p class="NDLRefMemberFunction">void
SetVariableNameForAllOutputBindings(<a href=
"NiMaterialResource.htm">NiMaterialResource</a>* pkRes, const
<a href="NiFixedString.htm">NiFixedString</a>&amp; kVariable,
bool bOverwriteExisting = true)</p>

<p class="NDLRefMemberDescription">This method will walk the
shade tree and force all output bindings for a given input
resource to be named the same variable name.</p>

<p class="NDLRefMemberFunction">void
SetVariableNameForAllInputBindings(<a href=
"NiMaterialResource.htm">NiMaterialResource</a>* pkRes, const
<a href="NiFixedString.htm">NiFixedString</a>&amp; kVariable,
bool bOverwriteExisting = true)</p>

<p class="NDLRefMemberDescription">This method will walk the
shade tree and force all input bindings for a given output
resource to be named the same variable name.</p>

<p class="NDLRefMemberFunction">NiString
GenerateXenonVFetches(NiTObjectPtrSet&lt;<a href=
"NiMaterialResource.htm">NiMaterialResourcePtr</a>&amp;
kInputs)</p>

<p class="NDLRefMemberDescription">This method generates vertex
fetch instructions on Xenon for instancing.</p>

<p class="NDLRefMemberFunction"><a href=
"NiString.htm">NiString</a> FormatVariableDeclaration(<a href=
"NiMaterialResource.htm">NiMaterialResource</a>* pkResource, bool
bAddSemanticAndLabel = true)</p>

<p class="NDLRefMemberDescription">This method will convert the
given material resource into a textual declaration of a
variable.</p>

<p class="NDLRefMemberFunction"><a href=
"NiString.htm">NiString</a> FormatType(const <a href=
"NiFixedString.htm">NiFixedString</a>&amp; kStr)</p>

<p class="NDLRefMemberDescription">This method will convert a
resource type name into this configurator's string for the
type.</p>

<p class="NDLRefMemberFunction"><a href=
"NiString.htm">NiString</a> GenerateFunctionString(<a href=
"NiMaterialFragmentNode.htm">NiMaterialFragmentNode</a>* pkNode,
const NiTObjectSet&lt;<a href=
"NiFixedString.htm">NiFixedString</a>&gt;* pkValidTargets)</p>

<p class="NDLRefMemberDescription">This method will find the
correct code text for the compile targets specified in the
fragment node. The returned string is a textual representation of
the function declaration.</p>

<p class="NDLRefMemberFunction"><a href=
"NiString.htm">NiString</a> GenerateInOutStruct(const
NiTObjectSet&lt;NiMaterialResourcePtr&gt;&amp; kInputs)</p>

<p class="NDLRefMemberDescription">This method will generate the
structure that defines the inputs or outputs of the GPU program
in text.</p>

<p class="NDLRefMemberFunction"><a href=
"NiString.htm">NiString</a> GenerateFunctionCall(<a href=
"NiMaterialFragmentNode.htm">NiMaterialFragmentNode</a>* pkNode,
unsigned int uiUniqueIdentifier)</p>

<p class="NDLRefMemberDescription">This method will generate the
text that represents a function call to the given material
fragment.</p>

<p class="NDLRefMemberFunction"><a href=
"NiString.htm">NiString</a>
GetVariableArgumentNameForCall(<a href=
"NiMaterialResource.htm">NiMaterialResource</a>* pkRes, <a href=
"NiMaterialNode.htm">NiMaterialNode</a>* pkNode, bool bIsInput,
bool bGoToStart)</p>

<p class="NDLRefMemberDescription">This method will find the
variable name for a function call input by searching through the
material bindings for this resource.</p>

<p class="NDLRefMemberFunction"><a href=
"NiString.htm">NiString</a> ResolvePassthroughVariables(<a href=
"NiMaterialResourceConsumerNode.htm">NiMaterialResourceConsumerNode</a>*
pkNode)</p>

<p class="NDLRefMemberDescription">This method will resolve any
data members from the input struct that transfer directly to the
output struct of the GPU program.</p><a name=
"ProgramDataInputType" id="ProgramDataInputType"></a>

<p class="NDLRefHead2">ProgramDataInputType</p>

<p>This enumeration determines the kind of input that a vertex
shader requires.</p>
<!--(Table)=========================================================-->

<table>
    <thead>
        <tr>
            <th>Enumeration</th>

            <th>Meaning</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><span class=
            "NDLSystemFont">INPUT_STRUCT</span></td>

            <td>Default vertex shader input.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">INPUT_XENON_INDEX</span></td>

            <td>Vertex shader input for an instancing shader on
            Xenon.</td>
        </tr>
    </tbody>
</table>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
