<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiTextureTransform</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiTextureTransform</p>

<p class="NDLRefParentage">: public <a href=
"../../Reference/NiSystem/NiMemObject.htm"><span>NiMemObject</span></a></p>

<p class="NDLRefHeaderFile">&lt;NiTextureTransform.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiTextureTransform</span>
represents a transform applied to the UV coordinates at render
time. This transform includes a translation, rotation, and a
non-uniform scale. The rotation is done about a UV center point
and about the W axis or the texture which can be constructed from
the cross product of the U and V axes. For performance reasons,
<span class="NDLSystemFont">NiTextureTransform</span> maintains
an internal <a href="NiMatrix3.htm"><span class=
"NDLSystemFont">NiMatrix3</span></a> used by the renderer so they
won't need to reconstruct the matrix for every object every
frame. In general, <span class=
"NDLSystemFont">NiTextureTransforms</span> will only be found
within a <span class="NDLSystemFont"><a href=
"NiTexturingProperty_Map.htm">NiTexturingProperty::Map</a></span>.
It is important to understand that the method for constructing a
texture transform is not well defined and is inconsistent across
art packages. For this reason, Gamebryo supports two different
transform methods, one for 3DS Max and one for Maya as described
in the notes.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiTextureTransform()</p>

<p class="NDLRefMemberDescription">Default, uninitialized null
constructor.</p>

<p class="NDLRefMemberFunction">NiTextureTransform(const <a href=
"NiPoint2.htm">NiPoint2</a>&amp; kTranslate, float fRotate, const
<a href="NiPoint2.htm">NiPoint2</a>&amp; kScale, const <a href=
"NiPoint2.htm">NiPoint2</a>&amp; kCenter, TransformMethod
eMethod)</p>

<p class="NDLRefMemberDescription">Fully qualified
constructor.</p>

<p class="NDLRefHead1">Operators</p>

<p class="NDLRefMemberFunction">bool operator==(const
NiTextureTransform &amp;xform) const</p>

<p class="NDLRefMemberDescription">Strict member-wise equality
test.</p>

<p class="NDLRefMemberFunction">bool operator!=(const
NiTextureTransform &amp;xform) const</p>

<p class="NDLRefMemberDescription">Strict member-wise inequality
test.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">const <a href=
"NiMatrix3.htm">NiMatrix3</a>* GetMatrix() const</p>

<p class="NDLRefMemberDescription">Return the 3x3 Matrix
representation of this transform. This function allows the
renderers to avoid constructing the matrix every frame. The
matrix is stored internally to the class and only recalculated
when necessary.</p>

<p class="NDLRefMemberFunction">void MakeIdentity()</p>

<p class="NDLRefMemberDescription">Convert this transform into an
equivalent identity transform.</p>

<p class="NDLRefMemberFunction"><a href=
"NiPoint2.htm">NiPoint2</a> GetTranslate() const</p>

<p class="NDLRefMemberFunction">void SetTranslate(const <a href=
"NiPoint2.htm">NiPoint2</a>&amp; kTranslate)</p>

<p class="NDLRefMemberDescription">Get and Set the UV
translation.</p>

<p class="NDLRefMemberFunction">float GetRotate() const;</p>

<p class="NDLRefMemberFunction">void SetRotate(float fRotate)</p>

<p class="NDLRefMemberDescription">Get and Set the W axis
rotation in texture space</p>

<p class="NDLRefMemberFunction"><a href=
"NiPoint2.htm">NiPoint2</a> GetScale() const</p>

<p class="NDLRefMemberFunction">void SetScale(const <a href=
"NiPoint2.htm">NiPoint2</a>&amp; kScale)</p>

<p class="NDLRefMemberDescription">Get and Set the scale
associated with this transform.</p>

<p class="NDLRefMemberFunction">TransformMethod
GetTransformMethod() const</p>

<p class="NDLRefMemberFunction">void
SetTransformMethod(TransformMethod eMethod)</p>

<p class="NDLRefMemberDescription">3DS Max scales before the
rotation while Maya scales after the rotation, so two different
transform methods have been implemented which correspond to the
behavior seen in Max (<span class=
"NDLSystemFont">MAX_TRANSFORM</span>) or Maya (<span class=
"NDLSystemFont">MAYA_TRANSFORM</span>). See the "Notes" section
for more details.</p>

<p class="NDLRefMemberFunction"><a href=
"NiPoint2.htm">NiPoint2</a> GetCenter() const</p>

<p class="NDLRefMemberFunction">void SetCenter(const <a href=
"NiPoint2.htm">NiPoint2</a>&amp; kCenter)</p>

<p class="NDLRefMemberDescription">The Center point defines the
origin around which the texture rotates.</p>

<p class="NDLRefHead1">Static Constant Instances</p>

<p class="NDLRefMemberFunction">static const NiTextureTransform
IDENTITY</p>

<p class="NDLRefMemberDescription">The default instance of a
texture transform. Translation and rotation are set to zero.
Scale is set to 1.0f. The center point is set to <span class=
"NDLSystemFont">NiPoint2(0.5f, 0.5f)</span>.</p>

<p class="NDLRefHead1">Notes</p>

<p class="NDLRefHead2">TransformMethod</p>

<p>The TransformMethod enumeration has two values, <span class=
"NDLSystemFont">MAX_TRANSFORM</span> or <span class=
"NDLSystemFont">MAYA_TRANSFORM</span> as described below. Each
value constructs the final transform from a series of components
in a specific order. This order varies between art packages.</p>

<p class="NDLRefHead2">Components of the Transform</p>

<p><span class="NDLSystemFont"><a href=
"NiMatrix3.htm">NiMatrix3</a></span> Translate = translation
applied to UV coordinate</p>

<p><span class="NDLSystemFont"><a href=
"NiMatrix3.htm">NiMatrix3</a></span> Rotation = rotation about
the w axis</p>

<p><span class="NDLSystemFont"><a href=
"NiMatrix3.htm">NiMatrix3</a></span> Scale = scale applied to the
UV coordinate</p>

<p><span class="NDLSystemFont"><a href=
"NiMatrix3.htm">NiMatrix3</a></span> Center = translation to the
center of rotation for the texture</p>

<p><span class="NDLSystemFont"><a href=
"NiMatrix3.htm">NiMatrix3</a></span> Back = inverse of the Center
translation</p>

<p><span class="NDLSystemFont"><a href=
"NiMatrix3.htm">NiMatrix3</a></span> FromMaya = inverse of the V
axis with a positive translation along V of 1 unit.</p>

<p class="NDLRefHead2">Maya Transform Method (<span class=
"NDLSystemFont">MAYA_TRANSFORM_DEPRECATED</span> enumerated
value)</p>

<p><span class="NDLSystemFont"><a href=
"NiMatrix3.htm">NiMatrix3</a></span> Final = Center * Rotation *
Back * Translate * Scale</p>

<p class="NDLRefHead2">3DS Max Transform Method (<span class=
"NDLSystemFont">MAX_TRANSFORM</span> enumerated value)</p>

<p><span class="NDLSystemFont"><a href=
"NiMatrix3.htm">NiMatrix3</a></span> Final = Center * Scale *
Rotation * Translate * Back</p>

<p class="NDLRefHead2">Maya Transform Method (<span class=
"NDLSystemFont">MAYA_TRANSFORM</span> enumerated value)</p>

<p><span class="NDLSystemFont"><a href=
"NiMatrix3.htm">NiMatrix3</a></span> Final = Center * Rotation *
Back * FromMaya * Translate * Scale</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
