<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiShaderConstantMap</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiShaderConstantMap</p>

<p class="NDLRefParentage">: public <a href=
"NiRefObject.htm">NiRefObject</a></p>

<p class="NDLRefHeaderFile">&lt;NiShaderConstantMap.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>This class is the base class for platform-specific objects
that map shader constants in GPU programs to their source data.
Many common variables are pre-defined using the <a href=
"NiShaderConstantMap.htm#DefinedMappings"><span class=
"NDLSystemFont">DefinedMappings</span></a> enumeration and the
<a href="NiShaderConstantMap.htm#ObjectMappings"><span class=
"NDLSystemFont">ObjectMappings</span></a> enumerations. <a href=
"NiShaderConstantMap.htm#DefinedMappings"><span class=
"NDLSystemFont">DefinedMappings</span></a> are pre-defined
mappings that go to common renderer variables, properties, or
geometry values. <a href=
"NiShaderConstantMap.htm#ObjectMappings"><span class=
"NDLSystemFont">ObjectMappings</span></a> are pre-defined
mappings that go to external objects in the scene graph that
affect the rendering of an object, like <a href=
"NiLight.htm"><span class="NDLSystemFont">NiLights</span></a> or
<a href="NiTextureEffect.htm"><span class=
"NDLSystemFont">NiTextureEffects</span></a>.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiShaderConstantMap(<a href=
"NiGPUProgram.htm#ProgramType">NiGPUProgram::ProgramType</a>
eType)</p>

<p class="NDLRefMemberDescription">This constructor creates a
shader constant map for the specified type of GPU program.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">const <a href=
"NiGPUProgram.htm#ProgramType">NiGPUProgram::ProgramType</a>
GetProgramType()</p>

<p class="NDLRefMemberDescription">Returns the GPU program type
this constant map uses.</p>

<p class="NDLRefMemberFunction">virtual <a href=
"NiShaderError.htm">NiShaderError</a> AddEntry(const char*
pszKey, unsigned int uiFlags,unsigned int uiExtra, unsigned int
uiShaderRegister, unsigned int uiRegisterCount, const char*
pszVariableName = NULL, unsigned int uiDataSize = 0, unsigned int
uiDataStride = 0, const void* pvDataSource = NULL, bool bCopyData
= false)</p>

<p class="NDLRefMemberDescription">Creates an entry in the map
with the given parameters. If <span class=
"NDLSystemFont">pszVariableName</span> is <span class=
"NDLSystemFont">NULL</span>, and the shader program is in a
format (such as the DirectX HLSL) that uses names for variables
instead of registers, then the name passed into <span class=
"NDLSystemFont">pszKey</span> will be used as the variable
name.</p>

<p class="NDLRefMemberFunction">virtual <a href=
"NiShaderError.htm">NiShaderError</a> AddPredefinedEntry(const
char* pszKey, unsigned int uiExtra, unsigned int
uiShaderRegister, const char* pszVariableName)</p>

<p class="NDLRefMemberDescription">Creates an entry of the
predefined value type with the given parameters.</p>

<p class="NDLRefMemberFunction">virtual <a href=
"NiShaderError.htm">NiShaderError</a> AddAttributeEntry(const
char* pszKey, unsigned int uiFlags, unsigned int uiExtra,
unsigned int uiShaderRegister, unsigned int uiRegisterCount,
const char* pszVariableName, unsigned int uiDataSize, unsigned
int uiDataStride, const void* pvDataSource, bool bCopyData =
true)</p>

<p class="NDLRefMemberDescription">Creates an entry of the
extra-data value type with the given parameters.</p>

<p class="NDLRefMemberFunction">virtual <a href=
"NiShaderError.htm">NiShaderError</a> AddConstantEntry(const
char* pszKey, unsigned int uiFlags, unsigned int uiExtra,
unsigned int uiShaderRegister, unsigned int uiRegisterCount,
const char* pszVariableName, unsigned int uiDataSize, unsigned
int uiDataStride, const void* pvDataSource, bool bCopyData =
true)</p>

<p class="NDLRefMemberDescription">Creates an entry of the
constant value type with the given parameters.</p>

<p class="NDLRefMemberFunction">virtual <a href=
"NiShaderError.htm">NiShaderError</a> AddGlobalEntry(const char*
pszKey, unsigned int uiFlags, unsigned int uiExtra, unsigned int
uiShaderRegister, unsigned int uiRegisterCount, const char*
pszVariableName, unsigned int uiDataSize, unsigned int
uiDataStride, const void* pvDataSource, bool bCopyData =
false)</p>

<p class="NDLRefMemberDescription">Creates an entry of the global
value type with the given parameters. The function assumes the
entry has been registered with the shader factory via a call to
<span class="NDLSystemFont"><a href=
"NiShaderFactory.htm">NiShaderFactory</a>::RegisterGlobalShaderConstant</span>
or equivalent method..</p>

<p class="NDLRefMemberFunction">virtual <a href=
"NiShaderError.htm">NiShaderError</a> AddOperatorEntry(const
char* pszKey, unsigned int uiFlags, unsigned int uiExtra,
unsigned int uiShaderRegister, unsigned int uiRegisterCount,
const char* pszVariableName)</p>

<p class="NDLRefMemberDescription">Creates an entry of the
operator value type with the given parameters. The function
assumes the <span class="NDLSystemFont">uiExtra</span> parameter has been
setup properly to indicate the operator, and the two entry
indices to perform it on.</p>

<p class="NDLRefMemberFunction">virtual <a href=
"NiShaderError.htm">NiShaderError</a> AddObjectEntry(const char*
pszKey, unsigned int uiShaderRegister, const char*
pszVariableName, unsigned int uiObjectIndex, <a href=
"NiShaderAttributeDesc.htm#ObjectType_Enumerations">NiShaderAttributeDesc::ObjectType</a>
eObjectType, unsigned int uiCount)</p>

<p class="NDLRefMemberDescription">Creates an entry of the object
value type with the given parameters.</p>

<p class="NDLRefHead1">Notes</p>

<a name="DefinedMappings" id="DefinedMappings"></a><p class="NDLRefHead2">DefinedMappings</p>

<p>Pre-defined mappings help bind shader
constants in GPU programs to common variables in the rendering
pipeline. The supplied common mappings are:</p>

<!--(Table)=========================================================-->
<table>
    <thead>
        <tr>
            <th>Enumeration</th>

            <th>String Mappings</th>

            <th>Meaning</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_INVALID</span></td>

            <td><span class="NDLSystemFont">"Invalid"</span></td>

            <td>Indicates an error</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_PROJ</span></td>

            <td><span class="NDLSystemFont">"Proj",
            "Projection"</span></td>

            <td>The camera's projection matrix</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_INVPROJ</span></td>

            <td><span class="NDLSystemFont">"InvProj",
            "InvProjection"</span></td>

            <td>Inverse of above</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_VIEW</span></td>

            <td><span class="NDLSystemFont">"View"</span></td>

            <td>The camera's view matrix</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_INVVIEW</span></td>

            <td><span class="NDLSystemFont">"InvView"</span></td>

            <td>Inverse of above</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_WORLD</span></td>

            <td><span class="NDLSystemFont">"World"</span></td>

            <td>The world transform of the object</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_INVWORLD</span></td>

            <td><span class=
            "NDLSystemFont">"InvWorld"</span></td>

            <td>Inverse of above</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_WORLDVIEW</span></td>

            <td><span class=
            "NDLSystemFont">"WorldView"</span></td>

            <td>The world transform multiplied by the camera's
            view matrix</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_INVWORLDVIEW</span></td>

            <td><span class=
            "NDLSystemFont">"InvWorldView"</span></td>

            <td>Inverse of above</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_VIEWPROJ</span></td>

            <td><span class="NDLSystemFont">"ViewProj",
            "ViewProjection"</span></td>

            <td>The camera's view and projection matrices
            multiplied</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_INVVIEWPROJ</span></td>

            <td><span class="NDLSystemFont">"InvViewProj",
            "InvViewProjection"</span></td>

            <td>Inverse of above</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_WORLDVIEWPROJ</span></td>

            <td><span class="NDLSystemFont">"WorldViewProj",
            "WorldViewProjection"</span></td>

            <td>The world transform * camera view matrix * camera
            projection matrix</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_INVWORLDVIEWPROJ</span></td>

            <td><span class=
            "NDLSystemFont">"InvWorldViewProj"</span></td>

            <td>Inverse of above</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_PROJ_T</span></td>

            <td><span class="NDLSystemFont">"ProjTranspose",
            "ProjectionTranspose"</span></td>

            <td>Transpose of projection</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_INVPROJ_T</span></td>

            <td><span class="NDLSystemFont">"InvProjTranspose",
            "InvProjectionTranspose"</span></td>

            <td>Inverse transpose of projection</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_VIEW_T</span></td>

            <td><span class=
            "NDLSystemFont">"ViewTranspose"</span></td>

            <td>Transpose of view</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_INVVIEW_T</span></td>

            <td><span class=
            "NDLSystemFont">"InvViewTranspose"</span></td>

            <td>Inverse transpose of view</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_WORLD_T</span></td>

            <td><span class=
            "NDLSystemFont">"WorldTranspose"</span></td>

            <td>Transpose of world transform</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_INVWORLD_T</span></td>

            <td><span class=
            "NDLSystemFont">"InvWorldTranspose"</span></td>

            <td>Inverse transpose of world transform</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_WORLDVIEW_T</span></td>

            <td><span class=
            "NDLSystemFont">"WorldViewTranspose"</span></td>

            <td>Transpose of world * view</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_INVWORLDVIEW_T</span></td>

            <td><span class=
            "NDLSystemFont">"InvWorldViewTranspose"</span></td>

            <td>Inverse transpose of world * view</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_VIEWPROJ_T</span></td>

            <td><span class="NDLSystemFont">"ViewProjTranspose",
            "ViewProjectionTranspose"</span></td>

            <td>Transpose of view * projection</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_INVVIEWPROJ_T</span></td>

            <td><span class=
            "NDLSystemFont">"InvViewProjTranspose",
            "InvViewProjectionTranspose"</span></td>

            <td>Inverse transpose of view * projection</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_WORLDVIEWPROJ_T</span></td>

            <td><span class=
            "NDLSystemFont">"WorldViewProjTranspose",
            "WorldViewProjectionTranspose"</span></td>

            <td>Transpose of world * view * projection</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_INVWORLDVIEWPROJ_T</span></td>

            <td><span class=
            "NDLSystemFont">"InvWorldViewProjTranspose",
            "InvWorldViewProjectionTranspose"</span></td>

            <td>Inverse transpose of world * view *
            projection</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_SKINBONE_MATRIX_3</span></td>

            <td><span class=
            "NDLSystemFont">"SkinBoneMatrix3"</span></td>

            <td>Skin to world * bone work transform
            (float4x3).</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_TEXTRANSFORMBASE</span></td>

            <td><span class=
            "NDLSystemFont">"TexTransformBase"</span></td>

            <td>Texture transform of base map</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_INVTEXTRANSFORMBASE</span></td>

            <td><span class=
            "NDLSystemFont">"InvTexTransformBase"</span></td>

            <td>Inverse of above. Note that this matrix is likely
            too sparse to be invertible.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_TEXTRANSFORMBASE_T</span></td>

            <td><span class=
            "NDLSystemFont">"TexTransformBaseTranspose"</span></td>

            <td>Transpose of above.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_INVTEXTRANSFORMBASE_T</span></td>

            <td><span class=
            "NDLSystemFont">"InvTexTransformBaseTranspose"</span></td>

            <td>Inverse transpose of above. Note that this matrix
            is likely too sparse to be invertible.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_TEXTRANSFORMDARK</span></td>

            <td><span class=
            "NDLSystemFont">"TexTransformDark"</span></td>

            <td>Texture transform of dark map</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_INVTEXTRANSFORMDARK</span></td>

            <td><span class=
            "NDLSystemFont">"InvTexTransformDark"</span></td>

            <td>Inverse of above. Note that this matrix is likely
            too sparse to be invertible.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_TEXTRANSFORMDARK_T</span></td>

            <td><span class=
            "NDLSystemFont">"TexTransformDarkTranspose"</span></td>

            <td>Transpose of above</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_INVTEXTRANSFORMDARK_T</span></td>

            <td><span class=
            "NDLSystemFont">"InvTexTransformDarkTranspose"</span></td>

            <td>Inverse transpose of above. Note that this matrix
            is likely too sparse to be invertible.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_TEXTRANSFORMDETAIL</span></td>

            <td><span class=
            "NDLSystemFont">"TexTransformDetail"</span></td>

            <td>Texture transform of detail map</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_INVTEXTRANSFORMDETAIL</span></td>

            <td><span class=
            "NDLSystemFont">"InvTexTransformDetail"</span></td>

            <td>Inverse of above. Note that this matrix is likely
            too sparse to be invertible.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_TEXTRANSFORMDETAIL_T</span></td>

            <td><span class=
            "NDLSystemFont">"TexTransformDetailTranspose"</span></td>

            <td>Transpose of above</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_INVTEXTRANSFORMDETAIL_T</span></td>

            <td><span class=
            "NDLSystemFont">"InvTexTransformDetailTranspose"</span></td>

            <td>Inverse transpose of above. Note that this matrix
            is likely too sparse to be invertible.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_TEXTRANSFORMGLOSS</span></td>

            <td><span class=
            "NDLSystemFont">"TexTransformGloss"</span></td>

            <td>Texture transform of gloss map</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_INVTEXTRANSFORMGLOSS</span></td>

            <td><span class=
            "NDLSystemFont">"InvTexTransformGloss"</span></td>

            <td>Inverse of above Note that this matrix is likely
            too sparse to be invertible.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_TEXTRANSFORMGLOSS_T</span></td>

            <td><span class=
            "NDLSystemFont">"TexTransformGlossTranspose"</span></td>

            <td>Transpose of above</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_INVTEXTRANSFORMGLOSS_T</span></td>

            <td><span class=
            "NDLSystemFont">"InvTexTransformGlossTranspose"</span></td>

            <td>Inverse transpose of above. Note that this matrix
            is likely too sparse to be invertible.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_TEXTRANSFORMGLOW</span></td>

            <td><span class=
            "NDLSystemFont">"TexTransformGlow"</span></td>

            <td>Texture transform of glow map</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_INVTEXTRANSFORMGLOW</span></td>

            <td><span class=
            "NDLSystemFont">"InvTexTransformGlow"</span></td>

            <td>Inverse of above Note that this matrix is likely
            too sparse to be invertible.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_TEXTRANSFORMGLOW_T</span></td>

            <td><span class=
            "NDLSystemFont">"TexTransformGlowTranspose"</span></td>

            <td>Transpose of above</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_INVTEXTRANSFORMGLOW_T</span></td>

            <td><span class=
            "NDLSystemFont">"InvTexTransformGlowTranspose"</span></td>

            <td>Inverse transpose of above. Note that this matrix
            is likely too sparse to be invertible.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_TEXTRANSFORMBUMP</span></td>

            <td><span class=
            "NDLSystemFont">"TexTransformBump"</span></td>

            <td>Texture transform of bump map</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_INVTEXTRANSFORMBUMP</span></td>

            <td><span class=
            "NDLSystemFont">"InvTexTransformBump"</span></td>

            <td>Inverse of above Note that this matrix is likely
            too sparse to be invertible.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_TEXTRANSFORMBUMP_T</span></td>

            <td><span class=
            "NDLSystemFont">"TexTransformBumpTranspose"</span></td>

            <td>Transpose of above</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_INVTEXTRANSFORMBUMP_T</span></td>

            <td><span class=
            "NDLSystemFont">"InvTexTransformBumpTranspose"</span></td>

            <td>Inverse transpose of above. Note that this matrix
            is likely too sparse to be invertible.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_TEXTRANSFORMDECAL</span></td>

            <td><span class=
            "NDLSystemFont">"TexTransformDecal"</span></td>

            <td>Texture transform of decal map</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_INVTEXTRANSFORMDECAL</span></td>

            <td><span class=
            "NDLSystemFont">"InvTexTransformDecal"</span></td>

            <td>Inverse of above Note that this matrix is likely
            too sparse to be invertible.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_TEXTRANSFORMDECAL_T</span></td>

            <td><span class=
            "NDLSystemFont">"TexTransformDecalTranspose"</span></td>

            <td>Transpose of above</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_INVTEXTRANSFORMDECAL_T</span></td>

            <td><span class=
            "NDLSystemFont">"InvTexTransformDecalTranspose"</span></td>

            <td>Inverse transpose of above. Note that this matrix
            is likely too sparse to be invertible.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_TEXTRANSFORMSHADER</span></td>

            <td><span class=
            "NDLSystemFont">"TexTransformShader"</span></td>

            <td>Texture transform of shader map</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_INVTEXTRANSFORMSHADER</span></td>

            <td><span class=
            "NDLSystemFont">"InvTexTransformShader"</span></td>

            <td>Inverse of above Note that this matrix is likely
            too sparse to be invertible.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_TEXTRANSFORMSHADER_T</span></td>

            <td><span class=
            "NDLSystemFont">"TexTransformShaderTranspose"</span></td>

            <td>Transpose of above</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_INVTEXTRANSFORMSHADER_T</span></td>

            <td><span class=
            "NDLSystemFont">"InvTexTransformShaderTranspose"</span></td>

            <td>Inverse transpose of above. Note that this matrix
            is likely too sparse to be invertible.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_LIGHT_POS_WS</span></td>

            <td><span class=
            "NDLSystemFont">"LightPosWS"</span></td>

            <td>Deprecated. Do not use. Use ObjectMapping
            instead.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_LIGHT_DIR_WS</span></td>

            <td><span class=
            "NDLSystemFont">"LightDirWS"</span></td>

            <td>Deprecated. Do not use. Use ObjectMapping
            instead.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_LIGHT_POS_OS</span></td>

            <td><span class=
            "NDLSystemFont">"LightPosOS"</span></td>

            <td>Deprecated. Do not use. Use ObjectMapping
            instead.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_LIGHT_DIR_OS</span></td>

            <td><span class=
            "NDLSystemFont">"LightDirOS"</span></td>

            <td>Deprecated. Do not use 
            <!--kadov_tag{{<spaces>}}--> 
            <!--kadov_tag{{</spaces>}}-->Use ObjectMapping
            instead.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_MATERIAL_DIFFUSE</span></td>

            <td><span class="NDLSystemFont">"MaterialDiffuse",
            "Diffuse"</span></td>

            <td>Material property diffuse color</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_MATERIAL_AMBIENT</span></td>

            <td><span class="NDLSystemFont">"MaterialAmbient",
            "Ambient"</span></td>

            <td>Material property ambient color</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_MATERIAL_SPECULAR</span></td>

            <td><span class="NDLSystemFont">"MaterialSpecular",
            "Specular"</span></td>

            <td>Material property specular color</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_MATERIAL_EMISSIVE</span></td>

            <td><span class=
            "NDLSystemFont">"MaterialEmissive"</span></td>

            <td>Material property emissive color</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_MATERIAL_POWER</span></td>

            <td><span class="NDLSystemFont">"MaterialPower",
            "SpecularPower"</span></td>

            <td>Material property specular power (aka
            Glossiness)</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_EYE_POS</span></td>

            <td><span class="NDLSystemFont">"EyePos"</span></td>

            <td>Position of the eye in world-space</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_EYE_DIR</span></td>

            <td><span class="NDLSystemFont">"EyeDir"</span></td>

            <td>Direction vector of eye in world-space</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_CONSTS_TAYLOR_SIN</span></td>

            <td><span class=
            "NDLSystemFont">"TaylorSin"</span></td>

            <td>Coefficients for taylor series of sin</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_CONSTS_TAYLOR_COS</span></td>

            <td><span class=
            "NDLSystemFont">"TaylorCos"</span></td>

            <td>Coefficients for taylor series of cos</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_CONSTS_TIME</span></td>

            <td><span class="NDLSystemFont">"time"</span></td>

            <td>Time from "NDL_UpdateTime" extra data</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_CONSTS_SINTIME</span></td>

            <td><span class=
            "NDLSystemFont">"sin_time"</span></td>

            <td>sin of above</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_CONSTS_COSTIME</span></td>

            <td><span class=
            "NDLSystemFont">"cos_time"</span></td>

            <td>cos of above</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_CONSTS_TANTIME</span></td>

            <td><span class=
            "NDLSystemFont">"tan_time"</span></td>

            <td>tan of above</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_CONSTS_TIME_SINTIME_COSTIME_TANTIME</span></td>

            <td><span class=
            "NDLSystemFont">"time_sin_cos_tan"</span></td>

            <td>vector4 (time, sin_time, cos_time, tan_time)</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_AMBIENTLIGHT</span></td>

            <td><span class=
            "NDLSystemFont">"AmbientLight"</span></td>

            <td>Ambient light color</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_TEXTRANSFORMNORMAL</span></td>

            <td><span class=
            "NDLSystemFont">"TexTransformNormal"</span></td>

            <td>Texture transform for normal map.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_INVTEXTRANSFORMNORMAL</span></td>

            <td><span class=
            "NDLSystemFont">"InvTexTransformNormal"</span></td>

            <td>Inverse of above. Note that this matrix is likely
            too sparse to be invertible.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_TEXTRANSFORMNORMAL_T</span></td>

            <td><span class=
            "NDLSystemFont">"TexTransformNormalTranspose"</span></td>

            <td>Transpose of above.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_INVTEXTRANSFORMNORMAL_T</span></td>

            <td><span class=
            "NDLSystemFont">"InvTexTransformNormalTranspose"</span></td>

            <td>Inverse transpose of above. Note that this matrix
            is likely too sparse to be invertible.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_TEXTRANSFORMPARALLAX</span></td>

            <td><span class=
            "NDLSystemFont">"TexTransformParallax"</span></td>

            <td>Texture transform for parallax map.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_INVTEXTRANSFORMPARALLAX</span></td>

            <td><span class=
            "NDLSystemFont">"InvTexTransformParallax"</span></td>

            <td>Inverse of above. Note that this matrix is likely
            too sparse to be invertible.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_TEXTRANSFORMPARALLAX_T</span></td>

            <td><span class=
            "NDLSystemFont">"TexTransformParallaxTranspose"</span></td>

            <td>Transpose of above.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_INVTEXTRANSFORMPARALLAX_T</span></td>

            <td><span class=
            "NDLSystemFont">"InvTexTransformParallaxTranspose"</span></td>

            <td>Inverse transpose of above. Note that this matrix
            is likely too sparse to be invertible.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_FOG_DENSITY</span></td>

            <td><span class=
            "NDLSystemFont">"FogDensity"</span></td>

            <td>Fog density</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_FOG_NEARFAR</span></td>

            <td><span class=
            "NDLSystemFont">"FogNearFar"</span></td>

            <td>Fog near/far</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_FOG_COLOR</span></td>

            <td><span class=
            "NDLSystemFont">"FogColor"</span></td>

            <td>Fog color</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_BUMP_MATRIX</span></td>

            <td><span class=
            "NDLSystemFont">"BumpMatrix"</span></td>

            <td>Bump matrix</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_BUMP_LUMA_OFFSET_AND_SCALE</span></td>

            <td><span class=
            "NDLSystemFont">"BumpLumaAndScale"</span></td>

            <td>Bump luma offset and scale</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_PARALLAX_OFFSET</span></td>

            <td><span class=
            "NDLSystemFont">"ParallaxOffset"</span></td>

            <td>Parallax offset</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_TEXSIZEBASE</span></td>

            <td><span class=
            "NDLSystemFont">"TexSizeBase"</span></td>

            <td>Base map dimensions</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_TEXSIZEDARK</span></td>

            <td><span class=
            "NDLSystemFont">"TexSizeDark"</span></td>

            <td>Dark map dimensions</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_TEXSIZEDETAIL</span></td>

            <td><span class=
            "NDLSystemFont">"TexSizeDetail"</span></td>

            <td>Detail map dimensions</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_TEXSIZEGLOSS</span></td>

            <td><span class=
            "NDLSystemFont">"TexSizeGloss"</span></td>

            <td>Gloss map dimensions</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_TEXSIZEGLOW</span></td>

            <td><span class=
            "NDLSystemFont">"TexSizeGlow"</span></td>

            <td>Glow map dimensions</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_TEXSIZEBUMP</span></td>

            <td><span class=
            "NDLSystemFont">"TexSizeBump"</span></td>

            <td>Bump map dimensions</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_TEXSIZENORMAL</span></td>

            <td><span class=
            "NDLSystemFont">"TexSizeNormal"</span></td>

            <td>Normal map dimensions</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_TEXSIZEPARALLAX</span></td>

            <td><span class=
            "NDLSystemFont">"TexSizeParallax"</span></td>

            <td>Parallax map dimensions</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_TEXSIZEDECAL</span></td>

            <td><span class=
            "NDLSystemFont">"TexSizeDecal"</span></td>

            <td>Decal map dimensions</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_TEXSIZESHADER</span></td>

            <td><span class=
            "NDLSystemFont">"TexSizeShader"</span></td>

            <td>Shader map dimensions</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_ALPHA_TEST_FUNC</span></td>

            <td><span class=
            "NDLSystemFont">"AlphaTestFunction"</span></td>

            <td><span class=
            "NDLSystemFont">NiAlphaProperty::TestMode</span>
            enumeration for current <span class=
            "NDLSystemFont"><a href=
            "NiAlphaProperty.htm">NiAlphaProperty</a></span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_DEF_ALPHA_TEST_REF</span></td>

            <td><span class=
            "NDLSystemFont">"AlphaTestRef"</span></td>

            <td>Alpha test reference value from current
            <span class="NDLSystemFont"><a href=
            "NiAlphaProperty.htm">NiAlphaProperty</a></span></td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">SCM_DEF_XENON_INST_FREQUENCY</span>
            </td>

            <td><span class="NDLSystemFont">"XenonInstanceFrequency"</span>
            </td>

            <td>The number of indices per instance. Used for
            instancing on Xenon.</td>
        </tr>
    </tbody>
</table>

<a name="ObjectMappings" id="ObjectMappings"></a><p class="NDLRefHead2">ObjectMappings</p>

<p>Pre-defined object mappings help bind shader constants in GPU
programs to common variables on externally referenced objects
like lights or other <a href="NiDynamicEffect.htm"><span class=
"NDLSystemFont">NiDynamicEffects</span></a>. The supplied common
mappings are:</p>

<!--(Table)=========================================================-->
<table>
    <thead>
        <tr>
            <th>Enumeration</th>

            <th>String Mappings</th>

            <th>Meaning</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><span class=
            "NDLSystemFont">SCM_OBJ_INVALID</span></td>

            <td><span class="NDLSystemFont">"Invalid"</span></td>

            <td>Indicates an error</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_OBJ_DIMMER</span></td>

            <td><span class="NDLSystemFont">"Dimmer"</span></td>

            <td>Light multiplier value</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_OBJ_UNDIMMEDAMBIENT</span></td>

            <td><span class=
            "NDLSystemFont">"UndimmedAmbient"</span></td>

            <td>Light ambient color, without multiplier</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_OBJ_UNDIMMEDDIFFUSE</span></td>

            <td><span class=
            "NDLSystemFont">"UndimmedDiffuse"</span></td>

            <td>Light diffuse color, without multiplier</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_OBJ_UNDIMMEDSPECULAR</span></td>

            <td><span class=
            "NDLSystemFont">"UndimmedSpecular"</span></td>

            <td>Light specular color, without multiplier</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_OBJ_AMBIENT</span></td>

            <td><span class="NDLSystemFont">"Ambient"</span></td>

            <td>Light ambient color, with multiplier</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_OBJ_DIFFUSE</span></td>

            <td><span class="NDLSystemFont">"Diffuse"</span></td>

            <td>Light diffuse color, with multiplier</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_OBJ_SPECULAR</span></td>

            <td><span class=
            "NDLSystemFont">"Specular"</span></td>

            <td>Light specular color, with multiplier</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_OBJ_WORLDPOSITION</span></td>

            <td><span class=
            "NDLSystemFont">"WorldPosition"</span></td>

            <td>World position</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_OBJ_MODELPOSITION</span></td>

            <td><span class=
            "NDLSystemFont">"ModelPosition"</span></td>

            <td>Model-space position</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_OBJ_WORLDDIRECTION</span></td>

            <td><span class=
            "NDLSystemFont">"WorldDirection"</span></td>

            <td>World direction vector</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_OBJ_MODELDIRECTION</span></td>

            <td><span class=
            "NDLSystemFont">"ModelDirection"</span></td>

            <td>Model-space direction vector</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_OBJ_WORLDTRANSFORM</span></td>

            <td><span class=
            "NDLSystemFont">"WorldTransform"</span></td>

            <td>World transform</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_OBJ_MODELTRANSFORM</span></td>

            <td><span class=
            "NDLSystemFont">"ModelTransform"</span></td>

            <td>Model-space transform</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_OBJ_SPOTATTENUATION</span></td>

            <td><span class=
            "NDLSystemFont">"SpotAttenuation"</span></td>

            <td>Vector 4 (Inner spot half-angle in radians, Outer
            spot half-angle in radians, spot exponent, 0.0f)</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_OBJ_ATTENUATION</span></td>

            <td><span class=
            "NDLSystemFont">"Attenuation"</span></td>

            <td>Vector 4(constant attenuation, linear
            attenuation, quadratic attenuation)</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_OBJ_WORLDPROJECTIONMATRIX</span></td>

            <td><span class=
            "NDLSystemFont">"WorldProjectionMatrix"</span></td>

            <td>World projection matrix</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_OBJ_MODELPROJECTIONMATRIX</span></td>

            <td><span class=
            "NDLSystemFont">"ModelProjectionMatrix"</span></td>

            <td>Model projection matrix</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_OBJ_WORLDPROJECTIONTRANSLATION</span></td>

            <td><span class=
            "NDLSystemFont">"WorldProjectionTranslation"</span></td>

            <td>World projection translation</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_OBJ_MODELPROJECTIONTRANSLATION</span></td>

            <td><span class=
            "NDLSystemFont">"ModelProjectionTranslation"</span></td>

            <td>Model projection translation</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_OBJ_WORLDCLIPPINGPLANE</span></td>

            <td><span class=
            "NDLSystemFont">"WorldClippingPlane"</span></td>

            <td>World clipping plane</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_OBJ_MODELCLIPPINGPLANE</span></td>

            <td><span class=
            "NDLSystemFont">"ModelClippingPlane"</span></td>

            <td>Model clipping plane</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_OBJ_TEXCOORDGEN</span></td>

            <td><span class=
            "NDLSystemFont">"TexCoordGen"</span></td>

            <td>1 = Camera space normal, 2 = camera space
            position, 3 = camera space reflection</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_OBJ_WORLDPROJECTIONTRANSFORM</span></td>

            <td><span class=
            "NDLSystemFont">"WorldProjectionTransform"</span></td>

            <td>World projection transform</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCM_OBJ_MODELPROJECTIONTRANSFORM</span></td>

            <td><span class=
            "NDLSystemFont">"ModelProjectionTransform"</span></td>

            <td>Model projection transform</td>
        </tr>
    </tbody>
</table>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
