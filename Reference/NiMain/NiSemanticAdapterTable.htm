<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiSemanticAdapterTable</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiSemanticAdapterTable</p>

<p class="NDLRefParentage">: public <a href=
"../../Reference/NiSystem/NiMemObject.htm">NiMemObject</a></p>

<p class="NDLRefHeaderFile">&lt;NiSemanticAdapterTable.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiSemanticAdapterTable</span>
objects describe the linkage between the individual streams of
vertex data in an <span class="NDLSystemFont"><a href=
"../../Reference/NiMesh/NiMesh.htm">NiMesh</a></span> object and
the varying inputs to an <a href="NiShader.htm"><span class=
"NDLSystemFont">NiShader</span></a>. This allows the streams in
<span class="NDLSystemFont"><a href=
"../../Reference/NiMesh/NiMesh.htm">NiMesh</a></span> objects to
have semantics that are independent of how they will be used by
an <a href="NiShader.htm"><span class=
"NDLSystemFont">NiShader</span></a>. It also lets multiple
streams in <span class="NDLSystemFont"><a href=
"../../Reference/NiMesh/NiMesh.htm">NiMesh</a></span> objects to
be mapped into a single <a href="NiShader.htm"><span class=
"NDLSystemFont">NiShader</span></a> input, such as when two
2-component texture coordinates get packed into a single
4-component vector shader input.</p>

<p>The <span class="NDLSystemFont">NiSemanticAdapterTable</span>
consists of a series of table entries, with each entry containing
a generic semantic/index combination that describes an
<span class="NDLSystemFont"><a href=
"../../Reference/NiMesh/NiMesh.htm">NiMesh</a></span> stream, and
another renderer-specific semantic/index combination that
represents the shader input that the stream will correspond to.
The entry will also have a field for describing the number of
components the <span class="NDLSystemFont"><a href=
"../../Reference/NiMesh/NiMesh.htm">NiMesh</a></span> stream is
expected to provide, and a final field that indicates, in the
case of multiple <span class="NDLSystemFont"><a href=
"../../Reference/NiMesh/NiMesh.htm">NiMesh</a></span> streams
sharing an <a href="NiShader.htm"><span class=
"NDLSystemFont">NiShader</span></a> input, which position within
the shader input the specified <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMesh/NiMesh.htm">NiMesh</a></span> stream will
occupy.</p>

<p>As an example, consider the following situation: an
<span class="NDLSystemFont"><a href=
"../../Reference/NiMesh/NiMesh.htm">NiMesh</a></span> object
exists with the semantics POSITION, NORMAL, COLOR, TEXCOORD0, and
TEXCOORD1 defined. The POSITION and NORMAL semantics represent a
3-component vector, COLOR contains 4 components, and TEXCOORD0
and TEXCOORD1 both have two components. The shader that will be
used expects to take as input the POSITION, DIFFUSE, and UV
semantics. The shader's POSITION input will just be read from the
POSITION element of the <span class="NDLSystemFont"><a href=
"../../Reference/NiMesh/NiMesh.htm">NiMesh</a></span>, but the
shader's DIFFUSE input will come from the <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMesh/NiMesh.htm">NiMesh</a></span> object's
COLOR element, and the shader's UV input will be a 4-component
vector combining TEXCOORD0 and TEXCOORD1 from the <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMesh/NiMesh.htm">NiMesh</a></span>. The NORMAL
element from the <span class="NDLSystemFont"><a href=
"../../Reference/NiMesh/NiMesh.htm">NiMesh</a></span> will be
ignored, as the shader does not make use of it. The entries in
the <span class="NDLSystemFont">NiSemanticAdapterTable</span>
will be as follows:</p>
<!--(Table)=========================================================-->
<!--(Table)=========================================================-->

<table>
    <thead>
        <tr>
            <th>Entry</th>

            <th>Generic Semantic Name</th>

            <th>Generic Semantic Index</th>

            <th>Renderer Semantic Name</th>

            <th>Renderer Semantic Index</th>

            <th>Component Count</th>

            <th>Shared Renderer Semantic Position</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>0</td>

            <td>POSITION</td>

            <td>0</td>

            <td>POSITION</td>

            <td>0</td>

            <td>3</td>

            <td>0</td>
        </tr>

        <tr>
            <td>1</td>

            <td>COLOR</td>

            <td>0</td>

            <td>DIFFUSE</td>

            <td>0</td>

            <td>4</td>

            <td>0</td>
        </tr>

        <tr>
            <td>2</td>

            <td>TEXCOORD</td>

            <td>0</td>

            <td>UV</td>

            <td>0</td>

            <td>2</td>

            <td>0</td>
        </tr>

        <tr>
            <td>3</td>

            <td>TEXCOORD</td>

            <td>1</td>

            <td>UV</td>

            <td>0</td>

            <td>2</td>

            <td>1</td>
        </tr>
    </tbody>
</table>

<p class="NDLRefHead2">Restrictions</p>

<ol style="list-style: decimal;" type="1">
    <li>The component count must be between 1 and 4.</li>

    <li>Each semantic index must be between 0 and 255.</li>

    <li>The shared renderer semantic position must be between 0
    and 3 (or less, if individual components are larger than 1 in
    size).</li>

    <li>The combined component count of table entries that share
    the same semantic name/index must not exceed 4 (It is OK if
    the final data stream has additional unused components,
    although it will result in a one-time warning).</li>

    <li>Semantics that share a renderer semantic name/index must
    be of the same component type, tightly packed and
    interleaved, sequentially arranged in memory.</li>
</ol>

<p>The 5th restriction means that a semantic table like the
following:</p>

    <ul>
        <li>3 POS:0 -&gt; POSITION:0 @ 0</li>

        <li>1 ALPHA:0 -&gt; POSITION:0 @ 1</li>
    </ul>

<p>Is legal only if POS and ALPHA are stored in the same <a href=
"../../Reference/NiMesh/NiDataStream.htm"><span class=
"NDLSystemFont">NiDataStream</span></a>, with GetOffset()
returning N and N+GetComponentSize()*3 respectively. 
<!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->It
would fail to validate if POS were stored after ALPHA, if
something else is stored in between them (including a 4th
component of POS if the original format was float4), or if the
component types don't match (float and uint8n).</p>

<p class="NDLRefHead2">Examples</p>

<p>For more information on specifying Semantic Adapter Tables in
shaders, see the documentation on using them in <a href=
"../../Programmer/NiShader/SemanticAdapterTable.htm">NSF</a>
files or <a href=
"../../Programmer/NiShader/Specifying_Semantic_Adapter_Tables_in_FX_Shaders.htm">
FX/FXL</a>.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiSemanticAdapterTable(NiUInt32
uiNumEntries = 4);</p>

<p class="NDLRefMemberDescription">The constructor for
<span class="NDLSystemFont">NiSemanticAdapterTable</span> creates
an empty table with space for <span class=
"NDLSystemFont">uiNumEntries</span> table entries.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">NiSemanticAdapterTable&amp;
operator=(const NiSemanticAdapterTable&amp; kAdapterTable)</p>

<p class="NDLRefMemberDescription">Assignment operator.</p>

<p class="NDLRefMemberFunction">void InitializeTable(NiUInt32
uiNumEntries)</p>

<p class="NDLRefMemberDescription">This function clears any
entries that have been set on the <span class=
"NDLSystemFont">NiSemanticAdapterTable</span> and reallocates
space for <span class="NDLSystemFont">uiNumEntries</span> table
entries. Any data existing in the table will be lost.</p>

<p class="NDLRefMemberFunction">NiUInt32
GetNumFilledTableEntries() const</p>

<p class="NDLRefMemberDescription">Returns the number of table
entries that have been filled in with at least a generic semantic
name and index.</p>

<p class="NDLRefMemberFunction">NiUInt32
GetNumAllocatedTableEntries() const</p>

<p class="NDLRefMemberDescription">Returns the number of table
entries that have been allocated.</p>

<p class="NDLRefMemberFunction">void ClearEntry(NiUInt32
uiEntry)</p>

<p class="NDLRefMemberDescription">Re-initializes the table entry
indicated by the <span class="NDLSystemFont">uiEntry</span>
parameter.</p>

<p class="NDLRefMemberFunction">NiUInt32 GetFreeEntry()</p>

<p class="NDLRefMemberDescription">Returns the index of the first
entry after the last initialized entry in the table. 
<!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->This
method will grow the table if there are no suitable free
entries.</p>

<p class="NDLRefMemberFunction"><a href=
"NiFixedString.htm">NiFixedString</a>
GetGenericSemanticName(NiUInt32 uiEntry) const</p>

<p class="NDLRefMemberDescription">Returns the generic semantic
name for the table entry indicated by the <span class=
"NDLSystemFont">uiEntry</span> parameter.</p>

<p class="NDLRefMemberFunction">NiUInt8
GetGenericSemanticIndex(NiUInt32 uiEntry) const</p>

<p class="NDLRefMemberDescription">Returns the generic semantic
index for the table entry indicated by the <span class=
"NDLSystemFont">uiEntry</span> parameter.</p>

<p class="NDLRefMemberFunction">bool SetGenericSemantic(NiUInt32
uiEntry, <a href="NiFixedString.htm">NiFixedString</a>&amp;
kName, NiUInt8 uiIndex)</p>

<p class="NDLRefMemberDescription">Sets the generic semantic name
index at the table entry indicated by the <span class=
"NDLSystemFont">uiEntry</span> parameter. If the entry does not
exist in the table because the table was initialized with fewer
entries, then the function will fail and return <span class=
"NDLSystemFont">false</span>.</p>

<p class="NDLRefMemberFunction"><a href=
"NiFixedString.htm">NiFixedString</a>
GetRendererSemanticName(NiUInt32 uiEntry) const</p>

<p class="NDLRefMemberDescription">Returns the renderer-specific
semantic name for the table entry indicated by the <span class=
"NDLSystemFont">uiEntry</span> parameter.</p>

<p class="NDLRefMemberFunction">NiUInt8
GetRendererSemanticIndex(NiUInt32 uiEntry) const</p>

<p class="NDLRefMemberDescription">Returns the renderer-specific
semantic index for the table entry indicated by the <span class=
"NDLSystemFont">uiEntry</span> parameter.</p>

<p class="NDLRefMemberFunction">bool SetRendererSemantic(NiUInt32
uiEntry, <a href="NiFixedString.htm">NiFixedString</a>&amp;
kName, NiUInt8 uiIndex)</p>

<p class="NDLRefMemberDescription">Sets the renderer-specific
semantic name index at the table entry indicated by the
<span class="NDLSystemFont">uiEntry</span> parameter. If the
entry does not exist in the table because the table was
initialized with fewer entries, then the function will fail and
return <span class="NDLSystemFont">false</span>.</p>

<p class="NDLRefMemberFunction">NiUInt8
GetComponentCount(NiUInt32 uiEntry) const</p>

<p class="NDLRefMemberDescription">Returns the number of
components in the generic semantic described by the table entry
indicated by the <span class="NDLSystemFont">uiEntry</span>
parameter.</p>

<p class="NDLRefMemberFunction">bool SetComponentCount(NiUInt32
uiEntry, NiUInt8 uiComponentCount)</p>

<p class="NDLRefMemberDescription">Sets the number of components
in the generic semantic described by the table entry indicated by
the <span class="NDLSystemFont">uiEntry</span> parameter. If the
entry does not exist in the table because the table was
initialized with fewer entries, then the function will fail and
return <span class="NDLSystemFont">false</span>.</p>

<p class="NDLRefMemberFunction">NiUInt8
GetSharedRendererSemanticPosition(NiUInt32 uiEntry) const</p>

<p class="NDLRefMemberDescription">Returns the position in the
shared renderer-specific semantic that will be occupied by the
generic semantic described by the table entry indicated by the
<span class="NDLSystemFont">uiEntry</span> parameter.</p>

<p class="NDLRefMemberFunction">bool
SetSharedRendererSemanticPosition(NiUInt32 uiEntry, NiUInt8
uiPosition)</p>

<p class="NDLRefMemberDescription">Sets the position in the
shared renderer-specific semantic that will be occupied by the
generic semantic described by the table entry indicated by the
<span class="NDLSystemFont">uiEntry</span> parameter. If the
entry does not exist in the table because the table was
initialized with fewer entries, then the function will fail and
return <span class="NDLSystemFont">false</span>.</p>

<p class="NDLRefMemberFunction">bool CreateDefaultTable(const
<a href=
"NiShaderDeclaration_Entry.htm">NiShaderDeclaration::ShaderRegisterEntry</a>*
pkSemantics, NiUInt32 uiSemanticEntryCount)</p>

<p class="NDLRefMemberDescription">This function initializes an
<span class="NDLSystemFont">NiSemanticAdapterTable</span> based
on the array of <a href=
"NiShaderDeclaration_Entry.htm"><span class=
"NDLSystemFont">NiShaderDeclaration::ShaderRegisterEntry</span></a>
objects described by <span class=
"NDLSystemFont">pkSemantics</span> and <span class=
"NDLSystemFont">uiSemanticEntryCount</span>. Any data existing in
the table will be lost.</p>

<p class="NDLRefHead1">Streaming Support</p>

<p class="NDLRefMemberFunction">void LoadBinary(<a href=
"../../Reference/NiSystem/NiBinaryStream.htm">NiBinaryStream</a>&amp;
kStream)</p>

<p class="NDLRefMemberDescription">Loads a semantic adapter table
from a binary stream.</p>

<p class="NDLRefMemberFunction">void SaveBinary(<a href=
"../../Reference/NiSystem/NiBinaryStream.htm">NiBinaryStream</a>&amp;
kStream) const</p>

<p class="NDLRefMemberDescription">Saves the semantic adapter
table to the binary stream.</p>
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
