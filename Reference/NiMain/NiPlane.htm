<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiPlane</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiPlane</p>

<p class="NDLRefParentage">: public <a href=
"../../Reference/NiSystem/NiMemObject.htm"><span>NiMemObject</span></a></p>

<p class="NDLRefHeaderFile">&lt;NiPlane.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>NiPlane represents 3 dimensional signed plane equations. A
plane is assumed to be the points X satisfying the
expression:</p>

<div class="FigureContainer">
    <img src="images/image006.jpg" width="77" height="18" alt=
    "image006 (1K)"> <!-- <p class="FigureCaption"></p> -->
</div>

<p>Where N is the plane normal and C is the plane constant. The
plane constant may also be thought of as a signed perpendicular
distance from the plane to the origin.</p>

<p>Note that since the normal need not be unit length, this
distance may not be an exact world or model space distance.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiPlane()</p>

<p class="NDLRefMemberDescription">Default constructor that
creates a plane with a zero direction and a constant of zero.</p>

<p class="NDLRefMemberFunction">NiPlane(<a href=
"NiPoint3.htm">NiPoint3</a>&amp; kNormal, float fConstant)</p>

<p class="NDLRefMemberDescription">Constructs a plane given the
normal and the constant</p>

<p class="NDLRefMemberFunction">NiPlane(const <a href=
"NiPoint3.htm">NiPoint3</a>&amp; kNormal, const <a href=
"NiPoint3.htm">NiPoint3</a>3&amp; kPoint)</p>

<p class="NDLRefMemberDescription">Constructs plane directly from
the plane normal and any point lying in the plane</p>

<p class="NDLRefMemberFunction">NiPlane(const <a href=
"NiPoint3.htm">NiPoint3</a>&amp; kP0, const <a href=
"NiPoint3.htm">NiPoint3</a>&amp; kP1, const <a href=
"NiPoint3.htm">NiPoint3</a>&amp; kP2)</p>

<p class="NDLRefMemberDescription">Constructs a plane coplanar
with the triangle defined by the three input points. The normal
of the plane is defined by the left-hand rule.</p>

<p class="NDLRefHead1">Operators</p>

<p class="NDLRefMemberFunction">bool operator==(const
NiPlane&amp; kPlane)</p>

<p class="NDLRefMemberDescription">This operator is the exact
equality operator.</p>

<p class="NDLRefMemberFunction">bool operator!=(const
NiPlane&amp; kPlane)</p>

<p class="NDLRefMemberDescription">This operator is the exact
inequality operator.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">const <a href=
"NiPoint3.htm">NiPoint3</a>&amp; GetNormal()</p>

<p class="NDLRefMemberFunction">void SetNormal(const <a href=
"NiPoint3.htm">NiPoint3</a>&amp; kNormal)</p>

<p class="NDLRefMemberDescription">Allows the application to get
and set the plane normal (or direction vector). A plane normal
need not be a unit vector.</p>

<p class="NDLRefMemberFunction">float GetConstant() const</p>

<p class="NDLRefMemberFunction">void SetConstant(float
fConstant)</p>

<p class="NDLRefMemberDescription">Allows the application to set
the plane constant (or signed distance along the plane normal
from the origin to the plane).</p>

<p class="NDLRefMemberFunction">float Distance(const <a href=
"NiPoint3.htm">NiPoint3</a>&amp; kPoint) const</p>

<p class="NDLRefMemberDescription">Returns the signed distance of
the point to the plane times the length of the normal vector. 
Note that this value is not the distance of the point from the
plane unless the normal vector is a unit vector. If the
application needs to use this function for actual distances, it
should normalize the plane by unitizing the normal vector and
dividing the constant by the original length of the normal
vector.</p>

<p class="NDLRefMemberFunction">int WhichSide(const <a href=
"NiPoint3.htm">NiPoint3</a>&amp; kPoint) const</p>

<p class="NDLRefMemberDescription">Returns a class-local
enumerated type dependent upon the relationship of the given
point to the plane. It returns <span class=
"NDLSystemFont">NiPlane::NO_SIDE</span> if the point lies in the
plane; <span class="NDLSystemFont">NiPlane::POSITIVE_SIDE</span>
if the point lies on the positive side of the plane (i.e. the
half-space which the normal faces); and <span class=
"NDLSystemFont">NiPlane::NEGATIVE_SIDE</span> if the point lies
on the negative side of the plane (i.e. the half-space which the
normal does not face).</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
