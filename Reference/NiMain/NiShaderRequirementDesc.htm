<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiShaderRequirementDesc</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiShaderRequirementDesc</p>

<p class="NDLRefParentage">: public <span><a href=
"NiShaderDescBase.htm">NiShaderDescBase</a></span></p>

<p class="NDLRefHeaderFile">&lt;NiShaderRequirementDesc.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiShaderRequirementDesc</span> is
the base class for most description classes. It adds members
which allow shader authors to identify requirements for the
shader/library, include pixel and vertex shader versions, support
platforms, and a user defined version number.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiShaderRequirementDesc()</p>

<p class="NDLRefMemberDescription">The default constructor
creates an uninitialized <span class=
"NDLSystemFont">NiShaderRequirementDesc</span>.</p>

<p class="NDLRefHead1">Static Member Functions</p>

<p class="NDLRefMemberFunction">static const unsigned int
GetMinorPixelShaderVersion(const unsigned int uiVersion)</p>

<p class="NDLRefMemberDescription">Given an unsigned int
representing the entire pixel shader version, return just the
value of the minor pixel shader version.</p>

<p class="NDLRefMemberFunction">static const unsigned int
GetMajorPixelShaderVersion(const unsigned int uiVersion)</p>

<p class="NDLRefMemberDescription">Given an unsigned int
representing the entire pixel shader version, return just the
value of the major pixel shader version.</p>

<p class="NDLRefMemberFunction">static const unsigned int
CreatePixelShaderVersion(const unsigned int uiMajorVersion, const
unsigned int uiMinorVersion)</p>

<p class="NDLRefMemberDescription">Return a single unsigned int
representing the entire pixel shader version.</p>

<p class="NDLRefMemberFunction">static const unsigned int
GetMinorVertexShaderVersion(const unsigned int uiVersion)</p>

<p class="NDLRefMemberDescription">Given an unsigned int
representing the entire vertex shader version, return just the
value of the minor vertex shader version.</p>

<p class="NDLRefMemberFunction">static const unsigned int
GetMajorVertexShaderVersion(const unsigned int uiVersion)</p>

<p class="NDLRefMemberDescription">Given an unsigned int
representing the entire vertex shader version, return just the
value of the major vertex shader version.</p>

<p class="NDLRefMemberFunction">static const unsigned int
CreateVertexShaderVersion(const unsigned int uiMajorVersion,
const unsigned int uiMinorVersion)</p>

<p class="NDLRefMemberDescription">Return a single unsigned int
representing the entire vertex shader version.</p>

<p class="NDLRefMemberFunction">static const unsigned int
GetMinorGeometryShaderVersion(const unsigned int uiVersion)</p>

<p class="NDLRefMemberDescription">Given an unsigned int
representing the entire geometry shader version, return just the
value of the minor geometry shader version.</p>

<p class="NDLRefMemberFunction">static const unsigned int
GetMajorGeometryShaderVersion(const unsigned int uiVersion)</p>

<p class="NDLRefMemberDescription">Given an unsigned int
representing the entire geometry shader version, return just the
value of the major geometry shader version.</p>

<p class="NDLRefMemberFunction">static const unsigned int
CreateGeometryShaderVersion(const unsigned int uiMajorVersion,
const unsigned int uiMinorVersion)</p>

<p class="NDLRefMemberDescription">Return a single unsigned int
representing the entire geometry shader version.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">virtual const unsigned int
GetMinFeatureLevel() const</p>

<p class="NDLRefMemberDescription">Returns the minimum faeture level required.</p>

<p class="NDLRefMemberFunction">virtual const unsigned int
GetMaxFeatureLevel() const</p>

<p class="NDLRefMemberDescription">Returns the maximum feature level required.</p>

<p class="NDLRefMemberFunction">virtual const unsigned int
GetMinVertexShaderVersion() const</p>

<p class="NDLRefMemberDescription">Returns the minimum vertex
shader version required.</p>

<p class="NDLRefMemberFunction">virtual const unsigned int
GetMaxVertexShaderVersion() const</p>

<p class="NDLRefMemberDescription">Returns the maximum vertex
shader version required.</p>

<p class="NDLRefMemberFunction">virtual const unsigned int
GetMinGeometryShaderVersion() const</p>

<p class="NDLRefMemberDescription">Returns the min geometry
shader version required.</p>

<p class="NDLRefMemberFunction">virtual const unsigned int
GetMaxGeometryShaderVersion() const</p>

<p class="NDLRefMemberDescription">Returns the max geometry
shader version required.</p>

<p class="NDLRefMemberFunction">virtual const unsigned int
GetMinPixelShaderVersion() const</p>

<p class="NDLRefMemberDescription">Returns the minimum pixel
shader version required.</p>

<p class="NDLRefMemberFunction">virtual const unsigned int
GetMaxPixelShaderVersion() const</p>

<p class="NDLRefMemberDescription">Returns the maximum pixel
shader version required.</p>

<p class="NDLRefMemberFunction">virtual const unsigned int
GetMinComputeShaderVersion() const</p>

<p class="NDLRefMemberDescription">Returns the minimum compute
shader version required.</p>

<p class="NDLRefMemberFunction">virtual const unsigned int
GetMaxComputeShaderVersion() const</p>

<p class="NDLRefMemberDescription">Returns the maximum compute
shader version required.</p>

<p class="NDLRefMemberFunction">virtual const unsigned int
GetMinUserDefinedVersion() const</p>

<p class="NDLRefMemberDescription">Returns the minimum user
defined version required.</p>

<p class="NDLRefMemberFunction">virtual const unsigned int
GetMaxUserDefinedVersion() const</p>

<p class="NDLRefMemberDescription">Returns the maximum user
defined version required.</p>

<p class="NDLRefMemberFunction">virtual const unsigned int
GetPlatformFlags() const</p>

<p class="NDLRefMemberDescription">Returns the platform flags
indicating supported platforms.</p>

<p class="NDLRefMemberFunction">virtual const bool
IsPlatformDX9() const</p>

<p class="NDLRefMemberDescription">Returns <span class=
"NDLSystemFont">true</span> if DX9 is supported.</p>

<p class="NDLRefMemberFunction">virtual const bool
IsPlatformD3D10() const</p>

<p class="NDLRefMemberDescription">Returns <span class=
"NDLSystemFont">true</span> if D3D10 is supported.</p>

<p class="NDLRefMemberFunction">virtual const bool
IsPlatformD3D11() const</p>

<p class="NDLRefMemberDescription">Returns <span class=
"NDLSystemFont">true</span> if D3D11 is supported.</p>

<p class="NDLRefMemberFunction">virtual const bool
IsPlatformXenon() const</p>

<p class="NDLRefMemberDescription">Returns <span class=
"NDLSystemFont">true</span> if Xenon is supported.</p>

<p class="NDLRefMemberFunction">unsigned int
GetBonesPerPartition() const</p>

<p class="NDLRefMemberDescription">Returns the number of bones
per partition for skinning supported.</p>

<p class="NDLRefMemberFunction"><a href="#NBTFlags">NBTFlags</a>
GetBinormalTangentMethod() const</p>

<p class="NDLRefMemberDescription">Returns the tangent space data
calculation method required.</p>

<p class="NDLRefMemberFunction">unsigned short
GetBinormalTangentUVSource() const</p>

<p class="NDLRefMemberDescription">Indicates which UV set should
be used to generate the binormals and tangents.</p>

<p class="NDLRefMemberFunction">bool GetSoftwareVPAcceptable()
const</p>

<p class="NDLRefMemberDescription">Returns whether this shader
can run with software vertex processing if the hardware is not
capable enough.</p>

<p class="NDLRefMemberFunction">bool GetSoftwareVPRequired()
const</p>

<p class="NDLRefMemberDescription">Returns whether this shader
has been marked as requiring software vertex processing.</p>

<p class="NDLRefMemberFunction">bool GetConfigurableMaterial()
const</p>

<p class="NDLRefMemberDescription">Returns <span class=
"NDLSystemFont">true</span> if the material is configurable. By
default, this is false.</p>

<a name="NBTFlags" id="NBTFlags"></a><p class="NDLRefHead2">NBTFlags</p>

<p>This enumeration determines the method of generating NBTs.</p>

<!--(Table)=========================================================-->
<table>
    <thead>
        <tr>
            <th>Enumeration</th>

            <th>Meaning</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><span class=
            "NDLSystemFont">NBT_METHOD_NONE</span></td>

            <td>No NBTs are present.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">NBT_METHOD_NDL</span></td>

            <td>Use Gamebryo's method for generating NBTs.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">NBT_METHOD_MAX</span></td>

            <td>Use 3DS Max's method for generating NBTs.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">NBT_METHOD_ATI</span></td>

            <td>Use ATI's method for generating NBTs.</td>
        </tr>
    </tbody>
</table>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
