<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiFragmentMaterial</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiFragmentMaterial</p>

<p class="NDLRefParentage">: public <a href=
"NiMaterial.htm">NiMaterial</a></p>

<p class="NDLRefHeaderFile">&lt;NiFragmentMaterial.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>This class is meant to provide a framework for derived classes
to use when implementing a shade-tree driven material. The
geometry is analyzed and an <span class=
"NDLSystemFont">NiMaterialDescriptor</span> is created to
describe the configuration of the material. The <span class=
"NDLSystemFont">NiMaterialDescriptor</span> is then checked
against a hash table of <span class=
"NDLSystemFont">NiShader</span> objects to see if it has already
been created. If it has, the cached version is returned. If it
hasn't, it is decomposed into a set of rendering passes with
<span class="NDLSystemFont">NiGPUProgramDescriptor</span> pairs
for pixel and vertex shaders. If either the pixel or vertex
shader has been cached already, the cached version is used.
Otherwise, a shade-tree is constructed and compiled for each GPU
program. In some cases, a given rendering pass may not properly
be created due to hardware constraints. Derived classes can
attempt to recover by specifying <a href=
"../../Programmer/NiMaterial/NiFragmentMaterial.htm#Fallbacks">fallback
techniques</a> which may modify the array of <span class=
"NDLSystemFont">RenderPassDescriptor</span> objects to create
shaders that are hopefully capable of being compiled and result
in an acceptable visual effect.</p>

<p class="NDLRefHead1">Protected Constructors</p>

<p>This class is an abstract base class. There are no public
constructors.</p>

<p class="NDLRefMemberFunction">NiFragmentMaterial(<a href=
"NiMaterialNodeLibrary.htm">NiMaterialNodeLibrary</a>* pkLibrary,
const <a href="NiFixedString.htm">NiFixedString</a>&amp; kName,
unsigned short usVertexVersion, unsigned short usGeometryVersion,
unsigned short usPixelVersion, bool bAutoCreateCaches)</p>

<p class="NDLRefMemberDescription">This is a protected
constructor that will be called by derived classes. It creates a
fragment material using the given node library. It names the
material <span class="NDLSystemFont">kName</span>. If
<span class="NDLSystemFont">bAutoCreateCaches</span> is true,
then a cache for this type of material will be created using the
static renderer pointer. The version numbers will be stored in
the cache so that when a material is updated to a newer version,
older cached shaders will be invalidated and then
regenerated.</p>

<p class="NDLRefHead1">Supported Static Member Functions</p>

<p class="NDLRefMemberFunction">bool
GetDefaultLoadProgramCacheOnCreation()</p>

<p class="NDLRefMemberFunction">void
SetDefaultLoadProgramCacheOnCreation(bool bSet)</p>

<p class="NDLRefMemberDescription">Get and set the default value
for whether or not to load the program cache when creating an
<a href="NiGPUProgramCache.htm"><span class=
"NDLSystemFont">NiGPUProgramCache</span></a>.</p>

<p class="NDLRefMemberFunction">bool
GetDefaultAutoSaveProgramCache()</p>

<p class="NDLRefMemberFunction">void
SetDefaultAutoSaveProgramCache(bool bSet)</p>

<p class="NDLRefMemberDescription">Get and set the default value
for whether or not to write to the program cache when creating a
new program from an <a href="NiGPUProgramCache.htm"><span class=
"NDLSystemFont">NiGPUProgramCache</span></a>.</p>

<p class="NDLRefMemberFunction">bool
GetDefaultWriteDebugProgramData()</p>

<p class="NDLRefMemberFunction">void
SetDefaultWriteDebugProgramData(bool bSet)</p>

<p class="NDLRefMemberDescription">Get and set the default value
for whether or not to write additional debug information when
creating a new program from an <a href=
"NiGPUProgramCache.htm"><span class=
"NDLSystemFont">NiGPUProgramCache</span></a>.</p>

<p class="NDLRefMemberFunction">bool
GetDefaultLockProgramCache()</p>

<p class="NDLRefMemberFunction">void
SetDefaultLockProgramCache(bool bSet)</p>

<p class="NDLRefMemberDescription">Get and set the default value
for whether to keep the <span class="NDLSystemFont"><a href=
"NiGPUProgramCache.htm">NiGPUProgramCache</a></span> from
creating new programs.</p>

<p class="NDLRefMemberFunction">bool
GetDefaultAutoCreateProgramCache()</p>

<p class="NDLRefMemberFunction">void
SetDefaultAutoCreateProgramCache(bool bSet)</p>

<p class="NDLRefMemberDescription">Get and set the default value
for creating an <a href="NiGPUProgramCache.htm"><span class=
"NDLSystemFont">NiGPUProgramCache</span></a> in the constructor
for a fragment material.</p>

<p class="NDLRefMemberFunction">static void
LoadAllCachesForAllMaterials()</p>

<p class="NDLRefMemberDescription">Convenience method to
LoadAllCaches on all materials.</p>

<p class="NDLRefMemberFunction">static void
GetDefaultCreateReplacementShaders()</p>

<p class="NDLRefMemberDescription">Get the default value for adding fall back replacement shaders to 
shader cache for each fragment material.</p>

<p class="NDLRefMemberFunction">static void
SetDefaultCreateReplacementShaders(bool bCreate)</p>

<p class="NDLRefMemberDescription">Set the default value for adding fall back replacement shaders to shader cache 
for each fragment material. Replacement shaders are 'fail safe' shaders that can be used when shader compilation can 
not be performed</p>

<p class="NDLRefHead1">Supported Public Member Functions 
<!--kadov_tag{{<spaces>}}-->  <!--kadov_tag{{</spaces>}}--></p>

<p class="NDLRefHead2">Shader Creation Functions</p>

<p class="NDLRefMemberFunction">virtual bool
IsShaderCurrent(<a href="NiShader.htm">NiShader</a>* pkShader,
const <a href="NiRenderObject.htm">NiRenderObject</a>*
pkGeometry, const <a href=
"NiPropertyState.htm">NiPropertyState</a>* pkState, const
<a href="NiDynamicEffectState.htm">NiDynamicEffectState</a>*
pkEffects, unsigned int uiMaterialExtraData)</p>

<p class="NDLRefMemberDescription">Inherited from <span class=
"NDLSystemFont"><a href="NiMaterial.htm">NiMaterial</a></span>.
Returns whether or not the applied shader matches the computed
material description for a given render object.</p>

<p class="NDLRefMemberFunction">virtual <a href=
"NiShader.htm">NiShader</a>* GetCurrentShader(const <a href=
"NiRenderObject.htm">NiRenderObject</a>* pkGeometry, const
<a href="NiPropertyState.htm">NiPropertyState</a>* pkState, const
<a href="NiDynamicEffectState.htm">NiDynamicEffectState</a>*
pkEffects, unsigned int uiMaterialExtraData)</p>

<p class="NDLRefMemberDescription">Inherited from <span class=
"NDLSystemFont"><a href="NiMaterial.htm">NiMaterial</a></span>.
Compute the <span class="NDLSystemFont"><a href=
"NiShader.htm">NiShader</a></span> needed to render this piece of
geometry.</p>

<p class="NDLRefMemberFunction">virtual bool
PrecacheGPUPrograms(const <a href=
"NiRenderObject.htm">NiRenderObject</a>* pkGeometry, const
<a href="NiPropertyState.htm">NiPropertyState</a>* pkState, const
<a href="NiDynamicEffectState.htm">NiDynamicEffectState</a>*
pkEffects, <!--kadov_tag{{<spaces>}}--> 
<!--kadov_tag{{</spaces>}}-->unsigned int
uiMaterialExtraData)</p>

<p class="NDLRefMemberDescription">Utility method for generating
the <a href="NiGPUProgram.htm"><span class=
"NDLSystemFont">NiGPUProgram</span></a> 
<!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->objects
needed to render a given object without creating the <span class=
"NDLSystemFont">NiShader</span>.</p>

<p class="NDLRefHead2">NiGPUProgramCache Control Functions</p>

<p class="NDLRefMemberFunction">unsigned int
GetProgramVersion(<a href=
"NiGPUProgram.htm#ProgramType">NiGPUProgram::ProgramType</a>
eType) const</p>

<p class="NDLRefMemberDescription">Get the current version number
for the specified program type for this material.</p>

<p class="NDLRefMemberFunction">virtual void
SetProgramCache(<a href=
"NiGPUProgramCache.htm">NiGPUProgramCache</a>* pkCache, <a href=
"NiGPUProgram.htm#ProgramType">NiGPUProgram::ProgramType</a>
eType)</p>

<p class="NDLRefMemberFunction">virtual <a href=
"NiGPUProgramCache.htm">NiGPUProgramCache</a>*
GetProgramCache(<a href=
"NiGPUProgram.htm#ProgramType">NiGPUProgram::ProgramType</a>
eType) const</p>

<p class="NDLRefMemberDescription">Get and set the program cache
for the specified program type. The cache provides both the
capacity for compiling new programs as well as the ability to
reuse programs between application runs.</p>

<p class="NDLRefMemberFunction">virtual void LoadAllCaches()</p>

<p class="NDLRefMemberDescription">Tell the material to load all
of its active caches if they haven't previously been loaded.</p>

<p class="NDLRefMemberFunction">virtual void UnloadShaders()</p>

<p class="NDLRefMemberDescription">Inherited from <span class=
"NDLSystemFont"><a href="NiMaterial.htm">NiMaterial</a></span>.
This method is called by the renderers or the host application to
force the material to remove all internal 
<!--kadov_tag{{<spaces>}}--> <a href="NiShader.htm"><span class=
"NDLSystemFont"><!--kadov_tag{{</spaces>}}-->NiShader</span></a>
data members.</p>

<p class="NDLRefMemberFunction">virtual void
SetWorkingDirectory(const char* pcWorkingDir)</p>

<p class="NDLRefMemberDescription">Inherited from <span class=
"NDLSystemFont"><a href="NiMaterial.htm">NiMaterial</a></span>.
This method is called in order to set the working directory for a
given material. It is up to the material to determine what, if
any files, it will use from this folder.</p>

<p class="NDLRefHead2">NiMaterialNodeLibrary Access Functions</p>

<p class="NDLRefMemberFunction">unsigned int
GetMaterialNodeLibraryCount() const</p>

<p class="NDLRefMemberFunction">NiMaterialNodeLibrary*
GetMaterialNodeLibrary(unsigned int uiIndex) const</p>

<p class="NDLRefMemberDescription">Utility methods for accessing
the material node libraries for a material. These libraries
provide the code snippets for the shade-tree..</p>

<p class="NDLRefHead2">Shader Fallback Utility Functions</p>

<p class="NDLRefMemberFunction">unsigned int
AddShaderFallbackFunc(SHADERFALLBACKFUNC pfnFallback)</p>

<p class="NDLRefMemberFunction">bool
RemoveShaderFallbackFunc(SHADERFALLBACKFUNC pfnFallback)</p>

<p class="NDLRefMemberFunction">bool
RemoveShaderFallbackFunc(unsigned int uiIndex)</p>

<p class="NDLRefMemberFunction">void
RemoveAllShaderFallbackFuncs()</p>

<p class="NDLRefMemberDescription">Utility methods for adding and
removing shader <a href=
"../../Programmer/NiMaterial/NiFragmentMaterial.htm#Fallbacks">fallback
functions</a> from a fragment material. This allows the material
to recover when a program has been generated that isn't capable
of being compiled.</p>

<p class="NDLRefMemberFunction">unsigned int
GetShaderFallbackFuncArrayCount() const</p>

<p class="NDLRefMemberDescription">This function returns the
number of contiguous elements over which an application must
iterate in order to encounter all non-zero elements. This number
is greater than or equal to the number of non-zero elements,
which is the effective size.</p>

<p class="NDLRefMemberFunction">unsigned int
GetShaderFallbackFuncCount() const</p>

<p class="NDLRefMemberDescription">This function returns the
number of non-zero elements in the array. Note: since non-zero
elements are not necessarily contiguous, applications must not
use this number as a maximum iteration index or risk missing
non-zero elements.</p>

<p class="NDLRefMemberFunction">unsigned int
FindShaderFallbackFunc(SHADERFALLBACKFUNC pfnFallback) const</p>

<p class="NDLRefMemberFunction">SHADERFALLBACKFUNC
GetShaderFallbackFunc(unsigned int uiIndex) const</p>

<p class="NDLRefMemberDescription">Utility methods for accessing
the entries in the shader fallback function array.</p>

<p class="NDLRefMemberFunction">virtual void
AddDefaultFallbacks()</p>

<p class="NDLRefMemberDescription">This method adds all of
standard fallbacks for a given fallback material. A class derived
from <span class="NDLSystemFont">NiFragmentMaterial</span> can
fill in this function to provide a set of known fallback
techniques.</p>

<p class="NDLRefMemberFunction">void SetMaxPassCount(unsigned int
uiMaxPassCount)</p>

<p class="NDLRefMemberFunction">unsigned int GetMaxPassCount()
const</p>

<p class="NDLRefMemberDescription">Get and set the maximum number
of passes allowed by the fallback system. Once a shader has
reached this maximum pass count, the error shader will be
displayed.</p>

<p class="NDLRefMemberFunction">virtual void AddReplacementShaders()</p>

<p class="NDLRefMemberDescription">Populates the shader cache with a set of fall back shaders. 
Replacement shaders are 'fail safe' shaders that can be used when shader compilation can not be performed.</p>

<p class="NDLRefHead1">Supported Protected Member Functions 
<!--kadov_tag{{<spaces>}}-->  <!--kadov_tag{{</spaces>}}--></p>

<p class="NDLRefHead2">Shader and Program Caching</p>

<p class="NDLRefMemberFunction">virtual unsigned int
GetHashCode(const <a href=
"NiMaterialDescriptor.htm">NiMaterialDescriptor</a>*
pkDescriptor)</p>

<p class="NDLRefMemberDescription">Compute the internal hash code
for this material descriptor.</p>

<p class="NDLRefMemberFunction">virtual unsigned int
GetHashCode(const <a href=
"NiGPUProgramDescriptor.htm">NiGPUProgramDescriptor</a>*
pkDescriptor)</p>

<p class="NDLRefMemberDescription">Compute the internal hash code
for this GPU program descriptor.</p>

<p class="NDLRefMemberFunction"><a href=
"NiShader.htm">NiShader</a>* RetrieveFromHash(const <a href=
"NiMaterialDescriptor.htm">NiMaterialDescriptor</a>*
pkDescriptor)</p>

<p class="NDLRefMemberDescription">Retrieve the <a href=
"NiShader.htm"><span class="NDLSystemFont">NiShader</span></a>
matching this material descriptor from the hash table.</p>

<p class="NDLRefMemberFunction">void InsertIntoHash(<a href=
"NiShader.htm">NiShader</a>* pkShader)</p>

<p class="NDLRefMemberDescription">Insert the input <a href=
"NiShader.htm"><span class="NDLSystemFont">NiShader</span></a>
into the hash table.</p>

<p class="NDLRefMemberFunction">void RemoveFromHash(<a href=
"NiShader.htm">NiShader</a>* pkShader)</p>

<p class="NDLRefMemberDescription">Remove the input <a href=
"NiShader.htm"><span class="NDLSystemFont">NiShader</span></a>
from the hash table.</p>

<p class="NDLRefMemberFunction">bool CheckFailedShader(const
<a href="NiMaterialDescriptor.htm">NiMaterialDescriptor</a>*
pkDescriptor)</p>

<p class="NDLRefMemberDescription">Determine whether the shader
associated with the given material descriptor is known to have
failed creation in the past.</p>

<p class="NDLRefMemberFunction">void SetFailedShader(const
<a href="NiMaterialDescriptor.htm">NiMaterialDescriptor</a>*
pkDescriptor)</p>

<p class="NDLRefMemberDescription">Set a given material
descriptor as being unable to produce a valid shader.</p>

<p class="NDLRefMemberFunction">void SetFailedGPUProgram(<a href=
"NiGPUProgram.htm#ProgramType">NiGPUProgram::ProgramType</a>
eProgramType,const <a href=
"NiGPUProgramDescriptor.htm">NiGPUProgramDescriptor</a>*
pkDescriptor)</p>

<p class="NDLRefMemberDescription">Set a given program descriptor
as being unable to produce a valid program.</p>

<p class="NDLRefHead2">Shader and Program Generation</p>

<p class="NDLRefMemberFunction">virtual <a href=
"NiShaderAttributeDesc.htm#AttributeType_Enumerations">NiShaderAttributeDesc::AttributeType</a>
GetAttributeTypeFromString(const char* pcValue)</p>

<p class="NDLRefMemberFunction">virtual NiFixedString
GetStringFromAttributeType(<a href=
"NiShaderAttributeDesc.htm#AttributeType_Enumerations">NiShaderAttributeDesc::AttributeType</a>
eType)</p>

<p class="NDLRefMemberDescription">Compute the <a href=
"NiShaderAttributeDesc.htm#AttributeType_Enumerations"><span class="NDLSystemFont">
NiShaderAttributeDesc::AttributeType</span></a> from a given
string and vice versa.</p>

<p class="NDLRefMemberFunction">virtual bool
GenerateDescriptor(const <a href=
"NiRenderObject.htm">NiRenderObject</a>* pkGeometry, const
<a href="NiPropertyState.htm">NiPropertyState</a>* pkState, const
<a href="NiDynamicEffectState.htm">NiDynamicEffectState</a>*
pkEffects, <a href=
"NiMaterialDescriptor.htm">NiMaterialDescriptor</a>&amp;
kMaterialDescriptor) = 0</p>

<p class="NDLRefMemberDescription">Generate the material
descriptor for a given input render object. This must be
implemented by derived classes.</p>

<p class="NDLRefMemberFunction">virtual <a href=
"NiShader.htm">NiShader</a>* GenerateShader(<a href=
"NiMaterialDescriptor.htm">NiMaterialDescriptor</a>&amp;
kMaterialDescriptor)</p>

<p class="NDLRefMemberDescription">Generate the <a href=
"NiShader.htm"><span class="NDLSystemFont">NiShader</span></a>
for the given material descriptor.</p>

<p class="NDLRefMemberFunction">virtual <a href=
"NiShader.htm">NiShader</a>* PrecacheGPUPrograms(<a href=
"NiMaterialDescriptor.htm">NiMaterialDescriptor</a>&amp;
kMaterialDescriptor)</p>

<p class="NDLRefMemberDescription">Generate the GPU programs for
the given material descriptor.</p>

<p class="NDLRefMemberFunction">virtual NiGPUProgram*
GenerateShaderProgramsForPass(<a href=
"NiGPUProgramDescriptor.htm">NiGPUProgramDescriptor</a>*
pkVertexDesc, <a href=
"NiGPUProgramDescriptor.htm">NiGPUProgramDescriptor</a>*
pkGeometryDesc, <a href=
"NiGPUProgramDescriptor.htm">NiGPUProgramDescriptor</a>*
pkPixelDesc, const <a href=
"NiTObjectSet.htm">NiTObjectSet</a>&lt;ObjectResourceOffset&gt;&amp;
kObjectOffsets, <a href=
"NiMaterialConfigurator.htm">NiMaterialConfigurator</a>*
pkConfig, <a href="NiShader.htm">NiShader</a>* pkShader, unsigned
int uiRenderPass)</p>

<p class="NDLRefMemberDescription">This method is called on each
rendering pass to compute the pixel, geometry, and vertex shader
programs for that pass and set up the constant maps for that
pass.</p>

<p class="NDLRefMemberFunction">virtual NiGPUProgram*
EvaluateProgram(Context&amp; kContext, const char* pcFilename,
NiGPUProgram::ProgramType eProgType, NiTObjectPtrSet&amp;
kUniforms)</p>

<p class="NDLRefMemberDescription">This method takes the current
context and generates shader code from the shade tree. This code
is then saved in the program cache for this program type.</p>

<p class="NDLRefMemberFunction">virtual bool
GeneratePixelShadeTree(Context&amp; kContext,
NiGPUProgramDescriptor* pkDesc)</p>

<p class="NDLRefMemberDescription">This method controls the
wiring of the pixel shader material nodes.</p>

<p class="NDLRefMemberFunction">virtual bool
GenerateGeometryShadeTree(Context&amp; kContext,
NiGPUProgramDescriptor* pkDesc)</p>

<p class="NDLRefMemberDescription">This method controls the
wiring of the geometry shader material nodes.</p>

<p class="NDLRefMemberFunction">virtual bool
GenerateVertexShadeTree(Context&amp; kContext,
NiGPUProgramDescriptor* pkDesc)</p>

<p class="NDLRefMemberDescription">This method controls the
wiring of the vertex shader material nodes.</p>

<p class="NDLRefMemberFunction">NiGPUProgram*
GenerateShaderProgram( NiGPUProgram::ProgramType eProgType,
NiGPUProgramDescriptor* pkDesc, NiTObjectPtrSet&amp;
kUniforms)</p>

<p class="NDLRefMemberDescription">This method converts a GPU
descriptor into a GPU program for the given program type. A
failure to compile will result in NULL being returned.</p>

<p class="NDLRefMemberFunction">virtual ReturnCode
GenerateShaderDescArray(<a href=
"NiMaterialDescriptor.htm">NiMaterialDescriptor</a>*
pkMaterialDescriptor, <a href=
"NiFragmentMaterial.htm#RenderPassDescriptor">RenderPassDescriptor</a>*
pkRenderPasses, unsigned int uiMaxCount, unsigned int&amp;
uiCountAdded) = 0</p>

<p class="NDLRefMemberDescription">This method takes the input
material descriptor and breaks it into one or more rendering
passes. Derived classes must implement this method.</p>

<p class="NDLRefMemberFunction">virtual unsigned int
VerifyShaderPrograms(<a href="NiGPUProgram.htm">NiGPUProgram</a>*
pkVertexShader, <a href="NiGPUProgram.htm">NiGPUProgram</a>*
pkGeometryShader, <a href="NiGPUProgram.htm">NiGPUProgram</a>*
pkPixelShader) = 0</p>

<p class="NDLRefMemberDescription">This method takes GPU programs
generated by the set of shader generating functions and verifies
that they were created correctly. It should return <span class=
"NDLSystemFont">RC_SUCCESS</span> if all the required shaders
were created and a relevant failure code in other cases. This
function needs to be implemented by derived classes.</p>

<p class="NDLRefMemberFunction">virtual bool
AddResourceToShaderConstantMap(<a href=
"NiShader.htm">NiShader</a>* pkShader, <a href=
"NiShaderConstantMap.htm">NiShaderConstantMap</a>* pkMap,
<a href="NiMaterialResource.htm">NiMaterialResource</a>* pkRes,
<a href="NiGPUProgramDescriptor.htm">NiGPUProgramDescriptor</a>*
pkVertexDesc, <a href=
"NiGPUProgramDescriptor.htm">NiGPUProgramDescriptor</a>*
pkGeometryDesc, <a href=
"NiGPUProgramDescriptor.htm">NiGPUProgramDescriptor</a>*
pkPixelDesc, const <a href=
"NiTObjectSet.htm">NiTObjectSet</a>&lt;ObjectResourceOffset&gt;&amp;
kObjectOffsets, unsigned int uiPass, <a href=
"NiGPUProgram.htm#ProgramType">NiGPUProgram::ProgramType</a>
eCurrentType)</p>

<p class="NDLRefMemberDescription">This method will try to add
the given material resource to the shader constant map for a
given pass and shader program.</p>

<p class="NDLRefMemberFunction">virtual <a href=
"NiShader.htm">NiShader</a>* CreateShader(<a href=
"NiMaterialDescriptor.htm">NiMaterialDescriptor</a>* pkDesc) =
0</p>

<p class="NDLRefMemberDescription">This method creates the shader
for a given material descriptor. This method should simply create
an <span class="NDLSystemFont"><a href=
"NiShader.htm">NiShader</a></span>-derived class. Later methods
will populate it.</p>

<p class="NDLRefMemberFunction">virtual bool
SetupPackingRequirements(<a href="NiShader.htm">NiShader</a>*
pkShader, <a href=
"NiMaterialDescriptor.htm">NiMaterialDescriptor</a>*
pkMaterialDescriptor, RenderPassDescriptor* pkRenderPasses,
unsigned int uiMaxCount) = 0</p>

<p class="NDLRefMemberDescription">Constructs a semantic adapter
table for the shader, based on the requirements of this instance
of the material.</p>

<p class="NDLRefMemberFunction">virtual NiFixedString
GenerateUVSetName(unsigned int uiIndex)</p>

<p class="NDLRefMemberDescription">Generate the UV set name for a
given UV coordinate input.</p>

<p class="NDLRefMemberFunction">virtual <a href=
"NiMaterialResource.htm">NiMaterialResource</a>*
InsertTextureSampler(Context&amp; kContext, const <a href=
"NiFixedString.htm">NiFixedString</a>&amp; kMapName, <a href=
"#TextureMapSamplerType">TextureMapSamplerType</a> eSamplerType,
unsigned int uiOccurance, <a href=
"NiShaderAttributeDesc.htm">NiShaderAttributeDesc</a>::ObjectType
eObjectType = NiShaderAttributeDesc::OT_UNDEFINED)</p>

<p class="NDLRefMemberDescription">Add a texture sampler to the
uniforms for this shade-tree.</p>

<p class="NDLRefMemberFunction">virtual bool
AddDefaultMaterialNodes(Context&amp; kContext,
NiGPUProgramDescriptor* pkDesc, NiGPUProgram::ProgramType
eType)</p>

<p class="NDLRefMemberDescription">Adds the input, output,
uniform, and static nodes to the current shade tree.</p>

<p class="NDLRefMemberFunction">virtual NiMaterialResource*
AddOutputPredefined(<a href=
"NiMaterialNode.htm">NiMaterialNode</a>* pkNode, <a href=
"NiShaderConstantMap.htm#DefinedMappings">NiShaderConstantMap::DefinedMappings</a>
eMapping, unsigned int uiNumRegisters = 1, unsigned int uiCount =
1, unsigned int uiExtraData = 0)</p>

<p class="NDLRefMemberDescription">Add a <a href=
"NiShaderConstantMap.htm"><span class=
"NDLSystemFont">NiShaderConstantMap::DefinedMappings</span></a>
shader constant to the uniforms for this shade-tree.</p>

<p class="NDLRefMemberFunction">virtual NiMaterialResource*
AddOutputObject(<a href="NiMaterialNode.htm">NiMaterialNode</a>*
pkNode, <a href=
"NiShaderConstantMap.htm">NiShaderConstantMap::ObjectMappings</a>
eMapping, <a href=
"NiShaderAttributeDesc.htm#ObjectType_Enumerations">NiShaderAttributeDesc::ObjectType</a>
eObjectType, unsigned int uiObjectCount, const char*
pcVariableModifier = NULL, unsigned int uiCount = 1)</p>

<p class="NDLRefMemberDescription">Add a <a href=
"NiShaderConstantMap.htm"><span class=
"NDLSystemFont">NiShaderConstantMap::ObjectMappings</span></a>
shader constant to the uniforms for this shade-tree.</p>

<p class="NDLRefMemberFunction">virtual NiMaterialResource*
AddOutputAttribute(<a href=
"NiMaterialNode.htm">NiMaterialNode</a>* pkNode, const <a href=
"NiFixedString.htm">NiFixedString</a>&amp; kVariableName,
<a href="NiShaderAttributeDesc.htm#AttributeType_Enumerations">NiShaderAttributeDesc::AttributeType</a>
eType, unsigned int uiCount = 1)</p>

<p class="NDLRefMemberDescription">Add a custom extra data shader
constant to the uniforms for this shade-tree.</p>

<p class="NDLRefMemberFunction">virtual NiMaterialResource*
AddOutputGlobal(<a href="NiMaterialNode.htm">NiMaterialNode</a>*
pkNode,const <a href="NiFixedString.htm">NiFixedString</a>&amp;
kVariableName, <a href=
"NiShaderAttributeDesc.htm#AttributeType_Enumerations">NiShaderAttributeDesc::AttributeType</a>
eType,unsigned int uiCount = 1)</p>

<p class="NDLRefMemberDescription">Add a global attribute shader
constant to the uniforms for this shade-tree.</p>

<p class="NDLRefMemberFunction">unsigned int
GetHighestObjectOffset(<a href=
"NiShaderAttributeDesc.htm#ObjectType_Enumerations">NiShaderAttributeDesc::ObjectType</a>
eObjectType, <a href=
"NiFragmentMaterial.htm#RenderPassDescriptor">RenderPassDescriptor</a>*
pkRenderPasses, unsigned int uiCount)</p>

<p class="NDLRefMemberDescription">Search through the object
offsets for all render passes and find the highest offset thus
far for the given <span class=
"NDLSystemFont">ObjectType</span>.</p>

<p class="NDLRefMemberFunction">virtual <a href=
"NiMaterialNode.htm">NiMaterialNode</a>*
GetAttachableNodeFromLibrary(const <a href=
"NiFixedString.htm">NiFixedString</a>&amp; kNodeName)</p>

<p class="NDLRefMemberDescription">Find a material node from the
material libraries that matches the input name and clone it for
use in a shade-tree.</p>

<p class="NDLRefHead1">Notes</p>

<a name="ReturnCode" id="ReturnCode"></a><p class="NDLRefHead2">ReturnCode</p>

<p>Return code enumeration from methods in this class mean:</p>
<!--(Table)=========================================================-->

<table>
    <thead>
        <tr>
            <th>Enumeration</th>

            <th>Meaning</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><span class=
            "NDLSystemFont">RC_SUCCESS</span></td>

            <td>Function succeeded</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">RC_COMPILE_FAILURE_PIXEL</span></td>

            <td>Pixel shader failed to compile</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">RC_COMPILE_FAILURE_GEOMETRY</span></td>

            <td>Geometry shader failed to compile</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">RC_COMPILE_FAILURE_VERTEX</span></td>

            <td>Vertex shader failed to compile</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">RC_INVALID_MATERIAL</span></td>

            <td>Material was not properly configured</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">RC_INVALID_SHADER</span></td>

            <td>Shader was not properly configured</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">RC_INVALID_CONSTANTMAP</span></td>

            <td>Constant map was not properly configured</td>
        </tr>
    </tbody>
</table>

<a name="TextureMapSamplerType" id="TextureMapSamplerType"></a><p class="NDLRefHead2">TextureMapSamplerType</p>

<p>TextureMapSamplerType enumeration from methods in this class
mean:</p>
<!--(Table)=========================================================-->

<table>
    <thead>
        <tr>
            <th>Enumeration</th>

            <th>Meaning</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><span class=
            "NDLSystemFont">TEXTURE_SAMPLER_2D</span></td>

            <td>This is a 2D texture</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">TEXTURE_SAMPLER_CUBE</span></td>

            <td>This is a cubemap texture</td>
        </tr>
    </tbody>
</table>

<a name="Context" id="Context"></a><p class="NDLRefHead2">Context</p>

<p>This internal class stores the set of variables for the
currently compiling shader program.</p>
<pre>
class Context : public NiMemObject
{
public:
    <a href=
"NiMaterialConfigurator.htm">NiMaterialConfiguratorPtr</a> m_spConfigurator
    <a href=
"NiMaterialResourceProducerNode.htm">NiMaterialResourceProducerNodePtr</a> m_spStatics
    NiMaterialResourceProducerNodePtr m_spUniforms
    NiMaterialResourceProducerNodePtr m_spInputs
    NiMaterialResourceConsumerNodePtr m_spOutputs
    NiTArray&lt;NiMaterialResource*&gt; m_akVariables
}
</pre>

<a name="ObjectResourceOffset" id="ObjectResourceOffset"></a><p class="NDLRefHead2">ObjectResourceOffset</p>

<p>This internal class stores the offsets of Object-based
variables so that lights and other dynamic effects can be mapped
to their correct index at runtime.</p>
<pre>
class ObjectResourceOffset : public NiMemObject
{
public:
    ObjectResourceOffset();
    <a href=
"NiGPUProgram.htm#ProgramType">NiGPUProgram::ProgramType</a> m_eProgramType;
    <a href=
"NiShaderAttributeDesc.htm#ObjectType_Enumerations">NiShaderAttributeDesc::ObjectType</a> m_eObjectType;
    unsigned int m_uiOffset;
}
</pre>

<a name="RenderPassDescriptor" id="RenderPassDescriptor"></a><p class="NDLRefHead2">RenderPassDescriptor</p>

<p>This internal class describes a rendering pass.</p>
<pre>
class RenderPassDescriptor : public NiMemObject
{
public:
    RenderPassDescriptor()
    RenderPassDescriptor(RenderPassDescriptor&amp;)
    RenderPassDescriptor&amp; operator=(RenderPassDescriptor&amp; kOther)
    void Initialize();
 
    <a href=
"NiGPUProgramDescriptor.htm">NiGPUProgramDescriptor</a> m_kVertexDesc
    NiGPUProgramDescriptor m_kGeometryDesc
    NiGPUProgramDescriptor m_kPixelDesc
    bool m_bUsesNiRenderState
    bool m_bAlphaOverride
    bool m_bAlphaBlend;
    bool m_bResetObjectOffsets;
    <a href=
"NiTObjectSet.htm">NiTObjectSet</a>&lt;ObjectResourceOffset&gt; m_kObjectOffsets
    bool m_bUsePreviousSrcBlendMode
    bool m_bUsePreviousDestBlendMode
    <a href=
"NiAlphaProperty.htm#Alpha_Blending_Functions">NiAlphaProperty::AlphaFunction</a> m_eSrcBlendMode
    NiAlphaProperty::AlphaFunction m_eDestBlendMode
}
</pre>

<p class="NDLRefHead2">Fallback Functions</p>

<p>A fallback function allows an application to handle situations
where the generated shader does not properly compile.</p>

<p class="NDLRefMemberFunction">typedef bool
(*SHADERFALLBACKFUNC)(<a href=
"NiMaterialDescriptor.htm">NiMaterialDescriptor</a>*
pkMaterialDescriptor, ReturnCode eFailedRC, unsigned int
uiFailedPass, RenderPassDescriptor* pkRenderPasses, unsigned int
uiMaxCount, unsigned int&amp; uiCount, unsigned int&amp;
uiFunctionData)</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
