<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiMatrix3</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->

<!--(Begin Links)===================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiMatrix3</p>

<p class="NDLRefParentage">: public <a href=
"../../Reference/NiSystem/NiMemObject.htm"><span>NiMemObject</span></a></p>

<p class="NDLRefHeaderFile">&lt;NiMatrix3.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>This class is Gamebryo's representation of 3x3 matrices.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiMatrix3()</p>

<p class="NDLRefMemberDescription">Default constructor.
Constructs an <span class="NDLSystemFont">NiMatrix3</span>
leaving all matrix entries uninitialized.</p>

<p class="NDLRefMemberFunction">NiMatrix3(const <a href=
"NiPoint3.htm">NiPoint3</a>&amp; kCol0, const <a href=
"NiPoint3.htm">NiPoint3</a>&amp; kCol1, const <a href=
"NiPoint3.htm">NiPoint3</a>&amp; kCol2)</p>

<p class="NDLRefMemberDescription">Constructs a matrix by
columns.</p>

<p class="NDLRefHead1">Static Member Functions</p>

<p class="NDLRefMemberFunction">static void
TransformVertices(const NiMatrix3&amp; kRot, const <a href=
"NiPoint3.htm">NiPoint3</a>&amp; kTrn, unsigned int
uiVertexCount, const <a href=
"NiPoint3.htm">NiPoint3</a>* pkInVertex, <a href=
"NiPoint3.htm">NiPoint3</a>* pkOutVertex)</p>

<p class="NDLRefMemberDescription">Transforms the given array of
input vertices (<span class="NDLSystemFont">pkInVertex</span>,
which has length <span class=
"NDLSystemFont">uiVertexCount</span>) by the given rotation and
translation transforms, placing the result in the <span class=
"NDLSystemFont">pkOutVertex</span> array, which is assumed to be
allocated, to have at least <span class=
"NDLSystemFont">uiVertexCount</span> elements. The input and
output arrays must not be the same array.</p>

<p class="NDLRefMemberFunction">static void
TransformNormals(const NiMatrix3&amp; kRot,
unsigned int uiNormalCount, const <a href=
"NiPoint3.htm">NiPoint3</a>* pkInNormal, <a href=
"NiPoint3.htm">NiPoint3</a>* pkOutNormal)</p>

<p class="NDLRefMemberDescription">Transforms the given array of
input normals (<span class="NDLSystemFont">pkInNormal</span>,
which has length <span class=
"NDLSystemFont">uiNormalCount</span>) by the given rotation
transform, placing the result in the <span class=
"NDLSystemFont">pkOutNormal</span> array, which is assumed to be
allocated to have at least <span class=
"NDLSystemFont">uiNormalCount</span> elements. The input and
output arrays must not be the same array.</p>

<p class="NDLRefMemberFunction">static void
TransformVerticesAndNormals(const NiMatrix3&amp; kRot,
const <a href="NiPoint3.htm">NiPoint3</a>&amp; kTrn, unsigned int
uiCount, const <a href="NiPoint3.htm">NiPoint3</a>* pkInVertex,
<a href="NiPoint3.htm">NiPoint3</a>* pkOutVertex, const <a href=
"NiPoint3.htm">NiPoint3</a>* pkInNormal, <a href=
"NiPoint3.htm">NiPoint3</a>* pkOutNormal)</p>

<p class="NDLRefMemberDescription">Implements the equivalent of
the above two functions in a single call. The two input arrays
are assumed to be the same size. The input and output arrays must
not be the same array.</p>

<p class="NDLRefHead1">Operators</p>

<p class="NDLRefMemberFunction">bool operator== (const
NiMatrix3&amp; kMat) const</p>

<p class="NDLRefMemberDescription">This operator tests for exact
member-wise equality.</p>

<p class="NDLRefMemberFunction">bool operator!= (const
NiMatrix3&amp; kMat) const</p>

<p class="NDLRefMemberDescription">This operator tests for exact
member-wise inequality.</p>

<p class="NDLRefMemberFunction">NiMatrix3 operator+ (const
NiMatrix3&amp; kMat) const</p>

<p class="NDLRefMemberDescription">This operator implements
member-wise addition.</p>

<p class="NDLRefMemberFunction">NiMatrix3 operator- (const
NiMatrix3&amp; kMat) const</p>

<p class="NDLRefMemberDescription">This operator implements
member-wise subtraction.</p>

<p class="NDLRefMemberFunction">NiMatrix3 operator* (const
NiMatrix3&amp; kMat) const</p>

<p class="NDLRefMemberDescription">This operator implements
matrix multiplication.</p>

<p class="NDLRefMemberFunction">NiPoint3 operator* (const
<a href="NiPoint3.htm">NiPoint3</a>&amp; kPt) const</p>

<p class="NDLRefMemberDescription">This operator implements
transform of a point by a matrix.</p>

<p class="NDLRefMemberFunction">NiPoint4 operator* (const
<a href="NiPoint4.htm">NiPoint4</a>&amp; kPt) const</p>

<p class="NDLRefMemberDescription">This operator implements
transform of a point by a matrix.</p>

<p class="NDLRefMemberFunction">NiMatrix3 operator* (float
fScalar) const</p>

<p class="NDLRefMemberDescription">This operator implements
matrix scaling.</p>

<p class="NDLRefMemberFunction">friend NiPoint3 operator* (const
<a href="NiPoint3.htm">NiPoint3</a>&amp; kPt,
const NiMatrix3&amp; kMat)</p>

<p class="NDLRefMemberDescription">This operator implements
transformation of a point by the transpose of a matrix.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<a name="Row_and_Column_Access_Functions" id="Row_and_Column_Access_Functions"></a><p class="NDLRefHead2">Row and Column Access Functions</p>

<p class="NDLRefMemberFunction">void GetRow(unsigned int uiRow,
<a href="NiPoint3.htm">NiPoint3</a>&amp; kRow) const</p>

<p class="NDLRefMemberDescription">Get the row of the given
index; store in the given <a href="NiPoint3.htm">NiPoint3</a></p>

<p class="NDLRefMemberFunction">void SetRow(unsigned int uiRow,
const <a href="NiPoint3.htm">NiPoint3</a>&amp; kRow)</p>

<p class="NDLRefMemberDescription">Set the row of the given
index, using the given <a href="NiPoint3.htm">NiPoint3</a>
value:</p>

<p><span class="NDLSystemFont">mat[uiRow][0] = kRow.x;<br>
mat[uiRow][1] = kRow.y;<br>
mat[uiRow][2] = kRow.z;</span></p>

<p class="NDLRefMemberFunction">void GetRow(unsigned int uiRow,
float&amp; f0, float&amp; f1, float&amp; f2) const</p>

<p class="NDLRefMemberDescription">Get the row of the given
index; store in the given float values:</p>

<p><span class="NDLSystemFont">f0 = mat[uiRow][0];<br>
f1 = mat[uiRow][1];<br>
f2 = mat[uiRow][2];</span></p>

<p class="NDLRefMemberFunction">void SetRow(unsigned int uiRow,
float f0, float f1, float f2)</p>

<p class="NDLRefMemberDescription">Set the row of the given
index, using the given NiPoint3 value:</p>

<p><span class="NDLSystemFont">mat[uiRow][0] = f0;<br>
mat[uiRow][1] = f1;<br>
mat[uiRow][2] = f2;</span></p>

<p class="NDLRefMemberFunction">void GetRow(unsigned int uiRow,
float* pfRow) const</p>

<p class="NDLRefMemberDescription">Get the row of the given
index; store in the given array of floats</p>

<p class="NDLRefMemberFunction">void SetRow(unsigned int uiRow,
const float* pfRow)</p>

<p class="NDLRefMemberDescription">Set the row of the given
index, using the given array of floats</p>

<p class="NDLRefMemberFunction">void GetCol(unsigned int uiCol,
<a href="NiPoint3.htm">NiPoint3</a>&amp; kCol) const</p>

<p class="NDLRefMemberDescription">Get the column of the given
index; store in the given <span class="NDLSystemFont"><a href=
"NiPoint3.htm">NiPoint3</a></span></p>

<p class="NDLRefMemberFunction">void SetCol(unsigned int uiCol,
const <a href="NiPoint3.htm">NiPoint3</a>&amp; kCol)</p>

<p class="NDLRefMemberDescription">Set the column of the given
index, using the given <span class="NDLSystemFont"><a href=
"NiPoint3.htm">NiPoint3</a></span> value:</p>

<p><span class="NDLSystemFont">mat[0][uiCol] = kCol.x;<br>
mat[1][uiCol] = kCol.y;<br>
mat[2][uiCol] = kCol.z;</span></p>

<p class="NDLRefMemberFunction">void GetCol(unsigned int uiCol,
float&amp; f0, float&amp; f1, float&amp; f2) const</p>

<p class="NDLRefMemberDescription">Get the column of the given
index; store in the given float values:</p>

<p><span class="NDLSystemFont">f0 = mat[0][uiCol];<br>
f1 = mat[1][uiCol];<br>
f2 = mat[2][uiCol];</span></p>

<p class="NDLRefMemberFunction">void SetCol(unsigned int uiCol,
float f0, float f1, float f2)</p>

<p class="NDLRefMemberDescription">Set the column of the given
index, using the given <span class=
"NDLSystemFont">NiPoint3</span> value:</p>

<p><span class="NDLSystemFont">mat[0][uiCol] = f0;<br>
mat[1][uiCol] = f1;<br>
mat[2][uiCol] = f2;</span></p>

<p class="NDLRefMemberFunction">void GetCol(unsigned int uiCol,
float* pfCol) const</p>

<p class="NDLRefMemberDescription">Get the column of the given
index; store in the given array of floats</p>

<p class="NDLRefMemberFunction">void SetCol(unsigned int uiCol,
const float* pfCol)</p>

<p class="NDLRefMemberDescription">Set the column of the given
index, using the given array of floats</p>

<a name="Entry_Access_Functions" id="Entry_Access_Functions"></a><p class="NDLRefHead2">Entry Access Functions</p>

<p class="NDLRefMemberFunction">float GetEntry(unsigned int
uiRow, unsigned int uiCol) const</p>

<p class="NDLRefMemberDescription">Return the entry for the given
row/column indices</p>

<p class="NDLRefMemberFunction">void SetEntry(unsigned int uiRow,
unsigned int uiCol, float fEntry)</p>

<p class="NDLRefMemberDescription">Set the entry at the given
row/column indices to the given entry</p>

<a name="Matrix_Initialization_Functions" id="Matrix_Initialization_Functions"></a><p class="NDLRefHead2">Matrix Initialization Functions</p>

<p class="NDLRefMemberFunction">void MakeZero()</p>

<p class="NDLRefMemberDescription">Sets the matrix to the zero
matrix</p>

<p class="NDLRefMemberFunction">void MakeIdentity()</p>

<p class="NDLRefMemberDescription">Sets the matrix to the
identity matrix</p>

<p class="NDLRefMemberFunction">void MakeDiagonal(float fDiag0,
float fDiag1, float fDiag2)</p>

<p class="NDLRefMemberDescription">Sets the matrix to a pure
diagonal matrix with the given diagonal entries in row/column
<span class="NDLSystemFont">0</span>, <span class=
"NDLSystemFont">1</span> and <span class="NDLSystemFont">2</span>
respectively.</p>

<p class="NDLRefMemberFunction">void MakeXRotation(float
fAngle)</p>

<p class="NDLRefMemberDescription">Sets the matrix to a rotation
about the X-axis, with the angle given in radians. See "Notes"
below for rotation direction discussion.</p>

<p class="NDLRefMemberFunction">void MakeYRotation(float
fAngle)</p>

<p class="NDLRefMemberDescription">Sets the matrix to a rotation
about the Y-axis, with the angle given in radians. See "Notes"
below for rotation direction discussion.</p>

<p class="NDLRefMemberFunction">void MakeZRotation(float
fAngle)</p>

<p class="NDLRefMemberDescription">Sets the matrix to a rotation
about the Z-axis, with the angle given in radians. See "Notes"
below for rotation direction discussion.</p>

<p class="NDLRefMemberFunction">void MakeRotation(float fAngle,
float x, float y, float z)</p>

<p class="NDLRefMemberDescription">Sets the matrix to a rotation
about the given axis (which should be normalized), with the angle
given in radians. See "Notes" below for rotation direction
discussion.</p>

<p class="NDLRefMemberFunction">void MakeRotation(float fAngle,
const <a href="NiPoint3.htm">NiPoint3</a>&amp; kAxis)</p>

<p class="NDLRefMemberDescription">Sets the matrix to a rotation
about the given axis (which should be normalized), with the angle
given in radians. See "Notes" below for rotation direction
discussion.</p>

<a name="Utilities" id="Utilities"></a><p class="NDLRefHead2">Utilities</p>

<p class="NDLRefMemberFunction">NiMatrix3 Inverse() const</p>

<p class="NDLRefMemberDescription">Returns the inverse of the
calling matrix. Does not change the calling matrix.</p>

<p class="NDLRefMemberFunction">bool Inverse(NiMatrix3&amp; kInv)
const</p>

<p class="NDLRefMemberDescription">Places the inverse of the
calling matrix in the inv argument. Returns <span class=
"NDLSystemFont">true</span> if the matrix could be inverted,
<span class="NDLSystemFont">false</span> if not.</p>

<p class="NDLRefMemberFunction">NiMatrix3 Transpose() const</p>

<p class="NDLRefMemberDescription">Returns the transpose of the
calling matrix. Note that this function can often be
avoided&mdash;see "<a href=
"NiMatrix3.htm#Mathematical_Operations">TransposeTimes</a>" below
and the <span class="NDLSystemFont"><a href=
"NiPoint3.htm">NiPoint3</a>*NiMatrix3</span> operator above.</p>

<p class="NDLRefMemberFunction">void
ExtractAngleAndAxis(float&amp; fAngle, float&amp; x, float&amp;
y, float&amp; z) const</p>

<p class="NDLRefMemberDescription">Returns the angle (in radians)
and axis of the given matrix, which must be a rigid, normalized
rotation matrix.</p>

<a name="Euler_Angle_Functions" id="Euler_Angle_Functions"></a><p class="NDLRefHead2">Euler Angle Functions</p>

<p class="NDLRefMemberFunction">bool ToEulerAngles###(float&amp;
f#Angle, float&amp; f#Angle, float&amp; f#Angle) const</p>

<p class="NDLRefMemberDescription">Converts the matrix to a
series of rotations about the specified axes (indicated by the #
signs, which indicate some ordering of X, Y, and Z). The matrix
must be orthonormal in order for these functions to return
meaningful results. The return value indicates whether there was
a unique factorization.</p>

<p class="NDLRefMemberFunction">void FromEulerAngles###(float
f#Angle, float f#Angle, float f#Angle)</p>

<p class="NDLRefMemberDescription">Builds the matrix from the
series of rotations about the specified axes (indicated by the #
signs, which indicate some ordering of X, Y, and Z).</p>

<a name="Mathematical_Operations" id="Mathematical_Operations"></a><p class="NDLRefHead2">Mathematical Operations</p>

<p class="NDLRefMemberFunction">bool Reorthogonalize()</p>

<p class="NDLRefMemberDescription">This routine should only be
applied to rotation matrices. It implements Gram-Schmidt
orthogonalization (the QR algorithm) and replaces the old
rotation matrix with the orthogonal part Q of the
decomposition.</p>

<p class="NDLRefMemberFunction">NiMatrix3 TransposeTimes(const
NiMatrix3&amp; kMat) const</p>

<p class="NDLRefMemberDescription">Multiplies the transpose of
the 'this' matrix times the input matrix, and returns the
result.</p>

<p class="NDLRefMemberFunction">NiMatrix3 Congruence(const
NiMatrix3&amp; kRot) const</p>

<p class="NDLRefMemberDescription">Computes the congruence
transformation <span class=
"NDLSystemFont">kRot * this * Transpose(kRot)</span>. Note that
the input matrix must be orthogonal.</p>

<p class="NDLRefMemberFunction">void EigenSolveSymmetric(float
afEigenvalue[3], NiPoint3 akEigenvector[3])</p>

<p class="NDLRefMemberDescription">Computes the eigenvalues and
corresponding eigenvectors of the calling matrix, which must be
symmetric.</p>

<p class="NDLRefHead1">Notes</p>

<a name="Rotation_Direction" id="Rotation_Direction"></a><p class="NDLRefHead2">Rotation Direction</p>

<p>All <span class="NDLSystemFont">NiMatrix3</span> rotation
creation functions create rotation matrixes whose rotations are
clockwise about the given axis when looking toward the origin
(assuming a positive rotation angle). In other words, a 90-degree
rotation of <span class="NDLSystemFont">[0,1,0]</span> about
<span class="NDLSystemFont">[0,0,1]</span> gives the vector
<span class="NDLSystemFont">[1,0,0]</span>.</p>

<p>See <a href=
"../../Programmer/General_Topics/Transformations_and_Coordinate_Systems.htm">
Transformations and Coordinate Systems</a> for additional
reference.</p>

<a name="Convenience_Objects" id="Convenience_Objects"></a><p class="NDLRefHead2">Convenience Objects</p>

<p>The following public static constants are defined for
application convenience.</p>

  <table class="NDLNoteContainer" width="100%">
      <tr align="left">
          <td class="NDLNoteContainerTD"><p class="NDLHeadingNoteContainer">Caution</p>
              <div class="NDLNote">Since these constants are static, and not
<span class="NDLSystemFont">#defines</span>, application must be
careful not to reference them in static data declarations, as
they may not be defined prior to the start of the "main"
function).
              </div>
          </td>
      </tr>
  </table>

<!--(Table)=========================================================-->
<table>
    <thead>
        <tr>
            <th>Static Object</th>

            <th>Value</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><span class=
            "NDLSystemFont">NiMatrix3::ZERO</span></td>

            <td><span class="NDLSystemFont">NiMatrix3(0, 0, 0, 0,
            0, 0, 0, 0, 0)</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">NiMatrix3::IDENTITY</span></td>

            <td><span class="NDLSystemFont">NiMatrix3(1, 0, 0, 0,
            1, 0, 0, 0, 1)</span></td>
        </tr>
    </tbody>
</table>

<a name="Efficiency_Macros" id="Efficiency_Macros"></a><p class="NDLRefHead2">Efficiency Macros</p>

<p>The <span class="NDLSystemFont">NiMatrix3</span> class also
declares a set of macros for simple and common matrix-matrix and
matrix-vector functions. These macros are provided for
applications requiring matrix and vector math in tight loops,
where the compiler optimizer cannot be trusted to optimize inline
functions. These macros should be used only if the inline
functions and operators appear to be an application performance
bottleneck. See the <span class="NDLSystemFont">NiMatrix3</span>
header for details.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
