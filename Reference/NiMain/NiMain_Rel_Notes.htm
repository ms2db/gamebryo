<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiMain Library Release Notes</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>NiMain Library Release Notes</h1>

<p><a href="#Added_Features_and_Fixed_Bugs">Added Features,
Changed Behavior, and Fixed Bugs</a></p>

<p><a href="#Known_Issues_and_Limitations">Known Issues and
Limitations</a></p><a name="Added_Features_and_Fixed_Bugs" id=
"Added_Features_and_Fixed_Bugs"></a>

<h2>Added Features, Changed Behavior, and Fixed Bugs</h2>

<h3>Gamebryo LightSpeed 3.2</h3>

<ul>
    <li>Several member methods of the <a href="../../Reference/NiMain/NiShadowTechnique.htm"
    class="NDLSystemFont">NiShadowTechnique</a> class have been altered to take a
    <span class="NDLSystemFont">LightType</span> argument, so that the depth buffer format may be
    set per light type for example. Additional methods have also been added to control filtering
    and clamping properties.  Custom shadow technique implementations will need to adjust to
    initialize the properties for each light type, instead of just once for the entire technique.
    <br/>
    <br/>
    As a result of these changes, the <a href="../../Reference/NiMain/NiShadowManager.htm"
    class="NDLSystemFont">NiShadowManager</a> methods <span class="NDLSystemFont">CreateShadowMap
    </span> and <span class="NDLSystemFont">CreateShadowCubeMap</span> now take a pointer to the
    technique and light type, instead of explicitly listing out all of the configuration
    parameters.</li>
    
    <li>The <a href="../../Reference/NiMain/NiDirectionalShadowWriteMaterial.htm"
    class="NDLSystemFont">NiDirectionalShadowWriteMaterial</a>,
    <a href="../../Reference/NiMain/NiPointShadowWriteMaterial.htm" class="NDLSystemFont">
    NiPointShadowWriteMaterial</a>, and
    <a href="../../Reference/NiMain/NiSpotShadowWriteMaterial.htm" class="NDLSystemFont">
    NiSpotShadowWriteMaterial</a> classes have had their RTTI declarations updated to correctly
    reflect the fact that they now inherit from
    <a href="../../Reference/NiMain/NiStandardMaterial.htm" class="NDLSystemFont">
    NiStandardMaterial</a>, not <a href="../../Reference/NiMain/NiFragmentMaterial.htm"
    class="NDLSystemFont">NiFragmentMaterial</a>.</li>

    <li>Fixed an issue in <span class="NDLSystemFont">NiNode::PushLocalEffects</span> so that the
    effects manager is not updated when <span class="NDLSystemFont">bCopyOnChange</span> is false.
    This prevents a possible crash in lighting code due to a mismatch in light tracking information
    between effects and nodes.</li>
</ul>

<h3>Gamebryo LightSpeed 3.1.1</h3>

<ul>
    <li>The enumeration <span class="NDLSystemFont"><a href=
    "../../Reference/NiMain/NiGPUProgram.htm#ProgramType">NiGPUProgram::ProgramType</a></span> was extended
    to include the D3D11 shader program types.</li>

    <li><span class="NDLSystemFont"><a href=
    "../../Reference/NiMain/NiShaderRequirementDesc.htm">NiShaderRequirementsDesc</a></span> was extended
    to provide additional D3D11-specific requirements, such as feature level and compute shader level.</li>    
</ul>

<h3>Gamebryo LightSpeed 3.1</h3>

<ul>
    <li>The contract for the TheAllocator argument to NiTMapBase has been changed to include a constant SizeOfAllocNode.  This is used in a safety-check that catches potential issues where a selection of TKEY and TheAllocator are incompatible.  For a custom allocator used with a NiTMapBase derived class, the code change will be similar to the following:
    <pre>public:
    enum Constant { SizeOfAllocNode = sizeof(AllocNode) };</pre></li>
    <li>New cross-platform functions <span class="NDLSystemFont">NiRenderer::CreateWindowRenderTargetGroup</span>,
    <span class="NDLSystemFont">NiRenderer::RecreateWindowRenderTargetGroup</span>,
    <span class="NDLSystemFont">NiRenderer::ReleaseWindowRenderTargetGroup</span>, and 
    <span class="NDLSystemFont">NiRenderer::GetWindowRenderTargetGroup</span> were added to the 
    <span class="NDLSystemFont"><a href="../../Reference/NiMain/NiRenderer.htm">NiRenderer</a></span> class
    to enable management of window-specific swap chains without requiring renderer-specific code.

    The class-specific renderer enumerations in <span class="NDLSystemFont"><a href=
    "../../Reference/NiMain/NiPersistentSrcTextureRendererData.htm">NiPersistentSrcTextureRendererData</a></span> and 
    <span class="NDLSystemFont"><a href="../../Reference/NiMain/NiDevImageConverter.htm">NiDevImageConverter</a></span> 
    were replaced with the <span class="NDLSystemFont"><a href=
    "../../Reference/efd/efd__SystemDesc.htm">efd::SystemDesc::RendererID</a></span> enumeration. This includes
    the functions <span class="NDLSystemFont">NiPersistentSrcTextureRendererData::Create</span> 
    and the return value of <span class="NDLSystemFont">NiPersistentSrcTextureRendererData::GetTargetPlatform</span>.</li>

    <li>The class-specific renderer enumerations in <span class="NDLSystemFont"><a href=
    "../../Reference/NiMain/NiPersistentSrcTextureRendererData.htm">NiPersistentSrcTextureRendererData</a></span> and 
    <span class="NDLSystemFont"><a href="../../Reference/NiMain/NiDevImageConverter.htm">NiDevImageConverter</a></span> 
    were replaced with the <span class="NDLSystemFont"><a href=
    "../../Reference/efd/efd__SystemDesc.htm">efd::SystemDesc::RendererID</a></span> enumeration. This includes
    the functions <span class="NDLSystemFont">NiPersistentSrcTextureRendererData::Create</span> 
    and the return value of <span class="NDLSystemFont">NiPersistentSrcTextureRendererData::GetTargetPlatform</span>.</li>

    <li><a href=
    "NiAVObject.htm">NiAVObject</a>::UpdateSelectedDownwardPass()
    and UpdateRigidDownwardPass() now both respect <a href=
    "NiUpdateProcess.htm">NiUpdateProcess</a>::GetUpdateControllers()
    during the update process. If GetUpdateControllers() is
    false, then controllers will no longer be updated.</li>
    
    <li>Added callback functionality to <a href="NiRenderer.htm">NiRenderer</a>
    which allows the warning, error, and message notifications that it generates
    to be propagated to tools or user code.</li>
    
    <li>Fixed thread safety issues in <span class="NDLSystemFont">NiMaterial</span>, <span class="NDLSystemFont">NiSingleShaderMaterial</span>, and <span class="NDLSystemFont">NiShaderFactory</span>.</li>    
    
    <li>Fixed a texture memory leak and thread safety issue in <span class="NDLSystemFont">NiNIFImageReader</span>.</li>    
</ul>

<h3>Gamebryo LightSpeed 3.0</h3>

<ul>
    <li><a href="NiNode.htm">NiNode</a>::AttachEffect() and
    DetachEffect() now return a boolean indicating if the
    operation was necessary. For example if the given effect is
    already attached, the function will return false. The
    returned value can be used to decide if a call to
    UpdateEffects is necessary. <a href=
    "NiDynamicEffect.htm">NiDynamicEffect</a>::AttachAffectedNode()
    and DetachAffectedNode were updated similarly.</li>

    <li>Added the <span class="NDLSystemFont">AddValue</span>
    function to the <span class="NDLSystemFont"><a href=
    "NiStringsExtraData.htm">NiStringsExtraData</a></span>
    class.</li>

    <li>Refactored shader loading so that there are fewer
    differences between dynamically linked and statically linked
    libraries. This change is backwards compatible, so any games
    using the older method will still continue to work.
    Statically linked executables must include the top-level
    header for the shader library or parser. See <a href=
    "../../Learn/Tutorials/Tutorial_3__Shaders.htm">Tutorial03</a>
    for more information.</li>

    <li>Added the <span class="NDLSystemFont">NiAVObjectRawList
    class</span>. This is an <span class=
    "NDLSystemFont">NiTPointerList</span> consisting of
    <span class="NDLSystemFont">NiAVObject</span> pointers
    (distinct from <span class=
    "NDLSystemFont">NiAVObjectList</span> which is an
    <span class="NDLSystemFont">NiTPointerList</span> consisting
    of <span class="NDLSystemFont">NiAVObject</span> smart
    pointers).</li>

    <li>The sorting of objects by NiBackToFrontSortProcessor has
    been changed to make the sorting of objects with equal depths
    consistent with the sorting done by NiBackToFrontAccumulator.
    Also, note that both NiBackToFrontSortProcessor and
    NiBackToFrontAccumulator sort so that the "back-most" object
    appears last in the array.</li>

    <li>Removed the method Do_RenderMesh from NiRenderer. The
    functionality in NiRenderer::Do_RenderMesh has been replaced
    with the method NiShader::Do_RenderMeshes. These change
    allows unique NiShader objects to be created to perform
    custom rendering.</li>

    <li>Added the <a href=
    "NiShaderSortProcessor.htm">NiShaderSortProcessor</a> class,
    which is now the new default list processor for all
    NiApplication based applications. The <a href=
    "NiShaderSortProcessor.htm">NiShaderSortProcessor</a> groups
    all opaque objects by their shader and manually calls
    NiShader::Do_RenderMeshes. This allows for NiShader
    implementations to perform batch rendering optimizations. Note
    this means that opaque objects will not always be rendered in
    scene graph order. Please see the <a href=
    "NiShaderSortProcessor.htm">NiShaderSortProcessor</a>
    reference documenation for more information about rendering
    order.</li>

    <li>Added the concept of different rendering phases to
    <a href="NiRenderer.htm">NiRenderer</a> via
    NiRenderer::RenderingPhases. Rendering phases are used to
    define what rendering work needs to be performed. For
    example, after the first NiMesh in a group of meshes is
    rendered via <a href=
    "NiShader.htm">NiShader</a>::Do_RenderMeshes the rendering
    phase PHASE_PER_SHADER is disabled. This means that no
    rendering work defined as PHASE_PER_SHADER needs to be
    performed again for the current group of NiMesh objects that
    are being rendered.</li>

    <li>Added the <a href="NiShadowSortProcessor.htm" class=
    "NDLSystemFont">NiShadowSortProcessor</a> class; which is now
    the default list processor for shadow clicks on shader-based
    platforms. This allows RenderMeshes style optimizations to
    occur for shadow steps as well.</li>

    <li>Added the <a href=
    "NiDynamicEffectStateManager.htm">NiDynamicEffectStateManager</a>
    class. The NiDynamicEffectStateManager is responsible for
    ensuring perfect sharing of NiDynamicEffectState objects
    across scene graphs. These changes makes it possible to
    perform a simple pointer compare to see if two
    NiDynamicEffectState references are identical. The ability to
    perform simple NiDynamicEffectState pointer compares is used
    <a href="NiShaderSortProcessor.htm">NiShaderSortProcessor</a>
    to group objects by their effect state.</li>

    <li>Added support for parallel split shadow mapping (PSSM)
    via the <a href=
    "NiPSSMShadowClickGenerator.htm">NiPSSMShadowClickGenerator</a>
    class. Parallel split shadow mapping is a shadow mapping
    algorithm designed to work for large outdoor scenes.</li>

    <li>Fixed an issue with rendering shadows for scenes contains
    <a href="NiLODNode.htm">NiLODNode</a> objects. Previously all
    NiLODNode children would be rendered to the shadow map. Now
    the LOD for a NiLODNode will be computed using the scene
    camera while rendering shadows. Only the single computed LOD
    will be rendered to the shadow map.</li>

    <li>Fixed a possible crash that could occur while background
    loading a NIF that contains NiShadowGenerator objects.</li>

    <li>Added the option to disable shadow map pooling to the
    NiShadowManager.</li>

    <li>Added <span class=
    "NDLSystemFont">NiAVObject::GetRoot()</span> which will
    return the root <a href="NiAVObject.htm">NiAVObject</a>.</li>

    <li>Added profile marker support to the <a href=
    "NiRenderer.htm" class="NDLSystemFont">NiRenderer</a> class
    (typically accessed via the <span class=
    "NDLSystemFont">EE_PUSH_GPU_MARKER</span> and <span class=
    "NDLSystemFont">EE_POP_GPU_MARKER</span> macros). The marker
    API is currently implemented on the PS3, Xbox 360, DX9 and
    DX10 renderers.</li>

    <li>Render clicks issue and pop named markers (the marker
    will be the same as the result of <span class=
    "NDLSystemFont">GetName()</span>).</li>

    <li>Improved the robustness of <span class=
    "NDLSystemFont">NiPersistentSrcTextureData::IsEqual()</span>.</li>

    <li>The <span class=
    "NDLSystemFont">NiMaterialConfigurator</span> class now
    performs a dead-code stripping pass to recursively remove any
    code fragments which do not contribute to the output. There
    is a special exemption for nodes that have no outputs, so
    that a node with only 'side-effects' but no outputs such as a
    texkill or cull fragment can be preserved.</li>

    <li>Added <span class=
    "NDLSystemFont">BeginReadMaterialList()</span> and
    <span class="NDLSystemFont">EndReadMaterialList()</span> to
    <a href="NiMaterial.htm"><span class=
    "NDLSystemFont">NiMaterial</span></a> to provide thread-safe
    access to the material list. These methods need to be used
    around <span class=
    "NDLSystemFont">GetFirstMaterialIter()</span> and
    <span class="NDLSystemFont">GetNextMaterial()</span> calls to
    ensure the list is not changed by one thread while being read
    by another.</li>

    <li>The <span class="NDLSystemFont">RenderFrame</span>,
    <span class="NDLSystemFont">RenderClick</span>, and
    <span class="NDLSystemFont">RenderStep</span> classes each
    have an added method called <span class=
    "NDLSystemFont">ReleaseCaches()</span> which may be used to
    free any contained memory caches such as visibility lists or
    other acceleration structures.</li>

    <li>Some classes in NiMain have been moved to the Foundation
    library, but for each a <a href=
    "../../Convert/Announce/Foundation_Bridge_Layer.htm">bridge
    layer</a> wrapper class remains in NiMain to provide
    NiStream-based serialization support and to present an
    equivalent interface.</li>

    <li>Node-based containers now maintain a per-thread free list
    by default on all platforms except for the Wii. The
    multi-thread allocator behavior may be altered by changing
    the value of <span class=
    "NDLSystemFont">EE_USE_PER_THREAD_ALLOCATOR_POOLS</span> in
    the header efd/OS.h.</li>

    <li>The <a href=
    "NiDevImageConverter.htm">NiDevImageConverter</a> supports
    mip map generation for more 8-bit color formats.</li>

    <li>Fixed problems with the <span class=
    "NDLSystemFont">IsEqual</span> function in <span class=
    "NDLSystemFont">NiExtraData</span>-derived classes. The
    base-class <span class="NDLSystemFont">IsEqual</span> was not
    being called, resulting in extra data objects with equal
    values but different keys being reported as equal.</li>
</ul>

<h3>Gamebryo 2.6.0</h3>

<ul>
    <li>Added <span class="NDLSystemFont"><a href=
    "NiOutputStreamDescriptor.htm">NiOutputStreamDescriptor</a></span>
    and <span class="NDLSystemFont"><a href=
    "NiStreamOutSettings.htm">NiStreamOutSettings</a></span> to
    expose stream-out functionality in the D3D10 renderer.</li>

    <li>Added <span class="NDLSystemFont"><a href=
    "NiPrimitiveType.htm">NiPrimitiveType</a></span> class to
    define the various primitive topologies supported by
    Gamebryo.</li>

    <li>Added <span class="NDLSystemFont"><a href=
    "NiQuaternion.htm">NiQuaternion</a>::FromAngleAxesXYZ</span>
    to quickly set the quaternion from Euler angles in XYZ
    order.</li>

    <li>Added a new semantic type, <span class=
    "NDLSystemFont">E_DISPLAYLIST</span>, to the list of
    semantics in <span class="NDLSystemFont"><a href=
    "NiCommonSemantics.htm">NiCommonSemantics</a></span>.</li>
</ul>

<h3>Gamebryo 2.5.0</h3>

<ul>
    <li>Added a resize function to <span class=
    "NDLSystemFont"><a href="NiTMap.htm">NiTMap</a></span> and
    related classes which dynamically resizes the hash
    table.</li>

    <li>Changed <span class="NDLSystemFont"><a href=
    "NiScreenLODData.htm">NiScreenLODData</a></span> to no longer
    serialize its world bound because it is computed during
    Update.</li>

    <li>Added <span class="NDLSystemFont"><a href=
    "NiImageConverter.htm">NiImageConverter</a>::CanReadImageFile</span>
    to act in a similar manner to the version found in
    <span class="NDLSystemFont"><a href=
    "NiDevImageConverter.htm">NiDevImageConverter</a></span>.</li>

    <li>Added additional failure cases (with unique replacement
    images) to the image conversion process. The new cases
    represent cases where the texture file was found but is an
    unsupported file format, or the texture file was found but
    failed to correctly load.</li>

    <li>Added requirement for binary users of Gamebryo to embed
    their license code into the application, using the
    <span class="NDLSystemFont">NiEmbedGamebryoLicenseCode</span>
    macro from <span class="NDLSystemFont">NiLicense.h</span>
    .</li>

    <li>Added new utility class <span class=
    "NDLSystemFont"><a href=
    "NiSemanticAdapterTableParser.htm">NiSemanticAdapterTableParser</a></span>
    to convert strings into semantic adapter tables.</li>

    <li><span class="NDLSystemFont"><a href=
    "NiShader.htm">NiShader</a>::GetVertexInputSemantics</span>
    and <span class="NDLSystemFont"><a href=
    "NiMaterial.htm">NiMaterial</a>::GetVertexInputSemantics</span>
    have been removed, as packing is no longer handled at
    runtime.</li>

    <li>Resolved issue where compressed texture files (e.g.,
    DXT1) were being blown out to 32-bit for
    DX9-platform-specific textures.</li>

    <li>Resolved two leaks in the <span class=
    "NDLSystemFont">NiDevImageConverter</span>.</li>

    <li><span class="NDLSystemFont"><a href=
    "NiTPtrSet.htm">NiTPtrSet::RemoveAll</a></span> now only
    zeros the used entires, rather than all allocated
    entries.</li>

    <li><span class="NDLSystemFont"><a href=
    "NiDefaultShadowClickGenerator.htm">NiDefaultShadowClickGenerator</a></span>
    and the three provided <span class="NDLSystemFont"><a href=
    "NiShadowTechnique.htm">NiShadowTechnique</a></span> objects
    (<span class=
    "NDLSystemFont">NiStandardShadowTechnique</span>,
    <span class="NDLSystemFont">NiPCFShadowTechnique</span>, and
    <span class="NDLSystemFont"><a href=
    "NiVSMShadowTechnique.htm">NiVSMShadowTechnique</a></span>)
    have been adjusted to improve shadow quality. Most notably is
    a dramatic improvement of the near/far clipping plane ratio
    used while rendering shadow maps. Note some scenes may
    require light's shadow bias to be adjusted to better fit the
    improved near/far clipping plane ratio.</li>

    <li><span class="NDLSystemFont">NiDevImageConverter</span>
    will now successfully convert textures from one bump map
    format to another.</li>

    <li><span class="NDLSystemFont"><a href=
    "NiGeometry.htm">NiGeometry</a></span>, <span class=
    "NDLSystemFont"><a href=
    "NiGeometryData.htm">NiGeometryData</a></span>, and all
    classes derived from these classes have been replaced by
    <span class="NDLSystemFont"><a href=
    "NiRenderObject.htm">NiRenderObject</a></span> and
    <span class="NDLSystemFont"><a href=
    "../NiMesh/NiMesh.htm">NiMesh</a></span>. <span class=
    "NDLSystemFont"><a href=
    "NiSkinInstance.htm">NiSkinInstance</a></span> has been
    replaced by <span class="NDLSystemFont"><a href=
    "../NiMesh/NiSkinningMeshModifier.htm">NiSkinningMeshModifier</a></span>.
    See the <a href=
    "../../Convert/Previous/Converting_to_Gamebryo_2_5_Overview.htm#Changes_to_NiGeometry">
    conversion guide</a> for details, and see the <a href=
    "../NiMesh/NiMesh_Rel_Notes.htm">NiMesh Library Release
    Notes</a> to learn more about the new features enabled by
    <span class="NDLSystemFont">NiMesh</span> and <span class=
    "NDLSystemFont">NiMeshModifier</span>.</li>

    <li>The <span class="NDLSystemFont"><a href=
    "NiAVObject.htm#UpdateFunctions">NiAVObject::Update(float
    fTime, bool bUpdateControllers = true)</a></span> and
    <span class="NDLSystemFont">NiAVObject::UpdateSelected(float
    fTime)</span> functions have been deprecated. Application
    should switch to <span class=
    "NDLSystemFont">NiAVObject::Update(NiUpdateProcess&amp;
    kUpdate)</span> and <span class=
    "NDLSystemFont">NiAVObject::UpdateSelected(NiUpdateProcess&amp;
    kUpdate)</span>. This is particularly important for
    applications that call update from multiple threads. See the
    <a href=
    "../../Convert/Previous/Converting_to_Gamebryo_2_5_Overview.htm">
    conversion guide</a> for details.</li>

    <li><span class="NDLSystemFont">NiVerifyStaticCast</span> has
    been added to <span class="NDLSystemFont"><a href=
    "NiRTTI.htm">NiRTTI</a></span>. It performs a static cast and
    will assert in debug builds if the cast was not valid.</li>

    <li>Cloning an <span class="NDLSystemFont"><a href=
    "NiNode.htm">NiNode</a></span> object will now preserve NULL
    children in the child array instead of compacting the child
    array in the clone.</li>

    <li><span class="NDLSystemFont">NiNode::IsEqual</span> has
    been updated to ignore the ordering of dynamic effects. These
    changes result in a positive return value from <span class=
    "NDLSystemFont">IsEqual</span> under more circumstances which
    is desirable since <span class="NDLSystemFont">IsEqual</span>
    should return true for cloned and streamed scene graphs.
    Note, however, that the order of dynamic effects may differ
    which can affect rendering. Additionally, cloning with
    asymmetrical cloning relationships on scene graphs that
    reference external dynamic effects may result in those effect
    relationships not cloning which will cause <span class=
    "NDLSystemFont">IsEqual</span> to return false. Please refer
    to <span class="NDLSystemFont"><a href=
    "NiCloningProcess.htm">NiCloningProcess</a></span> for more
    information on cloning relationships.</li>

    <li>The <span class="NDLSystemFont"><a href=
    "NiTPool.htm">NiTPool</a></span> class has been modified to
    assert when <span class=
    "NDLSystemFont">NiTPool::ReleaseObject</span> is called twice
    with the same object, indicating an attempt to free the
    object twice. This enables a significant performance
    improvement when objects are released.</li>

    <li>Removed the <span class=
    "NDLSystemFont">IsVertexController()</span> method from
    <span class="NDLSystemFont">NiTimeController</span> because
    it is no longer needed. Its purpose was to set the NiGeometry
    consistency flag.</li>

    <li>The <span class="NDLSystemFont">NiVectorExtraData</span>
    class has been marked as deprecated and should no longer be
    used by applications. While this class remains in the engine
    for Gamebryo 2.5, it will be removed from the next version of
    Gamebryo, since <span class="NDLSystemFont"><a href=
    "NiFloatsExtraData.htm">NiFloatsExtraData</a></span> is a
    more general class with the same functionality, that is fully
    supported in the shader system.</li>
</ul>

<h3>Gamebryo 2.3.0</h3>

<ul style="list-style: disc;" type="disc">
    <li>The <a href=
    "Ni2DBuffer.htm#MultiSamplePreference"><span class=
    "NDLSystemFont">Ni2DBuffer::MultiSamplePreference</span></a>
    setting was changed from an enumeration to a typedef'd
    unsigned short. This allows the full spectrum of multisample
    settings to be described in a cross-platform manner, rather
    than having to enumerate all possible multisample settings.
    The documentation for the new type describes how it can be
    used. The existing enumerations have been converted into
    static const instances of the new type that have the same
    meaning, to minimize the amount of application code that
    needs to be updated in response to this change.</li>

    <li>A new enumeration, <a href=
    "NiCloningProcess.htm#CloneRelationBehavior"><span class=
    "NDLSystemFont">CloneRelationBehavior</span></a>, was added
    to <span class="NDLSystemFont"><a href=
    "NiCloningProcess.htm">NiCloningProcess</a></span>, along
    with two member variables that control cloning behavior for
    various relations in the scene graph. In particular, the
    behavior for <span class="NDLSystemFont"><a href=
    "NiNode.htm">NiNode</a></span> cloning of referenced
    <span class="NDLSystemFont"><a href=
    "NiDynamicEffect.htm">NiDynamicEffect</a></span> objects,
    <span class="NDLSystemFont"><a href=
    "NiDynamicEffect.htm">NiDynamicEffect</a></span> cloning of
    referenced <span class="NDLSystemFont"><a href=
    "NiNode.htm">NiNode</a></span> objects, and <span class=
    "NDLSystemFont"><a href=
    "NiShadowGenerator.htm">NiShadowGenerator</a></span> cloning
    of referenced <span class="NDLSystemFont"><a href=
    "NiNode.htm">NiNode</a></span> objects are controlled by
    these new member variables. The new cloning default is to
    only clone a relation to another object if the referenced
    object was also cloned. See the <a href=
    "../../Convert/Previous/Converting_to_Gamebryo_2_3_Overview.htm">
    conversion documentation</a> for more information about how
    this behavior has changed from previous Gamebryo
    releases.</li>

    <li>A new enumeration, <span class=
    "NDLSystemFont">PROGRAM_GEOMETRY</span>, has been added to
    the <span class="NDLSystemFont"><a href=
    "NiGPUProgram.htm">NiGPUProgram</a>::ProgramType</span>
    enumerations to represent geometry shaders.</li>

    <li>The <span class="NDLSystemFont">REP_FIXED</span> value in
    the <span class="NDLSystemFont"><a href=
    "NiPixelFormat.htm">NiPixelFormat</a>::Representation</span>
    enumeration has been renamed to <span class=
    "NDLSystemFont">REP_NORM_INT</span> to reflect the fact that
    it actually represents normalized integers. In addition, the
    <span class="NDLSystemFont">REP_INT</span> enumeration was
    added to describe non-normalized integers.</li>

    <li>The <span class="NDLSystemFont"><a href=
    "NiPixelFormat.htm">NiPixelFormat</a></span> class can now
    differentiate between pixel formats that are in SRGB space
    and pixel formats in linear RGB space.</li>

    <li>The minimum NIF version for <span class=
    "NDLSystemFont"><a href="NiStream.htm">NiStream</a></span>
    has been bumped to 10.1.0.0 (which corresponds to Gamebryo
    1.1). All NIF files prior to version 10.1.0.0 will fail to
    load.</li>

    <li>Shared functionality from the various platform-specific
    versions of <span class="NDLSystemFont"><a href=
    "NiShaderDeclaration.htm">NiShaderDeclaration</a></span> have
    been combined into the base class in <span class=
    "NDLSystemFont">NiMain</span>. Additionally, the usage
    parameter is now stored as an <span class=
    "NDLSystemFont"><a href=
    "NiFixedString.htm">NiFixedString</a></span> reference rather
    than an enumerated value from <span class=
    "NDLSystemFont"><a href=
    "NiShaderDeclaration.htm#ShaderParameterUsage">NiShaderDeclaration::ShaderParameterUsage</a></span>.
    Conversion functions are provided to convert quickly from the
    enumerate to <span class="NDLSystemFont"><a href=
    "NiFixedString.htm">NiFixedString</a></span>.</li>

    <li>The <span class=
    "NDLSystemFont">ms_bDestroyAppDataFlag</span> of <span class=
    "NDLSystemFont"><a href=
    "NiSourceTexture.htm">NiSourceTexture</a></span> now defaults
    to true. This change will cause changes in behavior for
    application level <span class="NDLSystemFont"><a href=
    "NiPixelData.htm">NiPixelData</a></span> objects.
    Applications that require access to <span class=
    "NDLSystemFont"><a href=
    "NiPixelData.htm">NiPixelData</a></span> objects from
    <span class="NDLSystemFont"><a href=
    "NiSourceTexture.htm">NiSourceTexture</a></span> objects
    should set the flag to false via <span class=
    "NDLSystemFont"><a href=
    "NiSourceTexture.htm">NiSourceTexture::SetDestroyAppDataFlag</a></span>.</li>

    <li><span class="NDLSystemFont"><a href=
    "NiGeometry.htm">NiGeometry</a></span> now holds a reference
    to an <span class="NDLSystemFont"><a href=
    "NiShaderDeclaration.htm">NiShaderDeclaration</a></span>
    object describing its packed geometry data.</li>

    <li>Previous versions of Gamebryo packed geometry data using
    the <span class="NDLSystemFont"><a href=
    "NiShaderDeclaration.htm">NiShaderDeclaration</a></span>
    object for the currently active shader. Gamebryo 2.3
    introduces a new system that queries each attached material
    using <span class="NDLSystemFont"><a href=
    "NiMaterial.htm">NiMaterial::GetVertexInputSemantics</a></span>
    and packs data that will satisfy all attached materials. For
    more information, please refer to the <a href=
    "../../Convert/Previous/Converting_to_Gamebryo_2_3_Overview.htm">
    conversion documentation</a>.</li>

    <li>To ensure that packed geometry data is appropriately
    packed using the default material, <span class=
    "NDLSystemFont"><a href=
    "NiGeometry.htm">NiGeometry</a></span> will attach the
    default material when an object is loaded from an
    <span class="NDLSystemFont"><a href=
    "NiStream.htm">NiStream</a></span> object. Applications
    wishing to forego this behavior can call <span class=
    "NDLSystemFont"><a href=
    "NiGeometry.htm">NiGeometry::SetStreamingAppliesDefaultMaterial</a></span>
    to disable the material attachment.</li>

    <li>The internals of the <span class="NDLSystemFont"><a href=
    "../../Reference/NiSystem/Platform_Independent_Wrappers_For_System_Routines.htm#NiSprintf">
    NiSprintf</a></span> function have been changed to eliminate
    the possibility of overrunning the destination buffer. If the
    combined string value constructed from the format string and
    its parameters exceeds the buffer size passed into the
    function, the resulting string will be truncated to fit in
    the buffer and -1 will be returned. Otherwise, the
    functionality of this function remains the same.</li>

    <li>Three new functions were added to support other
    platform-independent string manipulation routines:
    <span class="NDLSystemFont"><a href=
    "../../Reference/NiSystem/Platform_Independent_Wrappers_For_System_Routines.htm#NiVsprintf">
    NiVsprintf</a></span>, <span class="NDLSystemFont"><a href=
    "../../Reference/NiSystem/Platform_Independent_Wrappers_For_System_Routines.htm#NiSnprintf">
    NiSnprintf</a></span>, and <span class=
    "NDLSystemFont"><a href=
    "../../Reference/NiSystem/Platform_Independent_Wrappers_For_System_Routines.htm#NiVsnprintf">
    NiVsnprintf</a></span>. All of the four string manipulation
    functions guarantee that the destination buffer will not be
    overrun and that the resulting string will contain a
    terminating null character.</li>

    <li><span class="NDLSystemFont"><a href=
    "../../Reference/NiSystem/NiTThreadLocal.htm">NiTThreadLocal</a></span>
    is a new templated class that encapsulates thread-local
    storage.</li>

    <li>Placement new and delete are now overloaded for
    <span class="NDLSystemFont"><a href=
    "../../Reference/NiSystem/NiMemObject.htm">NiMemObject</a></span>
    to allow the application to use the placement operators on
    Gamebryo objects. Note that placement versions of new and
    delete do not track or allocate memory. It is assumed that
    the buffer they are placed into will be tracked.</li>

    <li>Many classes have been added to <span class=
    "NDLSystemFont">NiMain</span> to provide a new <a href=
    "../../Programmer/Shadowing_System/Introduction_to_the_Shadowing_System.htm">
    shadowing system</a>. This new system is built on top of the
    frame rendering system to enable automated generation and
    application of shadow maps.</li>

    <li>Several classes have been added to <span class=
    "NDLSystemFont">NiMain</span> to implement the new <a href=
    "../../Programmer/Frame_Rendering_System/Introduction_to_the_Frame_Rendering_System.htm">
    frame rendering system</a>.</li>

    <li>Changed the bitfield enumeration in <span class=
    "NDLSystemFont"><a href=
    "NiBitfield.htm">NiBitfield</a></span> to instead define
    static constant variables. This allowed for the automatic
    generation of accessors and a <span class=
    "NDLSystemFont">ToString</span> method. All <span class=
    "NDLSystemFont"><a href=
    "NiStandardMaterial.htm">NiStandardMaterial</a></span>-related
    bitfields were adjusted to the new syntax.</li>

    <li>Modified the <span class="NDLSystemFont">IsEqual</span>
    function in all <span class="NDLSystemFont"><a href=
    "NiExtraData.htm">NiExtraData</a></span>-derived classes to
    check for type equality.</li>

    <li>Changed the <span class="NDLSystemFont"><a href=
    "NiRenderer.htm">NiRenderer</a>::RenderShape</span>,
    <span class="NDLSystemFont">RenderTristrips</span>,
    <span class="NDLSystemFont">RenderPoints</span>, <span class=
    "NDLSystemFont">RenderLines</span>, <span class=
    "NDLSystemFont">RenderScreenTexture</span>, <span class=
    "NDLSystemFont">BatchRenderShape</span>, and <span class=
    "NDLSystemFont">BatchRenderStrips</span> functions so that
    they assert that it is valid to call them (because an
    <span class="NDLSystemFont">NiRenderTargetGroup</span> is
    open or because a batch is currently being built) rather than
    explicitly performing the check and exiting if the check
    returns false.</li>

    <li>Updated the <span class="NDLSystemFont"><a href=
    "NiRenderTargetGroup.htm">NiRenderTargetGroup</a>::Create</span>
    function that takes a color buffer and a depth buffer as
    inputs so that if the color buffer and depth buffer are not
    compatible, the function will return <span class=
    "NDLSystemFont">NULL</span>.</li>

    <li>Changed the cloning behavior of <span class=
    "NDLSystemFont"><a href=
    "NiSkinInstance.htm">NiSkinInstance</a></span> such that it
    will always return a clone when one is requested instead of
    only returning a clone when some bones that the <span class=
    "NDLSystemFont">NiSkinInstance</span> uses are also being
    cloned.</li>

    <li>Fixed a bug in <span class="NDLSystemFont"><a href=
    "NiStandardMaterial.htm">NiStandardMaterial</a></span> that
    caused the material emissive color to be applied repeatedly
    when an effect created shaders that were too complex and had
    to be broken up into multiple passes.</li>

    <li>Fixed a problem with <span class="NDLSystemFont"><a href=
    "NiStandardMaterial.htm">NiStandardMaterial</a></span> that
    caused specular cube map lookups to be incorrect on objects
    that have a scale applied to them.</li>

    <li>Fixed an interpolation problem in <span class=
    "NDLSystemFont"><a href=
    "NiStandardMaterial.htm">NiStandardMaterial</a></span> which
    caused specular highlights to zigzag across triangle
    boundaries. The problem was caused by unnecessarily
    normalizing the computed eye vector in the vertex
    shader.</li>

    <li>Adjusted all related bitfields in <span class=
    "NDLSystemFont"><a href=
    "NiStandardMaterial.htm">NiStandardMaterial</a></span> to
    match the new syntax for <a href=
    "NiBitfield.htm"><span class="NDLSystemFont">NiBitfield</span></a>
    as described in the release note for <a href=
    "NiBitfield.htm"><span class=
    "NDLSystemFont">NiBitfield</span></a>.</li>

    <li>Made memory allocations occur less frequently in
    <span class="NDLSystemFont"><a href=
    "NiString.htm">NiString</a></span> when assigning new string
    values.</li>

    <li>Added new methods to <span class="NDLSystemFont"><a href=
    "NiString.htm">NiString</a></span> for adding to and removing
    from the string.</li>

    <li>Improved the thread safety of <span class=
    "NDLSystemFont"><a href=
    "NiFixedString.htm">NiFixedString</a></span>. Fixed strings
    and their reference counts are thread-safe for concurrent
    access. Previous iterations of <span class=
    "NDLSystemFont"><a href=
    "NiFixedString.htm">NiFixedString</a></span> and <span class=
    "NDLSystemFont"><a href=
    "NiGlobalStringTable.htm">NiGlobalStringTable</a></span>
    contained race conditions which could cause errors for highly
    contended fixed strings.</li>

    <li>As a result of the thread-safety improvements,
    <span class="NDLSystemFont"><a href=
    "NiFixedString.htm">NiFixedString</a></span> objects are
    limited to 65,535 characters in length. Debug builds will
    assert on this limit.</li>

    <li>As a result of the thread-safety improvements,
    <span class="NDLSystemFont"><a href=
    "NiGlobalStringTable.htm">NiGlobalStringTable</a></span> now
    holds a reference to each <span class=
    "NDLSystemFont"><a href="NiFixedString.htm">NiFixedString</a></span>
    object in the table. The reference count of a newly
    constructed <span class="NDLSystemFont"><a href=
    "NiFixedString.htm">NiFixedString</a></span> object will be
    two instead of the previous value of one.</li>

    <li>Fixed a bug in the constructor for <a href=
    "NiSwitchStringExtraData.htm"><span class=
    "NDLSystemFont">NiSwitchStringExtraData</span></a> that could
    cause a crash.</li>

    <li>Added additional template arguments for <a href=
    "NiTMapBase.htm"><span class=
    "NDLSystemFont">NiTMapBase</span></a> and all derived classes
    so that applications can specify customized classes to
    compute the hash index for a given key and to compare two
    keys. This functionality enables arbitrary keys to be used
    with the map classes, or allows specialized hash functions
    for data with specific structure (such as strings with a
    specialized format). The primary motivation was to reduce the
    usage of sub-classing from <span class=
    "NDLSystemFont">NiTMapBase</span>. See the notes on <a href=
    "../../Convert/Previous/Converting_to_Gamebryo_2_3_Overview.htm#NiTMapBaseChanges">
    upgrading from Gamebryo 2.2</a> if you have existing classes
    that derive from <span class=
    "NDLSystemFont">NiTMapBase</span>. This change also affected
    <a href="NiTMap.htm"><span class=
    "NDLSystemFont">NiTMap</span></a>, <a href=
    "NiTPointerMap.htm"><span class=
    "NDLSystemFont">NiTPointerMap</span></a>, <a href=
    "NiTStringMap.htm"><span class=
    "NDLSystemFont">NiTStringMap</span></a> and <a href=
    "NiTStringPointerMap.htm"><span class=
    "NDLSystemFont">NiTStringPointerMap</span></a>, but usage of
    these classes is unchanged.</li>

    <li>Fixed a bug where <span class="NDLSystemFont"><a href=
    "NiTQueue.htm">NiTQueue</a>::Realloc</span> could cause that
    crash.</li>

    <li>Moved active vertex and triangle count into <span class=
    "NDLSystemFont"><a href=
    "NiGeometryData.htm">NiGeometryData</a></span> so the
    <span class=
    "NDLSystemFont">NiGeometryData::GetActiveVertexCount</span>
    and <span class="NDLSystemFont">GetActiveTriangleCount</span>
    functions can be made non-virtual.</li>

    <li>Made the <span class="NDLSystemFont"><a href=
    "NiTriBasedGeomData.htm">NiTriBasedGeomData</a>::SetTriangleCount</span>
    function protected.</li>
</ul>

<h3>Gamebryo 2.2.0</h3>

<ul>
    <li>Added a Shipping <a href=
    "../../GetStart/PC/Gamebryo_Build_Configurations.htm">build
    configuration</a> and removed NiProfile and NiMemory
    builds.</li>

    <li>Added <a href=
    "../../Programmer/NiMetrics/Introduction.htm"><span class=
    "NDLSystemFont">NiMetrics</span></a> system to process custom
    profiling information about the Gamebryo engine.</li>

    <li>Instrumented codebase with <a href=
    "../../Programmer/NiMetrics/Gamebryo_Metrics.htm">default
    metrics</a>.</li>

    <li>Fixed a potential streaming issue with <span class=
    "NDLSystemFont"><a href=
    "NiGeometryData.htm">NiGeometryData</a></span> caused when a
    malformed object attempts to stream texture coordinate sets
    that don't exist.</li>

    <li>Added a flag for the <span class="NDLSystemFont"><a href=
    "NiAVObject.htm">NiAVObject</a>::UpdateSelected</span> system
    that marks a node as animated even if it has no
    controllers.</li>

    <li>The new <span class="NDLSystemFont"><a href=
    "NiParallelUpdateTaskManager.htm">NiParallelUpdateTaskManager</a></span>
    class allows applications to update objects in a secondary
    thread. It currently processes <span class=
    "NDLSystemFont"><a href=
    "../../Reference/NiAnimation/NiGeomMorpherController.htm">NiGeomMorpherController</a></span>
    objects and <span class=
    "NDLSystemFont">NiParticleSystem</span> objects. Applications
    can use this framework with their own custom <span class=
    "NDLSystemFont"><a href="NiTask.htm">NiTask</a></span>
    subclasses as well.</li>

    <li>The new <a href=
    "NiPersistentSrcTextureRendererData.htm"><span class=
    "NDLSystemFont">NiPersistentSrcTextureRendererData</span></a>
    class and its subclasses add support for direct-loading
    textures on supported platforms. This functionality is
    designed to increase loading performance, reduce the
    load-time memory footprint, improve general memory usage, and
    allow for platform-specific extensions. See <span class=
    "NDLSystemFont"><a href=
    "../../Programmer/Object_Systems/Streaming.htm#TextureStreamingOptions">
    Texture Streaming Options</a></span> for Internal Textures,
    the export options for <a href=
    "../../Art/Max/Gamebryo_3ds_max_Export_Options1.htm">3ds
    max</a> or <a href=
    "../../Art/Maya/Export_Display_Options.htm">Maya</a>, and the
    description of <span class="NDLSystemFont"><a href=
    "NiPersistentSrcTextureRendererData.htm">NiPersistentSrcTextureRendererData</a></span>
    in the Main Class Reference for more details.</li>

    <li><a href="NiStream.htm"><span class=
    "NDLSystemFont">NiStream</span></a> has functionality to skip
    over unknown objects upon load. Objects notify the stream if
    they can be skipped when streamed out using the virtual
    <span class="NDLSystemFont">NiObject::StreamCanSkip</span>
    method. Additionally, the size of each object in the stream
    is saved in the NIF file. This allows the stream to verify
    that the object read in the same amount of data that it wrote
    out in debug builds.</li>

    <li><span class="NDLSystemFont"><a href=
    "NiDynamicEffect.htm">NiDynamicEffect</a>::GetEffectType</span>
    has been made non-virtual. <span class=
    "NDLSystemFont"><a href=
    "NiDynamicEffect.htm">NiDynamicEffect</a></span> and its
    subclasses now store their effect type internally. This
    allows for much faster determination of effect type through
    an inline function rather than a costly virtual function
    call. Additionally, several calls to <span class=
    "NDLSystemFont">NiIsExactKindOf</span> have been replaced
    with integer comparisons on the result of <span class=
    "NDLSystemFont">GetEffectType</span> for increased
    performance.</li>

    <li><span class="NDLSystemFont"><a href=
    "NiSpotLight.htm">NiSpotlight</a></span> now has an inner
    cone angle.</li>

    <li><span class="NDLSystemFont"><a href=
    "NiTextureTransform.htm">NiTextureTransform</a></span> now
    has an improved method for simulating Maya's texture
    transforms. The old Maya texture transform method is
    <span class=
    "NDLSystemFont">MAYA_DEPRECATED_TRANSFORM</span>.</li>

    <li>Improved viewer strings for base map and decal maps in
    <a href="NiTexturingProperty.htm"><span class=
    "NDLSystemFont">NiTexturingProperty</span></a>.</li>

    <li>Moved <a href="NiString.htm">NiString</a> from
    NiPluginToolkit to NiMain.</li>

    <li>Added additional comparison methods to <a href=
    "NiFixedString.htm">NiFixedString</a>.</li>
</ul>

<h3>Gamebryo 2.1.0</h3>

<ul>
    <li>The behavior of the function <span class=
    "NDLSystemFont"><a href=
    "../../Reference/NiMain/NiRenderer.htm">NiRenderer</a>::GetCurrentRenderTargetGroup</span>
    has changed so that the function will return NULL if the
    renderer is not between calls to <span class=
    "NDLSystemFont">BeginUsingRenderTargetGroup</span> and
    <span class="NDLSystemFont">EndUsingRenderTargetGroup</span>,
    rather than a pointer to the most recently used render target
    group This prevents the possibility of getting a pointer to a
    deleted object.</li>

    <li>Many functions, such as <span class=
    "NDLSystemFont"><a href=
    "../../Reference/NiMain/NiRenderer.htm">NiRenderer</a>::TakeScreenShot</span>
    or <span class="NDLSystemFont"><a href=
    "../../Reference/NiMain/NiCamera.htm">NiCamera</a>::WindowPointToRay</span>,
    were modified to take an explicit <span class=
    "NDLSystemFont"><a href=
    "../../Reference/NiMain/NiRenderTargetGroup.htm">NiRenderTargetGroup</a></span>
    rather than assuming that the most recently used render
    target should be used for the screen-space operations.</li>

    <li>The functions <span class="NDLSystemFont"><a href=
    "../../Reference/NiMain/NiRenderer.htm#NiRenderer_FastCopy">NiRenderer::Copy</a></span>
    and <span class="NDLSystemFont"><a href=
    "../../Reference/NiMain/NiRenderer.htm#NiRenderer_FastCopy">FastCopy</a></span>
    are now non-const. On some platforms, these functions use the
    GPU to perform the operation and hence modify the renderer
    state to some degree requiring a non-const reference to the
    renderer.</li>

    <li>Many classes, were reduced in size by packing small
    values into bitfield flags or reducing the sizes of class
    variables. These classes are:

        <ul>
            <li><span class="NDLSystemFont"><a href=
            "../../Reference/NiMain/NiObjectNET.htm">NiObjectNET</a></span></li>

            <li><span class="NDLSystemFont"><a href=
            "../../Reference/NiMain/NiTimeController.htm">NiTimeController</a></span></li>

            <li><span class="NDLSystemFont"><a href=
            "../../Reference/NiMain/NiTArray.htm">NiTArray</a></span></li>

            <li><span class="NDLSystemFont"><a href=
            "../../Reference/NiMain/NiBillboardNode.htm">NiBillboardNode</a></span></li>

            <li><span class="NDLSystemFont"><a href=
            "../../Reference/NiMain/NiSwitchNode.htm">NiSwitchNode</a></span></li>

            <li><span class="NDLSystemFont"><a href=
            "../../Reference/NiMain/NiVertexColorProperty.htm">NiVertexColorProperty</a></span></li>

            <li><span class="NDLSystemFont"><a href=
            "../../Reference/NiMain/NiStencilProperty.htm">NiStencilProperty</a></span></li>

            <li><span class="NDLSystemFont"><a href=
            "../../Reference/NiMain/NiTexturingProperty.htm">NiTexturingProperty</a></span></li>

            <li><span class="NDLSystemFont"><a href=
            "../../Reference/NiMain/NiZBufferProperty.htm">NiZBufferProperty</a></span></li>
        </ul>
    </li>

    <li><a href=
    "../../Reference/NiMain/NiFixedString.htm"><span class=
    "NDLSystemFont">NiFixedString</span></a> has been created to
    facilitate sharing of strings across multiple objects. Many
    Gamebryo objects have been updated to use <span class=
    "NDLSystemFont"><a href=
    "../../Reference/NiMain/NiFixedString.htm">NiFixedString</a>s</span>
    instead of standard character arrays. The usage of fixed
    strings will improve memory utilization for an application
    that makes heavy usage of cloning, extra data, or animated
    characters.</li>

    <li>Changed <span class="NDLSystemFont"><a href=
    "../../Reference/NiMain/NiCullingProcess.htm">NiCullingProcess</a>::SetVisibleSet</span>
    to use the variable passed into the function. It used to
    always set the visible set to 0.</li>

    <li>Fixed the issue where <span class=
    "NDLSystemFont"><a href="../../Reference/NiMain/NiCamera.htm">
    NiCamera</a>::WorldToCameraMatrix</span> computed an
    erroneous camera matrix for ortho-cameras.</li>

    <li>Added <a href=
    "../../Reference/NiMain/NiDrawSceneUtility.htm"><span class=
    "NDLSystemFont">NiCullScene</span></a> to <a href=
    "../../Reference/NiMain/NiDrawSceneUtility.htm"><span class=
    "NDLSystemFont">NiDrawSceneUtility</span></a> functions. This
    function is meant to wrap the culling of a scene graph into
    an <a href=
    "../../Reference/NiMain/NiVisibleArray.htm"><span class=
    "NDLSystemFont">NiVisibleArray</span></a>.</li>

    <li>Added a macro <span class=
    "NDLSystemFont">NiImplementCreateObject</span> and ported the
    majority of <span class="NDLSystemFont">NiObject</span>
    derived classes to use this macro.</li>

    <li>Converting old (NetImmerse 4.2.2 or earlier) <span class=
    "NDLSystemFont"><a href=
    "../../Reference/NiMain/NiExtraData.htm">NiExtraData</a></span>
    objects now no longer uses <span class=
    "NDLSystemFont">atoi</span> and <span class=
    "NDLSystemFont">itoa</span>, since those functions can be
    insecure.</li>

    <li>Added a macro <span class=
    "NDLSystemFont">NiImplementCreateClone</span> and ported the
    majority of <span class="NDLSystemFont"><a href=
    "../../Reference/NiMain/NiObject.htm">NiObject</a></span>-derived
    classes to use this macro.</li>

    <li>Added a templated allocator interface to <a href=
    "../../Reference/NiMain/NiTArray.htm"><span class=
    "NDLSystemFont">NiTArray</span></a>. <a href=
    "../../Reference/NiMain/NiTArray.htm"><span class=
    "NDLSystemFont">NiTArray</span></a> now has two derived types
    that specify this allocator, <a href=
    "../../Reference/NiMain/NiTPrimitiveArray.htm"><span class=
    "NDLSystemFont">NiTPrimitiveArray</span></a> or <a href=
    "../../Reference/NiMain/NiTObjectArray.htm"><span class=
    "NDLSystemFont">NiTObjectArray</span></a>. Please see the
    <a href="../../Reference/NiMain/NiTArray.htm">class
    reference</a> for more details.</li>

    <li>Added a templated allocator interface to <a href=
    "../../Reference/NiMain/NiTSet.htm"><span class=
    "NDLSystemFont">NiTSet</span></a>. <a href=
    "../../Reference/NiMain/NiTSet.htm"><span class=
    "NDLSystemFont">NiTSet</span></a> now has two derived types
    that specify this allocator, <a href=
    "../../Reference/NiMain/NiTPrimitiveSet.htm"><span class=
    "NDLSystemFont">NiTPrimitiveSet</span></a> or <a href=
    "../../Reference/NiMain/NiTObjectSet.htm"><span class=
    "NDLSystemFont">NiTObjectSet</span></a>.</li>

    <li><a href=
    "../../Reference/NiMain/NiTArray.htm"><span class="NDLSystemFont">
    NiTArray</span></a>'s internal data members have been
    converted to unsigned shorts instead of unsigned integers.
    This has been done for memory savings. The public interface
    remains unsigned integers for backwards compatibility
    purposes. <a href=
    "../../Reference/NiMain/NiTLargeArray.htm"><span class=
    "NDLSystemFont">NiTLargeArray</span></a> has been created for
    those instances where the unsigned int data members are still
    required.</li>

    <li>All Polygon update functions for screen elements now set
    mark as changed. Modified SetNormals(), SetColors(), and
    SetTextures().</li>

    <li>Insert function incorrectly assigned trilist indices. The
    indices are now offset automatically by the
    kPoly.m_usVOffset.</li>

    <li>Added support for specifying the target processor and
    priority of a background load process. This specification
    occurs per stream. For more information, please refer to the
    documentation of <span class="NDLSystemFont"><a href=
    "../../Reference/NiMain/NiStream.htm">NiStream</a></span>.</li>
</ul>

<h3>Gamebryo 2.0.0</h3>

<ul>
    <li>Added <a href=
    "../../Reference/NiMain/NiAdditionalGeometryData.htm"><span class="NDLSystemFont">
    NiAdditionalGeometryData</span></a> to store nonstandard
    per-vertex attributes.</li>

    <li>Bugfix to <span class="NDLSystemFont"><a href=
    "../../Reference/NiMain/NiSkinData.htm">NiSkinData</a></span>,
    where the code was dereferencing a pointer prior to checking
    if the array size had been exceeded. This code is primarily
    called by the <span class="NDLSystemFont"><a href=
    "../../Reference/NiOptimization/NiOptimization_Overview.htm">NiOptimization</a></span>
    library when creating Bone LODs.</li>

    <li>Added default constructors for <span class=
    "NDLSystemFont">NiSkinData::BoneData</span> and <span class=
    "NDLSystemFont">NiSkinData::BoneVertData</span>.</li>

    <li>The function <span class=
    "NDLSystemFont">NiPropertyState::GetProperties</span> was
    made <span class="NDLSystemFont">const</span>.</li>

    <li>The <span class="NDLSystemFont">NBT_METHOD_MAX</span>
    method for generating normal/binormal/tangent arrays has been
    removed, since it was never actually supported in the first
    place. Shaders can no longer request this method, art tools
    can no longer generate it, and the enumeration has been
    renamed <span class=
    "NDLSystemFont">NBT_METHOD_DEPRECATED</span> to prevent any
    code from using it.</li>

    <li>Geometry objects now have their bounds calculated based
    on the number of active vertices, rather than the total
    number of vertices. This affects <span class=
    "NDLSystemFont"><a href=
    "../../Reference/NiMain/NiTriShapeDynamicData.htm">NiTriShapeDynamicData</a></span>
    objects, which can have only a subset of the total number of
    vertices active.</li>

    <li>The signature for the <span class=
    "NDLSystemFont">NiRenderer::PrecacheGeometry</span> function
    has been changed to remove deprecated functionality.</li>

    <li>Added ARRAY shader attribute type to <a href=
    "../../Reference/NiMain/NiShaderAttributeDesc.htm"><span class="NDLSystemFont">
    NiShaderAttributeDesc</span></a>.</li>

    <li>The signature of <span class="NDLSystemFont"><a href=
    "../../Reference/NiMain/NiLODData.htm">NiLODData</a>::GetLODLevel</span>
    has changed. The <span class="NDLSystemFont">NiCamera</span>
    argument is now const. Users who have created their own
    subclasses of <span class="NDLSystemFont">NiLODData</span>
    must change the signature of this function, or else their
    subclasses will not compile or function correctly.</li>

    <li>The signatures and behaviors of the virtual functions in
    <span class="NDLSystemFont">NiAccumulator</span> have
    changed. The new interfaces and methods are detailed in the
    <a href=
    "../../Reference/NiMain/NiAccumulator.htm"><span class=
    "NDLSystemFont">NiAccumulator</span></a> reference manual,
    the <a href=
    "../../Programmer/General_Topics/Object_Sorting.htm">Object
    Sorting</a> documentation and the conversion notes.</li>

    <li><span class="NDLSystemFont">NiCamera</span>s no longer in
    charge of culling and rendering. Other interfaces have been
    provided for culling, sorting and rendering in Gamebryo 2.0.
    See the <a href=
    "../../Programmer/General_Topics/Rendering_a_Frame.htm">Rendering
    a Frame</a> documentation and the conversion notes for
    details.</li>

    <li><span class="NDLSystemFont">NiCamera</span> no longer
    contains a set of frustum culling planes and related
    functions, as it is no longer in charge of culling. These
    planes have been split out into the new class <span class=
    "NDLSystemFont"><a href=
    "../../Reference/NiMain/NiFrustumPlanes.htm">NiFrustumPlanes</a></span>.
    The main user of <span class=
    "NDLSystemFont">NiFrustumPlanes</span> is the new
    <span class="NDLSystemFont"><a href=
    "../../Reference/NiMain/NiCullingProcess.htm">NiCullingProcess</a></span>
    object, which is in charge of all culling. Applications can
    also create these frustum plane objects directly from an
    <span class="NDLSystemFont">NiCamera</span> or from a set of
    transforms and an <span class="NDLSystemFont"><a href=
    "../../Reference/NiMain/NiFrustum.htm">NiFrustum</a></span>.</li>

    <li><span class="NDLSystemFont">NiCamera</span> no longer
    contains a pointer to a default scene, as it is no longer in
    charge of culling. Applications should use their
    locally-cached pointers to their scene graph(s) when invoking
    culling. See the <a href=
    "../../Programmer/General_Topics/Rendering_a_Frame.htm">Rendering
    a Frame</a> documentation and the conversion notes for
    details.</li>

    <li><span class="NDLSystemFont">NiCamera</span> no longer
    contains a pointer to the renderer, as there is at most one
    at any given time. The renderer is always available from the
    static function <span class=
    "NDLSystemFont">NiRenderer::GetRenderer</span>.</li>

    <li><span class="NDLSystemFont">NiCamera</span> no longer
    contains lists of screen-space objects, as it is no longer in
    charge of rendering. See the <a href=
    "../../Programmer/General_Topics/Screen_Space_Rendering.htm">Screen
    Space Rendering</a> documentation and the conversion notes
    for details.</li>

    <li><span class="NDLSystemFont">NiScreenSpaceCamera</span>,
    <span class="NDLSystemFont">NiScreenPolygon</span>,
    <span class="NDLSystemFont">NiScreenGeometry</span>, and
    <span class="NDLSystemFont">NiScreenGeometryData</span> have
    all been removed or replaced in Gamebryo 2. Shell versions of
    these classes still exist in <span class=
    "NDLSystemFont">NiOldScreenSpace.h</span>, but these are
    designed solely for the purpose of allowing NIF files created
    by user-written tools that exported these items to be
    converted. No Gamebryo tools generated these objects, so no
    direct conversion code has been supplied. See the <a href=
    "../../Programmer/General_Topics/Screen_Space_Rendering.htm">Screen
    Space Rendering</a> documentation, the samples and demos, and
    the conversion notes for details of the new screen-space
    rendering objects.</li>

    <li>The culling and rendering functions <span class=
    "NDLSystemFont">NiAVObject::CullShow</span> and <span class=
    "NDLSystemFont">NiAVObject::Display</span> have been replaced
    by the pure culling functions <span class=
    "NDLSystemFont">NiAVObject::Cull</span> and <span class=
    "NDLSystemFont">NiAVObject::OnVisible</span>. Neither of
    these functions need to be called directly by most
    applications in Gamebryo 2. See the <a href=
    "../../Programmer/General_Topics/Culling_a_Scene_Graph.htm">Culling
    a Scene Graph</a> documentation and the conversion notes for
    details.</li>

    <li>The <span class="NDLSystemFont">NiCamera</span> functions
    <span class=
    "NDLSystemFont">Get/SetMinNearPlaneDistance</span> and
    <span class="NDLSystemFont">Get/SetMaxFarNearRatio</span> and
    their respective data elements are now non-static members
    (they were static in GB1).</li>

    <li><span class="NDLSystemFont">NiRenderer</span> now
    contains three camera data functions. The first two are
    called <span class="NDLSystemFont">SetCameraData</span> and
    accept either an <span class="NDLSystemFont">NiCamera</span>
    or a full set of camera points, vectors and a frustum. The
    <span class="NDLSystemFont">NiCamera</span> version is
    non-virtual and is provided as a convenience. It simply wraps
    the other version of the function, which is virtual and is
    defined in each renderer. The final function is <span class=
    "NDLSystemFont">SetScreenSpaceCameraData</span>, and is used
    when rendering screen-space elements. It sets a standard,
    normalized view for screen-space rendering.</li>

    <li><a href=
    "../../Reference/NiMain/NiPixelFormat.htm"><span class=
    "NDLSystemFont">NiPixelFormat</span></a> has been redesigned
    to better support next-generation image formats, including
    high dynamic range formats. Please see the <a href=
    "../../Reference/NiMain/NiPixelFormat.htm">class
    reference</a> and conversion notes for more information.</li>

    <li><span class="NDLSystemFont"><a href=
    "../../Reference/NiMain/NiPixelData.htm">NiPixelData</a></span>
    has been extended to support an array of mipmap pyramids.
    This allows a single <a href=
    "../../Reference/NiMain/NiPixelData.htm"><span class=
    "NDLSystemFont">NiPixelData</span></a> object to represent a
    valid cube map. This also means that any NIF files containing
    palettized cube maps will not display the texture. The art
    plug-ins no longer generate palettized cube maps. Please see
    the <a href="../../Reference/NiMain/NiPixelData.htm">class
    reference</a> and conversion notes for more information.</li>

    <li>Added code to support creating an <span class=
    "NDLSystemFont"><a href=
    "../../Reference/NiMain/NiSourceCubeMap.htm">NiSourceCubeMap</a></span>
    from a single <span class="NDLSystemFont"><a href=
    "../../Reference/NiMain/NiPixelData.htm">NiPixelData</a></span>
    object.</li>

    <li><a href=
    "../../Reference/NiMain/NiRenderedTexture.htm"><span class=
    "NDLSystemFont">NiRenderedTexture</span></a> and <a href=
    "../../Reference/NiMain/NiRenderedCubeMap.htm"><span class=
    "NDLSystemFont">NiRenderedCubeMap</span></a> have been
    refactored to contain <a href=
    "../../Reference/NiMain/Ni2DBuffer.htm"><span class=
    "NDLSystemFont">Ni2DBuffers</span></a>. They can no longer be
    used as the render targets for a rendering pass. To convert
    your code, please refer to the conversion notes on this
    topic.</li>

    <li><a href=
    "../../Reference/NiMain/NiRenderedTexture.htm"><span class=
    "NDLSystemFont">NiRenderedTexture</span></a> and <a href=
    "../../Reference/NiMain/NiRenderedCubeMap.htm"><span class=
    "NDLSystemFont">NiRenderedCubeMap</span></a> objects can no
    longer be directly specified as render targets for a
    renderer. To convert your code, please refer to the
    conversion notes on this topic.</li>

    <li>Render targets can now have explicitly specified
    depth/stencil buffers. Please see the class reference for
    <span class="NDLSystemFont"><a href=
    "../../Reference/NiMain/NiRenderTargetGroup.htm">NiRenderTargetGroup</a></span>
    for more information.</li>

    <li>Added new <span class="NDLSystemFont"><a href=
    "../../Reference/NiMain/NiDynamicTexture.htm">NiDynamicTexture</a></span>
    class, which represents textures whose contents are generated
    dynamically by an application, other than via rendering via
    the 3D pipeline. These textures are commonly used for such
    effects as procedural textures or applying a video clip as a
    texture.</li>

    <li>Added support for non-power-of-two textures, to the
    extent a platform can support them. In particular, for
    platforms that offer conditional support of textures with
    non-power-of-two length or width, comparable conditional
    support has been added to Gamebryo. (Mipmaps for
    non-power-of-two dimensions will not be generated
    automatically, although users are able to supply them.)</li>

    <li>Added <span class=
    "NDLSystemFont">NiPixelFormat::GetNumComponents</span>
    function and made <span class=
    "NDLSystemFont">NiPixelFormat::GetComponent</span>
    const.</li>

    <li>Added support for cube maps in the <span class=
    "NDLSystemFont"><a href=
    "../../Reference/NiMain/NiDDSReader.htm">NiDDSReader</a></span>.
    It reads the faces in the same order as they are in the DDS
    file. The textureeffect transform will be necessary to
    re-align the faces to the current camera's coordinate system.
    Also added support for floating point images and a clearer
    conversion path for 24 and 16-bit images to Gamebryo standard
    formats.</li>

    <li>Added support for multiple faces in pixel data for
    <span class="NDLSystemFont"><a href=
    "../../Reference/NiMain/NiTextureCodec.htm">NiTextureCodec</a></span>.</li>

    <li>Pure virtual interfaces to <span class=
    "NDLSystemFont"><a href=
    "../../Reference/NiMain/NiRenderer.htm">NiRenderer</a></span>
    were added to support <a href=
    "../../Reference/NiMain/Ni2DBuffer.htm"><span class=
    "NDLSystemFont">Ni2DBuffer</span></a> and <a href=
    "../../Reference/NiMain/NiRenderTargetGroup.htm"><span class=
    "NDLSystemFont">NiRenderTargetGroup</span></a>
    operations.</li>

    <li>Ensured that <span class="NDLSystemFont"><a href=
    "../../Reference/NiMain/NiTexture.htm">NiTexture</a></span>
    replacement textures, used to report a texture loading or
    conversion error, are not converted by the renderers.</li>

    <li>Removed the <span class=
    "NDLSystemFont">NiBltSource</span> class from the engine. To
    perform a full-screen blit operation, an <span class=
    "NDLSystemFont"><a href=
    "../../Reference/NiMain/NiScreenTexture.htm">NiScreenTexture</a></span>
    or <span class="NDLSystemFont"><a href=
    "../../Reference/NiMain/NiScreenElements.htm">NiScreenElements</a></span>
    object may be used.</li>

    <li>Removed the <span class=
    "NDLSystemFont">APPLY_HILIGHT</span> and <span class=
    "NDLSystemFont">APPLY_HILIGHT2</span> apply modes from the
    <span class="NDLSystemFont"><a href=
    "../../Reference/NiMain/NiTexturingProperty.htm">NiTexturingProperty</a></span>,
    as they are no longer supported by any platforms. Any
    existing NIFs that use this apply mode will have the
    <span class="NDLSystemFont">APPLY_MODULATE</span> mode used
    instead.</li>

    <li>Added methods for streaming arrays of common Gamebryo
    types like <span class="NDLSystemFont"><a href=
    "../../Reference/NiMain/NiPoint3.htm">NiPoint3</a></span>,
    <span class="NDLSystemFont"><a href=
    "../../Reference/NiMain/NiColorA.htm">NiColorA</a></span>,
    etc. This change standardized streaming and allowed easy
    removal of byte-swapping code from classes like <span class=
    "NDLSystemFont"><a href=
    "../../Reference/NiMain/NiGeometryData.htm">NiGeometryData</a></span>.</li>

    <li>The macros for RTTI cast directly to the classname and
    not to <span class="NDLSystemFont">void*</span>. This allows
    the compiler to properly handle casting between objects that
    have multiple inheritance. Currently RTTI supports one path
    through the class hierarchy so you can't use multiple
    inheritance where two parent classes have RTTI.</li>

    <li>A new function, <span class=
    "NDLSystemFont">NiFloor</span>, was added to <span class=
    "NDLSystemFont"><a href=
    "../../Reference/NiMain/NiMath.htm">NiMath</a></span>.</li>

    <li>A new function, <span class="NDLSystemFont">unsigned int
    NiTArray&lt;T&gt;::Remove(const &amp;T)</span> was added to
    <span class="NDLSystemFont"><a href=
    "../../Reference/NiMain/NiTArray.htm">NiTArray</a></span>.</li>

    <li>The internal implementation of <span class=
    "NDLSystemFont">NiMatrix3::EigenSolveSymmetric</span> has
    been rewritten. The new method is designed to be faster and
    more robust than the original.</li>

    <li>The definitions of <span class=
    "NDLSystemFont">NiAssert</span>, which were not used
    internally in the engine code, have been removed from
    Gamebryo.</li>

    <li>The <span class="NDLSystemFont">NiBinaryStream</span>
    class is now endian aware and can save out in any endian
    format. This change will affect new NIF, KF, KFM, and NSB
    files that are written to disk, but is backwards compatible
    with old assets. See the conversion documentation for more
    details.</li>

    <li>Fixed bug where the NoSorter flag was not being tested in
    the NiAlphaProperty::IsEqual method. This could lead to
    situations in NiOptimization where properties could
    incorrectly be considered duplicates and merged.</li>
</ul><a name="Known_Issues_and_Limitations" id=
"Known_Issues_and_Limitations"></a>

<h2>Known Issues and Limitations</h2>

<ul>
    <li>The RTTI functions NiVerifyStaticCast and NiDynamicCast
    will not compile if a void* or other pointer type that is not
    able to be implicitly cast to the desired class pointer type
    is passed in.</li>

    <li>If a geometry object is affected by both shadow casting
    and non-shadow casting lights the shader applied to the
    geometry will receive incorrect lighting data if any of the
    non-shadow casting lights is turned off.</li>

    <li>Using a PSSM slice count that is not divisible by 4 may
    result in incorrect shadows, causing the 
    shadow recieving material to appear all black beyond the PSSM
    clipping plane.</li>

    <li><span class="NDLSystemFont">NiExtraData</span> objects
    attached to textures may be lost when using an <span class=
    "NDLSystemFont">NiTexturePalette</span> during loading.</li>

    <li>Calling <span class=
    "NDLSystemFont">SetRendererData</span> on an <span class=
    "NDLSystemFont">NiTexture</span> or <span class=
    "NDLSystemFont">NiGeometry</span> object that already has
    renderer data applied to it can cause a memory leak.</li>

    <li>Spherical environment maps applied using <span class=
    "NDLSystemFont">NiStandardMaterial</span> can have
    interpolation artifacts when viewing a surface at an extreme
    angle.</li>

    <li>Palettized cube maps are no longer supported in Gamebryo,
    due to the possibility of a palette mismatch between the
    faces of the cube map. It is possible that NIF files exist
    with palettized cube maps; these textures will fail loading
    and will be replaced with replacement textures. In this
    situation, it may be necessary to re-export these
    assets.</li>

    <li>24-bit textures that are used in an art tool and exported
    as part of the main NIF in original format will fail texture
    conversion when loaded on all platforms. Using a different
    original texture format or allowing for texture conversion
    during export will avoid this issue.</li>

    <li>Image conversion currently only works for little endian
    pixel formats.</li>

    <li>An additional note has been added to the <a href=
    "../../Programmer/General_Topics/BackgroundLoading.htm">restrictions
    on background loading</a>. Applications using background
    loading should make sure they adhere to these restrictions to
    maintain thread safety.</li>

    <li>A negative shadow depth value can cause geometry located
    beyond the shadow camera's far clipping plane to always be
    shadowed.</li>

    <li>NiStandardMaterial cannot handle an NiTexturingProperty with loosely
    packed decal maps.  The array of decal maps needs to be tightly packed.</li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
