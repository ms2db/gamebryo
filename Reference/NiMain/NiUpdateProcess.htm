<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiUpdateProcess</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiUpdateProcess</p>

<p class="NDLRefParentage">: public <a href=
"NiRefObject.htm">NiRefObject</a></p>

<p class="NDLRefHeaderFile">&lt;NiUpdateProcess.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>This class is used to hold data related to <span class=
"NDLSystemFont"><a href=
"NiAVObject.htm#UpdateFunctions">NiAVObject::Update</a></span>
and to provide customizable callback functions used during
update. It is passed to all functions performing scene graph
update activities.</p>

<p class="NDLRefHead1">Constructors</p>

<p>No public constructors are available. Instances of this class
cannot be created because it depends on the <span class=
"NDLSystemFont"><a href=
"../../Reference/NiFloodgate/NiSPWorkflowManager.htm">NiSPWorkflowManager</a></span>
class declared in the <span class="NDLSystemFont"><a href=
"../../Programmer/NiFloodgate/Introduction_to_NiFloodgate.htm">NiFloodgate</a></span>
library, which introduces a circular library dependency. Instead,
applications should create instances of the <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMesh/NiMeshUpdateProcess.htm">NiMeshUpdateProcess</a></span>
or <span class="NDLSystemFont"><a href=
"../../Reference/NiMesh/NiBatchedUpdateProcess.htm">NiBatchedUpdateProcess</a></span>
classes.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">virtual void
PreUpdate(NiAVObject* pkObject) = 0</p>

<p class="NDLRefMemberDescription">This function is called by
<span class="NDLSystemFont"><a href=
"NiAVObject.htm#UpdateFunctions">NiAVObject::Update</a></span>
before any objects are updated. It should be used to perform any
pre-update initialization. The <span class=
"NDLSystemFont">pkObject</span> argument contains the object that
<span class="NDLSystemFont">NiAVObject::Update</span> was called
on.</p>

<p class="NDLRefMemberFunction">virtual void
PostUpdate(NiAVObject* pkObject) = 0</p>

<p class="NDLRefMemberDescription">This function is called by
<span class="NDLSystemFont"><a href=
"NiAVObject.htm#UpdateFunctions">NiAVObject::Update</a></span>
after the scene graph has been fully updated. It should be used
to perform any work that depends on a complete update. For
example, the <span class="NDLSystemFont"><a href=
"../../Reference/NiMesh/NiMeshUpdateProcess.htm">NiMeshUpdateProcess</a></span>
sub-class uses this function to force submission of all
outstanding mesh modifiers. The <span class=
"NDLSystemFont">pkObject</span> argument contains the object that
<span class="NDLSystemFont">NiAVObject::Update</span> was called
on.</p>

<p class="NDLRefMemberFunction">float GetTime() const</p>

<p class="NDLRefMemberFunction">void SetTime(float fTime)</p>

<p class="NDLRefMemberDescription">Get and set the update time.
The <span class="NDLSystemFont">fTime</span> parameter is the
accumulated time for use with transformation and bounds updates.
Applications are free to set this to any value, but many Gamebryo
systems will not update if the time is earlier than a prior
update time.</p>

<p class="NDLRefMemberFunction">bool GetUpdateControllers()
const</p>

<p class="NDLRefMemberFunction">void SetUpdateControllers(bool
bUpdateControllers)</p>

<p class="NDLRefMemberDescription">Get and set the flag that
controls updating of <span class="NDLSystemFont"><a href=
"NiTimeController.htm">NiTimeController</a></span> objects in the
scene graph. By default this flag is true.</p>

<p class="NDLRefMemberFunction">bool GetSubmitModifiers()
const</p>

<p class="NDLRefMemberFunction">void SetSubmitModifiers(bool
bSubmitModifiers)</p>

<p class="NDLRefMemberDescription">Specifies whether mesh
modifiers should be submitted as a result of updating. This value
defaults to true. If the updated objects are to be rendered after
the update, this value should be true to assure that the expected
mesh modifier tasks are submitted properly. Otherwise,
out-of-date results from computations that were expected to be
done by a mesh modifier may be used in rendering. Setting this
flag to false will allow a update pass to be performed without
submitting mesh modifiers and hence without requiring their
modifiers to be subsequently completed. <span class=
"NDLSystemFont">CompleteTasks</span> will still be called on mesh
modifiers with the appropriate point during updating regardless
of this flag.</p>

<p class="NDLRefMemberFunction">NiSPWorkflowManager*
GetWorkflowManager() const</p>

<p class="NDLRefMemberDescription">Get the workflow manager held
by this class. This function may only be called by code that has
included the header file for the <span class=
"NDLSystemFont"><a href=
"../../Programmer/NiFloodgate/Introduction_to_NiFloodgate.htm">NiFloodgate</a></span>
library, as the <span class="NDLSystemFont"><a href=
"../../Reference/NiFloodgate/NiSPWorkflowManager.htm">NiSPWorkflowManager</a></span>
class is declared there rather than <span class=
"NDLSystemFont">NiMain</span>.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
