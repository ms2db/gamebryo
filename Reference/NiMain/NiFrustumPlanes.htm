<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiFrustumPlanes</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiFrustumPlanes</p>

<p class="NDLRefParentage">: public <a href=
"../../Reference/NiSystem/NiMemObject.htm">NiMemObject</a></p>

<p class="NDLRefHeaderFile">&lt;NiFrustumPlanes.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiFrustumPlanes</span> is designed
to hold a frustum's worth of <a href="NiPlane.htm"><span class=
"NDLSystemFont">NiPlanes</span></a>, making it possible to access
them via standard enumerations, set them from camera data, or set
them from an <a href="NiCamera.htm"><span class=
"NDLSystemFont">NiCamera</span></a> itself. It also stores a set
of flags that allow users to mark and test individual planes as
active or inactive. The class is useful when implementing
hierarchical frustum-testing operations such as culling.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiFrustumPlanes()</p>

<p class="NDLRefMemberDescription">Constructs an object with all
planes constructed as default <a href="NiPlane.htm"><span class=
"NDLSystemFont">NiPlane</span></a> objects and all planes
enabled</p>

<p class="NDLRefMemberFunction">NiFrustumPlanes(const <a href=
"NiCamera.htm">NiCamera</a>&amp; kCam)</p>

<p class="NDLRefMemberDescription">Constructs an object with all
planes enabled. The planes themselves are initialized using the
<span class="NDLSystemFont">Set</span> function below with the
same signature as this constructor.</p>

<p class="NDLRefMemberFunction">NiFrustumPlanes(const <a href=
"NiFrustum.htm">NiFrustum</a>&amp; kFrust, const <a href=
"NiTransform.htm">NiTransform</a>&amp; kXform)</p>

<p class="NDLRefMemberDescription">Constructs an object with all
planes enabled. The planes themselves are initialized using the
<span class="NDLSystemFont">Set</span> function below with the
same signature as this constructor.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefHead2">Frustum Initialization Fuctions</p>

<p class="NDLRefMemberFunction">void Set(const <a href=
"NiCamera.htm">NiCamera</a>&amp; kCam)</p>

<p class="NDLRefMemberDescription">Sets the planes to a
world-space frustum that is based on the current layout of the
given <a href="NiCamera.htm"><span class=
"NDLSystemFont">NiCamera</span></a>. It uses the camera's
frustum and world transforms to create the perspective or
orthogonal volume, as specified by the camera. It does not
change the active plane flags.</p>

<p class="NDLRefMemberFunction">void Set(const <a href=
"NiFrustum.htm">NiFrustum</a>&amp; kFrust, const <a href=
"NiTransform.htm">NiTransform</a>&amp; kXform)</p>

<p class="NDLRefMemberDescription">Sets the planes to a frustum
volume that is based on the given <a href=
"NiFrustum.htm"><span class="NDLSystemFont">NiFrustum</span></a>
and <a href="NiTransform.htm"><span class=
"NDLSystemFont">NiTransform</span></a>. It treats the given
transform <span class="NDLSystemFont">kXForm</span> as a Gamebryo
view matrix, in other words:</p>

<pre class="indent1">
view dir = kXForm.m_Rotate * UNIT_X
view up = kXForm.m_Rotate * UNIT_Y
view right = kXForm.m_Rotate * UNIT_Z
view location = kXForm.m_Translate
</pre>

<p class="NDLRefMemberDescription">It does not change the active
plane flags.</p>

<p class="NDLRefHead2">Plane Access Functions</p>

<p>See the notes below for the valid values of <span class=
"NDLSystemFont">ePlane</span>.</p>

<p class="NDLRefMemberFunction">const NiPlane&amp;
GetPlane(unsigned int ePlane) const</p>

<p class="NDLRefMemberDescription">Returns a const reference to
the desired plane.  There is no non-const version of this
function to avoid giving direct access to the internal
representation.</p>

<p class="NDLRefMemberFunction">void SetPlane(unsigned int
ePlane, const NiPlane&amp; kPlane)</p>

<p class="NDLRefMemberDescription">Sets the specified plane to be
equal to the second argument.</p>

<p class="NDLRefHead2">Active Plane Flags</p>

<p>See the notes below for the valid values of <span class=
"NDLSystemFont">ePlane</span>.</p>

<p class="NDLRefMemberFunction">bool IsPlaneActive(unsigned int
ePlane) const</p>

<p class="NDLRefMemberDescription">Returns true if the specified
plane has been marked as enabled (active) and false if the plane
is disabled.</p>

<p class="NDLRefMemberFunction">bool IsAnyPlaneActive() const</p>

<p class="NDLRefMemberDescription">Returns true if one or more
planes are active, and false if all planes are disabled.</p>

<p class="NDLRefMemberFunction">bool AreAllPlanesActive()
const</p>

<p class="NDLRefMemberDescription">Returns true if and only if
all six planes are active, and false if one or more planes are
disabled.</p>

<p class="NDLRefMemberFunction">void EnablePlane(unsigned int
ePlane)</p>

<p class="NDLRefMemberDescription">Enables the specified
plane.</p>

<p class="NDLRefMemberFunction">void DisablePlane(unsigned int
ePlane)</p>

<p class="NDLRefMemberDescription">Disables the specified
plane.</p>

<p class="NDLRefMemberFunction">void EnableAllPlanes()</p>

<p class="NDLRefMemberDescription">Enables all six planes in a
single call.</p>

<p class="NDLRefMemberFunction">void DisableAllPlanes()</p>

<p class="NDLRefMemberDescription">Disables all six planes in a
single call.</p>

<p class="NDLRefMemberFunction">unsigned int
GetActivePlaneState() const</p>

<p class="NDLRefMemberFunction">void SetActivePlaneState(unsigned
int uiState)</p>

<p class="NDLRefMemberDescription">These two functions allow the
entire enabled/disabled state to be copied from the frustum
object (<span class="NDLSystemFont">Get</span>) or replaced back
into the frustum object (<span class="NDLSystemFont">Set</span>).
 This is most often useful when implementing a hierarchical
culling or frustum-testing system.  The application should not
attempt to parse the returned state object.  <span class=
"NDLSystemFont">Set</span> should only be called with an argument
equal to the return value of an earlier <span class=
"NDLSystemFont">Get</span>.</p>

<p class="NDLRefHead1">Notes</p>

<p class="NDLRefHead2">Frustum Plane Enumerations</p>

<p>The following enumeration values may be passed to any function
that is listed above as taking a plane enumeration.  These values
are not flags, and should not be OR'ed together.  A function that
takes an <span class="NDLSystemFont">ePlane</span> argument is
designed to perform that operation on one plane at a time, and
thus the enumerations below are not bit flags.  The enumerations
are contiguous and can be iterated from 0 to (<span class=
"NDLSystemFont">NiFrustumPlanes::MAX_PLANES</span> - 1) to apply
an operation to all planes.</p>

<!--(Table)=========================================================-->
<table>
    <thead>
        <tr>
            <th>Enumeration</th>

            <th>Meaning</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><span class=
            "NDLSystemFont">NiFrustumPlanes::NEAR_PLANE</span></td>

            <td>Index of the near plane.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">NiFrustumPlanes::FAR_PLANE</span></td>

            <td>Index of the far plane.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">NiFrustumPlanes::LEFT_PLANE</span></td>

            <td>Index of the left plane.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">NiFrustumPlanes::RIGHT_PLANE</span></td>

            <td>Index of the right plane.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">NiFrustumPlanes::TOP_PLANE</span></td>

            <td>Index of the top plane.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">NiFrustumPlanes::BOTTOM_PLANE</span></td>

            <td>Index of the bottom plane.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">NiFrustumPlanes::MAX_PLANES</span></td>

            <td>Not an index - this is the count of planes, and
            can be used as a bound on any iteration over the
            planes</td>
        </tr>
    </tbody>
</table>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
