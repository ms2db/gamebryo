<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiShadowClickGenerator</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiShadowClickGenerator</p>

<p class="NDLRefParentage">: public <a href=
"NiRefObject.htm">NiRefObject</a></p>

<p class="NDLRefHeaderFile">&lt;NiShadowClickGenerator.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>This class is an abstract base class for a shadow click
generator. It contains two pure virtual functions that need to be
implemented by any class that inherits from it. The <span class=
"NDLSystemFont"><a href=
"NiShadowManager.htm">NiShadowManager</a></span> uses
<span class="NDLSystemFont">NiShadowClickGenerator</span> objects
to create the set of render clicks needed to render all the
shadow maps needed for a scene. In this way a <span class=
"NDLSystemFont">NiShadowClickGenerator</span> object can
encapsulate a custom algorithm to that defines how shadow maps
are produced and assigned to geometry.</p>

<p class="NDLRefHead1">Supported Virtual Functions</p>

<p class="NDLRefMemberFunction">virtual void
GenerateRenderClicks(const NiPointerList&lt;<a href=
"NiShadowGenerator.htm">NiShadowGeneratorPtr</a>&gt;&amp;
kActiveGenerators) = 0</p>

<p class="NDLRefMemberDescription">This pure virtual function is
called by the <span class="NDLSystemFont"><a href=
"NiShadowManager.htm">NiShadowManager</a></span> and is
responsible for providing all the <span class=
"NDLSystemFont"><a href=
"NiShadowRenderClick.htm">NiShadowRenderClick</a></span> objects
that will be needed to render the shadow maps for the current
scene. The first parameter <span class=
"NDLSystemFont">kActiveGenerators</span> is a list of all the
active shadow generators in the scene.</p>

<p class="NDLRefMemberDescription">Every <span class=
"NDLSystemFont"><a href=
"NiShadowRenderClick.htm">NiShadowRenderClick</a></span> object
that is produced by this function an needs to be rendered will
need to be added to the <span class=
"NDLSystemFont">NiShadowManager</span> via the <span class=
"NDLSystemFont">AddRenderClick()</span> function.</p>

<p class="NDLRefMemberFunction">virtual void
ReorganizeActiveShadowGenerators(NiTPointerList&lt;<a href=
"NiShadowGenerator.htm">NiShadowGeneratorPtr</a>&gt;&amp;
kActiveGenerators, NiTPointerList&lt;<a href=
"NiShadowGenerator.htm">NiShadowGeneratorPtr</a>&gt;&amp;
kAllGenerators) = 0</p>

<p class="NDLRefMemberDescription">The <span class=
"NDLSystemFont"><a href=
"NiShadowManager.htm">NiShadowManager</a></span> blindly enforces
a maximum number of allowed active <span class=
"NDLSystemFont"><a href=
"NiShadowGenerator.htm">NiShadowGenerator</a></span> objects.
This pure virtual function is responsible for reorganizing which
<span class="NDLSystemFont"><a href=
"NiShadowGenerator.htm">NiShadowGenerator</a></span> objects are
active. This allows the <span class=
"NDLSystemFont">NiShadowClickGenerator</span> inherited classes
to decide which <span class="NDLSystemFont"><a href=
"NiShadowGenerator.htm">NiShadowGenerator</a></span> object are
active based on what will produce the best results for the
current scene. The function is provided with two parameters, a
list of all the currently active <span class=
"NDLSystemFont"><a href=
"NiShadowGenerator.htm">NiShadowGenerator</a></span> objects and
a list of all the <span class="NDLSystemFont"><a href=
"NiShadowGenerator.htm">NiShadowGenerator</a></span> objects both
active and inactive.</p>

<p class="NDLRefMemberFunction">virtual bool
PrepareSpotLightShadowGenerator(<a href=
"NiShadowGenerator.htm">NiShadowGenerator</a>* pkGenerator) =
0</p>

<p class="NDLRefMemberFunction">virtual bool
PreparePointLightShadowGenerator(<a href=
"NiShadowGenerator.htm">NiShadowGenerator</a>* pkGenerator) =
0</p>

<p class="NDLRefMemberFunction">virtual bool
PrepareDirectionalLightShadowGenerator(<a href=
"NiShadowGenerator.htm">NiShadowGenerator</a>* pkGenerator) =
0</p>

<p class="NDLRefMemberDescription">These pure virtual function
are called by the shadow manager when a <span class=
"NDLSystemFont">NiShadowClickGenerator</span> is set active. When
a <span class="NDLSystemFont">NiShadowClickGenerator</span> is
set as the active click generator the <span class=
"NDLSystemFont"><a href=
"NiShadowManager.htm">NiShadowManager</a></span> will iterate
over all the <span class="NDLSystemFont"><a href=
"NiShadowGenerator.htm">NiShadowGenerator</a></span> objects and
call the appropriate prepare function based on the light type of
the <span class="NDLSystemFont"><a href=
"NiDynamicEffect.htm">NiDynamicEffect</a></span> that is attached
to the shadow generator. These functions are responsible for
setting up all the appropriate callback functions for the
provided shadow generator.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">const NiFixedString&amp;
GetName()</p>

<p class="NDLRefMemberDescription">This function returns the name
of the <span class="NDLSystemFont">NiShadowClickGenerator</span>.
Each <span class="NDLSystemFont">NiShadowClickGenerator</span>
inherited class must have a unique name.</p>

<p class="NDLRefMemberFunction"><span class=
"NDLSystemFont"><a href=
"NiViewRenderClick.htm">NiViewRenderClick</a></span>*
PreparePostProcessClick(<span class="NDLSystemFont"><a href=
"NiTexture.htm">NiTexture</a></span>* pkSourceTexture,
<span class="NDLSystemFont"><a href=
"NiRenderTargetGroup.htm">NiRenderTargetGroup</a></span>*
pkDestRTG, <a href="NiMaterial.htm">NiMaterial</a>*
pkPostProcessMat)</p>

<p class="NDLRefMemberDescription">This function is responsible
for providing an <span class="NDLSystemFont"><a href=
"NiViewRenderClick.htm">NiViewRenderClick</a></span> that will
perform full screen post-process operation. The first parameter,
<span class="NDLSystemFont">pkSourceTexture</span>, is a
<span class="NDLSystemFont"><a href=
"NiTexture.htm">NiTexture</a></span> that contains the data that
should have the post-process performed on it. The second
parameter, <span class="NDLSystemFont">pkDestRTG</span>, is the
<span class="NDLSystemFont"><a href=
"NiRenderTargetGroup.htm">NiRenderTargetGroup</a></span> that
will contain the result of the post-process operation. The third
parameter, <span class="NDLSystemFont">pkPostProcessMat</span>,
is the material that will be applied to the source data. This
material represents the shader that will be performing the
post-process operation.</p>

<p class="NDLRefMemberFunction">void AddRenderClick(<a href=
"NiRenderClick.htm">NiRenderClick</a>* pkRenderClick)</p>

<p class="NDLRefMemberDescription">This function adds the render
click, <span class="NDLSystemFont">pkRenderClick</span>, to the
<span class="NDLSystemFont"><a href=
"NiShadowManager.htm">NiShadowManager</a></span>'s list of clicks
need to be rendered for the current frame.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
