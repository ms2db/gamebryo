<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiDefaultShadowClickGenerator</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiDefaultShadowClickGenerator</p>

<p class="NDLRefParentage">: public <a href=
"NiShadowClickGenerator.htm">NiShadowClickGenerator</a></p>

<p class="NDLRefHeaderFile">
&lt;NiDefaultShadowClickGenerator.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>This class inherits from <a href=
"NiShadowClickGenerator.htm"><span class=
"NDLSystemFont">NiShadowClickGenerator</span></a> an is the
default shadow click generator used by Gamebryo</p>

<p class="NDLRefHead1">Supported Virtual Functions</p>

<p class="NDLRefMemberFunction">virtual void
GenerateRenderClicks(const
NiPointerList&lt;NiShadowGeneratorPtr&gt;&amp;
kActiveGenerators)</p>

<p class="NDLRefMemberDescription">This function iterates over
all the active NiShadowGenerator objects in the kActiveGenerators
list and depending on the light type of the NiDynamicEffect
attached to the shadow generator calls the correct handle
function (HandleSpotLight, HandlePointLight,
HandleDirectionalLight). See below for more information on the
Handle functions.</p>

<p class="NDLRefMemberFunction">virtual void
ReorganizeActiveShadowGenerators(NiTPointerList&lt;NiShadowGeneratorPtr&gt;&amp;
kActiveGenerators,
NiTPointerList&lt;NiShadowGeneratorPtr&gt;&amp; kAllGenerators) =
0</p>

<p class="NDLRefMemberDescription">If the number of shadow
generators in the scene does not exceed the shadow manager's
maximum allowed number of active shadow generators then this
function does nothing. However, if the number of shadow
generators does exceed this limit then this function will sort
all of the shadow generators based on their distance from the
scene camera. The 'X' closest shadow generators will be
activated, with 'X' representing the maximum number of allowed
active shadow generators. Note: Since directional lights have no
position and generally affect all objects in the scene when this
sorting occurs directional lights are give priority over all
other light types.</p>

<p class="NDLRefMemberFunction">virtual bool
PrepareSpotLightShadowGenerator(NiShadowGenerator* pkGenerator) =
0</p>

<p class="NDLRefMemberFunction">virtual bool
PreparePointLightShadowGenerator(NiShadowGenerator* pkGenerator)
= 0</p>

<p class="NDLRefMemberFunction">virtual bool
PrepareDirectionalLightShadowGenerator(NiShadowGenerator*
pkGenerator) = 0</p>

<p class="NDLRefMemberDescription">These functions setup the all
the needed callbacks for the provided shadow generator. The
NiDefaultShadowClickGenerator has a simple one to one mapping
between shadow generators and shadow maps, so only single shadow
map callbacks are assigned.</p>

<p class="NDLRefMemberFunction">virtual bool
HandleSpotLight(NiShadowGenerator* pkGenerator, NiSpotLight*
pkSpotLight, bool bRegenerateView, bool bUpdateShadowMaps)</p>

<p class="NDLRefMemberFunction">virtual bool
HandlePointLight(NiShadowGenerator* pkGenerator, NiPointLight*
pkPointLight, bool bRegenerateView, bool bUpdateShadowMaps)</p>

<p class="NDLRefMemberFunction">virtual bool
HandleDirectionalLight(NiShadowGenerator* pkGenerator,
NiDirectionalLight* pkDirLight, bool bRegenerateView, bool
bUpdateShadowMaps)</p>

<p class="NDLRefMemberDescription">These functions are
responsible for assigning shadow maps to generators as well as
setting up the render clicks needed to render those shadow maps.
The first parameter, pkGenerator, is the NiShadowGenerator that
the needs a prepare render click. The second parameter is the
light for that is attached to the provided shadow generator. The
third parameter, bRegenerateView, is a boolean used to inform the
function that the render view for the generator's render click
needs to be regenerated. This boolean will be true anytime
objects are added or removed from the affected and unaffected
lists of both the shadow generator and the shadow generator's
attached light. Finally the fourth parameter, bUpdateShadowMaps,
indicates if the shadow map should be re-rendered.</p>

<p class="NDLRefMemberFunction">virtual void
ObtainAndAssignShadowMap(NiShadowGenerator* pkGenerator, unsigned
int uiSMIndex, NiRenderObject* pkGeometry = NULL)</p>

<p class="NDLRefMemberFunction">virtual void
ObtainAndAssignShadowCubeMap(NiShadowGenerator* pkGenerator,
unsigned int uiSMIndex, NiRenderObject* pkGeometry = NULL)</p>

<p class="NDLRefMemberDescription">These functions are used to
obtain a appropriate shadow map from the NiShadowManager and
assign it to the provided shadow generator.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">void
UpdateDirLightFrustum(NiBound* pkBound, NiShadowGenerator*
pkGenerator, NiDirectionalLight* pkDirLight, float*
pfNearClippingDist, float* pfFarClippingDist, float*
pfFrustumWidth, NiPoint3* pkPosition)</p>

<p class="NDLRefMemberDescription">This function is used to
compute appropriate view frustum parameters for a shadow
generator that is attached to a directional light.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
