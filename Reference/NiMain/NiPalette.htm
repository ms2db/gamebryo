<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiPalette</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiPalette</p>

<p class="NDLRefParentage">: public <a href=
"NiObject.htm"><span>NiObject</span></a></p>

<p class="NDLRefHeaderFile">&lt;NiPalette.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiPalette</span> objects represent
mappings from 8-bit indices to 24-bit RGB or 32-bit RGBA colors.
These mappings are generally known as "palettes", "color look-up
tables", or "CLUTs" for short. Each <span class=
"NDLSystemFont">NiPalette</span> contains a set of <span class=
"NDLSystemFont">256</span> ordered <span class=
"NDLSystemFont">PaletteEntry</span>s, which are each RGBA values
(8 bits per color). If the palette has no alpha values, the alpha
component in each palette entry is ignored, and assumed to be
<span class="NDLSystemFont">255</span> (fully opaque). As
children of <span class="NDLSystemFont">NiObject</span>, palettes
may be shared between multiple <span class=
"NDLSystemFont">NiPixelData</span> objects (which are the objects
that generally refer to <span class=
"NDLSystemFont">NiPalette</span>s). Such behavior is known as
"palette sharing". Palette entries may be changed on the fly (see
below) as desired.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiPalette()</p>

<p class="NDLRefMemberDescription">Default constructor. Creates a
palette without alpha values, and leaves the palette entries
uninitialized. Applications using this constructor should set the
palette entries prior to use. See the notes below regarding
"Changing Palette Entries" for details. The revision ID is set to
<span class="NDLSystemFont">1</span>.</p>

<p class="NDLRefMemberFunction">NiPalette(bool bHasAlpha,
unsigned int uiNumEntries)</p>

<p class="NDLRefMemberDescription">Creates a palette with or
without alpha values (depending on the <span class=
"NDLSystemFont">bHasAlpha</span> parameter), and leaves the
palette entries uninitialized. Applications using this
constructor should set the palette entries prior to use. See the
notes below regarding "Changing Palette Entries" for details. The
revision ID is set to 1.</p>

<p class="NDLRefMemberFunction">NiPalette(bool bHasAlpha,
unsigned int uiNumEntries, const <a href=
"NiPalette.htm#NiPalette_PaletteEntry">PaletteEntry</a>*
pkEntries)</p>

<p class="NDLRefMemberDescription">Creates a palette from the
given set of entries and the alpha flag. The given array of
<span class="NDLSystemFont"><a href=
"NiPalette.htm#NiPalette_PaletteEntry">PaletteEntry</a></span>
objects is copied into the palette, not used directly. If the
<span class="NDLSystemFont">bHasAlpha</span> flag is true, the
incoming palette entries are assumed to include valid alpha
values. If <span class="NDLSystemFont">bHasAlpha</span> is false,
the <span class="NDLSystemFont"><a href=
"NiPalette.htm#NiPalette_PaletteEntry">PaletteEntry</a></span>
objects are assumed to have alpha values of <span class=
"NDLSystemFont">255</span>. The revision ID is set to
<span class="NDLSystemFont">1</span>.</p>

<p class="NDLRefMemberFunction">NiPalette(const NiPalette&amp;
kPal)</p>

<p class="NDLRefMemberDescription">Copy constructor; copies all
palette entries from the source palette, as well as the alpha
flag. The revision ID is set to <span class=
"NDLSystemFont">1</span>.</p>

<p class="NDLRefHead1">Operators</p>

<p class="NDLRefMemberFunction">NiPalette&amp; operator=(const
NiPalette&amp; kPal)</p>

<p class="NDLRefMemberDescription">Copies all palette entries
from one palette to another. Also copies the alpha flag as well.
This operator increments the destination palette's revision
ID. Any existing renderer-specific data will be cleared from the
destination palette.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">bool GetHasAlpha() const</p>

<p class="NDLRefMemberDescription">Returns the value of the alpha
flag, which was set at creation time. If this function returns
<span class="NDLSystemFont">true</span>, the palette entries
include valid alpha values. If it returns <span class=
"NDLSystemFont">false</span>, the palette entry alpha values are
not valid and should be ignored.</p>

<p class="NDLRefMemberFunction"><span class=
"NDLSystemFont">u</span>nsigned int GetNumEntries() const</p>

<p class="NDLRefMemberDescription">Returns the number of palette
entries.</p>

<p class="NDLRefMemberFunction"><span class=
"NDLSystemFont"><a href=
"NiPalette.htm#NiPalette_PaletteEntry">PaletteEntry</a></span>*
GetEntries()</p>

<p class="NDLRefMemberFunction">const <span class=
"NDLSystemFont"><a href=
"NiPalette.htm#NiPalette_PaletteEntry">PaletteEntry</a></span>*
GetEntries() const</p>

<p class="NDLRefMemberDescription">These functions return the
palette entries, either as read-only or as read-write, depending
on whether or not the palette is constant. See the notes below
for details on how to modify palette entries.</p>

<p class="NDLRefMemberFunction">void MarkAsChanged()</p>

<p class="NDLRefMemberDescription">Informs the rendering system
that the palette entries have been changed and must be reloaded
to any renderer-specific data objects. This function increments
the revision ID of the palette. See the notes below for details
on how to modify palette entries.</p>

<p class="NDLRefMemberFunction">unsigned int GetRevisionID()
const</p>

<p class="NDLRefMemberDescription">Returns the current value of
the palette's revision ID. See the notes below for details on how
to modify palette entries.</p>

<p class="NDLRefHead1">Nested Classes</p><a name=
"NiPalette_PaletteEntry" id="NiPalette_PaletteEntry"></a>

<p class="NDLRefHead2">NiPalette::PaletteEntry</p>

<pre>
class NiPalette::PaletteEntry : public NiMemObject
{
public:
        PaletteEntry(){}
        unsigned char m_ucRed;
        unsigned char m_ucGreen;
        unsigned char m_ucBlue;
        unsigned char m_ucAlpha;
};
</pre>

<p><span class="NDLSystemFont">NiPalette</span> has an array of
<span class="NDLSystemFont">NiPalette::PaletteEntry</span>
objects that represent the colors at each index in the palette.
The constructor leaves the entry elements uninitialized for
performance reasons. The entries are declared public for ease of
access</p>

<p class="NDLRefHead1">Notes</p><a name=
"Renderer_specific_Palette_Data" id=
"Renderer_specific_Palette_Data"></a>

<p class="NDLRefHead2">Renderer-specific Palette Data</p>

<p>Upon creation, each palette will preload itself to the
renderer. Renderers can cache palette information for use with
any <span class="NDLSystemFont"><a href=
"NiTexture.htm">NiTexture</a></span> objects that refer to them.
As a result, applications must follow the guidelines below to
ensure that the palette entry changes are updated to the
renderers' palette representations.</p><a name=
"Changing_Palette_Entries" id="Changing_Palette_Entries"></a>

<p class="NDLRefHead2">Changing Palette Entries</p>

<p>Because of the existence of renderer-specific cached palette
data, applications that wish to change any entries in a palette
once it is returned by the constructor must call <span class=
"NDLSystemFont">NiPalette::MarkAsChanged</span> after changing
the data, but before the next rendering operation involving the
palette.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
