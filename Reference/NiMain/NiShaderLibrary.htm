<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiShaderLibrary</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>


<p class="NDLRefHeadClassTitle">NiShaderLibrary</p>

<p class="NDLRefParentage">: public <span><a HREF="NiRefObject.htm">NiRefObject</a></span></p>

<p class="NDLRefHeaderFile">&lt;NiShaderLibrary.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>The <span class="NDLSystemFont">NiShaderLibrary</span> 
 provides a platform-independent interface for shader library functionality. 
 </p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiShaderLibrary(char* pcName)</p>

<p class="NDLRefMemberDescription">The constructor creates an <span class="NDLSystemFont">NiShaderLibrary</span> named 
 <span class="NDLSystemFont">pcName</span>.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">const char* GetName()</p>

<p class="NDLRefMemberDescription">Returns the name of the library.</p>

<p class="NDLRefMemberFunction">void SetName(char* pcName)</p>

<p class="NDLRefMemberDescription">Sets the name of the library.</p>

<p class="NDLRefMemberFunction"><a href = "../../Reference/efd/efd__SystemDesc.htm">efd::SystemDesc::RendererID</a> GetRendererID() const</p>

<p class="NDLRefMemberDescription">Returns the identity of the renderer that the shader library serves.</p>

<p class="NDLRefMemberFunction">virtual <a HREF="NiShader.htm">NiShader</a>* 
 GetShader(<a HREF="NiRenderer.htm">NiRenderer</a>* pkRenderer, const char* 
 pcName, unsigned int uiImplementation)</p>

<p class="NDLRefMemberDescription">Returns the shader of the given <span 
 class="NDLSystemFont">pcName</span>, using the supplied implementation, 
 <span class="NDLSystemFont">uiImplementation.</span> The base implementation 
 of the function will always return <span class="NDLSystemFont">NULL</span>. 
 See the notes below.</p>

<p class="NDLRefMemberFunction">virtual bool LoadShader(const char* pcFile)</p>

<p class="NDLRefMemberDescription">Loads a shader. Returns true when successful.</p>

<p class="NDLRefMemberFunction">virtual bool ReleaseShader(const char* pcName, 
 unsigned int uiImplementation)</p>

<p class="NDLRefMemberFunction">virtual bool ReleaseShader(NiShader* pkShader)</p>

<p class="NDLRefMemberDescription">Attempts to release the shader that's 
 passed in through <span class="NDLSystemFont">pkShader</span>, or that matches 
 the given name and implementation. If the shader is successfully found 
 and released from the shader library, then the function returns <span 
 class="NDLSystemFont">true</span>. Note that releasing a shader from the 
 shader library won't necessarily cause it to be deleted if there are other 
 objects in an application that hold smart pointers to the shader.</p>

<p class="NDLRefMemberFunction">virtual <a HREF="NiShaderLibraryDesc.htm">NiShaderLibraryDesc</a>* 
 GetShaderLibraryDesc()</p>

<p class="NDLRefMemberDescription">Returns the <span class="NDLSystemFont"><a HREF="NiShaderLibraryDesc.htm">NiShaderLibraryDesc</a></span> instance 
 for the library. This function is intended primarily for use in the tool-chain, 
 but applications are free to use the description as they see fit.</p>


<p class="NDLRefMemberFunction">virtual unsigned int GetNumSupportedMimeTypes()</p>

<p class="NDLRefMemberDescription">Return the number of supported mime types.</p>

<p class="NDLRefMemberFunction">virtual const char* GetSupportedMimeType(unsigned int uiIdx)</p>

<p class="NDLRefMemberDescription">Returns one of the supported mime types.</p>

<p class="NDLRefHead1">Notes</p>

<p>Since this interface is platform-independent for libraries, 
 the class doesn't do anything beyond setting and getting the name of the 
 library and getting a library description. It is intended to allow renderer-agnostic 
 systems, such as the streaming system, to function properly and get useful 
 information about the shader library.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
