<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiDDSReader</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiDDSReader</p>

<p class="NDLRefParentage">: public <a href=
"NiImageReader.htm"><span>NiImageReader</span></a></p>

<p class="NDLRefHeaderFile">&lt;NiDDSReader.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>The <span class="NDLSystemFont">NiDDSReader</span> is a
subclass of the abstract <span class="NDLSystemFont"><a href=
"NiImageReader.htm">NiImageReader</a></span> class that
implements the reading of compressed Microsoft DDS (Direct Draw
Surface) files. The loader is not general-purpose, and can only
handle DDS files that represent textures with RGBA32, RGB24,
RGBA16, DXT1, DXT3, or DXT5 pixel formats. It cannot load
palettized files. The loader can support flat or mipmapped DDS
files. Most applications will not use this class directly, but
rather will use the <span class="NDLSystemFont"><a href=
"NiDevImageConverter.htm">NiDevImageConverter</a></span>, which
includes this class as one of its loaders. The DDS loader does
not expand the compressed files on load it loads them into
compressed-format <span class="NDLSystemFont"><a href=
"NiPixelData.htm">NiPixelData</a></span> objects. Applications
that need to expand compressed textures for any reason should use
the <span class="NDLSystemFont"><a href=
"NiTextureCodec.htm">NiTextureCodec</a></span>.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiDDSReader()</p>

<p class="NDLRefMemberDescription">Default (and sole)
constructor. Creates the internal data structures required for
loading DDS files.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">virtual bool CanReadFile(const
char* pcFileExtension) const</p>

<p class="NDLRefMemberDescription">Returns true if the given
extension is <span class="NDLSystemFont">.dds</span>, and false
otherwise. The base class interface uses this virtual function to
determine whether a generic image loader can load a given
file.</p>

<p class="NDLRefMemberFunction">virtual <span class=
"NDLSystemFont"><a href="NiPixelData.htm">NiPixelData</a></span>*
ReadFile(<a href=
"../../Reference/NiSystem/NiFile.htm">NiFile</a>&amp; kIst,
<span class="NDLSystemFont"><a href=
"NiPixelData.htm">NiPixelData</a></span>* pkOptDest)</p>

<p class="NDLRefMemberDescription">Reads the given file (assuming
that it is a DDS file) and returns the data from the file as a
flat or mipmapped <span class="NDLSystemFont"><a href=
"NiPixelData.htm">NiPixelData</a></span> object. The output pixel
format will be <span class="NDLSystemFont"><a href=
"NiPixelFormat.htm">NiPixelFormat::DXT1, DXT2, or
DXT5</a></span>. The function returns <span class=
"NDLSystemFont">NULL</span> if the DDS file appears to be of the
wrong format, is not a texture, or is not compressed. The calling
function should not rely on the position of the file pointer
following a call to this function.</p>

<p class="NDLRefMemberFunction">virtual bool ReadHeader(<a href=
"../../Reference/NiSystem/NiFile.htm">NiFile</a>&amp; kIst,
unsigned int&amp; uiWidth, unsigned int&amp; uiHeight, <a href=
"NiPixelFormat.htm">NiPixelFormat</a>&amp; kFormat,
bool&amp; bMipmap, unsigned int&amp; uiFaces)</p>

<p class="NDLRefMemberDescription">Returns <span class=
"NDLSystemFont">true</span> if the file appears to be a valid and
readable by the <span class=
"NDLSystemFont">NiDDSImageReader</span> and <span class=
"NDLSystemFont">false</span> otherwise. If the function returns
true, the <span class="NDLSystemFont">uiWidth</span>,
<span class="NDLSystemFont">uiHeight</span>, <span class=
"NDLSystemFont">kFormat</span>, and <span class=
"NDLSystemFont">bMipmap</span> parameters will contain the width
of the image file, the height of the image file, the destination
pixel format, and whether or not the file contains mipmap data,
respectively. Note that <span class=
"NDLSystemFont">kFormat</span> will be <span class=
"NDLSystemFont"><a href=
"NiPixelFormat.htm">NiPixelFormat::RGBA32, RGB24, DXT1, DXT2, or
DXT5</a></span>. DDS files may contain mipmap levels, so
<span class="NDLSystemFont">bMipmap</span> may be either
<span class="NDLSystemFont">true or false</span>. DDS files may
also contain cube maps, so the face count may be one or six. The
calling function should not rely on the position of the file
pointer following a call to this function.</p>

<p class="NDLRefHead1">Notes</p>

<p class="NDLRefHead2">Generating DDS Files</p>

<p>Compressed (flat or mipmapped) texture DDS files may be
created in one of several applications. The DirectX Texture Tool
is a freely-available component of the DirectX9 SDK, and can
convert common image file formats (TGA and BMP) into DXT1, DXT3
or DXT5 formats with or without mipmap levels. Several plug-ins
for Adobe Photoshop are also freely available from companies
including nVidia and S3 (SonicBlue) that can generate compressed
DDS files.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
