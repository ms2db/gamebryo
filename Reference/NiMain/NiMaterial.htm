<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiMaterial</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiMaterial</p>

<p class="NDLRefParentage">: public <a HREF="NiRefObject.htm">NiRefObject</a></p>

<p class="NDLRefHeaderFile">&lt;NiMaterial.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>This class is the base class for all materials. Please 
 see the <a HREF="../../Programmer/NiMaterial/NiMaterial.htm"><span 
 class="NDLSystemFont">NiMaterial</span></a> section of the programmer's 
 guide for more details.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberDescription">There are no public constructors for this 
 base class.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">const NiFixedString&amp; GetName() const</p>

<p class="NDLRefMemberDescription">Returns the name of this <span class="NDLSystemFont">NiMaterial</span>.</p>

<p class="NDLRefMemberFunction">virtual bool IsShaderCurrent(<a HREF="NiShader.htm">NiShader</a>* 
 pkShader, const <a HREF="NiRenderObject.htm">NiRenderObject</a>* pkGeometry, 
 const const <a HREF="NiPropertyState.htm">NiPropertyState</a>* pkState, 
 const <a HREF="NiDynamicEffectState.htm">NiDynamicEffectState</a>* pkEffects, 
 unsigned int uiMaterialExtraData) = 0</p>

<p class="NDLRefMemberDescription">Determine whether or not the shader that 
 is passed in matches what this material expects given the state of the 
 render object, its properties, and its effects. The extra data field is 
 an extra 32-bit field for use in providing additional information to the 
 material.</p>

<p class="NDLRefMemberFunction">virtual <a href="NiShader.htm">NiShader</a>* 
 GetCurrentShader(const <a href="NiRenderObject.htm">NiRenderObject</a>* 
 pkGeometry, const <a href="NiPropertyState.htm">NiPropertyState</a>* pkState, 
 const <a href="NiDynamicEffectState.htm">NiDynamicEffectState</a>* pkEffects, 
 unsigned int uiMaterialExtraData) = 0</p>

<p class="NDLRefMemberDescription">This method returns the <span 
 class="NDLSystemFont"><a href="NiShader.htm">NiShader</a></span> that matches the requirements 
 of this material as defined by the state of the geometry, its properties, 
 and its effects. The extra data field is an extra 32-bit field for use 
 in providing additional information to the material.</p>

<p class="NDLRefMemberFunction">virtual void UnloadShaders() = 0</p>

<p class="NDLRefMemberDescription">This method is called by the renderers 
 or the host application to force the material to remove all internal <a 
 href="NiShader.htm"><span class="NDLSystemFont">NiShader</span></a> data 
 members.</p>

<p class="NDLRefMemberFunction">virtual void SetWorkingDirectory(const char* 
 pcWorkingDir)</p>

<p class="NDLRefMemberDescription">This method is called in order to set 
 the working directory for a given material. It is up to the material to 
 determine what, if any files, it will use from this folder.</p>

<p class="NDLRefHead1">Supported Static Functions</p>

<p class="NDLRefMemberFunction">static NiMaterial* GetMaterial(const NiFixedString&amp; 
 kName)</p>

<p class="NDLRefMemberDescription">Returns the <span class="NDLSystemFont">NiMaterial 
 </span>whose name matches the input string.</p>

<p class="NDLRefMemberFunction">static unsigned int GetMaterialCount()</p>

<p class="NDLRefMemberDescription">Returns the number of materials currently 
 in memory.</p>

<p class="NDLRefMemberFunction">static void UnloadShadersForAllMaterials()</p>
<p class="NDLRefMemberDescription">
Convenience method to UnloadShaders on all materials.
</p>    

<p class="NDLRefMemberFunction">static void SetWorkingDirectoryForAllMaterials(const char* pcWorkingDir)</p>
<p class="NDLRefMemberDescription">
Convenience method to SetWorkingDirectory on all materials.
</p>    
    
<p class="NDLRefMemberFunction">static void SetDefaultWorkingDirectory(const char* pcWorkingDir)</p>
<p class="NDLRefMemberDescription">
Set the default working directory that is set when a NiMaterial is created.
</p>    

<p class="NDLRefMemberFunction">static const char* GetDefaultWorkingDirectory()</p>
<p class="NDLRefMemberDescription">
Get the default working directory that is set when a NiMaterial is created.
</p>        

<p class="NDLRefMemberFunction">static NiMaterialIterator GetFirstMaterialIter()</p>
<p class="NDLRefMemberDescription">
Get an iterator to the first NiMaterial instance. 
</p>    

<p class="NDLRefMemberFunction">static NiMaterial* GetNextMaterial(NiMaterialIterator&amp; kIter)</p>
<p class="NDLRefMemberDescription">
Get a pointer to the NiMaterialInstance held in the iterator and advance to the next one.
</p>  

<p class="NDLRefMemberFunction">static void BeginReadMaterialList()</p>
<p class="NDLRefMemberDescription">
Locks the material list for reading. Should be called before 
<span class="NDLSystemFont">NiMaterial::GetFirstMaterialIter()</span>.
</p>  

<p class="NDLRefMemberFunction">static void EndReadMaterialList()</p>
<p class="NDLRefMemberDescription">
Unlocks the material list after reading. Should be called after the last  
<span class="NDLSystemFont">NiMaterial::GetNextMaterial()</span> call.
</p>
    
<p class="NDLRefHead1">Notes</p>

<p>For thread-safe access to the material list, always precede 
<span class="NDLSystemFont">NiMaterial::GetFirstMaterialIter()</span> 
with <span class="NDLSystemFont">NiMaterial::BeginReadMaterialList()</span> and followup after 
all calls to <span class="NDLSystemFont">NiMaterial::GetNextMaterial()</span> with 
<span class="NDLSystemFont">NiMaterial::EndReadMaterialList()</span>. 
</p>

<p class="NDLRefHead2">Enumerated Constants</p>

<!--(Table)=========================================================-->
<table> 
  <thead>
	<tr>
      <th>Enumeration</th>
      <th>Value</th>
  </tr>
  </thead>
  <tbody>  

<tr>
  <td>
    <span class="NDLSystemFont">VS_INPUTS_MAX_NUM</span></td>
  <td>
    16
  </td>
</tr>

<tr>
  <td>
    <span class="NDLSystemFont">VS_INPUTS_USE_GEOMETRY</span>
  </td>
  <td>
    0xFFFFFFFE
  </td>
</tr>

<tr>
  <td>
    <span class="NDLSystemFont">VS_INPUTS_TERMINATE_ARRAY</span>
  </td>
  <td>
    0xFFFFFFFF
  </td>
</tr>
</tbody>
</table>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
