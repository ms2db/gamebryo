<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Ni2DBuffer</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">Ni2DBuffer</p>

<p class="NDLRefParentage">: public <a href=
"NiObject.htm"><span>NiObject</span></a></p>

<p class="NDLRefHeaderFile">&lt;Ni2DBuffer.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>This class represents an abstract two dimensional buffer
containing pixels. This buffer differs from <a href=
"NiPixelData.htm"><span class=
"NDLSystemFont">NiPixelData</span></a> in that all of the pixels
are stored on the graphics card and are therefore inaccessible to
the CPU without performance degradation.</p>

<p class="NDLRefHead1">Constructors</p>

<p>No public constructors are available, as this class is
intended to be created by the <a href=
"NiRenderer.htm">renderer</a> or an <span class=
"NDLSystemFont"><a href=
"NiRenderedTexture.htm">NiRenderedTexture</a></span>.</p>

<p class="NDLRefHead1">Static Member Functions</p>

<p class="NDLRefMemberFunction">static void
GetMSAACountAndQualityFromPref(<a href=
"Ni2DBuffer.htm#MultiSamplePreference">MultiSamplePreference</a>
ePref, unsigned int&amp; uiCount, unsigned int&amp;
uiQuality)</p>

<p class="NDLRefMemberDescription">Translates the given
<span class="NDLSystemFont"><a href=
"Ni2DBuffer.htm#MultiSamplePreference">MultiSamplePreference</a></span>
value into multisample count and associated quality level.</p>

<p class="NDLRefMemberFunction">static <a href=
"Ni2DBuffer.htm#MultiSamplePreference">MultiSamplePreference</a>
GetMSAAPrefFromCountAndQuality(unsigned int uiCount, unsigned int
uiQuality)</p>

<p class="NDLRefMemberDescription">Translates the given
multisample count and associated quality level into a
<span class="NDLSystemFont"><a href=
"Ni2DBuffer.htm#MultiSamplePreference">MultiSamplePreference</a></span>
value.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">unsigned int GetHeight()
const</p>

<p class="NDLRefMemberFunction">unsigned int GetWidth() const</p>

<p class="NDLRefMemberDescription">Get the width and height of
this buffer.</p>

<p class="NDLRefMemberFunction">const <a href=
"NiPixelFormat.htm">NiPixelFormat</a>* GetPixelFormat() const</p>

<p class="NDLRefMemberDescription">Get the <a href=
"NiPixelFormat.htm"><span class=
"NDLSystemFont">NiPixelFormat</span></a> used by this
<span class="NDLSystemFont">Ni2DBuffer</span>. A NULL value
indicates that this buffer is invalid.</p>

<p class="NDLRefMemberFunction"><a href=
"Ni2DBuffer.htm#MultiSamplePreference"><span class=
"NDLSystemFont">MultiSamplePreference</span></a> GetMSAAPref()
const</p>

<p class="NDLRefMemberDescription">Get the preferred multisample
antialiasing level for this buffer. Please refer to the <a href=
"../../RelNotes/Release_Notes_Introduction.htm">release notes</a>
for each renderer that is being used to check multisample
antialiasing support for rendered targets.</p>

<p class="NDLRefMemberFunction">virtual bool FastCopy(Ni2DBuffer*
pkDest, const <a href="NiRect.htm">NiRect</a>&lt;unsigned
int&gt;* pkSrcRect = NULL, unsigned int uiDestX = 0, unsigned int
uiDestY = 0) const</p>

<p class="NDLRefMemberDescription">This method is a convenience
function for calling the <a href="NiRenderer.htm"><span class=
"NDLSystemFont">NiRenderer</span></a> equivalent method with the
current <span class="NDLSystemFont">Ni2DBuffer</span> as the
source buffer.</p>

<p class="NDLRefMemberFunction">virtual bool Copy(Ni2DBuffer*
pkDest, const <a href="NiRect.htm">NiRect</a>&lt;unsigned
int&gt;* pkSrcRect, const <a href=
"NiRect.htm">NiRect</a>&lt;unsigned int&gt;* pkDestRect,
Ni2DBuffer::CopyFilterPreference ePref) const</p>

<p class="NDLRefMemberDescription">This method is a convenience
function for calling the <a href="NiRenderer.htm"><span class=
"NDLSystemFont">NiRenderer</span></a> equivalent method with the
current <span class="NDLSystemFont">Ni2DBuffer</span> as the
source buffer. Please see the <a href=
"Ni2DBuffer.htm#CopyFilterPreference">CopyFilterPreference</a>
section for information about the filter preferences.</p>

<p class="NDLRefHead1">Notes</p>

<a name="CopyFilterPreference" id="CopyFilterPreference"></a><p class="NDLRefHead2">CopyFilterPreference</p>

<p>This enumeration provides the renderer with a hint as to what
filtering it should use when performing the copy operation
between two buffers.</p>

<!--(Table)=========================================================-->
<table>
    <thead>
        <tr>
            <th>CopyFilterPreference</th>

            <th>Behavior</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>COPY_FILTER_NONE</td>

            <td>Causes the copy to not use filtering.</td>
        </tr>

        <tr>
            <td>COPY_FILTER_POINT</td>

            <td>Causes the copy to use point filtering.</td>
        </tr>

        <tr>
            <td>COPY_FILTER_LINEAR</td>

            <td>Causes the copy to use bilinear interpolation
            filtering.</td>
        </tr>
    </tbody>
</table>

<a name="MultiSamplePreference" id="MultiSamplePreference"></a><p class="NDLRefHead2">MultiSamplePreference</p>

<p>This type describes the multisample setting for a given 2D
surface. The <span class=
"NDLSystemFont">MultiSamplePreference</span> type is actually a
two-byte unsigned integer, with the first byte containing a
multisample count, and the second byte containing a
platform-specific value which can be used to differentiate
different multisampling settings or quality levels for a given
multisample count. A <span class=
"NDLSystemFont">MultiSamplePreference</span> value can be
converted to count and quality level values, and vice versa,
using the <span class=
"NDLSystemFont">GetMSAACountAndQualityFromPref</span> and
<span class="NDLSystemFont">GetMSAACountAndQualityFromPref</span>
functions, respectively. In additions, the renderers may have
functions that can translate between <span class=
"NDLSystemFont">MultiSamplePreference</span> values and
platform-specific multisample settings.</p>

<p>This type was once an enumeration, and the following static
const instances of the <span class=
"NDLSystemFont">MultiSamplePreference</span> type were defined
for backwards compatibility:</p>

<!--(Table)=========================================================-->
<table>
    <thead>
        <tr>
            <th>MultiSamplePreference</th>

            <th>Behavior</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>MULTISAMPLE_NONE</td>

            <td>No multisampling; value is 0x0100.</td>
        </tr>

        <tr>
            <td>MULTISAMPLE_2</td>

            <td>Two-sample multisampling; value is 0x0200.</td>
        </tr>

        <tr>
            <td>MULTISAMPLE_4</td>

            <td>Four-sample multisampling; value is 0x0400.</td>
        </tr>

        <tr>
            <td>MULTISAMPLE_4_ROTATE</td>

            <td>Alternate four-sample multisampling; value is
            0x0401.</td>
        </tr>
    </tbody>
</table>

<p>These instances should not be construed as the only possible
values for the <span class=
"NDLSystemFont">MultiSamplePreference</span> type; the full range
of multisample counts and quality levels are available, though
they may not be supported by every renderer.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
