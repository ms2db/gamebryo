<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiMaterialNode</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiMaterialNode</p>

<p class="NDLRefParentage">: public <a href=
"NiRefObject.htm">NiRefObject</a></p>

<p class="NDLRefHeaderFile">&lt;NiMaterialNode.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>This class is the base class for a node in a shade-tree. A
shade tree is a graph of functional units that, when traversed,
create a complete GPU program. Each node has a set of inputs and
outputs.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiMaterialNode()</p>

<p class="NDLRefMemberDescription">The default constructor.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">const <a href=
"NiFixedString.htm">NiFixedString</a>&amp; GetName()</p>

<p class="NDLRefMemberFunction">void SetName(const <a href=
"NiFixedString.htm">NiFixedString</a>&amp; kName)</p>

<p class="NDLRefMemberDescription">Get and set the name of this
node.</p>

<p class="NDLRefMemberFunction">const <a href=
"NiFixedString.htm">NiFixedString</a>&amp; GetType()</p>

<p class="NDLRefMemberFunction">void SetType(const <a href=
"NiFixedString.htm">NiFixedString</a>&amp; kType)</p>

<p class="NDLRefMemberDescription">Get and set the type of this
node. Common types are "Pixel" or "Vertex".</p>

<p class="NDLRefMemberFunction">unsigned int
GetInputResourceCount()</p>

<p class="NDLRefMemberDescription">Get the number of input
resources for this node.</p>

<p class="NDLRefMemberFunction"><a href=
"NiMaterialResource.htm">NiMaterialResource</a>*
GetInputResource(unsigned int uiRes)</p>

<p class="NDLRefMemberDescription">Get an input resource by
index.</p>

<p class="NDLRefMemberFunction">bool SetInputResourceAt(unsigned
int uIndex, <a href=
"NiMaterialResource.htm">NiMaterialResource</a>* pkRes)</p>

<p class="NDLRefMemberDescription">This function replaces an
existing input resource at a specified index with a new material
resource. Returns true if the index was valid and the resource
was replaced.</p>

<p class="NDLRefMemberFunction"><a href=
"NiMaterialResource.htm">NiMaterialResource</a>*
GetInputResourceByVariableName(const <a href=
"NiFixedString.htm">NiFixedString</a>&amp; kString)</p>

<p class="NDLRefMemberDescription">Get an input resource by
variable name.</p>

<p class="NDLRefMemberFunction">void AddInputResource(<a href=
"NiMaterialResource.htm">NiMaterialResource</a>* pkResource)</p>

<p class="NDLRefMemberDescription">Insert a resource into the
input array.</p>

<p class="NDLRefMemberFunction"><a href=
"NiMaterialResource.htm">NiMaterialResource</a>*
AddInputResource(const <a href=
"NiFixedString.htm">NiFixedString</a>&amp; kType, const <a href=
"NiFixedString.htm">NiFixedString</a>&amp; kResSemantic, const
<a href="NiFixedString.htm">NiFixedString</a>&amp; kResLabel,
const <a href="NiFixedString.htm">NiFixedString</a>&amp;
kResVariable, unsigned int uiCount = 1, <a href=
"NiMaterialResource.htm">NiMaterialResource</a>::Source eSource =
<a href=
"NiMaterialResource.htm">NiMaterialResource</a>::SOURCE_UNKNOWN,
<a href=
"NiShaderAttributeDesc.htm#ObjectType_Enumerations">NiShaderAttributeDesc::ObjectType</a>
eType = NiShaderAttributeDesc::OT_UNDEFINED, unsigned int
uiExtraData = 0)</p>

<p class="NDLRefMemberDescription">Create an input resource and
add it to the array.</p>

<p class="NDLRefMemberFunction">unsigned int
GetOutputResourceCount()</p>

<p class="NDLRefMemberDescription">Get the number of output
resources for this node.</p>

<p class="NDLRefMemberFunction"><a href=
"NiMaterialResource.htm">NiMaterialResource</a>*
GetOutputResource(unsigned int uiRes)</p>

<p class="NDLRefMemberDescription">Get an output resource by
index.</p>

<p class="NDLRefMemberFunction">bool SetOutputResourceAt(unsigned
int uiIndex, <a href=
"NiMaterialResource.htm">NiMaterialResource</a>* pkRes)</p>

<p class="NDLRefMemberDescription">Replaces an existing output
resource at a particular index. Returns true if the output
resource at that index previously existed and was replaced.</p>

<p class="NDLRefMemberFunction"><a href=
"NiMaterialResource.htm">NiMaterialResource</a>*
GetOutputResourceByVariableName(const <a href=
"NiFixedString.htm">NiFixedString</a>&amp; kString)</p>

<p class="NDLRefMemberDescription">Get an output resource by
variable name.</p>

<p class="NDLRefMemberFunction">void AddOutputResource(<a href=
"NiMaterialResource.htm">NiMaterialResource</a>* pkResource)</p>

<p class="NDLRefMemberDescription">Insert a resource into the
output array.</p>

<p class="NDLRefMemberFunction"><a href=
"NiMaterialResource.htm">NiMaterialResource</a>*
AddOutputResource(const <a href=
"NiFixedString.htm">NiFixedString</a>&amp; kType, const <a href=
"NiFixedString.htm">NiFixedString</a>&amp; kResSemantic, const
<a href="NiFixedString.htm">NiFixedString</a>&amp; kResLabel,
const <a href="NiFixedString.htm">NiFixedString</a>&amp;
kResVariable, unsigned int uiCount = 1, <a href=
"NiMaterialResource.htm">NiMaterialResource</a>::Source eSource =
<a href=
"NiMaterialResource.htm">NiMaterialResource</a>::SOURCE_UNKNOWN,
<a href=
"NiShaderAttributeDesc.htm#ObjectType_Enumerations">NiShaderAttributeDesc::ObjectType</a>
eType = NiShaderAttributeDesc::OT_UNDEFINED, unsigned int
uiExtraData = 0)</p>

<p class="NDLRefMemberDescription">Create an output resource and
add it to the array.</p>

<p class="NDLRefMemberFunction"><a href=
"NiMaterialResource.htm">NiMaterialResource</a>*
AddOutputConstant(const <a href=
"NiFixedString.htm">NiFixedString</a>&amp; kType, const <a href=
"NiFixedString.htm">NiFixedString</a>&amp; kDefaultValue)</p>

<p class="NDLRefMemberDescription">Add a static value to the
output array.</p>

<p class="NDLRefMemberFunction">virtual bool
ContainsResource(<a href=
"NiMaterialResource.htm">NiMaterialResource</a>* pkRes)</p>

<p class="NDLRefMemberDescription">Returns whether or not this
node contains the given resource.</p>

<p class="NDLRefMemberFunction">virtual bool
IsOutputResource(<a href=
"NiMaterialResource.htm">NiMaterialResource</a>* pkRes)</p>

<p class="NDLRefMemberDescription">Returns whether or not this
node contains the given resource in its output array.</p>

<p class="NDLRefMemberFunction">virtual bool
IsInputResource(<a href=
"NiMaterialResource.htm">NiMaterialResource</a>* pkRes)</p>

<p class="NDLRefMemberDescription">Returns whether or not this
node contains the given resource in its input array.</p>

<p class="NDLRefMemberFunction">virtual NiMaterialNode*
Clone()</p>

<p class="NDLRefMemberDescription">Create a duplicate of this
node.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
