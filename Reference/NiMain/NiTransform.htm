<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiTransform</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiTransform</p>

<p class="NDLRefParentage">: public <a href="../../Reference/NiSystem/NiMemObject.htm"><span>NiMemObject</span></a></p>

<p class="NDLRefHeaderFile">&lt;NiTransform.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>This function is a simple container class for storing 
 a transformation. A Gamebryo transformation is defined by three components: 
 a 3x3 rotation matrix, a translation vector, and a uniform scale. These 
 components are stored in <span class="NDLSystemFont">NiTransform</span> 
 in publicly accessible member variables:</p>

<p><span class="NDLSystemFont"><a HREF="NiMatrix3.htm">NiMatrix3</a> 
 m_Rotate;<a HREF="NiPoint3.htm"><br>
NiPoint3</a> m_Translate;<br>
float m_fScale;</span></p>

<p class="NDLRefHead1">Constructors</p>

<p><span class="NDLSystemFont">NiTransform</span> 
 does not define a constructor. Its members are left uninitialized. </p>

<p class="NDLRefHead1">Operators</p>

<p class="NDLRefMemberFunction">bool operator!=(const NiTransform&amp; kXform) 
 const</p>
<p class="NDLRefMemberDescription">Returns true if any component of this transform is not equivalent to the corresponding component of <span class="NDLSystemFont">kXform</span>. Returns false if each component of this transform is equivalent to the corresponding component of <span class="NDLSystemFont">kXform</span>. </p>
 
<p class="NDLRefMemberFunction">NiTransform operator*(const NiTransform&amp; 
 kXform) const</p>

<p class="NDLRefMemberFunction"><a HREF="NiPoint3.htm">NiPoint3</a> operator*(const 
 <a HREF="NiPoint3.htm">NiPoint3</a>&amp; kPoint) const</p>

<p class="NDLRefMemberDescription">Transforms an <span class="NDLSystemFont">NiPoint3</span> 
 by the specified <span class="NDLSystemFont">NiTransform</span> and returns 
 an NiPoint3 containing the result.&nbsp; The returned result is the right-hand 
 point multiplied by the <span class="NDLSystemFont">NiTransform</span>'s 
 rotation matrix, scaled by the <span class="NDLSystemFont">NiTransform</span>'s 
 scale, plus the <span class="NDLSystemFont">NiTransform</span>'s translation 
 component.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">void MakeIdentity()</p>

<p class="NDLRefMemberDescription">Sets the rotation matrix to the identity 
 matrix, all elements of the translation vector to <span class="NDLSystemFont">0</span>, and the scale to 
 <span class="NDLSystemFont">1.0</span>.</p>

<p class="NDLRefMemberFunction">void Invert(NiTransform&amp; kDest) const</p>

<p class="NDLRefMemberDescription">Stores the inverse of the transformation 
 in <span class="NDLSystemFont">kDest</span>. </p>

<p class="NDLRefMemberFunction">static void Interpolate(</p>

<p class="NDLRefMemberFunction"><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->float 
 fAmount, </p>

<p class="NDLRefMemberFunction"><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->const 
 NiTransform&amp; kStart,</p>

<p class="NDLRefMemberFunction"><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->const 
 NiTransform&amp; kFinish,</p>

<p class="NDLRefMemberFunction"><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->NiTransform&amp; 
 kOutput)</p>

<p class="NDLRefMemberDescription">Interpolates between two transformations, 
 using linear interpolation for scale and translations, and spherical interpolation 
 for rotation. If fAmount is outside the range of 0-1, it is clamped.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
