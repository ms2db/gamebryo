<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiRenderStep</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiRenderStep</p>

<p class="NDLRefParentage">: public <a href=
"NiRefObject.htm">NiRefObject</a></p>

<p class="NDLRefHeaderFile">&lt;NiRenderStep.h&gt;</p>

<p class="NDLRefHead1">Discussion</p>

<p>This class is an abstract base class for all render steps. It
represents one step in an entire rendering process. The pure
virtual <span class="NDLSystemFont">PerformRendering</span>
function can be overridden by derived classes to implement custom
rendering functionality. <span class=
"NDLSystemFont">NiRenderStep</span> provides a pure virtual
interface for setting and getting the output render target group
for the step, if any. Pre- and post-processing callbacks are also
supported.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiRenderStep()</p>

<p class="NDLRefMemberDescription">The sole constructor for this
class initializes the active state to true and the name to
"Render Step".</p>

<p class="NDLRefHead1">Supported Virtual Functions</p>

<p class="NDLRefMemberFunction">virtual bool
SetOutputRenderTargetGroup(<a href=
"NiRenderTargetGroup.htm">NiRenderTargetGroup</a>*
pkOutputRenderTargetGroup) = 0</p>

<p class="NDLRefMemberFunction">virtual <a href=
"NiRenderTargetGroup.htm">NiRenderTargetGroup</a>*
GetOutputRenderTargetGroup() = 0</p>

<p class="NDLRefMemberDescription">These pure virtual functions
set and get the render target group what will contain the final
output of the render step. Render steps are not required to
support accessing an output render target group. If <span class=
"NDLSystemFont">SetOutputRenderTargetGroup</span> returns false,
the render step does not allow the output render target group to
be set. If <span class=
"NDLSystemFont">GetOutputRenderTargetGroup</span> returns a null
pointer, the render step does not allow the output render target
group to be accessed. A typical example of a render step that
would not support accessing the output render target group would
be a step that renders to multiple different buffers that will
only be used as textures in subsequent steps (such as for a
rendered cube map).</p>

<p class="NDLRefMemberFunction">virtual unsigned int
GetNumObjectsDrawn() const = 0;</p>

<p class="NDLRefMemberFunction">virtual float GetCullTime() const
= 0;</p>

<p class="NDLRefMemberFunction">virtual float GetRenderTime()
const = 0;</p>

<p class="NDLRefMemberDescription">These pure virtual functions
return rendering statistics about the most recent frame. Each
derived class must track these statistics and return the
appropriate values from these functions.</p>

<p class="NDLRefMemberFunction">virtual void PerformRendering() =
0</p>

<p class="NDLRefMemberDescription">This pure virtual function
actually performs the rendering for the render step. It is called
from <span class="NDLSystemFont">Render</span> after the
pre-processing callback has been invoked.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">void SetName(const <a href=
"NiFixedString.htm">NiFixedString</a>&amp; kName)</p>

<p class="NDLRefMemberFunction">const <a href=
"NiFixedString.htm">NiFixedString</a>&amp; GetName() const</p>

<p class="NDLRefMemberDescription">These functions set and get
the name of the render step. The name defaults to "Render
Step".</p>

<p class="NDLRefMemberFunction">void Render()</p>

<p class="NDLRefMemberDescription">This function invokes the
pre-processing callback, calls <span class=
"NDLSystemFont">PerformRendering</span>, and then invokes the
post-processing callback.</p>

<p class="NDLRefMemberFunction">void SetActive(bool bActive)</p>

<p class="NDLRefMemberFunction">bool GetActive() const</p>

<p class="NDLRefMemberDescription">These functions set and get
the active state of the render step. The <span class=
"NDLSystemFont">Render</span> function does not observe this
active state, so it is up to the class using the render step to
check this state and act accordingly. <span class=
"NDLSystemFont">NiRenderFrame</span> checks this state before
executing the <span class="NDLSystemFont">Render</span> function
for each of its render steps.</p>

<p class="NDLRefMemberFunction">void
SetPreProcessingCallbackFunc(<a href=
"NiRenderStep.htm#Callback">Callback</a> pfnCallback, void*
pvCallbackData = NULL)</p>

<p class="NDLRefMemberFunction"><a href=
"NiRenderStep.htm#Callback">Callback</a>
GetPreProcessingCallbackFunc() const</p>

<p class="NDLRefMemberFunction">void*
GetPreProcessingCallbackFuncData() const</p>

<p class="NDLRefMemberDescription">These functions set and get
the pre-processing callback function pointer and data. This
callback is invoked at the very beginning of the <span class=
"NDLSystemFont">Render</span> function.</p>

<p class="NDLRefMemberFunction">void
SetPostProcessingCallbackFunc(<a href=
"NiRenderStep.htm#Callback">Callback</a> pfnCallback, void*
pvCallbackData = NULL)</p>

<p class="NDLRefMemberFunction"><a href=
"NiRenderStep.htm#Callback">Callback</a>
GetPostProcessingCallbackFunc() const</p>

<p class="NDLRefMemberFunction">void*
GetPostProcessingCallbackFuncData() const</p>

<p class="NDLRefMemberDescription">These functions set and get
the post-processing callback function pointer and data. This
callback is invoked at the very end of the <span class=
"NDLSystemFont">Render</span> function.</p>

<p class="NDLRefHead1">Notes</p><a name="Callback" id=
"Callback"></a>

<p class="NDLRefHead2">Callback</p>

<p class="NDLRefMemberFunction">typedef bool
(*Callback)(NiRenderStep* pkCurrentStep, void*
pvCallbackData)</p>

<p class="NDLRefMemberDescription">The <span class=
"NDLSystemFont">Callback</span> type defines a callback function
signature that can be used for pre- and post-processing callback
function pointers. It takes pointers to the current render step
and the stored data for the callback.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
