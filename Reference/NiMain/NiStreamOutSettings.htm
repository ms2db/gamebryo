<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiStreamOutSettings</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiStreamOutSettings</p>

<p class="NDLRefParentage">: public <a href=
"NiRefObject.htm">NiRefObject</a></p>

<p class="NDLRefHeaderFile">&lt;NiStreamOutSettings.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>The <span class="NDLSystemFont">NiStreamOutSettings</span>
object is used to specify which <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMesh/NiDataStream.htm">NiDataStream</a></span>
objects attached to an <span class="NDLSystemFont"><a href=
"../../Reference/NiMesh/NiMesh.htm">NiMesh</a></span> will be
used to receive the output of a rendering pass. It does this by
storing an array of strings that correspond to the bind names
provided for the data streams when they are added to the mesh via
<span class="NDLSystemFont">NiMesh::AddOutputStream</span>. The
order of the names in the array dictates the order that the
corresponding data streams will be used by the shader as output
streams.</p>

<p><span class="NDLSystemFont">NiStreamOutSettings</span> also
indicates whether subsequent writes to the stream output buffer
will be appended to the existing data in the stream or will
overwrite the stream. This is handled through the stream out
append flag on the object.</p>

<p>The ability to output a data stream from a rendering pass will
vary according to the renderer used; see the specific renderer
documentation for a discussion of how this feature is
supported.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiStreamOutSettings()</p>

<p class="NDLRefMemberDescription">The constructor for
<span class="NDLSystemFont">NiStreamOutSettings</span>
initializes the object with no stream out targets and a stream
out append flag set to false.</p>

<p class="NDLRefHead1">Operators</p>

<p class="NDLRefMemberFunction">NiStreamOutSettings&amp;
operator=(const NiStreamOutSettings&amp; kStreamOutSettings)</p>

<p class="NDLRefMemberDescription">Assignment operator.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">void SetStreamOutAppend(bool
bStreamOutAppend)</p>

<p class="NDLRefMemberFunction">bool GetStreamOutAppend()
const</p>

<p class="NDLRefMemberDescription">Get and set the value of the
stream out append flag. If the flag is true, then subsequent runs
of this rendering pass will append data to the end of the
streams, rather than overwriting the data. The default value is
false.</p>

<p class="NDLRefMemberFunction">void SetStreamOutTargets(const
<a href="NiTObjectArray.htm">NiTObjectArray</a>&lt;<a href=
"NiFixedString.htm">NiFixedString</a>&gt;&amp;
kStreamOutTargets)</p>

<p class="NDLRefMemberDescription">Sets the array of bind names
that will be used to look up data streams.</p>

<p class="NDLRefMemberFunction">void ClearStreamOutTargets()</p>

<p class="NDLRefMemberDescription">Emptys the array of bind names
that will be used to look up data streams.</p>

<p class="NDLRefMemberFunction">void AppendStreamOutTargets(const
char* pcStreamOutTarget)</p>

<p class="NDLRefMemberDescription">Adds the name indicated by
<span class="NDLSystemFont">pcStreamOutTarget</span> to the end
of the array of bind names that will be used to look up data
streams.</p>

<p class="NDLRefMemberFunction">unsigned int
GetStreamOutTargetCount() const</p>

<p class="NDLRefMemberDescription">Returns the number of entries
of the array of bind names that will be used to look up data
streams.</p>

<p class="NDLRefMemberFunction">const <a href=
"NiFixedString.htm">NiFixedString</a>&amp; GetStreamOutTarget(int
uiIndex) const</p>

<p class="NDLRefMemberDescription">Returns the name that is
stored in the <span class="NDLSystemFont">uiIndex</span> entry of
the array of bind names that will be used to look up data
streams.</p>

<p class="NDLRefHead1">Streaming Support</p>

<p class="NDLRefMemberFunction">void LoadBinary(<a href=
"../../Reference/NiSystem/NiBinaryStream.htm">NiBinaryStream</a>&amp;
kStream)</p>

<p class="NDLRefMemberDescription">Loads a stream out settings
object from a binary stream.</p>

<p class="NDLRefMemberFunction">void SaveBinary(<a href=
"../../Reference/NiSystem/NiBinaryStream.htm">NiBinaryStream</a>&amp;
kStream) const</p>

<p class="NDLRefMemberDescription">Saves the stream out settings
object to the binary stream.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
