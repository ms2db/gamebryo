<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiTSet</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiTSet</p>

<p class="NDLRefParentage">: public <a href=
"../../Reference/NiSystem/NiMemObject.htm">NiMemObject</a></p>

<p class="NDLRefHeaderFile">&lt;NiTSet.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiTSet</span> is a template class
intended to hold a non-ordered collection of 32-bit objects
(i.e., pointers). Order is not preserved, although there is an
<span class="NDLSystemFont">OrderedRemoveAt</span> function that
will preserve order when objects are removed, but it has a
performance penalty. An <span class="NDLSystemFont">NiTSet</span>
is guaranteed to be packed at all times. The set grows
exponentially when objects are added to it. When it needs to
allocate memory, it doubles its current allocation. It is not
safe to store smart pointers in a <span class=
"NDLSystemFont">NiTSet</span>, as the ref counts are not properly
decremented when objects are removed. For smart pointers, use
<span class="NDLSystemFont"><a href=
"NiTPtrSet.htm">NiTPtrSet</a></span>.</p>

<p>There is also an additional template argument, <span class=
"NDLSystemFont">TAlloc</span>. This type must declare static
functions matching the following prototypes:</p>

<ul>
    <li><span class="NDLSystemFont">static T* Allocate(unsigned
    int uiNumElements)</span></li>

    <li><span class="NDLSystemFont">static void Deallocate(T*
    pArray)</span></li>
</ul>

<p>Note that end users should not use <span class=
"NDLSystemFont">NiTSet</span> instances directly. Instead
<span class="NDLSystemFont"><a href=
"NiTObjectSet.htm">NiTObjectSet</a></span> or <span class=
"NDLSystemFont"><a href=
"NiTPrimitiveSet.htm">NiTPrimitiveSet</a></span> should be
used.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">
NiTSet(unsigned int uiInitialSize = 0)</p>

<p class="NDLRefMemberDescription">The constructor takes the
initial size for the internal storage of elements.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">unsigned int GetSize() const</p>

<p class="NDLRefMemberDescription">This function returns the
number of elements that are in the set.</p>

<p class="NDLRefMemberFunction">T *GetBase() const</p>

<p class="NDLRefMemberDescription">This function returns the
internal array of elements. The <span class=
"NDLSystemFont">NiTSet</span> object maintains ownership of this
array.</p>

<p class="NDLRefMemberFunction">T&amp;
GetAt(unsigned int uiIndex)</p>

<p class="NDLRefMemberFunction">const T&amp;
GetAt(unsigned int uiIndex) const</p>

<p class="NDLRefMemberDescription">This function returns the
element stored at the index indicated by <span class=
"NDLSystemFont">uiIndex</span>.</p>

<p class="NDLRefMemberFunction">unsigned int
Add(const T&amp; element)</p>

<p class="NDLRefMemberDescription">This function adds the
specified element to the set and returns the index of the added
item.</p>

<p class="NDLRefMemberFunction">unsigned int
AddUnique(const T&amp; element)</p>

<p class="NDLRefMemberDescription">This function adds the
specified element only if it doesn't already exist in the set. If
the item is found, the index of the existing item is returned. If
it is added, the index of the newly added item is returned..</p>

<p class="NDLRefMemberDescription">WARNING: This function is
slow, as it needs to search through all the elements in the set
looking for the specified element.</p>

<p class="NDLRefMemberFunction">void
RemoveAt(unsigned int uiIndex)</p>

<p class="NDLRefMemberDescription">This function removes the
element at index <span class="NDLSystemFont">uiIndex</span>. The
element at the end of the set is moved to fill the position
vacated by the one that was removed. Note that this function does
not set the removed element to zero and thus is not safe for
smart pointers.</p>

<p class="NDLRefMemberFunction">void
OrderedRemoveAt(unsigned int uiIndex)</p>

<p class="NDLRefMemberDescription">This function removes the
element at index <span class="NDLSystemFont">uiIndex</span>,
moving all elements after the removed one down to fill the
vacated position. This function preserves the order of the set
upon removal, but it is much slower than <span class=
"NDLSystemFont">RemoveAt</span>.</p>

<p class="NDLRefMemberFunction">void
ReplaceAt(unsigned int uiIndex, const T&amp; element)</p>

<p class="NDLRefMemberDescription">This function replaces the
element at <span class="NDLSystemFont">uiIndex</span> with the
specified element. Note that this function does not set the
replaced element to zero and thus is not safe for smart
pointers.</p>

<p class="NDLRefMemberFunction">void RemoveAll()</p>

<p class="NDLRefMemberDescription">This function removes all
elements from the set. Note that this function does not set any
of the removed elements to zero and thus is not safe for smart
pointers. Use <span class="NDLSystemFont"><a href=
"NiTObjectPtrSet.htm">NiTObjectPtrSet</a></span> for smart
pointers.</p>

<p class="NDLRefMemberFunction">int Find(const T&amp; element)
const</p>

<p class="NDLRefMemberDescription">This function iterates through
all the elements in the set, returning the index of the specified
element. If the element is not found, the function returns
<span class="NDLSystemFont">-1</span>. Note that this function is slow and should be used with caution.</p>

<p class="NDLRefMemberFunction">void Realloc()</p>

<p class="NDLRefMemberDescription">This function re-allocates the
memory for the set, allocating only enough memory for the number
of elements it has.</p>

<p class="NDLRefMemberFunction">void Realloc(unsigned int
uiNewSize)</p>

<p class="NDLRefMemberDescription">This function re-allocates the
memory for the set, allocating the requested number of elements
as long as there is enough memory for the number of elements it
has. This may shrink the overall number of elements available
without resizing.</p>

<p class="NDLRefMemberFunction">void ReallocNoShrink(unsigned int
uiNewSize)</p>

<p class="NDLRefMemberDescription">This function re-allocates the
memory for the set, allocating the requested number of elements
as long as it is larger than the current maximum number of
allocated elements. This method is useful when the number of
elements fluctuates highly and the user only wants to force a
memory reallocation to grow the maximum bounds of the set.</p>

<p class="NDLRefMemberFunction">unsigned int GetAllocationSize()
const</p>

<p class="NDLRefMemberDescription">This function returns the
maximum number of items before a reallocation is forced.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
