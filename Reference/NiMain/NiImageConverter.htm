<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiImageConverter</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>


<p class="NDLRefHeadClassTitle">NiImageConverter</p>

<p class="NDLRefParentage">: public <a href="NiRefObject.htm"><span>NiRefObject</span></a></p>

<p class="NDLRefHeaderFile">&lt;NiImageConverter.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiImageConverter</span> 
 serves three major purposes. It serves as the base class from which all 
 image conversion classes are derived, and as such defines the interfaces 
 that all image conversion subclasses must support. Secondly, it serves 
 as a basic image conversion class, supporting all of its own interfaces 
 (it is a concrete, rather than abstract base class), albeit with little 
 functionality. Finally, it serves as the global holding spot for the pointer 
 to the currently active image converter object instance, which may be 
 an instance of the base class or of a derived class such as <span class="NDLSystemFont"><a href="NiDevImageConverter.htm">NiDevImageConverter</a></span>. 
 Applications may subclass this object or a subclass thereof to add any 
 form of image conversion, compression, or image file loading that is desired 
 without having to change Gamebryo source code.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiImageConverter()</p>

<p class="NDLRefMemberDescription">Default (and sole) constructor. Initializes 
 all internal data to allow the converter to support its image conversion 
 behavior.</p>

<p class="NDLRefHead1">Static Member Functions</p>

<p class="NDLRefMemberFunction">static NiImageConverter* GetImageConverter()</p>

<p class="NDLRefMemberFunction">static void SetImageConverter(NiImageConverter* 
 pkConverter)</p>

<p class="NDLRefMemberDescription">Set and get the global image converter 
 object. This function is used throughout the Gamebryo texturing and Blt-ing 
 systems to retrieve the current conversion object. These systems use the 
 current image conversion object to load, format and generate mipmaps as 
 needed. The object may be an instance of the base class or of any subclass, 
 including a subclass declared by the application.</p>

<p class="NDLRefMemberFunction">static const char* GetPlatformSpecificSubdirectory()</p>

<p class="NDLRefMemberFunction">static void SetPlatformSpecificSubdirectory(const 
 char* pcSubDir)</p>

<p class="NDLRefMemberDescription">Set and get the platform specific subdirectory. 
 This function is used throughout the Gamebryo texturing and Blt-ing systems 
 to retrieve the correct image files for each platform.&nbsp; The directory 
 need not represent a platform, however, and could be used for other purposes 
 such as storing different size textures. </p>

<p class="NDLRefMemberFunction">static char* ConvertFilenameToPlatformSpecific(const 
 char* pcPath)</p>

<p class="NDLRefMemberDescription">Convert the filename, <span class="NDLSystemFont">pcPath</span>, 
 to a platform specific filename based off of the subdirectory set by a 
 call to <span class="NDLSystemFont">SetPlatformSpecificSubdirectory</span>.</p>

<p class="NDLRefMemberFunction">static void ConvertFilenameToPlatformSpecific(const&nbsp;<a href="NiFixedString.htm">NiFixedString</a>&amp; kPath, <a href="NiFixedString.htm">NiFixedString</a>&amp; 
 kPlatformSpecificPath)</p>

<p class="NDLRefMemberDescription">Convert the filename, <span class="NDLSystemFont">kPath</span>, 
 to a platform specific filename based off of the subdirectory set by a 
 call to <span class="NDLSystemFont">SetPlatformSpecificSubdirectory</span>.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">virtual bool CanReadImageFile(const char* 
 pcFilename) const</p>

<p class="NDLRefMemberDescription">Returns <span class="NDLSystemFont">true</span> 
 if the given filename has an extension that is supported by one of the 
 current converter's active image file readers, <span class="NDLSystemFont">false</span> 
 otherwise.</p>

<p class="NDLRefMemberFunction">virtual bool ReadImageFileInfo(const char* 
 pcFilename, <a href="NiPixelFormat.htm">NiPixelFormat</a>&amp;&nbsp;kFmt, 
 bool&amp;&nbsp;bMipmap, unsigned int&amp; uiWidth, unsigned int&amp; uiHeight, 
 unsigned int&amp; uiNumFaces)</p>

<p class="NDLRefMemberDescription">This function reads the header from the 
 image file represented by the given filename. If the file is a valid image 
 file of a format that is supported by the image converter (see the notes 
 below for a list of supported formats), then the function will return 
 <span class="NDLSystemFont">true</span>. If the function 
 returns true, then the <span class="NDLSystemFont">kFmt</span>, 
 <span class="NDLSystemFont">bMipmap</span>, <span class="NDLSystemFont">uiWidth</span>, <span class="NDLSystemFont">uiHeight</span>, and <span class="NDLSystemFont">uiNumFaces</span> 
 parameters will contain the destination pixel format of the file, whether 
 or not the file contains mipmap levels, the width and height of the image, 
 and the number of faces in the image, respectively.</p>

<p class="NDLRefMemberFunction">virtual <a href="NiPixelData.htm">NiPixelData</a>* 
 ReadImageFile(const char* pcFilename, <a href="NiPixelData.htm">NiPixelData</a>* 
 pkOptDest)</p>

<p class="NDLRefMemberDescription">This function reads the image file represented 
 by the given filename. If the file is a valid image file of a format that 
 is supported by the image converter (see the notes below for a list of 
 supported formats), then the function will return an <span class="NDLSystemFont"><a href="NiPixelData.htm">NiPixelData</a></span> object that contains the 
 image data. Otherwise, the function will return NULL. If the <span class="NDLSystemFont">pkOptDest</span> argument points 
 to a non-<span class="NDLSystemFont">NULL</span> <span class="NDLSystemFont">NiPixelData</span> object that 
 has the same height and width as the image file, has the same number of 
 mipmap levels as the source and matches the destination pixel format, 
 it will be used and returned as the destination <span class="NDLSystemFont">NiPixelData</span> 
 object. Otherwise, a new <span class="NDLSystemFont">NiPixelData</span> 
 object will be allocated, used and returned.</p>

<p class="NDLRefMemberFunction">virtual bool CanConvertPixelData(const <a href="NiPixelFormat.htm">NiPixelFormat</a>&amp; kSrcFmt, const&nbsp;<a href="NiPixelFormat.htm">NiPixelFormat</a>&amp;&nbsp;kDestFmt) const</p>

<p class="NDLRefMemberDescription">Returns <span class="NDLSystemFont">true</span> if the image converter 
 can convert from the given source format to the given destination format, 
 and <span class="NDLSystemFont">false</span> 
 otherwise. See the notes section below for a listing of valid conversion 
 formats.</p>

<p class="NDLRefMemberFunction">virtual NiPixelData* ConvertPixelData(const 
 <span class="NDLSystemFont"><a href="NiPixelData.htm">NiPixelData</a></span>&amp; 
 kSrc, const&nbsp;<a href="NiPixelFormat.htm">NiPixelFormat</a>&amp;&nbsp;kDestFmt, 
 <span class="NDLSystemFont"><a href="NiPixelData.htm">NiPixelData</a></span>* 
 pkOptDest, bool&nbsp;bMipmap)</p>

<p class="NDLRefMemberDescription">Attempts to convert the given source pixel 
 data object into the desired destination format, returning the result. 
 If the mipmap flag is true, then the converter will attempt (if supported) 
 to generate a mipmap pyramid from the source data if it is a flat object. 
 If the <span class="NDLSystemFont">pkOptDest</span> argument 
 points to a valid <span class="NDLSystemFont"><a href="NiPixelData.htm">NiPixelData</a></span> 
 object, then the converter attempts to convert the source data into the 
 given object if possible. For details of the conversion process, see the 
 notes sections below regarding valid format conversion pairs and format 
 conversion steps.</p>

<p class="NDLRefHead1">Notes</p>

<a name=Valid_Image_File_Formats></a><p class="NDLRefHead2">Valid Image File 
 Formats</p>

<p>To streamline behavior and performance, the base class 
 <span class="NDLSystemFont">NiImageConverter</span> 
 only supports NIF image files.</p>

<a name=Valid_Conversion_Formats></a><p class="NDLRefHead2">Valid Conversion 
 Formats</p>

<p>To streamline behavior and performance, the base class 
 <span class="NDLSystemFont">NiImageConverter</span> 
 only supports direct copying of incoming image formats, and cannot generate 
 mipmaps. The class is designed for applications (specifically console 
 applications) that have preformatted their data for the given platform.</p>


<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
