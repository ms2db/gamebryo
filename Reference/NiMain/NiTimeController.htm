<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiTimeController</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiTimeController</p>

<p class="NDLRefParentage">: public <u><span><a href=
"NiObject.htm"><span>NiObject</span></a></span></u></p>

<p class="NDLRefHeaderFile">&lt;NiTimeController.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiTimeController</span> is a pure
virtual class. It provides the base timing and update
functionality for all the Gamebryo animation controllers, and is
documented in the <a href=
"../NiAnimation/Animation_Time_Controllers.htm">animation system
documentation</a>.</p>

<p>The two types of animation updates are <span class=
"NDLSystemFont">APP_TIME</span>, and <span class=
"NDLSystemFont">APP_INIT</span>. An <span class=
"NDLSystemFont">APP_TIME</span> animation controller relies on
the application to supply correct time values for updating. The
<span class="NDLSystemFont">APP_INIT</span> type relies on the
application for updating, but uses an internal start time to
re-parameterize the passed-in time. The supported cycle types are
straightforwardly defined as <span class=
"NDLSystemFont">LOOP</span>, <span class=
"NDLSystemFont">REVERSE</span>, and <span class=
"NDLSystemFont">CLAMP</span>.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiTimeController()</p>

<p class="NDLRefMemberDescription">This default constructor sets
the following defaults:</p>

<!--(Table)=========================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Variable</th>

                <th>Value</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td>Animation type</td>

                <td><span class=
                "NDLSystemFont">APP_TIME</span></td>
            </tr>

            <tr>
                <td>Cycle type</td>

                <td><span class="NDLSystemFont">CLAMP</span></td>
            </tr>

            <tr>
                <td>Active</td>

                <td><span class="NDLSystemFont">true</span></td>
            </tr>

            <tr>
                <td>Frequency</td>

                <td><span class="NDLSystemFont">1.0</span></td>
            </tr>

            <tr>
                <td>Phase</td>

                <td><span class="NDLSystemFont">0.0</span></td>
            </tr>
        </tbody>
    </table>
</div>

<a name="Enumerations" id="Enumerations"></a><p class="NDLRefHead1">Enumerations</p>

<!--(Table)=========================================================-->
<table>
    <thead>
        <tr>
            <th>Enum</th>

            <th>Values</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>AnimType</td>

            <td><span class="NDLSystemFont">APP_TIME,
            APP_INIT</span></td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">CycleType</span></td>

            <td><span class="NDLSystemFont">LOOP, REVERSE,
            CLAMP</span></td>
        </tr>
    </tbody>
</table>

<p class="NDLRefHead1">Static Member Functions</p>

<p class="NDLRefMemberFunction">static void
StartAnimations(<a href="NiObjectNET.htm">NiObjectNET</a>*
pkRoot, float fTime)</p>

<p class="NDLRefMemberFunction">static void
StartAnimations(<a href="NiObjectNET.htm">NiObjectNET</a>*
pkRoot)</p>

<p class="NDLRefMemberFunction">static void
StopAnimations(<a href="NiObjectNET.htm">NiObjectNET</a>*
pkRoot)</p>

<p class="NDLRefMemberDescription">These public static functions
can be used to start and stop all the animation controllers in a
given subtree. The first <span class=
"NDLSystemFont">StartAnimations</span> version calls the
<span class="NDLSystemFont">Start(fTime)</span> method (below)
while the second calls the <span class=
"NDLSystemFont">Start</span> method (below) that doesn't take a
parameter.</p>

<p class="NDLRefMemberFunction">static float
GetMinBeginKeyTime(NiAVObject* pkObject)</p>

<p class="NDLRefMemberDescription">This function recursively
searches the scene graph rooted at pkObject and returns the
smallest value returned from each NiTimeController's
GetBeginKeyTime function. If no time controllers are found in the
scene graph, the function returns 0.0. This function is useful
when running up particle systems from a negative start time to
0.0 so that particles exist when the first frame is rendered.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">AnimType GetAnimType() const</p>

<p class="NDLRefMemberFunction">void SetAnimType(AnimType
eType)</p>

<p class="NDLRefMemberDescription">Set and get the animation
controller's animation type.</p>

<p class="NDLRefMemberFunction">CycleType GetCycleType()
const</p>

<p class="NDLRefMemberFunction">void SetCycleType(CycleType
eType)</p>

<p class="NDLRefMemberDescription">Set and get the animation
controller's cycle type (looping, "bouncing", or
non-looping).</p>

<p class="NDLRefMemberFunction">bool GetPlayBackwards() const</p>

<p class="NDLRefMemberFunction">void
SetPlayBackwards(bool bPlayBackwards)</p>

<p class="NDLRefMemberDescription">These functions get and set
whether or not to play animations backwards.</p>

<p class="NDLRefMemberFunction">float GetFrequency() const</p>

<p class="NDLRefMemberFunction">void SetFrequency(float
fFreq)</p>

<p class="NDLRefMemberDescription">Set and get the animation
controller's frequency value. The frequency is a scaling value to
convert from update time units to keyframe time units, if
necessary.</p>

<p class="NDLRefMemberFunction">float GetPhase() const</p>

<p class="NDLRefMemberFunction">void SetPhase(float fPhase)</p>

<p class="NDLRefMemberDescription">Set and get the animation
controller's phase value. The phase should be specified in
seconds and is an offset applied to the update time.</p>

<p class="NDLRefMemberFunction">float GetBeginKeyTime() const</p>

<p class="NDLRefMemberFunction">void SetBeginKeyTime(float
fBegin)</p>

<p class="NDLRefMemberFunction">float GetEndKeyTime() const</p>

<p class="NDLRefMemberFunction">void SetEndKeyTime(float
fEnd)</p>

<p class="NDLRefMemberDescription">Set and get the beginning and
end key times for the animation controller. These functions do
not normally need to be used, as the objects can determine the
values themselves. However, they are included for cases when an
object is used in an application with other animation objects
with different beginning and ending key times.</p>

<p class="NDLRefMemberDescription">For example, the arm of a
robot (one animation object) may be built with beginning and end
sequence times different from the robot's body (another animation
object). Together, the two animation components are used to form
a single animation. Using these methods, the application can
ensure that updates occur properly for all objects in an
application. The easiest way to guarantee proper updating of
objects is to ensure that keyframe sequences all have the same
start and end times. However, sometimes this requirement is not
possible, and begin and end times must be set by the
application.</p>

<p class="NDLRefMemberFunction">virtual void Start(float fTime =
-NiTimeController::NI_INFINITY)</p>

<p class="NDLRefMemberFunction">virtual void Stop()</p>

<p class="NDLRefMemberDescription">These methods can be used to
start and stop an individual time controller. The <span class=
"NDLSystemFont">Start(fTime)</span> method activates the time
controller and sets its start time to be <span class=
"NDLSystemFont">fTime</span>. It is intended for <span class=
"NDLSystemFont">APP_INIT</span> style controllers. The
<span class="NDLSystemFont">Stop</span> routine will set either
style animation controller to be inactive.</p>

<a name="Update" id="Update"></a><p class="NDLRefMemberFunction">virtual void Update(float fTime) = 0</p>

<p class="NDLRefMemberDescription">This pure virtual function is
a placeholder for all the animation controller's update routines.
In general a call to this function will cause the animation
controller to bring its animation up to date.</p>

<p class="NDLRefMemberFunction">NiObjectNET* GetTarget()
const</p>

<a name="SetTarget" id="SetTarget"></a><p class="NDLRefMemberFunction">virtual void SetTarget(<a href="NiObjectNET.htm">NiObjectNET</a>* pkTarget)</p>

<p class="NDLRefMemberDescription"><span class=
"NDLSystemFont">SetTarget</span> specifies the scene graph object
that this animation controller is to animate. Each derived class
accepts a different type of target. For example, the <span class=
"NDLSystemFont"><a href=
"../../Reference/NiAnimation/NiAlphaController.htm">NiAlphaController</a></span>
will only accept an <span class="NDLSystemFont"><a href=
"NiMaterialProperty.htm">NiMaterialProperty</a></span> while an
<span class="NDLSystemFont"><a href=
"../../Reference/NiAnimation/NiMorphWeightsController.htm">NiMorphWeightsController</a></span>
will accept an <span class="NDLSystemFont"><a href=
"../../Reference/NiMesh/NiMesh.htm">NiMesh</a></span>.
<span class="NDLSystemFont">SetTarget</span> will automatically
take care of removing the <span class=
"NDLSystemFont">NiTimeController</span> from the former target's
list of time controllers, and adding it to the new target's
list.</p>

<p class="NDLRefMemberFunction">NiTimeController* GetNext()
const</p>

<p class="NDLRefMemberFunction">void SetNext(NiTimeController*
pkNext)</p>

<p class="NDLRefMemberDescription">These functions implement
simple list behavior--<span class="NDLSystemFont">GetNext</span>
returns the next <span class=
"NDLSystemFont">NiTimeController</span> in the list of
controllers containing the calling controller. If <span class=
"NDLSystemFont">GetNext</span> returns <span class=
"NDLSystemFont">NULL</span>, then the end of the list has been
reached. Applications should be careful when using <span class=
"NDLSystemFont">SetNext</span>, as it does not automatically deal
with all insertion cases--it simply sets the "next" pointer to
the given object.</p>

<p class="NDLRefMemberFunction">unsigned int ItemsInList()
const</p>

<p class="NDLRefMemberDescription"><span class=
"NDLSystemFont">ItemsInList</span> is a simple utility routine
that will return the number of time controllers in the list
rooted at this controller.</p>

<p class="NDLRefMemberFunction">virtual bool
IsTransformController() const</p>

<p class="NDLRefMemberDescription">A virtual function whose
default implementation returns <span class=
"NDLSystemFont">false</span>, this function is used by
<span class=
"NDLSystemFont">NiAVObject::SetSelectiveUpdateTransforms</span>
to automatically set the <a href=
"NiAVObject.htm#UpdateSelected__UpdateNodeBound__and_the_UpdateSelected_flags">
UpdateSelected</a> flags. Any <span class=
"NDLSystemFont">NiTimeController</span> derived class that calls
<span class="NDLSystemFont">SetTranslate</span>, <span class=
"NDLSystemFont">SetRotate</span>, or <span class=
"NDLSystemFont">SetScale</span> on its target should override
this function to return <span class=
"NDLSystemFont">true</span>.</p>

<p class="NDLRefMemberFunction">float GetLastScaledTime()
const</p>

<p class="NDLRefMemberDescription">This function returns the last
scaled time computed by this controller. The scaled time takes
the frequency and phase into account, along with the <span class=
"NDLSystemFont">CycleType</span> and <span class=
"NDLSystemFont">AnimType</span>. This is the last value used to
interpolate animation keys.</p>

<p class="NDLRefMemberFunction">virtual bool IsStreamable()
const</p>

<p class="NDLRefMemberDescription">Indicates whether a controller
is streamable. By default this function returns true. Subclasses
may wish to implement other behaviors in cases where controllers
exist only to synchronize runtime values. <span class=
"NDLSystemFont"><a href=
"NiTimeSyncController.htm">NiTimeSyncController</a></span> is one
case where Gamebryo does this.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
