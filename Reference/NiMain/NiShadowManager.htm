<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiShadowManager</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiShadowManager</p>

<p class="NDLRefParentage">: public <a href=
"../../Reference/NiSystem/NiMemObject.htm">NiMemObject</a></p>

<p class="NDLRefHeaderFile">&lt;NiShadowManager.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>This class is used to control the shadowing system. It owns
all valid <a href="NiShadowTechnique.htm"><span class=
"NDLSystemFont">NiShadowTechnique</span></a> objects, all
<a href="NiShadowClickGenerator.htm"><span class=
"NDLSystemFont">NiShadowClickGenerator</span></a> objects, all
<span class="NDLSystemFont"><a href=
"NiShadowMap.htm">NiShadowMap</a></span> and <a href=
"NiShadowCubeMap.htm"><span class=
"NDLSystemFont">NiShadowCubeMap</span></a> objects, and all
<a href="NiShadowGenerator.htm"><span class=
"NDLSystemFont">NiShadowGenerator</span></a> objects. In order to
use Gamebryo's built in shadowing system the <a href=
"NiShadowManager.htm"><span class=
"NDLSystemFont">NiShadowManager</span></a> must be initialized.
If the <a href="NiShadowManager.htm"><span class=
"NDLSystemFont">NiShadowManager</span></a>is not initialized all
<span class="NDLSystemFont"><a href=
"NiShadowGenerator.htm">NiShadowGenerator</a></span> objects will
be ignored by the system.</p>

<p class="NDLRefHead1">Supported Static Member Functions</p>

<p class="NDLRefHead2">Infrastructure Methods</p>

<p class="NDLRefMemberFunction">static void Initialize()</p>

<p class="NDLRefMemberDescription">This function initializes the
shadow manager. It initializes the three shadow techniques
<span class="NDLSystemFont"><a href=
"../../Programmer/Shadowing_System/Shadow_Techniques.htm">NiStandardShadowTechnique</a></span>,
<span class="NDLSystemFont"><a href=
"../../Programmer/Shadowing_System/Shadow_Techniques.htm">NiPCFShadowTechnique</a></span>,
<span class="NDLSystemFont"><a href=
"NiVSMShadowTechnique.htm">NiVSMShadowTechnique</a></span>.</p>

<p class="NDLRefMemberFunction">static void Shutdown()</p>

<p class="NDLRefMemberDescription">This function shuts down the
shadow manager. This will in turn delete all <span class=
"NDLSystemFont"><a href=
"NiShadowGenerator.htm">NiShadowGenerator</a></span> objects and
all <span class="NDLSystemFont"><a href=
"NiShadowMap.htm">NiShadowMap</a></span> objects that have been
created since the shadow manager was first initialized.</p>

<p class="NDLRefMemberFunction">static <a href=
"NiShadowManager.htm"><span class=
"NDLSystemFont">NiShadowManager</span></a>*
GetShadowManager()</p>

<p class="NDLRefMemberDescription">This function returns a
pointer to the shadow manager.</p>

<p class="NDLRefMemberFunction">static <a href=
"../../Programmer/NiMaterial/NiFragmentMaterial.htm">NiFragmentMaterial</a>*
GetShadowWriteMaterial(<a href=
"NiStandardMaterial.htm">NiStandardMaterial::LightType</a>
eType)</p>

<p class="NDLRefMemberDescription">This function returns a
pointer to the shadow write material for the specified light
type.</p>

<p class="NDLRefMemberFunction">static <a href=
"NiMaterialSwapProcessor.htm">NiMaterialSwapProcessorPtr</a>
GetMaterialSwapProcessor(<a href=
"NiStandardMaterial.htm">NiStandardMaterial::LightType</a>
eType)</p>

<p class="NDLRefMemberDescription">This function returns a smart
pointer the material swap process for the specified light
type.</p>

<p class="NDLRefMemberFunction">static <a href=
"NiShadowClickValidator.htm">NiShadowClickValidatorPtr</a>
GetShadowClickValidator()</p>

<p class="NDLRefMemberDescription">The function returns a smart
pointer to the shadow click validator.</p>

<p class="NDLRefMemberFunction">static void
SetMaxActiveShadowGenerators(unsigned int uiMax)</p>

<p class="NDLRefMemberFunction">static unsigned int
GetMaxActiveShadowGenerators()</p>

<p class="NDLRefMemberDescription">These functions set and get
the maximum allowed active shadow generators. If a new maximum is
set that is lower that the current max any active shadow
generators that exist beyond this limit will be deactivated.</p>

<p class="NDLRefMemberFunction">static void SetActive(bool
bActive)</p>

<p class="NDLRefMemberFunction">static bool GetActive()</p>

<p class="NDLRefMemberDescription">These functions set and get
the active state of the shadow manager. If the shadow manager is
inactive no shadows will be generated or used in the scene. By
default when the shadow manager is deactivated all shadow
generators will be deactivated and all assigned shadow maps will
be detached from their shadow generator and added back to the
pool of available shadow maps. If this is not wanted the
<span class="NDLSystemFont">bRetainShadowMaps</span> parameter
can be set to true. This can be useful for situations where the
active state of the shadow manager is toggled multiple times a
frame.</p>

<p class="NDLRefMemberFunction">static void
SetPoolShadowMaps(bool bPoolShadowMaps)</p>

<p class="NDLRefMemberFunction">static bool
GetPoolShadowMaps()</p>

<p class="NDLRefMemberDescription">Specifies if the shadowing
system should keep all unused shadow maps in pool for future use,
or if they should be deleted. Unused shadow maps will be pooled
by default.</p>

<p class="NDLRefMemberFunction">static void
SetMaxTextureMemoryAllocation(unsigned int uiMax)</p>

<p class="NDLRefMemberFunction">static unsigned int
GetMaxTextureMemoryAllocation()</p>

<p class="NDLRefMemberDescription">These functions set and get
the maximum allowed texture memory that can be used for shadow
maps by the shadow manager. Once this limit is reached no other
shadow maps can be created.</p>

<p class="NDLRefMemberFunction">static unsigned int
GetCurrentTextureMemoryAllocation()</p>

<p class="NDLRefMemberDescription">This function returns the
current estimation of how much texture memory is allocated by the
shadowing system.</p>

<p class="NDLRefHead2">Shadow Technique Methods</p>

<p class="NDLRefMemberFunction">static bool
RegisterShadowTechnique(<a href=
"NiShadowTechnique.htm"><span class=
"NDLSystemFont">NiShadowTechnique</span></a>* pkShadowTechnique,
unsigned short usSlot, unsigned short usShaderID)</p>

<p class="NDLRefMemberDescription">This function registers the
shadow technique, <span class=
"NDLSystemFont">pkShadowTechnique</span>, to the, <span class=
"NDLSystemFont">usSlot</span>, shadow technique slot with a
shader id of, <span class="NDLSystemFont">usShaderID</span>.</p>

<p class="NDLRefMemberFunction">static <a href=
"NiShadowTechnique.htm"><span class=
"NDLSystemFont">NiShadowTechnique</span></a>*
GetActiveShadowTechnique(unsigned short usSlot)</p>

<p class="NDLRefMemberDescription">This function returns the
active shadow technique assigned to the slot, <span class=
"NDLSystemFont">usSlot</span>.</p>

<p class="NDLRefMemberFunction">static <a href=
"NiShadowTechnique.htm"><span class=
"NDLSystemFont">NiShadowTechnique</span></a>*
GetActiveShadowTechnique(const NiFixedString&amp;
kTechniqueName)</p>

<p class="NDLRefMemberDescription">This function attempts to find
an active shadow technique with the name, <span class=
"NDLSystemFont">kTechniqueName</span>. If such a shadow technique
is found a pointer to it will be returned. If one is not found
then NULL will be returned.</p>

<p class="NDLRefMemberFunction">static <a href=
"NiShadowTechnique.htm"><span class=
"NDLSystemFont">NiShadowTechnique</span></a>*
GetKnownShadowTechnique(unsigned short usSlot)</p>

<p class="NDLRefMemberDescription">This function returns a known
shadow technique assigned to the slot, <span class=
"NDLSystemFont">usSlot</span>.</p>

<p class="NDLRefMemberFunction">static <a href=
"NiShadowTechnique.htm"><span class=
"NDLSystemFont">NiShadowTechnique</span></a>*
GetKnownShadowTechnique(const NiFixedString&amp;
kTechniqueName)</p>

<p class="NDLRefMemberDescription">This function attempts to find
a known shadow technique with the name, <span class=
"NDLSystemFont">kTechniqueName</span>. If such a shadow technique
is found a pointer to it will be returned. If one is not found
then NULL will be returned</p>

<p class="NDLRefHead2">Shadow Generator Methods</p>

<p class="NDLRefMemberFunction">static void
AddShadowGenerator(<a href=
"NiShadowGenerator.htm">NiShadowGenerator</a>* pkGenerator)</p>

<p class="NDLRefMemberFunction">static void
DeleteShadowGenerator(<a href=
"NiShadowGenerator.htm">NiShadowGenerator</a>* pkGenerator)</p>

<p class="NDLRefMemberDescription">These functions add and delete
a shadow generator from the shadow managers list of known shadow
generators. A <a href="NiShadowGenerator.htm"><span class=
"NDLSystemFont">NiShadowGenerator</span></a> object should not
exist that the shadow manager does not know about. Every shadow
generator that is created must be added to the shadow
manager.</p>

<p class="NDLRefMemberFunction">static void
ReorganizeActiveShadowGenerators()</p>

<p class="NDLRefMemberDescription">This function will call the
<span class=
"NDLSystemFont">ReorganizeActiveShadowGenerators()</span>
function of the active <span class="NDLSystemFont"><a href=
"NiShadowClickGenerator.htm">NiShadowClickGenerator</a></span>.
This is used when there are more known shadow generators than
there are allowed active shadow generators. The <span class=
"NDLSystemFont">ReorganizeActiveShadowGenerators()</span>
function of the active <span class="NDLSystemFont"><a href=
"NiShadowClickGenerator.htm">NiShadowClickGenerator</a></span>
should reorganize which shadow generators are active and which
are inactive in order to achieve the best visual results for the
current scene.</p>

<p class="NDLRefMemberFunction">static const
NiTPointerList&lt;<a href=
"NiShadowGenerator.htm">NiShadowGeneratorPtr</a>&gt;&amp;
GetShadowGenerators()</p>

<p class="NDLRefMemberDescription">This function returns a list
of all the shadow generators owned by the shadow manager.</p>

<p class="NDLRefMemberFunction">static const
NiTPointerList&lt;<a href=
"NiShadowGenerator.htm">NiShadowGeneratorPtr</a>&gt;&amp;
GetActiveShadowGenerators()</p>

<p class="NDLRefMemberDescription">This function returns a list
of all the currently active shadow generators.</p>

<p class="NDLRefHead2">Shadow Map Methods</p>

<p class="NDLRefMemberFunction">static <a href=
"NiShadowMap.htm">NiShadowMap</a>* CreateShadowMap(
    unsigned int uiWidth,
    unsigned int uiHeight,
    <a href="NiShadowTechnique.htm">NiShadowTechnique</a>* pShadowTechnique,
    <a href="NiStandardMaterial.htm">NiStandardMaterial::LightType</a> eType)</p>

<p class="NDLRefMemberDescription">This function attempts to
create a <a href="NiShadowMap.htm"><span class=
"NDLSystemFont">NiShadowMap</span></a> object with the specified
parameters. If maximum allowed texture memory allocation limit
has been reached and a new shadow map could not be created the
purge shadow maps callback will be called to attempt to free any
unused shadow maps. If the creation still fails after this a NULL
pointer will be returned.</p>

<p class="NDLRefMemberFunction">static void
DestroyShadowMap(<a href="NiShadowMap.htm">NiShadowMap</a>*
pkShadowMap)</p>

<p class="NDLRefMemberDescription">This function deletes the
specified shadow map and removes it from the shadow managers list
of useable shadow maps.</p>

<p class="NDLRefMemberFunction">static void
DestroyAllShadowMaps()</p>

<p class="NDLRefMemberDescription">This function deletes all
shadow maps from the shadow manager and clears its list of usable
shadow maps.</p>

<p class="NDLRefMemberFunction">static NiShadowCubeMap* CreateShadowCubeMap(
    unsigned int uiSize,
    <a href="NiShadowTechnique.htm">NiShadowTechnique</a>* pShadowTechnique,
    <a href="NiStandardMaterial.htm">NiStandardMaterial::LightType</a> eType)</p>

<p class="NDLRefMemberDescription">This function attempts to
create a <a href="NiShadowCubeMap.htm"><span class=
"NDLSystemFont">NiShadowCubeMap</span></a> object with the
specified parameters. If maximum allowed texture memory
allocation limit has been reached and a new shadow map could not
be created the purge shadow maps callback will be called to
attempt to free any unused shadow maps. If the creation still
fails after this a NULL pointer will be returned.</p>

<p class="NDLRefMemberFunction">static void
DestroyShadowCubeMap(<a href="NiShadowCubeMap.htm"><span class=
"NDLSystemFont">NiShadowCubeMap</span></a>* pkShadowCubeMap)</p>

<p class="NDLRefMemberDescription">This function deletes the
specified shadow cube map and removes it from the shadow managers
list of useable shadow cube maps.</p>

<p class="NDLRefMemberFunction">static void
DestroyAllShadowCubeMaps()</p>

<p class="NDLRefMemberDescription">This function deletes all
shadow cube maps from the shadow manager and clears its list of
usable shadow cube maps.</p>

<p class="NDLRefMemberFunction">static NiTListIterator
RequestClosestShadowMap(unsigned int uiDesiredHeight, unsigned
int uiDesiredWidth, <a href=
"NiTexture__FormatPrefs.htm">NiTexture::FormatPrefs</a>&amp; kFormatPrefs,
bool bExactSizeOnly)</p>

<p class="NDLRefMemberFunction">static NiTListIterator
RequestClosestShadowMap(unsigned int uiDesiredHeight, unsigned
int uiDesiredWidth, <a href=
"NiTexture__FormatPrefs.htm">NiTexture::FormatPrefs</a>&amp; kFormatPrefs,
<a href="NiShadowMap.htm">NiShadowMap</a>*&amp;
pkClosestShadowMap, bool bExactSizeOnly)</p>

<p class="NDLRefMemberDescription">These functions attempt to
find an unused shadow map from the shadow managers shadow map
pool that has the dimensions closest to the request size. If,
<span class="NDLSystemFont">bExactSizeOnly</span>, is true this
function will only return a shadow map if it finds one that
exactly matches the requested size.</p>

<p class="NDLRefMemberFunction">static NiTListIterator
RequestClosestShadowCubeMap(unsigned int uiDesiredSize, <a href=
"NiTexture__FormatPrefs.htm">NiTexture::FormatPrefs</a>&amp; kFormatPrefs,
bool bExactSizeOnly)</p>

<p class="NDLRefMemberFunction">static NiTListIterator
RequestClosestShadowCubeMap(unsigned int uiDesiredSize, <a href=
"NiTexture__FormatPrefs.htm">NiTexture::FormatPrefs</a>&amp; kFormatPrefs,
<a href="NiShadowMap.htm">NiShadowMap</a>*&amp;
pkClosestShadowCubeMap, bool bExactSizeOnly)</p>

<p class="NDLRefMemberDescription">These functions attempt to
find an unused shadow cube map from the shadow managers shadow
cube map pool that has the dimensions closest to the request
size. If, <span class="NDLSystemFont">bExactSizeOnly</span>, is
true this function will only return a shadow cube map if it finds
one that exactly matches the requested size.</p>

<p class="NDLRefHead2">Shadow Click Generator Methods</p>

<p class="NDLRefMemberFunction">static bool
RegisterShadowClickGenerator(<a href=
"NiShadowClickGenerator.htm">NiShadowClickGenerator</a>*
pkShadowClickGenerator)</p>

<p class="NDLRefMemberDescription">This function registers the
provided <a href="NiShadowClickGenerator.htm"><span class=
"NDLSystemFont">NiShadowClickGenerator</span></a> as on of the
possible <a href="NiShadowClickGenerator.htm"><span class=
"NDLSystemFont">NiShadowClickGenerator</span></a> objects that
can be used to produce the render clicks need to shadow a
scene.</p>

<p class="NDLRefMemberFunction">static <a href=
"NiShadowClickGenerator.htm">NiShadowClickGenerator</a>*
GetShadowClickGenerator(const NiFixedString&amp; kName);</p>

<p class="NDLRefMemberDescription">This function attempts to find
a registered <span class="NDLSystemFont"><a href=
"NiShadowClickGenerator.htm">NiShadowClickGenerator</a></span>
with the name, kName. If one is found it will be returned,
otherwise a NULL pointer will be returned.</p>

<p class="NDLRefMemberFunction">static bool
SetActiveShadowClickGenerator(<a href=
"NiShadowClickGenerator.htm">NiShadowClickGenerator</a>*
pkActiveShadowClickGenerator)</p>

<p class="NDLRefMemberFunction">static bool
SetActiveShadowClickGenerator(const NiFixedString&amp; kName)</p>

<p class="NDLRefMemberDescription">These functions set the active
shadow click generator. When a new shadow click generator
<span class="NDLSystemFont">PrepareShadowGenerators()</span> will
be called on the newly activated <a href=
"NiShadowClickGenerator.htm"><span class=
"NDLSystemFont">NiShadowClickGenerator</span></a>. It is then the
responsibility of the <span class="NDLSystemFont"><a href=
"NiShadowClickGenerator.htm">NiShadowClickGenerator</a></span> to
properly setup the appropriate callbacks on all the shadow
generators.</p>

<p class="NDLRefHead2">Miscellaneous Methods</p>

<p class="NDLRefMemberFunction">static void
SetSceneCamera(<a href="NiCamera.htm">NiCamera</a>*
pkSceneCamera)</p>

<p class="NDLRefMemberFunction">static <a href=
"NiCamera.htm">NiCamera</a>* GetSceneCamera()</p>

<p class="NDLRefMemberDescription">These functions set and get
the active scene camera respectively. The active scene camera
informs the shadowing system what camera will be used when the
final scene is rendered. This shadowing system takes this
information into account when trying to cull rendering of
non-visible objects.</p>

<p class="NDLRefMemberFunction">static void
SetCullingProcess(<a href=
"NiCullingProcess.htm">NiCullingProcess</a>*
pkCullingProcess)</p>

<p class="NDLRefMemberFunction">static <a href=
"NiCullingProcess.htm">NiCullingProcess</a>*
GetCullingProcess()</p>

<p class="NDLRefMemberDescription">These functions set and get
the <a href="NiCullingProcess.htm"><span class=
"NDLSystemFont">NiCullingProcess</span></a> that will be used by
the shadowing system when rendering a scene to a shadow map.</p>

<p class="NDLRefMemberFunction">static unsigned int
GetApproximateTexMemUsage(const unsigned int uiWidth, const
unsigned int uiHeight, const <a href=
"NiTexture__FormatPrefs.htm">NiTexture::FormatPrefs</a>&amp; kPrefs, const
bool bCubeMap)</p>

<p class="NDLRefMemberDescription">This function attempts to
estimate the amount of memory, in bytes, that a shadow map with
the given parameters will consume.</p>

<p class="NDLRefHead2">Callback Methods</p>

<p class="NDLRefMemberFunction">static void
SetPurgeShadowMapsCallback(PurgeShadowMaps pfnCallback)</p>

<p class="NDLRefMemberDescription">This function sets the purge
shadow maps call back function that will be called when the
shadow manager attempts to create a shadow map and runs out of
allowed texture memory.</p>

<p class="NDLRefMemberFunction">static void
DefaultPurgeCallback(unsigned int uiBytesNeeded,
NiTPointerList&lt;<a href=
"NiShadowGenerator.htm">NiShadowGeneratorPtr</a>&gt;&amp;
kActiveShadowGenerators, NiTPointerList&lt;<a href=
"NiShadowMap.htm">NiShadowMap</a>*&gt;&amp;
m_kAvailableShadowMaps, NiTPointerList&lt;<a href=
"NiShadowCubeMap.htm">NiShadowCubeMap</a>*&gt;&amp;
m_kAvailableShadowCubeMaps, bool bMaxTexMemoryResized)</p>

<p class="NDLRefMemberDescription">This is the default purge
shadow map callback. It will first attempt to purge unused shadow
cube maps and then unused shadow maps in order to meet the
texture memory requirements. If the boolean, <span class=
"NDLSystemFont">bMaxTexMemoryResized</span>, is true this mean
the maximum allowed about of texture memory was resized to a
value lower and the call back must continue to purge shadow maps
until this requirement has been reached. In this case if this
method still has not meet the memory requirements after purging
all the unused shadow maps and shadow cube maps, the function
will begin to deactivate shadow generators and purge their shadow
maps until the texture memory requirements have been met.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
