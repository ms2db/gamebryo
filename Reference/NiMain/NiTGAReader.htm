<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiTGAReader</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiTGAReader</p>

<p class="NDLRefParentage">: public <a href=
"NiImageReader.htm">NiImageReader</a></p>

<p class="NDLRefHeaderFile">&lt;NiTGAReader.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>The <span class="NDLSystemFont">NiTGAReader</span> is a
subclass of the abstract <span class="NDLSystemFont"><a href=
"NiImageReader.htm">NiImageReader</a></span> class that
implements the reading of TrueVision's TARGA format image files.
Most applications will not use this class directly, but rather
will use the <span class="NDLSystemFont"><a href=
"NiDevImageConverter.htm">NiDevImageConverter</a></span>, which
includes this class as one of its loaders. The loader can support
8, 16, 24, or 32-bit files, and supports alpha channels from
32-bit files.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiTGAReader()</p>

<p class="NDLRefMemberDescription">Default (and sole)
constructor. Creates the internal data structures required for
loading TGA image files.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">virtual bool CanReadFile(const
char* pcFileExtension) const</p>

<p class="NDLRefMemberDescription">Returns true if the given
extension is <span class="NDLSystemFont">.tga</span>, or
<span class="NDLSystemFont">.targa</span>, and false otherwise. 
The base class interface uses this virtual function to determine
whether a generic image loader can load a given file.</p>

<p class="NDLRefMemberFunction">virtual <a href=
"NiPixelData.htm">NiPixelData</a>* ReadFile(<a href=
"../../Reference/NiSystem/NiFile.htm">NiFile</a>&amp; kIst,
<a href="NiPixelData.htm">NiPixelData</a>* pkOptDest)</p>

<p class="NDLRefMemberDescription">Reads the given file (assuming
that it is a valid TGA image file) and returns the data from the
file as a flat <span class="NDLSystemFont"><a href=
"NiPixelData.htm">NiPixelData</a></span> object. The output pixel
format may be <span class="NDLSystemFont"><a href=
"NiPixelFormat.htm">NiPixelFormat</a>::RGB24</span> (8, 16, or 24
bit TGA files) or <span class="NDLSystemFont"><a href=
"NiPixelFormat.htm">NiPixelFormat</a></span><span class=
"NDLSystemFont">::RGBA32</span> (32-bit TGA files). The function
returns NULL if the TGA file appears to be of the wrong format.
The calling function should not rely on the position of the file
pointer following a call to this function.</p>

<p class="NDLRefMemberFunction">virtual bool ReadHeader(<a href=
"../../Reference/NiSystem/NiFile.htm">NiFile</a>&amp; kIst,
unsigned int&amp; uiWidth, unsigned int&amp; uiHeight, <a href=
"NiPixelFormat.htm">NiPixelFormat</a>&amp; kFormat,
bool&amp; bMipmap, unsigned int&amp; uiFaces)</p>

<p class="NDLRefMemberDescription">Returns <span class=
"NDLSystemFont">true</span> if the file appears to be a valid and
readable by the reader object and <span class=
"NDLSystemFont">false</span> otherwise. If the function returns
true, the <span class="NDLSystemFont">uiWidth</span>,
<span class="NDLSystemFont">uiHeight</span>, <span class=
"NDLSystemFont">kFormat</span>, and <span class=
"NDLSystemFont">bMipmap</span> parameters will contain the width
of the image file, the height of the image file, the destination
pixel format, and whether or not the file contains mipmap data,
respectively. The output pixel format will be <span class=
"NDLSystemFont"><a href=
"NiPixelFormat.htm">NiPixelFormat</a></span><span class=
"NDLSystemFont">::RGB24</span> or <span class=
"NDLSystemFont"><a href=
"NiPixelFormat.htm">NiPixelFormat</a></span><span class=
"NDLSystemFont">::RGBA32</span>. The mipmap flag will be false,
as TGA files do not contain mipmap pyramids. TGA files do not
have multiple mipmap pyramids, so the face count will be one. The
calling function should not rely on the position of the file
pointer following a call to this function.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
