<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiTListBase</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiTListBase</p>

<p class="NDLRefParentage">: public <a href=
"../../Reference/NiSystem/NiMemObject.htm"><span>NiMemObject</span></a></p>

<p class="NDLRefHeaderFile">&lt;NiTListBase.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>This is an abstract base class implementation of a
doubly-linked list. See <a href="NiTPointerList.htm"><span class=
"NDLSystemFont">NiTPointerList</span></a> for holding pointers,
smart pointers, or any other 4-byte data. See <a href=
"NiTObjectList.htm"><span class=
"NDLSystemFont">NiTObjectList</span></a> for holding larger
data.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">unsigned int GetSize() const</p>

<p class="NDLRefMemberDescription">Returns the number of elements
currently in the list.</p>

<p class="NDLRefMemberFunction">bool IsEmpty() const</p>

<p class="NDLRefMemberDescription">Returns true if the list
currently has no elements, false otherwise.</p>

<p class="NDLRefMemberFunction">void RemoveAll()</p>

<p class="NDLRefMemberDescription">Removes all elements in the
list without having to iterate over all of them.</p>

<p class="NDLRefMemberFunction">NiTListIterator GetHeadPos()
const</p>

<p class="NDLRefMemberFunction">NiTListIterator GetTailPos()
const</p>

<p class="NDLRefMemberDescription">These functions return
iterator objects that point to the first and last elements on the
list, respectively. The iterator is equal to <span class=
"NDLSystemFont">0</span> if the list is empty.</p>

<p class="NDLRefMemberFunction">NiTListIterator
GetNextPos(NiTListIterator kPos) const</p>

<p class="NDLRefMemberFunction">NiTListIterator
GetPrevPos(NiTListIterator kPos) const</p>

<p class="NDLRefMemberDescription">Return an iterator that has
been advanced or retreated one element, respectively. <em>The
calling iterator must not be</em> <span class=
"NDLSystemFont">NULL</span>.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
