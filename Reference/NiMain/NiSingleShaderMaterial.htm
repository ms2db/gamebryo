<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiSingleShaderMaterial</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiSingleShaderMaterial</p>

<p class="NDLRefParentage">: public <a href=
"NiMaterial.htm">NiMaterial</a></p>

<p class="NDLRefHeaderFile">&lt;NiSingleShaderMaterial.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiSingleShaderMaterial</span> is a
wrapper material around a given <a href=
"NiShader.htm"><span class="NDLSystemFont">NiShader</span></a>
and all of its techniques. The single shader material will have
the same name as its <span class="NDLSystemFont">NiShader</span>.
Individual techniques are requested using the material extra data
field of the <span class="NDLSystemFont">IsShaderCurrent</span>
and <span class="NDLSystemFont">GetCurrentShader</span>
methods.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">virtual bool
IsShaderCurrent(<a href="NiShader.htm">NiShader</a>* pkShader,
const <a href="NiRenderObject.htm">NiRenderObject</a>*
pkGeometry, const <a href=
"NiPropertyState.htm">NiPropertyState</a>* pkState, const
<a href="NiDynamicEffectState.htm">NiDynamicEffectState</a>*
pkEffects, unsigned int uiMaterialExtraData)</p>

<p class="NDLRefMemberDescription">Inherited from <span class=
"NDLSystemFont"><a href="NiMaterial.htm">NiMaterial</a></span>.
Returns whether or not the applied shader matches the computed
material description for a given renderable object. The material
extra data corresponds to the technique for this shader.</p>

<p class="NDLRefMemberFunction">virtual <a href=
"NiShader.htm">NiShader</a>* GetCurrentShader(const <a href=
"NiRenderObject.htm">NiRenderObject</a>* pkGeometry, const
<a href="NiPropertyState.htm">NiPropertyState</a>* pkState, const
<a href="NiDynamicEffectState.htm">NiDynamicEffectState</a>*
pkEffects, unsigned int uiMaterialExtraData)</p>

<p class="NDLRefMemberDescription">Inherited from <span class=
"NDLSystemFont"><a href="NiMaterial.htm">NiMaterial</a></span>.
Compute the <span class="NDLSystemFont"><a href=
"NiShader.htm">NiShader</a></span> needed to render this
renderable object. The material extra data corresponds to the
technique for this shader.</p>

<p class="NDLRefMemberFunction">virtual void UnloadShaders()</p>

<p class="NDLRefMemberDescription">Inherited from <span class=
"NDLSystemFont"><a href="NiMaterial.htm">NiMaterial</a></span>.
This method is called by the renderers or the host application to
force the material to remove all internal <a href=
"NiShader.htm"><span class="NDLSystemFont">NiShader</span></a>
data members.</p>

<p class="NDLRefHead1">Static Member Functions</p>

<p class="NDLRefMemberFunction">static NiSingleShaderMaterial*
Create(<a href="NiShader.htm">NiShader</a>* pkShader, bool
bManualShaderManagement = false)</p>

<p class="NDLRefMemberDescription">Create a single shader
material for the specified <a href="NiShader.htm"><span class=
"NDLSystemFont">NiShader</span></a>. Note that the cached shader
will not be freed in <span class=
"NDLSystemFont">UnloadShaders</span> if <span class=
"NDLSystemFont">bManualShaderManagement</span> is true.</p>

<p class="NDLRefMemberFunction">static NiSingleShaderMaterial*
Create(const char* pcName, bool bPreloadShader = true)</p>

<p class="NDLRefMemberDescription">Create a single shader
material for the specified shader name. If <span class=
"NDLSystemFont">bPreloadShader</span> is true, the single shader
material will store the default implementation of the shader
specified.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
