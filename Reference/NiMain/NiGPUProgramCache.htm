<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiGPUProgramCache</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiGPUProgramCache</p>

<p class="NDLRefParentage">: public <a href=
"NiRefObject.htm">NiRefObject</a></p>

<p class="NDLRefHeaderFile">&lt;NiGPUProgramCache.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>This class represents a database of compiled <span class=
"NDLSystemFont"><a href=
"NiGPUProgram.htm">NiGPUProgram</a>s</span>. Please see the
<span class="NDLSystemFont"><a href=
"../../Programmer/NiMaterial/NiGPUProgramCache_System.htm">NiGPUProgramCache</a></span>
section of the Programmer's Guide for more details.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiGPUProgramCache(unsigned int
uiVersion, bool bWriteToDisk, bool bLocked)</p>

<p class="NDLRefMemberDescription">Create a cache with the
specified version. If the <span class=
"NDLSystemFont">bWriteToDisk</span> flag is true, the cache will
automatically write its files to disk after a compile. If
<span class="NDLSystemFont">bLocked</span> is true, the cache
will not compile new programs, but will provide programs already
in the cache.</p>

<p class="NDLRefHead1">Supported Public Member Functions</p>

<p class="NDLRefMemberFunction">virtual <a href=
"NiGPUProgram.htm">NiGPUProgram</a>* FindCachedProgram(const
char* pcName, <a href=
"NiTObjectSet.htm">NiTObjectPtrSet</a>&lt;<a href=
"NiMaterialResource.htm">NiMaterialResourcePtr</a>&gt;&amp;
kUniforms, bool&amp; bFailedToCompilePreviously)</p>

<p class="NDLRefMemberDescription">This method searches through
the list of previously compiled programs and returns the program
if found. The uniform variables used by the program are returned
by reference in the <span class="NDLSystemFont">kUniforms</span>
variable. In some cases, an attempt may have been made to compile
this program in the past and it failed, the boolean parameter is
passed by reference and will be true if this occurred. An
application can use this boolean as an early-out and not attempt
to compile the entry again.</p>

<p class="NDLRefMemberFunction">virtual <a href=
"NiGPUProgram.htm">NiGPUProgram</a>* GenerateProgram(const char*
pcName, const char* pcProgramText, <a href=
"NiTObjectSet.htm">NiTObjectPtrSet</a>&lt;<a href=
"NiMaterialResource.htm">NiMaterialResourcePtr</a>&gt;&amp;
kUniforms)</p>

<p class="NDLRefMemberDescription">This method compiles the input
text into a GPU program. The uniform variables used by the
program are returned by reference in the <span class=
"NDLSystemFont">kUniforms</span> variable. If the program is set
to write, it will automatically write the compiled program and
variables to the cache file.</p>

<p class="NDLRefMemberFunction">virtual const <a href=
"NiTObjectSet.htm">NiTObjectPtrSet</a>&lt;<a href=
"NiFixedString.htm">NiFixedString</a>&gt;*
GetValidCompileTargetsForPlatform() const</p>

<p class="NDLRefMemberDescription">This method returns the list
of valid shader models for code snippets supported by this
cache.</p>

<p class="NDLRefMemberFunction">virtual const <a href=
"NiFixedString.htm">NiFixedString</a>&amp; GetShaderProfile()
const</p>

<p class="NDLRefMemberDescription">This method returns the target
shader model for this cache.</p>

<p class="NDLRefMemberFunction">virtual bool
SetWorkingDirectory(const <a href=
"NiFixedString.htm">NiFixedString</a>&amp; kPath)</p>

<p class="NDLRefMemberFunction">virtual const <a href=
"NiFixedString.htm">NiFixedString</a>&amp; GetWorkingDirectory()
const</p>

<p class="NDLRefMemberDescription">Get and set the absolute file
path in which the cache file is located.</p>

<p class="NDLRefMemberFunction">virtual const char*
GetPlatformSpecificCodeID() const</p>

<p class="NDLRefMemberDescription">Get the code block identifier
for this instance. Common values are "hlsl" or "Cg".</p>

<p class="NDLRefMemberFunction">virtual const char* GetPlatform()
const</p>

<p class="NDLRefMemberDescription">Get the code block platform
identifier for this instance. Common values are "DX9", "Xenon",
and "PS3".</p>

<p class="NDLRefMemberFunction">virtual bool Load()</p>

<p class="NDLRefMemberDescription">Load all GPU programs from the
currently specified cache file.</p>

<p class="NDLRefMemberFunction">virtual bool Save()</p>

<p class="NDLRefMemberDescription">Save all GPU programs in
memory to the cache file.</p>

<p class="NDLRefMemberFunction">virtual bool Clear()</p>

<p class="NDLRefMemberDescription">Free all currently loaded GPU
programs.</p>

<p class="NDLRefMemberFunction">virtual bool IsLoaded()</p>

<p class="NDLRefMemberDescription">Returns whether the cache file
has been loaded.</p>

<p class="NDLRefMemberFunction">virtual bool IsLocked()</p>

<p class="NDLRefMemberDescription">Returns whether the cache can
compile new programs.</p>

<p class="NDLRefHead1">Supported Static Member Functions</p>

<p class="NDLRefMemberFunction">static void
SetOverwriteDeprecatedCacheFiles(bool bOverwrite)</p>

<p class="NDLRefMemberDescription">Set whether or not to
overwrite the cache file if it or any programs within it are less
than the current cache version. All valid programs are loaded
prior to re-saving. This ensures that the cache has all known
valid programs for the given version.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
