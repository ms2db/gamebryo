<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiMath</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiMath</p>

<p class="NDLRefHeaderFile">&lt;NiMath.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>This class contains several useful and optimized math 
 functions for use with Gamebryo. In most cases these functions are wrappers 
 around the standard C equivalent functions. However, wherever possible, 
 the standard C functions have been replaced with more optimized implementations. 
 Also note that the implementations of these functions may vary between 
 platforms.</p>

<p class="NDLRefHead1">Functions</p>

<a name=Standard_Math_Functions></a><p class="NDLRefHead2">Standard Math Functions</p>

<p class="NDLRefMemberFunction">float NiAbs(float fValue)</p>

<p class="NDLRefMemberDescription">Calculates the absolute value of the floating-point 
 argument.</p>

<p class="NDLRefMemberFunction">float NiACos(float fValue)</p>

<p class="NDLRefMemberDescription">Calculates the arccosine of the floating 
 point argument.</p>

<p class="NDLRefMemberFunction">float NiASin(float fValue)</p>

<p class="NDLRefMemberDescription">Calculates the arcsin of the floating 
 point argument</p>

<p class="NDLRefMemberFunction">float NiATan(float fValue)</p>

<p class="NDLRefMemberDescription">Calculates the arctangent of the floating 
 point argument. </p>

<p class="NDLRefMemberFunction">float NiATan2(float fY, float fX)</p>

<p class="NDLRefMemberDescription">Calculates the arctangent of <span class="NDLSystemFont">fY 
 / fX</span>.</p>

<p class="NDLRefMemberFunction">float NiCos(float fRadians)</p>

<p class="NDLRefMemberDescription">Calculates the cosine of the floating 
 point argument.</p>

<p class="NDLRefMemberFunction">float NiExp(float fValue)</p>

<p class="NDLRefMemberDescription">Calculates the exponential of the floating 
 point argument.</p>

<p class="NDLRefMemberFunction">float NiFloor(float fValue)</p>

<p class="NDLRefMemberDescription">Calculates the&nbsp;floor of the floating 
 point argument (the greatest or &quot;least negative / most positive&quot; 
 integer less than or equal to the given argument).</p>

<p class="NDLRefMemberFunction">float NiFmod(float fX, float fY)</p>

<p class="NDLRefMemberDescription">Calculates the floating point remainder 
 of <span class="NDLSystemFont">fX / fY.</span></p>

<p class="NDLRefMemberFunction">float NiLog(float fValue)</p>

<p class="NDLRefMemberDescription">Calculates the logarithm of the floating 
 point argument.</p>

<p class="NDLRefMemberFunction">float NiPow(float fBase, float fExponent)</p>

<p class="NDLRefMemberDescription">Calculates <span class="NDLSystemFont">fBased</span> 
 raised to the power of <span class="NDLSystemFont">fExponent</span>.</p>

<p class="NDLRefMemberFunction">float NiSign(float fValue)</p>

<p class="NDLRefMemberDescription">Determines the sign of the floating point 
 argument. This function returns <span class="NDLSystemFont">+1.0f</span> 
 if the <span class="NDLSystemFont">fValue</span> is positive, <span class="NDLSystemFont">-1.0f</span> 
 is <span class="NDLSystemFont">fValue</span> is negative, or <span class="NDLSystemFont">0.0f</span> 
 if <span class="NDLSystemFont">fValue</span> is zero.</p>

<p class="NDLRefMemberFunction">float NiSin(float fRadians)</p>

<p class="NDLRefMemberDescription">Calculates the sine of the floating point 
 argument.</p>

<p class="NDLRefMemberFunction">void NiSinCos(float fRadians, float&amp; 
 fSin, float&amp; fCos)</p>

<p class="NDLRefMemberDescription">Calculates both the sine and cosine of 
 the <span class="NDLSystemFont">fRadians</span> argument. Many floating 
 point processors have assembly instructions that can calculate both faster 
 than each one individually. The resulting values are passed by reference 
 in <span class="NDLSystemFont">fSin</span> and <span class="NDLSystemFont">fCos</span>.</p>

<p class="NDLRefMemberFunction">float NiSqr(float fValue)</p>

<p class="NDLRefMemberDescription">Multiplies <span class="NDLSystemFont">fValue</span> 
 by itself.</p>

<p class="NDLRefMemberFunction">float NiSqrt(float fValue)</p>

<p class="NDLRefMemberDescription">Calculates the square root of the floating 
 point argument.</p>

<a name=Min_Max_Functions></a><p class="NDLRefHead2">Min/Max Functions</p>

<p class="NDLRefMemberFunction">float NiMin(float fA, float fB)</p>

<p class="NDLRefMemberDescription">Returns the smaller of the two floating 
 point arguments.</p>

<p class="NDLRefMemberFunction">float NiMax(float fA, float fB)</p>

<p class="NDLRefMemberDescription">Returns the larger of the two floating 
 point arguments.</p>

<p class="NDLRefMemberFunction">float NiClamp(float fValue, float fMin, float 
 fMax)</p>

<p class="NDLRefMemberDescription">Returns fValue clamped to the range of 
 fMin and fMax.</p>

<p class="NDLRefMemberFunction">int NiMin(int iA, int iB)</p>

<p class="NDLRefMemberDescription">Returns the smaller of the two integer 
 arguments.</p>

<p class="NDLRefMemberFunction">int NiMax(int iA, int iB)</p>

<p class="NDLRefMemberDescription">Returns the larger of the two integer 
 arguments.</p>

<p class="NDLRefMemberFunction">int NiClamp(int iValue, int iMin, int iMax)</p>

<p class="NDLRefMemberDescription">Returns iValue clamped to the range of 
 iMin and iMax.</p>

<a name=Utility_Functions></a><p class="NDLRefHead2">Utility Functions</p>

<p class="NDLRefMemberFunction">bool NiIsPowerOf2(unsigned int uiI)</p>

<p class="NDLRefMemberDescription">Returns whether the unsigned integer argument 
 is a power of two. </p>

<p class="NDLRefMemberFunction">(macro) NiLerp(T, START, FINISH)</p>

<p class="NDLRefMemberDescription">Returns the linear interpolation between 
 START and FINISH, as parameterized by T. </p>

<a name=Random_Number_Generation_Functions></a><p class="NDLRefHead2">Random 
 Number Generation Functions</p>

<p class="NDLRefMemberFunction">void NiSrand(unsigned int uiSeed)</p>

<p class="NDLRefMemberDescription">The <span class="NDLSystemFont">NiSrand</span> 
 function sets the starting point for generating a series of pseudo-random 
 integers. To reinitialize the generator, use 1 as the seed argument. Any 
 other value for seed sets the generator to a random starting point. <span 
 class="NDLSystemFont">NiRand</span> retrieves the pseudo-random numbers 
 that are generated. Calling <span class="NDLSystemFont">NiRand</span> before 
 any call to <span class="NDLSystemFont">NiSrand</span> generates the same 
 sequence as calling <span class="NDLSystemFont">NiSrand</span> with seed 
 passed as 1.</p>

<p class="NDLRefMemberFunction">int NiRand()</p>

<p class="NDLRefMemberDescription">The <span class="NDLSystemFont">NiRand</span> 
 function returns a pseudo-random integer in the range 0 to RAND_MAX. Use 
 the <span class="NDLSystemFont">NiSrand</span> function to seed the pseudo-random-number 
 generator before calling <span class="NDLSystemFont">NiRand</span>.</p>

<p class="NDLRefMemberFunction">float NiSymmetricRandom()</p>

<p class="NDLRefMemberDescription">The <span class="NDLSystemFont">NiSymmetricRandom</span> 
 function returns a pseudo-random float in the range -1.0f to 1.0f. Use 
 the <span class="NDLSystemFont">NiSrand</span> function to seed the pseudo-random-number 
 generator before calling <span class="NDLSystemFont">NiSymmetricRandom</span>.</p>

<p class="NDLRefMemberFunction">float NiUnitRandom()</p>

<p class="NDLRefMemberDescription">The <span class="NDLSystemFont">NiUnitRandom</span> 
 function returns a pseudo-random float in the range 0.0f to 1.0f. Use 
 the <span class="NDLSystemFont">NiSrand</span> function to seed the pseudo-random-number 
 generator before calling <span class="NDLSystemFont">NiUnitRandom</span>.</p>

<a name=Fast_Functions></a><p class="NDLRefHead2">Fast Functions</p>

<p class="NDLRefMemberFunction">unsigned int NiFastLog(unsigned int uiNum)</p>

<p class="NDLRefMemberDescription">Calculates the logarithm of the unsigned 
 integer argument.</p>

<p class="NDLRefMemberFunction">float NiFastInvSqrt(float fValue)</p>

<p class="NDLRefMemberDescription">Calculates an approximate inverse square 
 root for improved performance.</p>

<p class="NDLRefMemberFunction">float NiFastSqrt(float fValue)</p>

<p class="NDLRefMemberDescription">Calculates an approximate square root 
 for improved performance.</p>

<p class="NDLRefMemberFunction">float NiFastATan2(float fY, float fX)</p>

<p class="NDLRefMemberDescription">Calculates an approximation of the arctangent 
 of <span class="NDLSystemFont">fY / fX</span>.</p>

<p class="NDLRefHead1">Notes</p>

<a name=NiMath_Constants></a><p class="NDLRefHead2">Convenience Objects</p>

<p>The following public constants are defined for application 
 convenience.</p>

  <table class="NDLNoteContainer" width="100%">
      <tr align="left">
          <td class="NDLNoteContainerTD"><p class="NDLHeadingNoteContainer">Caution</p>
              <div class="NDLNote">Because these constants are static, and 
 not <span class="NDLSystemFont">#defines</span>, applications 
 must be careful not to reference them in static data declarations, as 
 they may not be defined prior to the start of the &quot;main&quot; function.)
              </div>
          </td>
      </tr>
  </table>

<!--(Table)=========================================================-->
<table>
<thead>
<tr>
<th>Constant</th>
<th>Value</th></tr>
</thead><tbody>
<tr>
<td><span class="NDLSystemFont">NI_INFINITY</span></td>
<td><span class="NDLSystemFont">FLT_MAX</span></td></tr>

<tr>
<td><span class="NDLSystemFont">NI_PI</span></td>
<td><span class="NDLSystemFont">4.0f * NiATan(1.0f)</span></td></tr>

<tr>
<td><span class="NDLSystemFont">NI_HALF_PI</span></td>
<td><span class="NDLSystemFont">0.5f * NI_PI</span></td></tr>

<tr>
<td><span class="NDLSystemFont">NI_TWO_PI</span></td>
<td><span class="NDLSystemFont">2.0f * NI_PI</span></td></tr>
</tbody>
</table>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
