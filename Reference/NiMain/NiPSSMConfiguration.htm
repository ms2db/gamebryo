<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiPSSMConfiguration</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiPSSMConfiguration</p>

<p class="NDLRefParentage">: public <a href=
"../../Reference/NiMain/NiRefObject.htm"><span>NiRefObject</span></a></p>

<p class="NDLRefHeaderFile">&lt;NiPSSMConfiguration.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>Each shadow generator needs its own set of configuration for
use in PSSM, which is stored in this class. Configurations can be
bound to a generator through the
NiPSSMShadowClickGenerator::BindConfiguration function. The
configuration defines how the PSSM click generator should handle
a light that is governed by the corresponding shadow generator
and acts as a repository for shadow split frustum and viewport
data.</p>

<p>Different shadow generators cannot share the same instance of
a PSSM configuration, since calculated data is stored within.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">NiAVObjectRawList*
GetCasterList()</p>

<p class="NDLRefMemberDescription">ReturnReturns the internal
cached list of shadow casters.</p>

<p class="NDLRefMemberFunction">bool
GetSceneDependentFrustumsEnabled() const</p>

<p class="NDLRefMemberFunction">void
SetSceneDependentFrustumsEnabled(bool bEnabled)</p>

<p class="NDLRefMemberDescription">Toggles scene dependent
frustums for this configuration. When enabled, each shadow camera
frustum will attempt to shrink all planes to tightly fit casters
that are visible within its corresponding PSSM slice. The near
and far planes will also attempt to tightly fit themselves to the
bounds of affected receivers.</p>

<p class="NDLRefMemberFunction">bool
GetCustomSceneCameraFarPlaneEnabled() const</p>

<p class="NDLRefMemberFunction">void
SetCustomSceneCameraFarPlaneEnabled(bool bEnabled)</p>

<p class="NDLRefMemberDescription">Toggles between the use of the
scene camera's far plane, and a custom far plane distance.</p>

<p class="NDLRefMemberFunction">void
SetCustomSceneCameraFarPlane(float fFarPlane)</p>

<p class="NDLRefMemberFunction">float
GetCustomSceneCameraFarPlane()</p>

<p class="NDLRefMemberDescription">Assign a custom scene camera
far plane. A call to SetCustomSceneCameraFarPlane will also
enable its use.</p>

<p class="NDLRefMemberFunction">bool
GetCustomSceneCameraFrustumEnabled() const</p>

<p class="NDLRefMemberDescription">Returns true if a user
specified frustum will be used to create the PSSM splits rather
than the scene camera.</p>

<p class="NDLRefMemberFunction">const NiFrustum&amp;
GetCustomSceneCameraFrustum() const</p>

<p class="NDLRefMemberDescription">User frustum that will be used
to create PSSM splits rather than the scene camera. If no custom
frustum has been defined, an uninitialized frustum will be
returned.</p>

<p class="NDLRefMemberFunction">void
SetCustomSceneCameraFrustumEnabled(const NiFrustum&amp;
kSceneFrustum)</p>

<p class="NDLRefMemberDescription">Define and enable a custom
frustum that will be used in place of the scene camera for the
purposes of creating the PSSM splits. Each split will be a
portion of the given frustum.</p>

<p class="NDLRefMemberDescription">A custom frustum will still
have the regular scene camera transform applied to it.</p>

<p class="NDLRefMemberFunction">void
SetCustomSceneCameraFrustumDisabled()</p>

<p class="NDLRefMemberDescription">Disable a previously assigned
custom scene camera frustum</p>

<p class="NDLRefMemberFunction">float
GetCameraDistanceScaleFactor() const</p>

<p class="NDLRefMemberFunction">void
SetCameraDistanceScaleFactor(float fCameraDistScaleFactor)</p>

<p class="NDLRefMemberDescription">Specifies the scaling factor
used when calculating how far away from the scene to place the
shadow cameras. A larger scale helps to eliminate shadow
clipping, but reduces precision in the shadowmap. A default
camera distance scale factor of 4.0 is used.</p>

<p class="NDLRefMemberFunction">bool GetSubTexelOffsetEnabled()
const</p>

<p class="NDLRefMemberFunction">void
SetSubTexelOffsetEnabled(bool bEnabled)</p>

<p class="NDLRefMemberDescription">Toggle quantization of shadow
camera movements on a shadowmap texel basis. This has the effect
of removing shimmering of shadow maps when the scene camera is
moved or rotated.</p>

<p class="NDLRefMemberFunction">bool GetBorderTestingEnabled()
const</p>

<p class="NDLRefMemberFunction">void SetBorderTestingEnabled(bool
bEnabled)</p>

<p class="NDLRefMemberDescription">Toggle border testing between
adjacent shadowmap cells. When enabled, shadowmap lookups are
clipped to the relevant shadowmap viewport in the
pixel-shader.</p>

<p class="NDLRefMemberFunction">NiUInt32 GetExtraSplitSpacing()
const</p>

<p class="NDLRefMemberFunction">void
SetExtraSplitSpacing(NiUInt32 uiExtraSplitSpacing)</p>

<p class="NDLRefMemberDescription">Apply an additional spacing
(in texels) between PSSM splits on the shadowmap texture. The PCF
Shadow Technique will automatically have 2 texels added to it by
the generator; any extra split spacing will be added in addition
to these 2 texels.</p>

<p class="NDLRefMemberFunction">bool GetSliceTransitionEnabled()
const void SetSliceTransitionEnabled(bool bEnabled);</p>

<p class="NDLRefMemberDescription">Toggle screen door noise
based transitions between PSSM slices.</p>

<p class="NDLRefMemberFunction">float GetSliceTransitionSize()
const</p>

<p class="NDLRefMemberFunction">void SetSliceTransitionSize(float
fSize);</p>

<p class="NDLRefMemberDescription">Define the length from start
to finish, in world coordinate space, of a transition between two
PSSM levels.</p>

<p class="NDLRefMemberFunction">float
GetSliceTransitionNoiseScale() const</p>

<p class="NDLRefMemberFunction">void
SetSliceTransitionNoiseScale(float fScale);</p>

<p class="NDLRefMemberDescription">Define the inverse scale of
the noise mask used to create the 'screen- door' transitions
between PSSM split levels. A smaller value will produce a coarser
effect; larger numbers will produce less discrete transitions
which are more susceptible to moire artifacts.</p>

<p class="NDLRefMemberFunction">float GetSliceLambda() const</p>

<p class="NDLRefMemberFunction">void SetSliceLambda(float
fLambda);</p>

<p class="NDLRefMemberDescription">Defines how much larger a
given PSSM slice will be in comparison to the previous. A larger
value will create a bigger difference in size; therefore biasing
more shadowmap pixels to objects nearer to the visible camera.
Valid values between 0.0 and 1.0</p>

<p class="NDLRefMemberFunction">NiUInt8 GetNumSlices() const</p>

<p class="NDLRefMemberFunction">void SetNumSlices(NiUInt8
ucNumSlices);</p>

<p class="NDLRefMemberDescription">Defines the number of slices
the scene camera frustum will be split into to generate the
shadow camera frustums. Valid values between 1 and 16
(inclusive). A value of 1 will disable PSSM entirely; this click
generator will revert to all <a href=
"../../Reference/NiMain/NiDefaultShadowClickGenerator.htm">NiDefaultShadowClickGeneratorunct
functionality</a></p>

<p class="NDLRefMemberFunction">bool GetRebuildFrustums()
const</p>

<p class="NDLRefMemberFunction">void SetRebuildFrustums(bool
bRebuild = true);</p>

<p class="NDLRefMemberDescription">Request that the scene camera
splits and the shadow camera frustums are recalculated the next
time the generator corresponding to this configuration is
handled. Once the frustums are rebuilt, this flag is set to
false.</p>

<p class="NDLRefMemberFunction">bool GetIsBoundToGenerator()
const</p>

<p class="NDLRefMemberDescription">Returns true if this
configuration is currently bound to a generator.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
