<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiTObjectList</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>


<p class="NDLRefHeadClassTitle">NiTObjectList</p>

<p class="NDLRefHeaderFile">: public <a href="NiTListBase.htm"><span>NiTListBase</span></a></p>

<p class="NDLRefHeaderFile">&lt;NiTObjectList.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>This class is a templated, doubly-linked list intended 
 for holding objects (as opposed to pointers-to-objects). The templated 
 type <span class="NDLSystemFont">T</span> has the following restrictions:</p>

<ul>
	
	<li>It must have a &quot;0&quot; 
 element (i.e. <span class="NDLSystemFont">T var; var = 0;</span> is supported).</li>
	
	<li>It must have a constructor, 
 and that constructor must be able to create the &quot;0&quot; element 
 (i.e. <span class="NDLSystemFont">T&nbsp;var(0);</span> must 
 be a valid declaration).</li>
	
	<li>It must have a valid 
 copy constructor.</li>
	
	<li>The destructor must 
 be able to completely destroy the element without additional input.</li>
	
	<li>The <span class="NDLSystemFont">operator==</span>, 
 <span class="NDLSystemFont">operator!=</span>, and assignment operators 
 must work correctly.</li>
</ul>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiTObjectList()</p>

<p class="NDLRefMemberDescription">The default constructor creates an empty 
 list. </p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">T* AddNewHead()</p>

<p class="NDLRefMemberFunction">T* AddNewTail()</p>

<p class="NDLRefMemberDescription">Adds a new element as the first and last 
 items on the list, respectively. No constructor is called. Returns a pointer 
 to the object so that the application may fill in the member data.</p>

<p class="NDLRefMemberFunction">T* InsertNewBefore(NiTListIterator kPos)</p>

<p class="NDLRefMemberFunction">T* InsertNewAfter(NiTListIterator kPos)</p>

<p class="NDLRefMemberFunction">T* InsertNewBefore(NiTListIterator kPos, 
 NiTListIterator&amp; kNewIterator)</p>

<p class="NDLRefMemberFunction">T* InsertNewAfter(NiTListIterator kPos, NiTListIterator&amp; 
 kNewIterator)</p>

<p class="NDLRefMemberFunction">&nbsp;</p>

<p class="NDLRefMemberDescription">Inserts a new item before and after the 
 element pointed to by the given iterator, respectively. <em>The given iterator 
 </em><span class="NDLSystemFont">kPos</span><em> 
 must not be </em><span class="NDLSystemFont">NULL</span>. No constructor is called. Returns a pointer to the object so that 
 the application may fill in the member data. <span class="NDLSystemFont">kNewIterator</span>, if specified, 
 will be filled in with an <span class="NDLSystemFont">NiTListIterator</span> 
 to the new element.</p>

<p class="NDLRefMemberFunction">T* GetHead() const</p>

<p class="NDLRefMemberFunction">T* GetTail() const</p>

<p class="NDLRefMemberDescription">Return a pointer to the items that are 
 the first and last elements on the list, respectively. <em>These functions 
 must not be called on an empty list.</em></p>

<p class="NDLRefMemberFunction">T* Get(NiTListIterator kPos) const</p>

<p class="NDLRefMemberDescription">Return a pointer to the object pointed 
 to by the given iterator, or <span class="NDLSystemFont">0</span> 
 if the iterator is <span class="NDLSystemFont">0</span> 
 (i.e. off of either end of the list)</p>

<p class="NDLRefMemberFunction">T* GetNext(NiTListIterator&amp; kPos) const</p>

<p class="NDLRefMemberFunction">T* GetPrev(NiTListIterator&amp; kPos) const</p>

<p class="NDLRefMemberDescription">Return a pointer to the object pointed 
 to by the given iterator, and <em>then</em> advance or retreat the iterator 
 by one element. The function will return <span class="NDLSystemFont">0</span> if the iterator is 
 <span class="NDLSystemFont">0</span> 
 (i.e. off of either end of the list).</p>

<p class="NDLRefMemberFunction">void RemoveHead()</p>

<p class="NDLRefMemberFunction">void RemoveTail()</p>

<p class="NDLRefMemberDescription">Remove the first and last list items, 
 respectively. The object is freed but no destructor is called. If any 
 cleanup is required it must be done explicitly prior to calling these 
 Remove functions. <em>These functions must not be called on an empty list.</em></p>

<p class="NDLRefMemberFunction">void RemovePos(NiTListIterator&amp; kPos)</p>

<p class="NDLRefMemberDescription">Removes the element pointed to by the 
 given iterator. The object is freed but no destructor is called. If any 
 cleanup is required it must be done explicitly prior to calling these 
 Remove functions. The given iterator <em>must not</em> be <span class="NDLSystemFont">NULL</span>.</p>

<p class="NDLRefMemberFunction">void Remove(const T* element)</p>

<p class="NDLRefMemberDescription">Removes the specified element from the 
 list. Finds the element using pointer equality (not T::operator==). If 
 found, the object is freed but no destructor is called. If any cleanup 
 is required it must be done explicitly prior to calling Remove.</p>

<p class="NDLRefMemberFunction">NiTListIterator FindPos(const T* element, 
 NiTListIterator kStart = 0) const</p>

<p class="NDLRefMemberDescription">Finds the element using pointer equality 
 (not T::operator==). <span class="NDLSystemFont">kStart</span>, 
 if specified, indicates where to begin searching the list.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
