<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiScreenLODData</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiScreenLODData</p>

<p class="NDLRefParentage">: public <a href=
"NiLODData.htm">NiLODData</a></p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiScreenLODData</span> encompasses
the logic of switching LOD levels based on proportion of the
screen that a bound would include. The reasoning behind this
functionality is quite simple, you want to draw in more detail
those things that are larger on the screen. It is difficult to
see the detail on a bird that is 50 meters away as it would take
up but a small portion of the screen. A battle ship at 50 meters
would encompass much more of the screen so you would want to see
it at a higher level of detail. <span class=
"NDLSystemFont">NiScreenLODData</span> uses the relative
proportions of the objects bound translated to screen space to
determine what LOD level to display. There are a couple thing
inherit to the implementation worth mentioning.</p>

<p class="NDLRefHead2">Inherent Ordering</p>

<p>It is assumed that the LOD node has its children ordered from
Highest level of detail(child 0) to the lowest level of detail
(Child N). It also assumes that only 1 child will ever be visible
at any given time and one child will always be visible (aka.
<span class="NDLSystemFont"><a href=
"NiSwitchNode.htm">NiSwitchNode</a></span>) Given these
assumptions the <span class=
"NDLSystemFont">NiScreenLODData</span> needs to only save the far
boundary for each LOD level. A particular LOD level will be drawn
until its screen space boundary is small then a "Far"
proportion.</p>

<p class="NDLRefHead2">Lowest Detail LOD has No Proportion</p>

<p>The lowest level of detail is assumed to have a far proportion
of zero because it should always be show. For this reason lowest
level of detail has no proportion. The number of proportions will
be one less than the number of LOD levels. <span class=
"NDLSystemFont">((m_uiNumProportions = (Num LOD -1))</span>. You
are only storing the bound conditions between LOD levels and the
lowest LOD has no far boundary.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiScreenLODData()</p>

<p class="NDLRefMemberFunction">virtual ~NiScreenLODData()</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">virtual int GetLODLevel(<a href=
"NiCamera.htm">NiCamera</a>* pkCamera, <a href=
"NiLODNode.htm">NiLODNode</a>* pkLOD) const</p>

<p class="NDLRefMemberDescription">Determine the LOD Level do be
used based on this camera and Node. <span class=
"NDLSystemFont">NiScreenLODData</span> will use the <span class=
"NDLSystemFont">m_kWorldBound</span>'s screen size. Returning -1
indicates nothing should be displayed.</p>

<p class="NDLRefMemberFunction">virtual void
UpdateWorldData(<a href="NiLODNode.htm">NiLODNode</a>* pkLOD)</p>

<p class="NDLRefMemberDescription">Update any internal world data
base on this LOD node. <span class=
"NDLSystemFont">NiScreenLODData</span> will be updating the
<span class="NDLSystemFont">m_kWorldBound</span>.</p>

<p class="NDLRefMemberFunction">virtual <a href=
"NiLODData.htm">NiLODData</a>* Duplicate()</p>

<p class="NDLRefMemberDescription">NiLODData are never shared so
we need a duplication function for cloning.</p>

<p class="NDLRefMemberFunction">void SetBound(const <a href=
"NiBound.htm">NiBound</a>&amp; kBound)</p>

<p class="NDLRefMemberFunction">const <a href=
"NiBound.htm">NiBound</a>&amp; GetBound() const</p>

<p class="NDLRefMemberFunction">const <a href=
"NiBound.htm">NiBound</a>&amp; GetWorldBound() const</p>

<p class="NDLRefMemberDescription">Get and Set the bounds used to
determine the screen proportion.</p>

<p class="NDLRefMemberFunction">unsigned int GetNumProportions()
const</p>

<p class="NDLRefMemberFunction">void SetNumProportions(unsigned
int uiNumProportions)</p>

<p class="NDLRefMemberDescription">Get and Set the number of
screen proportions used to determine which LOD level to
display.</p>

<p class="NDLRefMemberFunction">float GetProportion(unsigned int
uiIndex) const</p>

<p class="NDLRefMemberFunction">void SetProportion(unsigned int
uiIndex, float fProportion)</p>

<p class="NDLRefMemberDescription">Get and Set the proportion for
a particular LOD level. A particular LOD level will be drawn
until its screen space boundary is small then a "Far"
proportion.</p>

<p class="NDLRefMemberFunction">void AutoSetBound(<a href=
"NiLODNode.htm">NiLODNode</a>* pkLOD)</p>

<p class="NDLRefMemberDescription">Merge the updated bounds for
all children to automatically determine the <span class=
"NDLSystemFont">NiScreenLODData</span>'s bound.</p>

<p class="NDLRefMemberFunction">virtual int GetLODIndex(int
iLODLevel) const</p>

<p class="NDLRefMemberDescription">Given a LOD level return the
index of the <a href="NiLODNode.htm"><span class=
"NDLSystemFont">NiLODNode</span></a> child that should be
displayed.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
