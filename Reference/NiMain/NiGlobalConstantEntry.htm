<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiGlobalConstantEntry</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiGlobalConstantEntry</p>

<p class="NDLRefParentage">: public <span><a href="NiRefObject.htm">NiRefObject</a></span></p>

<p class="NDLRefHeaderFile">&lt;NiGlobalConstantEntry.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiGlobalConstantEntry</span> 
 is a shader constant mapping entry that allows for setting 'global' data 
 in shader registers. This is useful for setting constant values for items 
 such as lights, which are not per-object, but rather per-scene.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiGlobalConstantEntry()</p>

<p class="NDLRefMemberFunction">NiGlobalConstantEntry(const char* pcKey, 
 <a href="NiShaderAttributeDesc.htm#AttributeType_Enumerations">NiShaderAttributeDesc::AttributeType</a> 
 eType, unsigned int uiDataSize, void* pvDataSource)</p>

<p class="NDLRefMemberDescription">The default constructor creates an uninitialized 
 <span class="NDLSystemFont">NiGlobalConstantEntry</span>. 
 The second form of the constructor initializes the entry to the given 
 values. </p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction"><a HREF="NiFixedString.htm">NiFixedString</a> 
 GetKey() const</p>

<p class="NDLRefMemberDescription">Returns the key name used to identify 
 the entry.</p>

<p class="NDLRefMemberFunction">void SetKey(const <a href="NiFixedString.htm">NiFixedString</a>&amp; 
 pcKey)</p>

<p class="NDLRefMemberDescription">Sets the key name used to identify the 
 entry.</p>

<p class="NDLRefMemberFunction">const <a href="NiShaderAttributeDesc.htm#AttributeType_Enumerations">NiShaderAttributeDesc::AttributeType</a> 
 GetType() const</p>

<p class="NDLRefMemberDescription">Returns the data type that the entry holds.</p>

<p class="NDLRefMemberFunction">void SetType(<a href="NiShaderAttributeDesc.htm#AttributeType_Enumerations">NiShaderAttributeDesc::AttributeType</a> 
 eType)</p>

<p class="NDLRefMemberDescription">Sets the data type that the entry holds.</p>

<p class="NDLRefMemberFunction">bool IsBool() const</p>

<p class="NDLRefMemberDescription">Returns <span class="NDLSystemFont">true</span> 
 if the data type is a Boolean.</p>

<p class="NDLRefMemberFunction">bool IsString() const</p>

<p class="NDLRefMemberDescription">Returns <span class="NDLSystemFont">true</span> if the data type 
 is a string (character array).</p>

<p class="NDLRefMemberFunction">bool IsUnsignedInt() const</p>

<p class="NDLRefMemberDescription">Returns <span class="NDLSystemFont">true</span> if the data type 
 is an unsigned int.</p>

<p class="NDLRefMemberFunction">bool IsFloat() const</p>

<p class="NDLRefMemberDescription">Returns <span class="NDLSystemFont">true</span> if the data type 
 is a float.</p>

<p class="NDLRefMemberFunction">bool IsPoint2() const</p>

<p class="NDLRefMemberDescription">Returns <span class="NDLSystemFont">true</span> if the data type 
 is a point2.</p>

<p class="NDLRefMemberFunction">bool IsPoint3() const</p>

<p class="NDLRefMemberDescription">Returns <span class="NDLSystemFont">true</span> if the data type 
 is a point3.</p>

<p class="NDLRefMemberFunction">bool IsPoint4() const</p>

<p class="NDLRefMemberDescription">Returns <span class="NDLSystemFont">true</span> if the data type 
 is a point4.</p>

<p class="NDLRefMemberFunction">bool IsMatrix3() const</p>

<p class="NDLRefMemberDescription">Returns <span class="NDLSystemFont">true</span> if the data type 
 is a matrix3.</p>

<p class="NDLRefMemberFunction">bool IsMatrix4() const</p>

<p class="NDLRefMemberDescription">Returns <span class="NDLSystemFont">true</span> if the data type 
 is a matrix4.</p>

<p class="NDLRefMemberFunction">bool IsColor() const</p>

<p class="NDLRefMemberDescription">Returns <span class="NDLSystemFont">true</span> if the data type 
 is a color.</p>

<p class="NDLRefMemberFunction">bool IsTexture() const</p>

<p class="NDLRefMemberDescription">Returns <span class="NDLSystemFont">true</span> if the data type 
 is a texture.</p>

<p class="NDLRefMemberFunction">unsigned int GetDataSize() const</p>

<p class="NDLRefMemberDescription">Returns the size of the data held in the 
 entry.</p>

<p class="NDLRefMemberFunction">void* GetDataSource() const</p>

<p class="NDLRefMemberDescription">Returns a pointer to the data held in 
 the entry.</p>

<p class="NDLRefMemberFunction">void GetData(unsigned int&amp; uiDataSize, 
 void*&amp; pvDataSource) const</p>

<p class="NDLRefMemberDescription">Returns the data size and data source 
 held in the entry. Equivalent to calling <span class="NDLSystemFont">GetDataSize</span> and <span class="NDLSystemFont">GetDataSource</span>.</p>

<p class="NDLRefMemberFunction">void SetData(unsigned int uiDataSize, void* 
 pvDataSource)</p>

<p class="NDLRefMemberDescription">Sets the data  a local copy is map in 
 the case of global entries.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
