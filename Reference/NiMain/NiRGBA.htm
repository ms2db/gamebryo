<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiRGBA</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiRGBA</p>

<p class="NDLRefParentage">: public <a href=
"../../Reference/NiSystem/NiMemObject.htm"><span>NiMemObject</span></a></p>

<p class="NDLRefHeaderFile">&lt;NiColor.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiRGBA</span> represents an
unsigned integer color. The data is stored using a union of the
private data structure <span class=
"NDLSystemFont">NiRGBA::Color</span> and a NiUInt32 object. The
NiRGBA::Color structure contains 4 NiUInt8 member variables
r,g,b,a. The data is stored privately but can be accessed and
modified through the given accessor functions.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiRGBA(NiUInt8 uiR = 0, NiUInt8
uiG = 0, NiUInt8 uiB = 0, NiUInt8 uiA = 0)</p>

<p class="NDLRefMemberDescription">This constructor is the
default and member-wise constructor. Given no arguments, it
constructs translucent black (the zero color).</p>

<p class="NDLRefHead1">Accessors</p>

<p class="NDLRefMemberFunction">NiUInt8&amp; r();<br>
const NiUInt8&amp; r() const;</p>

<p class="NDLRefMemberDescription">An accessor for the red
component in the color.</p>

<p class="NDLRefMemberFunction">NiUInt8&amp; g();<br>
const NiUInt8&amp; g() const;</p>

<p class="NDLRefMemberDescription">An accessor for the green
component in the color.</p>

<p class="NDLRefMemberFunction">NiUInt8&amp; b();<br>
const NiUInt8&amp; b() const;</p>

<p class="NDLRefMemberDescription">An accessor for the blue
component in the color.</p>

<p class="NDLRefMemberFunction">NiUInt8&amp; a();<br>
const NiUInt8&amp; a() const;</p>

<p class="NDLRefMemberDescription">An accessor for the alpha
component in the color.</p>

<p class="NDLRefHead1">Operators</p>

<p class="NDLRefMemberFunction">NiRGBA&amp; operator= (NiUInt8
uiValue)</p>

<p class="NDLRefMemberDescription">The unsigned char argument is
assigned to R, G, B, and A.</p>

<p class="NDLRefMemberFunction">NiRGBA&amp; operator== (const
NiRGBA&amp; kC) const</p>

<p class="NDLRefMemberDescription">This operator is the exact
equality operator.</p>

<p class="NDLRefMemberFunction">NiRGBA&amp; operator!= (const
NiRGBA&amp; kC) const</p>

<p class="NDLRefMemberDescription">This operator is the exact
inequality operator.</p>

<p class="NDLRefMemberFunction">NiRGBA&amp; operator+ (const
NiRGBA&amp; kC) const</p>

<p class="NDLRefMemberDescription">This operator performs
member-wise addition.</p>

<p class="NDLRefMemberFunction">NiRGBA&amp; operator- ( const
NiRGBA&amp; kC) const</p>

<p class="NDLRefMemberDescription">This operator performs
member-wise subtraction</p>

<p class="NDLRefMemberFunction">NiRGBA&amp; operator* (float
fScalar) const</p>

<p class="NDLRefMemberDescription">This operator scales all color
channels by the given scalar.</p>

<p class="NDLRefMemberFunction">NiRGBA&amp; operator* (const
NiRGBA&amp; kC) const</p>

<p class="NDLRefMemberDescription">This operator performs
member-wise multiplication (NOT a dot product).</p>

<p class="NDLRefMemberFunction">NiRGBA&amp; operator/ (float
fScalar) const</p>

<p class="NDLRefMemberDescription">This operator divides all the
color channels by the given scalar.</p>

<p class="NDLRefMemberFunction">NiRGBA&amp; operator/ (const
NiRGBA&amp; kC) const</p>

<p class="NDLRefMemberDescription">This operator performs a
member-wise division of the color channels.</p>

<p class="NDLRefMemberFunction">NiRGBA&amp; operator- ()
const</p>

<p class="NDLRefMemberDescription">This operator negates the
values of the color channels. Be careful of this operator,
remember the data is stored as an unsigned integer.</p>

<p class="NDLRefMemberFunction">friend NiRGBA operator* (float
fScalar, const NiRGBA&amp; kC)</p>

<p class="NDLRefMemberDescription">This operator multiplies each
color channel of the right-hand color by the given scalar.</p>

<p class="NDLRefMemberFunction">NiRGBA&amp; operator+= (const
NiRGBA&amp; kC)</p>

<p class="NDLRefMemberDescription">This operator performs a
member-wise increment of the left-hand member by the right-hand
member.</p>

<p class="NDLRefMemberFunction">NiRGBA&amp; operator-= (const
NiRGBA&amp; kC)</p>

<p class="NDLRefMemberDescription">This operator performs a
member-wise decrement of the left-hand member by the right-hand
member.</p>

<p class="NDLRefMemberFunction">NiRGBA&amp; operator*= (float
fScalar)</p>

<p class="NDLRefMemberDescription">This operator performs a
member-wise scaling of the left-hand member by the given
scalar.</p>

<p class="NDLRefMemberFunction">NiRGBA&amp; operator*= (const
NiRGBA&amp; kC)</p>

<p class="NDLRefMemberDescription">This operator performs a
member-wise multiplication of the left-hand member by the
right-hand member and is not a dot product.</p>

<p class="NDLRefMemberFunction">NiRGBA&amp; operator/= (float
fScalar)</p>

<p class="NDLRefMemberDescription">This operator performs a
member-wise division of the left-hand member by the given
scalar.</p>

<p class="NDLRefMemberFunction">NiRGBA&amp; operator/= (const
NiRGBA&amp; kC)</p>

<p class="NDLRefMemberDescription">This operator performs a
member-wise division of the left-hand member by the right-hand
member.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">void Clamp()</p>

<p class="NDLRefMemberDescription">Ensure RGBA components are
within the range <span class="NDLSystemFont">[0.0,1.0]</span> by
clamping any components above <span class=
"NDLSystemFont">1.0</span> to <span class=
"NDLSystemFont">1.0</span>. Note that all the components are
assumed to be &ge; <span class="NDLSystemFont">0.0</span>, so no
such check is performed.</p>

<p class="NDLRefMemberFunction">void Scale()</p>

<p class="NDLRefMemberDescription">Ensure RGBA components are
within the range <span class="NDLSystemFont">[0.0,1.0]</span> by
scaling down all components by the max component. This function
sets the components in the correct range and preserves the hue of
the final color. Note that all the components are assumed to be
&ge; <span class="NDLSystemFont">0.0</span>, so no such check is
performed.</p>

<p class="NDLRefMemberFunction">void GetAs(NiUInt32&amp; uiColor)
const</p>

<p class="NDLRefMemberDescription">Function to convert the NiRGBA
color value into the given unsigned integer color value.</p>

<p class="NDLRefMemberFunction">void GetAs(<a href=
"NiColor.htm">NiColor</a>&amp; kColor) const</p>

<p class="NDLRefMemberDescription">Function to convert the NiRGBA
color value into the given <span class=
"NDLSystemFont">NiColor</span> object.</p>

<p class="NDLRefMemberFunction">void GetAs(<a href=
"NiColorA.htm">NiColorA</a>&amp; kColor) const</p>

<p class="NDLRefMemberDescription">Function to convert the NiRGBA
color value into the given <span class=
"NDLSystemFont">NiColorA</span> object.</p>

<p class="NDLRefMemberFunction">void GetAsBGRA(NiUInt32&amp;
uiColor) const</p>

<p class="NDLRefMemberDescription">Function to swizzle the NiRGBA
components into the BRGA format. It then converts the resulting
color value into the given unsigned integer color value.</p>

<p class="NDLRefHead1">Notes</p>

<a name="Convenience_Objects" id="Convenience_Objects"></a><p class="NDLRefHead2">Convenience Objects</p>

<p>The following public static constants are defined for
application convenience (note the <span class=
"NDLSystemFont">1.0</span> alpha in both cases).</p>

<table class="NDLNoteContainer" width="100%">
    <tr align="left">
        <td class="NDLNoteContainerTD">
            <p class="NDLHeadingNoteContainer">Caution</p>

            <div class="NDLNote">
                Because these constants are static, and not
                <span class="NDLSystemFont">#defines</span>,
                applications must be careful not to reference
                them in static data declarations, as they may not
                be defined prior to the start of the "main"
                function.)
            </div>
        </td>
    </tr>
</table>

<!--(Table)=========================================================-->
<table>
    <thead>
        <tr>
            <th>Constant</th>

            <th>Value</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><span class=
            "NDLSystemFont">NiRGBA::BLACK</span></td>

            <td>NiRGBA(0, 0, 0, 255)</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">NiRGBA::WHITE</span></td>

            <td>NiRGBA(255, 255, 255, 255)</td>
        </tr>
    </tbody>
</table>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
