<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiSwitchNode</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiSwitchNode</p>

<p class="NDLRefParentage">: public <a href=
"NiNode.htm">NiNode</a></p>

<p class="NDLRefHeaderFile">&lt;NiSwitchNode.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiSwitchNode</span> objects
represent groups of multiple scene graph subtrees, only one of
which (the "active child") is active (drawn) at any given time.
They are useful for swapping different representations of the
same object in and out (such as pristine, damaged or destroyed
versions of a spaceship). They are also used as a base class for
specific switch-like objects (such as geometric "flipbook"
animations and level-of-detail switches. If you detach the
"active child" the switch node will automatically set the active
child to none (index = -1).</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiSwitchNode()</p>

<p class="NDLRefMemberDescription">This default constructor
creates a switch node with no children, an index of <span class=
"NDLSystemFont">1</span> (draw none of the children), and which
will only update its active child on an <span class=
"NDLSystemFont">Update</span> pass.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction"><a href=
"NiAVObject.htm">NiAVObjectPtr</a> DetachChild(<a href=
"NiAVObject.htm">NiAVObject</a>* pkChild)</p>

<p class="NDLRefMemberDescription">Detaches and returns a smart
pointer to the given child. Returns the pointer to the calling
object even if the object was not actually found in the child
array. If pkChild is the active child then the active child index
will be set to -1.</p>

<p class="NDLRefMemberFunction"><a href=
"NiAVObject.htm">NiAVObjectPtr</a> DetachChildAt(unsigned int
i)</p>

<p class="NDLRefMemberDescription">Detaches the child at the
given index (if any) and returns a smart pointer to that object,
leaving the child array at that index set to NULL. If pkChild is
the active child then the active child index will be set to
-1.</p>

<p class="NDLRefMemberFunction"><a href=
"NiAVObject.htm">NiAVObject</a>* GetActiveChild()</p>

<p class="NDLRefMemberDescription">Returns the currently active
child, or <span class="NDLSystemFont">NULL</span> if the index is
set to <span class="NDLSystemFont">1</span>.</p>

<p class="NDLRefMemberFunction">int GetIndex() const</p>

<p class="NDLRefMemberFunction">void SetIndex(int iIndex)</p>

<p class="NDLRefMemberDescription">Retrieve and set the value of
the active child index. This index represents the index of the
active child in the <span class="NDLSystemFont">NiNode</span>
child array of the <span class=
"NDLSystemFont">NiSwitchNode</span>. If this index is
<span class="NDLSystemFont">-1</span>, then no child is
active.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
