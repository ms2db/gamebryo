<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiSourceCubeMap</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiSourceCubeMap</p>

<p class="NDLRefParentage">: public <a href=
"NiSourceTexture.htm"><span>NiSourceTexture</span></a></p>

<p class="NDLRefHeaderFile">&lt;NiSourceCubeMap.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiSourceCubeMap</span> represents
all cube map (six-sided environment map) objects that are created
from either a set of six image files, six blocks of in-memory
pixel data, or a single pixel data object with six faces.
Internally, the six faces are stored in a single <span class=
"NDLSystemFont"><a href="NiPixelData.htm">NiPixelData</a></span>
object with six faces. <span class=
"NDLSystemFont">NiSourceCubeMap</span> objects represent both
static and projected content, as <span class=
"NDLSystemFont">NiSourceCubeMap</span> objects can have their
pixel data modified on the fly to implement projected texture
behavior. See the texturing documentation for details on cube
mapping. Note that not all renderers can support cube maps, and
as a result the creation function may return <span class=
"NDLSystemFont">NULL</span>.</p>

<p class="NDLRefHead1">Constructors</p>

<p>No public constructors are available, as the creation
functions must be able to fail in some cases. As a result, all
creation is handled via the static <span class=
"NDLSystemFont">Create</span> functions below.</p>

<p class="NDLRefHead1">Static Member Functions</p>

<p class="NDLRefMemberFunction">static <a href=
"NiSourceCubeMap.htm">NiSourceCubeMap</a>* Create(const char* pcPosXFilename,
const char* pcNegXFilename, const char* pcPosYFilename,
const char* pcNegYFilename, const char* pcPosZFilename,
const char* pcNegZFilename, <a href=
"NiRenderer.htm">NiRenderer</a>* pkRenderer, <a href=
"NiTexture__FormatPrefs.htm">FormatPrefs</a>&amp; kPrefs = ms_kDefaultPrefs)</p>

<p class="NDLRefMemberDescription">Creates an <span class=
"NDLSystemFont">NiSourceCubeMap</span> that represents the given
six image file names (one for each cube map face see below under
SetCurrentFace for a description of each face). The format
preferences are saved in the cube map and are passed to any
renderer when the map is loaded to that renderer. The format
preferences are a request only, and may be ignored by any given
renderer. The map will be preloaded to the given renderer prior
to being returned to the caller the function will return NULL if
this preload step fails. If a platform-specific subdirectory has
been specified in the <span class="NDLSystemFont"><a href=
"NiImageConverter.htm">NiImageConverter</a></span> prior to the
creation of the <span class=
"NDLSystemFont">NiSourceCubeMap</span>, then it will be used. See
the notes section in the <span class="NDLSystemFont"><a href=
"NiSourceTexture.htm">NiSourceTexture</a></span> class for a
discussion of platform-specific image data loading. By default,
no application-level <span class="NDLSystemFont"><a href=
"NiPixelData.htm">NiPixelData</a></span> objects will be stored
for this cube map, as the files themselves serve as backing
store. By default, the map is assumed to be static see the notes
in the <span class="NDLSystemFont"><a href=
"NiSourceTexture.htm">NiSourceTexture</a></span> class for a
discussion of dynamic modification of pixel values associated
with an <span class="NDLSystemFont"><a href=
"NiSourceTexture.htm">NiSourceTexture</a></span> . Note that not
all renderers can support cube maps, and as a result this
function may return <span class="NDLSystemFont">NULL</span>. Note
that this method is inefficient due to the compositing of the 6
<span class="NDLSystemFont">NiPixelData</span> objects contained
in the files into a single <span class=
"NDLSystemFont">NiPixelData</span> object with 6 faces.</p>

<p class="NDLRefMemberFunction">static
NiSourceCubeMap* Create(<a href=
"NiPixelData.htm">NiPixelData</a>* pkPosXRaw, <a href=
"NiPixelData.htm">NiPixelData</a>* pkNegXRaw, <a href=
"NiPixelData.htm">NiPixelData</a>* pkPosYRaw, <a href=
"NiPixelData.htm">NiPixelData</a>* pkNegYRaw, <a href=
"NiPixelData.htm">NiPixelData</a>* pkPosZRaw, <a href=
"NiPixelData.htm">NiPixelData</a>* pkNegZRaw, <a href=
"NiRenderer.htm">NiRenderer</a>* pkRenderer, <a href=
"NiTexture__FormatPrefs.htm">FormatPrefs</a>&amp; kPrefs = ms_kDefaultPrefs)</p>

<p class="NDLRefMemberDescription">Creates an <span class=
"NDLSystemFont">NiSourceCubeMap</span> that represents the given
six <span class="NDLSystemFont"><a href=
"NiPixelData.htm">NiPixelData</a></span> objects (one for each
cube map face see below under <span class=
"NDLSystemFont">SetCurrentFace()</span> for a description of each
face). The <span class="NDLSystemFont"><a href=
"NiPixelData.htm">NiPixelData</a></span> objects are composited
into a single <span class="NDLSystemFont"><a href=
"NiPixelData.htm">NiPixelData</a></span> with six faces in the
<span class="NDLSystemFont">NiSourceCubeMap</span>. The format
preferences are saved in the map and are passed to any renderer
when the texture is loaded to that renderer. The format
preferences are a request only, and may be ignored by any given
renderer. The cube map will be preloaded to the given renderer
prior to being returned to the caller. By default, the cube map
is assumed to be static see the notes in the <span class=
"NDLSystemFont"><a href=
"NiSourceTexture.htm">NiSourceTexture</a></span> class for a
discussion of dynamic modification of pixel values associated
with an <span class="NDLSystemFont"><a href=
"NiSourceTexture.htm">NiSourceTexture</a></span>. Note that not
all renderers can support cube maps, and as a result this
function may return <span class="NDLSystemFont">NULL</span>. Note
that this method is inefficient due to the compositing of the 6
<span class="NDLSystemFont"><a href=
"NiPixelData.htm">NiPixelData</a></span> objects into a single
<span class="NDLSystemFont"><a href=
"NiPixelData.htm">NiPixelData</a></span> object with 6 faces.</p>

<p class="NDLRefMemberFunction">static NiSourceCubeMap*
Create(const <a href="NiFixedString.htm">NiFixedString</a>&amp;
kFilename, <a href="NiRenderer.htm">NiRenderer</a>* pkRenderer, <a href=
"NiTexture__FormatPrefs.htm">FormatPrefs</a>&amp;
kPrefs = ms_kDefaultPrefs)</p>

<p class="NDLRefMemberDescription">Creates an <span class=
"NDLSystemFont">NiSourceCubeMap</span> that represents the given
file with six faces of pixels. The format preferences are saved
in the cube map and are passed to any renderer when the map is
loaded to that renderer. The format preferences are a request
only, and may be ignored by any given renderer. The map will be
preloaded to the given renderer prior to being returned to the
caller the function will return NULL if this preload step fails.
If a platform-specific subdirectory has been specified in the
<span class="NDLSystemFont"><a href=
"NiImageConverter.htm">NiImageConverter</a></span> prior to the
creation of the <span class=
"NDLSystemFont">NiSourceCubeMap</span>, then it will be used. See
the notes section in the <span class="NDLSystemFont"><a href=
"NiSourceTexture.htm">NiSourceTexture</a></span> class for a
discussion of platform-specific image data loading. By default,
no application-level <span class="NDLSystemFont"><a href=
"NiPixelData.htm">NiPixelData</a></span> objects will be stored
for this cube map, as the files themselves serve as backing
store. By default, the map is assumed to be static see the notes
in the <span class="NDLSystemFont"><a href=
"NiSourceTexture.htm">NiSourceTexture</a></span> class for a
discussion of dynamic modification of pixel values associated
with an <span class="NDLSystemFont"><a href=
"NiSourceTexture.htm">NiSourceTexture</a></span>. Note that not
all renderers can support cube maps, and as a result this
function may return <span class="NDLSystemFont">NULL</span>.</p>

<p class="NDLRefMemberFunction">static NiSourceCubeMap*
Create(<a href="NiPixelData.htm">NiPixelData</a>*
pkCubeMapPixels, <a href="NiRenderer.htm">NiRenderer</a>*
pkRenderer, <a href=
"NiTexture__FormatPrefs.htm">FormatPrefs</a>&amp;
kPrefs = ms_kDefaultPrefs)</p>

<p class="NDLRefMemberDescription">Creates an <span class=
"NDLSystemFont">NiSourceCubeMap</span> that uses the given pixel
data. The given pixel data is assumed to already have six faces.
If the number of faces in the given pixel data is not six, the
function will return <span class="NDLSystemFont">NULL</span>.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">FaceID
GetCurrentCubeFace() const</p>

<p class="NDLRefMemberFunction">void
SetCurrentCubeFace(FaceID eFace)</p>

<p class="NDLRefMemberDescription">Set and retrieve the cube face
that the application accesses and acts upon when calling member
functions. When using a cube map as a texture, the entire cube
map is used at once. However, when manipulating the data in a
cube map, the six faces must be accessed one at a time. This
value controls which of the six cube faces will be affected by
the functions listed below under the notes. The possible
enumeration values are as follows:</p>

<!--(Table)=========================================================-->
<table>
    <thead>
        <tr>
            <th>Flag</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><span class=
            "NDLSystemFont">FACE_POS_X</span></td>

            <td>The cube face in the plane X = 1.0</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">FACE_NEG_X</span></td>

            <td>The cube face in the plane X= -1.0</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">FACE_POS_Y</span></td>

            <td>The cube face in the plane Y = 1.0</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">FACE_NEG_Y</span></td>

            <td>The cube face in the plane Y = -1.0</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">FACE_POS_Z</span></td>

            <td>The cube face in the plane Z = 1.0</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">FACE_NEG_Z</span></td>

            <td>The cube face in the plane Z = -1.0</td>
        </tr>
    </tbody>
</table>

<p class="NDLRefHead1">Notes</p>

<a name="Face_Dependent_Behavior" id="Face_Dependent_Behavior"></a><p class="NDLRefHead2">Current Cube Face and Member Function
Behavior</p>

<p>Although the cube map is treated as a single object when used
in a renderer as a texture, it does consist of six faces of a
single source data object (an <span class=
"NDLSystemFont"><a href="NiPixelData.htm">NiPixelData</a></span>
object). The following <span class="NDLSystemFont"><a href=
"NiSourceTexture.htm">NiSourceTexture</a></span>/<span class=
"NDLSystemFont"><a href="NiTexture.htm">NiTexture</a></span>
functions return data from or act upon the cube map as a whole,
rather than per-face:</p>

<!--(Table)=========================================================-->
<table>
    <thead>
        <tr>
            <th>Function</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><span class=
            "NDLSystemFont">GetFilename</span></td>

            <td>Get the filename associated with the six faced
            <span class="NDLSystemFont">NiPixelData</span>
            object.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">GetPlatformSpecificFilename</span></td>

            <td>As above.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">GetSourcePixelData</span></td>

            <td>As above.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">LoadPixelDataFromFile</span></td>

            <td>As above.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">DestroyAppPixelData</span></td>

            <td>As above.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">GetWidth/GetHeight</span></td>

            <td>All cube faces share a single dimension
            size.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">GetFormatPreferences</span></td>

            <td>All cube faces share the same format</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SetStatic/GetStatic</span></td>

            <td>The static flag is per-texture</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">GetRendererPixelFormat</span></td>

            <td>All cube faces share the same format</td>
        </tr>
    </tbody>
</table>

<p class="NDLRefHead2">Streaming and NiSourceCubeMaps</p>

<p><span class="NDLSystemFont">NiSourceCubeMap</span> objects are
streamed by the same mechanisms as <span class=
"NDLSystemFont"><a href=
"NiSourceTexture.htm">NiSourceTexture</a></span> objects.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
