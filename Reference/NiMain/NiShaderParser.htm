<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiShaderParser</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
                                                                                                      WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiShaderParser</p>

<p class="NDLRefParentage">: public <span><a href=
"NiRefObject.htm">NiRefObject</a></span></p>

<p class="NDLRefHeaderFile">&lt;NiShaderParser.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>The <span class="NDLSystemFont">NiShader</span>Parser provides
a platform-independent interface for parsing shader source files
and producing binary compiled versions of those shaders.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberDescription">No constructor is defined for
NiShaderParser.</p>

<p class="NDLRefHead1">Defined Callback Function Types</p>

<p class="NDLRefMemberFunction">typedef NiShaderParser*
(*NISHADERPARSER_CLASSCREATIONCALLBACK)()</p>

<p class="NDLRefMemberDescription">This function will be called
when the <span class=
"NDLSystemFont">NiShaderFactory::LoadAndRunParserLibrary</span>
function is called. The function should return a new instance of
a particular NiShaderParser subclass.</p><a name="Static_Members"
id="Static_Members"></a>

<p class="NDLRefHead1">Supported Static Member Functions</p>

<p class="NDLRefMemberFunction">static void
AddParserCallback(const char* pcName,
NISHADERPARSER_CLASSCREATIONCALLBACK pkCallback)</p>

<p class="NDLRefMemberDescription">Add shader parser create
function. Used by SDM init chain. Parser names must be unique.
This function will replace the callback if the parser name
already exists.</p>

<p class="NDLRefMemberFunction">static void RemoveParserCallback(
NISHADERPARSER_CLASSCREATIONCALLBACK pkCallback)</p>

<p class="NDLRefMemberDescription">Remove shader parser create
function. Used by SDM shutdown chain.</p>

<p class="NDLRefMemberFunction">static unsigned int
GetNumParserCallbacks()</p>

<p class="NDLRefMemberDescription">Return the total number of
parser creation functions.</p>

<p class="NDLRefMemberFunction">static const char*
GetParserName(unsigned int uiIdx)</p>

<p class="NDLRefMemberDescription">Returns the name identifier
for a particular create callback.</p>

<p class="NDLRefMemberFunction">static
NISHADERPARSER_CLASSCREATIONCALLBACK GetParserCallback( unsigned
int uiIdx);</p>

<p class="NDLRefMemberDescription">Returns a callback.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">virtual bool ParseFiles(const
char* pcFile, unsigned int&amp; uiCount,
NiTObjectArray&lt;NiFixedString&gt;* pkFileNames = NULL) = 0</p>

<p class="NDLRefMemberDescription">Parse a single file. Returns
true if it was successful. The number of generated files is
returned in uiCount. If non-NULL, pkFileNames will be filled with
the generated filenames.</p>

<p class="NDLRefMemberFunction">virtual void ParseAllFiles(const
char* pszDirectory, bool bRecurseDirectories, unsigned int&amp;
uiCount, NiTObjectArray&lt;NiFixedString&gt;* pkFileNames = NULL)
= 0</p>

<p class="NDLRefMemberDescription">Parses all of the files in a
given directory (optionally recursing). The number of generated
files is returned in uiCount. If non-NULL, pkFileNames will be
filled with the generated filenames.</p>

<p class="NDLRefMemberFunction">virtual <a href=
"NiShader.htm">NiShader</a>* GetShader(<a href=
"NiRenderer.htm">NiRenderer</a>* pkRenderer, const char* pcName,
unsigned int uiImplementation) = 0</p>

<p class="NDLRefMemberDescription">Returns the shader of the
given <span class="NDLSystemFont">pcName</span>, using the
supplied implementation, <span class=
"NDLSystemFont">uiImplementation.</span> The base implementation
of the function will always return <span class=
"NDLSystemFont">NULL</span>. See the notes below.</p>

<p class="NDLRefMemberFunction">virtual unsigned int
GetNumSupportedMimeTypes() = 0</p>

<p class="NDLRefMemberDescription">Return the number of supported
mime types.</p>

<p class="NDLRefMemberFunction">virtual const char*
GetSupportedMimeType(unsigned int uiIdx) = 0</p>

<p class="NDLRefMemberDescription">Returns one of the supported
mime types.</p>

<p class="NDLRefMemberFunction">virtual const char*
GetOutputMimeType() = 0</p>

<p class="NDLRefMemberDescription">Returns the mime type for
files that this parser generates.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
