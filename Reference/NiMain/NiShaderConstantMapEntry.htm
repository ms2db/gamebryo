<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiShaderConstantMapEntry</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiShaderConstantMapEntry</p>

<p class="NDLRefParentage">: public <span><a href=
"NiRefObject.htm">NiRefObject</a></span></p>

<p class="NDLRefHeaderFile">
&lt;NiD3DShaderConstantMapEntry.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiShaderConstantMapEntry</span>
represents a single entry in an <a href=
"NiRefObject.htm"><span class=
"NDLSystemFont">NiShaderConstantMap</span></a> instance. This
class provides the ability to map a piece of data to a specific
shader register (or registers), and it the key component in the
data-driven approach to the shader system.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiShaderConstantMapEntry()</p>

<p class="NDLRefMemberFunction">NiShaderConstantMapEntry(const
<a href="NiFixedString.htm">NiFixedString</a>&amp; kKey, unsigned
int uiFlags, unsigned int uiExtra, unsigned int uiShaderRegister,
unsigned int uiRegisterCount, unsigned int uiDataSize = 0,
unsigned int uiDataStride = 0, void* pvDataSource = 0, bool
bCopyData = false)</p>

<p class="NDLRefMemberDescription">The default constructor
creates an uninitialized version of <span class=
"NDLSystemFont">NiShaderConstantMapEntry</span> (the class will
be initialized to a known state, but will effectively be
invalid). The other creates an instance initialized to the given
parameters.</p>

<p class="NDLRefHead1">Supported Static Member Functions</p>

<p class="NDLRefMemberFunction">static bool IsConstant(unsigned
int uiFlags)</p>

<p class="NDLRefMemberDescription">Returns <span class=
"NDLSystemFont">true</span> if the flags value is set for a
constant value, ie<span class="NDLSystemFont">((uiFlags &amp;
SCME_MAP_MASK) == SCME_MAP_CONSTANT)</span>.</p>

<p class="NDLRefMemberFunction">static bool IsDefined(unsigned
int uiFlags)</p>

<p class="NDLRefMemberDescription">Returns <span class=
"NDLSystemFont">true</span> if the flags value is set for a
pre-defined mapping value, ie<span class=
"NDLSystemFont">((uiFlags &amp; SCME_MAP_MASK) ==
SCME_MAP_DEFINED)</span>.</p>

<p class="NDLRefMemberFunction">static bool IsAttribute(unsigned
int uiFlags)</p>

<p class="NDLRefMemberDescription">Returns <span class=
"NDLSystemFont">true</span> if the flags value is set for an
extra-data based value from the <span class=
"NDLSystemFont">NiRenderObject</span> instance, ie<span class=
"NDLSystemFont">((uiFlags &amp; SCME_MAP_MASK) ==
SCME_MAP_ATTRIBUTE)</span>.</p>

<p class="NDLRefMemberFunction">static bool IsGlobal(unsigned int
uiFlags)</p>

<p class="NDLRefMemberDescription">Returns <span class=
"NDLSystemFont">true</span> if the flags value is set for a
global constant value, ie<span class="NDLSystemFont">((uiFlags
&amp; SCME_MAP_MASK) == SCME_MAP_GLOBAL)</span>.</p>

<p class="NDLRefMemberFunction">static bool IsOperator(unsigned
int uiFlags)</p>

<p class="NDLRefMemberDescription">Returns <span class=
"NDLSystemFont">true</span> if the flags value is set for an
operator based value, ie<span class="NDLSystemFont">((uiFlags
&amp; SCME_MAP_MASK) == SCME_MAP_OPERATOR)</span>.</p>

<p class="NDLRefMemberFunction">static bool IsBool(unsigned int
uiFlags)</p>

<p class="NDLRefMemberDescription">Returns <span class=
"NDLSystemFont">true</span> if the flags type is set to be a
boolean value, ie <span class="NDLSystemFont">((m_uiFlags &amp;
NiShaderAttributeDesc::ATTRIB_TYPE_MASK) ==
NiShaderAttributeDesc::ATTRIB_TYPE_BOOL)</span>.</p>

<p class="NDLRefMemberFunction">static bool IsString(unsigned int
uiFlags)</p>

<p class="NDLRefMemberDescription">Returns <span class=
"NDLSystemFont">true</span> if the flags type is set to be a
string value, ie <span class="NDLSystemFont">((m_uiFlags &amp;
NiShaderAttributeDesc::ATTRIB_TYPE_MASK) ==
NiShaderAttributeDesc::ATTRIB_TYPE_STRING)</span>.</p>

<p class="NDLRefMemberFunction">static bool
IsUnsignedInt(unsigned int uiFlags)</p>

<p class="NDLRefMemberDescription">Returns <span class=
"NDLSystemFont">true</span> if the flags type is set to be an
unsigned integer value, ie <span class=
"NDLSystemFont">((m_uiFlags &amp;
NiShaderAttributeDesc::ATTRIB_TYPE_MASK) ==
NiShaderAttributeDesc::ATTRIB_TYPE_UNSIGNEDINT)</span>.</p>

<p class="NDLRefMemberFunction">static bool IsFloat(unsigned int
uiFlags)</p>

<p class="NDLRefMemberDescription">Returns <span class=
"NDLSystemFont">true</span> if the flags type is set to be a
float value, ie <span class="NDLSystemFont">((m_uiFlags &amp;
NiShaderAttributeDesc::ATTRIB_TYPE_MASK) ==
NiShaderAttributeDesc::ATTRIB_TYPE_FLOAT)</span>.</p>

<p class="NDLRefMemberFunction">static bool IsPoint2(unsigned int
uiFlags)</p>

<p class="NDLRefMemberDescription">Returns <span class=
"NDLSystemFont">true</span> if the flags type is set to be a
point2 value, ie <span class="NDLSystemFont">((m_uiFlags &amp;
NiShaderAttributeDesc::ATTRIB_TYPE_MASK) ==
NiShaderAttributeDesc::ATTRIB_TYPE_POINT2)</span>.</p>

<p class="NDLRefMemberFunction">static bool IsPoint3(unsigned int
uiFlags)</p>

<p class="NDLRefMemberDescription">Returns <span class=
"NDLSystemFont">true</span> if the flags type is set to be a
point3 value, ie <span class="NDLSystemFont">((m_uiFlags &amp;
NiShaderAttributeDesc::ATTRIB_TYPE_MASK) ==
NiShaderAttributeDesc::ATTRIB_TYPE_POINT3)</span>.</p>

<p class="NDLRefMemberFunction">static bool IsPoint4(unsigned int
uiFlags)</p>

<p class="NDLRefMemberDescription">Returns <span class=
"NDLSystemFont">true</span> if the flags type is set to be a
point4 value, ie <span class="NDLSystemFont">((m_uiFlags &amp;
NiShaderAttributeDesc::ATTRIB_TYPE_MASK) ==
NiShaderAttributeDesc::ATTRIB_TYPE_POINT4)</span>.</p>

<p class="NDLRefMemberFunction">static bool IsMatrix3(unsigned
int uiFlags)</p>

<p class="NDLRefMemberDescription">Returns <span class=
"NDLSystemFont">true</span> if the flags type is set to be a
matrix3 (matrix 3x3) value, ie <span class=
"NDLSystemFont">((m_uiFlags &amp;
NiShaderAttributeDesc::ATTRIB_TYPE_MASK) ==
NiShaderAttributeDesc::ATTRIB_TYPE_MATRIX3)</span>.</p>

<p class="NDLRefMemberFunction">static bool IsMatrix4(unsigned
int uiFlags)</p>

<p class="NDLRefMemberDescription">Returns <span class=
"NDLSystemFont">true</span> if the flags type is set to be a
matrix4 (matrix 4x4) value, ie <span class=
"NDLSystemFont">((m_uiFlags &amp;
NiShaderAttributeDesc::ATTRIB_TYPE_MASK) ==
NiShaderAttributeDesc::ATTRIB_TYPE_MATRIX4)</span>.</p>

<p class="NDLRefMemberFunction">static bool IsColor(unsigned int
uiFlags)</p>

<p class="NDLRefMemberDescription">Returns <span class=
"NDLSystemFont">true</span> if the flags type is set to be a
color value, ie <span class="NDLSystemFont">((m_uiFlags &amp;
NiShaderAttributeDesc::ATTRIB_TYPE_MASK) ==
NiShaderAttributeDesc::ATTRIB_TYPE_COLOR)</span>.</p>

<p class="NDLRefMemberFunction">static bool IsTexture(unsigned
int uiFlags)</p>

<p class="NDLRefMemberDescription">Returns <span class=
"NDLSystemFont">true</span> if the flags type is set to be a
texture value, ie <span class="NDLSystemFont">((m_uiFlags &amp;
NiShaderAttributeDesc::ATTRIB_TYPE_MASK) ==
NiShaderAttributeDesc::ATTRIB_TYPE_TEXTURE)</span>.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">const <a href=
"NiFixedString.htm">NiFixedString</a>&amp; GetKey() const</p>

<p class="NDLRefMemberDescription">Returns the key.</p>

<p class="NDLRefMemberFunction">void SetKey(const <a href=
"NiFixedString.htm">NiFixedString</a>&amp; kKey)</p>

<p class="NDLRefMemberDescription">Sets the key to the given
k<span class="NDLSystemFont">Key</span>.</p>

<p class="NDLRefMemberFunction">unsigned int GetFlags() const</p>

<p class="NDLRefMemberDescription">Returns the complete flags
member.</p>

<p class="NDLRefMemberFunction">void SetFlags(unsigned int
uiFlags)</p>

<p class="NDLRefMemberDescription">Get and set the complete flags
member for the key.</p>

<p class="NDLRefMemberFunction">bool IsConstant() const</p>

<p class="NDLRefMemberFunction">bool IsDefined() const</p>

<p class="NDLRefMemberFunction">bool IsAttribute() const</p>

<p class="NDLRefMemberFunction">bool IsGlobal() const</p>

<p class="NDLRefMemberFunction">bool IsOperator() const</p>

<p class="NDLRefMemberDescription">These functions are the same
as their static counterparts, but they use the entry member
<span class="NDLSystemFont">m_uiFlags</span> as the value to
perform the check.</p>

<p class="NDLRefMemberFunction"><a href=
"NiShaderAttributeDesc.htm#AttributeType_Enumerations">NiShaderAttributeDesc::AttributeType</a>
GetAttributeType() const</p>

<p class="NDLRefMemberDescription">Returns the attribute type of
the entry.</p>

<p class="NDLRefMemberFunction"><a href=
"NiShaderAttributeDesc.htm#ObjectType_Enumerations">NiShaderAttributeDesc::ObjectType</a>
GetObjectType() const</p>

<p class="NDLRefMemberDescription">Returns the object type of the
entry.</p>

<p class="NDLRefMemberFunction">bool IsBool() const</p>

<p class="NDLRefMemberFunction">bool IsString() const</p>

<p class="NDLRefMemberFunction">bool IsUnsignedInt() const</p>

<p class="NDLRefMemberFunction">bool IsFloat() const</p>

<p class="NDLRefMemberFunction">bool IsPoint2() const</p>

<p class="NDLRefMemberFunction">bool IsPoint3() const</p>

<p class="NDLRefMemberFunction">bool IsPoint4() const</p>

<p class="NDLRefMemberFunction">bool IsMatrix3() const</p>

<p class="NDLRefMemberFunction">bool IsMatrix4() const</p>

<p class="NDLRefMemberFunction">bool IsColor() const</p>

<p class="NDLRefMemberFunction">bool IsTexture() const</p>

<p class="NDLRefMemberDescription">These functions are the same
as their static counterparts, but they use the entry member
<span class="NDLSystemFont">m_uiFlags</span> as the value to
perform the check.</p>

<p class="NDLRefMemberFunction">unsigned int GetExtra() const</p>

<p class="NDLRefMemberDescription">Returns the <span class=
"NDLSystemFont">m_uiExtra</span> member, which is used with
certain types to define additional (extra) information
needed.</p>

<p class="NDLRefMemberFunction">void SetExtra(unsigned int
uiExtra)</p>

<p class="NDLRefMemberDescription">Sets the <span class=
"NDLSystemFont">m_uiExtra</span><span class=
"NDLSystemFont">member</span>.</p>

<p class="NDLRefMemberFunction">unsigned int GetShaderRegister()
const</p>

<p class="NDLRefMemberDescription">Returns the shader register
the entry is slotted for.</p>

<p class="NDLRefMemberFunction">void SetShaderRegister(unsigned
int uiShaderRegister)</p>

<p class="NDLRefMemberDescription">Sets the shader register the
entry should be placed in to the given <span class=
"NDLSystemFont">uiShaderRegister</span>.</p>

<p class="NDLRefMemberFunction">unsigned int GetRegisterCount()
const</p>

<p class="NDLRefMemberDescription">Returns the number of shader
registers the entry will occupy.</p>

<p class="NDLRefMemberFunction">void SetRegisterCount(unsigned
int uiRegisterCount)</p>

<p class="NDLRefMemberDescription">Sets the number of shader
registers the entry should fill in to <span class=
"NDLSystemFont">uiRegisterCount</span>.</p>

<p class="NDLRefMemberFunction">const <a href=
"NiFixedString.htm">NiFixedString</a>&amp; GetVariableName()
const</p>

<p class="NDLRefMemberDescription">Returns the variable name for
the entry. Only necessary for use with shader programs in a
format (such as DirectX HLSL) that refer to variables by name
rather than by register.</p>

<p class="NDLRefMemberFunction">void SetVariableName(const
<a href="NiFixedString.htm">NiFixedString</a>&amp;
kVariableName)</p>

<p class="NDLRefMemberDescription">Sets the variable name for the
entry. Only necessary for use with shader programs in a format
(such as DirectX HLSL) that refer to variables by name rather
than by register.</p>

<p class="NDLRefMemberFunction">void GetRegisterInfo(unsigned
int&amp; uiShaderRegister, unsigned int&amp; uiRegisterCount,
<a href="NiFixedString.htm">NiFixedString</a>&amp; kVariableName)
const</p>

<p class="NDLRefMemberDescription">Retrieves the shader
register-relevant information the register and the register
count, and the variable name.</p>

<p class="NDLRefMemberFunction">void SetRegisterInfo(unsigned int
uiShaderRegister, unsigned int uiRegisterCount, const <a href=
"NiFixedString.htm">NiFixedString</a>&amp; kVariableName)</p>

<p class="NDLRefMemberDescription">Sets the shader
register-relevant information equivalent to calling <span class=
"NDLSystemFont">SetShaderRegister(uiShaderRegister)</span>,
<span class=
"NDLSystemFont">SetRegisterCount(uiRegisterCount)</span>, and
<span class=
"NDLSystemFont">SetVariableName(pcVariableName)</span>.</p>

<p class="NDLRefMemberFunction">unsigned int GetDataSize()
const</p>

<p class="NDLRefMemberDescription">Returns the size of the data
associated with the entry instance.</p>

<p class="NDLRefMemberFunction">unsigned int GetDataStride()
const</p>

<p class="NDLRefMemberDescription">Returns the stride of the data
associated with the entry instance.</p>

<p class="NDLRefMemberFunction">void* GetDataSource() const</p>

<p class="NDLRefMemberDescription">Returns a pointer to the data
associated with the entry instance.</p>

<p class="NDLRefMemberFunction">void GetData(unsigned int&amp;
uiDataSize, unsigned int&amp; uiDataStride, void*&amp;
pvDataSource) const</p>

<p class="NDLRefMemberDescription">Returns the size of, stride
of, and pointer to the data associated with the entry instance.
Equivalent to calling <span class=
"NDLSystemFont">GetDataSize</span>, <span class=
"NDLSystemFont">GetDataStride</span>, and <span class=
"NDLSystemFont">GetDataSource</span>.</p>

<p class="NDLRefMemberFunction">void SetData(unsigned int
uiDataSize, unsigned int uiDataStride, void* pvDataSource, bool
bCopyData)</p>

<p class="NDLRefMemberDescription">Sets the data information for
the entry. If <span class="NDLSystemFont">bCopyData</span> is
<span class="NDLSystemFont">true</span>, the entry will allocate
memory and store the data internally.</p>

<p class="NDLRefHead1">Notes</p>

<a name="Mapping_Type" id="Mapping_Type"></a><p class="NDLRefHead2">Mapping Enumerations</p>

<p><span class="NDLSystemFont">Mapping</span> defines the type of
mapping represented by the attribute. This value is found by
masking the <span class="NDLSystemFont">m_uiFlags</span> value
with the <span class="NDLSystemFont">SCME_MAP_MASK</span>
<span class="NDLSystemFont">value.</span> The following values
are defined in the enumeration:</p>

<!--(Table)=========================================================-->
<table>
    <thead>
        <tr>
            <th>Mapping</th>

            <th>Meaning</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><span class=
            "NDLSystemFont">SCME_MAP_CONSTANT</span></td>

            <td>Constant value.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCME_MAP_DEFINED</span></td>

            <td>Pre-defined value.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCME_MAP_ATTRIBUTE</span></td>

            <td>Custom attribute value.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCME_MAP_GLOBAL</span></td>

            <td>Global attribute value.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCME_MAP_OPERATOR</span></td>

            <td>Operator attribute value.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCME_MAP_MASK</span></td>

            <td>Used to mask <span class=
            "NDLSystemFont">m_uiFlags</span> to get the
            mapping.</td>
        </tr>
    </tbody>
</table>

<a name="OperatorType" id="OperatorType"></a><p class="NDLRefHead2">OperatorType</p>

<p><span class="NDLSystemFont">OperatorType</span> is an
enumerated that indicates a mathematical operation that should be
performed between two other entries in the constant map. This
allows for performing useful calculations that are required
per-object, but not per-vertex and thus don't need to be
performed in a vertex shader program. [<b>NOTE</b>: Currently
only a VERY limited set of operations is implemented.
Specifically, m4x4 * m4x4, m4x4 * point4, scalar * m4x4, and
scalar * point4.] These values are stored in the <span class=
"NDLSystemFont">m_uiExtra</span> member. There are three sections
to the operator type: <span class=
"NDLSystemFont">Operator</span>, <span class=
"NDLSystemFont">ResultModification</span>, and the <span class=
"NDLSystemFont">Entry Mask Enumerations</span>.</p>

<!--(Table)=========================================================-->
<table>
    <thead>
        <tr>
            <th>Operator</th>

            <th>Meaning</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><span class=
            "NDLSystemFont">SCME_OPERATOR_MULTIPLY</span></td>

            <td>Multiply entries.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCME_OPERATOR_DIVIDE</span></td>

            <td>Divide 1st entry by 2nd entry.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCME_OPERATOR_ADD</span></td>

            <td>Add entries.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCME_OPERATOR_SUBTRACT</span></td>

            <td>Subtract 2nd entry from 1st entry.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCME_OPERATOR_MASK</span></td>

            <td>Used to mask <span class=
            "NDLSystemFont">m_uiExtra</span> to get
            operator.</td>
        </tr>
    </tbody>
</table>

<!--(Table)=========================================================-->
<table>
    <thead>
        <tr>
            <th>ResultModification</th>

            <th>Meaning</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><span class=
            "NDLSystemFont">SCME_OPERATOR_RESULT_INVERSE</span></td>

            <td>Invert the result.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCME_OPERATOR_RESULT_TRANSPOSE</span></td>

            <td>Transpose the result.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCME_OPERATOR_RESULT_MASK</span></td>

            <td>Used to mask <span class=
            "NDLSystemFont">m_uiExtra</span> to get operator
            result modification.</td>
        </tr>
    </tbody>
</table>

<!--(Table)=========================================================-->
<table>
    <thead>
        <tr>
            <th>Entry Mask Enumerations</th>

            <th>Meaning</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><span class=
            "NDLSystemFont">SCME_OPERATOR_ENTRY1_MASK</span></td>

            <td>Mask for index of 1st entry.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCME_OPERATOR_ENTRY2_MASK</span></td>

            <td>Mask for index of 2nd entry.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCME_OPERATOR_ENTRY2_SHIFT</span></td>

            <td>Amount to shift 2nd entry index when 'OR'ing it
            into the <span class="NDLSystemFont">m_uiExtra</span>
            value.</td>
        </tr>
    </tbody>
</table>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
