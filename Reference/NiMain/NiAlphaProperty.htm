<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiAlphaProperty</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiAlphaProperty</p>

<p class="NDLRefParentage">: public <a href=
"NiProperty.htm">NiProperty</a></p>

<p class="NDLRefHeaderFile">&lt;NiAlphaProperty.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiAlphaProperty</span> is a
rendering property that controls the various parameters
associated with alpha blending, including enabling and disabling
it and setting the source and destination blending functions. The
property also affects alpha testing and accumulation, which can
increase performance and alleviate the need to sort alpha-blended
objects.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiAlphaProperty()</p>

<p class="NDLRefMemberDescription">This default constructor
constructs a property with alpha blending and alpha testing
turned off, the source blending function set to <span class=
"NDLSystemFont">ALPHA_SRCALPHA</span>, the destination blending
function set to <span class=
"NDLSystemFont">ALPHA_INVSRCALPHA</span>, the alpha testing
function set to <span class="NDLSystemFont">TEST_ALWAYS</span>,
and the reference alpha value set to <span class=
"NDLSystemFont">0</span>.</p>

<p class="NDLRefHead1">Static Member Functions</p>

<p class="NDLRefMemberFunction">static int GetType()</p>

<p class="NDLRefMemberFunction">static NiAlphaProperty*
GetDefault()</p>

<p class="NDLRefMemberDescription">See <span class=
"NDLSystemFont"><a href="NiProperty.htm">NiProperty</a></span>
for details on these non-virtual functions.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">bool GetAlphaBlending() const</p>

<p class="NDLRefMemberFunction">void SetAlphaBlending(bool
bAlpha)</p>

<p class="NDLRefMemberDescription">Retrieve and set the value of
the alpha blending enable flag. Setting this flag to <span class=
"NDLSystemFont">true</span> enables alpha blending in the subtree
to which the property is attached, while setting the flag to
<span class="NDLSystemFont">false</span> disables alpha
blending.</p>

<p class="NDLRefMemberFunction"><a href=
"NiAlphaProperty.htm#Alpha_Blending_Functions">AlphaFunction</a>
GetSrcBlendMode() const</p>

<p class="NDLRefMemberFunction">void SetSrcBlendMode(<a href=
"NiAlphaProperty.htm#Alpha_Blending_Functions">AlphaFunction</a>
eSrcBlend)</p>

<p class="NDLRefMemberDescription">Retrieve and set the source
alpha blending function. This function determines the scaling
factors that are multiplied by the pixel colors being written by
the subtree to which the property is attached. The details of
these functions are given in the notes below.</p>

<p class="NDLRefMemberFunction"><a href=
"NiAlphaProperty.htm#Alpha_Blending_Functions">AlphaFunction</a>
GetDestBlendMode() const</p>

<p class="NDLRefMemberFunction">void SetDestBlendMode(<a href=
"NiAlphaProperty.htm#Alpha_Blending_Functions">AlphaFunction</a>
eDestBlend)</p>

<p class="NDLRefMemberDescription">Retrieve and set the
destination alpha blending function. This function determines the
scaling factors that are multiplied by the existing framebuffer
pixel colors being overwritten by the subtree to which the
property is attached. The details of these functions are given in
the notes below.</p>

<p class="NDLRefMemberFunction">bool GetAlphaTesting() const</p>

<p class="NDLRefMemberFunction">void SetAlphaTesting(bool
bAlpha)</p>

<p class="NDLRefMemberDescription">Retrieve and set the value of
the alpha testing enable flag. Setting this flag to <span class=
"NDLSystemFont">true</span> enables alpha testing in the subtree
to which the property is attached, while setting the flag to
<span class="NDLSystemFont">false</span> disables alpha
testing.</p>

<p class="NDLRefMemberFunction"><a href=
"NiAlphaProperty.htm#Alpha_Testing_Functions">TestFunction</a>
GetTestMode() const</p>

<p class="NDLRefMemberFunction">void SetTestMode(<a href=
"NiAlphaProperty.htm#Alpha_Testing_Functions">TestFunction</a>
eTestFunc)</p>

<p class="NDLRefMemberDescription">Retrieve and set the alpha
testing function. This function determines how the reference
value is compared to the source alpha value to determine whether
or not to rasterize the pixel. The details of these functions are
given in the notes below.</p>

<p class="NDLRefMemberFunction">unsigned char GetTestRef()
const</p>

<p class="NDLRefMemberFunction">void SetTestRef(unsigned char
ucRef)</p>

<p class="NDLRefMemberDescription">Retrieve and set the reference
value for alpha testing. If alpha testing is enabled, this value
will be compared with the source alpha value as described in the
notes below to determine whether the pixel is drawn or not.</p>

<p class="NDLRefMemberFunction">bool GetNoSorter() const</p>

<p class="NDLRefMemberFunction">void SetNoSorter(bool
bNoSort)</p>

<p class="NDLRefMemberDescription">Retrieve and set the "no sort"
flag of the alpha property. Objects that have an <span class=
"NDLSystemFont">NiAlphaProperty</span> with this flag set to
<span class="NDLSystemFont">true</span> may be drawn immediately
upon registration (i.e. not sorted) by <span class=
"NDLSystemFont"><a href=
"NiAlphaAccumulator.htm">NiAlphaAccumulator</a></span>, depending
on the settings of the accumulator. Other accumulators may also
obey this flag. See the documentation for the particular
accumulator to determine whether or not it uses this flag.</p>

<p class="NDLRefMemberFunction">bool IsEqualFast(const
NiAlphaProperty&amp; kProp) const</p>

<p class="NDLRefMemberDescription">See <span class=
"NDLSystemFont"><a href="NiProperty.htm">NiProperty</a></span>
for details on this non-virtual function.</p>

<p class="NDLRefHead1">Notes</p>

<a name="Alpha_Blending_Formula" id="Alpha_Blending_Formula"></a><p class="NDLRefHead2">Alpha Blending Formula</p>

<p>Assuming the pixel passes the alpha testing function, the
formula used when determining the color of a framebuffer pixel
following the write of an alpha blended pixel is as follows:</p>

<div class="NDLFigureContainer">
    <img src="./images/image002.jpg" width="438" height="30">
</div>

<p>Where C<sub>Dest</sub> is the current pixel color in the
framebuffer, and C<sub>Source</sub> is the incoming color of the
pixel. The return values of the source and destination alpha
blending functions are multiplied component-wise with the source
and destination color values, respectively (as shown in the
formula).</p>

<a name="Alpha_Blending_Functions" id="Alpha_Blending_Functions"></a><p class="NDLRefHead2">Alpha Blending Functions</p>

<p>The following blending functions are supported by Gamebryo
(although not all renderers will be able to support all
functions, or all combinations of source and destination
functions. See the <a href="NiRenderer.htm">renderer</a>
documentation for details); all of the following constants are in
the scope of <span class="NDLSystemFont">NiAlphaProperty</span>,
and must be scoped accordingly. In the following table,
<span class="NDLSystemFont">RS</span> , <span class=
"NDLSystemFont">GS</span> , <span class="NDLSystemFont">BS</span>
and <span class="NDLSystemFont">AS</span> are the source red,
green, blue and alpha values respectively; <span class=
"NDLSystemFont">RD</span> , <span class="NDLSystemFont">GD</span>
, <span class="NDLSystemFont">BD</span> and <span class=
"NDLSystemFont">AD</span> are the destination red, green, blue
and alpha values, respectively. Note that not all renderers can
support destination alpha (<span class="NDLSystemFont">AD</span>)
on all hardware. For the purposes of this table, colors and alpha
values are assumed to be between <span class=
"NDLSystemFont">0.0</span> and <span class=
"NDLSystemFont">1.0</span>.</p>

<!--(Table)=========================================================-->
<table>
    <thead>
        <tr>
            <th>Blending Function</th>

            <th>Value</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><span class="NDLSystemFont">ALPHA_ONE</span></td>

            <td><span class="NDLSystemFont">(1, 1, 1)</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">ALPHA_ZERO</span></td>

            <td><span class="NDLSystemFont">(0, 0, 0)</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">ALPHA_SRCCOLOR</span></td>

            <td><span class="NDLSystemFont">(RS, GS,
            BS)</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">ALPHA_INVSRCCOLOR</span></td>

            <td><span class="NDLSystemFont">(1 - RS, 1 - GS, 1 -
            BS)</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">ALPHA_DESTCOLOR</span></td>

            <td><span class="NDLSystemFont">(RD, GD,
            BD)</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">ALPHA_INVDESTCOLOR</span></td>

            <td><span class="NDLSystemFont">(1 - RD, 1 - GD, 1 -
            BD)</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">ALPHA_SRCALPHA</span></td>

            <td><span class="NDLSystemFont">(AS, AS,
            AS)</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">ALPHA_INVSRCALPHA</span></td>

            <td><span class="NDLSystemFont">(1 - AS, 1 - AS, 1 -
            AS)</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">ALPHA_DESTALPHA</span></td>

            <td><span class="NDLSystemFont">(AD, AD,
            AD)</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">ALPHA_INVDESTALPHA</span></td>

            <td><span class="NDLSystemFont">(1 - AD, 1 - AD, 1 -
            AD)</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">ALPHA_SRCALPHASAT</span></td>

            <td><span class="NDLSystemFont">(f, f, f, 1) &rarr; f
            = min (AS, 1 - AD)</span></td>
        </tr>
    </tbody>
</table>

<a name="Alpha_Testing_Functions" id="Alpha_Testing_Functions"></a><p class="NDLRefHead2">Alpha Testing Functions</p>

<p>The following testing functions are supported by Gamebryo
(although not all renderers will be able to support all
functions); all of the following constants are in the scope of
<span class="NDLSystemFont">NiAlphaProperty</span>, and must be
scoped accordingly. In the following table, <span class=
"NDLSystemFont">AS</span> is the source alpha value, and
<span class="NDLSystemFont">AR</span> is the reference alpha
value. If the respective test returns true, then the pixel is
rasterized.</p>

<!--(Table)=========================================================-->
<table>
    <thead>
        <tr>
            <th>Testing Function</th>

            <th>Value</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><span class=
            "NDLSystemFont">TEST_ALWAYS</span></td>

            <td>Always <span class=
            "NDLSystemFont">true</span></td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">TEST_LESS</span></td>

            <td><span class="NDLSystemFont">AS &lt;
            AR</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">TEST_EQUAL</span></td>

            <td><span class="NDLSystemFont">AS = AR</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">TEST_LESSEQUAL</span></td>

            <td><span class="NDLSystemFont">AS &le;
            AR</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">TEST_GREATER</span></td>

            <td><span class="NDLSystemFont">AS &gt;
            AR</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">TEST_NOTEQUAL</span></td>

            <td><span class="NDLSystemFont">AS &ne;
            AR</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">TEST_GREATEREQUAL</span></td>

            <td><span class="NDLSystemFont">AS &ge;
            AR</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">TEST_NEVER</span></td>

            <td>Never <span class=
            "NDLSystemFont">true</span></td>
        </tr>
    </tbody>
</table>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
