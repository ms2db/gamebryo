<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiMetricsLayer</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiMetricsLayer</p>

<p class="NDLRefHeaderFile">&lt;NiMetricsLayer.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiMetricsLayer</span> is an
entirely static class that functions as the routing layer through
which all of the instrumented metrics probes in the engine and
applications flow. It allows for single instrumented lines in the
codebase to be passed dynamically to multiple output modules,
determined at runtime. This is done by the end application
initially adding the output modules it desires (such as output to
XML or output to <span class=
"NDLSystemFont">NiVisualTracker</span>). Then, all subsequent
instrumented calls will be passed to those output modules. For a
list of output modules, see <span class="NDLSystemFont"><a href=
"../../Reference/NiMetricsOutput/NiMetricsOutput_Overview.htm">NiMetricsOutput</a></span>.
Additionally, not all output modules implement all of the
instrumentation functions. Which ones they do and do not is
listed in their own documentation.</p>

<p>To both make it easier to find instrumentation as well as to
make it easier to remove instrumentation in non-metrics builds,
the interface to <span class=
"NDLSystemFont">NiMetricsLayer</span> is wrapped in a series of
macros that are defined to be nothing in non-metrics builds. Both
the macro and the function it calls will be listed together. In
the Gamebryo codebase, only the macro interface is used. The
functions and macros below are grouped by their usage.</p>

<p class="NDLRefHead1">Application-Level Macros and Static
Functions</p>

<p class="NDLRefMemberFunction">NIMETRICS_ADDMODULE(pkModule)</p>

<p class="NDLRefMemberFunction">static void
AddOutputModule(NiMetricsOutputModule* pkMod);</p>

<p class="NDLRefMemberDescription">Add an output module to the
<span class="NDLSystemFont">NiMetricsLayer</span>. This is used
at the final application level to set a particular module to
receive output. It is stored in a smart pointer.</p>

<p class="NDLRefMemberFunction">
NIMETRICS_REMOVEMODULE(pkModule)</p>

<p class="NDLRefMemberFunction">static void
RemoveOutputModule(NiMetricsOutputModule* pkMod);</p>

<p class="NDLRefMemberDescription">Remove an output module from
the <span class="NDLSystemFont">NiMetricsLayer</span> so that it
no longer will generate output. Since the module is stored in a
smart pointer internally, if it is desired to access the module
after being removed, it should be locally held in a smart pointer
and not in a normal pointer to avoid having the memory cleaned up
by the remove function and having the pointer point at bogus
data.</p>

<p class="NDLRefHead1">Instrumentation Macros and Static
Functions</p>

<p class="NDLRefMemberFunction">NIMETRICS_ADDVALUE(pcName,
fValue)</p>

<p class="NDLRefMemberFunction">static void AddValue(const char*
pcName, float fValue);</p>

<p class="NDLRefMemberDescription">This is the most common
instrumentation function. It stores a value for a particular
metric name.</p>

<p class="NDLRefMemberFunction">NIMETRICS_STARTTIMER(kTimer)</p>

<p class="NDLRefMemberFunction">static void
StartTimer(NiMetricsTimer&amp; kTimer);</p>

<p class="NDLRefMemberDescription">Informs the output modules
that a timer is starting. The macro additionally calls the
<span class="NDLSystemFont">Start()</span> function on the
timer.</p>

<p class="NDLRefMemberFunction">NIMETRICS_ENDTIMER(kTimer)</p>

<p class="NDLRefMemberFunction">static void
EndTimer(NiMetricsTimer&amp; kTimer);</p>

<p class="NDLRefMemberDescription">Informs the output modules
that a timer is stopping. The macro additionally calls the
<span class="NDLSystemFont">Stop()</span> function on the
timer.</p>

<p class="NDLRefMemberFunction">NIMETRICS_ADDEVENT(pcName,
fValue)</p>

<p class="NDLRefMemberFunction">static void
AddImmediateEvent(const char* pcName, float fValue);</p>

<p class="NDLRefMemberDescription">Used for creating an immediate
event (such as a frame marker) with a particular name and
value.</p>

<p class="NDLRefMemberFunction">NIMETRICS_UPDATE()</p>

<p class="NDLRefMemberFunction">static void Update()</p>

<p class="NDLRefMemberDescription">Informs the output modules to
update themselves. This is typically where the bulk of the work
is done, such as writing to a log file.</p>

<p class="NDLRefMemberFunction">NIMETRICS_EVAL(statement)</p>

<p class="NDLRefMemberDescription">This convenience macro will
execute the statement within the parenthesis if metrics are
enabled and will compile it out if they are not.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
