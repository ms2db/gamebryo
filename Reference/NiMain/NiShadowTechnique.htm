<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiShadowTechnique</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiShadowTechnique</p>

<p class="NDLRefParentage">: public <a href=
"../../Reference/NiSystem/NiMemObject.htm">NiMemObject</a></p>

<p class="NDLRefHeaderFile">&lt;NiShadowTechnique.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>This class is used by the shadowing system to specify the
shader code that should be used when rendering a object to a
shadow map and the shader code that should be used when reading
from a shadow map while rendering an object to the final
scene.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiShadowTechnique(const
NiFixedString&amp; kName, const NiFixedString kReadFragmentName,
const NiFixedString kWriteFragmentName kWriteFragmentName, bool
bUseCubeMapForPointLight = false)</p>

<p class="NDLRefMemberDescription">This constructor takes in the
name for the shadow technique, the name shader fragment name for
all the read fragments, the shader fragment name for all the
write fragments, and a boolean that specifies if the shadow
technique uses cube maps for point lights.</p>

<p class="NDLRefMemberFunction">NiShadowTechnique(const
NiFixedString&amp; kName, const NiFixedString
kDirReadFragmentName, const NiFixedString kPointReadFragmentName,
const NiFixedString kSpotReadFragmentName, const NiFixedString
kDirWriteFragmentName, const NiFixedString
kPointWriteFragmentName, const NiFixedString
kSpotWriteFragmentName,bool bUseCubeMapForPointLight = false)</p>

<p class="NDLRefMemberDescription">This constructor takes in the
name for the shadow technique, the name of the read shader
fragments name for each light type, the write shader fragments
for each light type, and a boolean that specifies if the shadow
technique uses cube maps for point lights.</p>

<p class="NDLRefHead1">Supported Virtual Member Functions</p>

<p class="NDLRefMemberFunction">virtual void
AppendPostProcessRenderClicks(<a href=
"NiShadowMap.htm">NiShadowMap</a>* pkShadowMap, <a href=
"NiShadowClickGenerator.htm">NiShadowClickGenerator</a>*
pkClickGenerator)</p>

<p class="NDLRefMemberDescription">This is a virtual function
that is used to provide shadow techniques a way of supplying in
post process rendering operations that need to take place on a
shadow map. This method does nothing for <a href=
"NiShadowTechnique.htm"><span class=
"NDLSystemFont">NiShadowTechnique</span></a>.</p>

<p class="NDLRefMemberFunction">virtual void
PrepareShadowMap(<a href="NiShadowMap.htm">NiShadowMap</a>*
pkShadowMap)</p>

<p class="NDLRefMemberDescription">This is a virtual function
that is used to provide shadow techniques a way of adjusting a
shadow map object's properties in a way that is best suited for
that technique. This method sets the filter mode for all shadow
maps to <span class="NDLSystemFont">FILTER_NEAREST</span> for
<a href="NiShadowTechnique.htm"><span class=
"NDLSystemFont">NiShadowTechnique</span></a>.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">const NiFixedString&amp;
GetName()</p>

<p class="NDLRefMemberDescription">This function returns the name
of the shadow technique.</p>

<p class="NDLRefMemberFunction">const NiFixedString&amp;
GetReadFragmentName(<a href=
"NiStandardMaterial.htm">NiStandardMaterial::LightType</a>
eType)</p>

<p class="NDLRefMemberFunction">const NiFixedString&amp;
GetWriteFragmentName(<a href=
"NiStandardMaterial.htm">NiStandardMaterial::LightType</a>
eType)</p>

<p class="NDLRefMemberDescription">These functions return the
read and write shader fragment names of the request light
type.</p>

<p class="NDLRefMemberFunction">unsigned short GetActiveTechniqueSlot()</p>

<p class="NDLRefMemberFunction">void SetActiveTechniqueSlot()</p>

<p class="NDLRefMemberDescription">These functions get and set
the active shadow technique slot for the shadow technique.</p>

<p class="NDLRefMemberFunction">unsigned short GetTechniqueID()</p>

<p class="NDLRefMemberFunction">void SetTechniqueID(unsigned short usID)</p>

<p class="NDLRefMemberDescription">These functions get and set
the unique shadow technique ID for the shadow technique.</p>

<p class="NDLRefMemberFunction">bool GetUseCubeMapForPointLight()</p>

<p class="NDLRefMemberFunction">void SetUseCubeMapForPointLight()</p>

<p class="NDLRefMemberDescription">These functions get and set
the use cube map for point light state for the shadow technique.
This state is used to inform <a href=
"NiShadowClickGenerator.htm"><span class=
"NDLSystemFont">NiShadowClickGenerator</span></a> objects of how
it should handle point lights for the shadow technique.</p>

<p class="NDLRefMemberFunction"><a href="NiTexture__FormatPrefs.htm">NiTexture::FormatPrefs</a>&amp; GetTextureFormatPrefs(<a href="NiStandardMaterial.htm">NiStandardMaterial::LightType</a> eType)</p>

<p class="NDLRefMemberFunction">void SetTextureFormatPrefs(<a href="NiStandardMaterial.htm">NiStandardMaterial::LightType</a> eType, <a href=
"NiTexture__FormatPrefs.htm">NiTexture::FormatPrefs</a>&amp; pkPrefs)</p>

<p class="NDLRefMemberDescription">These functions get and set the texture format preferences of a given light class (specified by eType) for the shadow technique. This
preference is used when creating shadow maps so the shadow technique will be used on a texture that fits its requirements.</p>

<!-- depth bias -->
<p class="NDLRefMemberFunction">void SetDefaultDepthBias(<a href="NiStandardMaterial.htm">NiStandardMaterial::LightType</a> eType, bool bRenderBackfaces, float fDepthBias)</p>

<p class="NDLRefMemberFunction">float GetDefaultDepthBias(<a href="NiStandardMaterial.htm">NiStandardMaterial::LightType</a> eType, bool bRenderBackfaces) const</p>

<p class="NDLRefMemberDescription">These functions set and get the default depth bias for the shadow technique based on the light type and the render back faces state.</p>

<!-- filtering mode -->
<p class="NDLRefMemberFunction">void SetFilterMode(<a href="NiStandardMaterial.htm">NiStandardMaterial::LightType</a> eType, <a href="NiTexturingProperty.htm">NiTexturingProperty::FilterMode</a> eFilterMode)</p>

<p class="NDLRefMemberFunction"><a href="NiTexturingProperty.htm">NiTexturingProperty::FilterMode</a> GetFilterMode(<a href="NiStandardMaterial.htm">NiStandardMaterial::LightType</a> eType) const</p>

<p class="NDLRefMemberDescription">These functions set and get the texture filtering mode for the shadow technique based on the light type.  The default filtering mode is NEAREST.</p>

<!-- guard band -->
<p class="NDLRefMemberFunction">void SetGuardBandSize(unsigned int uiSize);</p>

<p class="NDLRefMemberFunction">unsigned int GetGuardBandSize() const;</p>

<p class="NDLRefMemberDescription">These functions set and get the guard band size for the shadow technique, which will only be used for when PSSM is enabled.</p>

<!-- clamping mode -->
<p class="NDLRefMemberFunction">void SetClampMode(<a href="NiStandardMaterial.htm">NiStandardMaterial::LightType</a> eType, <a href="NiTexturingProperty.htm">NiTexturingProperty::ClampMode</a> eClampMode)</p>

<p class="NDLRefMemberFunction"><a href="NiTexturingProperty.htm">NiTexturingProperty::ClampMode</a> GetClampMode(<a href="NiStandardMaterial.htm">NiStandardMaterial::LightType</a> eType)</p>

<p class="NDLRefMemberDescription">These functions set and get the texture address clamping mode for the shadow technique based on the light type.</p>

<!-- depth format -->
<p class="NDLRefMemberFunction">void SetDepthFormat(<a href="NiStandardMaterial.htm">NiStandardMaterial::LightType</a> eType, const <a href="NiPixelFormat.htm">NiPixelFormat</a>* pkDepthFormat)</p>

<p class="NDLRefMemberFunction">const <a href="NiPixelFormat.htm">NiPixelFormat</a>* GetDepthFormat(<a href="NiStandardMaterial.htm">NiStandardMaterial::LightType</a> eType) const</p>

<p class="NDLRefMemberDescription">These functions get and set the pixel format required by the
<span class="NDLSystemFont"><a href="NiDepthStencilBuffer.htm">NiDepthStencilBuffer</a></span>
associated with the <span class="NDLSystemFont"><a href="NiShadowRenderClick.htm">NiShadowRenderClick</a></span> object used by
<span class="NDLSystemFont"><a href="NiShadowMap.htm">NiShadowMap</a></span> objects that use this technique. If the pixel format
is set to NULL, any compatible depth/stencil buffer may be used.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
