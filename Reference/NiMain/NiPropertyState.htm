<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiPropertyState</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiPropertyState</p>

<p class="NDLRefParentage">: public <a href=
"NiRefObject.htm">NiRefObject</a></p>

<p class="NDLRefHeaderFile">&lt;NiPropertyState.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiPropertyState</span> is an
encapsulation of a set of <span class="NDLSystemFont"><a href=
"NiProperty.htm">NiProperty</a></span> objects, and is used by
the renderers and the scene graph to represent the rendering
state at a given <span class="NDLSystemFont"><a href=
"NiAVObject.htm">NiAVObject</a></span>. <span class=
"NDLSystemFont">NiPropertyState</span> is generally a Gamebryo
internal-only object, and should not normally be specifically
used in an application. However, if an application wants to
create its own sorter, it may be required to use <span class=
"NDLSystemFont">NiPropertyState</span> objects. See the
"<a href="../../Learn/Demos/StandardMaterial_Demo_Overview.htm">StandardMaterial</a>"
demo for an example of how to create your own sorter.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiPropertyState()</p>

<p class="NDLRefMemberDescription">This default constructor
creates an <span class="NDLSystemFont">NiPropertyState</span>
with all properties set to the default for their class. Note that
these property pointers will not be <span class=
"NDLSystemFont">NULL</span>&mdash;they will all be pointers to
valid default properties.</p>

<p class="NDLRefMemberFunction">NiPropertyState(const
NiPropertyState&amp; kState)</p>

<p class="NDLRefMemberDescription">This copy constructor creates
an exact copy of the given property state. The properties
themselves are not copied&mdash;only the pointers to them. As a
result, both property states will point to the same
properties.</p>

<p class="NDLRefHead1">Operators</p>

<p class="NDLRefMemberFunction">NiPropertyState&amp;
operator=(const NiPropertyState&amp; kState)</p>

<p class="NDLRefMemberDescription">This assignment operator is
analogous in semantics to the copy constructor above.</p>

<p class="NDLRefMemberFunction"><a href=
"NiProperty.htm">NiPropertyPtr</a>&amp; operator[](int iType)</p>

<p class="NDLRefMemberDescription">This operator retrieves the
property in the state of a given property type. The index should
be the integer property type that can be gotten using
<span class="NDLSystemFont">GetType</span> function of each
<span class="NDLSystemFont"><a href=
"NiProperty.htm">NiProperty</a></span> subclass, or used directly
from the enumerated type declared in <span class=
"NDLSystemFont"><a href=
"NiProperty.htm">NiProperty</a></span>.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">void Reset()</p>

<p class="NDLRefMemberDescription">Resets the property pointers
in the state to the defaults for each property class.</p>

<p class="NDLRefMemberFunction">void SetProperty(<span class=
"NDLSystemFont"><a href="NiProperty.htm">NiProperty</a></span>*
pkProp)</p>

<p class="NDLRefMemberDescription">Inserts the given property
into the state, overwriting the existing property in the state
that corresponds to the new property's type. For example, passing
an <span class="NDLSystemFont">NiTexturingProperty</span> to this
function will replace the existing <span class=
"NDLSystemFont">NiTexturingProperty</span> in the state. Passing
<span class="NDLSystemFont">NULL</span> to this function will
cause it to return without taking any action.</p>

<p class="NDLRefMemberFunction">void GetProperties(<a href=
"NiProperty.htm">NiProperty</a>* apkProps[<a href=
"NiProperty.htm">NiProperty</a>::MAX_TYPES])</p>

<p class="NDLRefMemberDescription">Fills the supplied array
(application must ensure that there are at least <span class=
"NDLSystemFont"><a href=
"NiProperty.htm">NiProperty</a>::MAX_TYPES</span> elements in the
array) with the current set of properties, one for each class of
<span class="NDLSystemFont"><a href=
"NiProperty.htm">NiProperty</a></span>. Element <span class=
"NDLSystemFont">i</span> in the array will contain the pointer to
an <span class="NDLSystemFont"><a href=
"NiProperty.htm">NiProperty</a></span> whose type ID
(<span class="NDLSystemFont">NiPropertySubclass::GetType</span>
where <span class="NDLSystemFont">NiPropertySubclass</span> is a
given subclass of <span class="NDLSystemFont"><a href=
"NiProperty.htm">NiProperty</a></span>) is equal to <span class=
"NDLSystemFont">i</span>.</p>

<p class="NDLRefMemberFunction">void SwapProperties(<a href=
"NiTList.htm">NiPropertyList</a>&amp; kProplist)</p>

<p class="NDLRefMemberDescription">Takes a list of <span class=
"NDLSystemFont"><a href="NiProperty.htm">NiProperty</a></span>
objects and swaps each property on the list with the property of
the same type in the state. The list should not contain more than
one property of any single type. If this rule is followed, then
two sequential calls to this function with the same list will
result in the list and property state being unchanged. As a
result, this function may be used to "push" and "pop" properties
from the property state.</p>

<p class="NDLRefMemberFunction"><span class=
"NDLSystemFont"><a href=
"NiAlphaProperty.htm">NiAlphaProperty</a></span>* GetAlpha()
const</p>

<p class="NDLRefMemberDescription">Retrieves the current
<span class="NDLSystemFont"><a href=
"NiAlphaProperty.htm">NiAlphaProperty</a></span> from the
property state. This function will never return <span class=
"NDLSystemFont">NULL</span>.</p>

<p class="NDLRefMemberFunction"><span class=
"NDLSystemFont"><a href=
"NiDitherProperty.htm">NiDitherProperty</a></span>* GetDither()
const</p>

<p class="NDLRefMemberDescription">Retrieves the current
<span class="NDLSystemFont"><a href=
"NiDitherProperty.htm">NiDitherProperty</a></span> from the
property state. This function will never return <span class=
"NDLSystemFont">NULL</span>.</p>

<p class="NDLRefMemberFunction"><span class=
"NDLSystemFont"><a href=
"NiFogProperty.htm">NiFogProperty</a></span>* GetFog() const</p>

<p class="NDLRefMemberDescription">Retrieves the current
<span class="NDLSystemFont"><a href=
"NiFogProperty.htm">NiFogProperty</a></span> from the property
state. This function will never return <span class=
"NDLSystemFont">NULL</span>.</p>

<p class="NDLRefMemberFunction"><span class=
"NDLSystemFont"><a href=
"NiMaterialProperty.htm">NiMaterialProperty</a></span>*
GetMaterial() const</p>

<p class="NDLRefMemberDescription">Retrieves the current
<span class="NDLSystemFont"><a href=
"NiMaterialProperty.htm">NiMaterialProperty</a></span> from the
property state. This function will never return <span class=
"NDLSystemFont">NULL</span>.</p>

<p class="NDLRefMemberFunction"><span class=
"NDLSystemFont"><a href=
"NiRendererSpecificProperty.htm">NiRendererSpecificProperty</a></span>*
GetRendererSpecific() const</p>

<p class="NDLRefMemberDescription">Retrieves the current
<span class="NDLSystemFont"><a href=
"NiRendererSpecificProperty.htm">NiRendererSpecificProperty</a></span>
from the property state. This function will never return
<span class="NDLSystemFont">NULL</span>.</p>

<p class="NDLRefMemberFunction"><span class=
"NDLSystemFont"><a href=
"NiShadeProperty.htm">NiShadeProperty</a></span>* GetShade()
const</p>

<p class="NDLRefMemberDescription">Retrieves the current
<span class="NDLSystemFont"><a href=
"NiShadeProperty.htm">NiShadeProperty</a></span> from the
property state. This function will never return <span class=
"NDLSystemFont">NULL</span>.</p>

<p class="NDLRefMemberFunction"><span class=
"NDLSystemFont"><a href=
"NiSpecularProperty.htm">NiSpecularProperty</a></span>*
GetSpecular() const</p>

<p class="NDLRefMemberDescription">Retrieves the current
<span class="NDLSystemFont"><a href=
"NiSpecularProperty.htm">NiSpecularProperty</a></span> from the
property state. This function will never return <span class=
"NDLSystemFont">NULL</span>.</p>

<p class="NDLRefMemberFunction"><span class=
"NDLSystemFont"><a href=
"NiStencilProperty.htm">NiStencilProperty</a></span>*
GetStencil() const</p>

<p class="NDLRefMemberDescription">Retrieves the current
<span class="NDLSystemFont"><a href=
"NiStencilProperty.htm">NiStencilProperty</a></span> from the
property state. This function will never return <span class=
"NDLSystemFont">NULL</span>.</p>

<p class="NDLRefMemberFunction"><a href=
"NiTexturingProperty.htm"><span class=
"NDLSystemFont">NiTexturingProperty</span></a>* GetTexturing()
const</p>

<p class="NDLRefMemberDescription">Retrieves the current <a href=
"NiTexturingProperty.htm"><span class=
"NDLSystemFont">NiTexturingProperty</span></a> from the property
state. This function will never return <span class=
"NDLSystemFont">NULL</span>.</p>

<p class="NDLRefMemberFunction"><span class=
"NDLSystemFont"><a href=
"NiVertexColorProperty.htm">NiVertexColorProperty</a></span>*
GetVertexColor() const</p>

<p class="NDLRefMemberDescription">Retrieves the current
<span class="NDLSystemFont"><a href=
"NiVertexColorProperty.htm">NiVertexColorProperty</a></span> from
the property state. This function will never return <span class=
"NDLSystemFont">NULL</span>.</p>

<p class="NDLRefMemberFunction"><span class=
"NDLSystemFont"><a href=
"NiWireframeProperty.htm">NiWireframeProperty</a></span>*
GetWireframe() const</p>

<p class="NDLRefMemberDescription">Retrieves the current
<span class="NDLSystemFont"><a href=
"NiWireframeProperty.htm">NiWireframeProperty</a></span> from the
property state. This function will never return <span class=
"NDLSystemFont">NULL</span>.</p>

<p class="NDLRefMemberFunction"><span class=
"NDLSystemFont"><a href=
"NiZBufferProperty.htm">NiZBufferProperty</a></span>*
GetZBuffer() const</p>

<p class="NDLRefMemberDescription">Retrieves the current
<span class="NDLSystemFont"><a href=
"NiZBufferProperty.htm">NiZBufferProperty</a></span> from the
property state. This function will never return <span class=
"NDLSystemFont">NULL</span>.</p>

<p class="NDLRefHead1">Notes</p><a name=
"NiPropertyState_and_NULL_Properties" id=
"NiPropertyState_and_NULL_Properties"></a>

<p class="NDLRefHead2">NiPropertyState and NULL Properties</p>

<p>The <span class="NDLSystemFont">NiPropertyState</span> is
designed in such a way that the <span class=
"NDLSystemFont">NULL</span> property cannot be attached to any of
the property classes. In this way, it is always safe to
de-reference a property pointer returned by this class without
checking it. Note, however that this function may return a
non-const pointer to a default property for that property
class&mdash;applications wishing to query a property from a
non-const <span class="NDLSystemFont">NiPropertyState</span> with
the intention of changing it must check the pointer against the
default property before modifying it.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
