<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiStopWatch</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiStopWatch</p>

<p class="NDLRefParentage">: public <a href=
"../../Reference/NiSystem/NiMemObject.htm"><span>NiMemObject</span></a></p>

<p class="NDLRefHeaderFile">&lt;NiStopWatch.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>A simple timing class used with profiling in Gamebryo. Does
not handle performance counter rollover, which limits the maximum
length of time for which performance data is likely to be
accurate. To determine performance counter rollover time, see the
documentation for <a href=
"../../Reference/NiSystem/NiSystemDesc.htm"><span class=
"NDLSystemFont">NiSystemDesc::GetPerformanceCounterHz</span></a>.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiStopWatch()</p>

<p class="NDLRefMemberDescription">The default stopwatch
constructor initializes the timer.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">void Start()</p>

<p class="NDLRefMemberDescription">Start the stopwatch timing, if
it has not already been started, and increment the internal
reference counter.</p>

<p class="NDLRefMemberFunction">void Stop()</p>

<p class="NDLRefMemberDescription">Decrement the internal
reference counter, and stop the timer if the reference count is
zero.</p>

<p class="NDLRefMemberFunction">void Hold()</p>

<p class="NDLRefMemberFunction">void Unhold()</p>

<p class="NDLRefMemberDescription">These functions temporarily
pause and unpause the timer.</p>

<p class="NDLRefMemberFunction">void Reset()</p>

<p class="NDLRefMemberDescription">These functions reset the
timer and reference counter.</p>

<p class="NDLRefMemberFunction">unsigned int GetTime() const</p>

<p class="NDLRefMemberDescription">Returns timing data in Release
builds. The timer must be stopped for the timing data to be
valid. <b>IMPORTANT NOTE</b>: Because timing data can be
misleading in Debug builds, this function returns 1 in Debug
mode.</p>

<p class="NDLRefMemberFunction">float GetTimeInSeconds()
const</p>

<p class="NDLRefMemberDescription">This function returns the same
value that <span class="NDLSystemFont">GetTime()</span> does, but
converted to seconds. Like <span class=
"NDLSystemFont">GetTime()</span>, it returns 1 in Debug mode.</p>

<p class="NDLRefMemberFunction">unsigned int GetCount() const</p>

<p class="NDLRefMemberDescription">Return the number of times
started minus the number of times stopped.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
