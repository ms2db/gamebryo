<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiNIFImageReader</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiNIFImageReader</p>

<p class="NDLRefParentage">: public <a href=
"NiImageReader.htm"><span>NiImageReader</span></a></p>

<p class="NDLRefHeaderFile">&lt;NiNIFImageReader.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>The <span class="NDLSystemFont">NiNIFImageReader</span> is a
subclass of the abstract <span class="NDLSystemFont"><a href=
"NiImageReader.htm">NiImageReader</a></span> class that
implements the reading of NIF image files. Most applications will
not use this class directly, but rather will use the <span class=
"NDLSystemFont"><a href=
"NiDevImageConverter.htm">NiDevImageConverter</a></span>, which
includes this class as one of its loaders. See the "<a href=
"NiNIFImageReader.htm#NIF_Image_File_Format_Standard">Notes</a>"
section below for the definition of the NIF image file
format.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiNIFImageReader()</p>

<p class="NDLRefMemberDescription">Default (and sole)
constructor. Creates the internal data structures required for
loading NIF image files.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">virtual bool CanReadFile(const
char* pcFileExtension) const</p>

<p class="NDLRefMemberDescription">Returns true if the given
extension is <span class="NDLSystemFont">.nif</span>, and false
otherwise. The base class interface uses this virtual function to
determine whether a generic image loader can load a given
file.</p>

<p class="NDLRefMemberFunction">virtual NiPixelData*
ReadFile(<a href=
"../../Reference/NiSystem/NiFile.htm">NiFile</a>&amp; kIst,
<a href="NiPixelData.htm">NiPixelData</a>* pkOptDest)</p>

<p class="NDLRefMemberDescription">Reads the given file (assuming
that it is a NIF file) and returns the data from the file as a
flat or mipmapped <span class="NDLSystemFont"><a href=
"NiPixelData.htm">NiPixelData</a></span> object. The output pixel
format may be any valid pixel format. The function returns NULL
if the NIF file appears to be of the wrong format. The calling
function should not rely on the position of the file pointer
following a call to this function.</p>

<p class="NDLRefMemberFunction">virtual bool ReadHeader(<a href=
"../../Reference/NiSystem/NiFile.htm">NiFile</a>&amp; kIst,
unsigned int&amp; uiWidth, unsigned int&amp; uiHeight, <a href=
"NiPixelFormat.htm">NiPixelFormat</a>&amp; kFormat,
bool&amp; bMipmap, unsigned int&amp; uiFaces)</p>

<p class="NDLRefMemberDescription">Returns <span class=
"NDLSystemFont">true</span> if the file appears to be a valid and
readable by the reader object and <span class=
"NDLSystemFont">false</span> otherwise. If the function returns
true, the <span class="NDLSystemFont">uiWidth</span>,
<span class="NDLSystemFont">uiHeight</span>, <span class=
"NDLSystemFont">kFormat</span>, and <span class=
"NDLSystemFont">bMipmap</span> parameters will contain the width
of the image file, the height of the image file, the destination
pixel format, whether or not the file contains mipmap data, and
the number of faces in the file respectively. The calling
function should not rely on the position of the file pointer
following a call to this function.</p>

<p class="NDLRefHead1">Notes</p>

<a name="NIF_Image_File_Format_Standard" id="NIF_Image_File_Format_Standard"></a><p class="NDLRefHead2">NIF Image File Format Standard</p>

<p>A NIF image file is defined as a valid NIF file that has a
single top-level object an <span class="NDLSystemFont"><a href=
"NiPixelData.htm">NiPixelData</a></span> object containing the
image data (which is added to an empty <span class=
"NDLSystemFont"><a href="NiStream.htm">NiStream</a></span> object
prior to saving using <span class="NDLSystemFont"><a href=
"NiStream.htm">NiStream::InsertObject</a></span>). The pixel data
may be of any format, and may contain mipmaps. Note that although
there may be only one top-level object, the NIF file may include
a second non-top-level object the <span class=
"NDLSystemFont"><a href="NiPalette.htm">NiPalette</a></span> (if
any) that was attached to the <span class=
"NDLSystemFont"><a href="NiPixelData.htm">NiPixelData</a></span>
object. The palette will be automatically streamed by the
<span class="NDLSystemFont"><a href=
"NiPixelData.htm">NiPixelData</a></span> object as needed.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
