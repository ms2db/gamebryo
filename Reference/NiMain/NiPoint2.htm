<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiPoint2</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiPoint2</p>

<p class="NDLRefParentage">: public <a href=
"../../Reference/NiSystem/NiMemObject.htm"><span>NiMemObject</span></a></p>

<p class="NDLRefHeaderFile">&lt;NiPoint2.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiPoint2</span> is a basic 2D
point class. The only data members are <span class=
"NDLSystemFont">x</span> and <span class=
"NDLSystemFont">y</span>, which are both declared as public
floats. This arrangement enables them to be accessed using
structure-style notation (i.e. <span class="NDLSystemFont">value
= vector.x</span>).</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiPoint2()</p>

<p class="NDLRefMemberDescription">The constructor does not
initialize the data members so that fast construction of arrays
is possible in situations where the points will be filled in by
application code.</p>

<p class="NDLRefMemberFunction">NiPoint2(float fX, float fY)</p>

<p class="NDLRefMemberDescription">Member-wise initialization
constructor</p>

<p class="NDLRefHead1">Static Member Functions</p>

<p class="NDLRefMemberFunction">static NiPoint2
ComponentProduct(const NiPoint2&amp; kP0,
const NiPoint2&amp; kP1)</p>

<p class="NDLRefMemberDescription">Returns a vector containing
<span class="NDLSystemFont">[p0.x*p1.x, p0.y*p1.y]</span>.</p>

<p class="NDLRefHead1">Operators</p>

<p class="NDLRefMemberFunction">float&amp; operator[] (int i)
const</p>

<p class="NDLRefMemberDescription">This operator is a
de-reference operator.</p>

<p class="NDLRefMemberFunction">bool operator== (const
NiPoint2&amp; kPt) const</p>

<p class="NDLRefMemberDescription">This operator is an exact
equality operator.</p>

<p class="NDLRefMemberFunction">bool operator!= (const
NiPoint2&amp; kPt) const</p>

<p class="NDLRefMemberDescription">This operator is an exact
inequality operator.</p>

<p class="NDLRefMemberFunction">NiPoint2 operator+ (const
NiPoint2&amp; kPt) const</p>

<p class="NDLRefMemberDescription">This operator is a
component-by-component addition operator.</p>

<p class="NDLRefMemberFunction">NiPoint2 operator- (const
NiPoint2&amp; kPt) const</p>

<p class="NDLRefMemberDescription">This operator is a
component-by-component subtraction operator.</p>

<p class="NDLRefMemberFunction">float operator* (const
NiPoint2&amp; kPt) const</p>

<p class="NDLRefMemberDescription">This operator is a dot product
operator.</p>

<p class="NDLRefMemberFunction">NiPoint2 operator* (float
fScalar) const</p>

<p class="NDLRefMemberDescription">This operator is a scalar
multiplication operator.</p>

<p class="NDLRefMemberFunction">NiPoint2 operator/ (float
fScalar) const</p>

<p class="NDLRefMemberDescription">This operator is a scalar
division operator.</p>

<p class="NDLRefMemberFunction">NiPoint2 operator- () const</p>

<p class="NDLRefMemberDescription">This operator is a unary
negation operator.</p>

<p class="NDLRefMemberFunction">friend NiPoint2 operator* (float
fScalar, const NiPoint2&amp; kPt)</p>

<p class="NDLRefMemberDescription">This operator is a scalar
multiplication operator.</p>

<p class="NDLRefMemberFunction">NiPoint2&amp; operator+= (const
NiPoint2&amp; kPt)</p>

<p class="NDLRefMemberDescription">This operator is
component-by-component increment operator.</p>

<p class="NDLRefMemberFunction">NiPoint2&amp; operator-= (const
NiPoint2&amp; kPt)</p>

<p class="NDLRefMemberDescription">This operator is a
component-by-component decrement operator.</p>

<p class="NDLRefMemberFunction">NiPoint2&amp; operator*= (float
fScalar)</p>

<p class="NDLRefMemberDescription">This operator is a
component-by-component in-place scaling operator.</p>

<p class="NDLRefMemberFunction">NiPoint2&amp; operator/= (float
fScalar)</p>

<p class="NDLRefMemberDescription">This operator is a
component-by-component in-place scalar division operator.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">float Length() const</p>

<p class="NDLRefMemberDescription">Returns the vector length of
the point (L2 norm).</p>

<p class="NDLRefMemberFunction">float SqrLength() const</p>

<p class="NDLRefMemberDescription">Returns the squared vector
length.</p>

<p class="NDLRefMemberFunction">float Dot(const NiPoint2&amp;
kPt) const</p>

<p class="NDLRefMemberDescription">Dot product - alias for above
inline operator.</p>

<p class="NDLRefMemberFunction">float Unitize()</p>

<p class="NDLRefMemberDescription">Makes vector into unit vector
and returns original length - Unitizing a zero vector will return
zero and leave the vector as-is.</p>

<p class="NDLRefHead1">Notes</p>

<a name="Convenience_Objects" id="Convenience_Objects"></a><p class="NDLRefHead2">Convenience Objects</p>

<p>The following public static constants are defined for
application convenience.</p>

<table class="NDLNoteContainer" width="100%">
    <tr align="left">
        <td class="NDLNoteContainerTD">
            <p class="NDLHeadingNoteContainer">Caution</p>

            <div class="NDLNote">
                Because these constants are static, and not
                <span class="NDLSystemFont">#defines</span>,
                applications must be careful not to reference
                them in static data declarations, as they may not
                be defined prior to the start of the "main"
                function.)
            </div>
        </td>
    </tr>
</table>

<!--(Table)=========================================================-->
<table>
    <thead>
        <tr>
            <th>Static Object</th>

            <th>Value</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><span class=
            "NDLSystemFont">NiPoint2::ZERO</span></td>

            <td><span class="NDLSystemFont">NiPoint2(0,
            0)</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">NiPoint2::UNIT_X</span></td>

            <td><span class="NDLSystemFont">NiPoint2(1,
            0)</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">NiPoint2::UNIT_Y</span></td>

            <td><span class="NDLSystemFont">NiPoint2(0,
            1)</span></td>
        </tr>
    </tbody>
</table>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
