<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiCompUtility</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiCompUtility</p>

<p class="NDLRefParentage">: public <a href=
"../../Reference/NiSystem/NiMemObject.htm">NiMemObject</a></p>

<p class="NDLRefHeaderFile">&lt;NiCompUtility.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>This class is a set of static utility functions for compacting
float values into short values. The algorithm for compacting
floats into shorts is as follows. Find the minimum and maximum
values of the float array. Determine what value to subtract from
the minimum and maximum to re-center the extremes around zero.
Determine the scalar to divide by in order to make the extrema
values -1 and 1. Short min and short max now correspond to -1 and
1 in our compacted range.</p>

<p class="NDLRefHead1">Supported Static Member Functions</p>

<p class="NDLRefMemberFunction">static <a href=
"NiCompUtility.htm#NiCompUtility_CompArray">NiCompArray</a>
CompressFloatArray(const float* pfSrcArray, unsigned int
uiSrcCount)</p>

<p class="NDLRefMemberDescription">Compress the float array into
an array of shorts. The application is responsible for the input
float array and the output short array.</p>

<p class="NDLRefMemberFunction">static void
DecompressFloatArray(const short* psSrcArray, unsigned int
uiSrcCount, float fOffset, float fHalfRange, float* pfDestArray,
unsigned int uiDestCount)</p>

<p class="NDLRefMemberDescription">Decompress a subset of the
short array into a float array. The application is responsible
for the input short array and the output float array.</p>

<p class="NDLRefHead1">Nested Classes</p>

<a name="NiCompUtility_CompArray" id="NiCompUtility_CompArray"></a><p class="NDLRefHead2">NiCompUtility::NiCompArray</p>

<pre>
class NiCompArray : public NiMemObject
{
public:
short* m_asArray; // The array of compressed values
float m_fOffset; // Used to recenter the compressed value
      float m_fHalfRange; // Used to rescale the compressed value
      unsigned int m_uiNumValues; // The number of compressed values.
};
</pre>

<p><span class="NDLSystemFont">NiCompArray</span> is a
convenience structure returned by the <span class=
"NDLSystemFont">CompressFloatArray</span> method of <span class=
"NDLSystemFont">NiCompUtility</span>. It has an array of compacted
values and the values necessary to decompress the array.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
