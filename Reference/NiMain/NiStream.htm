<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiStream</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiStream</p>

<p class="NDLRefParentage">: public <a href=
"../../Reference/NiSystem/NiMemObject.htm"><span>NiMemObject</span></a></p>

<p class="NDLRefHeaderFile">&lt;NiStream.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>Support for the native Gamebryo file format. This class is
described in more detail in the <a href=
"../../Programmer/Object_Systems/Streaming.htm">object system
documentation.</a></p>

<p class="NDLRefHead1">Constructors and Destructors</p>

<p class="NDLRefMemberFunction">NiStream()</p>

<p class="NDLRefMemberDescription">The default null
constructor.</p>

<p class="NDLRefMemberFunction">virtual ~NiStream()</p>

<p class="NDLRefMemberDescription">The default destructor removes
all objects from the stream and releases its resources.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<a name="ObjectManagement" id="ObjectManagement"></a><p class="NDLRefHead2">Object Management Functions</p>

<p class="NDLRefMemberFunction">void InsertObject(<a href=
"NiObject.htm">NiObject</a>* pkObject)</p>

<p class="NDLRefMemberFunction">void RemoveObject(<a href=
"NiObject.htm">NiObject</a>* pkObject)</p>

<p class="NDLRefMemberFunction">void RemoveAllObjects()</p>

<p class="NDLRefMemberDescription">Add and remove top level
objects from the stream.</p>

<p class="NDLRefMemberFunction">unsigned int GetObjectCount()
const</p>

<p class="NDLRefMemberDescription">Get the number of top level
objects in the stream.</p>

<p class="NDLRefMemberFunction">NiObject* GetObjectAt(unsigned
int i) const</p>

<p class="NDLRefMemberDescription">Get a top level object from
the stream by index.</p>

<a name="IO" id="IO"></a><p class="NDLRefHead2">I/O Functions</p>

<p class="NDLRefMemberFunction">virtual bool Load(const char*
pcFileName)</p>

<p class="NDLRefMemberFunction">virtual bool Save(const char*
pcFileName)</p>

<p class="NDLRefMemberDescription">File loads and saves using the
filename specified.</p>

<p class="NDLRefMemberFunction">virtual bool Load(char* pcBuffer,
int iBufferSize)</p>

<p class="NDLRefMemberFunction">virtual bool Save(char*&amp;
pcBuffer, int&amp; iBufferSize)</p>

<p class="NDLRefMemberDescription">Memory buffer loads and
saves.</p>

<p class="NDLRefMemberFunction">virtual bool Load(<a href=
"../../Reference/NiSystem/NiBinaryStream.htm">NiBinaryStream</a>*
pkIstr)</p>

<p class="NDLRefMemberFunction">virtual bool Save(<a href=
"../../Reference/NiSystem/NiBinaryStream.htm">NiBinaryStream</a>*
pkOstr)</p>

<p class="NDLRefMemberDescription">Direct stream loads and
saves.</p>

<a name="BackgroundLoad" id="BackgroundLoad"></a><p class="NDLRefHead2">Background Loading Functions</p>

<p class="NDLRefMemberFunction">void BackgroundLoadBegin(const
char* pcFileName)</p>

<p class="NDLRefMemberFunction">void BackgroundLoadBegin(<a href=
"../../Reference/NiSystem/NiBinaryStream.htm">NiBinaryStream</a>*
pkIstr)</p>

<p class="NDLRefMemberDescription">Begins loading a stream in a
background thread. This function creates a thread and starts the
loading process. Once started, applications should poll the
status of a background load to see when it is finished.</p>

<p class="NDLRefMemberFunction">ThreadStatus
BackgroundLoadPoll(LoadState* pkState)</p>

<p class="NDLRefMemberDescription">Check the status of the
background load. The <span class="NDLSystemFont">LoadState</span>
struct is a public struct with two float members. It is
documented in the notes section below along with the possible
values of the <span class="NDLSystemFont">ThreadStatus</span>
enumeration.</p>

<p class="NDLRefMemberFunction">void BackgroundLoadPause()</p>

<p class="NDLRefMemberFunction">void BackgroundLoadResume()</p>

<p class="NDLRefMemberFunction">void BackgroundLoadCancel()</p>

<p class="NDLRefMemberDescription">These functions control the
running of the background thread. Note that they are not
guaranteed to execute immediately. Instead, they set various
flags and threading parameters for the background process and
allow the operating system to moderate the thread.</p>

<p class="NDLRefMemberFunction">bool BackgroundLoadFinish()</p>

<p class="NDLRefMemberDescription">Calling <span class=
"NDLSystemFont">BackgroundLoadFinish</span> will restart a paused
thread and then wait for the thread to finish loading.</p>

<p class="NDLRefMemberFunction">bool
BackgroundLoadGetExitStatus() const</p>

<p class="NDLRefMemberDescription">Returns the Boolean status of
the background loading process.</p>

<p class="NDLRefMemberFunction">virtual void
BackgroundLoadOnExit()</p>

<p class="NDLRefMemberDescription">This callback is executed when
a background stream finishes loading. Applications should
subclass <span class="NDLSystemFont">NiStream</span> and override
this virtual function to perform any background tasks that will
finalize the recently streamed data.</p>

<p class="NDLRefMemberFunction">const <a href=
"../../Reference/NiSystem/NiThread.htm">NiThread</a>::Priority
GetPriority() const;</p>

<p class="NDLRefMemberFunction">void SetPriority(<a href=
"../../Reference/NiSystem/NiThread.htm">NiThread</a>::Priority
ePriority)</p>

<p class="NDLRefMemberDescription">Get and set the priority of a
background load. The priority will be set by the system when
<span class="NDLSystemFont">BackgroundLoadBegin</span> is called.
Changing the priority during a background load will have no
effect until a subsequent background loading process is
initiated. By default, an <span class="NDLSystemFont"><a href=
"NiStream.htm">NiStream</a></span> has a priority of <span class=
"NDLSystemFont"><a href=
"../../Reference/NiSystem/NiThread.htm">NiThread</a>::BELOW_NORMAL</span>
to allow more important operations to schedule in front of
it.</p>

<p class="NDLRefMemberFunction">const <a href=
"../../Reference/NiSystem/NiProcessorAffinity.htm">NiProcessorAffinity</a>&amp;
GetAffinity() const</p>

<p class="NDLRefMemberFunction">void SetAffinity(const <a href=
"../../Reference/NiSystem/NiProcessorAffinity.htm">NiProcessorAffinity</a>&amp;
kAffinity)</p>

<p class="NDLRefMemberDescription">Get and set the processor
affinity of a background load. The affinity will be set by the
system when <span class=
"NDLSystemFont">BackgroundLoadBegin</span> is called. Changing
the affinity during a background load will have no effect until a
subsequent background loading process is initiated. By default,
an <span class="NDLSystemFont"><a href=
"NiStream.htm">NiStream</a></span> specifies <span class=
"NDLSystemFont"><a href=
"../../Reference/NiSystem/NiProcessorAffinity.htm">NiProcessorAffinity::PROCESSOR_DONT_CARE</a></span>
for the affinity mask and ideal processor.</p>

<a name="VersionFunctions" id="VersionFunctions"></a><p class="NDLRefHead2">Versioning Functions</p>

<p class="NDLRefMemberFunction">static unsigned int
GetVersionFromString(const char* pcVersionString)</p>

<p class="NDLRefMemberFunction">static unsigned int
GetVersion(unsigned int uiMajor, unsigned int uiMinor, unsigned
int uiPatch, unsigned int uiInternal)</p>

<p class="NDLRefMemberDescription">Create an integer
representation of a Gamebryo version from either a string or four
unsigned integers. The resulting version will be a 32-bit integer
with each component of the version occupying 8 bits. Version
strings passed to the first function must be of the format
"XXX.XXX.XXX.XXX" where XXX represents a value from 0 to 255.
Note that the Gamebryo SDK version string defined in NiVersion.h
does not meet this requirement. The NIF version does.</p>

<p class="NDLRefMemberFunction">unsigned int GetFileVersion()
const</p>

<p class="NDLRefMemberDescription">Get the Gamebryo version when
this file was saved. This version is stored in <span class=
"NDLSystemFont">NiVersion.h</span> and is dependent on the
Gamebryo release. Developers should increment the user defined
NIF version if they need to manage version issues with NIF
files.</p>

<p class="NDLRefMemberFunction">unsigned int
GetFileUserDefinedVersion() const</p>

<p class="NDLRefMemberDescription">Get the user defined version
when this file was created. This version must be incremented in
the code for <span class=
"NDLSystemFont">NiStream</span>.</p>

<a name="PostProcessingFunctions" id="PostProcessingFunctions"></a><p class="NDLRefHead2">Post-Processing Functions</p>

<p class="NDLRefMemberFunction">typedef void
(*PostProcessFunction)(NiStream&amp;,
NiTLargeObjectArray&lt;NiObjectPtr&gt;&amp; kTopObjects)</p>

<p class="NDLRefMemberFunction">static void
RegisterPostProcessFunction(PostProcessFunction pfnFunc)</p>

<p class="NDLRefMemberFunction">static void
UnregisterPostProcessFunction(PostProcessFunction pfnFunc)</p>

<p class="NDLRefMemberDescription">Register and unregister
post-processing callback functions. Note that these functions
will be called once per-stream after all objects have been
streamed in. Post-processing callbacks should be registered
during SDM init and will be called in the same order that they
are registered. Calls to <span class=
"NDLSystemFont">RegisterPostProcessFunction</span> should be
paired with a call to <span class=
"NDLSystemFont">UnregisterPostProcessFunction</span> in the
matching SDM shutdown function.</p>

<p class="NDLRefMemberFunction">NiStream::ConversionMap&amp;
GetConversionMap()</p>

<p class="NDLRefMemberDescription">Get the conversion map for the
loading process. <span class=
"NDLSystemFont">NiStream::ConversionMap</span> is a typedef for
<span class="NDLSystemFont">NiTPointerMap&lt;const NiAVObject*,
NiAVObject*&gt;</span>. This map contains a mapping from objects
streamed in by the NIF to objects created as part of a conversion
post process.</p>

<p class="NDLRefMemberDescription">For example, Gamebryo 2.5
converted <span class="NDLSystemFont">NiGeometry</span> objects
into <span class="NDLSystemFont">NiMesh</span> objects after
streaming via a post-processing function and replaced the
<span class="NDLSystemFont">NiGeometry</span> object in the
stream with the <span class="NDLSystemFont">NiMesh</span> object.
In that case, the map key would be the pointer to the
<span class="NDLSystemFont">NiGeometry</span> object while the
map value would be the pointer to the new <span class=
"NDLSystemFont">NiMesh</span> object.</p>

<a name="ErrorFunctions" id="ErrorFunctions"></a><p class="NDLRefHead2">Error Reporting Functions</p>

<p class="NDLRefMemberFunction">unsigned int GetLastError()
const</p>

<p class="NDLRefMemberFunction">const char* GetLastErrorMessage()
const</p>

<p class="NDLRefMemberFunction">void ResetLastErrorInfo()</p>

<p class="NDLRefMemberDescription">Get and reset the last error.
The possible errors are listed below in the notes
section.</p>

<a name="TexturePalette" id="TexturePalette"></a><p class="NDLRefHead2">Texture Palette Functions</p>

<p class="NDLRefMemberFunction">void SetTexturePalette(<a href=
"NiTexturePalette.htm">NiTexturePalette</a>*
pkTexturePalette)</p>

<p class="NDLRefMemberFunction"><a href=
"NiTexturePalette.htm">NiTexturePalette</a>* GetTexturePalette()
const</p>

<p class="NDLRefMemberDescription">Get and set the texture
palette. The texture palette is used to share textures across NIF
files loaded with a stream or even across streams. Please refer
to the <a href=
"../../Programmer/Object_Systems/Streaming.htm">object system
documentation</a> for more information on how texture palettes
work.</p>

<a name="Endianness" id="Endianness"></a><p class="NDLRefHead2">Endian Functions</p>

<p class="NDLRefMemberFunction">bool GetSaveAsLittleEndian()</p>

<p class="NDLRefMemberFunction">void SetSaveAsLittleEndian(bool
bLittle)</p>

<p class="NDLRefMemberDescription">Get and set whether or not to
save in little endian format. By default, it will use the
endianness of the current platform.</p>

<p class="NDLRefMemberFunction">bool
GetSourceIsLittleEndian()</p>

<p class="NDLRefMemberDescription">After a stream has been
loaded, this will return whether or not that stream was in the
little endian format.</p>

<p class="NDLRefHead1">Notes</p>

<p class="NDLRefHead2">Background Loading Information</p>

<p>The <span class="NDLSystemFont">LoadState</span> struct
contains two float members that will be filled with a value from
0.0f to 1.0f when <span class=
"NDLSystemFont">BackgroundLoadPoll</span> is called. These
members indicate how far through the reading and linking process
the background load is. <span class=
"NDLSystemFont">m_fLinkProgress</span> will always be
<span class="NDLSystemFont">0.0f</span> until <span class=
"NDLSystemFont">m_fReadProgress</span> reaches <span class=
"NDLSystemFont">1.0f</span>.</p>

<pre>
struct LoadState
{
    float m_fReadProgress; // [0.0f..1.0f]
    float m_fLinkProgress; // [0.0f..1.0f]
};
</pre>

<p>The <span class="NDLSystemFont">ThreadStatus</span>
enumeration returns the state of the current thread from
<span class="NDLSystemFont">BackgroundLoadPoll</span>.</p>

<!--(Table)=========================================================-->
<table>
    <thead>
        <tr>
            <th><a name="Thread_Status" id="Thread_Status">Thread
            Status</a></th>

            <th>Meaning</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><span class="NDLSystemFont">IDLE</span></td>

            <td>The stream is inactive because of cancellation or
            completion. Applications should call <span class=
            "NDLSystemFont">BackgroundLoadGetExitStatus</span> to
            see if the file loaded successfully.</td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">LOADING</span></td>

            <td>The stream is still in the process of
            loading.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">CANCELLING</span></td>

            <td>Cancellation has been requested on the stream but
            has not completed.</td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">PAUSING</span></td>

            <td><span class=
            "NDLSystemFont">BackgroundLoadPause</span> has been
            called, but the stream has not yet reached a point
            where it can safely suspend the thread.</td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">PAUSED</span></td>

            <td>The background thread is paused.</td>
        </tr>
    </tbody>
</table>

<a name="Error_Enumerations" id="Error_Enumerations"></a><p class="NDLRefHead2">Error Enumerations</p>

<!--(Table)=========================================================-->

<table>
    <thead>
        <tr>
            <th>Error</th>

            <th>Meaning</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><span class=
            "NDLSystemFont">STREAM_OKAY</span></td>

            <td>Streaming completed successfully.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">FILE_NOT_LOADED</span></td>

            <td>The specified file is not loaded because it could
            not be found or a file handle could not be
            created.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">NOT_NIF_FILE</span></td>

            <td>The specified file is not a NIF file and cannot
            be loaded.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">OLDER_VERSION</span></td>

            <td>The NIF version is lower than the minimum NIF
            version supported.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">LATER_VERSION</span></td>

            <td>The NIF version is greater than the maximum NIF
            version supported. This indicates that you are
            loading a file created with a newer version of
            Gamebryo into an older version.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">NO_CREATE_FUNCTION</span></td>

            <td>The create function for a specific type of object
            was not found. Make sure you link in the appropriate
            library and include the top level header for that
            library.</td>
    </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">ENDIAN_MISMATCH</span></td>

    <td>The endianess of the file did not match the endianess of
        the platform. Note that this error will only occur if 
        <SPAN CLASS="NDLSystemFont">
            <A HREF="../efd/efd__BinaryStream.htm">
                efd::BinaryStream::GetEndianMatchHint()</A></SPAN>
        returns true. By default, that function returns false. 
            </td>
        </tr>
    </tbody>
</table>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
