<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>egfPhysXBindings Namespace</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">egfPhysXBindings Namespace</p>





<a name="private_methods"></a>
<p class="NDLRefHead1">Private Methods</p>


<a name="namespaceegf_phys_x_bindings_1a558f9fc3f42c90e9b5f19afa9fc1355a"></a>
<p class="NDLRefMemberFunction">EE_EGFPHYSX_ENTRY <span class="NDLSystemFont">efd::Bool</span>  StartSimulating(<br/>const char* sceneName, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a37c593debc73d82d7ddc571c725f0e2d">efd::TimeType</a></span>& time = egfPhysX::SceneService::ms_kInvalidSimulationTime)</p>
<p class="NDLRefMemberDescription">This method will start simulation on the scene with the specified start time. </p>
<p class="NDLRefMemberDetailedDescription">If time is less than 0, use the last fetch time. If there is no last fetch time, use the scheduler's current time.</p>
<p class="NDLRefMemberDetailedDescription">NOTE: no simulation will occur before this method is called.</p>
<p class="NDLRefMemberDetailedDescription">Return true if the scene with the specified name is found. Otherwise, return false. </p>

<a name="namespaceegf_phys_x_bindings_1ab06f141298e0e1f0a79fde8e6b232f86"></a>
<p class="NDLRefMemberFunction">EE_EGFPHYSX_ENTRY <span class="NDLSystemFont">efd::Bool</span>  StartSimulating(<br/>const <span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span>& sceneEntityId, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a37c593debc73d82d7ddc571c725f0e2d">efd::TimeType</a></span>& time = egfPhysX::SceneService::ms_kInvalidSimulationTime)</p>
<p class="NDLRefMemberDescription">This method will start simulation on the scene with the specified start time. </p>
<p class="NDLRefMemberDetailedDescription">If time is less than 0, use the last fetch time. If there is no last fetch time, use the scheduler's current time. If a scene with the specified entity ID does not exist and the entity mixes in the PhysXScene model, a scene will be created.</p>
<p class="NDLRefMemberDetailedDescription">NOTE: no simulation will occur before this method is called.</p>
<p class="NDLRefMemberDetailedDescription">Return true if the scene with the specified ID is found or can be created. Otherwise, return false. </p>

<a name="namespaceegf_phys_x_bindings_1aa014205eb0e7137489ca8033daf5bd84"></a>
<p class="NDLRefMemberFunction">EE_EGFPHYSX_ENTRY <span class="NDLSystemFont">efd::Bool</span>  StopSimulating(const char* sceneName)</p>
<p class="NDLRefMemberDescription">Stop simulation on the specified scene. </p>
<p class="NDLRefMemberDetailedDescription">Simulation will only run again when StartSimulating is called.</p>
<p class="NDLRefMemberDetailedDescription">Return true if the scene is found. Otherwise, return false. </p>

<a name="namespaceegf_phys_x_bindings_1a3ad193a8b09fcb944d42783c1a905cb1"></a>
<p class="NDLRefMemberFunction">EE_EGFPHYSX_ENTRY <span class="NDLSystemFont">efd::Bool</span>  StopSimulating(const <span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span>& sceneEntityId)</p>
<p class="NDLRefMemberDescription">Stop simulation on the specified scene. </p>
<p class="NDLRefMemberDetailedDescription">Simulation will only run again when StartSimulating is called.</p>
<p class="NDLRefMemberDetailedDescription">Return true if the scene is found. Otherwise, return false. </p>

<a name="namespaceegf_phys_x_bindings_1a29c94cd5ee60120d03bf976a54f65356"></a>
<p class="NDLRefMemberFunction">EE_EGFPHYSX_ENTRY <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a37c593debc73d82d7ddc571c725f0e2d">efd::TimeType</a></span>  GetCurrentPhysXTime(const char* sceneName)</p>
<p class="NDLRefMemberDescription">Returns the last time used in simulation. </p>
<p class="NDLRefMemberDetailedDescription">If the scene is not found, return SceneService::ms_kInvalidSimulationTime (-1) </p>

<a name="namespaceegf_phys_x_bindings_1a9d28c8e476c338b09c05767ce2fc4176"></a>
<p class="NDLRefMemberFunction">EE_EGFPHYSX_ENTRY <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a37c593debc73d82d7ddc571c725f0e2d">efd::TimeType</a></span>  GetCurrentPhysXTime(const <span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span>& sceneEntityId)</p>
<p class="NDLRefMemberDescription">Returns the last time used in simulation. </p>
<p class="NDLRefMemberDetailedDescription">If the scene is not found, return SceneService::ms_kInvalidSimulationTime (-1) </p>

<a name="namespaceegf_phys_x_bindings_1aefe948151bf11ef9b95d7e65710208ed"></a>
<p class="NDLRefMemberFunction">EE_EGFPHYSX_ENTRY <span class="NDLSystemFont">efd::Bool</span>  GetGroupCollisionFlag(<br/>const char* sceneName, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span> group1, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span> group2, <br/><span class="NDLSystemFont">efd::Bool</span>& isEnabled)</p>
<p class="NDLRefMemberDescription">Sets the value of isEnabled to the value of the collision flag for the specified groups. </p>
<p class="NDLRefMemberDetailedDescription">Return true if the scene is found and the groups are valid. Otherwise, return false. </p>

<a name="namespaceegf_phys_x_bindings_1a591ba4c080d286896812f46d4ab96e2f"></a>
<p class="NDLRefMemberFunction">EE_EGFPHYSX_ENTRY <span class="NDLSystemFont">efd::Bool</span>  GetGroupCollisionFlag(<br/>const <span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span>& sceneEntityId, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span> group1, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span> group2, <br/><span class="NDLSystemFont">efd::Bool</span>& isEnabled)</p>
<p class="NDLRefMemberDescription">Sets the value of isEnabled to the value of the collision flag for the specified groups. </p>
<p class="NDLRefMemberDetailedDescription">Return true if the scene is found and the groups are valid. Otherwise, return false. </p>

<a name="namespaceegf_phys_x_bindings_1a18be76fbddc1ac957363155b492854e5"></a>
<p class="NDLRefMemberFunction">EE_EGFPHYSX_ENTRY <span class="NDLSystemFont">efd::Bool</span>  SetGroupCollisionFlag(<br/>const char* sceneName, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span> group1, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span> group2, <br/><span class="NDLSystemFont">efd::Bool</span> isEnabled)</p>
<p class="NDLRefMemberDescription">Method to set the collision flag between two collision groups in a scene. </p>
<p class="NDLRefMemberDetailedDescription">Return true if the scene is found and the groups are valid. Otherwise, return false. </p>

<a name="namespaceegf_phys_x_bindings_1ae42dca6a9634a1dfa0b6033426db8a76"></a>
<p class="NDLRefMemberFunction">EE_EGFPHYSX_ENTRY <span class="NDLSystemFont">efd::Bool</span>  SetGroupCollisionFlag(<br/>const <span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span>& sceneEntityId, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span> group1, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span> group2, <br/><span class="NDLSystemFont">efd::Bool</span> isEnabled)</p>
<p class="NDLRefMemberDescription">Method to set the collision flag between two collision groups in a scene. </p>
<p class="NDLRefMemberDetailedDescription">If a scene with the specified entity ID does not exist and the entity mixes in the PhysXScene model, a scene will be created.</p>
<p class="NDLRefMemberDetailedDescription">Return true if the scene is found or created and the groups are valid. Otherwise, return false. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
