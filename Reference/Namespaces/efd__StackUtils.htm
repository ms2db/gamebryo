<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::StackUtils Namespace</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::StackUtils Namespace</p>





<a name="private_methods"></a>
<p class="NDLRefHead1">Private Methods</p>


<a name="namespaceefd_1_1_stack_utils_1a8aecfcd8924061676b0885cac28a50d1"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  EnableStackTracing(<span class="NDLSystemFont">bool</span> enable = true)</p>
<p class="NDLRefMemberDescription">Initialize <span class="NDLSystemFont"><a href="../efd/efd__stack.htm">stack</a></span> tracing. </p>
<p class="NDLRefMemberDetailedDescription">On windows, this will attempt to load the DbgHelp.dll. As this method may allocate memory it should be called while your application is healthy if you later wish to use the ExceptionStackTrace method. Otherwise this method will be automatically called when needed.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">enable</span></td>
    <td>true to enable <span class="NDLSystemFont"><a href="../efd/efd__stack.htm">stack</a></span> tracing, false to disable.</td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if <span class="NDLSystemFont"><a href="../efd/efd__stack.htm">stack</a></span> tracing is available, false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceefd_1_1_stack_utils_1a1d65e44191e24a79e7f38e76f83abeed"></a>
<p class="NDLRefMemberFunction">void  TurnOffStackTracing()</p>
<p class="NDLRefMemberDescription">Disable call <span class="NDLSystemFont"><a href="../efd/efd__stack.htm">stack</a></span> tracing. </p>
<p class="NDLRefMemberDetailedDescription">Some processes want <span class="NDLSystemFont"><a href="../efd/efd__stack.htm">stack</a></span> tracing disabled even when its compiled it. </p>

<a name="namespaceefd_1_1_stack_utils_1acaba35a27903962f6a504d9c23b17ffe"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  FastStackTrace(<br/>void ** o_pResults, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> i_maxDepth, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> i_skipFrames = 0)</p>
<p class="NDLRefMemberDescription">Walk the execution <span class="NDLSystemFont"><a href="../efd/efd__stack.htm">stack</a></span> recording the instruction pointers. </p>
<p class="NDLRefMemberDetailedDescription">These symbols are not resolved, just stored. They can be resolved later if needed by calling either ResolveSymbolNames or NoAllocResolveSymbolNames.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">o_pResults</span></td>
    <td>Pointer to an array where the results are stored </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_maxDepth</span></td>
    <td>The length of the array pointed to by o_pResults. This limits the maximum depth the <span class="NDLSystemFont"><a href="../efd/efd__stack.htm">stack</a></span> will be walked. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_skipFrames</span></td>
    <td>The number of frame to skip on the top of the <span class="NDLSystemFont"><a href="../efd/efd__stack.htm">stack</a></span>. Used to bypass predictable frames like the <span class="NDLSystemFont"><a href="../efd/efd__stack.htm">stack</a></span> trace method itself. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The number of <span class="NDLSystemFont"><a href="../efd/efd__stack.htm">stack</a></span> frames captured in o_pResults </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceefd_1_1_stack_utils_1aa73ce2e05b8b3f12dc66811d9babbb4e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  ExceptionStackTrace(<br/>void ** o_pResults, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> i_maxDepth, <br/>void* i_pPlatform1 = 0, <br/>void* i_pPlatform2 = 0)</p>
<p class="NDLRefMemberDescription">Walk the execution <span class="NDLSystemFont"><a href="../efd/efd__stack.htm">stack</a></span> following the invocation of an exception handler recording the instruction pointers. </p>
<p class="NDLRefMemberDetailedDescription">Attempts to correct the resulting <span class="NDLSystemFont"><a href="../efd/efd__stack.htm">stack</a></span> for the effects of the exception handler.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">o_pResults</span></td>
    <td>Pointer to an array where the results are stored </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_maxDepth</span></td>
    <td>The length of the array pointed to by o_pResults </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_pPlatform1</span></td>
    <td>Platform specific data passed in from the exception record </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_pPlatform2</span></td>
    <td>Platform specific data passed in from the exception record </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The number of <span class="NDLSystemFont"><a href="../efd/efd__stack.htm">stack</a></span> frames captured in o_pResults </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceefd_1_1_stack_utils_1a89161e6dd3dba71f47fb0a06c841c670"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  StackTrace(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> i_maxDepth, <br/>char* o_pszzResultBuffer, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> i_cchBufferSize, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> i_skipFrames = 0, <br/>const char* i_pszPrefix = "")</p>
<p class="NDLRefMemberDescription">Walks the <span class="NDLSystemFont"><a href="../efd/efd__stack.htm">stack</a></span> and provides a string with the resolved symbol names. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">Results will be truncated to fit within the provided buffer. Resulting string is guaranteed to be null terminated.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_maxDepth</span></td>
    <td>The maximum depth to recurse the <span class="NDLSystemFont"><a href="../efd/efd__stack.htm">stack</a></span></td>
</tr>
<tr>
    <td><span class="NDLSystemFont">o_pszzResultBuffer</span></td>
    <td>The resolved symbols will be written into this buffer one per line. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_cchBufferSize</span></td>
    <td>The length of the array pointed to by o_pchResultBuffer. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_skipFrames</span></td>
    <td>The number of frame to skip on the top of the <span class="NDLSystemFont"><a href="../efd/efd__stack.htm">stack</a></span>. Used to bypass predictable frames like the <span class="NDLSystemFont"><a href="../efd/efd__stack.htm">stack</a></span> trace method itself. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_pszPrefix</span></td>
    <td>Prefix to prepend to each line of the result </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The number of lines in the result string </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceefd_1_1_stack_utils_1a9334e70002fb630ee3505e2813ba1310"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  ResolveSymbolNames(<br/>const void *const* i_pSymbols, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> i_cSymbols, <br/>char* o_pszzResultBuffer, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> i_cchBufferSize, <br/>const char* i_pszPrefix = "")</p>
<p class="NDLRefMemberDescription">Resolve function symbol names without allocating any memory. </p>
<p class="NDLRefMemberDetailedDescription">By avoiding allocations this method is safer to call during exception handlers. For increased safety you should have previously called the EnableStackTracing method while your application was healthy.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">Results will be truncated to fit within the provided buffer. Resulting string is guaranteed to be null terminated.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_pSymbols</span></td>
    <td>Pointer to an array of symbols previously returned from a call to the FastStackTrace or EnableStackTracing function. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_cSymbols</span></td>
    <td>The length of the array pointed to by i_pSymbols </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">o_pszzResultBuffer</span></td>
    <td>The resolved symbols will be written into this buffer one per line. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_cchBufferSize</span></td>
    <td>The length of the array pointed to by o_pchResultBuffer. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_pszPrefix</span></td>
    <td>Prefix to prepend to each line of the result </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if symbols were resolved. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceefd_1_1_stack_utils_1af92b12614b46c412ab26c368af42ca8f"></a>
<p class="NDLRefMemberFunction">void  LogOnUnhandledException(<span class="NDLSystemFont">bool</span> i_turnOn)</p>
<p class="NDLRefMemberDescription">Turn on or off an unhandled exception filter that will log the exception record, optionally log a <span class="NDLSystemFont"><a href="../efd/efd__stack.htm">stack</a></span> trace if EE_USE_EXCEPTION_STACKTRACE was defined when foundation was compiled and then flush the logs. </p>
<p class="NDLRefMemberDetailedDescription">The handler will then forward the exception off to the default exception handler if possible. By default, EE_USE_EXCEPTION_STACKTRACE is defined for debug and release configurations.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_turnOn</span></td>
    <td>True to turn on the handler, false to turn it off. </td>
</tr>

        </tbody>
    </table>
</div>


 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
