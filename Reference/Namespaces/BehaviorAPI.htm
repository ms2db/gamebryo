<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>BehaviorAPI Namespace</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">BehaviorAPI Namespace</p>





<a name="behavior_api_user_functions"></a>
<p class="NDLRefHead1">Behavior API User Functions</p>


<a name="namespace_behavior_a_p_i_1a25f5f655b47ad2d7288ff18cbf351d3a"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aff0a9e9ca8001b330091eb01eeb190c2">efd::Float64</a></span>  GetServiceManagerTime()</p>
<p class="NDLRefMemberDescription">Returns the real time in seconds since the start of the process (framework). </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>Floating point time in seconds. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1a6d5f205e1c717b28af980ad56ab15d4b"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aff0a9e9ca8001b330091eb01eeb190c2">efd::Float64</a></span>  GetGameTime()</p>
<p class="NDLRefMemberDescription">Returns the game time in seconds. </p>
<p class="NDLRefMemberDetailedDescription">Game Time is maintained by the scheduler and supports features like pausing the clock, applying a scale verse real time, entering a "fixed delta" mode an other features. All behavior related events operate relative to game time.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>Floating point time in seconds. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1ae93932e02bb5f3e802d1d4063b7a18b1"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>&  GetModelName()</p>
<p class="NDLRefMemberDescription">Returns the name of the model of the entity that is executing. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>The model name. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1a6936b202cba6353a0bb8a7e0bc24c06b"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span>  CreateCategory(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a59a3838ab5cdfe87f98f5b8371e4e91d">efd::UInt8</a></span> usage, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> netID, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> baseID)</p>
<p class="NDLRefMemberDescription">Creates a new category ID from its base values and returns the new Category. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<p class="NDLRefMemberDetailedDescription"><span class="NDLSystemFont"><a href="../efd/efd__UniversalID.htm#classefd_1_1_universal_i_d_1aee7a8d80b484a2f2f2936bc2c738156a">efd::UniversalID::ExpectedChannelUsage</a></span>. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">usage</span></td>
    <td>Expected usage for this category ID - </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">netID</span></td>
    <td>The Net ID that created this ID. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">baseID</span></td>
    <td>The base ID. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The new category. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1a50bc31a0a0057a39b7e51b37a32a4515"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span>  CreateApplicationCategory(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> appCategoryID)</p>
<p class="NDLRefMemberDescription">Creates a new Category with a fixed base id and expected usage for easier script category creation. </p>
<p class="NDLRefMemberDetailedDescription">Uses the BaseID efd::kBASEID_ApplicationCategory and usage of <span class="NDLSystemFont">efd::UniversalID::ECU_Any</span>. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">appCategoryID</span></td>
    <td>The application specified unique id to be set into the Net ID bitfield. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The new category. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1ab110300abdc8f9b4b67a332966183a3e"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span>  GetServicePublicCategory(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> serviceID, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> categoryIndex = -1)</p>
<p class="NDLRefMemberDescription">Get a public Category as determined by the ISystemService ClassID and an optional index. </p>
<p class="NDLRefMemberDetailedDescription">If multiple public Categories are desired, categoryIndex can be set to a value other than the default to create a new public Category. Public Categories are not unique to a specific process. Categories generated by this function will be the same if multiple processes pass in the same values for serviceID and categoryIndex. Subsequent calls to this method by the any process will produce the same result.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">serviceID</span></td>
    <td>The ClassID of the ISystemService to create the Category for. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">categoryIndex</span></td>
    <td>(optional) The Category number for the specified ISystemService to create. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Category generated. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1ad87ebefc43e2ba4e3b3a0c1dfc303e20"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span>  GetServiceProcessUniqueCategory(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> serviceID)</p>
<p class="NDLRefMemberDescription">Allocate a Category that is unique only in the context of this process. </p>
<p class="NDLRefMemberDetailedDescription">Subsequent calls to this method with the same ClassID by any process will produce a different result. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">serviceID</span></td>
    <td>The ClassID of the ISystemService to create the Category for. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Category generated. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1aae9ac178bd1a64b777bf7baf475ab8a5"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span>  GetServicePrivateCategory(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> serviceID)</p>
<p class="NDLRefMemberDescription">Get a private Category for the instance of the ISystemService local to this process. </p>
<p class="NDLRefMemberDetailedDescription">Only a single private Category can be generated in this way and is unique to the process that generates it. Subsequent calls to this method by the same process will produce the same result.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">serviceID</span></td>
    <td>The ClassID of the ISystemService to create the Category for. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Category generated. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1a62426b013e03ec494eb665d049c0d662"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span>  GetServicePrivateCategory(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span> serviceID, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> netID)</p>
<p class="NDLRefMemberDescription">Get a private Category for the instance of the ISystemService local to this process. </p>
<p class="NDLRefMemberDetailedDescription">Only a single private Category can be generated in this way and is unique to the process that generates it. Subsequent calls to this method by the same process will produce the same result.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">serviceID</span></td>
    <td>The ClassID of the ISystemService to create the Category for. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">netID</span></td>
    <td>The NetID of the process you want the private category for. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Category generated. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1ae35e105ec52a10b8d5caa6198b80df79"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span>  GetGloballyUniqueCategory()</p>
<p class="NDLRefMemberDescription">Allocate a globally unique Category. </p>
<p class="NDLRefMemberDetailedDescription">Subsequent calls to this method by any process will produce a different result. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>Category generated. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1aee1628f433da3daa3add505244267c4e"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetEnumValue(<br/>const char* strEnumName, <br/>const char* strIDName)</p>
<p class="NDLRefMemberDescription">Convert the string name of any ClassID, BaseID or ServiceID into the corresponding integer value. </p>
<p class="NDLRefMemberDetailedDescription">Note: Use of this function requires the EnumManager to be registered and initialized. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">strEnumName</span></td>
    <td>friendly name of enum to lookup id in </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">strIDName</span></td>
    <td>String name of the id to convert. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The integer value of the ID, 0 if not found. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1a0cfd1febd57e5642cb0d1ab9154139bb"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY <span class="NDLSystemFont">bool</span>  DoesModelExist(const char* strModelName)</p>
<p class="NDLRefMemberDescription">Checks to see if a particular model exists in the flat model manager. </p>
<p class="NDLRefMemberDetailedDescription">If the model exists but is not in the cache yet, it is loaded into memory.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">strModelName</span></td>
    <td>The name of the model to check. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the model exists. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1aa4e51b75e12a67a1b4a0b08c817f4beb"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY <span class="NDLSystemFont">bool</span>  SendEvent(<br/><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span> categoryID, <br/>const char* strBehavior, <br/><span class="NDLSystemFont"><a href="../efd/efd__ParameterList.htm">efd::ParameterList</a></span>* args = 0, <br/>const char* strCallback = 0, <br/>double delay = 0.0)</p>
<p class="NDLRefMemberDescription">Sends an event message that will launch the target behavior on the specified entity. </p>
<p class="NDLRefMemberDetailedDescription">A callback behavior may optionally be specified which will be invoked on the current entity after the target behavior finishes. The target behavior can send arguments to the callback behavior by using the SendReply built-in. Once the event has been sent the new behavior will be queued for execution and the current behavior will continue to execute. The target entity can be any entity including the current entity.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">categoryID</span></td>
    <td>The Category on which the requested behavior should be sent </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">strBehavior</span></td>
    <td>The behavior to execute for this event </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">args</span></td>
    <td>[Optional] The ParameterList of arguments to be included in the event message, or NULL if there are no arguments. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">strCallback</span></td>
    <td>[Optional] The behavior to launch for any reply message. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">delay</span></td>
    <td>[Optional] Game Time in seconds to wait before actually executing the event. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if a valid Event was generated and sent. A true result does not guarantee that the event will be successfully delivered or executed. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1a978c31486b11d0811b7988c4da1f8bb4"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY void  SendReply(<span class="NDLSystemFont"><a href="../efd/efd__ParameterList.htm">efd::ParameterList</a></span>* pStream)</p>
<p class="NDLRefMemberDescription">Sends a reply event message back to the entity behavior that initiated the current behavior. </p>
<p class="NDLRefMemberDetailedDescription">The entity which initiated this behavior is either an entity that called SendAndWaitForReply or else an entity that passed a callback behavior to SendEvent. In the SendAndWaitForReply case the ParameterList passed into SendReply is the stream that will be returned from the SendAndWaitForReply call in the originating behavior. In the SendEvent with callback case the data stream passed to SendReply will be the argument stream to the callback behavior.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pStream</span></td>
    <td>Pointer to the stream of arguments to be returned in the reply event. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1a397983b482c4bb994e36299cd761be74"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY <span class="NDLSystemFont">bool</span>  CallBehavior(<br/><span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span> entityID, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& strBehavior, <br/><span class="NDLSystemFont"><a href="../efd/efd__ParameterList.htm">efd::ParameterList</a></span>* pArgs)</p>
<p class="NDLRefMemberDescription">Execute a behavior immediately. </p>
<p class="NDLRefMemberDetailedDescription">The behavior will be run to completion before this method returns. The entity on which this behavior is called must be local and the behavior that is being called must have the Immediate behavior trait.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">entityID</span></td>
    <td>The ID of the target entity </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">strBehavior</span></td>
    <td>The name of the behavior to invoke. Names of the form "Model:Method" are supported if you want to invoke a specific model's behavior. Normally you should simply pass the Method name in order to invoke the most-derived implementation. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pArgs</span></td>
    <td>A stream containing the arguments to the behavior. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>bool True if the behavior was invoked, which does not imply that the behavior succeeded. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1a054ec7929963fcdf35b08b0622274b08"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY void  SendStream(<br/><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span> catID, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span> msgClassID, <br/><span class="NDLSystemFont"><a href="../efd/efd__ParameterList.htm">efd::ParameterList</a></span>* pStream)</p>
<p class="NDLRefMemberDescription">Sends a data stream of the specified message class type to the given category. </p>
<p class="NDLRefMemberDetailedDescription">Before calling this method you must first register a StreamMessage derived class in your C++ code by calling ServiceManager::RegisterFactoryMethod. This is most commonly done using the MessageWrapper class.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">ServiceManager::RegisterFactoryMethod </p>
<p class="NDLRefMemberDetailedDescription">MessageWrapper </p>
<p class="NDLRefMemberDetailedDescription">RegisterMessageWrapperFactory</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">catID</span></td>
    <td>The category ID to send the stream over the network on </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">msgClassID</span></td>
    <td>The message type to tag the stream with </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pStream</span></td>
    <td>The ParameterList to send over the network </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1a22032388dd24813663e6670775724553"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY void  SendStreamLocal(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span> msgClassID, <br/><span class="NDLSystemFont"><a href="../efd/efd__ParameterList.htm">efd::ParameterList</a></span>* strm)</p>
<p class="NDLRefMemberDescription">Sends a data stream of the specified message class type to the local message service. </p>
<p class="NDLRefMemberDetailedDescription">Before calling this method you must first register a StreamMessage derived class in your C++ code by calling ServiceManager::RegisterFactoryMethod. This is most commonly done using the MessageWrapper class.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">ServiceManager::RegisterFactoryMethod </p>
<p class="NDLRefMemberDetailedDescription">MessageWrapper </p>
<p class="NDLRefMemberDetailedDescription">RegisterMessageWrapperFactory</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">msgClassID</span></td>
    <td>The message type to tag the stream with </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">strm</span></td>
    <td>The ParameterList to send over the network </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1a41baabc90d7d3a68262fcc66d51d471c"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY void  FlexLogMessage(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span> module, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> i_level, <br/>const char* i_pszMessage, <br/><span class="NDLSystemFont">bool</span> i_echoToStdOut = false)</p>
<p class="NDLRefMemberDescription">Places a message at the specified module name and log level into the framework log file. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">module</span></td>
    <td>Module id. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_level</span></td>
    <td>integer specifying the log level (0-3 are legal). </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_pszMessage</span></td>
    <td>message string. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_echoToStdOut</span></td>
    <td>If true, echo the message to stdout. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1a86c5fc44b6013ac40c607f5669512ada"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY void  FlexLogError(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span> module, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> i_level, <br/>const char* i_pszMessage, <br/><span class="NDLSystemFont">bool</span> i_echoToStdErr = false)</p>
<p class="NDLRefMemberDescription">Places an error message at the specified module name and log level into the framework log file. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">module</span></td>
    <td>Module id. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_level</span></td>
    <td>integer specifying the log level (0-3 are legal) </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_pszMessage</span></td>
    <td>error string </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_echoToStdErr</span></td>
    <td>If true, echo the message to stdout. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1ae3f6b6af39971b76bac2a59f21817dd2"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY void  LogMessagePython(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> i_level, <br/>const char* i_pszMessage, <br/><span class="NDLSystemFont">bool</span> i_echoToStdOut = false)</p>
<p class="NDLRefMemberDescription">Places a "Python" message of the specified log level into the framework log file. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_level</span></td>
    <td>integer specifying the log level (0-3 are legal) </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_pszMessage</span></td>
    <td>message string </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_echoToStdOut</span></td>
    <td>If true, echo the message to stdout. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1af3c2861df439eed1d0ffe1c7ad40849c"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY void  LogErrorPython(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> i_level, <br/>const char* i_pszMessage, <br/><span class="NDLSystemFont">bool</span> i_echoToStdOut = false)</p>
<p class="NDLRefMemberDescription">Places a "Python" error message of the specified log level into the framework log file. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_level</span></td>
    <td>integer specifying the log level (0-3 are legal) </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_pszMessage</span></td>
    <td>error string </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_echoToStdOut</span></td>
    <td>If true, echo the message to stdout. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1a8d6e3225f29a85a2e50edf79e3e41145"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY void  LogMessageLua(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> i_level, <br/>const char* i_pszMessage, <br/><span class="NDLSystemFont">bool</span> i_echoToStdOut = false)</p>
<p class="NDLRefMemberDescription">Places a "Lua" message of the specified log level into the framework log file. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_level</span></td>
    <td>integer specifying the log level (0-3 are legal) </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_pszMessage</span></td>
    <td>message string </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_echoToStdOut</span></td>
    <td>If true, echo the message to stdout. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1a5d9a094fa35d12900845cc4fb1ee7211"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY void  LogErrorLua(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> i_level, <br/>const char* i_pszMessage, <br/><span class="NDLSystemFont">bool</span> i_echoToStdOut = false)</p>
<p class="NDLRefMemberDescription">Places a "Lua" error message of the specified log level into the framework log file. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_level</span></td>
    <td>integer specifying the log level (0-3 are legal) </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_pszMessage</span></td>
    <td>error string </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_echoToStdOut</span></td>
    <td>If true, echo the message to stdout. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1ac29ddcb99db67fbe58d0f56251851a19"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY void  OutputDebugMessage(const char* pMessage)</p>
<p class="NDLRefMemberDescription">Output a debug message. </p>
<p class="NDLRefMemberDetailedDescription">This only functions in debug builds and will output the message in a platform specific manner to best display the message in an attached C++ debugger. Often the resulting message is only visible if such a debugger is attached to the running process at the time of the method call.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">This uses EE_OUTPUT_DEBUG_STRING internally, see that macro for further details on platform specific behavior.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMessage</span></td>
    <td>debug string </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1a766dce036ef5ec2e37f907f1e2a04e30"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetPropertyCount(<br/><span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span> entityID, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& strPropertyName, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>* count)</p>
<p class="NDLRefMemberDescription">Get the number of entries in an associative array property and return this value in count. </p>
<p class="NDLRefMemberDetailedDescription">This function returns PropertyResult_PropertyNotFound if the Entity doesn't exist, PropertyResult_PropertyNotAssociativeArray if the property is not an associative array, or PropertyResult_OK when successful.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">entityID</span></td>
    <td>The entity to look up. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">strPropertyName</span></td>
    <td>The name of the associative array property. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">count</span></td>
    <td>The number of entries in the property. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1ae24bdde148e5c7a3c012ceca6e2cc5cd"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY <span class="NDLSystemFont">bool</span>  AddUpdateNotificationByEntity(<br/><span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span> callbackEntityID, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& strCallbackBehavior, <br/><span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span> targetEntityID)</p>
<p class="NDLRefMemberDescription">Returns the real time in seconds since the start of the process (framework). </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>Floating point time in seconds. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1a9d578fa0316d382889bb07a9c6d8bf5b"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY <span class="NDLSystemFont">bool</span>  AddUpdateNotificationByModel(<br/><span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span> callbackEntityID, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& strCallbackBehavior, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& modelName)</p>
<p class="NDLRefMemberDescription">Returns the real time in seconds since the start of the process (framework). </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>Floating point time in seconds. </td>
</tr>

        </tbody>
    </table>
</div>


<a name="private_attributes"></a>
<p class="NDLRefHead1">Private Attributes</p>
<a name="namespace_behavior_a_p_i_1a2c7cef7df130535f63b53e66814cd367"></a>
<p class=NDLRefHead2>BehaviorAPI::EntityCheck</p>


<p class="NDLRefMemberDescription">A return value used by many behavior APIs. </p>

<p class="NDLRefMemberDetailedDescription">Many behavior API methods operate on a specific entity by passing in its <span class="NDLSystemFont"><a href="../efd/EntityID.htm">EntityID</a></span>. This return type allows scripts to distinguish between the case where that entity cannot be found and other cases where it is a valid entity but the method fails for other reasons. We bind these values into script as constants so script authors can directly use them. For example:</p>
<p class="NDLRefMemberDetailedDescription">
<pre>    python:
        if BehaviorAPI.IsKindOf(BehaviorAPI.GetExecutingEntityId(), &quot;SomeModel&quot;) == ec_Yes:
            # Some code here

    lua:
        if BehaviorAPI.IsKindOf(BehaviorAPI.GetExecutingEntityId(), &quot;SomeModel&quot;) == ec_Yes then
            -- Some code here
        end
</pre>
</p>

<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">ec_Yes</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">ec_No</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">ec_EntityNotFound</span></td>
    <td>&nbsp;</td>
</tr>

  </tbody>
</table>
</div>


<a name="private_methods"></a>
<p class="NDLRefHead1">Private Methods</p>


<a name="namespace_behavior_a_p_i_1a71c7e4c53052fc70bec3211de915dc7e"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY <span class="NDLSystemFont">bool</span>  LoadBlockFile(<br/>char* blockURN, <br/>char* callback = 0, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> context = 0, <br/><span class="NDLSystemFont">bool</span> autoEnterWorld = egf::BlockLoadParameters::GetDefaultAutoEnterWorld())</p>
<p class="NDLRefMemberDescription">Loads a block file and optionally invokes a callback behavior when complete. </p>
<p class="NDLRefMemberDetailedDescription">Any valid AssetID can be specified, such as a URN-style query or a logical asset ID.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">blockURN</span></td>
    <td>The block to load </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">callback</span></td>
    <td>[optional] The behavior to invoke when the block load completes. This behavior will be called if the load fails or when the block is completely loaded. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">context</span></td>
    <td>[optional] A context that will be returned in the callback data </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">autoEnterWorld</span></td>
    <td>[optional] Specify whether entities in the loaded block(s) should automatically enter the world once created. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the block load has been started. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1a6238e5be7e66434109341fe4ff11f41d"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY <span class="NDLSystemFont">bool</span>  LoadBlockFile(<br/>char* blockURN, <br/><span class="NDLSystemFont"><a href="../efd/efd__ParameterList.htm">efd::ParameterList</a></span>* pParams)</p>
<p class="NDLRefMemberDescription">Loads a block file with the ability to set all block loading parameters. </p>
<p class="NDLRefMemberDetailedDescription">Any valid AssetID can be specified, such as a URN-style query or a logical asset ID. Takes a ParameterList containing whatever BlockLoadParameters you want to set. All parameters are optional so set only those you require. Valid options to place in the parameter list include:</p>
<p class="NDLRefMemberDetailedDescription">
<ul>
<li>Instance (UInt32): sets the instance ID which along with the blockURN uniquely defined the block to load. The same block can be loaded multiple times so long as a different instance number is used with each load.</li>
<li>AutoEnter (boolean): controls whether entities in the block automatically enter the world.</li>
<li>Callback (string): the name of a callback behavior on the current script entity.</li>
<li>Context (UInt32): a context that will be passed back to the callback behavior.</li>
<li>ActiveCallbacks (UInt32): a combination of BlockLoadCallback flags defining when the callback should be invoked.</li>
<li>Rotation (Point3): a rotation about the origin that can adjust the position and rotation of all entities in the loaded block.</li>
<li>Offset (Point3): an offset that can adjust the position of all entities in the loaded block.</li>
<li>LoadThreashold (UInt32): an override for the EntityLoaderService::GetMaxEntityLoadThrottle that will effect only this block.</li>
<li>UnloadThreashold (UInt32): an override for the EntityLoaderService::GetMaxEntityUnloadThrottle that will effect only this block.</li></ul></p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">blockURN</span></td>
    <td>The block to load </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pParams</span></td>
    <td>A ParameterList containing various parameters as defined above. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the block load has been started. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1a16a15d04f376ab6c8332687cab426425"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY <span class="NDLSystemFont">bool</span>  UnloadBlockFile(<br/>char* blockURN, <br/>char* callback = 0, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> context = 0)</p>
<p class="NDLRefMemberDescription">Unload an already loaded block file and optionally invokes a callback behavior when complete. </p>
<p class="NDLRefMemberDetailedDescription">The URN can be any valid query that resolves to a currently loaded block or blocks.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">blockURN</span></td>
    <td>The block to unload </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">callback</span></td>
    <td>[optional] The behavior to invoke when the block unload completes. This behavior will be called if the unload fails or when the block is completely unloaded. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">context</span></td>
    <td>[optional] A context that will be returned in the callback data </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the block unload has been started. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1a8b4ad5581aca9214830d5b5321f4a75c"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY <span class="NDLSystemFont">bool</span>  UnloadBlockFile(<br/>char* blockURN, <br/><span class="NDLSystemFont"><a href="../efd/efd__ParameterList.htm">efd::ParameterList</a></span>* pParams)</p>
<p class="NDLRefMemberDescription">Unload an instanced block file and optionally invokes a callback behavior when complete. </p>
<p class="NDLRefMemberDetailedDescription">The URN used to unload a block should match the URN used to load the block. Takes a ParameterList containing additional settings. All parameters are optional so set only those you require. Valid options to place in the parameter list include:</p>
<p class="NDLRefMemberDetailedDescription">
<ul>
<li>Instance (UInt32): sets the instance ID which along with the blockURN uniquely defined the block to load. The same block can be loaded multiple times so long as a different instance number is used with each load.</li>
<li>Callback (string): the name of a callback behavior on the current script entity.</li>
<li>Context (UInt32): a context that will be passed back to the callback behavior.</li></ul></p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">blockURN</span></td>
    <td>The block to unload </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pParams</span></td>
    <td>A ParameterList containing various parameters as defined above. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the block unload has been started. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1a450f05524308e0cd8ab249f6c6034b04"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY <span class="NDLSystemFont">bool</span>  EntitySetEnterWorld(<br/>char* blockURN, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> instance = 0)</p>
<p class="NDLRefMemberDescription">Request the specified entity set enter the world. </p>
<p class="NDLRefMemberDetailedDescription">This will cause the OnEnterWorld behavior, if it exists, to be called for each entity in the entity set that is not already in the world. The URN can be either the Physical AssetID of a specific block or it can be the exact URN used to originally load the block, for example as passed to the LoadBlockFile API.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">blockURN</span></td>
    <td>The block to ask to enter the world. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">instance</span></td>
    <td>The instance number of the block to unload </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>boolean true for success </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1a7a51399f7e152be95cbeb1e6649e63dd"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY <span class="NDLSystemFont">bool</span>  EntitySetExitWorld(<br/>char* blockURN, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> instance = 0)</p>
<p class="NDLRefMemberDescription">Request the specified entity set enter the world. </p>
<p class="NDLRefMemberDetailedDescription">This will cause the OnExitWorld behavior, if it exists, to be called for each entity in the entity set that is already in the world. The URN can be either the Physical AssetID of a specific block or it can be the exact URN used to originally load the block, for example as passed to the LoadBlockFile API.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">blockURN</span></td>
    <td>The block to ask to exit the world. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">instance</span></td>
    <td>The instance number of the block to unload </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>boolean true for success </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1a8461a101de996741c7aed3ab793f4387"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>  GetConfigValue(const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& paramName)</p>
<p class="NDLRefMemberDescription">Used by the scripting engines to obtain a configuration value for the given parameter. </p>
<p class="NDLRefMemberDetailedDescription">You can request values from section using the dotted form of the name. For example, if you have the following in your config file:</p>
<p class="NDLRefMemberDetailedDescription">
<pre>    Config.ini:
        [TopSection.SubSection]
        Value = Whatever
</pre>
</p>
<p class="NDLRefMemberDetailedDescription">You could read the value using the following script code:</p>
<p class="NDLRefMemberDetailedDescription">
<pre>    python:
        from BehaviorAPI import GetConfigValue
        value = GetConfigValue(&quot;TopSection.SubSection.Value&quot;)

    lua:
        -- Note: BehaviorAPI is automatically imported, do not use &quot;require 'BehaviorAPI'&quot;
        local value = BehaviorAPI.GetConfigValue(&quot;TopSection.SubSection.Value&quot;)
</pre>
</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">paramName</span></td>
    <td>Parameter name for which the configuration value to obtain. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The configuration value or NullString if the given parameter does not exist in the configuration. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1ae7abd693aad02b295f44acb282ed1789"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY const char*  GetPlatformName()</p>
<p class="NDLRefMemberDescription">Return a string describing the current platform, such as "Win32" or "Xbox360". </p>

<a name="namespace_behavior_a_p_i_1a0578754cc4f670c34d774e2630e60fd3"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY const char*  GetBuildConfiguration()</p>
<p class="NDLRefMemberDescription">Return a string describing the current build mode, one of "Debug", "Release", or "Shipping". </p>
<p class="NDLRefMemberDetailedDescription">Technically this is the build configuration used to compile the "egf" library an may differ from the configuration used to build the executable or other libraries. </p>

<a name="namespace_behavior_a_p_i_1a3eb857d0019f4f6b8a352cfe22be8171"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY <span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span>  GetExecutingEntityId()</p>
<p class="NDLRefMemberDescription">Returns the <span class="NDLSystemFont"><a href="../efd/EntityID.htm">EntityID</a></span> of the entity currently executing a scripted behavior. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td><span class="NDLSystemFont"><a href="../efd/EntityID.htm">EntityID</a></span> The entity on which a behavior is currently executing. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1ac1a062929024bda9434eac1ce5ab0471"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY <span class="NDLSystemFont"><a href="../egf/egf__EventID.htm">egf::EventID</a></span>  GetCurrentEventID()</p>
<p class="NDLRefMemberDescription">Returns the <span class="NDLSystemFont"><a href="../efd/EventID.htm">EventID</a></span> of the currently executing behavior. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>The event ID of the currently executing behavior. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1ae3260e278bdce7dc1e0d400d37d2fa0c"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY <span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span>  GetReturnEntityId()</p>
<p class="NDLRefMemberDescription">Returns the <span class="NDLSystemFont"><a href="../efd/EntityID.htm">EntityID</a></span> of the entity which sent the currently running behavior. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td><span class="NDLSystemFont"><a href="../efd/EntityID.htm">EntityID</a></span> The entity on which a behavior is currently executing. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1ad144bb18a9a2778b0139ea93a7025719"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY <span class="NDLSystemFont"><a href="../Namespaces/BehaviorAPI.htm#namespace_behavior_a_p_i_1a2c7cef7df130535f63b53e66814cd367">EntityCheck</a></span>  IsKindOf(<br/><span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span> entity, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& modelName)</p>
<p class="NDLRefMemberDescription">Tests if the entity "is-a" specific model type. </p>
<p class="NDLRefMemberDetailedDescription">This means that the entity either is that model type or mixes in that model type.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">This method differs from HasMixin in that it will return ec_Yes if modelName is equal to the result of GetModelName(entity) whereas HasMixin would return ec_No in that case.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">entity</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/EntityID.htm">EntityID</a></span> of the Entity to be tested </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">modelName</span></td>
    <td>Name of the model to test </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>EntityCheck enum value </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1a5e7a99885d5e37c99dcd7fad002b41cd"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY <span class="NDLSystemFont"><a href="../Namespaces/BehaviorAPI.htm#namespace_behavior_a_p_i_1a2c7cef7df130535f63b53e66814cd367">EntityCheck</a></span>  HasMixin(<br/><span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span> entity, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& mixinModelName)</p>
<p class="NDLRefMemberDescription">Tests if the entity mixes in a particular model. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">For this method a model is not considered to be a mix-in of itself. The IsKindOf method is equivalent to "HasMixin(id, foo) || GetModelName(id) == foo".</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">entity</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/EntityID.htm">EntityID</a></span> of the Entity to be tested </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">mixinModelName</span></td>
    <td>Name of the model to test </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>EntityCheck enum value </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1a1563681748547dcd92b79a753f3e0537"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY <span class="NDLSystemFont"><a href="../Namespaces/BehaviorAPI.htm#namespace_behavior_a_p_i_1a2c7cef7df130535f63b53e66814cd367">EntityCheck</a></span>  HasBehavior(<br/><span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span> entity, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& behaviorName)</p>
<p class="NDLRefMemberDescription">Tests if the entity has a particular behavior. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">entity</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/EntityID.htm">EntityID</a></span> of the Entity to be tested </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">behaviorName</span></td>
    <td>Name of the behavior to test </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>EntityCheck enum value </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1a71f587fc7269610070f4cd18dfdc3fa3"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY <span class="NDLSystemFont"><a href="../Namespaces/BehaviorAPI.htm#namespace_behavior_a_p_i_1a2c7cef7df130535f63b53e66814cd367">EntityCheck</a></span>  HasProperty(<br/><span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span> entity, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& propertyName)</p>
<p class="NDLRefMemberDescription">Tests if the entity has a particular property. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">entity</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/EntityID.htm">EntityID</a></span> of the Entity to be tested </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">propertyName</span></td>
    <td>Name of the property to test </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>EntityCheck enum value </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1acfcebd6f5ae9cb53e3685b003fd7fe86"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY <span class="NDLSystemFont"><a href="../Namespaces/BehaviorAPI.htm#namespace_behavior_a_p_i_1a2c7cef7df130535f63b53e66814cd367">EntityCheck</a></span>  HasPropertyKey(<br/><span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span> entity, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& propertyName, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& propertyKey)</p>
<p class="NDLRefMemberDescription">Tests if an associative property has a particular key. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">entity</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/EntityID.htm">EntityID</a></span> of the Entity to be tested </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">propertyName</span></td>
    <td>Name of the property to test </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">propertyKey</span></td>
    <td>Key of the property to test </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>EntityCheck enum value </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1a8e7ee87004c6ac2a2af9e40b3486fa14"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY <span class="NDLSystemFont"><a href="../Namespaces/BehaviorAPI.htm#namespace_behavior_a_p_i_1a2c7cef7df130535f63b53e66814cd367">EntityCheck</a></span>  FindMixins(<br/><span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span> entity, <br/><span class="NDLSystemFont"><a href="../efd/efd__list.htm">efd::list</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>&gt;* OutValue)</p>
<p class="NDLRefMemberDescription">Get a list of all the models that are mixed into the given entity. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">entity</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/EntityID.htm">EntityID</a></span> of the Entity to be tested </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">OutValue</span></td>
    <td>a list of mix-ins found in this Entity </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>EntityCheck enum value </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1a3bdd89c70771db0fad8179a49ab4ff32"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY <span class="NDLSystemFont"><a href="../Namespaces/BehaviorAPI.htm#namespace_behavior_a_p_i_1a2c7cef7df130535f63b53e66814cd367">EntityCheck</a></span>  FindMatchingMixins(<br/><span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span> entity, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& filter, <br/><span class="NDLSystemFont"><a href="../efd/efd__list.htm">efd::list</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>&gt;* OutValue)</p>
<p class="NDLRefMemberDescription">Gets a list of mix-in names based on a filter string. </p>
<p class="NDLRefMemberDetailedDescription">Only those mix-in models with a name that contains the filter string will be returned. The filter string is a simple substring, and does not support any wildcard matching.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">entity</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/EntityID.htm">EntityID</a></span> of the Entity to be tested </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">filter</span></td>
    <td>Search criteria string </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">OutValue</span></td>
    <td>List of matching mix-ins found in this Entity </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>EntityCheck enum value </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1abe22f41d998e96507d252484c1fa9c2b"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY <span class="NDLSystemFont"><a href="../Namespaces/BehaviorAPI.htm#namespace_behavior_a_p_i_1a2c7cef7df130535f63b53e66814cd367">EntityCheck</a></span>  FindBehaviors(<br/><span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span> entity, <br/><span class="NDLSystemFont"><a href="../efd/efd__list.htm">efd::list</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>&gt;* OutValue)</p>
<p class="NDLRefMemberDescription">Gets a list of all behaviors for the given entity, including those that are mixed-in from another model - in other words, not just the behaviors this model overrides. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">entity</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/EntityID.htm">EntityID</a></span> of the Entity to be tested </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">OutValue</span></td>
    <td>a list of behaviors found in this Entity </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>EntityCheck enum value </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1a297f1b4b7d3329c7da98c7f8da78ef7a"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY <span class="NDLSystemFont"><a href="../Namespaces/BehaviorAPI.htm#namespace_behavior_a_p_i_1a2c7cef7df130535f63b53e66814cd367">EntityCheck</a></span>  FindMatchingBehaviors(<br/><span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span> entity, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& filter, <br/><span class="NDLSystemFont"><a href="../efd/efd__list.htm">efd::list</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>&gt;* OutValue)</p>
<p class="NDLRefMemberDescription">Gets a list of behavior names based on a filter string. </p>
<p class="NDLRefMemberDetailedDescription">Only those behaviors with a name that contains the filter string will be returned. The filter string is a simple substring and does not support any wildcard matching.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">entity</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/EntityID.htm">EntityID</a></span> of the Entity to be tested </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">filter</span></td>
    <td>Search criteria string </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">OutValue</span></td>
    <td>List of matching behaviors found in this Entity </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>EntityCheck enum value </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1ad27edd40b88aec424ddd97f6de8d38f8"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY <span class="NDLSystemFont"><a href="../Namespaces/BehaviorAPI.htm#namespace_behavior_a_p_i_1a2c7cef7df130535f63b53e66814cd367">EntityCheck</a></span>  FindProperties(<br/><span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span> entity, <br/><span class="NDLSystemFont"><a href="../efd/efd__list.htm">efd::list</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>&gt;* OutValue)</p>
<p class="NDLRefMemberDescription">Gets a list of Properties. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">entity</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/EntityID.htm">EntityID</a></span> of the Entity to be tested </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">OutValue</span></td>
    <td>a list of properties found in this Entity </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>EntityCheck enum value </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1a18d262899c3d33b752f6fe9114fbdb36"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY <span class="NDLSystemFont"><a href="../Namespaces/BehaviorAPI.htm#namespace_behavior_a_p_i_1a2c7cef7df130535f63b53e66814cd367">EntityCheck</a></span>  FindMatchingProperties(<br/><span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span> entity, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& filter, <br/><span class="NDLSystemFont"><a href="../efd/efd__list.htm">efd::list</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>&gt;* OutValue)</p>
<p class="NDLRefMemberDescription">Gets a list of property names matching a filter string. </p>
<p class="NDLRefMemberDetailedDescription">Only those properties with a name that contains the filter string will be returned. The filter string is a simple substring, and does not support any wildcard matching.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">entity</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/EntityID.htm">EntityID</a></span> of the Entity to be tested </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">filter</span></td>
    <td>Search criteria string </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">OutValue</span></td>
    <td>List of matching properties found in this Entity </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>EntityCheck enum value </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1a1a2de499cfd43a08367913f2dd775bd0"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY <span class="NDLSystemFont"><a href="../Namespaces/BehaviorAPI.htm#namespace_behavior_a_p_i_1a2c7cef7df130535f63b53e66814cd367">EntityCheck</a></span>  FindPropertyKeys(<br/><span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span> entity, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& propertyName, <br/><span class="NDLSystemFont"><a href="../efd/efd__list.htm">efd::list</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>&gt;* OutValue)</p>
<p class="NDLRefMemberDescription">Returns a list of all in-use key names for a given map-style property. </p>
<p class="NDLRefMemberDetailedDescription">This should only be used when you know there will only be a small number of keys, to enumerate potentially large map-style properties it is recommended that GetNextPropertyKey be used.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">entity</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/EntityID.htm">EntityID</a></span> of the Entity to be tested </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">propertyName</span></td>
    <td>: the name of a map-style property </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">OutValue</span></td>
    <td>List of property key names for the map in this Entity </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>EntityCheck ec_Yes if the entity exists and has a map-style property with the given name. ec_No if the entity exists but has no valid property. ec_EntityNotFound if the entity cannot be found. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1a1fda9daae704375be5178d932206e2c9"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>  GetNextPropertyKey(<br/><span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span> entity, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& propertyName, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& previousKey)</p>
<p class="NDLRefMemberDescription">GetNextPropertyKey allows the enumeration of key values in a map-style property. </p>
<p class="NDLRefMemberDetailedDescription">Use an empty string on the first call to return the first key, then use the previous key value in future calls to return the next key. If no more keys exists, if the entity is not found, or if the entity has no map-style property with the given name then an empty string will be returned.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">entity</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/EntityID.htm">EntityID</a></span> of the Entity to be tested </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">propertyName</span></td>
    <td>name of the map-style property </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">previousKey</span></td>
    <td>The previous key, or an empty string to find the first key. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>utf8string The name of the next key, or an empty string on errors or when finished. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1a9dea6b1295ade1212ea0793c3717e632"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>&  GetModelName(<span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span> entity)</p>
<p class="NDLRefMemberDescription">Get the model name for an entity. </p>
<p class="NDLRefMemberDetailedDescription">All Entities are instantiations of a single final model, and all models have a unique name as specified in the Entity Modeling Tool data.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">entity</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/EntityID.htm">EntityID</a></span> of the entity to get the model name from </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The model name, or an empty string if the entity is not found </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1aa1f19174ce0364bc48ec2fc4924a9fc9"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>&  GetBehaviorSource(<br/><span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span> entity, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& behaviorName)</p>
<p class="NDLRefMemberDescription">Get the originating model for a particular behavior. </p>
<p class="NDLRefMemberDetailedDescription">When models are mixed in but not overridden, the origin will be the model containing the implementation. This information is typically only useful for debugging.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">entity</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/EntityID.htm">EntityID</a></span> of the entity of interest </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">behaviorName</span></td>
    <td>Name of the behavior to get the source of </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The model name where the specified behavior is implemented </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1a2987b786ad73f4454f87159a94fbf3a7"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>&  GetPropertySource(<br/><span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span> entity, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& propertyName)</p>
<p class="NDLRefMemberDescription">Get the originating model for a particular property. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">entity</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/EntityID.htm">EntityID</a></span> of the entity of interest </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">propertyName</span></td>
    <td>Name of the property to get the source of </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The model name where the property was defined </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1a14d6eef55584ea75a65785fb0b0083f1"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY <span class="NDLSystemFont">bool</span>  ResetProperty(<br/><span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span> entity, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& propertyName)</p>
<p class="NDLRefMemberDescription">Reset a property to its default value by property name. </p>
<p class="NDLRefMemberDetailedDescription">The default value is the value specified in the flat model, and does not reflect any overrides specified in the block file or runtime changes to the property. This works for both scalar and map-style properties; when resetting a map-style property, all keys not present in the default value will be removed, and any remaining keys will have their values returned to the default value.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">entity</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/EntityID.htm">EntityID</a></span> of the entity of interest </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">propertyName</span></td>
    <td>Name of the property to get reset </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if an override of the property existed and was reset, false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1a8561ddf0d7254b399671aba11dcd9860"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY <span class="NDLSystemFont">bool</span>  RemovePropertyValue(<br/><span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span> entity, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& propertyName, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& key)</p>
<p class="NDLRefMemberDescription">Removes a value, by key, from an associative array property. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">entity</span></td>
    <td>Entity ID to of the entity of interest </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">propertyName</span></td>
    <td>Name of the property to remove a value from </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">key</span></td>
    <td>The key of the value to remove </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the entity, property, and key were found and the value was removed </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1a8e2e085f3ecafcc22ef086c596701ad5"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  FindAllEntities(<span class="NDLSystemFont"><a href="../efd/efd__list.htm">efd::list</a></span>&lt;<span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span>&gt;* OutValue)</p>
<p class="NDLRefMemberDescription">Get a list of all the EntityIDs. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">Calling this function would be extremely expensive for a typical application with a large number of entities. You should typically use one of the more restrictive entity finding methods such as FindEntitiesByBaseModel or FindEntitiesByModel. This method can be useful for debugging.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">OutValue</span></td>
    <td>list of EntityIDs found </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>this function always returns 1 </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1aba15682e5f0e0d90d93e0b19fd5ffcca"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  FindEntitiesByModel(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& modelName, <br/><span class="NDLSystemFont"><a href="../efd/efd__list.htm">efd::list</a></span>&lt;<span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span>&gt;* OutValue)</p>
<p class="NDLRefMemberDescription">Get a list of all entities that use the specified model as their final model. </p>
<p class="NDLRefMemberDetailedDescription">Only entities of that exact type are returned. Even presets of a model are considered to be different final models.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">This method differs from FindEntitiesByBaseModel which also includes entities that mix-in the specified model.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">modelName</span></td>
    <td>Name of the model to search for </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">OutValue</span></td>
    <td>list of EntityIDs found </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>this function always returns 1 </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1af74b4d091ec5609077dc8c1513733f4e"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  FindEntitiesByBaseModel(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& modelName, <br/><span class="NDLSystemFont"><a href="../efd/efd__list.htm">efd::list</a></span>&lt;<span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span>&gt;* OutValue)</p>
<p class="NDLRefMemberDescription">Get a list of all entities that either mix-in the specified model or use the specified model as their final model. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">This method differs from FindEntitiesByModel which only finds entities which use the specified model as their final model.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">modelName</span></td>
    <td>Name of the model to search for </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">OutValue</span></td>
    <td>list of EntityIDs found </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>this function always returns 1 </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1a38f361d3fa62d2156f5e4bc73ea19787"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY <span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span>  FindEntityByDataID(const <span class="NDLSystemFont"><a href="../efd/efd__ID128.htm">efd::ID128</a></span>& dataId)</p>
<p class="NDLRefMemberDescription">Find the Entity instantiated using the given DataID. </p>
<p class="NDLRefMemberDetailedDescription">A unique DataID is automatically assigned to each entity in a block by the World Builder in Toolbench. Only entities that are the result of loading a block file will have a DataID. The DataID is a 128bit guid. </p>

<a name="namespace_behavior_a_p_i_1af771ebd96fe9aec4a755983f51cb5bc6"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY <span class="NDLSystemFont">bool</span>  FindAllBehaviors(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& modelName, <br/><span class="NDLSystemFont"><a href="../efd/efd__list.htm">efd::list</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>&gt;* OutValue)</p>
<p class="NDLRefMemberDescription">This method finds all behaviors implemented on a given model. </p>
<p class="NDLRefMemberDetailedDescription">The requested model will be loaded, if needed. Each behavior name is returned in the format "ModelName:BehaviorName", where the ModelName describes the source model in the mix-in hierarchy for the specified behavior. So, for example, if the model "Final" mixes in a model called "Base", which implements a behavior called "DoSomething", you would get an entry called "Base:DoSomething". If you want to invoke one of the resulting behaviors, you will normally want to strip off this model name and use just the behavior name, in order to invoke the most derived behavior.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">modelName</span></td>
    <td>Name of the model to search </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">OutValue</span></td>
    <td>List of behaviors </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>boolean true for success </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1a52e057983be8f6c1e423b5ab0ba1d17c"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY <span class="NDLSystemFont">bool</span>  SubscribeToCategory(<br/><span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span> entityID, <br/><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span> catID)</p>
<p class="NDLRefMemberDescription">Subscribe this entity to receive behavior requests on the specified category. </p>
<p class="NDLRefMemberDetailedDescription">Multiple entities can subscribe to the same category. Behaviors can be invoked on all entities subscribed to the category by using the specified category as the entityID parameter to SendEvent.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">entityID</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/EntityID.htm">EntityID</a></span> of the active Entity </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">catID</span></td>
    <td>CategoryID to subscribe to </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>bool false if the entity is unknown to the scheduler </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1a937c2ad44fc3c89e991395c6e3c88cb2"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY <span class="NDLSystemFont">bool</span>  UnsubscribeToCategory(<br/><span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span> entityID, <br/><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span> catID)</p>
<p class="NDLRefMemberDescription">Unsubscribe this entity from behavior requests on the specified category. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">entityID</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/EntityID.htm">EntityID</a></span> of the active Entity </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">catID</span></td>
    <td>CategoryID to unsubscribe </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>bool false if the entity is unknown to the scheduler </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1ac9bc1e9e5c1fd4fa81ed8782cbcb3087"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY <span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span>  CreateEntity(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& modelName, <br/><span class="NDLSystemFont"><a href="../efd/efd__ParameterList.htm">efd::ParameterList</a></span>* pCreationParams = 0, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& callbackBehavior = efd::utf8string::NullString(), <br/><span class="NDLSystemFont"><a href="../efd/efd__ParameterList.htm">efd::ParameterList</a></span>* pInitialProperties = 0)</p>
<p class="NDLRefMemberDescription">Begin the creation of a new entity and add it to the local simulator once created. </p>
<p class="NDLRefMemberDetailedDescription">The process of creating a new entity is asynchronous. This call will immediately return the future entity's ID but that entity may not exist yet so it is not generally valid to immediate use the resulting value in other built-in API calls.</p>
<p class="NDLRefMemberDetailedDescription">The caller can be notified when the entity is ready by providing the name of a callback behavior. This behavior will be called once the entity is fully available; it should expect a data stream with two values: the original <span class="NDLSystemFont"><a href="../efd/EntityID.htm">EntityID</a></span> returned by this function and a boolean indicating whether the creation was successful.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">You can control whether or not the created entity automatically enters the world following the completion of its initial lifecycle behaviors by adding a boolean parameter named "AutoEnterWorld" to the pCreationParams parameter list.</p>
<p class="NDLRefMemberDetailedDescription">Other options for creating an entity include <span class="NDLSystemFont"><a href="../Namespaces/BehaviorAPI.htm#namespace_behavior_a_p_i_1ad48c8c4be049f5f341a4425b8bf7a609">BehaviorAPI.SpawnEntity</a></span>, which requires the flat model to be preloaded, and BehaviorAPI.CreateEntityAndWait which blocks until all creation lifecycles complete on the new entity.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">modelName</span></td>
    <td>Name of the flat model to create an instance of </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pCreationParams</span></td>
    <td>An optional parameter list passed to OnCreate behavior. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">callbackBehavior</span></td>
    <td>The optional name of a callback behavior that is invoked once the entity is created. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pInitialProperties</span></td>
    <td>An optional parameter list containing property values that are transfered to the created entity before it has OnCreate called. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td><span class="NDLSystemFont"><a href="../efd/EntityID.htm">EntityID</a></span> of the Entity that will be created. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1ad48c8c4be049f5f341a4425b8bf7a609"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY <span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span>  SpawnEntity(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& modelName, <br/><span class="NDLSystemFont"><a href="../efd/efd__ParameterList.htm">efd::ParameterList</a></span>* pCreationParams = 0)</p>
<p class="NDLRefMemberDescription">Immediately create a new entity and add it to the local simulator. </p>
<p class="NDLRefMemberDetailedDescription">In order for this operation to work the flat model specified must have been previously loaded. The returned entity will be fully allocated with all properties initialized to the flat model default values but it will not yet have run it's OnCreate behavior. You may immediately begin setting properties on the resulting entity, but keep in mind that some of these properties could be overridden once the OnCreate behavior runs on the entity. For the same reason be careful immediately reading properties from the entity as the default values may be overridden. Finally, keep in mind that the loading of assets such the NIF, KFM or sound data will still be performed asynchronously so you cannot immediately pass the resulting entity to built-in API methods that require this data already be loaded.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">Flat models can be preloaded by calling <span class="NDLSystemFont"><a href="../egf/egf__FlatModelManager.htm#classegf_1_1_flat_model_manager_1a5ce09536ca5c3ff44cb443a248b66d00">egf::FlatModelManager::PreloadModel</a></span>. If a block will load entities with behaviors that call SpawnEntity then the required models should be preloaded before the block is loaded.</p>
<p class="NDLRefMemberDetailedDescription">You can control whether or not the created entity automatically enters the world following the completion of its initial life cycle behaviors by adding a boolean parameter named "AutoEnterWorld" to the pCreationParams parameter list. However, any calls to EnterWorld or ExitWorld made immediately after SpawnEntity will override this setting.</p>
<p class="NDLRefMemberDetailedDescription">Other options for creating an entity include <span class="NDLSystemFont"><a href="../Namespaces/BehaviorAPI.htm#namespace_behavior_a_p_i_1ac9bc1e9e5c1fd4fa81ed8782cbcb3087">BehaviorAPI.CreateEntity</a></span> and BehaviorAPI.CreateEntityAndWait. Those other options do not require pre-loading of the flat model.</p>
<p class="NDLRefMemberDetailedDescription">If a call is made to SpawnEntity for a flat model that is not already loaded the call to SpawnEntity will fail and no entity will be created. However SpawnEntity will attempt to cache the specified flat model for furture use when this happens. As a result, failure to precache the required flat models may only cause the first few spawn attempts to fail, which could go unnoticed depending on the application and entity in question. Be sure to check your log output for error messages related to entity spawning to ensure the proper data is being precached.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">modelName</span></td>
    <td>Name of the flat model to create an instance of. This model must already be completely loaded prior to making this call. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pCreationParams</span></td>
    <td>An optional parameter list passed to OnCreate behavior. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td><span class="NDLSystemFont"><a href="../efd/EntityID.htm">EntityID</a></span> of the Entity that will be created, or 0 if the specified flat model is not already loaded. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1a2641174874f3469e2c384caefa6ac273"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY <span class="NDLSystemFont">bool</span>  DestroyEntity(<span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span> id)</p>
<p class="NDLRefMemberDescription">Request the destruction of an entity and invocation of an OnDestroy behavior, if it exists. </p>
<p class="NDLRefMemberDetailedDescription">Destroying an entity will invoke the OnDestroy behavior if present, and when that behavior completes (or if its not found), will then remove the entity.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">id</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/EntityID.htm">EntityID</a></span> to destroy </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>boolean true for success </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1aedc34354784ec264f8d273f8ee0b51c4"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY <span class="NDLSystemFont">bool</span>  EntityEnterWorld(<span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span> id)</p>
<p class="NDLRefMemberDescription">Request the specified entity enter the world. </p>
<p class="NDLRefMemberDetailedDescription">This will cause the OnEnterWorld behavior, if it exists to be called.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">id</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/EntityID.htm">EntityID</a></span> to ask to enter the world </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>boolean true for success </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1a86d7f728a3ed6c63482f0890f4771f45"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY <span class="NDLSystemFont">bool</span>  EntityExitWorld(<span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span> id)</p>
<p class="NDLRefMemberDescription">Request the specified entity exit the world. </p>
<p class="NDLRefMemberDetailedDescription">This will cause the OnExitWorld behavior, if it exists to be called.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">id</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/EntityID.htm">EntityID</a></span> to ask to exit the world </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>boolean true for success </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1a81781d21579563c44e1c3a49052d5a1b"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY <span class="NDLSystemFont">bool</span>  IsEntityInWorld(<span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span> id)</p>
<p class="NDLRefMemberDescription">Check to see if the specified entity is in the world. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">id</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/EntityID.htm">EntityID</a></span> to ask if it is in the world </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>boolean true if entity exists and is in the world, false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1a21ad842795f493fa367e13d1476afa47"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  IncrementProperty(<br/><span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span> id, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& propName)</p>
<p class="NDLRefMemberDescription">Increments a UInt32 property. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">id</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/EntityID.htm">EntityID</a></span> of the Entity the property belongs to </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">propName</span></td>
    <td>Name of the property to increment </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> value is the incremented property value, a return value of 0 indicates a failure </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1a8c4d817da5b79a351136e5d95a707706"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  DecrementProperty(<br/><span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span> id, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& propName)</p>
<p class="NDLRefMemberDescription">Decrements a UInt32 property by one and returns the new value. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">id</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/EntityID.htm">EntityID</a></span> of the Entity the property belongs to </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">propName</span></td>
    <td>Name of the property to decrement </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> value is the decremented property value, a return value of 0 may indicate a failure </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespace_behavior_a_p_i_1a93eaa8bc2bde31daf92786b72ab7bc87"></a>
<p class="NDLRefMemberFunction">EE_EGF_ENTRY <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  SwapProperty(<br/><span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span> id, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& propName, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> newValue)</p>
<p class="NDLRefMemberDescription">Changes a UInt32 property value, returning the old value. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">id</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/EntityID.htm">EntityID</a></span> of the Entity the property belongs to </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">propName</span></td>
    <td>Name of the property to change </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">newValue</span></td>
    <td>New property value </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> value equal to the old value of this property, a return of 0 may indicate a failure </td>
</tr>

        </tbody>
    </table>
</div>


 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
