<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::Serializer Namespace</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::Serializer Namespace</p>





<a name="private_methods"></a>
<p class="NDLRefHead1">Private Methods</p>


<a name="namespaceefd_1_1_serializer_1a63e0b99047011bde53be44786ab9ee7b"></a>
<p class="NDLRefMemberFunction">template &lt;typename T  &gt; void  SerializeObject(<br/>T& io_object, <br/><span class="NDLSystemFont"><a href="../efd/efd__Archive.htm">efd::Archive</a></span>& io_archive)</p>
<p class="NDLRefMemberDescription">By default you can serialize any object that implements a "Serialize" function. </p>
<p class="NDLRefMemberDetailedDescription">This allows objects to marshal themselves without needing to change code outside the object. It also makes it easy to write generic code that marshals unknown types since any type should be passable to SerializeObject. The only objects that should not be passed to this method are container types that should use serialization behaviors instead.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">io_object</span></td>
    <td>the object to be serialized. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">io_archive</span></td>
    <td>The archive for serializing the data </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceefd_1_1_serializer_1a06f1f076c34c57e148d9bc5393c35afc"></a>
<p class="NDLRefMemberFunction">template &lt;typename T  &gt; void  SerializeConstObject(<br/>const T& io_object, <br/><span class="NDLSystemFont"><a href="../efd/efd__Archive.htm">efd::Archive</a></span>& io_archive)</p>
<p class="NDLRefMemberDescription">Constant objects can be packed but not unpacked. </p>
<p class="NDLRefMemberDetailedDescription">Even though the goal of this marshaling system is to pack and unpack using the exact same function sometimes you may need to deviate from that with separate const packing and non-const unpacking code branches.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">io_object</span></td>
    <td>the object to be serialized. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">io_archive</span></td>
    <td>The archive for serializing the data </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceefd_1_1_serializer_1a8b19a39adf56e4ac7feacebbe0691992"></a>
<p class="NDLRefMemberFunction">template &lt;typename T  &gt; void  SerializePrimitive(<br/>T& i_primitive, <br/><span class="NDLSystemFont"><a href="../efd/efd__Archive.htm">efd::Archive</a></span>& io_archive)</p>
<p class="NDLRefMemberDescription">For serializing plain-old-data types (integers, floats, enums). </p>
<p class="NDLRefMemberDetailedDescription">The data is byte swapped between the archive endianness and the hardware endianness as needed.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_primitive</span></td>
    <td>the primitive type data to serialize. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">io_archive</span></td>
    <td>The archive for serializing the data </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceefd_1_1_serializer_1acb8e029325afb4139c4c80b448adf669"></a>
<p class="NDLRefMemberFunction">void  SerializeRawBytes(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a59a3838ab5cdfe87f98f5b8371e4e91d">efd::UInt8</a></span>* i_pData, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> i_cbData, <br/><span class="NDLSystemFont"><a href="../efd/efd__Archive.htm">efd::Archive</a></span>& io_archive)</p>
<p class="NDLRefMemberDescription">Simply memcpy some bytes into or out of the archive. </p>
<p class="NDLRefMemberDetailedDescription">i_pData must point to at least i_cbData bytes worth of storage or this can crash. This differs from SerializePrimitive in that it doesn't address endianness of the data. The caller is responsible for ensuring that endianness is correctly handled; if you will transfer the resulting buffer between hardware with different endianness it is recommended that the raw data be in network byte order (for example, it could be the contents of a previously marshaled archive).</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_pData</span></td>
    <td>the data buffer which must point to at least i_cbData bytes. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_cbData</span></td>
    <td>The size of the buffer (the data must fit within this size) </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">io_archive</span></td>
    <td>The archive for serializing the data </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceefd_1_1_serializer_1a6e967b30595054d6333ba65fe8a54189"></a>
<p class="NDLRefMemberFunction">void  SerializeStringBuffer(<br/>char* io_string, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> i_bufferSize, <br/><span class="NDLSystemFont"><a href="../efd/efd__Archive.htm">efd::Archive</a></span>& io_archive)</p>
<p class="NDLRefMemberDescription">Serialize method for NULL terminated string buffers of known max size. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">io_string</span></td>
    <td>the string buffer which must point to at least i_bufferSize characters. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_bufferSize</span></td>
    <td>The size of the buffer (the string must fit within this size) </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">io_archive</span></td>
    <td>The archive for serializing the data </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceefd_1_1_serializer_1ad4b3e0668733a3eadc898f538a7ab86d"></a>
<p class="NDLRefMemberFunction">template &lt;typename T  &gt; void  SerializeMagicValue(<br/>const T& i_object, <br/><span class="NDLSystemFont"><a href="../efd/efd__Archive.htm">efd::Archive</a></span>& io_archive)</p>
<p class="NDLRefMemberDescription">This behavior is for placing sentinel values into an archive. </p>
<p class="NDLRefMemberDetailedDescription">A sentinel is just a known constant value; sometimes it is helpful for debugging purposes to stick an easily identifiable marker into the archive. When unpacking, if the value in the stream does not exactly match the sentinel value then an error is raised. You could also think of this value as being a version number if only a single version is supported at run-time.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_object</span></td>
    <td>the value to be serialized. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">io_archive</span></td>
    <td>The archive for serializing the data </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceefd_1_1_serializer_1a6516282461bb1562f111d419a7f73d8d"></a>
<p class="NDLRefMemberFunction">template &lt;&gt; void  SerializeObject&lt;efd::SInt8&gt;(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a02da74c5f95666d41c684efde9efcd88">efd::SInt8</a></span>& io_object, <br/><span class="NDLSystemFont"><a href="../efd/efd__Archive.htm">efd::Archive</a></span>& io_archive)</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1_1_serializer_1a85d83002da8c0264920e3b5f2fb02574"></a>
<p class="NDLRefMemberFunction">template &lt;&gt; void  SerializeObject&lt;efd::SInt16&gt;(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a78e418e4217f674682471407609a8aa8">efd::SInt16</a></span>& io_object, <br/><span class="NDLSystemFont"><a href="../efd/efd__Archive.htm">efd::Archive</a></span>& io_archive)</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1_1_serializer_1ac4b5775903adac7bd238b48e83e97669"></a>
<p class="NDLRefMemberFunction">template &lt;&gt; void  SerializeObject&lt;efd::SInt32&gt;(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>& io_object, <br/><span class="NDLSystemFont"><a href="../efd/efd__Archive.htm">efd::Archive</a></span>& io_archive)</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1_1_serializer_1a69a95ccff8efd8a8a33a31ca07d6bd75"></a>
<p class="NDLRefMemberFunction">template &lt;&gt; void  SerializeObject&lt;efd::SInt64&gt;(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a31570c844c29f8e0f335ac87dcb55401">efd::SInt64</a></span>& io_object, <br/><span class="NDLSystemFont"><a href="../efd/efd__Archive.htm">efd::Archive</a></span>& io_archive)</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1_1_serializer_1a5a990de73f6ed05563bbbf71365c9e3a"></a>
<p class="NDLRefMemberFunction">template &lt;&gt; void  SerializeObject&lt;efd::UInt8&gt;(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a59a3838ab5cdfe87f98f5b8371e4e91d">efd::UInt8</a></span>& io_object, <br/><span class="NDLSystemFont"><a href="../efd/efd__Archive.htm">efd::Archive</a></span>& io_archive)</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1_1_serializer_1a4e100775923123c6ca0d4e978ba513db"></a>
<p class="NDLRefMemberFunction">template &lt;&gt; void  SerializeObject&lt;efd::UInt16&gt;(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span>& io_object, <br/><span class="NDLSystemFont"><a href="../efd/efd__Archive.htm">efd::Archive</a></span>& io_archive)</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1_1_serializer_1a509886ddc6f2d28efa3a9f8d309b17c3"></a>
<p class="NDLRefMemberFunction">template &lt;&gt; void  SerializeObject&lt;efd::UInt32&gt;(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>& io_object, <br/><span class="NDLSystemFont"><a href="../efd/efd__Archive.htm">efd::Archive</a></span>& io_archive)</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1_1_serializer_1ab6e32f1150377b83dfe35862d1aa205d"></a>
<p class="NDLRefMemberFunction">template &lt;&gt; void  SerializeObject&lt;efd::UInt64&gt;(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a845df149ec80fc0bf36f875ece09ef9d">efd::UInt64</a></span>& io_object, <br/><span class="NDLSystemFont"><a href="../efd/efd__Archive.htm">efd::Archive</a></span>& io_archive)</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1_1_serializer_1a3aed745c656e0334c8997392c859d78d"></a>
<p class="NDLRefMemberFunction">template &lt;&gt; void  SerializeObject&lt;efd::Float32&gt;(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>& io_object, <br/><span class="NDLSystemFont"><a href="../efd/efd__Archive.htm">efd::Archive</a></span>& io_archive)</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1_1_serializer_1a09e3a8656a6f9e009874252038866601"></a>
<p class="NDLRefMemberFunction">template &lt;&gt; void  SerializeObject&lt;efd::Float64&gt;(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aff0a9e9ca8001b330091eb01eeb190c2">efd::Float64</a></span>& io_object, <br/><span class="NDLSystemFont"><a href="../efd/efd__Archive.htm">efd::Archive</a></span>& io_archive)</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1_1_serializer_1ac09842ed41eaa96f60296b9ae583ae83"></a>
<p class="NDLRefMemberFunction">template &lt;&gt; void  SerializeObject&lt;bool&gt;(<br/><span class="NDLSystemFont">bool</span>& io_bool, <br/><span class="NDLSystemFont"><a href="../efd/efd__Archive.htm">efd::Archive</a></span>& io_archive)</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1_1_serializer_1a4b291a9553572487420409d8333eca9d"></a>
<p class="NDLRefMemberFunction">template &lt;typename CHAR_TYPE  &gt; void  SerializeStringHelperObject(<br/>efd::basic_string&lt;CHAR_TYPE&gt;& io_str, <br/><span class="NDLSystemFont"><a href="../efd/efd__Archive.htm">efd::Archive</a></span>& io_archive)</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1_1_serializer_1a7e78df82174c4e7a1521ba7b07b654e8"></a>
<p class="NDLRefMemberFunction">template &lt;&gt; void  SerializeObject&lt;efd::string&gt;(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ae0512c86b2aade46f2f721a837ec712b">efd::string</a></span>& io_str, <br/><span class="NDLSystemFont"><a href="../efd/efd__Archive.htm">efd::Archive</a></span>& io_archive)</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1_1_serializer_1ace58aa3c11e6c4724af4f6cb1ffec60e"></a>
<p class="NDLRefMemberFunction">template &lt;&gt; void  SerializeObject&lt;efd::wstring&gt;(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a9ee954ff3ce0afa520ebaa47fa7515f3">efd::wstring</a></span>& io_str, <br/><span class="NDLSystemFont"><a href="../efd/efd__Archive.htm">efd::Archive</a></span>& io_archive)</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1_1_serializer_1ab7dcd5f8a6ce7ce100b0bdc459ba7f8b"></a>
<p class="NDLRefMemberFunction">template &lt;&gt; void  SerializeObject&lt;efd::LogServiceResponse::Result&gt;(<br/><span class="NDLSystemFont"><a href="../efdLogService/efd__LogServiceResponse.htm#classefd_1_1_log_service_response_1a6fcb182e2d47cd622cc75c1d2429ce10">efd::LogServiceResponse::Result</a></span>& io_object, <br/><span class="NDLSystemFont"><a href="../efd/efd__Archive.htm">efd::Archive</a></span>& io_archive)</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1_1_serializer_1af51f1472d8bc3d54fbfe06433ab04276"></a>
<p class="NDLRefMemberFunction">template &lt;&gt; void  SerializeObject&lt;NiInputKeyboard::KeyCode&gt;(<br/><span class="NDLSystemFont"><a href="../NiInput/NiInputKeyboard.htm">NiInputKeyboard::KeyCode</a></span>& io_object, <br/><span class="NDLSystemFont"><a href="../efd/efd__Archive.htm">efd::Archive</a></span>& io_archive)</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1_1_serializer_1aff5638076b03b9a9df325ff0584a45bc"></a>
<p class="NDLRefMemberFunction">template &lt;&gt; void  SerializeObject&lt;ecrInput::MouseMessage::MouseButton&gt;(<br/><span class="NDLSystemFont"><a href="../ecrInput/ecrInput__MouseMessage.htm#classecr_input_1_1_mouse_message_1a8dda7b3c0ec3ff2723442fd8efa45413">ecrInput::MouseMessage::MouseButton</a></span>& io_object, <br/><span class="NDLSystemFont"><a href="../efd/efd__Archive.htm">efd::Archive</a></span>& io_archive)</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1_1_serializer_1a3916b2f52e873010c430f7219e9b179a"></a>
<p class="NDLRefMemberFunction">template &lt;&gt; void  SerializeObject&lt;egf::BreakpointResponse::Result&gt;(<br/><span class="NDLSystemFont"><a href="../egf/egf__BreakpointResponse.htm#classegf_1_1_breakpoint_response_1a8a4ce987a22d4d0604dde545fd85ab19">egf::BreakpointResponse::Result</a></span>& io_object, <br/><span class="NDLSystemFont"><a href="../efd/efd__Archive.htm">efd::Archive</a></span>& io_archive)</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1_1_serializer_1a41319690f598765df191503ee1aac8b8"></a>
<p class="NDLRefMemberFunction">template &lt;&gt; void  SerializeObject&lt;egf::EntityLoadRequest::Operation&gt;(<br/><span class="NDLSystemFont"><a href="../egf/egf__EntityLoadRequest.htm#classegf_1_1_entity_load_request_1a3155c5f9ff7ca9dba0192ceece19a8ba">egf::EntityLoadRequest::Operation</a></span>& io_object, <br/><span class="NDLSystemFont"><a href="../efd/efd__Archive.htm">efd::Archive</a></span>& io_archive)</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1_1_serializer_1a13063c707636c97b4a9be1f4f7cd40e4"></a>
<p class="NDLRefMemberFunction">template &lt;&gt; void  SerializeObject&lt;egf::EntityLoadResult::Result&gt;(<br/><span class="NDLSystemFont"><a href="../egf/egf__EntityLoadResult.htm#classegf_1_1_entity_load_result_1a0a16179d3ea9976996affd56c0bc9bd5">egf::EntityLoadResult::Result</a></span>& io_object, <br/><span class="NDLSystemFont"><a href="../efd/efd__Archive.htm">efd::Archive</a></span>& io_archive)</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1_1_serializer_1a484b7b525e6d5150b24f9779940fbae2"></a>
<p class="NDLRefMemberFunction">template &lt;&gt; void  SerializeObject&lt;egf::ModelTraits&gt;(<br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a83b3bc06ad70c82a9b842504cbdb215b">egf::ModelTraits</a></span>& io_object, <br/><span class="NDLSystemFont"><a href="../efd/efd__Archive.htm">efd::Archive</a></span>& io_archive)</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1_1_serializer_1ace5b7ad8b708245c35bb69701b76eed5"></a>
<p class="NDLRefMemberFunction">template &lt;&gt; void  SerializeObject&lt;egf::PropertyTraits&gt;(<br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a69cd9800e69656c6a80714df8b9063f7">egf::PropertyTraits</a></span>& io_object, <br/><span class="NDLSystemFont"><a href="../efd/efd__Archive.htm">efd::Archive</a></span>& io_archive)</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1_1_serializer_1a9346b2fed88ac64195a4d71a14bbbf02"></a>
<p class="NDLRefMemberFunction">template &lt;&gt; void  SerializeObject&lt;egf::BehaviorTraits&gt;(<br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1abf8d69206060e54cf50700e7704ddd3a">egf::BehaviorTraits</a></span>& io_object, <br/><span class="NDLSystemFont"><a href="../efd/efd__Archive.htm">efd::Archive</a></span>& io_archive)</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1_1_serializer_1ad7bb75373e7cfe0e1ad2f0b491f936c4"></a>
<p class="NDLRefMemberFunction">template &lt;&gt; void  SerializeObject&lt;egf::BehaviorTypes&gt;(<br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1addeb6c47daeb31df2cb1531e64d65df2">egf::BehaviorTypes</a></span>& io_object, <br/><span class="NDLSystemFont"><a href="../efd/efd__Archive.htm">efd::Archive</a></span>& io_archive)</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1_1_serializer_1ac739ec633f6328ba8daf0df39c53acac"></a>
<p class="NDLRefMemberFunction">template &lt;&gt; void  SerializeObject&lt;egfPhysX::CollisionStatus&gt;(<br/><span class="NDLSystemFont"><a href="../Namespaces/egfPhysX.htm#namespaceegf_phys_x_1af94736f8462a9c91cb8d797f3a029e28">egfPhysX::CollisionStatus</a></span>& io_object, <br/><span class="NDLSystemFont"><a href="../efd/efd__Archive.htm">efd::Archive</a></span>& io_archive)</p>
<p class="NDLRefMemberFunction"></p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
