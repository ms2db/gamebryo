<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>egf Namespace</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">egf Namespace</p>





<a name="messagewrappers_from_entitychangemessage.h"></a>
<p class="NDLRefHead1">MessageWrappers from EntityChangeMessage.h</p>


<a name="namespaceegf_1aea975b07f618ea581c411e447b9c2898"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__MessageWrapper.htm">efd::MessageWrapper</a></span>&lt;<span class="NDLSystemFont"><a href="../egf/egf__EntityChangeMessage.htm">EntityChangeMessage</a></span>, efd::kMSGID_OwnedEntityAdded&gt;  OwnedEntityAddedMessage</p>
<p class="NDLRefMemberDescription">A message sent when an entity is added to the <span class="NDLSystemFont"><a href="../egf/egf__EntityManager.htm">EntityManager</a></span>. </p>
<p class="NDLRefMemberDetailedDescription">Message is sent by the <span class="NDLSystemFont"><a href="../egf/egf__EntityManager.htm">EntityManager</a></span> as soon as the new entity completed its OnCreate lifecycle. </p>

<a name="namespaceegf_1a17e62954127ca1e4ff6c9e162aac3c47"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__MessageWrapper.htm">efd::MessageWrapper</a></span>&lt;<span class="NDLSystemFont"><a href="../egf/egf__EntityChangeMessage.htm">EntityChangeMessage</a></span>, efd::kMSGID_OwnedEntityEnterWorld&gt;  OwnedEntityEnterWorldMessage</p>
<p class="NDLRefMemberDescription">A message sent when an entity enters the world. </p>

<a name="namespaceegf_1a102f4864ebe28bddbe186cb6d1893d4c"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__MessageWrapper.htm">efd::MessageWrapper</a></span>&lt;<span class="NDLSystemFont"><a href="../egf/egf__EntityChangeMessage.htm">EntityChangeMessage</a></span>, efd::kMSGID_OwnedEntityUpdated&gt;  OwnedEntityUpdatedMessage</p>
<p class="NDLRefMemberDescription">A message sent when properties of an entity are modified. </p>
<p class="NDLRefMemberDetailedDescription">Sent no more than once per tick by the <span class="NDLSystemFont"><a href="../egf/egf__EntityManager.htm">EntityManager</a></span> service. </p>
<p class="NDLRefMemberDetailedDescription">Making further property changes to the entity while handling this message is not recommended as any properties changed during the handling of this message will not result in a future update message. This means the update might go unnoticed by other services. </p>

<a name="namespaceegf_1a09f8dcf6a5fc8d90b6b44f3f408cd7e2"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__MessageWrapper.htm">efd::MessageWrapper</a></span>&lt;<span class="NDLSystemFont"><a href="../egf/egf__EntityChangeMessage.htm">EntityChangeMessage</a></span>, efd::kMSGID_OwnedEntityExitWorld&gt;  OwnedEntityExitWorldMessage</p>
<p class="NDLRefMemberDescription">A message sent when an entity exits the world. </p>

<a name="namespaceegf_1ad418e2d1f799ec3f54e134927a08d67c"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__MessageWrapper.htm">efd::MessageWrapper</a></span>&lt;<span class="NDLSystemFont"><a href="../egf/egf__EntityChangeMessage.htm">EntityChangeMessage</a></span>, efd::kMSGID_OwnedEntityRemoved&gt;  OwnedEntityRemovedMessage</p>
<p class="NDLRefMemberDescription">A message sent by the <span class="NDLSystemFont"><a href="../egf/egf__EntityManager.htm">EntityManager</a></span> when an entity is removed. </p>
<p class="NDLRefMemberDetailedDescription">When handling this message you can still access the entity, read its properties, and call immediate behaviors but it is too late to schedule any behaviors on the entity. </p>
<a name="messagewrappers_from_gamepauserequest.h"></a>
<p class="NDLRefHead1">MessageWrappers from GamePauseRequest.h</p>


<a name="namespaceegf_1a488ad3186b8711edc2cdfef5b7c137fc"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__MessageWrapper.htm">efd::MessageWrapper</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__IMessage.htm">efd::IMessage</a></span>, efd::kMSGID_GamePauseRequest&gt;  GamePauseRequest</p>
<p class="NDLRefMemberFunction"></p>
<a name="messagewrappers_from_gameresumerequest.h"></a>
<p class="NDLRefHead1">MessageWrappers from GameResumeRequest.h</p>


<a name="namespaceegf_1adbe16023d3f7a5e4879630e697f7528e"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__MessageWrapper.htm">efd::MessageWrapper</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__IMessage.htm">efd::IMessage</a></span>, efd::kMSGID_GameResumeRequest&gt;  GameResumeRequest</p>
<p class="NDLRefMemberFunction"></p>
<a name="messagewrappers_from_worldresetrequest.h"></a>
<p class="NDLRefHead1">MessageWrappers from WorldResetRequest.h</p>


<a name="namespaceegf_1a17414ce19d9074b836ad7ee1adfa1b8b"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__MessageWrapper.htm">efd::MessageWrapper</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__IMessage.htm">efd::IMessage</a></span>, efd::kMSGID_WorldResetRequest&gt;  WorldResetRequest</p>
<p class="NDLRefMemberFunction"></p>
<a name="properties_from_utilityproperties.h"></a>
<p class="NDLRefHead1">Properties from UtilityProperties.h</p>


<a name="namespaceegf_1aae28ffc4e48dbd5dd64b0d67dbc35915"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../egf/egf__TPropertyScalar.htm">egf::TPropertyScalar</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__Point2.htm">efd::Point2</a></span>, efd::kPropID_Point2&gt;  Point2ScalarProperty</p>
<p class="NDLRefMemberDescription">Macro to create Point2 scalar property. </p>

<a name="namespaceegf_1a3b86f5ef159b814de20fa9cb0e9c3114"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../egf/egf__TPropertyAssoc.htm">egf::TPropertyAssoc</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__Point2.htm">efd::Point2</a></span>, efd::kPropID_Point2AssocArray&gt;  Point2AssocProperty</p>
<p class="NDLRefMemberDescription">Macro to create Point2 associative array property. </p>

<a name="namespaceegf_1a5210840dd672b03a19939bbeea3ffdd4"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../egf/egf__TPropertyScalar.htm">egf::TPropertyScalar</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__Point3.htm">efd::Point3</a></span>, efd::kPropID_Point3&gt;  Point3ScalarProperty</p>
<p class="NDLRefMemberDescription">Macro to create Point3 scalar property. </p>

<a name="namespaceegf_1aaa4291b670c15ae6274df358282d693e"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../egf/egf__TPropertyAssoc.htm">egf::TPropertyAssoc</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__Point3.htm">efd::Point3</a></span>, efd::kPropID_Point3AssocArray&gt;  Point3AssocProperty</p>
<p class="NDLRefMemberDescription">Macro to create Point3 associative array property. </p>

<a name="namespaceegf_1ac4d2c1759c0f382e902fc8a78e0c5e06"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../egf/egf__TPropertyScalar.htm">egf::TPropertyScalar</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__Matrix3.htm">efd::Matrix3</a></span>, efd::kPropID_Matrix3&gt;  Matrix3ScalarProperty</p>
<p class="NDLRefMemberDescription">Macro to create Matrix3 scalar property. </p>

<a name="namespaceegf_1a5b58537219806c81235bb97b9bf94e9c"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../egf/egf__TPropertyAssoc.htm">egf::TPropertyAssoc</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__Matrix3.htm">efd::Matrix3</a></span>, efd::kPropID_Matrix3AssocArray&gt;  Matrix3AssocProperty</p>
<p class="NDLRefMemberDescription">Macro to create Matrix3 associative array property. </p>

<a name="namespaceegf_1a40b1d0eece8ef4e3675b680010b84acd"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../egf/egf__TPropertyScalar.htm">egf::TPropertyScalar</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__Color.htm">efd::Color</a></span>, efd::kPropID_Color&gt;  ColorScalarProperty</p>
<p class="NDLRefMemberDescription">Macro to create Color scalar property. </p>

<a name="namespaceegf_1ac55d1968fa759940966a2f6e0f126803"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../egf/egf__TPropertyAssoc.htm">egf::TPropertyAssoc</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__Color.htm">efd::Color</a></span>, efd::kPropID_ColorAssocArray&gt;  ColorAssocProperty</p>
<p class="NDLRefMemberDescription">Macro to create Color associative array property. </p>

<a name="namespaceegf_1aec72b70d6f56663fcb7b002116533bbd"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../egf/egf__TPropertyScalar.htm">egf::TPropertyScalar</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__ColorA.htm">efd::ColorA</a></span>, efd::kPropID_ColorA&gt;  ColorAScalarProperty</p>
<p class="NDLRefMemberDescription">Macro to create ColorA scalar property. </p>

<a name="namespaceegf_1aa44f80e61f05795e8d8226c9b4a9c7cd"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../egf/egf__TPropertyAssoc.htm">egf::TPropertyAssoc</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__ColorA.htm">efd::ColorA</a></span>, efd::kPropID_ColorAAssocArray&gt;  ColorAAssocProperty</p>
<p class="NDLRefMemberDescription">Macro to create ColorA associative array property. </p>

<a name="namespaceegf_1a87745de779709c89b03500bdca998eee"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../egf/egf__TPropertyScalar.htm">egf::TPropertyScalar</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__AssetID.htm">efd::AssetID</a></span>, efd::kPropID_AssetID&gt;  AssetIDScalarProperty</p>
<p class="NDLRefMemberDescription">Macro to create Asset scalar property. </p>

<a name="namespaceegf_1a921acee7816df851c7c06e775915f990"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../egf/egf__TPropertyAssoc.htm">egf::TPropertyAssoc</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__AssetID.htm">efd::AssetID</a></span>, efd::kPropID_AssetIDAssocArray&gt;  AssetIDAssocProperty</p>
<p class="NDLRefMemberDescription">Macro to create Asset associative array property. </p>

<a name="namespaceegf_1a2af27652f0bbcdca3fc483ac1c90697c"></a>
<p class="NDLRefMemberFunction">void  RegisterUtilityPropFactories(class <span class="NDLSystemFont"><a href="../egf/egf__FlatModelManager.htm">FlatModelManager</a></span>* i_pfmm)</p>
<p class="NDLRefMemberDescription">Register property factories for various basic property types. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_pfmm</span></td>
    <td>pointer to <span class="NDLSystemFont"><a href="../egf/egf__FlatModelManager.htm">FlatModelManager</a></span></td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceegf_1a4ae28807633a83dc0f5d9aa130e68950"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../egf/egf__IProperty.htm">egf::IProperty</a></span>*  Point2ScalarPropertyFactory()</p>
<p class="NDLRefMemberDescription">Macro to create Point2 scalar property. </p>

<a name="namespaceegf_1a4e5f965453fbac38b60f45d08a1fb45a"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../egf/egf__IProperty.htm">egf::IProperty</a></span>*  Point2AssocPropertyFactory()</p>
<p class="NDLRefMemberDescription">Macro to create Point2 scalar property. </p>

<a name="namespaceegf_1abcb7f218444293be1730cff7cfc5a249"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../egf/egf__IProperty.htm">egf::IProperty</a></span>*  Point3ScalarPropertyFactory()</p>
<p class="NDLRefMemberDescription">Macro to create Point2 scalar property. </p>

<a name="namespaceegf_1a1d748db8a8049bd53f15080abe6148dc"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../egf/egf__IProperty.htm">egf::IProperty</a></span>*  Point3AssocPropertyFactory()</p>
<p class="NDLRefMemberDescription">Macro to create Point2 scalar property. </p>

<a name="namespaceegf_1a050b7d3fcd1d4f41406c00c8e1820a08"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../egf/egf__IProperty.htm">egf::IProperty</a></span>*  Matrix3ScalarPropertyFactory()</p>
<p class="NDLRefMemberDescription">Macro to create Point2 scalar property. </p>

<a name="namespaceegf_1aae39843429779538dafef88013e080bc"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../egf/egf__IProperty.htm">egf::IProperty</a></span>*  Matrix3AssocPropertyFactory()</p>
<p class="NDLRefMemberDescription">Macro to create Point2 scalar property. </p>

<a name="namespaceegf_1a2543333c369b17a95c747d0d092c7684"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../egf/egf__IProperty.htm">egf::IProperty</a></span>*  ColorScalarPropertyFactory()</p>
<p class="NDLRefMemberDescription">Macro to create Point2 scalar property. </p>

<a name="namespaceegf_1ae10d79dd88b7e5895211480132236319"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../egf/egf__IProperty.htm">egf::IProperty</a></span>*  ColorAssocPropertyFactory()</p>
<p class="NDLRefMemberDescription">Macro to create Point2 scalar property. </p>

<a name="namespaceegf_1ae0c1a251375a91d52184bc973a83d3fc"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../egf/egf__IProperty.htm">egf::IProperty</a></span>*  ColorAScalarPropertyFactory()</p>
<p class="NDLRefMemberDescription">Macro to create Point2 scalar property. </p>

<a name="namespaceegf_1a5ad7b11a9886796657ea69a1561702eb"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../egf/egf__IProperty.htm">egf::IProperty</a></span>*  ColorAAssocPropertyFactory()</p>
<p class="NDLRefMemberDescription">Macro to create Point2 scalar property. </p>

<a name="namespaceegf_1a7fa7e8f7c4c355e24036fa93c7f6570b"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../egf/egf__IProperty.htm">egf::IProperty</a></span>*  AssetIDScalarPropertyFactory()</p>
<p class="NDLRefMemberDescription">Macro to create Point2 scalar property. </p>

<a name="namespaceegf_1ace3d95d421d35253b7e41c529fd60364"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../egf/egf__IProperty.htm">egf::IProperty</a></span>*  AssetIDAssocPropertyFactory()</p>
<p class="NDLRefMemberDescription">Macro to create Point2 scalar property. </p>
<a name="definitions_from_entitytypes.h"></a>
<p class="NDLRefHead1">Definitions from EntityTypes.h</p>
<a name="namespaceegf_1a83b3bc06ad70c82a9b842504cbdb215b"></a>
<p class=NDLRefHead2>egf::ModelTraits</p>


<p class="NDLRefMemberDescription">Model Traits enum. </p>

<p class="NDLRefMemberDetailedDescription">These are used by <span class="NDLSystemFont"><a href="../egf/egf__FlatModel.htm">FlatModel</a></span> and <span class="NDLSystemFont"><a href="../egf/egf__BuiltinModelDescriptor.htm">BuiltinModelDescriptor</a></span>. Each value must be a power of 2. </p>

<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">ModelTrait_None</span></td>
    <td>The value when no traits have been set. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">ModelTrait_Active</span></td>
    <td>The model is expected to run behaviors (is active). </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">ModelTrait_BuiltinModel</span></td>
    <td>The model represents an <span class="NDLSystemFont"><a href="../egf/egf__IBuiltinModel.htm">IBuiltinModel</a></span> implementation that should be created on the owned instance of the entity. Any properties added to this model will be built-in properties exported from the <span class="NDLSystemFont"><a href="../egf/egf__IBuiltinModel.htm">IBuiltinModel</a></span> implementation. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">ModelTrait_ReplicaBuiltinModel</span></td>
    <td>The model represents an <span class="NDLSystemFont"><a href="../egf/egf__IBuiltinModel.htm">IBuiltinModel</a></span> implementation that should be created on the replicated instances of this entity. This trait can be combined with BuiltinModel to use a built-in model for both producers and consumers. This trait has no effect when replication is not being used. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">ModelTrait_ServerOnlyReplicaBuiltinModel</span></td>
    <td>The model is a built-in model for replicated entities on the server and a normal model on clients. Must be combined with ReplicaBuiltinModel. The <span class="NDLSystemFont"><a href="../efd/efd__ServiceManager.htm">efd::ServiceManager</a></span> program type must be set to indicate whether the process is considered a server. Eventually the tools will create separate versions of the model data for client and server which will make this trait obsolete. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">ModelTrait_ClientOnlyReplicaBuiltinModel</span></td>
    <td>The model is a built-in model for replicated entities on clients. Must be combined with ReplicaBuiltinModel. The <span class="NDLSystemFont"><a href="../efd/efd__ServiceManager.htm">efd::ServiceManager</a></span> program type must be set to indicate whether the process is considered a client. Eventually the tools will create separate versions of the model data for client and server which will make this trait obsolete. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">ModelTrait_ServerOnlyBuiltinModel</span></td>
    <td>The model is a built-in model on the server and a normal model on clients. Must be combined with BuiltinModel. The <span class="NDLSystemFont"><a href="../efd/efd__ServiceManager.htm">efd::ServiceManager</a></span> program type must be set to indicate whether the process is considered a server. Eventually the tools will create separate versions of the model data for client and server which will make this trait obsolete. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">ModelTrait_ClientOnlyBuiltinModel</span></td>
    <td>The model is a built-in model on clients and a normal model on the server. Must be combined with BuiltinModel. The <span class="NDLSystemFont"><a href="../efd/efd__ServiceManager.htm">efd::ServiceManager</a></span> program type must be set to indicate whether the process is considered a client. Eventually the tools will create separate versions of the model data for client and server which will make this trait obsolete. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">ModelTrait_ToolBuiltinModel</span></td>
    <td>I'm a built-in model even when run inside a tool. Normally nothing is a built-in model when run inside a tool even if the client and server traits otherwise match. It should be very rare to use this trait as requiring built-in models inside a tool can create difficult dependencies. Must be combined with ModelTrait_BuiltinModel. </td>
</tr>

  </tbody>
</table>
</div>

<a name="namespaceegf_1a69cd9800e69656c6a80714df8b9063f7"></a>
<p class=NDLRefHead2>egf::PropertyTraits</p>


<p class="NDLRefMemberDescription">Traits of a property, used by <span class="NDLSystemFont"><a href="../egf/egf__PropertyDescriptor.htm">PropertyDescriptor</a></span>. Each value must be a power of 2. </p>


<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">PropertyTrait_None</span></td>
    <td>The value when no traits have been set. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">PropertyTrait_ReadOnly</span></td>
    <td>Can only be read, not written to. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">PropertyTrait_Private</span></td>
    <td>Only available on the original entity, not on replicas. 
<p class="NDLNormal">This trait is not yet implemented so it currently does nothing. </p></td>
</tr>
<tr>
    <td><span class="NDLSystemFont">PropertyTrait_Persisted</span></td>
    <td>Must be persisted to the database when the entity is stored. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">PropertyTrait_FromBuiltinModel</span></td>
    <td>The property is exported from a built-in model which is responsible for its in-memory storage. 
<p class="NDLNormal">The default value is still stored as an <span class="NDLSystemFont"><a href="../egf/egf__IProperty.htm">IProperty</a></span>. </p></td>
</tr>
<tr>
    <td><span class="NDLSystemFont">PropertyTrait_FromReplicaBuiltinModel</span></td>
    <td>The property is exported from a replica built-in model which is responsible for its in-memory storage. 
<p class="NDLNormal">The default value is still stored as an <span class="NDLSystemFont"><a href="../egf/egf__IProperty.htm">IProperty</a></span>. </p></td>
</tr>
<tr>
    <td><span class="NDLSystemFont">PropertyTrait_Mutable</span></td>
    <td>Can be written to when not owned. This does not override ReadOnly but it does allow properties to be written on replicated entities. Note that changes to a replicated entity are local only and will NOT be updated on other replicated copies of the entity or synchronized back to the original entity. A Mutable property can be written to as normal when it is owned and such updates will replicate as normal which will over write any changes made to the mutable copy. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">PropertyTrait_ServerOnly</span></td>
    <td>This property is for use by the server only. It will be completely stripped from the client's view. ServerOnly properties can reflect to other servers but must not be reflected to the client as the client will not understand the property. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">PropertyTrait_ClientOnly</span></td>
    <td>This property is for use by the client only. It will be completely stripped from the server's view. This can be used for client side decorative entities or for mutable properties on reflected entities. </td>
</tr>

  </tbody>
</table>
</div>

<a name="namespaceegf_1abf8d69206060e54cf50700e7704ddd3a"></a>
<p class=NDLRefHead2>egf::BehaviorTraits</p>


<p class="NDLRefMemberDescription">Traits used for BehaviorsDescriptors. Each value must be a power of 2. </p>


<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">BehaviorTrait_None</span></td>
    <td>The value when no traits have been set. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">BehaviorTrait_Private</span></td>
    <td>The behavior can only run on the original entity, not on any replicas of that entity. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">BehaviorTrait_ViewOnly</span></td>
    <td>The behavior can only run in a process that is viewing the entity. To view the entity means that the ReplicationService is consuming a replication category to which this entity is producing a replication group. This often means the behavior will run on a replica of the original entity, but the process containing the original entity may also be viewing the entity. Because this often runs on replica entities view behaviors should only write to mutable properties. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">BehaviorTrait_NoBlock</span></td>
    <td>This behavior will never attempt to block (always executes as a one-shot). Any call to a blocking API will fail. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">BehaviorTrait_Extends</span></td>
    <td>This behavior uses the 'extends' invocation order policy, in which mixed-in implementations of the behavior are also called. The order in which the mixed-in implementations will be invoked is specified in the flat model and depends on the priorities of the mixed-in models. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">BehaviorTrait_Immediate</span></td>
    <td>This behavior is allowed to be Immediately invoked. Immediate also implies NoBlock and the <span class="NDLSystemFont"><a href="../egf/egf__FlatModel.htm">FlatModel</a></span> parser will automatically set NoBlock when it sees this trait. This does not prevent the behavior from being run normally, but this trait is required in order to be called immediately. Be careful not to do too much work in an immediate behavior as it might effect your framerate </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">BehaviorTrait_InWorldOnly</span></td>
    <td>This behavior is only allowed to run when the <span class="NDLSystemFont"><a href="../egf/egf__Entity.htm">Entity</a></span> is in the world. Any attempt to run a behavior with trait before the <span class="NDLSystemFont"><a href="../egf/egf__Entity.htm">Entity</a></span> has entered the world or after the <span class="NDLSystemFont"><a href="../egf/egf__Entity.htm">Entity</a></span> has exited the world will fail. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">BehaviorTrait_ServerExecOnly</span></td>
    <td>Only executed on the server; completely removed on the client. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">BehaviorTrait_ClientExecOnly</span></td>
    <td>Only executed on the client; completely removed on the server. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">BehaviorTrait_RemotelyVisible</span></td>
    <td>If the behavior is BehaviorTrait_ServerExecOnly or BehaviorTrait_ClientExecOnly, and the BehaviorTrait_RemotelyVisible trait is set, then the behavior will have its type switched to Remote on a non-matching program type. This allows the name and ID of the behavior to be mapped in order to pass in an <span class="NDLSystemFont"><a href="../egf/egf__EventMessage.htm">EventMessage</a></span>.Without this trait the default behavior is to completely remove behaviors with a non-matching program type. This trait has no effect unless it is combined with BehaviorTrait_ServerExecOnly or BehaviorTrait_ClientExecOnly. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">BehaviorTrait_Init</span></td>
    <td>This behavior has been initialized; it is for internal use only. </td>
</tr>

  </tbody>
</table>
</div>

<a name="namespaceegf_1addeb6c47daeb31df2cb1531e64d65df2"></a>
<p class=NDLRefHead2>egf::BehaviorTypes</p>


<p class="NDLRefMemberDescription">Behavior execution types. </p>


<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">BehaviorType_Invalid</span></td>
    <td>Invalid behavior execution type. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">BehaviorType_C</span></td>
    <td>"C" code. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">BehaviorType_Cpp</span></td>
    <td>"C++" code. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">BehaviorType_Builtin</span></td>
    <td>Implemented via <span class="NDLSystemFont"><a href="../egf/egf__IBuiltinModel.htm#classegf_1_1_i_builtin_model_1aa742e9731e896603ebcd362968974b50">IBuiltinModel::Dispatch()</a></span>. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">BehaviorType_Remote</span></td>
    <td>Behavior lives remotely; we only know about its name and ID. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">BehaviorType_Virtual</span></td>
    <td>Behavior is not implemented by the current model, but is by a supermodel. The <span class="NDLSystemFont"><a href="../egf/egf__BehaviorDescriptor.htm">BehaviorDescriptor</a></span> will specify an invocation list describing what actual methods are invoked for this behavior. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">BehaviorType_Lua</span></td>
    <td>Lua script. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">BehaviorType_Python</span></td>
    <td>Python script. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">BehaviorType_Abstract</span></td>
    <td>Behavior does not actually exist, but is provided in tools so that mixed-in classes can override. These should not appear in flat models but are stripped out if they do appear. </td>
</tr>

  </tbody>
</table>
</div>



<a name="namespaceegf_1a1df4e70ceef104ead07333c2a8cf0df8"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  FlatModelID</p>
<p class="NDLRefMemberDescription">Unique identifier for <span class="NDLSystemFont"><a href="../egf/egf__FlatModel.htm">FlatModel</a></span> instances. </p>

<a name="namespaceegf_1af08acbbc1a28c9e4ee8dfb501449dc28"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  PropertyID</p>
<p class="NDLRefMemberDescription">Unique identifier for <span class="NDLSystemFont"><a href="../egf/egf__PropertyDescriptor.htm">PropertyDescriptor</a></span> instances. </p>

<a name="namespaceegf_1a1ebd2b58de9ca508c04d80dea3644fcb"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  BehaviorID</p>
<p class="NDLRefMemberDescription">Unique identifier for <span class="NDLSystemFont"><a href="../egf/egf__BehaviorDescriptor.htm">BehaviorDescriptor</a></span> instances. </p>

<a name="namespaceegf_1ad3ffd7e6cf17358c3c13ac683e6425a8"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a1df4e70ceef104ead07333c2a8cf0df8">FlatModelID</a></span>  kFlatModelID_INVALID</p>
<p class="NDLRefMemberDescription">Model Traits enum. </p>
<p class="NDLRefMemberDetailedDescription">These are used by <span class="NDLSystemFont"><a href="../egf/egf__FlatModel.htm">FlatModel</a></span> and <span class="NDLSystemFont"><a href="../egf/egf__BuiltinModelDescriptor.htm">BuiltinModelDescriptor</a></span>. Each value must be a power of 2. </p>

<a name="namespaceegf_1a474c7256e93c6adf2f268e5cddf4d551"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1af08acbbc1a28c9e4ee8dfb501449dc28">PropertyID</a></span>  kPropertyID_INVALID</p>
<p class="NDLRefMemberDescription">Model Traits enum. </p>
<p class="NDLRefMemberDetailedDescription">These are used by <span class="NDLSystemFont"><a href="../egf/egf__FlatModel.htm">FlatModel</a></span> and <span class="NDLSystemFont"><a href="../egf/egf__BuiltinModelDescriptor.htm">BuiltinModelDescriptor</a></span>. Each value must be a power of 2. </p>

<a name="namespaceegf_1a339f69d992943d7d7f49c3731dece05e"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a1ebd2b58de9ca508c04d80dea3644fcb">BehaviorID</a></span>  kBehaviorID_INVALID</p>
<p class="NDLRefMemberDescription">Model Traits enum. </p>
<p class="NDLRefMemberDetailedDescription">These are used by <span class="NDLSystemFont"><a href="../egf/egf__FlatModel.htm">FlatModel</a></span> and <span class="NDLSystemFont"><a href="../egf/egf__BuiltinModelDescriptor.htm">BuiltinModelDescriptor</a></span>. Each value must be a power of 2. </p>
<a name="behavior_timing_methods"></a>
<p class="NDLRefHead1">Behavior Timing Methods</p>


<a name="namespaceegf_1a7a7961f02f1d0aee574cad42110e2d04"></a>
<p class="NDLRefMemberFunction">void  StartBehaviorTimer(<span class="NDLSystemFont"><a href="../egf/egf__PendingBehavior.htm">PendingBehavior</a></span>* )</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceegf_1a7ec6c66dad15df43078ae002ba0d6022"></a>
<p class="NDLRefMemberFunction">void  RestartBehaviorTimer(<span class="NDLSystemFont"><a href="../egf/egf__PendingBehavior.htm">PendingBehavior</a></span>* )</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceegf_1a3052de9d5867710edd3f8f7b78d1716a"></a>
<p class="NDLRefMemberFunction">void  StopBehaviorTimer(<span class="NDLSystemFont"><a href="../egf/egf__PendingBehavior.htm">PendingBehavior</a></span>* )</p>
<p class="NDLRefMemberFunction"></p>
<a name="built-in_functions_from_entitylua.h"></a>
<p class="NDLRefHead1">Built-in functions from EntityLua.h</p>

<p class="NDLRefMemberDescription">The following built-in functions expose methods in the Lua runtime to interact with <span class="NDLSystemFont"><a href="../egf/egf__Entity.htm">egf::Entity</a></span> instances.</p>
<p class="NDLRefMemberDescription">Specifically, you can get / set properties, dump a list of properties, and set a conditional breakpoint on a specific entity from Lua using these built-in functions. They're available in Lua from the <span class="NDLSystemFont"><a href="../Namespaces/BehaviorAPI.htm">BehaviorAPI</a></span> namespace. </p>

<a name="namespaceegf_1ab3e8c48cff2613cbe740335cd4f905d6"></a>
<p class="NDLRefMemberFunction">int  lua_GetProperty(lua_State* L)</p>
<p class="NDLRefMemberDescription">This method returns the specified property for the specified <span class="NDLSystemFont"><a href="../egf/egf__Entity.htm">Entity</a></span>. </p>
<p class="NDLRefMemberDetailedDescription">Arguments to this call are passed on the Lua stack.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<p class="NDLRefMemberDetailedDescription">
<pre>    BehaviorAPI::GetProperty(EntityID, PropertyID, key (optional))
    Args:
      Arg 1: Entity ID
      Arg 2: property ID or name (can be specified as either tPropertyID or string)
      Arg 3 (optional): key for looking up entries in a map property
</pre>
</p>
<p class="NDLRefMemberDetailedDescription">Arguments are popped from the stack, results are push on the stack. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">L</span></td>
    <td>lua_State pointer </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The number of values pushed on to the Lua stack. The number varies by property type. See <span class="NDLSystemFont">bapiLua.h</span> for details of each type.</td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceegf_1ac6166aff0594a7d7e6431f4c8e08933c"></a>
<p class="NDLRefMemberFunction">int  lua_GetDefaultProperty(lua_State* L)</p>
<p class="NDLRefMemberDescription">This method returns the default value of the specified property for specified entity. </p>
<p class="NDLRefMemberDetailedDescription">The default value is the value specified in the flat model and does not reflect any overrides specified in the block file. Arguments to this call are passed on the Lua stack.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<p class="NDLRefMemberDetailedDescription">
<pre>    BehaviorAPI::GetDefaultProperty(EntityID, propertyID, key(optional))
        Args:
            Arg 1: Entity ID
            Arg 2: property ID or name (can be specified as either tPropertyID or string)
            Arg 3 (optional): key for looking up entries in a map property
</pre>
</p>
<p class="NDLRefMemberDetailedDescription">Arguments are popped from the stack, results are push on the stack. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">L</span></td>
    <td>lua_State pointer </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The number of values pushed on to the Lua stack. The number varies by property type. See <span class="NDLSystemFont">bapiLua.h</span> for details of each type.</td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceegf_1aa1a92620cf97616278b8a9be2ccc6dbb"></a>
<p class="NDLRefMemberFunction">int  lua_SetProperty(lua_State* L)</p>
<p class="NDLRefMemberDescription">This method sets the specified property for the specified entity. </p>
<p class="NDLRefMemberDetailedDescription">Arguments to this call are passed on the Lua stack.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<p class="NDLRefMemberDetailedDescription">
<pre>    BehaviorAPI::SetProperty(EntityID, propertyID, key (or nil), value)
        Args:
           Arg 1: Entity ID
           Arg 2: property ID or name (can be specified as either tPropertyID or string)
           Arg 3: key name for map properties (optional)
           Arg 4: new value
</pre>
</p>
<p class="NDLRefMemberDetailedDescription">Results are returned to the Lua stack. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">L</span></td>
    <td>lua_State pointer </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>1, the number of objects pushed on the Lua stack (one result value).</td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceegf_1a391e973435ee9916c5d5a8158cd59cce"></a>
<p class="NDLRefMemberFunction">int  lua_SendAndWaitForReply(lua_State* L)</p>
<p class="NDLRefMemberDescription">This method sends an event and blocks waiting for a response. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<p class="NDLRefMemberDetailedDescription">Arguments are passed on the Lua stack: 
<pre>    BehaviorAPI::SendAndWaitForReply(EntityID, behavior, ParameterList*, delay)
        Args:
           Arg 1: EntityID for the target entity
           Arg 2: String containing the behavior name to call
           Arg 3: (optional) ParameterList* containing arguments to the behavior
           Arg 4: (optional) TimeType with the number of seconds to delay the event
</pre>
</p>
<p class="NDLRefMemberDetailedDescription">Returns a ParameterList containing the response data. Results are returned to the Lua stack. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">L</span></td>
    <td>lua_State pointer. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>-1 if the wait succeeded, 0 if we were unable to wait either because the entity is non-blocking or if lua_yield failed.</td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceegf_1a1e08adab7ee220e196f2c1ec8c03015f"></a>
<p class="NDLRefMemberFunction">int  lua_Sleep(lua_State* L)</p>
<p class="NDLRefMemberDescription">This method yields the current coroutine for a specified number of milliseconds. </p>
<p class="NDLRefMemberDetailedDescription">The sleep duration is measured in game time (not real time). Only blocking behaviors can call this method.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<p class="NDLRefMemberDetailedDescription">Arguments are passed on the Lua stack: 
<pre>    BehaviorAPI::Sleep(timeInMilliseconds)
        Args:
           Arg 1: Time to sleep in milliseconds
</pre>
</p>
<p class="NDLRefMemberDetailedDescription">No lua results are returned. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">L</span></td>
    <td>lua_State pointer </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>-1 if the yield succeeded, 0 if we were unable to wait either because the entity is non-blocking or if lua_yield failed.</td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceegf_1ababa3f5e16c0b7b33945791f166e212d"></a>
<p class="NDLRefMemberFunction">int  lua_DumpProperties(lua_State* L)</p>
<p class="NDLRefMemberDescription">This method dumps all property values to the log for the specified entity. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<p class="NDLRefMemberDetailedDescription">Arguments are on the Lua stack: 
<pre>    BehaviorAPI::DumpProperties(EntityID)
        Args:
          Arg 1: Entity ID
</pre>
</p>
<p class="NDLRefMemberDetailedDescription">No lua results are returned. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">L</span></td>
    <td>lua_State pointer </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>0 on success, 1 on failure.</td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceegf_1a5da32645efe785e205efe90456b548b1"></a>
<p class="NDLRefMemberFunction">int  lua_BreakIfFalse(lua_State* L)</p>
<p class="NDLRefMemberDescription">This method acts like a coded conditional breakpoint. </p>
<p class="NDLRefMemberDetailedDescription">If the passed expression is false, the behavior debugger will break into execution. If no debugging session is active, the condition will just be logged.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<p class="NDLRefMemberDetailedDescription">Arguments are on the Lua stack: 
<pre>    BehaviorAPI::BreakIfFalse(&lt;expression&gt;)
        Args:
          Arg 1: boolean result of expression
</pre>
</p>
<p class="NDLRefMemberDetailedDescription">No lua results are returned. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">L</span></td>
    <td>lua_State pointer </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>0 always (unused)</td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceegf_1a8fd1b7b5b7b1d56d29d8308300bdd60c"></a>
<p class="NDLRefMemberFunction">int  lua_CreateEntityAndWait(lua_State* L)</p>
<p class="NDLRefMemberDescription">Implementation of the BehaviorAPI.CreateEntityAndWait(modelName, createParams, initParams) built-in API method for the Lua scripting language. </p>
<p class="NDLRefMemberDetailedDescription">Creates a new entity and adds it to the local simulator. The process of creating a new entity is asynchronous. This call will block the current behavior until the <span class="NDLSystemFont"><a href="../egf/egf__Entity.htm">Entity</a></span> is ready or the creation fails. Returns the new Entity's <span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">EntityID</a></span> identifier, or 0 if the <span class="NDLSystemFont"><a href="../egf/egf__Entity.htm">Entity</a></span> creation failed.</p>
<p class="NDLRefMemberDetailedDescription">Arguments (read from the Lua stack):</p>
<ul>
<li>Arg 1: String containing the model name for the new entity.</li>
<li>Arg 2: optional ParameterList passed to the new entity's OnCreate behavior.</li>
<li>Arg 3: optional ParameterList containing initial property values.</li></ul>
<p class="NDLRefMemberDetailedDescription">Return values (pushed onto the Lua Stack when the co-routine is resumed):</p>
<ul>
<li>The <span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">EntityID</a></span> of the new entity, or 0 if creation failed.</li></ul>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">Other options for creating an entity include <span class="NDLSystemFont"><a href="../Namespaces/BehaviorAPI.htm#namespace_behavior_a_p_i_1ad48c8c4be049f5f341a4425b8bf7a609">BehaviorAPI.SpawnEntity</a></span>, which requires the flat model to be preloaded, and <span class="NDLSystemFont"><a href="../Namespaces/BehaviorAPI.htm#namespace_behavior_a_p_i_1ac9bc1e9e5c1fd4fa81ed8782cbcb3087">BehaviorAPI.CreateEntity</a></span> which is non-blocking but can send a callback behavior once all creation lifecycles complete on the new entity.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">L</span></td>
    <td>lua_State pointer </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>-1 if the wait succeeded, 0 if we were unable to wait either because the entity is non-blocking or if lua_yield failed. </td>
</tr>

        </tbody>
    </table>
</div>


<a name="built-in_functions_from_entitypython.h"></a>
<p class="NDLRefHead1">Built-in functions from EntityPython.h</p>


<a name="namespaceegf_1aeb9e1506409e35ec35fd8e8d1e7ce0dc"></a>
<p class="NDLRefMemberFunction">PyObject*  GetProperty(<br/>PyObject* self, <br/>PyObject* args)</p>
<p class="NDLRefMemberDescription">This method returns the specified property for the specified entity. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">if the result is a multi-part result (like <span class="NDLSystemFont"><a href="../efd/efd__Point3.htm">efd::Point3</a></span>, lists, etc.), then the return value is a tuple sequence (corresponds to how values are passed to <span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a424e9cf5c1036b3b2f1f8e361db8a2b2">SetProperty()</a></span>) </p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">self</span></td>
    <td>Pointer to the calling Python script (not used) </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">args</span></td>
    <td>Pointer to args passed in by the Python script. Arguments are: 
<pre>        Args:
            Arg 1: Entity ID
            Arg 2: property ID or name (can be specified as either tPropertyID or string)
            Arg 3: key for map properties (optional)
</pre>
</td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>PyObject* : A Python object containing the return value, or Py_None if the specified entity doesn't exist or doesn't contain the requested property.</td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceegf_1a0030ceb86b46aa3bedbd144dc2c74762"></a>
<p class="NDLRefMemberFunction">PyObject*  GetDefaultProperty(<br/>PyObject* self, <br/>PyObject* args)</p>
<p class="NDLRefMemberDescription">This method returns the default value of the specified property for the specified entity. </p>
<p class="NDLRefMemberDetailedDescription">The default value is the value specified in the flat model and does not reflect any overrides specified in the block file.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">if the result is a multi-part result (like <span class="NDLSystemFont"><a href="../efd/efd__Point3.htm">efd::Point3</a></span>, lists, etc.), then the return value is a tuple sequence (corresponds to how values are passed to <span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a424e9cf5c1036b3b2f1f8e361db8a2b2">SetProperty()</a></span>) </p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">self</span></td>
    <td>Pointer to the calling Python script (not used) </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">args</span></td>
    <td>Pointer to args passed in by the Python script. Arguments are: 
<pre>        Args:
            Arg 1: Entity ID
            Arg 2: property ID or name (can be specified as either tPropertyID or string)
            Arg 3: key for map properties (optional)
</pre>
</td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>PyObject* : A Python object containing the return value, or Py_None if the specified entity doesn't exist or doesn't contain the requested property.</td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceegf_1a424e9cf5c1036b3b2f1f8e361db8a2b2"></a>
<p class="NDLRefMemberFunction">PyObject*  SetProperty(<br/>PyObject* self, <br/>PyObject* args)</p>
<p class="NDLRefMemberDescription">This method sets the specified property for the specified entity. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">if the property is a multi-part result (like <span class="NDLSystemFont"><a href="../efd/efd__Point3.htm">efd::Point3</a></span>, lists, etc.) then the value passed in should be a tuple. </p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">self</span></td>
    <td>Pointer to the calling Python script (not used) </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">args</span></td>
    <td>Pointer to args passed in by the Python script. Arguments are: 
<pre>        Args:
            Arg 1: Entity ID
            Arg 2: property ID or name (can be specified as either tPropertyID or string)
            Arg 3: key for map properties (optional)
            Arg 4: value
</pre>
</td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>PyObject* : A Python object containing an integer result value. The value will be zero on success or non-zero if an error occurred.</td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceegf_1ae7a79830f9855a3088ddf52c811a8a63"></a>
<p class="NDLRefMemberFunction">PyObject*  py_SendAndWaitForReply(<br/>PyObject* self, <br/>PyObject* args)</p>
<p class="NDLRefMemberDescription">This method sends an event and blocks waiting for a response. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">self</span></td>
    <td>Pointer to the calling Python script (not used) </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">args</span></td>
    <td>Pointer to args passed in by the Python script. Arguments are: 
<pre>        Args:
           Arg 1: EntityID for the target entity
           Arg 2: String containing the behavior name to call
           Arg 3: (optional) ParameterList* containing arguments to the behavior
           Arg 4: (optional) TimeType with the number of seconds to delay the event
</pre>
</td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A Python object which wrappers a ParameterList containing the response data. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceegf_1a61fe1310e07bc69e0897c943fd290d2f"></a>
<p class="NDLRefMemberFunction">PyObject*  py_Sleep(<br/>PyObject* self, <br/>PyObject* args)</p>
<p class="NDLRefMemberDescription">This method yields the current coroutine for a specified number of milliseconds. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">self</span></td>
    <td>Pointer to the calling Python script (not used) </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">args</span></td>
    <td>Pointer to args passed in by the Python script. Arguments are: 
<pre>        Args:
           Arg 1: Time to sleep in milliseconds
</pre>
</td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Py_None </td>
</tr>

        </tbody>
    </table>
</div>


<a name="properties_from_primitiveproperties.h"></a>
<p class="NDLRefHead1">Properties from PrimitiveProperties.h</p>


<a name="namespaceegf_1a50ab04915067a4e7b66215ae479070d3"></a>
<p class="NDLRefMemberFunction">void  RegisterPrimitivePropFactories(class <span class="NDLSystemFont"><a href="../egf/egf__FlatModelManager.htm">FlatModelManager</a></span>* i_pfmm)</p>
<p class="NDLRefMemberDescription">Scalar properties. </p>

<a name="namespaceegf_1ab50ce0e45994f9abaeaad46c0857cce1"></a>
<p class="NDLRefMemberFunction">EE_DECLARE_PRIMITIVE_SCALAR_PROPERTY(<br/>Boolean , <br/><span class="NDLSystemFont">efd::Bool</span> , <br/>efd::kPropID_Boolean )</p>
<p class="NDLRefMemberDescription">Scalar properties. </p>

<a name="namespaceegf_1acf2e890a3ab4d0ac68b6d8958e20c7b7"></a>
<p class="NDLRefMemberFunction">EE_DECLARE_PRIMITIVE_SCALAR_PROPERTY(<br/>Char , <br/><span class="NDLSystemFont"><a href="../efd/efd__utf8char_t.htm">efd::utf8char_t</a></span> , <br/>efd::kPropID_Char )</p>
<p class="NDLRefMemberDescription">Scalar properties. </p>

<a name="namespaceegf_1ab6030d8b451c4c17acfe690dcba39e41"></a>
<p class="NDLRefMemberFunction">EE_DECLARE_PRIMITIVE_SCALAR_PROPERTY(<br/>SInt16 , <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a78e418e4217f674682471407609a8aa8">efd::SInt16</a></span> , <br/>efd::kPropID_SInt16 )</p>
<p class="NDLRefMemberDescription">Scalar properties. </p>

<a name="namespaceegf_1a9da9d8dbbf5be1f4a366270d20309ea6"></a>
<p class="NDLRefMemberFunction">EE_DECLARE_PRIMITIVE_SCALAR_PROPERTY(<br/>UInt16 , <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span> , <br/>efd::kPropID_UInt16 )</p>
<p class="NDLRefMemberDescription">Scalar properties. </p>

<a name="namespaceegf_1a8cae2e5c3a17ac84f94d6bbf7e7e6b08"></a>
<p class="NDLRefMemberFunction">EE_DECLARE_PRIMITIVE_SCALAR_PROPERTY(<br/>SInt32 , <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span> , <br/>efd::kPropID_SInt32 )</p>
<p class="NDLRefMemberDescription">Scalar properties. </p>

<a name="namespaceegf_1a12e0ed5d23fbd2fbe527e8ba39efe997"></a>
<p class="NDLRefMemberFunction">EE_DECLARE_PRIMITIVE_SCALAR_PROPERTY(<br/>UInt32 , <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> , <br/>efd::kPropID_UInt32 )</p>
<p class="NDLRefMemberDescription">Scalar properties. </p>

<a name="namespaceegf_1a402336f43b012a1ecfe359fd32797250"></a>
<p class="NDLRefMemberFunction">EE_DECLARE_PRIMITIVE_SCALAR_PROPERTY(<br/>SInt64 , <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a31570c844c29f8e0f335ac87dcb55401">efd::SInt64</a></span> , <br/>efd::kPropID_SInt64 )</p>
<p class="NDLRefMemberDescription">Scalar properties. </p>

<a name="namespaceegf_1ab8d4ccb0cb3191d687e55929fbb23a28"></a>
<p class="NDLRefMemberFunction">EE_DECLARE_PRIMITIVE_SCALAR_PROPERTY(<br/>UInt64 , <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a845df149ec80fc0bf36f875ece09ef9d">efd::UInt64</a></span> , <br/>efd::kPropID_UInt64 )</p>
<p class="NDLRefMemberDescription">Scalar properties. </p>

<a name="namespaceegf_1a4fe0b8bd5ce32cd50a948dc41994c926"></a>
<p class="NDLRefMemberFunction">EE_DECLARE_PRIMITIVE_SCALAR_PROPERTY(<br/>Float32 , <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> , <br/>efd::kPropID_Float32 )</p>
<p class="NDLRefMemberDescription">Scalar properties. </p>

<a name="namespaceegf_1a15a2be5d8475d0d0db47550d2c7edb3d"></a>
<p class="NDLRefMemberFunction">EE_DECLARE_PRIMITIVE_SCALAR_PROPERTY(<br/>Float64 , <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aff0a9e9ca8001b330091eb01eeb190c2">efd::Float64</a></span> , <br/>efd::kPropID_Float64 )</p>
<p class="NDLRefMemberDescription">Scalar properties. </p>

<a name="namespaceegf_1a1bcdec535c5a3019573bb1f3ec64cd4d"></a>
<p class="NDLRefMemberFunction">EE_DECLARE_PRIMITIVE_SCALAR_PROPERTY(<br/>String , <br/><span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span> , <br/>efd::kPropID_String )</p>
<p class="NDLRefMemberDescription">Scalar properties. </p>

<a name="namespaceegf_1a4be898bb14427dc1ec63a04fb45be3a9"></a>
<p class="NDLRefMemberFunction">EE_DECLARE_PRIMITIVE_SCALAR_PROPERTY(<br/>EntityRef , <br/><span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span> , <br/>efd::kPropID_EntityRef )</p>
<p class="NDLRefMemberDescription">Scalar properties. </p>

<a name="namespaceegf_1ae28630f0a0c3fe88ef895fd8be3877e0"></a>
<p class="NDLRefMemberFunction">EE_DECLARE_PRIMITIVE_ASSOCIATIVE_ARRAY_PROPERTY(<br/>Boolean , <br/><span class="NDLSystemFont">efd::Bool</span> , <br/>efd::kPropID_BooleanAssocArray )</p>
<p class="NDLRefMemberDescription">Associative Array properties. </p>

<a name="namespaceegf_1ae95f2587b66a663af4e7259a3da4fff6"></a>
<p class="NDLRefMemberFunction">EE_DECLARE_PRIMITIVE_ASSOCIATIVE_ARRAY_PROPERTY(<br/>Char , <br/><span class="NDLSystemFont"><a href="../efd/efd__utf8char_t.htm">efd::utf8char_t</a></span> , <br/>efd::kPropID_CharAssocArray )</p>
<p class="NDLRefMemberDescription">Scalar properties. </p>

<a name="namespaceegf_1a7b1a5313506d44a94da840c78bfe5a0b"></a>
<p class="NDLRefMemberFunction">EE_DECLARE_PRIMITIVE_ASSOCIATIVE_ARRAY_PROPERTY(<br/>SInt16 , <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a78e418e4217f674682471407609a8aa8">efd::SInt16</a></span> , <br/>efd::kPropID_SInt16AssocArray )</p>
<p class="NDLRefMemberDescription">Scalar properties. </p>

<a name="namespaceegf_1af4b2656550414b3a616824e386b29aa8"></a>
<p class="NDLRefMemberFunction">EE_DECLARE_PRIMITIVE_ASSOCIATIVE_ARRAY_PROPERTY(<br/>UInt16 , <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span> , <br/>efd::kPropID_UInt16AssocArray )</p>
<p class="NDLRefMemberDescription">Scalar properties. </p>

<a name="namespaceegf_1af554b408a1313665fb830976c3c3890c"></a>
<p class="NDLRefMemberFunction">EE_DECLARE_PRIMITIVE_ASSOCIATIVE_ARRAY_PROPERTY(<br/>SInt32 , <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span> , <br/>efd::kPropID_SInt32AssocArray )</p>
<p class="NDLRefMemberDescription">Scalar properties. </p>

<a name="namespaceegf_1a772ea7b2ca5419f6c272c60aa514b3a1"></a>
<p class="NDLRefMemberFunction">EE_DECLARE_PRIMITIVE_ASSOCIATIVE_ARRAY_PROPERTY(<br/>UInt32 , <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> , <br/>efd::kPropID_UInt32AssocArray )</p>
<p class="NDLRefMemberDescription">Scalar properties. </p>

<a name="namespaceegf_1a6ddba6137a35d69daa83662865d55fdd"></a>
<p class="NDLRefMemberFunction">EE_DECLARE_PRIMITIVE_ASSOCIATIVE_ARRAY_PROPERTY(<br/>SInt64 , <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a31570c844c29f8e0f335ac87dcb55401">efd::SInt64</a></span> , <br/>efd::kPropID_SInt64AssocArray )</p>
<p class="NDLRefMemberDescription">Scalar properties. </p>

<a name="namespaceegf_1a0cd68afe2d1c77ac96907d91bd29f5f2"></a>
<p class="NDLRefMemberFunction">EE_DECLARE_PRIMITIVE_ASSOCIATIVE_ARRAY_PROPERTY(<br/>UInt64 , <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a845df149ec80fc0bf36f875ece09ef9d">efd::UInt64</a></span> , <br/>efd::kPropID_UInt64AssocArray )</p>
<p class="NDLRefMemberDescription">Scalar properties. </p>

<a name="namespaceegf_1a73c85da729a59bfbf71940bb1df21064"></a>
<p class="NDLRefMemberFunction">EE_DECLARE_PRIMITIVE_ASSOCIATIVE_ARRAY_PROPERTY(<br/>Float32 , <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> , <br/>efd::kPropID_Float32AssocArray )</p>
<p class="NDLRefMemberDescription">Scalar properties. </p>

<a name="namespaceegf_1a248735ff9482f0dcedeb2d74947a40a4"></a>
<p class="NDLRefMemberFunction">EE_DECLARE_PRIMITIVE_ASSOCIATIVE_ARRAY_PROPERTY(<br/>Float64 , <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aff0a9e9ca8001b330091eb01eeb190c2">efd::Float64</a></span> , <br/>efd::kPropID_Float64AssocArray )</p>
<p class="NDLRefMemberDescription">Scalar properties. </p>

<a name="namespaceegf_1a9e3256e95bebceac76940907095806f7"></a>
<p class="NDLRefMemberFunction">EE_DECLARE_PRIMITIVE_ASSOCIATIVE_ARRAY_PROPERTY(<br/>String , <br/><span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span> , <br/>efd::kPropID_StringAssocArray )</p>
<p class="NDLRefMemberDescription">Scalar properties. </p>

<a name="namespaceegf_1aada69c971aba94efb7bfdc84ccd6896f"></a>
<p class="NDLRefMemberFunction">EE_DECLARE_PRIMITIVE_ASSOCIATIVE_ARRAY_PROPERTY(<br/>EntityRef , <br/><span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span> , <br/>efd::kPropID_EntityRefAssocArray )</p>
<p class="NDLRefMemberDescription">Scalar properties. </p>
<a name="python_parameterlist_functions_from_pyparameterlist.h"></a>
<p class="NDLRefHead1">Python ParameterList functions from PyParameterList.h</p>


<a name="namespaceegf_1a65e2e8504369bc72355933b4d5239d44"></a>
<p class="NDLRefMemberFunction">void  pyinit_ParameterList()</p>
<p class="NDLRefMemberDescription">Method to initialize the ParameterList module which implements the ParameterList class. </p>

<a name="namespaceegf_1a030d8ee6ae461ad142e51597f97b933e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__ParameterList.htm">efd::ParameterList</a></span>*  PyParameterList_AsParameterList(PyObject* py)</p>
<p class="NDLRefMemberDescription">Convert a <span class="NDLSystemFont"><a href="../egfPython/egf__PyParameterList.htm">PyParameterList</a></span> to an <span class="NDLSystemFont"><a href="../efd/efd__ParameterList.htm">efd::ParameterList</a></span>. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">py</span></td>
    <td>A Python object </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A ParameterList pointer, or NULL if py is not of type <span class="NDLSystemFont"><a href="../egfPython/egf__PyParameterList.htm">PyParameterList</a></span>. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceegf_1ac6e0ebf0966736237589bf1044174a7c"></a>
<p class="NDLRefMemberFunction">PyObject*  PyParameterList_Create(<span class="NDLSystemFont"><a href="../efd/efd__ParameterList.htm">efd::ParameterList</a></span>* pStream)</p>
<p class="NDLRefMemberDescription">Create a new <span class="NDLSystemFont"><a href="../egfPython/egf__PyParameterList.htm">PyParameterList</a></span> that references an existing <span class="NDLSystemFont"><a href="../efd/efd__ParameterList.htm">efd::ParameterList</a></span>. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pStream</span></td>
    <td>A ParameterList pointer, which can be NULL. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A new PyObject of type <span class="NDLSystemFont"><a href="../egfPython/egf__PyParameterList.htm">PyParameterList</a></span></td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceegf_1ae86401d6cddbec16d7cc2dc4e4bfc1ef"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  PyParameterList_Check(PyObject* py)</p>
<p class="NDLRefMemberDescription">Check if the given PyObject is of type <span class="NDLSystemFont"><a href="../egfPython/egf__PyParameterList.htm">PyParameterList</a></span>. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">py</span></td>
    <td>The object to check </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the object is a <span class="NDLSystemFont"><a href="../egfPython/egf__PyParameterList.htm">PyParameterList</a></span></td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceegf_1aeb9c27c00ad55e94709d0cc87c2d3c4e"></a>
<p class="NDLRefMemberFunction">PyObject*  PyNone()</p>
<p class="NDLRefMemberDescription">A simple helper for returning Py_None. </p>

<a name="namespaceegf_1acb1e2f245bf7c9bd3cb253ecbb71ff47"></a>
<p class="NDLRefMemberFunction">PyObject*  PyTrue()</p>
<p class="NDLRefMemberDescription">A simple helper for returning Py_True. </p>

<a name="namespaceegf_1aea721ab068e8da1e628a2082edd3070e"></a>
<p class="NDLRefMemberFunction">PyObject*  PyFalse()</p>
<p class="NDLRefMemberDescription">A simple helper for returning Py_False. </p>

<a name="namespaceegf_1afe5129c3ab972658365f7d4bd008943b"></a>
<p class="NDLRefMemberFunction">PyObject*  PyTrueOrFalse(<span class="NDLSystemFont">bool</span> b)</p>
<p class="NDLRefMemberDescription">A simple helper for returning Py_True or Py_False based on the parameter. </p>
<a name="private_types"></a>
<p class="NDLRefHead1">Private Types</p>


<a name="namespaceegf_1ad4ecee8ad32da45663f7ce9d840227d1"></a>
<p class="NDLRefMemberFunction">typedef void(*  CBehaviorFunc)(egf::Entity *, efd::ParameterList *)</p>
<p class="NDLRefMemberDescription">Define a behavior "C function" type. </p>
<p class="NDLRefMemberDetailedDescription">This typedef defines the calling protocol (and function pointer) for all "C" callable behavior script functions.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">Calling sequence is a single argument (a binary stream pointer). </p></p>

<a name="namespaceegf_1a180b5bcaa93e1ff44a91ff881cf523c6"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../egf/egf__BehaviorDescriptor.htm">BehaviorDescriptor</a></span>&gt;  BehaviorDescriptorPtr</p>
<p class="NDLRefMemberDescription">Define a behavior descriptor smart pointer. </p>

<a name="namespaceegf_1a2c9d8db33706638dc7c31877e908d232"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../egf/egf__StartDebuggerRequest.htm">StartDebuggerRequest</a></span>&gt;  StartDebuggerRequestPtr</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceegf_1aed2391c4ad1a533b7e38d38176db4a4f"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../egf/egf__BreakpointRequest.htm">BreakpointRequest</a></span>&gt;  BreakpointRequestPtr</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceegf_1a3c773cb6792a3095e56b77f923274d92"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../egf/egf__BreakpointResponse.htm">BreakpointResponse</a></span>&gt;  BreakpointResponsePtr</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceegf_1af0b7fd963b7f5e15f8ef01dbdbecf54c"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../egf/egf__BuiltinModelDescriptor.htm">BuiltinModelDescriptor</a></span>&gt;  BuiltinModelDescriptorPtr</p>
<p class="NDLRefMemberDescription">A SmartPointer to a <span class="NDLSystemFont"><a href="../egf/egf__BuiltinModelDescriptor.htm">BuiltinModelDescriptor</a></span>. Used to assist in reference counting. </p>

<a name="namespaceegf_1af3210074888f9207e2fce2643fc7bc85"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__list.htm">efd::list</a></span>&lt;<span class="NDLSystemFont"><a href="../egf/egf__BuiltinModelDescriptor.htm">BuiltinModelDescriptor</a></span>*&gt;  BuiltinModelList</p>
<p class="NDLRefMemberDescription">Used to describe to an <span class="NDLSystemFont"><a href="../egf/egf__Entity.htm">Entity</a></span> all the BuiltinModel classes that it requires. </p>
<p class="NDLRefMemberDetailedDescription">The <span class="NDLSystemFont"><a href="../egf/egf__FlatModel.htm">FlatModel</a></span> can generate this list from its data. </p>

<a name="namespaceegf_1a4ab5179622d88786438b875ed12b79e2"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../egf/egf__Entity.htm">Entity</a></span>&gt;  EntityPtr</p>
<p class="NDLRefMemberDescription">A smart pointer (reference counting, self deleting pointer) for the <span class="NDLSystemFont"><a href="../egf/egf__Entity.htm">Entity</a></span> class. </p>

<a name="namespaceegf_1ab9aed90e886353a7201b6ca0f8b3dc8d"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../egf/egf__EntityChangeMessage.htm">EntityChangeMessage</a></span>&gt;  EntityChangeMessagePtr</p>
<p class="NDLRefMemberDescription">A SmartPointer for the <span class="NDLSystemFont"><a href="../egf/egf__EntityChangeMessage.htm">EntityChangeMessage</a></span> class. </p>

<a name="namespaceegf_1a356e888f6e1ebdb9fffef03a350f9119"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../egf/egf__EntityFactory.htm">egf::EntityFactory</a></span>&gt;  EntityFactoryPtr</p>
<p class="NDLRefMemberDescription">A SmartPointer for the <span class="NDLSystemFont"><a href="../egf/egf__EntityFactory.htm">egf::EntityFactory</a></span> class. </p>

<a name="namespaceegf_1a0090e94bd3ff1cca72fe1d6688fe275f"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../egf/egf__EntityFactoryResponse.htm">EntityFactoryResponse</a></span>&gt;  EntityFactoryResponsePtr</p>
<p class="NDLRefMemberDescription">A SmartPointer for the <span class="NDLSystemFont"><a href="../egf/egf__EntityFactoryResponse.htm">EntityFactoryResponse</a></span> class. </p>

<a name="namespaceegf_1aaf9f8451f799d2c1c85c2a02f1a844bf"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  Context</p>
<p class="NDLRefMemberDescription">An arbitrary user provided value that is simply passed back to the user later. </p>

<a name="namespaceegf_1acefbbf793f44f125523e04acfe29038c"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../egf/egf__EntityLoadRequest.htm">EntityLoadRequest</a></span>&gt;  EntityLoadRequestPtr</p>
<p class="NDLRefMemberDescription">A smart pointer for the <span class="NDLSystemFont"><a href="../egf/egf__EntityLoadRequest.htm">EntityLoadRequest</a></span> class. </p>

<a name="namespaceegf_1ade13caa025e201cb1ba97eeef05ec378"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../egf/egf__EntityLoadResult.htm">EntityLoadResult</a></span>&gt;  EntityLoadResultPtr</p>
<p class="NDLRefMemberDescription">A smart pointer for the <span class="NDLSystemFont"><a href="../egf/egf__EntityLoadResult.htm">EntityLoadResult</a></span> class. </p>

<a name="namespaceegf_1a5e12e5d98a068090300b8ee0a63f45b7"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../egf/egf__EntityPreloadRequest.htm">EntityPreloadRequest</a></span>&gt;  EntityPreloadRequestPtr</p>
<p class="NDLRefMemberDescription">A smart pointer for the <span class="NDLSystemFont"><a href="../egf/egf__EntityPreloadRequest.htm">EntityPreloadRequest</a></span> class. </p>

<a name="namespaceegf_1a151cdafecdca1e7f8250a85e6732aa35"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../egf/egf__EntityPreloadResponse.htm">EntityPreloadResponse</a></span>&gt;  EntityPreloadResponsePtr</p>
<p class="NDLRefMemberDescription">A smart pointer for the <span class="NDLSystemFont"><a href="../egf/egf__EntityPreloadResponse.htm">EntityPreloadResponse</a></span> class. </p>

<a name="namespaceegf_1a0769104b5273e5c89d25bbc20bd9c92a"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../egf/egf__EntityLoaderService.htm">EntityLoaderService</a></span>&gt;  EntityLoaderServicePtr</p>
<p class="NDLRefMemberDescription">A SmartPointer for the <span class="NDLSystemFont"><a href="../egf/egf__EntityLoaderService.htm">EntityLoaderService</a></span> class. </p>

<a name="namespaceegf_1a6cdb1af2ab6ad071bc6be70a3752eec9"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../egf/egf__EntityManager.htm">EntityManager</a></span>&gt;  EntityManagerPtr</p>
<p class="NDLRefMemberDescription">A smart pointer (reference counting, self deleting pointer) for the <span class="NDLSystemFont"><a href="../egf/egf__EntityManager.htm">EntityManager</a></span> class. </p>

<a name="namespaceegf_1aaa4a56426645197562453b8c0d29c43a"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../egf/egf__EventMessage.htm">EventMessage</a></span>&gt;  EventMessagePtr</p>
<p class="NDLRefMemberDescription">A smart pointer (reference counting, self deleting pointer) for the <span class="NDLSystemFont"><a href="../egf/egf__EventMessage.htm">EventMessage</a></span> class. </p>

<a name="namespaceegf_1aa8070532d94410ad58d34be3f4df0ce4"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../egf/egf__ExtraDataEntry.htm">ExtraDataEntry</a></span>&gt;  ExtraDataEntryPtr</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceegf_1a5517ae4db0fc69cc973b68e4b671e5ef"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../egf/egf__ExtraData.htm">ExtraData</a></span>&gt;  ExtraDataPtr</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceegf_1a8c080f91ad496242a39434eb3063ca44"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../egf/egf__FlatModel.htm">FlatModel</a></span>&gt;  FlatModelPtr</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceegf_1a091667adf46482f4fd930e7cc6dc835f"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../egf/egf__FlatModelFactory.htm">egf::FlatModelFactory</a></span>&gt;  FlatModelFactoryPtr</p>
<p class="NDLRefMemberDescription">A SmartPointer for the <span class="NDLSystemFont"><a href="../egf/egf__FlatModelFactory.htm">egf::FlatModelFactory</a></span> class. </p>

<a name="namespaceegf_1ac3dfa8cd737b4d642a4c6ebeedcfe8a9"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../egf/egf__FlatModelFactoryRequest.htm">FlatModelFactoryRequest</a></span>&gt;  FlatModelFactoryRequestPtr</p>
<p class="NDLRefMemberDescription">A SmartPointer for the <span class="NDLSystemFont"><a href="../egf/egf__FlatModelFactoryRequest.htm">FlatModelFactoryRequest</a></span> class. </p>

<a name="namespaceegf_1a18871263594e79fe9b90155ab8b720e7"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../egf/egf__FlatModelFactoryResponse.htm">FlatModelFactoryResponse</a></span>&gt;  FlatModelFactoryResponsePtr</p>
<p class="NDLRefMemberDescription">A SmartPointer for the <span class="NDLSystemFont"><a href="../egf/egf__FlatModelFactoryResponse.htm">FlatModelFactoryResponse</a></span> class. </p>

<a name="namespaceegf_1a2316f7cafb4f026991ba2c505fa930b0"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__set.htm">efd::set</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">FlatModelFactoryResponsePtr</a></span>&gt;  FlatModelFactoryResponseSet</p>
<p class="NDLRefMemberDescription">An <span class="NDLSystemFont"><a href="../efd/efd__set.htm">efd::set</a></span> of efd::SmartPointers to <span class="NDLSystemFont"><a href="../egf/egf__FlatModelFactoryResponse.htm">egf::FlatModelFactoryResponse</a></span> class instances. </p>

<a name="namespaceegf_1a96498c63ef265718b9f4cdf5f0671a60"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../egf/egf__FlatModelManager.htm">FlatModelManager</a></span>&gt;  FlatModelManagerPtr</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceegf_1a84a1634846ab5a7082edb6e71c9d90ae"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__MessageWrapper.htm">GamePauseRequest</a></span>&gt;  GamePauseRequestPtr</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceegf_1a6ed4906bd649d215d0cc820d3a4f95ce"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__MessageWrapper.htm">GameResumeRequest</a></span>&gt;  GameResumeRequestPtr</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceegf_1aab89440f648dd1052d5f163e84879db5"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../egf/egf__IBuiltinModel.htm">IBuiltinModel</a></span>&gt;  IBuiltinModelPtr</p>
<p class="NDLRefMemberDescription">Define smart pointer to <span class="NDLSystemFont"><a href="../egf/egf__IBuiltinModel.htm">IBuiltinModel</a></span> class. </p>

<a name="namespaceegf_1ae0b0133dc10e166fd96f5e1be319e793"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__map.htm">efd::map</a></span>&lt;<span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1af08acbbc1a28c9e4ee8dfb501449dc28">egf::PropertyID</a></span>, <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;egf::BuiltinHelper::PropertyData&gt;&gt;  BuiltinModelPropertyMap</p>
<p class="NDLRefMemberDescription">Storage type used internally by <span class="NDLSystemFont"><a href="../egf/egf__IBuiltinModelImpl.htm">IBuiltinModelImpl</a></span>. </p>

<a name="namespaceegf_1ab8d4e6557536fd64af1d9b9505eef142"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../egf/egf__ISchedulerScripting.htm">ISchedulerScripting</a></span>&gt;  ISchedulerScriptingPtr</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceegf_1a6a7569b8773e3be3947eba92de55c758"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../egf/egf__IScriptFactory.htm">IScriptFactory</a></span>&gt;  IScriptFactoryPtr</p>
<p class="NDLRefMemberDescription">A SmartPointer for the <span class="NDLSystemFont"><a href="../egf/egf__IScriptFactory.htm">IScriptFactory</a></span> class. </p>

<a name="namespaceegf_1a3ee843984fb1cc07912a677e3578acfa"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../egf/egf__NotificationMessage.htm">NotificationMessage</a></span>&gt;  NotificationMessagePtr</p>
<p class="NDLRefMemberDescription">A smart pointer (reference counting, self deleting pointer) for the <span class="NDLSystemFont"><a href="../egf/egf__NotificationMessage.htm">NotificationMessage</a></span> class. </p>

<a name="namespaceegf_1a29dddedb5d7f039654c2f11d14cca8ef"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../egf/egf__NotificationService.htm">NotificationService</a></span>&gt;  NotificationServicePtr</p>
<p class="NDLRefMemberDescription">A smart pointer (reference counting, self deleting pointer) for the <span class="NDLSystemFont"><a href="../egf/egf__NotificationService.htm">NotificationService</a></span> class. </p>

<a name="namespaceegf_1a73142a70f2e80da65ade1979f6a08acd"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../egf/egf__PendingBehavior.htm">PendingBehavior</a></span>&gt;  PendingBehaviorPtr</p>
<p class="NDLRefMemberDescription">A SmartPointer to the <span class="NDLSystemFont"><a href="../egf/egf__PendingBehavior.htm">PendingBehavior</a></span> class. </p>

<a name="namespaceegf_1a06267007cc554e33a8bec59d6d32f679"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../egf/egf__PropertyDescriptor.htm">PropertyDescriptor</a></span>&gt;  PropertyDescriptorPtr</p>
<p class="NDLRefMemberDescription">A smart pointer (reference counting, self deleting pointer) for the <span class="NDLSystemFont"><a href="../egf/egf__PropertyDescriptor.htm">PropertyDescriptor</a></span> class. </p>

<a name="namespaceegf_1a77abf163231c491f19ce5192eb1f3a2c"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__list.htm">efd::list</a></span>&lt;<span class="NDLSystemFont"><a href="../egf/egf__PropertyDescriptor.htm">PropertyDescriptor</a></span>*&gt;  PropertyDescriptorList</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceegf_1a5fa5bf2a659c189b9530f05ed23313b2"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../egf/egf__RapidIterationSystemService.htm">RapidIterationSystemService</a></span>&gt;  RapidIterationSystemServicePtr</p>
<p class="NDLRefMemberDescription">A SmartPointer for the <span class="NDLSystemFont"><a href="../egf/egf__RapidIterationSystemService.htm">RapidIterationSystemService</a></span> class. </p>

<a name="namespaceegf_1a5bc94555c01c37fa2b1870ebd02112e4"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../egf/egf__ScheduledTask.htm">ScheduledTask</a></span>&gt;  ScheduledTaskPtr</p>
<p class="NDLRefMemberDescription">A SmartPointer for the <span class="NDLSystemFont"><a href="../egf/egf__ScheduledTask.htm">ScheduledTask</a></span> class. </p>

<a name="namespaceegf_1aa68b1d80f1a394443eb213c06b80694d"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__RefCountedMemObj.htm">efd::RefCountedMemObj</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__list.htm">efd::list</a></span>&lt;<span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">EntityID</a></span>&gt;&gt;  EntityIDList</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceegf_1ae43c490f4502d79c7980889ffb81afa4"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__RefCountedMemObj.htm">EntityIDList</a></span>&gt;  EntityIDListPtr</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceegf_1ae181104866e51cefda5cf219bf4ccb61"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__list.htm">efd::list</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">EntityPtr</a></span>&gt;  EntityList</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceegf_1a3731f9189b29805ad98d3d0c981a69c3"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__set.htm">efd::set</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">EntityPtr</a></span>&gt;  EntitySet</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceegf_1a30ac73245d5cb7dea1792540c2702739"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../egf/egf__Scheduler.htm">Scheduler</a></span>&gt;  SchedulerPtr</p>
<p class="NDLRefMemberDescription">A smart pointer (reference counting, self deleting pointer) for the <span class="NDLSystemFont"><a href="../egf/egf__Scheduler.htm">Scheduler</a></span> class. </p>

<a name="namespaceegf_1acb9e24a5949fe8f80c3c58fbfc5d3457"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../egf/egf__ScriptFactoryRequest.htm">ScriptFactoryRequest</a></span>&gt;  ScriptFactoryRequestPtr</p>
<p class="NDLRefMemberDescription">A SmartPointer for the <span class="NDLSystemFont"><a href="../egf/egf__ScriptFactoryRequest.htm">ScriptFactoryRequest</a></span> class. </p>

<a name="namespaceegf_1a7d336d55313254472aa23a6bc2d2b6cd"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../egf/egf__ScriptFactoryResponse.htm">ScriptFactoryResponse</a></span>&gt;  ScriptFactoryResponsePtr</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceegf_1a73172dd0975fe1216f479438ff25b481"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../egf/egf__SimDebugger.htm">SimDebugger</a></span>&gt;  SimDebuggerPtr</p>
<p class="NDLRefMemberDescription">A smart pointer type for <span class="NDLSystemFont"><a href="../egf/egf__SimDebugger.htm">SimDebugger</a></span>. </p>

<a name="namespaceegf_1a6301880a5fe94b57e2a2b6bc7eb74b50"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../egf/egf__DebugNoteBase.htm">DebugNoteBase</a></span>&gt;  DebugNoteBasePtr</p>
<p class="NDLRefMemberDescription">A SmartPointer for the <span class="NDLSystemFont"><a href="../egf/egf__DebugNoteBase.htm">DebugNoteBase</a></span> class. </p>

<a name="namespaceegf_1a509f95d714b200acfe2c9777ab3f1b56"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../egf/egf__DebugNoteEvent.htm">DebugNoteEvent</a></span>&gt;  DebugNoteEventPtr</p>
<p class="NDLRefMemberDescription">A SmartPointer for the <span class="NDLSystemFont"><a href="../egf/egf__DebugNoteEvent.htm">DebugNoteEvent</a></span> class. </p>

<a name="namespaceegf_1ac3387fa4d8e620a876ccd2f53966e2b6"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../egf/egf__DebugNoteSessionStarted.htm">DebugNoteSessionStarted</a></span>&gt;  DebugNoteSessionStartedPtr</p>
<p class="NDLRefMemberDescription">A SmartPointer for the <span class="NDLSystemFont"><a href="../egf/egf__DebugNoteSessionStarted.htm">DebugNoteSessionStarted</a></span> class. </p>

<a name="namespaceegf_1a3c7869bdc94a005e0733b40d6d864413"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../egf/egf__DebugNoteFlatModelDefined.htm">DebugNoteFlatModelDefined</a></span>&gt;  DebugNoteFlatModelDefinedPtr</p>
<p class="NDLRefMemberDescription">A SmartPointer for the <span class="NDLSystemFont"><a href="../egf/egf__DebugNoteFlatModelDefined.htm">DebugNoteFlatModelDefined</a></span> class. </p>

<a name="namespaceegf_1a6c7c3fa01298d04a5fa966fb6343e4d7"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../egf/egf__DebugNoteEntityCreated.htm">DebugNoteEntityCreated</a></span>&gt;  DebugNoteEntityCreatedPtr</p>
<p class="NDLRefMemberDescription">A SmartPointer for the <span class="NDLSystemFont"><a href="../egf/egf__DebugNoteEntityCreated.htm">DebugNoteEntityCreated</a></span> class. </p>

<a name="namespaceegf_1a42ea41032ccdd4ce501b49444d4e23ba"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../egf/egf__DebugNoteEntityDestroyed.htm">DebugNoteEntityDestroyed</a></span>&gt;  DebugNoteEntityDestroyedPtr</p>
<p class="NDLRefMemberDescription">A SmartPointer for the <span class="NDLSystemFont"><a href="../egf/egf__DebugNoteEntityDestroyed.htm">DebugNoteEntityDestroyed</a></span> class. </p>

<a name="namespaceegf_1a699a852978adde75429d603394dd3032"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../egf/egf__DebugNotePropertyChanged.htm">DebugNotePropertyChanged</a></span>&gt;  DebugNotePropertyChangedPtr</p>
<p class="NDLRefMemberDescription">A SmartPointer for the <span class="NDLSystemFont"><a href="../egf/egf__DebugNotePropertyChanged.htm">DebugNotePropertyChanged</a></span> class. </p>

<a name="namespaceegf_1a90f3fb9e0bea30e7f7fdc17b2e5d5bcc"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../egf/egf__DebugNoteCollectionPropertyChanged.htm">DebugNoteCollectionPropertyChanged</a></span>&gt;  DebugNoteCollectionPropertyChangedPtr</p>
<p class="NDLRefMemberDescription">A SmartPointer for the <span class="NDLSystemFont"><a href="../egf/egf__DebugNoteCollectionPropertyChanged.htm">DebugNoteCollectionPropertyChanged</a></span> class. </p>

<a name="namespaceegf_1ab1c92904d33ec544b6fc9256521ddfe0"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../egf/egf__WorldFactory.htm">egf::WorldFactory</a></span>&gt;  WorldFactoryPtr</p>
<p class="NDLRefMemberDescription">A SmartPointer for the <span class="NDLSystemFont"><a href="../egf/egf__WorldFactory.htm">egf::WorldFactory</a></span> class. </p>

<a name="namespaceegf_1ad1430c6114f3b8109cc37178afb8649b"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../egf/egf__WorldFactoryRequest.htm">WorldFactoryRequest</a></span>&gt;  WorldFactoryRequestPtr</p>
<p class="NDLRefMemberDescription">A SmartPointer for the <span class="NDLSystemFont"><a href="../egf/egf__WorldFactoryRequest.htm">WorldFactoryRequest</a></span> class. </p>

<a name="namespaceegf_1a2a85a2118377ca22b5922b44a0e33536"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../egf/egf__WorldFactoryResponse.htm">WorldFactoryResponse</a></span>&gt;  WorldFactoryResponsePtr</p>
<p class="NDLRefMemberDescription">A SmartPointer for the <span class="NDLSystemFont"><a href="../egf/egf__WorldFactoryResponse.htm">WorldFactoryResponse</a></span> class. </p>

<a name="namespaceegf_1ac8556a638d72a9498b1908d09476189a"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__MessageWrapper.htm">WorldResetRequest</a></span>&gt;  WorldResetRequestPtr</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceegf_1aa75b20df45aa21cd5401da9b168e752b"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../egfLua/egf__ILuaPropertyHandler.htm">ILuaPropertyHandler</a></span>&gt;  ILuaPropertyHandlerPtr</p>
<p class="NDLRefMemberDescription">SmartPointer for the <span class="NDLSystemFont"><a href="../egfLua/egf__ILuaPropertyHandler.htm">ILuaPropertyHandler</a></span> class. </p>

<a name="namespaceegf_1a59ce9bb181b2b07ca32292d76e5b495b"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../egfLua/egf__LuaBehaviorDebugger.htm">LuaBehaviorDebugger</a></span>&gt;  LuaBehaviorDebuggerPtr</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceegf_1a417f4827f3ada1e795061fb40f9552d0"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../egfLua/egf__LuaResumeEntityCreateTask.htm">LuaResumeEntityCreateTask</a></span>&gt;  LuaResumeEntityCreateTaskPtr</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceegf_1ae46d30482e0ab35ce5ed1d3d5dfcc216"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../egfLua/egf__LuaResumeWaiterTask.htm">LuaResumeWaiterTask</a></span>&gt;  LuaResumeWaiterTaskPtr</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceegf_1a1408fb00f5869331228c09ab6272ec5d"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../egfLua/egf__LuaScriptFactory.htm">LuaScriptFactory</a></span>&gt;  LuaScriptFactoryPtr</p>
<p class="NDLRefMemberDescription">A SmartPointer for the <span class="NDLSystemFont"><a href="../egfLua/egf__LuaScriptFactory.htm">LuaScriptFactory</a></span> class. </p>

<a name="namespaceegf_1ae5b53a4b0a4ff812ce31e81b6ca79f2b"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../egfLua/egf__LuaWakeSleeperTask.htm">LuaWakeSleeperTask</a></span>&gt;  LuaWakeSleeperTaskPtr</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceegf_1a3cb6c40a76429cdf949d4f6c7125a806"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../egfLua/egf__SchedulerLua.htm">SchedulerLua</a></span>&gt;  SchedulerLuaPtr</p>
<p class="NDLRefMemberDescription">A SmartPointer for the <span class="NDLSystemFont"><a href="../egfLua/egf__SchedulerLua.htm">SchedulerLua</a></span> class. </p>

<a name="namespaceegf_1acfbf7fba022448cfadbbe73618510efa"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../egfPython/egf__SchedulerPython.htm">SchedulerPython</a></span>&gt;  ISchedulerPythonPtr</p>
<p class="NDLRefMemberFunction"></p>
<a name="private_attributes"></a>
<p class="NDLRefHead1">Private Attributes</p>
<a name="namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e"></a>
<p class=NDLRefHead2>egf::PropertyResult</p>


<p class="NDLRefMemberDescription">An enum that describes the result of entity property operations. </p>


<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">PropertyResult_OK</span></td>
    <td>Success. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">PropertyResult_TypeMismatch</span></td>
    <td>The property type does not match. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">PropertyResult_NoDefaultValue</span></td>
    <td>A <span class="NDLSystemFont"><a href="../egf/egf__PropertyDescriptor.htm">PropertyDescriptor</a></span> has no default value when one is required. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">PropertyResult_PropertyNotFound</span></td>
    <td>The given property is not available. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">PropertyResult_DefaultValueAlreadySet</span></td>
    <td>A <span class="NDLSystemFont"><a href="../egf/egf__PropertyDescriptor.htm">PropertyDescriptor</a></span> already has a default value and cannot accept a new one. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">PropertyResult_UnknownPropertyType</span></td>
    <td>The type of the property is not a known valid type. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">PropertyResult_ModelNotFound</span></td>
    <td>A property request was made on an entity with no <span class="NDLSystemFont"><a href="../egf/egf__FlatModel.htm">FlatModel</a></span>. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">PropertyResult_PropertyNotScalar</span></td>
    <td>Scalar method used with associative array property. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">PropertyResult_PropertyNotAssociativeArray</span></td>
    <td>Associative array method used with scalar property. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">PropertyResult_KeyNotFound</span></td>
    <td>Associative array property method used a key that is not valid. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">PropertyResult_ReadOnlyError</span></td>
    <td>Attempted to write to a read-only property. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">PropertyResult_EntityNotOwned</span></td>
    <td>Attempted to write to a property on a replica entity. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">PropertyResult_UnknownError</span></td>
    <td>An unknown error occurred. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">PropertyResult_EntityNotFound</span></td>
    <td>A property related method is operating on an entity ID for which no entity was found. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">PropertyResult_NoMoreKeys</span></td>
    <td>An associative array key iterating method already returned all keys. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">PropertyResult_SerializationError</span></td>
    <td>An error occurred serializing a property value, for example an invalid ParameterList could have been passed to <span class="NDLSystemFont"><a href="../egf/egf__Entity.htm#classegf_1_1_entity_1a090ac274cc5d6f03bd7e75ee71433229">Entity::ApplyProperties</a></span>. </td>
</tr>

  </tbody>
</table>
</div>

<a name="namespaceegf_1a71205b27fec1b4d2992688b7a303117d"></a>
<p class=NDLRefHead2>egf::GameServiceAllocatorFlags</p>


<p class="NDLRefMemberDescription">Define bit flags to modify service allocations in the Create() function. </p>


<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">gsaf_USE_CUSTOM_ENTITY_MANAGER</span></td>
    <td>Use this flag to skip creation of the <span class="NDLSystemFont"><a href="../egf/egf__EntityManager.htm">EntityManager</a></span>. If you use this then it is assumed that you will registered your own <span class="NDLSystemFont"><a href="../egf/egf__EntityManager.htm">EntityManager</a></span> derived class. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">gsaf_NO_RAPID_ITERATION</span></td>
    <td>Use this flag to skip creation of rapid iteration support services. </td>
</tr>

  </tbody>
</table>
</div>

<a name="namespaceegf_1aa252daadc0d452d47b30950c7640118c"></a>
<p class=NDLRefHead2>egf::_Adopt</p>


<p class="NDLRefMemberDescription">Special value used to distinguish an adopting constructor from a normal constructor. </p>


<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">Adopt</span></td>
    <td>&nbsp;</td>
</tr>

  </tbody>
</table>
</div>



<a name="namespaceegf_1a8554f823bc93048f7ee1400b9dba141a"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">EntityID</a></span>  kENTITY_INVALID</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceegf_1a9ba4690f07ab3f3e64743a678544d1d9"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont"><a href="../egf/egf__EventID.htm">EventID</a></span>  kEVT_INVALID</p>
<p class="NDLRefMemberDescription">illegal Event ID </p>

<a name="namespaceegf_1abdb0a06b08a254e6938e651cf9d1af9b"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a37c593debc73d82d7ddc571c725f0e2d">efd::TimeType</a></span>  time_Now</p>
<p class="NDLRefMemberDescription">Used to schedule a task to run on the next tick. </p>
<p class="NDLRefMemberDetailedDescription">The time will be updated to the current time when the task is queued into the <span class="NDLSystemFont"><a href="../egf/egf__Scheduler.htm">Scheduler</a></span>. If there are already other pending "now" tasks, "first" tasks or past-due tasks they will run first. </p>

<a name="namespaceegf_1a0f7a4d6590e80a0d71ed39461464c3d0"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a37c593debc73d82d7ddc571c725f0e2d">efd::TimeType</a></span>  time_First</p>
<p class="NDLRefMemberDescription">Used to schedule a task to run before any already pending "now" tasks. </p>
<p class="NDLRefMemberDetailedDescription">The time will be updated to zero when the task is queued into the <span class="NDLSystemFont"><a href="../egf/egf__Scheduler.htm">Scheduler</a></span>. If there are already other "first" tasks pending the new task will run after those tasks. </p>

<a name="namespaceegf_1a7634df073acad81886c12d9703c7bdcf"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../egf/egf__ScriptContext.htm">ScriptContext</a></span>  g_bapiContext</p>
<p class="NDLRefMemberDescription">Global instance of the <span class="NDLSystemFont"><a href="../egf/egf__ScriptContext.htm">ScriptContext</a></span> used by built-in behavior APIs. </p>
<a name="private_methods"></a>
<p class="NDLRefHead1">Private Methods</p>


<a name="namespaceegf_1a64ff632203fd6747a48fc71adabb2462"></a>
<p class="NDLRefMemberFunction">template &lt;typename T  , <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  msgguid&gt; void  RegisterBreakpointRequestFactory(<span class="NDLSystemFont"><a href="../efd/efd__GenericFactory.htm">efd::MessageFactory</a></span>* pMessageFactory)</p>
<p class="NDLRefMemberDescription">usage: <span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a64ff632203fd6747a48fc71adabb2462">RegisterBreakpointRequestFactory< type, guid >()</a></span>; </p>

<a name="namespaceegf_1a4f2957bf2f201bfebc09712e04e32391"></a>
<p class="NDLRefMemberFunction">template &lt;typename T  , <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  msgguid&gt; void  RegisterBreakpointResponseFactory(<span class="NDLSystemFont"><a href="../efd/efd__GenericFactory.htm">efd::MessageFactory</a></span>* pMessageFactory)</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceegf_1a176aa56678e64d2a3170183e1f0d5b8c"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>  TranslatePropertyResult(<span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">egf::PropertyResult</a></span> value)</p>
<p class="NDLRefMemberDescription">Helper to map a <span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">egf::PropertyResult</a></span> enumeration into a string name. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">value</span></td>
    <td>The enumeration value to get the name </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceegf_1ab3d30b9541702fb9239da18c417edcb2"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  CreateGameServices(<br/><span class="NDLSystemFont"><a href="../efd/efd__ServiceManager.htm">efd::ServiceManager</a></span>* pServiceManager, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> flags = 0)</p>
<p class="NDLRefMemberDescription">Create the common Game Framework services needed by most applications. </p>
<p class="NDLRefMemberDetailedDescription">If you use a fairly standard configuration you can simply call this method to create, configure and register the services.</p>
<p class="NDLRefMemberDetailedDescription">This function always creates the following services: <span class="NDLSystemFont"><a href="../egf/egf__FlatModelManager.htm">egf::FlatModelManager</a></span>, <span class="NDLSystemFont"><a href="../egf/egf__EntityLoaderService.htm">egf::EntityLoaderService</a></span>, <span class="NDLSystemFont"><a href="../egf/egf__Scheduler.htm">egf::Scheduler</a></span> and <span class="NDLSystemFont"><a href="../egf/egf__NotificationService.htm">egf::NotificationService</a></span>.</p>
<p class="NDLRefMemberDetailedDescription">In addition, unless disabled by passing the flags defined in GameServiceAllocatorFlags, the <span class="NDLSystemFont"><a href="../egf/egf__EntityManager.htm">egf::EntityManager</a></span> and <span class="NDLSystemFont"><a href="../egf/egf__RapidIterationSystemService.htm">egf::RapidIterationSystemService</a></span> services are created.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pServiceManager</span></td>
    <td>The ServiceManager to which the services are registered </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">flags</span></td>
    <td>Flags from the GameServiceAllocatorFlags enum to change default behavior </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceegf_1aefb67962584d047dda84eb1fbfc93be7"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../egfLua/egfLua__EntityProxy.htm">egfLua::EntityProxy</a></span>*  lua_toEntityProxy(<br/>lua_State* L, <br/>int pos)</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceegf_1ad898a8adfbc77673454d2c82020d38ee"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  lua_checkEntityProxy(<br/>lua_State* L, <br/>int pos)</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceegf_1a28ef5ec8ba6ca9817fcc6aafe9c6e67d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  lua_getFunction(<br/>lua_State* L, <br/>const char* moduleName, <br/>const char* methodName)</p>
<p class="NDLRefMemberDescription">Given a lua state, a module name, and a method name, push the method to the top of the Lua stack. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">L</span></td>
    <td>lua state. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">moduleName</span></td>
    <td>Name of the module. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">methodName</span></td>
    <td>name of the method. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>true if the function is now on the top of L stack, false if the method was not found. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceegf_1a5671b59d3e502a0826644c730a4ae49b"></a>
<p class="NDLRefMemberFunction">void*  LuaAllocator(<br/>void* ud, <br/>void* ptr, <br/>size_t osize, <br/>size_t nsize)</p>
<p class="NDLRefMemberDescription">Custom allocator used by Lua. </p>
<p class="NDLRefMemberDetailedDescription">This allocator forces Lua to use our internal allocator. </p>

<a name="namespaceegf_1a6265fcabff1cd358ce8aadca58906ba7"></a>
<p class="NDLRefMemberFunction">int  lua_GetEntityProxyByID(lua_State* L)</p>
<p class="NDLRefMemberDescription">Get an EntityProxy for the entity with ID. </p>
<p class="NDLRefMemberDetailedDescription">Lua Stack In: [-1] <span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">EntityID</a></span> as UInt64, or an EntityProxy userdata object.</p>
<p class="NDLRefMemberDetailedDescription">Lua Stack Out: [-1] EntityProxy userdata, or nil if the entity was not found.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">L</span></td>
    <td>lua state to use. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>1, number of values pushed on the stack. Either EntityProxy userdata or nil. </td>
</tr>

        </tbody>
    </table>
</div>


 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
