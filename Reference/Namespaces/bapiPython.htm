<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>bapiPython Namespace</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">bapiPython Namespace</p>





<a name="private_methods"></a>
<p class="NDLRefHead1">Private Methods</p>


<a name="namespacebapi_python_1a74b245bf6bd414c67ff9640031d389da"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a31570c844c29f8e0f335ac87dcb55401">efd::SInt64</a></span>  PyLongOrInt_AsLongLong(PyObject* py)</p>
<p class="NDLRefMemberDescription">Convert a python long or int to <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a31570c844c29f8e0f335ac87dcb55401">efd::SInt64</a></span>. </p>

<a name="namespacebapi_python_1a3079b994432a35b72f4e82b07c8336d0"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a845df149ec80fc0bf36f875ece09ef9d">efd::UInt64</a></span>  PyLongOrInt_AsUnsignedLongLong(PyObject* py)</p>
<p class="NDLRefMemberDescription">Convert a python long or int to <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a845df149ec80fc0bf36f875ece09ef9d">efd::UInt64</a></span>. </p>

<a name="namespacebapi_python_1a9cd70a2fd3e0c218d25b444d7c242ffd"></a>
<p class="NDLRefMemberFunction">template &lt;typename T  &gt; <span class="NDLSystemFont"><a href="../efd/efd__list.htm">efd::list</a></span>&lt;T&gt;  PyList_ToEutList(PyObject* py)</p>
<p class="NDLRefMemberDescription">Python list to <span class="NDLSystemFont"><a href="../efd/efd__list.htm">efd::list</a></span>. </p>

<a name="namespacebapi_python_1a4c5264ad91318b5a20056dc698a4da37"></a>
<p class="NDLRefMemberFunction">template &lt;typename T  &gt; PyObject*  PyList_FromEutList(const <span class="NDLSystemFont"><a href="../efd/efd__list.htm">efd::list</a></span>&lt;T&gt;& l)</p>
<p class="NDLRefMemberDescription">Python list from <span class="NDLSystemFont"><a href="../efd/efd__list.htm">efd::list</a></span>. </p>

<a name="namespacebapi_python_1ae588e162c608e7a53a9d402ce5a68966"></a>
<p class="NDLRefMemberFunction">template &lt;typename KEY  , typename DATA  &gt; <span class="NDLSystemFont"><a href="../efd/efd__map.htm">efd::map</a></span>&lt;KEY, DATA&gt;  PyDict_ToEutMap(PyObject* py)</p>
<p class="NDLRefMemberDescription">Python dictionary to <span class="NDLSystemFont"><a href="../efd/efd__map.htm">efd::map</a></span>. </p>

<a name="namespacebapi_python_1af154a74972a4f76529385c0f8f18812e"></a>
<p class="NDLRefMemberFunction">template &lt;typename KEY  , typename DATA  &gt; PyObject*  PyDict_FromEutMap(const <span class="NDLSystemFont"><a href="../efd/efd__map.htm">efd::map</a></span>&lt;KEY, DATA&gt;& m)</p>
<p class="NDLRefMemberDescription">Python dictionary from <span class="NDLSystemFont"><a href="../efd/efd__map.htm">efd::map</a></span>. </p>

<a name="namespacebapi_python_1a8ed4c061cda1691b722cd87320c09429"></a>
<p class="NDLRefMemberFunction">PyObject*  AddPyObjectToPyTuple(<br/>PyObject* result, <br/>PyObject* objToAdd)</p>
<p class="NDLRefMemberDescription">This method is a helper for building the python representation for built-in APIs that have multiple return values. </p>
<p class="NDLRefMemberDetailedDescription">It takes the built-ins return value, if any, and also appends an additional output parameter. The result is a PyTuple containing all the results. Use this method in your SWIG typemap to simplify the process of building the result. This approach avoids having to repeat this logic directly in your typename for each type that can be used as an output parameter. For example, say you wanted to return two <span class="NDLSystemFont"><a href="../efd/efd__Point3.htm">efd::Point3</a></span> parameters from a built-in with the following signature:</p>
<p class="NDLRefMemberDetailedDescription">
<pre>
        bool PointTest(efd::Point3 arg1, efd::Point3& out1, efd::Point3& out2);
         </pre>
</p>
<p class="NDLRefMemberDetailedDescription">To do so, you may use the following SWIG typemap:</p>
<p class="NDLRefMemberDetailedDescription">
<pre>
        // The following statement in typename tells SWIG that any &quot;Point3&&quot; is treated as an
        // output parameter.
        // Note:  This approach will NOT work for in/out parameters, only for pure output
        // parameters.
        // The &quot;(efd::Point3 temp)&quot; causes a temporary variable of type Point3 to be declared.
        %typemap(in, numinputs=0) efd::Point3& (efd::Point3 temp)
        {
            // The following statement tells SWIG that the pointer to the parameter is the
            // temporary variable declared above.
            $1 = &temp;
        }

        // This typename tells SWIG how to place the C++ object returned by your built-in API into
        // the PyObject that is the binding method's result.
        %typemap(argout) efd::Point3&
        {
            // By using PyTraits, we may trivially convert the argument into a PyObject.  Remember
            // that our argument is a pointer to the local variable &quot;temp&quot; defined above, so we
            // need to pass the value pointed to (*$1 not just $1).  We cannot directly use the
            // &quot;temp&quot; variable, but must use $1.
            PyObject *o = bapiPython::PyTraits&lt;efd::Point3&gt;::ToPyObject(*$1);

            // The typemap doesn't know if the built-in API being bound has one or many results,
            // but luckily the AddPyObjectToTuple handles this situation for us.  So we may simply
            // call this method.
            $result = bapiPython::AddPyObjectToTuple($result, o);
        }
         </pre>
</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">There is a special case to keep in mind: If the function you are binding returns a type that gets converted into a tuple (e.g., Point3), then any additional return values will get added to the returned tuple. For example, if a function returned a Point3 but also had a Point3 as an output parameter, then it is impossible for the typename to tell this case apart from a function with multiple output parameters. As a consequence, python will see the result as a single tuple with four elements. The first three elements are the x, y, and z values from the returned Point3, and the fourth element will be another tuple containing the output parameter Point3.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">result</span></td>
    <td>The "result so far". It could be NULL if we are binding a function with a void return type and this is the first output parameter. It could be the function's return value converted into a PyObject. It could also be a PyTuple resulting from a previous call to this method. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">objToAdd</span></td>
    <td>Current output parameter to be added to the result. It can be any type of PyObject, including another container like list or tuple. It will become the last element in a Tuple.</td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Pointer to a PyObject, a tuple containing all the results, with an additional output parameter appended as the last element in the tuple. </td>
</tr>

        </tbody>
    </table>
</div>


 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
