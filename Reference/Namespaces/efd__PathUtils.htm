<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::PathUtils Namespace</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::PathUtils Namespace</p>





<a name="private_methods"></a>
<p class="NDLRefHead1">Private Methods</p>


<a name="namespaceefd_1_1_path_utils_1a18b614e900c11ff13ba58df35be59a27"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>  GetNativePathSeperator()</p>
<p class="NDLRefMemberDescription">Returns the default platform specific path separator character (i.e. </p>
<p class="NDLRefMemberDetailedDescription">'/' or '\' depending on the platform). </p>

<a name="namespaceefd_1_1_path_utils_1a90c9a023109c37b2444099eff28263f1"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>  GetNonNativePathSeperator()</p>
<p class="NDLRefMemberDescription">Returns whichever path separator character is not used on this platform. </p>

<a name="namespaceefd_1_1_path_utils_1a777efe0ede06dc870a729a14e193e1b4"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetPlatformSupportsRelativePaths()</p>
<p class="NDLRefMemberDescription">Returns true if the platform supports relative paths for operations like opening a file. </p>
<p class="NDLRefMemberDetailedDescription">Windows and Linux support relative paths, PS3 and Xbox360 do not. </p>

<a name="namespaceefd_1_1_path_utils_1a6b38a11db0d7f4c036089abce683e0f8"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsPathSeperator(const <span class="NDLSystemFont"><a href="../efd/efd__utf8char_t.htm">efd::utf8char_t</a></span>& i_ch)</p>
<p class="NDLRefMemberDescription">Returns true if the character is any type of path separator (i.e. '/' or '\'). </p>

<a name="namespaceefd_1_1_path_utils_1af78aa46ea9544898787c1648b0c8a7c5"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsExtensionSeperator(const <span class="NDLSystemFont"><a href="../efd/efd__utf8char_t.htm">efd::utf8char_t</a></span>& i_ch)</p>
<p class="NDLRefMemberDescription">Returns true if the character is the file extension separator (i.e. '.'). </p>

<a name="namespaceefd_1_1_path_utils_1a393d398ee9e6740a46a4a84f2babeee7"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsAbsolutePath(const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& i_strPath)</p>
<p class="NDLRefMemberDescription">Returns true if the provided path is an absolute path - <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">utf8string</a></span> version. </p>
<p class="NDLRefMemberDetailedDescription">An absolute path is one that is not relative (see IsRelativePath) and does not contain any ".." substrings. </p>

<a name="namespaceefd_1_1_path_utils_1a86d605b9781178a3ac3ec1492a97553c"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsAbsolutePath(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pCStr)</p>
<p class="NDLRefMemberDescription">Returns true if the provided path is an absolute path - char* version. </p>
<p class="NDLRefMemberDetailedDescription">An absolute path is one that is not relative (see IsRelativePath) and does not contain any ".." substrings. </p>

<a name="namespaceefd_1_1_path_utils_1a66527887890c15cf76de224a260812be"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsStandarizedAbsolutePath(const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& i_strPath)</p>
<p class="NDLRefMemberDescription">Returns true if pcPath is an absolute path already in "standardized" form (see <span class="NDLSystemFont"><a href="../Namespaces/efd__PathUtils.htm#namespaceefd_1_1_path_utils_1a5cbab3c7e3dab6c51dc5c238e32b7501">PathUtils::Standardize</a></span>), with no removable ".." substring (see <span class="NDLSystemFont"><a href="../Namespaces/efd__PathUtils.htm#namespaceefd_1_1_path_utils_1a91b26bf82bb7a058b118b6440f184ce4">PathUtils::RemoveDotDots</a></span>). </p>
<p class="NDLRefMemberDetailedDescription">This is the <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">utf8string</a></span> version. </p>

<a name="namespaceefd_1_1_path_utils_1a6bd1e8efd0b5c65665493b76ffbab5bb"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsStandarizedAbsolutePath(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pCStr)</p>
<p class="NDLRefMemberDescription">Returns true if pcPath is an absolute path already in "standardized" form (see <span class="NDLSystemFont"><a href="../Namespaces/efd__PathUtils.htm#namespaceefd_1_1_path_utils_1a5cbab3c7e3dab6c51dc5c238e32b7501">PathUtils::Standardize</a></span>), with no removable ".." substring (see <span class="NDLSystemFont"><a href="../Namespaces/efd__PathUtils.htm#namespaceefd_1_1_path_utils_1a91b26bf82bb7a058b118b6440f184ce4">PathUtils::RemoveDotDots</a></span>). </p>
<p class="NDLRefMemberDetailedDescription">This is the char* version. </p>

<a name="namespaceefd_1_1_path_utils_1af1ee365837594d1b82c71043b7d21de4"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsRelativePath(const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& i_strPath)</p>
<p class="NDLRefMemberDescription">Returns true if the provided path is a relative path - <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">utf8string</a></span> version. </p>
<p class="NDLRefMemberDetailedDescription">On most platforms and path that begins with a slash is not relative. On Windows and Xbox360 paths that begin with a drive letter followed by a colon are also not relative. </p>

<a name="namespaceefd_1_1_path_utils_1a27c9a759ef26d5ecb67600786e033118"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsRelativePath(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pCStr)</p>
<p class="NDLRefMemberDescription">Returns true if the provided path is a relative path - char* version. </p>
<p class="NDLRefMemberDetailedDescription">On most platforms and path that begins with a slash is not relative. On Windows and Xbox360 paths that begin with a drive letter followed by a colon are also not relative. </p>

<a name="namespaceefd_1_1_path_utils_1a93a657f5f189092b4990ddceb4636ffa"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsUNCPath(const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& i_strPath)</p>
<p class="NDLRefMemberDescription">Return true if the path follows the Universal Naming Convention (UNC) style. </p>
<p class="NDLRefMemberDetailedDescription">A UNC path has the form "\\server\share\path\filename." For our purposes any path that starts with two slashes will be considered UNC-style. </p>

<a name="namespaceefd_1_1_path_utils_1ab82be573a29dd23a090bc33cc365495b"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  PathContainsDrive(const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& i_strPath)</p>
<p class="NDLRefMemberDescription">On platforms that support drive designations, this returns true if the given path starts with a drive designation. </p>
<p class="NDLRefMemberDetailedDescription">Windows and Xbox360 support drive letters of the form "l:" (where 'l' is any letter from 'a' to 'z' including upper case variants) optionally followed by a path separator. Other platforms always return false from this method. </p>

<a name="namespaceefd_1_1_path_utils_1a803c22605802eca71ecfc5dbe684a741"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>  PathMakeNative(const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& i_strPath)</p>
<p class="NDLRefMemberDescription">Converts non-native path separators into native path separators. </p>
<p class="NDLRefMemberDetailedDescription">For example, on Windows this would convert "c:/foo\bar/whatever" into "c:\foo\bar\whatever". </p>

<a name="namespaceefd_1_1_path_utils_1ad96f7eb74444d06941311ac9c8933d96"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>  PathMakeNonNative(const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& i_strPath)</p>
<p class="NDLRefMemberDescription">Converts native path separators into non-native path separators. </p>
<p class="NDLRefMemberDetailedDescription">For example, on Windows this would convert "\foo\bar\whatever" into "/foo/bar/whatever". </p>

<a name="namespaceefd_1_1_path_utils_1a1246e22c910ecdd13ba90d10dc774399"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>  PathCombine(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& i_strRoot, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& i_strMore)</p>
<p class="NDLRefMemberDescription">Given a root path and an additional path or filename, combine the two sections. </p>
<p class="NDLRefMemberDetailedDescription">If needed a native path separator will be inserted between the two sections.</p>
<p class="NDLRefMemberDetailedDescription">Examples: 
<pre>                &quot;some/root/path&quot; + &quot;file.ext&quot; =&gt; &quot;some/root/path/file.ext&quot;
                &quot;some/root/path/&quot; + &quot;file.ext&quot; =&gt; &quot;some/root/path/file.ext&quot;
                &quot;some/root/path&quot; + &quot;/file.ext&quot; =&gt; &quot;some/root/path/file.ext&quot;
                &quot;some/root/path&quot; + &quot;more/path&quot; =&gt; &quot;some/root/path/more/path&quot;
                &quot;some/root/path/&quot; + &quot;/more/path&quot; =&gt; &quot;some/root/path/more/path&quot;
</pre>
</p>
<p class="NDLRefMemberDetailedDescription">NOTE: Any empty strings are treated as if they contained a slash. So for example: 
<pre>                &quot;&quot; + &quot;filename&quot; =&gt; &quot;filename&quot;
                &quot;/&quot; + &quot;filename&quot; =&gt; &quot;/filename&quot;
                &quot;&quot; + &quot;/filename&quot; =&gt; &quot;/filename&quot;
                &quot;path&quot; + &quot;&quot; =&gt; &quot;path&quot;
                &quot;path&quot; + &quot;/&quot; =&gt; &quot;path/&quot;
                &quot;path/&quot; + &quot;&quot; =&gt; &quot;path/&quot;
</pre>
</p>

<a name="namespaceefd_1_1_path_utils_1ac8c2ae8548ce3cfaf3cb712d75ffb81c"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>  PathGetExtension(const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& i_strPath)</p>
<p class="NDLRefMemberDescription">Gets the file extension, if any, from the path with file name. </p>
<p class="NDLRefMemberDetailedDescription">The extensions is all characters following the last extension separator in the portion of the path after the last path separator. If there is no extension the empty string is returned.</p>
<p class="NDLRefMemberDetailedDescription">Examples: 
<pre>                &quot;filename.ext&quot; =&gt; &quot;ext&quot;
                &quot;filename.foo.ext&quot; =&gt; &quot;ext&quot;
                &quot;filename&quot; =&gt; &quot;&quot;
                &quot;filename.&quot; =&gt; &quot;&quot;
                &quot;some.path/filename.ext&quot; =&gt; &quot;ext&quot;
                &quot;some.path/filename&quot; =&gt; &quot;&quot;
                &quot;some.path\filename&quot; =&gt; &quot;&quot;
</pre>
</p>

<a name="namespaceefd_1_1_path_utils_1a6a6a1887dc21f676f5c54f4d8ad38328"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>  PathAddExtension(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& i_strRoot, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& i_strExt)</p>
<p class="NDLRefMemberDescription">Adds an extension to the current filename. </p>
<p class="NDLRefMemberDetailedDescription">Ensures that a "." separates the extension from the rest of the filename.</p>
<p class="NDLRefMemberDetailedDescription">Examples: 
<pre>                &quot;filename&quot; + &quot;ext&quot; =&gt; &quot;filename.ext&quot;
                &quot;filename&quot; + &quot;.ext&quot; =&gt; &quot;filename.ext&quot;
</pre>
</p>
<p class="NDLRefMemberDetailedDescription">NOTE: this adds an extension, it does not change an extension. So for example: 
<pre>                &quot;filename.ext&quot; + &quot;ext&quot; =&gt; &quot;filename.ext.ext&quot;
                &quot;filename.ext&quot; + &quot;.ext&quot; =&gt; &quot;filename.ext.ext&quot;
                &quot;filename.&quot; + &quot;ext&quot; =&gt; &quot;filename..ext&quot;
                &quot;filename.&quot; + &quot;.ext&quot; =&gt; &quot;filename..ext&quot;
</pre>
</p>

<a name="namespaceefd_1_1_path_utils_1a5d6df47eed3085b26afa80d069f7f262"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>  PathRemoveFileExtension(const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& i_strPath)</p>
<p class="NDLRefMemberDescription">Remove the file extension, if any, from the path with file name. </p>
<p class="NDLRefMemberDetailedDescription">The extension is all characters following the last extension separator in the portion of the path after the last path separator. The extension separator itself is also removed.</p>
<p class="NDLRefMemberDetailedDescription">Examples: 
<pre>                &quot;path/filename.ext&quot; =&gt; &quot;path/filename&quot;
                &quot;path/filename&quot; =&gt; &quot;path/filename&quot;
                &quot;path.with.dot/filename.ext&quot; =&gt; &quot;path.with.dot/filename&quot;
                &quot;path.with.dot/filename&quot; =&gt; &quot;path.with.dot/filename&quot;
                &quot;file.with.multiple.dots&quot; =&gt; &quot;file.with.multiple&quot;
                &quot;.ext&quot; =&gt; &quot;&quot;
                &quot;.&quot; =&gt; &quot;&quot;
                &quot;..&quot; =&gt; &quot;.&quot;
</pre>
</p>

<a name="namespaceefd_1_1_path_utils_1acf7d06d00e2cabe3c7a558a4476042ec"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>  PathRemoveFileName(const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& i_strPath)</p>
<p class="NDLRefMemberDescription">Remove the file name from the path with file name. </p>
<p class="NDLRefMemberDetailedDescription">The filename is all characters following the last path separator. </p>

<a name="namespaceefd_1_1_path_utils_1ad5487fb2c0133db1c6cea731b8ea499e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>  PathGetFileName(const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& i_strPath)</p>
<p class="NDLRefMemberDescription">Get the file name portion from the full path with file name. </p>
<p class="NDLRefMemberDetailedDescription">The filename is all characters following the last path separator. If no path separator is present, the result is the entire source file name. </p>

<a name="namespaceefd_1_1_path_utils_1a8f03bffdb27253c01ba3431fe77f86ab"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>  PathRemoveSlashSlash(const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& i_strPath)</p>
<p class="NDLRefMemberDescription">Remove any double slashes from the middle of the path. </p>
<p class="NDLRefMemberDetailedDescription">This will not remove leading double slashes which denote a UNC share. Only native path separators are considered.</p>
<p class="NDLRefMemberDetailedDescription">Examples: 
<pre>                &quot;c:\\foo\\bar&quot; =&gt; &quot;c:\foo\bar&quot;
                &quot;\\server\share\\something&quot; =&gt; &quot;\\server\share\something&quot;
</pre>
</p>

<a name="namespaceefd_1_1_path_utils_1a4927b915ef26d49a6b6c7d9e1f92c973"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>  PathRemoveSlashDotSlash(const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& i_strPath)</p>
<p class="NDLRefMemberDescription">Remove any occurrences of syntactically irrelevant "current directories". </p>
<p class="NDLRefMemberDetailedDescription">Only native path separators are considered.</p>
<p class="NDLRefMemberDetailedDescription">Examples: 
<pre>                &quot;some\.\path\.\with\.\redundant\.\info&quot; =&gt; &quot;some\path\with\redundant\info&quot;
                &quot;.\some\.\path&quot; =&gt; &quot;.\some\path&quot;
                &quot;some\.\.\.\.\.\.\path&quot; =&gt; &quot;.\some\path&quot;
</pre>
</p>

<a name="namespaceefd_1_1_path_utils_1a18d5f26957b74279d19613ed1d62c442"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>  PathRemoveDotDots(const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& i_strPath)</p>
<p class="NDLRefMemberDescription">Simplifies paths that use the ".." relative path notion to their simplest form. </p>
<p class="NDLRefMemberDetailedDescription">Both native and non-native path separators are considered and the resulting path will use only native path separators.</p>
<p class="NDLRefMemberDetailedDescription">Examples: 
<pre>                &quot;some\path\..\with\relative\..\info&quot; =&gt; &quot;some\with\info&quot;
                &quot;..\some\..\..\path&quot; =&gt; &quot;..\..\path&quot;
</pre>
</p>

<a name="namespaceefd_1_1_path_utils_1a7d2afb0b7252324842683cff82d474d0"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  ConvertToRelative(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& i_strAbsolutePath, <br/><span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& o_result)</p>
<p class="NDLRefMemberDescription">Converts an absolute path into a relative path from the current working directory. </p>

<a name="namespaceefd_1_1_path_utils_1a57e860e254c5f1aad49188b919f233b2"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  ConvertToRelative(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& i_strAbsolutePath, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& i_strRelativeToHere, <br/><span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& o_result)</p>
<p class="NDLRefMemberDescription">Converts an absolute path into a relative path from the given base directory. </p>

<a name="namespaceefd_1_1_path_utils_1afce766cc25a2df0b062c0cb4dcc6a44a"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>  ConvertToAbsolute(const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& i_strRelativePath)</p>
<p class="NDLRefMemberDescription">Converts a relative path from the current working directory into an absolute path. </p>

<a name="namespaceefd_1_1_path_utils_1af1c448f413eac3dc0b21999de78c1426"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>  ConvertToAbsolute(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& i_strRelativePath, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& i_strRelativeToHere)</p>
<p class="NDLRefMemberDescription">Converts a relative path from the given base to an absolute path. </p>

<a name="namespaceefd_1_1_path_utils_1a56f2d0f9328a7b324f319350b7b00b20"></a>
<p class="NDLRefMemberFunction">size_t  ConvertToAbsolute(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pcPath, <br/>size_t stBytes, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pcRelativeToHere)</p>
<p class="NDLRefMemberDescription">Converts relative path pcPath relative to pcRelativeToHere to a standardized absolute path. </p>
<p class="NDLRefMemberDetailedDescription">Assumes pcPath was allocated with stBytes bytes of memory. Returns the string length of pcPath. This function will return 0 if the resulting path will not fit within the size of the buffer, and pcPath will be <span class="NDLSystemFont"><a href="../efd/efd__set.htm">set</a></span> to an empty string. If pcRelativeToHere is an empty string, the current working directory will be used instead. None of the char* input parameters should be NULL. </p>

<a name="namespaceefd_1_1_path_utils_1a8393b8975052143c3b378b2cd264e639"></a>
<p class="NDLRefMemberFunction">size_t  ConvertToAbsolute(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pcPath, <br/>size_t stBytes)</p>
<p class="NDLRefMemberDescription">Converts relative path pcPath relative to the current working directory to a standardized absolute path. </p>
<p class="NDLRefMemberDetailedDescription">Assumes pcPath was allocated with stBytes bytes of memory. Returns the string length of pcPath. This function will return 0 if the resulting path will not fit within the size of the buffer, and pcPath will be <span class="NDLSystemFont"><a href="../efd/efd__set.htm">set</a></span> to an empty string. The char* input parameter should not be NULL. </p>

<a name="namespaceefd_1_1_path_utils_1a9819a6f9059255e3036adead59de0807"></a>
<p class="NDLRefMemberFunction">size_t  ConvertToAbsolute(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pcAbsolutePath, <br/>size_t stBytes, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pcRelativePath, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pcRelativeToHere)</p>
<p class="NDLRefMemberDescription">Converts the absolute path pcAbsolutePath to a relative path relative to absolute path pcRelativeToHere, writes the resulting relative path to pcRelativePath, and returns the number of bytes written. </p>
<p class="NDLRefMemberDetailedDescription">pcRelativePath is assumed to have been allocated with stRelBytes bytes of memory. This function assumes that pcAbsolutePath and pcRelativeToHere are both absolute paths. This function will return 0 if pcAbsolutePath and pcRelativeToHere have no common root, for example if one is located on a different drive than the other. </p>

<a name="namespaceefd_1_1_path_utils_1a8a554be06087d9dfd10d28c22d2ff82c"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>  GetWorkingDirectory()</p>
<p class="NDLRefMemberDescription">Returns the platform specific default working directory - <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">utf8string</a></span> version. </p>
<p class="NDLRefMemberDetailedDescription">The platform specific default working directory is: Windows, Linux - the current working directory; Xbox360 - "d:\\"; PS3 - "/app_home/". </p>

<a name="namespaceefd_1_1_path_utils_1ae1641711d674c483686fa0dce6d953b6"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  GetWorkingDirectory(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pcPath, <br/>size_t stDestSize)</p>
<p class="NDLRefMemberDescription">Returns the platform specific default working directory - char* version. </p>
<p class="NDLRefMemberDetailedDescription">The platform specific default working directory is: Windows, Linux - the current working directory; Xbox360 - "d:\\"; PS3 - "/app_home/". </p>

<a name="namespaceefd_1_1_path_utils_1a8f79508e346cc73ee0d2368721dea43c"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  GetExecutableDirectory(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pcPath, <br/>size_t stDestSize)</p>
<p class="NDLRefMemberDescription">Writes a string with the application executable's directory to pcPath, assuming pcPath was allocated with stDestSize bytes. </p>
<p class="NDLRefMemberDetailedDescription">Returns true if the function succeeded. </p>

<a name="namespaceefd_1_1_path_utils_1a6b15c8205ae2668e6846c3727a1778b6"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  GetDefaultLogDirectory(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pcPath, <br/>size_t stDestSize)</p>
<p class="NDLRefMemberDescription">Writes a string with the application's default log directory to pcPath, assuming pcPath was allocated with stDestSize bytes. </p>
<p class="NDLRefMemberDetailedDescription">Returns true if the function succeeded. </p>

<a name="namespaceefd_1_1_path_utils_1a5cbab3c7e3dab6c51dc5c238e32b7501"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  Standardize(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pcPath)</p>
<p class="NDLRefMemberDescription">Convert a file path from Windows/Unix to the specific platform's format. </p>

<a name="namespaceefd_1_1_path_utils_1a822e5c2f3e161fd2676839cc08d25068"></a>
<p class="NDLRefMemberFunction">size_t  ConvertToRelative(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pcRelativePath, <br/>size_t stRelBytes, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pcAbsolutePath, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pcRelativeToHere)</p>
<p class="NDLRefMemberDescription">Converts the absolute path pcAbsolutePath to a relative path relative to absolute path pcRelativeToHere, writes the resulting relative path to pcRelativePath, and returns the number of bytes written. </p>
<p class="NDLRefMemberDetailedDescription">pcRelativePath is assumed to have been allocated with stRelBytes bytes of memory. This function assumes that pcAbsolutePath and pcRelativeToHere are both absolute paths. This function will return 0 if pcAbsolutePath and pcRelativeToHere have no common root, for example if one is located on a different drive than the other. </p>

<a name="namespaceefd_1_1_path_utils_1a91b26bf82bb7a058b118b6440f184ce4"></a>
<p class="NDLRefMemberFunction">void  RemoveDotDots(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pcPath)</p>
<p class="NDLRefMemberDescription">Given an absolute or relative path pcString, removes in-place any removable ".." substring from the path. </p>
<p class="NDLRefMemberDetailedDescription">For example, will convert "C:\Foo\..\Bar" to "C:\Bar." </p>

<a name="namespaceefd_1_1_path_utils_1acedf4373b6b234430acf1db1cf618f65"></a>
<p class="NDLRefMemberFunction">void  RemoveSlashDotSlash(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pcPath)</p>
<p class="NDLRefMemberDescription">Given an absolute or relative path pcString, replaces in-place any removable "\.\" substring in the path with "\". </p>
<p class="NDLRefMemberDetailedDescription">For example, will convert "C:\Foo\.\Bar" to "C:\Foo\Bar." </p>

<a name="namespaceefd_1_1_path_utils_1abf38003424f21298c18ff8317f7c164b"></a>
<p class="NDLRefMemberFunction">void  ReplaceInvalidFilenameCharacters(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pcFilename, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span> cReplacement)</p>
<p class="NDLRefMemberDescription">Given the string pcFilename, replaces all characters that are invalid for a filename with cReplacement. </p>
<p class="NDLRefMemberDetailedDescription">Invalid characters include: /, \, :, *, ?, ", &lt;,&gt; , and |. NOTE: Because slashes are treated as invalid, this function should not be used on full paths, only filenames. </p>

<a name="namespaceefd_1_1_path_utils_1adc135e365e645ab381ee908705e1e68d"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>*  StripAbsoluteBase(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pcAbsolutePath)</p>
<p class="NDLRefMemberDescription">Removes the 'base' from an absolute path. </p>
<p class="NDLRefMemberDetailedDescription">For example "C:\Foo\Bar.txt" would become "\Foo\Bar.txt" </p>

<a name="namespaceefd_1_1_path_utils_1a31a51397fe42d8eb1dafd7f7fa705924"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>*  StripAbsoluteBase(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pcAbsolutePath)</p>
<p class="NDLRefMemberDescription">Removes the 'base' from an absolute path. </p>
<p class="NDLRefMemberDetailedDescription">For example "C:\Foo\Bar.txt" would become "\Foo\Bar.txt" </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
