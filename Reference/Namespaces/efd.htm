<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd Namespace</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />
<meta name="Build" content="PS3">
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd Namespace</p>





<a name="common_types_of_sequence_numbers"></a>
<p class="NDLRefHead1">Common types of sequence numbers</p>


<a name="namespaceefd_1ababaa3acb322035c9543b64f43512d2d"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SequenceNumber.htm">SequenceNumber</a></span>&lt;<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a02da74c5f95666d41c684efde9efcd88">efd::SInt8</a></span>&gt;  SequenceNumber8</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1aa9a04fdd4efe0c4eb621c555f7b84e80"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SequenceNumber.htm">SequenceNumber</a></span>&lt;<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a78e418e4217f674682471407609a8aa8">efd::SInt16</a></span>&gt;  SequenceNumber16</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a8023de784425c9ebbe8e3b03d8e7ee05"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SequenceNumber.htm">SequenceNumber</a></span>&lt;<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>&gt;  SequenceNumber32</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1ad9e587bfb37a6a68864c616d67d051a7"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SequenceNumber.htm">SequenceNumber</a></span>&lt;<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a31570c844c29f8e0f335ac87dcb55401">efd::SInt64</a></span>&gt;  SequenceNumber64</p>
<p class="NDLRefMemberFunction"></p>
<a name="messagewrappers_from_logservicemessages.h"></a>
<p class="NDLRefHead1">MessageWrappers from LogServiceMessages.h</p>


<a name="namespaceefd_1a03464ecc7776a6b3d8169f450e483932"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__MessageWrapper.htm">MessageWrapper</a></span>&lt;<span class="NDLSystemFont"><a href="../efdLogService/efd__LogServiceRequest.htm">LogServiceRequest</a></span>, efd::kMSGID_GetLogDestinationsRequest&gt;  GetLogDestinationsRequest</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a10bc8ec3c68f4c184d2f5cd93a746e90"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__MessageWrapper.htm">MessageWrapper</a></span>&lt;<span class="NDLSystemFont"><a href="../efdLogService/efd__LogServiceRequest.htm">LogServiceRequest</a></span>, efd::kMSGID_GetModulesRequest&gt;  GetModulesRequest</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1af82560e4b80ac09aff7171b1419cbb00"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__MessageWrapper.htm">MessageWrapper</a></span>&lt;<span class="NDLSystemFont"><a href="../efdLogService/efd__LogLevelRequest.htm">LogLevelRequest</a></span>, efd::kMSGID_StopLogStreamRequest&gt;  StopLogStreamRequest</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1ac3162ccce10ec87f45586ff078437989"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__MessageWrapper.htm">MessageWrapper</a></span>&lt;<span class="NDLSystemFont"><a href="../efdLogService/efd__BaseGetLogLevelRequest.htm">BaseGetLogLevelRequest</a></span>, efd::kMSGID_GetLogLevelRequest&gt;  GetLogLevelRequest</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1aa7fb650d6776f5a45e6f2c4fa2381948"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__MessageWrapper.htm">MessageWrapper</a></span>&lt;<span class="NDLSystemFont"><a href="../efdLogService/efd__BaseGetMsgLogLevelRequest.htm">BaseGetMsgLogLevelRequest</a></span>, efd::kMSGID_GetMsgLogLevelRequest&gt;  GetMsgLogLevelRequest</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a8faeba953f615e5b0fd85bb0180fa189"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__MessageWrapper.htm">MessageWrapper</a></span>&lt;<span class="NDLSystemFont"><a href="../efdLogService/efd__BaseSetLogLevelRequest.htm">BaseSetLogLevelRequest</a></span>, efd::kMSGID_SetLogLevelRequest&gt;  SetLogLevelRequest</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a6df78375382d3d61807b487a19da750f"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__MessageWrapper.htm">MessageWrapper</a></span>&lt;<span class="NDLSystemFont"><a href="../efdLogService/efd__BaseStartLogStreamRequest.htm">BaseStartLogStreamRequest</a></span>, efd::kMSGID_StartLogStreamRequest&gt;  StartLogStreamRequest</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a5ad98269befd94a96d1bedd11e2386f8"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__MessageWrapper.htm">MessageWrapper</a></span>&lt;<span class="NDLSystemFont"><a href="../efdLogService/efd__BaseSetMsgLogLevelRequest.htm">BaseSetMsgLogLevelRequest</a></span>, efd::kMSGID_SetMsgLogLevelRequest&gt;  SetMsgLogLevelRequest</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1afdce1869fd0fefff508aacb4fbcb955d"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__MessageWrapper.htm">MessageWrapper</a></span>&lt;<span class="NDLSystemFont"><a href="../efdLogService/efd__NameSetResponse.htm">NameSetResponse</a></span>, efd::kMSGID_GetLogDestinationsResponse&gt;  GetLogDestinationsResponse</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1aec468d395b4cb71fe49a4745c939ce51"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__MessageWrapper.htm">MessageWrapper</a></span>&lt;<span class="NDLSystemFont"><a href="../efdLogService/efd__LogServiceResponse.htm">LogServiceResponse</a></span>, efd::kMSGID_SetLogLevelResponse&gt;  SetLogLevelResponse</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a9a9a081b7721adbc0014c3ac6f91989f"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__MessageWrapper.htm">MessageWrapper</a></span>&lt;<span class="NDLSystemFont"><a href="../efdLogService/efd__LogServiceResponse.htm">LogServiceResponse</a></span>, efd::kMSGID_SetMsgLogLevelResponse&gt;  SetMsgLogLevelResponse</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1abf674cdbc2f18441274ae7a1ff38b228"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__MessageWrapper.htm">MessageWrapper</a></span>&lt;<span class="NDLSystemFont"><a href="../efdLogService/efd__LogServiceResponse.htm">LogServiceResponse</a></span>, efd::kMSGID_StartLogStreamResponse&gt;  StartLogStreamResponse</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a4801d4d8389e643e7478803706b50ac4"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__MessageWrapper.htm">MessageWrapper</a></span>&lt;<span class="NDLSystemFont"><a href="../efdLogService/efd__LogServiceResponse.htm">LogServiceResponse</a></span>, efd::kMSGID_StopLogStreamResponse&gt;  StopLogStreamResponse</p>
<p class="NDLRefMemberFunction"></p>
<a name="time_functions_from_timetype.h"></a>
<p class="NDLRefHead1">Time functions from TimeType.h</p>


<a name="namespaceefd_1a37c593debc73d82d7ddc571c725f0e2d"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aff0a9e9ca8001b330091eb01eeb190c2">efd::Float64</a></span>  TimeType</p>
<p class="NDLRefMemberDescription">TimeType is a reasonably accurate representation of time, measured in fractional seconds. </p>

<a name="namespaceefd_1a80c8463a476fce592fa229343cca54d2"></a>
<p class="NDLRefMemberFunction">void  SetInitialTimeInSec(float offsetInSeconds = 0.0f)</p>
<p class="NDLRefMemberDescription">Set the time at which the application starts in relation to system clock. </p>
<p class="NDLRefMemberDetailedDescription">Reset the base time used by the system, with an optional offset. Subsequent calls to <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a6f6cae7614b4b6f7d386849bd32a95ac">efd::GetCurrentTimeInSec</a></span> will return fOffset + the number of seconds elapsed since the last call to efd::SetInitialTimeInSec(fOffset).</p>
<p class="NDLRefMemberDetailedDescription">Applications that must run for long durations can avoid reductions in floating point precision by calling this function periodically to reset time to a range closer to zero. It is recommended that the function be called during level or mode transitions of an application to avoid discontinuities in update times for animated objects. </p>

<a name="namespaceefd_1a6f6cae7614b4b6f7d386849bd32a95ac"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a37c593debc73d82d7ddc571c725f0e2d">TimeType</a></span>  GetCurrentTimeInSec()</p>
<p class="NDLRefMemberDescription">Get the current time in seconds since the application started, or since the last time that <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a80c8463a476fce592fa229343cca54d2">efd::SetInitialTimeInSec()</a></span> was called. </p>
<a name="universaltypes"></a>
<p class="NDLRefHead1">UniversalTypes</p>

<p class="NDLRefMemberDescription">Define our Universal types in terms of platform specific types.</p>
<p class="NDLRefMemberDescription">The following types have been defined for Win32 in <span class="NDLSystemFont">UniversalTypes_Win32.h</span>. </p>

<a name="namespaceefd_1aa1008ee520c7fb6e8a1d1f5cdbee0dec"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont">bool</span>  Bool</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1add86b31b043c249b287806395efeecd4"></a>
<p class="NDLRefMemberFunction">typedef char  Char</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a6a68ba3a7db300d1ea1cbfcb9aae6518"></a>
<p class="NDLRefMemberFunction">typedef unsigned short  WChar</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a02da74c5f95666d41c684efde9efcd88"></a>
<p class="NDLRefMemberFunction">typedef __int8  SInt8</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a59a3838ab5cdfe87f98f5b8371e4e91d"></a>
<p class="NDLRefMemberFunction">typedef unsigned __int8  UInt8</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a78e418e4217f674682471407609a8aa8"></a>
<p class="NDLRefMemberFunction">typedef __int16  SInt16</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a2ed07576a2c351e88e18847f247b5705"></a>
<p class="NDLRefMemberFunction">typedef unsigned __int16  UInt16</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149"></a>
<p class="NDLRefMemberFunction">typedef __int32  SInt32</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1ac109bbf377c83566102d95319120db7b"></a>
<p class="NDLRefMemberFunction">typedef unsigned __int32  UInt32</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a31570c844c29f8e0f335ac87dcb55401"></a>
<p class="NDLRefMemberFunction">typedef __int64  SInt64</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a845df149ec80fc0bf36f875ece09ef9d"></a>
<p class="NDLRefMemberFunction">typedef unsigned __int64  UInt64</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a"></a>
<p class="NDLRefMemberFunction">typedef float  Float32</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1aff0a9e9ca8001b330091eb01eeb190c2"></a>
<p class="NDLRefMemberFunction">typedef double  Float64</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a1c90207c9a9f0384d8ad0e75c8b68edf"></a>
<p class="NDLRefMemberFunction">typedef HWND  WindowRef</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a2375b536fa4a58cc01da86395a7174c0"></a>
<p class="NDLRefMemberFunction">typedef HWND  StatusWindowRef</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1aa851b8b2f926b4dc0cf43a2887c98304"></a>
<p class="NDLRefMemberFunction">typedef HDC  ContextRef</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a50f22097fdd8f3ce8d094903e15c63f1"></a>
<p class="NDLRefMemberFunction">typedef HGLRC  OglRenderContextRef</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a44529db8f506c0982da416ef92e816e8"></a>
<p class="NDLRefMemberFunction">typedef HINSTANCE  InstanceRef</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a3c50811791f539eb1134e72d187f34d7"></a>
<p class="NDLRefMemberFunction">typedef HACCEL  AcceleratorRef</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1ab7e8a7f6cec319a38d0cc1a3ee370738"></a>
<p class="NDLRefMemberFunction">typedef HMODULE  ModuleRef</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a7219d32a6f89afbd3e76f5379176f114"></a>
<p class="NDLRefMemberFunction">typedef struct <span class="NDLSystemFont"><a href="../efd/efd__EventRecord.htm">efd::EventRecord</a></span>*  EventRecordPtr</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a9676742038c5189f2b23c84e5f3460de"></a>
<p class="NDLRefMemberFunction">typedef LPCREATESTRUCT  CreateStructRef</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1aa24e7c4abc1808d609c5e9271a46c983"></a>
<p class="NDLRefMemberFunction">typedef HMENU  MenuRef</p>
<p class="NDLRefMemberFunction"></p>
<a name="common/system_categories_and_masks_from_category.h"></a>
<p class="NDLRefHead1">Common/system categories and masks from Category.h</p>


<a name="namespaceefd_1a6da917c147bc983542b35dae5b8513b5"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span>  kCAT_INVALID</p>
<p class="NDLRefMemberDescription">Special category used by the network system to communicate with itself. </p>

<a name="namespaceefd_1ad2398a50b197437c54e3503f9cd89204"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span>  kCAT_NetSystem</p>
<p class="NDLRefMemberDescription">Special category used by the network system to communicate with itself. </p>

<a name="namespaceefd_1aad59e59336ad433affa47e76b04065ca"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span>  kCAT_NetEvent</p>
<p class="NDLRefMemberDescription">Special category used by the network system to notify the local system about network events. </p>

<a name="namespaceefd_1ac13c8e3edeec8fa6ec57f16dfa0fc72b"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span>  kCAT_SendToProducer</p>
<p class="NDLRefMemberDescription">Special category used by the network system to implement ProducerSend. </p>
<a name="constants_and_definitions_from_systemframeworkenums.h"></a>
<p class="NDLRefHead1">Constants and definitions from SystemFrameworkEnums.h</p>
<a name="namespaceefd_1a62e4d1bc94248c629612480b748bfd0e"></a>
<p class=NDLRefHead2>efd::SyncResult</p>


<p class="NDLRefMemberDescription">A Synchronous Result is simply a boolean success/fail value. </p>

<p class="NDLRefMemberDetailedDescription">It is used by the <span class="NDLSystemFont"><a href="../efd/efd__ISystemService.htm">ISystemService</a></span> OnPreInit method for consistency with other <span class="NDLSystemFont"><a href="../efd/efd__ISystemService.htm">ISystemService</a></span> methods which return tri-state AsyncResult values. </p>

<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">SyncResult_Failure</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SyncResult_Success</span></td>
    <td>&nbsp;</td>
</tr>

  </tbody>
</table>
</div>

<a name="namespaceefd_1ad81d366c75ea1e1119513a730f79910d"></a>
<p class=NDLRefHead2>efd::AsyncResult</p>


<p class="NDLRefMemberDescription">An Asynchronous Result is a tri-state value which can be used for methods that can either immediately fail, immediately finish or run asynchronously. </p>

<p class="NDLRefMemberDetailedDescription">This is used by the <span class="NDLSystemFont"><a href="../efd/efd__ISystemService.htm">ISystemService</a></span> methods OnInit, OnTick, and OnShutdown. </p>

<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">AsyncResult_Failure</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">AsyncResult_Pending</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">AsyncResult_Complete</span></td>
    <td>&nbsp;</td>
</tr>

  </tbody>
</table>
</div>



<a name="namespaceefd_1aa4ab3871be5995733e12d9b853193b50"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  SSID</p>
<p class="NDLRefMemberDescription">System Service IDentification (SSID) number are used to identify and locate various system services at run-time. </p>
<p class="NDLRefMemberDetailedDescription">System Service <span class="NDLSystemFont"><a href="../efd/efd__IDs.htm">IDs</a></span> are just normal ClassIDs expect they must use a value less than EE_INTERNAL_SERVICE_MAX (0x07ffffff). </p>

<a name="namespaceefd_1a6e97ec959c5691fb125990ede0d7e6d6"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aa4ab3871be5995733e12d9b853193b50">SSID</a></span>  INVALID_SSID</p>
<p class="NDLRefMemberDescription">A Synchronous Result is simply a boolean success/fail value. </p>
<p class="NDLRefMemberDetailedDescription">It is used by the <span class="NDLSystemFont"><a href="../efd/efd__ISystemService.htm">ISystemService</a></span> OnPreInit method for consistency with other <span class="NDLSystemFont"><a href="../efd/efd__ISystemService.htm">ISystemService</a></span> methods which return tri-state AsyncResult values. </p>

<a name="namespaceefd_1a0e327f7ce87e31e10e5bfed4db727aca"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  kNetID_Unassigned</p>
<p class="NDLRefMemberDescription">This sentinel value is used to tell whether the net ID has been <span class="NDLSystemFont"><a href="../efd/efd__set.htm">set</a></span> yet. </p>

<a name="namespaceefd_1ad201c3d226e684e477ca6a3e80f4a6f5"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  kNetID_Client</p>
<p class="NDLRefMemberDescription">All clients are initialized with the same fixed NetID since they start out offline. </p>
<p class="NDLRefMemberDetailedDescription">If they connect to a ChannelManager or Gateway they will be assigned a valid net id. </p>

<a name="namespaceefd_1ad1079df680bf2df903ba0934ad8597de"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  kNetID_Any</p>
<p class="NDLRefMemberDescription">An invalid netid used by categories to indicate a broadcast channel. </p>

<a name="namespaceefd_1ab0eae2d0760059f32b2f627d96d51be9"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  kNetID_ISystemService</p>
<p class="NDLRefMemberDescription">An invalid netid used by <span class="NDLSystemFont"><a href="../efd/efd__ISystemService.htm">ISystemService</a></span> categories to indicate a broadcast channel. </p>
<a name="constants_from_imessage.h"></a>
<p class="NDLRefHead1">Constants from IMessage.h</p>

<p class="NDLRefMemberDescription">Messages are used for interaction between two systems that need to remain loosely coupled.</p>
<p class="NDLRefMemberDescription">One system can create and send a message without knowing that the second system exists. When first system changes, there is much less chance that the second system must change, or even recompile.</p>
<p class="NDLRefMemberDescription">Messages can be sent between processes, when they are addressed using a <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>. This requires a Message to be able to be streamed into/out of a binary buffer in a network neutral manner.</p>
<p class="NDLRefMemberDescription">Messages can be sent thread-safely. Messages are handled (their handler code is executed) by the <span class="NDLSystemFont"><a href="../efd/efd__MessageService.htm">MessageService</a></span> and always on the main thread that is running the SystemServiceManager.</p>
<p class="NDLRefMemberDescription">Messages are handled in a type safe manner. Each type of message must be implemented as a class that has a unique ClassID. For message types that can be reused for more than one purpose the "MessageWrapper" template is used to morph the ClassID into one that is logically unique. A Message is handled in one of a number of ways (in preferred order):</p>
<p class="NDLRefMemberDescription">1) Register a class method and instance pointer that will be invoked when a message of the selected class arrives.</p>
<p class="NDLRefMemberDescription">2) Create and register a MessageHandler that either invokes a selected method or implements a concrete handler function.</p>
<p class="NDLRefMemberDescription">3) Derive a class from IMessageTarget and implement a concrete handler function. This last and non-preferred approach is the only one that may require the use of a switch statement across message class types.</p>
<p class="NDLRefMemberDescription">There are several helper Macros and templates that are designed to make creating and handling messages very simple. Ideally this will require a single line of code for any operation. </p>

<a name="namespaceefd_1af2aeb53f331e29b141c0b7390e60bb36"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span>  kCAT_LocalMessage</p>
<p class="NDLRefMemberDescription">This is a special category used by <span class="NDLSystemFont"><a href="../efd/efd__MessageService.htm">MessageService</a></span> to send local messages. </p>

<a name="namespaceefd_1a78c506f5d8554a582e46702f59e5d0d6"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  k_invalidMessageClassID</p>
<p class="NDLRefMemberDescription">This is a special category used to indicate an invalid setting. </p>
<a name="math_functions_from__eemath.h"></a>
<p class="NDLRefHead1">Math functions from  EEMath.h</p>


<a name="namespaceefd_1ab77570b5f1a85dad86288d9949fb5dda"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  EE_INFINITY</p>
<p class="NDLRefMemberDescription">This macro calculates the linear interpolation between START and FINISH as parameterized by T. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">This function is a macro to allow multiple data-types to be mixed in both the parameters and the return value since this functionality can be useful at times. </p></p>

<a name="namespaceefd_1a12591941ed4154683d25c56fdd04d433"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  EE_PI</p>
<p class="NDLRefMemberDescription">This macro calculates the linear interpolation between START and FINISH as parameterized by T. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">This function is a macro to allow multiple data-types to be mixed in both the parameters and the return value since this functionality can be useful at times. </p></p>

<a name="namespaceefd_1ac4f0ffd75364155baa10df55414e5fc7"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  EE_HALF_PI</p>
<p class="NDLRefMemberDescription">This macro calculates the linear interpolation between START and FINISH as parameterized by T. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">This function is a macro to allow multiple data-types to be mixed in both the parameters and the return value since this functionality can be useful at times. </p></p>

<a name="namespaceefd_1a0f6471d44900582b3e1ea428f080501d"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  EE_TWO_PI</p>
<p class="NDLRefMemberDescription">This macro calculates the linear interpolation between START and FINISH as parameterized by T. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">This function is a macro to allow multiple data-types to be mixed in both the parameters and the return value since this functionality can be useful at times. </p></p>

<a name="namespaceefd_1a0b1fd175ce11e59a75ba9691559d6675"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  EE_E</p>
<p class="NDLRefMemberDescription">This macro calculates the linear interpolation between START and FINISH as parameterized by T. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">This function is a macro to allow multiple data-types to be mixed in both the parameters and the return value since this functionality can be useful at times. </p></p>

<a name="namespaceefd_1aa1f94ab5d34572cb2a2023405905b347"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  EE_DEGREES_TO_RADIANS</p>
<p class="NDLRefMemberDescription">This macro calculates the linear interpolation between START and FINISH as parameterized by T. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">This function is a macro to allow multiple data-types to be mixed in both the parameters and the return value since this functionality can be useful at times. </p></p>

<a name="namespaceefd_1a04389c3fd56a3bff8c12cfcd7328e5bb"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  EE_RADIANS_TO_DEGREES</p>
<p class="NDLRefMemberDescription">This macro calculates the linear interpolation between START and FINISH as parameterized by T. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">This function is a macro to allow multiple data-types to be mixed in both the parameters and the return value since this functionality can be useful at times. </p></p>

<a name="namespaceefd_1a04696b0bd5046c9a1b236782fa4225ee"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  Abs(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> value)</p>
<p class="NDLRefMemberDescription">Computes the absolute value of the 32-bit floating point argument. </p>

<a name="namespaceefd_1a49a576fd1b813cb6f520d71f042e35c7"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  ACos(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> value)</p>
<p class="NDLRefMemberDescription">Computes the arc-cosine of the 32-bit floating point argument. </p>

<a name="namespaceefd_1a69618ce3389848da8eb14096db3290d7"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  ASin(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> value)</p>
<p class="NDLRefMemberDescription">Computes the arc-sin of the 32-bit floating point argument. </p>

<a name="namespaceefd_1a0d27667e6ae37edcd1a031f194670d82"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  ATan(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> value)</p>
<p class="NDLRefMemberDescription">Computes the arc-tangent of the 32-bit floating point argument. </p>

<a name="namespaceefd_1a67c9a967b32080593c2b723eb04030be"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  ATan2(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> numerator, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> denominator)</p>
<p class="NDLRefMemberDescription">Computes the arc-tangent of numerator / denominator. </p>

<a name="namespaceefd_1af526364bd929451adbc03237fdc2a061"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  Cos(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> radians)</p>
<p class="NDLRefMemberDescription">Computes the cosine of the 32-bit floating point argument. </p>

<a name="namespaceefd_1ad599971e00eded462e975d6272058f9d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  Sin(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> radians)</p>
<p class="NDLRefMemberDescription">Computes the sine of the 32-bit floating point argument. </p>

<a name="namespaceefd_1adcf563e2e33e6145bf9e3d81c54824c8"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  Exp(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> value)</p>
<p class="NDLRefMemberDescription">Computes the exponential of the 32-bit floating point argument. </p>

<a name="namespaceefd_1a75d1e0ee631f2b55405a311489739bdc"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  Floor(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> value)</p>
<p class="NDLRefMemberDescription">Calculates the floor of the floating point argument (the greatest or "least negative / most positive" integer less than or equal to the given argument). </p>

<a name="namespaceefd_1acea64d3197ff0e9e01870d6041dfd429"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  Fmod(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> numerator, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> denominator)</p>
<p class="NDLRefMemberDescription">Calculates the floating-point remainder of numerator / denominator. </p>

<a name="namespaceefd_1ab653ffe639fceca6648e9edf3cd15cb6"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  Log(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> value)</p>
<p class="NDLRefMemberDescription">Calculates the logarithm of the 32-bit floating point argument. </p>

<a name="namespaceefd_1a7433fba4b039a48296ca5a6ff8dcfd8d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  Pow(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> base, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> exponent)</p>
<p class="NDLRefMemberDescription">Calculates the result of raising base to the specified exponent. </p>

<a name="namespaceefd_1abf722a57bb98133135229482dc13c00f"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  Sign(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> value)</p>
<p class="NDLRefMemberDescription">Calculates the sign of the specified floating point argument. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>Positive one if the value is positive, negative one if the value is negative and zero if the value is zero. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceefd_1a9f80f314b9e6903ee5f1b7b6ccf2b260"></a>
<p class="NDLRefMemberFunction">void  SinCos(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> radians, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>& sin, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>& cos)</p>
<p class="NDLRefMemberDescription">Calculates both the sine and cosine of the radians argument. </p>
<p class="NDLRefMemberDetailedDescription">Many floating point processors have assembly instructions that can calculate both faster than each one individually. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">radians</span></td>
    <td>The angle in radians </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">sin</span></td>
    <td>Contains the sine of the specified radians when this method returns. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">cos</span></td>
    <td>Contains the cosine of the specified radians when this method returns. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceefd_1ac7ebccf07d614398c9c2e04e5e41d29a"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  Sqr(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> value)</p>
<p class="NDLRefMemberDescription">Calculates the product of the specified argument with itself. </p>

<a name="namespaceefd_1a6619215a57e913b2ea67e981df8b0218"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  Sqrt(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> value)</p>
<p class="NDLRefMemberDescription">Calculates the square root of the specified argument. </p>

<a name="namespaceefd_1acd9d2fe75eeadb4d15b46e8c80fcedd1"></a>
<p class="NDLRefMemberFunction">template &lt;typename T  &gt; T  Min(<br/>T a, <br/>T b)</p>
<p class="NDLRefMemberDescription">Returns the smaller of the two values. </p>

<a name="namespaceefd_1aabd073aac6d8ef14f9e858e498346633"></a>
<p class="NDLRefMemberFunction">template &lt;typename T  &gt; T  Max(<br/>T a, <br/>T b)</p>
<p class="NDLRefMemberDescription">Returns the largest of the two 32-bit integers. </p>

<a name="namespaceefd_1abf8737f9a7e0fc0b5354acb3d1259845"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>  Clamp(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span> value, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span> min, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span> max)</p>
<p class="NDLRefMemberDescription">Clamps the specified 32-bit integer within the range [min,max]. </p>

<a name="namespaceefd_1aed5582cbf832997d06efeadb817d71bf"></a>
<p class="NDLRefMemberFunction">template &lt;&gt; <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  Min(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> a, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> b)</p>
<p class="NDLRefMemberDescription">Returns the smaller of the two specified arguments. Optimized on some platforms. </p>

<a name="namespaceefd_1a0172c04ea9cd0652f341891fb030682c"></a>
<p class="NDLRefMemberFunction">template &lt;&gt; <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  Max(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> a, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> b)</p>
<p class="NDLRefMemberDescription">Returns the largest of the two specified arguments. Optimized on some platforms. </p>

<a name="namespaceefd_1a3b53747b15acc7638bb729946b3c5b91"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  Clamp(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> value, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> min, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> max)</p>
<p class="NDLRefMemberDescription">Clamps the specified value within the range [min,max]. </p>

<a name="namespaceefd_1a316db292757f0f12c078415ab68c7f4a"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsPowerOf2(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> value)</p>
<p class="NDLRefMemberDescription">Determines if the specified value is a power of two. </p>

<a name="namespaceefd_1a7ab28950aff4c6af412c8d7e6f06f792"></a>
<p class="NDLRefMemberFunction">void  Srand(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> seed)</p>
<p class="NDLRefMemberDescription">The Srand function sets the starting point for generating a series of pseudo-random integers. </p>
<p class="NDLRefMemberDetailedDescription">Each value for seed causes the values retrieved by subsequent calls to <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a7d2a6d019240871997365d76969dc19f">efd::Rand</a></span> to form a specific pseudo-random sequence. Multiple calls to Srand with the same seed will generate the same sequence. Calling <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a7d2a6d019240871997365d76969dc19f">efd::Rand</a></span> before any call to <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a7ab28950aff4c6af412c8d7e6f06f792">efd::Srand</a></span> generates the same sequence as calling <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a7ab28950aff4c6af412c8d7e6f06f792">efd::Srand</a></span> with seed passed as 1. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">seed</span></td>
    <td>Value with which to seed the random number generator. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceefd_1a7d2a6d019240871997365d76969dc19f"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>  Rand()</p>
<p class="NDLRefMemberDescription">This function returns a pseudo-random integer in the range 0 to RAND_MAX. </p>
<p class="NDLRefMemberDetailedDescription">Use the <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a7ab28950aff4c6af412c8d7e6f06f792">efd::Srand</a></span> function to seed the pseudo-random-number generator before calling <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a7d2a6d019240871997365d76969dc19f">efd::Rand</a></span>. </p>

<a name="namespaceefd_1a0ccb364346cd090b561257ec89159fb1"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  SymmetricRandom()</p>
<p class="NDLRefMemberDescription">This function returns a pseudo-random 32-bit floating point value in the range -1.0f to 1.0f. </p>
<p class="NDLRefMemberDetailedDescription">Use the <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a7ab28950aff4c6af412c8d7e6f06f792">efd::Srand</a></span> function to seed the pseudo-random-number generator before calling <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a0ccb364346cd090b561257ec89159fb1">efd::SymmetricRandom</a></span>. </p>

<a name="namespaceefd_1a9af128f7163f79fca1eb8d44bc4a1116"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  UnitRandom()</p>
<p class="NDLRefMemberDescription">This function returns a pseudo-random float in the range 0.0f to 1.0f. </p>
<p class="NDLRefMemberDetailedDescription">Use the <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a7ab28950aff4c6af412c8d7e6f06f792">efd::Srand</a></span> function to seed the pseudo-random-number generator before calling <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a9af128f7163f79fca1eb8d44bc4a1116">efd::UnitRandom</a></span>. </p>

<a name="namespaceefd_1a8a0abb1aa8bee9b96aa740313af3526e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  FastLog(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> num)</p>
<p class="NDLRefMemberDescription">Calculates the logarithm of the specified 32-bit unsigned integer argument. </p>

<a name="namespaceefd_1aba230c46e82335dea4c4130450587ce0"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  FastInvSqrt(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> value)</p>
<p class="NDLRefMemberDescription">Calculates an approximated inverse square root value for improved performance. </p>

<a name="namespaceefd_1a5159ee65a4c6751e25683c4a3c1d5f60"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  FastSqrt(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> value)</p>
<p class="NDLRefMemberDescription">Calculates an approximated square root value for improved performance. </p>

<a name="namespaceefd_1acfc22230cf2e9329684a3973f73206f6"></a>
<p class="NDLRefMemberFunction">EE_EFD_ENTRY <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  FastATan2(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> y, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> x)</p>
<p class="NDLRefMemberDescription">Calculates an approximated value for the arc-tangent of y / x. </p>

<a name="namespaceefd_1a5265a994884533e5a11bb63ce72304d8"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsNAN(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> value)</p>
<p class="NDLRefMemberDescription">Returns true if the value passed in is a NAN. </p>

<a name="namespaceefd_1a6edb943bbc21e5753cda985ed835b577"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  GetQNAN()</p>
<p class="NDLRefMemberDescription">Returns a quiet NAN. </p>
<a name="memory_event_types_from__memorydefines.h"></a>
<p class="NDLRefHead1">Memory Event Types from  MemoryDefines.h</p>

<p class="NDLRefMemberDescription">Determine the overall allocation type.</p>
<p class="NDLRefMemberDescription">When an object is allocated with an allocation routine, it should be deallocated with its corresponding deallocation routine. </p><a name="namespaceefd_1ad9c81f78b405eb346c527c73002e5382"></a>
<p class=NDLRefHead2>efd::MemEventType</p>




<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">EE_MET_UNKNOWN</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">EE_MET_NEW</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">EE_MET_NEW_ARRAY</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">EE_MET_DELETE</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">EE_MET_DELETE_ARRAY</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">EE_MET_MALLOC</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">EE_MET_REALLOC</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">EE_MET_ALIGNEDMALLOC</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">EE_MET_ALIGNEDREALLOC</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">EE_MET_FREE</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">EE_MET_ALIGNEDFREE</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">EE_MET_EXTERNALALLOC</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">EE_MET_EXTERNALFREE</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">EE_MET_MARKER</span></td>
    <td>&nbsp;</td>
</tr>

  </tbody>
</table>
</div>


<a name="atomic_compare-and-swap_operations"></a>
<p class="NDLRefHead1">Atomic compare-and-swap operations</p>


<a name="namespaceefd_1aa4c5f0f06dd751be798a008c951ccd3f"></a>
<p class="NDLRefMemberFunction">void*  AtomicCompareAndSwap(<br/>void *volatile* ppDestination, <br/>void* pComparand, <br/>void* pExchange)</p>
<p class="NDLRefMemberDescription">Performs an atomic compare-and-swap (CAS) operation on the specified pointer values. </p>
<p class="NDLRefMemberDetailedDescription">In pseudocode, this function performs the following operation: 
<pre>           atomic
           {
               void* pOldValue = *ppDestination;
               if (pOldValue == pComparand)
                   *ppDestination = pExchange;
               return pOldValue;
           }
</pre>
</p>
<p class="NDLRefMemberDetailedDescription">This operation includes a memory barrier.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">ppDestination</span></td>
    <td>The memory location tested and potentially modified </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pComparand</span></td>
    <td>The value to test against *ppDestination </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pExchange</span></td>
    <td>The new value written to *ppDestination if the comparison passed </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>void* The initial value of *ppDestination </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceefd_1a27d664bd6ad6d9088fd29b7a8e7355dd"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  AtomicCompareAndSwap(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> volatile* pDestination, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> comparand, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> exchange)</p>
<p class="NDLRefMemberDescription">Performs an atomic compare-and-swap (CAS) operation on the specified 32-bit values. </p>
<p class="NDLRefMemberDetailedDescription">In pseudocode, this function performs the following operation: 
<pre>           atomic
           {
               UInt32 oldValue = *pDestination;
               if (oldValue == comparand)
                   *pDestination = exchange;
               return oldValue;
           }
</pre>
</p>
<p class="NDLRefMemberDetailedDescription">This operation includes a memory barrier.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pDestination</span></td>
    <td>The memory location tested and potentially modified </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">comparand</span></td>
    <td>The value to test against *pDestination </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">exchange</span></td>
    <td>The new value written to *pDestination if the comparison passed </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>UInt32 The initial value of *pDestination </td>
</tr>

        </tbody>
    </table>
</div>


<a name="build-dependent_memory_management_routines_from_memorydefines.h"></a>
<p class="NDLRefHead1">Build-dependent memory management routines from MemoryDefines.h</p>


<a name="namespaceefd_1ae1e7b992ef808953310a23e9b248aaf6"></a>
<p class="NDLRefMemberFunction">void*  _Malloc(<br/>size_t stSizeInBytes, <br/><span class="NDLSystemFont"><a href="../efd/efd__MemHint.htm">MemHint</a></span> kHint)</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1af3e83971125919e6f16a8bf8db5d4ebe"></a>
<p class="NDLRefMemberFunction">void*  _AlignedMalloc(<br/>size_t stSizeInBytes, <br/>size_t stAlignment, <br/><span class="NDLSystemFont"><a href="../efd/efd__MemHint.htm">MemHint</a></span> kHint)</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a51a7d70bdfc7d4448add12757ebd012a"></a>
<p class="NDLRefMemberFunction">void*  _Realloc(<br/>void* memblock, <br/>size_t stSizeInBytes, <br/><span class="NDLSystemFont"><a href="../efd/efd__MemHint.htm">MemHint</a></span> kHint)</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a71c3e6d6f12f252e009ea3cc09052c08"></a>
<p class="NDLRefMemberFunction">void*  _AlignedRealloc(<br/>void* pvMemblock, <br/>size_t stSizeInBytes, <br/>size_t stAlignment, <br/><span class="NDLSystemFont"><a href="../efd/efd__MemHint.htm">MemHint</a></span> kHint)</p>
<p class="NDLRefMemberFunction"></p>
<a name="build-independent_memory_management_routines_from_memorydefines.h"></a>
<p class="NDLRefHead1">Build-independent memory management routines from MemoryDefines.h</p>


<a name="namespaceefd_1a19e5b63cea74e4af6509c4f4ec6bbec4"></a>
<p class="NDLRefMemberFunction">void  _Free(<br/>void* pvMemory, <br/>size_t stSizeInBytes = (size_t)-1)</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a12bf49ebd67fb4c66fcf5c7db4f2fca1"></a>
<p class="NDLRefMemberFunction">void  _AlignedFree(<br/>void* pvMemory, <br/>size_t stSizeInBytes = (size_t)-1)</p>
<p class="NDLRefMemberFunction"></p>
<a name="classid_type_mapping_functions_from_classidhelpers.h"></a>
<p class="NDLRefHead1">ClassID type mapping functions from ClassIDHelpers.h</p>

<p class="NDLRefMemberDescription">A series of overloaded functions that can return a ClassID for a primitive type, or a type derived from <span class="NDLSystemFont"><a href="../efd/efd__IBase.htm">IBase</a></span>.</p>

<a name="namespaceefd_1a45d780d553ca698005605a76ef62513d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromObject(const <span class="NDLSystemFont"><a href="../efd/efd__IBase.htm">efd::IBase</a></span>& var)</p>
<p class="NDLRefMemberDescription"><span class="NDLSystemFont"><a href="../efd/efd__IBase.htm">IBase</a></span> requires some special handling in order to implement the ClassID query methods that we use in the templated Property methods:. </p>

<a name="namespaceefd_1a62e425c29bf990d599ddfbb35bb9f991"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromObject(const <span class="NDLSystemFont"><a href="../efd/efd__IBase.htm">efd::IBase</a></span> *const  var)</p>
<p class="NDLRefMemberDescription"><span class="NDLSystemFont"><a href="../efd/efd__IBase.htm">IBase</a></span> requires some special handling in order to implement the ClassID query methods that we use in the templated Property methods:. </p>

<a name="namespaceefd_1a7585b02ecb37385365699a1497b3ba66"></a>
<p class="NDLRefMemberFunction">template &lt;typename T  &gt; <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromType()</p>
<p class="NDLRefMemberDescription">template function to return CLASS_ID for a type T. </p>
<p class="NDLRefMemberDetailedDescription">The default implementation assumes that the type T derives from <span class="NDLSystemFont"><a href="../efd/efd__IBase.htm">IBase</a></span>. </p>
<a name="general_utility_functions_from_utilities.h"></a>
<p class="NDLRefHead1">General utility functions from Utilities.h</p>


<a name="namespaceefd_1a8582d7bdfbd3a635f8df58795fc173de"></a>
<p class="NDLRefMemberFunction">void  GetEnvironmentVariable(<br/>size_t* pstDestLength, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pcDest, <br/>size_t stDestSize, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pcSrc)</p>
<p class="NDLRefMemberDescription">Gets the value of the specified environment variable. </p>

<a name="namespaceefd_1aef9f0b93a370bc7fc2d534c169a9d9ba"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  Rotr(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> x, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span> n)</p>
<p class="NDLRefMemberDescription">wrapper for a right bitwise rotation </p>

<a name="namespaceefd_1a6f1aa55c06fd77f1d8f27a62a88018dd"></a>
<p class="NDLRefMemberFunction">void  Sleep(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> milliseconds)</p>
<p class="NDLRefMemberDescription">wrapper for sleep </p>

<a name="namespaceefd_1ad38a3b415de06736fe8cd127410799f1"></a>
<p class="NDLRefMemberFunction">void  YieldThread()</p>
<p class="NDLRefMemberDescription">encapsulation of sleep(0) </p>

<a name="namespaceefd_1adff13f3a94547b355cc8f8a4353254be"></a>
<p class="NDLRefMemberFunction">unsigned long  GetCurrentThreadId()</p>
<p class="NDLRefMemberDescription">method to get the current thread identifier </p>

<a name="namespaceefd_1af9427b5aa25f650f8d93748d0bad9f41"></a>
<p class="NDLRefMemberFunction">void  Prefetch128(void* pvBase)</p>
<p class="NDLRefMemberDescription">Gets the value of the specified environment variable. </p>

<a name="namespaceefd_1a289997960768bc2f9bd54b1bd3e6719d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  SelectGE(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> condition, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> resultIfGreaterThanEqualZero, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> resultIfLessThanZero)</p>
<p class="NDLRefMemberDescription">Non-branching selection on&gt;=. </p>

<a name="namespaceefd_1aaf7f6c049a4cc6d1e2f7835227340023"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  SelectGE(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span> condition, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> resultIfGreaterThanEqualZero, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> resultIfLessThanZero)</p>
<p class="NDLRefMemberDescription">Non-branching selection on&gt;=. </p>

<a name="namespaceefd_1a1498c97f2119f5b7417d2074ab09d414"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>  Select(<br/><span class="NDLSystemFont">bool</span> condition, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span> resultIfTrue, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span> resultIfFalse)</p>
<p class="NDLRefMemberDescription">Non-branching selection on boolean true/false. </p>

<a name="namespaceefd_1acd77261c5585266c318eab4bfc5d2e0e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  Select(<br/><span class="NDLSystemFont">bool</span> condition, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> resultIfTrue, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> resultIfFalse)</p>
<p class="NDLRefMemberDescription">Non-branching selection on boolean true/false. </p>

<a name="namespaceefd_1a17af7ab7f5fffcd602bae647529800bf"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a59a3838ab5cdfe87f98f5b8371e4e91d">efd::UInt8</a></span>  Int32ToUInt8(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span> value)</p>
<p class="NDLRefMemberDescription">Gets the value of the specified environment variable. </p>

<a name="namespaceefd_1a9ba1889869c72dcb344f1e4d1c0d5c97"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span>  Int32ToUInt16(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span> value)</p>
<p class="NDLRefMemberDescription">Gets the value of the specified environment variable. </p>

<a name="namespaceefd_1a92b4f1c2c8d2d37c131ec3d2b993d73b"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  Int32ToUInt32(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span> value)</p>
<p class="NDLRefMemberDescription">Gets the value of the specified environment variable. </p>

<a name="namespaceefd_1a29a9e5af7789764ab6837da52c83c066"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a02da74c5f95666d41c684efde9efcd88">efd::SInt8</a></span>  Int32ToInt8(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span> value)</p>
<p class="NDLRefMemberDescription">Gets the value of the specified environment variable. </p>

<a name="namespaceefd_1abc292fe667b7aac2d5ea1ba83574ad12"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a78e418e4217f674682471407609a8aa8">efd::SInt16</a></span>  Int32ToInt16(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span> value)</p>
<p class="NDLRefMemberDescription">Gets the value of the specified environment variable. </p>

<a name="namespaceefd_1aa14c232a3532e3daa88d93850d7899ab"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetPerformanceCounter()</p>
<p class="NDLRefMemberDescription">GetPerformanceCounter has a different number of cycles per second on different platforms and even different processors. </p>
<p class="NDLRefMemberDetailedDescription">Use <span class="NDLSystemFont"><a href="../efd/efd__SystemDesc.htm#classefd_1_1_system_desc_1a79bd38148e637f4941941d1e4c8eb262">SystemDesc::GetSystemDesc()</a></span>.GetPerformanceCounterHz() to get the conversion divisor. </p>

<a name="namespaceefd_1a66c8894a37b452867c35d0facd2ad325"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>*  Getcwd(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* buffer, <br/>size_t maxlen)</p>
<p class="NDLRefMemberDescription">Wrapper around _getcwd/getcwd. </p>

<a name="namespaceefd_1a2831cc3aaddd9ffd5f326bed1cff9235"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a845df149ec80fc0bf36f875ece09ef9d">efd::UInt64</a></span>  GetPid()</p>
<p class="NDLRefMemberDescription">wrapper around getpid </p>

<a name="namespaceefd_1a5d94889831dd07e07fb0de07847adfe7"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  MakeDir(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* path)</p>
<p class="NDLRefMemberDescription">wrapper around MakeDir </p>

<a name="namespaceefd_1a0cb27a60aea454ea4c895679392af639"></a>
<p class="NDLRefMemberFunction">void  InitTestEnvironment()</p>
<p class="NDLRefMemberDescription">Initialize a testing environment (turn off error dialogs, etc...). </p>
<a name="globalmemoryallocator_from_memmanager.h"></a>
<p class="NDLRefHead1">GlobalMemoryAllocator from MemManager.h</p>


<a name="namespaceefd_1a657b37ea20bf7923e33b085913234e2e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__IAllocator.htm">efd::IAllocator</a></span>*  CreateGlobalMemoryAllocator()</p>
<p class="NDLRefMemberDescription">Recall that <span class="NDLSystemFont"><a href="../efd/efd__MemManager.htm">MemManager</a></span> is a platform-independent wrapper that is designed to provide an entry point for user-defined memory management. </p>
<p class="NDLRefMemberDetailedDescription">The <span class="NDLSystemFont"><a href="../efd/efd__MemManager.htm">MemManager</a></span> contains an <span class="NDLSystemFont"><a href="../efd/efd__IAllocator.htm">IAllocator</a></span> instance and forwards all alloc/dealloc/realloc requests through that instance. The <span class="NDLSystemFont"><a href="../efd/efd__IAllocator.htm">IAllocator</a></span> to be used is specified by calling the <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a657b37ea20bf7923e33b085913234e2e">CreateGlobalMemoryAllocator()</a></span> function.</p>
<p class="NDLRefMemberDetailedDescription">Note: This method is *not* implemented inside of the <span class="NDLSystemFont">efd</span> library in statically linked builds. It must be implemented for an application to link successfully. A default implementation is provided in the file <span class="NDLSystemFont">efd/DefaultInitializeMemoryManager.h</span>, which can be included in the application if there isn't a custom allocator otherwise provided.</p>
<p class="NDLRefMemberDetailedDescription">Dynamically linked builds include the default allocator; to change this behavior, the code in MemManager.cpp can be modified.</p>
<p class="NDLRefMemberDetailedDescription">If you have linker problems indicating that <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a657b37ea20bf7923e33b085913234e2e">efd::CreateGlobalMemoryAllocator</a></span> is not found, then you need to either invoke EE_USE_DEFAULT_ALLOCATOR or provide a custom implementation.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>Pointer to an <span class="NDLSystemFont"><a href="../efd/efd__IAllocator.htm">IAllocator</a></span> instance. </td>
</tr>

        </tbody>
    </table>
</div>


<a name="helper_functions_for_dynamic_type_conversion."></a>
<p class="NDLRefHead1">Helper functions for dynamic type conversion.</p>


<a name="namespaceefd_1a5c374e565c257cf197f093c8c7c4b5ad"></a>
<p class="NDLRefMemberFunction">template &lt;class Dest  , typename Src  &gt; Dest*  DynamicCast(Src* Source)</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a6ba29aef9488e9366911e6ee938cb1c8"></a>
<p class="NDLRefMemberFunction">template &lt;class Dest  , typename Src  &gt; const Dest*  DynamicCast(const Src* Source)</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a157d1320b521cc6d4b0906fac0479d82"></a>
<p class="NDLRefMemberFunction">template &lt;class Dest  , typename Src  &gt; Dest*  DynamicCast(<span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;Src&gt;& Source)</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1ab65be40a79bdacd638c6dfe679a5ad08"></a>
<p class="NDLRefMemberFunction">template &lt;class Dest  , typename Src  &gt; const <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;Dest&gt;  DynamicCast(const <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;Src&gt;& Source)</p>
<p class="NDLRefMemberFunction"></p>
<a name="inline_load/save_routines_for_endian-aware_streams_from_binaryloadsave.h"></a>
<p class="NDLRefHead1">Inline load/save routines for endian-aware streams from BinaryLoadSave.h</p>


<a name="namespaceefd_1ad0f1492ab43cec12d7f2ec738b0c4fdc"></a>
<p class="NDLRefMemberFunction">template &lt;class T  &gt; void  BinaryStreamLoad(<br/><span class="NDLSystemFont"><a href="../efd/efd__BinaryStream.htm">BinaryStream</a></span>& is, <br/>T* pValue, <br/>unsigned int uiNumEls = 1)</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a0ac6620277a9868ff39e59d3c30ceadc"></a>
<p class="NDLRefMemberFunction">void  BinaryStreamLoad(<br/><span class="NDLSystemFont"><a href="../efd/efd__BinaryStream.htm">BinaryStream</a></span>& is, <br/>void* pvValue, <br/>unsigned int uiNumEls, <br/>unsigned int* puiComponentSizes, <br/>unsigned int uiNumComponents = 1)</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1adcecc6168db8333a95909bb6ba66da46"></a>
<p class="NDLRefMemberFunction">template &lt;class T  &gt; void  BinaryStreamLoadEnum(<br/><span class="NDLSystemFont"><a href="../efd/efd__BinaryStream.htm">BinaryStream</a></span>& is, <br/>T* pValue)</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a5fd707f77bc7b1708608a84f8c054ff0"></a>
<p class="NDLRefMemberFunction">template &lt;class T  &gt; void  BinaryStreamSave(<br/><span class="NDLSystemFont"><a href="../efd/efd__BinaryStream.htm">BinaryStream</a></span>& os, <br/>const T* pValue, <br/>unsigned int uiNumEls = 1)</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1ac48714c52dce676ec77772c333f04704"></a>
<p class="NDLRefMemberFunction">void  BinaryStreamSave(<br/><span class="NDLSystemFont"><a href="../efd/efd__BinaryStream.htm">BinaryStream</a></span>& os, <br/>const void* pvValue, <br/>unsigned int uiNumEls, <br/>unsigned int* puiComponentSizes, <br/>unsigned int uiNumComponents)</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a4998fd553ee10943e3a01aff56a79e43"></a>
<p class="NDLRefMemberFunction">template &lt;class T  &gt; void  BinaryStreamSaveEnum(<br/><span class="NDLSystemFont"><a href="../efd/efd__BinaryStream.htm">BinaryStream</a></span>& os, <br/>const T& value)</p>
<p class="NDLRefMemberFunction"></p>
<a name="inline_load/save_routines_for_native_data_from_binarystream.h"></a>
<p class="NDLRefHead1">Inline load/save routines for native data from BinaryStream.h</p>


<a name="namespaceefd_1a3ddf03060969cf92a36e4dc350b00df4"></a>
<p class="NDLRefMemberFunction">template &lt;class T  &gt; void  StreamLoadBinary(<br/><span class="NDLSystemFont"><a href="../efd/efd__BinaryStream.htm">BinaryStream</a></span>& binstream, <br/>T& value)</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1abefe9be7d7ff5d26524a7fed4c331298"></a>
<p class="NDLRefMemberFunction">template &lt;class T  &gt; void  StreamLoadBinary(<br/><span class="NDLSystemFont"><a href="../efd/efd__BinaryStream.htm">BinaryStream</a></span>& binstream, <br/>T* value, <br/>unsigned int uiNumEls)</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1ad277859b0066dc4abc6e9d7a10dbe766"></a>
<p class="NDLRefMemberFunction">template &lt;class T  &gt; void  StreamSaveBinary(<br/><span class="NDLSystemFont"><a href="../efd/efd__BinaryStream.htm">BinaryStream</a></span>& binstream, <br/>T& value)</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a0ddae793d424c6cb1228ff4a68657788"></a>
<p class="NDLRefMemberFunction">template &lt;class T  &gt; void  StreamSaveBinary(<br/><span class="NDLSystemFont"><a href="../efd/efd__BinaryStream.htm">BinaryStream</a></span>& binstream, <br/>T* value, <br/>unsigned int uiNumEls)</p>
<p class="NDLRefMemberFunction"></p>
<a name="operators_from_datastreamutils.h"></a>
<p class="NDLRefHead1">Operators from DataStreamUtils.h</p>


<a name="namespaceefd_1a735d0c0b33e6a3d6427c5854b1366cff"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">efd::DataStream</a></span>&  operator&lt;&lt;(<br/><span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">efd::DataStream</a></span>& strm, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__Point2.htm">efd::Point2</a></span>& val)</p>
<p class="NDLRefMemberDescription">Adds the contents of an <span class="NDLSystemFont"><a href="../efd/efd__Point2.htm">efd::Point2</a></span> into the stream. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">strm</span></td>
    <td>Stream to add the values into </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">val</span></td>
    <td>Values to add to the stream </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A reference to the IOStream </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceefd_1aa4cb8a684a98633b8e006e9e3d1ffe32"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">efd::DataStream</a></span>&  operator&gt;&gt;(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">efd::DataStream</a></span>& strm, <br/><span class="NDLSystemFont"><a href="../efd/efd__Point2.htm">efd::Point2</a></span>& val)</p>
<p class="NDLRefMemberDescription">Populates the <span class="NDLSystemFont"><a href="../efd/efd__Point2.htm">efd::Point2</a></span> with data from the stream. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">strm</span></td>
    <td>Stream to read the values from </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">val</span></td>
    <td>Structure to <span class="NDLSystemFont"><a href="../efd/efd__set.htm">set</a></span> the values in </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A Reference to the IOStream </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceefd_1a12be2919dd06d5711a83d057e392efaa"></a>
<p class="NDLRefMemberFunction">void  DataStreamSkip(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">efd::DataStream</a></span>& strm, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__Point2.htm">efd::Point2</a></span>& val)</p>
<p class="NDLRefMemberDescription">Advance a <span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">DataStream</a></span> past a <span class="NDLSystemFont"><a href="../efd/efd__Point2.htm">Point2</a></span>. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">strm</span></td>
    <td>Stream to advance. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">val</span></td>
    <td>value to skip. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceefd_1a9616a2c0d6fdc3094202f9064c2daa38"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">efd::DataStream</a></span>&  operator&lt;&lt;(<br/><span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">efd::DataStream</a></span>& strm, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__Point3.htm">efd::Point3</a></span>& val)</p>
<p class="NDLRefMemberDescription">Adds the contents of an <span class="NDLSystemFont"><a href="../efd/efd__Point3.htm">efd::Point3</a></span> into the stream. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">strm</span></td>
    <td>Stream to add the values into </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">val</span></td>
    <td>Values to add to the stream </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A reference to the IOStream </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceefd_1aa018f94d5f71d372e10daf42a211ff2d"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">efd::DataStream</a></span>&  operator&gt;&gt;(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">efd::DataStream</a></span>& strm, <br/><span class="NDLSystemFont"><a href="../efd/efd__Point3.htm">efd::Point3</a></span>& val)</p>
<p class="NDLRefMemberDescription">Populates the <span class="NDLSystemFont"><a href="../efd/efd__Point3.htm">efd::Point3</a></span> with data from the stream. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">strm</span></td>
    <td>Stream to read the values from </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">val</span></td>
    <td>Structure to <span class="NDLSystemFont"><a href="../efd/efd__set.htm">set</a></span> the values in </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A Reference to the IOStream </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceefd_1ac633f0095c93afa74d6f7069cdd7e9b2"></a>
<p class="NDLRefMemberFunction">void  DataStreamSkip(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">efd::DataStream</a></span>& strm, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__Point3.htm">efd::Point3</a></span>& val)</p>
<p class="NDLRefMemberDescription">Advance a <span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">DataStream</a></span> past a <span class="NDLSystemFont"><a href="../efd/efd__Point3.htm">Point3</a></span>. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">strm</span></td>
    <td>Stream to advance. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">val</span></td>
    <td>value to skip. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceefd_1ab96c814d7ca7fdd07d1e17cba11e7b0e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">efd::DataStream</a></span>&  operator&lt;&lt;(<br/><span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">efd::DataStream</a></span>& strm, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__Matrix3.htm">efd::Matrix3</a></span>& val)</p>
<p class="NDLRefMemberDescription">Adds the contents of an <span class="NDLSystemFont"><a href="../efd/efd__Matrix3.htm">efd::Matrix3</a></span> into the stream. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">strm</span></td>
    <td>Stream to add the values into </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">val</span></td>
    <td>Values to add to the stream </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A reference to the IOStream </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceefd_1a2e687d2897bb7208cdc82bac95bfc47d"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">efd::DataStream</a></span>&  operator&gt;&gt;(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">efd::DataStream</a></span>& strm, <br/><span class="NDLSystemFont"><a href="../efd/efd__Matrix3.htm">efd::Matrix3</a></span>& val)</p>
<p class="NDLRefMemberDescription">Populates the <span class="NDLSystemFont"><a href="../efd/efd__Matrix3.htm">efd::Matrix3</a></span> with data from the stream. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">strm</span></td>
    <td>Stream to read the values from </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">val</span></td>
    <td>Structure to <span class="NDLSystemFont"><a href="../efd/efd__set.htm">set</a></span> the values in </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A Reference to the IOStream </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceefd_1ac22bf56cb2b442ecff03ef32d07f3738"></a>
<p class="NDLRefMemberFunction">void  DataStreamSkip(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">efd::DataStream</a></span>& strm, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__Matrix3.htm">efd::Matrix3</a></span>& val)</p>
<p class="NDLRefMemberDescription">Advance a <span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">DataStream</a></span> past a <span class="NDLSystemFont"><a href="../efd/efd__Matrix3.htm">Matrix3</a></span>. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">strm</span></td>
    <td>Stream to advance. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">val</span></td>
    <td>value to skip. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceefd_1a96a20014b633f94fd6379f16eb993e60"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">efd::DataStream</a></span>&  operator&lt;&lt;(<br/><span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">efd::DataStream</a></span>& strm, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__Color.htm">efd::Color</a></span>& val)</p>
<p class="NDLRefMemberDescription">Adds the contents of an <span class="NDLSystemFont"><a href="../efd/efd__Color.htm">efd::Color</a></span> into the stream. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">strm</span></td>
    <td>Stream to add the values into </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">val</span></td>
    <td>Values to add to the stream </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A reference to the IOStream </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceefd_1a5b0b7403ad46157163668e40ec98e4c6"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">efd::DataStream</a></span>&  operator&gt;&gt;(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">efd::DataStream</a></span>& strm, <br/><span class="NDLSystemFont"><a href="../efd/efd__Color.htm">efd::Color</a></span>& val)</p>
<p class="NDLRefMemberDescription">Populates the <span class="NDLSystemFont"><a href="../efd/efd__Color.htm">efd::Color</a></span> with data from the stream. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">strm</span></td>
    <td>Stream to read the values from </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">val</span></td>
    <td>Structure to <span class="NDLSystemFont"><a href="../efd/efd__set.htm">set</a></span> the values in </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A Reference to the IOStream </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceefd_1a6fc601b34da2786cc00517890dd51020"></a>
<p class="NDLRefMemberFunction">void  DataStreamSkip(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">efd::DataStream</a></span>& strm, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__Color.htm">efd::Color</a></span>& val)</p>
<p class="NDLRefMemberDescription">Advance a <span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">DataStream</a></span> past a color. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">strm</span></td>
    <td>Stream to advance. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">val</span></td>
    <td>value to skip. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceefd_1a0af1ed01d7f588522fcaa1bfe93963ad"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">efd::DataStream</a></span>&  operator&lt;&lt;(<br/><span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">efd::DataStream</a></span>& strm, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__ColorA.htm">efd::ColorA</a></span>& val)</p>
<p class="NDLRefMemberDescription">Adds the contents of an <span class="NDLSystemFont"><a href="../efd/efd__ColorA.htm">efd::ColorA</a></span> into the stream. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">strm</span></td>
    <td>Stream to add the values into </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">val</span></td>
    <td>Values to add to the stream </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A reference to the IOStream </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceefd_1aa704abda115368bd7a5ac6651f111ee3"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">efd::DataStream</a></span>&  operator&gt;&gt;(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">efd::DataStream</a></span>& strm, <br/><span class="NDLSystemFont"><a href="../efd/efd__ColorA.htm">efd::ColorA</a></span>& val)</p>
<p class="NDLRefMemberDescription">Populates the <span class="NDLSystemFont"><a href="../efd/efd__ColorA.htm">efd::ColorA</a></span> with data from the stream. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">strm</span></td>
    <td>Stream to read the values from </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">val</span></td>
    <td>Structure to <span class="NDLSystemFont"><a href="../efd/efd__set.htm">set</a></span> the values in </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A Reference to the IOStream </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceefd_1a62cee5dd2f254d7887c306695048e769"></a>
<p class="NDLRefMemberFunction">void  DataStreamSkip(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">efd::DataStream</a></span>& strm, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__ColorA.htm">efd::ColorA</a></span>& val)</p>
<p class="NDLRefMemberDescription">Advance a <span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">DataStream</a></span> past a <span class="NDLSystemFont"><a href="../efd/efd__ColorA.htm">ColorA</a></span>. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">strm</span></td>
    <td>Stream to advance. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">val</span></td>
    <td>value to skip. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceefd_1a346bd6799816ee403edc6cbc94200f49"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">efd::DataStream</a></span>&  operator&lt;&lt;(<br/><span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">efd::DataStream</a></span>& strm, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__ID128.htm">efd::ID128</a></span>& val)</p>
<p class="NDLRefMemberDescription">Adds the contents of an <span class="NDLSystemFont"><a href="../efd/efd__ID128.htm">efd::ID128</a></span> into the stream. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">strm</span></td>
    <td>Stream to add the values into </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">val</span></td>
    <td>Values to add to the stream </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A reference to the IOStream </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceefd_1a0ff7300f65df7f484b3db9e0feff05bf"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">efd::DataStream</a></span>&  operator&gt;&gt;(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">efd::DataStream</a></span>& strm, <br/><span class="NDLSystemFont"><a href="../efd/efd__ID128.htm">efd::ID128</a></span>& val)</p>
<p class="NDLRefMemberDescription">Populates the <span class="NDLSystemFont"><a href="../efd/efd__ID128.htm">efd::ID128</a></span> with data from the stream. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">strm</span></td>
    <td>Stream to read the values from </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">val</span></td>
    <td>Structure to <span class="NDLSystemFont"><a href="../efd/efd__set.htm">set</a></span> the values in </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A Reference to the IOStream </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceefd_1a6087d6e2cc62c834266b5b79315669ca"></a>
<p class="NDLRefMemberFunction">void  DataStreamSkip(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">efd::DataStream</a></span>& strm, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__ID128.htm">efd::ID128</a></span>& val)</p>
<p class="NDLRefMemberDescription">Advance a <span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">DataStream</a></span> past a <span class="NDLSystemFont"><a href="../efd/efd__ID128.htm">ID128</a></span>. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">strm</span></td>
    <td>Stream to advance. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">val</span></td>
    <td>value to skip. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceefd_1a0b116a6edd2e376872cb3623c27253ba"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">efd::DataStream</a></span>&  operator&lt;&lt;(<br/><span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">efd::DataStream</a></span>& strm, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__Point4.htm">efd::Point4</a></span>& val)</p>
<p class="NDLRefMemberDescription">Adds the contents of an <span class="NDLSystemFont"><a href="../efd/efd__Point4.htm">efd::Point4</a></span> into the stream. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">strm</span></td>
    <td>Stream to add the values into </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">val</span></td>
    <td>Values to add to the stream </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A reference to the IOStream </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceefd_1a54adac8466d3d48c00fddec577bc4473"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">efd::DataStream</a></span>&  operator&gt;&gt;(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">efd::DataStream</a></span>& strm, <br/><span class="NDLSystemFont"><a href="../efd/efd__Point4.htm">efd::Point4</a></span>& val)</p>
<p class="NDLRefMemberDescription">Populates the <span class="NDLSystemFont"><a href="../efd/efd__Point4.htm">efd::Point4</a></span> with data from the stream. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">strm</span></td>
    <td>Stream to read the values from </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">val</span></td>
    <td>Structure to <span class="NDLSystemFont"><a href="../efd/efd__set.htm">set</a></span> the values in </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A Reference to the IOStream </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceefd_1a0f3a64a5007adbb68f78ac2c21be4545"></a>
<p class="NDLRefMemberFunction">void  DataStreamSkip(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">efd::DataStream</a></span>& strm, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__Point4.htm">efd::Point4</a></span>& val)</p>
<p class="NDLRefMemberDescription">Advance a <span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">DataStream</a></span> past a <span class="NDLSystemFont"><a href="../efd/efd__Point4.htm">Point4</a></span>. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">strm</span></td>
    <td>Stream to advance. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">val</span></td>
    <td>value to skip. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceefd_1ab171bbd91408fe616bea0ce52feb9c3b"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">efd::DataStream</a></span>&  operator&lt;&lt;(<br/><span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">efd::DataStream</a></span>& strm, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__Quaternion.htm">efd::Quaternion</a></span>& val)</p>
<p class="NDLRefMemberDescription">Adds the contents of an <span class="NDLSystemFont"><a href="../efd/efd__Quaternion.htm">efd::Quaternion</a></span> into the stream. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">strm</span></td>
    <td>Stream to add the values into </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">val</span></td>
    <td>Values to add to the stream </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A reference to the IOStream </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceefd_1a68ee5be0dba23f45d2b812dd6b0963f5"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">efd::DataStream</a></span>&  operator&gt;&gt;(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">efd::DataStream</a></span>& strm, <br/><span class="NDLSystemFont"><a href="../efd/efd__Quaternion.htm">efd::Quaternion</a></span>& val)</p>
<p class="NDLRefMemberDescription">Populates the <span class="NDLSystemFont"><a href="../efd/efd__Quaternion.htm">efd::Quaternion</a></span> with data from the stream. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">strm</span></td>
    <td>Stream to read the values from </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">val</span></td>
    <td>Structure to <span class="NDLSystemFont"><a href="../efd/efd__set.htm">set</a></span> the values in </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A Reference to the IOStream </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceefd_1a51f1db962e5b31c5c9485cd948e067d4"></a>
<p class="NDLRefMemberFunction">void  DataStreamSkip(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">efd::DataStream</a></span>& strm, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__Quaternion.htm">efd::Quaternion</a></span>& val)</p>
<p class="NDLRefMemberDescription">Advance a <span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">DataStream</a></span> past a <span class="NDLSystemFont"><a href="../efd/efd__Quaternion.htm">Quaternion</a></span>. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">strm</span></td>
    <td>Stream to advance. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">val</span></td>
    <td>value to skip. </td>
</tr>

        </tbody>
    </table>
</div>


<a name="string_comparison_operators_from_fixedstring.h"></a>
<p class="NDLRefHead1">String comparison operators from FixedString.h</p>

<p class="NDLRefMemberDescription">Helper functions that assist in comparing strings.</p>
<p class="NDLRefMemberDescription"><span class="NDLSystemFont"><a href="../efd/efd__FixedString.htm">FixedString</a></span> to <span class="NDLSystemFont"><a href="../efd/efd__FixedString.htm">FixedString</a></span> comparison is very fast since it is a simple pointer value comparison and does not need to de-reference the efd::Character array. <span class="NDLSystemFont"><a href="../efd/efd__FixedString.htm">FixedString</a></span> to efd::Character array comparisons have been accelerated for the case where the efd::Character array is really pointing to an <span class="NDLSystemFont"><a href="../efd/efd__FixedString.htm">FixedString</a></span>. </p>

<a name="namespaceefd_1ae07daca3a863c42308c86d6e5695e75d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  operator==(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__FixedString.htm">FixedString</a></span>& s1, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__FixedString.htm">FixedString</a></span>& s2)</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a35f26b70ffc9c7dfc73ca7de372ab4eb"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  operator!=(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__FixedString.htm">FixedString</a></span>& s1, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__FixedString.htm">FixedString</a></span>& s2)</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a9cf6d1aacd964f0ff53d53f265d2ac3a"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  operator==(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__FixedString.htm">FixedString</a></span>& s1, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* s2)</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1acfe2e6af47d5085bbb5ebf7d155b4b8e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  operator!=(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__FixedString.htm">FixedString</a></span>& s1, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* s2)</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a94bed8743d4c4061b404bd054edcee6b"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  operator==(<br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* s1, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__FixedString.htm">FixedString</a></span>& s2)</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1ab321d31b085ad55eb5156853d01fd6d7"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  operator!=(<br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* s1, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__FixedString.htm">FixedString</a></span>& s2)</p>
<p class="NDLRefMemberFunction"></p>
<a name="template_definitions_for_stream_operators_from_datastream.h"></a>
<p class="NDLRefHead1">Template definitions for stream operators from DataStream.h</p>


<a name="namespaceefd_1a89e9a369d71d44f6128a00883fad12d3"></a>
<p class="NDLRefMemberFunction">template &lt;typename T  &gt; <span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">DataStream</a></span>&  operator&lt;&lt;(<br/><span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">DataStream</a></span>& str, <br/>const T& val)</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a8419f0e4e226aa7e34bbf6b9f43f73a7"></a>
<p class="NDLRefMemberFunction">template &lt;typename T  &gt; const <span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">DataStream</a></span>&  operator&gt;&gt;(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">DataStream</a></span>& str, <br/>T& val)</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1af511af7925cdd172629ffe53d1a65f42"></a>
<p class="NDLRefMemberFunction">template &lt;typename T  &gt; void  DataStreamSkip(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">DataStream</a></span>& str, <br/>const T& val)</p>
<p class="NDLRefMemberFunction"></p>
<a name="templated_functions_from_datastreamutils.h"></a>
<p class="NDLRefHead1">Templated functions from DataStreamUtils.h</p>

<p class="NDLRefMemberDescription">The following templated are for quickly marshaling data structures that contain actual data elements.</p>
<p class="NDLRefMemberDescription">They will not work if your structure contains, for example, a pointer to the data you want marshaled instead of the data itself. When we switch to the new <span class="NDLSystemFont"><a href="../Namespaces/efd__Serializer.htm">Serializer</a></span> system it has support for more robust data structure marshaling. </p>

<a name="namespaceefd_1a9e7165c22a67a9f90d766f8e4d26258e"></a>
<p class="NDLRefMemberFunction">template &lt;typename Data  &gt; <span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">efd::DataStream</a></span>&  operator&lt;&lt;(<br/><span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">efd::DataStream</a></span>& strm, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__vector.htm">efd::vector</a></span>&lt;Data&gt;& val)</p>
<p class="NDLRefMemberDescription">Adds the contents of the given <span class="NDLSystemFont"><a href="../efd/efd__vector.htm">vector</a></span> to the stream. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">strm</span></td>
    <td>Stream to add values into </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">val</span></td>
    <td>Values to add to the stream. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A reference to the <span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">DataStream</a></span>. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceefd_1a2cab5eb127a444513d820fe7c712ff68"></a>
<p class="NDLRefMemberFunction">template &lt;typename Data  &gt; const <span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">efd::DataStream</a></span>&  operator&gt;&gt;(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">efd::DataStream</a></span>& strm, <br/><span class="NDLSystemFont"><a href="../efd/efd__vector.htm">efd::vector</a></span>&lt;Data&gt;& val)</p>
<p class="NDLRefMemberDescription">Extract a <span class="NDLSystemFont"><a href="../efd/efd__vector.htm">vector</a></span> from the stream. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">strm</span></td>
    <td>Stream to retrieve values from. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">val</span></td>
    <td>container to populate. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A reference to the <span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">DataStream</a></span>. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceefd_1ab5ccc956f6e1d9d696bd732791bef036"></a>
<p class="NDLRefMemberFunction">template &lt;typename Data  &gt; void  DataStreamSkip(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">efd::DataStream</a></span>& strm, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__vector.htm">efd::vector</a></span>&lt;Data&gt;& val)</p>
<p class="NDLRefMemberDescription">Advance a <span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">DataStream</a></span> past a <span class="NDLSystemFont"><a href="../efd/efd__vector.htm">vector</a></span>. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">strm</span></td>
    <td>Stream to advance. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">val</span></td>
    <td>value to skip. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceefd_1a272598531d6254537cd790d354e043bb"></a>
<p class="NDLRefMemberFunction">template &lt;typename Data  &gt; <span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">efd::DataStream</a></span>&  operator&lt;&lt;(<br/><span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">efd::DataStream</a></span>& strm, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__list.htm">efd::list</a></span>&lt;Data&gt;& val)</p>
<p class="NDLRefMemberDescription">Adds the contents of the given <span class="NDLSystemFont"><a href="../efd/efd__list.htm">list</a></span> to the stream. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">strm</span></td>
    <td>Stream to add values into </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">val</span></td>
    <td>Values to add to the stream. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A reference to the <span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">DataStream</a></span>. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceefd_1a72eac0fddf1795e733aa27f2efec9ca5"></a>
<p class="NDLRefMemberFunction">template &lt;typename Data  &gt; const <span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">efd::DataStream</a></span>&  operator&gt;&gt;(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">efd::DataStream</a></span>& strm, <br/><span class="NDLSystemFont"><a href="../efd/efd__list.htm">efd::list</a></span>&lt;Data&gt;& val)</p>
<p class="NDLRefMemberDescription">Extract a <span class="NDLSystemFont"><a href="../efd/efd__list.htm">list</a></span> from the stream. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">strm</span></td>
    <td>Stream to retrieve values from. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">val</span></td>
    <td>container to populate. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A reference to the <span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">DataStream</a></span>. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceefd_1a4b1ad07459267a138bc64ecbce89f083"></a>
<p class="NDLRefMemberFunction">template &lt;typename Data  &gt; void  DataStreamSkip(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">efd::DataStream</a></span>& strm, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__list.htm">efd::list</a></span>&lt;Data&gt;& val)</p>
<p class="NDLRefMemberDescription">Advance a <span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">DataStream</a></span> past a <span class="NDLSystemFont"><a href="../efd/efd__list.htm">list</a></span>. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">strm</span></td>
    <td>Stream to advance. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">val</span></td>
    <td>value to skip. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceefd_1a6a02e4a59c9ddd25d8503b48413cd0aa"></a>
<p class="NDLRefMemberFunction">template &lt;typename Key  , typename Data  &gt; <span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">efd::DataStream</a></span>&  operator&lt;&lt;(<br/><span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">efd::DataStream</a></span>& strm, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__map.htm">efd::map</a></span>&lt;Key, Data&gt;& val)</p>
<p class="NDLRefMemberDescription">Adds the contents of the given <span class="NDLSystemFont"><a href="../efd/efd__map.htm">map</a></span> to the stream. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">strm</span></td>
    <td>Stream to add values into </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">val</span></td>
    <td>Values to add to the stream. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A reference to the <span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">DataStream</a></span>. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceefd_1a8f98da8476256d14f8856b769d0d3aa1"></a>
<p class="NDLRefMemberFunction">template &lt;typename Key  , typename Data  &gt; const <span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">efd::DataStream</a></span>&  operator&gt;&gt;(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">efd::DataStream</a></span>& strm, <br/><span class="NDLSystemFont"><a href="../efd/efd__map.htm">efd::map</a></span>&lt;Key, Data&gt;& val)</p>
<p class="NDLRefMemberDescription">Extract a <span class="NDLSystemFont"><a href="../efd/efd__map.htm">map</a></span> from the stream. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">strm</span></td>
    <td>Stream to retrieve values from. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">val</span></td>
    <td>container to populate. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A reference to the <span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">DataStream</a></span>. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceefd_1a9d0a7ca2f883cb4c3a582e4600745247"></a>
<p class="NDLRefMemberFunction">template &lt;typename Key  , typename Data  &gt; void  DataStreamSkip(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">efd::DataStream</a></span>& strm, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__map.htm">efd::map</a></span>&lt;Key, Data&gt;& val)</p>
<p class="NDLRefMemberDescription">Advance a <span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">DataStream</a></span> past a <span class="NDLSystemFont"><a href="../efd/efd__map.htm">map</a></span>. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">strm</span></td>
    <td>Stream to advance. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">val</span></td>
    <td>value to skip. </td>
</tr>

        </tbody>
    </table>
</div>


<a name="utf-8/16_utility_functions_from_utf8char.h"></a>
<p class="NDLRefHead1">UTF-8/16 Utility functions from utf8char.h</p>


<a name="namespaceefd_1a3fc7b96cdf6548c915fe29cffe3d04f4"></a>
<p class="NDLRefMemberFunction">unsigned  utf8_num_units(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* buffer_sz)</p>
<p class="NDLRefMemberDescription">Return the number of bytes at the beginning of the stream used to encode the first character. </p>

<a name="namespaceefd_1a0188f2c22ede74beebf31a43a567d385"></a>
<p class="NDLRefMemberFunction">unsigned  utf16_num_units(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a6a68ba3a7db300d1ea1cbfcb9aae6518">efd::WChar</a></span>* buffer_sz)</p>
<p class="NDLRefMemberDescription">Return the number of bytes at the beginning of the stream used to encode the first character. </p>

<a name="namespaceefd_1a0a5acf5194c960721cddd0f9e5f53e15"></a>
<p class="NDLRefMemberFunction">unsigned  utf8_num_units(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a59a3838ab5cdfe87f98f5b8371e4e91d">efd::UInt8</a></span> byte)</p>
<p class="NDLRefMemberDescription">Given the first unit of a multi-unit sequence, return the number of units needed to encode the entire character. </p>

<a name="namespaceefd_1a4f9d28d889c2c44741d09f03568862c1"></a>
<p class="NDLRefMemberFunction">unsigned  utf16_num_units(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a6a68ba3a7db300d1ea1cbfcb9aae6518">efd::WChar</a></span> byte)</p>
<p class="NDLRefMemberDescription">Return the number of bytes at the beginning of the stream used to encode the first character. </p>

<a name="namespaceefd_1aaf8e1f0ee15071cfa1677d4d20adcefb"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  utf8_validate_char(<br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* src_sz, <br/>unsigned size)</p>
<p class="NDLRefMemberDescription">Given a pointer to an encoded character and the character's length in units, return true if the character is valid. </p>

<a name="namespaceefd_1a679fb7b91267e16961998d7c01af0fb4"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  utf16_validate_char(<br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a6a68ba3a7db300d1ea1cbfcb9aae6518">efd::WChar</a></span>* src_sz, <br/>unsigned size)</p>
<p class="NDLRefMemberDescription">Return the number of bytes at the beginning of the stream used to encode the first character. </p>

<a name="namespaceefd_1a2465e9a6638462bc819e6fad2e488f8c"></a>
<p class="NDLRefMemberFunction">unsigned  utf8_tail_fragments(<br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* src_sz, <br/>unsigned size)</p>
<p class="NDLRefMemberDescription">Given a buffer and the size of the buffer, determine if the last encoded character within the buffer is valid. </p>

<a name="namespaceefd_1ae9c4ea6febaa00b117781a4107d44b97"></a>
<p class="NDLRefMemberFunction">unsigned  utf16_tail_fragments(<br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a6a68ba3a7db300d1ea1cbfcb9aae6518">efd::WChar</a></span>* src_sz, <br/>unsigned size)</p>
<p class="NDLRefMemberDescription">Return the number of bytes at the beginning of the stream used to encode the first character. </p>
<a name="wrappers_for_some_c_runtime_functions_from_stringutilities.h"></a>
<p class="NDLRefHead1">Wrappers for some C Runtime functions from StringUtilities.h</p>


<a name="namespaceefd_1ada91973486a9438414d74b51a38936f0"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>*  Strcpy(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* dest, <br/>size_t destSize, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* src)</p>
<p class="NDLRefMemberDescription">Wrapper for std::strcpy using ASCII. </p>

<a name="namespaceefd_1a1b07b74a0fd6fa31ba52affad28e6310"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>*  Strncpy(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* dest, <br/>size_t destSize, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* src, <br/>size_t count)</p>
<p class="NDLRefMemberDescription">Wrapper for std::strncpy using ASCII. </p>

<a name="namespaceefd_1ad738127f348107eea0f1b34619bcbdfa"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>*  Strcat(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* dest, <br/>size_t destSize, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* src)</p>
<p class="NDLRefMemberDescription">Wrapper for std::strcat using ASCII. </p>

<a name="namespaceefd_1a82f29ddcd2e139890144e2b3d89a6734"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>*  Strncat(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* dest, <br/>size_t destSize, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* src, <br/>size_t count)</p>
<p class="NDLRefMemberDescription">Wrapper for std::strncat using ASCII. </p>

<a name="namespaceefd_1a98e504acfb1382ecb10c0ee3be8ea48f"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>*  Strtok(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* str, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* delimit, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span> ** ppcContext)</p>
<p class="NDLRefMemberDescription">Wrapper for std::strtok using ASCII. </p>

<a name="namespaceefd_1a75a5b5366db4466a86422038a89cd2e7"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>  Sprintf(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* dest, <br/>size_t destSize, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* format, <br/>... )</p>
<p class="NDLRefMemberDescription">Wrapper for std::sprintf using ASCII. </p>

<a name="namespaceefd_1afdec928bb41a7d1c990314858ea29b3c"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>  Vsprintf(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* dest, <br/>size_t destSize, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* format, <br/>va_list args)</p>
<p class="NDLRefMemberDescription">Wrapper for std::_vsprintf using ASCII. </p>

<a name="namespaceefd_1aaca93e4f5d2a8e17e5a26317d41d984b"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>  Vscprintf(<br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* format, <br/>va_list args)</p>
<p class="NDLRefMemberDescription">Wrapper for std::_vscprintf using ASCII. </p>

<a name="namespaceefd_1ad95792cc8279812f2ec349bb8cecf22a"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>  Snprintf(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* dest, <br/>size_t destSize, <br/>size_t count, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* format, <br/>... )</p>
<p class="NDLRefMemberDescription">Wrapper for std::snprintf using ASCII. </p>

<a name="namespaceefd_1ac25f6ea8c2737f3570982983c4171f57"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>  Vsnprintf(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* dest, <br/>size_t destSize, <br/>size_t count, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* format, <br/>va_list args)</p>
<p class="NDLRefMemberDescription">Wrapper for std::_vsnprintf using ASCII. </p>

<a name="namespaceefd_1a0635d5d1297560ba717be962d37507e4"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>  Strupr(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* dest, <br/>size_t destSize)</p>
<p class="NDLRefMemberDescription">Wrapper for _strupr_s using ASCII. </p>

<a name="namespaceefd_1a7c8fd1fba212ea43fbb3431254587eb6"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>  Strlwr(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* dest, <br/>size_t destSize)</p>
<p class="NDLRefMemberDescription">Wrapper for _strlwr_s using ASCII. </p>

<a name="namespaceefd_1a98ce071489097d850b679d6021c3470b"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>  Memcpy(<br/>void* dest, <br/>size_t destSize, <br/>const void* src, <br/>size_t count)</p>
<p class="NDLRefMemberDescription">wrapper for std::memcpy </p>

<a name="namespaceefd_1acdad014b8e1c8d37bb6c94e05227721e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>  Memcpy(<br/>void* dest, <br/>const void* src, <br/>size_t count)</p>
<p class="NDLRefMemberDescription">wrapper for std::memcpy </p>

<a name="namespaceefd_1adc7c4b344b0faa41b2b68f5f535ca51d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>  Memmove(<br/>void* dest, <br/>size_t destSize, <br/>const void* src, <br/>size_t count)</p>
<p class="NDLRefMemberDescription">wrapper for std::memmove </p>

<a name="namespaceefd_1a3a47170b93f7872c849434ad24668815"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  Strlen(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* str)</p>
<p class="NDLRefMemberDescription">Wrapper for std::strcpy using ASCII. </p>

<a name="namespaceefd_1ac1f8678d122f007824391d5e04ee710a"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  Strlen(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a6a68ba3a7db300d1ea1cbfcb9aae6518">efd::WChar</a></span>* str)</p>
<p class="NDLRefMemberDescription">Wrapper for std::strcpy using ASCII. </p>

<a name="namespaceefd_1a490f99460ff553686a84b3cf025b1592"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>  Strcoll(<br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* str1, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* str2)</p>
<p class="NDLRefMemberDescription">Wrapper for std::strcpy using ASCII. </p>

<a name="namespaceefd_1a5fc959a84b143349a426177676b4275a"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>  Strcoll(<br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a6a68ba3a7db300d1ea1cbfcb9aae6518">efd::WChar</a></span>* str1, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a6a68ba3a7db300d1ea1cbfcb9aae6518">efd::WChar</a></span>* str2)</p>
<p class="NDLRefMemberDescription">Wrapper for std::strcpy using ASCII. </p>

<a name="namespaceefd_1a2e3067641c9de48a044d8b9262405201"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a845df149ec80fc0bf36f875ece09ef9d">efd::UInt64</a></span>  Atoi64(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* buffer)</p>
<p class="NDLRefMemberDescription">Wrapper around _atoi64. </p>

<a name="namespaceefd_1ad5413cd706f11f88627a66fae703d682"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>  strtol(<br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* buffer, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span> ** endPtr, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a59a3838ab5cdfe87f98f5b8371e4e91d">efd::UInt8</a></span> base = 0)</p>
<p class="NDLRefMemberDescription">Wrapper around strtol. For completeness and const correctness. </p>

<a name="namespaceefd_1a1b4125cf47680724d2d776402b7a8ea9"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  strtoul(<br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* buffer, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span> ** endPtr, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a59a3838ab5cdfe87f98f5b8371e4e91d">efd::UInt8</a></span> base = 0)</p>
<p class="NDLRefMemberDescription">Wrapper for std::strcpy using ASCII. </p>

<a name="namespaceefd_1a674a8ec2e5c99f9b790216a1f3509f7f"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a31570c844c29f8e0f335ac87dcb55401">efd::SInt64</a></span>  strtoll(<br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* buffer, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span> ** endPtr, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a59a3838ab5cdfe87f98f5b8371e4e91d">efd::UInt8</a></span> base = 0)</p>
<p class="NDLRefMemberDescription">Wrapper around _strtoi64 and _strtoui64. </p>

<a name="namespaceefd_1a61e7e83d5eff071e5c85091cf629711a"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a845df149ec80fc0bf36f875ece09ef9d">efd::UInt64</a></span>  strtoull(<br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* buffer, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span> ** endPtr, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a59a3838ab5cdfe87f98f5b8371e4e91d">efd::UInt8</a></span> base = 0)</p>
<p class="NDLRefMemberDescription">Wrapper for std::strcpy using ASCII. </p>

<a name="namespaceefd_1a61c49c7089e2843ba350e5b06b2931c9"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  strtof(<br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* buffer, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span> ** endPtr)</p>
<p class="NDLRefMemberDescription">Wrapper around atof. </p>

<a name="namespaceefd_1a4a6fb97ccca97390dec9d698b9752040"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aff0a9e9ca8001b330091eb01eeb190c2">efd::Float64</a></span>  strtod(<br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* buffer, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span> ** endPtr)</p>
<p class="NDLRefMemberDescription">Wrapper for std::strcpy using ASCII. </p>

<a name="namespaceefd_1ab0a21635f34795b7cb078c0d7424ab60"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>  Stricmp(<br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* s1, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* s2)</p>
<p class="NDLRefMemberDescription">wrapper for std::stricmp </p>

<a name="namespaceefd_1a8ffa7061604c0f7b8cf5f00943d1eab1"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>  Strnicmp(<br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* s1, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* s2, <br/>size_t n)</p>
<p class="NDLRefMemberDescription">wrapper for std::strnicmp </p>

<a name="namespaceefd_1a2af001b6cc4d198029b4ec4db9360846"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>*  Strdup(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* str)</p>
<p class="NDLRefMemberDescription">wrapper for strdup. This uses the emergent allocator instead of malloc. </p>

<a name="namespaceefd_1a8c943fda2ca68dc61a09adc6b996abe4"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a6a68ba3a7db300d1ea1cbfcb9aae6518">efd::WChar</a></span>*  WStrcpy(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a6a68ba3a7db300d1ea1cbfcb9aae6518">WChar</a></span>* dest, <br/>size_t destSize, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a6a68ba3a7db300d1ea1cbfcb9aae6518">WChar</a></span>* src)</p>
<p class="NDLRefMemberDescription">Wrapper for strcpy using 16-bit wide chars. </p>

<a name="namespaceefd_1ae72ad1df3d6a690d83a8a378aa532cff"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a6a68ba3a7db300d1ea1cbfcb9aae6518">efd::WChar</a></span>*  WStrncpy(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a6a68ba3a7db300d1ea1cbfcb9aae6518">WChar</a></span>* dest, <br/>size_t destSize, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a6a68ba3a7db300d1ea1cbfcb9aae6518">WChar</a></span>* src, <br/>size_t count)</p>
<p class="NDLRefMemberDescription">Wrapper for strncpy using 16-bit wide chars. </p>

<a name="namespaceefd_1abd8b4ed1a7ad2633f954085ffea17332"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a6a68ba3a7db300d1ea1cbfcb9aae6518">efd::WChar</a></span>*  WStrcat(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a6a68ba3a7db300d1ea1cbfcb9aae6518">WChar</a></span>* dest, <br/>size_t destSize, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a6a68ba3a7db300d1ea1cbfcb9aae6518">WChar</a></span>* src)</p>
<p class="NDLRefMemberDescription">Wrapper for strcat using 16-bit wide chars. </p>

<a name="namespaceefd_1a277c273a15a1cc1a7c7f6f6243ca3635"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a6a68ba3a7db300d1ea1cbfcb9aae6518">efd::WChar</a></span>*  WStrtok(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a6a68ba3a7db300d1ea1cbfcb9aae6518">WChar</a></span>* str, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a6a68ba3a7db300d1ea1cbfcb9aae6518">WChar</a></span>* delimiters, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a6a68ba3a7db300d1ea1cbfcb9aae6518">WChar</a></span> ** ppContext)</p>
<p class="NDLRefMemberDescription">Wrapper for strtok using 16-bit wide chars. </p>

<a name="namespaceefd_1aab1ba87326ec6c5057ade8a75dd53af4"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>  WSprintf(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a6a68ba3a7db300d1ea1cbfcb9aae6518">WChar</a></span>* dest, <br/>size_t destSize, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a6a68ba3a7db300d1ea1cbfcb9aae6518">WChar</a></span>* format, <br/>... )</p>
<p class="NDLRefMemberDescription">Wrapper for sprintf using 16-bit wide chars. </p>

<a name="namespaceefd_1add2ea271f5419b80dc7bbc6d7f38eb17"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>  WStrupr(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a6a68ba3a7db300d1ea1cbfcb9aae6518">efd::WChar</a></span>* dest, <br/>size_t destSize)</p>
<p class="NDLRefMemberDescription">Wrapper for strupr using 16-bit wide chars. </p>

<a name="namespaceefd_1a4c1fecb06645d2091cb2929edeb8f556"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>  WStrlwr(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a6a68ba3a7db300d1ea1cbfcb9aae6518">efd::WChar</a></span>* dest, <br/>size_t destSize)</p>
<p class="NDLRefMemberDescription">Wrapper for strlwr using 16-bit wide chars. </p>
<a name="private_types"></a>
<p class="NDLRefHead1">Private Types</p>


<a name="namespaceefd_1ad56003e4f9ab8fb639879e6a627feed9"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__AssetApplicationInfoMsg.htm">AssetApplicationInfoMsg</a></span>&gt;  AssetApplicationInfoMsgPtr</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a8fa37d04f5769c53084d68c38cece444"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__AssetCacheResponse.htm">AssetCacheResponse</a></span>&gt;  AssetCacheResponsePtr</p>
<p class="NDLRefMemberDescription">A SmartPoint for an <span class="NDLSystemFont"><a href="../efd/efd__AssetCacheResponse.htm">AssetCacheResponse</a></span>. </p>

<a name="namespaceefd_1a1d810e1587d0ea4bb66c2faa240209ad"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;const <span class="NDLSystemFont"><a href="../efd/efd__AssetCacheResponse.htm">AssetCacheResponse</a></span>&gt;  AssetCacheResponseConstPtr</p>
<p class="NDLRefMemberDescription">A SmartPoint for a const <span class="NDLSystemFont"><a href="../efd/efd__AssetCacheResponse.htm">AssetCacheResponse</a></span>. </p>

<a name="namespaceefd_1a752e47ab9d46d04aa506499350278655"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__AssetConfigService.htm">AssetConfigService</a></span>&gt;  AssetConfigServicePtr</p>
<p class="NDLRefMemberDescription">A <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">SmartPointer</a></span> for the <span class="NDLSystemFont"><a href="../efd/efd__AssetConfigService.htm">AssetConfigService</a></span> class. </p>

<a name="namespaceefd_1a6f8df482ab92c662d07739cf2f9631d1"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__AssetFactoryManager.htm">AssetFactoryManager</a></span>&gt;  AssetFactoryManagerPtr</p>
<p class="NDLRefMemberDescription">A smart pointer for <span class="NDLSystemFont"><a href="../efd/efd__AssetFactoryManager.htm">AssetFactoryManager</a></span> instances. </p>

<a name="namespaceefd_1a63665090c4f2a1302309a817c98136bb"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__AssetLoadRequest.htm">AssetLoadRequest</a></span>&gt;  AssetLoadRequestPtr</p>
<p class="NDLRefMemberDescription">A <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">SmartPointer</a></span> for the <span class="NDLSystemFont"><a href="../efd/efd__AssetLoadRequest.htm">AssetLoadRequest</a></span> class. </p>

<a name="namespaceefd_1adb85dd1f5835180e557f19e22ceef3de"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;const <span class="NDLSystemFont"><a href="../efd/efd__AssetLoadRequest.htm">AssetLoadRequest</a></span>&gt;  AssetLoadRequestConstPtr</p>
<p class="NDLRefMemberDescription">A <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">SmartPointer</a></span> for const <span class="NDLSystemFont"><a href="../efd/efd__AssetLoadRequest.htm">AssetLoadRequest</a></span> pointers. </p>

<a name="namespaceefd_1a5f8e0a9350117bc27ee4156f384aedd4"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__AssetLoadResponse.htm">AssetLoadResponse</a></span>&gt;  AssetLoadResponsePtr</p>
<p class="NDLRefMemberDescription">A <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">SmartPointer</a></span> for the <span class="NDLSystemFont"><a href="../efd/efd__AssetLoadResponse.htm">AssetLoadResponse</a></span> class. </p>

<a name="namespaceefd_1a1e29173a2e3a1827cc0f1a31b8cd14e2"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">SmartPointer</a></span>&lt;const <span class="NDLSystemFont"><a href="../efd/efd__AssetLoadResponse.htm">AssetLoadResponse</a></span>&gt;  AssetLoadResponseConstPtr</p>
<p class="NDLRefMemberDescription">A <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">SmartPointer</a></span> for const <span class="NDLSystemFont"><a href="../efd/efd__AssetLoadResponse.htm">AssetLoadResponse</a></span> class instances. </p>

<a name="namespaceefd_1a722a28ff28298b6cffca10a436e3ca96"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__AssetLocatorRequest.htm">AssetLocatorRequest</a></span>&gt;  AssetLocatorRequestPtr</p>
<p class="NDLRefMemberDescription">A <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">SmartPointer</a></span> for <span class="NDLSystemFont"><a href="../efd/efd__AssetLocatorRequest.htm">AssetLocatorRequest</a></span> instances. </p>

<a name="namespaceefd_1a72a6d2995f2bd1ca2fff8866ef07c0f7"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;const <span class="NDLSystemFont"><a href="../efd/efd__AssetLocatorRequest.htm">AssetLocatorRequest</a></span>&gt;  AssetLocatorRequestConstPtr</p>
<p class="NDLRefMemberDescription">A <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">SmartPointer</a></span> for const <span class="NDLSystemFont"><a href="../efd/efd__AssetLocatorRequest.htm">AssetLocatorRequest</a></span> instances. </p>

<a name="namespaceefd_1a6e1ae1c5ab5ed9c3da87cc2774bc09b9"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__FetchAssetDataRequest.htm">FetchAssetDataRequest</a></span>&gt;  FetchAssetDataRequestPtr</p>
<p class="NDLRefMemberDescription">A <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">SmartPointer</a></span> for <span class="NDLSystemFont"><a href="../efd/efd__FetchAssetDataRequest.htm">FetchAssetDataRequest</a></span> instances. </p>

<a name="namespaceefd_1afc0af87dc452e708105e85372712c601"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__AssetConfigurationMessage.htm">AssetConfigurationMessage</a></span>&gt;  AssetConfigurationMessagePtr</p>
<p class="NDLRefMemberDescription">A <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">SmartPointer</a></span> for <span class="NDLSystemFont"><a href="../efd/efd__AssetConfigurationMessage.htm">AssetConfigurationMessage</a></span> instances. </p>

<a name="namespaceefd_1a3a5119e543bedc1cb0c4c5c47ba2e32b"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__AssetTagsInfoRequest.htm">AssetTagsInfoRequest</a></span>&gt;  AssetTagsInfoRequestPtr</p>
<p class="NDLRefMemberDescription">A <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">SmartPointer</a></span> for <span class="NDLSystemFont"><a href="../efd/efd__AssetTagsInfoRequest.htm">AssetTagsInfoRequest</a></span> instances. </p>

<a name="namespaceefd_1a08daa2c69b4c35b60a0446f919059f78"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__AssetLocatorResponse.htm">AssetLocatorResponse</a></span>&gt;  AssetLocatorResponsePtr</p>
<p class="NDLRefMemberDescription">A <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">SmartPointer</a></span> for the <span class="NDLSystemFont"><a href="../efd/efd__AssetLocatorResponse.htm">AssetLocatorResponse</a></span> class. </p>

<a name="namespaceefd_1ad865f5304e918fc547fb83f18c3966a8"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;const <span class="NDLSystemFont"><a href="../efd/efd__AssetLocatorResponse.htm">AssetLocatorResponse</a></span>&gt;  AssetLocatorResponseConstPtr</p>
<p class="NDLRefMemberDescription">A <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">SmartPointer</a></span> for a const <span class="NDLSystemFont"><a href="../efd/efd__AssetLocatorResponse.htm">AssetLocatorResponse</a></span> class. </p>

<a name="namespaceefd_1ac1f68a88781ed0b523419866613caf39"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__AssetSizeResponse.htm">AssetSizeResponse</a></span>&gt;  AssetSizeResponsePtr</p>
<p class="NDLRefMemberDescription">A <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">SmartPointer</a></span> for the <span class="NDLSystemFont"><a href="../efd/efd__AssetSizeResponse.htm">AssetSizeResponse</a></span> class. </p>

<a name="namespaceefd_1a5a3c600ff7beb79bed5805e6c5e3bb1c"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__vector.htm">efd::vector</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__BrowseInfoDescriptor.htm">BrowseInfoDescriptor</a></span>&gt;  AssetBrowseInfo</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1affce4f619f870d8084b7ece31e479664"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__AssetTagsInfoResponse.htm">AssetTagsInfoResponse</a></span>&gt;  AssetTagsInfoResponsePtr</p>
<p class="NDLRefMemberDescription">A <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">SmartPointer</a></span> for the <span class="NDLSystemFont"><a href="../efd/efd__AssetTagsInfoResponse.htm">AssetTagsInfoResponse</a></span> class. </p>

<a name="namespaceefd_1a29a89993ec5c84f9b5b62af086bbd6c4"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__AssetBrowseInfoResponse.htm">AssetBrowseInfoResponse</a></span>&gt;  AssetBrowseInfoResponsePtr</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1ad2a7a0a2af06de66080e8f7d6229afb1"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__FetchAssetDataResponse.htm">FetchAssetDataResponse</a></span>&gt;  FetchAssetDataResponsePtr</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a2ae630692c1e86e3b09509c688e3c4f6"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__AssetLocatorService.htm">AssetLocatorService</a></span>&gt;  AssetLocatorServicePtr</p>
<p class="NDLRefMemberDescription">A <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">SmartPointer</a></span> for the <span class="NDLSystemFont"><a href="../efd/efd__AssetLocatorService.htm">AssetLocatorService</a></span> class. </p>

<a name="namespaceefd_1a5bc6c0a487eb2010c058f9e5df56bd5e"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__vector.htm">efd::vector</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__Triple.htm">Triple</a></span>&gt;  TripleSet</p>
<p class="NDLRefMemberDescription">A collection of Triples forms a TripleSet. </p>

<a name="namespaceefd_1ae6cc60405cb07bed3dca326a508c1808"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__vector.htm">efd::vector</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__Triple.htm">Triple</a></span>&gt;::const_iterator  TripleSetIterator</p>
<p class="NDLRefMemberDescription">Must be able to iterate over the collection of Triples. </p>

<a name="namespaceefd_1a75c7e5f71a52eea79494959e20759060"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont">bool</span>(*  AssetQueryCompareFunc)(const Triple &, const Triple &)</p>
<p class="NDLRefMemberDescription">Custom compare function signature used for querying. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">queryWithCompare() </p></p>

<a name="namespaceefd_1a82ba615a1bc40e0e8a223820f76f1cc2"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__IAssetResponseData.htm">IAssetResponseData</a></span>&gt;  IAssetResponseDataPtr</p>
<p class="NDLRefMemberDescription">A <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">SmartPointer</a></span> for the <span class="NDLSystemFont"><a href="../efd/efd__IAssetResponseData.htm">IAssetResponseData</a></span> class. </p>

<a name="namespaceefd_1a11b3d968bc96d7f04115a0aad3893469"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  ClassID</p>
<p class="NDLRefMemberDescription">Typedef for a class or interface identifier. </p>

<a name="namespaceefd_1a4d387e9437f12720ac0afea08f3c8f11"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__ConfigManager.htm">ConfigManager</a></span>&gt;  ConfigManagerPtr</p>
<p class="NDLRefMemberDescription">A <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">SmartPointer</a></span> for the <span class="NDLSystemFont"><a href="../efd/efd__ConfigManager.htm">ConfigManager</a></span> class. </p>

<a name="namespaceefd_1ade994f7f3ab6dbb7c8a10beeab1bb5c4"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__ConfigSource.htm">ConfigSource</a></span>&gt;  ConfigSourcePtr</p>
<p class="NDLRefMemberDescription">Define a smart pointer (reference counting, self deleting pointer) for the <span class="NDLSystemFont"><a href="../efd/efd__ConfigSource.htm">ConfigSource</a></span> class. </p>

<a name="namespaceefd_1a9860db1029bce7488d83ef6876efb834"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__CommandLineSource.htm">CommandLineSource</a></span>&gt;  CommandLineSourcePtr</p>
<p class="NDLRefMemberDescription">Define a smart pointer (reference counting, self deleting pointer) for the <span class="NDLSystemFont"><a href="../efd/efd__CommandLineSource.htm">CommandLineSource</a></span> class. </p>

<a name="namespaceefd_1a55519b1d381e52e034f613de6cdd9a13"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__EnvVarSource.htm">EnvVarSource</a></span>&gt;  EnvVarSourcePtr</p>
<p class="NDLRefMemberDescription">Define a smart pointer (reference counting, self deleting pointer) for the <span class="NDLSystemFont"><a href="../efd/efd__EnvVarSource.htm">EnvVarSource</a></span> class. </p>

<a name="namespaceefd_1a647b2e8ac537c64f01bdc61b90aea092"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__RefCountedMemObj.htm">efd::RefCountedMemObj</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__set.htm">efd::set</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span>&gt;&gt;  ConnectionIDSet</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1ad96e077aff3bc077c9ce2d70d0c27e06"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__RefCountedMemObj.htm">ConnectionIDSet</a></span>&gt;  ConnectionIDSetPtr</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a45b95a6ebb67b6bb60030871a585144e"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__DataDrivenEnumBase.htm">DataDrivenEnumBase</a></span>&gt;  DataDrivenEnumPtr</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1ae3fb90f5e26aa69b31b24be562449780"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">DataStream</a></span>&gt;  DataStreamPtr</p>
<p class="NDLRefMemberDescription">Declare a smart pointer for the <span class="NDLSystemFont"><a href="../efd/efd__DataStream.htm">DataStream</a></span> class. </p>

<a name="namespaceefd_1ad22f68cd54e64184a8c3de754f95b501"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__IDDEHeaderGenerator.htm">IDDEHeaderGenerator</a></span>&gt;  IDDEHeaderGeneratorPtr</p>
<p class="NDLRefMemberDescription"><span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">SmartPointer</a></span> for the <span class="NDLSystemFont"><a href="../efd/efd__IDDEHeaderGenerator.htm">IDDEHeaderGenerator</a></span> class. </p>

<a name="namespaceefd_1a2037d7f329e4a781036cb2552c23ad48"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__DebugOutDestination.htm">DebugOutDestination</a></span>&gt;  DebugOutDestinationPtr</p>
<p class="NDLRefMemberDescription">A <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">SmartPointer</a></span> for the <span class="NDLSystemFont"><a href="../efd/efd__DebugOutDestination.htm">DebugOutDestination</a></span> class. </p>

<a name="namespaceefd_1a9fe972b8e2bb3185afe030814bc48280"></a>
<p class="NDLRefMemberFunction">typedef void*  ModuleHandle</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1ac4125a510209c0aad5b7ba40ba708e83"></a>
<p class="NDLRefMemberFunction">typedef void*  MethodHandle</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1ac122f0c2679d965abdab34ab7207bddb"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__EnumManager.htm">EnumManager</a></span>&gt;  EnumManagerPtr</p>
<p class="NDLRefMemberDescription"><span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">SmartPointer</a></span> typedef for the <span class="NDLSystemFont"><a href="../efd/efd__EnumManager.htm">EnumManager</a></span> class. </p>

<a name="namespaceefd_1a3db0c57b56ccd00caa51bd8f2da65cbc"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__FileDestination.htm">FileDestination</a></span>&gt;  FileDestinationPtr</p>
<p class="NDLRefMemberDescription">Define a smart pointer (reference counting, self deleting pointer) for the IFileDestination class. </p>

<a name="namespaceefd_1af9d709115dbce0b53f2dbc581e4fac79"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__GenericAssetFactory.htm">GenericAssetFactory</a></span>&gt;  GenericAssetFactoryPtr</p>
<p class="NDLRefMemberDescription">A <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">SmartPointer</a></span> for the <span class="NDLSystemFont"><a href="../efd/efd__GenericAssetFactory.htm">GenericAssetFactory</a></span> class. </p>

<a name="namespaceefd_1af5943c10aac4af055fb6effed86896d8"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__GenericAssetLoadResponse.htm">GenericAssetLoadResponse</a></span>&gt;  GenericAssetLoadResponsePtr</p>
<p class="NDLRefMemberDescription">A <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">SmartPointer</a></span> for the <span class="NDLSystemFont"><a href="../efd/efd__GenericAssetLoadResponse.htm">GenericAssetLoadResponse</a></span> class. </p>

<a name="namespaceefd_1a1b6261a63501c421a3d0e49113accd99"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a02da74c5f95666d41c684efde9efcd88">efd::SInt8</a></span>(*  AssertHandler)(const char *pszFile, efd::SInt32 line, const char *pszFunction, const char *pszPred, const char *pszMsg, const char *pszStack, efd::Bool isAVerify)</p>
<p class="NDLRefMemberDescription">Function prototype used for assert handlers. </p>

<a name="namespaceefd_1a15c4b369d41853986066df1e8c5274ae"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__IAssetFactory.htm">IAssetFactory</a></span>&gt;  IAssetFactoryPtr</p>
<p class="NDLRefMemberDescription">Type for a smart pointer to the <span class="NDLSystemFont"><a href="../efd/efd__IAssetFactory.htm">IAssetFactory</a></span> class. </p>

<a name="namespaceefd_1a7f9a603f39f9c031dcf247465700e926"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__IAssetImporter.htm">IAssetImporter</a></span>&gt;  AssetImporterPtr</p>
<p class="NDLRefMemberDescription">A <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">SmartPointer</a></span> for the <span class="NDLSystemFont"><a href="../efd/efd__IAssetImporter.htm">IAssetImporter</a></span> class. </p>

<a name="namespaceefd_1ac58da61429b2eeac81dce6d91006d534"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__IAssetLocatorService.htm">IAssetLocatorService</a></span>&gt;  IAssetLocatorServicePtr</p>
<p class="NDLRefMemberDescription">A <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">SmartPointer</a></span> for the <span class="NDLSystemFont"><a href="../efd/efd__IAssetLocatorService.htm">IAssetLocatorService</a></span> class. </p>

<a name="namespaceefd_1aa8bf0c406ca6a5249bd078733119af2b"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__IAssetServer.htm">IAssetServer</a></span>&gt;  IAssetServerPtr</p>
<p class="NDLRefMemberDescription">A <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">SmartPointer</a></span> for the <span class="NDLSystemFont"><a href="../efd/efd__IAssetServer.htm">IAssetServer</a></span> class. </p>

<a name="namespaceefd_1a494c3a8539d89620811bd9a9fa6f6e9e"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__IAssetTagger.htm">IAssetTagger</a></span>&gt;  AssetTaggerPtr</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a7b98ed1676bae8c053b99312b629d3ba"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__IBase.htm">IBase</a></span>&gt;  IBasePtr</p>
<p class="NDLRefMemberDescription">Declaration of a smart pointer to an <span class="NDLSystemFont"><a href="../efd/efd__IBase.htm">IBase</a></span> instance. </p>

<a name="namespaceefd_1a7f657cbdbccf7588a699fe5f60fb4bea"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__IConfigManager.htm">IConfigManager</a></span>&gt;  IConfigManagerPtr</p>
<p class="NDLRefMemberDescription">A <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">SmartPointer</a></span> for the <span class="NDLSystemFont"><a href="../efd/efd__IConfigManager.htm">IConfigManager</a></span> class. </p>

<a name="namespaceefd_1a83f58f66336c9c104cd1319476a0a01b"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__ISection.htm">ISection</a></span>&gt;  ISectionPtr</p>
<p class="NDLRefMemberDescription">Define smart pointer for the <span class="NDLSystemFont"><a href="../efd/efd__ISection.htm">ISection</a></span> class. </p>

<a name="namespaceefd_1acf95c29fa745ad6ff861e16f92a2ba9b"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__ISectionEntry.htm">ISectionEntry</a></span>&gt;  ISectionEntryPtr</p>
<p class="NDLRefMemberDescription">Define smart pointer for the <span class="NDLSystemFont"><a href="../efd/efd__ISectionEntry.htm">ISectionEntry</a></span> class. </p>

<a name="namespaceefd_1a5e55008d602c7c0cb0896425fb483dee"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__map.htm">efd::map</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>, <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">ISectionPtr</a></span>&gt;::const_iterator  SectionIter</p>
<p class="NDLRefMemberDescription">Iterator for the section <span class="NDLSystemFont"><a href="../efd/efd__map.htm">map</a></span>. </p>

<a name="namespaceefd_1a9f533a6ed1fe1b795f939464b9213eab"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__map.htm">efd::map</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>, <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">ISectionEntryPtr</a></span>&gt;::const_iterator  ValueIter</p>
<p class="NDLRefMemberDescription">Iterator for the value <span class="NDLSystemFont"><a href="../efd/efd__map.htm">map</a></span>. </p>

<a name="namespaceefd_1a77c7cd2ce2221a85e224a4db4228d468"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__IConfigSource.htm">IConfigSource</a></span>&gt;  IConfigSourcePtr</p>
<p class="NDLRefMemberDescription">Define smart pointer for the <span class="NDLSystemFont"><a href="../efd/efd__IConfigSource.htm">IConfigSource</a></span> class. </p>

<a name="namespaceefd_1a763b6299c936289881959ac0e4f6b009"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__ILogDestination.htm">ILogDestination</a></span>&gt;  ILogDestinationPtr</p>
<p class="NDLRefMemberDescription">A <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">SmartPointer</a></span> for the <span class="NDLSystemFont"><a href="../efd/efd__ILogDestination.htm">ILogDestination</a></span> class. </p>

<a name="namespaceefd_1a21bd5923572f0609cbe4525aa79df335"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__ILogger.htm">ILogger</a></span>&gt;  ILoggerPtr</p>
<p class="NDLRefMemberDescription">Define a smart pointer for the <span class="NDLSystemFont"><a href="../efd/efd__ILogger.htm">ILogger</a></span> class. </p>

<a name="namespaceefd_1aee9e5e201f1ae65ba710f08608a9d8d4"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__IMemLogHandler.htm">IMemLogHandler</a></span>&gt;  IMemLogHandlerPtr</p>
<p class="NDLRefMemberDescription">A smart pointer (reference counting, self deleting pointer) for the <span class="NDLSystemFont"><a href="../efd/efd__ILogDestination.htm">ILogDestination</a></span> class. </p>

<a name="namespaceefd_1aa37ac1f1cb22aea22a46dbe0737ec272"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__IMessage.htm">IMessage</a></span>&gt;  IMessagePtr</p>
<p class="NDLRefMemberDescription">A smart pointer (reference counting, self deleting pointers) for <span class="NDLSystemFont"><a href="../efd/efd__IMessage.htm">IMessage</a></span> instances. </p>

<a name="namespaceefd_1aba4eb455682d4b6a579a2bc02394af94"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;const <span class="NDLSystemFont"><a href="../efd/efd__IMessage.htm">IMessage</a></span>&gt;  IMessageConstPtr</p>
<p class="NDLRefMemberDescription">A smart pointer (reference counting, self deleting pointer) for const <span class="NDLSystemFont"><a href="../efd/efd__IMessage.htm">IMessage</a></span> instances. </p>

<a name="namespaceefd_1ae088d13ca714e3cbfe798a7b880bc8d3"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__ISystemService.htm">ISystemService</a></span>&gt;  ISystemServicePtr</p>
<p class="NDLRefMemberDescription">A <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">SmartPointer</a></span> for the <span class="NDLSystemFont"><a href="../efd/efd__ISystemService.htm">ISystemService</a></span> class. </p>

<a name="namespaceefd_1ab9f6396f5dc9ebe478ba8833a6f18bd5"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__RefCountedMemObj.htm">efd::RefCountedMemObj</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__set.htm">efd::set</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>*&gt;&gt;  INetCallbackSet</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a7b5914ba88e7151a70b735838e09a80f"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__RefCountedMemObj.htm">INetCallbackSet</a></span>&gt;  INetCallbackSetPtr</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a37b46f28571a1127ee83595dad907442"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__INetService.htm">INetService</a></span>&gt;  INetServicePtr</p>
<p class="NDLRefMemberDescription">A <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">SmartPointer</a></span> for the <span class="NDLSystemFont"><a href="../efd/efd__INetService.htm">INetService</a></span> interface. </p>

<a name="namespaceefd_1a495b48ff7aa875c000ab3b855b2d3fe4"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__IStreamable.htm">IStreamable</a></span>&gt;  IStreamablePtr</p>
<p class="NDLRefMemberDescription">A smart pointer (reference counting, self deleting pointer) for the <span class="NDLSystemFont"><a href="../efd/efd__IStreamable.htm">IStreamable</a></span> class. </p>

<a name="namespaceefd_1a2b67d588af25ede452e82154b98093e4"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__Logger.htm">Logger</a></span>&gt;  LoggerPtr</p>
<p class="NDLRefMemberDescription">A <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">SmartPointer</a></span> for the <span class="NDLSystemFont"><a href="../efd/efd__Logger.htm">Logger</a></span> class. </p>

<a name="namespaceefd_1a1b49984598c5c87cbc1f13809df481b6"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__GenericFactory.htm">GenericFactory</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__IMessage.htm">IMessage</a></span>&gt;&gt;  MessageFactory</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a364fac57a5d307d121e4734d00e8da7f"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__MessageService.htm">MessageService</a></span>&gt;  MessageServicePtr</p>
<p class="NDLRefMemberDescription">A <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">SmartPointer</a></span> for the <span class="NDLSystemFont"><a href="../efd/efd__MessageService.htm">MessageService</a></span> class. </p>

<a name="namespaceefd_1a3f46b06120f84d47e33a25e39034ed8e"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">UInt32</a></span>  QualityOfService</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a01d3a82b5a35e46586155f472ed62365"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__NetMessage.htm">NetMessage</a></span>&gt;  NetMessagePtr</p>
<p class="NDLRefMemberDescription"><span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">SmartPointer</a></span> for the <span class="NDLSystemFont"><a href="../efd/efd__NetMessage.htm">NetMessage</a></span> class. </p>

<a name="namespaceefd_1aeee113425bce7c8a2e1b3c939bd44308"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__EnvelopeMessage.htm">EnvelopeMessage</a></span>&gt;  EnvelopeMessagePtr</p>
<p class="NDLRefMemberDescription">A smart pointer (reference counting, self deleting pointer) for the <span class="NDLSystemFont"><a href="../efd/efd__EnvelopeMessage.htm">EnvelopeMessage</a></span> class. </p>

<a name="namespaceefd_1ab73affbb0906ba9cad8db9756868fa8b"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__RequestNetIDMessage.htm">RequestNetIDMessage</a></span>&gt;  RequestNetIDMessagePtr</p>
<p class="NDLRefMemberDescription"><span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">SmartPointer</a></span> for the <span class="NDLSystemFont"><a href="../efd/efd__RequestNetIDMessage.htm">RequestNetIDMessage</a></span> class. </p>

<a name="namespaceefd_1aed3fb726c56d098be19520c161f1dfae"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__AssignNetIDMessage.htm">AssignNetIDMessage</a></span>&gt;  AssignNetIDMessagePtr</p>
<p class="NDLRefMemberDescription">A smart pointer (reference counting, self deleting pointer) for the <span class="NDLSystemFont"><a href="../efd/efd__AssignNetIDMessage.htm">AssignNetIDMessage</a></span> class. </p>

<a name="namespaceefd_1a2eafe7bd718f9ff1d3ee2efb1aba5731"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__AnnounceNetIDMessage.htm">AnnounceNetIDMessage</a></span>&gt;  AnnounceNetIDMessagePtr</p>
<p class="NDLRefMemberDescription">A smart pointer (reference counting, self deleting pointer) for the <span class="NDLSystemFont"><a href="../efd/efd__AssignNetIDMessage.htm">AssignNetIDMessage</a></span> class. </p>

<a name="namespaceefd_1aae5c65b6b9f074f151f826b63a168145"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__NetMetricsDestination.htm">NetMetricsDestination</a></span>&gt;  NetMetricsDestinationPtr</p>
<p class="NDLRefMemberDescription">Define a smart pointer (reference counting, self deleting pointer) for the <span class="NDLSystemFont"><a href="../efd/efd__NetMetricsDestination.htm">NetMetricsDestination</a></span> class. </p>

<a name="namespaceefd_1a56fe86c360f8b0e0be7d2ddbde947746"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__ParameterList.htm">ParameterList</a></span>&gt;  ParameterListPtr</p>
<p class="NDLRefMemberDescription">A <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">SmartPointer</a></span> for the <span class="NDLSystemFont"><a href="../efd/efd__ParameterList.htm">ParameterList</a></span> class. </p>

<a name="namespaceefd_1a9f8a77613fc0dde3674b629ab71f168d"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__ParameterListMessage.htm">ParameterListMessage</a></span>&gt;  ParameterListMessagePtr</p>
<p class="NDLRefMemberDescription">Define a smart pointer for the <span class="NDLSystemFont"><a href="../efd/efd__StreamMessage.htm">StreamMessage</a></span> class. </p>

<a name="namespaceefd_1a74df5c804a29567e3328720e7d0475a4"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__PrintDestination.htm">PrintDestination</a></span>&gt;  PrintDestinationPtr</p>
<p class="NDLRefMemberDescription">A smart pointer (reference counting, self deleting pointer) for the <span class="NDLSystemFont"><a href="../efd/efd__PrintDestination.htm">PrintDestination</a></span> class. </p>

<a name="namespaceefd_1a0cd7da6187a4b2de878b9775da2485ce"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../../ee_goto.htm#Reference/efd/efd__PS3PlatformService_PS3.htm">PS3PlatformService</a></span>&gt;  PS3PlatformServicePtr</p>
<p class="NDLRefMemberDetailedDescription">A smart pointer (reference counting, self deleting pointer) for the PS3PlatformServicePtr class. </p>

<a name="namespaceefd_1afde2f061d99ff454e1d20f833ee43958"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__ReloadManager.htm">ReloadManager</a></span>&gt;  ReloadManagerPtr</p>
<p class="NDLRefMemberDescription">A <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">SmartPointer</a></span> for the <span class="NDLSystemFont"><a href="../efd/efd__ReloadManager.htm">ReloadManager</a></span> class. </p>

<a name="namespaceefd_1a074e560b11902f5a14b897e881444c59"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__ServiceDiscoveryRequest.htm">ServiceDiscoveryRequest</a></span>&gt;  ServiceDiscoveryRequestPtr</p>
<p class="NDLRefMemberDescription">A <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">SmartPointer</a></span> for the <span class="NDLSystemFont"><a href="../efd/efd__ServiceDiscoveryRequest.htm">ServiceDiscoveryRequest</a></span> class. </p>

<a name="namespaceefd_1ac5e6fd2540c6f207e2820f392403e0c2"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__ServiceDiscoveryResponse.htm">ServiceDiscoveryResponse</a></span>&gt;  ServiceDiscoveryResponsePtr</p>
<p class="NDLRefMemberDescription">A <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">SmartPointer</a></span> for the <span class="NDLSystemFont"><a href="../efd/efd__ServiceDiscoveryResponse.htm">ServiceDiscoveryResponse</a></span> class. </p>

<a name="namespaceefd_1a89653885d84b13663d23022309d325f9"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__ServiceManager.htm">ServiceManager</a></span>&gt;  ServiceManagerPtr</p>
<p class="NDLRefMemberDescription">A smart pointer for the <span class="NDLSystemFont"><a href="../efd/efd__ServiceManager.htm">ServiceManager</a></span> class. </p>

<a name="namespaceefd_1ab856543949416c7f000d295b4659f81d"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmallObjectAllocator.htm">SmallObjectAllocator</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__ExternalMemAllocator.htm">ExternalMemAllocator</a></span>&gt;  StandardAllocator</p>
<p class="NDLRefMemberDescription">Define a general allocator for use with most platforms. </p>

<a name="namespaceefd_1ae0512c86b2aade46f2f721a837ec712b"></a>
<p class="NDLRefMemberFunction">typedef efd::basic_string&lt;char, efd::char_traits&lt;char&gt;, <span class="NDLSystemFont"><a href="../efd/efd__CustomAllocator.htm">efd::CustomAllocator</a></span>&lt;char&gt;&gt;  string</p>
<p class="NDLRefMemberDescription">An STL basic_string that uses our allocator by default. </p>

<a name="namespaceefd_1a9ee954ff3ce0afa520ebaa47fa7515f3"></a>
<p class="NDLRefMemberFunction">typedef efd::basic_string&lt;wchar_t, efd::char_traits&lt;wchar_t&gt;, <span class="NDLSystemFont"><a href="../efd/efd__CustomAllocator.htm">efd::CustomAllocator</a></span>&lt;wchar_t&gt;&gt;  wstring</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a18ae59af9a0d65d092cd1bbca141dc1b"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__StreamInfo.htm">StreamInfo</a></span>&gt;  StreamInfoPtr</p>
<p class="NDLRefMemberDescription">A smart pointer for the <span class="NDLSystemFont"><a href="../efd/efd__StreamInfo.htm">StreamInfo</a></span> class. </p>

<a name="namespaceefd_1afc86b73864295515960c4c46b3993828"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__StreamMessage.htm">StreamMessage</a></span>&gt;  StreamMessagePtr</p>
<p class="NDLRefMemberDescription">Define a smart pointer for the <span class="NDLSystemFont"><a href="../efd/efd__StreamMessage.htm">StreamMessage</a></span> class. </p>

<a name="namespaceefd_1a1e2c30763e54ca4efa8002f0b86e8d56"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont">efd::CompileTimeAssertTester</span>&lt;sizeof(efd::COMPILE_TIME_ASSERTION_FAILURE&lt;(<span class="NDLSystemFont">bool</span>)(sizeof(wchar_t)==2)&gt;)&gt;  compile_time_assert_type__LINE__</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a8a230daba237d04a03bd183befd54fdb"></a>
<p class="NDLRefMemberFunction">typedef unsigned int  utf32char_t</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1afabff4ad05b0fc1953aff5391e621307"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__Win32PlatformService.htm">Win32PlatformService</a></span>&gt;  Win32PlatformServicePtr</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1ac5474522314e9e6ffe62cfe037ef73e0"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__XMLMemLogHandler.htm">XMLMemLogHandler</a></span>&gt;  XMLMemLogHandlerPtr</p>
<p class="NDLRefMemberDescription">A smart pointer (reference counting, self deleting pointer) for the <span class="NDLSystemFont"><a href="../efd/efd__ILogDestination.htm">ILogDestination</a></span> class. </p>

<a name="namespaceefd_1a31df5a9d6c1fe214a0f0af3bb0d883d1"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efdLogService/efd__LogService.htm">LogService</a></span>&gt;  LogServicePtr</p>
<p class="NDLRefMemberDescription">A <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">SmartPointer</a></span> for the <span class="NDLSystemFont"><a href="../efdLogService/efd__LogService.htm">LogService</a></span> class. </p>

<a name="namespaceefd_1a7ec824e7cf7ad173b5daf63e701f790e"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efdLogService/efd__LogServiceRequest.htm">LogServiceRequest</a></span>&gt;  LogServiceRequestPtr</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a6fe547863a59db1162b9f3609e61d9ca"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__MessageWrapper.htm">GetLogLevelRequest</a></span>&gt;  GetLogLevelRequestPtr</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1aea9bdd5740bdcab0f8411d3e220d4bbf"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__MessageWrapper.htm">GetMsgLogLevelRequest</a></span>&gt;  GetMsgLogLevelRequestPtr</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a0a73f7bacc1e1ea43c6a7440c635b2df"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__MessageWrapper.htm">SetLogLevelRequest</a></span>&gt;  SetLogLevelRequestPtr</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a960bd93a265dd25ccb9655310e965a6e"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__MessageWrapper.htm">StartLogStreamRequest</a></span>&gt;  StartLogStreamRequestPtr</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a714981c8d4671404806e74192bf8becb"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__MessageWrapper.htm">SetMsgLogLevelRequest</a></span>&gt;  SetMsgLogLevelRequestPtr</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1adb7d55caae7a545ba8aa87944ea32ab9"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efdLogService/efd__LogServiceResponse.htm">LogServiceResponse</a></span>&gt;  LogServiceResponsePtr</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a974d64b4f885f6431e3e73f50156040b"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efdLogService/efd__LogEntriesMessage.htm">LogEntriesMessage</a></span>&gt;  LogEntriesMessagePtr</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1add7c000f6c7d3864f49445c20d3c70bd"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__vector.htm">efd::vector</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>&gt;  LogMemBuffer</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a62f2d08f29011f0bfcab2152eb0ca06a"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efdLogService/efd__NetDestination.htm">NetDestination</a></span>&gt;  NetDestinationPtr</p>
<p class="NDLRefMemberDescription">A smart pointer (reference counting, self deleting pointer) for the <span class="NDLSystemFont"><a href="../efdLogService/efd__NetDestination.htm">NetDestination</a></span> class. </p>

<a name="namespaceefd_1a9e68f03bf57ab4a3490da68d2e565c99"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efdNetwork/efd__BridgeService.htm">BridgeService</a></span>&gt;  BridgeServicePtr</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1aae6fd49199c245d43db9c9fa0f52ef6a"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efdNetwork/efd__ChannelManagerConfig.htm">ChannelManagerConfig</a></span>&gt;  ChannelManagerConfigPtr</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1afd6e06af87424925721aa74f9a502fd4"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__RefCountedMemObj.htm">efd::RefCountedMemObj</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__list.htm">efd::list</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">ChannelManagerConfigPtr</a></span>&gt;&gt;  ChannelManagerConfigList</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a9fef9ea9fd7e653cde365ce54d906f4d"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efdNetwork/efd__ChannelManagerService.htm">ChannelManagerService</a></span>&gt;  ChannelManagerServicePtr</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1ab33740762a9b1513e5803952846d4e63"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efdNetwork/efd__ConnectionTCP.htm">ConnectionTCP</a></span>&gt;  ConnectionTCPPtr</p>
<p class="NDLRefMemberDescription">A smart pointer (reference counting, self deleting pointer) for the <span class="NDLSystemFont"><a href="../efdNetwork/efd__ConnectionTCP.htm">ConnectionTCP</a></span> class. </p>

<a name="namespaceefd_1aa2b158e41a53713d91219736338f9360"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efdNetwork/efd__IConnection.htm">IConnection</a></span>&gt;  IConnectionPtr</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1ae373f2c8ef7377552290becb3ccb2cf9"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__GenericFactory.htm">GenericFactory</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efdNetwork/efd__INetLib.htm">INetLib</a></span>&gt;, <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>&gt;  NetLibFactory</p>
<p class="NDLRefMemberDescription"><span class="NDLSystemFont"><a href="../efd/efd__GenericFactory.htm">GenericFactory</a></span> used to register and create <span class="NDLSystemFont"><a href="../efdNetwork/efd__INetLib.htm">INetLib</a></span> instances. </p>

<a name="namespaceefd_1a5b0b7d6169800e017757b324b8c63c43"></a>
<p class="NDLRefMemberFunction">typedef void(*  RegisterNetLibType)()</p>
<p class="NDLRefMemberDescription">Typedef for the factory method loaded from efdNetLib*.dll. </p>

<a name="namespaceefd_1a1477ff55f2af9a2a4e914e07314044fe"></a>
<p class="NDLRefMemberFunction">typedef void(*  ShutdownNetLibType)()</p>
<p class="NDLRefMemberDescription">Typedef for the shutdown method loaded from efdNetLib*.dll. </p>

<a name="namespaceefd_1aa376655c086674c83450cbc628fa872d"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efdNetwork/efd__INetLib.htm">INetLib</a></span>&gt;  INetLibPtr</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1aa0234785f725edd1a962c1ca1e2b5916"></a>
<p class="NDLRefMemberFunction">typedef efd::stlport::pair&lt;<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>, <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a3f46b06120f84d47e33a25e39034ed8e">QualityOfService</a></span>&gt;  NetIDQosPair</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a63d2fdafb092c72ed59ba81c20196f7c"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__map.htm">efd::map</a></span>&lt;<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aa0234785f725edd1a962c1ca1e2b5916">NetIDQosPair</a></span>, <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">efd::ConnectionID</a></span>&gt;  NetIDQosPairToConnectionIDMap</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1ad945feb2b4727ab16d122cb83bb31e14"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efdNetwork/efd__INetTransport.htm">INetTransport</a></span>&gt;  INetTransportPtr</p>
<p class="NDLRefMemberDescription">A <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">SmartPointer</a></span> for the <span class="NDLSystemFont"><a href="../efdNetwork/efd__INetTransport.htm">INetTransport</a></span> interface. </p>

<a name="namespaceefd_1ae6334faada53e740912dbeee9a85f8b0"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efdNetwork/efd__NameResolutionMessage.htm">NameResolutionMessage</a></span>&gt;  NameResolutionMessagePtr</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a18d9550384f4a34102beb0f5fae8a11b"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__set.htm">efd::set</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">NameResolutionMessagePtr</a></span>, <span class="NDLSystemFont"><a href="../efdNetwork/efd__NameResolutionMessagePtrLess.htm">NameResolutionMessagePtrLess</a></span>&gt;  NameResolutionMessageSet</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a09f640ea0f8abe8699e384a4a45153a3"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__RefCountedMemObj.htm">efd::RefCountedMemObj</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__set.htm">NameResolutionMessageSet</a></span>&gt;&gt;  NameResolutionMessageSetPtr</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1ad790723e596c5f6c030d6aecec0e2500"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__list.htm">efd::list</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">NameResolutionMessagePtr</a></span>&gt;  NameResolutionMessageList</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a1c201ee36990a240b6a765a449ce1f10"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__RefCountedMemObj.htm">efd::RefCountedMemObj</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__list.htm">NameResolutionMessageList</a></span>&gt;&gt;  NameResolutionMessageListPtr</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a0ec3ff47cac7d0798918b0b310037354"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efdNetwork/efd__NameResolutionService.htm">NameResolutionService</a></span>&gt;  NameResolutionServicePtr</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a956a80126ae29237f5a4db4e562cd359"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efdNetwork/efd__NetErrorMessage.htm">NetErrorMessage</a></span>&gt;  NetErrorPtr</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a12de2e81de95ed23da2b3ca000e6bced"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efdNetwork/efd__NetLib.htm">NetLib</a></span>&gt;  NetLibPtr</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1aa5d45ea9381a76618ae2270faaf687ef"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efdNetwork/efd__NetListener.htm">NetListener</a></span>&gt;  NetListenerPtr</p>
<p class="NDLRefMemberDescription">A smart pointer (reference counting, self deleting pointer) for the <span class="NDLSystemFont"><a href="../efdNetwork/efd__NetListener.htm">NetListener</a></span> class. </p>

<a name="namespaceefd_1aded2e9363257122bf8dac73d2e639c5d"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efdNetwork/efd__NetService.htm">NetService</a></span>&gt;  NetServicePtr</p>
<p class="NDLRefMemberDescription">A <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">SmartPointer</a></span> for the <span class="NDLSystemFont"><a href="../efdNetwork/efd__NetService.htm">NetService</a></span> class. </p>

<a name="namespaceefd_1acb3482e22bf0cc99d2e1839af301a657"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efdNetwork/efd__NetTransportTCP.htm">NetTransportTCP</a></span>&gt;  NetTransportTCPPtr</p>
<p class="NDLRefMemberDescription">A smart pointer (reference counting, self deleting pointer) for the <span class="NDLSystemFont"><a href="../efdNetwork/efd__NetTransportTCP.htm">NetTransportTCP</a></span> class. </p>

<a name="namespaceefd_1aabc0f89a49ef1c9b27f181820658cf87"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efdNetwork/efd__NetworkStatus.htm">NetworkStatus</a></span>&gt;  NetworkStatusPtr</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a16bd8b4a1960946b90057e5023be46bb"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efdNetwork/efd__Socket.htm">Socket</a></span>&gt;  SocketPtr</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1af573fd22317ec166da6124d0baf287e6"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efdNetwork/efd__TCPSocket.htm">TCPSocket</a></span>&gt;  TCPSocketPtr</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1af602471fe454cb4255bf8ac493d97855"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">INetTransportPtr</a></span>(  TransportFactoryMethod)(MessageFactory *pMessageFactory, QualityOfService qualityOfService)</p>
<p class="NDLRefMemberDescription">Typedef for the signature the class method must have. </p>

<a name="namespaceefd_1ab81c407c5e1a0d5e501af675a42fcd62"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efdNetLibEnet/efd__ConnectionEnet.htm">ConnectionEnet</a></span>&gt;  ConnectionEnetPtr</p>
<p class="NDLRefMemberDescription">A smart pointer (reference counting, self deleting pointer) for the <span class="NDLSystemFont"><a href="../efdNetLibEnet/efd__ConnectionEnet.htm">ConnectionEnet</a></span> class. </p>

<a name="namespaceefd_1a5b1b27ae42366bf140659a1c1c7faac0"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efdNetLibEnet/efd__NetLibEnet.htm">NetLibEnet</a></span>&gt;  NetLibEnetPtr</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a0cb09a067affec0cd74fc927f996629b"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../efdNetLibEnet/efd__NetTransportEnet.htm">NetTransportEnet</a></span>&gt;  NetTransportEnetPtr</p>
<p class="NDLRefMemberDescription">A smart pointer (reference counting, self deleting pointer) for the NetTransportUSB class. </p>

<a name="namespaceefd_1afedc413e82d5d8b060a26fa39881626c"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../../ee_goto.htm#Reference/efdNetLibPS3UDPP2P/efd__ConnectionPS3UDPP2P_PS3.htm">ConnectionPS3UDPP2P</a></span>&gt;  ConnectionPS3UDPP2PPtr</p>
<p class="NDLRefMemberDescription">A smart pointer for the <span class="NDLSystemFont"><a href="../../ee_goto.htm#Reference/efdNetLibPS3UDPP2P/efd__ConnectionPS3UDPP2P_PS3.htm">ConnectionPS3UDPP2P</a></span> class. </p>

<a name="namespaceefd_1a112eceb003adf2a4a43244b3e1e44d50"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__map.htm">efd::map</a></span>&lt;SceNpMatching2RoomMemberId, <span class="NDLSystemFont"><a href="../../ee_goto.htm#Reference/efdNetLibPS3UDPP2P/efd__PeerConnectionInfo_PS3.htm">PeerConnectionInfo</a></span>&gt;  MemberInfoMap</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1aefbfd845c3cec96d0b9493fabee93458"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../../ee_goto.htm#Reference/efdNetLibPS3UDPP2P/efd__MatchmakingService_PS3_PS3.htm">MatchmakingService_PS3</a></span>&gt;  MatchmakingService_PS3Ptr</p>
<p class="NDLRefMemberDescription">A <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">SmartPointer</a></span> for the <span class="NDLSystemFont"><a href="../../ee_goto.htm#Reference/efdNetLibPS3UDPP2P/efd__MatchmakingService_PS3_PS3.htm">MatchmakingService_PS3</a></span> class. </p>

<a name="namespaceefd_1ab371c6d28c88549828db1e4886766e41"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../../ee_goto.htm#Reference/efdNetLibPS3UDPP2P/efd__NetLibPS3UDPP2P_PS3.htm">NetLibPS3UDPP2P</a></span>&gt;  NetLibPS3UDPP2PPtr</p>
<p class="NDLRefMemberDescription">A <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">SmartPointer</a></span> for the <span class="NDLSystemFont"><a href="../../ee_goto.htm#Reference/efdNetLibPS3UDPP2P/efd__NetLibPS3UDPP2P_PS3.htm">NetLibPS3UDPP2P</a></span> class. </p>

<a name="namespaceefd_1ac90cf0813460f8dcccf8cb176fad26c3"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../../ee_goto.htm#Reference/efdNetLibPS3UDPP2P/efd__NetTransportPS3UDPP2P_PS3.htm">NetTransportPS3UDPP2P</a></span>&gt;  NetTransportPS3UDPP2PPtr</p>
<p class="NDLRefMemberDescription">A smart pointer (reference counting, self deleting pointer) for the NetTransportUSB class. </p>

<a name="namespaceefd_1a4c883ff21f1caa6f14c1deb73e5376fc"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../../ee_goto.htm#Reference/efdNetLibPS3UDPP2P/efd__UDPP2PSocket_PS3.htm">UDPP2PSocket</a></span>&gt;  UDPP2PSocketPtr</p>
<p class="NDLRefMemberDescription">A <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">SmartPointer</a></span> for the <span class="NDLSystemFont"><a href="../../ee_goto.htm#Reference/efdNetLibPS3UDPP2P/efd__UDPP2PSocket_PS3.htm">UDPP2PSocket</a></span> class. </p>

<a name="namespaceefd_1a963707f229d455ae5de523ae76858f18"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__map.htm">map</a></span>&lt;XRNM_HANDLE, <span class="NDLSystemFont"><a href="../../ee_goto.htm#Reference/efdNetLibXbox360XRNM/efd__LinkInfo_Xenon.htm">LinkInfo</a></span>&gt;  LinkInfoMap</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1abf3ae6b7083ff86108b06d28e5eccd24"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../../ee_goto.htm#Reference/efdNetLibXbox360XRNM/efd__NetLibXRNM_Xenon.htm">NetLibXRNM</a></span>&gt;  NetLibXRNMPtr</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a2f614cad269ad74c525579bdc1aa9759"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="../../ee_goto.htm#Reference/efdNetLibXbox360XRNM/efd__NetTransportXRNM_Xenon.htm">NetTransportXRNM</a></span>&gt;  NetTransportXRNMPtr</p>
<p class="NDLRefMemberDescription">A smart pointer (reference counting, self deleting pointer) for the <span class="NDLSystemFont"><a href="../../ee_goto.htm#Reference/efdNetLibXbox360XRNM/efd__NetTransportXRNM_Xenon.htm">NetTransportXRNM</a></span> class. </p>
<a name="private_attributes"></a>
<p class="NDLRefHead1">Private Attributes</p>
<a name="namespaceefd_1a2309799229c6568d5d3b8d1921d74122"></a>
<p class=NDLRefHead2>efd::Endianness</p>


<p class="NDLRefMemberDescription">List of supported endian types. </p>


<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">Endian_Big</span></td>
    <td>Big <span class="NDLSystemFont"><a href="../efd/efd__Endian.htm">Endian</a></span> (non-intel architecture, typically). </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">Endian_Little</span></td>
    <td>Little <span class="NDLSystemFont"><a href="../efd/efd__Endian.htm">Endian</a></span> (Intel machines). </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">Endian_NetworkOrder</span></td>
    <td>Network byte order is the same as Little <span class="NDLSystemFont"><a href="../efd/efd__Endian.htm">Endian</a></span>. </td>
</tr>

  </tbody>
</table>
</div>

<a name="namespaceefd_1a850e34eba4a04531cf5b4c8eadf9f3d0"></a>
<p class=NDLRefHead2>efd::NodeDescription</p>


<p class="NDLRefMemberDescription">Class to represent the content of an Resource Description Framework (RDF) triple. </p>


<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">NodeDescUri</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">NodeDescBlank</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">NodeDescLiteral</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">NodeDescNone</span></td>
    <td>&nbsp;</td>
</tr>

  </tbody>
</table>
</div>

<a name="namespaceefd_1aea39ed942feecdbf7cffdb0d74abdf4d"></a>
<p class=NDLRefHead2>efd::GraphSaveResult</p>


<p class="NDLRefMemberDescription">Enum value used to indicate the results of persisting a metadata file. </p>


<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">GRAPH_SAVE_FAIL</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">GRAPH_SAVE_SUCCESS</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">GRAPH_SAVE_UNCHANGED</span></td>
    <td>&nbsp;</td>
</tr>

  </tbody>
</table>
</div>

<a name="namespaceefd_1a96a7a9f084f0f3029a23435672da3a45"></a>
<p class=NDLRefHead2>efd::AWebTagType</p>


<p class="NDLRefMemberDescription">Tags have a type and a value. </p>


<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">AWEB_NONE_TAG_TYPE</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">AWEB_STANDARD_TAG_TYPE</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">AWEB_LABEL_TAG_TYPE</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">AWEB_CLASSIFICATION_TAG_TYPE</span></td>
    <td>&nbsp;</td>
</tr>

  </tbody>
</table>
</div>

<a name="namespaceefd_1a1e4441a51669c445e5936ac5bd597b48"></a>
<p class=NDLRefHead2>anonymous enum</p>


<p class="NDLRefMemberDescription">Maximum size allocation allowed to be performed by STL, in bytes. </p>


<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  

  </tbody>
</table>
</div>

<a name="namespaceefd_1aa046c1e8ad7deee312ed0f7dc2222bea"></a>
<p class=NDLRefHead2>efd::EnumType</p>


<p class="NDLRefMemberDescription">Enumeration Type. </p>

<p class="NDLRefMemberDetailedDescription">Normal means sequential integer values. Bitwise means sequential powers of two such that each value has only one bit <span class="NDLSystemFont"><a href="../efd/efd__set.htm">set</a></span>. </p>

<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">et_Invalid</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">et_Normal</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">et_Bitwise</span></td>
    <td>&nbsp;</td>
</tr>

  </tbody>
</table>
</div>

<a name="namespaceefd_1abd1722e6416223f55fb106ab3c6cf2fa"></a>
<p class=NDLRefHead2>efd::_Borrow</p>


<p class="NDLRefMemberDescription">A special tag for distinguishing functions that otherwise would have the same signature. </p>


<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">Borrow</span></td>
    <td>&nbsp;</td>
</tr>

  </tbody>
</table>
</div>

<a name="namespaceefd_1a805d2ba8fe04738f2b7417afc3da9513"></a>
<p class=NDLRefHead2>efd::_Adopt</p>


<p class="NDLRefMemberDescription">A special tag for distinguishing functions that otherwise would have the same signature. </p>


<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">Adopt</span></td>
    <td>&nbsp;</td>
</tr>

  </tbody>
</table>
</div>

<a name="namespaceefd_1a64676b0e69aab46b15437b968badbec4"></a>
<p class=NDLRefHead2>efd::ServiceDependencyFlags</p>


<p class="NDLRefMemberDescription">Flags for use by the <span class="NDLSystemFont"><a href="../efd/efd__IDependencyRegistrar.htm#classefd_1_1_i_dependency_registrar_1ad21d6ac1797dd19e368880f2767eb379">IDependencyRegistrar::AddDependency</a></span> method to describe the nature of the dependency. </p>

<p class="NDLRefMemberDetailedDescription">These flags can be combined to specify multiple options in a single call. </p>

<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">sdf_Optional</span></td>
    <td>This is an optional dependency, if the specified service is present then we will be dependent on it but if it's not present this won't be treated as an error. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">sdf_Required</span></td>
    <td>The specified service is a required dependency. If that service isn't found it will be treated as a fatal error. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">sdf_Normal</span></td>
    <td>This is a normal dependency, we depend on the specified service and it will be initialized before us and shutdown after us. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">sdf_Reverse</span></td>
    <td>The specified service is a reverse dependency, in other words the specified service should be treated as being dependent on us. Normally a service is initialized after the services that it depends on, but with a reverse dependency you are requesting to be initialized before the specified service and shutdown after that service. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">sdf_OptionalReverse</span></td>
    <td>A convenience alias that combines the Optional and Reverse flags. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">sdf_RequiredReverse</span></td>
    <td>A convenience alias that combines the Required and Reverse flags. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">sdf_DefaultFlags</span></td>
    <td>A convenience alias for the flags that are used by default. </td>
</tr>

  </tbody>
</table>
</div>

<a name="namespaceefd_1a3b3ac05aae06dbfe022fc0b79d48de28"></a>
<p class=NDLRefHead2>efd::ConnectionStatus</p>


<p class="NDLRefMemberDescription">Values used by the <span class="NDLSystemFont"><a href="../efd/efd__INetService.htm#classefd_1_1_i_net_service_1aa2a4bb8bf47d9717b3766756998593c4">INetService::GetConnectionStatus</a></span> method. </p>

<p class="NDLRefMemberDetailedDescription">Some <span class="NDLSystemFont"><a href="../efd/efd__INetService.htm">INetService</a></span> implementations may not use all of these values. </p>

<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">kCS_Canceled</span></td>
    <td>While waiting to connect, the system was told to cancel any connection attempt. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kCS_WaitConnect</span></td>
    <td>Waiting to be told to connect. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kCS_Failed</span></td>
    <td>An attempt to connect has failed to establish a connection. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kCS_Connecting</span></td>
    <td>A connection has been requested and is in the process of being established. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kCS_ReliableConnected</span></td>
    <td>Established an initial physical connection on which network commands can be reliably exchanged, but additional protocol level communication may be required for <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span> based message delivery to be available. In effect, at this point the local and remote <span class="NDLSystemFont"><a href="../efd/efd__INetService.htm">INetService</a></span> implementations can communicate using internal protocols but remote <span class="NDLSystemFont"><a href="../efd/efd__MessageService.htm">MessageService</a></span> level communication is not possible yet. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kCS_AnnounceNetID</span></td>
    <td>The connection is ready to notify the remote process of its NetID. Every process should have a unique NetID and connections should not be accepted that would violate this restriction. 
<p class="NDLNormal">This status is an implementation detail of the default <span class="NDLSystemFont"><a href="../efdNetwork/efd__NetService.htm">NetService</a></span> implementation and might not be used by other <span class="NDLSystemFont"><a href="../efd/efd__INetService.htm">INetService</a></span> implementations. </p></td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kCS_WaitNetIDAck</span></td>
    <td>The connection is waiting for acknowledgment of the announced NetID. 
<p class="NDLNormal">This status is an implementation detail of the default <span class="NDLSystemFont"><a href="../efdNetwork/efd__NetService.htm">NetService</a></span> implementation and might not be used by other <span class="NDLSystemFont"><a href="../efd/efd__INetService.htm">INetService</a></span> implementations. </p></td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kCS_Connected</span></td>
    <td>The connection is fully established and ready for <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span> based message delivery. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kCS_Disconnected</span></td>
    <td>The connection was previously connected but has been disconnected. </td>
</tr>

  </tbody>
</table>
</div>

<a name="namespaceefd_1ad75e44853f2061ef232825176555761d"></a>
<p class=NDLRefHead2>efd::ParameterResult</p>


<p class="NDLRefMemberDescription">Return values used by various <span class="NDLSystemFont"><a href="../efd/efd__ParameterList.htm">ParameterList</a></span> methods. </p>


<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">pr_OK</span></td>
    <td>Success. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pr_OutOfRange</span></td>
    <td>Parameter index is greater than the number of parameters. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pr_BadName</span></td>
    <td>Parameter name is invalid. It could be already in use during an add or not found during a get. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pr_TypeMismatch</span></td>
    <td>The parameter type does not match the requested type. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pr_DataError</span></td>
    <td>The storage or retrieval of the data failed (bad/missing Serialize support for this data type? This can result from missing header files for specializing the data type. ) </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pr_ContainerMismatch</span></td>
    <td>The container type does not match, for example you added a <span class="NDLSystemFont"><a href="../efd/efd__list.htm">list</a></span> but tried to read out a scalar or a <span class="NDLSystemFont"><a href="../efd/efd__map.htm">map</a></span>. </td>
</tr>

  </tbody>
</table>
</div>

<a name="namespaceefd_1a5dad109f66b30dca37c479525c41cefd"></a>
<p class=NDLRefHead2>efd::ContainerType</p>


<p class="NDLRefMemberDescription">Container types used by the <span class="NDLSystemFont"><a href="../efd/efd__ParameterList.htm">ParameterList</a></span> class. </p>

<p class="NDLRefMemberDetailedDescription">The AddParameter and GetParameter methods are specialized to support each of these types. </p>

<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">ct_Invalid</span></td>
    <td>An invalid container type value. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">ct_Scalar</span></td>
    <td>container type is a single scalar value. This is basically the "not a container" type. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">ct_List</span></td>
    <td>container type is an efd::list&lt;T&gt; where T is the GetParameterDataType class. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">ct_Map_StringKeyed</span></td>
    <td>container type is an efd::map&lt;efd::utf8string, T&gt; where T is the GetParameterDataType class. </td>
</tr>

  </tbody>
</table>
</div>

<a name="namespaceefd_1ae8920c1402bd900e2db10b3fad478b76"></a>
<p class=NDLRefHead2>efd::FoundationServiceAllocatorFlags</p>


<p class="NDLRefMemberDescription">Define bit flags to modify service allocations in the CreateFoundationServices function. </p>


<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">fsaf_NO_LOGGING</span></td>
    <td>Pass to Create to prevent creation of the <span class="NDLSystemFont"><a href="../efd/efd__EnumManager.htm">efd::EnumManager</a></span> and <span class="NDLSystemFont"><a href="../efd/efd__Logger.htm">efd::Logger</a></span>. </td>
</tr>

  </tbody>
</table>
</div>

<a name="namespaceefd_1a38efb34dc16abdbce574c5a95b41d0f2"></a>
<p class=NDLRefHead2>efd::_CountType</p>


<p class="NDLRefMemberDescription">When describing the "size" of a UTF string there are several ways to describe it:. </p>

<p class="NDLRefMemberDetailedDescription">
<ul>
<li>CT_LENGTH : equivalent to the return value from the length() function. This is the number of characters in the string, but a single character can be multiple units long </li>
<li>CT_SIZE : equivalent to the return value from the size() function. This is the number of units that are required to store the string. For utf8 a unit is one byte, for utf16 a unit is 16 bytes. </li>
<li>CT_BYTES : this is the size in bytes. Similar to CT_SIZE, but different UTF encodings use different unit sizes. For UTF8 CT_BYTES and CT_SIZE are equivalent. For UTF16 Bytes should always be equivalent to CT_SIZE*2. </li></ul></p>

<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">CT_LENGTH</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">CT_SIZE</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">CT_BYTES</span></td>
    <td>&nbsp;</td>
</tr>

  </tbody>
</table>
</div>

<a name="namespaceefd_1af822e9f60d107111f4663ae3c11c5ba5"></a>
<p class=NDLRefHead2>efd::EE_SOCKET_ERRORS</p>




<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">EE_SOCKET_NO_DATA</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">EE_SOCKET_ERROR_UNKNOWN</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">EE_SOCKET_SHUTDOWN</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">EE_SOCKET_CONNECTION_CLOSED</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">EE_SOCKET_MESSAGE_QUEUED</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">EE_SOCKET_QUEUE_ALMOST_FULL</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">EE_SOCKET_SEND_FAILED</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">EE_SOCKET_MESSAGE_NOT_SENT</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">EE_SOCKET_CONNECTION_IN_PROGRESS</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">EE_SOCKET_CONNECTION_COMPLETE</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">EE_SOCKET_CONNECTION_FAILED</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">EE_SOCKET_CONNECTION_ACCEPTED</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">EE_SOCKET_END_OF_BUFFER</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">EE_SOCKET_CONNECTION_TIMED_OUT</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">EE_SOCKET_CONNECTION_NOT_FOUND</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">EE_SOCKET_CONNECTION_NOT_ACTIVE</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">EE_SOCKET_LISTEN_FAILED</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">EE_SOCKET_INBOUND_CONNECTION_FAILED</span></td>
    <td>&nbsp;</td>
</tr>

  </tbody>
</table>
</div>

<a name="namespaceefd_1a75fab0d18171a461126d0bb25ed232d0"></a>
<p class=NDLRefHead2>anonymous enum</p>


<p class="NDLRefMemberDescription">The states of the MatchmakingService. </p>


<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">P2P_ERROR</span></td>
    <td>An Error has occurred. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">P2P_RUNNING</span></td>
    <td>The service is still running but isn't ready yet. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">P2P_CONTEXT_STARTED</span></td>
    <td>The matching context has been started. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">P2P_CREATEJOINROOM</span></td>
    <td>Create a room or look for rooms to join. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">P2P_ESTABLISHED</span></td>
    <td>Signaling has been established between the room members. </td>
</tr>

  </tbody>
</table>
</div>



<a name="namespaceefd_1a71ce7a80df2b7a241c53ae15e7b622d8"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">ClassID</a></span>  kInvalidClassID</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a0057a7ef3be3b072127222a32a378fa9"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span>  kCID_INVALID</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1abb542de79aee27e97e89d1ca47c6ba22"></a>
<p class="NDLRefMemberFunction">EE_EFD_ENTRY <span class="NDLSystemFont">bool</span>  gs_bDisableMemLogging</p>
<p class="NDLRefMemberDescription">Global flag for disabling memory logging. </p>

<a name="namespaceefd_1a5954819a19e4a7ef24ab7a841ffc87f4"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  EE_MAX_PATH</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a511d7ba44c0481fd32ff9be69ae8ed13"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  EE_NUM_LIBRARIES</p>
<p class="NDLRefMemberDescription">The maximum number of libraries that can have SDM functions registered with the manager. </p>

<a name="namespaceefd_1a497c506e97f0e95c96e6efb35ff0ee0f"></a>
<p class="NDLRefMemberFunction">const int  HOST_NAME_LENGTH</p>
<p class="NDLRefMemberDescription">max expected length of hostname </p>

<a name="namespaceefd_1a69f37bf2828b8ff50d68803cdc6943e1"></a>
<p class="NDLRefMemberFunction">const int  MAX_RECV_LEN</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1ac256deab68abe79cb84c47ee9fc3c9ee"></a>
<p class="NDLRefMemberFunction">const int  MAX_MSG_LEN</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1af3343f900e64c576b179329d565d1528"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  CLASS_ID_ENTITYID</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a601588a17779d6f4e226aced546928d9"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  kCLASSID_MatchmakingService_PS3</p>
<p class="NDLRefMemberFunction"></p>
<a name="private_methods"></a>
<p class="NDLRefHead1">Private Methods</p>


<a name="namespaceefd_1a8d51eabbef89eef5a3206c5d64488868"></a>
<p class="NDLRefMemberFunction">EE_EFD_ENTRY <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a02da74c5f95666d41c684efde9efcd88">efd::SInt8</a></span>  DisplayAssertDialog(<br/>const char* pFile, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span> line, <br/>const char* pFunction, <br/>const char* pPred, <br/>const char* pMsg, <br/>const char* pStack, <br/><span class="NDLSystemFont">efd::Bool</span> isAVerify)</p>
<p class="NDLRefMemberDescription">Function to display a dialog when an assert fails. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pFile</span></td>
    <td>The source file where the assert message was generated </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">line</span></td>
    <td>The source line where the assert message was generated </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pFunction</span></td>
    <td>The function where the assert message was generated </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pPred</span></td>
    <td>The predicate of the assert that failed </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pMsg</span></td>
    <td>The optional formatted assert message </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pStack</span></td>
    <td>Optional If EE_USE_ASSERT_STACKTRACE was defined at compile time, a <span class="NDLSystemFont"><a href="../efd/efd__stack.htm">stack</a></span> backtrace is passed in. Otherwise this will be NULL. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">isAVerify</span></td>
    <td>Boolean to denote if this is a Verify dialog (true for Verify) </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceefd_1af163a5ce475935e3a232c76001b5473f"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>  AtomicIncrement(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>& value)</p>
<p class="NDLRefMemberDescription">atomically increment a variable </p>

<a name="namespaceefd_1a7aa6078750cefd440b2ca211a355f65e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>  AtomicDecrement(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>& value)</p>
<p class="NDLRefMemberDescription">atomically decrement a variable </p>

<a name="namespaceefd_1a09ced7160a9ad503eab3e1833d377583"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  AtomicIncrement(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>& value)</p>
<p class="NDLRefMemberDescription">atomically increment a variable </p>

<a name="namespaceefd_1a77b401e091b98fb94784aab70b5ac7e7"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  AtomicDecrement(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>& value)</p>
<p class="NDLRefMemberDescription">atomically decrement a variable </p>

<a name="namespaceefd_1a659520ac91429f91cad9547074204666"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>  AtomicIncrement(volatile <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>& value)</p>
<p class="NDLRefMemberDescription">atomically increment a variable </p>

<a name="namespaceefd_1ae7acbb19a97a2e0667265e2b1971b3e0"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>  AtomicDecrement(volatile <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>& value)</p>
<p class="NDLRefMemberDescription">atomically decrement a variable </p>

<a name="namespaceefd_1a94ec4ec875882b281943cd3baa7782e6"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  AtomicIncrement(volatile <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>& value)</p>
<p class="NDLRefMemberDescription">atomically increment a variable </p>

<a name="namespaceefd_1a0944925e65ba560d3a817de3975284f4"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  AtomicDecrement(volatile <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>& value)</p>
<p class="NDLRefMemberDescription">atomically decrement a variable </p>

<a name="namespaceefd_1a02968528b4f1a8293dd87d8d4fb53847"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromObject(const <span class="NDLSystemFont">efd::Bool</span>& )</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1aa367543d25146c4ce95c2307d1d118e0"></a>
<p class="NDLRefMemberFunction">template &lt;&gt; <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromType&lt;efd::Bool&gt;()</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a14a0e508bb5c9fd802ee95fcc1988ff6"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromObject(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a02da74c5f95666d41c684efde9efcd88">efd::SInt8</a></span>& )</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1aebdcfaf851a5126df9217eb5eca4cd90"></a>
<p class="NDLRefMemberFunction">template &lt;&gt; <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromType&lt;efd::SInt8&gt;()</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1ac6f39ee640da341a97784c060aa98631"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromObject(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a59a3838ab5cdfe87f98f5b8371e4e91d">efd::UInt8</a></span>& )</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1ab6d339a25c2b7e6f656b227a234402d8"></a>
<p class="NDLRefMemberFunction">template &lt;&gt; <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromType&lt;efd::UInt8&gt;()</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a78fb5be05ba2a2a2b08937bddfa7459f"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromObject(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a78e418e4217f674682471407609a8aa8">efd::SInt16</a></span>& )</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a8dd992d1b8402acc00d420b1d7067842"></a>
<p class="NDLRefMemberFunction">template &lt;&gt; <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromType&lt;efd::SInt16&gt;()</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a489b18484b60d394b5a8e9a64a877641"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromObject(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span>& )</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1ac460e9ac296ce830fa98783681fe665a"></a>
<p class="NDLRefMemberFunction">template &lt;&gt; <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromType&lt;efd::UInt16&gt;()</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a3c02d3425caf4c8ba8d5c6b9e9cd3d5e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromObject(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>& )</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a285e1060c8ed6028c044afbd0a4a6705"></a>
<p class="NDLRefMemberFunction">template &lt;&gt; <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromType&lt;efd::SInt32&gt;()</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a73f183e4d9a13011c9a25401a56517eb"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromObject(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>& )</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a9b4e19051d13add82fc9c380018aca90"></a>
<p class="NDLRefMemberFunction">template &lt;&gt; <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromType&lt;efd::UInt32&gt;()</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1ac7107c6d229ec9fdb50a59f735adc5bd"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromObject(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a31570c844c29f8e0f335ac87dcb55401">efd::SInt64</a></span>& )</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1accd559587a7c41084a6c42ffc9688034"></a>
<p class="NDLRefMemberFunction">template &lt;&gt; <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromType&lt;efd::SInt64&gt;()</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a42d77adec5167755f97d76fc39c9c0a8"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromObject(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a845df149ec80fc0bf36f875ece09ef9d">efd::UInt64</a></span>& )</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1aa6922182a30f1f1c862dae3fad67323a"></a>
<p class="NDLRefMemberFunction">template &lt;&gt; <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromType&lt;efd::UInt64&gt;()</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1af1d9dd8191e783bda2f6897bb003bd7d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromObject(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>& )</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a3fd949e7e191cdcebab0371fb271ac62"></a>
<p class="NDLRefMemberFunction">template &lt;&gt; <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromType&lt;efd::Float32&gt;()</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1adcf3269efe08eeba0599fe1a4ab7f38e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromObject(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aff0a9e9ca8001b330091eb01eeb190c2">efd::Float64</a></span>& )</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a26dc715528e5c4ddcf238eff334d6646"></a>
<p class="NDLRefMemberFunction">template &lt;&gt; <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromType&lt;efd::Float64&gt;()</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a305e3d669f1c15b0ec5adfec455ef7e0"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromObject(const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& )</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a12a9db30ec2c3168ca3081a376eef972"></a>
<p class="NDLRefMemberFunction">template &lt;&gt; <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromType&lt;efd::utf8string&gt;()</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1affd74abdfdb28838ececbfc786a9369c"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromObject(const <span class="NDLSystemFont"><a href="../efd/efd__utf8char_t.htm">efd::utf8char_t</a></span>& )</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a29433d12fbd7de3e3ab24232752cbcde"></a>
<p class="NDLRefMemberFunction">template &lt;&gt; <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromType&lt;efd::utf8char_t&gt;()</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1ab42f7825d4e8311d95780907d2473fdf"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromObject(const <span class="NDLSystemFont"><a href="../efd/efd__Point2.htm">efd::Point2</a></span>& )</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1ae652129fc2f14dba16b6fb079653dcfc"></a>
<p class="NDLRefMemberFunction">template &lt;&gt; <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromType&lt;efd::Point2&gt;()</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1ae2d24887baf8dc0acb170a8436ef7c8d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromObject(const <span class="NDLSystemFont"><a href="../efd/efd__Point3.htm">efd::Point3</a></span>& )</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a48bc910c5ccdc2fa4f009d975b7bcfab"></a>
<p class="NDLRefMemberFunction">template &lt;&gt; <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromType&lt;efd::Point3&gt;()</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1ab982def154bbe32536b43af040a12a81"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromObject(const <span class="NDLSystemFont"><a href="../efd/efd__Point4.htm">efd::Point4</a></span>& )</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1ace6506efd547a7595ea54c1cc3a13e1d"></a>
<p class="NDLRefMemberFunction">template &lt;&gt; <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromType&lt;efd::Point4&gt;()</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a0a08ab455f68affee14e5305f91585c7"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromObject(const <span class="NDLSystemFont"><a href="../efd/efd__Matrix3.htm">efd::Matrix3</a></span>& )</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a1b8c35c95177335cb1a679f63da61b82"></a>
<p class="NDLRefMemberFunction">template &lt;&gt; <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromType&lt;efd::Matrix3&gt;()</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1afc604a458a568094055580457a543dd4"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromObject(const <span class="NDLSystemFont"><a href="../efd/efd__Color.htm">efd::Color</a></span>& )</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a267d46dd2fe970f3a9d7e02a180f4348"></a>
<p class="NDLRefMemberFunction">template &lt;&gt; <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromType&lt;efd::Color&gt;()</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a266fc47c402a64281c1dab3aa3535a9a"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromObject(const <span class="NDLSystemFont"><a href="../efd/efd__ColorA.htm">efd::ColorA</a></span>& )</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1ae6c1c7890d37fe57b8caec508a901040"></a>
<p class="NDLRefMemberFunction">template &lt;&gt; <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromType&lt;efd::ColorA&gt;()</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a857625dbb70ad7b469062bc5307e8c79"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromObject(const <span class="NDLSystemFont"><a href="../efd/efd__Quaternion.htm">efd::Quaternion</a></span>& )</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1aaf58792b24b00048d4a0d815fc50e9f9"></a>
<p class="NDLRefMemberFunction">template &lt;&gt; <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromType&lt;efd::Quaternion&gt;()</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a6ecd574cfcfea46ce8e9b6f7c3a21f9a"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromObject(const <span class="NDLSystemFont"><a href="../efd/efd__AssetID.htm">efd::AssetID</a></span>& )</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1aed0ec6fc94006215836f39ea67304f54"></a>
<p class="NDLRefMemberFunction">template &lt;&gt; <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromType&lt;efd::AssetID&gt;()</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a0e3a76e7b48e6f17e2d9f50ab233e58f"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromObject(const <span class="NDLSystemFont"><a href="../efd/efd__ID128.htm">efd::ID128</a></span>& )</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a6918033291fc36e3cdbdf30d217bc419"></a>
<p class="NDLRefMemberFunction">template &lt;&gt; <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromType&lt;efd::ID128&gt;()</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1aba0319a4e96268472900859c987dc530"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__Color.htm">Color</a></span>  operator*(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> scalar, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__Color.htm">Color</a></span>& c)</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a59f18107b79759360c1911f0df894c60"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__ColorA.htm">ColorA</a></span>  operator*(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> scalar, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__ColorA.htm">ColorA</a></span>& c)</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1ab7158047dbce797c612923632f3f91f6"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__ColorA_UInt8.htm">ColorA_UInt8</a></span>  operator*(<br/>float fScalar, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__ColorA_UInt8.htm">ColorA_UInt8</a></span>& c)</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a69296421e4c64b6b3a76a859a0e17376"></a>
<p class="NDLRefMemberFunction">template &lt;typename T  &gt; T  DefaultInvalidValue()</p>
<p class="NDLRefMemberDescription">Templated function to allow enumeration of alternate types. </p>
<p class="NDLRefMemberDetailedDescription">For all integer types the default value of zero should work fine, but if you wanted an enumeration of, say, a class like <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span> you might want some other default value so you can provide an override of this method. </p>

<a name="namespaceefd_1aafd4392dc7c30569dedf691dc37d1e32"></a>
<p class="NDLRefMemberFunction">EE_EFD_ENTRY <span class="NDLSystemFont"><a href="../efd/efd__IMemLogHandler.htm">IMemLogHandler</a></span>*  CreateDefaultMemoryLogHandler()</p>
<p class="NDLRefMemberDescription">Default implementation of the <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aee543b044968b09c686e0aaecbff381a">InitializeMemoryLogHandler()</a></span> function. </p>
<p class="NDLRefMemberDetailedDescription">To use the default implementation in a statically linked application, invoke the macro EE_USE_DEFAULT_ALLOCATOR in a source file linked into the application.</p>
<p class="NDLRefMemberDetailedDescription">This implementation is always used in dynamically linked versions (see MemManager.cpp for more details).</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>Pointer to an <span class="NDLSystemFont"><a href="../efd/efd__IMemLogHandler.htm">IMemLogHandler</a></span> instance. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceefd_1a8262ae971a98a9d86f940ff187427137"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__IAllocator.htm">IAllocator</a></span>*  CreateDefaultGlobalMemoryAllocator(<span class="NDLSystemFont">bool</span> silentPremainAllocations = false)</p>
<p class="NDLRefMemberDescription">Default implementation of the <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a657b37ea20bf7923e33b085913234e2e">CreateGlobalMemoryAllocator()</a></span> function. </p>
<p class="NDLRefMemberDetailedDescription">To use the default implementation in a statically linked application, invoke the macro EE_USE_DEFAULT_ALLOCATOR in a source file linked into the application.</p>
<p class="NDLRefMemberDetailedDescription">This implementation is always used in dynamically linked versions (see MemManager.cpp for more details).</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>Pointer to an <span class="NDLSystemFont"><a href="../efd/efd__IAllocator.htm">IAllocator</a></span> instance. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceefd_1a36ef73e1b507b3f12ef5ab42e1d25f15"></a>
<p class="NDLRefMemberFunction">EE_DECLARE_SDM_WITH_TLS(Foundation )</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a1c4d4c55caaf78f3088366fa0a60037d"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>&  GetAssetClientServiceCategory()</p>
<p class="NDLRefMemberDescription">Get the <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span> used for broadcast messages directed to the <span class="NDLSystemFont"><a href="../efd/efd__AssetLocatorService.htm">AssetLocatorService</a></span>. </p>

<a name="namespaceefd_1a4aabeb92424c7ed6d333fc3ed8875249"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>  GetAssetClientPrivateCategory(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> virtualProcessID)</p>
<p class="NDLRefMemberDescription">Get the private <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span> used by each client to receive asset fetch responses. </p>

<a name="namespaceefd_1a6b252f6138e3fcf02fdbedaa50faa2c2"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>  GenerateAssetResponseCategory()</p>
<p class="NDLRefMemberDescription">Generate a unique <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span> for use with the AssetLocate() API. </p>
<p class="NDLRefMemberDetailedDescription">All calls to AssetLocate() must include the <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span> that the response will be sent to. The caller should use this API to generate the <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span> and Subscribe to it before they call AssetLocate(). </p>

<a name="namespaceefd_1a6b75f323588d084ce69b79a3f8e15e5c"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>&  GetAssetServerServiceCategory()</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a66126cb24f92894df836a0484012ea9d"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>&  GetAssetServerProxyCategory()</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a0e4535066db9ec789cdcf761507c0058"></a>
<p class="NDLRefMemberFunction">template &lt;class Dest  , class Src  &gt; Dest*  StaticCast(Src* Source)</p>
<p class="NDLRefMemberDescription">Helper function for known compile-time type conversion. </p>

<a name="namespaceefd_1ab26a960b8601ec4a7536ab7fcf6f5c39"></a>
<p class="NDLRefMemberFunction">template &lt;class Dest  , class Src  &gt; const Dest*  StaticCast(const Src* Source)</p>
<p class="NDLRefMemberDescription">Helper function for known compile-time type conversion. </p>

<a name="namespaceefd_1a953fabb2a7b02093c82a5446e6201bea"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__ILogger.htm">ILogger</a></span>*  GetLogger()</p>
<p class="NDLRefMemberDescription">Get the default logger. </p>

<a name="namespaceefd_1adc858ed29d7d818ec6f6db4f257e243c"></a>
<p class="NDLRefMemberFunction">template &lt;class MessageClass  &gt; void  RegisterMessageFactory(<span class="NDLSystemFont"><a href="../efd/efd__GenericFactory.htm">MessageFactory</a></span>* pMessageFactory)</p>
<p class="NDLRefMemberDescription">defined(EE_DISABLE_LOGGING) </p>
<p class="NDLRefMemberDetailedDescription">Helper function to register Message factory of a specific class type. The class must use Foundation RTTI to define a unique MessageClass::CLASS_ID which is used by the factory.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMessageFactory</span></td>
    <td>A MessageFactory pointer. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceefd_1aa32e76410d79ecc54de73929e5e7d79e"></a>
<p class="NDLRefMemberFunction">template &lt;class <span class="NDLSystemFont">BaseMessageClass</span>  , <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  newMsgClassID&gt; void  RegisterMessageWrapperFactory(<span class="NDLSystemFont"><a href="../efd/efd__GenericFactory.htm">MessageFactory</a></span>* pMessageFactory)</p>
<p class="NDLRefMemberDescription">Helper function to register a message factory for an <span class="NDLSystemFont"><a href="../efd/efd__MessageWrapper.htm">efd::MessageWrapper</a></span>&lt;<span class="NDLSystemFont">BaseMessageClass</span>, newMsgClassID&gt; message class. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMessageFactory</span></td>
    <td>A MessageFactory pointer. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceefd_1ad4a7887951f19f775502bcd98a318fe2"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__Point3.htm">efd::Point3</a></span>  operator*(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__Point3.htm">efd::Point3</a></span>& pt, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__Matrix3.htm">efd::Matrix3</a></span>& mat)</p>
<p class="NDLRefMemberDescription">Transforms a point using the transpose of the specified matrix. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pt</span></td>
    <td>The point with which to transform. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">mat</span></td>
    <td>The transformation matrix. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A new point transformed by the transpose of this specified matrix. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceefd_1ae881bad4ab65581b9793d33ae7784c8d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__MemHint.htm#classefd_1_1_mem_hint_1ac621e62eb93ad8e621135388310d21fa">MemHint::Bits</a></span>  operator|(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__MemHint.htm#classefd_1_1_mem_hint_1ac621e62eb93ad8e621135388310d21fa">MemHint::Bits</a></span> eLhs, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__MemHint.htm#classefd_1_1_mem_hint_1ac621e62eb93ad8e621135388310d21fa">MemHint::Bits</a></span> eRhs)</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a61f8bfa0405fa20b1cfdfa05eb1e1e42"></a>
<p class="NDLRefMemberFunction">void  _LogMemAssert(<br/>const char* pcCondition, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__AllocUnit.htm">AllocUnit</a></span>* pkUnit, <br/>const char* pcFile, <br/>int iLine, <br/>const char* pcFunction)</p>
<p class="NDLRefMemberDescription">_LogMemAssert serves as a simplified assert handler for asserts inside <span class="NDLSystemFont"><a href="../efd/efd__MemManager.htm">MemManager</a></span> and the allocators. </p>
<p class="NDLRefMemberDetailedDescription">This assert handler is purposely designed to do nothing more than simply output the assert location and assert. Since other assert handlers may allocate memory they can not be used by the <span class="NDLSystemFont"><a href="../efd/efd__MemManager.htm">MemManager</a></span>. Doing so could result in infinite recursion. </p>

<a name="namespaceefd_1aee543b044968b09c686e0aaecbff381a"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__IMemLogHandler.htm">efd::IMemLogHandler</a></span>*  InitializeMemoryLogHandler()</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a7fd1792272ba93158dffaf4ce8ecf3c6"></a>
<p class="NDLRefMemberFunction">template &lt;typename FROM  , typename TO  &gt; void  ConvertingAssignment(<br/>TO& o_out, <br/>const FROM& i_in)</p>
<p class="NDLRefMemberDescription">An assignment function that can convert between two different but compatible types. </p>
<p class="NDLRefMemberDetailedDescription">If your assignment requires special conversion then you can specialize this template function to change the behavior, otherwise the default behavior is to simply use operator= with a c-style cast to prevent warnings. This default behavior is suitable for converting integer types where truncation is not a concern or converting between enumerated types and integers. The default can also take advantage of constructors as the compiler can generate an implicit call.</p>
<p class="NDLRefMemberDetailedDescription">Implementing ConvertingAssignment for two given types allows those types to be used with the <span class="NDLSystemFont"><a href="../efd/efd__ParameterConverter.htm">ParameterConverter</a></span> templated class in order to convert types in a <span class="NDLSystemFont"><a href="../efd/efd__ParameterList.htm">ParameterList</a></span>. For convenience such a converter can be defined and registered simply by using either the MakeDefaultConverter or MakeDefaultBidirectionalConverters convenience methods on the <span class="NDLSystemFont"><a href="../efd/efd__ParameterConverterManager.htm">ParameterConverterManager</a></span> class. To use the bidirectional converter you will need two ConvertingAssignment implementations, one going each way, although the default implementation might work for one direction but not the other.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">o_out</span></td>
    <td>The destination variable to be <span class="NDLSystemFont"><a href="../efd/efd__set.htm">set</a></span></td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_in</span></td>
    <td>The desired value that needs to be converted to the correct type </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceefd_1a2705d2f9479ed935bf5d24cda58f290f"></a>
<p class="NDLRefMemberFunction">template &lt;typename T  &gt; int  SequenceCompare(<br/>T lhs, <br/>T rhs)</p>
<p class="NDLRefMemberDescription">Does a "wrap-around" comparison of two signed integer values. </p>
<p class="NDLRefMemberDetailedDescription">Zero is treated as a special "invalid" or "not set" value and is considered to be less than all non-zero values.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">lhs</span></td>
    <td>Left-hand side of comparison. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">rhs</span></td>
    <td>Right-hand side of comparison. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>-1 if lhs &lt;rhs, 0 if lhs == rhs, and 1 if lhs&gt; rhs. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceefd_1afb2ff1a819c4555d8b9855511be3f1bf"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  CreateFoundationServices(<br/><span class="NDLSystemFont"><a href="../efd/efd__ServiceManager.htm">efd::ServiceManager</a></span>* pServiceManager, <br/>int argcInit, <br/>char ** argvInit, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> flags = 0)</p>
<p class="NDLRefMemberDescription">Create the common Foundation services needed by most applications. </p>
<p class="NDLRefMemberDetailedDescription">If you use a fairly standard configuration you can simply call this method to create, configure and register the services.</p>
<p class="NDLRefMemberDetailedDescription">This function always creates the following services: <span class="NDLSystemFont"><a href="../efd/efd__ConfigManager.htm">efd::ConfigManager</a></span>, <span class="NDLSystemFont"><a href="../efd/efd__MessageService.htm">efd::MessageService</a></span>, <span class="NDLSystemFont"><a href="../efd/efd__AssetLocatorService.htm">efd::AssetLocatorService</a></span> and <span class="NDLSystemFont"><a href="../efd/efd__AssetFactoryManager.htm">efd::AssetFactoryManager</a></span>.</p>
<p class="NDLRefMemberDetailedDescription">In addition, unless logging is disabled by passing the fsaf_NO_LOGGING flag the <span class="NDLSystemFont"><a href="../efd/efd__EnumManager.htm">efd::EnumManager</a></span> service is created and <span class="NDLSystemFont"><a href="../efd/efd__EnumManager.htm#classefd_1_1_enum_manager_1a32f4996e4f1a0c9e46044a3ac3102e89">EnumManager::LoadConfigOptions</a></span> is called. If their is a <span class="NDLSystemFont"><a href="../efd/efd__Logger.htm">Logger</a></span> singleton it will also initialized by calling <span class="NDLSystemFont"><a href="../efd/efd__ILogger.htm#classefd_1_1_i_logger_1a7380bbeff7361319db30607aad53c34d">ILogger::ReadConfig</a></span>. As such it is recommended that before you call CreateFoundationServices you create a logger and register it by calling <span class="NDLSystemFont"><a href="../efd/efd__LoggerSingleton.htm#classefd_1_1_logger_singleton_1a3ba2c6c4e7d32b0ed04241af872bbc58">efd::LoggerSingleton::Initialize</a></span> and then add the default <span class="NDLSystemFont"><a href="../efd/efd__ILogDestination.htm">ILogDestination</a></span> by calling <span class="NDLSystemFont"><a href="../efd/efd__ILogger.htm#classefd_1_1_i_logger_1a6c54331f3148ddf834725c51f59dd0ae">ILogger::AddDest</a></span>.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pServiceManager</span></td>
    <td>The <span class="NDLSystemFont"><a href="../efd/efd__ServiceManager.htm">ServiceManager</a></span> to which the services are registered </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">argcInit</span></td>
    <td>The number of command line arguments, which is passed to the constructor of the <span class="NDLSystemFont"><a href="../efd/efd__ConfigManager.htm">efd::ConfigManager</a></span>. Pass zero on platforms without a command line. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">argvInit</span></td>
    <td>The command line arguments, which are passed to the constructor of the <span class="NDLSystemFont"><a href="../efd/efd__ConfigManager.htm">efd::ConfigManager</a></span>. Pass NULL on platforms without a command line. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">flags</span></td>
    <td>Flags from the ServiceAllocatorFlags enum to change default behavior </td>
</tr>

        </tbody>
    </table>
</div>



<a name="namespaceefd_1a995bdf7e47ac83c6978ead149d063bd5"></a>
<p class="NDLRefMemberFunction">const wchar_t*  WStrToNative(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a6a68ba3a7db300d1ea1cbfcb9aae6518">efd::WChar</a></span>* i_psz)</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a33951a8da543dec9b27de55b52081299"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromObject(const <span class="NDLSystemFont"><a href="../efdLogService/efd__LogServiceResponse.htm#classefd_1_1_log_service_response_1a6fcb182e2d47cd622cc75c1d2429ce10">efd::LogServiceResponse::Result</a></span>& )</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a8de62e27943758b24c922ca606f21c91"></a>
<p class="NDLRefMemberFunction">template &lt;&gt; <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromType&lt;efd::LogServiceResponse::Result&gt;()</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1aafe463c0eeb9083c0d5bdf633d8fc142"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>  kCAT_NetErrorMessage(<br/>UniversalID::ECU_Any , <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ad1079df680bf2df903ba0934ad8597de">kNetID_Any</a></span> , <br/>kMSGID_NetErrorMessage )</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a3130f6aa7493eede24dbca4eaf40eb2a"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromObject(const <span class="NDLSystemFont"><a href="../NiInput/NiInputKeyboard.htm">NiInputKeyboard::KeyCode</a></span>& )</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a72cf920bc8763b2b54c5e66e1c11d1a7"></a>
<p class="NDLRefMemberFunction">template &lt;&gt; <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromType&lt;NiInputKeyboard::KeyCode&gt;()</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a512cfdac708d96bca876e98b74675c66"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromObject(const <span class="NDLSystemFont"><a href="../ecrInput/ecrInput__MouseMessage.htm#classecr_input_1_1_mouse_message_1a8dda7b3c0ec3ff2723442fd8efa45413">ecrInput::MouseMessage::MouseButton</a></span>& )</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a84e0b4cab9ec4d62f66fcef4a4944058"></a>
<p class="NDLRefMemberFunction">template &lt;&gt; <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromType&lt;ecrInput::MouseMessage::MouseButton&gt;()</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a442f32b756751d6aaf60b14491e36f70"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromObject(const <span class="NDLSystemFont"><a href="../egf/egf__BreakpointResponse.htm#classegf_1_1_breakpoint_response_1a8a4ce987a22d4d0604dde545fd85ab19">egf::BreakpointResponse::Result</a></span>& )</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a0ca5e482df65f17ff9c8ea8a1559f4cb"></a>
<p class="NDLRefMemberFunction">template &lt;&gt; <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromType&lt;egf::BreakpointResponse::Result&gt;()</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a53eacafa12e3dffd2877dcce994ef6d4"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromObject(const <span class="NDLSystemFont"><a href="../egf/egf__EntityLoadRequest.htm#classegf_1_1_entity_load_request_1a3155c5f9ff7ca9dba0192ceece19a8ba">egf::EntityLoadRequest::Operation</a></span>& )</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a600885b1014ae7ffac3dbb419f0ede03"></a>
<p class="NDLRefMemberFunction">template &lt;&gt; <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromType&lt;egf::EntityLoadRequest::Operation&gt;()</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1aaa6a0c532388972712ce2941dbe01ab3"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromObject(const <span class="NDLSystemFont"><a href="../egf/egf__EntityLoadResult.htm#classegf_1_1_entity_load_result_1a0a16179d3ea9976996affd56c0bc9bd5">egf::EntityLoadResult::Result</a></span>& )</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1aa4c5c69ba1b59f98bbfadd11b714cdac"></a>
<p class="NDLRefMemberFunction">template &lt;&gt; <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromType&lt;egf::EntityLoadResult::Result&gt;()</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a622b1766f10c9fe4434423871087cd9b"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromObject(const <span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a83b3bc06ad70c82a9b842504cbdb215b">egf::ModelTraits</a></span>& )</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a2ea601de8d0a88f5dd8aa209bfa78e98"></a>
<p class="NDLRefMemberFunction">template &lt;&gt; <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromType&lt;egf::ModelTraits&gt;()</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a94ac378bdaa64f3c924624205b756d93"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromObject(const <span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a69cd9800e69656c6a80714df8b9063f7">egf::PropertyTraits</a></span>& )</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a9bb575655d5867ea46934735bd51d266"></a>
<p class="NDLRefMemberFunction">template &lt;&gt; <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromType&lt;egf::PropertyTraits&gt;()</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a79e06a9d9f5163bce557f607b4ef67be"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromObject(const <span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1abf8d69206060e54cf50700e7704ddd3a">egf::BehaviorTraits</a></span>& )</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1acc07011cc55cd48778756185d783224f"></a>
<p class="NDLRefMemberFunction">template &lt;&gt; <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromType&lt;egf::BehaviorTraits&gt;()</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a8e793f14e1e854a1a1751702a0203923"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromObject(const <span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1addeb6c47daeb31df2cb1531e64d65df2">egf::BehaviorTypes</a></span>& )</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a9ee15f79449ddebd5d9597111e2964d9"></a>
<p class="NDLRefMemberFunction">template &lt;&gt; <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromType&lt;egf::BehaviorTypes&gt;()</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a4b645f892ae90d17a2db0da59207cd26"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromObject(const <span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span>& )</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1aa3bb68092fe6de437ca5889ee5dc1322"></a>
<p class="NDLRefMemberFunction">template &lt;&gt; <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromType&lt;egf::EntityID&gt;()</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1a5b169bbf0fcf573abcb7cca01983d96f"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromObject(const <span class="NDLSystemFont"><a href="../Namespaces/egfPhysX.htm#namespaceegf_phys_x_1af94736f8462a9c91cb8d797f3a029e28">egfPhysX::CollisionStatus</a></span>& )</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1ac22e09ccdfab4100ee30806552289f06"></a>
<p class="NDLRefMemberFunction">template &lt;&gt; <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassIDFromType&lt;egfPhysX::CollisionStatus&gt;()</p>
<p class="NDLRefMemberFunction"></p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
