<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::BitUtils Namespace</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::BitUtils Namespace</p>





<a name="private_methods"></a>
<p class="NDLRefHead1">Private Methods</p>


<a name="namespaceefd_1_1_bit_utils_1aeeca366420ac97660ec108430b6f0190"></a>
<p class="NDLRefMemberFunction">template &lt;typename T  &gt; T  SetBits(<br/>T i_bitfield, <br/>T i_maskBitsToSet)</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1_1_bit_utils_1a5e8f9bf52fbd4701a113fac93ad6f9c3"></a>
<p class="NDLRefMemberFunction">template &lt;typename T  &gt; T  ClearBits(<br/>T i_bitfield, <br/>T i_maskBitsToClear)</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1_1_bit_utils_1a210b8fc23fa3d2de5b4997c92e7ae49e"></a>
<p class="NDLRefMemberFunction">template &lt;typename T  &gt; T  SetBitsOnOrOff(<br/>T i_bitfield, <br/>T i_maskBitsToChange, <br/><span class="NDLSystemFont">bool</span> i_on)</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1_1_bit_utils_1aa36d63e0aa08a09d8efee9f9cc59cc93"></a>
<p class="NDLRefMemberFunction">template &lt;typename T  &gt; <span class="NDLSystemFont">bool</span>  AllBitsAreSet(<br/>T i_bitfield, <br/>T i_maskBitsToCheck)</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1_1_bit_utils_1a53511e9ec3e7b7f965bffea3b562c70b"></a>
<p class="NDLRefMemberFunction">template &lt;typename T  &gt; <span class="NDLSystemFont">bool</span>  AnyBitsAreSet(<br/>T i_bitfield, <br/>T i_maskBitsToCheck)</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1_1_bit_utils_1af667b8c17447d916bcf13f689ec4860c"></a>
<p class="NDLRefMemberFunction">template &lt;typename T  &gt; <span class="NDLSystemFont">bool</span>  NoBitsAreSet(<br/>T i_bitfield, <br/>T i_maskBitsToCheck)</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1_1_bit_utils_1a57a166c9cda3ee2d4d1f9423314d5737"></a>
<p class="NDLRefMemberFunction">template &lt;typename T  &gt; T  SetBitByIndex(<br/>T i_bitfield, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> i_index)</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1_1_bit_utils_1a29e6dc3874a6047f8627407084b2bc60"></a>
<p class="NDLRefMemberFunction">template &lt;typename T  &gt; T  ClearBitByIndex(<br/>T i_bitfield, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> i_index)</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1_1_bit_utils_1a2e115857d1dcd044f7d873b73cc95c6a"></a>
<p class="NDLRefMemberFunction">template &lt;typename T  &gt; T  SetBitOnOrOffByIndex(<br/>T i_bitfield, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> i_index, <br/><span class="NDLSystemFont">bool</span> i_on)</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1_1_bit_utils_1a4ea1323fc7c0aac74769bce6ee5c9733"></a>
<p class="NDLRefMemberFunction">template &lt;typename T  &gt; <span class="NDLSystemFont">bool</span>  TestBitByIndex(<br/>T i_bitfield, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> i_index)</p>
<p class="NDLRefMemberFunction"></p>

<a name="namespaceefd_1_1_bit_utils_1aa729b017271a31b092b00532d048b2fd"></a>
<p class="NDLRefMemberFunction">template &lt;typename T  &gt; <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetBitCount()</p>
<p class="NDLRefMemberDescription">Returns the number of bits in the given type. </p>
<p class="NDLRefMemberDetailedDescription">Useful in templated functions that deal with various sizes of plain-old-data fundamental integral types. Usage: UInt32 result = <span class="NDLSystemFont"><a href="../Namespaces/efd__BitUtils.htm#namespaceefd_1_1_bit_utils_1aa729b017271a31b092b00532d048b2fd">GetBitCount< sometype >()</a></span>; </p>

<a name="namespaceefd_1_1_bit_utils_1a6f076551a4e61b4099022f8e3456dc1b"></a>
<p class="NDLRefMemberFunction">template &lt;typename T  &gt; <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  MaximumShiftWithoutOverflow(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> i_NumBits)</p>
<p class="NDLRefMemberDescription">Given a number of bits within the given word size that you want to preserver this determines the maximum bit-shift possible without overflowing those bits. </p>
<p class="NDLRefMemberDetailedDescription">This can be useful in templated functions that deal with various sizes of integral plain- old-data types. Usage: UInt32 result = MaximumShiftWithoutOverflow&lt;sometype&gt;(countOfBitsToKeep); </p>

<a name="namespaceefd_1_1_bit_utils_1a125c7cc85be5d20825b8fc8ec92dbd92"></a>
<p class="NDLRefMemberFunction">template &lt;typename T  &gt; T  ComputeBitMask(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> i_NumBits, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> i_LSBPos)</p>
<p class="NDLRefMemberDescription">Given a number of bits and the position of the least significant bit's index, generate a bit mask of the given type. </p>
<p class="NDLRefMemberDetailedDescription">T should be an integral plain-old-data type. This is useful for generating bit masks at run-time. NOTE: As coded this only works for Unsigned types!!! </p>

<a name="namespaceefd_1_1_bit_utils_1a874e2e551acfba12d20d628f8944b803"></a>
<p class="NDLRefMemberFunction">template &lt;typename T  , <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  i_NumBits, <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  i_LSBPos&gt; T  MakeBitMask()</p>
<p class="NDLRefMemberDescription">This is much like ComputeBitMask only the mask is generated completely at compile time. </p>
<p class="NDLRefMemberDetailedDescription">As a result it can only be used with constant values, but there is no runtime cost as the compiler should replace this entire function with a single constant when you generate an optimized build (possibly even in debug builds depending on compiler). NOTE: As coded this only works for Unsigned types!!! </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
