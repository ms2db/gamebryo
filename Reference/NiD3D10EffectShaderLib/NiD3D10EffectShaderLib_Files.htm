<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiD3D10EffectShaderLib Files</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiD3D10EffectShaderLib Files</p>

<p class="NDLRefHead1">Description</p>

<p>These files,<span class=
"NDLSystemFont">NiD3D10EffectShaderLib.cpp</span> and
<span class="NDLSystemFont">NiD3D10EffectShaderLib.h</span>,
provide the interface functions for static lib based builds of
the shader library. It defines a single function for creating the
library, which the application must call during <span class=
"NDLSystemFont">ClassCreationCallback</span>. Refer to the
documentation on <a href=
"../../Programmer/NiShader/Exposing_your_ShaderLibrary_to_the_tool_chain.htm">
Exposing your ShaderLibrary to the tool-chain</a> for more
details. The interface also provides functions for setting flags
used to compile the D3D10-oriented FX files. An application
should refer to this library as "NiD3D10EffectShaderLib" when
calling NiShaderFactory::LoadAndRegisterShaderLibrary.</p>

<p class="NDLRefHead1">Supported Library Functions</p>

<p class="NDLRefMemberFunction">bool
NiD3D10EffectShaderLib_LoadShaderLibrary(NiRenderer* pkRenderer,
int iDirectoryCount, char* apcDirectories[], bool
bRecurseSubFolders, NiShaderLibrary** ppkLibrary)</p>

<p class="NDLRefMemberDescription">This function, similar to the
other shader library loader functions, creates an <span class=
"NDLSystemFont">NiD3D10EffectShaderLibrary</span> instance, and
searches the directories passed into the <span class=
"NDLSystemFont">apcDirectories</span> array for valid D3D10
Effect files. Valid files are determined by file extensions,
which can be changed using the functions <span class=
"NDLSystemFont">NiD3D10EffectShaderLib_AddFileExtension</span>
and <span class=
"NDLSystemFont">NiD3D10EffectShaderLib_RemoveFileExtension</span>.
If the <span class="NDLSystemFont">pkRenderer</span> parameter is
valid, it will use that renderer to load the D3D10 Effect files;
otherwise, it can parse the file without a valid renderer, but it
will not be able to generate an <span class=
"NDLSystemFont">NiD3D10EffectShader</span> until a renderer is
created.</p>

<p class="NDLRefMemberFunction">NiUInt32
NiD3D10EffectShaderLib_GetD3D10EffectHLSLFlags()</p>

<p class="NDLRefMemberFunction">void
NiD3D10EffectShaderLib_SetD3D10EffectHLSLFlags(NiUInt32
uiHLSLFlags)</p>

<p class="NDLRefMemberDescription">These functions get and set
the flags that will be used as the <span class=
"NDLSystemFont">HLSLFlags</span> parameter to create the D3D10
Effect object from the files. These flags are described in the
Microsoft DirectX documentation under "D3D10_SHADER".</p>

<p class="NDLRefMemberDescription">It is also possible to access
these flags through the <span class=
"NDLSystemFont">NiD3D10ShaderProgramFactory::GetUniversalShaderCreationFlags</span>
and <span class=
"NDLSystemFont">NiD3D10ShaderProgramFactory::GetUniversalShaderCreationFlags</span>,
described in the <span class="NDLSystemFont"><a href=
"../../Reference/NiD3D10Renderer/NiD3D10ShaderProgramFactory.htm">
NiD3D10ShaderProgramFactory</a></span> documentation.</p>

<p class="NDLRefMemberFunction">NiUInt32
NiD3D10EffectShaderLib_GetD3D10EffectFXFlags()</p>

<p class="NDLRefMemberFunction">void
NiD3D10EffectShaderLib_SetD3D10EffectFXFlags(NiUInt32
uiFXFlags)</p>

<p class="NDLRefMemberDescription">These functions get and set
the flags that will be used as the <span class=
"NDLSystemFont">FXFlags</span> parameter to create the D3D10
Effect object from the files. These flags are described in the
Microsoft DirectX documentation under "D3D10_EFFECT".</p>

<p class="NDLRefMemberFunction">void
NiD3D10EffectShaderLib_AddFileExtension(const char* pcExtension,
bool bCompiled)</p>

<p class="NDLRefMemberFunction">void
NiD3D10EffectShaderLib_RemoveFileExtension(const char*
pcExtension)</p>

<p class="NDLRefMemberDescription">Adds or removes an extension
from the list of file extensions that the <span class=
"NDLSystemFont">NiD3D10EffectShaderLibrary</span> will attempt to
load. The <span class="NDLSystemFont">bCompiled</span> flag
indicates whether the extension represents a precompiled shader
or not. The same extension cannot be registered as both a
precompiled and non-compiled shader; calling <span class=
"NDLSystemFont">NiD3D10EffectShaderLib_AddFileExtension</span>
with a new value of bCompiled will overwrite the old
registration.</p>

<p class="NDLRefMemberFunction">void
NiD3DXEffectShaderLib_EnableFXLSupport(bool bEnable)</p>

<p class="NDLRefMemberDescription">Enable or disable support for
parsing .FXL files in the D3D10 Effects shader library. By
default, this feature is set to false.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
