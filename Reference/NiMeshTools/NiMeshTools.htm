<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiMeshTools</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>


<p class="NDLRefHeadClassTitle">NiMeshTools</p>

<p class="NDLRefHeaderFile">&lt;NiMeshTools.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>The <span class="NDLSystemFont">NiMeshTools</span> class 
 contains a collection of static helper functions. These functions are 
 intended to help tools and tool plug-ins operate on an <span class="NDLSystemFont"><a href="../../Reference/NiMesh/NiMesh.htm">NiMesh</a></span> 
 or on sub-components of an <span class="NDLSystemFont">NiMesh</span>.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">template &lt;typename T&gt; inline static 
 T InterpolateTriangle(float fBarycentricU, float fBarycentricV, unsigned 
 int uiV1, unsigned int uiV2, unsigned int uiV3, <a href="../../Reference/NiMesh/NiTStridedRandomAccessIterator.htm">NiTStridedRandomAccessIterator</a>&lt;T&gt;&amp; 
 kIter)</p>

<p class="NDLRefMemberDescription">Interpolates an attribute of the mesh 
 using barycentric coordinates along the surface of the triangle (see <a 
 href="http://mathworld.wolfram.com/BarycentricCoordinates.html" target="_blank">http://mathworld.wolfram.com/BarycentricCoordinates.html</a>). 
 Any point in the plane V1V2V3 can be represented by the barycentric coordinate 
 (U,V). The parameter U controls how much V2 gets weighted into the result, 
 and the parameter V controls how much V3 gets weighted into the result. 
 Lastly, the value of [1 - (U + V)] controls how much V1 gets weighted 
 into the result.</p>

<p class="NDLRefMemberFunction">template &lt;typename T&gt; inline static 
 T InterpolateTriangle(float fBarycentricU, float fBarycentricV, const 
 T&amp; kV1, const T&amp; kV2, const T&amp; kV3)</p>

<p class="NDLRefMemberDescription">Interpolate an attribute of the mesh using 
 barycentric coordinates along the surface of the triangle (see <a href="http://mathworld.wolfram.com/BarycentricCoordinates.html" target="_blank">http://mathworld.wolfram.com/BarycentricCoordinates.html</a>). 
 Any point in the plane V1V2V3 can be represented by the barycentric coordinate 
 (U,V). The parameter U controls how much V2 gets weighted into the result, 
 and the parameter V controls how much V3 gets weighted into the result. 
 Lastly, the value of [1 - (U + V)] controls how much V1 gets weighted 
 into the result. Returns a matrix that results from starting with a rotation 
 matrix of <span class="NDLSystemFont">kInputRotation</span> and &quot;looking&quot; 
 <span class="NDLSystemFont">fDX</span> units in the z direction, and <span 
 class="NDLSystemFont">fDY</span> units in the y direction, with the directions 
 relative to the <span class="NDLSystemFont">kInputRotation</span> argument. 
 Finally, the resulting look vector is converted to a rotation matrix that 
 obeys the <span class="NDLSystemFont">kUp</span> vector argument.</p>

<p class="NDLRefMemberFunction">static bool SharesDataStreams(<span class="NDLSystemFont"><a href="../../Reference/NiMesh/NiMesh.htm">NiMesh</a></span>* 
 pkMeshA, <span class="NDLSystemFont"><a href="../../Reference/NiMesh/NiMesh.htm">NiMesh</a></span>* 
 pkMeshB)</p>

<p class="NDLRefMemberDescription">Returns true if any streams are shared 
 between the two <span class="NDLSystemFont">NiMesh</span> objects.</p>

<p class="NDLRefMemberFunction">static void WeldVertices(<span class="NDLSystemFont"><a href="../../Reference/NiMesh/NiMesh.htm">NiMesh</a></span>* 
 pkMesh)</p>

<p class="NDLRefMemberDescription">Welds all the vertices in the specified 
 mesh if it can be welded. A vertex is defined by a slice through all of 
 the vertex data streams and can be welded if they are all equal. The index 
 buffer on the mesh is adjusted accordingly.</p>

<p class="NDLRefMemberFunction">static void RemoveUnusedVertices(<span class="NDLSystemFont"><a href="../../Reference/NiMesh/NiMesh.htm">NiMesh</a></span>* 
 pkMesh)</p>

<p class="NDLRefMemberDescription">Looks through all sub-meshes and removes 
 any data from all vertex streams that are not referenced by the index 
 buffer. Note, this is a no-op for non-indexed mesh.</p>

<p class="NDLRefMemberFunction">static void <a name="ViewIndependentOptimization"></a>ViewIndependentOptimization(<span 
 class="NDLSystemFont"><a href="../../Reference/NiMesh/NiMesh.htm">NiMesh</a></span>* 
 pkMesh, const float fSizeModifier, const float fNormalModifier, const 
 float fPositionModifier)</p>

<p class="NDLRefMemberDescription">Sorts the index buffers to optimize the 
 mesh in a generic view independent way for better intra-object Z-buffer 
 rejection using three assumptions. First, larger triangles are more likely 
 to occlude smaller triangles and should come first in the mesh. Second, 
 outward facing triangles from the center of the mesh are more likely to 
 provide occlusion on concave meshes. Third, triangles further from the 
 center are more likely to occlude than those near the center. Note, this 
 only works on triangle lists.</p>

<p class="NDLRefMemberFunction">static void <a name="VertexCacheOptimization"></a>VertexCacheOptimization(<span 
 class="NDLSystemFont"><a href="../../Reference/NiMesh/NiMesh.htm">NiMesh</a></span>* 
 pkMesh, const NiUInt32 uiVertexCacheSize)</p>

<p class="NDLRefMemberDescription">Rearranges the vertices to match the access 
 order defined in the index buffer. Note, this only works on indexed triangle 
 lists.</p>

<p class="NDLRefMemberFunction">static void ConvertStreamsToPlatformSpecific(NiToolPipelineCloneHelper&amp; 
 kCloneHelper)</p>

<p class="NDLRefMemberDescription">Converts all streams captured in the <span 
 class="NDLSystemFont">kCloneHelper</span> to the current platforms format. 
 Note, this method assumes a renderer exists.</p>

<p class="NDLRefMemberFunction">static bool ConvertStreamToPlatformSpecific(NiToolPipelineCloneHelper&amp; 
 kCloneHelper, <a href="../../Reference/NiMesh/NiDataStream.htm">NiDataStream</a>* 
 pkDS)</p>

<p class="NDLRefMemberDescription">Converts a single stream to the current 
 platforms format. The stream must be registered with the <span class="NDLSystemFont">kCloneHelper</span>. 
 Note, this method assumes a renderer exists.</p>

<p class="NDLRefMemberFunction">static bool GenerateNormalSharing(<span class="NDLSystemFont"><a href="../../Reference/NiMesh/NiMesh.htm">NiMesh</a></span>* 
 pkMesh, const <a href="../../Reference/NiMain/NiFixedString.htm">NiFixedString</a>&amp; 
 kPosnSemantic, const NiUInt16 uiPosnIndex, const <a href="../../Reference/NiMain/NiFixedString.htm">NiFixedString</a>&amp; 
 kNormSemantic, const NiUInt16 uiNormIndex)</p>

<p class="NDLRefMemberDescription">Computes normal sharing information for 
 a mesh. This function finds vertices on the mesh that have the same normal, 
 and places them in the same normal sharing group. Data streams are added 
 to the mesh for the contents of each group (semantic <span class="NDLSystemFont">NORMALSHAREGROUP</span>, 
 index 0) and the list of which group each vertex belongs to (semantic 
 <span class="NDLSystemFont">NORMALSHAREINDEX</span>, index 0), unless the 
 streams already exist. The streams are created with access <span class="NDLSystemFont">CPU_READ</span> 
 and <span class="NDLSystemFont">CPU_WRITE_STATIC</span>, usage <span class="NDLSystemFont">USAGE_USER</span> 
 and cloning set to share.</p>

<p class="NDLRefMemberDescription">Note that this function does not attempt 
 to share the <span class="NDLSystemFont">NORMALSHAREGROUP</span> and <span 
 class="NDLSystemFont">NORMALSHAREINDEX</span> streams among already existing 
 clones of the mesh.</p>

<p class="NDLRefMemberDescription">Normal sharing is computed for all sub-meshes. 
 Vertices used in different sub-meshes will not be found to share a normal 
 vector, even if they share a common location and normal direction. Code 
 that re-arranges vertices must-re-call this function to compute new normal 
 sharing information, because the <span class="NDLSystemFont">NORMALSHAREINDEX</span> 
 stream depends on the vertex ordering. Any <a href="../../Reference/NiMesh/NiDataStreamRef.htm">NiDataStreamRef</a> 
 pointers for the mesh will be invalid when this function is called for the 
 second or subsequent times. These streams could also be updated directly 
 if the mapping from old to new vertex locations are available.</p>

<p class="NDLRefMemberDescription">The i'th entry in the <span class="NDLSystemFont">NORMALSHAREINDEX</span> 
 stream is the location in the <span class="NDLSystemFont">NORMALSHAREGROUP</span> 
 stream to look for information about the share group for the i'th vertex.</p>

<p class="NDLRefMemberDescription">The <span class="NDLSystemFont">NORMALSHAREGROUP</span> 
 stream always has a 0 in the first location, which is used for vertices 
 that do not share their normal with any other vertices. After that, there 
 is a sequence of &lt;count, vertex1, vertex2, ...&gt; sets, each consisting 
 of a count of the number of vertices that are in a group, followed by 
 the indices for those vertices, followed by another count, followed by 
 more indices, and so on.</p>

<a name="MakeSubmeshesForGPUSkinning"></a><p class="NDLRefMemberFunction">static bool MakeSubmeshesForGPUSkinning(NiToolPipelineCloneHelper&amp; 
 kCloneHelper, NiToolPipelineCloneHelper::CloneSetPtr&amp; spCloneSet, 
 unsigned char ucBonesPerSubmesh)</p>

<p class="NDLRefMemberDescription">Constructs a GPU-ready skinned mesh. Take 
 an existing mesh (or set) and breaks it into submeshes based on the input 
 number of bones per submesh. The method assumes that all mesh in the clone-set 
 have the same parameters for <a href="../../Reference/NiMesh/NiSkinningMeshModifier.htm">NiSkinningMeshModifier</a>, 
 etc. The method also assumes that the streams are lockable for TOOL_READ 
 and that the mesh consist of triangles, not tri-strips or any other primitive. 
 Finally, the number of bones per vertex will be 4.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
