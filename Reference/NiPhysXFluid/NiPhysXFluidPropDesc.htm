<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiPhysXFluidPropDesc</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiPhysXFluidPropDesc</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../NiPhysX/NiPhysXPropDesc.htm">NiPhysXPropDesc</a></span></p>


<p class="NDLRefHeaderFile">&lt;NiPhysXFluidPropDesc.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/class_ni_phys_x_fluid_prop_desc.gif" alt="Inheritance graph for NiPhysXFluidPropDesc"/>
  <p class="FigureCaption">Inheritance graph for NiPhysXFluidPropDesc</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal"><span class="NDLSystemFont">NiPhysXFluidPropDesc</span> objects add support for fluid actors to the <span class="NDLSystemFont"><a href="../NiPhysX/NiPhysXPropDesc.htm">NiPhysXPropDesc</a></span> class. </p>
<p class="NDLNormal">They store an internal array of smart pointers to <span class="NDLSystemFont"><a href="NiPhysXFluidDesc.htm">NiPhysXFluidDesc</a></span> objects. </p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="class_ni_phys_x_fluid_prop_desc_1a1eb383d6ff3181a114919f2a544b9da4"></a>
<p class="NDLRefMemberFunction">NiPhysXFluidPropDesc(<span class="NDLSystemFont">NiUInt32</span> uiMaterialHashSize = 29)</p>
<p class="NDLRefMemberDescription">Constructor. </p>
<p class="NDLRefMemberDetailedDescription">The hash table size is passed to the base class constructor. </p>

<a name="class_ni_phys_x_fluid_prop_desc_1aec4a429aa33166669868c2b064c144fb"></a>
<p class="NDLRefMemberFunction">virtual ~NiPhysXFluidPropDesc()</p>
<p class="NDLRefMemberDescription">Destructor. </p>

<a name="class_ni_phys_x_fluid_prop_desc_1a615992cef9d302bfa124e93d86656aed"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  GetNumFluids() const</p>
<p class="NDLRefMemberDescription">Return the number of fluids in this prop. </p>

<a name="class_ni_phys_x_fluid_prop_desc_1a2c8e51130e4ee3839b16446d6ff290e2"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">NiPhysXFluidDescPtr</a></span>  GetFluidDesc(<span class="NDLSystemFont">NiUInt32</span> uiIndex)</p>
<p class="NDLRefMemberDescription">Return the fluid at the given index. </p>
<p class="NDLRefMemberDetailedDescription">There is no range checking - the index must be less than the value returned by <span class="NDLSystemFont"><a href="NiPhysXFluidPropDesc.htm#class_ni_phys_x_fluid_prop_desc_1a615992cef9d302bfa124e93d86656aed">GetNumFluids()</a></span>. </p>

<a name="class_ni_phys_x_fluid_prop_desc_1ab5373221024091e17d0d27d0a49256e3"></a>
<p class="NDLRefMemberFunction">void  AddFluidDesc(<span class="NDLSystemFont"><a href="NiPhysXFluidDesc.htm">NiPhysXFluidDesc</a></span>* pkFluidDesc)</p>
<p class="NDLRefMemberDescription">Add a fluid to the internal array. </p>

<a name="class_ni_phys_x_fluid_prop_desc_1a3c4e8941a5305bff40ae3e914f2cf8db"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">NiPhysXFluidDescPtr</a></span>  RemoveFluidDesc(<span class="NDLSystemFont">NiUInt32</span> uiIndex)</p>
<p class="NDLRefMemberDescription">Remove a fluid at the specified location from the internal array and return it. </p>
<p class="NDLRefMemberDetailedDescription">This fills the gap in the array left by the removed fluid. </p>
<a name="content_instantiation_functions"></a>
<p class="NDLRefHead1">Content Instantiation Functions</p>

<p class="NDLRefMemberDescription">These functions control the creation and removal of PhysX content from a scene.</p>
<p class="NDLRefMemberDescription">They should rarely, if ever, be called directly from an application. Rather, they are called by <span class="NDLSystemFont"><a href="../NiPhysX/NiPhysXScene.htm">NiPhysXScene</a></span> functions when a prop is added to or removed from the scene. </p>

<a name="class_ni_phys_x_fluid_prop_desc_1a20bd36d0c9a95c410f30467f5574c9a6"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  CreateInScene(<br/>NxScene* pkScene, <br/>const NxMat34& kXform, <br/>NxCompartment* pkRBCompartment, <br/>NxCompartment* pkClothCompartment, <br/>NxCompartment* pkFluidCompartment, <br/>const <span class="NDLSystemFont">bool</span> bKeepMeshes = false, <br/>const <span class="NDLSystemFont">NiUInt32</span> uiIndex = 0)</p>
<p class="NDLRefMemberDescription">Create a PhysX scene based on this descriptor. </p>
<p class="NDLRefMemberDetailedDescription">The base class function is called first, and then fluids are created in the scene.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pkScene</span></td>
    <td>The scene to instantiate content in. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kXform</span></td>
    <td>A transformation to apply to all the PhysX content before instantiating. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkRBCompartment</span></td>
    <td>The rigid body compartment to use for the actors and joints in the scene. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkClothCompartment</span></td>
    <td>The compartment to use for the cloth objects in this descriptor. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkFluidCompartment</span></td>
    <td>The compartment to use for the any fluids in this scene (available for derived classes). </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">bKeepMeshes</span></td>
    <td>If true, mesh data is kept after creation, otherwise it is deleted. See the documentation for <span class="NDLSystemFont"><a href="../NiPhysX/NiPhysXMeshDesc.htm">NiPhysXMeshDesc</a></span>. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiIndex</span></td>
    <td>The index for the state to use when setting poses, velocities and other initial conditions. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_phys_x_fluid_prop_desc_1ad8339f69b252cc0d0abb94709f9da98b"></a>
<p class="NDLRefMemberFunction">virtual void  RemoveFromScene(NxScene* pkScene)</p>
<p class="NDLRefMemberDescription">Remove any fluids from the scene, and then call the base class version. </p>

<a name="class_ni_phys_x_fluid_prop_desc_1afb12f1587b6da0c1e9fc51bcf5eda8d5"></a>
<p class="NDLRefMemberFunction">virtual void  RestoreState(<br/>NxScene* pkScene, <br/>const <span class="NDLSystemFont">NiUInt32</span> uiIndex, <br/>const NxMat34& kXform, <br/>const <span class="NDLSystemFont">bool</span> bKeepMeshes = false)</p>
<p class="NDLRefMemberDescription">Reset the fluid and then restore other state to the given scene. </p>
<p class="NDLRefMemberDetailedDescription">There is no state caching for fluids, because the memory overhead would be large and we see little utility for most users. Instead, this function removes all the particles from the simulation and resets the particle system before calling the base class version of the function. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
