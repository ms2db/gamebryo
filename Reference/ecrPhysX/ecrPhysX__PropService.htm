<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>ecrPhysX::PropService</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">ecrPhysX::PropService</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../efd/efd__ISystemService.htm">efd::ISystemService</a></span></p>


<p class="NDLRefHeaderFile">&lt;PropService.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classecr_phys_x_1_1_prop_service.gif" alt="Inheritance graph for ecrPhysX::PropService"/>
  <p class="FigureCaption">Inheritance graph for ecrPhysX::PropService</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">The Prop Service interfaces between the Core Runtime NiPhysX system and the GameFramework entity system. </p>
<p class="NDLNormal">Its primary purpose is to support the loading and simulation of PhysX assets streamed in Nif files.</p>
<p class="NDLNormal">An entity may have one or more NiPhysXProps associated with it; currently the only path for creating such associations is by loading them from a NIF file. Multiple props are typically used by the Gamebryo toolchain to compartmentalize rigid bodies, cloth, and particles/fluids. </p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classecr_phys_x_1_1_prop_service_1aefde9d9768ac8ce737e61f4478630061"></a>
<p class="NDLRefMemberFunction">void  HandleStartingSimulationMessage(<br/>const <span class="NDLSystemFont"><a href="../egfPhysX/egfPhysX__SimulationMessage.htm">egfPhysX::SimulationMessage</a></span>* pMessage, <br/><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span> targetChannel)</p>
<p class="NDLRefMemberDescription">Handlers for simulation messages from the scene service. </p>

<a name="classecr_phys_x_1_1_prop_service_1a30dbc5032183c260873abf599cf07a5c"></a>
<p class="NDLRefMemberFunction">void  HandleFinishingSimulationMessage(<br/>const <span class="NDLSystemFont"><a href="../egfPhysX/egfPhysX__SimulationMessage.htm">egfPhysX::SimulationMessage</a></span>* pMessage, <br/><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span> targetChannel)</p>
<p class="NDLRefMemberDescription">Handlers for simulation messages from the scene service. </p>

<a name="classecr_phys_x_1_1_prop_service_1a9c4fde06e5cdb4bef846c6d6dd988f86"></a>
<p class="NDLRefMemberFunction">void  HandleSimulationTimeUpdateMessage(<br/>const <span class="NDLSystemFont"><a href="../egfPhysX/egfPhysX__SimulationMessage.htm">egfPhysX::SimulationMessage</a></span>* pMessage, <br/><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span> targetChannel)</p>
<p class="NDLRefMemberDescription">Handlers for simulation messages from the scene service. </p>

<a name="classecr_phys_x_1_1_prop_service_1ad298bdbc61bb14768c18801d77622d67"></a>
<p class="NDLRefMemberFunction">void  ApplyTorque(<br/>const <span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span>& eid, <br/><span class="NDLSystemFont"><a href="../efd/efd__Point3.htm">efd::Point3</a></span> torque)</p>
<p class="NDLRefMemberDescription">Support for built-ins applying torques. </p>
<p class="NDLRefMemberDetailedDescription">Apply a given torque vector to all actors in an entity. </p>

<a name="classecr_phys_x_1_1_prop_service_1aa3d24cf0ded8aea331e15facf0d3e6ac"></a>
<p class="NDLRefMemberFunction">void  SendPropAddedMessage(<span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span> entityID)</p>
<p class="NDLRefMemberDescription">Send messages. </p>

<a name="classecr_phys_x_1_1_prop_service_1a3ffa45ec4aeac981fb5e5eb259d925ee"></a>
<p class="NDLRefMemberFunction">void  SendPropRemovingMessage(<span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span> entityID)</p>
<p class="NDLRefMemberDescription">Handlers for simulation messages from the scene service. </p>

<a name="classecr_phys_x_1_1_prop_service_1a3cb6e4001f65cfe75ee025359054c273"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  GetDebugRender(const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& sceneName)</p>
<p class="NDLRefMemberDescription">Support for built-ins querying status of debug geometry. </p>
<p class="NDLRefMemberDetailedDescription">Returns false if we can't find a scene of the given name. </p>

<a name="classecr_phys_x_1_1_prop_service_1aa62f86fdfccacd8683c5f8d5dde5b3d7"></a>
<p class="NDLRefMemberFunction">void  SetDebugRender(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& sceneName, <br/><span class="NDLSystemFont">efd::Bool</span> bActive)</p>
<p class="NDLRefMemberDescription">Support for built-ins turning debug geometry on or off. </p>
<p class="NDLRefMemberDetailedDescription">Visualization scale is set to the scale of the first PhysX scene activated, which may cause problems when multiple PhysX scenes at different scales are being visualized. </p>

<a name="classecr_phys_x_1_1_prop_service_1a7ab6358bae645605418109464560b209"></a>
<p class="NDLRefMemberFunction">void  ClearDebugGeometry(const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& sceneName)</p>
<p class="NDLRefMemberDescription">Support for built-ins purging debug geometry. </p>

<a name="classecr_phys_x_1_1_prop_service_1acc19de5cff4d78896aa84474daa250ae"></a>
<p class="NDLRefMemberFunction">void  ApplyForce(<br/>const <span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span>& eid, <br/><span class="NDLSystemFont"><a href="../efd/efd__Point3.htm">efd::Point3</a></span> force)</p>
<p class="NDLRefMemberDescription">Support for built-ins applying forces. </p>
<p class="NDLRefMemberDetailedDescription">Apply a given force vector to all actors in an entity. </p>

<a name="classecr_phys_x_1_1_prop_service_1a2882e58773bc23d335b7c4515b6c06f3"></a>
<p class="NDLRefMemberFunction">void  ApplyForceAtPos(<br/>const <span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span>& eid, <br/><span class="NDLSystemFont"><a href="../efd/efd__Point3.htm">efd::Point3</a></span> force, <br/><span class="NDLSystemFont"><a href="../efd/efd__Point3.htm">efd::Point3</a></span> pos)</p>
<p class="NDLRefMemberDescription">Apply a given force vector at a particular point. </p>

<a name="classecr_phys_x_1_1_prop_service_1a8c5bf24633be463cc67d8093c94ba357"></a>
<p class="NDLRefMemberFunction">PropService(<span class="NDLSystemFont">bool</span> runSynchronously = false)</p>
<p class="NDLRefMemberDetailedDescription">Default constructor; sets member initial values and default service priority. </p>

<a name="classecr_phys_x_1_1_prop_service_1a0d20204824d5a3f405489aae4469fcb2"></a>
<p class="NDLRefMemberFunction">void  SetWorkflowManager(<span class="NDLSystemFont"><a href="../NiFloodgate/NiSPWorkflowManager.htm">NiSPWorkflowManager</a></span>* pManager)</p>
<p class="NDLRefMemberDescription">Provide a <span class="NDLSystemFont"><a href="../NiFloodgate/NiSPWorkflowManager.htm">NiSPWorkflowManager</a></span> to be used by <span class="NDLSystemFont"><a href="../NiPhysX/NiPhysXScene.htm">NiPhysXScene</a></span> objects. </p>
<p class="NDLRefMemberDetailedDescription">The workflow manager that is provided is used for all subsequently created <span class="NDLSystemFont"><a href="../NiPhysX/NiPhysXScene.htm">NiPhysXScene</a></span> objects. It is recommended that this be called during OnPreInit or OnInit, using the object returned by <span class="NDLSystemFont"><a href="../ecr/ecr__SceneGraphService.htm#classecr_1_1_scene_graph_service_1a8e809315778a975cd8f54a95882effcb">ecr::SceneGraphService::GetWorkflowManager</a></span>. </p>

<a name="classecr_phys_x_1_1_prop_service_1a798fe6f5b210547471b65b503b8a0ad2"></a>
<p class="NDLRefMemberFunction">void  SetAsynchronousSimulation(<span class="NDLSystemFont">efd::Bool</span> bIsAsynchronous)</p>
<p class="NDLRefMemberDescription">Set the value of AsynchronousSimulation to be used by <span class="NDLSystemFont"><a href="../NiPhysX/NiPhysXScene.htm">NiPhysXScene</a></span> objects. </p>
<p class="NDLRefMemberDetailedDescription">The value provided is used for all subsequently created <span class="NDLSystemFont"><a href="../NiPhysX/NiPhysXScene.htm">NiPhysXScene</a></span> objects. It is recommended that this be called before or during OnPreInit. All PhysX related services should use the same value for this flag. </p>

<a name="classecr_phys_x_1_1_prop_service_1adabadfc47cc375ceed8dd4a0d7074b65"></a>
<p class="NDLRefMemberFunction">virtual void  UpdateSources(<span class="NDLSystemFont">efd::Bool</span> bForce)</p>
<p class="NDLRefMemberDescription">Make a call to UpdateSources for all sources in this prop. </p>
<p class="NDLRefMemberDetailedDescription">For more information see the <span class="NDLSystemFont"><a href="../NiPhysX/NiPhysXProp.htm">NiPhysXProp</a></span> class reference. </p>

<a name="classecr_phys_x_1_1_prop_service_1aaf883a7809d0b560c7903cf218556f6d"></a>
<p class="NDLRefMemberFunction">void  UpdateSources()</p>
<p class="NDLRefMemberDescription">A version of UpdateSources that defaults to a non-forced update. </p>
<p class="NDLRefMemberDetailedDescription">This method simply calls the virtual method with a 'false' parameter. This method is called once per frame as a frame event. </p>

<a name="classecr_phys_x_1_1_prop_service_1a5c7599a43f73be13d26b09564ff05e7d"></a>
<p class="NDLRefMemberFunction">virtual void  UpdateDestinations(<span class="NDLSystemFont">efd::Bool</span> bForce)</p>
<p class="NDLRefMemberDescription">Make a call to UpdateDestinations for all destinations in this prop. </p>
<p class="NDLRefMemberDetailedDescription">For more information see the <span class="NDLSystemFont"><a href="../NiPhysX/NiPhysXProp.htm">NiPhysXProp</a></span> class reference. </p>

<a name="classecr_phys_x_1_1_prop_service_1a2cc0c17e9a250c74618eb0b59eab9906"></a>
<p class="NDLRefMemberFunction">void  UpdateDestinations()</p>
<p class="NDLRefMemberDescription">A version of UpdateDestinations that defaults to a non-forced update. </p>
<p class="NDLRefMemberDetailedDescription">This method simply calls the virtual method with a 'false' parameter. This method is called once per frame as a frame event. </p>

<a name="classecr_phys_x_1_1_prop_service_1acbb805cf98297869e8973535fbeaa4af"></a>
<p class="NDLRefMemberFunction">void  HandleEntityUpdatedMessage(<br/>const <span class="NDLSystemFont"><a href="../egf/egf__EntityChangeMessage.htm">egf::EntityChangeMessage</a></span>* pMessage, <br/><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span> targetChannel)</p>
<p class="NDLRefMemberDescription">Handler for changes to the entity via rapid iteration. </p>
<p class="NDLRefMemberDetailedDescription">May use PendPropData() to queue <span class="NDLSystemFont">PropData</span> for processing in <span class="NDLSystemFont"><a href="ecrPhysX__PropService.htm#classecr_phys_x_1_1_prop_service_1ad806d37b28bd1e89cff4ef15248aed5d">OnTick()</a></span>. </p>

<a name="classecr_phys_x_1_1_prop_service_1a0d2f4e1c27ac3e88bd9efd241afcaddb"></a>
<p class="NDLRefMemberFunction">void  HandleEntityRemovedMessage(<br/>const <span class="NDLSystemFont"><a href="../egf/egf__EntityChangeMessage.htm">egf::EntityChangeMessage</a></span>* pMessage, <br/><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span> targetChannel)</p>
<p class="NDLRefMemberDescription">Handler for entities being removed from the scheduler. </p>
<p class="NDLRefMemberDetailedDescription">We only update trigger related data when the entity is removed. Everything else related to the prop will be handled when <span class="NDLSystemFont"><a href="ecrPhysX__PropService.htm#classecr_phys_x_1_1_prop_service_1a777bf3607c6cfb474f29166f77707c08">HandleSceneGraphRemovedMessage()</a></span>is called. </p>

<a name="classecr_phys_x_1_1_prop_service_1a10b71a213caa14cb69b82578dafd721c"></a>
<p class="NDLRefMemberFunction">void  HandleSceneGraphAddedMessage(<br/>const <span class="NDLSystemFont"><a href="../ecr/ecr__SceneGraphMessage.htm">ecr::SceneGraphMessage</a></span>* pMessage, <br/><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span> targetChannel)</p>
<p class="NDLRefMemberDescription">Handler for adding scene graphs when Nifs are loaded. </p>

<a name="classecr_phys_x_1_1_prop_service_1a777bf3607c6cfb474f29166f77707c08"></a>
<p class="NDLRefMemberFunction">void  HandleSceneGraphRemovedMessage(<br/>const <span class="NDLSystemFont"><a href="../ecr/ecr__SceneGraphMessage.htm">ecr::SceneGraphMessage</a></span>* pMessage, <br/><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span> targetChannel)</p>
<p class="NDLRefMemberDescription">Handler for removing scene graphs. </p>

<a name="classecr_phys_x_1_1_prop_service_1a99407491de4db77fbc55568bdee4f093"></a>
<p class="NDLRefMemberFunction">void  HandleSceneAddedMessage(<br/>const <span class="NDLSystemFont"><a href="../egfPhysX/egfPhysX__SceneMessage.htm">egfPhysX::SceneMessage</a></span>* pMessage, <br/><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span> targetChannel)</p>
<p class="NDLRefMemberDescription">Handler for changes in the <span class="NDLSystemFont"><a href="../egfPhysX/egfPhysX__SceneService.htm">egfPhysX::SceneService</a></span>. </p>

<a name="classecr_phys_x_1_1_prop_service_1a73dc5e56fa2f42786e6602cfbf1e0799"></a>
<p class="NDLRefMemberFunction">void  HandleSceneRemovingMessage(<br/>const <span class="NDLSystemFont"><a href="../egfPhysX/egfPhysX__SceneMessage.htm">egfPhysX::SceneMessage</a></span>* pMessage, <br/><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span> targetChannel)</p>
<p class="NDLRefMemberDescription">Handler for changes in the <span class="NDLSystemFont"><a href="../egfPhysX/egfPhysX__SceneService.htm">egfPhysX::SceneService</a></span> - called when the scene will be removed but is still accessible in SceneService's data structures. </p>

<a name="classecr_phys_x_1_1_prop_service_1a17b8fe0e1545c8fb7b447380770f08d6"></a>
<p class="NDLRefMemberFunction">void  HandleSceneRemovedMessage(<br/>const <span class="NDLSystemFont"><a href="../egfPhysX/egfPhysX__SceneMessage.htm">egfPhysX::SceneMessage</a></span>* pMessage, <br/><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span> targetChannel)</p>
<p class="NDLRefMemberDescription">Handler for changes in the <span class="NDLSystemFont"><a href="../egfPhysX/egfPhysX__SceneService.htm">egfPhysX::SceneService</a></span> - called after the scene is no longer accessible via SceneService's data structures. </p>

<a name="classecr_phys_x_1_1_prop_service_1a12a6953082b604a7daa6e2d9c7f33bee"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  ResetState(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& sceneName, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> stateID)</p>
<p class="NDLRefMemberDescription">Resets the PhysX scene called sceneName to the specified stateID. </p>
<p class="NDLRefMemberDetailedDescription">Return true if the scene is found. Otherwise return false. </p>

<a name="classecr_phys_x_1_1_prop_service_1a063a6c70fe40c4eda5901eb371876911"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetNumProps(const <span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span>& eid)</p>
<p class="NDLRefMemberDescription">Returns how many NiPhysXProps are associated with this entity. </p>

<a name="classecr_phys_x_1_1_prop_service_1a4568723f4cc8cc928074b33c88dd528e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../NiPhysX/NiPhysXProp.htm">NiPhysXProp</a></span>*  GetPropAt(<br/>const <span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span>& eid, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> index)</p>
<p class="NDLRefMemberDescription">Gets the <span class="NDLSystemFont"><a href="../NiPhysX/NiPhysXProp.htm">NiPhysXProp</a></span> associated with this entity ID at the given index. </p>

<a name="classecr_phys_x_1_1_prop_service_1ac8e6e6c75eb8338f853410419ee7c3c7"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../NiPhysX/NiPhysXScene.htm">NiPhysXScene</a></span>*  GetScene(const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& sceneName)</p>
<p class="NDLRefMemberDescription">Gets the <span class="NDLSystemFont"><a href="../NiPhysX/NiPhysXScene.htm">NiPhysXScene</a></span> with the given name. </p>

<a name="classecr_phys_x_1_1_prop_service_1a30da0e23478a28b8045b2575731fa7da"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../NiPhysX/NiPhysXScene.htm">NiPhysXScene</a></span>*  GetPropCurrentScene(const <span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span>& eid)</p>
<p class="NDLRefMemberDescription">Gets the <span class="NDLSystemFont"><a href="../NiPhysX/NiPhysXScene.htm">NiPhysXScene</a></span> that the given prop is currently instantiated in, or NULL if the prop is not in any scene at this time. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
