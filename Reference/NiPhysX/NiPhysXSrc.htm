<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiPhysXSrc</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiPhysXSrc</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../NiMain/NiObject.htm">NiObject</a></span></p>


<p class="NDLRefHeaderFile">&lt;NiPhysXSrc.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/class_ni_phys_x_src.gif" alt="Inheritance graph for NiPhysXSrc"/>
  <p class="FigureCaption">Inheritance graph for NiPhysXSrc</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">A source in the Gamebryo-PhysX package is a link between a Gamebryo node that is being driven by animation and a PhysX actor that is intended to in some way mirror the behaviors in the physics simulation. </p>
<p class="NDLNormal"><span class="NDLSystemFont">NiPhysXSrc</span> is an abstract base class from which all such objects are derived.</p>
<p class="NDLNormal">In addition to decalring virtual update functions, the class stores a flag indicating activity and another controlling interpolation of state. Derived classes should only transfer state if the source is active (unless forced), and should implement interpolation in an appropriate form. </p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="class_ni_phys_x_src_1aca834e6c60304274c9012a60fe77551f"></a>
<p class="NDLRefMemberFunction">NiPhysXSrc()</p>
<p class="NDLRefMemberDescription">Constructor. </p>
<p class="NDLRefMemberDetailedDescription">Sets the source as active and interpolation off. </p>

<a name="class_ni_phys_x_src_1a023ea7b01edd648a8702cd24efc200f2"></a>
<p class="NDLRefMemberFunction">~NiPhysXSrc()</p>
<p class="NDLRefMemberDescription">Destructor does nothing. </p>

<a name="class_ni_phys_x_src_1a70613921c1b5a941fd80d84077f6c5e8"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetActive() const</p>
<p class="NDLRefMemberDescription">Return the activity flag. </p>

<a name="class_ni_phys_x_src_1a800292c95b6c909a88a06ec0df277cef"></a>
<p class="NDLRefMemberFunction">void  SetActive(const <span class="NDLSystemFont">bool</span> bActive)</p>
<p class="NDLRefMemberDescription">Set the activity flag. </p>

<a name="class_ni_phys_x_src_1a1c351a02f9c8f2c7a332c6a793add0d2"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetInterpolate() const</p>
<p class="NDLRefMemberDescription">Get the interpolation flag. </p>

<a name="class_ni_phys_x_src_1a339ed296fdb430cbe803541871d6be99"></a>
<p class="NDLRefMemberFunction">void  SetInterpolate(const <span class="NDLSystemFont">bool</span> bActive)</p>
<p class="NDLRefMemberDescription">Set the interpolation flag. </p>
<a name="update_functions"></a>
<p class="NDLRefHead1">Update Functions</p>

<p class="NDLRefMemberDescription">These functions work together to transfer state from a scene graph node to a PhysX actor.</p>
<p class="NDLRefMemberDescription">If this instance is not active, then they do nothing unless forced. They are split into two functions because the second, UpdateToActors requires access to the PhysX SDK lock, while the first does not. Both might touch the scene graph. </p>

<a name="class_ni_phys_x_src_1af7b47882235a2c0e78100332c34f0398"></a>
<p class="NDLRefMemberFunction">virtual void  UpdateFromSceneGraph(<br/>const float fT, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiTransform.htm">NiTransform</a></span>& kInvRootTransform, <br/>const float fScaleWToP, <br/>const <span class="NDLSystemFont">bool</span> bForce = false) = 0</p>
<p class="NDLRefMemberDescription">Perform any update work to extract state from the Gamebryo scene graph. </p>
<p class="NDLRefMemberDetailedDescription">The function is typically called via <span class="NDLSystemFont"><a href="NiPhysXScene.htm#class_ni_phys_x_scene_1a25b17b6cb10936c6afd3f55fe41d1a50">NiPhysXScene::UpdateSources</a></span>. It must not do work that requires access to the PhysX SDK lock.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">fT</span></td>
    <td>The application time, which can be used to tag the extracted state. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kInvRootTransform</span></td>
    <td>The inverse of global transformation applied to the PhysX scene. This transform converts Gamebryo world coordinates to PhysX global coordinates. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fScaleWToP</span></td>
    <td>All positions and velocities are scaled by fScalePToW after they are transformed by kRootTransform. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">bForce</span></td>
    <td>If true, derived classes should do the update regardless of internal state. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_phys_x_src_1a6e47ed5be395a40a4807c1b540c497a6"></a>
<p class="NDLRefMemberFunction">virtual void  UpdateToActors(<br/>const float fTBegin, <br/>const float fTEnd) = 0</p>
<p class="NDLRefMemberDescription">This function is called on all sources immediately before a simulation step is started. </p>
<p class="NDLRefMemberDetailedDescription">It must push any state into the PhysX actors that are being controlled by the source. A lock is held on the PhysX SDK by the <span class="NDLSystemFont"><a href="NiPhysXScene.htm">NiPhysXScene</a></span> that calls this function, so derived classes should not attempt to gain the lock in this function.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">fTBegin</span></td>
    <td>The application time at the beginning of the simulation step. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fTEnd</span></td>
    <td>The time that PhysX is stepping to. </td>
</tr>

        </tbody>
    </table>
</div>


 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
