<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiPhysXPropDesc</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiPhysXPropDesc</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../NiMain/NiObject.htm">NiObject</a></span></p>


<p class="NDLRefHeaderFile">&lt;NiPhysXPropDesc.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/class_ni_phys_x_prop_desc.gif" alt="Inheritance graph for NiPhysXPropDesc"/>
  <p class="FigureCaption">Inheritance graph for NiPhysXPropDesc</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal"><span class="NDLSystemFont">NiPhysXPropDesc</span> objects are for caching the data required to create PhysX objects and attach them to a scene graph. </p>
<p class="NDLNormal">In addition, they can store multiple copies of pose and velocity information. They are the objects streamed to save or load PhysX actors (rigid, cloth and fluid) and are the objects stored as snapshots in <span class="NDLSystemFont"><a href="NiPhysXProp.htm">NiPhysXProp</a></span> objects. Instances of this class are typically created in art tools, or modified after loading from a stream but before instantiating the PhysX.</p>
<p class="NDLNormal"><span class="NDLSystemFont">NiPhysXPropDesc</span> also implement cloning behavior for PhysX content. </p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="class_ni_phys_x_prop_desc_1a14733db18d867e4b206406a18d0f7baf"></a>
<p class="NDLRefMemberFunction">NiPhysXPropDesc(<br/><span class="NDLSystemFont">NiUInt32</span> uiMaterialHashSize = 7, <br/><span class="NDLSystemFont">NiUInt32</span> uiStateMapSize = 3)</p>
<p class="NDLRefMemberDescription">Constructor. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">uiMaterialHashSize</span></td>
    <td>The size of the hash table used to store materials. It should be a prime number that is greater than the total number of materials needed for the prop, or could be smaller if memory consumption is more important that speed. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiStateMapSize</span></td>
    <td>The size of the hash table used to map saved state indexes onto names. It should be a prime number that is greater than the number of saved states, or smaller if memory is of concern. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_phys_x_prop_desc_1a8da6afad5c10c15d2c9c686f00f92c00"></a>
<p class="NDLRefMemberFunction">virtual ~NiPhysXPropDesc()</p>
<p class="NDLRefMemberDescription">Destructor. </p>

<a name="class_ni_phys_x_prop_desc_1a6eaf6a111c328d9a68efcf7e2feabfc5"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetUseHardware() const</p>
<p class="NDLRefMemberDescription">Get the flag controlling hardware targeting. </p>
<p class="NDLRefMemberDetailedDescription">If true, the creator of the prop expected hardware simulation. </p>

<a name="class_ni_phys_x_prop_desc_1aa12cfdef44faa83788e4fa42ed3f13bf"></a>
<p class="NDLRefMemberFunction">void  SetUseHardware(const <span class="NDLSystemFont">bool</span> bHardware)</p>
<p class="NDLRefMemberDescription">Set the flag indicating that simulation should occur on hardware. </p>
<a name="actor_array_functions"></a>
<p class="NDLRefHead1">Actor Array Functions</p>

<p class="NDLRefMemberDescription">These functions provide access to the array of actors stored in this object.</p>
<p class="NDLRefMemberDescription">Applications may wish to access these to modify the actor descriptions before the prop is instantiated in a scene, or when creating a prop in code.</p>
<p class="NDLRefMemberDescription">Note that the internal array stores smart pointers to the objects. </p>

<a name="class_ni_phys_x_prop_desc_1a008438e813199819c4b83cb2aba57d2f"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  GetActorCount() const</p>
<p class="NDLRefMemberDescription">Returns the number of actors in the array. </p>

<a name="class_ni_phys_x_prop_desc_1a3b312c54ff49ee0202e27a1fe7d95507"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">NiPhysXActorDescPtr</a></span>  GetActorAt(<span class="NDLSystemFont">NiUInt32</span> uiIndex)</p>
<p class="NDLRefMemberDescription">Returns the actor at a given index in the array. </p>

<a name="class_ni_phys_x_prop_desc_1ac9c17e553cbf03933ac400c53f7f5e03"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  AddActor(<span class="NDLSystemFont"><a href="NiPhysXActorDesc.htm">NiPhysXActorDesc</a></span>* pkActorDesc)</p>
<p class="NDLRefMemberDescription">Add an actor descriptor to the array. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>The actor's location in the array. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_phys_x_prop_desc_1ac760eaa3e7cd0e7828c9af09cfbf04f7"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">NiPhysXActorDescPtr</a></span>  RemoveActorAt(<span class="NDLSystemFont">NiUInt32</span> uiIndex)</p>
<p class="NDLRefMemberDescription">Remove the actor descriptor at the given index. </p>
<p class="NDLRefMemberDetailedDescription">Returns the smart pointer at the given index, and has <span class="NDLSystemFont"><a href="../NiMain/NiTArray.htm">NiTArray::RemoveAtAndFill</a></span> semantics. </p>
<a name="cloth_array_functions"></a>
<p class="NDLRefHead1">Cloth Array Functions</p>

<p class="NDLRefMemberDescription">These functions provide access to the array of cloth descriptors stored in this object.</p>
<p class="NDLRefMemberDescription">Applications may wish to access these to modify the cloth descriptions before the prop is instantiated in a scene, or when creating a prop in code.</p>
<p class="NDLRefMemberDescription">Note that the internal array stores smart pointers to the objects. </p>

<a name="class_ni_phys_x_prop_desc_1a194d63c9907ba8be6769dec4ebc141fd"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  GetClothCount() const</p>
<p class="NDLRefMemberDescription">Returns the number of cloth descriptors in the array. </p>

<a name="class_ni_phys_x_prop_desc_1ad24a7bd1dfb0bdf1752e33219913babe"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">NiPhysXClothDescPtr</a></span>  GetClothAt(<span class="NDLSystemFont">NiUInt32</span> uiIndex)</p>
<p class="NDLRefMemberDescription">Returns the cloth descriptor at a given index in the array. </p>

<a name="class_ni_phys_x_prop_desc_1af7d135050944394cb2009403aa709e5a"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  AddCloth(<span class="NDLSystemFont"><a href="NiPhysXClothDesc.htm">NiPhysXClothDesc</a></span>* pkClothDesc)</p>
<p class="NDLRefMemberDescription">Add a cloth descriptor to the array. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>The cloth's location in the array. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_phys_x_prop_desc_1a11d2ba42e30a5bdd5b57a04db83cccb8"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">NiPhysXClothDescPtr</a></span>  RemoveClothAt(<span class="NDLSystemFont">NiUInt32</span> uiIndex)</p>
<p class="NDLRefMemberDescription">Remove the cloth descriptor at the given index. </p>
<p class="NDLRefMemberDetailedDescription">Returns the smart pointer at the given index, and has <span class="NDLSystemFont"><a href="../NiMain/NiTArray.htm">NiTArray::RemoveAtAndFill</a></span> semantics. </p>
<a name="compartment_management_functions"></a>
<p class="NDLRefHead1">Compartment Management Functions</p>

<p class="NDLRefMemberDescription">These functions allow you to specify which simulation compartment the contents of this descriptor should be created in.</p>
<p class="NDLRefMemberDescription">The identifier is the one used with the <span class="NDLSystemFont"><a href="NiPhysXScene.htm">NiPhysXScene</a></span> object when the compartment was registered, or 0 if the contents should be created in the primary scene.</p>
<p class="NDLRefMemberDescription">See the PhysX documentation for the rules for creating different types of content in compartments. </p>

<a name="class_ni_phys_x_prop_desc_1aeab70f4cd9b241e9d23964bf5d899e5d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  GetRBCompartmentID() const</p>
<p class="NDLRefMemberDescription">Get the rigid body compartment ID. </p>

<a name="class_ni_phys_x_prop_desc_1af8914de6a851124d148efb90c7526566"></a>
<p class="NDLRefMemberFunction">void  SetRBCompartmentID(const <span class="NDLSystemFont">NiUInt32</span> uiID)</p>
<p class="NDLRefMemberDescription">Set the rigid body compartment ID. </p>

<a name="class_ni_phys_x_prop_desc_1a0112111d4551cd92b0f2377de035bb5d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  GetClothCompartmentID() const</p>
<p class="NDLRefMemberDescription">Get the cloth compartment ID. </p>

<a name="class_ni_phys_x_prop_desc_1a041f9854a6b9896231a290237e5a61c0"></a>
<p class="NDLRefMemberFunction">void  SetClothCompartmentID(const <span class="NDLSystemFont">NiUInt32</span> uiID)</p>
<p class="NDLRefMemberDescription">Set the cloth compartment ID. </p>

<a name="class_ni_phys_x_prop_desc_1a28e33b17c78172836f55983fe2ea3f1b"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  GetFluidCompartmentID() const</p>
<p class="NDLRefMemberDescription">Get the fluid compartment ID. </p>

<a name="class_ni_phys_x_prop_desc_1a0b770b85d5ab46e16f13599d5612c4fb"></a>
<p class="NDLRefMemberFunction">void  SetFluidCompartmentID(const <span class="NDLSystemFont">NiUInt32</span> uiID)</p>
<p class="NDLRefMemberDescription">Set the fluid compartment ID. </p>
<a name="content_instantiation_functions"></a>
<p class="NDLRefHead1">Content Instantiation Functions</p>

<p class="NDLRefMemberDescription">These functions control the creation and removal of PhysX content from a scene.</p>
<p class="NDLRefMemberDescription">They should rarely, if ever, be called directly from an application. Rather, they are called by <span class="NDLSystemFont"><a href="NiPhysXScene.htm">NiPhysXScene</a></span> functions when a prop is added to or removed from the scene. </p>

<a name="class_ni_phys_x_prop_desc_1a4f805d60ecb475b748c68e58bc6512a2"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  CreateInScene(<br/>NxScene* pkScene, <br/>const NxMat34& kXform, <br/>NxCompartment* pkRBCompartment, <br/>NxCompartment* pkClothCompartment, <br/>NxCompartment* pkFluidCompartment, <br/>const <span class="NDLSystemFont">bool</span> bKeepMeshes = false, <br/>const <span class="NDLSystemFont">NiUInt32</span> uiIndex = 0)</p>
<p class="NDLRefMemberDescription">Create a PhysX scene based on this descriptor. </p>
<p class="NDLRefMemberDetailedDescription">The actors, joints and materials in this descriptor are all added into the existing scene.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pkScene</span></td>
    <td>The scene to instantiate content in. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kXform</span></td>
    <td>A transformation to apply to all the PhysX content before instantiating. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkRBCompartment</span></td>
    <td>The rigid body compartment to use for the actors and joints in the scene. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkClothCompartment</span></td>
    <td>The compartment to use for the cloth objects in this descriptor. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkFluidCompartment</span></td>
    <td>The compartment to use for the any fluids in this scene (available for derived classes). </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">bKeepMeshes</span></td>
    <td>If true, mesh data is kept after creation, otherwise it is deleted. See the documentation for <span class="NDLSystemFont"><a href="NiPhysXMeshDesc.htm">NiPhysXMeshDesc</a></span>. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiIndex</span></td>
    <td>The index for the state to use when setting poses, velocities and other initial conditions. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_phys_x_prop_desc_1aca6b082fb08d1fb400e1fadc9a0dc586"></a>
<p class="NDLRefMemberFunction">virtual void  RemoveFromScene(NxScene* pkScene)</p>
<p class="NDLRefMemberDescription">Remove any actors, joints and materials that this descriptor knows about from the given PhysX scene. </p>
<a name="joint_array_functions"></a>
<p class="NDLRefHead1">Joint Array Functions</p>

<p class="NDLRefMemberDescription">These functions provide access to the array of joints stored in this object.</p>
<p class="NDLRefMemberDescription">Applications may wish to access these to modify the joint descriptions before the prop is instantiated in a scene, or when creating a prop in code.</p>
<p class="NDLRefMemberDescription">Note that the internal array stores smart pointers to the objects. </p>

<a name="class_ni_phys_x_prop_desc_1aebafcbaf47fd18369c7f291f1dfdf061"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  GetJointCount() const</p>
<p class="NDLRefMemberDescription">Returns the number of joint descriptors in the array. </p>

<a name="class_ni_phys_x_prop_desc_1ad1271e186dc010a424a46e02267d8492"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">NiPhysXJointDescPtr</a></span>  GetJointAt(<span class="NDLSystemFont">NiUInt32</span> uiIndex)</p>
<p class="NDLRefMemberDescription">Returns the joint at a given index in the array. </p>

<a name="class_ni_phys_x_prop_desc_1af6235e62147f209720f3688a53790b53"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  AddJoint(<span class="NDLSystemFont"><a href="NiPhysXJointDesc.htm">NiPhysXJointDesc</a></span>* pkJointDesc)</p>
<p class="NDLRefMemberDescription">Add a joint descriptor to the array. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>The joint's location in the array. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_phys_x_prop_desc_1a913eb2283c516ff3b66fac892d324889"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">NiPhysXJointDescPtr</a></span>  RemoveJointAt(<span class="NDLSystemFont">NiUInt32</span> uiIndex)</p>
<p class="NDLRefMemberDescription">Remove the joint descriptor at the given index. </p>
<p class="NDLRefMemberDetailedDescription">Returns the smart pointer at the given index, and has <span class="NDLSystemFont"><a href="../NiMain/NiTArray.htm">NiTArray::RemoveAtAndFill</a></span> semantics. </p>
<a name="material_map_functions"></a>
<p class="NDLRefHead1">Material Map Functions</p>

<p class="NDLRefMemberDescription">These functions provide access to the internal map of materials.</p>
<p class="NDLRefMemberDescription">The map is keyed by the material index and the value is an <span class="NDLSystemFont"><a href="NiPhysXMaterialDesc.htm">NiPhysXMaterialDesc</a></span> smart pointer. </p>

<a name="class_ni_phys_x_prop_desc_1a7df58ab4f818712a8e80b59eec3d916b"></a>
<p class="NDLRefMemberFunction">NxMaterialIndex  AddMaterial(<br/>NxMaterialDesc& kMaterial, <br/>const NxMaterialIndex usBaseIndex = 0)</p>
<p class="NDLRefMemberDescription">Add an additional material to the map. </p>
<p class="NDLRefMemberDetailedDescription">AddMaterial first searches for a material matching kMaterial in the map. If found, it returns the corresponding material index which can be used in shapes to specify their materials. If not found, it adds the material in the first empty slot greater than or equal to usBaseIndex. </p>

<a name="class_ni_phys_x_prop_desc_1a5f0eead22eea6c99983733ea82cc6674"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">NiPhysXMaterialDescPtr</a></span>  SetMaterialAt(<br/>NxMaterialDesc& kMaterial, <br/>const NxMaterialIndex usIndex)</p>
<p class="NDLRefMemberDescription">Set the material at a specific index. </p>
<p class="NDLRefMemberDetailedDescription">SetMaterialAt inserts the given material descriptor at the specified index. It returns the material descriptor that already existed at that index, or 0 if none. </p>

<a name="class_ni_phys_x_prop_desc_1a242cbe9607ad558bd233d476521ad489"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">NiPhysXMaterialDescPtr</a></span>  GetMaterial(const NxMaterialIndex usIndex)</p>
<p class="NDLRefMemberDescription">Obtain the material for a specific index. </p>
<p class="NDLRefMemberDetailedDescription">GetMaterial returns the material at the given index, or 0 if there is no material with that index. </p>

<a name="class_ni_phys_x_prop_desc_1a47945834fcce80f92428e93cef27a7f5"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiTMapIterator</span>  GetFirstMaterial()</p>
<p class="NDLRefMemberDescription">Get an iterator initialized to the first element in the map. </p>

<a name="class_ni_phys_x_prop_desc_1a6a11e0f4d6cef3045f1b76637605556a"></a>
<p class="NDLRefMemberFunction">void  GetNextMaterial(<br/><span class="NDLSystemFont">NiTMapIterator</span>& kPos, <br/>NxMaterialIndex& usIndex, <br/><span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">NiPhysXMaterialDescPtr</a></span>& spMaterial)</p>
<p class="NDLRefMemberDescription">Obtain the next material when iterating through the map. </p>

<a name="class_ni_phys_x_prop_desc_1a28c08c4387b2647ee037d772a1793139"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  RemoveMaterial(const NxMaterialIndex usIndex)</p>
<p class="NDLRefMemberDescription">Remove a material. </p>
<p class="NDLRefMemberDetailedDescription">RemoveMaterial removes the material with the given index, returning true if it was found in the map. The remove decrements the smart pointer on the material descriptor at that index, which does not necessarily delete it. </p>
<a name="state_keep/delete_functions"></a>
<p class="NDLRefHead1">State Keep/Delete Functions</p>

<p class="NDLRefMemberDescription">These functions control what happens to saved states once they have been used to create PhysX content.</p>
<p class="NDLRefMemberDescription">When these flags are disabled, state is deleted after the actors, cloth, etc are created in the PhysX scene. This will prevent subsequent attempts to restore the PhysX system to its initial conditions, and will prevent cloning from functioning correctly for the prop. Note that the prop can still be cloned before PhysX content is instantiated, regardless of these settings.</p>
<p class="NDLRefMemberDescription">The default behavior is to keep only the default state (index 0). </p>

<a name="class_ni_phys_x_prop_desc_1a9b0519c92ba5b09774fc033608a407fa"></a>
<p class="NDLRefMemberFunction">void  SetKeepAllStates(const <span class="NDLSystemFont">bool</span> bKeepAllStates)</p>
<p class="NDLRefMemberDescription">Set the prop to keep all states, or not. </p>

<a name="class_ni_phys_x_prop_desc_1a7d28af9f7df8e9fdc2168aa432dd83b3"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetKeepAllStates() const</p>
<p class="NDLRefMemberDescription">Get whether or not the prop will keep all states. </p>

<a name="class_ni_phys_x_prop_desc_1a77a42651dad17d2ef0972bf755ce887e"></a>
<p class="NDLRefMemberFunction">void  SetKeepDefaultState(const <span class="NDLSystemFont">bool</span> bKeepDefaultState)</p>
<p class="NDLRefMemberDescription">Set the prop to keep only the first state (regardless, of this value, all states will be kept if SetKeepAllStates was set true). </p>

<a name="class_ni_phys_x_prop_desc_1a832f2192d9d79ffd3bcb8d972f924495"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetKeepDefaultState() const</p>
<p class="NDLRefMemberDescription">Get whether or not the prop will keep the default state. </p>
<a name="state_management_functions"></a>
<p class="NDLRefHead1">State Management Functions</p>

<p class="NDLRefMemberDescription">The actors and cloth objects stored within the prop each may contain multiple sets of initial conditions.</p>
<p class="NDLRefMemberDescription">These functions provide convenience in accessing those states, including a mapping from state indexes to state names.</p>
<p class="NDLRefMemberDescription">Every actor and cloth piece in the prop must have the same number of stored states. </p>

<a name="class_ni_phys_x_prop_desc_1ac398c7928ff05a2d12400f501c4ed161"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  GetNumStates() const</p>
<p class="NDLRefMemberDescription">Get the number of states stored in each actor or cloth object. </p>

<a name="class_ni_phys_x_prop_desc_1a5884d706e34a5adb2244cb6f6634b7cb"></a>
<p class="NDLRefMemberFunction">void  SetNumStates(const <span class="NDLSystemFont">NiUInt32</span> uiNumStates)</p>
<p class="NDLRefMemberDescription">Set the number of states stored in this prop. </p>
<p class="NDLRefMemberDetailedDescription">The same number of states must be stored in each actor or cloth object. </p>

<a name="class_ni_phys_x_prop_desc_1adc9701dd97b50023d3424867954fc50d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  GetStateIndex(const <span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>& kName)</p>
<p class="NDLRefMemberDescription">Return the index that is used for a particular state name. </p>
<p class="NDLRefMemberDetailedDescription">If the name does not match any state, 0 is returned. </p>

<a name="class_ni_phys_x_prop_desc_1a89d6cd6ed6ca0c118b51f27c82fe14b1"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  SetStateName(<br/><span class="NDLSystemFont">NiUInt32</span> uiIndex, <br/><span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>& kName)</p>
<p class="NDLRefMemberDescription">Set the name to use for a particular state. </p>
<p class="NDLRefMemberDetailedDescription">Returns false if the name is already in use. </p>

<a name="class_ni_phys_x_prop_desc_1accbe0ff256895fd359c0304d106a4afc"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiTMapIterator</span>  GetFirstStateName()</p>
<p class="NDLRefMemberDescription">Get the first named state. </p>

<a name="class_ni_phys_x_prop_desc_1a67899dd9d3100497425d1c34c8bf3a73"></a>
<p class="NDLRefMemberFunction">void  GetNextStateName(<br/><span class="NDLSystemFont">NiTMapIterator</span>& kPos, <br/><span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>& kName, <br/><span class="NDLSystemFont">NiUInt32</span>& uiIndex)</p>
<p class="NDLRefMemberDescription">Get the next named state. </p>

<a name="class_ni_phys_x_prop_desc_1aeefffb96a8f179c66488c5fb4a22c880"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  RemoveStateName(<span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>& kName)</p>
<p class="NDLRefMemberDescription">Remove a state name. </p>
<p class="NDLRefMemberDetailedDescription">This just removes the name from the map of names to indexes, it does not remove the state itself. </p>

<a name="class_ni_phys_x_prop_desc_1a54d6412b446effcff7868de063ab926c"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">NiUInt32</span>  AddState(<br/>NxScene* pkPhysXScene, <br/>const NxMat34& kXform, <br/><span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>& kName)</p>
<p class="NDLRefMemberDescription">Adds a new set of state from the scene, and return the index of the new state. </p>
<p class="NDLRefMemberDetailedDescription">The given transform is applied to all the state before it is saved. The name is added to the mapping from state indexes to names. </p>

<a name="class_ni_phys_x_prop_desc_1ab5a4a9c44dface780d04682cabac92f9"></a>
<p class="NDLRefMemberFunction">virtual void  RestoreState(<br/>NxScene* pkScene, <br/>const <span class="NDLSystemFont">NiUInt32</span> uiIndex, <br/>const NxMat34& kXform, <br/>const <span class="NDLSystemFont">bool</span> bKeepMeshes = false)</p>
<p class="NDLRefMemberDescription">Restore state to the given scene. </p>
<p class="NDLRefMemberDetailedDescription">The index tells which of the stored states to restore from. The transformation is applied to all state before it is pushed into the actors and cloth. The keep meshes argument is needed when cloth is restored. It will only be used if the cloth was, for some reason, previously not in existence. See <span class="NDLSystemFont"><a href="NiPhysXMeshDesc.htm">NiPhysXMeshDesc</a></span> for the meaning of the argument. </p>

<a name="class_ni_phys_x_prop_desc_1a77c710b347f5518c3eabd1a3796ed502"></a>
<p class="NDLRefMemberFunction">virtual void  RemoveState(<span class="NDLSystemFont">NiUInt32</span> uiState)</p>
<p class="NDLRefMemberDescription">Remove a single stored state. </p>
<p class="NDLRefMemberDetailedDescription">All subsequent states are shuffled down, so indexes and state name mappings will change. The state name remapping is performed internally. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
