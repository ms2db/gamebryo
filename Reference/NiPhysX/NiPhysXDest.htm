<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiPhysXDest</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiPhysXDest</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../NiMain/NiObject.htm">NiObject</a></span></p>


<p class="NDLRefHeaderFile">&lt;NiPhysXDest.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/class_ni_phys_x_dest.gif" alt="Inheritance graph for NiPhysXDest"/>
  <p class="FigureCaption">Inheritance graph for NiPhysXDest</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">A destination in the Gamebryo-PhysX package is a link between a PhysX actor that is producing state, and a Gamebryo scene graph object that is being driven by the physics. </p>
<p class="NDLNormal"><span class="NDLSystemFont">NiPhysXDest</span> is an abstract base class from which all such objects are derived. </p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="class_ni_phys_x_dest_1ad241d5e770a88b9003912c4bc8f0cbdc"></a>
<p class="NDLRefMemberFunction">NiPhysXDest()</p>
<p class="NDLRefMemberDescription">Constructor. </p>
<p class="NDLRefMemberDetailedDescription">This class contains pure virtual functions and cannot be instantiated. For reference purposes, the constructor sets the interpolation flag to false and the activity flag to true. </p>

<a name="class_ni_phys_x_dest_1a6e2ff252edce90b57e49ac415ba3ccc8"></a>
<p class="NDLRefMemberFunction">~NiPhysXDest()</p>
<p class="NDLRefMemberDescription">Destructor does nothing. </p>

<a name="class_ni_phys_x_dest_1aa861f15fa8c3bf20fd497d593b8a0ff4"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetActive() const</p>
<p class="NDLRefMemberDescription">Get the activity flag. </p>
<p class="NDLRefMemberDetailedDescription">State is only extracted from PhysX and passed to Gamebryo if both this flag is active and updating of destinations is active for the <span class="NDLSystemFont"><a href="NiPhysXScene.htm">NiPhysXScene</a></span> that this destination is controlled by. </p>

<a name="class_ni_phys_x_dest_1ad8d9657f9075be2a2ef569ac2551e514"></a>
<p class="NDLRefMemberFunction">virtual void  SetActive(const <span class="NDLSystemFont">bool</span> bActive)</p>
<p class="NDLRefMemberDescription">Set the activity flag (default true). </p>

<a name="class_ni_phys_x_dest_1ad871e68ddfae0a65dc8fce80c1751429"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetInterpolate() const</p>
<p class="NDLRefMemberDescription">Get the interpolation flag. </p>
<p class="NDLRefMemberDetailedDescription">This flag control whether or not this destination interpolates its state when the timing of a Gamebryo and PhysX scene are mismatched, typically due to using fixed timesteps for the physics. Derived classes must interpret this flag in an appropriate way. </p>

<a name="class_ni_phys_x_dest_1a14c300917a58ff3c2d68b893af874daf"></a>
<p class="NDLRefMemberFunction">void  SetInterpolate(const <span class="NDLSystemFont">bool</span> bActive)</p>
<p class="NDLRefMemberDescription">Set the interpolation flag (default false). </p>
<a name="update_functions"></a>
<p class="NDLRefHead1">Update Functions</p>

<p class="NDLRefMemberDescription">These functions work together to update destinations from PhysX actors.</p>
<p class="NDLRefMemberDescription">If this instance is not active, then they do nothing unless forced. They are split into two functions because the first, UpdateFromActors requires access to the PhysX SDK lock, while the second does not. Both might touch the scene graph. </p>

<a name="class_ni_phys_x_dest_1ab073c915fc9cc35b714a2dad18c6be5c"></a>
<p class="NDLRefMemberFunction">virtual void  UpdateFromActors(<br/>const float fT, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiTransform.htm">NiTransform</a></span>& kRootTransform, <br/>const float fScalePToW, <br/>const <span class="NDLSystemFont">bool</span> bForce) = 0</p>
<p class="NDLRefMemberDescription">Perform any update work that requires access to the PhysX scene and which needs to know the current PhysX simulation time. </p>
<p class="NDLRefMemberDetailedDescription">This function is called by <span class="NDLSystemFont"><a href="NiPhysXScene.htm#class_ni_phys_x_scene_1ac730f723f9649aa93578bd40058cc289">NiPhysXScene::FetchResults</a></span> when the simulation step completes, or by <span class="NDLSystemFont"><a href="NiPhysXScene.htm#class_ni_phys_x_scene_1ad0ba9d929463d41fea4a4b0d990893ae">NiPhysXScene::UpdateDestinations</a></span> if that is called with the bForce argument true. It presumes the scene is locked when called.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">fT</span></td>
    <td>The simulation time - the time that <span class="NDLSystemFont"><a href="NiPhysXScene.htm">NiPhysXScene</a></span> was most recently stepped to. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kRootTransform</span></td>
    <td>The global transformation applied to the PhysX scene. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fScalePToW</span></td>
    <td>All positions and velocities are scaled by fScalePToW before they are transformed by kRootTransform. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">bForce</span></td>
    <td>If true, derived classes should do the update regardless of internal state. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_phys_x_dest_1a55e7a9092b0e681ee2842035fbf36671"></a>
<p class="NDLRefMemberFunction">virtual void  UpdateSceneGraph(<br/>const float fT, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiTransform.htm">NiTransform</a></span>& kRootTransform, <br/>const float fScalePToW, <br/>const <span class="NDLSystemFont">bool</span> bForce) = 0</p>
<p class="NDLRefMemberDescription">Perform the remainder of the update step. </p>
<p class="NDLRefMemberDetailedDescription">This function is called by <span class="NDLSystemFont"><a href="NiPhysXScene.htm#class_ni_phys_x_scene_1ad0ba9d929463d41fea4a4b0d990893ae">NiPhysXScene::UpdateDestinations</a></span> and should push any data into the scene graph it is controlling.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">fT</span></td>
    <td>The time is that desired by the application (typically the update time, but maybe different) in accumulated application time. It need not be the same time as used for UpdateFromActors. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kRootTransform</span></td>
    <td>The global transformation applied to the PhysX scene. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fScalePToW</span></td>
    <td>All positions and velocities are scaled by fScalePToW before they are transformed by kRootTransform. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">bForce</span></td>
    <td>If true, derived classes should do the update regardless of internal state. </td>
</tr>

        </tbody>
    </table>
</div>


 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
