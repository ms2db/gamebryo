<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiPhysXClothDesc</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiPhysXClothDesc</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../NiMain/NiObject.htm">NiObject</a></span></p>


<p class="NDLRefHeaderFile">&lt;NiPhysXClothDesc.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/class_ni_phys_x_cloth_desc.gif" alt="Inheritance graph for NiPhysXClothDesc"/>
  <p class="FigureCaption">Inheritance graph for NiPhysXClothDesc</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">This class holds a complete description of a PhysX cloth object. </p>
<p class="NDLNormal">This class is essentially a wrapper for the NxClothDesc class, with additional members for the connection to Gamebryo's scene graph. It is used to stream a cloth description in NIF files, to support cloning of cloth objects, and to support multiple initial conditions with reset.</p>
<p class="NDLNormal">
<p class="NDLNormal">This class does not cache the userData associated with the cloth. Applications should derive from this class if they wish to cache or stream such data. </p></p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="class_ni_phys_x_cloth_desc_1a5e9a7e6e6b5c5d660ae5db6f7b2dc215"></a>
<p class="NDLRefMemberFunction">NiPhysXClothDesc()</p>
<p class="NDLRefMemberDescription">Constructor sets all parameters to their PhysX default, with no mesh data. </p>

<a name="class_ni_phys_x_cloth_desc_1ac12b95e8547592cf3bf6cb5fea2d3ab8"></a>
<p class="NDLRefMemberFunction">virtual ~NiPhysXClothDesc()</p>
<p class="NDLRefMemberDescription">Destructor releases all smart pointers and deletes owned memory, such as attachments. </p>

<a name="class_ni_phys_x_cloth_desc_1ae5f49b85ad02d53373f098737eaa1c36"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../NiMesh/NiMesh.htm">NiMesh</a></span>*  GetTargetMesh() const</p>
<p class="NDLRefMemberDescription">Obtain a pointer to the Gamebryo scene graph object that the cloth is controlling. </p>

<a name="class_ni_phys_x_cloth_desc_1a5123bff6eb2cc019b648ddb3860244fd"></a>
<p class="NDLRefMemberFunction">void  SetTargetMesh(<span class="NDLSystemFont"><a href="../NiMesh/NiMesh.htm">NiMesh</a></span>* pkMesh)</p>
<p class="NDLRefMemberDescription">Set the pointer to the Gamebryo scene graph object that the cloth is controlling. </p>

<a name="class_ni_phys_x_cloth_desc_1affd75b60f4b8f34f759dbc6085e07f39"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiPhysXActorDesc.htm">NiPhysXActorDesc</a></span>*  GetParentActor() const</p>
<p class="NDLRefMemberDescription">Obtain the descriptor for the parent actor of the cloth. </p>
<p class="NDLRefMemberDetailedDescription">The parent actor is a PhysX actor that is associated with the Gamebryo parent node of the cloth's target Gamebryo object. It is used to improve the accuracy of transformation computations, and should always be set if the target's parent node has a PhysX actor. This will typically be the case if the cloth is attached to an actor in the PhysX simulation and the Gamebryo node is similarly attached in the scene graph. </p>

<a name="class_ni_phys_x_cloth_desc_1a11c31a008242fb56a8ee547b4eaca4ad"></a>
<p class="NDLRefMemberFunction">void  SetParentActor(<span class="NDLSystemFont"><a href="NiPhysXActorDesc.htm">NiPhysXActorDesc</a></span>* pkActorDesc)</p>
<p class="NDLRefMemberDescription">Set the parent actor descriptor. </p>
<p class="NDLRefMemberDetailedDescription">See GetParentActor for a description of the parent actor. </p>

<a name="class_ni_phys_x_cloth_desc_1a1bb3fc6301a9692d8cf208897bf940bf"></a>
<p class="NDLRefMemberFunction">void  SetConstantParameters(<br/><span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>& kClothName, <br/><span class="NDLSystemFont"><a href="NiPhysXMeshDesc.htm">NiPhysXMeshDesc</a></span>* pkMeshDesc, <br/>const NxReal fThickness, <br/>const NxReal fSelfCollisionThickness, <br/>const NxReal fDensity, <br/>const NxReal fBendingStiffness, <br/>const NxReal fStretchingStiffness, <br/>const NxReal fHardStretchLimitationFactor, <br/>const NxReal fDampingCoefficient, <br/>const NxReal fFriction, <br/>const NxReal fPressure, <br/>const NxReal fTearFactor, <br/>const NxReal fCollisionResponseCoefficient, <br/>const NxReal fAttachmentResponseCoefficient, <br/>const NxReal fAttachmentTearFactor, <br/>const NxReal fToFluidResponseCoefficient, <br/>const NxReal fFromFluidResponseCoefficient, <br/>const NxReal fMinAdhereVelocity, <br/>const NxReal fRelativeGridSpacing, <br/>const NxU32 uiSolverIterations, <br/>const NxU32 uiHierarchicalSolverIterations, <br/>const NxVec3 kExternalAcceleration, <br/>const NxVec3 kWindAcceleration, <br/>const NxReal fWakeUpCounter, <br/>const NxReal fSleepLinearVelocity, <br/>const NxCollisionGroup uiCollisionGroup, <br/>const NxGroupsMask kCollisionMask, <br/>const NxU16 uiForceFieldMaterial, <br/>const NxU32 uiFlags)</p>
<p class="NDLRefMemberDescription">Set all the constant parameters in one function call. </p>
<p class="NDLRefMemberDetailedDescription">The constants parameters are those that are considered to be independent of changes to the initial state of the cloth, so they remain constant regardless of which state the cloth is reset to. </p>

<a name="class_ni_phys_x_cloth_desc_1aaade228e90228b982fbd2fd0bd800b43"></a>
<p class="NDLRefMemberFunction">void  GetVertexMap(<br/><span class="NDLSystemFont">NiUInt16</span>& usSize, <br/>const <span class="NDLSystemFont">NiUInt16</span> *& pusMap)</p>
<p class="NDLRefMemberDescription">Get the mapping between Gamebryo vertices and PhysX mesh vertices. </p>
<p class="NDLRefMemberDetailedDescription">The map is an array indexed by Gamebryo vertex indices that gives the PhysX mesh index for the corresponding vertex. </p>

<a name="class_ni_phys_x_cloth_desc_1a537d6f8147673e7d135013b760a5ed2d"></a>
<p class="NDLRefMemberFunction">void  SetVertexMap(<br/>const <span class="NDLSystemFont">NiUInt16</span> usSize, <br/><span class="NDLSystemFont">NiUInt16</span>* pusMap)</p>
<p class="NDLRefMemberDescription">Set the vertex map. </p>
<p class="NDLRefMemberDetailedDescription">See GetVertexMap for details. </p>
<a name="attachment_functions"></a>
<p class="NDLRefHead1">Attachment functions</p>


<a name="class_ni_phys_x_cloth_desc_1a4caa25adafec30ca3e91b534067be891"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  GetAttachmentCount() const</p>
<p class="NDLRefMemberDescription">Get the number of attachments for this cloth. </p>

<a name="class_ni_phys_x_cloth_desc_1a7f3d5045d0b894f8284a26a81b007968"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiPhysXClothDesc__ClothAttachment.htm">ClothAttachment</a></span>*  GetAttachmentAt(const <span class="NDLSystemFont">NiUInt32</span> uiIndex)</p>
<p class="NDLRefMemberDescription">Get a pointer to the attachment at a given index. </p>
<p class="NDLRefMemberDetailedDescription">The index must be less than the number of attachments. The function could return NULL. </p>

<a name="class_ni_phys_x_cloth_desc_1a2a73811cfd014f90e34ed4f999b94cb0"></a>
<p class="NDLRefMemberFunction">void  AddAttachment(<span class="NDLSystemFont"><a href="NiPhysXClothDesc__ClothAttachment.htm">ClothAttachment</a></span>* pkAttachment)</p>
<p class="NDLRefMemberDescription">Add an attachment for this cloth. </p>
<p class="NDLRefMemberDetailedDescription">This function will add the attachment in PhysX if the scene has already been created. The cloth descriptor owns the memory for the passed object and will free it. The object passed in should have been allocated with NiNew. </p>

<a name="class_ni_phys_x_cloth_desc_1ab2f505d8a84cd4c8069f1b1b448cd918"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  RemoveAttachment(<span class="NDLSystemFont"><a href="NiPhysXClothDesc__ClothAttachment.htm">ClothAttachment</a></span>* pkAttachment)</p>
<p class="NDLRefMemberDescription">Remove an attachment of this cloth. </p>
<p class="NDLRefMemberDetailedDescription">This will remove the attachment in the scene if it has already been created. The attachment is deleted when it is removed, so applications should not try to access the <span class="NDLSystemFont"><a href="NiPhysXClothDesc__ClothAttachment.htm">ClothAttachment</a></span> pointer after this function returns true (indicating that the attachment was found and removed). </p>

<a name="class_ni_phys_x_cloth_desc_1a41316bef520ff2e035ccbe3f8e189ea7"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  RemoveAttachmentAt(const <span class="NDLSystemFont">NiUInt32</span> uiIndex)</p>
<p class="NDLRefMemberDescription">Remove an attachment of this cloth at a specified index. </p>
<p class="NDLRefMemberDetailedDescription">The index must be less than the number of attachments. This will remove the attachment in the scene if it has already been created. The attachment is deleted when it is removed. This function returns true when there is an attachment at the specified index, false otherwise. </p>
<a name="fixed_parameter_access_functions."></a>
<p class="NDLRefHead1">Fixed parameter access functions.</p>

<p class="NDLRefMemberDescription">Each pair of functions provides access to a member of the NxClothDesc class.</p>
<p class="NDLRefMemberDescription">See the PhysX documentation for information on the meaning of these parameters.</p>
<p class="NDLRefMemberDescription">The set functions only modify the value stored in this object, which is used when the cloth is first created and for streaming and cloning. It does not modify the property of an already existing NxCloth created from the object. If you would like to modify an existing cloth object, use the GetCloth function to obtain the NxCloth object and set the property using a function call on that. </p>

<a name="class_ni_phys_x_cloth_desc_1a3e2a159628898c92cfa4001869caf8b4"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>  GetClothName() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_cloth_desc_1a51206ca25b8599d68972395e0d379444"></a>
<p class="NDLRefMemberFunction">void  SetClothName(<span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>& kClothName)</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_cloth_desc_1a4343638a376a577a3f582fce427fbf31"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">NiPhysXMeshDescPtr</a></span>  GetMeshDesc()</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_cloth_desc_1aef193f3c66022c3bafc414b8fc29af40"></a>
<p class="NDLRefMemberFunction">void  SetMeshDesc(<span class="NDLSystemFont"><a href="NiPhysXMeshDesc.htm">NiPhysXMeshDesc</a></span>* pkMeshDesc)</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_cloth_desc_1ad503819b8d531fa104a295efee92af96"></a>
<p class="NDLRefMemberFunction">NxReal  GetThickness() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_cloth_desc_1af111d462650146e2444ff68d4e0857b8"></a>
<p class="NDLRefMemberFunction">void  SetThickness(const NxReal fThickness)</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_cloth_desc_1a12bbc105b35987f0ec65a828dfd0c136"></a>
<p class="NDLRefMemberFunction">NxReal  GetSelfCollisionThickness() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_cloth_desc_1a648e46cd6e9743f45e472e1bb7669e37"></a>
<p class="NDLRefMemberFunction">void  SetSelfCollisionThickness(const NxReal fThickness)</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_cloth_desc_1a451fb6c9ab75f16c3ce10a93c1356a45"></a>
<p class="NDLRefMemberFunction">NxReal  GetDensity() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_cloth_desc_1a949bdc92cc40d0718ce039f180410ae9"></a>
<p class="NDLRefMemberFunction">void  SetDensity(const NxReal fDensity)</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_cloth_desc_1a4471298bcf817f92fcb4d72cb0648935"></a>
<p class="NDLRefMemberFunction">NxReal  GetBendingStiffness() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_cloth_desc_1af19931530ab055d5297096ef44bbd5ea"></a>
<p class="NDLRefMemberFunction">void  SetBendingStiffness(const NxReal fStiffness)</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_cloth_desc_1abd27cfff515d3223618f04d32e978d74"></a>
<p class="NDLRefMemberFunction">NxReal  GetStretchingStiffness() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_cloth_desc_1ab76ef603fc375beb928b631d9ea0a7d3"></a>
<p class="NDLRefMemberFunction">void  SetStretchingStiffness(const NxReal fStiffness)</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_cloth_desc_1a215ced5aabc49187ba804591fe119a59"></a>
<p class="NDLRefMemberFunction">NxReal  GetHardStretchLimitationFactor() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_cloth_desc_1acf589e430bcf05bcd3ed102608bd19d7"></a>
<p class="NDLRefMemberFunction">void  SetHardStretchLimitationFactor(const NxReal fFactor)</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_cloth_desc_1aedaa1d86175ef0e14012e389b4772591"></a>
<p class="NDLRefMemberFunction">NxReal  GetDampingCoefficient() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_cloth_desc_1ab5473d144cb9ef0f289769b67bebf0e7"></a>
<p class="NDLRefMemberFunction">void  SetDampingCoefficient(const NxReal fCoefficient)</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_cloth_desc_1a331076ca87c9df55641f146e9147779a"></a>
<p class="NDLRefMemberFunction">NxReal  GetFriction() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_cloth_desc_1a6c00cbe80724eeeec0b562512783ee6e"></a>
<p class="NDLRefMemberFunction">void  SetFriction(const NxReal fFriction)</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_cloth_desc_1a48272e3457544eacff54f443caaf8fa0"></a>
<p class="NDLRefMemberFunction">NxReal  GetPressure() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_cloth_desc_1afb03a58a260d7caaf352b00a9c229dc8"></a>
<p class="NDLRefMemberFunction">void  SetPressure(const NxReal fPressure)</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_cloth_desc_1a9b86d33686212336db06dc1e7fa915a7"></a>
<p class="NDLRefMemberFunction">NxReal  GetTearFactor() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_cloth_desc_1acbb74db79054c3c0584a096169ebf3ac"></a>
<p class="NDLRefMemberFunction">void  SetTearFactor(const NxReal fTearFactor)</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_cloth_desc_1ac3a2be694a320b36a95678941dcb7d98"></a>
<p class="NDLRefMemberFunction">NxReal  GetCollisionResponseCoefficient() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_cloth_desc_1ae31484450bdd10a49008b0a5ff00b1c6"></a>
<p class="NDLRefMemberFunction">void  SetCollisionResponseCoefficient(const NxReal fCoefficient)</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_cloth_desc_1af22b7924ce5b104fb0abf7df16892dd9"></a>
<p class="NDLRefMemberFunction">NxReal  GetAttachmentResponseCoefficient() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_cloth_desc_1a34d1a06e52fb8046cbc14e0970394587"></a>
<p class="NDLRefMemberFunction">void  SetAttachmentResponseCoefficient(const NxReal fCoefficient)</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_cloth_desc_1acbcaf904688b7188215f7899038e2ea3"></a>
<p class="NDLRefMemberFunction">NxReal  GetAttachmentTearFactor() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_cloth_desc_1ad2f5c800dee66c52c5fdfde5b9bf303f"></a>
<p class="NDLRefMemberFunction">void  SetAttachmentTearFactor(const NxReal fFactor)</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_cloth_desc_1a18f7948197e8b4153e49b13ad41f6e39"></a>
<p class="NDLRefMemberFunction">NxReal  GetToFluidResponseCoefficient() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_cloth_desc_1a4df9456c95e13369cd71f1ff28838335"></a>
<p class="NDLRefMemberFunction">void  SetToFluidResponseCoefficient(const NxReal fCoefficient)</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_cloth_desc_1a1ce31431084523817c2e57bdecd7556d"></a>
<p class="NDLRefMemberFunction">NxReal  GetFromFluidResponseCoefficient() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_cloth_desc_1a420a590b12456ce9d152524c86f0cd84"></a>
<p class="NDLRefMemberFunction">void  SetFromFluidResponseCoefficient(const NxReal fCoefficient)</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_cloth_desc_1aaa130bb33b2ec7f538341d9bd6924902"></a>
<p class="NDLRefMemberFunction">NxReal  GetMinAdhereVelocity() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_cloth_desc_1a13fe3c01a62f2b26f8f12aaade69b04f"></a>
<p class="NDLRefMemberFunction">void  SetMinAdhereVelocity(const NxReal fMinAdhereVelocity)</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_cloth_desc_1ab9df8f98540bdca873decd50bd52c842"></a>
<p class="NDLRefMemberFunction">NxReal  GetRelativeGridSpacing() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_cloth_desc_1ab011dbc7cd0ebb381512fef4cd30229e"></a>
<p class="NDLRefMemberFunction">void  SetRelativeGridSpacing(const NxReal fSpacing)</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_cloth_desc_1a7399c236c271f5d922f5ba5a7662290c"></a>
<p class="NDLRefMemberFunction">NxU32  GetSolverIterations() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_cloth_desc_1a72a5eca39aa52204125ee2d572db40d8"></a>
<p class="NDLRefMemberFunction">void  SetSolverIterations(const NxU32 uiIterations)</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_cloth_desc_1a756ed300362455e79cb82304829c4a72"></a>
<p class="NDLRefMemberFunction">NxU32  GetHierarchicalSolverIterations() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_cloth_desc_1a12b2595468adbca97bda4d2c0b1fa375"></a>
<p class="NDLRefMemberFunction">void  SetHierarchicalSolverIterations(const NxU32 uiIterations)</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_cloth_desc_1a8c4e7e059e3d983e82a0a914bc4a40fa"></a>
<p class="NDLRefMemberFunction">NxVec3  GetExternalAcceleration() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_cloth_desc_1a90dc3f59b271472870e15a63be74cce5"></a>
<p class="NDLRefMemberFunction">void  SetExternalAcceleration(const NxVec3 kAcceleration)</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_cloth_desc_1ae91e16fb75fba23f1a88e9d316b579d0"></a>
<p class="NDLRefMemberFunction">NxVec3  GetWindAcceleration() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_cloth_desc_1a9fa4fb8c33666469b8a34dcc37bdfe07"></a>
<p class="NDLRefMemberFunction">void  SetWindAcceleration(const NxVec3 kWindAcceleration)</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_cloth_desc_1a86e285885e470f7978cbc46e1d67fcba"></a>
<p class="NDLRefMemberFunction">NxReal  GetWakeUpCounter() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_cloth_desc_1a042c8d111358ae3592b9dde2af45b285"></a>
<p class="NDLRefMemberFunction">void  SetWakeUpCounter(const NxReal fCounter)</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_cloth_desc_1af4f92919b889a9a7fe214e8ba952cea6"></a>
<p class="NDLRefMemberFunction">NxReal  GetSleepLinearVelocity() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_cloth_desc_1a0b528244923992ddd0463a621f5f7e47"></a>
<p class="NDLRefMemberFunction">void  SetSleepLinearVelocity(const NxReal fVelocity)</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_cloth_desc_1a7d035e1e1169005e467c0c1591fea76f"></a>
<p class="NDLRefMemberFunction">NxCollisionGroup  GetCollisionGroup() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_cloth_desc_1a349352ac6922c7f0a6dc5b9598151a13"></a>
<p class="NDLRefMemberFunction">void  SetCollisionGroup(const NxCollisionGroup uiGroup)</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_cloth_desc_1af61788c325a9b5c61a1620119e3dd817"></a>
<p class="NDLRefMemberFunction">NxGroupsMask  GetCollisionMask() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_cloth_desc_1aad3c98fdd0be47145a15ce5cbaa4ac3a"></a>
<p class="NDLRefMemberFunction">void  SetCollisionMask(const NxGroupsMask kMask)</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_cloth_desc_1af228623aedd98312151f5602e42835de"></a>
<p class="NDLRefMemberFunction">NxU16  GetForceFieldMaterial() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_cloth_desc_1abc370bade62ee679feb5b5e627a48715"></a>
<p class="NDLRefMemberFunction">void  SetForceFieldMaterial(const NxU16 uiForceFieldMaterial)</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_cloth_desc_1a36cbeda7d99e404f0d8837ebb1a9d7df"></a>
<p class="NDLRefMemberFunction">NxU32  GetClothFlags() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_cloth_desc_1af9039c582ddead032834baa39e583328"></a>
<p class="NDLRefMemberFunction">void  SetClothFlags(const NxU32 uiFlags)</p>
<p class="NDLRefMemberFunction"></p>
<a name="initial_state_storage"></a>
<p class="NDLRefHead1">Initial State Storage</p>

<p class="NDLRefMemberDescription">The descriptor can hold a number of initial conditions for the cloth.</p>
<p class="NDLRefMemberDescription">Each state is represented by a pose matrix, mapping onto the globalPose member of NxClothDesc, an array of cloth vertex locations, an ordered array of vertex indexes to tear at, and a corresponding array of normal vectors to use as tearing split planes (see the PhysX documentation on explicit cloth tearing).</p>
<p class="NDLRefMemberDescription">It is not necessary to supply both a pose and the vertex positions. When no vertex positions are given, the pose is used to transform the vertex locations in the original cooked cloth mesh to produce this piece of cloth's locations. If vertex positions are supplied, there must be as many vertex positions as the number of original vertices plus the number of torn vertices.</p>
<p class="NDLRefMemberDescription">Vertex positions have priority over the pose because they are set on the cloth after it has been created, while the pose is only used at creation. Typically, if the pose for a state is non-identity, then vertex positions will not be given and the cooked mesh vertex locations will be used. This is adequate if the cloth has not been deformed from its cooked state.</p>
<p class="NDLRefMemberDescription">The vertex positions do not modify the rest length of the edges in the cloth nor the angles between vertices - such things are cooked into the NxClothMesh object and cannot be changed after cooking. The distances between vertices should therefore be reasonably close to the rest shape of the cloth in order to avoid very large forces when simulation starts. </p>

<a name="class_ni_phys_x_cloth_desc_1af066a7d3d8621c0b79b2f77cedfe5096"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  GetNumStates() const</p>
<p class="NDLRefMemberDescription">Get the number of states stored. </p>

<a name="class_ni_phys_x_cloth_desc_1ab0034395cff149d42444b3452a7d9e47"></a>
<p class="NDLRefMemberFunction">NxMat34  GetGlobalPose(const <span class="NDLSystemFont">NiUInt32</span> uiIndex) const</p>
<p class="NDLRefMemberDescription">Get the pose at a particular index. </p>

<a name="class_ni_phys_x_cloth_desc_1ae228c735350a182c9ee250d94e993661"></a>
<p class="NDLRefMemberFunction">void  SetGlobalPose(<br/>const NxMat34 kPose, <br/>const <span class="NDLSystemFont">NiUInt32</span> uiIndex)</p>
<p class="NDLRefMemberDescription">Set the pose at a particular index. </p>
<p class="NDLRefMemberDetailedDescription">If the given index is greater than the number of stored states, additional states will be allocated up to the index count. </p>

<a name="class_ni_phys_x_cloth_desc_1a6f875ef6904a57e79106cccac8a147ee"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt16</span>  GetVertexPositionsCount(const <span class="NDLSystemFont">NiUInt32</span> uiIndex) const</p>
<p class="NDLRefMemberDescription">Get the number of vertex positions in the vertex position array stored at a particular state index. </p>

<a name="class_ni_phys_x_cloth_desc_1a2c319e218dd2449434c08afcdb291aca"></a>
<p class="NDLRefMemberFunction">const NxVec3*  GetVertexPositions(const <span class="NDLSystemFont">NiUInt32</span> uiIndex) const</p>
<p class="NDLRefMemberDescription">Get the vertex position array stored at a particular state index. </p>

<a name="class_ni_phys_x_cloth_desc_1a70a5268f6e759b0c069cfa6d87756969"></a>
<p class="NDLRefMemberFunction">void  SetVertexPositions(<br/>const <span class="NDLSystemFont">NiUInt16</span> uiNumPosns, <br/>const NxVec3* pkPosns, <br/>const <span class="NDLSystemFont">NiUInt32</span> uiIndex)</p>
<p class="NDLRefMemberDescription">Set the vertex position array stored at a particular state index. </p>
<p class="NDLRefMemberDetailedDescription">The number of vertices in the array must be given. The array is copied. </p>

<a name="class_ni_phys_x_cloth_desc_1aca778fb18f8fb7319d4240ecaae9c4e6"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt16</span>  GetTornVerticesCount(const <span class="NDLSystemFont">NiUInt32</span> uiIndex) const</p>
<p class="NDLRefMemberDescription">Get the number of torn vertices in the torn vertex array stored at a particular state index. </p>

<a name="class_ni_phys_x_cloth_desc_1a20a8a35c7a0e427ae922550ed29d85ec"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont">NiUInt16</span>*  GetTornVertices(const <span class="NDLSystemFont">NiUInt32</span> uiIndex) const</p>
<p class="NDLRefMemberDescription">Get the torn vertex array stored at a particular state index. </p>

<a name="class_ni_phys_x_cloth_desc_1a28a437eaacc3a59491561e8577c6977f"></a>
<p class="NDLRefMemberFunction">const NxVec3*  GetTornSplitPlanes(const <span class="NDLSystemFont">NiUInt32</span> uiIndex) const</p>
<p class="NDLRefMemberDescription">Get the torn vertex split planes array stored at a particular state index. </p>

<a name="class_ni_phys_x_cloth_desc_1a63fae6914cace638e8feabe3ee6feef0"></a>
<p class="NDLRefMemberFunction">virtual void  PresizeStateArrays(const <span class="NDLSystemFont">NiUInt32</span> uiRequiredCount)</p>
<p class="NDLRefMemberDescription">Allocate space to hold a given number of saved states. </p>
<p class="NDLRefMemberDetailedDescription">Use this function to reduce allocations when adding many states. </p>

<a name="class_ni_phys_x_cloth_desc_1a4ffa9d7741544e4124c2b9e203456835"></a>
<p class="NDLRefMemberFunction">void  SetTornVertices(<br/>const <span class="NDLSystemFont">NiUInt16</span> uiNumTorn, <br/>const <span class="NDLSystemFont">NiUInt16</span>* pkIndexes, <br/>const NxVec3* pkNormals, <br/>const <span class="NDLSystemFont">NiUInt32</span> uiIndex)</p>
<p class="NDLRefMemberDescription">Set the torn vertex data stored at a particular state index. </p>
<p class="NDLRefMemberDetailedDescription">The vertices are torn, starting with the original mesh, in the order they appear in the array. The number of torn vertices in the array must be given, along with normal vectors to use for the split planes at each tear. The arrays are copied. </p>

<a name="class_ni_phys_x_cloth_desc_1ada9545605fd153f10e61bc0c23036a8f"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">NiUInt32</span>  AddState(const NxMat34& kXform)</p>
<p class="NDLRefMemberDescription">Add a new state derived from the current state of the cloth. </p>
<p class="NDLRefMemberDetailedDescription">This function must be called after CreateCloth to ensure that the cloth object exists from which to pull state. Torn vertices are extracted, but the torn split planes are all set arbitrarily to the vector between the split vertex and it's parent. This means that the result of applying the stored state may not be identical to the cloth at the time the state is added. </p>

<a name="class_ni_phys_x_cloth_desc_1a27f511788446f4e1082849ec37948614"></a>
<p class="NDLRefMemberFunction">virtual void  RemoveStatesBeyond(const <span class="NDLSystemFont">NiUInt32</span> uiState)</p>
<p class="NDLRefMemberDescription">Remove all the stored states starting at and beyond the given index. </p>

<a name="class_ni_phys_x_cloth_desc_1aebf1a38465c5bfd7f84465ef7a7342e2"></a>
<p class="NDLRefMemberFunction">virtual void  RemoveState(const <span class="NDLSystemFont">NiUInt32</span> uiState)</p>
<p class="NDLRefMemberDescription">Remove the stored state at the given index, and shuffle down other states to fill any hole in stored state indexes. </p>
<a name="interaction_with_the_physx_scene"></a>
<p class="NDLRefHead1">Interaction with the PhysX scene</p>


<a name="class_ni_phys_x_cloth_desc_1ae0618fcfca5e3fcaa9995f70ca601d7c"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  IsValid()</p>
<p class="NDLRefMemberDescription">Check that the parameters in this descriptor are considered valid by PhysX. </p>

<a name="class_ni_phys_x_cloth_desc_1a41c5c82bfba6508332a4031931d71fdc"></a>
<p class="NDLRefMemberFunction">virtual NxCloth*  CreateCloth(<br/>NxScene* pkScene, <br/>NxCompartment* pkCompartment, <br/>const <span class="NDLSystemFont">NiUInt32</span> uiIndex, <br/>const NxMat34& kXform, <br/>const <span class="NDLSystemFont">bool</span> bKeepMeshes = false)</p>
<p class="NDLRefMemberDescription">Create the NxCloth object in the PhysX scene. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pkScene</span></td>
    <td>The PhysX scene to create in. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkCompartment</span></td>
    <td>The compartment to create the cloth in (see PhysX documentation). </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiIndex</span></td>
    <td>The index for the initial conditions to use when creating the cloth. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kXform</span></td>
    <td>An additional transformation to apply to the pose or vertices of the cloth. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">bKeepMeshes</span></td>
    <td>If true, the streamed mesh data for the cloth will be retained even after the cloth mesh is instantiated from the data.</td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A pointer to the cloth object that is created. This pointer is also stored internally. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_phys_x_cloth_desc_1a7334e9924a482b188570bc62f3f3f6bb"></a>
<p class="NDLRefMemberFunction">virtual void  RemoveCloth(NxScene* pkScene)</p>
<p class="NDLRefMemberDescription">Remove the NxCloth object associated with this descriptor from the PhysX scene. </p>
<p class="NDLRefMemberDetailedDescription">This sets the internal pointer to the cloth object to NULL. Nothing is done if the pointer is already NULL. </p>

<a name="class_ni_phys_x_cloth_desc_1ad390bcf6f47fe8e7bf93cbbf7edcf9cd"></a>
<p class="NDLRefMemberFunction">NxCloth*  GetCloth() const</p>
<p class="NDLRefMemberDescription">Obtain the NxCloth object that this descriptor generated. </p>
<p class="NDLRefMemberDetailedDescription">The return value will only be non-NULL after CreateCloth has been called to create the PhysX cloth object, and is reset to NULL when RemoveCloth is invoked. </p>

<a name="class_ni_phys_x_cloth_desc_1a235749bfc03de8b03dd9e3be47726165"></a>
<p class="NDLRefMemberFunction">void  SetCloth(NxCloth* pkCloth)</p>
<p class="NDLRefMemberDescription">Set the NxCLoth object that this descriptor controls. </p>
<p class="NDLRefMemberDetailedDescription">Applications should not use this function. Rather, the parameters should all be set on this object and the CreateCloth function used to create the NxCloth object. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
