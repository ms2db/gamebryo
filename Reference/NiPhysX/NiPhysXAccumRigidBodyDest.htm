<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiPhysXAccumRigidBodyDest</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiPhysXAccumRigidBodyDest</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="NiPhysXRigidBodyDest.htm">NiPhysXRigidBodyDest</a></span></p>


<p class="NDLRefHeaderFile">&lt;NiPhysXAccumRigidBodyDest.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/class_ni_phys_x_accum_rigid_body_dest.gif" alt="Inheritance graph for NiPhysXAccumRigidBodyDest"/>
  <p class="FigureCaption">Inheritance graph for NiPhysXAccumRigidBodyDest</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">A destination object for transferring state from a PhysX rigid body actor to Gamebryo nodes associated with animation accumulation. </p>
<p class="NDLNormal">A destination in the Gamebryo-PhysX package is a link between a PhysX actor that is producing state, and a Gamebryo scene graph object that is being driven by the physics. <span class="NDLSystemFont">NiPhysXAccumRigidBodyDest</span> is an abstract base class for destinations that extract and set rigid body state (rotation and translation) on two nodes that are doing transform accumulation in the Gamebryo animation system.</p>
<p class="NDLNormal">Beyond functionality of its base class, this class adds flags to store the accumulation settings and a function to take a total transformation and break it into accumulated and non-accumulated portions. The latter is a protected member function available to sub-classes.</p>
<p class="NDLNormal">
<p class="NDLNormal">This class is abstract because it does not implement <span class="NDLSystemFont"><a href="NiPhysXDest.htm#class_ni_phys_x_dest_1a55e7a9092b0e681ee2842035fbf36671">NiPhysXDest::UpdateSceneGraph</a></span> nor <span class="NDLSystemFont"><a href="NiPhysXRigidBodyDest.htm#class_ni_phys_x_rigid_body_dest_1ae9bde9f5436cdd0fa434813d51def226">NiPhysXRigidBodyDest::GetSceneGraphParent()</a></span>. </p></p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="class_ni_phys_x_accum_rigid_body_dest_1a4752e127722e5655449779f02047154c"></a>
<p class="NDLRefMemberFunction">NiPhysXAccumRigidBodyDest(<br/>NxActor* pkActor, <br/>NxActor* pkActorParent)</p>
<p class="NDLRefMemberDescription">Constructor takes the actor that we are extractig state from and the actor that corresponds to the scene graph parent of the accumulation node we are controlling. </p>

<a name="class_ni_phys_x_accum_rigid_body_dest_1a2bfbea6bd6bf27119401f334570aa998"></a>
<p class="NDLRefMemberFunction">~NiPhysXAccumRigidBodyDest()</p>
<p class="NDLRefMemberDescription">Destructor. </p>
<a name="accumulation_control_flags"></a>
<p class="NDLRefHead1">Accumulation control flags</p>

<p class="NDLRefMemberDescription">These functions allow you to get and set the flags that control how the accumulation is performed.</p>
<p class="NDLRefMemberDescription">Any flag that is true causes that portion of the transformation to be sent to the accumulation node, while false leaves the transformation component on the non-accumulated node. For rotation you must specify either none, one or all of the flags. The front facing flags inform the system of the front facing direction for the character. The ucAxis is 0 for X, 1 for Y and 2 for Z. However, only X and Y are respected by the system. </p>

<a name="class_ni_phys_x_accum_rigid_body_dest_1ae2f35c55a1904951a2d5785cc42550f6"></a>
<p class="NDLRefMemberFunction">void  SetAccumTranslation(<br/>const <span class="NDLSystemFont">bool</span> bAccumX, <br/>const <span class="NDLSystemFont">bool</span> bAccumY, <br/>const <span class="NDLSystemFont">bool</span> bAccumZ)</p>
<p class="NDLRefMemberDescription">Set flags controlling the axes along which to accumulate translation. </p>

<a name="class_ni_phys_x_accum_rigid_body_dest_1a520d20292e054d5710aa2e795ac41c36"></a>
<p class="NDLRefMemberFunction">void  GetAccumTranslation(<br/><span class="NDLSystemFont">bool</span>& bAccumX, <br/><span class="NDLSystemFont">bool</span>& bAccumY, <br/><span class="NDLSystemFont">bool</span>& bAccumZ) const</p>
<p class="NDLRefMemberDescription">Get flags controlling the axes along which to accumulate translation. </p>

<a name="class_ni_phys_x_accum_rigid_body_dest_1a0311148529ca2b853ccc6f53f0ab42a1"></a>
<p class="NDLRefMemberFunction">void  SetAccumRotation(<br/>const <span class="NDLSystemFont">bool</span> bAccumX, <br/>const <span class="NDLSystemFont">bool</span> bAccumY, <br/>const <span class="NDLSystemFont">bool</span> bAccumZ)</p>
<p class="NDLRefMemberDescription">Set flags controlling the axes about which to accumulate rotation. </p>
<p class="NDLRefMemberDetailedDescription">Either none, one or all of the flags must be true. </p>

<a name="class_ni_phys_x_accum_rigid_body_dest_1a3515632573be7fc46ba9e0b9027a9dff"></a>
<p class="NDLRefMemberFunction">void  GetAccumRotation(<br/><span class="NDLSystemFont">bool</span>& bAccumX, <br/><span class="NDLSystemFont">bool</span>& bAccumY, <br/><span class="NDLSystemFont">bool</span>& bAccumZ) const</p>
<p class="NDLRefMemberDescription">Get flags controlling the axes about which to accumulate rotation. </p>

<a name="class_ni_phys_x_accum_rigid_body_dest_1a4eece9e2c4f2e0ab2ca2e3a344505703"></a>
<p class="NDLRefMemberFunction">void  SetAccumFrontFacing(<br/>const unsigned char ucAxis, <br/>const <span class="NDLSystemFont">bool</span> bIsNegative)</p>
<p class="NDLRefMemberDescription">Set the axis to consider front facing for the character. </p>
<p class="NDLRefMemberDetailedDescription">X is 0, Y is 1, Z is 2 and bIsNegative reverses direction. However, only X and Y are respected by the system. </p>

<a name="class_ni_phys_x_accum_rigid_body_dest_1ae8af76c8039423cda857aaf505ed41be"></a>
<p class="NDLRefMemberFunction">void  GetAccumFrontFacing(<br/>unsigned char& ucAxis, <br/><span class="NDLSystemFont">bool</span>& bIsNegative) const</p>
<p class="NDLRefMemberDescription">Get the axis to consider front facing for the character. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
