<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiPhysXAccumTransformDest</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiPhysXAccumTransformDest</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="NiPhysXAccumRigidBodyDest.htm">NiPhysXAccumRigidBodyDest</a></span></p>


<p class="NDLRefHeaderFile">&lt;NiPhysXAccumTransformDest.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/class_ni_phys_x_accum_transform_dest.gif" alt="Inheritance graph for NiPhysXAccumTransformDest"/>
  <p class="FigureCaption">Inheritance graph for NiPhysXAccumTransformDest</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">Each <span class="NDLSystemFont">NiPhysXAccumTransformDest</span> connects a PhysX rigid body actor to the transformation of two Gamebryo scene graph nodes that are implementing animation accumulation. </p>
<p class="NDLNormal">One target node is the accumulation root of the character, and the other is its non-accumulated child. Most of its functionality is derived from the base classes. This class only adds the final step of pushing the transformation state to the scene graph.</p>
<p class="NDLNormal">This node is for use in controlling rag-dolls or other characters that have Gamebryo Animation Sequences defined. You will need this node if you have a physics actor controlling the "Character Root" or "Accumulation Root" of a character and you are NOT using an <span class="NDLSystemFont"><a href="NiPhysXSequenceManager.htm">NiPhysXSequenceManager</a></span> object to control animations. When the model is exported from the art tool, there will be a regular <span class="NDLSystemFont"><a href="NiPhysXTransformDest.htm">NiPhysXTransformDest</a></span> object associated with the character root or accumulation root. The root node should have a child, with "NonAccum" in its name. The existing <span class="NDLSystemFont"><a href="NiPhysXTransformDest.htm">NiPhysXTransformDest</a></span> object should be replaced by an <span class="NDLSystemFont">NiPhysXAccumTransformDest</span> object. Applications will have to do this in code.</p>
<p class="NDLNormal">
<p class="NDLNormal">Interpolation will fail for fast rotating objects due to the fundamental limitations of rotation representations and discrete time sampling. Disable interpolation for fast moving objects. </p></p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="class_ni_phys_x_accum_transform_dest_1ab87032304405de47a9bbf9de0851d219"></a>
<p class="NDLRefMemberFunction">NiPhysXAccumTransformDest(<br/><span class="NDLSystemFont"><a href="../NiMain/NiAVObject.htm">NiAVObject</a></span>* pkAccumTarget, <br/><span class="NDLSystemFont"><a href="../NiMain/NiAVObject.htm">NiAVObject</a></span>* pkNonAccumTarget, <br/>NxActor* pkActor, <br/>NxActor* pkActorParent)</p>
<p class="NDLRefMemberDescription">The constructor stores its target nodes, pkAccumTarget and pkNonAccumTarget, and the other arguments are passed to the base class constructor. </p>

<a name="class_ni_phys_x_accum_transform_dest_1ac43856cc1b38f5c28e49eacad6c651fc"></a>
<p class="NDLRefMemberFunction">~NiPhysXAccumTransformDest()</p>
<p class="NDLRefMemberDescription">Destructor. </p>

<a name="class_ni_phys_x_accum_transform_dest_1a5766e4fd33efe7aa95d7a8833889b45f"></a>
<p class="NDLRefMemberFunction">virtual void  UpdateSceneGraph(<br/>const float fT, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiTransform.htm">NiTransform</a></span>& kRootTransform, <br/>const float fScalePToW, <br/>const <span class="NDLSystemFont">bool</span> bForce)</p>
<p class="NDLRefMemberDescription">Update function that applies transforms to the nodes. </p>
<p class="NDLRefMemberDetailedDescription">If the interpolation flag (defined in <span class="NDLSystemFont"><a href="NiPhysXDest.htm">NiPhysXDest</a></span>) is false, this function pushes the most recently extracted transformations into the target nodes. See the base class documentation for how this transformation is computed. If the interpolation flag is true, the time fT is used to interpolate or extrapolate from the two most recently extracted PhysX actor transforms (the work is done by the base class). The bForce argument is ignored. </p>
<a name="access_to_scene_graph_objects"></a>
<p class="NDLRefHead1">Access to scene graph objects</p>

<p class="NDLRefMemberDescription">These functions are accessors for the accumulated target and non-accumulated target.</p>
<p class="NDLRefMemberDescription">Note that strange things might happen with interpolated values, because the base class stores the local Gamebryo coordinate transformation. If the relationship of the target to its parent changes, then there may be a jump in the motion. To avoid this, call NiPhysXRigidDest::UpdateFromActors on this instance twice with bForce true. This overwrites the transformation values with new, correct, ones. </p>

<a name="class_ni_phys_x_accum_transform_dest_1a3a20f0a108b995e61e4c351079548cdf"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../NiMain/NiAVObject.htm">NiAVObject</a></span>*  GetAccumTarget() const</p>
<p class="NDLRefMemberDescription">Get the accumulation node target for this destination. </p>

<a name="class_ni_phys_x_accum_transform_dest_1ad1537c4f5275ca25d883c0623234bb7a"></a>
<p class="NDLRefMemberFunction">void  SetAccumTarget(<span class="NDLSystemFont"><a href="../NiMain/NiAVObject.htm">NiAVObject</a></span>* pkTarget)</p>
<p class="NDLRefMemberDescription">Set the accumulation node target for this destination. </p>

<a name="class_ni_phys_x_accum_transform_dest_1adf6e3cb4d6cbac755f2b6e7f9b4c5542"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../NiMain/NiAVObject.htm">NiAVObject</a></span>*  GetNonAccumTarget() const</p>
<p class="NDLRefMemberDescription">Get the non-accumulation node target for this destination. </p>
<p class="NDLRefMemberDetailedDescription">This node will typically be the scene graph child of the accum node. </p>

<a name="class_ni_phys_x_accum_transform_dest_1ad2312f9d3a1dab77c73de744822f5eed"></a>
<p class="NDLRefMemberFunction">void  SetNonAccumTarget(<span class="NDLSystemFont"><a href="../NiMain/NiAVObject.htm">NiAVObject</a></span>* pkTarget)</p>
<p class="NDLRefMemberDescription">Set the non-accumulation node target for this destination. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
