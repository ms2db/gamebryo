<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiPhysXRigidBodyDest</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiPhysXRigidBodyDest</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="NiPhysXDest.htm">NiPhysXDest</a></span></p>


<p class="NDLRefHeaderFile">&lt;NiPhysXRigidBodyDest.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/class_ni_phys_x_rigid_body_dest.gif" alt="Inheritance graph for NiPhysXRigidBodyDest"/>
  <p class="FigureCaption">Inheritance graph for NiPhysXRigidBodyDest</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal"><span class="NDLSystemFont">NiPhysXRigidBodyDest</span> is an abstract base class for destinations that extract and set rigid body state (rotation and translation). </p>
<p class="NDLNormal">A destination in the Gamebryo-PhysX package is a link between a PhysX actor that is producing state, and a Gamebryo scene graph object that is being driven by the physics.</p>
<p class="NDLNormal">Internally, this class stores a PhysX actor, it actor parent if it has one, and the two most recent transformations extracted from that actor. Also stored are the application times for the transformations for use when interpolating.</p>
<p class="NDLNormal">The actor parent is a PhysX actor object that corresponds to the scene graph parent of this destination's target node.</p>
<p class="NDLNormal">If the actor parent is known, the stored transformation state is the relative transformation between the actor and its parent (used for jointed objects). Otherwise global state is stored. All stored states are pre-scaled by the Gamebryo-PhysX relative scale.</p>
<p class="NDLNormal">A protected member function, GetTransforms, is used by the UpdateSceneGraph to compute the Gamebryo scene graph transform for a node or interpolator. The extracted transformation depends on the presence of the various parent pointers. All computations are designed to get the best estimate for the local transformation from the actor's coordinate system to its parents, as required by Gamebryo.</p>
<p class="NDLNormal">First, the actor parent is checked. If pkActorParent is non-NULL, then the stored transform is the parent actor's inverse transform composed with the actor's transform.</p>
<p class="NDLNormal">In the absence of a parent actor, the protected function <span class="NDLSystemFont"><a href="NiPhysXRigidBodyDest.htm#class_ni_phys_x_rigid_body_dest_1ae9bde9f5436cdd0fa434813d51def226">NiPhysXRigidBodyDest::GetSceneGraphParent()</a></span> is called to find the scene graph parent of the Gamebryo node the class is driving. Derived classes must implement this function. If the returned parent is non-NULL, then the stored transform is the parent node's inverse transform composed with the actor's Gamebryo global transform, which is computed by composing kRootTransform with the actor's pose.</p>
<p class="NDLNormal">If neither parent is available, then the Gamebryo global transformation is used, which is computed by composing kRootTransform with the actor's pose.</p>
<p class="NDLNormal">This class is abstract because it does not implement <span class="NDLSystemFont"><a href="NiPhysXDest.htm#class_ni_phys_x_dest_1a55e7a9092b0e681ee2842035fbf36671">NiPhysXDest::UpdateSceneGraph</a></span> or <span class="NDLSystemFont"><a href="NiPhysXRigidBodyDest.htm#class_ni_phys_x_rigid_body_dest_1ae9bde9f5436cdd0fa434813d51def226">NiPhysXRigidBodyDest::GetSceneGraphParent</a></span>. </p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="class_ni_phys_x_rigid_body_dest_1a03c32b03c3e707b064ddb00dfa49e57e"></a>
<p class="NDLRefMemberFunction">NiPhysXRigidBodyDest(<br/>NxActor* pkActor, <br/>NxActor* pkActorParent)</p>
<p class="NDLRefMemberDescription">Constructor. </p>
<p class="NDLRefMemberDetailedDescription">The constructor sets state common to rigid body destinations. The internal transformations used for interpolation are set to the identity transforms, and the extraction times for those transformations are set to be in the past.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pkActor</span></td>
    <td>The PhysX actor from which to extract state. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkActorParent</span></td>
    <td>The parent of pkActor. It must be some actor in the PhysX scene that has the same pose as the controlled node's parent in the scene graph. For example, if pkActor is representing a character's lower arm, pkActorParent should be the actor for the upper arm, presuming the arms have a parent-child relationship in the Gamebryo scene graph. This value will be NULL for objects not connected to others in a hierarchical linkage. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_phys_x_rigid_body_dest_1a494d3d5fbb13b39e06f65f20bdd859f4"></a>
<p class="NDLRefMemberFunction">~NiPhysXRigidBodyDest()</p>
<p class="NDLRefMemberDescription">Destructor does nothing. </p>

<a name="class_ni_phys_x_rigid_body_dest_1a6dce24d001e6d6f797c8d1f43ecb7a01"></a>
<p class="NDLRefMemberFunction">NxActor*  GetActor() const</p>
<p class="NDLRefMemberDescription">Returns the PhysX actor the we are extracting state from. </p>

<a name="class_ni_phys_x_rigid_body_dest_1af25a0132c9f564b6d9ed9a0ff35be092"></a>
<p class="NDLRefMemberFunction">void  SetActor(NxActor* pkActor)</p>
<p class="NDLRefMemberDescription">Sets the PhysX actor the we are extracting state from. </p>

<a name="class_ni_phys_x_rigid_body_dest_1a4d1d585939ddd8ab35719adf2d48d9a1"></a>
<p class="NDLRefMemberFunction">NxActor*  GetActorParent() const</p>
<p class="NDLRefMemberDescription">Get the parent actor. </p>
<p class="NDLRefMemberDetailedDescription">See the documentation above. </p>

<a name="class_ni_phys_x_rigid_body_dest_1a61087ae2248e3efc624b1cc7b8fc9b71"></a>
<p class="NDLRefMemberFunction">void  SetActorParent(NxActor* pkParent)</p>
<p class="NDLRefMemberDescription">Set the parent actor. </p>
<p class="NDLRefMemberDetailedDescription">See the documentation above. </p>

<a name="class_ni_phys_x_rigid_body_dest_1ad5560cb83456e8c5e10bd92132a4e952"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetOptimizeSleep() const</p>
<p class="NDLRefMemberDescription">Get the sleep optimization flag. </p>
<p class="NDLRefMemberDetailedDescription">An optimization is possible if an actor is sleeping and its state does not need to be pushed to the Gamebryo scene graph. In order to use this optimization the global transformation for the object in the Gamebryo scene graph must also be unchanging. This is typically not the case for anything involved in an animated hierarchy. For instance, rag-doll bones cannot be sleep optimized because their parents in the skeleton may still be moving. This flag is false by default. </p>

<a name="class_ni_phys_x_rigid_body_dest_1a8221ca8c0a4669379e8e82e5f7535649"></a>
<p class="NDLRefMemberFunction">void  SetOptimizeSleep(const <span class="NDLSystemFont">bool</span> bOptimize)</p>
<p class="NDLRefMemberDescription">Set the sleep optimization flag. </p>
<p class="NDLRefMemberDetailedDescription">See GetSleepOptimization, above. </p>

<a name="class_ni_phys_x_rigid_body_dest_1a930d676c56c76838794e20952718ff99"></a>
<p class="NDLRefMemberFunction">float  GetTime(<span class="NDLSystemFont">NiUInt32</span> uiIndex) const</p>
<p class="NDLRefMemberDescription">Get the times stored for the internal state. </p>
<p class="NDLRefMemberDetailedDescription">This function is intended for debugging purposes only. The index is either 0 or 1, and refers to the internal buffer entries. </p>

<a name="class_ni_phys_x_rigid_body_dest_1af59c81269a2b2d27eb9a5fbfe59b0fcf"></a>
<p class="NDLRefMemberFunction">const NxMat34&  GetPose(<span class="NDLSystemFont">NiUInt32</span> uiIndex) const</p>
<p class="NDLRefMemberDescription">Get the pose stored for the internal state. </p>
<p class="NDLRefMemberDetailedDescription">This function is intended for debugging purposes only. The index is either 0 or 1, and refers to the internal buffer entries. </p>

<a name="class_ni_phys_x_rigid_body_dest_1af832873724312ba130ba2b108cac868b"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetSleeping() const</p>
<p class="NDLRefMemberDescription">Returns true if the actor is currently sleeping (for debug). </p>

<a name="class_ni_phys_x_rigid_body_dest_1ab98dc5d2eb5e269fc4fef6fada8ce885"></a>
<p class="NDLRefMemberFunction">virtual void  UpdateFromActors(<br/>const float fT, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiTransform.htm">NiTransform</a></span>& kRootTransform, <br/>const float fScalePToW, <br/>const <span class="NDLSystemFont">bool</span> bForce)</p>
<p class="NDLRefMemberDescription">Extract the state from the actor and store it. </p>
<p class="NDLRefMemberDetailedDescription">If fT is less than or equal to the most recent stored transformation, and bForce is false, then nothing is done. If bForce is true, state is always extracted with the given time. If the actor is sleeping and the sleeping optimization flag is true, then this function operates at most once more (to extract the state for the frame on which the actor was put to sleep).</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">fT</span></td>
    <td>The simulation time for which we are extracting. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kRootTransform</span></td>
    <td>The global transformation applied to the PhysX scene, which is not used by this function. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fScalePToW</span></td>
    <td>A scale factor to apply to all positions before they are stored. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">bForce</span></td>
    <td>If true, the update always happens and the internal entries for interpolation are both set to have the extracted state. </td>
</tr>

        </tbody>
    </table>
</div>


 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
