<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiPhysXTransformDest</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiPhysXTransformDest</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="NiPhysXRigidBodyDest.htm">NiPhysXRigidBodyDest</a></span></p>


<p class="NDLRefHeaderFile">&lt;NiPhysXTransformDest.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/class_ni_phys_x_transform_dest.gif" alt="Inheritance graph for NiPhysXTransformDest"/>
  <p class="FigureCaption">Inheritance graph for NiPhysXTransformDest</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">Each <span class="NDLSystemFont">NiPhysXTransformDest</span> object connects a PhysX rigid body actor to a Gamebryo scene graph node. </p>
<p class="NDLNormal">Most of its functionality is derived from the base classes. This class only adds the final step of interpolating the PhysX results and pushing them to the scene graph.</p>
<p class="NDLNormal">
<p class="NDLNormal">Interpolation will fail for fast rotating objects due to the fundamental limitations of rotation representations and discrete time sampling. Disable interpolation for fast moving objects. </p></p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="class_ni_phys_x_transform_dest_1a7a3628128409ba2fba0df8508a96d4da"></a>
<p class="NDLRefMemberFunction">NiPhysXTransformDest(<br/><span class="NDLSystemFont"><a href="../NiMain/NiAVObject.htm">NiAVObject</a></span>* pkTarget, <br/>NxActor* pkActor, <br/>NxActor* pkActorParent)</p>
<p class="NDLRefMemberDescription">The constructor stores its target node, pkTarget, and the other arguments are passed to the base class constructor. </p>

<a name="class_ni_phys_x_transform_dest_1a4527cfbf45f6bf22d95a7b43e979a88e"></a>
<p class="NDLRefMemberFunction">~NiPhysXTransformDest()</p>
<p class="NDLRefMemberDescription">Destructor does nothing. </p>

<a name="class_ni_phys_x_transform_dest_1a97bfa52a2681124a871846823e634568"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../NiMain/NiAVObject.htm">NiAVObject</a></span>*  GetTarget() const</p>
<p class="NDLRefMemberDescription">Return the scene graph node that is receiving the actor's transformation. </p>

<a name="class_ni_phys_x_transform_dest_1a06229471d6af805092759cb1e0f37759"></a>
<p class="NDLRefMemberFunction">void  SetTarget(<span class="NDLSystemFont"><a href="../NiMain/NiAVObject.htm">NiAVObject</a></span>* pkTarget)</p>
<p class="NDLRefMemberDescription">Set the scene graph node that is receiving the actor's transformation. </p>

<a name="class_ni_phys_x_transform_dest_1af8b6e1c4e39c061d63481c3c683de47e"></a>
<p class="NDLRefMemberFunction">virtual void  UpdateSceneGraph(<br/>const float fT, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiTransform.htm">NiTransform</a></span>& kRootTransform, <br/>const float fScalePToW, <br/>const <span class="NDLSystemFont">bool</span> bForce)</p>
<p class="NDLRefMemberDescription">The update function implemented from <span class="NDLSystemFont"><a href="NiPhysXDest.htm">NiPhysXDest</a></span>. </p>
<p class="NDLRefMemberDetailedDescription">If bInterp is false, this pushes the most recently extracted transformation into the target node. See the base class documentation for how this transformation is computed. If the interpolation flag (defined in <span class="NDLSystemFont"><a href="NiPhysXDest.htm">NiPhysXDest</a></span>) is true, the time fT is used to interpolate or extrapolate from the two most recently extracted transforms (the work is done by the base class).</p>
<p class="NDLRefMemberDetailedDescription">See the documentation for <span class="NDLSystemFont"><a href="NiPhysXDest.htm">NiPhysXDest</a></span> for details of the other arguments. </p>

<a name="class_ni_phys_x_transform_dest_1a2120e7b1d192f7ca1e29a0de92d0f29f"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  StreamCanSkip()</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_transform_dest_1a4861e7867c659f1314f7d4fa31a8dd2c"></a>
<p class="NDLRefMemberFunction">virtual void  ProcessClone(<span class="NDLSystemFont"><a href="../NiMain/NiCloningProcess.htm">NiCloningProcess</a></span>& kCloning)</p>
<p class="NDLRefMemberFunction"></p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
