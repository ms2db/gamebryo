<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiPhysXMaterialDesc</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiPhysXMaterialDesc</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../NiMain/NiObject.htm">NiObject</a></span></p>


<p class="NDLRefHeaderFile">&lt;NiPhysXMaterialDesc.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/class_ni_phys_x_material_desc.gif" alt="Inheritance graph for NiPhysXMaterialDesc"/>
  <p class="FigureCaption">Inheritance graph for NiPhysXMaterialDesc</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal"><span class="NDLSystemFont">NiPhysXMaterialDesc</span> objects are for caching snapshots of NxMaterialDesc objects, used for streaming, cloning and restoring simulation state. </p>
<p class="NDLNormal">Applications will typically modify these objects between streaming in PhysX content and instantiating it, or if implementing cloning for content created in code. Multiple states can be stored corresponding to different snapshots of PhysX state. </p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="class_ni_phys_x_material_desc_1af077782c6c0551cb9f19077df8bb78b6"></a>
<p class="NDLRefMemberFunction">NiPhysXMaterialDesc(const <span class="NDLSystemFont">NiUInt16</span> usIndex = 0)</p>
<p class="NDLRefMemberDescription">The constructor optionally takes the index of this material in the PhysX SDK's set of materials. </p>

<a name="class_ni_phys_x_material_desc_1aa3325001df45c72f01055f9eef114f0d"></a>
<p class="NDLRefMemberFunction">virtual ~NiPhysXMaterialDesc()</p>
<p class="NDLRefMemberDescription">Destructor frees all allocated memory. </p>

<a name="class_ni_phys_x_material_desc_1a7c5c33b5339e04c3927a63d9f6cbf111"></a>
<p class="NDLRefMemberFunction">virtual void  ToMaterialDesc(<br/>NxMaterialDesc& kMaterialDesc, <br/>const <span class="NDLSystemFont">NiUInt32</span> uiIndex = 0) const</p>
<p class="NDLRefMemberDescription">Push the cached state from snapshot into a PhysX material descriptor. </p>
<p class="NDLRefMemberDetailedDescription">The requested state index is not range checked. </p>

<a name="class_ni_phys_x_material_desc_1ae767c9792e4f0c57aed1c19c3b9e7167"></a>
<p class="NDLRefMemberFunction">virtual void  ToMaterial(<br/>NxMaterial* pkMaterial, <br/>const <span class="NDLSystemFont">NiUInt32</span> uiIndex = 0) const</p>
<p class="NDLRefMemberDescription">Push the cached state from snapshot into a PhysX material object. </p>
<p class="NDLRefMemberDetailedDescription">The requested state index is not range checked. </p>

<a name="class_ni_phys_x_material_desc_1a3dce88aba7ada28213cc8d42ebb40bfa"></a>
<p class="NDLRefMemberFunction">virtual void  FromMaterialDesc(<br/>const NxMaterialDesc& kMaterialDesc, <br/>const <span class="NDLSystemFont">NiUInt32</span> uiIndex = 0)</p>
<p class="NDLRefMemberDescription">Captures state from a PhysX material descriptor and stores it in state uiIndex (allocating more space if required). </p>

<a name="class_ni_phys_x_material_desc_1a827f50d596d42ce086ac1562bc50b184"></a>
<p class="NDLRefMemberFunction">virtual void  FromMaterial(<br/>NxMaterial* pkMaterial, <br/>const <span class="NDLSystemFont">NiUInt32</span> uiIndex = 0)</p>
<p class="NDLRefMemberDescription">Captures state from a PhysX material object and stores it in state uiIndex. </p>
<p class="NDLRefMemberDetailedDescription">This simply saves the given material to a descriptor and calls FromMaterialDesc. </p>

<a name="class_ni_phys_x_material_desc_1a896daa8b8914879d7c50458f1757b1b7"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt16</span>  GetIndex() const</p>
<p class="NDLRefMemberDescription">Get the material index associated with this material. </p>

<a name="class_ni_phys_x_material_desc_1abb2f4f01fceb1a50b19e721f99ddd439"></a>
<p class="NDLRefMemberFunction">void  SetIndex(const  NiUInt16)</p>
<p class="NDLRefMemberDescription">Set the material index associated with this material. </p>

<a name="class_ni_phys_x_material_desc_1a86988399984c45139e6cf0c86f490a92"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsDataEqual(<br/>const NxMaterialDesc& kMaterialDesc, <br/>const <span class="NDLSystemFont">NiUInt32</span> uiIndex = 0)</p>
<p class="NDLRefMemberDescription">Returns true if the material data at the given index is equal to the given descriptor. </p>
<p class="NDLRefMemberDetailedDescription">Equivalent to a <span class="NDLSystemFont">operator==()</span> on NxMaterialDesc, which is not defined by PhysX. </p>

<a name="class_ni_phys_x_material_desc_1a7b7d66486990f0ddef0666893cf5e1fa"></a>
<p class="NDLRefMemberFunction">virtual void  RemoveStatesBeyond(const <span class="NDLSystemFont">NiUInt32</span> uiState)</p>
<p class="NDLRefMemberDescription">Remove all the stored materials starting at and beyond the given index. </p>

<a name="class_ni_phys_x_material_desc_1a4999a537123e31b051ff52ee1da28261"></a>
<p class="NDLRefMemberFunction">virtual void  RemoveState(const <span class="NDLSystemFont">NiUInt32</span> uiState)</p>
<p class="NDLRefMemberDescription">Remove the stored material at the given index, and shuffle down other states to fill any hole in stored state indexes. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
