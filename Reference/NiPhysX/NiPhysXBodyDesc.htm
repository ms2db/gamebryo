<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiPhysXBodyDesc</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiPhysXBodyDesc</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../NiMain/NiObject.htm">NiObject</a></span></p>


<p class="NDLRefHeaderFile">&lt;NiPhysXBodyDesc.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/class_ni_phys_x_body_desc.gif" alt="Inheritance graph for NiPhysXBodyDesc"/>
  <p class="FigureCaption">Inheritance graph for NiPhysXBodyDesc</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal"><span class="NDLSystemFont">NiPhysXBodyDesc</span> objects are for caching snapshots of NxBodyDesc objects, used for streaming, cloning and restoring simulation state. </p>
<p class="NDLNormal">Applications may need to use this class to manipulate the body state between streaming and creating the PhysX content. It is a sub-part of <span class="NDLSystemFont"><a href="NiPhysXActorDesc.htm">NiPhysXActorDesc</a></span>, and hence may be needed when creating such objects.</p>
<p class="NDLNormal">Internally, this class is internally a wrapper for an NxBodyDesc object and arrays of initial velocities. </p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="class_ni_phys_x_body_desc_1a16a433f54bfeefe3fcd7968350e69546"></a>
<p class="NDLRefMemberFunction">NiPhysXBodyDesc()</p>
<p class="NDLRefMemberDetailedDescription">The new object has a default NxBodyDesc and no stored velocity states. </p>

<a name="class_ni_phys_x_body_desc_1a6bbc49efc27e7197b1d7a5f9180f20c7"></a>
<p class="NDLRefMemberFunction">virtual ~NiPhysXBodyDesc()</p>
<p class="NDLRefMemberDescription">Destructor frees all memory. </p>

<a name="class_ni_phys_x_body_desc_1a28e15955b676fe9cb6eee7474d5a4aea"></a>
<p class="NDLRefMemberFunction">virtual void  ToBodyDesc(<br/>NxBodyDesc& kBodyDesc, <br/>const <span class="NDLSystemFont">NiUInt32</span> uiIndex, <br/>const NxMat33& kXform) const</p>
<p class="NDLRefMemberDescription">Pushes the cached state into a PhysX body descriptor, which can subsequently be used as part of an actor descriptor or modified and used with the SetFromBodyDesc function. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kBodyDesc</span></td>
    <td>The body descriptor to copy state to. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiIndex</span></td>
    <td>The index of the initial velocity set to use. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kXform</span></td>
    <td>A rotation transform to apply to the velocities. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_phys_x_body_desc_1a7972d53b00ac0a62fe9471ed92361706"></a>
<p class="NDLRefMemberFunction">virtual void  SetFromBodyDesc(<br/>const NxBodyDesc& kBodyDesc, <br/>const NxMat33& kXform)</p>
<p class="NDLRefMemberDescription">Captures state from a PhysX body descriptor. </p>
<p class="NDLRefMemberDetailedDescription">The velocities in the descriptor are always stored at index 0. The kXform argument is a rotation to apply to the velocities before storage. </p>

<a name="class_ni_phys_x_body_desc_1a225e1b597bd705eba8ea8ffa32d0e5ed"></a>
<p class="NDLRefMemberFunction">NxU32  GetBodyFlags() const</p>
<p class="NDLRefMemberDescription">Get the body flags from the descriptor. </p>
<a name="initial_state_management"></a>
<p class="NDLRefHead1">Initial State Management</p>

<p class="NDLRefMemberDescription">This object can store multiple sets of initial velocities for the actor.</p>
<p class="NDLRefMemberDescription">Any one of these may be used when creating an actor or an actor may be set to have one of these velocities on demand. The body is always assumed to have the same number of states as the <span class="NDLSystemFont"><a href="NiPhysXActorDesc.htm">NiPhysXActorDesc</a></span> to which it is attached. Therefore, any call to <span class="NDLSystemFont"><a href="NiPhysXActorDesc.htm#class_ni_phys_x_actor_desc_1ae0e2564a7c37e41fd177252c8973cc2f">NiPhysXActorDesc::SetPose</a></span> should have a matching call to <span class="NDLSystemFont"><a href="NiPhysXBodyDesc.htm#class_ni_phys_x_body_desc_1aa4eec2856c415a8c8a7f0747e80df8c5">NiPhysXBodyDesc::SetVelocities</a></span> if the actor is dynamic.</p>
<p class="NDLRefMemberDescription">Associated with each velocity is a sleep status. The actor will be set to sleep if the sleep status is true and the velocities are zero.</p>
<p class="NDLRefMemberDescription">If no velocities are provided, the actor is assumed to have zero angular and linear velocity. </p>

<a name="class_ni_phys_x_body_desc_1a31df86eb0e035c05bee36ccd933f9221"></a>
<p class="NDLRefMemberFunction">void  GetVelocities(<br/>NxVec3& kLinearVelocity, <br/>NxVec3& kAngularVelocity, <br/><span class="NDLSystemFont">bool</span>& bIsSleeping, <br/>const <span class="NDLSystemFont">NiUInt32</span> uiIndex) const</p>
<p class="NDLRefMemberDescription">Get the velocities and sleep status stored at a given index. </p>

<a name="class_ni_phys_x_body_desc_1aa4eec2856c415a8c8a7f0747e80df8c5"></a>
<p class="NDLRefMemberFunction">void  SetVelocities(<br/>const NxVec3& kLinearVelocity, <br/>const NxVec3& kAngularVelocity, <br/>const <span class="NDLSystemFont">bool</span> bIsSleeping, <br/>const <span class="NDLSystemFont">NiUInt32</span> uiIndex, <br/>const NxMat33& kXform)</p>
<p class="NDLRefMemberDescription">Set the velocities at a given index. </p>
<p class="NDLRefMemberDetailedDescription">The given transform is applied to the velocities before storage. More space is allocated when the requested index is beyond the number already stored. All the newly allocated states up to the given index, if not already set, are filled with zero vectors and non-sleeping. </p>

<a name="class_ni_phys_x_body_desc_1a140fca7e6310cebbe3f8893d5c73013c"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">NiUInt32</span>  AddState(<br/>NxActor* pkActor, <br/>const NxMat33& kXform)</p>
<p class="NDLRefMemberDescription">Add new velocities taken from the actor's current velocity. </p>
<p class="NDLRefMemberDetailedDescription">The actor's current velocities are extracted, multiplied by the given rotation, and stored in the next unused state index. The index for the newly stored state is returned. The actor must have been created or set for this function to do anything. If the actor is asleep then the sleep status is also set to true. </p>

<a name="class_ni_phys_x_body_desc_1acd25ed0a47c87d668b81dc14f1b6b7b5"></a>
<p class="NDLRefMemberFunction">virtual void  RestoreState(<br/>NxActor* pkActor, <br/>const <span class="NDLSystemFont">NiUInt32</span> uiIndex, <br/>const NxMat33& kXform)</p>
<p class="NDLRefMemberDescription">Restore the actor's velocities to those stored in the given index. </p>
<p class="NDLRefMemberDetailedDescription">Applications should rarely, if ever, use this function. It is called through <span class="NDLSystemFont"><a href="NiPhysXActorDesc.htm#class_ni_phys_x_actor_desc_1ab995cd1935c475f23b694b5df3086d31">NiPhysXActorDesc::RestoreState</a></span>.</p>
<p class="NDLRefMemberDetailedDescription">The stored pose is first multiplied by the given rotation. If the sleep status is true for this state then the actor is also put to sleep. </p>

<a name="class_ni_phys_x_body_desc_1aeff37d77f8447bcbe9eb7168a287fdb9"></a>
<p class="NDLRefMemberFunction">virtual void  RemoveStatesBeyond(const <span class="NDLSystemFont">NiUInt32</span> uiState)</p>
<p class="NDLRefMemberDescription">Remove all the stored states starting at and beyond the given index. </p>

<a name="class_ni_phys_x_body_desc_1af4a07104614e8daa2f5b1d83a6ccc5e5"></a>
<p class="NDLRefMemberFunction">virtual void  RemoveState(const <span class="NDLSystemFont">NiUInt32</span> uiState)</p>
<p class="NDLRefMemberDescription">Remove the stored state at the given index, and shuffle down other states to fill any hole in stored state indexes. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
