<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiPhysXProp</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiPhysXProp</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../NiMain/NiObjectNET.htm">NiObjectNET</a></span></p>


<p class="NDLRefHeaderFile">&lt;NiPhysXProp.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/class_ni_phys_x_prop.gif" alt="Inheritance graph for NiPhysXProp"/>
  <p class="FigureCaption">Inheritance graph for NiPhysXProp</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal"><span class="NDLSystemFont">NiPhysXProp</span> objects hold information about a PhysX prop, that is, part of a Gamebryo scene that is controlled by, or controls, a PhysX actor (including cloth, fluids or particles). </p>
<p class="NDLNormal">Props are added to <span class="NDLSystemFont"><a href="NiPhysXScene.htm">NiPhysXScene</a></span> objects to activate them in the PhysX scene. A prop is the smallest "unit" for PhysX objects, and is intended to hold a self-contained thing, such as a crate, a rag-doll, or a physical machine. The same prop can be cloned to create many instances of the same object. Props are also the objects exported in NIF files in the Gamebryo art pipeline.</p>
<p class="NDLNormal">Each prop hold a description of the PhysX contents that the prop represents, along with the objects that relate the PhysX content to the Gamebryo scene (<span class="NDLSystemFont"><a href="NiPhysXSrc.htm">NiPhysXSrc</a></span> objects, <span class="NDLSystemFont"><a href="NiPhysXDest.htm">NiPhysXDest</a></span> objects, and <span class="NDLSystemFont"><a href="../NiMesh/NiMesh.htm">NiMesh</a></span> objects with PhysX-related modifiers).</p>
<p class="NDLNormal">In addition, each prop holds a transformation that is applied to all PhysX poses and velocities when the prop is created in a scene. The transformation places the object relative to the global coordinate system of the NxScene that the prop is created in. This transformation is intended to allow clones of a prop template to be easily placed in different locations in the scene. Note that it is only used when the PhysX content is instantiated - it has no effect once the objects have been created.</p>
<p class="NDLNormal">The scale factor relating the PhysX coordinate system to the Gamebryo coordinate system is stored as a convenience. This scale should match that specified for the <span class="NDLSystemFont"><a href="NiPhysXScene.htm">NiPhysXScene</a></span> that the prop is attached to.</p>
<p class="NDLNormal">The prop also keeps information controlling the generation of PhysX collision mesh data. The "keep meshes" flag controls the persistence of PhysX collision mesh data. In almost all cases this flag should be false so that mesh data is deleted once the mesh is instantiated in the PhysX SDK. If this flag is true, then the cooked mesh data is kept for later use. Applications would only do this if they were planning to explicitly release the mesh object from the PhysX SDK and create it again later, or if planning to release the SDK and recreate all physics content again later. However, in this case it may be better to stream the scene in again. </p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="class_ni_phys_x_prop_1a263c2351ab74b03506219c410e5e6ac0"></a>
<p class="NDLRefMemberFunction">NiPhysXProp()</p>
<p class="NDLRefMemberDescription">Constructor. </p>
<p class="NDLRefMemberDetailedDescription">The transformation is set to the identity, the scale factor is 1.0, and meshes are set to not keep. All other data structures are empty or null. </p>

<a name="class_ni_phys_x_prop_1a9aeffc9b3ee853d2e81c96f9a319cdb6"></a>
<p class="NDLRefMemberFunction">~NiPhysXProp()</p>
<p class="NDLRefMemberDescription">Destructor. </p>
<p class="NDLRefMemberDetailedDescription">This releases all smart pointers. It does not remove the PhysX content represented by the prop from the NxScene it is in. </p>
<a name="attaching_to_a_niphysxscene_object"></a>
<p class="NDLRefHead1">Attaching to a NiPhysXScene object</p>

<p class="NDLRefMemberDescription">For additional information, see NiPhysXScene::AttachProp and NiPhysXScene::DetachProp. </p>

<a name="class_ni_phys_x_prop_1a67a9ba22f4f06363fc9f42e8d291f155"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiPhysXScene.htm">NiPhysXScene</a></span>*  GetScene()</p>
<p class="NDLRefMemberDescription">Return the scene to which this object is currently attached. </p>
<p class="NDLRefMemberDetailedDescription">The scene is automatically set when the prop is attached to a scene, or detached. It cannot be set by the application. </p>

<a name="class_ni_phys_x_prop_1acdc8dab0552ac8be2d56511d61dcc1f9"></a>
<p class="NDLRefMemberFunction">NxMat34  GetXform() const</p>
<p class="NDLRefMemberDescription">Get the transformation that is applied to all PhysX poses and velocities when the prop is created in a scene. </p>

<a name="class_ni_phys_x_prop_1a2308753e89f2b1a2dc5d079ce6a5b24e"></a>
<p class="NDLRefMemberFunction">void  SetXform(const NxMat34& kXform)</p>
<p class="NDLRefMemberDescription">Set the transformation that is applied to all PhysX poses and velocities when the prop is created in a scene. </p>

<a name="class_ni_phys_x_prop_1a1b7202033dd7eca37ca5df242cc97a14"></a>
<p class="NDLRefMemberFunction">float  GetScaleFactor() const</p>
<p class="NDLRefMemberDescription">Get the scale. </p>

<a name="class_ni_phys_x_prop_1a502303e1e005eebfc92542d48607840e"></a>
<p class="NDLRefMemberFunction">void  SetScaleFactor(const float fScale)</p>
<p class="NDLRefMemberDescription">Set the scale. </p>
<p class="NDLRefMemberDetailedDescription">World size is fScale times physics size. All of the props in a scene should have the same scale, or strange things will happen as positions and velocities are scaled differently for different props. </p>

<a name="class_ni_phys_x_prop_1ae7f7a153bbd5e899caac7fa6afaccf5c"></a>
<p class="NDLRefMemberFunction">virtual void  AttachSceneCallback(<span class="NDLSystemFont"><a href="NiPhysXScene.htm">NiPhysXScene</a></span>* pkScene)</p>
<p class="NDLRefMemberDescription">Callback used when a prop is attached to a scene. </p>
<p class="NDLRefMemberDetailedDescription">This function is called when the prop is attached to a <span class="NDLSystemFont"><a href="NiPhysXScene.htm">NiPhysXScene</a></span> object. Derived classes should implement this function if special action must be taken. If a derived class implements this, it must call the base class version also. </p>

<a name="class_ni_phys_x_prop_1aa0928c4df56c2efff313eb9aa8518e43"></a>
<p class="NDLRefMemberFunction">virtual void  DetachSceneCallback(<span class="NDLSystemFont"><a href="NiPhysXScene.htm">NiPhysXScene</a></span>* pkScene)</p>
<p class="NDLRefMemberDescription">Callback used when a prop is detached from a scene. </p>
<p class="NDLRefMemberDetailedDescription">This function is called when the prop is detached from a <span class="NDLSystemFont"><a href="NiPhysXScene.htm">NiPhysXScene</a></span> object. Derived classes should implement this function if special action must be taken. If a derived class implements this, it must call the base class version also. </p>
<a name="mesh_modifier_functionality"></a>
<p class="NDLRefHead1">Mesh Modifier Functionality</p>

<p class="NDLRefMemberDescription">The <span class="NDLSystemFont">NiPhysXProp</span> class holds an array of objects, derived from <span class="NDLSystemFont"><a href="../NiMesh/NiMesh.htm">NiMesh</a></span>, that need to have mesh modifiers submitted or completed when a simulation step begins or ends.</p>
<p class="NDLRefMemberDescription">Each of the meshes in the array has <span class="NDLSystemFont"><a href="../NiMesh/NiMesh.htm#class_ni_mesh_1a70c2f38c346feca509e91aeb5a6cd6d4">NiMesh::CompleteModifiers</a></span> and <span class="NDLSystemFont"><a href="../NiMesh/NiMesh.htm#class_ni_mesh_1a2ba9d587eeef037f9fbcebbb20166068">NiMesh::SubmitModifiers</a></span> called on it immediately before NxScene::simulate is called (with SyncPoint SYNC_PHYSICS_SIMULATE) and immediately after NxScene::fetchResults succeeds (with SyncPoint SYNC_PHYSICS_COMPLETED).</p>
<p class="NDLRefMemberDescription">Modified meshes that are held by a <span class="NDLSystemFont">NiPhysXProp</span> object will be automatically added and removed from an <span class="NDLSystemFont"><a href="NiPhysXScene.htm">NiPhysXScene</a></span> object when the prop is added and removed.</p>
<p class="NDLRefMemberDescription">The meshes are stored as smart pointers, so they must be heap allocated with NiNew and applications should never explicitly delete a mesh stored by this class. </p>

<a name="class_ni_phys_x_prop_1a7e02c8ae7ce531fe9e793a4b96eecd35"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  GetModifiedMeshCount() const</p>
<p class="NDLRefMemberDetailedDescription">Obtain the number of meshes stored. </p>

<a name="class_ni_phys_x_prop_1ad93c81eb14429bc6f041d2e5b6b15c1a"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  AddModifiedMesh(<span class="NDLSystemFont"><a href="../NiMesh/NiMesh.htm">NiMesh</a></span>* pkMesh)</p>
<p class="NDLRefMemberDescription">Add a mesh to the set that requires modifier notification, and return the index it was added at. </p>

<a name="class_ni_phys_x_prop_1a6f3f32c575e41660e2faedaeee3969dd"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../NiMesh/NiMesh.htm">NiMesh</a></span>*  GetModifiedMeshAt(const <span class="NDLSystemFont">NiUInt32</span> uiIndex)</p>
<p class="NDLRefMemberDescription">Return a pointer to the mesh at a given location (not range checked). </p>

<a name="class_ni_phys_x_prop_1a8b65ef653536f193d88a84b076477e2c"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  DeleteModifiedMesh(<span class="NDLSystemFont"><a href="../NiMesh/NiMesh.htm">NiMesh</a></span>* pkMesh)</p>
<p class="NDLRefMemberDescription">Remove a mesh from the set that requires modifier notification. </p>
<p class="NDLRefMemberDetailedDescription">Meshes are stored in smart pointers, so the mesh will be deleted if no other object is holding a pointer to the mesh.</p>
<p class="NDLRefMemberDetailedDescription">Returns true if the mesh was present and deleted, false otherwise. </p>

<a name="class_ni_phys_x_prop_1a64c576ec9b9b7a76caf7272146ae0594"></a>
<p class="NDLRefMemberFunction">void  DeleteModifiedMeshAt(const <span class="NDLSystemFont">NiUInt32</span> uiIndex)</p>
<p class="NDLRefMemberDescription">Remove the mesh at the given index from the set that requires modifier notification. </p>
<p class="NDLRefMemberDetailedDescription">Meshes are stored in smart pointers, so the mesh will be deleted if no other object is holding a pointer to the mesh. </p>
<a name="snapshots_and_reset"></a>
<p class="NDLRefHead1">Snapshots and Reset</p>

<p class="NDLRefMemberDescription">A snapshot is the state of all the Gamebryo-supported elements of a PhysX scene.</p>
<p class="NDLRefMemberDescription">The snapshot is used to stream the PhysX content and to provide streaming, cloning and reset functionality on actor poses and velocities. Each <span class="NDLSystemFont">NiPhysXProp</span> keeps a single snapshot (possibly NULL), which in turn contains multiple snapshot states for each actor and material. The individual actor states can be accessed directly, or the functions in <span class="NDLSystemFont"><a href="NiPhysXScene.htm">NiPhysXScene</a></span> can be used to manipulate the states on all actors in the scene. The two approaches should not be mixed because the state indexes will become confused. </p>

<a name="class_ni_phys_x_prop_1a2029df9cefe2de49c44c1887caf3c9a8"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiPhysXPropDesc.htm">NiPhysXPropDesc</a></span>*  GetSnapshot()</p>
<p class="NDLRefMemberDescription">Returns the snapshot for this prop, which is a smart pointer passed as a regular pointer for simplicity. </p>
<p class="NDLRefMemberDetailedDescription">Applications will frequently use this function to get the snapshot after streaming a prop into Gamebryo, so that they can access the actors, materials and joints before the PhysX content is instantiated. This is useful, for instance, in setting collision group flags or joint motors that cannot be authored in the art tools. Note that any modifications must be made to the snapshot before the prop is added to the scene, or before <span class="NDLSystemFont"><a href="NiPhysXScene.htm#class_ni_phys_x_scene_1a7f2083d5e5a1c4cec3d1252f4dc18b20">NiPhysXScene::CreateSceneFromSnapshot</a></span> is called on the scene. </p>

<a name="class_ni_phys_x_prop_1a8523514f295e1fc04021ffc76fcc6a72"></a>
<p class="NDLRefMemberFunction">void  SetSnapshot(<span class="NDLSystemFont"><a href="NiPhysXPropDesc.htm">NiPhysXPropDesc</a></span>* pkSnapshot)</p>
<p class="NDLRefMemberDescription">Sets the snapshot, which is internally stored as a smart pointer. </p>
<p class="NDLRefMemberDetailedDescription">Applications should not delete the memory themselves. Rather, use ReleaseSnapshot. </p>

<a name="class_ni_phys_x_prop_1a818826ea2acfadc909d188b73f1e0d43"></a>
<p class="NDLRefMemberFunction">void  ReleaseSnapshot()</p>
<p class="NDLRefMemberDescription">Sets the internal smart pointer to the snapshot to 0. </p>
<p class="NDLRefMemberDetailedDescription">Applications must not continue to hold a smart pointer to the snapshot after this function is called. </p>

<a name="class_ni_phys_x_prop_1aa7cde201951dd9cb9b0ae0f6dddea632"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetKeepMeshes() const</p>
<p class="NDLRefMemberDescription">Get the flag controlling deletion of mesh data on instantiation. </p>

<a name="class_ni_phys_x_prop_1ac802920335b51b0f6b598ce20ba8723f"></a>
<p class="NDLRefMemberFunction">void  SetKeepMeshes(const <span class="NDLSystemFont">bool</span> bVal)</p>
<p class="NDLRefMemberDescription">Set the flag controlling deletion of mesh data on instantiation. </p>
<a name="sources_and_destinations"></a>
<p class="NDLRefHead1">Sources and Destinations</p>

<p class="NDLRefMemberDescription">Each <span class="NDLSystemFont">NiPhysXProp</span> object maintains a <span class="NDLSystemFont"><a href="../NiMain/NiTObjectArray.htm">NiTObjectArray</a></span> of sources and another of destinations.</p>
<p class="NDLRefMemberDescription">The contents of these arrays are automatically added and removed from an <span class="NDLSystemFont"><a href="NiPhysXScene.htm">NiPhysXScene</a></span> object when the prop is added and removed.</p>
<p class="NDLRefMemberDescription">The arrays store smart pointers, so objects passed in must be heap allocated with NiNew and applications should never explicitly delete an object stored in one of these arrays. </p>

<a name="class_ni_phys_x_prop_1a87f4da304c655513911ea32e79cdbe68"></a>
<p class="NDLRefMemberFunction">void  SetAllSrcInterp(const <span class="NDLSystemFont">bool</span> bActive)</p>
<p class="NDLRefMemberDescription">A convenience functions to set the interpolation flag on all sources in this prop. </p>

<a name="class_ni_phys_x_prop_1ab4e1bdc98c6eea660385418a7e5066a5"></a>
<p class="NDLRefMemberFunction">void  SetAllDestInterp(const <span class="NDLSystemFont">bool</span> bActive)</p>
<p class="NDLRefMemberDescription">A convenience functions to set the interpolation flag on all destinations in this prop. </p>

<a name="class_ni_phys_x_prop_1a0a3b3cb74c992eee8976a693993daa26"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  GetSourcesCount() const</p>
<p class="NDLRefMemberDescription">Obtain the number of NiPhysXSrc-derived objects stored. </p>

<a name="class_ni_phys_x_prop_1adbaa425b09269d3f09bdcca2b013fbb5"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  AddSource(<span class="NDLSystemFont"><a href="NiPhysXSrc.htm">NiPhysXSrc</a></span>* pkSrc)</p>
<p class="NDLRefMemberDescription">Add a source to the array, and return the index it was added at. </p>

<a name="class_ni_phys_x_prop_1a931e57f360d4077a35ea0dfad903331c"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiPhysXSrc.htm">NiPhysXSrc</a></span>*  GetSourceAt(const <span class="NDLSystemFont">NiUInt32</span> uiIndex)</p>
<p class="NDLRefMemberDescription">Return a pointer to the source at a given location (not range checked). </p>

<a name="class_ni_phys_x_prop_1a316ce772b12546be469a0714e08da4bf"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  DeleteSource(<span class="NDLSystemFont"><a href="NiPhysXSrc.htm">NiPhysXSrc</a></span>* pkTarget)</p>
<p class="NDLRefMemberDescription">Remove a source from the array. </p>
<p class="NDLRefMemberDetailedDescription">Sources are stored in smart pointers, so the source will be deleted if no other object is holding a pointer to the source.</p>
<p class="NDLRefMemberDetailedDescription">Returns true if the source was present and deleted, false otherwise. </p>

<a name="class_ni_phys_x_prop_1a9b2071a5509b1600bdb644da70b627c8"></a>
<p class="NDLRefMemberFunction">void  DeleteSourceAt(const <span class="NDLSystemFont">NiUInt32</span> uiIndex)</p>
<p class="NDLRefMemberDescription">Remove the source at the given index from the array. </p>
<p class="NDLRefMemberDetailedDescription">Sources are stored in smart pointers, so the source will be deleted if no other object is holding a pointer to the source. </p>

<a name="class_ni_phys_x_prop_1a95dc1f2fb666469b1ca0a5d9413b6e97"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  GetDestinationsCount() const</p>
<p class="NDLRefMemberDescription">Obtain the number of NiPhysXDest-derived objects stored. </p>

<a name="class_ni_phys_x_prop_1adc48a3243d6fd3f33f0428d9c6cb53c4"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  AddDestination(<span class="NDLSystemFont"><a href="NiPhysXDest.htm">NiPhysXDest</a></span>* pkDest)</p>
<p class="NDLRefMemberDescription">Add a destination to the array, and return the index it was added at. </p>

<a name="class_ni_phys_x_prop_1ad8e11e9f426e361dfd987b057ab96a71"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiPhysXDest.htm">NiPhysXDest</a></span>*  GetDestinationAt(const <span class="NDLSystemFont">NiUInt32</span> uiIndex)</p>
<p class="NDLRefMemberDescription">Return a pointer to the destination at a given location (not range checked). </p>

<a name="class_ni_phys_x_prop_1a31e703b098e1c065d6f2c2fced40a418"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  DeleteDestination(<span class="NDLSystemFont"><a href="NiPhysXDest.htm">NiPhysXDest</a></span>* pkTarget)</p>
<p class="NDLRefMemberDescription">Remove a destination from the array. </p>
<p class="NDLRefMemberDetailedDescription">Destinations are stored in smart pointers, so the destination will be deleted if no other object is holding a pointer to the destination.</p>
<p class="NDLRefMemberDetailedDescription">Returns true if the destination was present and deleted, false otherwise. </p>

<a name="class_ni_phys_x_prop_1ac1abc389c2a5fe2364f4d3fa3277bee8"></a>
<p class="NDLRefMemberFunction">void  DeleteDestinationAt(const <span class="NDLSystemFont">NiUInt32</span> uiIndex)</p>
<p class="NDLRefMemberDescription">Remove the destination at the given index from the array. </p>
<p class="NDLRefMemberDetailedDescription">Destinations are stored in smart pointers, so the destination will be deleted if no other object is holding a pointer to the destination. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
