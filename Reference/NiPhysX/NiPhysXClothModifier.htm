<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiPhysXClothModifier</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiPhysXClothModifier</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="NiPhysXMeshModifier.htm">NiPhysXMeshModifier</a></span></p>


<p class="NDLRefHeaderFile">&lt;NiPhysXClothModifier.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/class_ni_phys_x_cloth_modifier.gif" alt="Inheritance graph for NiPhysXClothModifier"/>
  <p class="FigureCaption">Inheritance graph for NiPhysXClothModifier</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">The <span class="NDLSystemFont">NiPhysXClothModifier</span> class is used to deform a Gamebryo mesh according to data in a NxCloth object. </p>
<p class="NDLNormal">A modifier of this type must be attached to any <span class="NDLSystemFont"><a href="../NiMesh/NiMesh.htm">NiMesh</a></span> object that is the target of PhysX cloth simulation. Between simulation steps, the modifier sets the data streams of the mesh so that it matches the PhysX cloth mesh structure and location. When the cloth is not sleeping, the transformation of the target Gamebryo node is not modified - everything is done by moving mesh vertices. If the cloth is sleeping, the Gamebryo mesh is not modified but the node may have its transformation modified if sleep transforms are active (see below).</p>
<p class="NDLNormal">The sync points for this modifier depend on the structure of the main game loop. In cases where PhysX is simulating in parallel with rendering (asynchronous simulation), the modifier should be submitted when simulation completes (which will be early in a frame) and completed when the next simulation step begins, which by definition is before rendering during asynchronous simulation. On the other hand, when simulation is synchronous, the modifier is submitted when visible and completed at render. It is important to be certain that the modifier does not execute inside a PhysX simulate/fetch block. </p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="class_ni_phys_x_cloth_modifier_1a4e060f3755c779d719c7409b86754bcc"></a>
<p class="NDLRefMemberFunction">NiPhysXClothModifier()</p>
<p class="NDLRefMemberDescription">Constructor. </p>
<p class="NDLRefMemberDetailedDescription">The default mesh growth factor is 1.5 and the modifier is active. </p>

<a name="class_ni_phys_x_cloth_modifier_1ae488cfdcd344350d25d64c7f25e174c0"></a>
<p class="NDLRefMemberFunction">virtual ~NiPhysXClothModifier()</p>
<p class="NDLRefMemberDescription">Destructor. </p>
<p class="NDLRefMemberDetailedDescription">Frees all data arrays and sets any smart pointers to 0. </p>

<a name="class_ni_phys_x_cloth_modifier_1a9a923c356c718fa17530dba79451fc0e"></a>
<p class="NDLRefMemberFunction">virtual void  SceneChanged(<br/><span class="NDLSystemFont"><a href="../NiMesh/NiMesh.htm">NiMesh</a></span>* pkMesh, <br/><span class="NDLSystemFont"><a href="NiPhysXScene.htm">NiPhysXScene</a></span>* pkScene)</p>
<p class="NDLRefMemberDescription">This function is called when there is a change in the <span class="NDLSystemFont"><a href="NiPhysXScene.htm">NiPhysXScene</a></span> object that the cloth is associated with. </p>
<p class="NDLRefMemberDetailedDescription">The scene pointer is cached and submission and completion points are set. Attach is called on the modifier - the modifier may not be attached already because a scene is required for attachment. </p>

<a name="class_ni_phys_x_cloth_modifier_1a945b8edd1d572760fb3ac9a94731e413"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  AreRequirementsMet(<br/><span class="NDLSystemFont"><a href="../NiMesh/NiMesh.htm">NiMesh</a></span>* pkMesh, <br/><span class="NDLSystemFont"><a href="../efd/efd__SystemDesc.htm#classefd_1_1_system_desc_1a3cbca1b21d64ccdc84fb9bd8679435f9">efd::SystemDesc::RendererID</a></span> ePlatform) const</p>
<p class="NDLRefMemberDescription">Returns true if the requirements for this modifier on the given platform are met by the mesh. </p>
<p class="NDLRefMemberDetailedDescription">This modifier requires CPU readable and writable position stream with format F_FLOAT32_3.</p>
<p class="NDLRefMemberDetailedDescription">If normal updating is enabled, then the normal and binormal and tangent streams, if present, must be CPU readable and writable.</p>
<p class="NDLRefMemberDetailedDescription">If the cloth can tear, then all USAGE_VERTEX streams and USAGE_INDEX streams must be CPU readable and write mutable. </p>

<a name="class_ni_phys_x_cloth_modifier_1a3eaa0d421284281dc6d7f440bfb88f0a"></a>
<p class="NDLRefMemberFunction">virtual void  RetrieveRequirements(<span class="NDLSystemFont"><a href="../NiMesh/NiMeshRequirements.htm">NiMeshRequirements</a></span>& kRequirements) const</p>
<p class="NDLRefMemberDescription">Fill the requirements structure with this modifiers requirements. </p>
<p class="NDLRefMemberDetailedDescription">See AreRequirementsMet for a description of the requirements. </p>

<a name="class_ni_phys_x_cloth_modifier_1a5931dbfeb3d0364389c1f9e82b5f5225"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  Attach(<span class="NDLSystemFont"><a href="../NiMesh/NiMesh.htm">NiMesh</a></span>* pkMesh)</p>
<p class="NDLRefMemberDescription">Attach function to apply the modifier to a mesh. </p>
<p class="NDLRefMemberDetailedDescription">This function returns false (attachment fails) when either the <span class="NDLSystemFont"><a href="NiPhysXScene.htm">NiPhysXScene</a></span> object or NxCloth object associated with the modifier are not yet known. The modifier, therefore, will fail to attach at any time before the PhysX content is instantiated.</p>
<p class="NDLRefMemberDetailedDescription">Any functions implemented by this class that modify the <span class="NDLSystemFont"><a href="NiPhysXScene.htm">NiPhysXScene</a></span> object or the NxCloth object will attempt to attach the modifier in case it was not previously attached (or detach if the scene or cloth are set to null). </p>

<a name="class_ni_phys_x_cloth_modifier_1ae8fcfb445f5fbd3493ad37166a029111"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  Detach(<span class="NDLSystemFont"><a href="../NiMesh/NiMesh.htm">NiMesh</a></span>* pkMesh)</p>
<p class="NDLRefMemberDescription">Detaches the modifier from the mesh. </p>

<a name="class_ni_phys_x_cloth_modifier_1a37a009dd8de84bfbbf4ea2250903c12c"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  SubmitTasks(<br/><span class="NDLSystemFont"><a href="../NiMesh/NiMesh.htm">NiMesh</a></span>* pkMesh, <br/><span class="NDLSystemFont"><a href="../NiMain/NiSyncArgs.htm">NiSyncArgs</a></span>* pkArgs, <br/><span class="NDLSystemFont"><a href="../NiFloodgate/NiSPWorkflowManager.htm">NiSPWorkflowManager</a></span>* pkWFManager)</p>
<p class="NDLRefMemberDescription">Submit the Floodgate tasks for the modifier. </p>
<p class="NDLRefMemberDetailedDescription">A task is submitted if the sync points are correct, the modifier is set to be active, or if the update is forced. The forced flag is set when the <span class="NDLSystemFont"><a href="NiPhysXScene.htm">NiPhysXScene</a></span> object is forced to update.</p>
<p class="NDLRefMemberDetailedDescription">The Submit function does any work to process tearing, then submits a Floodgate task to perform the deformation of the mesh.</p>
<p class="NDLRefMemberDetailedDescription">This function assumes that the pkArgs argument is of type <span class="NDLSystemFont"><a href="NiPhysXSyncArgs.htm">NiPhysXSyncArgs</a></span> when the submission sync point is SYNC_PHYSICS_COMPLETED. </p>

<a name="class_ni_phys_x_cloth_modifier_1a672ae29c972cca6e26ad9b74c93d8942"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  CompleteTasks(<br/><span class="NDLSystemFont"><a href="../NiMesh/NiMesh.htm">NiMesh</a></span>* pkMesh, <br/><span class="NDLSystemFont"><a href="../NiMain/NiSyncArgs.htm">NiSyncArgs</a></span>* pkArgs)</p>
<p class="NDLRefMemberDescription">Completes any Floodgate tasks and does post-deformation work. </p>
<p class="NDLRefMemberDetailedDescription">This function waits on any outstanding tasks and then recomputes normals and BT streams (if present on the mesh). Finally, it updates the mesh bound. </p>

<a name="class_ni_phys_x_cloth_modifier_1a7a3f13cc8e13e3300981bd9f8d53099a"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  IsComplete(<br/><span class="NDLSystemFont"><a href="../NiMesh/NiMesh.htm">NiMesh</a></span>* pkMesh, <br/><span class="NDLSystemFont"><a href="../NiMain/NiSyncArgs.htm">NiSyncArgs</a></span>* pkArgs)</p>
<p class="NDLRefMemberDescription">Returns true if the mesh modifier has completed all required work for the provided sync points. </p>

<a name="class_ni_phys_x_cloth_modifier_1afdb77c6275cc25698e9c8802828c4fc2"></a>
<p class="NDLRefMemberFunction">NxCloth*  GetCloth()</p>
<p class="NDLRefMemberDescription">Return the NxCloth object that is driving the mesh, or 0 if none. </p>

<a name="class_ni_phys_x_cloth_modifier_1a1460902b7ef151261902a123a71f0037"></a>
<p class="NDLRefMemberFunction">void  SetCloth(<br/>NxCloth* pkCloth, <br/>const <span class="NDLSystemFont">NiUInt16</span>* puiVertexMap, <br/><span class="NDLSystemFont"><a href="../NiMesh/NiMesh.htm">NiMesh</a></span>* pkMesh)</p>
<p class="NDLRefMemberDescription">Set the PhysX cloth object that is driving the mesh. </p>
<p class="NDLRefMemberDetailedDescription">In addition to the cloth object, the function also takes an array of vertex indices and the mesh that the modifier is associated with. The index array is a mapping from Gamebryo vertex indices to PhysX cloth indices: the ith entry in the array gives the PhysX mesh vertex index corresponding to the ith Gamebryo mesh vertex. This mapping may be may-to-one depending on mesh topology.</p>
<p class="NDLRefMemberDetailedDescription">The arrays in the NxMeshData object associated with the cloth are allocated by this function.</p>
<p class="NDLRefMemberDetailedDescription">When the cloth is set on the modifier, the data streams on the mesh may be resized to accommodate growth from torn vertices. The final size is determined by the mesh growth factor (see SetMeshGrowFactor). If the data streams are resized, all of the modifiers on the mesh are reset. Regardless, the Attach function is called on this modifier because it may not have succeeded previously.</p>
<p class="NDLRefMemberDetailedDescription">The cloth object may be set to NULL, in which case the modifier is detached. </p>

<a name="class_ni_phys_x_cloth_modifier_1a9a7240bee1bb148848bb8f9bdc3f92b2"></a>
<p class="NDLRefMemberFunction">NxMeshData&  GetClothData()</p>
<p class="NDLRefMemberDescription">Return the cloth mesh data associated with the modifier. </p>
<p class="NDLRefMemberDetailedDescription">It is an internal object, owned by this object, for transferring the state out of the PhysX simulation and into the application space. Access is provided primarily for debugging purposes, and applications should never modify the contents of this structure. </p>

<a name="class_ni_phys_x_cloth_modifier_1a102528514da47fbc3f9671b75b963b02"></a>
<p class="NDLRefMemberFunction">NxActor*  GetParentActor()</p>
<p class="NDLRefMemberDescription">Return the parent actor associated with the cloth. </p>
<p class="NDLRefMemberDetailedDescription">The parent actor is a PhysX rigid body that corresponds to the scene graph parent of th ecloth mesh. It is used to improve coordinate system transformations, and should always be set if the mesh's parent node has a PhysX actor. This will typically be the case if the cloth is attached to an actor in the PhysX simulation and the Gamebryo node is similarly attached in the scene graph. </p>

<a name="class_ni_phys_x_cloth_modifier_1a073e896927a7d86ac7d4ffd9e2b174be"></a>
<p class="NDLRefMemberFunction">void  SetParentActor(NxActor* pkActor)</p>
<p class="NDLRefMemberDescription">Set the parent actor. </p>
<p class="NDLRefMemberDetailedDescription">See GetParentActor. </p>

<a name="class_ni_phys_x_cloth_modifier_1a54786351c8aa5e7ca9dcbd2860e738fe"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetActive() const</p>
<p class="NDLRefMemberDescription">Get the Active flag. </p>
<p class="NDLRefMemberDetailedDescription">Cloth data is only pushed to the mesh when the modifier is active. </p>

<a name="class_ni_phys_x_cloth_modifier_1a8139e47638a4bd44d54fb8de3aa5bace"></a>
<p class="NDLRefMemberFunction">void  SetActive(const <span class="NDLSystemFont">bool</span> bActive)</p>
<p class="NDLRefMemberDescription">Set the status of the Active flag (default is true). </p>

<a name="class_ni_phys_x_cloth_modifier_1a854d73f9a61ecb00f688be67c992ba0b"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetUpdateNormals() const</p>
<p class="NDLRefMemberDescription">Get the Update Normals flag. </p>
<p class="NDLRefMemberDetailedDescription">Normals, bitangents and tangents are only updated if the flag is true. </p>

<a name="class_ni_phys_x_cloth_modifier_1a5e10fe2ef4770c0c3aec9716ef2c6c73"></a>
<p class="NDLRefMemberFunction">void  SetUpdateNormals(const <span class="NDLSystemFont">bool</span> bUpdate)</p>
<p class="NDLRefMemberDescription">Set the UpdateNormals flag. </p>
<p class="NDLRefMemberDetailedDescription">Default is true. </p>

<a name="class_ni_phys_x_cloth_modifier_1ae1841e65d7afc48a55b297dd3970f582"></a>
<p class="NDLRefMemberFunction">float  GetMeshGrowFactor() const</p>
<p class="NDLRefMemberDescription">Get the mesh growth factor. </p>
<p class="NDLRefMemberDetailedDescription">See SetMeshGrowFactor. </p>

<a name="class_ni_phys_x_cloth_modifier_1a1e9ccd393448b719202699f18822c5ff"></a>
<p class="NDLRefMemberFunction">void  SetMeshGrowFactor(const float fGrowFactor)</p>
<p class="NDLRefMemberDescription">Set the mesh growth factor. </p>
<p class="NDLRefMemberDetailedDescription">When a cloth object is set on the modifier, extra space may be allocated for all USAGE_VERTEX data streams on the mesh to make space for vertices added through tearing. This value controls how much space is added: a value of 1.0 means no additional space, while 1.5 means 50% more space and 2.0 means twice as much space. Set this value to 1.0 if the cloth will never tear.</p>
<p class="NDLRefMemberDetailedDescription">The default is 1.5 if the cloth has tearing enabled, or 1.0 if tearing is disabled on the cloth when the SetCloth function is called (including when a prop containing the cloth is instantiated in a PhysX scene). If a value is explicitly specified before the cloth is set, that value is retained. The value from the original cloth is used if the cloth object is replaced.</p>
<p class="NDLRefMemberDetailedDescription">This function may need to be used when the tearing flags on the cloth are changed after the modifier is set up with the cloth, particularly if going from non-tearable to tearable. The cost of a change is significant because data streams are replaced on the target <span class="NDLSystemFont"><a href="../NiMesh/NiMesh.htm">NiMesh</a></span> object. </p>

<a name="class_ni_phys_x_cloth_modifier_1ab32f937fd4952395f9ec5dd7805a7f64"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetTearableHint() const</p>
<p class="NDLRefMemberDescription">Get the Tearable Hint. </p>
<p class="NDLRefMemberDetailedDescription">See SetTearableHint. </p>

<a name="class_ni_phys_x_cloth_modifier_1a74b294f77e36c1c889f46618670ff6f3"></a>
<p class="NDLRefMemberFunction">void  SetTearableHint(const <span class="NDLSystemFont">bool</span> bTearable)</p>
<p class="NDLRefMemberDescription">Set the Tearable Hint. </p>
<p class="NDLRefMemberDetailedDescription">This hint should be set to true in the art tools if the cloth is expected to tear. It is used only in determining the mesh modifier requirements in the RetrieveRequirements function and in AreRequirementsMet if the mesh grow factor has not been set. </p>

<a name="class_ni_phys_x_cloth_modifier_1a1d237708c49d78cf91e2edf45d25d364"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetDoSleepXforms() const</p>
<p class="NDLRefMemberDescription">Get the flag controlling sleep behavior. </p>
<p class="NDLRefMemberDetailedDescription">When PhysX cloth is sleeping, there is no need to update the Gamebryo mesh geometry. However, if the Gamebryo node to which the cloth is attached is moving, or the Gamebryo-PhysX scene transformation is animated, then the rendered cloth will move incorrectly. If sleep transforms are active, the Gamebryo node transformation is updated to correct for its relative motion. The default is false. Set it to true if you are animating the Gamebryo node to which the cloth is associated or if you are dynamically modifying the transformation between the PhysX scene and the Gamebryo world. </p>

<a name="class_ni_phys_x_cloth_modifier_1a39ab9877c5c5c137f771347bd7701f3e"></a>
<p class="NDLRefMemberFunction">void  SetDoSleepXforms(const <span class="NDLSystemFont">bool</span> bDoSleepXforms)</p>
<p class="NDLRefMemberDescription">Set the flag controlling sleep transforms. </p>
<p class="NDLRefMemberDetailedDescription">See GetDoSleepXforms. </p>

<a name="class_ni_phys_x_cloth_modifier_1a2a6283c3c59fdd8d3d2e087f34ccbbc0"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt16</span>  GetNBTSet() const</p>
<p class="NDLRefMemberDescription">Get the texture set associated with NBT coordinates. </p>

<a name="class_ni_phys_x_cloth_modifier_1acefcc597b8c89906c64502ad6c112333"></a>
<p class="NDLRefMemberFunction">void  SetNBTSet(const <span class="NDLSystemFont">NiUInt16</span> uiSet)</p>
<p class="NDLRefMemberDescription">Set the texture set associated with NBT coordinate generation. </p>
<p class="NDLRefMemberDetailedDescription">This is only necessary if the Gamebryo mesh shader is using NBT frames. Applications will almost never set this - it is done in the art tools. The default is 0. </p>

<a name="class_ni_phys_x_cloth_modifier_1ac46b5118d0c7e7e9286abf8b56925e40"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetSleeping() const</p>
<p class="NDLRefMemberDescription">Returns true if the modifier thinks the lcoth is sleeping, false otherwise. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
