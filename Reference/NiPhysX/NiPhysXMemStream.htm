<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiPhysXMemStream</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiPhysXMemStream</p>
<p class="NDLRefParentage">: public NxStream</p>


<p class="NDLRefHeaderFile">&lt;NiPhysXMemStream.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/class_ni_phys_x_mem_stream.gif" alt="Inheritance graph for NiPhysXMemStream"/>
  <p class="FigureCaption">Inheritance graph for NiPhysXMemStream</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">This class implements the PhysX's <span class="NDLSystemFont">NxStream</span> streaming interface with a Gamebryo <span class="NDLSystemFont"><a href="../NiSystem/NiMemStream.htm">NiMemStream</a></span> stream. </p>
<p class="NDLNormal">All the interface calls are passed directly to the memory stream. Gamebryo-PhysX uses this class in its tools as an intermediary in streaming cooked meshes to NIF files. It is provided an a convenience class to applications, primarily for use when cooking PhysX meshes. </p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="class_ni_phys_x_mem_stream_1a902f97f603965973d39d5f9d2d0a981b"></a>
<p class="NDLRefMemberFunction">NiPhysXMemStream()</p>
<p class="NDLRefMemberDescription">Default constructor initializes to an empty buffer. </p>

<a name="class_ni_phys_x_mem_stream_1ac70ea684fe36a963185a70fda31b17ae"></a>
<p class="NDLRefMemberFunction">NiPhysXMemStream(<br/>const void* pBuffer, <br/><span class="NDLSystemFont">NiUInt32</span> uiSize)</p>
<p class="NDLRefMemberDescription">This constructor passes the arguments directly to the constructor for its internal <span class="NDLSystemFont"><a href="../NiSystem/NiMemStream.htm">NiMemStream</a></span> object. </p>
<p class="NDLRefMemberDetailedDescription">It is intended for read streams. </p>

<a name="class_ni_phys_x_mem_stream_1a42d2b36ae381f78bd8149d1ea37512d3"></a>
<p class="NDLRefMemberFunction">virtual ~NiPhysXMemStream()</p>
<p class="NDLRefMemberDescription">Destructor frees the buffer's memory if the application has not yet called GetBuffer. </p>

<a name="class_ni_phys_x_mem_stream_1addf4dbdc10b045e10878de1685199990"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">NiUInt32</span>  GetSize() const</p>
<p class="NDLRefMemberDescription">Returns the current size of the memory buffer. </p>

<a name="class_ni_phys_x_mem_stream_1a894e335e964bc327b3f14f72e9ffcf30"></a>
<p class="NDLRefMemberFunction">virtual void*  GetBuffer()</p>
<p class="NDLRefMemberDescription">Returns a pointer to the internal memory buffer. </p>
<p class="NDLRefMemberDetailedDescription">Once this function has been called, the buffer cannot be written to and the application is responsible for freeing the memory (using NiFree). </p>

<a name="class_ni_phys_x_mem_stream_1ac0d2385ff0667670f6c956c4a1159a54"></a>
<p class="NDLRefMemberFunction">virtual void  Reset()</p>
<p class="NDLRefMemberDescription">Reset the internal position pointer to the first byte. </p>
<p class="NDLRefMemberDetailedDescription">Use this function when writing to and then immediately reading from the same stream. Call it after the writing is done. </p>
<a name="methods_from_nxstream"></a>
<p class="NDLRefHead1">Methods from NxStream</p>

<p class="NDLRefMemberDescription">See the documentation for <span class="NDLSystemFont">NxStream</span> for a description of the remaining member functions that this class implements. </p>

<a name="class_ni_phys_x_mem_stream_1a8700fc92012b60a354aa13c2f8a7e426"></a>
<p class="NDLRefMemberFunction">virtual NxU8  readByte() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_mem_stream_1ab34182b15babb139d1a17073c1eaf749"></a>
<p class="NDLRefMemberFunction">virtual NxU16  readWord() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_mem_stream_1aaa28bb6a39ee2bce3d6274a4db8525d1"></a>
<p class="NDLRefMemberFunction">virtual NxU32  readDword() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_mem_stream_1a935f80dc825364bc9f438ddc9478dc88"></a>
<p class="NDLRefMemberFunction">virtual NxF32  readFloat() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_mem_stream_1a71c989d078433c781d5b43567371f3bc"></a>
<p class="NDLRefMemberFunction">virtual NxF64  readDouble() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_mem_stream_1a196d8d92fe77614ea2ddd8ac4d895d56"></a>
<p class="NDLRefMemberFunction">virtual void  readBuffer(<br/>void* buffer, <br/>NxU32 size) const</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_mem_stream_1a3a842b38d69bdcf3bb981cc54c005f08"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">NxStream</span>&  storeByte(NxU8 b)</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_mem_stream_1a577bb9d76fffb973016423f3e2dc7d58"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">NxStream</span>&  storeWord(NxU16 w)</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_mem_stream_1a3f5777da8db6e1dcd550e0d0f8f3fb6c"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">NxStream</span>&  storeDword(NxU32 d)</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_mem_stream_1aa1992239826eccb0edc34996b1f1dd46"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">NxStream</span>&  storeFloat(NxF32 f)</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_mem_stream_1abde5e9bd609d533c1666b08294e34f3a"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">NxStream</span>&  storeDouble(NxF64 f)</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_phys_x_mem_stream_1a9f1b4767ce29fc4c6cca457fda64d325"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">NxStream</span>&  storeBuffer(<br/>const void* buffer, <br/>NxU32 size)</p>
<p class="NDLRefMemberFunction"></p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
