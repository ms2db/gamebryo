<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiPhysXActorDesc</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiPhysXActorDesc</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../NiMain/NiObject.htm">NiObject</a></span></p>


<p class="NDLRefHeaderFile">&lt;NiPhysXActorDesc.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/class_ni_phys_x_actor_desc.gif" alt="Inheritance graph for NiPhysXActorDesc"/>
  <p class="FigureCaption">Inheritance graph for NiPhysXActorDesc</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal"><span class="NDLSystemFont">NiPhysXActorDesc</span> objects are for caching snapshots of NxActor objects, used for streaming, cloning and restoring simulation state. </p>
<p class="NDLNormal">The primary reason for an application to create an <span class="NDLSystemFont">NiPhysXActorDesc</span> object is to ease cloning of PhysX content in code, or to specify a particle actor for a PhysX-based particle system. However, applications can also access these objects between loading a NIF file containing <span class="NDLSystemFont"><a href="NiPhysXProp.htm">NiPhysXProp</a></span> objects and instantiating the PhysX scene. This enables post-load modification of the properties of actors and is an important way to overcome limitations in the authoring of PhysX content.</p>
<p class="NDLNormal">The class stores the state necessary to create a PhysX actor and to create the actor's links with a Gamebryo scene graph. After the PhysX content has been instantiated, the class also contains a pointer to the NxActor object created from the description. Multiple initial conditions may be stored, enabling the actor to be reset to a variety of poses.</p>
<p class="NDLNormal">
<p class="NDLNormal">This class does not cache the userData associated with the actor. Applications should derive from this class if they wish to cache or stream such data. </p></p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="class_ni_phys_x_actor_desc_1aa187718cffe63a9f6111d2a2ae77c7f3"></a>
<p class="NDLRefMemberFunction">NiPhysXActorDesc()</p>
<p class="NDLRefMemberDescription">The actor descriptor is initialized to the PhysX defaults for an NxActorDesc. </p>
<p class="NDLRefMemberDetailedDescription">All pointers into the Gamebryo scene are set to null. No initial conditions are stored. Note that the NxActor is not created at this time. </p>

<a name="class_ni_phys_x_actor_desc_1a2e44bdd669897c2899ed6604e04db23a"></a>
<p class="NDLRefMemberFunction">virtual ~NiPhysXActorDesc()</p>
<p class="NDLRefMemberDescription">Destructor. </p>
<p class="NDLRefMemberDetailedDescription">Frees all memory and sets any smart pointers to 0. </p>

<a name="class_ni_phys_x_actor_desc_1a2ce97ad6f8c41cd3e8929ea7d1e563af"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiPhysXActorDesc</span>*  GetActorParent() const</p>
<p class="NDLRefMemberDescription">Get the descriptor for the parent of this actor in a joint hierarchy. </p>
<p class="NDLRefMemberDetailedDescription">This data is used internally to reconstruct the sources and destinations that tie the actor to the Gamebryo scene graph. </p>

<a name="class_ni_phys_x_actor_desc_1ac49da24be537b5dbba9212dc0f7abbbf"></a>
<p class="NDLRefMemberFunction">void  SetActorParent(<span class="NDLSystemFont">NiPhysXActorDesc</span>* pkActorDesc)</p>
<p class="NDLRefMemberDescription">Set the descriptor for the parent of this actor in a joint hierarchy. </p>

<a name="class_ni_phys_x_actor_desc_1a8d4b119744f6fdf156ab2c6b8db35556"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">NiPhysXRigidBodySrcPtr</a></span>  GetSource() const</p>
<p class="NDLRefMemberDescription">Get the source object that ties the Gamebryo scene graph to this actor (null if no source has been specified). </p>

<a name="class_ni_phys_x_actor_desc_1ac522ff5324a95be5f3f01ba8078bdeff"></a>
<p class="NDLRefMemberFunction">void  SetSource(<span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">NiPhysXRigidBodySrcPtr</a></span> spSource)</p>
<p class="NDLRefMemberDescription">Set the source object. </p>
<p class="NDLRefMemberDetailedDescription">The given object is stored as a smart pointer. </p>

<a name="class_ni_phys_x_actor_desc_1af08a6892dd23e9df8a0e6f09f0af3024"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">NiPhysXRigidBodyDestPtr</a></span>  GetDest() const</p>
<p class="NDLRefMemberDescription">Get the destination object that ties the Gamebryo scene graph to this actor (null if no destination has been specified). </p>

<a name="class_ni_phys_x_actor_desc_1a5cc76b1cf4b95956a63ef47d2a6ba212"></a>
<p class="NDLRefMemberFunction">void  SetDest(<span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">NiPhysXRigidBodyDestPtr</a></span> spDest)</p>
<p class="NDLRefMemberDescription">Set the destination object. </p>
<p class="NDLRefMemberDetailedDescription">The given object is stored as a smart pointer. </p>
<a name="actor_creation_and_removal"></a>
<p class="NDLRefHead1">Actor Creation and Removal</p>


<a name="class_ni_phys_x_actor_desc_1a2ec00b54c8e2a193bdab5f218c9164db"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  IsValid()</p>
<p class="NDLRefMemberDescription">Returns true if the current state of this object is a valid PhysX actor (according to NxActorDesc::isValid), false otherwise. </p>

<a name="class_ni_phys_x_actor_desc_1aaa2652b6a69683d00fa55524fe2b4d7b"></a>
<p class="NDLRefMemberFunction">virtual NxActor*  CreateActor(<br/>NxScene* pkScene, <br/>NxCompartment* pkCompartment, <br/>const <span class="NDLSystemFont">NiUInt32</span> uiStateIndex, <br/>const NxMat34& kXform, <br/>const <span class="NDLSystemFont">bool</span> bKeepMeshes = false)</p>
<p class="NDLRefMemberDescription">Create the actor in a PhysX scene. </p>
<p class="NDLRefMemberDetailedDescription">A pointer to the newly created actor is kept by this object.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pkScene</span></td>
    <td>The PhysX scene in which to create the actor. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkCompartment</span></td>
    <td>The compartment to use, or NULL to use the default compartment. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiStateIndex</span></td>
    <td>The initial state to use, which must be less than the number of stored initial states. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kXform</span></td>
    <td>A transformation to apply to all initial states before creating the actor. This allows the actor to be moved within the scene without modifying all its initial poses. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">bKeepMeshes</span></td>
    <td>Control whether or not the mesh data used to create collision meshes for this object is kept after the collision mesh is created. Such data is not necessary after creation unless you plan to remove the mesh from the set cached by the <span class="NDLSystemFont"><a href="../efdPhysX/efdPhysX__PhysXSDKManager.htm">efdPhysX::PhysXSDKManager</a></span> and recreate it later, such as when releasing the PhysX SDK completely and recreating it.</td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The PhysX actor object, or NULL on failure. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_phys_x_actor_desc_1ae628c1453ae19967031e1ed1eab2a8d2"></a>
<p class="NDLRefMemberFunction">virtual void  RemoveActor(NxScene* pkScene)</p>
<p class="NDLRefMemberDescription">Removes the actor represented by this object from a given scene. </p>
<p class="NDLRefMemberDetailedDescription">The actor must have been created, or else no work is done. The scene must be the same scene that the actor resides in, but this is not checked. </p>

<a name="class_ni_phys_x_actor_desc_1ac3aba59d795d093f47a20b3f23d81e87"></a>
<p class="NDLRefMemberFunction">NxActor*  GetActor() const</p>
<p class="NDLRefMemberDescription">Get a pointer to the actor, or NULL if this object does not yet have a PhysX actor assigned or created. </p>

<a name="class_ni_phys_x_actor_desc_1a36e175d028b7d23798c2eb0535ec5f12"></a>
<p class="NDLRefMemberFunction">void  SetActor(NxActor* pkActor)</p>
<p class="NDLRefMemberDescription">Set the actor that this object is representing. </p>
<p class="NDLRefMemberDetailedDescription">This is not necessary when CreateActor is used to create the actor. </p>
<a name="constant_state_access."></a>
<p class="NDLRefHead1">Constant State Access.</p>

<p class="NDLRefMemberDescription">This group of functions provides access to the actor properties that are assumed by Gamebryo-PhysX to be constant for the lifetime of an actor (once that actor has been created).</p>
<p class="NDLRefMemberDescription">All of the properties correspond to the contents of an NxActorDesc, but use Gamebryo types that support streaming. The pkBodyDesc argument is stored in a smart pointer. The shape array is copied.</p>
<p class="NDLRefMemberDescription">The set functions only modify the value stored in this object, which is used when the actor is first created and for streaming and cloning. It does not modify the property of an already existing NxActor created from the object. If you would like to modify an existing actor, use the GetActor function to obtain the NxActor object and set the property using a function call on that. </p>

<a name="class_ni_phys_x_actor_desc_1a520302b429cfcd5a8ec435230b912d0d"></a>
<p class="NDLRefMemberFunction">void  SetConstants(<br/>const <span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>& kActorName, <br/>const NxReal fDensity, <br/>const NxU32 uiActorFlags, <br/>const NxActorGroup uiActorGroup, <br/>const NxDominanceGroup uiDominanceGroup, <br/>const NxU32 uiContactReportFlags, <br/>const NxU16 uiForceFieldMaterial, <br/><span class="NDLSystemFont"><a href="NiPhysXBodyDesc.htm">NiPhysXBodyDesc</a></span>* pkBodyDesc, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiTObjectArray.htm">NiTObjectArray</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">NiPhysXShapeDescPtr</a></span>&gt;& kActorShapes)</p>
<p class="NDLRefMemberDescription">Set all of the actor properties in one function. </p>

<a name="class_ni_phys_x_actor_desc_1a0e03e0804ff15cb6ea14ee36e09ad281"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>  GetActorName() const</p>
<p class="NDLRefMemberDescription">Get the actor's name. </p>

<a name="class_ni_phys_x_actor_desc_1a5d144d014628b3dce5ca0e917be278ac"></a>
<p class="NDLRefMemberFunction">void  SetActorName(<span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>& kActorName)</p>
<p class="NDLRefMemberDescription">Set the actor's name. </p>

<a name="class_ni_phys_x_actor_desc_1a356349b5fa2da5a9a6a5413f3c90105a"></a>
<p class="NDLRefMemberFunction">NxReal  GetDensity() const</p>
<p class="NDLRefMemberDescription">Get the actor's density. </p>

<a name="class_ni_phys_x_actor_desc_1ac298821e2768bdee8c5cae105965aacd"></a>
<p class="NDLRefMemberFunction">void  SetDensity(const NxReal fDensity)</p>
<p class="NDLRefMemberDescription">Set the actor's density. </p>

<a name="class_ni_phys_x_actor_desc_1ace7199b5e1d063a51ae8a2337239acc3"></a>
<p class="NDLRefMemberFunction">NxU32  GetActorFlags() const</p>
<p class="NDLRefMemberDescription">Get the actor flags. </p>

<a name="class_ni_phys_x_actor_desc_1a598c4147ca62fa8afde7118e6d7679e0"></a>
<p class="NDLRefMemberFunction">void  SetActorFlags(const NxU32 uiActorFlags)</p>
<p class="NDLRefMemberDescription">Set the actor flags. </p>

<a name="class_ni_phys_x_actor_desc_1af2fedad59ce4faf424570e41c309abbb"></a>
<p class="NDLRefMemberFunction">NxActorGroup  GetActorGroup() const</p>
<p class="NDLRefMemberDescription">Get the actor group. </p>

<a name="class_ni_phys_x_actor_desc_1ab8ce317f30416352509faeb037559206"></a>
<p class="NDLRefMemberFunction">void  SetActorGroup(const NxActorGroup uiActorGroup)</p>
<p class="NDLRefMemberDescription">Set the actor group. </p>

<a name="class_ni_phys_x_actor_desc_1a0384a3136f9c604afbcea39498c64b10"></a>
<p class="NDLRefMemberFunction">NxDominanceGroup  GetDominanceGroup()</p>
<p class="NDLRefMemberDescription">Get the actor's dominance group. </p>

<a name="class_ni_phys_x_actor_desc_1ab46c937a4da06f37fdb68be4aeb4b878"></a>
<p class="NDLRefMemberFunction">void  SetDominanceGroup(NxDominanceGroup uiDominanceGroup)</p>
<p class="NDLRefMemberDescription">Set the actor's dominance group. </p>

<a name="class_ni_phys_x_actor_desc_1a5f18f6024b8ea77dc256f26733e75f5e"></a>
<p class="NDLRefMemberFunction">NxU32  GetContactReportFlags()</p>
<p class="NDLRefMemberDescription">Get the actor's contact report flags. </p>

<a name="class_ni_phys_x_actor_desc_1a393896b2430033bd87a2a896b46a4080"></a>
<p class="NDLRefMemberFunction">void  SetContactReportFlags(NxU32 uiContactReportFlags)</p>
<p class="NDLRefMemberDescription">Set the actor's contact report flags. </p>

<a name="class_ni_phys_x_actor_desc_1abe95d44022723f5e28d3958a1ec6b2ad"></a>
<p class="NDLRefMemberFunction">NxU16  GetForceFieldMaterial()</p>
<p class="NDLRefMemberDescription">Get the actor's force field material. </p>

<a name="class_ni_phys_x_actor_desc_1a3cb587f6b1b76a228ad9cb87f7f3f942"></a>
<p class="NDLRefMemberFunction">void  SetForceFieldMaterial(NxU16 uiForceFieldMaterial)</p>
<p class="NDLRefMemberDescription">Set the actor's force field material. </p>

<a name="class_ni_phys_x_actor_desc_1aea66774ddfe6dd40f7922b7300d5abde"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiPhysXBodyDesc.htm">NiPhysXBodyDesc</a></span>*  GetBodyDesc()</p>
<p class="NDLRefMemberDescription">Get the body descriptor object (no not free this pointer). </p>

<a name="class_ni_phys_x_actor_desc_1ab0b839319fe3ff7b665b0cd351fffe6e"></a>
<p class="NDLRefMemberFunction">void  SetBodyDesc(<span class="NDLSystemFont"><a href="NiPhysXBodyDesc.htm">NiPhysXBodyDesc</a></span>* pkBodyDesc)</p>
<p class="NDLRefMemberDescription">Set the body descriptor object (stored as a smart pointer). </p>

<a name="class_ni_phys_x_actor_desc_1a048a0fad6641f64ce202fd6bcdc9d0c0"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../NiMain/NiTObjectArray.htm">NiTObjectArray</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">NiPhysXShapeDescPtr</a></span>&gt;&  GetActorShapes()</p>
<p class="NDLRefMemberDescription">Get a reference to the internal array of shapes for the actor. </p>

<a name="class_ni_phys_x_actor_desc_1a22899248fd64c39c242cea959e025912"></a>
<p class="NDLRefMemberFunction">void  SetActorShapes(const <span class="NDLSystemFont"><a href="../NiMain/NiTObjectArray.htm">NiTObjectArray</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">NiPhysXShapeDescPtr</a></span>&gt;& kActorShapes)</p>
<p class="NDLRefMemberDescription">Set the array of shapes for the actor (the argument is copied). </p>
<a name="initial_state_management"></a>
<p class="NDLRefHead1">Initial State Management</p>

<p class="NDLRefMemberDescription">This object can store multiple sets of initial poses for the actor.</p>
<p class="NDLRefMemberDescription">Any one of these may be used when creating the actor or the actor may be repositioned to one of these states on demand.</p>
<p class="NDLRefMemberDescription">If no poses are provided, the actor is assumed to have the identity matrix for its pose. </p>

<a name="class_ni_phys_x_actor_desc_1ade26e34d7254bf5bcc11bd117e125d59"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  GetNumPoses() const</p>
<p class="NDLRefMemberDescription">Obtain the number of poses stored for the actor. </p>

<a name="class_ni_phys_x_actor_desc_1a9848d55f4f006f9dabf1abdd86ee92d4"></a>
<p class="NDLRefMemberFunction">NxMat34  GetPose(const <span class="NDLSystemFont">NiUInt32</span> uiIndex) const</p>
<p class="NDLRefMemberDescription">Get the pose stored at a specific index. </p>
<p class="NDLRefMemberDetailedDescription">The index must be less than the number returned by GetNumPoses. </p>

<a name="class_ni_phys_x_actor_desc_1ae0e2564a7c37e41fd177252c8973cc2f"></a>
<p class="NDLRefMemberFunction">void  SetPose(<br/>const NxMat34& kPose, <br/>const <span class="NDLSystemFont">NiUInt32</span> uiIndex)</p>
<p class="NDLRefMemberDescription">Set the pose at a given index. </p>
<p class="NDLRefMemberDetailedDescription">More space is allocated when the requested index is beyond the number already stored. All the newly allocated states up to the given index, if not already set, are filled with the identity. </p>

<a name="class_ni_phys_x_actor_desc_1aea06656c1e6cdef8e3a5d4c0981716e2"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">NiUInt32</span>  AddState(const NxMat34& kXform)</p>
<p class="NDLRefMemberDescription">Add a new initial state taken from the actor's current pose. </p>
<p class="NDLRefMemberDetailedDescription">The actor's current pose is extracted, multiplied by the given transform, and stored in the next unused state index. The index for the newly stored state is returned. The actor must have been created or set for this function to do anything.</p>
<p class="NDLRefMemberDetailedDescription">This function also causes a new state to be added for any body descriptor associated with this object.</p>
<p class="NDLRefMemberDetailedDescription">Applications should choose to either use this function directly on all the actors in a <span class="NDLSystemFont"><a href="NiPhysXScene.htm">NiPhysXScene</a></span> or to use <span class="NDLSystemFont"><a href="NiPhysXScene.htm#class_ni_phys_x_scene_1ae882a90495e64245712acdbbae117938">NiPhysXScene::AddSnapshotState()</a></span>, but avoid mixing the two or the state indexes may become confused. </p>

<a name="class_ni_phys_x_actor_desc_1ab995cd1935c475f23b694b5df3086d31"></a>
<p class="NDLRefMemberFunction">virtual void  RestoreState(<br/>const <span class="NDLSystemFont">NiUInt32</span> uiIndex, <br/>const NxMat34& kXform)</p>
<p class="NDLRefMemberDescription">Restore the actor's state to that stored in the given index. </p>
<p class="NDLRefMemberDetailedDescription">The index must be less than the number returned by GetNumPoses. The stored pose is first multiplied by the given transform. This function uses NxActor::setGlobalPose, which is moderately expensive. It is intended for infrequent resets of game state.</p>
<p class="NDLRefMemberDetailedDescription">If the actor has a body descriptor, the velocities are also restored. </p>

<a name="class_ni_phys_x_actor_desc_1acfe933f7fa1cb2e0e1e428664b85e882"></a>
<p class="NDLRefMemberFunction">virtual void  RemoveStatesBeyond(const <span class="NDLSystemFont">NiUInt32</span> uiState)</p>
<p class="NDLRefMemberDescription">Remove all the stored states starting at and beyond the given index (and also remove the body descriptor's states). </p>

<a name="class_ni_phys_x_actor_desc_1a82810f901cb72288311b450256872327"></a>
<p class="NDLRefMemberFunction">virtual void  RemoveState(const <span class="NDLSystemFont">NiUInt32</span> uiState)</p>
<p class="NDLRefMemberDescription">Remove the stored state at the given index, and shuffle down other states to fill any hole in stored state indexes (and also remove the body descriptor's states). </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
