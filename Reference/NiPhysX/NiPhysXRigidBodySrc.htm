<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiPhysXRigidBodySrc</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiPhysXRigidBodySrc</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="NiPhysXSrc.htm">NiPhysXSrc</a></span></p>


<p class="NDLRefHeaderFile">&lt;NiPhysXRigidBodySrc.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/class_ni_phys_x_rigid_body_src.gif" alt="Inheritance graph for NiPhysXRigidBodySrc"/>
  <p class="FigureCaption">Inheritance graph for NiPhysXRigidBodySrc</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal"><span class="NDLSystemFont">NiPhysXRigidBodySrc</span> is an abstract base class for sources that extract state from a Gamebryo scene graph object and set state of a rigid body PhysX actor. </p>
<p class="NDLNormal">Internally, this class stores the Gamebryo source node and the PhysX target actor, and the two most recent transformations extracted from the node, in PhysX coordinates. In other words, transformations that could be used directly to set the pose of the target actor. Also stored are the application times for the transformations for use when interpolating.</p>
<p class="NDLNormal">This class is abstract because it does not implement <span class="NDLSystemFont"><a href="NiPhysXSrc.htm#class_ni_phys_x_src_1a6e47ed5be395a40a4807c1b540c497a6">NiPhysXSrc::UpdateToActors</a></span>. </p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="class_ni_phys_x_rigid_body_src_1a9296845bb9c870a2db2dd602107d9e82"></a>
<p class="NDLRefMemberFunction">NiPhysXRigidBodySrc(<br/><span class="NDLSystemFont"><a href="../NiMain/NiAVObject.htm">NiAVObject</a></span>* pkSource, <br/>NxActor* pkActor)</p>
<p class="NDLRefMemberDescription">Constructor. </p>
<p class="NDLRefMemberDetailedDescription">Sets state common to rigid body sources. The internal transformations used for interpolation are set to the identity transforms, and the extraction times for those transformations are set to be in the past.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pkSource</span></td>
    <td>The Gamebryo node from which to extract state. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkActor</span></td>
    <td>The PhysX actor to drive with the state. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_phys_x_rigid_body_src_1a83b5f959f796b5854cb0daf70e999569"></a>
<p class="NDLRefMemberFunction">~NiPhysXRigidBodySrc()</p>
<p class="NDLRefMemberDescription">Destructor. </p>

<a name="class_ni_phys_x_rigid_body_src_1a0769211ed13942e97020f552bb681486"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../NiMain/NiAVObject.htm">NiAVObject</a></span>*  GetSource() const</p>
<p class="NDLRefMemberDescription">Returns the Gamebryo node that is driving the motion. </p>

<a name="class_ni_phys_x_rigid_body_src_1afe522ab8e70271ce3aadaa629af4a0dc"></a>
<p class="NDLRefMemberFunction">void  SetTarget(NxActor* pkActor)</p>
<p class="NDLRefMemberDescription">Returns the PhysX actor that this source is pushing state to. </p>

<a name="class_ni_phys_x_rigid_body_src_1a0468b023b451bd44f22a99f3bc8542ce"></a>
<p class="NDLRefMemberFunction">NxActor*  GetTarget() const</p>
<p class="NDLRefMemberDescription">Set the PhysX actor that this source is pushing state to. </p>

<a name="class_ni_phys_x_rigid_body_src_1a64abaf9a642c0e595e39466b39b09199"></a>
<p class="NDLRefMemberFunction">void  ResetVelocity()</p>
<p class="NDLRefMemberDescription">Reset velocity computations inside the source. </p>
<p class="NDLRefMemberDetailedDescription">Velocities are computed for use when driving a dynamic actor. After this function is called, the source will return zero velocities until the source has been updated twice. Calling UpdateFromSceneGraph with the bForce argument true also resets the velocities to require one additional update before velocities are valid (this function is called by NiPhysXScene::UpdatedSources). </p>

<a name="class_ni_phys_x_rigid_body_src_1a4a615c25ae03b6a4d0eededc476fa8f2"></a>
<p class="NDLRefMemberFunction">float  GetTime(<span class="NDLSystemFont">NiUInt32</span> uiIndex) const</p>
<p class="NDLRefMemberDescription">Get the time for which this source has internally cached state. </p>
<p class="NDLRefMemberDetailedDescription">uiIndex is either 0 or 1, indicating which of the two internal values is desired. This function is intended for debug purposes. </p>

<a name="class_ni_phys_x_rigid_body_src_1af815b23ff66916f4f931723e88ab30d2"></a>
<p class="NDLRefMemberFunction">NxMat34  GetPose(<span class="NDLSystemFont">NiUInt32</span> uiIndex) const</p>
<p class="NDLRefMemberDescription">Get the internally cached pose. </p>
<p class="NDLRefMemberDetailedDescription">uiIndex is either 0 or 1, indicating which of the two internal values is desired. This function is intended for debug purposes. </p>

<a name="class_ni_phys_x_rigid_body_src_1ae3803984e420fac9002e0cf514070650"></a>
<p class="NDLRefMemberFunction">virtual void  UpdateFromSceneGraph(<br/>const float fT, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiTransform.htm">NiTransform</a></span>& kInvRootTransform, <br/>const float fScaleWToP, <br/>const <span class="NDLSystemFont">bool</span> bForce = false)</p>
<p class="NDLRefMemberDescription">Extract state from the scene graph. </p>
<p class="NDLRefMemberDetailedDescription">This function extracts the state from the scene graph and uses kInvRootTransform to convert it into PhysX's coordinate system. The translation is then scaled by fScaleWToP. If fT is less than or equal to the most recent stored transformation, and bForce is false, then nothing is done. If bForce is true, state is always extracted with the given time. The function does nothing if the source is not active unless forced. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
