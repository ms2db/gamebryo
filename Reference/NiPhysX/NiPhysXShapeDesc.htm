<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiPhysXShapeDesc</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiPhysXShapeDesc</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../NiMain/NiObject.htm">NiObject</a></span></p>


<p class="NDLRefHeaderFile">&lt;NiPhysXShapeDesc.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/class_ni_phys_x_shape_desc.gif" alt="Inheritance graph for NiPhysXShapeDesc"/>
  <p class="FigureCaption">Inheritance graph for NiPhysXShapeDesc</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal"><span class="NDLSystemFont">NiPhysXShapeDesc</span> objects are for caching snapshots of NxShapeDesc and derived class objects, used for streaming, cloning and reset of simulation state. </p>
<p class="NDLNormal">An instance of this class stores all the necessary data to recreate a PhysX shape derived from NxShape. It stores mesh data in the form of a smart pointer to an <span class="NDLSystemFont"><a href="NiPhysXMeshDesc.htm">NiPhysXMeshDesc</a></span> object. Interpretation of the data is dependent on the type of shape.</p>
<p class="NDLNormal">A pointer to an NxShape is stored when a PhysX shape is created from the data.</p>
<p class="NDLNormal">NxWheelShape objects and NxHeightFieldShape objects are not supported. </p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="class_ni_phys_x_shape_desc_1a60a73006f0d432848632c530a6154dc3"></a>
<p class="NDLRefMemberFunction">NiPhysXShapeDesc()</p>
<p class="NDLRefMemberDetailedDescription">Constructor sets all data to PhysX defaults for NxShape. </p>

<a name="class_ni_phys_x_shape_desc_1aeb1e8f5e46440f5a632851de77522fd6"></a>
<p class="NDLRefMemberFunction">~NiPhysXShapeDesc()</p>
<p class="NDLRefMemberDescription">Destructor releases any pointers. </p>

<a name="class_ni_phys_x_shape_desc_1a41c2f502bd26d4bd9a5e149c7a7f1005"></a>
<p class="NDLRefMemberFunction">NxShapeType  GetType() const</p>
<p class="NDLRefMemberDescription">Return the type of this shape. </p>

<a name="class_ni_phys_x_shape_desc_1aa83d27e3e9e9a3b6a43a417bb9eb484d"></a>
<p class="NDLRefMemberFunction">void  SetType(const NxShapeType eType)</p>
<p class="NDLRefMemberDescription">Set the type for this shape. </p>

<a name="class_ni_phys_x_shape_desc_1a0d076164e270c90e349ef52014f6f078"></a>
<p class="NDLRefMemberFunction">NxMat34  GetLocalPose() const</p>
<p class="NDLRefMemberDescription">Get the local pose for the shape (its transformation relative to its actor). </p>

<a name="class_ni_phys_x_shape_desc_1aca2b03880e0c0791772364d8a03decc3"></a>
<p class="NDLRefMemberFunction">void  SetLocalPose(const NxMat34& kPose)</p>
<p class="NDLRefMemberDescription">Set the local pose for the shape. </p>

<a name="class_ni_phys_x_shape_desc_1aaa82d9c34c5824ed41b0c1cd15ee618e"></a>
<p class="NDLRefMemberFunction">NxU32  GetShapeFlags() const</p>
<p class="NDLRefMemberDescription">Get the generic shape flags. </p>

<a name="class_ni_phys_x_shape_desc_1af810c370e6a3d9e5739923031cabdbf1"></a>
<p class="NDLRefMemberFunction">void  SetShapeFlags(const NxU32 uiShapeFlags)</p>
<p class="NDLRefMemberDescription">Set the generic shape flags. </p>

<a name="class_ni_phys_x_shape_desc_1ac3812bc6e9cc13f83de36b8e2299931e"></a>
<p class="NDLRefMemberFunction">NxCollisionGroup  GetShapeGroup() const</p>
<p class="NDLRefMemberDescription">Get the shape collision group. </p>

<a name="class_ni_phys_x_shape_desc_1a71e5a0538093f28c787cc45387b4b4d7"></a>
<p class="NDLRefMemberFunction">void  SetShapeGroup(const NxCollisionGroup uiShapeGroup)</p>
<p class="NDLRefMemberDescription">Set the shape collision group. </p>

<a name="class_ni_phys_x_shape_desc_1a6e30eb5aa4d0b9dcf698805c2dcc0de2"></a>
<p class="NDLRefMemberFunction">NxMaterialIndex  GetMaterialIndex() const</p>
<p class="NDLRefMemberDescription">Get the material index for the shape. </p>

<a name="class_ni_phys_x_shape_desc_1aa19e367f0be0d7d83a6e829ce9774860"></a>
<p class="NDLRefMemberFunction">void  SetMaterialIndex(const NxMaterialIndex uiMaterialIndex)</p>
<p class="NDLRefMemberDescription">Set the material index. </p>

<a name="class_ni_phys_x_shape_desc_1a3704f82ee9a5f699ed1224ecbd9b600f"></a>
<p class="NDLRefMemberFunction">NxReal  GetDensity() const</p>
<p class="NDLRefMemberDescription">Get the density. </p>

<a name="class_ni_phys_x_shape_desc_1ae101d5d39a57bc7ddb5bc4e8a0f12427"></a>
<p class="NDLRefMemberFunction">void  SetDensity(const NxReal fDensity)</p>
<p class="NDLRefMemberDescription">Set the density. </p>
<p class="NDLRefMemberDetailedDescription">See the PhysX documentation for rules regarding valid values. </p>

<a name="class_ni_phys_x_shape_desc_1a866b3966810533410942dfcd479aef8c"></a>
<p class="NDLRefMemberFunction">NxReal  GetMass() const</p>
<p class="NDLRefMemberDescription">Get the mass. </p>

<a name="class_ni_phys_x_shape_desc_1a9c57d162f3dbb3277fab298397ff72d6"></a>
<p class="NDLRefMemberFunction">void  SetMass(const NxReal fMass)</p>
<p class="NDLRefMemberDescription">Set the mass. </p>
<p class="NDLRefMemberDetailedDescription">See the PhysX documentation for rules regarding valid values. </p>

<a name="class_ni_phys_x_shape_desc_1aef35f0ef213db7cdc57a3147b922dcd3"></a>
<p class="NDLRefMemberFunction">NxReal  GetSkinWidth() const</p>
<p class="NDLRefMemberDescription">Get the skin width. </p>

<a name="class_ni_phys_x_shape_desc_1aa5571a01c1972e1ce691adee68313ef0"></a>
<p class="NDLRefMemberFunction">void  SetSkinWidth(const NxReal fSkinWidth)</p>
<p class="NDLRefMemberDescription">Set the skin width. </p>

<a name="class_ni_phys_x_shape_desc_1ade3a51c0d8a7928c0045bd1b2b21ca6b"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>&  GetName() const</p>
<p class="NDLRefMemberDescription">Get the shape's name. </p>

<a name="class_ni_phys_x_shape_desc_1a76b4c4c916731c41bf8aec1cd12e8a1d"></a>
<p class="NDLRefMemberFunction">void  SetName(const <span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>& kShapeName)</p>
<p class="NDLRefMemberDescription">Set the shape's name. </p>

<a name="class_ni_phys_x_shape_desc_1a88fb831c277cb35829659b19a2f5a11a"></a>
<p class="NDLRefMemberFunction">NxU32  GetNonInteractingComponentType() const</p>
<p class="NDLRefMemberDescription">Get the shape's non interacting component type. </p>

<a name="class_ni_phys_x_shape_desc_1a3ce858d493b78815603f8c8cb82cb0a9"></a>
<p class="NDLRefMemberFunction">void  SetNonInteractingComponentType(const NxU32 uiNonInteractingCompType)</p>
<p class="NDLRefMemberDescription">Set the shape's non interacting component type. </p>

<a name="class_ni_phys_x_shape_desc_1af0bd82c2fe070b12bf7a19fd3ae6ed15"></a>
<p class="NDLRefMemberFunction">void  GetCollisionBits(NxU32 auiCollisionBits) const</p>
<p class="NDLRefMemberDescription">Get the collision bits. </p>
<p class="NDLRefMemberDetailedDescription">The given array is filled. </p>

<a name="class_ni_phys_x_shape_desc_1a189031ce2c7f38e4bd775176693bebab"></a>
<p class="NDLRefMemberFunction">void  SetCollisionBits(const NxU32 auiCollisionBits)</p>
<p class="NDLRefMemberDescription">Set the collision bits. </p>

<a name="class_ni_phys_x_shape_desc_1a72995d3606641e9281b74910ebf0c9d7"></a>
<p class="NDLRefMemberFunction">void  GetPlaneShapeData(<br/>NxVec3& kNormal, <br/>NxReal& kD) const</p>
<p class="NDLRefMemberDescription">Get the plane-specific data. </p>

<a name="class_ni_phys_x_shape_desc_1afb69b048c8bdc926c6b0b1b0079a7f75"></a>
<p class="NDLRefMemberFunction">void  SetPlaneShapeData(<br/>const NxVec3& kNormal, <br/>const NxReal kD)</p>
<p class="NDLRefMemberDescription">Set the plane-specific data. </p>

<a name="class_ni_phys_x_shape_desc_1ac580f983854b8746110ca16c3c8c7a92"></a>
<p class="NDLRefMemberFunction">NxReal  GetSphereShapeRadius() const</p>
<p class="NDLRefMemberDescription">Get the sphere-specific data. </p>

<a name="class_ni_phys_x_shape_desc_1a9140fb8036ea8eff81def3e8b82d6641"></a>
<p class="NDLRefMemberFunction">void  SetSphereShapeRadius(const NxReal kRadius)</p>
<p class="NDLRefMemberDescription">Set the sphere-specific data. </p>

<a name="class_ni_phys_x_shape_desc_1a58d9e853cb78fe91c04617a274aad7cf"></a>
<p class="NDLRefMemberFunction">NxVec3  GetBoxShapeDimensions() const</p>
<p class="NDLRefMemberDescription">Get the box-specific data. </p>

<a name="class_ni_phys_x_shape_desc_1a2169b009cb2293529e9a6cbfe38690d8"></a>
<p class="NDLRefMemberFunction">void  SetBoxShapeDimensions(const NxVec3& kDimensions)</p>
<p class="NDLRefMemberDescription">Set the box-specific data. </p>

<a name="class_ni_phys_x_shape_desc_1aaef91dac1150f263cedb416ead58229f"></a>
<p class="NDLRefMemberFunction">void  GetCapsuleShapeData(<br/>NxReal& fRadius, <br/>NxReal& fHeight, <br/>NxU32& uiFlags) const</p>
<p class="NDLRefMemberDescription">Get the capsule-specific data. </p>

<a name="class_ni_phys_x_shape_desc_1abe3c9bb0154124d2159d75f719042edd"></a>
<p class="NDLRefMemberFunction">void  SetCapsuleShapeData(<br/>const NxReal& fRadius, <br/>const NxReal& fHeight, <br/>const NxU32& uiFlags)</p>
<p class="NDLRefMemberDescription">Set the capsule-specific data. </p>

<a name="class_ni_phys_x_shape_desc_1a026cc72d65454da5b93ad1e759f5f5b0"></a>
<p class="NDLRefMemberFunction">void  SetMeshDesc(<span class="NDLSystemFont"><a href="NiPhysXMeshDesc.htm">NiPhysXMeshDesc</a></span>* pkMeshDesc)</p>
<p class="NDLRefMemberDescription">Set the mesh descriptor for the shape. </p>
<p class="NDLRefMemberDetailedDescription">This data is used for convex and triangle mesh objects. The pointer passed in by SetMeshDesc is owned by the shape and should not be deleted by the application. </p>

<a name="class_ni_phys_x_shape_desc_1aef370e3b1c20c2cf7f648f12fe5a8f37"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">NiPhysXMeshDescPtr</a></span>  GetMeshDesc()</p>
<p class="NDLRefMemberDescription">Get the mesh descriptor (could be null). </p>

<a name="class_ni_phys_x_shape_desc_1a69d9d6e445a20f4a9c2e824768f05c0e"></a>
<p class="NDLRefMemberFunction">virtual void  ToShapeDesc(NxShapeDesc& kShapeDesc) const</p>
<p class="NDLRefMemberDescription">Push state into a generic shape descriptor. </p>
<p class="NDLRefMemberDetailedDescription">If this object does not already have a specific type, the type is taken from the argument. This function copies all the state that is common to all shapes, and none of the state that is shape specific. </p>

<a name="class_ni_phys_x_shape_desc_1adffedff4927fc77a0a7c7b1a8d349823"></a>
<p class="NDLRefMemberFunction">virtual void  FromShapeDesc(const NxShapeDesc& kShapeDesc)</p>
<p class="NDLRefMemberDescription">Set state based on a generic shape descriptor. </p>
<p class="NDLRefMemberDetailedDescription">The type is not set unless this object has no type, in which case the type is taken from the argument. This function copies all the state that is common to all shapes, and none of the state that is shape specific.</p>
<p class="NDLRefMemberDetailedDescription">Note that it is not possible to instantiate a NxShapeDesc object, so you must create a derived object and pass that in. As stated above, the type of that object does not matter because it typically will not be copied. </p>

<a name="class_ni_phys_x_shape_desc_1ad44f518493e4c9a498d4afb931ee21d4"></a>
<p class="NDLRefMemberFunction">virtual void  ToPlaneDesc(NxPlaneShapeDesc& kPlaneDesc) const</p>
<p class="NDLRefMemberDescription">Push state to a PhysX plane descriptor. </p>
<p class="NDLRefMemberDetailedDescription">The type of this object must be NX_SHAPE_PLANE. </p>

<a name="class_ni_phys_x_shape_desc_1ac1f1b374174f058b5a0423bebf4cbc9b"></a>
<p class="NDLRefMemberFunction">virtual void  FromPlaneDesc(const NxPlaneShapeDesc& kPlaneDesc)</p>
<p class="NDLRefMemberDescription">Pull state from a PhysX plane descriptor. </p>
<p class="NDLRefMemberDetailedDescription">Sets the type of this object to NX_SHAPE_PLANE. </p>

<a name="class_ni_phys_x_shape_desc_1aa0a3fcdf1c385fda721bdee97e8849f4"></a>
<p class="NDLRefMemberFunction">virtual void  ToSphereDesc(NxSphereShapeDesc& kSphereDesc) const</p>
<p class="NDLRefMemberDescription">Push state to a PhysX sphere descriptor. </p>
<p class="NDLRefMemberDetailedDescription">The type of this object must be NX_SHAPE_SPHERE. </p>

<a name="class_ni_phys_x_shape_desc_1a03b74925b1ed61aa6c0679a3e88269a0"></a>
<p class="NDLRefMemberFunction">virtual void  FromSphereDesc(const NxSphereShapeDesc& kSphereDesc)</p>
<p class="NDLRefMemberDescription">Pull state from a PhysX sphere descriptor. </p>
<p class="NDLRefMemberDetailedDescription">Sets the type of this object to NX_SHAPE_SPHERE. </p>

<a name="class_ni_phys_x_shape_desc_1a17d71b2dcdeed23741ddab1bdf91e1b4"></a>
<p class="NDLRefMemberFunction">virtual void  ToBoxDesc(NxBoxShapeDesc& kBoxDesc) const</p>
<p class="NDLRefMemberDescription">Push state to a PhysX box descriptor. </p>
<p class="NDLRefMemberDetailedDescription">The type of this object must be NX_SHAPE_BOX. </p>

<a name="class_ni_phys_x_shape_desc_1a2ffa02857999811a98c7a8b005062b98"></a>
<p class="NDLRefMemberFunction">virtual void  FromBoxDesc(const NxBoxShapeDesc& kBoxDesc)</p>
<p class="NDLRefMemberDescription">Pull state from a PhysX box descriptor. </p>
<p class="NDLRefMemberDetailedDescription">Sets the type of this object to NX_SHAPE_BOX. </p>

<a name="class_ni_phys_x_shape_desc_1ae9cd995e8bb195fe6c2046eb5030c59d"></a>
<p class="NDLRefMemberFunction">virtual void  ToCapsuleDesc(NxCapsuleShapeDesc& kCapsuleDesc) const</p>
<p class="NDLRefMemberDescription">Push state to a PhysX capsule descriptor. </p>
<p class="NDLRefMemberDetailedDescription">The type of this object must be NX_SHAPE_CAPSULE. </p>

<a name="class_ni_phys_x_shape_desc_1a476489a74a887cdf7da22371c3ea99c7"></a>
<p class="NDLRefMemberFunction">virtual void  FromCapsuleDesc(const NxCapsuleShapeDesc& kCapsuleDesc)</p>
<p class="NDLRefMemberDescription">Pull state from a PhysX capsule descriptor. </p>
<p class="NDLRefMemberDetailedDescription">Sets the type of this object to NX_SHAPE_CAPSULE. </p>

<a name="class_ni_phys_x_shape_desc_1a887e8757338068d881c8dff405035f6f"></a>
<p class="NDLRefMemberFunction">virtual void  ToConvexDesc(<br/>NxConvexShapeDesc& kConvexDesc, <br/>const <span class="NDLSystemFont">bool</span> bKeepMesh, <br/>const <span class="NDLSystemFont">bool</span> bCheckPlatform = false)</p>
<p class="NDLRefMemberDescription">Push state to a PhysX convex descriptor. </p>
<p class="NDLRefMemberDetailedDescription">This function will cause the mesh to be created if it does not already exist in the PhysX SDK object. Much of the work for this function is done by <span class="NDLSystemFont"><a href="NiPhysXMeshDesc.htm#class_ni_phys_x_mesh_desc_1ab19dfb72049cfaa028e9f3adba7190fc">NiPhysXMeshDesc::ToConvexDesc</a></span> - see the <span class="NDLSystemFont"><a href="NiPhysXMeshDesc.htm">NiPhysXMeshDesc</a></span> documentation.</p>
<p class="NDLRefMemberDetailedDescription">The type of this object must be NX_SHAPE_CONVEX.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kConvexDesc</span></td>
    <td>The descriptor to write state to. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">bKeepMesh</span></td>
    <td>Controls deletion of mesh data - see <span class="NDLSystemFont"><a href="NiPhysXMeshDesc.htm">NiPhysXMeshDesc</a></span>. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">bCheckPlatform</span></td>
    <td>If true, this function will check that the platform on which it is executing is the same as that for which the mesh was cooked. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_phys_x_shape_desc_1afb69c23b825c9bbfab54236bff07e318"></a>
<p class="NDLRefMemberFunction">virtual void  ToTriMeshDesc(<br/>NxTriangleMeshShapeDesc& kTriMeshDesc, <br/>const <span class="NDLSystemFont">bool</span> bKeepMesh, <br/>const <span class="NDLSystemFont">bool</span> bCheckPlatform = false)</p>
<p class="NDLRefMemberDescription">Push state to a PhysX mesh descriptor. </p>
<p class="NDLRefMemberDetailedDescription">This function will cause the mesh to be created if it does not already exist in the PhysX SDK object. Much of the work for this function is done by <span class="NDLSystemFont"><a href="NiPhysXMeshDesc.htm#class_ni_phys_x_mesh_desc_1ae213735951a03ed8e6e6667f8443b2c6">NiPhysXMeshDesc::ToTriMeshDesc</a></span> - see the <span class="NDLSystemFont"><a href="NiPhysXMeshDesc.htm">NiPhysXMeshDesc</a></span> documentation.</p>
<p class="NDLRefMemberDetailedDescription">The type of this object must be NX_SHAPE_MESH.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kTriMeshDesc</span></td>
    <td>The descriptor to write state to. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">bKeepMesh</span></td>
    <td>Controls deletion of mesh data - see <span class="NDLSystemFont"><a href="NiPhysXMeshDesc.htm">NiPhysXMeshDesc</a></span>. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">bCheckPlatform</span></td>
    <td>If true, this function will check that the platform on which it is executing is the same as that for which the mesh was cooked. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_phys_x_shape_desc_1ae812b3c153feff3b0564d72d444223e1"></a>
<p class="NDLRefMemberFunction">NxShape*  GetShape() const</p>
<p class="NDLRefMemberDescription">Get the PhysX shape that this descriptor is associated with. </p>

<a name="class_ni_phys_x_shape_desc_1add526c68497bb134f081e1ec2460387e"></a>
<p class="NDLRefMemberFunction">void  SetShape(NxShape* pkShape)</p>
<p class="NDLRefMemberDescription">Set the PhysX shape that this descriptor is associated with. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
