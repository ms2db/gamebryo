<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiPhysXSequenceManager</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiPhysXSequenceManager</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../NiMain/NiObject.htm">NiObject</a></span></p>


<p class="NDLRefHeaderFile">&lt;NiPhysXSequenceManager.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/class_ni_phys_x_sequence_manager.gif" alt="Inheritance graph for NiPhysXSequenceManager"/>
  <p class="FigureCaption">Inheritance graph for NiPhysXSequenceManager</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal"><span class="NDLSystemFont">NiPhysXSequenceManager</span> objects interface between an <span class="NDLSystemFont"><a href="../NiAnimation/NiControllerManager.htm">NiControllerManager</a></span> object and a <span class="NDLSystemFont"><a href="NiPhysXProp.htm">NiPhysXProp</a></span> object to automatically manage the activation and de-activation of NiPhysX and PhysX objects as animations are activated and de-activated in the Gamebryo Animation System. </p>
<p class="NDLNormal">This class is intended for situations in which a character or object is sometimes key-frame animated and sometimes physically active, such as a rag-doll. The object is set up with a <span class="NDLSystemFont"><a href="../NiAnimation/NiControllerManager.htm">NiControllerManager</a></span> object and an <span class="NDLSystemFont"><a href="NiPhysXProp.htm">NiPhysXProp</a></span> object. Connections, in the form of <span class="NDLSystemFont"><a href="NiPhysXDynamicSrc.htm">NiPhysXDynamicSrc</a></span> objects, are established between all the physics objects in the prop and all the scene graph objects in sequences controlled by the manager. These are used to feed animated state back to PhysX. An application then explicitly identifies some <span class="NDLSystemFont"><a href="../NiAnimation/NiSequenceData.htm">NiSequenceData</a></span> objects as "physics controlled", and <span class="NDLSystemFont"><a href="NiPhysXPoseBufferDest.htm">NiPhysXPoseBufferDest</a></span> objects are created to tie the PhysX actors to pose buffer data items for the sequence. This allows PhysX to provide input to animation blends, or to drive the character outright.</p>
<p class="NDLNormal">When the character is key-frame animated, the <span class="NDLSystemFont">NiPhysXSequenceManager</span> object activates the <span class="NDLSystemFont"><a href="NiPhysXDynamicSrc.htm">NiPhysXDynamicSrc</a></span> objects to drive physics with the animation. When one of the "physics" sequences is activated, the <span class="NDLSystemFont"><a href="NiPhysXPoseBufferDest.htm">NiPhysXPoseBufferDest</a></span> objects are activated to provide the physics input and the <span class="NDLSystemFont"><a href="NiPhysXDynamicSrc.htm">NiPhysXDynamicSrc</a></span> object for that scene graph node is disabled. The PhysX actors are automatically switched back to kinematic control when they are not driving any physical sequences.</p>
<p class="NDLNormal">The result of all this is efficient and stable mixing of physics control with animated sequences, using the standard Gamebryo animation system.</p>
<p class="NDLNormal">
<p class="NDLNormal">Cloning: <span class="NDLSystemFont">NiPhysXSequenceManager</span> objects cannot be cloned - it is cheaper to create a new one from scratch. To clone an entire character and its physics, start by cloning the <span class="NDLSystemFont"><a href="../NiAnimation/NiActorManager.htm">NiActorManager</a></span> object or <span class="NDLSystemFont"><a href="../NiAnimation/NiControllerManager.htm">NiControllerManager</a></span> object which clones the character's scene graph. Then, clone the <span class="NDLSystemFont"><a href="NiPhysXProp.htm">NiPhysXProp</a></span> object representing the character's physics using the same <span class="NDLSystemFont"><a href="../NiMain/NiCloningProcess.htm">NiCloningProcess</a></span> object as was used for the scene graph. This must be done before the original <span class="NDLSystemFont"><a href="NiPhysXProp.htm">NiPhysXProp</a></span> object is associated with any <span class="NDLSystemFont">NiPhysXSequenceManager</span> object. If you clone a prop object that is already associated with a <span class="NDLSystemFont">NiPhysXSequenceManager</span> object you will also clone all of the sources and destinations added by that manager, which you must not do. Finally, create a new <span class="NDLSystemFont">NiPhysXSequenceManager</span> object and call SetManager on it. </p></p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="class_ni_phys_x_sequence_manager_1a58c9bc3b01cb9a3e5ae1a12816dd25c7"></a>
<p class="NDLRefMemberFunction">NiPhysXSequenceManager()</p>
<p class="NDLRefMemberDescription">Constructor. </p>
<p class="NDLRefMemberDetailedDescription">Sets the controller manager and <span class="NDLSystemFont"><a href="NiPhysXProp.htm">NiPhysXProp</a></span> object that we are controlling to null. </p>

<a name="class_ni_phys_x_sequence_manager_1a533d89acfc6aababc50447efe39356ca"></a>
<p class="NDLRefMemberFunction">virtual ~NiPhysXSequenceManager()</p>
<p class="NDLRefMemberDescription">Destructor. </p>
<p class="NDLRefMemberDetailedDescription">Cleans up all data structures. </p>

<a name="class_ni_phys_x_sequence_manager_1adbeb0d8da83128cb3e73dd033c739d43"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  SetManager(<br/><span class="NDLSystemFont"><a href="../NiAnimation/NiControllerManager.htm">NiControllerManager</a></span>* pkCM, <br/><span class="NDLSystemFont"><a href="NiPhysXProp.htm">NiPhysXProp</a></span>* pkProp)</p>
<p class="NDLRefMemberDescription">Set the controller manager and prop we are working with. </p>
<p class="NDLRefMemberDetailedDescription">This function adds sources for all of the actors in the prop that are controlled by a sequence in the manager. It returns true if the operations all succeeded, false otherwise. It will return false if a manager has already been specified. </p>

<a name="class_ni_phys_x_sequence_manager_1a9dfc0f7016a6ad25d4184a661a2b21eb"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../NiAnimation/NiControllerManager.htm">NiControllerManager</a></span>*  GetControllerManager()</p>
<p class="NDLRefMemberDescription">Return the character controlled by this NiPhysX sequence manager. </p>

<a name="class_ni_phys_x_sequence_manager_1ac3f0e3c71e5d4c51e62ca4415c22beb2"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiPhysXProp.htm">NiPhysXProp</a></span>*  GetProp()</p>
<p class="NDLRefMemberDescription">Return the prop controlled by this NiPhysX sequence manager. </p>

<a name="class_ni_phys_x_sequence_manager_1a0729db3472a7e8e51e1d8c8f1bcd6c8e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  AddSequence(<span class="NDLSystemFont"><a href="../NiAnimation/NiSequenceData.htm">NiSequenceData</a></span>* pkAnimSeqData)</p>
<p class="NDLRefMemberDescription">Add a sequence that will be key-frame controlled, or later converted to physical. </p>
<p class="NDLRefMemberDetailedDescription">This function is intended for use when adding additional sequences to an actor manager, so that those sequences can have physics appropriately attached. SetManager must have already been called before this function. This function does not need to be called if the sequence was managed by the <span class="NDLSystemFont"><a href="../NiAnimation/NiControllerManager.htm">NiControllerManager</a></span> at the time it was passed to SetManager. </p>

<a name="class_ni_phys_x_sequence_manager_1ab151b23f2017ea0c144abd835f8a8c2f"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  MakeSequencePhysical(<span class="NDLSystemFont"><a href="../NiAnimation/NiSequenceData.htm">NiSequenceData</a></span>* pkAnimSeqData)</p>
<p class="NDLRefMemberDescription">Make a sequence physical. </p>
<p class="NDLRefMemberDetailedDescription">This sets up the sequence for control by PhysX when the sequence is activated. Returns true if the operation succeeded. Failure indicates either that the sequence is already physical, is not from the controller manager we are working with, or an unexpected set-up of the PhysX components or the animation components. </p>

<a name="class_ni_phys_x_sequence_manager_1a4f3e4693c637db51298571ebe34ade6e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  RevertPhysicalSequence(<span class="NDLSystemFont"><a href="../NiAnimation/NiSequenceData.htm">NiSequenceData</a></span>* pkAnimSeqData)</p>
<p class="NDLRefMemberDescription">Reverse the effects of MakeSequencePhysical. </p>
<p class="NDLRefMemberDetailedDescription">This removes the sequence from the control of PhysX when the sequence is activated. The sequence effectively reverts back to the control of the animation system. Returns true if the operation succeeded. Failure indicates the sequence is not physical on the character we are working with. </p>

<a name="class_ni_phys_x_sequence_manager_1a3df04329398329e6652892eba65eae83"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsSequencePhysical(<span class="NDLSystemFont"><a href="../NiAnimation/NiSequenceData.htm">NiSequenceData</a></span>* pkAnimSeqData)</p>
<p class="NDLRefMemberDescription">Query whether or not a sequence is physical. </p>

<a name="class_ni_phys_x_sequence_manager_1a82476ddcaa850be0227518776a22895a"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsSequenceRagdoll(<span class="NDLSystemFont"><a href="../NiAnimation/NiSequenceData.htm">NiSequenceData</a></span>* pkAnimSeqData)</p>
<p class="NDLRefMemberDescription">Query whether or a not a sequence is physical and is currently acting as a ragdoll. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
