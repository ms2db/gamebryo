<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>EE_NEW and EE_DELETE Macros</title>

<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Fresnel" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>
  
<!--(Body)==========================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type=
"text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">EE_NEW and EE_DELETE Macros</p>

<table class="NDLNoteContainer" width="100%">
    <tr align="left">
        <td class="NDLNoteContainerTD">
            <p class="NDLHeadingNoteContainer">Note</p>

            <div class="NDLNote">
                These keywords should be paired in code rather than using the standard new and
                delete for efd::MemObject-derived classes. This lets Gamebryo route the memory
                requests through its internal allocation subsystem and store the file, line,
                function information depending on the build target. Using these keywords on
                non-MemObject-derived classes will compile in Shipping builds, but they will not go through the
                Gamebryo allocation system. Compilation of code under EE_USE_MEMORY_MANAGEMENT
                builds (Debug and Release) should catch any invalid uses of these keywords with compiler errors about
                the incorrect number of arguments to new.<br/>
                <br/>
                Note that the array versions of these keywords look exactly like array versions of
                new and delete and should also be paired appropriately in code.                
                <br/>
                If users wish to allocate memory that does not go through the Emergent allocator, usage of 
                EE_EXTERNAL_NEW and EE_EXTERNAL_DELETE is recommended.
            </div>
        </td>
    </tr>
</table>

<p class="NDLRefHead2">EE_NEW and EE_DELETE</p>
<p>With EE_MEMORY_DEBUGGER defined:</p>

<p class="NDLRefMemberFunction">#define <span class="NDLSystemFont">EE_NEW</span>
    new(EE_MEMHINT_NONE,__FILE__,__LINE__,__FUNCTION__)</p>

<p class="NDLRefMemberFunction">#define <span class="NDLSystemFont">EE_DELETE</span> delete</p>

<p>EE_MEMORY_DEBUGGER <em>not</em> defined:</p>

<p class="NDLRefMemberFunction">#define <span class="NDLSystemFont">EE_NEW</span>
    new(efd::MemHint(efd::MemHint::NONE))</p>

<p class="NDLRefMemberFunction">#define <span class="NDLSystemFont">EE_DELETE</span> delete</p>

<p class="NDLRefHead2">EE_NEW2</p>

<p>There is an alternative version of EE_NEW, EE_NEW2, that supports passing an additional argument, the <a href="../efd/efd__MemHint.htm">MemHint</a>. 
This can be used to assist in classifying the allocation.</p>

<p class="NDLRefHead2">EE_EXTERNAL_NEW, EE_EXTERNAL_DELETE</p>

<p>There are also macros for going through the normal new and delete, called EE_NEW and EE_DELETE. These macros are called
EE_EXTERNAL_NEW and EE_EXTERNAL_DELETE.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
