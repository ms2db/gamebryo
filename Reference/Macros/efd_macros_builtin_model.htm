<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Built-in Model Macros</title>

<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Fresnel" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>
  
<!--(Body)==========================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type=
"text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">Built-in Model Macros</p>

<table class="NDLNoteContainer" width="100%">
    <tr align="left">
        <td class="NDLNoteContainerTD">
            <p class="NDLHeadingNoteContainer">Note</p>

            <div class="NDLNote">
                You can use these macros in egf::IBuiltinModelImpl derived classes to implement the
                egf::IBuiltinModel interface and bind properties and methods. The result will be a
                map based lookup from static data every time a built-in model property is accessed
                or method is invoked.
            </div>
        </td>
    </tr>
</table>

<p class="NDLRefMemberFunction">#define EE_BUILTINMODELPROPERTY(FinalClass,
name, Type, ImplClass, var)</p>

<p class="NDLRefMemberDescription">Declares a simple read-write property who's
native storage type exactly matches the underlying IProperty type.</p>

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">FinalClass</span></td>

                <td>The class being defined. This is the final IBuiltinModel
                implementation.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">name</span></td>

                <td>The name of the property you are binding (expressed as its
                PropertyID).</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">Type</span></td>

                <td>The C++ data type for the storage. This must be both the
                type used to store the actual data and must also be a valid
                IProperty type. The default values of all properties including
                built-in model properties are held in IProperty implementations
                so this requirement exists to support initialization from
                default properties. If you are using a custom type you can
                create the required IProperty wrapper using the macros defined
                in TProperty.h.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">ImplClass</span></td>

                <td>This is the class that actually contains the variable being
                bound. This class can be the same as FinalClass if you are not
                inheriting an implementation, otherwise it must be a base class
                of FinalClass. This allows the IBuiltinModel implementation to
                simply derive from existing classes containing the desired
                variable.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">var</span></td>

                <td>The name of the variable that is being bound. It must be of
                type 'Type'.</td>
            </tr>
        </tbody>
    </table>
</div>

<p class="NDLRefMemberFunction">#define
EE_BUILTINMODELPROPERTY_ACCESSOR(FinalClass, name, Type, ImplClass, pfnGet,
pfnSet)</p>

<p class="NDLRefMemberDescription">Declares a read-write property which is
implemented as two accessor functions.</p>

<p class="NDLRefMemberDescription">These accessors must have a specific
format:</p>
<pre class="indent1">
Type YourGettorFunctionNameHere() const;
void YourSettorFunctionNameHere( const Type&amp; );
</pre>

<p class="NDLRefMemberDescription">Pay special attention to the use of 'const',
improper const-correctness is a common error which often leads to confusing
error messages from many compilers.</p>

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">FinalClass</span></td>

                <td>The class being defined. This is the final IBuiltinModel
                implementation.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">name</span></td>

                <td>The name of the property you are binding (expressed as its
                PropertyID).</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">Type</span></td>

                <td>The C++ data type for the storage. This must be both the
                type used by the accessor methods and must also be a valid
                IProperty type. The default values of all properties including
                built-in model properties are held in IProperty implementations
                so this requirement exists to support initialization from
                default properties. If you are using a custom type you can
                create the required IProperty wrapper using the macros defined
                in TProperty.h.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">ImplClass</span></td>

                <td>This is the class that actually contains the methods being
                bound. This class can be the same as FinalClass if you are not
                inheriting an implementation, otherwise it must be a base class
                of FinalClass. This allows the IBuiltinModel implementation to
                simply derive from existing classes containing the desired
                methods.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">pfnGet</span></td>

                <td>The name of the method that is called to get the
                value.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">pfnSet</span></td>

                <td>the name of the method that is called to get the
                value.</td>
            </tr>
        </tbody>
    </table>
</div>

<p class="NDLRefMemberFunction">#define
EE_BUILTINMODELPROPERTY_READONLY(FinalClass, name, Type, ImplClass, var)</p>

<p class="NDLRefMemberDescription">Declares a simple read-only property who's
native storage type exactly matches the underlying IProperty type.</p>

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">FinalClass</span></td>

                <td>The class being defined. This is the final IBuiltinModel
                implementation.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">name</span></td>

                <td>The name of the property you are binding (expressed as its
                PropertyID).</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">Type</span></td>

                <td>The C++ data type for the storage. This must be both the
                type used to store the actual data and must also be a valid
                IProperty type. The default values of all properties including
                built-in model properties are held in IProperty implementations
                so this requirement exists to support initialization from
                default properties. If you are using a custom type you can
                create the required IProperty wrapper using the macros defined
                in TProperty.h.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">ImplClass</span></td>

                <td>This is the class that actually contains the variable being
                bound. This class can be the same as FinalClass if you are not
                inheriting an implementation, otherwise it must be a base class
                of FinalClass. This allows the IBuiltinModel implementation to
                simply derive from existing classes containing the desired
                variable.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">var</span></td>

                <td>The name of the variable that is being bound. It must be of
                type 'Type'.</td>
            </tr>
        </tbody>
    </table>
</div>

<p class="NDLRefMemberFunction">#define
EE_BUILTINMODELPROPERTY_READONLY_ACCESSOR(FinalClass, name, Type, ImplClass,
pfnGet)</p>

<p class="NDLRefMemberDescription">Declares a read-only property which is
implemented as an accessor function.</p>

<p class="NDLRefMemberDescription">This accessors must have a specific format:
<span class="NDLSystemFont">Type YourGettorFunctionNameHere() const;</span></p>

<p class="NDLRefMemberDescription">Pay special attention to the use of 'const',
improper const-correctness is a common error which often leads to confusing
error messages from many compilers.</p>

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">FinalClass</span></td>

                <td>The class being defined. This is the final IBuiltinModel
                implementation.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">name</span></td>

                <td>The name of the property you are binding (expressed as its
                PropertyID).</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">Type</span></td>

                <td>The C++ data type for the storage. This must be both the
                type used to store the actual data and must also be a valid
                IProperty type. The default values of all properties including
                built-in model properties are held in IProperty implementations
                so this requirement exists to support initialization from
                default properties. If you are using a custom type you can
                create the required IProperty wrapper using the macros defined
                in TProperty.h.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">ImplClass</span></td>

                <td>This is the class that actually contains the variable being
                bound. This class can be the same as FinalClass if you are not
                inheriting an implementation, otherwise it must be a base class
                of FinalClass. This allows the IBuiltinModel implementation to
                simply derive from existing classes containing the desired
                variable.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">pfnGet</span></td>

                <td>The name of the method that is called to get the
                value.</td>
            </tr>
        </tbody>
    </table>
</div>

<p class="NDLRefMemberFunction">#define
EE_BUILTINMODELASSOCPROPERTY(FinalClass, name, Type, ImplClass, var)</p>

<p class="NDLRefMemberDescription">Declares a simple read-write associative
array property.</p>

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">FinalClass</span></td>

                <td>The class being defined. This is the final IBuiltinModel
                implementation.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">name</span></td>

                <td>The name of the property you are binding (expressed as its
                PropertyID).</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">Type</span></td>

                <td>The IProperty type is constructed from this type using the
                preprocessor. For example, an associative array with UInt32
                values will have an IProperty type of 'UInt32AssocProperty'.
                The default values of all properties including built-in model
                properties are held in IProperty implementations so this
                requirement exists to support initialization from default
                properties. If you are using a custom type you can create the
                required IProperty wrapper using the macros defined in
                TProperty.h.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">ImplClass</span></td>

                <td>This is the class that actually contains the variable being
                bound. This class can be the same as FinalClass if you are not
                inheriting an implementation, otherwise it must be a base class
                of FinalClass. This allows the IBuiltinModel implementation to
                simply derive from existing classes containing the desired
                variable.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">var</span></td>

                <td>the name of the variable that is being bound. It must be of
                type 'efd::map&lt;efd::utf8string, Type&gt;'</td>
            </tr>
        </tbody>
    </table>
</div>

<p class="NDLRefMemberFunction">#define
EE_BUILTINMODELASSOCPROPERTY_READONLY(FinalClass, name, Type, ImplClass,
var)</p>

<p class="NDLRefMemberDescription">Declares a simple read-only associative
array property.</p>

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">FinalClass</span></td>

                <td>The class being defined. This is the final IBuiltinModel
                implementation.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">name</span></td>

                <td>The name of the property you are binding (expressed as its
                PropertyID).</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">Type</span></td>

                <td>The IProperty type is constructed from this type using the
                preprocessor. For example, an associative array with UInt32
                values will have an IProperty type of 'UInt32AssocProperty'.
                The default values of all properties including built-in model
                properties are held in IProperty implementations so this
                requirement exists to support initialization from default
                properties. If you are using a custom type you can create the
                required IProperty wrapper using the macros defined in
                TProperty.h.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">ImplClass</span></td>

                <td>This is the class that actually contains the variable being
                bound. This class can be the same as FinalClass if you are not
                inheriting an implementation, otherwise it must be a base class
                of FinalClass. This allows the IBuiltinModel implementation to
                simply derive from existing classes containing the desired
                variable.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">var</span></td>

                <td>the name of the variable that is being bound. It must be of
                type 'efd::map&lt;efd::utf8string, Type&gt;'</td>
            </tr>
        </tbody>
    </table>
</div>

<p class="NDLRefMemberFunction">#define
EE_BUILTINMODELASSOCPROPERTY_ACCESSOR(FinalClass, name, Type, ImplClass,
pfnGet, pfnSet, pfnCount, pfnGetNextKey, pfnClear, pfnRemoveValue)</p>

<p class="NDLRefMemberDescription">Declares a read-write associative array
property which is implemented as six accessor functions. These accessors must
have a specific format:</p>
<pre class="indent1">
PropertyResult YourGettorFunctionNameHere(const efd::utf8string&amp; key, Type&amp; val) const;
void YourSettorFunctionNameHere(const efd::utf8string&amp; key, const Type&amp; val);
efd::UInt32 YourGetKeyCountFunctionNameHere() const;
void YourClearArrayFunctionNameHere();
void YourGetNextKeyFunctionNameHere(const efd::utf8string&amp; prevKey, efd::utf8string&amp; nextKey) const;
PropertyResult YourRemovePropertyValueFunctionNameHere(const efd::utf8string&amp; key);
</pre>

<p>Pay special attention to the use of 'const', improper const-correctness is a
common error which often leads to confusing error messages from many
compilers.</p>

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">FinalClass</span></td>

                <td>The class being defined. This is the final IBuiltinModel
                implementation.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">name</span></td>

                <td>The name of the property you are binding (expressed as its
                PropertyID).</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">Type</span></td>

                <td>The IProperty type is constructed from this type using the
                preprocessor. For example, an associative array with UInt32
                values will have an IProperty type of 'UInt32AssocProperty'.
                The default values of all properties including built-in model
                properties are held in IProperty implementations so this
                requirement exists to support initialization from default
                properties. If you are using a custom type you can create the
                required IProperty wrapper using the macros defined in
                TProperty.h.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">ImplClass</span></td>

                <td>This is the class that actually contains the variable being
                bound. This class can be the same as FinalClass if you are not
                inheriting an implementation, otherwise it must be a base class
                of FinalClass. This allows the IBuiltinModel implementation to
                simply derive from existing classes containing the desired
                variable.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">pfnGet</span></td>

                <td>the name of the method that is called to get the
                value.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">pfnSet</span></td>

                <td>the name of the method that is called to set the
                value.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">pfnCount</span></td>

                <td>the name of the method that is called to get the array size
                / entry count.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">pfnGetNextKey</span></td>

                <td>the name of the method that is called to get the next
                associative array key. @see
                egf::Entity::GetNextPropertyKey.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">pfnClear</span></td>

                <td>the name of the method that is called to clear the
                associative array.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">pfnRemoveValue</span></td>

                <td>the name of the method that is called to remove an entry
                from the associative array.</td>
            </tr>
        </tbody>
    </table>
</div>

<p class="NDLRefMemberFunction">#define
EE_BUILTINMODELASSOCPROPERTY_READONLY_ACCESSOR(FinalClass, name, Type,
ImplClass, pfnGet, pfnCount, pfnGetNextKey)</p>

<p class="NDLRefMemberDescription">Declares a read-only associative array
property which is implemented as three accessor functions. These accessors must
have a specific format:</p>
<pre class="indent1">
PropertyResult YourGettorFunctionNameHere(const efd::utf8string&amp; key, Type&amp; val) const;
efd::UInt32 YourGetKeyCountFunctionNameHere() const;
void YourGetNextKeyFunctionNameHere(const efd::utf8string&amp; prevKey, efd::utf8string&amp; nextKey) const;
</pre>

<p>Pay special attention to the use of 'const', improper const-correctness is a
common error which often leads to confusing error messages from many
compilers.</p>

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">FinalClass</span></td>

                <td>The class being defined. This is the final IBuiltinModel
                implementation.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">name</span></td>

                <td>The name of the property you are binding (expressed as its
                PropertyID).</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">Type</span></td>

                <td>The IProperty type is constructed from this type using the
                preprocessor. For example, an associative array with UInt32
                values will have an IProperty type of 'UInt32AssocProperty'.
                The default values of all properties including built-in model
                properties are held in IProperty implementations so this
                requirement exists to support initialization from default
                properties. If you are using a custom type you can create the
                required IProperty wrapper using the macros defined in
                TProperty.h.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">ImplClass</span></td>

                <td>This is the class that actually contains the variable being
                bound. This class can be the same as FinalClass if you are not
                inheriting an implementation, otherwise it must be a base class
                of FinalClass. This allows the IBuiltinModel implementation to
                simply derive from existing classes containing the desired
                variable.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">pfnGet</span></td>

                <td>the name of the method that is called to get the
                value.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">pfnCount</span></td>

                <td>the name of the method that is called to get the array size
                / entry count.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">pfnGetNextKey</span></td>

                <td>the name of the method that is called to get the next
                associative array key. @see
                egf::Entity::GetNextPropertyKey.</td>
            </tr>
        </tbody>
    </table>
</div>

<p class="NDLRefMemberFunction">#define EE_DECLARE_BUILTINMODEL_PROPERTIES</p>

<p class="NDLRefMemberDescription">Used to begin a block of built-in model
property bindings.</p>

<p class="NDLRefMemberDetailedDescription">This declares the static methods
that are needed to implement the built-in model. You must end the block of
property defines using the EE_END_BUILTINMODEL_PROPERTIES macro.</p><a name=
"namespaceefd_8971B503EEB94A3DB34FB90459C609B4" id=
"namespaceefd_8971B503EEB94A3DB34FB90459C609B4"></a>

<p class="NDLRefMemberFunction">#define EE_END_BUILTINMODEL_PROPERTIES</p>

<p class="NDLRefMemberDescription">Used to terminate a built-in model property
declaration block.</p>

<p class="NDLRefMemberDetailedDescription">Every use of
EE_DECLARE_BUILTINMODEL_PROPERTIES must end with a call to this
macro.</p><a name="namespaceefd_2CF5D1F3235B4D1280599C5A8DE34DA4" id=
"namespaceefd_2CF5D1F3235B4D1280599C5A8DE34DA4"></a>

<p class="NDLRefMemberFunction">#define EE_NO_BUILTINMODEL_PROPERTIES</p>

<p class="NDLRefMemberDescription">If you want to use the built-in model
helpers to bind behaviors but you expose no properties then you can use this
macro instead of using both EE_DECLARE_BUILTINMODEL_PROPERTIES followed by
EE_END_BUILTINMODEL_PROPERTIES.</p>

<p class="NDLRefMemberDetailedDescription">This will implement enough methods
to satisfy the property access requirements of IBuiltinModelImpl.</p><a name=
"namespaceefd_81019BA7DB744715A2D00B12AA1511BA" id=
"namespaceefd_81019BA7DB744715A2D00B12AA1511BA"></a>

<p class="NDLRefMemberFunction">#define
EE_IMPLEMENT_BUILTINMODEL_PROPERTIES(implClass)</p>

<p class="NDLRefMemberDescription">Used to implement the static mapping of
property ID to PropertyData. You must include this macro in your C++ built-in
model source file when using EE_DECLARE_BUILTINMODEL_PROPERTIES.</p>

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">ImplClass</span></td>

                <td>This is the class that actually contains the variable being
                bound. This class can be the same as FinalClass if you are not
                inheriting an implementation, otherwise it must be a base class
                of FinalClass. This allows the IBuiltinModel implementation to
                simply derive from existing classes containing the desired
                variable.</td>
            </tr>
        </tbody>
    </table>
</div>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
