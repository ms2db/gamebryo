<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Assert Macros</title>

<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Fresnel" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>
  
<!--(Body)==========================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type=
"text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">Assert Macros</p>

<div class="ReferenceTable">
    <table class="NDLNoteContainer" width="100%">
        <tr align="left">
            <td class="NDLNoteContainerTD">
                <p class="NDLHeadingNoteContainer">Note</p>

                <div class="NDLNote">
                    Define EE_DISABLE_ASSERTS to disable asserts
                    completely.<br>
                    Define EE_ENABLE_RELEASE_ASSERT to enable asserts in
                    release mode .
                </div>
            </td>
        </tr>
    </table>
</div>

<p class="NDLRefMemberFunction">#define EE_ASSERT(pred)</p>

<p class="NDLRefMemberDescription">Asserts a predicate and if the assert fails
it then calls the assert helper so that it can log the result and/or display a
dialog (if graphical and configured to do so). If the AssertHelper returns a
"ignore" then the assert will be ignored (assert is not called). AssertHelper
will return kIgnoreOnce (2) to skip the assert only this time. AssertHelper
will return kIgnore (1) if the assert should be ignored for the rest of the
execution and it will only be logged the first time in that case.</p>

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">pred</span></td>

                <td>The predicate to assert is true</td>
            </tr>
        </tbody>
    </table>
</div>

<p class="NDLRefMemberFunction">#define EE_ASSERT_MESSAGE(pred,
messageAndArgs)</p>

<p class="NDLRefMemberDescription">Asserts that pred is true and prints a
message with arguments if it is false.</p>

<p class="NDLRefMemberDetailedDescription"><span class=
"NDLEmphasis">Example:</span><span class="NDLSystemFont">EE_ASSERT_MESSAGE(x =
5, ("Failed x = %i", x));</span></p>

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">pred</span></td>

                <td>Expression to assert that is true</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">messageAndArgs</span></td>

                <td>A () enclosed printf style message with an argument
                list.</td>
            </tr>
        </tbody>
    </table>
</div>

<p class="NDLRefMemberFunction">#define EE_COMPILETIME_ASSERT(condition)</p>

<p class="NDLRefMemberDescription">A compile time assert will generate a build
error if the condition is not true.</p>

<p class="NDLRefMemberDescription">It can be used to test any invariant
condition. This can be used at namespace, class, or function scope.</p>

<div class="ReferenceTable">
    <table class="NDLNoteContainer" width="100%">
        <tr align="left">
            <td class="NDLNoteContainerTD">
                <p class="NDLHeadingNoteContainer">Note</p>

                <div class="NDLNote">
                    If you want to stick this into the global namespace you
                    should be careful. We try to generate a unique name but
                    only the MSVC compiler truly allows us to do this. On other
                    compilers we just tag the line number. This means: 1.) You
                    should wrap global compile time asserts into a uniquely
                    named namespace. 2.) You cannot use two compile time
                    asserts on the same line. This also means you can't put
                    multiple compile time asserts into another #define macro,
                    for example. If you break these rules it will still work on
                    MSVC but will fail to compile on other compiles due to a
                    "duplicate symbol name" error.
                </div>
            </td>
        </tr>
    </table>
</div>

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">condition</span></td>

                <td>The expression to evaluate</td>
            </tr>
        </tbody>
    </table>
</div>

<p class="NDLRefMemberFunction">#define EE_FAIL(msg)</p>

<p class="NDLRefMemberDescription">Indicates that a failure condition has been
reached. Place in sections of code that should be unreachable under expected
conditions.</p>

<p class="NDLRefMemberDescription">This is roughly equivalent to: <span class=
"NDLSystemFont">EE_ASSERT_MESSAGE(false, (msg))</span></p>

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">msg</span></td>

                <td>The plain text to log describing the failure.</td>
            </tr>
        </tbody>
    </table>
</div>

<p class="NDLRefMemberFunction">#define EE_FAIL_AT(msg, file, line)</p>

<p class="NDLRefMemberDescription">Indicates that a failure condition has been
reached. Place in sections of code that should be unreachable under expected
conditions.</p>

<div class="ReferenceTable">
    <table class="NDLNoteContainer" width="100%">
        <tr align="left">
            <td class="NDLNoteContainerTD">
                <p class="NDLHeadingNoteContainer">Note</p>

                <div class="NDLNote">
                    This macro should rarely be used; typically you should use
                    EE_FAIL which will automatically supply the current file
                    and line number.
                </div>
            </td>
        </tr>
    </table>
</div>

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">msg</span></td>

                <td>The text to log describing the failure.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">file</span></td>

                <td>The source file containing the assert.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">line</span></td>

                <td>The line number within the source file containing the
                assert.</td>
            </tr>
        </tbody>
    </table>
</div>

<p class="NDLRefMemberFunction">#define EE_FAIL_MESSAGE(messageAndArgs)</p>

<p class="NDLRefMemberDescription">Indicates that a failure condition has been
reached. Place in sections of code that should be unreachable under expected
conditions. Unlike EE_FAIL this version accepts a printf-style format string
with arguments as the message parameter. This is roughly equivalent to:
<span class="NDLSystemFont">EE_ASSERT_MESSAGE(false, messageAndArgs)</span></p>

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">messageAndArgs</span></td>

                <td>A printf-style format string with arguments.</td>
            </tr>
        </tbody>
    </table>
</div>

<p class="NDLRefMemberFunction">#define EE_FAIL_MESSAGE_AT(messageAndArgs,
file, line)</p>

<p class="NDLRefMemberDescription">Indicates that a failure condition has been
reached. Place in sections of code that should be unreachable under expected
conditions. Unlike EE_FAIL this version accepts a printf-style format string
with arguments as the message parameter.</p>

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">messageAndArgs</span></td>

                <td>A printf-style format string with arguments.</td>
            </tr>
        </tbody>
    </table>
</div>

<p class="NDLRefMemberFunction">#define EE_VERIFY(pred)</p>

<p class="NDLRefMemberDescription">Verifies a predicate and if it fails it then
calls the assert helper so that it can log the result and/or display a dialog
(if graphical and configured to do so). Even when asserts are disabled this
will always evaluate the predicate.</p>

<div class="ReferenceTable">
    <table class="NDLNoteContainer" width="100%">
        <tr align="left">
            <td class="NDLNoteContainerTD">
                <p class="NDLHeadingNoteContainer">Note</p>

                <div class="NDLNote">
                    This is structured so that it can be used inline (such as
                    in an if statement).<br>
                    On some platforms the resulting debug break point, should
                    the verify fail, will be inside the AssertHelper::DoVerify.
                    Those platforms that support it will break at the location
                    of the verify statement.
                </div>
            </td>
        </tr>
    </table>
</div>

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">predicate</span></td>

                <td>The predicate to assert is true.</td>
            </tr>
        </tbody>
    </table>
</div>

<p class="NDLRefMemberFunction">#define EE_VERIFY_MESSAGE(pred,
messageAndArgs)</p>

<p class="NDLRefMemberDescription">Verifies a predicate and if it fails it then
calls the assert helper so that it can log the result and/or display a dialog
(if graphical and configured to do so). Even when asserts are disabled this
will always evaluate the predicate.</p>

<p class="NDLRefMemberDetailedDescription">Sample usage:</p>

<pre class="indent1">
// notice the extra parens around the message and arguments:
if ( EE_VERIFY_MESSAGE( result != value,
    ("Invalid result, %d != expected value %d", result, value) ) )
{
    // error handling here...
}
</pre>

<div class="ReferenceTable">
    <table class="NDLNoteContainer" width="100%">
        <tr align="left">
            <td class="NDLNoteContainerTD">
                <p class="NDLHeadingNoteContainer">Note</p>

                <div class="NDLNote">
                    This is structured so that it can be used inline (such as
                    in an if statement).<br>
                    On some platforms the resulting debug break point, should
                    the verify fail, will be inside the AssertHelper::DoVerify.
                    Those platforms that support it will break at the location
                    of the verify statement.
                </div>
            </td>
        </tr>
    </table>
</div>

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">pred</span></td>

                <td>The predicate to assert is true.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">messageAndArgs</span></td>

                <td>A () enclosed message with optional arguments in a printf
                style.</td>
            </tr>
        </tbody>
    </table>
</div>

<p class="NDLRefMemberFunction">#define EE_VERIFY_NOT_EQUAL(computed,
verified)</p>

<p class="NDLRefMemberDescription">Ensures the computed does not equal the
verified value and if it fails it then calls the assert helper so that it can
log the result and/or display a dialog (if graphical and configured to do so).
Even when asserts are disabled this will always evaluate the "computed"
parameter.</p>

<div class="ReferenceTable">
    <table class="NDLNoteContainer" width="100%">
        <tr align="left">
            <td class="NDLNoteContainerTD">
                <p class="NDLHeadingNoteContainer">Note</p>

                <div class="NDLNote">
                    This is structured so that it can be used inline (such as
                    in an if statement).<br>
                    On some platforms the resulting debug break point, should
                    the verify fail, will be inside the AssertHelper::DoVerify.
                    Those platforms that support it will break at the location
                    of the verify statement.<br>
                    When asserts are disabled the "verified" parameter is NOT
                    evaluated. The value passed to this parameter must not have
                    any side effects.
                </div>
            </td>
        </tr>
    </table>
</div>

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">computed</span></td>

                <td>The value computed by the application.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">verified</span></td>

                <td>The desired value to verify the computed value
                against.</td>
            </tr>
        </tbody>
    </table>
</div>

<p class="NDLRefMemberFunction">#define EE_VERIFYEQUALS(computed, verified)</p>

<p class="NDLRefMemberDescription">Ensures the computed equals the verified
value and if it fails it then calls the assert helper so that it can log the
result and/or display a dialog (if graphical and configured to do so). Even
when asserts are disabled this will always evaluate the "computed"
parameter.</p>

<div class="ReferenceTable">
    <table class="NDLNoteContainer" width="100%">
        <tr align="left">
            <td class="NDLNoteContainerTD">
                <p class="NDLHeadingNoteContainer">Note</p>

                <div class="NDLNote">
                    This is structured so that it can be used inline (such as
                    in an if statement).<br>
                    On some platforms the resulting debug break point, should
                    the verify fail, will be inside the AssertHelper::DoVerify.
                    Those platforms that support it will break at the location
                    of the verify statement.<br>
                    When asserts are disabled the "verified" parameter is NOT
                    evaluated. The value passed to this parameter must not have
                    any side effects.
                </div>
            </td>
        </tr>
    </table>
</div>

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class="NDLSystemFont">computed</span></td>

                <td>The value computed by the application.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">verified</span></td>

                <td>The desired value to verify the computed value
                against.</td>
            </tr>
        </tbody>
    </table>
</div>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
