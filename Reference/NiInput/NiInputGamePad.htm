<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiInputGamePad</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiInputGamePad</p>

<p class="NDLRefParentage">: public <a href=
"NiInputDevice.htm">NiInputDevice</a></p>

<p class="NDLRefHeaderFile">&lt;NiInputGamePad.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiInputGamePad</span> implements
the extended functionality that a game pad device requires.</p>

<p class="NDLRefHead1">Constructors</p>

<p>There are no public constructors for the <span class=
"NDLSystemFont">NiInputGamePad</span> class. No application
should ever create an instance; this class should be considered a pure
virtual base class.</p>

<p class="NDLRefHead1">Supported Enumerations</p>

<p>The <span class="NDLSystemFont">NiInputGamePad</span> class
contains several enumerations.</p>

<p class="NDLRefMemberFunction"><a name="NiInputGamePad::Button"
id="NiInputGamePad::Button">NiInputGamePad::Button</a></p>

<p class="NDLRefMemberDescription">The <span class=
"NDLSystemFont">Button</span> enumeration identifies the
Gamebryo-defined buttons.</p>

<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Button</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">NIGP_NONE</span></td>

                <td>No button - used internally.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">NIGP_LUP</span></td>

                <td>Directional pad up.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">NIGP_LDOWN</span></td>

                <td>Directional pad down.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">NIGP_LLEFT</span></td>

                <td>Directional pad left.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">NIGP_LRIGHT</span></td>

                <td>Directional pad right.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">NIGP_L1</span></td>

                <td>The L1 button</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">NIGP_L2</span></td>

                <td>The L2 button</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">NIGP_R1</span></td>

                <td>The R1 button</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">NIGP_R2</span></td>

                <td>The R2 button</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">NIGP_RUP</span></td>

                <td>Right-side up button</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">NIGP_RDOWN</span></td>

                <td>Right-side down button</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">NIGP_RLEFT</span></td>

                <td>Right-side left button</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">NIGP_RRIGHT</span></td>

                <td>Right-side right button</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">NIGP_A</span></td>

                <td>&nbsp;</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">NIGP_B</span></td>

                <td>&nbsp;</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">NIGP_START</span></td>

                <td>Start Button</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">NIGP_SELECT</span></td>

                <td>&nbsp;</td>
            </tr>
        </tbody>
    </table>
</div>

<p class="indent1">For a diagram of the button mappings for
Win32, see <a href="NiInput_on_Win32.htm">NiInput on
Win32</a>.</p>

<p class="NDLRefMemberFunction"><a name=
"NiInputGamePad::ButtonMask" id=
"NiInputGamePad::ButtonMask">NiInputGamePad::ButtonMask</a></p>

<p class="NDLRefMemberDescription">The <span class=
"NDLSystemFont">ButtonMask</span> enumeration gives OR-able
representation of button values that are used to identify
modifiers.</p>

<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>ButtonMask</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">NIGP_MASK_NONE</span></td>

                <td>No modifier</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">NIGP_MASK_LUP</span></td>

                <td><span class="NDLSystemFont">NIGP_LUP</span>
                is pressed.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">NIGP_MASK_LDOWN</span></td>

                <td><span class="NDLSystemFont">NIGP_LDOWN</span>
                is pressed.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">NIGP_MASK_LLEFT</span></td>

                <td><span class="NDLSystemFont">NIGP_LLEFT</span>
                is pressed.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">NIGP_MASK_LRIGHT</span></td>

                <td><span class=
                "NDLSystemFont">NIGP_LRIGHT</span> is
                pressed.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">NIGP_MASK_L1</span></td>

                <td><span class="NDLSystemFont">NIGP_L1</span> is
                pressed.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">NIGP_MASK_L2</span></td>

                <td><span class="NDLSystemFont">NIGP_L2</span> is
                pressed.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">NIGP_MASK_R1</span></td>

                <td><span class="NDLSystemFont">NIGP_R1</span> is
                pressed.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">NIGP_MASK_R2</span></td>

                <td><span class="NDLSystemFont">NIGP_R2</span> is
                pressed.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">NIGP_MASK_RUP</span></td>

                <td><span class="NDLSystemFont">NIGP_RUP</span>
                is pressed.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">NIGP_MASK_RDOWN</span></td>

                <td><span class="NDLSystemFont">NIGP_RDOWN</span>
                is pressed.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">NIGP_MASK_RLEFT</span></td>

                <td><span class="NDLSystemFont">NIGP_RLEFT</span>
                is pressed.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">NIGP_MASK_RRIGHT</span></td>

                <td><span class=
                "NDLSystemFont">NIGP_RRIGHT</span> is
                pressed.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">NIGP_MASK_A</span></td>

                <td><span class="NDLSystemFont">NIGP_A</span> is
                pressed.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">NIGP_MASK_B</span></td>

                <td><span class="NDLSystemFont">NIGP_B</span> is
                pressed.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">NIGP_MASK_START</span></td>

                <td><span class="NDLSystemFont">NIGP_START</span>
                is pressed.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">NIGP_MASK_SELECT</span></td>

                <td><span class=
                "NDLSystemFont">NIGP_SELECT</span> is
                pressed.</td>
            </tr>
        </tbody>
    </table>
</div>

<p class="NDLRefMemberFunction"><a name=
"NiInputGamePad::DefaultAxis" id=
"NiInputGamePad::DefaultAxis">NiInputGamePad::DefaultAxis</a></p>

<p class="NDLRefMemberDescription">The <span class=
"NDLSystemFont">DefaultAxis</span> enumeration represents the
Gamebryo mappings of analog sticks.</p>

<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>DefaultAxis</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">NIGP_DEFAULT_LEFT_HORZ</span></td>

                <td>The left stick horizontal axis.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">NIGP_DEFAULT_LEFT_VERT</span></td>

                <td>The left stick vertical axis.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">NIGP_DEFAULT_RIGHT_HORZ</span></td>

                <td>The right stick horizontal axis.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">NIGP_DEFAULT_RIGHT_VERT</span></td>

                <td>The right stick vertical axis.</td>
            </tr>
        </tbody>
    </table>
</div>

<p class="NDLRefMemberFunction"><a name="NiInputGamePad::Sticks"
id="NiInputGamePad::Sticks">NiInputGamePad::Sticks</a></p>

<p class="NDLRefMemberDescription">The <span class=
"NDLSystemFont">Sticks</span> enumeration gives OR-able
representation of sticks and the axis of interest.</p>

<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Sticks</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>

            <tr>
                <td><span class=
                "NDLSystemFont">NIGP_STICK_LEFT</span></td>

                <td>Left stick identifier.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">NIGP_STICK_RIGHT</span></td>

                <td>Right stick identifier.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">NIGP_STICK_X1</span></td>

                <td>Extra stick 1 identifier.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">NIGP_STICK_X2</span></td>

                <td>Extra stick 2 identifier.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">NIGP_STICK_AXIS_H</span></td>

                <td>Horizontal axis identifier.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">NIGP_STICK_AXIS_V</span></td>

                <td>Vertical axis identifier.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">NIGP_STICK_AXIS_3</span></td>

                <td>Third axis identifier.</td>
            </tr>
        </tbody>
    </table>
</div>

<p class="NDLRefMemberFunction"><a name=
"NiInputGamePad::StickInvert" id=
"NiInputGamePad::StickInvert">NiInputGamePad::StickInvert</a></p>

<p class="NDLRefMemberDescription">The <span class=
"NDLSystemFont">StickInvert</span> enumeration provides flags for
inverting stick axis values.</p>

<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>StickInvert</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">NIGP_INVERT_LEFT_H</span></td>

                <td>Invert the left horizontal axis.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">NIGP_INVERT_LEFT_V</span></td>

                <td>Invert the left vertical axis.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">NIGP_INVERT_RIGHT_H</span></td>

                <td>Invert the right horizontal axis.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">NIGP_INVERT_RIGHT_V</span></td>

                <td>Invert the right vertical axis.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">NIGP_INVERT_X1_H</span></td>

                <td>Invert the extra stick 1 horizontal
                axis.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">NIGP_INVERT_X1_V</span></td>

                <td>Invert the extra stick 1 vertical axis.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">NIGP_INVERT_X2_H</span></td>

                <td>Invert the extra stick 2 horizontal
                axis.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">NIGP_INVERT_X2_V</span></td>

                <td>Invert the extra stick 2 vertical axis.</td>
            </tr>
        </tbody>
    </table>
</div>

<p class="NDLRefHead1">Static Setup Functions</p>

<p>These functions must be called prior to initializing the input
system so that changed values affect the system.</p>

<p class="NDLRefMemberFunction">static unsigned int
GetMaxButtonCount()</p>

<p class="NDLRefMemberDescription">Returns the maximum number of
buttons that the game pad class supports.</p>

<p class="NDLRefMemberFunction">static void
SetMaxButtonCount(unsigned int uiCount)</p>

<p class="NDLRefMemberDescription">Sets the maximum number of
buttons that the game pad class supports.</p>

<p class="NDLRefMemberFunction">static unsigned int
GetMaxAxes()</p>

<p class="NDLRefMemberDescription">Returns the maximum number of
axes that the game pad class supports.</p>

<p class="NDLRefMemberFunction">static void SetMaxAxes(unsigned
int uiCount)</p>

<p class="NDLRefMemberDescription">Sets the maximum number of
axes that the game pad class supports.</p>

<p class="NDLRefMemberFunction">static int
GetDefaultAnalogThreshold()</p>

<p class="NDLRefMemberDescription">Returns the default analog
threshold that the game pad class uses. This threshold is used to
indicate when an analog button is 'pressed'.</p>

<p class="NDLRefMemberFunction">static void
SetDefaultAnalogThreshold(int iThreshold)</p>

<p class="NDLRefMemberDescription">Sets the default analog
threshold that the game pad class uses.</p>

<p class="NDLRefMemberFunction">static float
GetDefaultAnalogDeadZone()</p>

<p class="NDLRefMemberDescription">Returns the default analog
dead zone that the game pad class uses. This is a percentage value
ranging from 0.0f to 1.0f. So, 0.20f would represent a dead zone
of 20%.</p>

<p class="NDLRefMemberFunction">static void
SetDefaultAnalogDeadZone(float fThreshold)</p>

<p class="NDLRefMemberDescription">Sets the default analog dead
zone that the game pad class uses.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">virtual NiInputErr
UpdateDevice()</p>

<p class="NDLRefMemberDescription">Game pad-specific
implementation of the <span class=
"NDLSystemFont">UpdateDevice</span> call.</p>

<p class="NDLRefMemberFunction">virtual NiInputErr
UpdateActionMappedDevice(NiInputSystem* pkInputSystem)</p>

<p class="NDLRefMemberDescription">Game pad-specific
implementation of the <span class=
"NDLSystemFont">UpdateActionMappedDevice</span> call.</p>

<p class="NDLRefMemberFunction">virtual NiInputErr
HandleRemoval()</p>

<p class="NDLRefMemberFunction">virtual NiInputErr
HandleInsertion()</p>

<p class="NDLRefMemberDescription">In this version of
<span class="NDLSystemFont">NiInput</span>, these functions are
currently not implemented. They are intended to provide a general
method for dealing with the occurrence of these situations. For
information on dealing with these situations, see <a href=
"Handling_Lost_or_Removed_Devices.htm">Handling Lost or Removed
Devices</a>.</p>

<p class="NDLRefMemberFunction">const unsigned int GetPadIndex()
const</p>

<p class="NDLRefMemberDescription">Returns the index that the input
system uses to identify the game pad device. This is the index of
the game pad in the <span class=
"NDLSystemFont">NiInputSystem</span> game pad array.</p>

<p class="NDLRefMemberFunction">const unsigned int GetAxisCount()
const</p>

<p class="NDLRefMemberDescription">Returns the number of analog
axes that the game pad has.</p>

<p class="NDLRefMemberFunction"><a name=
"NiInputGamePad::GetAxisValue" id=
"NiInputGamePad::GetAxisValue">const int GetAxisValue(unsigned
int uiAxis) const</a></p>

<p class="NDLRefMemberDescription">Returns the value of the given
axis mapped to the input system's axis range setting. Callers
should use one of the <span class="NDLSystemFont"><a href=
"NiInputGamePad.htm#NiInputGamePad::DefaultAxis">DefaultAxis</a></span>
enumeration values for the <span class=
"NDLSystemFont">uiAxis</span> parameter.</p>

<p class="NDLRefMemberFunction"><a name=
"NiInputGamePad::GetStickAxisValue" id=
"NiInputGamePad::GetStickAxisValue">const int
GetStickAxisValue(unsigned int uiStickFlags) const</a></p>

<p class="NDLRefMemberDescription">Returns the value of the given
stick axis mapped to the input system's axis range setting.
Callers should use one of the <span class=
"NDLSystemFont"><a href="NiInputGamePad.htm#NiInputGamePad::Sticks">
Sticks</a></span> enumeration values for the <span class=
"NDLSystemFont">uiStickFlags</span> parameter.</p>

<p class="NDLRefMemberFunction"><a name=
"NiInputGamePad::GetStickValue" id=
"NiInputGamePad::GetStickValue">const void GetStickValue(unsigned
int uiStickFlags, int&amp; iHorz, int&amp; iVert) const</a></p>

<p class="NDLRefMemberDescription">Returns the horizontal and
vertical values of the given stick mapped to the input system's
axis range setting. Callers should use one of the <span class=
"NDLSystemFont"><a href=
"NiInputGamePad.htm#NiInputGamePad::Sticks">Sticks</a></span>
enumeration values for the <span class=
"NDLSystemFont">uiStickFlags</span> parameter.</p>

<p class="NDLRefMemberFunction">const unsigned int
GetStickInvertFlags() const</p>

<p class="NDLRefMemberDescription">Returns the currently set
<span class="NDLSystemFont"><a href=
"NiInputGamePad.htm#NiInputGamePad::StickInvert">StickInvert</a></span>
flags for the game pad. These identify stick axes that are set to
invert their values.</p>

<p class="NDLRefMemberFunction">void SetStickInvertFlags(unsigned
int uiFlags)</p>

<p class="NDLRefMemberDescription">Sets the <span class=
"NDLSystemFont"><a href=
"NiInputGamePad.htm#NiInputGamePad::StickInvert">StickInvert</a></span>
flags for the game pad.</p>

<p class="NDLRefMemberFunction">void
AddStickInvertFlag(StickInvert eStickInver)</p>

<p class="NDLRefMemberDescription">Adds the given <span class=
"NDLSystemFont"><a href=
"NiInputGamePad.htm#NiInputGamePad::StickInvert">StickInvert</a></span>
flag to the valid inversion flags for the game pad.</p>

<p class="NDLRefMemberFunction">void
RemoveStickInvertFlag(StickInvert eStickInver)</p>

<p class="NDLRefMemberDescription">Removes the given <span class=
"NDLSystemFont"><a href=
"NiInputGamePad.htm#NiInputGamePad::StickInvert">StickInvert</a></span>
flag from the valid inversion flags for the game pad.</p>

<p class="NDLRefMemberFunction">const unsigned int
GetButtonCount() const</p>

<p class="NDLRefMemberDescription">Returns the number of buttons that the game pad has. This includes both analog and digital.</p>

<p class="NDLRefMemberFunction"><a name=
"NiInputGamePad::GetCurrentButtons" id=
"NiInputGamePad::GetCurrentButtons">const unsigned int
GetCurrentButtons() const</a></p>

<p class="NDLRefMemberDescription">Returns a single <span class=
"NDLSystemFont">unsigned int</span> that represents all of the
buttons that are currently pressed on the game pad. The value will be a
combination of the <span class="NDLSystemFont"><a href=
"NiInputGamePad.htm#NiInputGamePad::ButtonMask">ButtonMask</a></span>
enumerations, given a snapshot of all pressed buttons.</p>

<p class="NDLRefMemberFunction"><a name=
"NiInputGamePad::GetNewButtons" id=
"NiInputGamePad::GetNewButtons">const unsigned int
GetNewButtons() const</a></p>

<p class="NDLRefMemberDescription">Returns a single <span class=
"NDLSystemFont">unsigned int</span> that represents all of the
buttons pressed since the last frame on the game pad. The value
will be a combination of the <span class="NDLSystemFont"><a href=
"NiInputGamePad.htm#NiInputGamePad::ButtonMask">ButtonMask</a></span>
enumerations, given a snapshot of all the buttons that were
pressed since the last update call.</p>

<p class="NDLRefMemberFunction"><a name=
"NiInputGamePad::ButtonIsDown" id=
"NiInputGamePad::ButtonIsDown">const bool ButtonIsDown(Button
eButton, unsigned int&amp; uiModifiers) const</a></p>

<p class="NDLRefMemberFunction">const bool ButtonIsDown(Button
eButton) const</p>

<p class="NDLRefMemberDescription">Returns <span class=
"NDLSystemFont">true</span> if the requested button is considered
digitally pressed. The version with the <span class=
"NDLSystemFont">uiModifiers</span> field will have it filled in
with the current modifiers. Note that analog buttons will be
treated as digital with this call. Callers should use the
<span class="NDLSystemFont"><a href=
"NiInputGamePad.htm#NiInputGamePad::Button">Button</a></span>
enumeration to identify the button that they are interested in.</p>

<p class="NDLRefMemberFunction"><a name=
"NiInputGamePad::ButtonWasPressed" id=
"NiInputGamePad::ButtonWasPressed">const bool
ButtonWasPressed(Button eButton, unsigned int&amp; uiModifiers)
const</a></p>

<p class="NDLRefMemberFunction">const bool
ButtonWasPressed(Button eButton) const</p>

<p class="NDLRefMemberDescription">Returns <span class=
"NDLSystemFont">true</span> if the requested button was pressed
since the last update. The version with the <span class=
"NDLSystemFont">uiModifiers</span> field will have it filled in
with the current modifiers. Note that analog buttons will be
treated as digital with this call. Callers should use the
<span class="NDLSystemFont"><a href=
"NiInputGamePad.htm#NiInputGamePad::Button">Button</a></span>
enumeration to identify the button that they are interested in. This
function is used to identify edge cases (for example, a button was not
pressed the previous frame, but is pressed this frame).</p>

<p class="NDLRefMemberFunction"><a name=
"NiInputGamePad::ButtonWasReleased" id=
"NiInputGamePad::ButtonWasReleased">const bool
ButtonWasReleased(Button eButton, unsigned int&amp; uiModifiers)
const</a></p>

<p class="NDLRefMemberFunction">const bool
ButtonWasReleased(Button eButton) const</p>

<p class="NDLRefMemberDescription">Returns <span class=
"NDLSystemFont">true</span> if the requested button was released
since the last update. The version with the <span class=
"NDLSystemFont">uiModifiers</span> field will have it filled in
with the current modifiers. Note that analog buttons will be
treated as digital with this call. Callers should use the
<span class="NDLSystemFont"><a href=
"NiInputGamePad.htm#NiInputGamePad::Button">Button</a></span>
enumeration to identify the button that they are interested in. This
function is used to identify edge cases (for example, a button was
pressed the previous frame, but is not pressed this frame).</p>

<p class="NDLRefMemberFunction"><a name=
"NiInputGamePad::ButtonState" id=
"NiInputGamePad::ButtonState">const unsigned char
ButtonState(Button eButton, unsigned int&amp; uiModifiers)
const</a></p>

<p class="NDLRefMemberFunction">const unsigned char
ButtonState(Button eButton) const</p>

<p class="NDLRefMemberDescription">Returns the requested button's
analog value (0&ndash;255). The version with the <span class=
"NDLSystemFont">uiModifiers</span> field will have it filled in
with the current modifiers. Note that digital buttons will return 255 if pressed via this call. Callers should use the
<span class="NDLSystemFont"><a href=
"NiInputGamePad.htm#NiInputGamePad::Button">Button</a></span>
enumeration to identify the button that they are interested in.</p>

<p class="NDLRefMemberFunction">virtual unsigned int
GetMotorCount() const</p>

<p class="NDLRefMemberDescription">Returns the number of rumble
motors that the game pad has.</p>

<p class="NDLRefMemberFunction">virtual unsigned int
GetRumbleRange(unsigned int uiMotor) const</p>

<p class="NDLRefMemberDescription">Returns the allowable values
for the rumble motor at the given <span class=
"NDLSystemFont">uiMotor</span> index.</p>

<p class="NDLRefMemberFunction">virtual void
SetRumbleValue(unsigned int uiMotor, unsigned int uiValue, bool
bCommit)</p>

<p class="NDLRefMemberDescription">Sets the rumble motor at the
given <span class="NDLSystemFont">uiMotor</span> index to the
given <span class="NDLSystemFont">uiValue</span>. If <span class=
"NDLSystemFont">bCommit</span> is <span class=
"NDLSystemFont">true</span>, the value and all other uncommitted
values for other motors will be set on the device at the time of
the call.</p>

<p class="NDLRefMemberFunction">virtual void
GetRumbleValue(unsigned int uiMotor, unsigned int&amp;
uiValue)</p>

<p class="NDLRefMemberDescription">Gets the current value set for
the rumble motor at the given <span class=
"NDLSystemFont">uiMotor</span> index, placing it in the given
<span class="NDLSystemFont">uiValue</span>.</p>

<p class="NDLRefMemberFunction">void SetRumbleValue(unsigned int
uiMotor, float fValue, bool bCommit)</p>

<p class="NDLRefMemberDescription">Sets the rumble motor at the
given <span class="NDLSystemFont">uiMotor</span> index to the
given floating point <span class="NDLSystemFont">fValue</span>.
The floating point value is mapped to the fixed-point range of
the motor, therefore values returned by <span class=
"NDLSystemFont">GetRumbleValue</span> will not in general be
exactly equal to values passed to <span class=
"NDLSystemFont">SetRumbleValue</span>. If <span class=
"NDLSystemFont">bCommit</span> is <span class=
"NDLSystemFont">true</span>, the value and all other uncommitted
values for other motors will be set on the device at the time of
the call.</p>

<p class="NDLRefMemberFunction">void GetRumbleValue(unsigned int
uiMotor, float&amp; fValue)</p>

<p class="NDLRefMemberDescription">Gets the current floating
point value set for the rumble motor at the given <span class=
"NDLSystemFont">uiMotor</span> index, placing it in the given
<span class="NDLSystemFont">f</span><span class=
"NDLSystemFont">Value</span>.</p>

<p class="NDLRefMemberFunction">virtual void StartRumble()</p>

<p class="NDLRefMemberDescription">Starts rumble, committing all
current values to the device.</p>

<p class="NDLRefMemberFunction">virtual void StopRumble(bool
bQuickStop = false) = 0;</p>

<p class="NDLRefMemberDescription">This function will stop
rumble. If <span class="NDLSystemFont">bQuickStop</span> is true,
then the rumble will stop immediately.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
