<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiInputDevice</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiInputDevice</p>

<p class="NDLRefParentage">: public <a href=
"../../Reference/NiMain/NiRefObject.htm">NiRefObject</a></p>

<p class="NDLRefHeaderFile">&lt;NiInputDevice.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiInputDevice</span> implements
the shared functionality and information for any given input
device.</p>

<p class="NDLRefHead1">Constructors</p>

<p>There are no public constructors for the <span class=
"NDLSystemFont">NiInputDevice</span> class. No application should
ever create an instance - it should be considered a pure virtual
base class.</p>

<p class="NDLRefHead1">Supported Enumerations</p>

<p>The <span class="NDLSystemFont">NiInputDevice</span> class
contains two sets of public enumerations. These are detailed
below:</p>

<a name="NiInputDevice::Type" id="NiInputDevice::Type"></a><p class="NDLRefMemberFunction">NiInputDevice::Type</p>

<p class="NDLRefMemberDescription">The <span class=
"NDLSystemFont">Type</span> enumeration identifies the type of
device. It can be one of the following values:</p>

<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Type</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">NIID_NULL</span></td>

                <td>Un-initialized device.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">NIID_KEYBOARD</span></td>

                <td>Keyboard device type.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">NIID_MOUSE</span></td>

                <td>Mouse device type.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">NIID_GAMEPAD</span></td>

                <td>Gamepad device type.</td>
            </tr>
        </tbody>
    </table>
</div>

<a name="NiInputDevice::Status" id="NiInputDevice::Status"></a><p class="NDLRefMemberFunction">NiInputDevice::Status</p>

<p class="NDLRefMemberDescription">The <span class=
"NDLSystemFont">Status</span> enumeration gives information about
the status of a device. It can be one of the following
values:</p>

<!--(Table)=========================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Status</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">UNKNOWN</span></td>

                <td>The device is in an unknown state.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">READY</span></td>

                <td>The device is ready to accept input and to be
                polled/processed.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">BUSY</span></td>

                <td>The device is currently busy and sould not be
                polled/processed.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">REMOVED</span></td>

                <td>The device has been removed.</td>
            </tr>

            <tr>
                <td><span class="NDLSystemFont">LOST</span></td>

                <td>The device has been lost. If the application
                is holding a reference to it, it should release
                it at this time, and reacquire it through the
                appropriate <span class=
                "NDLSystemFont">NiInputSystem::Open*</span>
                call.</td>
            </tr>
        </tbody>
    </table>
</div>

<p class="NDLRefHead1">NiInputDevice Sub-Classes</p>

<p><span class="NDLSystemFont">NiInputDevice</span> implements
several sub-classes to provide support for a variety of devices.
The following links describe each sub-class.</p>

<p>For information on the control description sub-class, see
<span class="NDLSystemFont"><a href=
"NiInputDevice__ControlDesc.htm">NiInputDevice::ControlDesc</a></span>.</p>

<p>For information on the device description sub-class, see
<span class="NDLSystemFont"><a href=
"NiInputDevice__Description.htm">NiInputDevice::Description</a></span>.</p>

<p>For information on the button sub-class, see <span class=
"NDLSystemFont"><a href=
"NiInputDevice__Button.htm">NiInputDevice::Button</a></span>.</p>

<p>For information on the axis sub-class, see <span class=
"NDLSystemFont"><a href=
"NiInputDevice__Axis.htm">NiInputDevice::Axis</a></span>.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">const Type GetType() const</p>

<p class="NDLRefMemberDescription">Returns the <span class=
"NDLSystemFont"><a href=
"NiInputDevice.htm#NiInputDevice::Type">Type</a></span> of the
device.</p>

<a name="NiInputDevice::GetStatus" id="NiInputDevice::GetStatus"></a><p class="NDLRefMemberFunction">const Status GetStatus() const</p>

<p class="NDLRefMemberDescription">Returns the <span class=
"NDLSystemFont"><a href=
"NiInputDevice.htm#NiInputDevice::Status">Status</a></span> of
the device.</p>

<p class="NDLRefMemberFunction">const unsigned int GetPort()
const</p>

<p class="NDLRefMemberDescription">Returns the port the device is
connected to.</p>

<p class="NDLRefMemberFunction">const unsigned int GetSlot()
const</p>

<p class="NDLRefMemberDescription">Returns the slot the device is
connected to.</p>

<p class="NDLRefMemberFunction">const unsigned int GetModifiers()
const</p>

<p class="NDLRefMemberDescription">Returns the current modifiers
pressed.</p>

<p class="NDLRefMemberFunction">virtual NiInputErr
UpdateDevice()</p>

<p class="NDLRefMemberDescription">Updates the device for
polling.</p>

<p class="NDLRefMemberFunction">virtual NiInputErr
UpdateActionMappedDevice(NiInputSystem* pkInputSystem)</p>

<p class="NDLRefMemberDescription">Updates the device when action
mapped.</p>

<p class="NDLRefMemberFunction">virtual NiInputErr
HandleRemoval()</p>

<p class="NDLRefMemberFunction">virtual NiInputErr
HandleInsertion()</p>

<p class="NDLRefMemberDescription">In this version of
<span class="NDLSystemFont">NiInput</span>, these functions are
currently not implemented. They are intended to provide a general
method for dealing with the occurrence of these situations. For
information on dealing with these situations, please refer to
<a href="Handling_Lost_or_Removed_Devices.htm">Handling Lost or
Removed Devices</a>.</p>

<p class="NDLRefMemberFunction">NiInputErr GetLastError()</p>

<p class="NDLRefMemberDescription">Returns the last error value
that the device encountered.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
