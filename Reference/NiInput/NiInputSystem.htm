<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiInputSystem</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiInputSystem</p>

<p class="NDLRefParentage">: public <span><a href=
"../../Reference/NiMain/NiRefObject.htm">NiRefObject</a></span></p>

<p class="NDLRefHeaderFile">&lt;NiInputSystem.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiInputSystem</span> implements
the base interface and functionality for providing access to
input devices on all platforms.</p>

<p class="NDLRefHead1">Constructors</p>

<p>The constructor for <span class=
"NDLSystemFont">NiInputSystem</span> is a protected function. An
applications instance of the input system should be created using
the static <span class="NDLSystemFont">Create</span>
function:</p>

<p class="NDLRefMemberFunction"><a name="NiInputSystem::Create"
id="NiInputSystem::Create">static NiInputSystem*
Create(CreateParams* pkParams)</a></p>

<p class="NDLRefMemberDescription">Each platform implements a
version of this function, allowing for a single access point in
the library for creating an instance of the input system.</p>

<p class="NDLRefMemberDescription">The <span class=
"NDLSystemFont">Create</span> function takes a pointer to an
instance of the sub-class <span class=
"NDLSystemFont">CreateParams</span>, which contains the
initialization information for the system. See <a href=
"#NiInputSystem_The_CreateParams_Sub-Class">The CreateParams
Sub-Class</a> for information on this.</p>

<p class="NDLRefMemberDescription">Note that an application
should only create one instance of the input system.</p><a name=
"NiInputSystem_The_CreateParams_Sub-Class" id=
"NiInputSystem_The_CreateParams_Sub-Class"></a>

<p class="NDLRefHead1">The CreateParams Sub-Class</p>

<p class="NDLRefMemberFunction"><a name=
"NiInputSystem::CreateParams" id=
"NiInputSystem::CreateParams">NiInputSystem::CreateParams</a></p>

<p class="NDLRefMemberDescription">This sub-class contains
general initialization information for the <span class=
"NDLSystemFont">NiInputSystem</span>. It includes the following
members (and corresponding accessor functions to them):</p>

<p class="NDLRefMemberDescription"><span class=
"NDLSystemFont">m_pkActionMap</span> - a pointer to an instance
of an <span class="NDLSystemFont"><a href=
"NiActionMap.htm">NiActionMap</a></span> class; used when the
input system should be initialized for <em>Action Mapping Mode</em>. If the
application needs to use action mapping at any point in its
execution, the user should pass in an empty action map at the
creation of the system.</p>

<p class="NDLRefMemberDescription"><span class=
"NDLSystemFont">m_uiKeyboard</span> - holds flags indicating the
intended usage of the keyboard. Can be any restricted combination
of the following flags:</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Flag</th>

                <th>Meaning</th>

                <th>Notes</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">FOREGROUND</span></td>

                <td>Use the device in foreground mode.</td>

                <td>Can't be used w/ <span class=
                "NDLSystemFont">BACKGROUND</span></td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">BACKGROUND</span></td>

                <td>Use the device in background mode.</td>

                <td>Can't be used w/ <span class=
                "NDLSystemFont">FOREGROUND</span></td>
            </tr>

            <tr>
                <td>EXCLUSIVE</td>

                <td>Use the device exclusively.</td>

                <td>Can't be used w/ <span class=
                "NDLSystemFont">NONEXCLUSIVE</span></td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">NONEXCLUSIVE</span></td>

                <td>Use the device non-exclusively.</td>

                <td>Can't be used w/ <span class=
                "NDLSystemFont">EXCLUSIVE</span></td>
            </tr>
        </tbody>
    </table>
</div>

<p class="NDLRefMemberDescription">For more information on the
meaning of the flags, see the Microsoft DirectInput
documentation. The flags are only required on Win32 platforms.
They have no meaning on other platforms.</p>

<p class="NDLRefMemberDescription"><span class=
"NDLSystemFont">m_uiMouse</span> - holds flags indicating the
intended usage of the mouse. Can be any restricted combination of
the flags listed under the <span class=
"NDLSystemFont">m_uiKeyboard</span> member.</p>

<p class="NDLRefMemberDescription"><span class=
"NDLSystemFont">m_uiGamePads</span> - indicates the number of
game pad devices the application should expect. Currently, this
field is unused by the system.</p>

<p class="NDLRefMemberDescription"><span class=
"NDLSystemFont">m_iAxisRangeLow</span> and <span class=
"NDLSystemFont">m_iAxisRangeHigh</span> - indicate the range of
values that analog axes should return. This allows for true
cross-platform input handling, as any game pad analog stick,
regardless of platform, will return a value in the given
range.</p>

<p class="NDLRefMemberDescription">For more information on the
Win32-specific <span class="NDLSystemFont">CreateParams</span>,
see <a href=
"NiDI8InputSystem.htm#NiDI8InputSystem_The_CreateParams_Sub_Class">
this documentation</a>.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">const NiInputErr GetLastError()
const</p>

<p class="NDLRefMemberDescription">Returns the last error that
occurred in the system. See <a href="NiInputErr.htm"><span class=
"NDLSystemFont">NiInputErr</span></a> for details on return
values.</p>

<p class="NDLRefMemberFunction">const Mode GetMode() const</p>

<p class="NDLRefMemberDescription">Returns the <span class=
"NDLSystemFont">NiInputSystem::Mode</span> enumeration indicating
what mode the system is operating in. One of the following flags
will be returned:</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Mode</th>

                <th>Meaning</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">IMMEDIATE</span></td>

                <td>Operating in immediate mode only.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">MAPPED</span></td>

                <td>Operating in action mapping mode.</td>
            </tr>
        </tbody>
    </table>
</div>

<p class="NDLRefMemberFunction"><a name=
"NiInputSystem::GetAxisRangeLow" id=
"NiInputSystem::GetAxisRangeLow">const int GetAxisRangeLow()
const</a></p>

<p class="NDLRefMemberDescription">Returns the low-side value of
the analog axis range.</p>

<p class="NDLRefMemberFunction"><a name=
"NiInputSystem::GetAxisRangeHigh" id=
"NiInputSystem::GetAxisRangeHigh">const int GetAxisRangeHigh()
const</a></p>

<p class="NDLRefMemberDescription">Returns the high-side value of
the analog axis range.</p>

<p class="NDLRefMemberFunction">virtual NiInputDevice*
OpenDevice(NiInputDevice::Type eType, unsigned int uiPort,
unsigned int uiSlot)</p>

<p class="NDLRefMemberDescription">Opens a device of the given
type at the given port and slot. If the requested device type is
not available at the given port/slot combination, <span class=
"NDLSystemFont">NULL</span> is returned. If it is available and
successfully opens, a pointer to the device instance is
returned.</p>

<p class="NDLRefMemberDescription">The <span class=
"NDLSystemFont">eType</span> parameter can be one of the
following enumerations:</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Type</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">NIID_KEYBOARD</span></td>

                <td>Represents a keyboard device.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">NIID_MOUSE</span></td>

                <td>Represents a mouse device.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">NIID_GAMEPAD</span></td>

                <td>Represents a game pad device.</td>
            </tr>
        </tbody>
    </table>
</div>

<p class="NDLRefMemberDescription">Currently, <span class=
"NDLSystemFont">uiSlot</span> must be <span class=
"NDLSystemFont">0</span> for all devices.</p>

<p class="NDLRefMemberFunction">virtual NiInputErr
CloseDevice(NiInputDevice* pkDevice)</p>

<p class="NDLRefMemberDescription">Closes the given input device,
<span class="NDLSystemFont">pkDevice</span>.</p>

<p class="NDLRefMemberFunction"><a name=
"NiInputSystem::OpenGamePad" id=
"NiInputSystem::OpenGamePad">virtual NiInputGamePad*
OpenGamePad(unsigned int uiPort, unsigned int uiSlot)</a></p>

<p class="NDLRefMemberDescription">Opens a game pad instance at
the given <span class="NDLSystemFont">uiPort</span> and
<span class="NDLSystemFont">uiSlot</span>. If the port does not
contain a game pad device, <span class=
"NDLSystemFont">NULL</span> is returned. [NOTE: Currently,
<span class="NDLSystemFont">uiSlot</span> must be <span class=
"NDLSystemFont">0</span> for all devices.]</p>

<p class="NDLRefMemberFunction">virtual NiInputGamePad*
OpenGamePad(NiInputDevice::Description* pkNiDesc)</p>

<p class="NDLRefMemberDescription">Opens a game pad instance
corresponding to the given <span class=
"NDLSystemFont">NiInputDevice::Description</span> instance. The
pkNiDesc should be one retrieved through any of the <span class=
"NDLSystemFont">GetFirstDeviceDesc</span>, <span class=
"NDLSystemFont">GetNextDeviceDesc</span>, or <span class=
"NDLSystemFont">GetDeviceDesc</span> functions.</p>

<p class="NDLRefMemberFunction">NiInputGamePad*
GetGamePad(unsigned int uiPort, unsigned int uiSlot) const</p>

<p class="NDLRefMemberFunction">NiInputGamePad*
GetGamePad(unsigned int uiPadIndex) const</p>

<p class="NDLRefMemberDescription">Returns the instance of a game
pad at the given <span class=
"NDLSystemFont">uiPort</span>/<span class=
"NDLSystemFont">uiSlot</span> or <span class=
"NDLSystemFont">uiPadIndex</span>. Note that the game pad MUST
have already been opened via an <span class=
"NDLSystemFont">OpenGamePad</span> call.</p>

<p class="NDLRefMemberFunction"><a name=
"NiInputSystem::OpenMouse" id="NiInputSystem::OpenMouse">virtual
NiInputMouse* OpenMouse()</a></p>

<p class="NDLRefMemberDescription">Will search each valid port
and, if finding a mouse, open the device and return it. This
implies that the system will only ever have a single mouse
attached. If there are two or more mice attached, the system will
only return a device for the first port it finds one in.</p>

<p class="NDLRefMemberFunction">NiInputMouse* GetMouse()</p>

<p class="NDLRefMemberDescription">Returns the current instance
of the mouse device. Note that the mouse MUST have already been
opened via the <span class="NDLSystemFont">OpenMouse</span>
call.</p>

<p class="NDLRefMemberFunction"><a name=
"NiInputSystem::OpenKeyboard" id=
"NiInputSystem::OpenKeyboard">virtual NiInputKeyboard*
OpenKeyboard()</a></p>

<p class="NDLRefMemberDescription">Will search each valid port
and, if finding a mouse, open the device and return it. This
implies that the system will only ever have a single keyboard
attached. If there are two or more keyboards attached, the system
will only return a device for the first port it finds one in.</p>

<p class="NDLRefMemberFunction">NiInputKeyboard*
GetKeyboard()</p>

<p class="NDLRefMemberDescription">Returns the current instance
of the keyboard device. Note that the keyboard MUST have already
been opened via the <span class=
"NDLSystemFont">OpenKeyboard</span> call.</p>

<p class="NDLRefMemberFunction"><a name=
"NiInputSystem::UpdateAllDevices" id=
"NiInputSystem::UpdateAllDevices">virtual NiInputErr
UpdateAllDevices()</a></p>

<p class="NDLRefMemberDescription">Updates the input system when
operating in immediate mode. It will cycle over each open device
and call their corresponding <span class=
"NDLSystemFont">NiInputDevice::UpdateDevice</span> functions.</p>

<p class="NDLRefMemberDescription">The function will return
<span class="NDLSystemFont">NIIERR_DEVICELOST</span> to indicate
if a device has been lost or removed. For more information, see <a href=
"Handling_Lost_or_Removed_Devices.htm">Handling Lost or Removed
Devices</a>.</p>

<p class="NDLRefMemberDescription">For more information on
Immediate Mode operation, see <a href=
"Introduction_to_Immediate_Mode.htm">Immediate Mode</a>.</p>

<p class="NDLRefMemberFunction"><a name=
"NiInputSystem::UpdateActionMap" id=
"NiInputSystem::UpdateActionMap">virtual NiInputErr
UpdateActionMap()</a></p>

<p class="NDLRefMemberDescription">Updates the input system when
operating in action mapping mode. It will cycle over each open
device and call their corresponding <span class=
"NDLSystemFont">NiINputDevice::UpdateActionMappedDevice</span>
functions.</p>

<p class="NDLRefMemberDescription">The function will return
<span class="NDLSystemFont">NIIERR_DEVICELOST</span> to indicate
if a device has been lost or removed. For more information, see <a href=
"Handling_Lost_or_Removed_Devices.htm">Handling Lost or Removed
Devices</a>.</p>

<p class="NDLRefMemberDescription">For more information on Action
Mapping Mode operation, see <a href=
"../NiInput/Introduction_to_Action_Mapping_Mode.htm">Action
Mapping Mode</a>.</p>

<p class="NDLRefMemberFunction">virtual NiActionMap*
GetActionMap()</p>

<p class="NDLRefMemberDescription">Returns the current action map
being used by the system.</p>

<p class="NDLRefMemberFunction"><a name=
"NiInputSystem::SetActionMap" id=
"NiInputSystem::SetActionMap">virtual NiInputErr
SetActionMap(NiActionMap* pkActionMap)</a></p>

<p class="NDLRefMemberDescription">Sets the systems current
action map to the given <span class=
"NDLSystemFont">pkActionMap</span>. Note that this will also
switch the system to Action Mapping Mode.</p>

<p class="NDLRefMemberFunction"><a name=
"NiInputSystem::GetActionDataCount" id=
"NiInputSystem::GetActionDataCount">virtual unsigned int
GetActionDataCount()</a></p>

<p class="NDLRefMemberDescription">Returns the number of queued
up actions. This function should be called after calling
<span class="NDLSystemFont">UpdateActionMap</span> to determine
the number of action which need to be processed.</p>

<p class="NDLRefMemberFunction"><a name=
"NiInputSystem::PopActionData" id=
"NiInputSystem::PopActionData">virtual NiActionData*
PopActionData()</a></p>

<p class="NDLRefMemberDescription">Will pop the head of the
action data queue off the list and return it to the caller. If
there are no queued actions, it will return <span class=
"NDLSystemFont">NULL</span>. NOTE: This function will remove the
action from the list. It will no longer be available once this
function is called. This is the preferred method for retrieving
action data.</p>

<p class="NDLRefMemberFunction"><a name=
"NiInputSystem::ReleaseActionData" id=
"NiInputSystem::ReleaseActionData">void
ReleaseActionData(NiActionData* pkActionData)</a></p>

<p class="NDLRefMemberDescription">This function should be called
after <span class="NDLSystemFont">PopActionData</span> to
properly return the popped action to the pool of actions so that
it can be reused by the input system.</p>

<p class="NDLRefMemberFunction"><a name=
"NiInputSystem::GetFirstActionData" id=
"NiInputSystem::GetFirstActionData">virtual NiActionData*
GetFirstActionData()</a></p>

<p class="NDLRefMemberFunction"><a name=
"NiInputSystem::GetNextActionData" id=
"NiInputSystem::GetNextActionData">virtual NiActionData*
GetNextActionData()</a></p>

<p class="NDLRefMemberDescription">These functions allow for
viewing queued actions without removing them from the list. They
are supplied to allow an application to viewed queued actions at
different times over the course of a frame.</p>

<p class="NDLRefMemberFunction">virtual NiInputErr
FlushActionData()</p>

<p class="NDLRefMemberDescription">Will remove all action data
instances and place them back into the object pool.</p>

<p class="NDLRefMemberFunction">virtual NiInputErr
HandleDeviceChanges()</p>

<p class="NDLRefMemberFunction">virtual NiInputErr
HandleRemovals()</p>

<p class="NDLRefMemberFunction">virtual NiInputErr
HandleInsertions()</p>

<p class="NDLRefMemberDescription">In this version of
<span class="NDLSystemFont">NiInput</span>, these functions are
currently not implemented in the general case - nor on most
platforms. They are intended to provide a general method for
dealing with the occurrence of these situations. For information
on dealing with these situations, see <a href=
"Handling_Lost_or_Removed_Devices.htm">Handling Lost or Removed
Devices</a>.</p>

<p class="NDLRefMemberFunction">virtual NiInputErr
CheckEnumerationStatus()</p>

<p class="NDLRefMemberDescription">This function should be called
by the application after creating the input system, but prior to
attempting to create any devices. Most platforms require a delay
between initializing their input system and creating devices to
determine connected devices. The function will return one of the
following values:</p>
<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Return Value</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td><span class=
                "NDLSystemFont">NIIERR_ENUM_NOTRUNNING</span></td>

                <td>Indicates that enumeration is not currently
                running.</td>
            </tr>

            <tr>
                <td>NIIERR_ENUM_FAILED</td>

                <td>Indicates that enumeration failed. The
                application should release the input system at
                this point, and either attempt to recreate it, or
                fail starting.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">NIIERR_ENUM_NOTCOMPLETE</span></td>

                <td>Indicates that enumeration is not completed.
                The application should perform other processing
                or stall when this occurs. No devices should be
                created at this time.</td>
            </tr>

            <tr>
                <td><span class=
                "NDLSystemFont">NIIERR_ENUM_COMPLETE</span></td>

                <td>Indicates that enumeration is complete.
                Available devices can be checked via the
                <span class=
                "NDLSystemFont">GetFirstDeviceDesc</span>,
                <span class=
                "NDLSystemFont">GetNextDeviceDesc</span>, and
                <span class="NDLSystemFont">GetDeviceDesc</span>
                functions.</td>
            </tr>
        </tbody>
    </table>
</div>

<p class="NDLRefMemberDescription">Refer to the InputDemo sample
to see how to properly use this function.</p>

<p class="NDLRefMemberFunction">virtual NiInputErr
ConfigureDevices()</p>

<p class="NDLRefMemberDescription">This function will bring up
the DirectInput configuration screen on Win32. It is a NOP on
other platforms.</p>

<p class="NDLRefMemberFunction">virtual void SuspendInput()</p>

<p class="NDLRefMemberDescription">This function causes the input
to stop reporting any changes, and stops the rumble on all game
pads. It can be called, for instance, when the game enters a
pause state.</p>

<p class="NDLRefMemberFunction">virtual void ResumeInput()</p>

<p class="NDLRefMemberDescription">This function resumes all
input functionality that was halted by a call to <span class=
"NDLSystemFont">SuspendInput</span>. It can be called, for
instance, when the game exits a pause state.</p>

<p class="NDLRefMemberFunction">virtual unsigned int
GetAvailableDeviceCount()</p>

<p class="NDLRefMemberDescription">Returns the number of devices
available to the input system.</p>

<p class="NDLRefMemberFunction"><a name=
"NiInputSystem::GetFirstDeviceDesc" id=
"NiInputSystem::GetFirstDeviceDesc">virtual
NiInputDevice::Description* GetFirstDeviceDesc()</a></p>

<p class="NDLRefMemberFunction"><a name=
"NiInputSystem::GetNextDeviceDesc" id=
"NiInputSystem::GetNextDeviceDesc">virtual
NiInputDevice::Description* GetNextDeviceDesc()</a></p>

<p class="NDLRefMemberDescription">These functions allow for an
application to iterate over the available devices to the input
system. See <span class=
"NDLSystemFont">NiInputDevice::Description</span> for
information on the returned value.</p>

<p class="NDLRefMemberFunction">virtual
NiInputDevice::Description* GetDeviceDesc(unsigned int uiPort,
unsigned int uiSlot)</p>

<p class="NDLRefMemberDescription">Returns the description for
the device connected to the given <span class=
"NDLSystemFont">uiPort</span>/<span class=
"NDLSystemFont">uiSlot</span> combination. See <span class="NDLSystemFont">NiInputDevice::Description</span> for information on the returned value.</p>

<p class="NDLRefMemberFunction">static unsigned int
MakeDeviceID(unsigned int uiPort, unsigned int uiSlot)</p>

<p class="NDLRefMemberDescription">Returns the encoded device ID
for the given <span class=
"NDLSystemFont">uiPort</span>/<span class=
"NDLSystemFont">uiSlot</span> combination. The ID will be of the
format:</p>

<p class="NDLRefMemberDescription">
<span class="NDLSystemFont">0xSSSSPPPP</span> --&gt; <span class=
"NDLSystemFont">(uiSlot &lt; 16) | uiPort</span></p>

<p class="NDLRefMemberFunction">static unsigned int
DeviceIDPort(unsigned int uiDeviceID)</p>

<p class="NDLRefMemberDescription">Returns the port referenced in
the given <span class="NDLSystemFont">uiDeviceID</span>.</p>

<p class="NDLRefMemberFunction">static unsigned int
DeviceIDSlot(unsigned int uiDeviceID)</p>

<p class="NDLRefMemberDescription">Returns the slot referenced in
the given <span class="NDLSystemFont">uiDeviceID</span>.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
