<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiStripifyInterface</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiStripifyInterface</p>

<p class="NDLRefHeaderFile">&lt;NiStripifyInterface.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>An <span class=
"NDLSystemFont">NiStripifyInterface</span> object is used to
traverse a scene graph and replace the unstripped representation
of each triangle mesh with a stripped representation.</p>

<p>Because stripification can be performed by
simply adding the Stripify Geometry plug-in to your script, it is
not necessary under normal circumstances to write code that uses
the <span class="NDLSystemFont">NiStripify</span> library.
However, some customers have found use for writing their own
tools that stripify geometry, so the interface for doing that is
documented here.</p>

<p class="NDLRefHead1">Constructor</p>

<p class="NDLRefMemberFunction">
NiStripifyInterface(NiStripifyInterface::Platform ePlatform);</p>

<p class="NDLRefMemberDescription">Creates an object that can be
used to stripify a scene. The <span class=
"NDLSystemFont">ePlatform</span> argument indicates the target
platform and determines the stripping algorithm that will be
used. Legitimate values are enumerated within the scope of
<span class="NDLSystemFont">NiStripifyInterface</span>:</p>

<pre class="indent1">
enum Platform
{
   PLATFORM_WIN32,  // PC
   PLATFORM_PS3,    // Sony PlayStation3
   PLATFORM_XBOX360,   // Microsoft Xbox 360
   PLATFORM_COUNT
};
</pre>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">void Stripify_Object(NiNode*
pkNode)</p>

<p class="NDLRefMemberDescription">Traverses the scene graph and
stripifies all objects.</p>

<p class="NDLRefMemberFunction">void
SetInterfaceCacheSize(unsigned int uiCacheSize)</p>

<p class="NDLRefMemberFunction">unsigned int GetCacheSize()
const</p>

<p class="NDLRefMemberDescription">Get and set the cache size
used to optimize the stripified mesh.</p>

<p class="NDLRefHead1">Sample Code</p>

<p>The following code stripifies a scene graph
that will be used in a Win32 application:</p>

<pre>
NiNode* pkScene = &lt;pointer to root of scene graph&gt;;
NiStripifyInterface kSI(NiStripifyInterface::PLATFORM_WIN32);
kSI.Stripify_Object(pkScene);
</pre>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
