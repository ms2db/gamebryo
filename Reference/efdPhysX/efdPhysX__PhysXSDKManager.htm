<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efdPhysX::PhysXSDKManager</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efdPhysX::PhysXSDKManager</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../efd/efd__MemObject.htm">efd::MemObject</a></span></p>


<p class="NDLRefHeaderFile">&lt;PhysXSDKManager.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classefd_phys_x_1_1_phys_x_s_d_k_manager.gif" alt="Inheritance graph for efdPhysX::PhysXSDKManager"/>
  <p class="FigureCaption">Inheritance graph for efdPhysX::PhysXSDKManager</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal"><span class="NDLSystemFont">PhysXSDKManager</span> is a singleton class for managing global PhysX state: the PhysX SDK pointer and collision meshes. </p>
<p class="NDLNormal">Applications cannot create an instance of this class - a single instance is created by the <span class="NDLSystemFont"><a href="../Namespaces/efdPhysX.htm">efdPhysX</a></span> static data manager when the <span class="NDLSystemFont"><a href="../Namespaces/efdPhysX.htm">efdPhysX</a></span> library is loaded (be sure to include <span class="NDLSystemFont">efdPhysX/PhysXSDKManager.h</span> in at least one file). </p>

<a name="public_attributes"></a>
<p class="NDLRefHead1">Public Attributes</p>


<a name="classefd_phys_x_1_1_phys_x_s_d_k_manager_1a754806faa44700d601506a207d03a15d"></a>
<p class="NDLRefMemberFunction">NxPhysicsSDK*  m_pPhysXSDK</p>
<p class="NDLRefMemberDescription">The SDK object that is created. </p>
<p class="NDLRefMemberDetailedDescription">Not valid until Initialize has been called, nor after Shutdown has been called. </p>
<a name="configuration"></a>
<p class="NDLRefHead1">Configuration</p>

<p class="NDLRefMemberDescription">The PhysX SDK manager may be configured through the <span class="NDLSystemFont"><a href="../efd/efd__ConfigManager.htm">efd::ConfigManager</a></span> service.</p>
<p class="NDLRefMemberDescription">Here we provide the set of options that are recognized. All options must be in the section named PhysX.SDK (efdPhysX::PhysXSDKManager::kConfigSection). </p>

<a name="classefd_phys_x_1_1_phys_x_s_d_k_manager_1aa929da5a3aa307fe15358a6e590bdb10"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>  m_kConfigSection</p>
<p class="NDLRefMemberDescription">The name of the config section in which PhysX SDK options are found. </p>
<p class="NDLRefMemberDetailedDescription">The value is "PhysX.SDK". </p>

<a name="classefd_phys_x_1_1_phys_x_s_d_k_manager_1a02fa3c71c2cf9b426405f6e6616e9131"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>  m_kConfigDefaultSleepLinVel</p>
<p class="NDLRefMemberDescription">The option name to use for the default sleep linear velocity squared, "DefaultSleepLinear". </p>

<a name="classefd_phys_x_1_1_phys_x_s_d_k_manager_1a2ad997eaff5cbe6db427295c15eabb69"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>  m_kConfigDefaultSleepAngVel</p>
<p class="NDLRefMemberDescription">The option name to use for the default sleep angular velocity squared, "DefaultSleepAngular". </p>

<a name="classefd_phys_x_1_1_phys_x_s_d_k_manager_1affe6d7760f17d5b3693aec94aeeff6e6"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>  m_kConfigDefaultSleepEnergy</p>
<p class="NDLRefMemberDescription">The option name to use for the default sleep energy, "DefaultSleepEnergy". </p>

<a name="classefd_phys_x_1_1_phys_x_s_d_k_manager_1acd874ecbf72b7c0d3b3ba0dc41b2c965"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>  m_kConfigVRDHost</p>
<p class="NDLRefMemberDescription">The option name to use for the Visual Remote Debugger host, "VRDHost". </p>

<a name="classefd_phys_x_1_1_phys_x_s_d_k_manager_1a1bc5a871b65905f0579b2412dfb86daf"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>  m_kConfigVRDPort</p>
<p class="NDLRefMemberDescription">The option name to use for the Visual Remote Debugger port, "VRDPort". </p>
<p class="NDLRefMemberDetailedDescription">This option is only used if "VRDHost" is provided, and it defaults to 5425 if not provided. </p>

<a name="classefd_phys_x_1_1_phys_x_s_d_k_manager_1abbae1ca09c01b28fc844707f40c3ff46"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>  m_kConfigVRDEventMask</p>
<p class="NDLRefMemberDescription">The option name to use for the Visual Remote Debugger event mask, "VRDEventMask". </p>
<p class="NDLRefMemberDetailedDescription">This option is only used if "VRDHost" is provided, and it defaults to NX_DBG_EVENTMASK_EVERYTHING if not provided. </p>

<a name="classefd_phys_x_1_1_phys_x_s_d_k_manager_1ab0207d28c431115816a45a37149aadf9"></a>
<p class="NDLRefMemberFunction">void  Configure(<span class="NDLSystemFont"><a href="../efd/efd__IConfigManager.htm">efd::IConfigManager</a></span>* pConfigManager)</p>
<p class="NDLRefMemberDescription">Process PhysX SDK configuration parameters held by the given config manager. </p>
<p class="NDLRefMemberDetailedDescription">This method should be called during system service creation before creating any PhysX related services. </p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classefd_phys_x_1_1_phys_x_s_d_k_manager_1ae82128860f6ead70192ea6d797eb9b8d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  IsInitialized() const</p>
<p class="NDLRefMemberDescription">Determine if the SDK has already been initialized. </p>

<a name="classefd_phys_x_1_1_phys_x_s_d_k_manager_1a8fa7380232e39f087631d68194833cfe"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  Initialize(<br/><span class="NDLSystemFont">NxUserAllocator</span>* pAllocator = 0, <br/><span class="NDLSystemFont">NxUserOutputStream</span>* pOutputStream = 0, <br/>const NxPhysicsSDKDesc& sdkDesc = PhysXTypes::ms_kDefaultPhysicsSDKDesc, <br/>NxSDKCreateError* errorCode = 0)</p>
<p class="NDLRefMemberDescription">Initialize the PhysX SDK. </p>
<p class="NDLRefMemberDetailedDescription">This function must be called before any PhysX related calls. This function creates the PhysX SDK using the given allocator and user output stream. If not specified, an <span class="NDLSystemFont"><a href="efdPhysX__PhysXAllocator.htm">efdPhysX::PhysXAllocator</a></span> object and an <span class="NDLSystemFont"><a href="efdPhysX__PhysXUserOutput.htm">efdPhysX::PhysXUserOutput</a></span> object are created and used. The SDK descriptor argument is passed directly to the PhysX SDK creation function. Its default is a constant initialized with the default constructor for the NxPhysicsSDKDesc class.</p>
<p class="NDLRefMemberDetailedDescription">Every call to Initialize must be matched with a call to Shutdown. </p>

<a name="classefd_phys_x_1_1_phys_x_s_d_k_manager_1ab2d35d02bbc879179d6a315c7b857ef0"></a>
<p class="NDLRefMemberFunction">void  Shutdown()</p>
<p class="NDLRefMemberDescription">Releases the PhysX SDK and other resources such as the mesh tables. </p>
<p class="NDLRefMemberDetailedDescription">Shutdown must not be called until all pointers into PhysX related things have been freed, including smart pointers, because destructors for some PhysX objects require the PhysX SDK. Note that if another thread has a handle on the SDK then it will not be released and any resources you may still have, such as scenes or meshes, will not be released. </p>

<a name="classefd_phys_x_1_1_phys_x_s_d_k_manager_1a0a7b7859f04b978fb0875dbe4ff15efd"></a>
<p class="NDLRefMemberFunction">NxScene*  CreateSceneOnDifferentCore(<br/>const NxSceneDesc& desc, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__ProcessorAffinity.htm">efd::ProcessorAffinity</a></span>& affinity)</p>
<p class="NDLRefMemberDescription">Create a PhysX scene in a thread on a particular core. </p>
<p class="NDLRefMemberDetailedDescription">The PhysX SDK creates the simulation thread at the time createScene is called. This function assists in targetting that thread to another core if necessary. Behavior is platform specific ...</p>
<p class="NDLRefMemberDetailedDescription">Win32: createScene is called directly. Windows will move the thread across processors.</p>
<p class="NDLRefMemberDetailedDescription">PS3: createScene is called directly. The PS3 OS will move the thread to either of the hardware threads as needed.</p>
<p class="NDLRefMemberDetailedDescription">Xbox 360: The current thread of execution is moved to the ideal processor specified in affinity before createScene is called. This has the effect of running the thread on that processor. The current thread is restored to its original processor after createScene is called. </p>
<a name="public_static_methods"></a>
<p class="NDLRefHead1">Public Static Methods</p>


<a name="classefd_phys_x_1_1_phys_x_s_d_k_manager_1a4d70075db7198cf1dcc7ed416c1f72d5"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">PhysXSDKManager</span>*  GetManager()</p>
<p class="NDLRefMemberDescription">Obtain a pointer to the singleton manager. </p>

<a name="classefd_phys_x_1_1_phys_x_s_d_k_manager_1a635d41658d3404616fda76a5567ac208"></a>
<p class="NDLRefMemberFunction">static const char*  GetSDKCreateErrorString(NxSDKCreateError* perrorCode)</p>
<p class="NDLRefMemberDescription">Provide a string corresponding to the SDK creation error codes. </p>
<a name="physx_sdk_locking_functions"></a>
<p class="NDLRefHead1">PhysX SDK Locking Functions</p>

<p class="NDLRefMemberDescription">The PhysX SDK object is not thread safe.</p>
<p class="NDLRefMemberDescription">These functions control access to any critical sections that touch the PhysX SDK, and have critical section semantics (see <span class="NDLSystemFont"><a href="../efd/efd__CriticalSection.htm">efd::CriticalSection</a></span>). In a multi-threaded environment, an application should call <span class="NDLSystemFont"><a href="efdPhysX__PhysXSDKManager.htm#classefd_phys_x_1_1_phys_x_s_d_k_manager_1a3c789de451ff6069d9c3d9140376a432">WaitSDKLock()</a></span> before any call into the PhysX SDK, and call <span class="NDLSystemFont"><a href="efdPhysX__PhysXSDKManager.htm#classefd_phys_x_1_1_phys_x_s_d_k_manager_1a891e1d6da93a1977c4d2aed062adf145">ReleaseSDKLock()</a></span> when done. </p>

<a name="classefd_phys_x_1_1_phys_x_s_d_k_manager_1a3c789de451ff6069d9c3d9140376a432"></a>
<p class="NDLRefMemberFunction">void  WaitSDKLock()</p>
<p class="NDLRefMemberDescription">Wait on the lock controlling access to the PhysX SDK object. </p>

<a name="classefd_phys_x_1_1_phys_x_s_d_k_manager_1a891e1d6da93a1977c4d2aed062adf145"></a>
<p class="NDLRefMemberFunction">void  ReleaseSDKLock()</p>
<p class="NDLRefMemberDescription">Release the lock on the PhysX SDK object. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
