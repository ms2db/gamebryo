<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efdPhysX::PhysXAllocator</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efdPhysX::PhysXAllocator</p>
<p class="NDLRefParentage">: public NxUserAllocator</p>


<p class="NDLRefHeaderFile">&lt;PhysXAllocator.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classefd_phys_x_1_1_phys_x_allocator.gif" alt="Inheritance graph for efdPhysX::PhysXAllocator"/>
  <p class="FigureCaption">Inheritance graph for efdPhysX::PhysXAllocator</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">This class implements the PhysX's memory allocation interface by passing all memory calls through to the current Foundation allocator. </p>
<p class="NDLNormal">If no other allocator is passed to <span class="NDLSystemFont"><a href="efdPhysX__PhysXSDKManager.htm#classefd_phys_x_1_1_phys_x_s_d_k_manager_1a8fa7380232e39f087631d68194833cfe">efdPhysX::PhysXSDKManager::Initialize</a></span> then an instance of this class is created and passed to the PhysX SDK initialization function. Users wishing to override this behavior should create their own class that implements <span class="NDLSystemFont">NxUserAllocator</span> and pass it to <span class="NDLSystemFont"><a href="efdPhysX__PhysXSDKManager.htm#classefd_phys_x_1_1_phys_x_s_d_k_manager_1a8fa7380232e39f087631d68194833cfe">efdPhysX::PhysXSDKManager::Initialize</a></span>. </p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classefd_phys_x_1_1_phys_x_allocator_1ae0058991a5f77c240fdbc761fecc8987"></a>
<p class="NDLRefMemberFunction">virtual void*  malloc(size_t stSize)</p>
<p class="NDLRefMemberDescription">Allocate the given number of bytes. </p>
<p class="NDLRefMemberDetailedDescription">Implemented using EE_MALLOC. </p>

<a name="classefd_phys_x_1_1_phys_x_allocator_1a0209a7529aef3a0199a38631d0d4ddc7"></a>
<p class="NDLRefMemberFunction">virtual void*  malloc(<br/>size_t stSize, <br/>NxMemoryType eType)</p>
<p class="NDLRefMemberDescription">Allocate the given number of bytes, with type information. </p>
<p class="NDLRefMemberDetailedDescription">Implemented using EE_MALLOC, ignoring the type argument. </p>

<a name="classefd_phys_x_1_1_phys_x_allocator_1aef1b5e3a7267466f26e351a48f5dd450"></a>
<p class="NDLRefMemberFunction">virtual void*  mallocDEBUG(<br/>size_t stSize, <br/>const char* pcFileName, <br/>int iLine)</p>
<p class="NDLRefMemberDescription">Allocate the given number of bytes, with debug information. </p>
<p class="NDLRefMemberDetailedDescription">Uses EE_MALLOC, or _Malloc if EE_USE_MEMORY_MANAGEMENT is defined. </p>

<a name="classefd_phys_x_1_1_phys_x_allocator_1a78897fa140505496f4802ed3ec3ad73b"></a>
<p class="NDLRefMemberFunction">virtual void*  mallocDEBUG(<br/>size_t stSize, <br/>const char* pcFileName, <br/>int iLine, <br/>const char* pcClassName, <br/>NxMemoryType eType)</p>
<p class="NDLRefMemberDescription">Allocate the given number of bytes, with even more debug information. </p>
<p class="NDLRefMemberDetailedDescription">Uses EE_MALLOC, or _Malloc if EE_USE_MEMORY_MANAGEMENT is defined. </p>

<a name="classefd_phys_x_1_1_phys_x_allocator_1a74df1ec2fdcaa83ce5cc06c28acefccf"></a>
<p class="NDLRefMemberFunction">virtual void*  realloc(<br/>void* pvMemory, <br/>size_t stSize)</p>
<p class="NDLRefMemberDescription">Reallocate the given buffer. </p>
<p class="NDLRefMemberDetailedDescription">Implemented using EE_REALLOC. </p>

<a name="classefd_phys_x_1_1_phys_x_allocator_1a9f52624e7d67e8636d93fb986f1a20ff"></a>
<p class="NDLRefMemberFunction">virtual void  free(void* pvMemory)</p>
<p class="NDLRefMemberDescription">Free the given buffer. </p>
<p class="NDLRefMemberDetailedDescription">Implemented using EE_FREE. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
