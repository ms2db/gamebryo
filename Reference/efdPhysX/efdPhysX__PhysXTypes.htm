<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efdPhysX::PhysXTypes</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efdPhysX::PhysXTypes</p>


<p class="NDLRefHeaderFile">&lt;PhysXTypes.h&gt;</p>


<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">This class provides static member functions for converting between Emergent Foundation classes and PhysX classes. </p>
<p class="NDLNormal">
<p class="NDLNormal">Conversions involving quaternions may produce unexpected results due to the fact that there are two valid quaternion representations for any 3D rotation, and all the conversions guarantee is that the rotations are equivalent. For example, a call to QuaternionToNxMat33 followed by NxMat33ToQuaternion on the result will not always give the quaternion that you started with - it may produce the one with all the values negated. This is the same quaternion mathematically because it produces the same rotation, but some tests, such as the <span class="NDLSystemFont"><a href="../efd/efd__Quaternion.htm">efd::Quaternion</a></span> equality operator, will say they are different. </p></p>

<a name="public_static_attributes"></a>
<p class="NDLRefHead1">Public Static Attributes</p>


<a name="classefd_phys_x_1_1_phys_x_types_1a02fae72576cb7ed1897a6e782d288c0c"></a>
<p class="NDLRefMemberFunction">static const NxVec3  ms_kNxVec3Zero</p>
<p class="NDLRefMemberDescription">A zero vector. </p>

<a name="classefd_phys_x_1_1_phys_x_types_1a14897277b5426f23f51a83d4eed566d8"></a>
<p class="NDLRefMemberFunction">static const NxMat33  ms_kNxMat33Identity</p>
<p class="NDLRefMemberDescription">An identity matrix. </p>

<a name="classefd_phys_x_1_1_phys_x_types_1a2c2209e061a95bee89ba08415e29bdd5"></a>
<p class="NDLRefMemberFunction">static const NxMat34  ms_kNxMat34Identity</p>
<p class="NDLRefMemberDescription">An identity pose. </p>

<a name="classefd_phys_x_1_1_phys_x_types_1a018e7676332b4a12f093d552c5c726cd"></a>
<p class="NDLRefMemberFunction">static const NxPhysicsSDKDesc  ms_kDefaultPhysicsSDKDesc</p>
<p class="NDLRefMemberFunction"></p>
<a name="public_static_methods"></a>
<p class="NDLRefHead1">Public Static Methods</p>


<a name="classefd_phys_x_1_1_phys_x_types_1a0ba8ece6306b7522a05118f9dc716cb9"></a>
<p class="NDLRefMemberFunction">static void  NxVec3ToPoint3(<br/>const NxVec3& src, <br/><span class="NDLSystemFont"><a href="../efd/efd__Point3.htm">efd::Point3</a></span>& dest)</p>
<p class="NDLRefMemberDescription">Convert a NxVec3 object to a Point3 object. </p>

<a name="classefd_phys_x_1_1_phys_x_types_1a84e3c9c47c998ddc76824992ce0aaa3b"></a>
<p class="NDLRefMemberFunction">static void  Point3ToNxVec3(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__Point3.htm">efd::Point3</a></span>& src, <br/>NxVec3& dest)</p>
<p class="NDLRefMemberDescription">Convert a Point3 object to a NxVec3 object. </p>

<a name="classefd_phys_x_1_1_phys_x_types_1ab6652c8cfc57692f408a203d01101adf"></a>
<p class="NDLRefMemberFunction">static void  NxQuatToQuaternion(<br/>const NxQuat& src, <br/><span class="NDLSystemFont"><a href="../efd/efd__Quaternion.htm">efd::Quaternion</a></span>& dest)</p>
<p class="NDLRefMemberDescription">Convert a NxQuat object to a Quaternion object. </p>

<a name="classefd_phys_x_1_1_phys_x_types_1a892ec4073156ee282a908d4b5baec108"></a>
<p class="NDLRefMemberFunction">static void  QuaternionToNxQuat(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__Quaternion.htm">efd::Quaternion</a></span>& src, <br/>NxQuat& dest)</p>
<p class="NDLRefMemberDescription">Convert a Quaternion object to a NxQuat object. </p>

<a name="classefd_phys_x_1_1_phys_x_types_1a91c655e4cfd35c1d9a0b2faa5ec777d0"></a>
<p class="NDLRefMemberFunction">static void  NxMat33ToMatrix3(<br/>const NxMat33& src, <br/><span class="NDLSystemFont"><a href="../efd/efd__Matrix3.htm">efd::Matrix3</a></span>& dest)</p>
<p class="NDLRefMemberDescription">Convert a NxMat33 object to a Matrix3 object. </p>

<a name="classefd_phys_x_1_1_phys_x_types_1a82159fab238e22a7b12d192dff597835"></a>
<p class="NDLRefMemberFunction">static void  Matrix3ToNxMat33(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__Matrix3.htm">efd::Matrix3</a></span>& src, <br/>NxMat33& dest)</p>
<p class="NDLRefMemberDescription">Convert a Matrix3 object to a NxMat33 object. </p>

<a name="classefd_phys_x_1_1_phys_x_types_1a3f7188517c4528ca25fd2c46aa112cff"></a>
<p class="NDLRefMemberFunction">static void  NxMat33ToQuaternion(<br/>const NxMat33& src, <br/><span class="NDLSystemFont"><a href="../efd/efd__Quaternion.htm">efd::Quaternion</a></span>& dest)</p>
<p class="NDLRefMemberDescription">Convert a NxMat33 representing a rotation into a Quaternion representing the same rotation. </p>
<p class="NDLRefMemberDetailedDescription">Uses PhysX's NxMat33.toQuat function. </p>

<a name="classefd_phys_x_1_1_phys_x_types_1a58719a1ff24d8bd17642e01e10bf7427"></a>
<p class="NDLRefMemberFunction">static void  QuaternionToNxMat33(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__Quaternion.htm">efd::Quaternion</a></span>& src, <br/>NxMat33& dest)</p>
<p class="NDLRefMemberDescription">Convert a Quaternion representing a rotation into a NxMat33 representing the same rotation. </p>
<p class="NDLRefMemberDetailedDescription">Uses PhysX's NxMat33.fromQuat function. </p>

<a name="classefd_phys_x_1_1_phys_x_types_1aa38809f60e2c3d76850d7dbfc1d41760"></a>
<p class="NDLRefMemberFunction">static void  NxMat34ToMatrixPoint(<br/>const NxMat34& src, <br/><span class="NDLSystemFont"><a href="../efd/efd__Matrix3.htm">efd::Matrix3</a></span>& matrixDest, <br/><span class="NDLSystemFont"><a href="../efd/efd__Point3.htm">efd::Point3</a></span>& pointDest)</p>
<p class="NDLRefMemberDescription">Convert a PhysX pose matrix to a matrix and point. </p>

<a name="classefd_phys_x_1_1_phys_x_types_1a401077a878e0abb0c1912a3c7f6f7039"></a>
<p class="NDLRefMemberFunction">static void  MatrixPointToNxMat34(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__Matrix3.htm">efd::Matrix3</a></span>& matrixSrc, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__Point3.htm">efd::Point3</a></span>& pointSrc, <br/>NxMat34& nxMDest)</p>
<p class="NDLRefMemberDescription">Convert a matrix and point to a PhysX pose matrix. </p>

<a name="classefd_phys_x_1_1_phys_x_types_1a6c154d441a1207497f75965fe6dc0524"></a>
<p class="NDLRefMemberFunction">static void  NxMat34ToQuatPoint(<br/>const NxMat34& src, <br/><span class="NDLSystemFont"><a href="../efd/efd__Quaternion.htm">efd::Quaternion</a></span>& quatDest, <br/><span class="NDLSystemFont"><a href="../efd/efd__Point3.htm">efd::Point3</a></span>& pointDest)</p>
<p class="NDLRefMemberDescription">Convert from a PhysX pose matrix to the components of a Quaternion and Point representation. </p>

<a name="classefd_phys_x_1_1_phys_x_types_1aaa5f289cdd742036d3415f74ed5886fc"></a>
<p class="NDLRefMemberFunction">static void  QuatPointToNxMat34(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__Quaternion.htm">efd::Quaternion</a></span>& quatSrc, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__Point3.htm">efd::Point3</a></span>& pointSrc, <br/>NxMat34& dest)</p>
<p class="NDLRefMemberDescription">Convert from a Quaternion and Point representation to a PhysX pose matrix. </p>

<a name="classefd_phys_x_1_1_phys_x_types_1ac5da8e6976527a963f40ea87245e91ea"></a>
<p class="NDLRefMemberFunction">static void  NxColorToColorA(<br/>const NxU32 src, <br/><span class="NDLSystemFont"><a href="../efd/efd__ColorA.htm">efd::ColorA</a></span>& dest)</p>
<p class="NDLRefMemberDescription">Converts from the color representation used in PhysX's debug rendering to a <span class="NDLSystemFont"><a href="../efd/efd__ColorA.htm">efd::ColorA</a></span>. </p>

<a name="classefd_phys_x_1_1_phys_x_types_1a480511737996bb68d4e824299ccddfd5"></a>
<p class="NDLRefMemberFunction">static void  NxColorToColorUInt8(<br/>const NxU32 src, <br/><span class="NDLSystemFont"><a href="../efd/efd__ColorA_UInt8.htm">efd::ColorA_UInt8</a></span>& dest)</p>
<p class="NDLRefMemberDescription">Converts from the ARGB color representation used in PhysX's debug rendering to a ColorA_UInt8 color. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
