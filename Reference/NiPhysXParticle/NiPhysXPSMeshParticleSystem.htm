<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiPhysXPSMeshParticleSystem</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiPhysXPSMeshParticleSystem</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../NiParticle/NiPSMeshParticleSystem.htm">NiPSMeshParticleSystem</a></span></p>


<p class="NDLRefHeaderFile">&lt;NiPhysXPSMeshParticleSystem.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/class_ni_phys_x_p_s_mesh_particle_system.gif" alt="Inheritance graph for NiPhysXPSMeshParticleSystem"/>
  <p class="FigureCaption">Inheritance graph for NiPhysXPSMeshParticleSystem</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">The <span class="NDLSystemFont">NiPhysXPSMeshParticleSystem</span> class implements Gamebryo mesh particle systems that use PhysX actors for the particles. </p>
<p class="NDLNormal">The class is derived from, and borrows almost all functionality from, the <span class="NDLSystemFont"><a href="../NiParticle/NiPSMeshParticleSystem.htm">NiPSMeshParticleSystem</a></span> class. Additional functionality is related to creation and management of PhysX actors to represent the particles. </p>

<a name="public_static_methods"></a>
<p class="NDLRefHead1">Public Static Methods</p>


<a name="class_ni_phys_x_p_s_mesh_particle_system_1ada39ffb45c18424684e7049bc7a8df6c"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">NiPhysXPSMeshParticleSystem</span>*  Create(<br/><span class="NDLSystemFont">NiUInt32</span> uiMaxNumParticles, <br/><span class="NDLSystemFont"><a href="../NiParticle/NiPSParticleSystem.htm#class_ni_p_s_particle_system_1a8d4c132118f58b76d54cd2a7264c78c8">AlignMethod</a></span> eNormalMethod = ALIGN_LOCAL_FIXED, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kNormalDirection = NiPoint3::UNIT_Z, <br/><span class="NDLSystemFont"><a href="../NiParticle/NiPSParticleSystem.htm#class_ni_p_s_particle_system_1a8d4c132118f58b76d54cd2a7264c78c8">AlignMethod</a></span> eUpMethod = ALIGN_LOCAL_VELOCITY, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kUpDirection = NiPoint3::ZERO, <br/><span class="NDLSystemFont">bool</span> bHasLivingSpawner = false, <br/><span class="NDLSystemFont">bool</span> bHasColors = false, <br/><span class="NDLSystemFont">bool</span> bHasRotations = false, <br/><span class="NDLSystemFont">bool</span> bWorldSpace = true, <br/><span class="NDLSystemFont">bool</span> bDynamicBounds = true, <br/><span class="NDLSystemFont">bool</span> bAttachMeshModifiers = true, <br/><span class="NDLSystemFont">NiUInt16</span> usMeshPoolSize = DEFAULT_POOL_SIZE, <br/><span class="NDLSystemFont">NiUInt16</span> usNumGenerations = 1, <br/><span class="NDLSystemFont">bool</span> bMeshAutoFillPools = false, <br/>const float fScaleAmount = 0.0f, <br/>const float fScaleRest = 1.0f, <br/>const float fScaleLimit = 1.0f, <br/><span class="NDLSystemFont"><a href="NiPhysXPSMeshParticleSystemProp.htm">NiPhysXPSMeshParticleSystemProp</a></span>* pkProp = 0, <br/><span class="NDLSystemFont">NiUInt32</span> uiCompartmentID = 0, <br/><span class="NDLSystemFont">bool</span> bPhysXSpace = false, <br/><span class="NDLSystemFont">bool</span> bPhysXRotations = false, <br/><span class="NDLSystemFont">NiUInt32</span> uiActorPoolSize = NiPSMeshParticleSystem::DEFAULT_POOL_SIZE, <br/><span class="NDLSystemFont">bool</span> bFillActorPoolsOnLoad = false, <br/><span class="NDLSystemFont">bool</span> bKeepsMeshes = false)</p>
<p class="NDLRefMemberDescription">Creation function. </p>
<p class="NDLRefMemberDetailedDescription">There is no public constructor for <span class="NDLSystemFont">NiPhysXPSMeshParticleSystem</span> objects. Rather, this creation function is provided. It will return 0 if creation fails for some reason.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">uiMaxNumParticles</span></td>
    <td>The maximum number of particles (see <span class="NDLSystemFont"><a href="../NiParticle/NiPSMeshParticleSystem.htm">NiPSMeshParticleSystem</a></span>). </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">eNormalMethod</span></td>
    <td>Orientation of the particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kNormalDirection</span></td>
    <td>The axis used for fixed normal orientation. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">eUpMethod</span></td>
    <td>Orientation of the up axis for the particle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kUpDirection</span></td>
    <td>The axis used for fixed up axis. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">bHasLivingSpawner</span></td>
    <td>Flag to prepare for a living spawner. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">bHasColors</span></td>
    <td>Whether or not this particle system has per-particle colors (see <span class="NDLSystemFont"><a href="../NiParticle/NiPSMeshParticleSystem.htm">NiPSMeshParticleSystem</a></span>). </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">bHasRotations</span></td>
    <td>Whether or not this particle system has per-particle rotation (see <span class="NDLSystemFont"><a href="../NiParticle/NiPSMeshParticleSystem.htm">NiPSMeshParticleSystem</a></span>). </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">bWorldSpace</span></td>
    <td>If true, particles are assumed to be in world coordinates (see <span class="NDLSystemFont"><a href="../NiParticle/NiPSMeshParticleSystem.htm">NiPSMeshParticleSystem</a></span>). </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">bDynamicBounds</span></td>
    <td>If true, the particle bounds are updated on every frame. See the <span class="NDLSystemFont"><a href="../NiParticle/NiPSMeshParticleSystem.htm">NiPSMeshParticleSystem</a></span> documentation for a discussion of the relative merits of this. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">bAttachMeshModifiers</span></td>
    <td>If true, mesh modifiers associated with the system are attached on creation (see <span class="NDLSystemFont"><a href="../NiParticle/NiPSMeshParticleSystem.htm">NiPSMeshParticleSystem</a></span>). </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">usMeshPoolSize</span></td>
    <td>The default size for pools of unused particle meshes (see <span class="NDLSystemFont"><a href="../NiParticle/NiPSMeshParticleSystem.htm">NiPSMeshParticleSystem</a></span>). </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">usNumGenerations</span></td>
    <td>The number of particle generations for which there are distinct meshes (see <span class="NDLSystemFont"><a href="../NiParticle/NiPSMeshParticleSystem.htm">NiPSMeshParticleSystem</a></span>). </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">bMeshAutoFillPools</span></td>
    <td>If true, mesh pools are filled on creation (see <span class="NDLSystemFont"><a href="../NiParticle/NiPSMeshParticleSystem.htm">NiPSMeshParticleSystem</a></span>). </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fScaleAmount</span></td>
    <td>The amount that scaling increases as the speed increases. If negative, the particle will shrink as the speed increases (see <span class="NDLSystemFont"><a href="../NiParticle/NiPSMeshParticleSystem.htm">NiPSMeshParticleSystem</a></span>). </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fScaleRest</span></td>
    <td>The scale when the speed is zero. This value must not be the same as the limit. If the Scale Amount is positive, this value must be less than the limit. If the Scale Amount is negative, it must be greater than the limit (see <span class="NDLSystemFont"><a href="../NiParticle/NiPSMeshParticleSystem.htm">NiPSMeshParticleSystem</a></span>). </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fScaleLimit</span></td>
    <td>The maximum value for scale (or the minimum if the scale amount is negative). The scale will approach this value as the speed goes to infinity (see <span class="NDLSystemFont"><a href="../NiParticle/NiPSMeshParticleSystem.htm">NiPSMeshParticleSystem</a></span>). </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkProp</span></td>
    <td>The NiPhysXMeshPSysProp object that this fluid system should be part of (note that this is a special sub-class of <span class="NDLSystemFont"><a href="../NiPhysX/NiPhysXProp.htm">NiPhysXProp</a></span> for particle systems). This can be NULL at the time of construction but then must be later set with AttachToProp. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiCompartmentID</span></td>
    <td>The PhysX simulation compartment in which to create the particle actors (see <span class="NDLSystemFont"><a href="../NiPhysX/NiPhysXPropDesc.htm">NiPhysXPropDesc</a></span>). </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">bPhysXSpace</span></td>
    <td>If true, the PhysX particle actors are assumed to be in the same coordinate system as the NiPhysXMeshParticleSystem. That requires the <span class="NDLSystemFont"><a href="../NiPhysX/NiPhysXScene.htm#class_ni_phys_x_scene_1ae87e22bd4600ad6b2bf4f55d0cc82110">NiPhysXScene::GetSceneXform</a></span> always return the same transformation as <span class="NDLSystemFont"><a href="../NiMain/NiAVObject.htm">NiPhysXPSMeshParticleSystem::GetWorldTransform</a></span>. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">bPhysXRotations</span></td>
    <td>If true, the rotations on the Gamebryo particles are taken from the PhysX particle actors, otherwise they are controlled by standard Gamebryo particle rotation controllers. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiActorPoolSize</span></td>
    <td>The maximum size of the actor pool to use. This pool avoids repeated calls to create and release PhysX actors. It uses actor flags to effectively remove the pooled particles from the scene. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">bFillActorPoolsOnLoad</span></td>
    <td>If true, the actor pools are filled when the file is streamed or when a PhysX scene is specified for the system. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">bKeepsMeshes</span></td>
    <td>Controls what happens to cooked collision mesh data once the meshes are instantiated. See the <span class="NDLSystemFont"><a href="../NiPhysX/NiPhysXProp.htm">NiPhysXProp</a></span> documentation for more information. </td>
</tr>

        </tbody>
    </table>
</div>


<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="class_ni_phys_x_p_s_mesh_particle_system_1a31ae4a3b72bba06f80259deb411d28f8"></a>
<p class="NDLRefMemberFunction">virtual ~NiPhysXPSMeshParticleSystem()</p>
<p class="NDLRefMemberDescription">Destructor. </p>

<a name="class_ni_phys_x_p_s_mesh_particle_system_1a11d1e71854aa04e1ffa4992ab45aa1e2"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiPhysXPSMeshParticleSystemProp.htm">NiPhysXPSMeshParticleSystemProp</a></span>*  GetProp() const</p>
<p class="NDLRefMemberDescription">Get the Gamebryo-PhysX prop object that this particle system is a part of. </p>

<a name="class_ni_phys_x_p_s_mesh_particle_system_1ad3fd8f0b56f6b27e3e49f77be819e9d9"></a>
<p class="NDLRefMemberFunction">void  AttachToProp(<span class="NDLSystemFont"><a href="NiPhysXPSMeshParticleSystemProp.htm">NiPhysXPSMeshParticleSystemProp</a></span>* pkProp)</p>
<p class="NDLRefMemberDescription">Attach this particle system to a prop. </p>
<p class="NDLRefMemberDetailedDescription">The particle system must be attached to a prop, and the prop must be added to an <span class="NDLSystemFont"><a href="../NiPhysX/NiPhysXScene.htm">NiPhysXScene</a></span> object, and that <span class="NDLSystemFont"><a href="../NiPhysX/NiPhysXScene.htm">NiPhysXScene</a></span> object must have an NxScene in order for the particle system to function. </p>

<a name="class_ni_phys_x_p_s_mesh_particle_system_1ad353d0c878f875f5ac5269f4e6ca93e1"></a>
<p class="NDLRefMemberFunction">void  DetachFromProp()</p>
<p class="NDLRefMemberDescription">Remove this system from its prop. </p>
<p class="NDLRefMemberDetailedDescription">This will cause all the particles to be deleted. </p>

<a name="class_ni_phys_x_p_s_mesh_particle_system_1ab51918a6d4af773733fbd88432c607ba"></a>
<p class="NDLRefMemberFunction">virtual void  ResetParticleSystem(const float fNewLastTime = -NI_INFINITY)</p>
<p class="NDLRefMemberDescription">Removes all particles from the particle system and resets the last known update time to the given parameter. </p>
<p class="NDLRefMemberDetailedDescription">In most cases the parameter should be left as the default, which will cause the system to set the last known update time when the system is next updated, to the time of that update. The argument is provided for cases in which the particle system is reset by a time controller, in which case the last update time must be explicitly set so that subsequent controllers see the correct time. </p>
<a name="coordinate_system_management"></a>
<p class="NDLRefHead1">Coordinate System Management</p>

<p class="NDLRefMemberDescription">A significant optimization is possible when the particle system is in the same coordinate system as the PhysX scene.</p>
<p class="NDLRefMemberDescription">Typically, this will be the case if the various transformations in the <span class="NDLSystemFont"><a href="../NiPhysX/NiPhysXProp.htm">NiPhysXProp</a></span> object and the <span class="NDLSystemFont"><a href="../NiPhysX/NiPhysXScene.htm">NiPhysXScene</a></span> object that the system belongs to are set to the identity, and the particles themselves are in world space.</p>
<p class="NDLRefMemberDescription">Particles are assumed to be in PhysX world coordinates if the flag for Uses PhysX Space is true. </p>

<a name="class_ni_phys_x_p_s_mesh_particle_system_1af119964e7f383cb3f6a335bf4b101664"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetUsesPhysXSpace() const</p>
<p class="NDLRefMemberDescription">Get the flag for PhysX space. </p>

<a name="class_ni_phys_x_p_s_mesh_particle_system_1ad963911667c75243aac069c07aa5d1af"></a>
<p class="NDLRefMemberFunction">void  SetUsesPhysXSpace(const <span class="NDLSystemFont">bool</span> bPhysXSpace)</p>
<p class="NDLRefMemberDescription">Set the flag for PhysX space. </p>
<a name="particle_rotation_control"></a>
<p class="NDLRefHead1">Particle Rotation Control</p>

<p class="NDLRefMemberDescription">The rotation of the Gamebryo particles may be driven by that of the PhysX actors.</p>
<p class="NDLRefMemberDescription">When PhysX actor rotations are used any controllers for particle rotation are ignored.</p>
<p class="NDLRefMemberDescription">Particles use PhysX actor rotations if the flag for Uses PhysX Rotations is true. </p>

<a name="class_ni_phys_x_p_s_mesh_particle_system_1acda42e0733a5cc7cc361f65133766c0f"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetUsesPhysXRotations() const</p>
<p class="NDLRefMemberDescription">Get the flag for PhysX rotations. </p>

<a name="class_ni_phys_x_p_s_mesh_particle_system_1ab12b4cde83765f22a9a33e82c57ddd93"></a>
<p class="NDLRefMemberFunction">void  SetUsesPhysXRotations(const <span class="NDLSystemFont">bool</span> bPhysXRotations)</p>
<p class="NDLRefMemberDescription">Set the flag for PhysX rotations. </p>
<a name="prototype_actor_management"></a>
<p class="NDLRefHead1">Prototype Actor Management</p>

<p class="NDLRefMemberDescription">This class stores the prototypical actors used to represent particles.</p>
<p class="NDLRefMemberDescription">There is one actor for each particle generation (if fewer actors are present, the highest index is used for generations beyond the count). The contents of the actor descriptors define the particle behavior from a physics point of view. They can be used to enable or disable particle collisions, turn gravity on or off, lock degrees of freedom, etc.</p>
<p class="NDLRefMemberDescription">This class also maintains pools of actors that are un-used by any particle. The aim is to avoid expensive actor creation and deletion calls within PhysX. The un-used actors must be placed at some location in the PhysX world, and it is very un-wise to put them all at the same place. Hence, a region must be specified into which the actors will be randomly placed when not in use. When the pools are filled on load, each actor is placed in a random location in a box with a given center and half-side length. These values are given in the PhysX scene coordinate system. </p>

<a name="class_ni_phys_x_p_s_mesh_particle_system_1a7a859ef3f699097684142be71a4ab874"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../NiPhysX/NiPhysXActorDesc.htm">NiPhysXActorDesc</a></span>*  GetActorDescAt(<span class="NDLSystemFont">NiUInt32</span> uiGeneration) const</p>
<p class="NDLRefMemberDescription">Get the actor descriptor for a given generation. </p>

<a name="class_ni_phys_x_p_s_mesh_particle_system_1aa728600589d051d6f5ea10f08a488d94"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">NiPhysXActorDescPtr</a></span>  SetActorDescAt(<br/><span class="NDLSystemFont">NiUInt32</span> uiGeneration, <br/><span class="NDLSystemFont"><a href="../NiPhysX/NiPhysXActorDesc.htm">NiPhysXActorDesc</a></span>* pkActor)</p>
<p class="NDLRefMemberDescription">Set the actor descriptor for a given generation. </p>
<p class="NDLRefMemberDetailedDescription">The actor will be stored as a smart pointer, so do not delete it. </p>

<a name="class_ni_phys_x_p_s_mesh_particle_system_1a9135f22248b265e5908a02a453f06551"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt16</span>  GetActorDescCount() const</p>
<p class="NDLRefMemberDescription">Obtain the number of available actor descriptors. </p>

<a name="class_ni_phys_x_p_s_mesh_particle_system_1a13496f65f331654cbfd0b113fe5f73c3"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetFillActorPoolsOnLoad()</p>
<p class="NDLRefMemberDescription">Get the flag controlling whether or not actor pools are filled when the particle system is first attached to a PhysX scene. </p>

<a name="class_ni_phys_x_p_s_mesh_particle_system_1a584aa1e02433b6e0da096a2c42808851"></a>
<p class="NDLRefMemberFunction">void  SetFillActorPoolsOnLoad(<span class="NDLSystemFont">bool</span> bFill)</p>
<p class="NDLRefMemberDescription">Set the flag controlling whether or not actor pools are filled when the particle system is first attached to a PhysX scene. </p>
<p class="NDLRefMemberDetailedDescription">This flag must be set before the <span class="NDLSystemFont"><a href="../NiPhysX/NiPhysXProp.htm">NiPhysXProp</a></span> object that contains this system is added to a <span class="NDLSystemFont"><a href="../NiPhysX/NiPhysXScene.htm">NiPhysXScene</a></span> object. </p>

<a name="class_ni_phys_x_p_s_mesh_particle_system_1a0dc0d4e4d5e97793fa4efbd2eb1ed707"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  GetDefaultActorPoolsSize()</p>
<p class="NDLRefMemberDescription">Get the default size to use for the PhysX actor pools. </p>

<a name="class_ni_phys_x_p_s_mesh_particle_system_1a78cf18775dd9c27080d21dc2b0e8c6b3"></a>
<p class="NDLRefMemberFunction">void  SetDefaultActorPoolsSize(<span class="NDLSystemFont">NiUInt32</span> uiSize)</p>
<p class="NDLRefMemberDescription">Set the default size to use for the PhysX actor pools. </p>
<p class="NDLRefMemberDetailedDescription">This value must be set before the <span class="NDLSystemFont"><a href="../NiPhysX/NiPhysXProp.htm">NiPhysXProp</a></span> object that contains this system is added to a <span class="NDLSystemFont"><a href="../NiPhysX/NiPhysXScene.htm">NiPhysXScene</a></span> object. </p>

<a name="class_ni_phys_x_p_s_mesh_particle_system_1a2d2f65595b9706471dd034365f905b65"></a>
<p class="NDLRefMemberFunction">void  GetActorPoolRegion(<br/><span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kCenter, <br/><span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kDim)</p>
<p class="NDLRefMemberDescription">Obtain the region used to store un-used particle actors. </p>
<p class="NDLRefMemberDetailedDescription">The region is a box with center kCenter and half size length kDim. </p>

<a name="class_ni_phys_x_p_s_mesh_particle_system_1a91f8693af77bb0fba3c4ff1391f3af53"></a>
<p class="NDLRefMemberFunction">void  SetActorPoolRegion(<br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span> kCenter, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span> kDim)</p>
<p class="NDLRefMemberDescription">Set the region used to store un-used particle actors. </p>
<p class="NDLRefMemberDetailedDescription">The region is a box with center kCenter and half size length kDim.</p>
<p class="NDLRefMemberDetailedDescription">The region must be set before the <span class="NDLSystemFont"><a href="../NiPhysX/NiPhysXProp.htm">NiPhysXProp</a></span> object that contains this system is added to a <span class="NDLSystemFont"><a href="../NiPhysX/NiPhysXScene.htm">NiPhysXScene</a></span> object. </p>

<a name="class_ni_phys_x_p_s_mesh_particle_system_1a6fc273f4bad6b718e2e71160ab352c46"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetKeepsActorMeshes()</p>
<p class="NDLRefMemberDescription">Get the flag controlling the treatment of PhysX collision mesh data on load. </p>
<p class="NDLRefMemberDetailedDescription">See <span class="NDLSystemFont"><a href="../NiPhysX/NiPhysXProp.htm">NiPhysXProp</a></span> for a discussion of mesh keeping. </p>

<a name="class_ni_phys_x_p_s_mesh_particle_system_1ac9c9125c0fb31fe1ccda473015b1c6b1"></a>
<p class="NDLRefMemberFunction">void  SetKeepsActorMeshes(const <span class="NDLSystemFont">bool</span> bKeep)</p>
<p class="NDLRefMemberDescription">Set the flag controlling the treatment of PhysX collision mesh data on load. </p>
<p class="NDLRefMemberDetailedDescription">See <span class="NDLSystemFont"><a href="../NiPhysX/NiPhysXProp.htm">NiPhysXProp</a></span> for a discussion of mesh keeping. </p>

<a name="class_ni_phys_x_p_s_mesh_particle_system_1adeaef6a5936a5b5c054c3383e373c427"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  GetCompartmentID() const</p>
<p class="NDLRefMemberDescription">Get the PhysX compartment ID for use when creating particle actors. </p>
<p class="NDLRefMemberDetailedDescription">See the <span class="NDLSystemFont"><a href="../NiPhysX/NiPhysXPropDesc.htm">NiPhysXPropDesc</a></span> class for details. </p>

<a name="class_ni_phys_x_p_s_mesh_particle_system_1a0eda24f568c2c9c0a44d75d0cdc809d8"></a>
<p class="NDLRefMemberFunction">void  SetCompartmentID(const <span class="NDLSystemFont">NiUInt32</span> uiCompartmentID)</p>
<p class="NDLRefMemberDescription">Get the PhysX compartment ID for use when creating particle actors. </p>
<p class="NDLRefMemberDetailedDescription">See the <span class="NDLSystemFont"><a href="../NiPhysX/NiPhysXPropDesc.htm">NiPhysXPropDesc</a></span> class for details.</p>
<p class="NDLRefMemberDetailedDescription">The compartment must be set before the <span class="NDLSystemFont"><a href="../NiPhysX/NiPhysXProp.htm">NiPhysXProp</a></span> object that contains this system is added to a <span class="NDLSystemFont"><a href="../NiPhysX/NiPhysXScene.htm">NiPhysXScene</a></span> object. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
