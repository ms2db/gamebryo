<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiControllerExtractor</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiControllerExtractor</p>

<p class="NDLRefHeaderFile">&lt;NiControllerExtractor.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>The <span class="NDLSystemFont">NiControllerExtractor</span> 
 class implements the primary functions which the <a href="../../Reference/Tool_Plug_ins/Controller_Extractor.htm">Controller 
 Extractor</a> export tool plug-in uses to create <span class="NDLSystemFont"><a 
 href="../../Reference/NiAnimation/NiSequenceData.htm">NiSequenceData</a></span> 
 objects from an animated scene graph and to remove sequence controllers 
 from the scene graph to facilitate saving out extracted NIF and KF files. 
 At a high level these operations proceed as follows: the class extracts 
 <span class="NDLSystemFont"><a href="../../Reference/NiAnimation/NiInterpolator.htm">NiInterpolator</a></span> 
 objects attached to <span class="NDLSystemFont"><a href="../../Reference/NiAnimation/NiInterpController.htm">NiInterpController</a></span>s
 in the scene graph, converts them to equivalent <span class="NDLSystemFont"><a 
 href="../../Reference/NiAnimation/NiEvaluator.htm">NiEvaluator</a></span> 
 objects using <span class="NDLSystemFont"><a href="../../Reference/NiAnimation/NiInterpolatorConverter.htm">NiInterpolatorConverter</a></span>, 
 constructs <span class="NDLSystemFont"><a href="../../Reference/NiAnimation/NiSequenceData.htm">NiSequenceData</a></span> 
 objects containing these evaluators, and removes sequence controllers 
 from the scene graph.</p>

<p class="NDLRefHead1">Constructor</p>

<p>There is no supported constructor for <span class="NDLSystemFont">NiControllerExtractor</span>. 
 All of its functions are static.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">static void ProcessTextKeys(<a HREF="../../Reference/NiMain/NiAVObject.htm">NiAVObject</a>*&nbsp;pkScene, 
 <a href="#ArrayTypedefs">InfoArray</a>&amp;&nbsp;kInfoArray, 
 <a href="#ArrayTypedefs">NiCCAGlobalInfoArray</a>&amp; 
 kCCAGlobalInfoArray, <a href="#NiCCAInfo">NiCCAInfoArray</a>&amp; 
 kCCAInfoArray, <a href="../../Reference/NiMain/NiAVObject.htm">NiAVObject</a>* 
 pkLastCharacterRoot = NULL, <a href="#NiCCAInfo">NiCCAGlobalInfo</a>* 
 pkLastGlobalInfo = NULL)</p>

<p class="NDLRefMemberDescription">This function provides for automatic retrieval 
 of sequence and compression setting information from the <span class="NDLSystemFont"><a 
 HREF="../../Reference/NiAnimation/NiTextKeyExtraData.htm">NiTextKeyExtraData</a></span> 
 object that resides in the scene graph rooted at <span class="NDLSystemFont">pkScene</span>. 
 This is primarily a convenience function for populating <span class="NDLSystemFont"><a 
 href="NiControllerExtractor.htm#SequenceInfo">SequenceInfo</a></span>, 
 <span class="NDLSystemFont"><a href="NiControllerExtractor.htm#NiCCAInfoArray">NiCCAGlobalInfo</a></span>, 
 and <span class="NDLSystemFont"><a href="NiControllerExtractor.htm#Notes">NiCCAInfo</a></span> 
 objects appropriately. The <span class="NDLSystemFont"><a href="NiControllerExtractor.htm#SequenceInfo">SequenceInfo</a></span> 
 objects are then sent into the protected function <span class="NDLSystemFont">ExtractControllers</span>. 
 See the <a href="NiControllerExtractor.htm#Notes">Notes</a> section below 
 for definitions of <span class="NDLSystemFont"><a href="NiControllerExtractor.htm#InfoArray">InfoArray</a></span> 
 and <span class="NDLSystemFont"><a href="NiControllerExtractor.htm#SequenceInfo">SequenceInfo</a></span>.</p>

<p class="NDLRefMemberFunction">static <a HREF="../../Reference/NiAnimation/NiSequenceData.htm">NiSequenceData</a>* 
 BuildSequenceData(<a href="NiControllerExtractor.htm#SequenceInfo">SequenceInfo</a>&amp; 
 kInfo, bool bRemoveInterpolators = false, bool bMoveAccumTransformToChild 
 = false, const char* pcExcludedControllerTypes = NULL)</p>

<p class="NDLRefMemberDescription">This function creates a single sequence 
 using the info in <span class="NDLSystemFont">kInfo</span>. See the <a href="NiControllerExtractor.htm#Notes">Notes</a> 
 section below for the definition of <span class="NDLSystemFont"><a href="NiControllerExtractor.htm#SequenceInfo">SequenceInfo</a></span>. 
 If <span class="NDLSystemFont">bRemoveInterpolators</span> is true, all 
 interpolators will be removed from the sequence scene graph. This should 
 only be specified if no more sequences need to be extracted from the scene. 
 If <span class="NDLSystemFont">bMoveAccumTransformToChild</span> is true, 
 the transform on the accumulation root node is pushed to its non-accum 
 child node. This adjustment ensures the initial transform on the accumulation 
 root is identity (as if no accum flags had been set on the accum root 
 during export). Similar to <span class="NDLSystemFont">bRemoveInterpolators</span>, 
 <span class="NDLSystemFont">bMoveAccumTransformToChild</span> should only 
 be performed when no more sequences need to be extracted. See the <a HREF="../../Reference/NiAnimation/NiControllerManager.htm#Transformation_Accumulation">Notes</a> 
 in <span class="NDLSystemFont">NiControllerManager</span> for a description 
 of transformation accumulation. The <span class="NDLSystemFont">pcExcludedControllerTypes</span> 
 string is a semicolon-delimited list of <span class="NDLSystemFont"><a HREF="../../Reference/NiAnimation/NiInterpController.htm">NiInterpController</a></span> 
 types to exclude when building the sequence. Controllers whose <a HREF="../../Programmer/Object_Systems/Run_Time_Type_Information.htm">RTTI</a> 
 names match those listed in this string will not have their interpolators 
 added to the sequence nor stripped away when <span class="NDLSystemFont">bRemoveInterpolators</span> 
 is true. Each controller RTTI name must be followed immediately by a semicolon. 
 Here is an example string that will exclude <span class="NDLSystemFont"><a 
 HREF="../../Reference/NiAnimation/NiFlipController.htm">NiFlipController</a></span> 
 and <span class="NDLSystemFont"><a HREF="../../Reference/NiAnimation/NiAlphaController.htm">NiAlphaController</a></span> 
 objects from the sequence: "<span class="NDLSystemFont">NiFlipController;NiAlphaController;</span>". 
 If this pointer is <span class="NDLSystemFont">NULL</span>, all <span class="NDLSystemFont">NiInterpController</span> 
 objects will have their interpolators added to the sequence. This function 
 returns the constructed <span class="NDLSystemFont"><a HREF="../../Reference/NiAnimation/NiSequenceData.htm">NiSequenceData</a></span> 
 on success, and <span class="NDLSystemFont">NULL</span> upon failure.</p>

<p class="NDLRefMemberFunction">static void BuildSequenceDatas(const <a href="NiControllerExtractor.htm#InfoArray">InfoArray</a>&amp; 
 kInfoArray, <a href="NiControllerExtractor.htm#NiSequenceDataArray">SequenceDataArray</a>&amp; 
 kSequenceDataArray, bool bRemoveInterpolators = true, bool bMoveAccumTransformToChild 
 = true, const char* pcExcludedControllerTypes = NULL)</p>

<p class="NDLRefMemberDescription">This function creates multiple sequences 
 using the info stored in <span class="NDLSystemFont">kInfoArray</span>, 
 storing the built sequences in <span class="NDLSystemFont">kSequenceDataArray</span>. 
 If <span class="NDLSystemFont">bRemoveInterpolators</span> is true, all 
 interpolators will be removed from the sequence scene graph after all 
 sequences are built. This should only be specified if no more sequences 
 need to be extracted from the scene. If <span class="NDLSystemFont">bMoveAccumTransformToChild</span> 
 is true, the transform on the accumulation root node is pushed to its 
 non-accum child node. This adjustment ensures the initial transform on 
 the accumulation root is identity (as if no accum flags had been set on 
 the accum root during export). Similar to <span class="NDLSystemFont">bRemoveInterpolators</span>, 
 <span class="NDLSystemFont">bMoveAccumTransformToChild</span> should only 
 be performed when no more sequences need to be extracted. See the <a href="../../Reference/NiAnimation/NiControllerManager.htm#Transformation_Accumulation">Notes</a> 
 in <span class="NDLSystemFont">NiControllerManager</span> for a description 
 of transformation accumulation. The <span class="NDLSystemFont">pcExcludedControllerTypes</span> 
 string is a semicolon-delimited list of <span class="NDLSystemFont"><a href="../../Reference/NiAnimation/NiInterpController.htm">NiInterpController</a></span> 
 types to exclude when building the sequences. Controllers whose <a HREF="../../Programmer/Object_Systems/Run_Time_Type_Information.htm">RTTI</a> 
 names match those listed in this string will not have their interpolators 
 added to the sequences nor stripped away when <span class="NDLSystemFont">bRemoveInterpolators</span> 
 is true. Each controller RTTI name must be followed immediately by a semicolon. 
 Here is an example string that will exclude <span class="NDLSystemFont"><a 
 href="../../Reference/NiAnimation/NiFlipController.htm">NiFlipController</a></span> 
 and <span class="NDLSystemFont"><a href="../../Reference/NiAnimation/NiAlphaController.htm">NiAlphaController</a></span> 
 objects from the sequence: "<span class="NDLSystemFont">NiFlipController;NiAlphaController;</span>". 
 If this pointer is <span class="NDLSystemFont">NULL</span>, all <span class="NDLSystemFont">NiInterpController</span> 
 objects will have their interpolators added to the sequences.</p>

<p class="NDLRefMemberFunction">static void RemoveInterpolators(<a HREF="../../Reference/NiMain/NiAVObject.htm">NiAVObject</a>* 
 pkObject, const char* pcExcludedControllerTypes = NULL)</p>

<p class="NDLRefMemberDescription">This function removes all the interpolators 
 in the scene graph rooted at <span class="NDLSystemFont">pkObject</span>. 
 It should only be called if no more sequences need to be extracted from 
 the scene. The <span class="NDLSystemFont">pcExcludedControllerTypes</span> 
 string is a semicolon-delimited list of <span class="NDLSystemFont"><a href="../../Reference/NiAnimation/NiInterpController.htm">NiInterpController</a></span> 
 types to exclude when removing interpolators. Controllers whose <a HREF="../../Programmer/Object_Systems/Run_Time_Type_Information.htm">RTTI</a> 
 names match those listed in this string will not have their interpolators 
 removed. Each controller RTTI name must be followed immediately by a semicolon. 
 Here is an example string that will exclude <span class="NDLSystemFont"><a 
 href="../../Reference/NiAnimation/NiFlipController.htm">NiFlipController</a></span> 
 and <span class="NDLSystemFont"><a href="../../Reference/NiAnimation/NiAlphaController.htm">NiAlphaController</a></span> 
 objects from having their interpolators removed: "<span class="NDLSystemFont">NiFlipController;NiAlphaController;</span>". 
 If this pointer is <span class="NDLSystemFont">NULL</span>, all <span class="NDLSystemFont">NiInterpController</span> 
 objects will have their interpolators removed by this function. There 
 is special handling for <a HREF="../../Reference/NiParticle/NiPSResetOnLoopCtlr.htm">NiPSResetOnLoopCtlr</a> 
 objects: they are completely removed if the string "<span class="NDLSystemFont">NiPSResetOnLoopCtlr</span>" 
 is found in the excluded controller list.</p>

<p class="NDLRefMemberFunction">static void MoveAccumTransformToChild(<a 
 href="../../Reference/NiMain/NiAVObject.htm">NiAVObject</a>* 
 pkAccumRoot)</p>

<p class="NDLRefMemberDescription">This function moves the transform on the 
 accumulation root node to its non-accum child node. This adjustment ensures 
 the initial transform on the accumulation root is identity (as if no accum 
 flags had been set on the accum root during export). This operation should 
 only be performed when no more sequences need to be extracted. See the 
 <a href="../../Reference/NiAnimation/NiControllerManager.htm#Transformation_Accumulation">Notes</a> 
 in <span class="NDLSystemFont">NiControllerManager</span> for a description 
 of transformation accumulation. </p>

<a name=Notes></a><p class="NDLRefHead1">Notes</p>

<a name="NiCCAGlobalInfo"></a><p class="NDLRefHead2">NiCCAGlobalInfo</p>

<p><span class="NDLSystemFont">NiCCAGlobalInfo </span>is 
 an internal helper class used by <span class="NDLSystemFont">NiControllerExtractor</span> 
 to hold global compression setting information. Its definition is listed 
 below:</p>

<pre>
class NICONTROLLEREXTRACTOR_ENTRY NiCCAGlobalInfo : public NiRefObject
{
public:
NiCCAGlobalInfo();
      ~NiCCAGlobalInfo(){};
      NiAVObjectPtr m_spCharacterRoot;
      bool m_bUseBSplineCompression;
      float m_fBSplineCompressionRatio;
      bool m_bUseCompactControlPoints;
};
</pre>

<a name="NiCCAInfo"></a><p class="NDLRefHead2">NiCCAInfo </p>

<p><span class="NDLSystemFont">NiCCAInfo </span>is an internal 
 helper class used by <span class="NDLSystemFont">NiControllerExtractor</span> 
 to hold object and sequence compression setting information. Its definition 
 is listed below:</p>

<pre>
class NICONTROLLEREXTRACTOR_ENTRY NiCCAInfo : public NiRefObject
{
public:
NiCCAInfo();
      NiCCAInfo(NiCCAGlobalInfo* pkInfo);
      ~NiCCAInfo();
      void SetSequenceName(const char* pcName);
      NiAVObjectPtr m_spCharacterRoot;
      NiAVObjectPtr m_spObject;
      char* m_pcSequenceName;
      bool m_bUseBSplineCompression;
      float m_fBSplineCompressionRatio;
      bool m_bUseCompactControlPoints;
};
</pre>
 
<a name="AxisFlags"></a><p class="NDLRefHead2">AxisFlags</p>

<p>The <span class="NDLSystemFont">AxisFlags</span> enumerated type definition is listed below:</p>

<pre>
enum AxisFlags
{
    NO_FLAGS  = 0x00,
    X_FLAG    = 0x01,
    Y_FLAG    = 0x02,
    Z_FLAG    = 0x04,
    ALL_FLAGS = 0x07
};
</pre>

<a name="SequenceInfo"></a><p class="NDLRefHead2">SequenceInfo</p>

<p><span class="NDLSystemFont">SequenceInfo</span> is an 
 internal helper class used by <span class="NDLSystemFont">NiControllerExtractor</span> 
 to hold sequence information. Its definition is listed below:</p>
 
<pre>
class NICONTROLLEREXTRACTOR_ENTRY SequenceInfo : public NiRefObject
{
public:
    SequenceInfo();
    SequenceInfo(const char* pcName, float fStartTime, float fEndTime,
        bool bLoop, bool bSmoothRotation, AxisFlags eRotFlags,
        unsigned int uiTransFlags, const NiMatrix3&amp; kAccumAxis,
        NiTextKeyExtraData* pkTextKeys, NiAVObject* pkCharacterRoot,
        NiAVObject* pkLayerRoot, NiAVObject* pkAccumRoot);
    ~SequenceInfo();
    void SetName(const char* pcName);
    NiAVObject* GetSequenceRoot() const;
    char* m_pcName;
    float m_fStartTime;
    float m_fEndTime;
    bool m_bLoop;
    bool m_bSmoothRotation;
    AxisFlags m_eRotFlags;
    unsigned int m_uiTransFlags;
    NiMatrix3 m_kAccumAxis;
    NiTextKeyExtraDataPtr m_spTextKeys;
    NiAVObjectPtr m_spCharacterRoot;
    NiAVObjectPtr m_spLayerRoot;
    NiAVObjectPtr m_spAccumRoot;
};
typedef NiPointer&lt;SequenceInfo&gt; SequenceInfoPtr;
</pre>

<a name="ArrayTypedefs"></a><p class="NDLRefHead2">Array Typedefs</p>

<p>Various typedefs are made in the code to simplify the 
 use of arrays as function variables. They are listed below:</p>

<pre>
typedef NiTObjectArray&lt;SequenceInfoPtr&gt; InfoArray;
typedef NiTObjectArray&lt;NiSequenceDataPtr&gt; SequenceDataArray;
typedef NiTObjectArray&lt;NiInterpolatorPtr&gt; InterpolatorArray;
typedef NiObjectTArray&lt;NiEvaluator::IDTag*&gt; IDArray;
typedef NiTObjectArray&lt;NiInterpControllerPtr&gt; ControllerArray;
typedef NiTPrimitiveArray&lt;char*&gt; NameArray;
typedef NiObjectTArray&lt;NiCCAGlobalInfoPtr&gt; NiCCAGlobalInfoArray;
typedef NiTObjectArray&lt;NiCCAInfoPtr&gt; NiCCAInfoArray;
</pre> 

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
