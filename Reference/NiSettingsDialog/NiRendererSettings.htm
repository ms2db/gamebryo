<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiRendererSettings</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiRendererSettings</p>

<p class="NDLRefParentage">: public <a href="../../Reference/NiSystem/NiMemObject.htm">NiMemObject</a></p>

<p class="NDLRefHeaderFile">&lt;NiRendererSettings.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>This class contains settings for all D3D
 renderer creation, as well as functions for loading and saving settings, 
 parsing command line arguments, setting/getting name of the INI file, 
 and syncing settings with <span class="NDLSystemFont"><a href="../../Reference/NiApplication/NiApplication.htm">NiApplication</a></span>. 
 This class is singleton; it is created on demand when the <span class="NDLSystemFont">GetInstance</span> 
 function is first called. The class occupies a small amount of memory 
 and by default is destroyed when the application exits. 
 At any time the application can check the settings the renderer was created 
 with, and can change them and recreate the renderer again. All public 
 functions are static for convenience, however to gain access to the public 
 member variables, an instance reference is required. This can be obtained 
 through a call to <span class="NDLSystemFont">GetInstance</span>.</p>

<p class="NDLRefHead1">Static Member Functions</p>

<p class="NDLRefMemberFunction">static NiRendererSettings* GetInstance()</p>

<p class="NDLRefMemberDescription">Retrieves an instance of class and creates 
 it if class is not instantiated.</p>

<p class="NDLRefMemberFunction">static void LoadSettings()</p>

<p class="NDLRefMemberFunction">static void SaveSettings()</p>

<p class="NDLRefMemberDescription">Loads or saves all settings to and from 
 the INI file. This writes all renderer settings to the &quot;[Renderer]&quot; 
 section of a standard windows INI file. The application may store other 
 settings in this INI file as well, if desired.</p>

<p class="NDLRefMemberFunction">static void SetIniFilename(char* pcFileName)</p>

<p class="NDLRefMemberDescription">Sets the name of the INI file. If the 
 file name does not contain a path (it has no '/' or '\' characters), then 
 the file will be stored in the same location as the executable file. The 
 default value for the name of the INI file is <span class="NDLSystemFont">AppSettings.ini. 
 </span>For more information about the format of the INI file, see <a href="../../Reference/NiApplication/Renderer_options_from_the_INI_file.htm">Renderer 
 options from the INI file</a>.</p>

<p class="NDLRefMemberFunction">static const char* GetIniFilename()</p>

<p class="NDLRefMemberDescription">Returns the full path and name of the 
 INI file that will be used to save user settings.</p>

<p class="NDLRefMemberFunction">static void SyncToNiApplication()</p>

<p class="NDLRefMemberDescription">Synchronizes settings with <span class="NDLSystemFont"><a 
 href="../../Reference/NiApplication/NiApplication.htm">NiApplication</a></span> for compatibility. This 
 function updates numerous <span class="NDLSystemFont">NiApplication</span> 
 settings.</p>

<p class="NDLRefMemberFunction">static void SyncFromNiApplication()</p>

<p class="NDLRefMemberDescription">Synchronizes settings with <span class="NDLSystemFont"><a 
 href="../../Reference/NiApplication/NiApplication.htm">NiApplication</a></span> for compatibility. This 
 function gets values for enabling the stencil buffer, showing renderer 
 dialog, and <a href="../../Reference/NiApplication/Using_the_Renderer_Settings_Dialog.htm">several 
 other settings</a>. If <span class="NDLSystemFont"><a href=
 "../../Reference/NiApplication/NiApplication.htm">NiApplication</a>::GetRendererDialog</span> returns true, the saved settings 
 are used to fill in default values for the dialog box, and if it returns 
 false, the dialog is not shown and the renderer is created with default 
 or saved settings.</p>

<p class="NDLRefMemberFunction">static void ParseCommandLine()</p>

<p class="NDLRefMemberDescription">Gets settings from the command line. For 
 a list of command line options, see <a href="../../Reference/NiApplication/Renderer_options_from_the_Command_Line.htm">Renderer 
 options from the Command Line</a>.</p>

<p class="NDLRefHead1">Public Member Variables</p>

<p class="NDLRefMemberFunction">static char* ms_acIniFilename</p>

<p class="NDLRefMemberDescription">Default name of the INI file</p>

<p class="NDLRefMemberFunction">unsigned int m_uiScreenWidth</p>

<p class="NDLRefMemberFunction">unsigned int m_uiScreenHeight</p>

<p class="NDLRefMemberDescription">Screen resolution for full screen mode, 
 or width and height of the window in windowed mode.</p>

<p class="NDLRefMemberFunction">unsigned int m_uiMinScreenWidth</p>

<p class="NDLRefMemberFunction">unsigned int m_uiMinScreenHeight</p>

<p class="NDLRefMemberDescription">Minimum width and height of available 
 modes displayed in the resolution combo box. Resolutions lower than these 
 values will not be available to the user.</p>

<p class="NDLRefMemberFunction">unsigned int m_uiAdapterIdx</p>

<p class="NDLRefMemberDescription">Index of the selected adapter.</p>

<p class="NDLRefMemberFunction">unsigned int m_uiNVPerfHUDAdapterIdx</p>

<p class="NDLRefMemberDescription">Index of the NVPerfHUD adapter, automatically 
 filled in by the dialog box. Can be used only if <span class="NDLSystemFont">m_bNVPerfHUD</span> 
 is true.</p>

<p class="NDLRefMemberFunction"><a href="../../Reference/efd/efd__SystemDesc.htm">efd::SystemDesc::RendererID</a> m_eRendererID;
</p>

<p class="NDLRefMemberDescription">Indicates which renderer should be created.</p>

<p class="NDLRefMemberFunction">bool m_bFullscreen</p>

<p class="NDLRefMemberDescription">True if application will run in full screen,
 false for windowed mode.</p>

<p class="NDLRefMemberFunction">bool m_bNVPerfHUD</p>

<p class="NDLRefMemberDescription">Use NVPerfHUD. If true, <span class="NDLSystemFont">m_uiNVPerfHUDAdapterIdx</span> 
 must be used instead of <span class="NDLSystemFont">m_uiAdapterIdx</span> 
 as the adapter index.</p>

<p class="NDLRefMemberFunction">bool m_bRefRast</p>

<p class="NDLRefMemberDescription">True specifies a REF(software) device, 
 false specifies a HAL(hardware) device. Ignored if <span class="NDLSystemFont">m_bNVPerfHUD</span> 
 is true.</p>

<p class="NDLRefMemberFunction">bool m_bPureDevice</p>

<p class="NDLRefMemberDescription">True specifies a Pure HAL device. Ignored 
 if <span class="NDLSystemFont">m_bNVPerfHUD</span> is true or <span class="NDLSystemFont">m_bRefRast</span> 
 is true.</p>

<p class="NDLRefMemberFunction">bool m_bVSync</p>

<p class="NDLRefMemberDescription">Specifies whether to lock to vertical 
 sync.</p>

<p class="NDLRefMemberFunction">bool m_bStencil</p>

<p class="NDLRefMemberDescription">Specifies use of the stencil buffer. This 
 setting is not stored in the INI file; its value is taken from <span class="NDLSystemFont">NiApplication</span>. 
 If it is true, only formats with a stencil component can be selected by 
 the user as a depth buffer format.</p>

<p class="NDLRefMemberFunction">bool m_bMultiThread</p>

<p class="NDLRefMemberDescription">Specifies whether the application needs 
 to create a multithreaded renderer. See the documentation for the <span 
 class="NDLSystemFont"><a HREF="../../Reference/NiDX9Renderer/Threading_in_the_DX9Renderer.htm">NiDX9Renderer</a></span>,
 <span class="NDLSystemFont"><a HREF="../../Reference/NiD3D10Renderer/Threading_in_the_D3D10Renderer.htm">NiD3D10Renderer</a></span>, or 
 <span class="NDLSystemFont"><a HREF="../../Reference/ecrD3D11Renderer/Threading_in_the_D3D11Renderer.htm">ecrD3D11Renderer</a></span> 
 for more discussion.</p>

<p class="NDLRefMemberFunction">bool m_bRendererDialog</p>

<p class="NDLRefMemberDescription">If true, the <a href="../../Reference/NiApplication/Renderer_Settings_Dialog.htm">renderer settings dialog</a> will be shown. If false, the dialog will only be shown 
 if renderer creation with default/saved settings fails.</p>

<p class="NDLRefMemberFunction">bool m_bSaveSettings</p>

<p class="NDLRefMemberDescription">Save settings, selected by user. Settings 
 are saved only if a renderer is created successfully.</p>

<p class="NDLRefMemberFunction">NiBaseRendererDesc::Vertexprocessing m_eVertexProcessing</p>

<p class="NDLRefMemberDescription">Selects hardware, software, or mixed vertex 
 processing. Ignored if <span class="NDLSystemFont">m_bNVPerfHUD</span> is 
 true or <span class="NDLSystemFont">m_bPureDevice</span> is true or the 
 REF device is selected.</p>

<p class="NDLRefMemberFunction">NiDX9Renderer::FrameBufferFormat m_eDX9RTFormat</p>

<p class="NDLRefMemberDescription">Render target format for Direct3D 9.</p>

<p class="NDLRefMemberFunction">NiDX9Renderer::DepthStencilFormat m_eDX9DSFormat</p>

<p class="NDLRefMemberDescription">Depth buffer format for Direct3D 9.</p>

<p class="NDLRefMemberFunction">NiDX9Renderer::FramebufferMode m_eDX9FBFormat</p>

<p class="NDLRefMemberDescription">Frame buffer format for Direct3D 9.</p>

<p class="NDLRefMemberFunction">unsigned int m_uiD3D10OutputIdx</p>

<p class="NDLRefMemberDescription">Index of display for Direct3D 10.</p>

<p class="NDLRefMemberFunction">unsigned int m_uiD3D10MultisampleCount</p>

<p class="NDLRefMemberFunction">unsigned int m_uiD3D10MultisampleQuality</p>

<p class="NDLRefMemberDescription">Multisample settings for Direct3D10.</p>

<p class="NDLRefMemberFunction">DXGI_FORMAT m_eD3D10DSFormat</p>

<p class="NDLRefMemberDescription">Depth buffer format for Direct3D 10.</p>

<p class="NDLRefMemberFunction">DXGI_FORMAT m_eD3D10RTFormat</p>

<p class="NDLRefMemberDescription">Render target format for Direct3D 10.</p>

<p class="NDLRefMemberFunction">DXGI_RATIONAL m_kD3D10Refresh</p>

<p class="NDLRefMemberDescription">Refresh rate for Direct3D 10.</p>

<p class="NDLRefMemberFunction">unsigned int m_uiD3D11OutputIdx</p>

<p class="NDLRefMemberDescription">Index of display for Direct3D 11.</p>

<p class="NDLRefMemberFunction">unsigned int m_uiD3D11MultisampleCount</p>

<p class="NDLRefMemberFunction">unsigned int m_uiD3D11MultisampleQuality</p>

<p class="NDLRefMemberDescription">Multisample settings for Direct3D11.</p>

<p class="NDLRefMemberFunction">DXGI_FORMAT m_eD3D11DSFormat</p>

<p class="NDLRefMemberDescription">Depth buffer format for Direct3D 11.</p>

<p class="NDLRefMemberFunction">DXGI_FORMAT m_eD3D11RTFormat</p>

<p class="NDLRefMemberDescription">Render target format for Direct3D 11.</p>

<p class="NDLRefMemberFunction">DXGI_RATIONAL m_kD3D11Refresh</p>

<p class="NDLRefMemberDescription">Refresh rate for Direct3D 11.</p>

<p class="NDLRefMemberFunction">bool m_bD3D11FeatureLevel9_1</p>

<p class="NDLRefMemberDescription">Indicates whether the D3D11 feature level 9.1 is acceptable.</p>

<p class="NDLRefMemberFunction">bool m_bD3D11FeatureLevel9_2</p>

<p class="NDLRefMemberDescription">Indicates whether the D3D11 feature level 9.2 is acceptable.</p>

<p class="NDLRefMemberFunction">bool m_bD3D11FeatureLevel9_3</p>

<p class="NDLRefMemberDescription">Indicates whether the D3D11 feature level 9.3 is acceptable.</p>

<p class="NDLRefMemberFunction">bool m_bD3D11FeatureLevel10_1</p>

<p class="NDLRefMemberDescription">Indicates whether the D3D11 feature level 10.0 is acceptable.</p>

<p class="NDLRefMemberFunction">bool m_bD3D11FeatureLevel10_1</p>

<p class="NDLRefMemberDescription">Indicates whether the D3D11 feature level 10.1 is acceptable.</p>

<p class="NDLRefMemberFunction">bool m_bD3D11FeatureLevel11_0</p>

<p class="NDLRefMemberDescription">Indicates whether the D3D11 feature level 11.0 is acceptable.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
