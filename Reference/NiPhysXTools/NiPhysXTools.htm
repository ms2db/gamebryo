<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiPhysXTools</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiPhysXTools</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../efd/efd__MemObject.htm">efd::MemObject</a></span></p>


<p class="NDLRefHeaderFile">&lt;NiPhysXTools.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/class_ni_phys_x_tools.gif" alt="Inheritance graph for NiPhysXTools"/>
  <p class="FigureCaption">Inheritance graph for NiPhysXTools</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">The <span class="NDLSystemFont">NiPhysXTools</span> class provides general functionality used by tools working with Gamebryo-PhysX content. </p>

<a name="public_types"></a>
<p class="NDLRefHead1">Public Types</p>
<a name="class_ni_phys_x_tools_1a2b00568e1abd49946a457ed9f3727803"></a>
<p class=NDLRefHead2>NiPhysXTools::VelocitySource</p>


<p class="NDLRefMemberDescription">Enumeration of methods for obtaining a velocity. </p>


<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">Zero</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">DefaultState</span></td>
    <td>Set the velocity to zero. </td>
</tr>

  </tbody>
</table>
</div>


<a name="public_static_methods"></a>
<p class="NDLRefHead1">Public Static Methods</p>


<a name="class_ni_phys_x_tools_1a880da86df61fd56c028623889687f171"></a>
<p class="NDLRefMemberFunction">static void  AddStateFromSceneGraph(<br/><span class="NDLSystemFont"><a href="../NiPhysX/NiPhysXProp.htm">NiPhysXProp</a></span>* pkProp, <br/><span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>& kStateName, <br/><span class="NDLSystemFont"><a href="NiPhysXTools.htm#class_ni_phys_x_tools_1a2b00568e1abd49946a457ed9f3727803">VelocitySource</a></span> eVelocitySource = Zero)</p>
<p class="NDLRefMemberDescription">Add state to a PhysX prop based on the scene graph state. </p>
<p class="NDLRefMemberDetailedDescription">This function iterates through every actor descriptor in the prop, and adds the scene graph state as a new state in the appropriate actor if that actor has a source or destination. The prop's set of states is updated to reflect the new state.</p>
<p class="NDLRefMemberDetailedDescription">PhysX materials for the new state are copied from the default state. Actors that do not have a Gamebryo node associated with them also have the new state copied from the default.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pkProp</span></td>
    <td>The NiPhysX prop containig the sources, destinations, actors and materials. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kStateName</span></td>
    <td>The name to record for this state. If a state of this name already exists in the prop, then it is replaced with the new state. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">eVelocitySource</span></td>
    <td>The method to use for obtaining velocity for the state. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_phys_x_tools_1a49e31777fb7fc56ddfcc2086b6b1513d"></a>
<p class="NDLRefMemberFunction">static float  ComputeClothArea(NxClothMesh* pkMesh)</p>
<p class="NDLRefMemberDescription">Get the area of a cloth mesh in its un-deformed state. </p>
<p class="NDLRefMemberDetailedDescription">The area is in PhysX units. </p>
<a name="mesh_fingerprinting"></a>
<p class="NDLRefHead1">Mesh Fingerprinting</p>

<p class="NDLRefMemberDescription">A fingerprint is a probably-unique value that can be compared to other fingerprints for a probably-correct answer as to whether the meshes are identical.</p>
<p class="NDLRefMemberDescription">This may be used in tools to identify meshes that can be shared. If it is important that the equality of meshes be certain, then use the comparison methods included with this class.</p>
<p class="NDLRefMemberDescription">Typical usage computes the fingerprints for all meshes and stores the meshes in a hash table sized 2^n for some n, keyed with the lower n bits of the fingerprint. The hash table equality testing function is the exact mesh equality function. It is sensible to store the complete fingerprint along with the mesh and compare that first (two keys will map to the same table slot if the lower n bits match, which is not as discriminating as the entire fingerprint matching).</p>
<p class="NDLRefMemberDescription">The fingerprinting functions all take mesh descriptor classes. Use the saveToDesc method for PhysX meshes (e.g. NxClothMesh::saveToDesc) to obtain a descriptor in cases where you have a pointer to a mesh. </p>

<a name="class_ni_phys_x_tools_1a1b0ce01a696b4cac676f030d70986a8c"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  FingerprintClothMesh(NxClothMeshDesc& clothMeshDesc)</p>
<p class="NDLRefMemberDescription">Get a 32-bit fingerprint for a PhysX cloth mesh. </p>

<a name="class_ni_phys_x_tools_1a725ec4d206d0a12bd9f0e37b718f24b5"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  FingerprintTriangleMesh(NxTriangleMeshDesc& triangleMeshDesc)</p>
<p class="NDLRefMemberDescription">Get a 32-bit fingerprint for a PhysX triangle mesh. </p>

<a name="class_ni_phys_x_tools_1ab37889362ae10805b6f4946d8b5e5501"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  FingerprintConvexMesh(NxConvexMeshDesc& convexMeshDesc)</p>
<p class="NDLRefMemberDescription">Get a 32-bit fingerprint for a PhysX convex mesh. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
