<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiDevImageQuantizer</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiDevImageQuantizer</p>

<p class="NDLRefParentage">: public <u><span><a href=
"../../Reference/NiMain/NiDevImageConverter.htm">NiDevImageConverter</a></span></u></p>

<p class="NDLRefHeaderFile">&lt;NiDevImageQuantizer.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>The <span class="NDLSystemFont">NiDevImageQuantizer</span> is
a subclass of <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiDevImageConverter.htm">NiDevImageConverter</a></span>
that implements additional conversion capabilities over the
<span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiDevImageConverter.htm">NiDevImageConverter</a></span>.
Besides being able to filter flat images into mipmap pyramids,
performing conversions from various pixel formats, and the like,
it also offers quantizing capabilities. The <span class=
"NDLSystemFont">NiDevImageQuantizer</span> can quantize 32-bit
RGBA (<span class="NDLSystemFont">RGBA32</span>) pixel data to
8-bit and 4-bit representations (<span class=
"NDLSystemFont">PALA8, PALA4, PAL8, PAL4</span>) and it can DXT
compress 32-bit RGBA pixel data. See documentation concerning the
<span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiDevImageConverter.htm">NiDevImageConverter</a></span>
for more information.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">Create()</p>

<p class="NDLRefMemberDescription">Default (and sole)
constructor. Creates the internal data structures required for
image quantizing.</p>

<p class="NDLRefHead1">Static Member Functions</p>

<p class="NDLRefMemberFunction">static <a href=
"../../Reference/NiMain/NiPixelData.htm">NiPixelDataPtr</a>
ProcessPixelData(<a href=
"../../Reference/NiMain/NiPixelData.htm">NiPixelDataPtr</a>
spPixelData, <a href=
"../../Reference/NiMain/NiTexture__FormatPrefs.htm">NiTexture::FormatPrefs</a>
kPrefs, bool bMipMap, bool bUseAlphaIfAvailable, <a href=
"../../Reference/NiMain/NiPixelFormat.htm">NiPixelFormat</a>
kDestFormat, unsigned int uiSizeDivideBy, <a href=
"../../Reference/efd/efd__SystemDesc.htm">
efd::SystemDesc::RendererID</a> eRendererID, const char*
pcFilename, char* pcErrorBuffer, unsigned int
uiErrorBufferLength)</p>

<p class="NDLRefMemberDescription">This method is the workhorse
of the <span class="NDLSystemFont">NiDevImageQuantizer</span>
system. Any application using the <span class=
"NDLSystemFont">NiDevImageQuantizer</span> can call this method
with the appropriate arguments and generate reformatted pixel
data. Smart pointers are used due to the high frequency of
temporary pixel data that is created and destroyed in the course
of conversion. If the <span class=
"NDLSystemFont">spPixelData</span> is valid, it will be the
source for the conversion. The <span class=
"NDLSystemFont">kPrefs</span> object is used to help determine
which final format is used. If the <span class=
"NDLSystemFont">bMipMap</span> flag is <span class=
"NDLSystemFont">true</span>, then the converter will attempt to
generate a mip-map pyramid from the source data if it is a flat
object. If the <span class=
"NDLSystemFont">bUseAlphaIfAvailable</span> flag is false, then
the converter will remove all alpha from the pixel data. The
<span class="NDLSystemFont">kDestFormat</span> argument is the
intended final image format. The <span class=
"NDLSystemFont">uiSizeDivideBy</span> argument is the size by
which each dimension of the final pixel data should be divided.
The <span class="NDLSystemFont">ePlatform</span> variable is the
final platform this image is formatted for. This, more than any
other factor, determines the final pixel format. The <span class=
"NDLSystemFont">pcFilename</span> is used by the error buffer to
aid in logging errors. The <span class=
"NDLSystemFont">pcErrorBuffer</span> variable is used to store
problems that occurred in the processing of the pixel data. The
<span class="NDLSystemFont">uiErrorBufferLength</span> is used to
keep the error logging from overflowing the error log buffer.</p>

<p class="NDLRefMemberFunction">static char*
GetImageFormatString(<a href=
"../../Reference/NiMain/NiPixelFormat.htm">NiPixelFormat</a>
kFormat)</p>

<p class="NDLRefMemberDescription">This method returns a string
containing the pixel format in mask order.</p>

<p class="NDLRefMemberFunction">static unsigned int
CalcMaskSize(unsigned int uiMask)</p>

<p class="NDLRefMemberDescription">This method returns the number
of bits used in the pixel format mask.</p>

<p class="NDLRefMemberFunction">static bool ImageHasAlpha(const
<a href="../../Reference/NiMain/NiPixelData.htm">NiPixelData</a>*
pkPixelData)</p>

<p class="NDLRefMemberDescription">This method determines whether
the pixel data has an alpha channel. If it does, the entire image
is checked for any non-opaque pixels. If the pixel data contains
any alpha blended pixels, true is returned. If the pixel format
cannot be decoded, the method will return true to err on the side
of caution. This method has not been optimized for speed, though
it will return immediately upon find an non-opaque pixel.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">virtual bool
CanConvertPixelData(const <a href=
"../../Reference/NiMain/NiPixelFormat.htm">NiPixelFormat</a>&amp;
kSrcFmt, const <a href=
"../../Reference/NiMain/NiPixelFormat.htm">NiPixelFormat</a>&amp;
kDestFmt)</p>

<p class="NDLRefMemberDescription">Returns <span class=
"NDLSystemFont">true</span> if the image converter can convert
from the given source format to the given destination format, and
<span class="NDLSystemFont">false</span> otherwise.</p>

<p class="NDLRefMemberFunction">virtual <a href=
"../../Reference/NiMain/NiPixelData.htm">NiPixelData</a>*
ConvertPixelData(const <a href=
"../../Reference/NiMain/NiPixelData.htm">NiPixelData</a>&amp;
kSrc, const <a href=
"../../Reference/NiMain/NiPixelFormat.htm">NiPixelFormat</a>&amp;
kDestFmt, <a href=
"../../Reference/NiMain/NiPixelData.htm">NiPixelData</a>*
pkOptDest, bool bMipmap)</p>

<p class="NDLRefMemberDescription">Attempts to convert the given
source pixel data object into the desired destination format,
returning the result. If the mipmap flag is <span class=
"NDLSystemFont">true</span>, then the converter will attempt to
generate a mipmap pyramid from the source data if it is a flat
object. If the <span class="NDLSystemFont">pkOptDest</span>
argument points to a valid <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiPixelData.htm">NiPixelData</a></span>
object, then the converter attempts to convert the source data
into the given object if possible.</p>

<p class="NDLRefMemberFunction">virtual bool
ConvertPixelDataFormat(NiPixelData&amp; kDest, const <a href=
"../../Reference/NiMain/NiPixelData.htm">NiPixelData</a>&amp;
kSrc, int iMipmapLevel = 0)</p>

<p class="NDLRefMemberDescription">Attempts to convert the
specified mipmap level of the source object into the same mipmap
level of the destination object. Returns <span class=
"NDLSystemFont">true</span> on success and <span class=
"NDLSystemFont">false</span> on failure. If the specified mipmap
level index is 0, then all levels of the pyramid are
converted.</p>

<p class="NDLRefMemberFunction">virtual bool
IsAnAlphaSupportedMipmapGenerationFormat(const <a href=
"../../Reference/NiMain/NiPixelFormat.htm">NiPixelFormat</a>&amp;
kSrcFmt)</p>

<p class="NDLRefMemberDescription">This returns whether or not
this format supports alpha in its mipmaps.</p>

<p class="NDLRefMemberFunction">virtual bool
IsANonAlphaSupportedMipmapGenerationFormat(const <a href=
"../../Reference/NiMain/NiPixelFormat.htm">NiPixelFormat</a>&amp;
kSrcFmt)</p>

<p class="NDLRefMemberDescription">This returns whether or not
this format does not support alpha in its mipmaps.</p>

<p class="NDLRefMemberFunction">virtual <a href=
"../../Reference/NiMain/NiPixelData.htm">NiPixelDataPtr</a>
GenerateMipmapLevels(<a href=
"../../Reference/NiMain/NiPixelData.htm">NiPixelDataPtr</a>
spSrc, <a href=
"../../Reference/NiMain/NiPixelData.htm">NiPixelDataPtr</a>
spOptDest)</p>

<p class="NDLRefMemberDescription">Attempts to create a mipmap
pyramid for the input pixel data if it does not already have a
mipmap pyramid.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
