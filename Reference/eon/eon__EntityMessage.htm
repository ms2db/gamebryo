<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>eon::EntityMessage</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">eon::EntityMessage</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../efd/efd__StreamMessage.htm">efd::StreamMessage</a></span></p>


<p class="NDLRefHeaderFile">&lt;EntityMessage.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classeon_1_1_entity_message.gif" alt="Inheritance graph for eon::EntityMessage"/>
  <p class="FigureCaption">Inheritance graph for eon::EntityMessage</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">This message class is used to replicate entity state. </p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classeon_1_1_entity_message_1aca3c1bb6979e3e584616e10f4eb325c9"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetGroupIndex() const</p>
<p class="NDLRefMemberDescription">Accessors for the group index. Updates are per-replication group. </p>

<a name="classeon_1_1_entity_message_1aed7c4c391e2ce7ec13c5fff355e5a413"></a>
<p class="NDLRefMemberFunction">void  SetGroupIndex(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> groupIndex)</p>
<p class="NDLRefMemberDescription">Accessors for the group index. Updates are per-replication group. </p>

<a name="classeon_1_1_entity_message_1a9a21fbc8cc485c07701b81a6733e5997"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>&  GetModelName() const</p>
<p class="NDLRefMemberDescription">Accessors for the model name of this entity type. </p>

<a name="classeon_1_1_entity_message_1a5ea03b882c9b254662cbe686c32369b4"></a>
<p class="NDLRefMemberFunction">void  SetModelName(const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& modelName)</p>
<p class="NDLRefMemberDescription">Accessors for the group index. Updates are per-replication group. </p>

<a name="classeon_1_1_entity_message_1aa9ef7706ff2142bba7f07bdab4131a79"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a8023de784425c9ebbe8e3b03d8e7ee05">efd::SequenceNumber32</a></span>  GetSequenceNumber() const</p>
<p class="NDLRefMemberDescription">Accessors for the sequence number for this update. </p>
<p class="NDLRefMemberDetailedDescription">The sequence number prevents old messages from being applied. Messages can be old both due to using unordered qualities of service or due to updating the same property in multiple replication groups. </p>

<a name="classeon_1_1_entity_message_1af04d48a021e847098ad8f11e2caa43d1"></a>
<p class="NDLRefMemberFunction">void  SetSequenceNumber(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a8023de784425c9ebbe8e3b03d8e7ee05">efd::SequenceNumber32</a></span> sequenceNumber)</p>
<p class="NDLRefMemberDescription">Accessors for the group index. Updates are per-replication group. </p>

<a name="classeon_1_1_entity_message_1a305803b7d32d3c419e9eabe74159a9c9"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span>  GetCurrentCategory() const</p>
<p class="NDLRefMemberDescription">Accessors for the current replication category. </p>
<p class="NDLRefMemberDetailedDescription">This is the replication category being used by the entity for the given group at the time the message was sent. This can be different from the category this message arrived on in some cases. For example, late-joiner discoveries arrive on a different private channel and loss messages resulting from the producer changing categories arrive on the previously used category. </p>

<a name="classeon_1_1_entity_message_1a7ef5dc529b0128caac5159284d826455"></a>
<p class="NDLRefMemberFunction">void  SetCurrentCategory(<span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span> cat)</p>
<p class="NDLRefMemberDescription">Accessors for the group index. Updates are per-replication group. </p>

<a name="classeon_1_1_entity_message_1a770cfa66e023d744ae7cad2b956f2bfd"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetOwningProcessID() const</p>
<p class="NDLRefMemberDescription">Accessors for the owning process ID. </p>
<p class="NDLRefMemberDetailedDescription">This uniquely identifies the process that owns the entity in question. </p>

<a name="classeon_1_1_entity_message_1af57da6554a664b55da23a44388648b46"></a>
<p class="NDLRefMemberFunction">void  SetOwningProcessID(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> id)</p>
<p class="NDLRefMemberDescription">Accessors for the group index. Updates are per-replication group. </p>

<a name="classeon_1_1_entity_message_1a26acba8bd6c96d86a0987aeebeeeeed8"></a>
<p class="NDLRefMemberFunction">EntityMessage()</p>
<p class="NDLRefMemberDetailedDescription">Constructor </p>

<a name="classeon_1_1_entity_message_1abdc44ce3c5131b4c24a287adb7f9338e"></a>
<p class="NDLRefMemberFunction">virtual ~EntityMessage()</p>
<p class="NDLRefMemberDescription">virtual Destructor </p>

<a name="classeon_1_1_entity_message_1a0305dac5df166b234d313bc45306be9c"></a>
<p class="NDLRefMemberFunction">virtual void  Serialize(<span class="NDLSystemFont"><a href="../efd/efd__Archive.htm">efd::Archive</a></span>& io_ar)</p>
<p class="NDLRefMemberDescription">Serialize a polymorphic type to or from an Archive. </p>
<p class="NDLRefMemberDetailedDescription">This method must be overridden, but if your streamable object has no data the override can be an empty function. A typical implementation of this method will make one call to <span class="NDLSystemFont"><a href="../Namespaces/efd__Serializer.htm#namespaceefd_1_1_serializer_1a63e0b99047011bde53be44786ab9ee7b">efd::Serializer::SerializeObject</a></span> for each member of the class. If you are derived from another streamable class you should be sure to call to parent implementation of this method as well; it is recommended that the parent class be serialized first before adding the data for the derived class. If your class contains complex data such as STL-style contianers or pointers to allocated data then you can simplify the implementation of Serialize by using the templated helper functions in &lt;<span class="NDLSystemFont">efd/SerializeRoutines.h</span>&gt;; these can serialize even the most complex data structures with a single method call and will reduce the chance of making common mistakes (which could introduce security vulnerabilities if marshalling data from untrusted sources).</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">io_ar</span></td>
    <td>The Archive to serialize to or from. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classeon_1_1_entity_message_1a3d85a5e610ea771cf10001a669c20b73"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span>  GetEntityID() const</p>
<p class="NDLRefMemberDescription">Retrieve the ID of the entity streamed into this message. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td><span class="NDLSystemFont"><a href="../efd/EntityID.htm">EntityID</a></span> the ID for the entity this message is about. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classeon_1_1_entity_message_1afb0d5cadc7e66f7dc33882e5262510d1"></a>
<p class="NDLRefMemberFunction">void  SetEntityID(<span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span> eid)</p>
<p class="NDLRefMemberFunction"></p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
