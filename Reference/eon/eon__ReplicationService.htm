<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>eon::ReplicationService</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">eon::ReplicationService</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../efd/efd__ISystemService.htm">efd::ISystemService</a></span></p>


<p class="NDLRefHeaderFile">&lt;ReplicationService.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classeon_1_1_replication_service.gif" alt="Inheritance graph for eon::ReplicationService"/>
  <p class="FigureCaption">Inheritance graph for eon::ReplicationService</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">The implementation class that is the basis for a scheduler process. </p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classeon_1_1_replication_service_1a8b1ce728fbec52b822ce108c26c6b122"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="eon__ReplicatingEntity.htm">ReplicatingEntity</a></span>*  FindEntity(const <span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span>& id) const</p>
<p class="NDLRefMemberDescription">EntityManager methods that simply get passed on to the cache. </p>

<a name="classeon_1_1_replication_service_1a1ef5344ceac2e70baca69fa3e2238c87"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="eon__ReplicationProducerEntity.htm">ReplicationProducerEntity</a></span>*  FindProducerEntity(const <span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span>& id) const</p>
<p class="NDLRefMemberDescription">EntityManager methods that simply get passed on to the cache. </p>

<a name="classeon_1_1_replication_service_1a5d1d8b8b6d56455b05a4caa63d203d6e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="eon__ReplicationConsumerEntity.htm">ReplicationConsumerEntity</a></span>*  FindConsumerEntity(const <span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span>& id) const</p>
<p class="NDLRefMemberDescription">EntityManager methods that simply get passed on to the cache. </p>

<a name="classeon_1_1_replication_service_1a2735d93f27d36de9f35dc7c4a0fb600d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__hash_map.htm#classefd_1_1hash__map_1a8665e27606effa4e4e6753fa38804d6e">egf::EntityManager::EntityMap::const_iterator</a></span>  GetFirstEntityPos() const</p>
<p class="NDLRefMemberDescription">Like EntityManager::GetFirstEntityPos(), only it will only iterate reflected entities. </p>

<a name="classeon_1_1_replication_service_1a06f70d6a446f4a2c65cb22852b3ee02c"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetNextEntity(<br/><span class="NDLSystemFont"><a href="../efd/efd__hash_map.htm#classefd_1_1hash__map_1a8665e27606effa4e4e6753fa38804d6e">egf::EntityManager::EntityMap::const_iterator</a></span>& io_iter, <br/><span class="NDLSystemFont"><a href="eon__ReplicationConsumerEntity.htm">ReplicationConsumerEntity</a></span> *& o_pEntity) const</p>
<p class="NDLRefMemberDescription">Like EntityManager::GetNextEntity(), only it will only iterate reflected entities. </p>

<a name="classeon_1_1_replication_service_1ada54bb7c09e58439aa0743b3ae0dc616"></a>
<p class="NDLRefMemberFunction">ReplicationService()</p>
<p class="NDLRefMemberDetailedDescription">Constructor used to create an instance of a local cache </p>

<a name="classeon_1_1_replication_service_1a417c360553277c13b3ff9511d67beeea"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  AddEntity(<span class="NDLSystemFont"><a href="eon__ReplicationConsumerEntity.htm">ReplicationConsumerEntity</a></span>* pEntity)</p>
<p class="NDLRefMemberDescription">Add an entity to the local cache. </p>
<p class="NDLRefMemberDetailedDescription">This is a direct pass-through to EntityManager::AddEntity. </p>

<a name="classeon_1_1_replication_service_1abf526b846c8e21319c260282ebb5139b"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  RemoveEntity(<span class="NDLSystemFont"><a href="eon__ReplicationConsumerEntity.htm">ReplicationConsumerEntity</a></span>* pEntity)</p>
<p class="NDLRefMemberDescription">Remove an entity from the cache and clean up all data related to the entity (in both the <span class="NDLSystemFont">ReplicationService</span> and potentially the Scheduler). </p>
<p class="NDLRefMemberDetailedDescription">This is the only safe way to remove a replica from the system. </p>

<a name="classeon_1_1_replication_service_1ae73b9d8812fdffa0270a5c0aaae7946c"></a>
<p class="NDLRefMemberFunction">void  SubscribeReplicationChannel(<span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span> channelToAdd)</p>
<p class="NDLRefMemberDescription">Begin Monitoring of a replication channel Owned entities can request that certain replication channels be monitored if they need to know about other entities using that channel. </p>
<p class="NDLRefMemberDetailedDescription">To do so they call this method on the <span class="NDLSystemFont">ReplicationService</span> and in response the <span class="NDLSystemFont">ReplicationService</span> subscribes to Discover, Update, and Loss messages on the given category. This ensures that other entities that might live in a remote simulator will be replicated locally.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">: Subscription calls are reference counted so you can call this method multiple times so long as an equal number of calls are eventually made to the UnsubscribeReplicationChannel method.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">channelToAdd</span></td>
    <td>the replication channel </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classeon_1_1_replication_service_1addba20f6407891a319e6fcaebeab756e"></a>
<p class="NDLRefMemberFunction">void  UnsubscribeReplicationChannel(<span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span> channelToRemove)</p>
<p class="NDLRefMemberDescription">End monitoring of a replication channel Owned entities can request that certain replication channels be monitored if they need to know about other entities using that channel. </p>
<p class="NDLRefMemberDetailedDescription">When they no longer need to know about a channel or when that entity is being migrated or deleted it must call this method to remove the subscription to Discover, Update, and Loss messages. Every call to the SubscribeReplicationChannel must eventually have a matching call to this method in order to maintain proper reference counts on the subscriptions.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">channelToRemove</span></td>
    <td>the replication channel </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classeon_1_1_replication_service_1aa54661cdc2134ca2604d10ba5b06e1d2"></a>
<p class="NDLRefMemberFunction">void  ChangeReplicationGroupCategory(<br/><span class="NDLSystemFont"><a href="eon__ReplicationProducerEntity.htm">ReplicationProducerEntity</a></span>* pEntity, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> groupIndex, <br/><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span> oldCat, <br/><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span> newCat)</p>
<p class="NDLRefMemberDescription">Set or clear the replication channels produced by the given entity. </p>
<p class="NDLRefMemberDetailedDescription">When an entity produces into a replication channel it must notify the <span class="NDLSystemFont">ReplicationService</span>. In response the <span class="NDLSystemFont">ReplicationService</span> will perform the proper subscription updates so that all connected processes can receive the published replication messages. This also allows remote processes to request discovery messages using ProducerSend. It will also send a Loss message to the old category and a Discover message to the new category.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pEntity</span></td>
    <td>the Entity which is changing a replication channel </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">groupIndex</span></td>
    <td>the index of the Property Group whose replication channel is being set. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">oldCat</span></td>
    <td>The previous replication channel, or kCAT_INVALID if not yet joined. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">newCat</span></td>
    <td>The new replication channel, or kCAT_INVALID if only leaving a channel. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classeon_1_1_replication_service_1ac80eb3e25d40c42834aa1331ee7beee4"></a>
<p class="NDLRefMemberFunction">void  SetDirty(<br/><span class="NDLSystemFont"><a href="eon__ReplicationProducerEntity.htm">ReplicationProducerEntity</a></span>* pEntity, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> groupsMask)</p>
<p class="NDLRefMemberDescription">Called by <span class="NDLSystemFont"><a href="eon__ReplicationProducerEntity.htm#classeon_1_1_replication_producer_entity_1a2fbdb656f9bb76074fe76e26a966924e">ReplicationProducerEntity::SetDirty</a></span> to indicate that this entity needs to be considered for sending replication messages. </p>

<a name="classeon_1_1_replication_service_1a4611388d00bc0c007ff584a1d04474bd"></a>
<p class="NDLRefMemberFunction">void  ClearDirty(<br/><span class="NDLSystemFont"><a href="eon__ReplicationProducerEntity.htm">ReplicationProducerEntity</a></span>* pEntity, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> groupIndex)</p>
<p class="NDLRefMemberDescription">Clear the dirtiness of a specific group by index on the given entity. </p>

<a name="classeon_1_1_replication_service_1a8b52c769a4922e115908878237aad794"></a>
<p class="NDLRefMemberFunction">void  HandleEntityDiscovery(<br/>const <span class="NDLSystemFont"><a href="eon__EntityMessage.htm">EntityMessage</a></span>* pMessage, <br/><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span> targetChannel)</p>
<p class="NDLRefMemberDescription">Handle Discovery of replicated Entities. </p>

<a name="classeon_1_1_replication_service_1ac32cf89816dfbb9a305cce80b9d3303a"></a>
<p class="NDLRefMemberFunction">void  HandleEntityUpdate(<br/>const <span class="NDLSystemFont"><a href="eon__EntityMessage.htm">EntityMessage</a></span>* pMessage, <br/><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span> targetChannel)</p>
<p class="NDLRefMemberDescription">Handle Updates of replicated Entities. </p>

<a name="classeon_1_1_replication_service_1a16040a3b3719df5e5f9f926119e43e50"></a>
<p class="NDLRefMemberFunction">void  HandleEntityLoss(<br/>const <span class="NDLSystemFont"><a href="eon__EntityMessage.htm">EntityMessage</a></span>* pMessage, <br/><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span> targetChannel)</p>
<p class="NDLRefMemberDescription">Handle Loss of replicated Entities. </p>

<a name="classeon_1_1_replication_service_1a642e83bc23757d095bfad1392e41e25e"></a>
<p class="NDLRefMemberFunction">void  HandleViewBehaviorMsg(<br/>const <span class="NDLSystemFont"><a href="eon__ViewEventMessage.htm">eon::ViewEventMessage</a></span>* pMessage, <br/><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span> )</p>
<p class="NDLRefMemberDescription">Message handler for ViewEvent messages. </p>
<p class="NDLRefMemberDetailedDescription">This is used to enable the processing of view behavior invocation requests.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMessage</span></td>
    <td>pointer to the Entity Message class </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classeon_1_1_replication_service_1a6c7b85dad6a9c699a4db9b9b67ca44f7"></a>
<p class="NDLRefMemberFunction">void  HandleDiscoveryRequestMsg(<br/>const <span class="NDLSystemFont"><a href="eon__DiscoveryRequest.htm">eon::DiscoveryRequest</a></span>* pMsg, <br/><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span> targetChannel)</p>
<p class="NDLRefMemberFunction"></p>

<a name="classeon_1_1_replication_service_1aae72974bf86d6952791dfa07077fd44c"></a>
<p class="NDLRefMemberFunction">void  HandleOwnedEntityAdded(<br/>const <span class="NDLSystemFont"><a href="../egf/egf__EntityChangeMessage.htm">egf::EntityChangeMessage</a></span>* pMsg, <br/><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span> targetChannel)</p>
<p class="NDLRefMemberFunction"></p>

<a name="classeon_1_1_replication_service_1a9ba142aa5316f92a7ccc86749034532d"></a>
<p class="NDLRefMemberFunction">void  HandleOwnedEntityUpdated(<br/>const <span class="NDLSystemFont"><a href="../egf/egf__EntityChangeMessage.htm">egf::EntityChangeMessage</a></span>* pMsg, <br/><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span> targetChannel)</p>
<p class="NDLRefMemberFunction"></p>

<a name="classeon_1_1_replication_service_1a8dce914e83249d94b00723e17481db03"></a>
<p class="NDLRefMemberFunction">void  HandleOwnedEntityRemoved(<br/>const <span class="NDLSystemFont"><a href="../egf/egf__EntityChangeMessage.htm">egf::EntityChangeMessage</a></span>* pMsg, <br/><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span> targetChannel)</p>
<p class="NDLRefMemberFunction"></p>

<a name="classeon_1_1_replication_service_1a43b35396c8657604482942901f9b7c1f"></a>
<p class="NDLRefMemberFunction">void  HandleNetIDAssigned(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__AssignNetIDMessage.htm">efd::AssignNetIDMessage</a></span>* pAssignNetIDMessage, <br/><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span> targetChannel)</p>
<p class="NDLRefMemberFunction"></p>

<a name="classeon_1_1_replication_service_1aa77fcd65e4065365b83bbeb1ab39cf64"></a>
<p class="NDLRefMemberFunction">void  HandleAssetLoadResponse(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__AssetLoadResponse.htm">efd::AssetLoadResponse</a></span>* pMsg, <br/><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span> targetChannel)</p>
<p class="NDLRefMemberDescription">Message handler for AssetLoadResponse messages. </p>
<p class="NDLRefMemberDetailedDescription">When we discover a new entity, we use the EntityManager::CreateEntity to factory the entity in the background. This handler is called once the factory completes. </p>

<a name="classeon_1_1_replication_service_1a0de63ce2b3a65748c6678980e71a7005"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  ApplyReplicationMessages(<span class="NDLSystemFont"><a href="eon__ReplicationConsumerEntity.htm">ReplicationConsumerEntity</a></span>* pReplicant)</p>
<p class="NDLRefMemberDescription">Apply any pending discovery, update or loss messages to the specified entity. </p>
<p class="NDLRefMemberDetailedDescription">This is called after async entity creation is complete but before discovery is called. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pReplicant</span></td>
    <td>The entity to apply updates to. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the entity still exists after all messages have been applied. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classeon_1_1_replication_service_1a91009b9506fde3434951c42acbf181c1"></a>
<p class="NDLRefMemberFunction">void  QueueBehaviorForReplicatedEntity(<br/><span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span> entityID, <br/>const <span class="NDLSystemFont"><a href="../egf/egf__EventMessage.htm">egf::EventMessage</a></span>* pEvent)</p>
<p class="NDLRefMemberFunction"></p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
