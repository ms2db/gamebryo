<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>eon::ReplicationProducerEntity</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">eon::ReplicationProducerEntity</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="eon__ReplicatingEntity.htm">eon::ReplicatingEntity</a></span></p>


<p class="NDLRefHeaderFile">&lt;ReplicationProducerEntity.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classeon_1_1_replication_producer_entity.gif" alt="Inheritance graph for eon::ReplicationProducerEntity"/>
  <p class="FigureCaption">Inheritance graph for eon::ReplicationProducerEntity</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">An owned entity that can generate replication updates in response to it's properties changing. </p>
<p class="NDLNormal">This class is used for online applications that use the <span class="NDLSystemFont"><a href="eon__ReplicationService.htm">ReplicationService</a></span> and the <span class="NDLSystemFont"><a href="eon__OnlineEntityManager.htm">OnlineEntityManager</a></span>. </p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classeon_1_1_replication_producer_entity_1a28a2dfd9165e6beaed04096a0750f35b"></a>
<p class="NDLRefMemberFunction">virtual void  SetReplicationService(class <span class="NDLSystemFont"><a href="eon__ReplicationService.htm">eon::ReplicationService</a></span>* pRS)</p>
<p class="NDLRefMemberDescription">Sets the pointer to our active Replication Service. </p>
<p class="NDLRefMemberDetailedDescription">The <span class="NDLSystemFont"><a href="eon__ReplicationService.htm">ReplicationService</a></span> itself will call this method as needed. This replication service will be used to send replication updates for Producer entities and will help with channel subscriptions and view behavior events for Consumer entities.</p>
<p class="NDLRefMemberDetailedDescription">This override will also generate initial discovery request messages in the event that any SetReplicationCategory calls where made prior to setting the <span class="NDLSystemFont"><a href="eon__ReplicationService.htm">ReplicationService</a></span>.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pRS</span></td>
    <td>pointer to a <span class="NDLSystemFont"><a href="eon__ReplicationService.htm">ReplicationService</a></span> instance </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classeon_1_1_replication_producer_entity_1a1a0161512211745828245e90559ebe66"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  SetReplicationCategory(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> groupIndex, <br/><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span> cat)</p>
<p class="NDLRefMemberDescription">Set the category to which replication messages for the given group should be sent. </p>
<p class="NDLRefMemberDetailedDescription">If necessary, a Loss message will be sent to the previous replication channel and a Discovery message will be sent to the new category. This method can be called at any time including before a newly created entity has been registered with the Scheduler. </p>

<a name="classeon_1_1_replication_producer_entity_1a2602d0fdf743f6a9e255d41c2026899a"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span>  GenerateDiscovery(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> i_groupIndex, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a3f46b06120f84d47e33a25e39034ed8e">efd::QualityOfService</a></span>& i_qos, <br/><span class="NDLSystemFont"><a href="../efd/efd__ServiceManager.htm">efd::ServiceManager</a></span>* i_pServiceManager, <br/><span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">EntityMessagePtr</a></span>& o_spEntityMessage, <br/><span class="NDLSystemFont">bool</span> clearReplicationDirty)</p>
<p class="NDLRefMemberDescription">Output this entity to a data stream. </p>
<p class="NDLRefMemberDetailedDescription">Only the entity ID, flat model ID, plus the non-const properties of the entity which match the groupIndex are actually streamed. All const model values, plus property data that has not changed from the model will NOT be streamed out.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_groupIndex</span></td>
    <td>Which replication group is being used </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_qos</span></td>
    <td>The QualityOfService to send the update message on </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_pServiceManager</span></td>
    <td>a pointer to the ServiceManager. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">o_spEntityMessage</span></td>
    <td>A reference to a SmartPointer where the correct type of message will be allocated and populated. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">clearReplicationDirty</span></td>
    <td>If true dirtiness of this entity will be cleared after generating the discovery message. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classeon_1_1_replication_producer_entity_1a83f4632d73bb6a33b45af14018733656"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span>  GenerateUpdate(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> groupIndex, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a3f46b06120f84d47e33a25e39034ed8e">efd::QualityOfService</a></span>& qos, <br/><span class="NDLSystemFont"><a href="../efd/efd__ServiceManager.htm">efd::ServiceManager</a></span>* pServiceManager, <br/><span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">EntityMessagePtr</a></span>& spEntityMessage)</p>
<p class="NDLRefMemberDescription">Output this entity and dirty properties to a data stream. </p>
<p class="NDLRefMemberDetailedDescription">Only the entity ID, flat model ID, plus the DIRTY non-const parts of the entity are actually streamed. All const model values, plus property data that IS NOT DIRTY will NOT be streamed out. </p>
<p class="NDLRefMemberDetailedDescription">: this is a version of the stream used for updating entities (as opposed to sending discovery with full embodiment)</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">groupIndex</span></td>
    <td>Which replication group is being used </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">qos</span></td>
    <td>The QualityOfService to send the update message on </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pServiceManager</span></td>
    <td>a pointer to the ServiceManager. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">spEntityMessage</span></td>
    <td>A reference to a SmartPointer where the correct type of message will be allocated and populated. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classeon_1_1_replication_producer_entity_1acff69ad726ca5280dc47a2caad7df343"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span>  GenerateLoss(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> groupIndex, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a3f46b06120f84d47e33a25e39034ed8e">efd::QualityOfService</a></span>& qos, <br/><span class="NDLSystemFont"><a href="../efd/efd__ServiceManager.htm">efd::ServiceManager</a></span>* pServiceManager, <br/><span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">EntityMessagePtr</a></span>& spEntityMessage, <br/><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span> newCategory)</p>
<p class="NDLRefMemberDescription">Output this entity ID to a data stream. </p>
<p class="NDLRefMemberDetailedDescription">Only the entity ID is sent (no model or properties)! </p>
<p class="NDLRefMemberDetailedDescription">: this is a version of the entity stream used for the "loss" message (only need entity ID)</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">groupIndex</span></td>
    <td>Which replication group is being used </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">qos</span></td>
    <td>The QualityOfService to send the update message on </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pServiceManager</span></td>
    <td>a pointer to the ServiceManager. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">spEntityMessage</span></td>
    <td>A reference to a SmartPointer where the correct type of message will be allocated and populated. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">newCategory</span></td>
    <td>The new replication group category. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classeon_1_1_replication_producer_entity_1a18dbb0b9326bfb020eac54cb7ac19263"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a8023de784425c9ebbe8e3b03d8e7ee05">efd::SequenceNumber32</a></span>  GetSequenceNumber() const</p>
<p class="NDLRefMemberDescription">This is the outgoing update sequence number. </p>
<p class="NDLRefMemberDetailedDescription">This number is incremented whenever a replication message is sent for this entity on any replication group. The number is used to ensure that old replication messages never override newer updates in the event that the replication messages arrive out of order. Messages can arrive out of order as a result of sending replication messages on an unordered quality of service or as result of using the same property in multiple replication groups. </p>

<a name="classeon_1_1_replication_producer_entity_1ad85e54726d9991bd5b77a682d441bdcf"></a>
<p class="NDLRefMemberFunction">void  IncrementSequenceNumber()</p>
<p class="NDLRefMemberDescription">Called during replication every time a replication message is sent out. </p>
<p class="NDLRefMemberDetailedDescription">This should not be called at any other time. </p>

<a name="classeon_1_1_replication_producer_entity_1a4b12aede0fdb000295874a8f22330239"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="eon__IReplicationGroupPolicyData.htm">IReplicationGroupPolicyData</a></span>*  GetReplicationGroupPolicyData(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> groupIndex)</p>
<p class="NDLRefMemberDescription">Get the <span class="NDLSystemFont"><a href="eon__IReplicationGroupPolicyData.htm">IReplicationGroupPolicyData</a></span> object for the specified group index for this entity. </p>
<p class="NDLRefMemberDetailedDescription">If there is no policy data set for the specified groupIndex this will return NULL.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">groupIndex</span></td>
    <td>Index of the property group to get the policy of. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The <span class="NDLSystemFont"><a href="eon__IReplicationGroupPolicyData.htm">IReplicationGroupPolicyData</a></span> for the specified groupIndex. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classeon_1_1_replication_producer_entity_1a3ef4e52876e29ebdeeaa5969ca272a3e"></a>
<p class="NDLRefMemberFunction">void  SetReplicationGroupPolicyData(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> groupIndex, <br/><span class="NDLSystemFont"><a href="eon__IReplicationGroupPolicyData.htm">IReplicationGroupPolicyData</a></span>* pPolicyData)</p>
<p class="NDLRefMemberDescription">Set the <span class="NDLSystemFont"><a href="eon__IReplicationGroupPolicyData.htm">IReplicationGroupPolicyData</a></span> object for the specified group index of this entity. </p>
<p class="NDLRefMemberDetailedDescription">Once set the entity is responsible for deleting the policy data. You can delete previously set data by calling this method again with a NULL pPolicyData pointer.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">groupIndex</span></td>
    <td>Index of the property group to set the policy of </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pPolicyData</span></td>
    <td>The policy data to assign to the specified group index </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classeon_1_1_replication_producer_entity_1adbf9cb3fd3c930cd232c304b90f056b6"></a>
<p class="NDLRefMemberFunction">void  WriteHeaderData(<br/><span class="NDLSystemFont"><a href="eon__EntityMessage.htm">EntityMessage</a></span>* io_pEntityMessage, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> i_groupIndex)</p>
<p class="NDLRefMemberDescription">Write data describing the current entity into an <span class="NDLSystemFont"><a href="eon__EntityMessage.htm">EntityMessage</a></span> instance. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">io_pEntityMessage</span></td>
    <td>Pointer to a message to be filled in </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_groupIndex</span></td>
    <td>The replication group to describe </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classeon_1_1_replication_producer_entity_1a168a6f85e25b65035674423ddd326a56"></a>
<p class="NDLRefMemberFunction">size_t  StreamChangedProperties(<br/><span class="NDLSystemFont"><a href="../efd/efd__Archive.htm">efd::Archive</a></span>& io_ar, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> i_groupIndex, <br/><span class="NDLSystemFont">bool</span> i_clearReplicationDirty = true)</p>
<p class="NDLRefMemberDescription">Stream the values for all properties that replicate to the given group and have changed from the default value into the provided Archive. </p>
<p class="NDLRefMemberDetailedDescription">In the process, the dirtiness of those properties in the specified group is optionally cleared. The data is serialized in a format compatible with the <span class="NDLSystemFont"><a href="eon__ReplicationConsumerEntity.htm#classeon_1_1_replication_consumer_entity_1aff46f57d9bdd7eab1d96f88dbe6d6182">ReplicationConsumerEntity::UpdatePropertiesFromStream</a></span> method.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">io_ar</span></td>
    <td>An Archive into which the properties are serialized </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_groupIndex</span></td>
    <td>The replication group to stream </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_clearReplicationDirty</span></td>
    <td>If true, dirtiness of the properties is cleared for the specified group when each property is streamed. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classeon_1_1_replication_producer_entity_1a422edfba5bb86170353988915a746ad0"></a>
<p class="NDLRefMemberFunction">size_t  StreamDirtyProperties(<br/><span class="NDLSystemFont"><a href="../efd/efd__Archive.htm">efd::Archive</a></span>& io_ar, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> i_groupIndex, <br/><span class="NDLSystemFont">bool</span> i_clearReplicationDirty = true)</p>
<p class="NDLRefMemberDescription">Stream the values for all currently dirty properties that replicate to the given group into the provided data stream. </p>
<p class="NDLRefMemberDetailedDescription">In the process, the dirtiness of those properties in the specified group is optionally cleared. The data is streamed in a format compatible with the <span class="NDLSystemFont"><a href="eon__ReplicationConsumerEntity.htm#classeon_1_1_replication_consumer_entity_1aff46f57d9bdd7eab1d96f88dbe6d6182">ReplicationConsumerEntity::UpdatePropertiesFromStream</a></span> method.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">io_ar</span></td>
    <td>An Archive into which the properties are serialized </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_groupIndex</span></td>
    <td>The replication group to stream </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_clearReplicationDirty</span></td>
    <td>If true, dirtiness of the properties is cleared for the specified group when each property is streamed. </td>
</tr>

        </tbody>
    </table>
</div>


 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
