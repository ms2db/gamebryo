<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>eon::ReplicationConsumerEntity</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">eon::ReplicationConsumerEntity</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="eon__ReplicatingEntity.htm">eon::ReplicatingEntity</a></span></p>


<p class="NDLRefHeaderFile">&lt;ReplicationConsumerEntity.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classeon_1_1_replication_consumer_entity.gif" alt="Inheritance graph for eon::ReplicationConsumerEntity"/>
  <p class="FigureCaption">Inheritance graph for eon::ReplicationConsumerEntity</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">Class used for replicated entities. </p>
<p class="NDLNormal">These are created by the <span class="NDLSystemFont"><a href="eon__ReplicationService.htm">ReplicationService</a></span> in response to entity discovery messages. They have extra members and methods related to keeping track of conditions like what category channels are in use and when the entity can be lost. </p>

<a name="friend_members"></a>
<p class="NDLRefHead1">Friend Members</p>


<a name="classeon_1_1_replication_consumer_entity_1a2eed873d2ea3c093cde54225cbd711ec"></a>
<p class="NDLRefMemberFunction">friend class  eon::OnlineEntityManager()</p>
<p class="NDLRefMemberFunction"></p>

<a name="classeon_1_1_replication_consumer_entity_1a100c353b37f695e276474beb11ce2f6a"></a>
<p class="NDLRefMemberFunction">friend class  ReplicationService()</p>
<p class="NDLRefMemberFunction"></p>
<a name="public_types"></a>
<p class="NDLRefHead1">Public Types</p>
<a name="classeon_1_1_replication_consumer_entity_1a913912d2668f4f61827cb1d792a1c56a"></a>
<p class=NDLRefHead2>eon::ReplicationConsumerEntity::RepConLifeCycles</p>


<p class="NDLRefMemberDescription">Lifecycle values for use in _OnLifecycleEvent and related methods. </p>


<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">lifecycle_OnDiscovery</span></td>
    <td>Called after replica entity has been created. This is the consumer entity equivalent to lifecycle_OnCreate. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">lifecycle_OnReplicaAssetsLoaded</span></td>
    <td>Called when a replica entity finishes loading assets. This is the consumer entity equivalent to lifecycle_OnAssetsLoaded. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">lifecycle_OnFinalLoss</span></td>
    <td>Called when a replica entity is being destroyed. This is the consumer entity equivalent to lifecycle_OnDestroy. It happens only when we leave our last replication group, not on every replication group loss we receive. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">MAX_REPCON_LIFECYCLE</span></td>
    <td>&nbsp;</td>
</tr>

  </tbody>
</table>
</div>


<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classeon_1_1_replication_consumer_entity_1aff46f57d9bdd7eab1d96f88dbe6d6182"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  UpdatePropertiesFromStream(const <span class="NDLSystemFont"><a href="eon__EntityMessage.htm">EntityMessage</a></span>* pEntityMessage)</p>
<p class="NDLRefMemberDescription">Update entity properties from the <span class="NDLSystemFont"><a href="eon__EntityMessage.htm">EntityMessage</a></span> data stream. </p>
<p class="NDLRefMemberDetailedDescription">The replication group and sequence number in the stream will be used to ensure the data in the stream is up to date. This can be used for streams generated by GenerateDiscovery, GenerateUpdate, and GenerateFullUpdate. Note that only the dynamic (changed) property values are actually input from the stream, leaving const values and those data properties that are unchanged from the model still pointing to the model default values.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pEntityMessage</span></td>
    <td>A message containing the stream to read the entity from</td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>bool True if stream was successfully run </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classeon_1_1_replication_consumer_entity_1a80977b01aaf79b14654f605143837cd3"></a>
<p class="NDLRefMemberFunction">virtual void  RemoveReplicationGroupCategory(<span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span> oldCategory)</p>
<p class="NDLRefMemberDescription">Called when the current process is no longer consuming the given category that this entity was receiving replication updates on. </p>
<p class="NDLRefMemberDetailedDescription">We clear the category from any and all replication groups that were using that category. </p>

<a name="classeon_1_1_replication_consumer_entity_1ab8d68445d685aa51496013975cccf50c"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  ReplicationGroupsEmpty()</p>
<p class="NDLRefMemberDescription">Query if this entity is still consuming any replication categories. </p>
<p class="NDLRefMemberDetailedDescription">If this entity is no longer consuming any categories then the entity will be lost. </p>

<a name="classeon_1_1_replication_consumer_entity_1a8a9efd4e5516d8d6b109c2b729345c3b"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  SetReplicationCategory(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> groupIndex, <br/><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span> cat)</p>
<p class="NDLRefMemberDescription">Called when this entity received a discover or update message for a given replication group. </p>
<p class="NDLRefMemberDetailedDescription">We store the category on which that update arrived so that we can know to loose this entity should we unsubscribe to that category later. </p>

<a name="classeon_1_1_replication_consumer_entity_1a91adc35aa7c292bb125daef5661c9685"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsCurrentSequence(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> groupIndex, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a8023de784425c9ebbe8e3b03d8e7ee05">efd::SequenceNumber32</a></span> sequence)</p>
<p class="NDLRefMemberDescription">Determine if the given sequence number is greater than the last seen sequence number for the specified replication group. </p>

<a name="classeon_1_1_replication_consumer_entity_1a2dee561e9d47b365d5ddda79370ac3e8"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetOwningProcessID() const</p>
<p class="NDLRefMemberDescription">Get the unique process ID of the process which owns the original copy of this entity. </p>
<p class="NDLRefMemberDetailedDescription">This value is set as soon as the first discovery message is applied to the entity, which is after async entity creation but before the discovery lifecycle. </p>

<a name="classeon_1_1_replication_consumer_entity_1ac0c4cd53862227611167ccd037ad0ca8"></a>
<p class="NDLRefMemberFunction">virtual void  HandleMessage(<br/>const <span class="NDLSystemFont"><a href="../egf/egf__EventMessage.htm">egf::EventMessage</a></span>* pMsg, <br/><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span> targetChannel)</p>
<p class="NDLRefMemberDescription">Behavior invocation requests are delivered here. </p>
<p class="NDLRefMemberDetailedDescription">We override this handler from the Entity class so that regular Events will be ignored by replicated entities. (We only want ViewEvent messages to be processed)</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMsg</span></td>
    <td>Pointer to the message that needs to be handled. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">targetChannel</span></td>
    <td>Channel that the message arrived on. </td>
</tr>

        </tbody>
    </table>
</div>


 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
