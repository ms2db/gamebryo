<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiEnvironment</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiEnvironment</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../NiMain/NiNode.htm">NiNode</a></span></p>


<p class="NDLRefHeaderFile">&lt;NiEnvironment.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/class_ni_environment.gif" alt="Inheritance graph for NiEnvironment"/>
  <p class="FigureCaption">Inheritance graph for NiEnvironment</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">The NiEnvionment class is used to encapsulate all the settings related to specifying an environment that a scene belongs in. </p>
<p class="NDLNormal">The framework that is provided by the <span class="NDLSystemFont">NiEnvironment</span> library will allow sky, fog, clouds, and general scene lighting parameters to be specified in one place, whilst allowing that configuration to be easily modified, animated, saved/loaded, and captured. </p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="class_ni_environment_1a767965c52abb21f126cb032fa58a2e93"></a>
<p class="NDLRefMemberFunction">NiEnvironment()</p>
<p class="NDLRefMemberDescription">Constructor. </p>

<a name="class_ni_environment_1ac98bcb81c059ef5c5e5d5077e7676a0a"></a>
<p class="NDLRefMemberFunction">~NiEnvironment()</p>
<p class="NDLRefMemberDescription">Destructor. </p>

<a name="class_ni_environment_1a9d71653fbcd810fc6a88b60c4849221b"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiAtmosphere.htm">NiAtmosphere</a></span>*  CreateAtmosphere()</p>
<p class="NDLRefMemberDescription">Create a new atmosphere object for the environment to use in atmospheric coloring calculations. </p>
<p class="NDLRefMemberDetailedDescription">The created object is automatically assigned to this environment object.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>The created atmosphere object (ready for configuration). </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_environment_1a7d84b7fa2b24b8a59b3508a356c2103a"></a>
<p class="NDLRefMemberFunction">void  SetAtmosphere(<span class="NDLSystemFont"><a href="NiAtmosphere.htm">NiAtmosphere</a></span>* pkAtmosphere)</p>
<p class="NDLRefMemberDescription">Sets the atmosphere object used by the objects in this Environment. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pkAtmosphere</span></td>
    <td>The atmosphere object to associate with the environment </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_environment_1acba7138845c9e157b864fabcbaaaaae8"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiAtmosphere.htm">NiAtmosphere</a></span>*  GetAtmosphere()</p>
<p class="NDLRefMemberDescription">Gets the atmosphere object being used by this environment. </p>

<a name="class_ni_environment_1ad94d29eef169206d64c151de6f03e2ee"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiSkyDome.htm">NiSkyDome</a></span>*  CreateSkyDome()</p>
<p class="NDLRefMemberDescription">Creates a new SkyDome object and sets it as the sky object for this environment. </p>
<p class="NDLRefMemberDetailedDescription">A <span class="NDLSystemFont"><a href="NiSkyDome.htm">NiSkyDome</a></span> is a procedurally generated hemisphere mesh. It has useful configuration parameters that allow the distribution of the vertices to be adjusted.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>The created NISkyDome ready for configuration. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_environment_1a49b99f441df1a64459299002b503e182"></a>
<p class="NDLRefMemberFunction">void  SetSky(<span class="NDLSystemFont"><a href="NiSky.htm">NiSky</a></span>* pkSky)</p>
<p class="NDLRefMemberDescription">Set the sky object to use when rendering the environment. </p>
<p class="NDLRefMemberDetailedDescription">This object represents the geometry object that the sky will be rendered upon. (This could be a skybox, or a skydome etc).</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pkSky</span></td>
    <td>The sky object to render the sky with. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_environment_1a39bb891472ef79c8061cd3e6901a2e5b"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiSky.htm">NiSky</a></span>*  GetSky()</p>
<p class="NDLRefMemberDescription">Get the sky object that is used to render the sky. </p>

<a name="class_ni_environment_1af65c40e7e3d2a9259c89549c9205128d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../NiMain/NiDirectionalLight.htm">NiDirectionalLight</a></span>*  CreateSun()</p>
<p class="NDLRefMemberDescription">Create a directonal light for use as the sun. </p>
<p class="NDLRefMemberDetailedDescription">The created sun will be automatically applied to this environment object. </p>

<a name="class_ni_environment_1a5aaaa4419da32811607305b4540d164b"></a>
<p class="NDLRefMemberFunction">void  SetSun(<span class="NDLSystemFont"><a href="../NiMain/NiDirectionalLight.htm">NiDirectionalLight</a></span>* pkSun)</p>
<p class="NDLRefMemberDescription">Assign a specific directonal light to be used as a sun by this environment object. </p>
<p class="NDLRefMemberDetailedDescription">Generally this light will also need to be applied to the root node of the scene. This light is used by the atmosphere shaders to calculate where the sun is in the sky. It also allows any animation of the sun to be automated through the Environment object. </p>

<a name="class_ni_environment_1a904c145f06a84ad09b964704a14a74d0"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../NiMain/NiDirectionalLight.htm">NiDirectionalLight</a></span>*  GetSun()</p>
<p class="NDLRefMemberDescription">Get the directional light that is being used as the sun by this environment object. </p>

<a name="class_ni_environment_1aceb9c0895f93d9cf3dc17e7915e771e4"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../NiMain/NiFogProperty.htm">NiFogProperty</a></span>*  CreateFogProperty()</p>
<p class="NDLRefMemberDescription">Create a new fog property to be used by the environment system. </p>
<p class="NDLRefMemberDetailedDescription">This object will automatically be assigned to this object. </p>

<a name="class_ni_environment_1a7e270c25f0c12234afd1aac8d94a2c5a"></a>
<p class="NDLRefMemberFunction">void  SetFogProperty(<span class="NDLSystemFont"><a href="../NiMain/NiFogProperty.htm">NiFogProperty</a></span>* pkFogProperty)</p>
<p class="NDLRefMemberDescription">Set the fog property to use when rendering the environment. </p>
<p class="NDLRefMemberDetailedDescription">Generally this fog property should also be assigned to the entire scene. </p>

<a name="class_ni_environment_1afc628936058edd427d04aca20ba6894f"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../NiMain/NiFogProperty.htm">NiFogProperty</a></span>*  GetFogProperty()</p>
<p class="NDLRefMemberDescription">Get the fog property in use by this environment. </p>

<a name="class_ni_environment_1a0d773bd1531f169e35dbbc9bb011deb5"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../NiMain/NiRenderClick.htm">NiRenderClick</a></span>*  CreateSkyRenderClick(<span class="NDLSystemFont"><a href="../NiMain/NiCamera.htm">NiCamera</a></span>* pkCamera)</p>
<p class="NDLRefMemberDescription">Create a render click capable of rendering the entire sky/environment using the given camera. </p>
<p class="NDLRefMemberDetailedDescription">The created render click will generally need to be rendered before the main scene render click, so that the sky is rendered behind the scene. The main significance of this render click is that it automatically ignores the position of the camera in space, and will automatically adjust the fog color, and renderer background color if those settings have been selected.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pkCamera</span></td>
    <td>The main scene camera. The directon of this camera will be used to render the sky. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_environment_1a8db38c2cc8706d7198d51d5ddcbef44c"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiCubeMapRenderStep.htm">NiCubeMapRenderStep</a></span>*  CreateSkyBoxCubeMapRenderStep(<br/><span class="NDLSystemFont"><a href="../NiMain/NiRenderedCubeMap.htm">NiRenderedCubeMap</a></span>* pkDestinationCubeMap, <br/><span class="NDLSystemFont"><a href="../NiMain/NiRenderer.htm">NiRenderer</a></span>* pkRenderer)</p>
<p class="NDLRefMemberDescription">Create a render step capable of rendering the entire environment to a cube map. </p>
<p class="NDLRefMemberDetailedDescription">This cubemap may then be used by the scene as a skybox with high performance. The cubemap may also be extracted to disk to allow use in other tools to generate a scene.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pkDestinationCubeMap</span></td>
    <td>The cube map to render the environment to. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkRenderer</span></td>
    <td>The renderer to use when rendering the map. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_environment_1a05efc26e7e83bb9341b0e0deca5f6e50"></a>
<p class="NDLRefMemberFunction">void  SetFogColor(<span class="NDLSystemFont"><a href="../NiMain/NiColorA.htm">NiColorA</a></span> kColor)</p>
<p class="NDLRefMemberDescription">Set the color of the fog being used by this environment. </p>

<a name="class_ni_environment_1ab19a755eb41cb4574ad997b180595df2"></a>
<p class="NDLRefMemberFunction">void  SetAutoCalcFogColor(<span class="NDLSystemFont">bool</span> bEnable)</p>
<p class="NDLRefMemberDescription">Set the value of the flag controlling the automatic calculation of the fog color for the environment (and even the entire scene) using the atmospheric color of the horizon in the camera's direction. </p>
<p class="NDLRefMemberDetailedDescription">This flag is only used by a render click that has been created using CreateSkyRenderClick. </p>

<a name="class_ni_environment_1a2975e0a2d83eaa9340f810f44ed529e8"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetAutoCalcFogColor()</p>
<p class="NDLRefMemberDescription">Get the value of the flag controlling the automatic calculation of the fog color for the environment. </p>

<a name="class_ni_environment_1a06ab4ebc32ce7b38aa174f4f05e2198b"></a>
<p class="NDLRefMemberFunction">void  SetAutoSetBackgroundColor(<span class="NDLSystemFont">bool</span> bEnable)</p>
<p class="NDLRefMemberDescription">Set the value of the flag controlling the automatic setting of the renderer background color. </p>
<p class="NDLRefMemberDetailedDescription">This flag is only used by a render click that has been created using CreateSkyRenderClick. </p>

<a name="class_ni_environment_1a5f17e6aab86006dff79c65eaca1f5eb8"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetAutoSetBackgroundColor()</p>
<p class="NDLRefMemberDescription">Get the value of the flag controlling the automatic setting of the renderer background color. </p>

<a name="class_ni_environment_1a78ee84cf5dc8721793d40b17bd014ecc"></a>
<p class="NDLRefMemberFunction">void  SetSunElevationAngle(float fAngle)</p>
<p class="NDLRefMemberDescription">Sets the angle of the sun on the horizontal plane (angle between the sun and (0,0,1)). </p>

<a name="class_ni_environment_1ab6f38eaef493f393d527c7682b4016cf"></a>
<p class="NDLRefMemberFunction">float  GetSunElevationAngle()</p>
<p class="NDLRefMemberDescription">Gets the angle of the sun on the horizontal plane (angle between the sun and (0,0,1)). </p>

<a name="class_ni_environment_1af40b20507d9f2aae5dfbaaa0b9a461be"></a>
<p class="NDLRefMemberFunction">void  SetSunAzimuthAngle(float fAngle)</p>
<p class="NDLRefMemberDescription">Sets the angle of the sun on the vertical plane (angle between the sun and (0,1,0)). </p>

<a name="class_ni_environment_1af16a772a76cdbd9403a8eb81641d48ae"></a>
<p class="NDLRefMemberFunction">float  GetSunAzimuthAngle()</p>
<p class="NDLRefMemberDescription">Gets the angle of the sun on the vertical plane (angle between the sun and (0,1,0)). </p>

<a name="class_ni_environment_1a9ad246a00a7edd602d9aa5b2d2fe3421"></a>
<p class="NDLRefMemberFunction">void  SetUseSunAngles(<span class="NDLSystemFont">bool</span> bUseAngles)</p>
<p class="NDLRefMemberDescription">Sets whether the sun should be using the angles for rotation. </p>

<a name="class_ni_environment_1a76cbe744aadc63839f57e7d78d3879d8"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetUseSunAngles()</p>
<p class="NDLRefMemberDescription">Gets whether the sun should be using the angles for rotation. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
