<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiViewMath</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiViewMath</p>

<p class="NDLRefHeaderFile">&lt;NiViewMath.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>The <span class="NDLSystemFont">NiViewMath</span> class
contains a collection of static helper functions. Some of the
functions are intended to help with changing mouse or gamepad
input into transformations that can be immediately applied to a
camera to represent a basic view operation. Other functions are
provided to perform transformations based off of input from the
point of view of a camera.</p>

<p>When considering what axes these operations take place
relative to, it is important to note that Gamebryo cameras look
down their local x-axis, with the local z-axis being horizontal
in the camera's frustum, and the y-axis being vertical.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">static <a href=
"../../Reference/NiMain/NiPoint3.htm">NiPoint3</a> Pan(const
float fDX, const float fDY, const <a href=
"../../Reference/NiMain/NiPoint3.htm">NiPoint3</a>&amp;
kInputPoint, const <a href=
"../../Reference/NiMain/NiMatrix3.htm">NiMatrix3</a>&amp;
kInputRotation)</p>

<p class="NDLRefMemberDescription">Returns a point that results
from starting at the <span class=
"NDLSystemFont">kInputPoint</span> and moving <span class=
"NDLSystemFont">fDX</span> in the negative z direction and
<span class="NDLSystemFont">fDY</span> in the y direction, with
the directions relative to the rotation passed into the function
in the <span class="NDLSystemFont">kInputRotation</span>
argument.</p>

<p class="NDLRefMemberDescription">This function is useful if you
supply a camera's position and rotation into the <span class=
"NDLSystemFont">kInputPoint</span> and <span class=
"NDLSystemFont">kInputRotation</span> arguments, and mouse
movement deltas into the <span class="NDLSystemFont">fDX</span>
and <span class="NDLSystemFont">fDY</span> arguments. The
resulting point will be the camera's new location after panning
in screen space.</p>

<p class="NDLRefMemberFunction">static <a href=
"../../Reference/NiMain/NiMatrix3.htm">NiMatrix3</a> Look(const
float fDX, const float fDY, const <a href=
"../../Reference/NiMain/NiMatrix3.htm">NiMatrix3</a>&amp;
kInputRotation, const <a href=
"../../Reference/NiMain/NiPoint3.htm">NiPoint3</a>&amp; kUp)</p>

<p class="NDLRefMemberDescription">Returns a matrix that results
from starting with a rotation matrix of <span class=
"NDLSystemFont">kInputRotation</span> and "looking" <span class=
"NDLSystemFont">fDX</span> units in the z direction, and
<span class="NDLSystemFont">fDY</span> units in the y direction,
with the directions relative to the <span class=
"NDLSystemFont">kInputRotation</span> argument. Finally, the
resulting look vector is converted to a rotation matrix that
obeys the <span class="NDLSystemFont">kUp</span> vector
argument.</p>

<p class="NDLRefMemberDescription">This function is useful if you
supply a camera's rotation and mouse movement deltas into the
arguments. The resulting rotation will be the camera's new
rotation after looking up and to the right in screen space.</p>

<p class="NDLRefMemberFunction">static void Orbit(const float
fDX, const float fDY, const <a href=
"../../Reference/NiMain/NiPoint3.htm">NiPoint3</a>&amp;
kInputPoint, const <a href=
"../../Reference/NiMain/NiMatrix3.htm">NiMatrix3</a>&amp;
kInputRotation, const <a href=
"../../Reference/NiMain/NiPoint3.htm">NiPoint3</a>&amp; kCenter,
const <a href=
"../../Reference/NiMain/NiPoint3.htm">NiPoint3</a>&amp; kUp,
<a href="../../Reference/NiMain/NiPoint3.htm">NiPoint3</a>&amp;
kReturnPoint, <a href=
"../../Reference/NiMain/NiMatrix3.htm">NiMatrix3</a>&amp;
kReturnRotation)</p>

<p class="NDLRefMemberDescription">You supply an object's
location and rotation with <span class=
"NDLSystemFont">kInputPoint</span> and <span class=
"NDLSystemFont">kInputRotation</span>, respectively, and you get
a new position and rotation of the object as if it was orbiting
around the <span class="NDLSystemFont">kCenter</span> point. The
new rotation will obey the <span class="NDLSystemFont">kUp</span>
vector argument. The <span class="NDLSystemFont">fDX</span> and
<span class="NDLSystemFont">fDY</span> arguments tell how far
perpendicular and towards the provided up-axis to go. The return
values are stored in the <span class=
"NDLSystemFont">kReturnPoint</span> and <span class=
"NDLSystemFont">kReturnRotation</span> function arguments.</p>

<p class="NDLRefMemberFunction">static <a href=
"../../Reference/NiMain/NiPoint3.htm">NiPoint3</a> Dolly(const
float fDZ, const <a href=
"../../Reference/NiMain/NiPoint3.htm">NiPoint3</a>&amp;
kInputPoint, const <a href=
"../../Reference/NiMain/NiMatrix3.htm">NiMatrix3</a>&amp;
kInputRotation)</p>

<p class="NDLRefMemberDescription">Returns a point that results
from starting at the <span class=
"NDLSystemFont">kInputPoint</span> and moving <span class=
"NDLSystemFont">fDZ</span> units in the positive x direction
relative to the rotation matrix provided in the <span class=
"NDLSystemFont">kInputRotation</span> argument.</p>

<p class="NDLRefMemberFunction">static <a href=
"../../Reference/NiMain/NiFrustum.htm">NiFrustum</a>
OrthoZoom(const float fDZ, const <a href=
"../../Reference/NiMain/NiFrustum.htm">NiFrustum</a>&amp;
kInputFrustum)</p>

<p class="NDLRefMemberDescription">Returns a new <span class=
"NDLSystemFont">NiFrustum</span> that has the same parameters as
<span class="NDLSystemFont">kInputFrustum</span>, but with the
right, left, top, and bottom parameters reduced by the same
amount proportional to the <span class="NDLSystemFont">fDZ</span>
argument.</p>

<p class="NDLRefMemberFunction">static <a href=
"../../Reference/NiMain/NiMatrix3.htm">NiMatrix3</a> LookAt(const
<a href="../../Reference/NiMain/NiPoint3.htm">NiPoint3</a>&amp;
kFocus, const <a href=
"../../Reference/NiMain/NiPoint3.htm">NiPoint3</a>&amp; kSource,
const <a href=
"../../Reference/NiMain/NiPoint3.htm">NiPoint3</a>&amp; kUp)</p>

<p class="NDLRefMemberDescription">Returns a rotation matrix that
is constructed using the vector from the <span class=
"NDLSystemFont">kSource</span> point to the <span class=
"NDLSystemFont">kFocus</span> point that obeys the <span class=
"NDLSystemFont">kUp</span> vector.</p>

<p class="NDLRefMemberFunction">static <a href=
"../../Reference/NiMain/NiPoint3.htm">NiPoint3</a> PanTo(const
<a href="../../Reference/NiMain/NiBound.htm">NiBound</a>&amp;
kFocus, const <a href=
"../../Reference/NiMain/NiMatrix3.htm">NiMatrix3</a>&amp;
kCurrentRotation, const <a href=
"../../Reference/NiMain/NiFrustum.htm">NiFrustum</a>&amp;
kFrustum)</p>

<p class="NDLRefMemberDescription">Returns a point to which you
could move a camera such that it could see the entire
<span class="NDLSystemFont">kFocus</span> bound in its frustum if
the cameras frustum was equal to the argument <span class=
"NDLSystemFont">kFrustum</span> and was rotated with the
<span class="NDLSystemFont">kCurrentRotation</span> matrix.</p>

<p class="NDLRefMemberFunction">static void MouseToRay(const
float fX, const float fY, const unsigned int uiAppWidth, const
unsigned int uiAppHeight, const <a href=
"../../Reference/NiMain/NiCamera.htm">NiCamera</a>* pkCamera,
<a href="../../Reference/NiMain/NiPoint3.htm">NiPoint3</a>&amp;
kOrigin, <a href=
"../../Reference/NiMain/NiPoint3.htm">NiPoint3</a>&amp;
kDirection)</p>

<p class="NDLRefMemberDescription">This function is intended to
turn a mouse cursor location in pixels into a world space ray.
The <span class="NDLSystemFont">fX</span> and <span class=
"NDLSystemFont">fY</span> arguments are the pixel location of the
cursor, coming from the top left of the camera's view frustum.
The <span class="NDLSystemFont">uiAppWidth</span> and
<span class="NDLSystemFont">uiAppHeight</span> arguments provide
the pixel width and pixel height of that the frustum covers. The
<span class="NDLSystemFont">pkCamera</span> argument provides the
camera from which to cast the ray. The <span class=
"NDLSystemFont">kOrigin</span> and <span class=
"NDLSystemFont">kDirection</span> arguments store the return
values for the resulting ray.</p>

<p class="NDLRefMemberFunction">static <a href=
"../../Reference/NiMain/NiPoint3.htm">NiPoint3</a>
TranslateOnAxis(const <a href=
"../../Reference/NiMain/NiPoint3.htm">NiPoint3</a>&amp;
kStartingPoint, const <a href=
"../../Reference/NiMain/NiPoint3.htm">NiPoint3</a>&amp; kAxis,
const <a href=
"../../Reference/NiMain/NiPoint3.htm">NiPoint3</a>&amp;
kInputOrigin, const <a href=
"../../Reference/NiMain/NiPoint3.htm">NiPoint3</a>&amp;
kInputDirection)</p>

<p class="NDLRefMemberDescription">Returns a point on the line
defined by the point <span class=
"NDLSystemFont">kStartingPoint</span> and vector <span class=
"NDLSystemFont">kAxis</span> that is closest to the line defined
by the point <span class="NDLSystemFont">kInputOrigin</span> and
vector <span class="NDLSystemFont">kInputDirection</span>.</p>

<p class="NDLRefMemberFunction">static <a href=
"../../Reference/NiMain/NiPoint3.htm">NiPoint3</a>
TranslateOnPlane(const <a href=
"../../Reference/NiMain/NiPoint3.htm">NiPoint3</a>&amp;
kStartingPoint, const <a href=
"../../Reference/NiMain/NiPoint3.htm">NiPoint3</a>&amp; kNormal,
const <a href=
"../../Reference/NiMain/NiPoint3.htm">NiPoint3</a>&amp;
kInputOrigin, const <a href=
"../../Reference/NiMain/NiPoint3.htm">NiPoint3</a>&amp;
kInputDirection)</p>

<p class="NDLRefMemberDescription">Returns a point on the plane
defined by the point <span class=
"NDLSystemFont">kStartingPoint</span> and the normal vector
<span class="NDLSystemFont">kNormal</span> that is the
intersection with the line defined by the point <span class=
"NDLSystemFont">kInputOrigin</span> and vector <span class=
"NDLSystemFont">kInputDirection</span>.</p>

<p class="NDLRefMemberFunction">static float
RotateAboutAxis(const <a href=
"../../Reference/NiMain/NiPoint3.htm">NiPoint3</a>&amp;
kStartingPoint, const <a href=
"../../Reference/NiMain/NiPoint3.htm">NiPoint3</a>&amp; kAxis,
const <a href=
"../../Reference/NiMain/NiPoint3.htm">NiPoint3</a>&amp; kTangent,
const <a href=
"../../Reference/NiMain/NiPoint3.htm">NiPoint3</a>&amp;
kBiTangent, const <a href=
"../../Reference/NiMain/NiPoint3.htm">NiPoint3</a>&amp;
kInputOrigin, const <a href=
"../../Reference/NiMain/NiPoint3.htm">NiPoint3</a>&amp;
kInputDirection)</p>

<p class="NDLRefMemberDescription">Returns a radian indicating an
amount of rotation about the <span class=
"NDLSystemFont">kAxis</span> axis. The <span class=
"NDLSystemFont">kStartingPoint</span> is the center point of the
rotation, and the <span class="NDLSystemFont">kAxis</span>
argument is the rotation axis. The rotation is expressed in terms
of number of radians around the axis starting from the
<span class="NDLSystemFont">kTangent</span> direction and moving
towards the <span class="NDLSystemFont">kBiTangent</span>
direction. Both the tangent and bitangent arguments should be
perpendicular to each other and the rotation axis.</p>

<p class="NDLRefMemberDescription">The <span class=
"NDLSystemFont">kInputOrigin</span> and <span class=
"NDLSystemFont">kInputDirection</span> arguments specify a line.
The specified line is projected onto the plane defined by the
starting point and rotation axis. The returned rotation is the
rotation of the resulting vector from the tangent argument.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
