<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Third, Consider OBB Trees for Special Circumstances</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>


<h1>Third, Consider OBB Trees for Special Circumstances</h1>

<p>Generally, it is best to question whether you need to 
 do collision detection involving triangles, or even OBB (oriented bounding 
 box) trees, since both are so expensive. This expense relates directly 
 to the combinatorics involved for high-quality models with large polygon 
 counts.</p>

<p>For example, if you're performing collision detection 
 between two objects as triangles, where each object consists of 10000 
 triangles, then there are 100 million potential collision detection comparisons 
 to be made for those two objects alone for a single collision frame. OBB 
 trees improve on the combinatoric problem, but are still much more expensive 
 to use than ABVs, for example, due to the shear volume of triangle data 
 in such a case.</p>

<p>Furthermore, on a system where a state-of-the-art graphics 
 card can handle rendering of high-volume triangle data very well, collision 
 detection is still done on the host processor (CPU), and can become a 
 bottleneck if the number of collision detection comparisons is high.</p>

<p>There's a temptation to use OBB trees or triangles because 
 they're easy to set up. However, ease of modeling should be weighed very 
 carefully relative to the frame rate requirements of your application. 
 </p>

<p>Even though OBB trees are more expensive than ABVs for 
 collision detection, as a rule, there are certain specific circumstances 
 when collision detection using OBB (oriented bounding box) trees may be 
 a reasonable choice. OBB trees are most effective when the triangle count 
 for an object is relatively small and when you're dealing with rigid bodies, 
 such as a ball or a bullet.</p>

<p>However, OBB trees are not suitable for a 10000-triangle 
 character, since triangle-triangle collision detection is very expensive, 
 and some collisions may not be appropriate to consider (e.g., character 
 hands may never touch the ground). In addition, an articulated character 
 would need its hierarchy updated whenever it is in motion so that the geometry 
 used for collision (which may be different than geometry cached for rendering) 
 is transformed to the correct positions for collision detection. When 
 hardware skinning is used, tracking such positional changes for triangle 
 data on the host processor can be problematic. For these reasons, OBB 
 trees should not be used to represent characters, and OBB tree objects 
 should not be mixed with characters.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
