<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Algorithmic Approach to Collision</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<h1>Algorithmic Approach of the Collision System</h1>

<p>The core of the Gamebryo collision detection system is a
 library of algorithms that can calculate intersections between geometric
 primitives of many varieties. These primitives may be defined, either
 explicitly, such as by the vertices of polygons, or parametrically, by values 
 defining bounding volume shapes.</p>
 
<p>There are two main conceptual and algorithmic methods at
 work in the underlying geometry libraries:  distance-based and
 algebraic-based intersection calculations.  Each method is applicable in
 certain circumstances.  If there is a choice of algorithm, typically the most
 computationally efficient method is chosen for a particular intersection
 calculation.</p>

<p>One algorithmic method uses distance calculations to 
 determine the attributes of a collision.&nbsp; In this method, intersections 
 are identified by calculating the distance between two objects.&nbsp; 
 For example, the distance between two spheres that define the bounding 
 volumes of two scene objects can determine an intersection.&nbsp; If the 
 distance between the spheres' centers is greater than their combined radii, 
 they are not intersecting.&nbsp;</p>
 
<p>The other method relies on algebraic tests to detect
 collisions.&nbsp;  Algebraic tests leverage knowledge of different geometric
 details of the objects being tested to determine if they intersect.&nbsp;  As
 an example, does a line intersect a triangle?&nbsp;  In many cases the
 algebraic route is taken because it is faster computationally.&nbsp;  For
 instance, in oriented bounding box testing, it is quicker to determine an
 intersection between boxes by separating axis tests rather than by
 calculating the distance between the boxes.</p>

<p>The collision system can detect intersections among
 arbitrary combinations of geometric object primitives and their bounding
 volumes.  Bounding volumes are three-dimensional shapes that are intended to
 enclose the actual geometry of an object.  With Gamebryo, the default
 bounding volumes,
 <span class="NDLSystemFont"><a href="../../Reference/NiMain/NiBound.htm">NiBound</a></span>, 
 which are generated by the system, are spheres that enclose the entire
 sub-tree of geometry at the current node.  These
 <a href="Bounding_Spheres.htm">bounding spheres</a> are used by the collision
 detection system for quick non-intersection determination.  The collision
 detection system also supports various
 <a href="Alternate_Bounding_Volumes.htm">alternate bounding volumes</a>
 (ABVs), which may be used for tighter object fitting, better collision
 performance and for overriding the default bounding or collision behavior.
 Triangle primitives are the lowest level building block used in collision
 detection and are usually more expensive to test than the bounding
 volumes.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
