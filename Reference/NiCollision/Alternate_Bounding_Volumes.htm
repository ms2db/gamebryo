<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Alternate Bounding Volumes</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Alternate Bounding Volumes</h1>

<p>Alternate bounding volumes (ABVs) are
three-dimensional volumes that can be used in place of Gamebryo's
default <a href="../../Reference/NiMain/NiBound.htm"><span class=
"NDLSystemFont">NiBound</span></a> objects for collision
detection operations. The intention with ABVs is that they may be
used to give a scene object's actual geometric data a much
tighter fit than is possible with the automatically generated and
often loose fitting <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiBound.htm">NiBound</a></span> objects.
ABVs can boost performance by substituting simple parametrically
defined shapes for large numbers of individual triangles for the
collision detection process. Because artists have knowledge of
the size and shape of their scene objects, they can provide tight
fitting bounding volumes of the appropriate type at modeling
time.</p>

<p>When used in conjunction with propagation
flags, ABVs can be very powerful. In cases where the bounding
volume fit is tight, the single level of testing represented by
top-level ABVs can be accurate enough for many situations. This
approach can greatly increase collision detection performance. 
All ABV types can interact with all other ABV types.</p>

<p>ABVs may be established for any <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMain/NiAVObject.htm">NiAVObject</a></span>-derived
class that has <span class="NDLSystemFont"><a href=
"NiCollisionData.htm">NiCollisionData</a></span> attached. This
step can be accomplished programmatically by using the
<span class="NDLSystemFont"><a href=
"NiCollisionData.htm">NiCollisionData</a></span><span class=
"NDLSystemFont">::SetModelSpaceABV</span> method. The
<span class="NDLSystemFont"><a href=
"NiCollisionData.htm">NiCollisionData</a></span> object assumes
ownership of the ABV that it is passed. Therefore, the
application must dynamically create ABVs, pass them to the
<span class="NDLSystemFont"><a href=
"NiCollisionData.htm">NiCollisionData</a></span>, and not attempt
to explicitly delete the memory itself.</p>

<p>Gamebryo also supports the generation of
ABVs from proxy geometry using the <a href=
"../../Reference/Tool_Plug_ins/Create_ABV.htm"><span class=
"NDLSystemFont">CreateABV</span></a> plugin. By using the same
<a href=
"../../Reference/Tool_Plug_ins/Create_ABV.htm"><span class=
"NDLSystemFont">CreateABV</span></a> plugin, ABVs (along with all
other types of collision objects) may be exported directly out of
the <a href="../../Art/Max/Max_Plug_in_Introduction.htm">Max</a>
or <a href=
"../../Art/Maya/Maya_Plug_in_Introduction.htm">Maya</a> art
packages. For Max, see the section on <a href=
"../../Art/Max/Collision_Detection_and_3ds_Max.htm">Collision
Detection and 3ds Max</a>. For Maya, see the section on <a href=
"../../Art/Maya/Create_Collision_Attributes.htm">Creating
Collision Attributes</a>.</p>

<p>The various types of ABVs that are supported
are listed below:</p>

<h2>NiSphereBV</h2>

<p><span class="NDLSystemFont"><a href=
"NiSphereBV.htm">NiSphereBV</a></span> objects are identical to
the engine's default automatically-generated <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMain/NiBound.htm">NiBound</a></span> objects
in operation and definition with two exceptions. One exception is
that they enable an application to specify a potentially tighter
fitting sphere that will only be used for collision testing.
Also, an <span class="NDLSystemFont"><a href=
"NiSphereBV.htm">NiSphereBV</a></span> may be tested against
other types of <a href="Alternate_Bounding_Volumes.htm">ABVs</a>,
whereas in the case of <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiBound.htm">NiBound</a></span> objects,
the "other" bounding volume must first be converted to an
<span class="NDLSystemFont"><a href=
"NiSphereBV.htm">NiSphereBV</a></span>. An <span class="NDLSystemFont"><a href=
"NiSphereBV.htm">NiSphereBV</a></span> is specified by a point
and a radius.</p>

<h2>NiCapsuleBV</h2>

<p>A capsule is defined as all points
equidistant from a line segment. <span class=
"NDLSystemFont"><a href="NiCapsuleBV.htm">NiCapsuleBV</a></span>
objects can be useful for providing tight fitting bounds around
body parts of characters, entire characters, or any object where
one dimension is larger than the other two. An <span class=
"NDLSystemFont"><a href="NiCapsuleBV.htm">NiCapsuleBV</a></span>
is specified by a center, segment axis, an axis extent, and a
radius.</p>

<h2>NiBoxBV</h2>

<p><span class="NDLSystemFont"><a href=
"NiBoxBV.htm">NiBoxBV</a></span> objects are oriented orthogonal,
6-faced bounding volumes. An <span class="NDLSystemFont"><a href=
"NiBoxBV.htm">NiBoxBV</a></span> is specified by a center, three
orthogonal axes, and three axis extents from the center to the
faces of the box. <span class="NDLSystemFont"><a href=
"NiBoxBV.htm">NiBoxBV</a></span> objects may be used for objects
such as walls or stationary angular geometry.</p>

<h2>NiHalfSpaceBV</h2>

<p><span class="NDLSystemFont"><a href=
"NiHalfSpaceBV.htm">NiHalfSpaceBV</a></span> objects are
determined by a planar boundary. The <span class=
"NDLSystemFont"><a href=
"NiHalfSpaceBV.htm">NiHalfSpaceBV</a></span> is assumed to be on
the side of the plane to which the plane's normal points. An
<span class="NDLSystemFont"><a href=
"NiHalfSpaceBV.htm">NiHalfSpaceBV</a></span> is specified by an
appropriate plane.</p>

<h2>NiUnionBV</h2>

<p><span class="NDLSystemFont"><a href=
"NiUnionBV.htm">NiUnionBV</a></span> objects can contain more
than one of the primitive ABV types. The effective ABV that is
used in intersection testing is the union of all the contained
volumes. This technique makes it possible to create uniquely
shaped bounding volumes not otherwise possible. For example, "L"
shaped volumes are possible by creating a union with two
appropriately positioned <span class="NDLSystemFont"><a href=
"NiBoxBV.htm">NiBoxBV</a></span> instances. An <span class=
"NDLSystemFont"><a href="NiUnionBV.htm">NiUnionBV</a></span> is
specified by adding newly constructed ABVs of the other types to
it. Unions are not well suited for representing dynamic objects
such as characters.</p>

<h2>ABV and Character Hierarchies</h2>

<p>When adding a character that has an ABV
hierarchy, it should be added to an <span class=
"NDLSystemFont"><a href=
"NiCollisionGroup.htm">NiCollisionGroup</a></span> in order to
prevent propagation from occurring, resulting in collision
testing with the character skin. Typically (in Max), the node
that is to be added to the <a href=
"NiCollisionGroup.htm"><span class=
"NDLSystemFont">NiCollisionGroup</span></a> is the "<span class=
"NDLSystemFont">Bip01 Pelvis</span>" node.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
