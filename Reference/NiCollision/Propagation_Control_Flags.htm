<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Propagation Control Flags</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>


<h1>Propagation Control Flags</h1>

<p>Propagation control for traversal of the scene graph 
 is controlled by the enumerated settings in the <span class="NDLSystemFont"><a 
 href="NiCollisionData.htm">NiCollisionData</a></span> 
 class of the <span class="NDLSystemFont">NiCollision</span> 
 collision detection system. The propagation control settings provide applications 
 with a mechanism to precisely direct operations of the collision detection 
 system as it searches for intersections. These values are set using the 
 function <span class="NDLSystemFont">NiCollisionData::SetPropagationMode()</span>. 
 The single parameter that is accepted by the function is an <span class="NDLSystemFont"><a 
 href="NiCollisionData.htm">NiCollisionData</a></span> 
 scoped enumerated type, called <span class="NDLSystemFont">PropagationMode</span>.</p>

<p>Note that there is no mechanism to propagate the flags 
 themselves down a tree during traversal. For example, you should not set 
 a propagation control flag on the collision data of an <span class="NDLSystemFont"><a href="../../Reference/NiMain/NiNode.htm">NiNode</a></span> 
 with the expectation that all of its children will use the same flag value. 
 Instead, all children must have their flag set explicitly for the desired 
 behavior. Also, it should be noted that propagation will continue down 
 a scene graph in the absence of collision data on an <span class="NDLSystemFont"><a 
 href="../../Reference/NiMain/NiNode.htm">NiNode</a>.</span></p>

<p>The different values and their meanings for the <span 
 class="NDLSystemFont">PropagationMode</span> flag are 
 as follows:</p>

<h3>PROPAGATE_NEVER</h3>

<p>The <span class="NDLSystemFont">PROPAGATE_NEVER</span> 
 flag is the most efficient propagation flag and the most commonly used.&nbsp; 
 Setting the propagation mode to <span class="NDLSystemFont">PROPAGATE_NEVER</span> 
 indicates that regardless of the collision results, propagation is never 
 to occur. Testing is terminated without continuing deeper in the tree 
 to check for intersections at any children. This behavior implies that 
 your collision method is an acceptable approximation for the geometry 
 it encloses. Also, as with <span class="NDLSystemFont">PROPAGATE_ALWAYS</span>, 
 the <span class="NDLSystemFont">PROPAGATE_NEVER</span> is an unconditional 
 propagation mode, that will trigger a callback if the object intersects 
 with another unconditional propagation mode.</p>

<h3>PROPAGATE_ON_SUCCESS</h3>

<p>The <span class="NDLSystemFont">PROPAGATE_ON_SUCCESS</span> 
 flag indicates that the propagation down the scene graph should occur, 
 upon a successful collision detection. In this sense, it behaves as a 
 collision filter. When objects use this sort of propagation mode, it is 
 because the volume encapsulates an entire subset of collidable objects. 
 For example, a bounding capsule might enclose a complicated character. 
 If some object collides with the capsule, we want collision to continue 
 propagation for further testing (arms, legs, etc.), but you do not want 
 a callback unless it actually collides with a desired part of the character. 
 For objects with collision data using this propagation mode, no callbacks 
 will be called by default. This behavior is normally what is desired. 
 (See <span class="NDLSystemFont"><a href="NiCollisionData.htm">NiCollisionData</a></span> 
 for details on how to change this behavior, if desired.)</p>

<h3>PROPAGATE_ALWAYS</h3>

<p>The <span class="NDLSystemFont">PROPAGATE_ALWAYS</span> 
 flag indicates that propagation down the scene graph should occur whether 
 there was a collision or not. This behavior would be useful, for example, 
 on a limb of a character. First, collision might be tested with the upper 
 arm, then the forearm, and finally the hand. Even though there is a geometric 
 hierarchy, it may not apply for collision detection. This flag is useful 
 in such cases. When an object with a propagation mode of this type intersects 
 with another object with a non-conditional propagation type, a callback 
 will be issued.</p>

<p>(The <span class="NDLSystemFont">PROPAGATE_ON_FAILURE</span> 
 flag has almost never been used by customers and has been deprecated. 
 It indicated that the propagation down the scene graph should only occur 
 upon a failure of collision detection.)</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
