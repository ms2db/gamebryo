<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiPick::Record</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiPick::Record</p>

<p class="NDLRefParentage">: public <a href=
"../../Reference/NiSystem/NiMemObject.htm"><span>NiMemObject</span></a></p>

<p class="NDLRefHeaderFile">&lt;NiPick.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiPick::Record</span> is a nested
class of <span class="NDLSystemFont">NiPick</span> that stores
the results of picking operations for use by the application. 
Since it is a nested class, it is in the scope of <span class=
"NDLSystemFont">NiPick</span> and must be qualified.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">Record(NiAVObject* pkObject)</p>

<p class="NDLRefMemberDescription">Constructor that creates an
<span class="NDLSystemFont">NiPick::Record</span> object for the
specified <span class="NDLSystemFont">NiAVObject</span>.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">NiAVObject* GetAVObject()</p>

<p class="NDLRefMemberFunction">NiNode* GetParent()</p>

<p class="NDLRefMemberDescription">Gets the object and its
parent.</p>

<p class="NDLRefMemberFunction">const NiPoint3&amp;
GetIntersection() const</p>

<p class="NDLRefMemberFunction">void SetIntersection(const
NiPoint3&amp; kIntersect)</p>

<p class="NDLRefMemberDescription">Set and get the intersection
point on the triangle.</p>

<p class="NDLRefMemberFunction">const float GetDistance()
const</p>

<p class="NDLRefMemberFunction">void SetDistance()</p>

<p class="NDLRefMemberDescription">Gets the 'distance' of the
triangle intersection point from the ray origin. This quantity
is the parameter value along the ray at the point of intersection
and is not a true distance from ray origin to point of
intersection unless the ray direction is a unit length
vector.</p>

<p class="NDLRefMemberFunction">unsigned int GetTriangleIndex()
const</p>

<p class="NDLRefMemberFunction">void SetTriangleIndex(unsigned
int uiIndex)</p>

<p class="NDLRefMemberDescription">Set and get the index of the
intersected triangle. Note that this index is relative to the
submesh that was selected.</p>

<p class="NDLRefMemberFunction">void GetVertexIndices(unsigned
int&amp; uiIndex0, unsigned int&amp; uiIndex1, unsigned int&amp;
uiIndex2) const</p>

<p class="NDLRefMemberFunction">void SetVertexIndices(unsigned
int uiIndex0, unsigned int uiIndex1, unsigned int uiIndex2)</p>

<p class="NDLRefMemberDescription">Set and get the indices of the
vertices of the intersected triangle.</p>

<p class="NDLRefMemberFunction">unsigned int GetSubmeshIndex()
const</p>

<p class="NDLRefMemberFunction">void SetSubmeshIndex(unsigned int
uiIndex)</p>

<p class="NDLRefMemberDescription">Set and get the index of the
submesh that was intersected..</p>

<p class="NDLRefMemberFunction">bool GetIndicesValid() const</p>

<p class="NDLRefMemberDescription">Determine whether or not this
pick record contains picked triangles or picked proxy
information.</p>

<p class="NDLRefMemberFunction">void SetInvalidIndices()</p>

<p class="NDLRefMemberDescription">Set that this pick record uses
picked proxy information. SetVertexIndices, SetTriangleIndex, and
SetSubmeshIndex are required to set to a triangle-based pick.</p>

<p class="NDLRefMemberFunction">const NiPoint2&amp; GetTexture()
const</p>

<p class="NDLRefMemberFunction">void SetTexture(const
NiPoint2&amp; kTexture)</p>

<p class="NDLRefMemberDescription">Set and get the texture
coordinates at the point of intersection. The coordinates are
valid only when the 'return texture' flag is set. An application
may use the 'get' routine, but the picking system uses the 'set'
routine internally.</p>

<p class="NDLRefMemberFunction">const NiPoint3&amp; GetNormal()
const</p>

<p class="NDLRefMemberFunction">void SetNormal(const
NiPoint3&amp; kNormal)</p>

<p class="NDLRefMemberDescription">Set and get the normal vector
at the point of intersection. The normal is valid only when the
'return normal' flag is set. An application may use the 'get'
routine, but the picking system uses the 'set' routine
internally.</p>

<p class="NDLRefMemberFunction">const NiColorA&amp; GetColor()
const</p>

<p class="NDLRefMemberFunction">void SetColor(const NiColorA&amp;
kColor)</p>

<p class="NDLRefMemberDescription">Set and get the vertex color
at the point of intersection. The color is valid only when the
'return color' flag is set. An application may use the 'get'
routine, but the picking system uses the 'set' routine
internally.</p>

<p class="NDLRefHead1">Notes</p>

<p class="NDLRefHead2">Valid Members and NiPick</p>

<p>During picking operations, if the pick mode
is set to <span class=
"NDLSystemFont">NiPick::BOUND_INTERSECT</span>, then only the
object and key members of <span class=
"NDLSystemFont">NiPick::Record</span> are valid. If the pick
mode is set to <span class=
"NDLSystemFont">NiPick::TRIANGLE_INTERSECT</span>, then all
members of <span class="NDLSystemFont">NiPick::Record</span>
could be valid, but the flags set in the <span class=
"NDLSystemFont">NiPick</span> object, which generates the
NiPick::Record, will determine whether the texture, normal, and
color members contain valid data.</p>

<h2>IMPORTANT:</h2>

<p>Triangle level picking in only possible IF
the Gamebryo triangle geometry is available. Unless you pass the
proper flags, a call to <a href=
"../../Reference/NiMain/NiRenderer.htm#Geometry_Precaching_Functions">
PrecacheMesh</a>() will discard the Gamebryo triangle geometry
after packing the vertex information for the video hardware.
These flags may be set in the application or may be set in the
art packages (<a href=
"../../Art/Max/Precache_Custom_Attributes.htm">3DS Max</a>,
<a href="../../Art/Maya/Geometry_Attributes.htm">Maya</a>) where
the NIF files are created.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
