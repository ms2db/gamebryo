<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiCollisionGroup</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>


<p class="NDLRefHeadClassTitle">NiCollisionGroup</p>

<p class="NDLRefParentage">: public <a href="../../Reference/NiSystem/NiMemObject.htm"><span>NiMemObject</span></a></p>

<p class="NDLRefHeaderFile">&lt;NiCollisionGroup.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>This class is the entry point into the dynamic collision 
 detection system.&nbsp; The class allows an application to group together 
 objects that will interact.&nbsp; It also allows the application to either 
 test if objects in the group intersect or find the actual intersections 
 of objects in the group.&nbsp; Information stored in the collision group 
 is propagated through the scene graph while testing/finding collisions 
 and is also used by <span class="NDLSystemFont"><a href="../../Reference/NiMesh/NiMesh.htm">NiMesh</a></span> 
 objects for creating and traversing oriented bounding box trees.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiCollisionGroup()</p>

<p class="NDLRefMemberDescription">Default constructor initializes arrays 
 to store information about collision objects.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefHead2">Addition and Removal of Objects</p>

<p class="NDLRefMemberFunction">void AddCollider(<a HREF="../../Reference/NiMain/NiAVObject.htm">NiAVObject</a>* 
 pkObject, bool bCreateCollisionData = true, int iMaxDepth = -1, int&nbsp;iBinSize&nbsp;=&nbsp;1)</p>

<p class="NDLRefMemberFunction">void RemoveCollider(<a HREF="../../Reference/NiMain/NiAVObject.htm">NiAVObject</a>* 
 pkObject)</p>

<p class="NDLRefMemberDescription">Moving and/or animating objects that might 
 strike collidees are added and removed from the collision group via these 
 member functions.&nbsp; By default, collision data will be created, however, 
 if the scene graph is known to contain all the collision data needed, 
 this value should be set to <span class="NDLSystemFont">false</span>.&nbsp; 
 Typically, an object with an <a href="Alternate_Bounding_Volumes.htm">ABV</a> 
 exported out of one of the Gamebryo exporters will contain all the necessary 
 data for collision detection. </p>

<p class="NDLRefMemberDescription">Note that the addition of trees of colliders 
 is supported and encouraged, as long as all of the objects within the 
 tree should be treated as colliders, self-intersections are not important 
 and the individual colliders tend to remain near each other (such as is 
 the case with an animated character). </p>

<p class="NDLRefMemberDescription">If the <a href="Oriented_Bounding_Boxes.htm">OBB</a> 
 system will be used, the maximum depth parameter specifies at what level 
 in the oriented bounding box tree the collision testing should terminate.&nbsp; 
 The bin size parameter specifies how many triangles should occur per leaf 
 node in the oriented bounding box tree.</p>

<p class="NDLRefMemberFunction">void AddCollidee(<a HREF="../../Reference/NiMain/NiAVObject.htm">NiAVObject</a>* 
 pkObject, bool bCreateCollisionData = true, int iMaxDepth = -1, int&nbsp;iBinSize&nbsp;=&nbsp;1)</p>

<p class="NDLRefMemberFunction">void RemoveCollidee(<a HREF="../../Reference/NiMain/NiAVObject.htm">NiAVObject</a>* 
 pkObject)</p>

<p class="NDLRefMemberDescription">Stationary objects such as walls in a 
 room are added to the collision group via this member function.&nbsp; 
 Also, animating objects that will never strike other collidees (such as 
 trees blowing in the wind, or objects that move via a pre-defined script) 
 should be added as well.&nbsp; Adding trees of objects as collidees is 
 especially beneficial here, as collision testing will be culled if higher-level 
 bounds find no collision is possible.</p>

<p class="NDLRefMemberDescription">If the <a href="Oriented_Bounding_Boxes.htm">OBB</a> 
 system is used, the maximum depth parameter specifies at what level in 
 the oriented bounding box tree the collision testing should terminate.&nbsp; 
 The bin size parameter specifies how many triangles should occur per leaf 
 node in the oriented bounding box tree.</p>

<p class="NDLRefMemberFunction">void Remove(<a HREF="../../Reference/NiMain/NiAVObject.htm">NiAVObject</a>* 
 pkObject)</p>

<p class="NDLRefMemberDescription">Removes the specified object from the 
 collision group.&nbsp; This function may have to search through both the 
 colliders and the collidees, so it is better to use the specific removal 
 functions if possible.</p>

<p class="NDLRefMemberFunction">void RemoveAll()</p>

<p class="NDLRefMemberDescription">Removes all objects from the collision 
 group.</p>

<p class="NDLRefHead2">Collisions</p>

<p class="NDLRefMemberFunction">void UpdateWorldData()</p>

<p class="NDLRefMemberDescription">Updates the world-space <a href="Alternate_Bounding_Volumes.htm">ABV</a>s 
 of any colliders or collider trees that have <a href="Alternate_Bounding_Volumes.htm">ABV</a>s 
 within them. Note that this update only applies to colliders, and the 
 aforementioned moving collidees will have to be updated individually with 
 <span class="NDLSystemFont">NiCollisionData::UpdateWorldData</span>.</p>

<p class="NDLRefMemberFunction">bool TestCollisions(float fDeltaTime)</p>

<p class="NDLRefMemberDescription">Determines if there will be a collision 
 between two or more objects in the collision group within the specified 
 time slice.&nbsp; The collision callbacks for the objects are not processed 
 during a call of this member function.&nbsp; The return value is true 
 if and only if an intersection will occur between some pair of objects.</p>

<p class="NDLRefMemberFunction">void FindCollisions(float fDeltaTime)</p>

<p class="NDLRefMemberDescription">Determines if there will be a collision 
 between two or more objects in the collision group within the specified 
 time slice.&nbsp; The collision callbacks for the objects are processed 
 during a call of this member function. </p>

<p class="NDLRefHead2">Accessors</p>

<p class="NDLRefMemberFunction">bool IsCollider(const <a HREF="../../Reference/NiMain/NiAVObject.htm">NiAVObject</a>* 
 pkObject) const</p>

<p class="NDLRefMemberFunction">bool IsCollidee(const <a HREF="../../Reference/NiMain/NiAVObject.htm">NiAVObject</a>* 
 pkObject) const</p>

<p class="NDLRefMemberDescription">These return true if and only if the input 
 object is in the collider or collidee list (respective).</p>

<p class="NDLRefHead1">Notes</p>

<p class="NDLRefHead2">Colliders and Collidees</p>

<p>A collider is an object that the application intends 
 to move around in the world.&nbsp; While, in many cases, such objects 
 are assigned nonzero velocities via the <span class="NDLSystemFont">NiCollisionData::SetLocalVelocity</span> member function, they may have zero velocities.&nbsp; </p>

<p>For example, an object which initially has a nonzero 
 velocity and which may eventually stop is considered a collider even when 
 it is at rest.</p>

<p>A collidee is an object that must remain stationary 
 in the world while it is a member of an <span class="NDLSystemFont">NiCollisionGroup</span>.</p>

<p>For example, walls in a room are typically added to 
 a collision group as collidees.&nbsp; While a collidee must remain stationary 
 when a member of a collision group, it is okay to remove that object from 
 the collision group, move it to another world location, and then add it 
 to another collision group.&nbsp; As mentioned above, objects that are 
 animating or moving along paths that guarantee no collisions with other 
 collidees can also be treated as collidees.&nbsp; The local velocity for 
 collidees is ignored by the collision detection system.&nbsp; Collidees 
 are less computationally expensive than colliders, as colliders must be 
 checked against each other every time the collision system is called, 
 as well as against all collidees.&nbsp; Collidees need not be checked 
 against each other.</p>

<p class="NDLRefHead2">Testing for Collisions</p>

<p>Tests for collisions do not use the collision callbacks 
 for objects.&nbsp; The function merely reports if an intersection will 
 occur in the specified time slice between some pair of objects.&nbsp; 
 The intersecting objects themselves remain unidentified.</p>

<p class="NDLRefHead2">Finding Collisions</p>

<p>Each collision callback is provided with pointers to 
 the two colliding objects in the group and the predicted values for the 
 intersection time, the point of intersection, and the normal vectors for 
 the object triangles involved in the collision.&nbsp; This information 
 is stored in the nested class <span class="NDLSystemFont">Intersect</span><b>.&nbsp; 
 </b>The prototype for the callback is <span class="NDLSystemFont">int(*Callback)(Intersect&amp;)</span>.</p>

<p>A callback and user-specified data to be used by the 
 callback are set by the following:</p>

<ul>
  <li><span class="NDLSystemFont">NiCollisionData::SetCollisionCallback</span></li>
  <li><span class="NDLSystemFont">NiCollisionData::SetCollisionCallbackData</span></li>
</ul>

<p>The local velocity for an object is set by <span class="NDLSystemFont">NiCollisionData::SetLocalVelocity</span>.</p>

<p>As indicated, the Intersect class has two pointer members 
 which point to the two colliding objects that were added to the group.&nbsp; 
 The member <span class="NDLSystemFont">pkRoot0</span> 
 happens to be the pointer to the object that called the callback.&nbsp; 
 Additionally, the actual objects within the roots' (potential) hierarchies 
 will also be specified by the <span class="NDLSystemFont">pkObj0</span> 
 and <span class="NDLSystemFont">pkObj1</span> class members, 
 each of whom has no definite relation to the roots other than the fact 
 that one of the roots is its ancestor. See <span class="NDLSystemFont"><a href="NiCollisionGroup__Intersect.htm">NiCollisionGroup::Intersect</a></span> 
 for more details.</p>

<p class="NDLRefHead2">Nested Class Record</p>

<p>The nested class <span class="NDLSystemFont">Record</span> is publicly declared only because <span class="NDLSystemFont">NiCollisionGroup</span> must call the following:</p>

<ul>
  <li><span class="NDLSystemFont">NiCollisionTraversals::TestCollisions</span></li>
  <li><span class="NDLSystemFont">NiCollisionTraversals::FindCollisions</span></li>
</ul>

<p>Members of this type are not intended for use by the 
 application.</p>

<p class="NDLRefHead2">Maximum Depth and Bin Size Parameters</p>

<p>The maximum depth parameter specifies at what level 
 in the oriented bounding box tree the collision testing should terminate.&nbsp; 
 The default value indicates that the oriented bounding box tree should 
 be traversed all the way to its leaf nodes.&nbsp; The larger the maximum 
 depth, the more accurate the intersection results.&nbsp; The bin size 
 parameter specifies how many triangles should occur per leaf node in the 
 oriented bounding box tree.&nbsp; The default value indicates that a full 
 oriented bounding box tree should be built (one triangle per leaf node).&nbsp; 
 The smaller the bin size, the more accurate the intersection results.&nbsp; 
 Both maximum depth and bin size can be tuned by an application to get 
 the optimal tradeoff of speed versus accuracy.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
