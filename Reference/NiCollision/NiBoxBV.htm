<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiBoxBV</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiBoxBV</p>

<p class="NDLRefParentage">: public <span><a href=
"NiBoundingVolume.htm">NiBoundingVolume</a></span></p>

<p class="NDLRefHeaderFile">&lt;NiBoxBV.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>The <span class="NDLSystemFont">NiBoxBV</span> alternate
bounding volume (<a href=
"Alternate_Bounding_Volumes.htm">ABV</a>) consists of:</p>

<ul>
    <li>a center point C,</li>

    <li>three direction vectors: U0, U1, and U2, and

        <p class="indent1">The direction vectors must form a
        right-handed orthonormal set. In other words, the vectors
        must all be unit length, mutually perpendicular, and U2 =
        Cross(U0, U1).</p>
    </li>

    <li>three extents: e0, e1, and e2.</li>
</ul>

<p>The extents are the half-dimensions of the box.</p>

<p>The eight vertices of the box are generated by:</p>

<ul>
    <li>V = C + (s0 * e0 * U0) + (s1 * e1 * U1) + (s2 * e2 * U2)

        <p class="indent1">where |s0| = |s1| = |s2| = 1 (eight
        choices).</p>
    </li>
</ul>

<p>The box volume is (2 * e0) * (2 * e1) * (2 * e2) = 8 * e0 * e1
* e2.</p>

<p class="NDLRefHead1">Constructors:</p>

<p class="NDLRefMemberFunction">NiBoxBV(const
NiPoint3&amp; kExtent = NiPoint3::UNIT_ALL,
const NiPoint3&amp; kCenter = NiPoint3::ZERO,
const NiPoint3&amp; kXAxis = NiPoint3::UNIT_X,
const NiPoint3&amp; kYAxis = NiPoint3::UNIT_Y,
const NiPoint3&amp; kZAxis = NiPoint3::UNIT_Z)</p>

<p class="NDLRefMemberDescription">This constructor creates a
cube bounding volume with default values of center C = [0, 0, 0],
directions U0 = (1,0,0), U1 = (0,1,0), and U2 = (0,0,1), and
extents e0 = e1 = e2 = 1.</p>

<p class="NDLRefMemberFunction">
NiBoxBV(const NiBoxBV&amp; kABV)</p>

<p class="NDLRefMemberDescription">This copy constructor
duplicates all the box parameters of the specified <span class=
"NDLSystemFont">NiBoxBV</span>.</p>

<p class="NDLRefHead1">Supported Member Functions:</p>

<p class="NDLRefMemberFunction">void SetCenter(const
NiPoint3&amp; center)</p>

<p class="NDLRefMemberFunction">const NiPoint3&amp; GetCenter()
const</p>

<p class="NDLRefMemberDescription">These provide access to the
<span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiPoint3.htm">NiPoint3</a></span>
defining the center of the box.</p>

<p class="NDLRefMemberFunction">void SetAxis(int iWhich, const
NiPoint3&amp; axis)</p>

<p class="NDLRefMemberFunction">const NiPoint3&amp; GetAxis(int
iWhich) const</p>

<p class="NDLRefMemberFunction">const NiPoint3* GetAxes()
const</p>

<p class="NDLRefMemberDescription"><span class=
"NDLSystemFont">SetAxis()</span> enables a specific <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMain/NiPoint3.htm">NiPoint3</a></span>-based
axis to be set, with the <span class=
"NDLSystemFont">iWhich</span> parameter containing a value of
zero, one, or two. <span class="NDLSystemFont">GetAxis()</span>
returns a reference to the <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiPoint3.htm">NiPoint3</a></span> for the
specified axis. There is no error checking on the value of the
<span class="NDLSystemFont">iWhich</span> parameter for either
function. There is also no error checking about whether or not
the resulting axes form a right-handed orthonormal system.
<span class="NDLSystemFont">GetAxes()</span> returns a pointer to
the array of <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiPoint3.htm">NiPoint3</a></span>
axes.</p>

<p class="NDLRefMemberFunction">void SetExtent(int iWhich, float
fExtent)</p>

<p class="NDLRefMemberFunction">float GetExtent(int iWhich)
const</p>

<p class="NDLRefMemberFunction">const float* GetExtents()
const</p>

<p class="NDLRefMemberDescription"><span class=
"NDLSystemFont">SetExtent()</span> is used to specify the extent
along the given axis specified by <span class=
"NDLSystemFont">iWhich</span>. <span class=
"NDLSystemFont">GetExtent()</span> returns the corresponding
floating-point value for specified as the extent along axis
<span class="NDLSystemFont">iWhich</span>. <span class=
"NDLSystemFont">GetExtents()</span> returns a pointer to the
array of float extents.</p>

<p class="NDLRefMemberFunction">virtual int Type() const</p>

<p class="NDLRefMemberDescription">See the documentation for
<span class="NDLSystemFont"><a href=
"NiBoundingVolume.htm">NiBoundingVolume</a></span> for a
description of this <a href=
"../../Programmer/Object_Systems/RTTI_Details.htm">RTTI</a>
call.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
