<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Minimize the Number of Colliders</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>


<h1>Minimize the Number of Colliders</h1>

<p>Since colliders are always tested against every other 
 object in the collision group, and collidees are tested against only against 
 colliders, a geometric savings in efficiency can be realized by minimizing 
 the number of colliders.</p>

<p>One way is to organize colliders that remain close to 
 each other into some sort of group as children of a common <a href="../../Reference/NiMain/NiNode.htm"><span 
 class="NDLSystemFont">NiNode</span></a> and add the group as a whole to 
 the collision group with that node. The most obvious application of this 
 technique would be a hierarchically defined character. This approach could 
 even apply to groups of characters, for example, ones that always remain 
 in the same room together or flock in a group. The overall bounds of this 
 group will be used first, and efficient bound cull testing can be performed 
 against the whole group in many cases.</p>

<p>Another way to accomplish this goal would be to maintain 
 multiple collision groups, one for each group of colliders, with colliders 
 being able to migrate among <a href="NiCollisionGroup.htm"><span 
 class="NDLSystemFont">NiCollisionGroup</span></a>s, and with collidees being 
 specific to each group. You typically would want the <span 
 class="NDLSystemFont"><a href="NiCollisionGroup.htm">NiCollisionGroup</a></span> to remain rooted in world space in this case.</p>

<p>If you know that the movement of an object will never 
 intersect another collidee that you care about (such as what might happen 
 with scripted motion -- a box that always remains on the same spot of 
 a conveyor belt as an example), then it also makes sense to make it a 
 collidee. The same rationale applies for animated objects. A lone tree 
 swaying in the breeze at the top of a hill, for example, is never going 
 to collide with any of the buildings at the bottom of the hill. </p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
