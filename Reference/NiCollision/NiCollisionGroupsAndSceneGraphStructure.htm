<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiCollisionGroups and Scene Graph Structure</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>


<h1>NiCollisionGroups and Scene Graph Structure</h1>

<p>Collision detection can be one of the most expensive 
 operations in a real-time 3D application. An important consideration to 
 achieve optimal performance is to design a scene graph that minimizes 
 collision detection operations.</p>

<p>When a node is added to a <a href="NiCollisionGroup.htm"><span 
 class="NDLSystemFont">NiCollisionGroup</span></a>, all of its children are 
 included as well, with the potential for collision testing affecting the 
 geometry of all of the node's children, if a collision is found for the 
 node itself. This arrangement is a good one, because it allows objects 
 to be culled hierarchically, but care must be exercised in the set-up 
 to guarantee that only children that are intended to participate in collision 
 detection in fact do so.</p>

<p>Additionally, you could set up one branch of the scene 
 graph consist of all the static objects in the scene and another consist 
 of all the dynamic objects. A third branch may be used by some applications 
 for special cases, perhaps for dynamic objects that are not part of the 
 collision system, for instance. If constructed this way, scene graphs 
 will never have to visit any of the static geometry in the scene during 
 <span class="NDLSystemFont">Update()</span>, which in many cases is the 
 majority of the geometry of the scene graph. If all the dynamic objects 
 in the scene are moving, a single <span class="NDLSystemFont">Update()</span> 
 could be efficiently called on the root of the dynamic branch. With such 
 an approach, each <span class="NDLSystemFont">Update()</span> would affect 
 only the portions of the scene that are of interest, and the renderer 
 could still efficiently cull much of the scene graph at the top-most level.</p>

<p>When designing nodes to be added to <a href="NiCollisionGroup.htm"><span 
 class="NDLSystemFont">NiCollisionGroup</span></a>s, try to enable the addition 
 of a common parent to the <a href="NiCollisionGroup.htm"><span 
 class="NDLSystemFont">NiCollisionGroup</span></a>, rather than each individual 
 object. With train cars, for instance, each car is a separate entity that 
 moves on its own (at least rotation-wise), but it could logically be 
 grouped with a parent &quot;train&quot; node. This parent would be added 
 to the <a href="NiCollisionGroup.htm"><span 
 class="NDLSystemFont">NiCollisionGroup</span></a>, and this organization 
 would allow all the cars to be culled from collision with a single collision 
 test.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
