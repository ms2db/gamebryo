<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiCollisionGroup::Intersect</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiCollisionGroup::Intersect</p>

<p class="NDLRefParentage">: public <a href="../../Reference/NiSystem/NiMemObject.htm"><span>NiMemObject</span></a></p>

<p class="NDLRefHeaderFile">&lt;NiCollisionGroup.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiCollisionGroup::Intersect</span> 
 is a nested class of <span class="NDLSystemFont">NiCollisionGroup.</span> 
 It stores important intersection collision results that are passed back 
 to the application via an application-supplied callback. The callback 
 can then extract the information that it requires.&nbsp; Since <span class="NDLSystemFont">Intersect</span> is a nested class, 
 it is in the scope of <span class="NDLSystemFont">NiCollisionGroup</span> 
 and must be qualified.</p>

<p class="NDLRefHead1">Constructors</p>

<p>An application should never create <span class="NDLSystemFont">NiCollisionGroup::Intersect</span> 
 directly itself. This functionality is internal to the <span class="NDLSystemFont">NiCollision</span> 
 collision detection system.</p>

<p class="NDLRefHead1">Supported Members </p>

<p>All members in this class are public.</p>

<p class="NDLRefMemberFunction">NiAVObject* pkRoot0</p>

<p class="NDLRefMemberFunction">NiAVObject* pkRoot1</p>

<p class="NDLRefMemberFunction">NiAVObject* pkObj0</p>

<p class="NDLRefMemberFunction">NiAVObject* pkObj1</p>

<p class="NDLRefMemberDescription"><span class="NDLSystemFont">pkObj0</span> 
 and <span class="NDLSystemFont">pkObj1</span> represent the actual colliding 
 objects while <span class="NDLSystemFont">pkRoot0</span> and <span class="NDLSystemFont">pkRoot1</span> 
 represent the ancestor root nodes that had been added to the collision 
 group. <span class="NDLSystemFont">pkRoot0</span> also happens to be the 
 pointer to the object that called the callback.</p>

<p class="NDLRefMemberFunction">float fTime</p>

<p class="NDLRefMemberFunction">NiPoint3 kPoint</p>

<p class="NDLRefMemberDescription">These fields report the time of collision 
 and the intersection point.</p>

<p class="NDLRefMemberFunction">NiPoint3 kNormal0</p>

<p class="NDLRefMemberFunction">NiPoint3 kNormal1</p>

<p class="NDLRefMemberDescription"><span class="NDLSystemFont">kNormal0</span> 
 and <span class="NDLSystemFont">kNormal1</span> are the collision normals 
 for the colliding objects.</p>

<p class="NDLRefMemberFunction">const NiPoint3** appkTri1</p>

<p class="NDLRefMemberFunction">const NiPoint3** appkTri2 </p>

<p class="NDLRefMemberDescription"><span class="NDLSystemFont">appkTri1</span> 
 and <span class="NDLSystemFont">appkTri2</span> will be non-NULL if triangle 
 or OBB collisions have been involved in the collision. In this situation, 
 the vertices of the triangle can be referenced through these two members. 
 Care must be taken as the values of these members are only valid within 
 the context of the callback. If the data needs to be used later, it should 
 be saved. For example, for simplicity, suppose you have a global <span 
 class="NDLSystemFont">NiPoint3</span> array of 3 elements called <span class="NDLSystemFont">m_kTri1</span>. 
 The results could be saved in the callback with the following code:</p>
 
<pre class="indent1">
if (kIntersect.appkTri1)
{
    m_kTri1[0] = *kIntersect.appkTri1[0];
    m_kTri1[1] = *kIntersect.appkTri1[1];
    m_kTri1[2] = *kIntersect.appkTri1[2];
}
</pre> 

<p class="NDLRefMemberDescription">Additionally, some record of whether or <span class="NDLSystemFont">m_kTri1</span> had been filled out may be required.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
