<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiUnionBV</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiUnionBV</p>

<p class="NDLRefParentage">: public <span><a href=
"NiBoundingVolume.htm">NiBoundingVolume</a></span></p>

<p class="NDLRefHeaderFile">&lt;NiUnionBV.h&gt;</p>

<p class="NDLRefHead1">Description:</p>

<p>The <span class="NDLSystemFont">NiUnionBV</span> alternate
bounding volume (<a href=
"Alternate_Bounding_Volumes.htm">ABV</a>) may contain more than
one of the other <a href="Alternate_Bounding_Volumes.htm">ABV</a>
types. The effective <a href=
"Alternate_Bounding_Volumes.htm">ABV</a> that is used in
intersection testing is the union of all the volumes the union
contains. This technique makes it possible to create uniquely
shaped bounding volumes not otherwise possible. For example "L"
shaped volumes are possible by creating a union with two
appropriately positioned <span class="NDLSystemFont"><a href=
"NiBoxBV.htm">NiBoxBV</a></span> instances.</p>

<p>The application creates a <span class=
"NDLSystemFont">NiUnionBV</span> and passes to it various
bounding volumes that form the union. The union object assumes
ownership of the input bounding volumes, so the application must
dynamically allocate the volumes and must not attempt to delete
them explicitly.</p>

<p>The union can be arbitrarily complex since the top level
<span class="NDLSystemFont">NiUnionBV</span> can manage other
unions in addition to the other bounding volumes. The union can
therefore represent a tree of bounding volumes.</p>

<p class="NDLRefHead1">Constructors:</p>

<p class="NDLRefMemberFunction">NiUnionBV()</p>

<p class="NDLRefMemberDescription">This constructor creates an
empty union bounding volume.</p>

<p class="NDLRefMemberFunction">
NiUnionBV(const NiUnionBV&amp; kABV)</p>

<p class="NDLRefMemberDescription">This copy constructor
duplicates all the union parameters of the specified <span class=
"NDLSystemFont">NiUnionBV</span>, creating copies of the child
bounding volumes as necessary.</p>

<p class="NDLRefHead1">Supported Member Functions:</p>

<p class="NDLRefMemberFunction">void
AddBoundingVolume(NiBoundingVolume* pBV)</p>

<p class="NDLRefMemberDescription"><span class=
"NDLSystemFont">AddBoundingVolume</span> can be used to add a
primitive bound volume object to the union that will form the
bounding volume for intersection testing. The union object
assumes ownership of the input bounding volume, so the
application must dynamically allocate the volume and must not
attempt to delete it explicitly.</p>

<p class="NDLRefMemberFunction">void
RemoveBoundingVolume(NiBoundingVolume* pBV)</p>

<p class="NDLRefMemberDescription"><span class=
"NDLSystemFont">RemoveBoundingVolume</span> will remove the
specified bounding volume from the union of objects that form the
bounding volume for intersection testing.</p>

<p class="NDLRefMemberFunction">void RemoveAllBoundingVolumes
()</p>

<p class="NDLRefMemberDescription">Removes all bounding volumes
from the union and deletes the memory that had been dynamically
allocated for them.</p>

<p class="NDLRefMemberFunction">unsigned int GetSize() const</p>

<p class="NDLRefMemberDescription">Returns the number of
immediate bounding volumes in the unions (those immediately
stored in the union array as child nodes). This value is useful
for iteration over the array of bounding volumes managed by the
union.</p>

<p class="NDLRefMemberFunction">const NiBoundingVolume*
GetBoundingVolume(unsigned int i) const</p>

<p class="NDLRefMemberDescription">Accessor for the bounding
volumes managed by the union bounding volume. The index should
be between <span class="NDLSystemFont">0</span> and <span class=
"NDLSystemFont">GetSize() - 1</span>. If an index is out of
range, the returned pointer is <span class=
"NDLSystemFont">NULL</span>.</p>

<p class="NDLRefMemberFunction">virtual int Type() const</p>

<p class="NDLRefMemberDescription">See the documentation for
<span class="NDLSystemFont"><a href=
"NiBoundingVolume.htm">NiBoundingVolume</a></span> for a
description of this <a href=
"../../Programmer/Object_Systems/RTTI_Details.htm">RTTI</a>
call.</p>

<p class="NDLRefMemberFunction">virtual unsigned int
WhichObjectIntersect()</p>

<p class="NDLRefMemberDescription">If an intersection is
predicted by the collision system for an object that has been
assigned a union bounding volume, the application might be
interested in knowing which primitive volume in the union was the
one that generated the collision.</p>

<p class="NDLRefMemberDescription">This information may be
determined in the collision callback by:</p>

<ul>
    <li>getting the union bounding volume from the
    collider/collidee via <span class=
    "NDLSystemFont">NiAVObject::GetModelSpaceBoundingVolume</span>,</li>

    <li>calling <span class=
    "NDLSystemFont">NiUnionBV::WhichObjectIntersect</span> to get
    the cached index <span class="NDLSystemFont">i</span> of the
    primitive volume, and</li>

    <li>passing this index to <span class=
    "NDLSystemFont">NiUnionBV::GetBoundingVolume(i)</span>.</li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
