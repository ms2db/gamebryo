<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiPick::Results</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>


<p class="NDLRefHeadClassTitle">NiPick::Results</p>

<p class="NDLRefParentage">: protected <a href="../../Reference/NiMain/NiTArray.htm"><span>NiTPrimitiveArray&lt;NiPick::Record*&gt;</span></a></p>

<p class="NDLRefHeaderFile">&lt;NiPick.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>The results array uses an array interface for access 
 to the picking records that it contains. The array records are tightly 
 packed and are non-NULL. Most clients of this class will only use the 
 <span class="NDLSystemFont">GetAt</span> and <span class="NDLSystemFont">GetSize</span> 
 functions to iterate through all of the picking records.</p>

<p>Under the hood, the results array acts as a pool of 
 pick records to minimize the amount of deallocation and reallocation between 
 picking operations. The array itself holds both valid results from the 
 most recent picking operation and invalid results from previous picking 
 operations that have been cleared. These invalid results get reused before 
 any new record objects are allocated. The valid records are tightly packed 
 at the front of the array from index 0 to index <span class="NDLSystemFont">GetSize() 
 - 1</span>. The invalid records cannot be accessed.</p>

<p>Records that are in the results array will be marked 
 as invalid and reused whenever the array is cleared, such as during a 
 picking operation with the append flag set to false. If an application 
 holds onto a pointer to a record between picking operations in a case 
 like that, then that record may be reused. If this is desired, use the 
 <span class="NDLSystemFont">RemoveAtAndFill</span> function to remove a 
 record permanently from the array.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">Results(unsigned int uiInitialSize, unsigned 
 int uiGrowBy);</p>

<p class="NDLRefMemberDescription">Constructor for array that takes an initial 
 size and a size to grow by. This is called by <span class="NDLSystemFont">NiPick</span> 
 itself.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">unsigned int GetSize() const</p>

<p class="NDLRefMemberFunction">unsigned int GetEffectiveSize() const</p>

<p class="NDLRefMemberDescription">Returns the number of picking results.</p>

<p class="NDLRefMemberFunction"><a href="NiPick__Record.htm">Record</a>* GetAt(unsigned 
 int uiIndex)</p>

<p class="NDLRefMemberDescription">This is a wrapper for the <span class="NDLSystemFont">NiTArray</span> 
 function. It returns the record at the specified index.</p>

<p class="NDLRefMemberFunction"><a href="NiPick__Record.htm">Record</a>* RemoveAtAndFill(unsigned 
 int uiIndex)</p>

<p class="NDLRefMemberDescription">Remove a record from the results array 
 and fill its slot with the last valid record. This record will not be 
 reused when the array is cleared and additionally must be freed by the 
 caller. Needless to say, this function will change the size of the array 
 and will invalidate any sorting that has taken place.</p>

<p class="NDLRefMemberFunction">void ClearArray()</p>

<p class="NDLRefMemberDescription">Clear all records.</p>

<p class="NDLRefMemberFunction">void SortResults()</p>

<p class="NDLRefMemberDescription">Sorts result array from closest distance 
 to farthest.</p>

<p class="NDLRefMemberFunction">void FindClosest()</p>

<p class="NDLRefMemberDescription">Finds the closest record, puts it at index 
 0, and clears any other records.</p>

<p class="NDLRefMemberFunction"><a href="NiPick__Record.htm">Record</a>* AddNew(NiAVObject* 
 pObject)</p>

<p class="NDLRefMemberDescription">Adds a new record to the array for this 
 object.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
