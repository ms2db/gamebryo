<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Multiple Collision Groups</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>


<h1>Multiple Collision Groups</h1>

<p>It is often worthwhile to create multiple <a href="NiCollisionGroup.htm"><span 
 class="NDLSystemFont">NiCollisionGroup</span></a>s for optimal performance 
 and for flexibility in handling collision response.</p>

<p>For example, suppose you have a heavy object that characters 
 cannot move, but which a bulldozer can move. In such a case, you may want 
 one response for characters and another response for characters that are 
 driving the bulldozer. You could create one <a href="NiCollisionGroup.htm"><span 
 class="NDLSystemFont">NiCollisionGroup</span></a>, with all the characters 
 as colliders, with all the static geometry as collidees, and with a collision 
 callback associated with this <a href="NiCollisionGroup.htm"><span 
 class="NDLSystemFont">NiCollisionGroup</span></a>. You could then create 
 another <a href="NiCollisionGroup.htm"><span 
 class="NDLSystemFont">NiCollisionGroup</span></a>, with the bulldozer and 
 the objects movable by the bulldozer as colliders, with the rest of the 
 static geometry as collidees, and with a separate callback. The characters 
 are not part of this bulldozer <a href="NiCollisionGroup.htm"><span 
 class="NDLSystemFont">NiCollisionGroup</span></a>.</p>

<p>If the bulldozer is not occupied, then you can skip 
 collision detection with the bulldozer <span 
 class="NDLSystemFont"><a href="NiCollisionGroup.htm">NiCollisionGroup</a></span> and only test the character 
 <a href="NiCollisionGroup.htm"><span class="NDLSystemFont">NiCollisionGroup</span></a>. 
 Once the bulldozer is occupied, you can detect collisions on the bulldozer 
 <span class="NDLSystemFont"><a href="NiCollisionGroup.htm">NiCollisionGroup</a></span> first, to make sure that the objects movable by the bulldozer are 
 properly updated, and then you can detect collisions on the character 
 <span class="NDLSystemFont"><a href="NiCollisionGroup.htm">NiCollisionGroup</a></span>, 
 which has the objects movable by the bulldozer set as collidees. This 
 example serves as an illustration of organizations that may yield faster 
 performance.</p>

<p>Using multiple <span 
 class="NDLSystemFont"><a href="NiCollisionGroup.htm">NiCollisionGroup</a></span>s is useful in situations 
 such as the one described above, where collision detection involving different 
 collision response behaviors or different object types can be managed 
 as a group.</p>

<p>Another situation where using multiple collision groups 
 is desirable is to spatially divide the scene, and have one <span 
 class="NDLSystemFont"><a href="NiCollisionGroup.htm">NiCollisionGroup</a> </span> per division. In that 
 case, care must be taken in dealing with movable objects when they are 
 near the borders of the divisions.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
