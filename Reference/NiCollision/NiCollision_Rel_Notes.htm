<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiCollision Library Release Notes</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>NiCollision Library Release Notes</h1>

<p><a href="#Added_Features_and_Fixed_Bugs">Added Features,
Changed Behavior, and Fixed Bugs</a></p>

<p><a href="#Known_Issues_and_Limitations">Known Issues and
Limitations</a></p>

<a name="Added_Features_and_Fixed_Bugs" id="Added_Features_and_Fixed_Bugs"></a><h2>Added Features, Changed Behavior, and Fixed Bugs</h2>

<h3>Gamebryo LightSpeed 3.2</h3>

<ul>
  <li>None in this release.</li>
</ul>

<h3>Gamebryo LightSpeed 3.1.1</h3>
<ul>
    <li>Fixed bug where picking against union ABV collison data would fail to correctly return
    the hit point. Rather than returning the closest hit, the previous code returned the hit
    with the last volume in the union.</li>
    
    <li>Fixed a bug in which picking against collision geometry would fail when the
    collision geometry was set up to use the triangle mesh. Previously, the intersection
    test was ignoring such collision data resulting in missed collisions.</li>
</ul>

<h3>Gamebryo LightSpeed 3.1</h3>
<ul>
    <li>Fixed bug where picking against box ABV types would return erroneous results.</li>
    
    <li>Fixed a bug where attempting to pick a skinned mesh would crash when the skinning
        modifier had failed to attach to the mesh. This occurred when a platform specific
        mesh was loaded onto a different platform.</li>
</ul>


<h3>Gamebryo LightSpeed 3.0</h3>

<ul>
    <li>Changed <span class="NDLSystemFont">NiCollisionTraversals::FindIntersectionsSkinnedMeshBounds()</span> to use 
        always <span class="NDLSystemFont">FindSphereIntersect</span>, instead of calling both <span class="NDLSystemFont">FindBoundIntersect</span> and 
        <span class="NDLSystemFont">FindSphereIntersect</span>. This prevents a potential issue on grazing 
        intersections where the different order of floating-point operations could 
        result in one method returning an intersection and the other method not.</li>
</ul>

<h3>Gamebryo 2.6.0</h3>

<ul>
    <li>None in this release.</li>
</ul>

<h3>Gamebryo 2.5</h3>

<ul>
    <li>Fixed issue where UNION ABV types did not detect
    collisions correctly for higher speed objects.</li>

    <li>Converted to support the <a href=
    "../../Reference/NiMesh/NiMesh_Rel_Notes.htm">NiMesh</a>
    library.</li>
</ul>

<ul>
    <li>Added support for <span class="NDLSystemFont"><a href=
    "NiPick.htm">NiPick</a></span> to use ABV's instead of the
    actual geometry. This allows skinned characters to more
    easily be integrated into the picking system.</li>

    <li>Added support for custom triangle picking logic for
    <span class="NDLSystemFont"><a href=
    "../NiMain/NiRenderObject.htm">NiRenderObject</a></span>
    objects via <span class="NDLSystemFont"><a href=
    "NiPick__PickObjectPolicy.htm">NiPick::PickObjectPolicy</a></span>.
    This allows an application to be more or less exact or to
    pick on custom renderable types.</li>
</ul>

<h3>Gamebryo 2.3.0</h3>

<ul>
    <li>Fixed a problem with picking that could result when the
    object being picked on has a very large scale. Floating point
    precision error was causing triangle intersections to be
    erroneously missed.</li>
</ul>

<h3>Gamebryo 2.2.1</h3>

<ul>
    <li>Fixed issue with memory de-allocations that could
    potentially cause a crash to occur.</li>

    <li>Fixed a collision detection propagation issue for some
    cases of <span class=
    "NDLSystemFont">PROPAGATE_ON_SUCCESS</span> by
    short-circuiting recursive traversals whenever <span class=
    "NDLSystemFont">NOTEST</span> and <span class=
    "NDLSystemFont">PROPAGATE_ALWAYS</span> collision data is
    found. Also, the fix reduces the recursion overhead (total
    number of recursion calls as part of collision traversal) by
    up to 60% for some simple cases.</li>

    <li><span class="NDLSystemFont">PROPAGATE_ON_FAILURE</span>
    has been deprecated. For more information, see the section on <a href="../NiCollision/Propagation_Control_Flags.htm">propagation  control flags</a>.</li>
</ul>

<h3>Gamebryo 2.2.0</h3>

<ul>
    <li>Improved memory performance for <span class=
    "NDLSystemFont"><a href="NiPick.htm">NiPick</a></span>.
    Applications which use this class heavily or against large
    numbers of objects should additionally see a performance
    increase.</li>

    <li><span class="NDLSystemFont">NiPick::GetResults</span> no
    longer returns an <span class="NDLSystemFont"><a href=
    "../NiMain/NiTArray.htm">NiTArray</a></span> of record
    objects. It instead returns a <span class=
    "NDLSystemFont">NiPick::Results</span> array. It inherits
    most of the functionality of its <span class=
    "NDLSystemFont">NiTArray</span> base class, but there are
    some minor differences. See the <a href=
    "NiPick__Results.htm">class reference documentation</a> for
    more details.</li>
</ul>

<h3>Gamebryo 2.1.1.1</h3>

<ul>
    <li>Fixed an issue in which for a specific test case, the
    XBox 360 reported different collision normals than did
    Win32.</li>
</ul>

<h3>Gamebryo 2.1.0</h3>

<ul>
    <li>Fixed issue where collision propagation would recurse
    more than needed.</li>
</ul>

<h3>Gamebryo 2.0.0</h3>

<ul>
    <li>Improved normal calculations for Box-Capsule collisions
    by considering relative velocity instead of orientation, to
    de-emphasize contributions from face normals perpendicular to
    the velocity vector.</li>

    <li>To address quality issues (and boost performance in some
    cases), significant portions of the collision detection
    system were rewritten using a numerical root finding
    technique (using backward differences). This approach is
    encapsulated in the new <span class=
        "NDLSystemFont"><a href="NiIntersector.htm">NiIntersector</a></span>
        class and its subclasses, which replace the <span class=
        "NDLSystemFont">NiMinimize</span> class. The changes are
        summarized as follows.

        <p class="indent1">Added "internal use only" classes
        include:</p>

        <ul>
            <li><span class="NDLSystemFont"><a href=
            "NiIntersector.htm">NiIntersector</a></span></li>

            <li><span class="NDLSystemFont"><a href=
            "NiBoxCapsuleIntersector.htm">NiBoxCapsuleIntersector</a></span></li>

            <li><span class="NDLSystemFont"><a href=
            "NiBoxSphereIntersector.htm">NiBoxSphereIntersector</a></span></li>

            <li><span class="NDLSystemFont"><a href=
            "NiCapsuleSphereIntersector.htm">NiCapsuleSphereIntersector</a></span></li>

            <li><span class="NDLSystemFont"><a href=
            "NiCapsuleTriIntersector.htm">NiCapsuleTriIntersector</a></span></li>

            <li><span class="NDLSystemFont"><a href=
            "NiSphereTriIntersector.htm">NiSphereTriIntersector</a></span></li>

            <li><span class="NDLSystemFont">NiDistPntBox</span>
            (point-box squared distance calculator)</li>

            <li><span class="NDLSystemFont">NiDistSegBox</span>
            (segment-box squared distance calculator)</li>
        </ul>

        <p class="indent1">Deleted files include:</p>

        <ul>
            <li>NiMinimize.cpp/.h</li>

            <li>NiParallelepiped.cpp/.h</li>

            <li>NiDistPntPpd.cpp</li>

            <li>NiDistSegPpd.cpp</li>
        </ul>
    </li>

    <li>Some of these changes have resulted in significantly
    better performance for some ABV-vs.-ABV collisions. The
    largest of these performance improvements (relative to
    Gamebryo 1.2.1) include:</li>
</ul>

<div class="indent1">
    <table>
        <thead>
            <tr>
                <th>Gamebryo 2.0 ABV-ABV Collision Type</th>

                <th>Times Faster than Gamebryo 1.2.1 (on
                average)</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td>Box-Capsule Find</td>

                <td>4.5 X</td>
            </tr>

            <tr>
                <td>Box-Box Find</td>

                <td>1.7 X</td>
            </tr>

            <tr>
                <td>Box-Sphere Find</td>

                <td>1.3 X</td>
            </tr>

            <tr>
                <td>Sphere-Sphere Find</td>

                <td>1.3 X</td>
            </tr>

            <tr>
                <td>Box-Capsule Test</td>

                <td>3 X</td>
            </tr>

            <tr>
                <td>Box-Sphere Test</td>

                <td>2.2 X</td>
            </tr>
        </tbody>
    </table>
</div>

<ul>
    <li>As a result of addressing problems and improving
    stability in Sphere-Triangle and Capsule-Triangle collision
    detection, the average performance of those collision types
    is slower than in Gamebryo 1.2.1. However, clients should
    avoid ABV-triangle calls on principle, anyway, since triangle
    meshes are often so large. ABV-ABV collision detection is
    recommended as a significantly faster alternative to
    ABV-Triangle collision detection, on several scores.
    Nonetheless, the average performance "hits" relative to
    Gamebryo 1.2.1 for these ABV-Triangle collision detection
    cases are as follows:</li>
</ul>

<div class="indent1">
    <table>
        <thead>
            <tr>
                <th>Gamebryo 2.0 ABV-Triangle Collision Type</th>

                <th>Times As Fast as Gamebryo 1.2.1 (on
                average)</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td>Sphere-Triangle Find</td>

                <td>0.65 X</td>
            </tr>

            <tr>
                <td>Capsule-Triangle Find</td>

                <td>0.57 X</td>
            </tr>
        </tbody>
    </table>
</div>

<ul>
    <li>Fixed a problem in which collision detection failed when
    comparing objects having ABVs to objects having OBBs.</li>

    <li>Added six separating axis tests related to the direction
    of motion to the box-box test-intersection query, as had been
    done for the box-box find-intersection query, so that
    far-apart objects won't incorrectly be reported as
    intersecting.</li>

    <li>Fixed a reported problem in which "embedded collisions"
    occurred for Sphere-Triangle collisions at 45 degree angles
    (i.e., unexpected interpenetrations occurred). Certain "quick
    out" cases for Sphere/Triangle and Capsule/Triangle
    collisions were fixed to address the problem.</li>
</ul>

<a name="Known_Issues_and_Limitations" id="Known_Issues_and_Limitations"></a><h2>Known Issues and Limitations</h2>

<ul>
    <li>Collision detection and object picking that uses the
    geometry of the mesh imposes special restrictions. The
    data-streams on the mesh must be formatted and interleaved as
    required by the collision system and, additionally, the
    relevant data-streams require CPU-read accessibility. See the documentation concerning the <a href="Collision_System_Usage.htm">assumptions and restrictions</a> imposed by the collision system. </li>

    <li>Currently, there are no safe-guards or infrastructure in
    place that allow the collision-system to broadcast its
    requirements to the mesh profile system. This means that data
    marked for collision may not be usable by the collision
    system unless the artist specifically assigns a
    collision-tailored mesh profile (such as the <a href="../../Art/Other/Introduction_to_Mesh_Profiles.htm">PosNormPicking</a> profile) to the object.</li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
