<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Collision System Usage</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Collision System Usage</h1>

<p>The following basic steps outline the operations necessary to
use the Gamebryo collision detection system:</p>

  <table class="NDLNoteContainer" width="100%">
      <tr align="left">
          <td class="NDLNoteContainerTD"><p class="NDLHeadingNoteContainer">Note</p>
              <div class="NDLNote">You must include the <span class="NDLSystemFont">NiCollision</span> header in one of your application source files, and you must link in the <span class="NDLSystemFont">NiCollision</span> library. The header file defines a static data member that forces pre-main initialization of function pointer tables, the functions coming from the <span class="NDLSystemFont">NiCollision</span> library.
              </div>
          </td>
      </tr>
  </table>

<ul>
    <li>Create at least one instance of the Gamebryo collision
    group, <span class="NDLSystemFont"><a href=
    "NiCollisionGroup.htm">NiCollisionGroup</a></span>.</li>

    <li>Add colliders and collidees to each <span class=
    "NDLSystemFont"><a href=
    "NiCollisionGroup.htm">NiCollisionGroup</a></span>.</li>

    <li>Set the callback function and callback data for all
    collider objects, as needed.</li>

    <li>Call <span class=
    "NDLSystemFont">NiCollisionData::SetLocalVelocity()</span> to
    let the collision detection system know the current velocity
    of all your moving objects during dynamic collision
    detection, as determined by the application.</li>

    <li>Call <span class=
    "NDLSystemFont">NiCollisionData::SetEnableVelocity(true)</span>
    to enable world velocity computation.</li>

    <li>Finally, call <span class=
    "NDLSystemFont">NiCollisionGroup::FindCollision()</span> [for
    dynamic collisions, typically] or <span class=
    "NDLSystemFont">NiCollisionGroup::TestCollision()</span> [for
    static collisions, typically], which initiates collision
    detection for the collision group in question. For
    <span class=
    "NDLSystemFont">NiCollisionGroup::FindCollision()</span>, the
    application-supplied callback is called for every
    intersection that occurs between any two candidate
    objects.</li>
</ul>

<h2>Assumptions and Restrictions made for Static and Dynamic
Collisions between Geometry</h2>

<p>For static and dynamic Collisions between Mesh Geometry
(<a href="Triangles.htm">Triangle collisions</a>), the collision
system makes the following assumptions/restrictions:</p>

<ul>
    <li>The <span class="NDLSystemFont"><a href=
    "../../Reference/NiMain/NiPrimitiveType.htm">NiPrimitiveType::Type</a></span>
    must be either <span class=
    "NDLSystemFont">PRIMITIVE_TRIANGLES</span> or <span class=
    "NDLSystemFont">PRIMITIVE_TRISTRIPS</span>. No other
    primitive types are valid.</li>

    <li>The mesh must consists of a single sub-mesh. Multiple
    sub-mesh are not supported.</li>

    <li>The mesh must have an <span class=
    "NDLSystemFont">INDEX,0</span> stream. It must be
    CPU-readable and may be either 16-bit or 32-bit.</li>

    <li>The mesh must have a <span class=
    "NDLSystemFont">POSITION,0</span> stream. It must be
    CPU-readable and is required to be in <a href=
    "../../Reference/NiMesh/NiDataStreamElement.htm#Public_Types">
    <span class="NDLSystemFont">F_FLOAT32_3</span></a>
    format.</li>

    <li>The mesh must have a <span class=
    "NDLSystemFont">NORMAL,0</span> stream. It must be
    CPU-readable and is required to be in <a href=
    "../../Reference/NiMesh/NiDataStreamElement.htm#Public_Types">
    <span class="NDLSystemFont">F_FLOAT32_3</span></a>
    format.</li>
</ul>

<h2>Assumptions and Restrictions made for Picking on
Geometry</h2>

<ul>
    <li>The <span class="NDLSystemFont"><a href=
    "../../Reference/NiMain/NiPrimitiveType.htm">NiPrimitiveType::Type</a></span>
    must be either <span class=
    "NDLSystemFont">PRIMITIVE_TRIANGLES</span> or <span class=
    "NDLSystemFont">PRIMITIVE_TRISTRIPS</span>. No other
    primitive types are valid.</li>

    <li>Sub-meshes are allowed for picking.</li>

    <li>The mesh must have an <span class=
    "NDLSystemFont">INDEX,0</span> stream. It must be
    CPU-readable and may be either 16-bit or 32-bit.</li>

    <li>The mesh must have a <span class=
    "NDLSystemFont">COLOR,0</span> stream if picking is set to
    return color information. It must be CPU-readable and it must
    be in <a href=
    "../../Reference/NiMesh/NiDataStreamElement.htm#Public_Types">
    <span class="NDLSystemFont">F_FLOAT32_4</span></a>
    format.</li>

    <li>The mesh must have a <span class=
    "NDLSystemFont">NORMAL,0</span> stream if picking is set to
    return normal information. It must be CPU-readable and it
    must be in <a href=
    "../../Reference/NiMesh/NiDataStreamElement.htm#Public_Types">
    <span class="NDLSystemFont">F_FLOAT32_3</span></a>
    format.</li>

    <li>The mesh must have a <span class=
    "NDLSystemFont">TEXCOORD,0</span> stream if picking is set to
    return texture coordinate information. It must be
    CPU-readable and it must be in <a href=
    "../../Reference/NiMesh/NiDataStreamElement.htm#Public_Types">
    <span class="NDLSystemFont">F_FLOAT32_2</span></a>
    format.</li>
</ul>

<h2>Example Mesh Profile</h2>

<p>The sample <a href=
"../../Art/Other/Introduction_to_Mesh_Profiles.htm">Mesh
Profile</a> named PosNormPicking.xml sets the appropriate access
for both triangle collisions and picking. The profile must be
extended if color or texture information is required from
picking.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
