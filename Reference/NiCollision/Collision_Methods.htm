<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Collision Methods</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<h1>Collision Methods</h1>

<p>Gamebryo provides a number
 of methods for performing fast collision detection.</p>
 
<p>Many of these methods are automatic and part of the
 internals of the collision detection system.  For example, the collision
 detection system uses the <a href="Bounding_Spheres.htm">bounding spheres</a>
 of nodes which have already been calculated for purposes of scene graph
 culling, in order to take full advantage of the hierarchical nature of the
 scene graph.  Subsystems such as <a href="Picking.htm">picking</a> use these
 same bounds for determining if a ray intersects with some portion of the
 scene graph and ultimately with some geometry in the scene.</p>
 
<p>Collision detection methods an application may use directly
 include:</p>

<ul>
	
	<li>Simple and efficient
 <a href="Picking.htm">picking</a>.</li>

    <li>Collision detection using
 ABVs
 (<a href="Alternate_Bounding_Volumes.htm">Alternate Bounding Volumes</a>),
 with which collision detection is typically faster than other 3D
 methods.</li>

    <li>Collision detection using
 OBBs (<a href="Oriented_Bounding_Boxes.htm">Oriented Bounding Boxes</a>),
 which provide a more efficient way of testing for triangle collision
 detection, in certain special circumstances.</li>

    <li>
 <a href="Triangles.htm">Triangle-to-triangle</a> collision detection
 (although, in general, it is best to always question whether you need to do
 triangle-triangle collisions, since they are so expensive).</li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
