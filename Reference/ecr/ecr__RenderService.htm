<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>ecr::RenderService</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">ecr::RenderService</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../efd/efd__ISystemService.htm">efd::ISystemService</a></span></p>


<p class="NDLRefHeaderFile">&lt;RenderService.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classecr_1_1_render_service.gif" alt="Inheritance graph for ecr::RenderService"/>
  <p class="FigureCaption">Inheritance graph for ecr::RenderService</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">The <span class="NDLSystemFont">RenderService</span> service manages renderable objects and the renderer itself. </p>
<p class="NDLNormal">A platform specific renderer is created at startup, based on parameters provided to the constructor or given after construction but before initialization.</p>
<p class="NDLNormal">The render service maintains a set of <span class="NDLSystemFont"><a href="ecr__RenderSurface.htm">RenderSurface</a></span> objects, each describing a particular render window. Each surface may be associated with a particular <span class="NDLSystemFont"><a href="../NiMain/Ni3DRenderView.htm">Ni3DRenderView</a></span> object that holds the scene graph objects to draw in that surface. Typical game applications will have only one surface, while tools may have several.</p>
<p class="NDLNormal">Scene graph objects are given to the service to manage, typically by the <span class="NDLSystemFont"><a href="ecr__SceneGraphService.htm">SceneGraphService</a></span> service. The render service then places the scene graph in the appropriate <span class="NDLSystemFont"><a href="../NiMain/Ni3DRenderView.htm">Ni3DRenderView</a></span> object. Currently, all scene graphs are added to all views, but this will likely change in future to give applications control over which objects appear in which views.</p>
<p class="NDLNormal">On each framework tick, all of the surfaces are updated, which causes them to draw. </p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classecr_1_1_render_service_1a8544259beb214fe261789cf5ab8ffae2"></a>
<p class="NDLRefMemberFunction">RenderService(<span class="NDLSystemFont">NiWindowRef</span> parentHandle = 0)</p>
<p class="NDLRefMemberDescription">Constructs the render service with a known parent window handle. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">The renderer specific data is not allocated or created until the service's OnInit method is invoked.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">parentHandle</span></td>
    <td>Window handle to pass to renderer creation. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_render_service_1afd983ce85c6285bf36397a72aa3681e0"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="ecr__RenderContext.htm">RenderContext</a></span>*  GetActiveRenderContext() const</p>
<p class="NDLRefMemberDescription">Gets the active render context based on the active render surface. </p>

<a name="classecr_1_1_render_service_1a72d4275c267e11ab786cddca731099dd"></a>
<p class="NDLRefMemberFunction">void  InvalidateRenderContexts() const</p>
<p class="NDLRefMemberDescription">Invalidates the active render context. </p>

<a name="classecr_1_1_render_service_1afea9a7c012b179cda7cec06b36569fb5"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../NiMain/NiRenderer.htm">NiRenderer</a></span>*  GetRenderer() const</p>
<p class="NDLRefMemberDescription">Returns a pointer to the underlying Gamebryo renderer object. </p>
<p class="NDLRefMemberDetailedDescription">The underlying type of the returned pointer is platform specific. </p>

<a name="classecr_1_1_render_service_1a3ccd234baab305c41f7635f5f998d81a"></a>
<p class="NDLRefMemberFunction">void  SetParentHandle(<span class="NDLSystemFont">NiWindowRef</span> parentHandle)</p>
<p class="NDLRefMemberDescription">Set the parent handle. </p>
<p class="NDLRefMemberDetailedDescription">This is intended to be used when the parent handle is not yet known at <span class="NDLSystemFont">RenderService</span> creation, such as when the windowing system is initialized within the <span class="NDLSystemFont"><a href="ecr__RenderService.htm#classecr_1_1_render_service_1a912dd2630c2ebcf7c9efb4b941025c06">OnPreInit(efd::IDependencyRegistrar* pDependencyRegistrar)</a></span> of another service. In such cases this must be called before <span class="NDLSystemFont"><a href="ecr__RenderService.htm#classecr_1_1_render_service_1a912dd2630c2ebcf7c9efb4b941025c06">RenderService::OnPreInit(efd::IDependencyRegistrar* pDependencyRegistrar)</a></span> is invoked. </p>

<a name="classecr_1_1_render_service_1a8912d090033850bf5669eb2268e6970d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiWindowRef</span>  GetParentHandle()</p>
<p class="NDLRefMemberDescription">Get the parent handle. </p>

<a name="classecr_1_1_render_service_1a62bc3c17a05a8aed0fe6ed46674088e0"></a>
<p class="NDLRefMemberFunction">void  AddDelegate(<span class="NDLSystemFont"><a href="ecr__IRenderServiceDelegate.htm">IRenderServiceDelegate</a></span>* pDelegate)</p>
<p class="NDLRefMemberDescription">Add a render service delegate. </p>

<a name="classecr_1_1_render_service_1acecf5fc2e8c8b691c583672da357cbbe"></a>
<p class="NDLRefMemberFunction">void  RemoveDelegate(<span class="NDLSystemFont"><a href="ecr__IRenderServiceDelegate.htm">IRenderServiceDelegate</a></span>* pDelegate)</p>
<p class="NDLRefMemberDescription">Remove a render service delegate. </p>

<a name="classecr_1_1_render_service_1a54f96762ba8044c6667d83df993d22d5"></a>
<p class="NDLRefMemberFunction">void  RaiseSurfaceAdded(<span class="NDLSystemFont"><a href="ecr__RenderSurface.htm">RenderSurface</a></span>* pSurface)</p>
<p class="NDLRefMemberDescription">Raise the surface added event, which invokes <span class="NDLSystemFont"><a href="ecr__IRenderServiceDelegate.htm#classecr_1_1_i_render_service_delegate_1a8cb585b17f7d44a8c9e84098e08abc87">IRenderServiceDelegate::OnSurfaceAdded</a></span>. </p>

<a name="classecr_1_1_render_service_1a5661a324d0b84b54aaaf14f3bc4ea5dc"></a>
<p class="NDLRefMemberFunction">void  RaiseSurfaceRemoved(<span class="NDLSystemFont"><a href="ecr__RenderSurface.htm">RenderSurface</a></span>* pSurface)</p>
<p class="NDLRefMemberDescription">Raise the surface removed event, which invokes <span class="NDLSystemFont"><a href="ecr__IRenderServiceDelegate.htm#classecr_1_1_i_render_service_delegate_1ab2c0d1150577baffb9be923d46b2c522">IRenderServiceDelegate::OnSurfaceRemoved</a></span>. </p>

<a name="classecr_1_1_render_service_1a42653e5994422bcad0574703c4a5c672"></a>
<p class="NDLRefMemberFunction">void  RaisePreDrawEvent(<span class="NDLSystemFont"><a href="ecr__RenderSurface.htm">RenderSurface</a></span>* pSurface)</p>
<p class="NDLRefMemberDescription">Raise the surface pre-draw event, which invokes <span class="NDLSystemFont"><a href="ecr__IRenderServiceDelegate.htm#classecr_1_1_i_render_service_delegate_1a5851ed1a9e4304b0c9dec3cbabbd2c24">IRenderServiceDelegate::OnSurfacePreDraw</a></span>. </p>

<a name="classecr_1_1_render_service_1ae5777f587d72fde824c68283c4b5b6e2"></a>
<p class="NDLRefMemberFunction">void  RaisePostDrawEvent(<span class="NDLSystemFont"><a href="ecr__RenderSurface.htm">RenderSurface</a></span>* pSurface)</p>
<p class="NDLRefMemberDescription">Raise the surface post-draw event, which invokes <span class="NDLSystemFont"><a href="ecr__IRenderServiceDelegate.htm#classecr_1_1_i_render_service_delegate_1a82cd3367266636187d31a70387903767">IRenderServiceDelegate::OnSurfacePostDraw</a></span>. </p>
<a name="active_render_surface"></a>
<p class="NDLRefHead1">Active Render Surface</p>

<p class="NDLRefMemberDescription">The Render Service designates one surface as active.</p>
<p class="NDLRefMemberDescription">In case with only one surface that surface is always active. When multiple surfaces are presentit is the application's responsibility to designate a particular surface as active.</p>
<p class="NDLRefMemberDescription">The active surface is used by the <span class="NDLSystemFont"><a href="ecr__CameraService.htm">CameraService</a></span> class as the recipient of camera controlling and update events. </p>

<a name="classecr_1_1_render_service_1a1e18f9d197dd3670f07645075f445941"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="ecr__RenderSurface.htm">RenderSurface</a></span>*  GetActiveRenderSurface() const</p>
<p class="NDLRefMemberDescription">Get the current active render surface. </p>

<a name="classecr_1_1_render_service_1aef2feb910078b21e4f9dbe6032d02eb9"></a>
<p class="NDLRefMemberFunction">void  SetActiveRenderSurface(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a1c90207c9a9f0384d8ad0e75c8b68edf">efd::WindowRef</a></span> window)</p>
<p class="NDLRefMemberDescription">Set the current active surface to that for the given window. </p>

<a name="classecr_1_1_render_service_1a9cb640486532171ae42e3ac2b0fcd332"></a>
<p class="NDLRefMemberFunction">void  SetActiveRenderSurface(<span class="NDLSystemFont"><a href="ecr__RenderSurface.htm">RenderSurface</a></span>* pSurface)</p>
<p class="NDLRefMemberDescription">Set the current active surface. </p>
<a name="default_context_and_active_surface_control"></a>
<p class="NDLRefHead1">Default Context and Active Surface Control</p>


<a name="classecr_1_1_render_service_1a9a98ef2c366ae04d84baee05ffe2824f"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  SetDefaultSurfaceCreator(<span class="NDLSystemFont"><a href="ecr__IDefaultSurfaceCreator.htm">IDefaultSurfaceCreator</a></span>* pCreator)</p>
<p class="NDLRefMemberDescription">Sets a surface creator for overriding the default creation of the render context and active surface that happens during OnInit. </p>
<p class="NDLRefMemberDetailedDescription">This method can be called any time after the <span class="NDLSystemFont">RenderService</span> is constructed and before it has been initialized via OnInit. It is recommended that it be called during OnPreInit of another system service.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pCreator</span></td>
    <td>Interface for the creation method. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if this method was called before the creation of an active surface or false if there is already an active surface in which case the interface will not be used. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_render_service_1a359851f303d94dd23bbbd86ea2c68cf9"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  SetDefaultSurfaceBackgroundColor(const <span class="NDLSystemFont"><a href="../efd/efd__ColorA.htm">efd::ColorA</a></span>& color)</p>
<p class="NDLRefMemberDescription">Sets the background color used when the default context is created during OnInit. </p>
<p class="NDLRefMemberDetailedDescription">If a <span class="NDLSystemFont"><a href="ecr__IDefaultSurfaceCreator.htm">IDefaultSurfaceCreator</a></span> interface is provided via SetDefaultSurfaceCreator then this color is also passed to the creation method (which is free to ignore it).</p>
<p class="NDLRefMemberDetailedDescription">This method can be called any time after the <span class="NDLSystemFont">RenderService</span> is constructed and before it has been initialized via OnInit. It is recommended that it be called during OnPreInit of another system service.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">color</span></td>
    <td>The requested background color. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if this method was called before the creation of an active surface or false if there is already an active surface in which case the color will not be used. </td>
</tr>

        </tbody>
    </table>
</div>


<a name="render_context_management"></a>
<p class="NDLRefHead1">Render Context Management</p>


<a name="classecr_1_1_render_service_1a71d26ac36c811d8be3bf0e2bd543f477"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetRenderContextCount() const</p>
<p class="NDLRefMemberDescription">Get the number of render contexts. </p>

<a name="classecr_1_1_render_service_1af69d6b19c7cc838f753aa265ffe85090"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="ecr__RenderContext.htm">RenderContext</a></span>*  GetRenderContextAt(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> index)</p>
<p class="NDLRefMemberDescription">Get the render context at the given index. </p>
<p class="NDLRefMemberDetailedDescription">The index is not range checked. </p>

<a name="classecr_1_1_render_service_1a6e38f24f40fe6728877af7e560492688"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  AddRenderContext(<span class="NDLSystemFont"><a href="ecr__RenderContext.htm">RenderContext</a></span>* pContext)</p>
<p class="NDLRefMemberDescription">Add a render context, returning the location of the new context for use with GetRenderContextAt. </p>

<a name="classecr_1_1_render_service_1a90f38f48f9766a4a3ff1f9f2d2a6778b"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  RemoveRenderContext(<span class="NDLSystemFont"><a href="ecr__RenderContext.htm">RenderContext</a></span>* pContext)</p>
<p class="NDLRefMemberDescription">Remove the given render context, returning true if it was found. </p>

<a name="classecr_1_1_render_service_1a36864e95e7350cd6c8863130675eca6e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">RenderContextPtr</a></span>  RemoveRenderContextAt(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> index)</p>
<p class="NDLRefMemberDescription">Remove the render context at the given index. </p>
<p class="NDLRefMemberDetailedDescription">The return value must be assigned to a smart pointer variable to prevent it from deletion upon removal. The context may be destroyed if it is not assigned at all or if assigned to a regular pointer. </p>

<a name="classecr_1_1_render_service_1afb8150b9d2390bf0e91cc26e09f50c26"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="ecr__RenderSurface.htm">RenderSurface</a></span>*  GetRenderSurface(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a1c90207c9a9f0384d8ad0e75c8b68edf">efd::WindowRef</a></span> window) const</p>
<p class="NDLRefMemberDescription">Find the render surface for the given window among all render surfaces known to the render contexts. </p>
<a name="render_surfaces"></a>
<p class="NDLRefHead1">Render Surfaces</p>


<a name="classecr_1_1_render_service_1a99e4a41d4c59feb6f98636c68fdbd5dd"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">RenderSurfacePtr</a></span>  CreateRenderSurface(<span class="NDLSystemFont">NiWindowRef</span> windowHandle = 0)</p>
<p class="NDLRefMemberDescription">Create a new render surface for the given window. </p>
<p class="NDLRefMemberDetailedDescription">The result must be assigned to a smart pointer. This function is platform dependent. </p>

<a name="classecr_1_1_render_service_1afd9077ce74c1bed24ee5afb2f5066194"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  DestroyRenderSurface(<span class="NDLSystemFont"><a href="ecr__RenderSurface.htm">RenderSurface</a></span>* pSurface)</p>
<p class="NDLRefMemberDescription">Destroy a render surface. </p>
<p class="NDLRefMemberDetailedDescription">This function is platform dependent. </p>

<a name="classecr_1_1_render_service_1a13929ce0b3372e4fc3b703eb20e7a766"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  RecreateRenderSurface(<span class="NDLSystemFont"><a href="ecr__RenderSurface.htm">RenderSurface</a></span>* pSurface)</p>
<p class="NDLRefMemberDescription">Recreate a render surface, typically in response to renderer recreation. </p>
<p class="NDLRefMemberDetailedDescription">This function is platform dependent. </p>
<a name="rendered_objects"></a>
<p class="NDLRefHead1">Rendered Objects</p>

<p class="NDLRefMemberDescription">The <span class="NDLSystemFont">RenderService</span> is informed each time the <span class="NDLSystemFont"><a href="ecr__SceneGraphService.htm">SceneGraphService</a></span> object creates a new scene graph for an entity that has rendering related properties, and each time the scene graph is removed. </p>

<a name="classecr_1_1_render_service_1af749f7154d9201c1f2660bcfa34014df"></a>
<p class="NDLRefMemberFunction">virtual void  AddRenderedEntity(<br/><span class="NDLSystemFont"><a href="../egf/egf__Entity.htm">egf::Entity</a></span>* pEntity, <br/><span class="NDLSystemFont"><a href="../NiMain/NiAVObject.htm">NiAVObject</a></span>* pAVObject)</p>
<p class="NDLRefMemberDescription">Called when an entity with rendering properties receives a new scene graph. </p>

<a name="classecr_1_1_render_service_1a7819c5ea870fdbdb3590d2f50467baac"></a>
<p class="NDLRefMemberFunction">virtual void  RemoveRenderedEntity(<br/><span class="NDLSystemFont"><a href="../egf/egf__Entity.htm">egf::Entity</a></span>* pEntity, <br/><span class="NDLSystemFont"><a href="../NiMain/NiAVObject.htm">NiAVObject</a></span>* pAVObject)</p>
<p class="NDLRefMemberDescription">Called when an entity with rendering properties is about to have its scene graph removed. </p>

<a name="classecr_1_1_render_service_1a71f248b997a9e8849e2fe6c156b7058a"></a>
<p class="NDLRefMemberFunction">virtual void  AddRenderedObject(<br/><span class="NDLSystemFont"><a href="ecr__SceneGraphService.htm#classecr_1_1_scene_graph_service_1a15b7b654f5037dc58de733d1aeb6f97d">ecr::SceneGraphService::SceneGraphHandle</a></span> handle, <br/><span class="NDLSystemFont"><a href="../NiMain/NiAVObject.htm">NiAVObject</a></span>* pAVObject)</p>
<p class="NDLRefMemberDescription">Called when a new scene graph, with no entity, must be set up for rendering. </p>

<a name="classecr_1_1_render_service_1a4d9ac44f698cb1d17d4d6bbc93ea7c71"></a>
<p class="NDLRefMemberFunction">virtual void  RemoveRenderedObject(<br/><span class="NDLSystemFont"><a href="ecr__SceneGraphService.htm#classecr_1_1_scene_graph_service_1a15b7b654f5037dc58de733d1aeb6f97d">ecr::SceneGraphService::SceneGraphHandle</a></span> handle, <br/><span class="NDLSystemFont"><a href="../NiMain/NiAVObject.htm">NiAVObject</a></span>* pAVObject)</p>
<p class="NDLRefMemberDescription">Called when a new scene graph, with no entity, must be removed. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
