<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>ecr::ShaderService</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">ecr::ShaderService</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../efd/efd__ISystemService.htm">efd::ISystemService</a></span></p>


<p class="NDLRefHeaderFile">&lt;ShaderService.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classecr_1_1_shader_service.gif" alt="Inheritance graph for ecr::ShaderService"/>
  <p class="FigureCaption">Inheritance graph for ecr::ShaderService</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">The <span class="NDLSystemFont">ShaderService</span> service manages the creation of Gamebryo shaders from shader files, using the shader libraries that have been loaded. </p>
<p class="NDLNormal">In the <span class="NDLSystemFont">ShaderService</span> constructor, a Boolean parameter is provided that indicates whether the <span class="NDLSystemFont">ShaderService</span> should attempt to create new instances of the shader libraries. Once this is done, the <span class="NDLSystemFont">ShaderService</span> will maintain a list of all the loaded shader parsers and shader libraries, and what file types they can use.</p>
<p class="NDLNormal">The shader service requires that a <span class="NDLSystemFont"><a href="../efd/efd__MessageService.htm">efd::MessageService</a></span> object and an <span class="NDLSystemFont"><a href="../efd/efd__AssetLocatorService.htm">efd::AssetLocatorService</a></span> object be available at the time the <span class="NDLSystemFont">ShaderService</span> object is added to the ServiceManager. Hence, the Message Service and Asset Locator Service must be registered before the Shader Service. </p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classecr_1_1_shader_service_1a0099371689add3e6a7f09d797fcfb117"></a>
<p class="NDLRefMemberFunction">ShaderService(<span class="NDLSystemFont">bool</span> createShaderLibs)</p>
<p class="NDLRefMemberDescription">Constructor. </p>
<p class="NDLRefMemberDetailedDescription">The constructor prepares a list of MIME types for shaders that it will be responsible for managing.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">createShaderLibs</span></td>
    <td>If true, any shader libraries that have been linked will have their respective Create functions called in order to create new instances of the <span class="NDLSystemFont"><a href="../NiMain/NiShaderLibrary.htm">NiShaderLibrary</a></span> objects. Otherwise, the service assumes that the <span class="NDLSystemFont"><a href="../NiMain/NiShaderLibrary.htm">NiShaderLibrary</a></span> objects have already been created. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_shader_service_1a9ad59a6593b075e082014b5a7ed5cc1e"></a>
<p class="NDLRefMemberFunction">virtual ~ShaderService()</p>
<p class="NDLRefMemberDescription">Destructor. </p>

<a name="classecr_1_1_shader_service_1a6ea1129552bbed7477ef4a023e4d6885"></a>
<p class="NDLRefMemberFunction">virtual const char*  GetDisplayName() const</p>
<p class="NDLRefMemberDescription">Return the name of the service, in this case "ShaderService". </p>

<a name="classecr_1_1_shader_service_1a50414562a01122c73764da2754eb2f58"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a62e4d1bc94248c629612480b748bfd0e">efd::SyncResult</a></span>  OnPreInit(<span class="NDLSystemFont"><a href="../efd/efd__IDependencyRegistrar.htm">efd::IDependencyRegistrar</a></span>* pDependencyRegistrar)</p>
<p class="NDLRefMemberDescription">OnPreInit subscribes to messages. </p>

<a name="classecr_1_1_shader_service_1ac73dd50cfe2e8ae021a06a6da88aff38"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ad81d366c75ea1e1119513a730f79910d">efd::AsyncResult</a></span>  OnInit()</p>
<p class="NDLRefMemberDescription">OnInit manages the initialization of the shader parsers and shader libraries. </p>
<p class="NDLRefMemberDetailedDescription">It also runs the parsers on libraries on the shader assets, generating shaders. </p>

<a name="classecr_1_1_shader_service_1a40de84721ba3fb185bea8e4148a4a7f3"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ad81d366c75ea1e1119513a730f79910d">efd::AsyncResult</a></span>  OnTick()</p>
<p class="NDLRefMemberDescription">The OnTick function does nothing and always succeeds. </p>

<a name="classecr_1_1_shader_service_1a46858a9076d5f0bf49b5a649712a8e29"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ad81d366c75ea1e1119513a730f79910d">efd::AsyncResult</a></span>  OnShutdown()</p>
<p class="NDLRefMemberDescription">Shuts down the shader service, and releases the shader parsers and shader libraries. </p>

<a name="classecr_1_1_shader_service_1aa5f0114d1c0caeeadbbb7c02a0ea617b"></a>
<p class="NDLRefMemberFunction">void  HandleAssetLocatorResponse(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__AssetLocatorResponse.htm">efd::AssetLocatorResponse</a></span>* pMessage, <br/><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span> targetChannel)</p>
<p class="NDLRefMemberDescription">Asset locator response message handler. </p>

<a name="classecr_1_1_shader_service_1a55666515761e85d58da3a1201ede8445"></a>
<p class="NDLRefMemberFunction">void  AddShaderProgramType(const char* pMimeType)</p>
<p class="NDLRefMemberDescription">The <span class="NDLSystemFont">ShaderService</span> loads a number of shader programs by MIME type. </p>
<p class="NDLRefMemberDetailedDescription">This function can be used to add additional MIME types e.g. assembly-vertex-shader. This function must be called pre-OnInit. </p>

<a name="classecr_1_1_shader_service_1ab5004c5c36ceee20997f23ef9ab2ef7a"></a>
<p class="NDLRefMemberFunction">void  SetMaxOnInitTime(float fMaxTimeInSec)</p>
<p class="NDLRefMemberDescription">Sets the maximum amount of time (in seconds) the <span class="NDLSystemFont">ShaderService</span> is allowed to spend in <span class="NDLSystemFont"><a href="ecr__ShaderService.htm#classecr_1_1_shader_service_1ac73dd50cfe2e8ae021a06a6da88aff38">OnInit()</a></span> while parsing& loading shaders. </p>
<p class="NDLRefMemberDetailedDescription">Smaller values of fMaxTimeInSec result in more <span class="NDLSystemFont"><a href="ecr__ShaderService.htm#classecr_1_1_shader_service_1ac73dd50cfe2e8ae021a06a6da88aff38">OnInit()</a></span> cycles. Note that it is possible for more than fMaxTimeInSec time to be spent in <span class="NDLSystemFont"><a href="ecr__ShaderService.htm#classecr_1_1_shader_service_1ac73dd50cfe2e8ae021a06a6da88aff38">OnInit()</a></span> if a single shader takes longer than fMaxTimeInSec to be parsed or loaded. <span class="NDLSystemFont">ShaderService</span> uses a default max on <span class="NDLSystemFont"><a href="ecr__ShaderService.htm#classecr_1_1_shader_service_1ac73dd50cfe2e8ae021a06a6da88aff38">OnInit()</a></span> time of 10 ms.</p>
<p class="NDLRefMemberDetailedDescription">This method must be called pre-OnInit. </p>

<a name="classecr_1_1_shader_service_1afdd3c8a867d923c8804b4e543e4bcea3"></a>
<p class="NDLRefMemberFunction">float  GetMaxOnInitTime()</p>
<p class="NDLRefMemberDescription">Returns the maximum amount of time (in seconds) that the <span class="NDLSystemFont">ShaderService</span> is allowed to spend in <span class="NDLSystemFont"><a href="ecr__ShaderService.htm#classecr_1_1_shader_service_1ac73dd50cfe2e8ae021a06a6da88aff38">OnInit()</a></span>. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
