<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>ecr::RenderContext</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">ecr::RenderContext</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../efd/efd__MemObject.htm">efd::MemObject</a></span></p>


<p class="NDLRefHeaderFile">&lt;RenderContext.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classecr_1_1_render_context.gif" alt="Inheritance graph for ecr::RenderContext"/>
  <p class="FigureCaption">Inheritance graph for ecr::RenderContext</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">A <span class="NDLSystemFont">RenderContext</span> object is used to group several render surfaces all rendering the same scene contents, but from potentially different cameras or with different rendering effects (e.g., wireframe mode). </p>
<p class="NDLNormal">Multiple contexts should be used when different surfaces must displays different sets of objects, or must use significantly different steps for rendering. Each <span class="NDLSystemFont">RenderContext</span> holds a single Gamebryo <span class="NDLSystemFont"><a href="../NiMain/NiRenderFrame.htm">NiRenderFrame</a></span> object representing the entire process to use for rendering within the surfaces owned by the context. In addition, callback mechanisms are provided to enable applications to make per-surface modifications to the rendering steps. </p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classecr_1_1_render_context_1ae5dbe4144242fc8a23a0b31629584dd2"></a>
<p class="NDLRefMemberFunction">void  IncRefCount() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="classecr_1_1_render_context_1aab55500a5dc92f89079222556786d59a"></a>
<p class="NDLRefMemberFunction">void  DecRefCount() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="classecr_1_1_render_context_1a3a89fabc660da78a7f05976b45f3ccf3"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetRefCount() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="classecr_1_1_render_context_1a70af8ba41b2971cf4fc26c09458fc47f"></a>
<p class="NDLRefMemberFunction">RenderContext(<br/><span class="NDLSystemFont"><a href="ecr__RenderService.htm">RenderService</a></span>* pRenderService, <br/><span class="NDLSystemFont"><a href="../NiMain/Ni3DRenderView.htm">Ni3DRenderView</a></span>* pRenderView = 0)</p>
<p class="NDLRefMemberDescription">Constructor. </p>
<p class="NDLRefMemberDetailedDescription">The <span class="NDLSystemFont"><a href="ecr__RenderService.htm">RenderService</a></span> object must be non-NULL. If pRenderView is NULL, a default 3D render view will be used. </p>

<a name="classecr_1_1_render_context_1a0e81c30b9e0d976ba04eb4770efbd9b0"></a>
<p class="NDLRefMemberFunction">virtual ~RenderContext()</p>
<p class="NDLRefMemberDescription">Destructor. </p>
<p class="NDLRefMemberDetailedDescription">Clears the list of render surfaces held by the context and deletes any rendering data. </p>

<a name="classecr_1_1_render_context_1a270513cfd06d00c58b253061ada78f3c"></a>
<p class="NDLRefMemberFunction">virtual void  Draw(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> currentTime)</p>
<p class="NDLRefMemberDescription">Draw all surfaces in the context. </p>
<p class="NDLRefMemberDetailedDescription">Pre- and Post- Draw Events will be raised for each surface. </p>

<a name="classecr_1_1_render_context_1a39b7c9d9c6335bf59ddd1a565cf2f528"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  GetValidateFrames()</p>
<p class="NDLRefMemberDescription">Sets a value indicating if the render context should check if the frame has been invalidated before doing any drawing, and also controls if it should validate the frame when complete. </p>

<a name="classecr_1_1_render_context_1ab8e5a55a67780ca6d6f497569c9d6f20"></a>
<p class="NDLRefMemberFunction">void  SetValidateFrames(<span class="NDLSystemFont">efd::Bool</span> validate)</p>
<p class="NDLRefMemberFunction"></p>

<a name="classecr_1_1_render_context_1ae6f37c5d39b5780d8b03fcab15cc91d9"></a>
<p class="NDLRefMemberFunction">void  Invalidate()</p>
<p class="NDLRefMemberDescription">Invalidates the frame so that the next tick should force a new draw. </p>
<a name="render_surfaces"></a>
<p class="NDLRefHead1">Render Surfaces</p>

<p class="NDLRefMemberDescription">The render context object holds a vector of smart pointers to <span class="NDLSystemFont"><a href="ecr__RenderSurface.htm">RenderSurface</a></span> objects.</p>
<p class="NDLRefMemberDescription">The Draw operation is applied to every surface using the <span class="NDLSystemFont"><a href="../NiMain/NiRenderFrame.htm">NiRenderFrame</a></span> object held within this object. </p>

<a name="classecr_1_1_render_context_1a51e891838f43fa9e53789793819829db"></a>
<p class="NDLRefMemberFunction">void  AddRenderSurface(<br/><span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">RenderSurfacePtr</a></span> spSurface, <br/><span class="NDLSystemFont"><a href="../NiMain/NiRenderListProcessor.htm">NiRenderListProcessor</a></span>* pCustomRenderListProcessor = 0)</p>
<p class="NDLRefMemberDescription">Add a new render surface to the context. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">spSurface</span></td>
    <td>The surface to add to the current render context </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pCustomRenderListProcessor</span></td>
    <td>Optional render list processor that can be used to specify rendering order of meshes </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_render_context_1a957535e422aaca6fb426bdd7d169c811"></a>
<p class="NDLRefMemberFunction">void  RemoveRenderSurface(<span class="NDLSystemFont"><a href="ecr__RenderSurface.htm">RenderSurface</a></span>* pSurface)</p>
<p class="NDLRefMemberDescription">Removes a render surface from the render service. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pSurface</span></td>
    <td>The surface to remove. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if successful, false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_render_context_1af2582a731cbc1dee4d1b2b7ba7fbdb2c"></a>
<p class="NDLRefMemberFunction">void  RemoveRenderSurface(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a1c90207c9a9f0384d8ad0e75c8b68edf">efd::WindowRef</a></span> window)</p>
<p class="NDLRefMemberDescription">Removes a render surface from the render service. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">window</span></td>
    <td>The window handle for the surface. Note, on some platforms, this parameter has no meaning. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if successful, false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_render_context_1a511dc93c530b05a7e01e207d69d35f79"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="ecr__RenderSurface.htm">RenderSurface</a></span>*  GetRenderSurface(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a1c90207c9a9f0384d8ad0e75c8b68edf">efd::WindowRef</a></span> window) const</p>
<p class="NDLRefMemberDescription">Get the first render surface with a window matching the argument. </p>

<a name="classecr_1_1_render_context_1aeef76feffd79a665ab172f04a6bd1896"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="ecr__RenderSurface.htm">RenderSurface</a></span>*  GetRenderSurfaceAt(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> index) const</p>
<p class="NDLRefMemberDescription">Get the render surface at the given index. </p>

<a name="classecr_1_1_render_context_1a096e2f4f878815900fad645502c6a612"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetRenderSurfaceCount() const</p>
<p class="NDLRefMemberDescription">Get the number of render surfaces available. </p>
<a name="rendered_scene_functions"></a>
<p class="NDLRefHead1">Rendered Scene Functions</p>


<a name="classecr_1_1_render_context_1abe913ecaf22623b558e2a7d2b53c0151"></a>
<p class="NDLRefMemberFunction">virtual void  AddRenderedEntity(<br/><span class="NDLSystemFont"><a href="../egf/egf__Entity.htm">egf::Entity</a></span>* pEntity, <br/><span class="NDLSystemFont"><a href="../NiMain/NiAVObject.htm">NiAVObject</a></span>* pAVObject)</p>
<p class="NDLRefMemberDescription">Called when an entity with rendering properties receives a new scene graph. </p>

<a name="classecr_1_1_render_context_1aa1afe64f6b5a6af8d2c1560d3a6245fe"></a>
<p class="NDLRefMemberFunction">virtual void  RemoveRenderedEntity(<br/><span class="NDLSystemFont"><a href="../egf/egf__Entity.htm">egf::Entity</a></span>* pEntity, <br/><span class="NDLSystemFont"><a href="../NiMain/NiAVObject.htm">NiAVObject</a></span>* pAVObject)</p>
<p class="NDLRefMemberDescription">Called when an entity with rendering properties is about to have its scene graph removed. </p>

<a name="classecr_1_1_render_context_1aa16435e4d4c311d3dcf783251e6cffe8"></a>
<p class="NDLRefMemberFunction">virtual void  AddRenderedObject(<br/><span class="NDLSystemFont"><a href="ecr__SceneGraphService.htm#classecr_1_1_scene_graph_service_1a15b7b654f5037dc58de733d1aeb6f97d">SceneGraphService::SceneGraphHandle</a></span> handle, <br/><span class="NDLSystemFont"><a href="../NiMain/NiAVObject.htm">NiAVObject</a></span>* pAVObject)</p>
<p class="NDLRefMemberDescription">Called when an entity with rendering properties receives a new scene graph. </p>

<a name="classecr_1_1_render_context_1a9b75be56bbcc913353ffc87733689e84"></a>
<p class="NDLRefMemberFunction">virtual void  RemoveRenderedObject(<br/><span class="NDLSystemFont"><a href="ecr__SceneGraphService.htm#classecr_1_1_scene_graph_service_1a15b7b654f5037dc58de733d1aeb6f97d">SceneGraphService::SceneGraphHandle</a></span> handle, <br/><span class="NDLSystemFont"><a href="../NiMain/NiAVObject.htm">NiAVObject</a></span>* pAVObject)</p>
<p class="NDLRefMemberDescription">Called when an entity with rendering properties is about to have its scene graph removed. </p>
<a name="rendering_control_functions"></a>
<p class="NDLRefHead1">Rendering Control Functions</p>


<a name="classecr_1_1_render_context_1a987e98325a1bd1b1c7a21a10347655ea"></a>
<p class="NDLRefMemberFunction">void  SetBackgroundColor(const <span class="NDLSystemFont"><a href="../NiMain/NiColorA.htm">NiColorA</a></span>& kColor)</p>
<p class="NDLRefMemberDescription">Set the background color. </p>

<a name="classecr_1_1_render_context_1a26946de616600577410ea1e942323d79"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../NiMain/NiCullingProcess.htm">NiCullingProcess</a></span>*  GetCullingProcess()</p>
<p class="NDLRefMemberDescription">Return the culling process currently in use by the context. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
