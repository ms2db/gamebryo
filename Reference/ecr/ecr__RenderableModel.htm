<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>ecr::RenderableModel</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">ecr::RenderableModel</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../egf/egf__IBuiltinModelImpl.htm">egf::IBuiltinModelImpl</a></span></p>


<p class="NDLRefHeaderFile">&lt;RenderableModel.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classecr_1_1_renderable_model.gif" alt="Inheritance graph for ecr::RenderableModel"/>
  <p class="FigureCaption">Inheritance graph for ecr::RenderableModel</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">The <span class="NDLSystemFont">RenderableModel</span> class provides the built-in model functionality for the Renderable model in the StandardModelLibrary. </p>
<p class="NDLNormal">Entites that mix in Renderable use this built-in, with the expectation that other models or services will provide functionality to interpret the IsVisible property.</p>
<p class="NDLNormal">The <span class="NDLSystemFont">RenderableModel</span> class holds an internal copy of the IsVisible value and provides accessor functions, as is required for a built-in model. In addition, objects may be registered as callbacks to receieve notification of property changes, and other code may update the internal values directly. Any number of callbacks may be added, allowing multiple consumers of the data to register. See the <span class="NDLSystemFont"><a href="../egf/egf__IPropertyCallbackInvoker.htm">egf::IPropertyCallbackInvoker</a></span> class for the API to add and remove callbacks.</p>
<p class="NDLNormal">Note that EntityUpdate messages will be sent when an external source modifies the property values via the SetInternalIsVisible function. Code may choose to rely on the update messages rather than use the callback mechanism. </p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classecr_1_1_renderable_model_1a9c245a942908fd1b93596892da91e479"></a>
<p class="NDLRefMemberFunction">RenderableModel()</p>
<p class="NDLRefMemberDetailedDescription">Constructor sets all default properties. </p>

<a name="classecr_1_1_renderable_model_1a714161afc6ab2136d83e999c7fa95100"></a>
<p class="NDLRefMemberFunction">virtual ~RenderableModel()</p>
<p class="NDLRefMemberDescription">Virtual destructor does nothing. </p>
<a name="public_static_methods"></a>
<p class="NDLRefHead1">Public Static Methods</p>


<a name="classecr_1_1_renderable_model_1acbe02d21c542bdf3b90f5708d57e376f"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont"><a href="../egf/egf__IBuiltinModel.htm">egf::IBuiltinModel</a></span>*  RenderableModelFactory()</p>
<p class="NDLRefMemberDescription">The factory class for the Renderable built-in model. </p>
<p class="NDLRefMemberDetailedDescription">It is public to allow the <span class="NDLSystemFont"><a href="ecr__SceneGraphService.htm">ecr::SceneGraphService</a></span> to register the factory in its PreInit method. </p>

<a name="classecr_1_1_renderable_model_1a898d0c2727424a2187e13c2e7c3e5d4d"></a>
<p class="NDLRefMemberFunction">static void  Initialize()</p>
<p class="NDLRefMemberDescription">Init must be called before any instances of this class are created. </p>
<p class="NDLRefMemberDetailedDescription">The method allocates the callback list. </p>

<a name="classecr_1_1_renderable_model_1a47e1cfd0bb000990c176d2cb0cdd1d34"></a>
<p class="NDLRefMemberFunction">static void  Shutdown()</p>
<p class="NDLRefMemberDescription">Shutdown must be called after all instances of this class are deleted. </p>
<p class="NDLRefMemberDetailedDescription">The method deallocates the callback list. </p>
<a name="built-in_model_functionality"></a>
<p class="NDLRefHead1">Built-in Model Functionality</p>


<a name="classecr_1_1_renderable_model_1ab52aa966b1a7fd5eadcd529b41b5abab"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  Initialize(<br/><span class="NDLSystemFont"><a href="../egf/egf__Entity.htm">egf::Entity</a></span>* pOwner, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__list.htm">egf::PropertyDescriptorList</a></span>& defaults)</p>
<p class="NDLRefMemberDescription">Initialization function sets the entity and the default values for properties. </p>
<p class="NDLRefMemberDetailedDescription">Callbacks are not invoked on initialization. </p>

<a name="classecr_1_1_renderable_model_1aef13969dcb4eaf6161ed4afb04f99313"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  ResetProperty(const <span class="NDLSystemFont"><a href="../egf/egf__PropertyDescriptor.htm">egf::PropertyDescriptor</a></span>* pDefault)</p>
<p class="NDLRefMemberDescription">Resets the given property to the default. </p>
<p class="NDLRefMemberDetailedDescription">Callbacks are invoked. </p>

<a name="classecr_1_1_renderable_model_1a09298d29a7039a76c22183780261cd88"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  operator==(const IProperty& other) const</p>
<p class="NDLRefMemberDescription">Checks for equality of all properties. </p>
<a name="callback_registration"></a>
<p class="NDLRefHead1">Callback Registration</p>

<p class="NDLRefMemberDescription">Use these static methods to register and unregister for callbacks from this model. </p>

<a name="classecr_1_1_renderable_model_1a021e29ce0e8d176571a2eb18646f09aa"></a>
<p class="NDLRefMemberFunction">static void  AddCallback(<span class="NDLSystemFont"><a href="../egf/egf__IPropertyCallback.htm">egf::IPropertyCallback</a></span>* pCallback)</p>
<p class="NDLRefMemberDescription">Add a callback. </p>
<p class="NDLRefMemberDetailedDescription">A callback will be invoked on each event as many times as it is added. </p>

<a name="classecr_1_1_renderable_model_1ac0fdbced03f495e5f6f3e4635419acea"></a>
<p class="NDLRefMemberFunction">static void  RemoveCallback(<span class="NDLSystemFont"><a href="../egf/egf__IPropertyCallback.htm">egf::IPropertyCallback</a></span>* pCallback)</p>
<p class="NDLRefMemberDescription">Remove a callback. </p>
<p class="NDLRefMemberDetailedDescription">A single instance of the callback is removed. For example, if the callback is added twice, then removed once, it will still be invoked once on each event. </p>
<a name="property_accessors"></a>
<p class="NDLRefHead1">Property Accessors</p>


<a name="classecr_1_1_renderable_model_1af6f376eddcb35e3f3a0ea5c6ecb4b231"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  GetIsVisible() const</p>
<p class="NDLRefMemberDescription">Get the IsVisible property. </p>

<a name="classecr_1_1_renderable_model_1adcde9f0e97a40efb1516294b139ef12f"></a>
<p class="NDLRefMemberFunction">void  SetIsVisible(const <span class="NDLSystemFont">efd::Bool</span>& isVisible)</p>
<p class="NDLRefMemberDescription">Set the IsVisible property. </p>
<p class="NDLRefMemberDetailedDescription">The internally cached value is set. Callbacks are invoked with the IsVisible property ID if the value has changed. </p>

<a name="classecr_1_1_renderable_model_1ae6240ef867777ef2f91f4f817ef0d410"></a>
<p class="NDLRefMemberFunction">void  SetInternalIsVisible(<br/>const <span class="NDLSystemFont">efd::Bool</span> isVisible, <br/><span class="NDLSystemFont"><a href="../egf/egf__IPropertyCallback.htm">egf::IPropertyCallback</a></span>* ignoreCallback = 0)</p>
<p class="NDLRefMemberDescription">Set the IsVisible property directly, without passing through the entity property system. </p>
<p class="NDLRefMemberDetailedDescription">This method is to be used by code that manages IsVisible data from an external source. Such code should call the SetInternal methods with new values every time the property is known to have changed. If the new property value differs from that stored internally, the internal value is updated, the property is marked dirty, and callbacks are invoked.</p>
<p class="NDLRefMemberDetailedDescription">The ignoreCallback, if given, is not invoked in response to the change. The class setting the value if also a registered callback object, may use this to avoid getting a callback for a change that the class just caused. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
