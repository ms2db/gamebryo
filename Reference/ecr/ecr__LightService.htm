<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>ecr::LightService</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">ecr::LightService</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../efd/efd__ISystemService.htm">efd::ISystemService</a></span></p>


<p class="NDLRefHeaderFile">&lt;LightService.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classecr_1_1_light_service.gif" alt="Inheritance graph for ecr::LightService"/>
  <p class="FigureCaption">Inheritance graph for ecr::LightService</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal"><span class="NDLSystemFont">LightService</span> is a Gamebryo service which manages light sources and the lists of entities which they affect. </p>
<p class="NDLNormal"><span class="NDLSystemFont">LightService</span> uses a simple range based algorithm to determine which renderable entities are affected by which lights. <span class="NDLSystemFont">LightService</span> also manages shadow generators (optionally associated with directional, point, and spot lights), as well as the lists of entities which may cast and/or receive shadows.</p>
<p class="NDLNormal">When determining which lights are within range, the light service computes the variance of light ranges across the three cardinal axes. Using the axis with the largest variance, it ignores light to entity pairings which can not affect each other. Each potential pairing undergoes a more comprehensive test to determine if a light affects an entity. </p>

<a name="public_types"></a>
<p class="NDLRefHead1">Public Types</p>
<a name="classecr_1_1_light_service_1a07ee3e4410e8710559f81b283b217290"></a>
<p class=NDLRefHead2>anonymous enum</p>




<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">MAX_LIGHT_PRIORITY</span></td>
    <td>&nbsp;</td>
</tr>

  </tbody>
</table>
</div>


<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classecr_1_1_light_service_1aaa54938acc35b7b8e03dee74c3e0b0f5"></a>
<p class="NDLRefMemberFunction">LightService(<span class="NDLSystemFont">bool</span> enableAutomaticRelighting = true)</p>
<p class="NDLRefMemberDescription">Constructor for the <span class="NDLSystemFont">LightService</span>. </p>
<p class="NDLRefMemberDetailedDescription">Among other things, the constructor initializes the <span class="NDLSystemFont"><a href="../NiMain/NiShadowManager.htm">NiShadowManager</a></span>, which is initially set to be active. Also, all entities are initially set to cast and receive shadows. However, by default, all lights are initially set to not cast shadows. This approach makes it straightforward to selectively enable shadowing capabilities for individual lights, without having to consider the shadow manager itself or individual cast/receive shadow properties. </p>

<a name="classecr_1_1_light_service_1a72d1f82edeb25e9323d1ac9927c2e7f7"></a>
<p class="NDLRefMemberFunction">virtual const char*  GetDisplayName() const</p>
<p class="NDLRefMemberDescription">Returns the display name, <span class="NDLSystemFont">LightService</span>. </p>

<a name="classecr_1_1_light_service_1a8f58d3a451daa40c4e44a283e19a20c7"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a62e4d1bc94248c629612480b748bfd0e">efd::SyncResult</a></span>  OnPreInit(<span class="NDLSystemFont"><a href="../efd/efd__IDependencyRegistrar.htm">efd::IDependencyRegistrar</a></span>* pDependencyRegistrar)</p>
<p class="NDLRefMemberDescription">Performs simple pre-initialization and gets a pointer to the message service. </p>

<a name="classecr_1_1_light_service_1a3c1433359f528b6db642606c7b2c91b8"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ad81d366c75ea1e1119513a730f79910d">efd::AsyncResult</a></span>  OnInit()</p>
<p class="NDLRefMemberDescription">This method initializes the shadow click generator and activates it, initializes the shadow manager's scene camera, and creates a shadow render step and assigns the preprocessing callback function. </p>
<p class="NDLRefMemberDetailedDescription">During this process, any necessary PSSM configuration is also performed. OnInit also registers for local messages and caches pointers to other services necessary for the functioning of the <span class="NDLSystemFont">LightService</span>. </p>

<a name="classecr_1_1_light_service_1af83f6cc01652b476e2dbb9c65f8934a4"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ad81d366c75ea1e1119513a730f79910d">efd::AsyncResult</a></span>  OnTick()</p>
<p class="NDLRefMemberDescription">Each tick, the light manager calculates which lights affect which entity. </p>
<p class="NDLRefMemberDetailedDescription">If a light has changed position or rotation, it is compared against all active entities. If an entity has changed, it is compared against all active lights. </p>

<a name="classecr_1_1_light_service_1aa6f79afd38b1b19fb0ae03aa5ae43ad6"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ad81d366c75ea1e1119513a730f79910d">efd::AsyncResult</a></span>  OnShutdown()</p>
<p class="NDLRefMemberDescription">Shuts down the light service. </p>

<a name="classecr_1_1_light_service_1a070625898b61d1b54072712288ee4563"></a>
<p class="NDLRefMemberFunction">void  HandleEntityAddedMessage(<br/>const <span class="NDLSystemFont"><a href="../egf/egf__EntityChangeMessage.htm">egf::EntityChangeMessage</a></span>* pMessage, <br/><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span> targetChannel)</p>
<p class="NDLRefMemberDescription">This message handler is called when a new entity is added. </p>
<p class="NDLRefMemberDetailedDescription"><span class="NDLSystemFont">LightService</span> only handles entities that mix in the Light model in this handler. These entities are added to its internal list of lights.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMessage</span></td>
    <td>The entity message. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">targetChannel</span></td>
    <td>Unused argument. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_light_service_1af0ddd44e318ecfcf9c677461f04c3e25"></a>
<p class="NDLRefMemberFunction">void  HandleEntityRemovedMessage(<br/>const <span class="NDLSystemFont"><a href="../egf/egf__EntityChangeMessage.htm">egf::EntityChangeMessage</a></span>* pMessage, <br/><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span> targetChannel)</p>
<p class="NDLRefMemberDescription">This message handler is called when an entity has been removed from the entity manager. </p>
<p class="NDLRefMemberDetailedDescription">If the entity mixes in the Light model, the light service will remove that light from its internal list as well as removing its influence from all active renderable entities.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMessage</span></td>
    <td>The entity message. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">targetChannel</span></td>
    <td>Unused argument. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_light_service_1a1d3be4c791de1a9acfaeafe0e3501799"></a>
<p class="NDLRefMemberFunction">void  HandleEntityUpdatedMessage(<br/>const <span class="NDLSystemFont"><a href="../egf/egf__EntityChangeMessage.htm">egf::EntityChangeMessage</a></span>* pMessage, <br/><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span> targetChannel)</p>
<p class="NDLRefMemberDescription">This message handler is called when properties of an entity change. </p>
<p class="NDLRefMemberDetailedDescription">If the entity being updated is not a light, then check its shadow cast/receive property settings. Then iterate through all the shadow generators and ensure that, depending on the entity property settings, the entity and its scene graph cast shadows or not, and receive shadows or not, as appropriate.</p>
<p class="NDLRefMemberDetailedDescription">If the entity being updated is a light, then this message handler updates the underlying <span class="NDLSystemFont"><a href="../NiMain/NiLight.htm">NiLight</a></span> object's and/or corresponding (but optional) <span class="NDLSystemFont"><a href="../NiMain/NiShadowGenerator.htm">NiShadowGenerator</a></span> object's parameters, as needed.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMessage</span></td>
    <td>Entity change message. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">targetChannel</span></td>
    <td>Unused argument. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_light_service_1ac1325fc66d5e047dd474a1b704bddc01"></a>
<p class="NDLRefMemberFunction">void  HandleSceneGraphsUpdatedMessage(<br/>const <span class="NDLSystemFont"><a href="ecr__SceneGraphsUpdatedMessage.htm">SceneGraphsUpdatedMessage</a></span>* pMessage, <br/><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span> targetChannel)</p>
<p class="NDLRefMemberDescription">This message handler is called when properties of some set of scene graphs associated with entities change. </p>
<p class="NDLRefMemberDetailedDescription">If the entity being updated is not a light, then check its shadow cast/receive property settings. Then iterate through all the shadow generators and ensure that, depending on the entity property settings, the <span class="NDLSystemFont"><a href="../NiMain/NiNode.htm">NiNode</a></span> casts shadows or not, and receives shadows or not, as appropriate.</p>
<p class="NDLRefMemberDetailedDescription">If the entity being updated is a light, then this message handler updates the NiLight's and/or corresponding (but optional) NiShadowGenerator's parameters, as needed.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMessage</span></td>
    <td>Entity change message. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">targetChannel</span></td>
    <td>Unused argument. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_light_service_1a09b240e1c09e9c2225a335326f32eb6c"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  IsEntityLight(const <span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span>& entityID) const</p>
<p class="NDLRefMemberDescription">Returns true when an entity is a light, otherwise false. </p>

<a name="classecr_1_1_light_service_1a042dfb103cc2286b41b7613705021217"></a>
<p class="NDLRefMemberFunction">virtual void  RelightScene(<span class="NDLSystemFont">bool</span> onlyChangedObjects = false)</p>
<p class="NDLRefMemberDescription">Force the <span class="NDLSystemFont">LightService</span> to recompute which lights should affect which entities. </p>
<p class="NDLRefMemberDetailedDescription">It is safe to call this method during OnPreInit and OnInit. </p>

<a name="classecr_1_1_light_service_1afb17f634f86d739bd373296913fcc733"></a>
<p class="NDLRefMemberFunction">virtual void  SetUsePrecomputedLighting(<span class="NDLSystemFont">efd::Bool</span> usePrecomputedLighting)</p>
<p class="NDLRefMemberDescription">Tell the <span class="NDLSystemFont">LightService</span> whether to use dynamic lighting for precomputed lights on precomputed objects. </p>
<p class="NDLRefMemberDetailedDescription">This method forces relighting of the scene.</p>
<p class="NDLRefMemberDetailedDescription">It is safe to call this method during OnPreInit and OnInit. </p>

<a name="classecr_1_1_light_service_1a7f60cda593f06fb28632b5f4783cbd10"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">efd::Bool</span>  GetUsePrecomputedLighting() const</p>
<p class="NDLRefMemberDescription">Returns true if precomputed lighting should be used. </p>
<p class="NDLRefMemberDetailedDescription">It is safe to call this method during OnPreInit and OnInit. </p>

<a name="classecr_1_1_light_service_1a4cd21280a62d7a444674d1d2332476cf"></a>
<p class="NDLRefMemberFunction">void  EnableShadowing(<span class="NDLSystemFont">bool</span> bEnable)</p>
<p class="NDLRefMemberDescription">This convenience function enables or disables the <span class="NDLSystemFont"><a href="../NiMain/NiShadowManager.htm">NiShadowManager</a></span>. </p>
<p class="NDLRefMemberDetailedDescription">It must be called after OnInit has completed.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">bEnable</span></td>
    <td>True to enable, or false to disable. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_light_service_1ac22ea1a18196543c70ad24c0afce4f75"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../NiMain/NiLight.htm">NiLight</a></span>*  GetLightFromEntity(<span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span> id)</p>
<p class="NDLRefMemberDescription">Returns the scene graph lighting object for the given entity. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">The entity must have completed its creation lifecycle; calling this function before OnAssetsLoaded has finished may result in a NULL return value, as <span class="NDLSystemFont">LightService</span> may not have received the entity creation message.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">id</span></td>
    <td>The ID of the entity to locate. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The <span class="NDLSystemFont"><a href="../NiMain/NiLight.htm">NiLight</a></span> corresponding to the entity, or NULL if it cannot be found. </td>
</tr>

        </tbody>
    </table>
</div>


 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
