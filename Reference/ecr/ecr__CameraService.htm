<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>ecr::CameraService</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">ecr::CameraService</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../efd/efd__ISystemService.htm">efd::ISystemService</a></span></p>


<p class="NDLRefHeaderFile">&lt;CameraService.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classecr_1_1_camera_service.gif" alt="Inheritance graph for ecr::CameraService"/>
  <p class="FigureCaption">Inheritance graph for ecr::CameraService</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">The <span class="NDLSystemFont">CameraService</span> handles registration and runtime update of entities that mix in the Camera model. </p>
<p class="NDLNormal">Internally, it creates and manages <span class="NDLSystemFont"><a href="../NiMain/NiCamera.htm">NiCamera</a></span> objects that can be used by the Gamebryo renderers. The <span class="NDLSystemFont">CameraService</span> handles correct initialization and update of these <span class="NDLSystemFont"><a href="../NiMain/NiCamera.htm">NiCamera</a></span> objects using the various properties in the Camera model.</p>
<p class="NDLNormal">The <span class="NDLSystemFont">CameraService</span> also listens for entity update messages and refreshes the internal <span class="NDLSystemFont"><a href="../NiMain/NiCamera.htm">NiCamera</a></span> objects as the properties on entities change. </p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classecr_1_1_camera_service_1a100647cbaae42584cd4db6230a5a9978"></a>
<p class="NDLRefMemberFunction">CameraService()</p>
<p class="NDLRefMemberDescription">Default constructor. </p>

<a name="classecr_1_1_camera_service_1ae33f38aab73ba017100141a319feee35"></a>
<p class="NDLRefMemberFunction">virtual const char*  GetDisplayName() const</p>
<p class="NDLRefMemberDescription">Returns the display name, <span class="NDLSystemFont">CameraService</span>. </p>

<a name="classecr_1_1_camera_service_1a0e0427341719408a0ed4974877689d90"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a62e4d1bc94248c629612480b748bfd0e">efd::SyncResult</a></span>  OnPreInit(<span class="NDLSystemFont"><a href="../efd/efd__IDependencyRegistrar.htm">efd::IDependencyRegistrar</a></span>* pDependencyRegistrar)</p>
<p class="NDLRefMemberDescription">Performs pre-init operations including retrieving pointers to other necessary service and registering for necessary messages. </p>

<a name="classecr_1_1_camera_service_1ad44f9fa1c943d1460f43b51ff5444ddf"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ad81d366c75ea1e1119513a730f79910d">efd::AsyncResult</a></span>  OnInit()</p>
<p class="NDLRefMemberDescription">Performs initial updates on registered cameras. </p>
<p class="NDLRefMemberDetailedDescription">The initial update reads the relevant property values from the Camera model and sets them to the underlying <span class="NDLSystemFont"><a href="../NiMain/NiCamera.htm">NiCamera</a></span> object. </p>

<a name="classecr_1_1_camera_service_1a6e2ad33b2074e0bb10ccba586a84f476"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ad81d366c75ea1e1119513a730f79910d">efd::AsyncResult</a></span>  OnTick()</p>
<p class="NDLRefMemberDescription">Iterates over registered cameras and calls <span class="NDLSystemFont"><a href="../NiMain/NiAVObject.htm">NiCamera::Update</a></span> on each with the current game time. </p>

<a name="classecr_1_1_camera_service_1aa8df8afb93d259d21a9a0c0df0d7e1ca"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ad81d366c75ea1e1119513a730f79910d">efd::AsyncResult</a></span>  OnShutdown()</p>
<p class="NDLRefMemberDescription">Shuts down by unsubscribing to messages and releasing references to all camera entities. </p>

<a name="classecr_1_1_camera_service_1ae267494367f409a8a6851882b7d56588"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../NiMain/NiCamera.htm">NiCamera</a></span>*  CreateCamera(<br/>const <span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span> id, <br/><span class="NDLSystemFont"><a href="../NiMain/NiRenderTargetGroup.htm">NiRenderTargetGroup</a></span>* pRenderTarget)</p>
<p class="NDLRefMemberDescription">Creates a camera with the given entity ID. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">id</span></td>
    <td>The id for the camera. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pRenderTarget</span></td>
    <td>Render target group used to calculate the viewport and frustum values for the newly created camera. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The newly created <span class="NDLSystemFont"><a href="../NiMain/NiCamera.htm">NiCamera</a></span> object. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_camera_service_1a4f33bb5211c52400a8168e17fb92e080"></a>
<p class="NDLRefMemberFunction">virtual void  CreateCamera(<br/><span class="NDLSystemFont"><a href="../NiMain/NiCamera.htm">NiCamera</a></span>* pExistingCamera, <br/>const <span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span> id)</p>
<p class="NDLRefMemberDescription">Create a camera from an existing camera and using the given entity ID. </p>
<p class="NDLRefMemberDetailedDescription">This method is intended for registering cameras in pre-existing scene graphs (NIF files) that belong to a Mesh model entity. In practice, an application can wait for the scene graph's entity, get the camera using scene graph access functions provided by the <span class="NDLSystemFont"><a href="ecr__SceneGraphService.htm">ecr::SceneGraphService</a></span>, and register the camera for use with this method.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pExistingCamera</span></td>
    <td>An <span class="NDLSystemFont"><a href="../NiMain/NiCamera.htm">NiCamera</a></span> node that came from some other source. It is stored but not otherwise modified. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">id</span></td>
    <td>The entity ID for an entity that could be considered as owning this camera. It must be unique (only on camera per entity) and we recommend using the scene graph entity where possible. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_camera_service_1a174453196eacb5bb339fd389f2c458c0"></a>
<p class="NDLRefMemberFunction">void  SetCamera(<br/><span class="NDLSystemFont">NiWindowRef</span> windowHandle, <br/>const <span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span>& id)</p>
<p class="NDLRefMemberDescription">Set the camera by ID for a given window handle. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">windowHandle</span></td>
    <td>Window reference for the camera to target. This reference is resolved internally to an <span class="NDLSystemFont"><a href="ecr__RenderSurface.htm">ecr::RenderSurface</a></span> object. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">id</span></td>
    <td>ID of the camera to set. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_camera_service_1a80f52f76e0326c23de8a52be0f2f9482"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="ecr__CameraData.htm">CameraData</a></span>*  GetActiveCamera(<span class="NDLSystemFont"><a href="ecr__RenderSurface.htm">RenderSurface</a></span>* pSurface)</p>
<p class="NDLRefMemberDescription">Get the active camera for a given <span class="NDLSystemFont"><a href="ecr__RenderSurface.htm">RenderSurface</a></span> object. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pSurface</span></td>
    <td>The surface for which the camera is active. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The active camera. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_camera_service_1a84057649c446e4f5eabdca1b72265aff"></a>
<p class="NDLRefMemberFunction">void  SetActiveCamera(<br/><span class="NDLSystemFont"><a href="../egf/egf__EntityID.htm">egf::EntityID</a></span> id, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a1c90207c9a9f0384d8ad0e75c8b68edf">efd::WindowRef</a></span> window)</p>
<p class="NDLRefMemberDescription">Set a camera to be the new active scene camera. </p>
<p class="NDLRefMemberDetailedDescription">This method updates the <span class="NDLSystemFont"><a href="../NiMain/NiShadowManager.htm">NiShadowManager</a></span> class as well with the new active camera as the scene camera. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">id</span></td>
    <td>Entity id of the camera to set as active. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">window</span></td>
    <td>Reference to the window that the camera targets. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_camera_service_1a3234332fdefb539bab70046b9cc93e2b"></a>
<p class="NDLRefMemberFunction">void  HandleEntityDiscoverMessage(<br/>const <span class="NDLSystemFont"><a href="../egf/egf__EntityChangeMessage.htm">egf::EntityChangeMessage</a></span>* pMessage, <br/><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span> targetChannel)</p>
<p class="NDLRefMemberDescription">This message handler is called when a new entity is discovered. </p>
<p class="NDLRefMemberDetailedDescription">The entity is inspected for the Camera model. If found, the entity is registered with the Camera service. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMessage</span></td>
    <td>The entity message. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">targetChannel</span></td>
    <td>The category on which the message arrived. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_camera_service_1ad7f75a6860b181f9050dbefa099be355"></a>
<p class="NDLRefMemberFunction">void  HandleEntityRemovedMessage(<br/>const <span class="NDLSystemFont"><a href="../egf/egf__EntityChangeMessage.htm">egf::EntityChangeMessage</a></span>* pMessage, <br/><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span> targetChannel)</p>
<p class="NDLRefMemberDescription">This message handler is called when an entity is has been removed from the entity manager. </p>
<p class="NDLRefMemberDetailedDescription">The camera service removes any references to the entity if any are held. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMessage</span></td>
    <td>The entity message. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">targetChannel</span></td>
    <td>The category on which the message arrived. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_camera_service_1ace9a6bff6c964f6cb71fe76d4c58a16f"></a>
<p class="NDLRefMemberFunction">void  HandleEntityUpdatedMessage(<br/>const <span class="NDLSystemFont"><a href="../egf/egf__EntityChangeMessage.htm">egf::EntityChangeMessage</a></span>* pMessage, <br/><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span> targetChannel)</p>
<p class="NDLRefMemberDescription">This message handler is called when properties of an entity change. </p>
<p class="NDLRefMemberDetailedDescription">If the referenced entity is registerd with the camera service, the internal <span class="NDLSystemFont"><a href="../NiMain/NiCamera.htm">NiCamera</a></span> object is updated with any potentially new values from the entity's properties. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMessage</span></td>
    <td>The entity message. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">targetChannel</span></td>
    <td>The category on which the message arrived. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_camera_service_1a4d40469d823e29348f54df050a95be83"></a>
<p class="NDLRefMemberFunction">virtual void  OnSurfaceRemoved(<br/><span class="NDLSystemFont"><a href="ecr__RenderService.htm">RenderService</a></span>* pService, <br/><span class="NDLSystemFont"><a href="ecr__RenderSurface.htm">RenderSurface</a></span>* pSurface)</p>
<p class="NDLRefMemberDescription">Overridden from <span class="NDLSystemFont"><a href="ecr__IRenderServiceDelegate.htm">IRenderServiceDelegate</a></span> to remove the camera from the active list. </p>
<a name="camera_control_helper_methods"></a>
<p class="NDLRefHead1">Camera Control Helper Methods</p>


<a name="classecr_1_1_camera_service_1a84cbb74c8d80990fcab4063f572dc117"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>  Dolly(<br/>const float dZ, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& inputPoint, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiMatrix3.htm">NiMatrix3</a></span>& inputRotation)</p>
<p class="NDLRefMemberDescription">Returns a point that results from starting at the inputPoint and moving dZ units in the positive x direction relative to the rotation matrix provided in the inputRotation argument. </p>

<a name="classecr_1_1_camera_service_1a28daa6ef89c7625a6449080e28ca337f"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont"><a href="../NiMain/NiMatrix3.htm">NiMatrix3</a></span>  Look(<br/>const float dX, <br/>const float dY, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiMatrix3.htm">NiMatrix3</a></span>& inputRotation, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& up)</p>
<p class="NDLRefMemberDescription">Returns a matrix that results from starting with a rotation matrix of inputRotation and "looking" dX units in the z direction, and dY units in the y direction, with the directions relative to the inputRotation argument. </p>
<p class="NDLRefMemberDetailedDescription">The resulting look vector is converted to a rotation matrix that obeys the up vector argument.</p>
<p class="NDLRefMemberDetailedDescription">This function is useful if you supply a camera's rotation and mouse movement deltas into the arguments. The resulting rotation will be the camera's new rotation after looking up and to the right in screen space. </p>

<a name="classecr_1_1_camera_service_1a7c92d7687cdb0e9603109fc1f0422c7d"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>  Pan(<br/>const float dX, <br/>const float dY, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& inputPoint, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiMatrix3.htm">NiMatrix3</a></span>& inputRotation)</p>
<p class="NDLRefMemberDescription">Returns a point that results from starting at the inputPoint and moving dX in the negative z direction and dY in the y direction, with the directions relative to the rotation passed into the function in the inputRotation argument. </p>

<a name="classecr_1_1_camera_service_1ac77a2a564f855d77ff2b0544bd891ac1"></a>
<p class="NDLRefMemberFunction">static void  Orbit(<br/>const float dX, <br/>const float dY, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& inputPoint, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiMatrix3.htm">NiMatrix3</a></span>& inputRotation, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& center, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& up, <br/><span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& returnPoint, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMatrix3.htm">NiMatrix3</a></span>& returnRotation)</p>
<p class="NDLRefMemberDescription">You supply an object's location and rotation with inputPoint and inputRotation, respectively, and you get a new position and rotation of the object as if it was orbiting around the center point. </p>
<p class="NDLRefMemberDetailedDescription">The new rotation will obey the up vector argument. The dX and dY arguments tell how far perpendicular and towards the provided up-axis to go. The return values are stored in the returnPoint and returnRotation function arguments. </p>

<a name="classecr_1_1_camera_service_1a8bf1551836c176f7ac5fdbd126129aec"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont"><a href="../NiMain/NiFrustum.htm">NiFrustum</a></span>  OrthoZoom(<br/>const float dZ, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiFrustum.htm">NiFrustum</a></span>& inputFrustum)</p>
<p class="NDLRefMemberDescription">Returns a new <span class="NDLSystemFont"><a href="../NiMain/NiFrustum.htm">NiFrustum</a></span> that has the same parameters as inputFrustum, but with the right, left, top, and bottom parameters reduced by the same amount proportional to the dZ argument. </p>

<a name="classecr_1_1_camera_service_1aa2fbeb018b875f7fcbbabed924814e3e"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont"><a href="../NiMain/NiMatrix3.htm">NiMatrix3</a></span>  LookAt(<br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& focus, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& source, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& up)</p>
<p class="NDLRefMemberDescription">Returns a rotation matrix that is constructed using the vector from the source point to the focus point that obeys the up vector. </p>

<a name="classecr_1_1_camera_service_1a007472e94697d3e81d05682ee917841a"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>  PanTo(<br/>const <span class="NDLSystemFont"><a href="../NiMain/NiBound.htm">NiBound</a></span>& focus, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiMatrix3.htm">NiMatrix3</a></span>& currentRotation, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiFrustum.htm">NiFrustum</a></span>& frustum)</p>
<p class="NDLRefMemberDescription">Returns a point to which you could move a camera such that it could see the entire focus bound in its frustum if the cameras frustum was equal to the argument frustum and was rotated with the currentRotation matrix. </p>

<a name="classecr_1_1_camera_service_1a22ed316e0f19b0b74f968011196d9527"></a>
<p class="NDLRefMemberFunction">static void  MouseToRay(<br/>const float x, <br/>const float y, <br/>const unsigned int appWidth, <br/>const unsigned int appHeight, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiCamera.htm">NiCamera</a></span>* pCamera, <br/><span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& origin, <br/><span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& direction)</p>
<p class="NDLRefMemberDescription">This function is intended to turn a mouse cursor location in pixels into a world space ray. </p>
<p class="NDLRefMemberDetailedDescription">The x and y arguments are the pixel location of the cursor, coming from the top left of the camera's view frustum. The appWidth and appHeight arguments provide the pixel width and pixel height of that the frustum covers. The pCamera argument provides the camera from which to cast the ray. The origin and direction arguments store the return values for the resulting ray. </p>

<a name="classecr_1_1_camera_service_1a1cdd921d937bce1f68bcd452798936e5"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>  TranslateOnAxis(<br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& startingPoint, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& axis, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& inputOrigin, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& inputDirection)</p>
<p class="NDLRefMemberDescription">Returns a point on the line defined by the point startingPoint and vector axis that is closest to the line defined by the point inputOrigin and vector inputDirection. </p>

<a name="classecr_1_1_camera_service_1a0f96f697a3b843d122dadee41805a94e"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>  TranslateOnPlane(<br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& startingPoint, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& normal, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& inputOrigin, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& inputDirection)</p>
<p class="NDLRefMemberDescription">Returns a point on the plane defined by the point startingPoint and the normal vector normal that is the intersection with the line defined by the point inputOrigin and vector inputDirection. </p>

<a name="classecr_1_1_camera_service_1a9de853a211fd15b486d6ad2b4288faca"></a>
<p class="NDLRefMemberFunction">static float  RotateAboutAxis(<br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& startingPoint, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& axis, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& tangent, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& biTangent, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& inputOrigin, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& inputDirection)</p>
<p class="NDLRefMemberDescription">Returns a radian indicating an amount of rotation about the axis. </p>
<p class="NDLRefMemberDetailedDescription">The startingPoint is the center point of the rotation, and the axis argument is the rotation axis. The rotation is expressed in terms of number of radians around the axis starting from the tangent direction and moving towards the biTangent direction. Both the tangent and bitangent arguments should be perpendicular to each other and the rotation axis.</p>
<p class="NDLRefMemberDetailedDescription">The inputOrigin and inputDirection arguments specify a line. The specified line is projected onto the plane defined by the starting point and rotation axis. The returned rotation is the rotation of the resulting vector from the tangent argument. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
