<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>ecrInput::InputServiceActionMap</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">ecrInput::InputServiceActionMap</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../efd/efd__MemObject.htm">efd::MemObject</a></span></p>


<p class="NDLRefHeaderFile">&lt;InputServiceActionMap.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classecr_input_1_1_input_service_action_map.gif" alt="Inheritance graph for ecrInput::InputServiceActionMap"/>
  <p class="FigureCaption">Inheritance graph for ecrInput::InputServiceActionMap</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">An action map encapsulates a collection of named events. </p>
<p class="NDLNormal">An action map is internally a collection of events of type <span class="NDLSystemFont"><a href="ecrInput__InputServiceEvent.htm">ecrInput::InputServiceEvent</a></span>. Events are stored in a map&lt;name, pointer&gt; container. When an action map is active, it receives <span class="NDLSystemFont"><a href="ecrInput__InputServiceActionMap.htm#classecr_input_1_1_input_service_action_map_1aeb112b4974f3cbb499bae5ec0f192209">ProcessInput()</a></span> calls from <span class="NDLSystemFont"><a href="ecrInput__InputService.htm">InputService</a></span> each tick and calls the same method on all contained events. Depending on the flags for a given event, and the set of actions that have been triggered by input, a message may be sent for the event, with a message category as stored in the event.</p>
<p class="NDLNormal">The same action may appear in multiple events. When events are processed to see if they have fired, the events with the ACTION_COMBO flag set are checked first. Any event that seems to be part of a combo will not be considered for ACTION_AND or default (OR) events. However, the same event may be considered for multiple ACTION_COMBO events in one tick.</p>
<p class="NDLNormal">A combo event fires when all of the actions in the event occur, in the order they appear in the event, with no more that the timeout time passing between each successive action. The actions may occur over multiple ticks of the service. If the timeout condition fails partway through an action, all of the actions that contributed to the combo up to the time it fails are considered as activated on the current tick for other events using the same action.</p>
<p class="NDLNormal">An action map defines methods for adding, removing and querying events. There are two ways to add an event: add an existing event class (suitable for custom events) or specify event parameters only. In the latter case, the action map creates the event instance, sets up its parameters, and adds it to the event map. See <span class="NDLSystemFont"><a href="ecrInput__InputService.htm#classecr_input_1_1_input_service_1a0cc1b8e5db531594adea5c7f2291a540">ecrInput::InputService::AddAction</a></span>, <span class="NDLSystemFont"><a href="ecrInput__InputService.htm#classecr_input_1_1_input_service_1aeb60b1c904cf6446cf22387c3f46a485">ecrInput::InputService::AddDPad</a></span> and <span class="NDLSystemFont"><a href="ecrInput__InputService.htm#classecr_input_1_1_input_service_1a943251bf43401394fe4a4543059d5cc0">ecrInput::InputService::AddStick</a></span>. </p>

<a name="public_types"></a>
<p class="NDLRefHead1">Public Types</p>


<a name="classecr_input_1_1_input_service_action_map_1a47d93a12d6439a7609c212c8fcdbd51f"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__map.htm">efd::map</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>, <span class="NDLSystemFont"><a href="ecrInput__InputServiceEvent.htm">InputServiceEvent</a></span>*&gt;  InputServiceEventMap</p>
<p class="NDLRefMemberFunction"></p>

<a name="classecr_input_1_1_input_service_action_map_1a180c54044a7a37cd041955b3b56d0a4c"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__map.htm#classefd_1_1map_1a685ef119a0ce6d6871cb38198940232c">InputServiceEventMap::const_iterator</a></span>  Iterator</p>
<p class="NDLRefMemberFunction"></p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classecr_input_1_1_input_service_action_map_1aeb112b4974f3cbb499bae5ec0f192209"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  ProcessInput(<br/><span class="NDLSystemFont"><a href="ecrInput__InputService.htm">InputService</a></span>* pInput, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> currentTime)</p>
<p class="NDLRefMemberDescription">Calls ProcessInput on all contained events. </p>
<p class="NDLRefMemberDetailedDescription">The <span class="NDLSystemFont"><a href="ecrInput__InputService.htm">ecrInput::InputService</a></span> OnTick method calls this function. Applications must not. </p>

<a name="classecr_input_1_1_input_service_action_map_1a41bcfa84fa18e11a2c8766b011ae0622"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>&  GetName() const</p>
<p class="NDLRefMemberDescription">Returns the name of this action map. </p>

<a name="classecr_input_1_1_input_service_action_map_1ac001976da97f83837a93f21d75623e65"></a>
<p class="NDLRefMemberFunction">void  SetName(const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& name)</p>
<p class="NDLRefMemberDescription">Sets the name of this action map. </p>

<a name="classecr_input_1_1_input_service_action_map_1a00d8ecfa65ff29298d659992f943f365"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="ecrInput__InputServiceEvent.htm">InputServiceEvent</a></span>*  AddEvent(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& name, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span>& msgCat, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> flags, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> timeout = 1.0f)</p>
<p class="NDLRefMemberDescription">Create an event and add it to the action map. </p>
<p class="NDLRefMemberDetailedDescription">If the named event already exists, it is replaced by this one. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">name</span></td>
    <td>Name of the event. This should be unique. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">msgCat</span></td>
    <td>ID of message, sent by this event. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">flags</span></td>
    <td>Event flags. An ORed combination of <span class="NDLSystemFont"><a href="ecrInput__InputService.htm#classecr_input_1_1_input_service_1ac790b43bcc1586b26ca086cb2a91ca8c">ecrInput::InputService::EventFlags</a></span>. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">timeout</span></td>
    <td>Sets maximum time between actions for combos. Default timeout is 1 second. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Returns a pointer to event or NULL in case of error</td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_input_1_1_input_service_action_map_1ad99d7d360fb7cfec186b5a4c0a384ddc"></a>
<p class="NDLRefMemberFunction">void  AddEvent(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& name, <br/><span class="NDLSystemFont"><a href="ecrInput__InputServiceEvent.htm">InputServiceEvent</a></span>* pEvent)</p>
<p class="NDLRefMemberDescription">Add an event to the action map with the specified name. </p>
<p class="NDLRefMemberDetailedDescription">If the named event already exists, it is replaced by the new one. </p>

<a name="classecr_input_1_1_input_service_action_map_1ab567fc193928d882577a99e700748c27"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="ecrInput__InputServiceEvent.htm">InputServiceEvent</a></span>*  FindEvent(const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& name) const</p>
<p class="NDLRefMemberDescription">Returns a pointer to the event with given name or NULL if it cannot be found. </p>

<a name="classecr_input_1_1_input_service_action_map_1a468da10a312a2e272538225f33c68e24"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetEventCount() const</p>
<p class="NDLRefMemberDescription">Returns the number of events in this action map. </p>

<a name="classecr_input_1_1_input_service_action_map_1acc0e56cb21f3e4b0ff1b02d4a7abea79"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="ecrInput__InputServiceActionMap.htm#classecr_input_1_1_input_service_action_map_1a180c54044a7a37cd041955b3b56d0a4c">InputServiceActionMap::Iterator</a></span>  GetFirstEvent() const</p>
<p class="NDLRefMemberDescription">Returns an iterator for the first event in the action map. </p>

<a name="classecr_input_1_1_input_service_action_map_1a45b750551e416ef729228f44c0847f32"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  GetNextEvent(<br/><span class="NDLSystemFont"><a href="ecrInput__InputServiceActionMap.htm#classecr_input_1_1_input_service_action_map_1a180c54044a7a37cd041955b3b56d0a4c">InputServiceActionMap::Iterator</a></span>& itor, <br/><span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& name, <br/><span class="NDLSystemFont"><a href="ecrInput__InputServiceEvent.htm">InputServiceEvent</a></span> *& pEvent) const</p>
<p class="NDLRefMemberDescription">Queries the name and pointer of a given event and advances the iterator to the next element. </p>
<p class="NDLRefMemberDetailedDescription">Returns true on success and false if there are no more events. </p>

<a name="classecr_input_1_1_input_service_action_map_1a3f22d86bcf04e15ddd0a33f165d41fc7"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  RemoveEvent(const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& name)</p>
<p class="NDLRefMemberDescription">Removes the event with the name. </p>
<p class="NDLRefMemberDetailedDescription">Returns true on success. </p>

<a name="classecr_input_1_1_input_service_action_map_1ae9c83c471530cdc9cf03f36fa0eb0544"></a>
<p class="NDLRefMemberFunction">void  DeleteAllEvents()</p>
<p class="NDLRefMemberDescription">Clears the action map. </p>
<p class="NDLRefMemberDetailedDescription">All events are removed and destroyed. </p>
<a name="construction_and_destruction."></a>
<p class="NDLRefHead1">Construction and Destruction.</p>


<a name="classecr_input_1_1_input_service_action_map_1aca9eddeabbf942da730d82f6a05687b1"></a>
<p class="NDLRefMemberFunction">InputServiceActionMap(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& name, <br/><span class="NDLSystemFont"><a href="../efd/efd__MessageService.htm">efd::MessageService</a></span>* pMessageService)</p>
<p class="NDLRefMemberDescription">Constructor. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">name</span></td>
    <td>Name of this action map. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pMessageService</span></td>
    <td>Pointer to the message service. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_input_1_1_input_service_action_map_1a0347dee03d223b592f16401593d04599"></a>
<p class="NDLRefMemberFunction">virtual ~InputServiceActionMap()</p>
<p class="NDLRefMemberDescription">Virtual Destructor. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
