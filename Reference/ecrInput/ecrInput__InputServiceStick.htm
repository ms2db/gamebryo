<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>ecrInput::InputServiceStick</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">ecrInput::InputServiceStick</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="ecrInput__InputServiceActionBase.htm">ecrInput::InputServiceActionBase</a></span></p>


<p class="NDLRefHeaderFile">&lt;InputServiceStick.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classecr_input_1_1_input_service_stick.gif" alt="Inheritance graph for ecrInput::InputServiceStick"/>
  <p class="FigureCaption">Inheritance graph for ecrInput::InputServiceStick</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">This class processes a game pad stick action. </p>
<p class="NDLNormal">This action can be assigned to game pad stick or formed from any 3 axes, specified by custom semantics. Range and modifiers are checked if requested by flags.</p>
<p class="NDLNormal">There are 2 variants for return value, depending on SPHERIC_COORDS flag:</p>
<ul>
<li>Square coordinates. Magnitude equals 1.0f. X, Y and Z coordinates specify physical position of stick and can be each in range [-1..1]. Range treated as minimum and maximum values for each axis.</li>
<li>Spheric coordinates. Magnitude is sqrt(x^2 + y^2 + z^2) and represents distance from stick center to current stick position. Coordinates specify point on unit sphere (circle) and show direction. Range is specified by minimum and maximum radius (XMin and XMax), and 2 ranges for spheric coordinate system angles: YMin and YMax are min and max values for phi and ZMin and ZMax are min and max values for theta. This gives an ability to define reaction sector or ring. If min value for angles equal max value, angle is not checked and 2 radius define inner and outer radius of reaction ring. For example, action can trigger if stick moved more than 1/4 from center (XMin = 0.25, XMax = 1.0, YMin = 0.0, YMax = 0.0); more than 1/2 from center and in up position (XMin = 0.5, XMax = 1.0, YMin = -sqrt(2)/2, YMax = sqrt(2)/2), etc.</li></ul>
<p class="NDLNormal">The Z coordinate s used only for custom sticks, where the Z axis semantic is set. </p>

<a name="public_static_methods"></a>
<p class="NDLRefHead1">Public Static Methods</p>


<a name="classecr_input_1_1_input_service_stick_1a44afdb88bf671391f1eb5b9a9dda4f56"></a>
<p class="NDLRefMemberFunction">static void  LoadTranslationMap()</p>
<p class="NDLRefMemberDescription">Load translation maps. </p>

<a name="classecr_input_1_1_input_service_stick_1a8aaa958a091e1bf67ab601d115982860"></a>
<p class="NDLRefMemberFunction">static void  UnloadTranslationMap()</p>
<p class="NDLRefMemberDescription">Unload translation maps. </p>
<a name="action_data_getters_and_setters."></a>
<p class="NDLRefHead1">Action data getters and setters.</p>


<a name="classecr_input_1_1_input_service_stick_1ad105f26efe53603b1ba3050caf237221"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="ecrInput__InputService.htm#classecr_input_1_1_input_service_1a206a758b04c716edceb62b1900ab64ae">InputService::StickType</a></span>  GetType() const</p>
<p class="NDLRefMemberDescription">Gets the stick type. </p>

<a name="classecr_input_1_1_input_service_stick_1a4f0c63e11f75bf5391648b8b05d45cbc"></a>
<p class="NDLRefMemberFunction">void  SetType(<span class="NDLSystemFont"><a href="ecrInput__InputService.htm#classecr_input_1_1_input_service_1a206a758b04c716edceb62b1900ab64ae">InputService::StickType</a></span> stickType)</p>
<p class="NDLRefMemberDescription">Sets the stick type. </p>

<a name="classecr_input_1_1_input_service_stick_1a5ec95cd6fdc76b2168d2004f8f781c6f"></a>
<p class="NDLRefMemberFunction">void  GetCustomSemantic(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>& axisSemanticX, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>& axisSemanticY, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>& axisSemanticZ) const</p>
<p class="NDLRefMemberDescription">Gets custom semantics for each axis. </p>

<a name="classecr_input_1_1_input_service_stick_1a3e91c48a96deab3bba5933ae9aed6ed1"></a>
<p class="NDLRefMemberFunction">void  SetCustomSemantic(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> axisSemanticX, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> axisSemanticY, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> axisSemanticZ)</p>
<p class="NDLRefMemberDescription">Sets custom semantics for each axis. </p>

<a name="classecr_input_1_1_input_service_stick_1a8e921114c96a8b361335b5a90cd17d0a"></a>
<p class="NDLRefMemberFunction">void  GetRange(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>& xMin, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>& xMax, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>& yMin, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>& yMax, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>& zMin, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>& zMax) const</p>
<p class="NDLRefMemberDescription">Get stick range. </p>

<a name="classecr_input_1_1_input_service_stick_1ad3aaa49eb50b09558c7148127768b37e"></a>
<p class="NDLRefMemberFunction">void  SetRange(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> xMin, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> xMax, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> yMin, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> yMax, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> zMin, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> zMax)</p>
<p class="NDLRefMemberDescription">Set stick range. </p>

<a name="classecr_input_1_1_input_service_stick_1af9e48eb1842b2ff97a944012bd7b7f22"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  IsInRange(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> magnitude, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> x, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> y, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> z) const</p>
<p class="NDLRefMemberDescription">Return true if provided value is in range of this action. </p>
<a name="construction_and_destruction."></a>
<p class="NDLRefHead1">Construction and Destruction.</p>


<a name="classecr_input_1_1_input_service_stick_1a5bfb822de85baf2382d18704d28fb2eb"></a>
<p class="NDLRefMemberFunction">InputServiceStick()</p>
<p class="NDLRefMemberDescription">Default constructor. </p>

<a name="classecr_input_1_1_input_service_stick_1a687f5233f38495ba1afcb9a449a65ea1"></a>
<p class="NDLRefMemberFunction">InputServiceStick(<br/><span class="NDLSystemFont"><a href="ecrInput__InputService.htm#classecr_input_1_1_input_service_1a206a758b04c716edceb62b1900ab64ae">InputService::StickType</a></span> stickType, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> flags, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> appData = 0, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> deviceID = 0, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> modifiers = 0, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> minRangeX = -1.0f, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> maxRangeX = 1.0f, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> minRangeY = -1.0f, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> maxRangeY = 1.0f, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> minRangeZ = -1.0f, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> maxRangeZ = 1.0f, <br/><span class="NDLSystemFont"><a href="ecrInput__InputService.htm#classecr_input_1_1_input_service_1ae4a7669c73b85f6ffb05845bf3fd1550">InputService::InputFilteringCallback</a></span> pFilter = 0, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> axisSemanticX = 0, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> axisSemanticY = 0, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> axisSemanticZ = 0)</p>
<p class="NDLRefMemberDescription">Initializing constructor. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">stickType</span></td>
    <td>See <span class="NDLSystemFont"><a href="ecrInput__InputService.htm#classecr_input_1_1_input_service_1a206a758b04c716edceb62b1900ab64ae">InputService::StickType</a></span>. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">flags</span></td>
    <td>An ORed combination of <span class="NDLSystemFont"><a href="ecrInput__InputService.htm#classecr_input_1_1_input_service_1a9c3c71e808b76618c57757b9c7864c4b">ecrInput::InputService::ActionFlags</a></span>. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">appData</span></td>
    <td>User-specified data. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">deviceID</span></td>
    <td>Which device to listen for events on. Typically, deviceID is always 0 for keyboard and mouse, and may be 0 to NiInputSystem::MAX_GAMEPADS for GamePads. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">modifiers</span></td>
    <td>Device modifiers. These should be an ORed combination of modifiers specific to the device type, taken from one of <span class="NDLSystemFont"><a href="../NiInput/NiInputKeyboard.htm">NiInputKeyboard::Modifiers</a></span> or <span class="NDLSystemFont"><a href="../NiInput/NiInputMouse.htm">NiInputMouse::Modifiers</a></span> (there are no modifiers for GamePad input). </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">minRangeX</span></td>
    <td>Minimum range on X axis for this action. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">maxRangeX</span></td>
    <td>Maximum range on X axis for this action. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">minRangeY</span></td>
    <td>Minimum range on Y axis for this action. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">maxRangeY</span></td>
    <td>Maximum range on Y axis for this action. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">minRangeZ</span></td>
    <td>Minimum range on Z axis for this action. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">maxRangeZ</span></td>
    <td>Maximum range on Z axis for this action. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pFilter</span></td>
    <td>A post-process callback for input. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">axisSemanticX</span></td>
    <td>Semantic of the X axis for custom stick. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">axisSemanticY</span></td>
    <td>Semantic of the Y axis for custom stick. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">axisSemanticZ</span></td>
    <td>Semantic of the Z axis for custom stick. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_input_1_1_input_service_stick_1a24460c41bdba3159d3e4c4546332a07d"></a>
<p class="NDLRefMemberFunction">virtual ~InputServiceStick()</p>
<p class="NDLRefMemberDescription">Virtual Destructor. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
