<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiPath</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiPath</p>

<p class="NDLRefParentage">&lt;NiPath.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>A platform-independent class containing utility functions for
dealing with filesystem paths.</p>

<p class="NDLRefHead1">Static Member Functions</p>

<p class="NDLRefMemberFunction">static bool IsRelative(const char
*pcPath)</p>

<p class="NDLRefMemberDescription">Returns true if <span class=
"NDLSystemFont">pcPath</span> is a relative path, or false if it
is an absolute path. An absolute path is one that begins with a
slash or a drive letter.</p>

<p class="NDLRefMemberFunction">static bool
IsUniqueAbsolute(const char *pcPath)</p>

<p class="NDLRefMemberDescription">Returns true if <span class=
"NDLSystemFont">pcPath</span> is an absolute path in
"standardized" form (see <span class=
"NDLSystemFont">NiPath::Standardize</span>), with no removable
".." substring (see <span class=
"NDLSystemFont">NiPath::RemoveDotDots</span>).</p>

<p class="NDLRefMemberFunction">static size_t ConvertToRelative(
char* pcRelativePath, size_t stRelBytes, const char*
pcAbsolutePath, const char* pcRelativeToHere)</p>

<p class="NDLRefMemberDescription">Converts the absolute path
<span class="NDLSystemFont">pcAbsolutePath</span> to a relative
path relative to absolute path <span class=
"NDLSystemFont">pcRelativeToHere</span>, writes the resulting
relative path to <span class=
"NDLSystemFont">pcRelativePath</span>, and returns the number of
bytes written. <span class="NDLSystemFont">pcRelativePath</span>
is assumed to have been allocated with <span class=
"NDLSystemFont">stRelBytes</span> bytes of memory. This function
assumes that <span class="NDLSystemFont">pcAbsolutePath</span>
and <span class="NDLSystemFont">pcRelativeToHere</span> are both
absolute paths. This function will return 0 if <span class=
"NDLSystemFont">pcAbsolutePath</span> and <span class=
"NDLSystemFont">pcRelativeToHere</span> have no common root, for
example if one is located on a different drive than the
other.</p>

<p class="NDLRefMemberFunction">static size_t ConvertToAbsolute(
char* pcPath, size_t stBytes, const char* pcRelativeToHere)</p>

<p class="NDLRefMemberDescription">Converts relative path
<span class="NDLSystemFont">pcPath</span> relative to
<span class="NDLSystemFont">pcRelativeToHere</span> to a
standardized absolute path. Assumes <span class=
"NDLSystemFont">pcPath</span> was allocated with <span class=
"NDLSystemFont">stBytes</span> bytes of memory. Returns the
string length of pcPath. This function will return 0 if the
resulting path will not fit within the size of the buffer, and
<span class="NDLSystemFont">pcPath</span> will be set to an empty
string. If <span class="NDLSystemFont">pcRelativeToHere</span> is
an empty string, the current working directory will be used
instead. None of the <span class="NDLSystemFont">char*</span>
input parameters should be <span class=
"NDLSystemFont">NULL</span>.</p>

<p class="NDLRefMemberFunction">static size_t ConvertToAbsolute(
char* pcPath, size_t stBytes)</p>

<p class="NDLRefMemberDescription">Converts relative path
<span class="NDLSystemFont">pcPath</span> relative to the current
working directory to a standardized absolute path. Assumes
<span class="NDLSystemFont">pcPath</span> was allocated with
<span class="NDLSystemFont">stBytes</span> bytes of memory.
Returns the string length of pcPath. This function will return 0
if the resulting path will not fit within the size of the buffer,
and <span class="NDLSystemFont">pcPath</span> will be set to an
empty string. The <span class="NDLSystemFont">char*</span> input
parameter should not be <span class=
"NDLSystemFont">NULL</span>.</p>

<p class="NDLRefMemberFunction">static size_t ConvertToAbsolute(
char* pcAbsolutePath, size_t stBytes, const char* pcRelativePath,
const char* pcRelativeToHere)</p>

<p class="NDLRefMemberDescription">Converts relative path
<span class="NDLSystemFont">pcRelativePath</span> relative to
<span class="NDLSystemFont">pcRelativeToHere</span> to a
standardized absolute path <span class=
"NDLSystemFont">pcAbsolutePath</span>. Assumes <span class=
"NDLSystemFont">pcAbsolutePath</span> was allocated with
<span class="NDLSystemFont">stBytes</span> bytes of memory.
Returns the string length of pcAbsolutePath. This function will
return 0 if the resulting path will not fit within the size of
the buffer, and <span class="NDLSystemFont">pcAbsolutePath</span>
will be set to an empty string. If <span class=
"NDLSystemFont">pcRelativeToHere</span> is null or an empty
string, the current working directory will be used instead. None
of the other <span class="NDLSystemFont">char*</span> input
parameters should be null.</p>

<p class="NDLRefMemberFunction">static void
RemoveSlashDotSlash(char* pcString)</p>

<p class="NDLRefMemberDescription">Given an absolute or relative
path <span class="NDLSystemFont">pcString</span>, replaces
in-place any removable "\.\" substring in the path with "\". For
example, will convert C:\Foo\.\Bar to C:\Foo\Bar.</p>

<p class="NDLRefMemberFunction">static void RemoveDotDots(char*
pcString)</p>

<p class="NDLRefMemberDescription">Given an absolute or relative
path <span class="NDLSystemFont">pcString</span>, removes
in-place any removable ".." substring from the path. For example,
will convert C:\Foo\..\Bar to C:\Bar.</p>

<p class="NDLRefMemberFunction">static bool
GetCurrentWorkingDirectory(char* pcPath, size_t stDestSize)</p>

<p class="NDLRefMemberDescription">Writes a string with the
current working directory to <span class=
"NDLSystemFont">pcPath</span>, assuming <span class=
"NDLSystemFont">pcPath</span> was allocated with <span class=
"NDLSystemFont">stDestSize</span> bytes. Returns true if the
function succeeded.</p>

<p class="NDLRefMemberFunction">static bool
GetExecutableDirectory(char* pcPath, size_t stDestSize)</p>

<p class="NDLRefMemberDescription">Writes a string with the
application executable's directory to <span class=
"NDLSystemFont">pcPath</span>, assuming <span class=
"NDLSystemFont">pcPath</span> was allocated with <span class=
"NDLSystemFont">stDestSize</span> bytes. Returns true if the
function succeeded.</p>

<p class="NDLRefMemberFunction">static bool Standardize(char*
pcPath)</p>

<p class="NDLRefMemberDescription">Removes in-place extra slashes
from <span class="NDLSystemFont">pcPath</span> and ensures that
all slashes are the correct type (forward or backward) for the
target platform. Returns true if any changes were made to the
string, false if no changes were necessary.</p>

<p class="NDLRefMemberFunction">static void
ReplaceInvalidFilenameCharacters(char* pcFilename, char
cReplacement)</p>

<p class="NDLRefMemberDescription">Given the string <span class=
"NDLSystemFont">pcFilename</span>, replaces all characters that
are invalid for a filename with <span class=
"NDLSystemFont">cReplacement</span>. Invalid characters include:
/, \, :, *, ?, ", &lt;,&gt;, and |. NOTE: Because slashes are
treated as invalid, this function should not be used on full
paths, only filenames.</p>

<p class="NDLRefMemberFunction">static bool
SetCWDandEWDfromArgV0(const char* pcArgV0)</p>

<p class="NDLRefMemberDescription">[PS3 only] Meant to be used
with main() parameter argv[0], this function strips the filename
from <span class="NDLSystemFont">pcArgV0</span> and sets the
current working directory and executable working directory to a
standardized version of the path that remains. If <span class=
"NDLSystemFont">pcArgV0</span> begins with "/app_home/x:", where
x is any character, the path is modified to begin with
"/host_root" instead.</p>

<p class="NDLRefMemberFunction">static void
SetExecutableDirectory(const char* pcPath)</p>

<p class="NDLRefMemberDescription">[PS3 only] Sets the executable
working directory to <span class=
"NDLSystemFont">pcPath</span>.</p>

<p class="NDLRefMemberFunction">static void
SetCurrentWorkingDirectory(const char* pcPath)</p>

<p class="NDLRefMemberDescription">[PS3 only] Sets the current
working directory to <span class=
"NDLSystemFont">pcPath</span>.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
