<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiSystem Library Release Notes</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>NiSystem Library Release Notes</h1>

<p><a href="#Added_Features_and_Fixed_Bugs">Added Features,
Changed Behavior, and Fixed Bugs</a></p>

<p><a href="#Known_Issues_and_Limitations">Known Issues and
Limitations</a></p>

<a name="Added_Features_and_Fixed_Bugs" id="Added_Features_and_Fixed_Bugs"></a><h2>Added Features, Changed Behavior, and Fixed Bugs</h2>

<h3>Gamebryo LightSpeed 3.2</h3>

<ul>
  <li>None in this release.</li>
</ul>

<h3>Gamebryo LightSpeed 3.1</h3>

<ul>
  <li>Fixed thread safety issue that could occur during thread shutdown when thread local stoage support is enabled.</li>
</ul>

<h3>Gamebryo LightSpeed 3.0</h3>

<ul>
    <li>Deprecated and removed undocumented global function
    <span class="NDLSystemFont">NiGetFileSize</span>.</li>

    <li>Removed <span class=
    "NDLSystemFont">NiBuildConfiguration.h</span>.</li>

    <li>Many classes and headers in NiSystem have been moved to
    the Foundation library, but a <a href=
    "../../Convert/Announce/Foundation_Bridge_Layer.htm">bridge
    layer</a> exists to present an equivalent interface for
    backwards compatibility. These headers are considered
    deprecated, but are marked as such.</li>
    
    <li>Some asserts in CPU identification code for PC were disabled.
    These asserts could intermittently fail on Pentium D processors 
    under heavy load returning a smaller number of logical processors 
    than the machine actually had.</LI>
</ul>

<h3>Gamebryo 2.6.0</h3>

<ul>
    <li>Added the ability to pass <a href=
    "../../Reference/NiSystem/NiMemHint.htm">memory hints</a> to
    the allocators when performing allocations through the
    Gamebryo <a href=
    "../../Programmer/General_Topics/Overview_of_Programming_for_Memory.htm">
    memory system</a>. These hints can include platform-specific
    information like a desired memory arena, or more general
    hints such as expected memory usage (for example, as a
    texture, which could imply an arena on a particular
    platform).</li>

    <li>Added the function <a href=
    "../../Reference/NiSystem/System_Query_Routines.htm"><span class="NDLSystemFont">
    NiResetBaseTime</span></a> to allow applications to reset the
    time returned by <span class=
    "NDLSystemFont">NiGetCurrentTimeInSec</span> to 0.0f seconds.
    This function can help long running applications avoid issues
    with floating point precision as time values increase.</li>
</ul>

<h3>Gamebryo 2.5.0</h3>

<ul>
    <li>Added an <span class="NDLSystemFont">NiFloat16</span>
    class to provide support for half precision floats</li>

    <li>Added <span class="NDLSystemFont"><a href=
    "../../Reference/NiSystem/NiMemoryDefines.htm#StackAllocRoutines">
    NiStackAlloc</a></span> as a wrapper for <span class=
    "NDLSystemFont">alloca</span> or <span class=
    "NDLSystemFont">_malloca</span>. Also added <span class=
    "NDLSystemFont">NiStackFree</span> to clean up memory
    allocated by <span class="NDLSystemFont">NiStackAlloc</span>
    on those platforms that use <span class=
    "NDLSystemFont">_malloca</span>. Always call NiStackFree in
    addition to NiStackAlloc for more portable code.</li>

    <li>Added two new processor detection functions to
    <span class="NDLSystemFont"><a href=
    "../../Reference/NiSystem/NiSystemDesc.htm">NiSystemDesc</a></span>,
    <span class="NDLSystemFont">GetPhysicalProcessorCount</span>
    and <span class="NDLSystemFont">GetPhysicalCoreCount</span>.
    These functions can be used to more accurately determine the
    target CPU topology.</li>

    <li>Added methods for streaming of null-terminated strings to
    <a href=
    "../../Reference/NiSystem/NiBinaryStream.htm">NiBinaryStream</a>.</li>

    <li>Fixed issue where <span class="NDLSystemFont"><a href=
    "../../Reference/NiSystem/NiPath.htm">NiPath::RemoveDotDots</a></span>
    could fail.</li>

    <li><span class="NDLSystemFont">NIASSERT</span> now calls a
    <span class="expandtext">function pointer when asserts fail.
    You can replace the default handler with one of your
    own.</span></li>

    <li><span class="expandtext">Changes have been made to
    the</span> <a href=
    "../../Reference/NiSystem/NiStaticDataManager.htm"><span class="NDLSystemFont">
    NiStaticDataManager</span></a> <span class="expandtext">class
    and</span> <span class="NDLSystemFont">NiSDMMacros.h</span>
    <span class="expandtext">header file to enable specification
    of the order of static data initialization and shutdown. See
    the <a href=
    "../../Convert/Previous/Static_Data_Manager_Changes.htm">conversion
    guide</a> for details.</span></li>

    <li><span class="expandtext">T</span>he <span class=
    "NDLSystemFont"><a href=
    "../../Reference/NiSystem/NiThreadProcedure.htm">NiThreadProcedure</a></span>
    method's lone parameter has been changed from <span class=
    "NDLSystemFont">void*</span> to <span class=
    "NDLSystemFont">NiThread*</span> to clarify the purpose of
    the parameter and to make it more type safe.</li>

    <li>Added <span class="NDLSystemFont"><a href=
    "../../Reference/NiSystem/Platform_Independent_Wrappers_For_System_Routines.htm#NiMemmove">
    NiPrefetch128</a></span> as a cross-platform mechanism for
    providing hints of memory usage to reduce cache latency.
    Users are encouraged to profile heavily when using this
    function since indiscriminate usage can reduce
    performance.</li>

    <li>The class <span class="NDLSystemFont"><a href=
    "../../Reference/NiSystem/NiRWLock.htm">NiRWLock</a></span>
    was added. This class implements a platform independent
    reader-writer lock which can be very useful for protecting
    data that needs simultaneous read access from many threads
    but has very infrequent write access.</li>

    <li><a href=
    "../../Reference/NiSystem/NiMemTracker.htm"><span class=
    "NDLSystemFont">NiMemTracker</span></a> has added several new
    methods, including the ability to enable or disable the log
    output using the <span class=
    "NDLSystemFont">SetWriteToLog</span> method. Additionally,
    externally allocated memory can be recorded and tracked using
    the <span class=
    "NDLSystemFont">NiTrackAlloc</span>/<span class=
    "NDLSystemFont">NiTrackFree</span> methods.</li>

    <li><span class="NDLSystemFont">NIRELEASE</span> and
    <span class="NDLSystemFont">NISHIPPING</span> <span class=
    "NDLSystemFont">DLL</span> configurations now have
    <span class="NDLSystemFont"><a href=
    "../../Reference/NiSystem/NiLogger.htm">NiLogger</a></span>
    enabled. Currently the only configuration that by default has
    NiLogger disabled is NISHIPPING non-DLL build.</li>

    <li>Fixed an issue with PS3 <span class=
    "NDLSystemFont">NiThread</span> where the stack size was
    always set to the default stack size.</li>
</ul>

<h3>Gamebryo 2.3.0</h3>

<ul>
    <li>For <a href=
    "../../Reference/NiSystem/NiMemoryDefines.htm"><span class=
    "NDLSystemFont">NiMemoryDefines</span></a>, <a href=
    "../../Reference/NiSystem/NiAllocator.htm"><span class=
    "NDLSystemFont">NiAllocator</span></a>, <a href=
    "../../Reference/NiSystem/NiMemManager.htm"><span class=
    "NDLSystemFont">NiMemManager</span></a>, <a href=
    "../../Reference/NiSystem/NiMemTracker.htm"><span class=
    "NDLSystemFont">NiMemTracker</span></a>, and <a href=
    "../../Reference/NiSystem/NiStandardAllocator.htm"><span class="NDLSystemFont">
    NiStandardAllocator</span></a>: added new methods to track
    external allocations, <span class=
    "NDLSystemFont">NiTrackAlloc</span> and <span class=
    "NDLSystemFont">NiTrackFree</span>. Note that these methods
    do not actually allocate or free memory, they simply provide
    hooks for a custom allocator to recognize these allocations.
    Also note that the NiExternal* functions do not automatically
    register to be tracked.</li>

    <li>Reordered the shutdown routine for <span class=
    "NDLSystemFont"><a href=
    "../../Reference/NiSystem/NiStaticDataManager.htm">NiStaticDataManager</a></span>
    to call libraries in the opposite order of when they were
    initialized. This allows libraries with dependencies on other
    libraries to shutdown in a more appropriate order.</li>

    <li>Fixed a bug in <span class="NDLSystemFont"><a href=
    "../../Reference/NiSystem/NiPath.htm">NiPath</a>::ConvertToAbsolute</span>
    that was improperly constructing an absolute path to the root
    of the file system when the "relative to here" path passed in
    was empty. Instead, that function will now substitute the
    current working directory for the "relative to here" path if
    it is empty. The function will also accept a null pointer as
    the "relative to here" path, which it will treat as an empty
    path.</li>

    <li>Added callback functionality to <span class=
    "NDLSystemFont"><a href=
    "../../Reference/NiSystem/NiMemStream.htm">NiMemStream</a></span>
    for resizing the stream. Different growth behavior can be
    specified via the callback. Previously, the stream grew
    exponentially using inline logic. The new default callback
    grows exponentially up to a limit which can be set by the
    user. After that limit, it grows linearly.</li>
</ul>

<h3>Gamebryo 2.2.0</h3>

<ul>
    <li>Added a Shipping <a href=
    "../../GetStart/PC/Gamebryo_Build_Configurations.htm">build
    configuration</a> and removed NiProfile and NiMemory
    builds.</li>

    <li>Added <span class=
    "NDLSystemFont">NiBuildConfiguration.h</span> to define when
    memory management, release mode logging, and metrics are
    turned on.</li>

    <li>Added a platform-independent class called <a href=
    "../../Reference/NiSystem/NiPath.htm"><span class=
    "NDLSystemFont">NiPath</span></a> containing static utility
    functions for dealing with filesystem paths. This new class
    offers support for standardizing paths, converting to and
    from absolute and relative paths, and the like.</li>

    <li>The <a href=
    "../../Reference/NiSystem/NiMemTracker.htm"><span class=
    "NDLSystemFont">NiMemTracker</span></a> constructor now has
    the ability to specify whether or not to write a log to disk.
    This allows an app to perform memory tracking but the results
    are not saved to disk.</li>
</ul>

<h3>Gamebryo 2.1.0</h3>

<ul>
    <li>Fixed a problem that allowed an <span class=
    "NDLSystemFont"><a href=
    "../../Reference/NiSystem/NiThread.htm">NiThread</a></span>
    object to be deleted before the thread it represented had
    actually completed.</li>

    <li>Changed <a href=
    "../../Reference/NiSystem/NiFilename.htm"><span class=
    "NDLSystemFont">NiFilename::GetFullPath</span></a> so that it
    will not overflow the destination buffer.</li>

    <li>Changed all allocations to go through the memory manager.
    This allows Gamebryo to be a "black box" with respect to
    memory allocations. Please see <a href=
    "../../Programmer/General_Topics/Custom_Allocation.htm">Custom
    Allocation</a> for more details on this new system.</li>

    <li>Added <span class="NDLSystemFont"><a href=
    "../../Reference/NiSystem/NiMemoryDefines.htm#StandardAllocRoutines">
    NiAlloc</a>, <a href=
    "../../Reference/NiSystem/NiMemoryDefines.htm#StandardAllocRoutines">
    NiFree</a>, <a href=
    "../../Reference/NiSystem/NiMemoryDefines.htm#StandardAllocRoutines">
    NiMalloc</a>, <a href=
    "../../Reference/NiSystem/NiMemoryDefines.htm#StandardAllocRoutines">
    NiRealloc</a>, <a href=
    "../../Reference/NiSystem/NiMemoryDefines.htm#AlignedAllocRoutines">
    NiAlignedMalloc</a>, <a href=
    "../../Reference/NiSystem/NiMemoryDefines.htm#AlignedAllocRoutines">
    NiAlignedFree</a>,</span> and <span class=
    "NDLSystemFont"><a href=
    "../../Reference/NiSystem/NiMemoryDefines.htm#AlignedAllocRoutines">
    NiAlignedRealloc</a></span> methods that wrap their standard
    library equivalents. Please see <a href=
    "../../Programmer/General_Topics/Custom_Allocation.htm">Custom
    Allocation</a> for more details on this new system.</li>

    <li>Added <a href=
    "../../Reference/NiSystem/NiMemObject.htm"><span class=
    "NDLSystemFont">NiMemObject</span></a>. All Gamebryo objects
    requiring constructors and destructors inherit from this
    class, which overrides new and delete. Allocations should now
    use <a href=
    "../../Reference/NiSystem/NiMemoryDefines.htm#NewAndDelete"><span class="NDLSystemFont">
    NiNew</span></a> and <a href=
    "../../Reference/NiSystem/NiMemoryDefines.htm#NewAndDelete"><span class="NDLSystemFont">
    NiDelete</span></a> rather than using "new" and "delete".
    Please see <a href=
    "../../Programmer/General_Topics/Custom_Allocation.htm">Custom
    Allocation</a> for more details on this new system.</li>
</ul>

<h3>Gamebryo 2.0.0</h3>

<ul>
    <li><b>Minimum NIF
    Version</b>&mdash;the minimum (oldest) NIF version
    supported by Gamebryo 2.0 is version 4.2.1.0 (files with this
    NIF version were generated by the tools shipped with
    NetImmerse 4.2.1).</li>

    <li>Added the following wrappers to NiSystem to facilitate
    anticipated .NET 2005 / VC80 compatibility: NiStrcpy,
    NiStrncpy, NiStrcat, NiStrtok, NiSprintf, NiMemcpy,
    NiMemmove. Refer to NiSystem's documentation on <a href=
    "../../Reference/NiSystem/Platform_Independent_Wrappers_For_System_Routines.htm">
    Platform Independent Wrappers For System Routines</a> for
    more information.</li>

    <li>The macros in <span class="NDLSystemFont"><a href=
    "../../Reference/NiSystem/NiLogger.htm">NiLog.h</a></span>
    have been changed to allow for the "Program Edit and
    Continue" debugging configuration to be used in Visual
    Studio.NET 2003.</li>

    <li>In previous releases of Gamebryo, <span class=
    "NDLSystemFont"><a href=
    "../../Reference/NiSystem/NiLogger.htm">NiLogger</a></span>
    could crash if data was logged when a log file was not open
    and valid.  This has been fixed - the logged string will
    simply be ignored if there is no valid log file.</li>

    <li>A new macro, <span class=
    "NDLSystemFont">GAMEBRYO_SDK_VERSION</span>, is defined to
    allow code to be conditionally compiled for different
    versions of Gamebryo. Refer to the <a href=
    "../../Reference/NiSystem/NiVersion.htm"><span class=
    "NDLSystemFont">NiVersion</span></a> doc for more
    information.</li>

    <li>Added a class to encapsulate common system variables,
    <span class="NDLSystemFont"><a href=
    "../../Reference/NiSystem/NiSystemDesc.htm">NiSystemDesc</a></span>.</li>

    <li>Added a class to encapsulate endian conversion, <a href=
    "../../Reference/NiSystem/NiEndian.htm"><span class=
    "NDLSystemFont">NiEndian</span></a>.</li>

    <li>The function <span class=
    "NDLSystemFont">NiFile::GetFileSize</span> was made
    virtual.</li>

    <li>A new threading class, <span class=
    "NDLSystemFont"><a href=
    "../../Reference/NiSystem/NiLoopedThread.htm">NiLoopedThread</a></span>
    was added to encapsulate repeated tasks that can be
    parallelized.</li>
</ul>

<a name="Known_Issues_and_Limitations" id="Known_Issues_and_Limitations"></a><h2>Known Issues and Limitations</h2>

<ul>
    <li>Some Gamebryo DLL-based libraries call
    LoadLibrary/FreeLibrary on other libraries during their
    DLL-main. With DLL-usage in general, use of these calls can
    lead to issues where an application that exits without
    shutting everything down correctly may unload a DLL by force
    prior to unloading the DLL that loaded it. This circumstance
    can lead to a situation where the DLL that performed the
    LoadLibrary call will fail trying to call FreeLibrary on it.
    As long as the NiInit/NiShutdown pair is called correctly by
    your application, however, you should not encounter this
    issue.</li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
