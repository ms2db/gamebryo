<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiFloat16</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiFloat16</p>

<p class="NDLRefParentage">&lt;NiFloat16.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>A platform-independent class designed to support 2 byte
half-floats. The code is based off of ILM's half class and the
licensing information for this class can be found in both the
source and in the <a href=
"../../GetStart/All/Third_Party_Code.htm">Third Party Code</a>
section of the Gamebryo documentation. The NiFloat16
implementation uses 1 bit for sign, 5 bits for exponent, and 10
bits for the mantissa. The class is designed to operate similarly
to the built-in C++ IEEE 754 single-precision floating point type
in terms of performing arithmetic expressions and
inter-operations with floats and doubles.</p>

<p>The NiFloat16 class can represent positive and negative
numbers whose magnitude is between roughly 6.1e-5 and 6.5e+4 with
a relative error of 9.8e-4. Numbers that are smaller than 6.1e-5
can be represented with an absolute error of 6.0e-8. Finally, all
integers from -2048 to +2048 can be represented exactly.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiFloat16()</p>

<p class="NDLRefMemberDescription">The default constructor
provides no initialization.</p>

<p class="NDLRefMemberFunction">NiFloat16(float f)</p>

<p class="NDLRefMemberDescription">Initializes the NiFloat16
object with the value provided. Note that overflow is
possible.</p>

<p class="NDLRefHead1">Static Member Functions</p>

<p class="NDLRefMemberFunction">static NiFloat16 posInf()</p>

<p class="NDLRefMemberDescription">This method will return an
<span class="NDLSystemFont">NiFloat16</span> representing
+Infinity.</p>

<p class="NDLRefMemberFunction">static NiFloat16 negInf()</p>

<p class="NDLRefMemberDescription">This method will return an
<span class="NDLSystemFont">NiFloat16</span> representing
-Infinity.</p>

<p class="NDLRefMemberFunction">static NiFloat16 qNAN()</p>

<p class="NDLRefMemberDescription">This method will return an
<span class="NDLSystemFont">NiFloat16</span> with the bit pattern
<span class="NDLSystemFont">0111111111111111</span>.</p>

<p class="NDLRefMemberFunction">static NiFloat16 sNAN()</p>

<p class="NDLRefMemberDescription">This method will return an
<span class="NDLSystemFont">NiFloat16</span> with the bit pattern
<span class="NDLSystemFont">0111110111111111</span>.</p>

<p class="NDLRefHead1">Operators</p>

<p class="NDLRefMemberFunction">operator float() const</p>

<p class="NDLRefMemberDescription">Conversion to standard 32 bit
float</p>

<p class="NDLRefMemberFunction">NiFloat16 operator- () const</p>

<p class="NDLRefMemberDescription">The subtraction operator.</p>

<p class="NDLRefMemberFunction">NiFloat16 &amp;operator =
(NiFloat16 h)</p>

<p class="NDLRefMemberFunction">NiFloat16 &amp;operator = (float
f)</p>

<p class="NDLRefMemberDescription">The supported assignment
operations.</p>

<p class="NDLRefMemberFunction">NiFloat16 &amp;operator +=
(NiFloat16 h)</p>

<p class="NDLRefMemberFunction">NiFloat16 &amp;operator += (float
f)</p>

<p class="NDLRefMemberDescription">The supported increment
operations.</p>

<p class="NDLRefMemberFunction">NiFloat16 &amp;operator -=
(NiFloat16 h)</p>

<p class="NDLRefMemberFunction">NiFloat16 &amp;operator -= (float
f)</p>

<p class="NDLRefMemberDescription">The supported decrement
operations.</p>

<p class="NDLRefMemberFunction">NiFloat16 &amp;operator *=
(NiFloat16 h)</p>

<p class="NDLRefMemberFunction">NiFloat16 &amp;operator *= (float
f)</p>

<p class="NDLRefMemberDescription">The supported in-place scaling
operations.</p>

<p class="NDLRefMemberFunction">NiFloat16 &amp;operator /=
(NiFloat16 h)</p>

<p class="NDLRefMemberFunction">NiFloat16 &amp;operator /= (float
f)</p>

<p class="NDLRefMemberDescription">The supported in-place scalar
division operations.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">NiFloat16 round(unsigned int n)
const</p>

<p class="NDLRefMemberDescription">This method will round to
n-bit precision where n should be between 0 and 10. After
rounding, the significand's 10-n least significant bits will be
zero.</p>

<p class="NDLRefMemberFunction">bool isFinite() const</p>

<p class="NDLRefMemberDescription">This method will return true
if the number is normalized, denormalized, or zero. In all other
cases, it will return false.</p>

<p class="NDLRefMemberFunction">bool isNormalized() const</p>

<p class="NDLRefMemberDescription">This method will return true
if the number is normalized and false otherwise.</p>

<p class="NDLRefMemberFunction">bool isDenormalized() const</p>

<p class="NDLRefMemberDescription">This method will return true
if the number is denormalized and false otherwise.</p>

<p class="NDLRefMemberFunction">bool isZero() const</p>

<p class="NDLRefMemberDescription">This method will return true
if the number is zero and false otherwise.</p>

<p class="NDLRefMemberFunction">bool isNAN() const</p>

<p class="NDLRefMemberDescription">This method will return true
if the number is NAN and false otherwise.</p>

<p class="NDLRefMemberFunction">bool isInfinity() const</p>

<p class="NDLRefMemberDescription">This method will return true
if the number is positive or negative infinity and false
otherwise.</p>

<p class="NDLRefMemberFunction">bool isNegative() const</p>

<p class="NDLRefMemberDescription">This method will return true
if the sign bit is set (ie, negative) and false otherwise.</p>

<p class="NDLRefMemberFunction">unsigned short bits() const</p>

<p class="NDLRefMemberFunction">void setBits(unsigned short
bits)</p>

<p class="NDLRefMemberDescription">Provides access to the
internal representation of the <span class=
"NDLSystemFont">NiFloat16</span>.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
