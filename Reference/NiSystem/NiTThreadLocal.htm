<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiTThreadLocal</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiTThreadLocal</p>

<p class="NDLRefParentage">&lt;NiTThreadLocal.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>A platform-independent wrapper class to handle storing
thread-local data. Note that the templated type must be less than
or equal to the size of a <span class=
"NDLSystemFont">void*</span> on the current platform. If larger
sizes are needed, simply store a pointer to the larger data
structure.</p>

<p>Thread-local storage (TLS) is valuable as it allows for
"global" or "static" scope data to be unique per running thread
instance. Once a thread-local variable is created, all existing
and future threads will have their own copy of this variable.
This variable is initialized to NULL by default. Each platform
may have limitations on the total number of TLS variables, so
please consult your platform documentation for limitations.</p>

<p>The TLS value will not be deleted or have a destructor called.
Therefore, it is best if the templated type is a primitive type
and not a class instance.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiTThreadLocal()</p>

<p class="NDLRefMemberDescription">Default constructor. If valid,
the value of the TLS is NULL.</p>

<p class="NDLRefMemberFunction">NiTThreadLocal(const T&amp;
kObject)</p>

<p class="NDLRefMemberDescription">Initial value constructor. If
valid, the value of the TLS for the calling context is
<span class="NDLSystemFont">kObject</span>. All other values are
NULL.</p>

<p class="NDLRefHead1">Destructors</p>

<p class="NDLRefMemberFunction">~NiTThreadLocal()</p>

<p class="NDLRefMemberDescription">Frees the thread-local storage
handle.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">bool IsValid() const</p>

<p class="NDLRefMemberDescription">Determine whether or not this
TLS is valid.</p>

<p class="NDLRefMemberFunction">operator T() const</p>

<p class="NDLRefMemberDescription">Default conversion to the
templated type.</p>

<p class="NDLRefMemberFunction">NiTThreadLocal&amp;
operator=(const T&amp; kObject)</p>

<p class="NDLRefMemberDescription">Assignment operator for the
templated type.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
