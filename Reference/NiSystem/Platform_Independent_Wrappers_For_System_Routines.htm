<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Platform Independent Wrappers For System Routines</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>


<h1>Platform Independent Wrappers For System Routines</h1>

<h2>String Manipulation Functions</h2>

<p class="NDLRefMemberFunction"><a name=NiStrcpy></a>char* NiStrcpy(char* 
 pcDest, size_t stDestSize, const char* pcSrc)</p>

<p class="NDLRefMemberDescription">System-independent wrapper for <span class="NDLSystemFont">strcpy</span>.</p>

<p class="NDLRefMemberFunction"><a name=NiStrncpy></a>char* NiStrncpy(char* 
 pcDest, size_t stDestSize, const char* pcSrc, size_t stCount)</p>

<p class="NDLRefMemberDescription">System-independent wrapper for <span class="NDLSystemFont">strncpy</span>. 
 Note that <span class="NDLSystemFont">stCount</span> represents the number 
 of characters, not including the terminating NULL character, that should 
 be copied, so <span class="NDLSystemFont">stCount</span> must be less than 
 <span class="NDLSystemFont">stDestSize</span>. If it is not less than <span 
 class="NDLSystemFont">stDestSize</span>, then the function will assert, 
 will not copy any of <span class="NDLSystemFont">pcSrc</span> to <span class="NDLSystemFont">pcDest</span>, 
 and will only put a NULL character in <span class="NDLSystemFont">pcDest[0]</span>. 
 Alternatively, the value <span class="NDLSystemFont">NI_TRUNCATE</span> 
 can be passed into the <span class="NDLSystemFont">stCount</span> parameter, 
 this will cause the function to copy as many characters of <span class="NDLSystemFont">pcSrc</span> 
 as will fit into <span class="NDLSystemFont">pcDest</span>, leaving room 
 for the terminating NULL character.</p>

<p class="NDLRefMemberDescription">In all cases, this function will terminate 
 <span class="NDLSystemFont">pcDest</span> with a NULL character.</p>

<p class="NDLRefMemberFunction"><a name=NiStrcat></a>char* NiStrcat(char* 
 pcDest, size_t stDestSize, const char* pcSrc)</p>

<p class="NDLRefMemberDescription">System-independent wrapper for <span class="NDLSystemFont">strcat</span>.</p>

<p class="NDLRefMemberFunction"><a name=NiStrtok></a>char* NiStrtok(char* 
 pcString, const char* pcDelimit, char** ppcContext)</p>

<p class="NDLRefMemberDescription">System-independent wrapper for <span class="NDLSystemFont">strtok</span>.</p>

<p class="NDLRefMemberFunction"><a name=NiSprintf></a>int NiSprintf(char* 
 pcDest, size_t stDestSize, const char* pcFormat, ...)</p>

<p class="NDLRefMemberDescription">System-independent wrapper for <span class="NDLSystemFont">sprintf</span>. 
 The return value indicates the number of characters that was written to 
 the destination buffer, excluding the terminating null character. If the 
 combined string specified by the format string and its parameters exceeds 
 the destination buffer size passed into this function, the function will 
 truncate the string to fit in the buffer (including a terminating null 
 character) and return -1. In all cases, this function will write a terminating 
 null character at the end of the string.</p>

<p class="NDLRefMemberFunction"><a name=NiVsprintf></a>int NiVsprintf(char* 
 pcDest, size_t stDestSize, const char* pcFormat, va_list kArgs)</p>

<p class="NDLRefMemberDescription">System-independent wrapper for <span class="NDLSystemFont">vsprintf</span>. 
 This function takes a variable argument list that must have already been 
 initialized using the <span class="NDLSystemFont">va_start</span> macro. 
 Also, this function does not call <span class="NDLSystemFont">va_end</span>, 
 so that must be done by the calling function after this function returns. 
 The return value indicates the number of characters that was written to 
 the destination buffer, excluding the terminating null character. If the 
 combined string specified by the format string and its parameters exceeds 
 the destination buffer size passed into this function, the function will 
 truncate the string to fit in the buffer (including a terminating null 
 character) and return -1. In all cases, this function will write a terminating 
 null character at the end of the string.</p>

<p class="NDLRefMemberFunction"><a name=NiSnprintf></a>int NiSnprintf(char* 
 pcDest, size_t stDestSize, size_t stCount, const char* pcFormat, ...)</p>

<p class="NDLRefMemberDescription">System-independent wrapper for <span class="NDLSystemFont">snprintf</span>. 
 This function will write up to <span class="NDLSystemFont">stCount</span> 
 characters to the destination buffer, appending a terminating null character 
 after that. <span class="NDLSystemFont">stCount</span> must always be strictly 
 less than <span class="NDLSystemFont">stDestSize</span>. <span class="NDLSystemFont">NI_TRUNCATE</span> 
 can be passed in as <span class="NDLSystemFont">stCount</span> to indicate 
 that the function should write as many characters as possible to the destination 
 buffer, truncating the string when it fills the buffer. The return value 
 indicates the number of characters that was written to the destination 
 buffer, excluding the terminating null character. If the combined string 
 specified by the format string and its parameters exceeds the destination 
 buffer size passed into the function, this function will write at most 
 <span class="NDLSystemFont">stCount</span> characters (plus a terminating 
 null character) and return <span class="NDLSystemFont">stCount</span> unless 
 <span class="NDLSystemFont">stCount</span> is <span class="NDLSystemFont">NI_TRUNCATE</span>, 
 in which case the string will be truncated and -1 will be returned. In 
 all cases, this function will write a terminating null character at the 
 end of the string.</p>

<p class="NDLRefMemberFunction"><a name=NiVsnprintf></a>int NiVsnprintf(char* 
 pcDest, size_t stDestSize, size_t stCount, const char* pcFormat, va_list 
 kArgs)</p>

<p class="NDLRefMemberDescription">System-independent wrapper for <span class="NDLSystemFont">vsnprintf</span>. 
 This function takes a variable argument list that must have already been 
 initialized using the <span class="NDLSystemFont">va_start</span> macro. 
 Also, this function does not call <span class="NDLSystemFont">va_end</span>, 
 so that must be done by the calling function after this function returns. 
 This function will write up to <span class="NDLSystemFont">stCount</span> 
 characters to the destination buffer, appending a terminating null character 
 after that. <span class="NDLSystemFont">stCount</span> must always be strictly 
 less than <span class="NDLSystemFont">stDestSize</span>. <span class="NDLSystemFont">NI_TRUNCATE</span> 
 can be passed in as <span class="NDLSystemFont">stCount</span> to indicate 
 that the function should write as many characters as possible to the destination 
 buffer, truncating the string when it fills the buffer. The return value 
 indicates the number of characters that was written to the destination 
 buffer, excluding the terminating null character. If the combined string 
 specified by the format string and its parameters exceeds the destination 
 buffer size passed into the function, this function will write at most 
 <span class="NDLSystemFont">stCount</span> characters (plus a terminating 
 null character) and return <span class="NDLSystemFont">stCount</span> unless 
 <span class="NDLSystemFont">stCount</span> is <span class="NDLSystemFont">NI_TRUNCATE</span>, 
 in which case the string will be truncated and -1 will be returned. In 
 all cases, this function will write a terminating null character at the 
 end of the string.</p>

<p class="NDLRefMemberFunction"><a name=NiStrdup></a>char* NiStrdup(const 
 char* pcString)</p>

<p class="NDLRefMemberDescription">System-independent wrapper for <span class="NDLSystemFont">strdup</span>.</p>

<p class="NDLRefMemberFunction"><a name=NiStricmp></a>int NiStricmp(const 
 char* pcS1, const char* pcS2)</p>

<p class="NDLRefMemberDescription">System-independent wrapper for <span class="NDLSystemFont">stricmp</span>.</p>

<p class="NDLRefMemberFunction"><a name=NiStrnicmp></a>int NiStrnicmp(const 
 char* pcS1, const char* pcS2, size_t n)</p>

<p class="NDLRefMemberDescription">System-independent wrapper for <span class="NDLSystemFont">strnicmp</span>.</p>

<h2>Wide Character String Manipulation Functions</h2>

<p class="NDLRefMemberFunction"><a name=NiWStrcpy></a>NiWChar* NiWStrcpy(NiWChar* 
 pkDest, size_t stDestSize, const NiWChar* pkSrc)</p>

<p class="NDLRefMemberDescription">System-independent wide-character version 
 of <span class="NDLSystemFont">strcpy</span>.</p>

<p class="NDLRefMemberFunction"><a name=NiWStrncpy></a>NiWChar* NiWStrncpy(NiWChar* 
 pkDest, size_t stDestSize, const NiWChar* pkSrc, size_t stCount)</p>

<p class="NDLRefMemberDescription">System-independent wide-character version 
 of <span class="NDLSystemFont">strncpy</span>. Note that <span class="NDLSystemFont">stCount</span> 
 represents the number of characters, not including the terminating NULL 
 character, that should be copied, so <span class="NDLSystemFont">stCount</span> 
 must be less than <span class="NDLSystemFont">stDestSize</span>. If it is 
 not less than <span class="NDLSystemFont">stDestSize</span>, then the function 
 will assert, will not copy any of <span class="NDLSystemFont">pkSrc</span> 
 to <span class="NDLSystemFont">pkDest</span>, and will only put a NULL character 
 in <span class="NDLSystemFont">pkDest[0]</span>. Alternatively, the value 
 <span class="NDLSystemFont">NI_TRUNCATE</span> can be passed into the <span 
 class="NDLSystemFont">stCount</span> parameter, this will cause the function 
 to copy as many characters of <span class="NDLSystemFont">pkSrc</span> as 
 will fit into <span class="NDLSystemFont">pkDest</span>, leaving room for 
 the terminating NULL character.</p>

<p class="NDLRefMemberDescription">In all cases, this function will terminate 
 <span class="NDLSystemFont">pkDest</span> with a NULL character.</p>

<p class="NDLRefMemberFunction"><a name=NiWStrcat></a>NiWChar* NiWStrcat(NiWChar* 
 pkDest, size_t stDestSize, const NiWChar* pkSrc)</p>

<p class="NDLRefMemberDescription">System-independent wide-character version 
 of <span class="NDLSystemFont">strcat</span>.</p>

<p class="NDLRefMemberFunction"><a name=NiWStrtok></a>NiWChar* NiWStrtok(NiWChar* 
 pkString, const NiWChar* pkDelimit, NiWChar** ppkContext)</p>

<p class="NDLRefMemberDescription">System-independent wide-character version 
 of <span class="NDLSystemFont">strtok</span>.</p>

<p class="NDLRefMemberFunction"><a name=NiWSprintf></a>int NiWSprintf(NiWChar* 
 pkDest, size_t stDestSize, </p>

<p class="NDLRefMemberFunction"><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->const 
 NiWChar* pkFormat, ...)</p>

<p class="NDLRefMemberDescription">System-independent wide-character version 
 of <span class="NDLSystemFont">sprintf</span>. The return value indicates 
 the number of characters that was written to the destination buffer, excluding 
 the terminating null character. If the combined string specified by the 
 format string and its parameters exceeds the destination buffer size passed 
 into this function, the function will truncate the string to fit in the 
 buffer (including a terminating null character) and return -1. In all 
 cases, this function will write a terminating null character at the end 
 of the string.</p>

<h2>Memory Manipulation Functions</h2>

<p class="NDLRefMemberFunction"><a name=NiMemcpy></a>int NiMemcpy(void* pvDest, 
 size_t stDestSize, const void* pvSrc, size_t stCount)</p>

<p class="NDLRefMemberDescription">System-independent wrapper for <span class="NDLSystemFont">memcpy</span>. 
 Returns 0 on success, non-zero on error.</p>

<p class="NDLRefMemberFunction">int NiMemcpy(void* pvDest, const void* pvSrc, 
 size_t stCount)</p>

<p class="NDLRefMemberDescription">System-independent wrapper for <span class="NDLSystemFont">memcpy</span>. 
 This version on <span class="NDLSystemFont">NiMemcpy</span> assumes that 
 the destination size is equal to <span class="NDLSystemFont">stCount</span>. 
 Whenever possible, the previous version of <span class="NDLSystemFont">NiMemcpy</span> 
 should be used. Returns 0 on success, non-zero on error.</p>

<p class="NDLRefMemberFunction"><a name=NiMemmove></a>int NiMemmove(void* 
 pvDest, size_t stDestSize, const void* pvSrc, size_t stCount)</p>

<p class="NDLRefMemberDescription">System-independent wrapper for <span class="NDLSystemFont">memmove</span>. 
 Returns 0 on success, non-zero on error.</p>

<p class="NDLRefMemberFunction">void NiPrefetch128(void* pvBase)</p>

<p class="NDLRefMemberDescription">Provides a hint to fetch at least 128 
 bytes of memory into processor caches for the memory region indicated 
 by rounding pvBase down to a 128 byte boundary, pvBase &amp; ~0x7F. Applications 
 can use the function to avoid the latency of cache misses. </p>

<p class="NDLRefMemberDescription">Note that this function is deemed a hint. 
 Implementations may request more than 128B or may be empty on specific 
 platforms depending upon the underlying hardware architecture and performance 
 characteristics.</p>	

<h2>Thread Control Functions and Atomic Operations</h2>

<p class="NDLRefMemberFunction"><a name=NiSleep></a>void NiSleep(unsigned 
 int uiMilliseconds)</p>

<p class="NDLRefMemberDescription">System-independent wrapper for <span class="NDLSystemFont">sleep</span>. 
 Puts the calling thread to sleep for the specified number of milliseconds.</p>

<p class="NDLRefMemberFunction"><a name=NiYieldThread></a>void NiYieldThread()</p>

<p class="NDLRefMemberDescription">Yields the calling threads current time 
 slice to the system scheduler.</p>

<p class="NDLRefMemberFunction"><a name=NiGetCurrentThreadId></a>unsigned 
 long NiGetCurrentThreadId()</p>

<p class="NDLRefMemberDescription">Returns the ID of the current thread.</p>

<p class="NDLRefMemberFunction"><a name=NiAtomicIncrement></a>NiInt32 NiAtomicIncrement(NiInt32 
 &amp;i32Value)</p>

<p class="NDLRefMemberFunction"><a name=NiAtomicDecrement></a>NiInt32 NiAtomicDecrement(NiInt32 
 &amp;i32Value)</p>

<p class="NDLRefMemberFunction">NiUInt32 NiAtomicIncrement(NiUInt32 &amp;ui32Value)</p>

<p class="NDLRefMemberFunction">NiUInt32 NiAtomicDecrement(NiUInt32 &amp;ui32Value)</p>

<p class="NDLRefMemberFunction">NiInt64 NiAtomicIncrement(NiInt64 &amp;i64Value)</p>

<p class="NDLRefMemberFunction">NiInt64 NiAtomicDecrement(NiInt64 &amp;i64Value)</p>

<p class="NDLRefMemberFunction">NiUInt64 NiAtomicIncrement(NiUInt64 &amp;ui64Value)</p>

<p class="NDLRefMemberFunction">NiUInt64 NiAtomicDecrement(NiUInt64 &amp;ui64Value)</p>

<p class="NDLRefMemberDescription">Perform an atomic increment or decrement 
 operation on the value. The return value is the resulting incremented 
 or decremented value.</p>

<p class="NDLRefMemberFunction"><a name=NiSelectGE></a>float NiSelectGE(float 
 fCondition, float fResultIfGreaterThanEqualZero, float fResultIfLessThanZero);</p>

<p class="NDLRefMemberFunction">float NiSelectGE(int iCondition, float fResultIfGreaterThanEqualZero, 
 float fResultIfLessThanZero);</p>

<p class="NDLRefMemberDescription">If condition is greater than or equal 
 to zero returns the 2nd argument; otherwise returns the last argument. 
 On certain platforms this method is optimized to eliminate branches.</p>

<p class="NDLRefMemberFunction"><a name=NiSelect></a>int NiSelect(bool bCondition, 
 int iResultIfTrue, int iResultIfFalse);</p>

<p class="NDLRefMemberFunction">float NiSelect(bool bCondition, float fResultIfTrue, 
 float fResultIfFalse);</p>

<p class="NDLRefMemberDescription">If condition is true returns the 2nd argument; 
 otherwise returns the last argument. On certain platforms this method 
 is optimized to eliminate branches.</p>

<h2>Safe Casting Functions</h2>

<p class="NDLRefMemberFunction">NiUInt8 NiInt32ToUInt8(NiInt32 iNum)</p>

<p class="NDLRefMemberFunction">NiUInt16 NiInt32ToUInt16(NiInt32 iNum)</p>

<p class="NDLRefMemberFunction">NiUInt32 NiInt32ToUInt32(NiInt32 iNum)</p>

<p class="NDLRefMemberFunction">NiInt8 NiInt32ToInt8(NiInt32 iNum)</p>

<p class="NDLRefMemberFunction">NiInt16 NiInt32ToInt16(NiInt32 iNum)</p>

<p class="NDLRefMemberDescription">Routines for safe casting of values. Debug 
 versions assert that the integer input is within range for the output 
 when casting to smaller bit ranges. The <span class="NDLSystemFont">NiInt32ToUInt32</span> 
 performs an exact bitwise conversion. e.g., <span class="NDLSystemFont">NiInt32ToUInt32(-1)</span> 
 would produce 0xFFFFFFFF or 4,294,967,295 on a two's complement machine.</p>

<h2>Miscellaneous</h2>

<p class="NDLRefMemberFunction"><a name=NiGetenv></a>void NiGetenv(size_t* 
 pstDestLength, char* pcDest, size_t stDestSize, const char* pcSrc)</p>

<p class="NDLRefMemberDescription">Returns in <span class="NDLSystemFont">pcDest</span> 
 the environment variable referred to by <span class="NDLSystemFont">pcSrc</span>. 
 The <span class="NDLSystemFont">stDestSize</span> parameter contains the 
 size of the passed-in <span class="NDLSystemFont">pcDest</span> character 
 array, and <span class="NDLSystemFont">pstDestLength</span> returns the 
 size of the buffer required to hold the contents of the environment variable.</p>

<p class="NDLRefMemberFunction"><a name=NiRotr></a>unsigned int NiRotr(unsigned 
 int x, int n)</p>

<p class="NDLRefMemberDescription">System-independent wrapper for <span class="NDLSystemFont">rotr</span>.</p>

<p class="NDLRefMemberFunction"><a name=NiInitTestEnvironment></a>void NiInitTestEnvironment()</p>

<p class="NDLRefMemberDescription">Utility function to assist in running 
 automated tests using the engine. </p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
