<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiThread</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiThread</p>

<p class="NDLRefParentage">: public <a href=
"NiMemObject.htm"><span>NiMemObject</span></a></p>

<p class="NDLRefParentage">&lt;NiThread.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>A platform-independent wrapper class to handle thread
manipulation.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberDescription">There are no publicly defined
constructors for <span class="NDLSystemFont">NiThread</span>.
Applications should create all threads through the static
<span class="NDLSystemFont">Create</span> method to make sure the
thread is properly initialized and managed.</p>

<p class="NDLRefHead1">Static Member Functions</p>

<p class="NDLRefMemberFunction">NiThread* Create(<a href=
"NiThreadProcedure.htm">NiThreadProcedure</a>* pkProcedure,
unsigned int uiStackSize = USEDEF_STACK_SIZE)</p>

<p class="NDLRefMemberDescription">Create a thread using a
specified <span class="NDLSystemFont"><a href=
"NiThreadProcedure.htm">NiThreadProcedure</a></span> and stack
size. The thread does not take ownership of the <span class=
"NDLSystemFont"><a href=
"NiThreadProcedure.htm">NiThreadProcedure</a></span> object so
that a procedure can be shared across multiple worker threads.
All threads are created in the <span class=
"NDLSystemFont">SUSPENDED</span> state.</p>

<p class="NDLRefMemberFunction">NiThread* GetThread()</p>

<p class="NDLRefMemberDescription">Get the <span class=
"NDLSystemFont">NiThread</span> pointer for the current thread
context. If the current thread context was not created using the
<span class="NDLSystemFont">NiThread</span> API, this value will
be NULL.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction"><a href=
"NiThreadProcedure.htm">NiThreadProcedure</a>* GetProcedure()
const</p>

<p class="NDLRefMemberDescription">Get a pointer to the thread
procedure used by an <span class="NDLSystemFont">NiThread</span>
object.</p>

<p class="NDLRefMemberFunction">bool SetPriority(<a href=
"#Priority">Priority</a> ePriority)</p>

<p class="NDLRefMemberFunction">const <a href=
"#Priority">Priority</a> GetPriority() const</p>

<p class="NDLRefMemberDescription">Get and set the priority of
the thread. The priority enumeration is listed below. It is
possible for this value to be stale since the class member's
priority will only be set after the system level priority is
set.</p>

<p class="NDLRefMemberFunction">bool SetThreadAffinity(const
<a href="NiProcessorAffinity.htm">NiProcessorAffinity</a>&amp;
kAffinity)</p>

<p class="NDLRefMemberFunction">const <a href=
"NiProcessorAffinity.htm">NiProcessorAffinity</a>
GetThreadAffinity()</p>

<p class="NDLRefMemberDescription">Get and set the processor
affinity for the thread using the <span class=
"NDLSystemFont"><a href=
"NiProcessorAffinity.htm">NiProcessorAffinity</a></span> class.
This setting will take place the next time the OS schedules the
thread.</p>

<p class="NDLRefMemberFunction">const <a href=
"#Status">Status</a> GetStatus() const</p>

<p class="NDLRefMemberDescription">Get the current status of a
thread. It is possible for this member to be stale since the
class member's status will only be set after the system level
routines return.</p>

<p class="NDLRefMemberFunction">const unsigned int
GetReturnValue() const</p>

<p class="NDLRefMemberDescription">Get the return value of a
completed thread.</p>

<p class="NDLRefMemberFunction">void SetName(const char*
pcName)</p>

<p class="NDLRefMemberFunction">const char* GetName() const</p>

<p class="NDLRefMemberDescription">Get and set the name of the
thread for debugging purposes.</p>

<p class="NDLRefMemberFunction">int Suspend()</p>

<p class="NDLRefMemberFunction">int Resume()</p>

<p class="NDLRefMemberDescription">Suspend or resume a thread.
The system will return -1 if these calls fail. Successful
completion will return an integer that depends on the operating
system. Usually, this value is the thread's suspend count prior
to the call. Thus, a return of 0 indicates that a thread was
running at the time of the call. Any positive, non-zero value
indicates a suspended thread.</p>

<p class="NDLRefMemberFunction">bool WaitForCompletion()</p>

<p class="NDLRefMemberDescription">Returns true if the thread was
running and the system waited for termination. If the thread was
not running, the function will return false. This may be because
the thread has already completed execution.</p>

<p class="NDLRefHead1">Notes</p>

<a name="Priority" id="Priority"></a><p class="NDLRefHead2">NiThread::Priority</p>

<p><span class="NDLSystemFont">NiThread::Priority</span> is an
enumeration with the following values. These values map to
different OS priorities depending upon implementation.</p>

<!--(Table)=========================================================-->
<table>
    <thead>
        <tr>
            <th>Open Mode</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><span class=
            "NDLSystemFont">NiThread::IDLE</span></td>

            <td>The thread is scheduled with the lowest priority
            so that it only runs when no other thread needs
            processor time.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">NiThread::LOWEST</span></td>

            <td>The lowest, non-idle priority available. This
            thread will only preempt idle threads.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">NiThread::BELOW_NORMAL</span></td>

            <td>The thread is scheduled at below normal priority
            to avoid interrupting regular tasks.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">NiThread::NORMAL</span></td>

            <td>The thread is scheduled at normal priority and
            shares time with other common task threads.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">NiThread::ABOVE_NORMAL</span></td>

            <td>The thread is scheduled above normal priority and
            will preempt normal priority threads to complete its
            task.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">NiThread::HIGHEST</span></td>

            <td>The highest regular priority available. This
            thread will run with priority execution over any
            thread not marked as TIME_CRITICAL</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">NiThread::TIME_CRITICAL</span></td>

            <td>This maps to the absolute highest system priority
            meaning that this thread will never be preempted
            unless there are other TIME_CRITICAL threads.</td>
        </tr>
    </tbody>
</table>

<a name="Status" id="Status"></a><p class="NDLRefHead2">NiThread::Status</p>

<p><span class="NDLSystemFont">NiThread</span> defines two
statuses for threads.</p>

<!--(Table)=========================================================-->
<table>
    <thead>
        <tr>
            <th>Seek Mode</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><span class=
            "NDLSystemFont">NiThread::RUNNING</span></td>

            <td>The thread is currently active although not
            necessarily scheduled and executing.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">NiThread::SUSPENDED</span></td>

            <td>The thread is suspended and not eligible for
            scheduling.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">NiThread::COMPLETE</span></td>

            <td>The thread has completed and exited with a return
            value.</td>
        </tr>
    </tbody>
</table>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
