<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiMemoryDefines</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiMemoryDefines</p>

<p class="NDLRefParentage">&lt;NiMemoryDefines.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>A set of functions and macros to aid in memory
allocation.</p>

<a name="Preprocessor_Definitions" id="Preprocessor_Definitions"></a><p class="NDLRefHead1">Preprocessor Definitions</p>

<!--(Table)=========================================================-->

<table>
    <thead>
        <tr>
            <th>Symbol</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><span class=
            "NDLSystemFont">EE_USE_MEMORY_MANAGEMENT</span></td>

            <td>This symbol is the primary control mechanism for
            the memory debugging and tracking functionality in
            the engine. This symbol must have a consistent
            definition throughout the engine.</td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">NI_MEMORY_DEBUGGER,
            NI_USE_MEMORY_MANAGEMENT</span></td>

            <td>Deprecated, use <span class=
            "NDLSystemFont">EE_USE_MEMORY_MANAGEMENT
            instead</span>.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">NI_MEM_ALIGNMENT_DEFAULT</span></td>

            <td>This symbol determines the default alignment that
            should be used by all <span class=
            "NDLSystemFont"><a href=
            "NiAllocator.htm">NiAllocator</a></span> objects when
            allocating memory.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">NI_MEM_DEALLOC_SIZE_DEFAULT</span></td>

            <td>This symbol defines the default value that should
            be passed into <span class="NDLSystemFont"><a href=
            "NiAllocator.htm">NiAllocators</a></span> objects
            when the deallocation size is unknown.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">NI_MEM_FUNCTION_DEFAULT</span></td>

            <td>This symbol defines the default function name for
            an allocation unit.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">NI_MEM_FILE_DEFAULT</span></td>

            <td>This symbol defines the default filename for an
            allocation unit.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">NI_MEM_LINE_DEFAULT</span></td>

            <td>This symbol defines the default line number for
            an allocation unit.</td>
        </tr>
    </tbody>
</table>

<p class="NDLRefHead1">Macros</p>

<a name="UtilityMacros" id="UtilityMacros"></a><p class="NDLRefHead2">Utility Macros</p>

<p class="NDLRefMemberFunction">bool NiVerifyAddress(void*
pvMemory)</p>

<p class="NDLRefMemberDescription">This macro returns whether or
not the given address is known to the memory debugging subsystem.
The return value is true if it is known or false if it is not
known. In non-<span class=
"NDLSystemFont">NI_USE_MEMORY_MANAGEMENT</span> builds, the value
is always false. If this is meant to be used within an assert,
please use the <span class="NDLSystemFont">NIMEMASSERT</span>
macro.</p>

<p class="NDLRefMemberFunction">size_t NiAlignOf(Type)</p>

<p class="NDLRefMemberDescription">Returns the alignment of a
given type. This macro works similarly to the standard
<span class="NDLSystemFont">sizeof</span> function.</p>

<p class="NDLRefMemberFunction">NIMEMASSERT(value)</p>

<p class="NDLRefMemberDescription">This macro triggers an
assertion only in <span class=
"NDLSystemFont">NI_USE_MEMORY_MANAGEMENT</span> builds if the
value is false. In all other circumstances, this macro does
nothing and is optimized out by the compiler.</p>

<a name="NewAndDelete" id="NewAndDelete"></a><p class="NDLRefHead2">New and Delete</p>

<p class="NDLRefMemberFunction">NiNew</p>

<p class="NDLRefMemberFunction">NiNew[]</p>

<p class="NDLRefMemberFunction">NiDelete</p>

<p class="NDLRefMemberFunction">NiDelete[]</p>

<p class="NDLRefMemberDescription">These keywords should be
paired in code rather than using the standard <span class=
"NDLSystemFont">new</span> and <span class=
"NDLSystemFont">delete</span> for <a href=
"NiMemObject.htm"><span class=
"NDLSystemFont">NiMemObject</span></a>-derived classes. This lets
Gamebryo route the memory requests through its internal
allocation subsystem and store the file, line, function
information depending on the build target. Using these keywords
on non-<a href="NiMemObject.htm"><span class=
"NDLSystemFont">NiMemObject</span></a>-derived classes will
compile, but they will not go through the Gamebryo allocation
system. Compilation of code under <span class=
"NDLSystemFont">NI_USE_MEMORY_MANAGEMENT</span> builds should
catch any invalid uses of these keywords with compiler errors
about the incorrect number of arguments to <span class=
"NDLSystemFont">new</span>. Note that the array versions of these
keywords look exactly like array versions of <span class=
"NDLSystemFont">new</span> and <span class=
"NDLSystemFont">delete</span> and should also be paired
appropriately in code.</p>

<p class="NDLRefMemberDescription">Please see <a href=
"../../Programmer/General_Topics/Overview_of_Programming_for_Memory.htm">
Overview of Programming for Memory</a> for more information about
how these functions are used in Gamebryo.</p>

<a name="StandardAllocRoutines" id="StandardAllocRoutines"></a><p class="NDLRefHead2">Standard Allocation Routines</p>

<p class="NDLRefMemberFunction">Type* NiAlloc(Type, size_t
count)</p>

<p class="NDLRefMemberFunction">void* NiMalloc(size_t size)</p>

<p class="NDLRefMemberFunction">void* NiRealloc(void* memblock,
size_t size)</p>

<p class="NDLRefMemberFunction">Type* NiAlloc2(Type, size_t
count, <a href="NiMemHint.htm">NiMemHint</a> kHint)</p>

<p class="NDLRefMemberFunction">void* NiMalloc2(size_t size,
<a href="NiMemHint.htm">NiMemHint</a> kHint)</p>

<p class="NDLRefMemberFunction">void* NiRealloc2(void* memblock,
size_t size, <a href="NiMemHint.htm">NiMemHint</a> kHint)</p>

<p class="NDLRefMemberFunction"><span class=
"NDLSystemFont">v</span>oid NiFree(void* p)</p>

<p class="NDLRefMemberDescription"><span class=
"NDLSystemFont">NiAlloc/NiMalloc/NiRealloc</span> and
<span class="NDLSystemFont">NiFree</span> should be used for any
non-<span class="NDLSystemFont"><a href=
"NiMemObject.htm">NiMemObject</a></span> object or intrinsic type
(float, char, short, char*, etc.). Note that these macros do not
resolve to global new or delete, nor will they call constructors
or destructors. The <span class="NDLSystemFont">NiAlloc</span>
macro is a convenience for porting code from using <span class=
"NDLSystemFont">new</span>, as it has similar syntax to
<span class="NDLSystemFont">new</span> and only requires
converting to the use of parentheses. All other methods function
identically to <span class="NDLSystemFont">malloc</span>,
<span class="NDLSystemFont">realloc</span>, and <span class=
"NDLSystemFont">free</span> respectively. The
extended forms (<span class="NDLSystemFont">NiAlloc2</span>,
<span class="NDLSystemFont">NiMalloc2</span>, <span class=
"NDLSystemFont">NiRealloc2</span>) allow a <a href=
"NiMemHint.htm"><span class="NDLSystemFont">NiMemHint</span></a>
object to be passed in, which can guide or control how the
allocation occurs. Note that there is no corresponding NiFree2.
NiFree should be used with the extended forms as well as the
standard ones.</p>

<p class="NDLRefMemberDescription">Please see <a href=
"../../Programmer/General_Topics/Overview_of_Programming_for_Memory.htm">
Overview of Programming for Memory</a> for more information about
how these functions are used in Gamebryo.</p>

<a name="AlignedAllocRoutines" id="AlignedAllocRoutines"></a><p class="NDLRefHead2">Aligned Allocation Routines</p>

<p class="NDLRefMemberFunction">Type* NiAlignedAlloc(Type, size_t
count, size_t alignment)</p>

<p class="NDLRefMemberFunction">void* NiAlignedMalloc(size_t
size, size_t alignment)</p>

<p class="NDLRefMemberFunction">void* NiAlignedRealloc(void*
memblock, size_t size, size_t alignment)</p>

<p class="NDLRefMemberFunction">Type* NiAlignedAlloc2(Type,
size_t count, size_t alignment, <a href=
"NiMemHint.htm">NiMemHint</a> kHint)</p>

<p class="NDLRefMemberFunction">void* NiAlignedMalloc2(size_t
size, size_t alignment, <a href="NiMemHint.htm">NiMemHint</a>
kHint)</p>

<p class="NDLRefMemberFunction">void* NiAlignedRealloc2(void*
memblock, size_t size, size_t alignment, <a href=
"NiMemHint.htm">NiMemHint</a> kHint)</p>

<p class="NDLRefMemberFunction">void NiAlignedFree(void* p)</p>

<p class="NDLRefMemberDescription">These macros are aligned
versions of the <a href=
"NiMemoryDefines.htm#StandardAllocRoutines">Standard Allocation
Routines</a> listed above. They apply the additional restriction
of forcing the alignment to match the argument.</p>

<p class="NDLRefMemberDescription">Please see <a href=
"../../Programmer/General_Topics/Overview_of_Programming_for_Memory.htm">
Overview of Programming for Memory</a> for more information about
how these functions are used in Gamebryo.</p>

<a name="ExternalNewAndDelete" id="ExternalNewAndDelete"></a><p class="NDLRefHead2">External New and Delete</p>

<p class="NDLRefMemberFunction">NiExternalNew</p>

<p class="NDLRefMemberFunction">NiExternalNew[]</p>

<p class="NDLRefMemberFunction">NiExternalDelete</p>

<p class="NDLRefMemberFunction">NiExternalDelete[]</p>

<p class="NDLRefMemberDescription">In some cases, it is necessary
to allocate objects using a separate allocation system. These
allocations are not tracked through Gamebryo and the use of any
other Gamebryo allocation routines on addresses returned by these
keywords will result in undefined behavior. Using these keywords
is functionally identical to calling "new" and "delete" on the
classes themselves. These keywords should not be used on <a href=
"NiMemObject.htm"><span class=
"NDLSystemFont">NiMemObject</span></a>-derived
classes.</p>

<a name="StackAllocRoutines" id="StackAllocRoutines"></a><p class="NDLRefHead2">Stack Allocation Routines</p>

<p class="NDLRefMemberFunction">Type* NiStackAlloc(Type, size_t
count)</p>

<p class="NDLRefMemberDescription">It is often useful to create
dynamic allocations that only exist for the lifetime of a
function without making a heap allocation. This macro will use
<span class="NDLSystemFont">alloca</span> or <span class=
"NDLSystemFont">_malloca</span> to create an array of entries on
the stack, depending on the platform. Note that
this method may not delete the array when finished (even when
<span class="NDLSystemFont">NiStackFree</span> is called to
release the memory), so it is important to only use primitive
types or types that do not invoke a constructor or
destructor.</p>

<p class="NDLRefMemberFunction">NiStackFree(void* p)</p>

<p class="NDLRefMemberDescription">Releases the memory allocated
by <span class="NDLSystemFont">NiStackAlloc</span>. On platforms
that can use <span class="NDLSystemFont">_malloca</span>, the
memory allocated by <span class=
"NDLSystemFont">NiStackAlloc</span> may come from the heap rather
than the stack. Calling <span class=
"NDLSystemFont">NiStackFree</span> on the allocated memory
ensures that the memory is cleaned up correctly on all
platforms.</p>

<a name="ExternalAllocRoutines" id="ExternalAllocRoutines"></a><p class="NDLRefHead2">External Allocation Routines</p>

<p class="NDLRefMemberFunction">Type* NiExternalAlloc(Type,
size_t count)</p>

<p class="NDLRefMemberFunction">void NiExternalMalloc(size_t
size)</p>

<p class="NDLRefMemberFunction">void* NiExternalRealloc(void
*memblock, size_t size);</p>

<p class="NDLRefMemberFunction">void NiExternalFree(void* p)</p>

<p class="NDLRefMemberFunction">void* NiExternalCalloc(size_t
num, size_t size)</p>

<p class="NDLRefMemberFunction">void*
NiExternalAlignedMalloc(size_t size, size_t alignment)</p>

<p class="NDLRefMemberFunction">void*
NiExternalAlignedRealloc(void* memblock, size_t size, size_t
alignment)</p>

<p class="NDLRefMemberFunction">void NiExternalAlignedFree(void*
p)</p>

<p class="NDLRefMemberDescription">In some cases, it is necessary
to allocate objects using a separate allocation system. These
allocations are not tracked through Gamebryo and the use of any
other Gamebryo allocation routines on addresses returned by these
keywords will result in undefined behavior. Using these macros is
functionally identical to using the equivalent standard library
function. Note that these methods do not automatically call
<span class="NDLSystemFont">NiTrackAlloc/NiTrackFree</span>.</p>

<p class="NDLRefMemberFunction">bool NiTrackAlloc(void* p, size_t
sizeInBytes)</p>

<p class="NDLRefMemberFunction">bool NiTrackAlloc2(void* p,
size_t sizeInBytes, <a href="NiMemHint.htm">NiMemHint</a>
kHint)</p>

<p class="NDLRefMemberFunction">bool NiTrackFree(void* p)</p>

<p class="NDLRefMemberDescription">These methods allow an
application to track external allocations using the Gamebryo
memory tracking API. The addresses are not modified by the
tracker. Note that these methods will compile out in non memory
tracking builds. The return value indicates whether or not the
memory was successfully tracked.</p>

<a name="PlatformSpecificAllocationRoutines" id="PlatformSpecificAllocationRoutines"></a><p class="NDLRefHead2">Platform-Specific Allocation Routines</p>

<p class="NDLRefMemberFunction">NiPhysicalAlloc(size_t size,
void* desiredAddress, size_t alignment, unsigned int flags)</p>

<p class="NDLRefMemberFunction">NiPhysicalFree(p)</p>

<p class="NDLRefMemberDescription">These methods are meant to
wrap the Xbox 360 <span class=
"NDLSystemFont">XbPhysicalAlloc</span> routines.</p>

<p class="NDLRefHead1">Notes</p>

<a name="NiMemEventType" id="NiMemEventType"></a><p class="NDLRefHead2">NiMemEventType Enumeration</p>

<p>Gamebryo supports the following sources of memory allocations
and deallocations.:</p>

<!--(Table)=========================================================-->
<table>
    <thead>
        <tr>
            <th>Format</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><span class=
            "NDLSystemFont">NI_UNKNOWN</span></td>

            <td>Unknown allocation/deallocation type. This type
            will cause assertions in the memory management
            interfaces.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">NI_OPER_NEW</span></td>

            <td>Allocated through <span class=
            "NDLSystemFont">NiNew</span>. Should be deallocated
            with <span class=
            "NDLSystemFont">NiDelete</span>.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">NI_OPER_NEW_ARRAY</span></td>

            <td>Allocated through <span class=
            "NDLSystemFont">NiNew[]</span>. Should be deallocated
            with <span class=
            "NDLSystemFont">NiDelete[]</span>.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">NI_OPER_DELETE</span></td>

            <td>Deallocated with <span class=
            "NDLSystemFont">NiDelete</span>.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">NI_OPER_DELETE_ARRAY</span></td>

            <td>Deallocated with <span class=
            "NDLSystemFont">NiDelete[]</span>.</td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">NI_MALLOC</span></td>

            <td>Allocated through <span class=
            "NDLSystemFont">NiMalloc</span>. Should be
            deallocated with <span class=
            "NDLSystemFont">NiFree</span>.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">NI_REALLOC</span></td>

            <td>Allocated through <span class=
            "NDLSystemFont">NiRealloc</span>. Should be
            deallocated with <span class=
            "NDLSystemFont">NiFree</span>.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">NI_ALIGNEDMALLOC</span></td>

            <td>Allocated through <span class=
            "NDLSystemFont">NiAlignedAlloc</span> Should be
            deallocated with <span class=
            "NDLSystemFont">NiAlignedFree</span>.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">NI_ALIGNEDREALLOC</span></td>

            <td>Allocated through <span class=
            "NDLSystemFont">NiAlignedRealloc</span>. Should be
            deallocated with <span class=
            "NDLSystemFont">NiAlignedFree</span>.</td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">NI_FREE</span></td>

            <td>Deallocated with <span class=
            "NDLSystemFont">NiFree</span>.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">NI_ALIGNEDFREE</span></td>

            <td>Deallocated with <span class=
            "NDLSystemFont">NiAlignedFree</span>.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">NI_EXTERNALALLOC</span></td>

            <td>Tracked via <span class=
            "NDLSystemFont">NiTrackAlloc</span>.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">NI_EXTERNALFREE</span></td>

            <td>Tracked via <span class=
            "NDLSystemFont">NiTrackFree</span>.</td>
        </tr>
    </tbody>
</table>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
