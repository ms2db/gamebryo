<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiTCreate</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiTCreate</p>

<p class="NDLRefParentage">&lt;NiTCreate.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>In some cases, it may be necessary to use templated create
functions to allocate an object instead of calling <span class=
"NDLSystemFont"><a href=
"NiMemoryDefines.htm#NewAndDelete">NiNew</a></span> directly.
This is especially true in MFC, where "new" is overridden by a
macro to mean <span class="NDLSystemFont">DEBUG_NEW</span>. Since
<span class="NDLSystemFont"><a href=
"NiMemoryDefines.htm#NewAndDelete">NiNew</a></span> is a
substitution for new, this creates a problem. Calling
<span class="NDLSystemFont">NiTCreate</span>&lt;object&gt;() will
allow a client to allocate through Gamebryo in such a
circumstance.</p>

<p class="NDLRefHead1">Supported Template Functions</p>

<p class="NDLRefMemberFunction">TYPE* NiTCreate()</p>

<p class="NDLRefMemberDescription">Allocate an instance of class
<span class="NDLSystemFont">TYPE</span> using the default
constructor.</p>

<p class="NDLRefMemberFunction">TYPE* NiTCreate1(ARG1 a)</p>

<p class="NDLRefMemberDescription">Allocate an instance of class
<span class="NDLSystemFont">TYPE</span> using the constructor
taking a single argument of type <span class=
"NDLSystemFont">ARG1</span>.</p>

<p class="NDLRefMemberFunction">TYPE* NiTCreate2(ARG1 a, ARG2
b)</p>

<p class="NDLRefMemberDescription">Allocate an instance of class
<span class="NDLSystemFont">TYPE</span> using the constructor
taking two argument of type <span class=
"NDLSystemFont">ARG1</span> and <span class=
"NDLSystemFont">ARG2</span>.</p>

<p class="NDLRefMemberFunction">TYPE* NiTCreate3(ARG1 a, ARG2 b,
ARG3 c)</p>

<p class="NDLRefMemberDescription">Allocate an instance of class
<span class="NDLSystemFont">TYPE</span> using the constructor
taking three arguments of type <span class=
"NDLSystemFont">ARG1</span>, <span class=
"NDLSystemFont">ARG2</span>, and <span class=
"NDLSystemFont">ARG3</span>.</p>

<p class="NDLRefMemberFunction">TYPE* NiTCreate4(ARG1 a, ARG2 b,
ARG3 c, ARG4 d)</p>

<p class="NDLRefMemberDescription">Allocate an instance of class
<span class="NDLSystemFont">TYPE</span> using the constructor
taking four arguments of type <span class=
"NDLSystemFont">ARG1</span>, <span class=
"NDLSystemFont">ARG2</span>, <span class=
"NDLSystemFont">ARG3</span>, and <span class=
"NDLSystemFont">ARG4</span>.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
