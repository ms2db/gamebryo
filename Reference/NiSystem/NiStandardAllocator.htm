<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiStandardAllocator</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiStandardAllocator</p>

<p class="NDLRefParentage">: public <a href=
"NiAllocator.htm">NiAllocator</a></p>

<p class="NDLRefParentage">&lt;NiStandardAllocator.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>This class is a general allocator that uses <a href=
"NiSmallObjectAllocator.htm"><span class=
"NDLSystemFont">NiSmallObjectAllocator</span></a> to pool memory
less than 256 bytes in size. All other allocations are passed
through to <span class="NDLSystemFont"><a href=
"NiMemoryDefines.htm#ExternalAllocRoutines">NiExternalAlignedAlloc</a></span>.
Responsibility for thread safety is passed on to the <a href=
"NiSmallObjectAllocator.htm"><span class=
"NDLSystemFont">NiSmallObjectAllocator</span></a> and external
allocation routines respectively.</p>

<p class="NDLRefHead1">Supported Static Functions</p>

<p class="NDLRefMemberFunction">static NiSmallObjectAllocator*
GetSmallAllocator()</p>

<p class="NDLRefMemberDescription">Returns the instance of
<span class="NDLSystemFont"><a href=
"NiSmallObjectAllocator.htm">NiSmallObjectAllocator</a></span>
used by all <span class=
"NDLSystemFont">NiStandardAllocators</span>.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">virtual void*
Allocate(size_t&amp; stSizeInBytes, size_t&amp; stAlignment,
<a href="NiMemHint.htm">NiMemHint</a> kHint, <a href=
"NiMemoryDefines.htm#NiMemEventType">NiMemEventType</a>
eEventType, const char* pcFile, int iLine, const char*
pcFunction)</p>

<p class="NDLRefMemberDescription">Allocate <span class=
"NDLSystemFont">stSizeInBytes</span> bytes of memory,
guaranteeing <span class="NDLSystemFont">stAlignment</span>
alignment if possible for the returned address. Note that the
size and alignment are passed-by-reference. This allows the
allocator to adjust the values internally and pass the results
back to the caller. This functionality is useful in the event of
nesting allocators for memory tracking and debugging purposes.
The additional arguments are used by memory tracking and
debugging routines. The <span class="NDLSystemFont">kHint</span>
object can be used to provide various hints to the underlying
<span class="NDLSystemFont"><a href=
"NiAllocator.htm">NiAllocator</a></span> object, such as which
memory arena an allocation should occur in, or if the subsequent
deallocation will have access to an accurate size without having
to explicitly store it. The <span class=
"NDLSystemFont">eEventType</span> argument indicates what
external method was used to allocate the date. This may provide
additional information to a memory debugging system or may be
used at runtime to determine allocator behavior.</p>

<p class="NDLRefMemberFunction">virtual void Deallocate(void*
pvMemory, <a href=
"NiMemoryDefines.htm#NiMemEventType">NiMemEventType</a>
eEventType, size_t stSizeInBytes)</p>

<p class="NDLRefMemberDescription">Free the memory at the
specified address. In some situations, the deallocation routine
may know how large it was when allocated. If so, the <span class=
"NDLSystemFont">stSizeInBytes</span> argument will be the size
initially requested. If this size is unknown, the correct value
for the argument is <span class=
"NDLSystemFont">NI_MEM_DEALLOC_SIZE_DEFAULT</span>. The
<span class="NDLSystemFont">eEventType</span> argument indicates
what external method was used to deallocate the data. This may
provide additional information to a memory debugging system or
may be used at runtime to determine allocator behavior.</p>

<p class="NDLRefMemberFunction">virtual void* Reallocate(void*
pvMemory, size_t&amp; stSizeInBytes, size_t&amp; stAlignment,
<a href="NiMemHint.htm">NiMemHint</a> kHint, <a href=
"NiMemoryDefines.htm#NiMemEventType">NiMemEventType</a>
eEventType, size_t stSizeCurrent, const char* pcFile, int iLine,
const char* pcFunction)</p>

<p class="NDLRefMemberDescription">Reallocate the memory at the
specified address, guaranteeing <span class=
"NDLSystemFont">stAlignment</span> if possible for the returned
address. Note that if <span class=
"NDLSystemFont">stSizeInBytes</span> is zero, this method
functions like <span class="NDLSystemFont">Deallocate</span>. If
<span class="NDLSystemFont">pvMemory</span> is NULL, this method
functions exactly like <span class=
"NDLSystemFont">Allocate</span>. Otherwise, the memory hint
specified by <span class="NDLSystemFont">kHint</span> should
match the original hint passed into Allocate exactly. The
<span class="NDLSystemFont">eEventType</span> argument indicates
what external method was used to reallocate the date. This may
provide additional information to a memory debugging system or
may be used at runtime to determine allocator behavior.</p>

<p class="NDLRefMemberFunction">virtual bool TrackAllocate(const
void* const pvMemory, size_t stSizeInBytes, NiMemEventType
eEventType, const char* pcFile, int iLine, const char*
pcFunction)</p>

<p class="NDLRefMemberDescription">Track an external allocation.
This function does not touch the input memory address, it simply
allows the allocator to internally track the address.</p>

<p class="NDLRefMemberFunction">virtual bool
TrackDeallocate(const void* const pvMemory, NiMemEventType
eEventType)</p>

<p class="NDLRefMemberDescription">Track an external deletion.
This function should only be called on an input address that also
had TrackAllocate called on it. This function does not touch the
input memory address, it simply allows the allocator to
internally track the address.</p>

<p class="NDLRefMemberFunction">virtual void Initialize()</p>

<p class="NDLRefMemberDescription">Called by the memory manager
during <span class="NDLSystemFont">NiInit</span>(). This performs
any necessary setup for the allocator.</p>

<p class="NDLRefMemberFunction">virtual void Shutdown()</p>

<p class="NDLRefMemberDescription">Called by the memory manager
during <span class="NDLSystemFont">NiShutdown</span>(). This
performs any necessary shutdown for the allocator.</p>

<p class="NDLRefMemberFunction">virtual bool VerifyAddress(const
void* pvMemory)</p>

<p class="NDLRefMemberDescription">Called by the memory manager
to verify that a memory address is being managed. This method is
only used in <span class="NDLSystemFont"><a href=
"NiMemoryDefines.htm#Preprocessor_Definitions">NI_USE_MEMORY_MANAGEMENT</a></span>
builds of the engine. This method always returns false for
<span class="NDLSystemFont">NiStandardAllocator</span>.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
