<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>PhysXScene Model</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Toolbench" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->

<!--(Begin Links)===================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)==========================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript">
</script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>
<h1>PhysXScene Model</h1>
<p>Found in project: <a href="PhysXModelLibrary__ProjectIntro.htm">PhysXModelLibrary</a></p>
<p>Traits: Active, BuiltinModel</p>
<p>Mixes In: <a href="StandardModelLibrary__BaseEntity.htm">BaseEntity</a></p>
<h4>Description</h4>
<p>Defines the properties for a PhysX NxScene.  This is used by egfPhysX::SceneService to create an NxScene to handle PhysX objects. The name of this entity specifies which PhysXProp objects (including ragdolls, terrains, and shapes) are placed into this scene, and thus which sets of objects can interact.</p>
<h4>Properties</h4>
<table>
<thead>
<tr><th>Name</th> <th>Type</th>  <th>Source Model</th> <th>Default Value</th> <th>Traits</th> <th>Description</th></tr>
</thead>
<tbody>
	<tr>
		<td>Gravity</td>
		<td>Point3</td>
		<td><a href="PhysXModelLibrary__PhysXScene.htm">PhysXScene</a></td>
		<td>0, 0, -9.8</td>
		<td></td>
		<td>Default force to be applied to objects in the scene, in m/s. This is not influenced by ScaleFactor below.</td>
	</tr>
	<tr>
		<td>ScaleFactor</td>
		<td>Float32</td>
		<td><a href="PhysXModelLibrary__PhysXScene.htm">PhysXScene</a></td>
		<td>1</td>
		<td></td>
		<td>World-to-PhysX scale. Note that this is the *inverse* of the scale specified during art tool export. (e.g. if artists export with scale 0.01 in the PhysX export dialog, the runtime PhysX scene must have a scale of 100.0)</td>
	</tr>
	<tr>
		<td>Timestep</td>
		<td>Float32</td>
		<td><a href="PhysXModelLibrary__PhysXScene.htm">PhysXScene</a></td>
		<td>0.016666</td>
		<td></td>
		<td>The timestep used for each PhysX substep. Gamebryo will set timing each frame so that PhysX takes substeps of this size up to the maximum number of substeps. Default is .016666: 1 substep per frame at 60Hz. Lower values will result in greater simulation fidelity and stability but require more CPU time. Higher values will run faster but simulate less stably.</td>
	</tr>
	<tr>
		<td>MaxSubSteps</td>
		<td>UInt32</td>
		<td><a href="PhysXModelLibrary__PhysXScene.htm">PhysXScene</a></td>
		<td>8</td>
		<td></td>
		<td>Sets the maximum number of substeps that PhysX will be asked to take per frame. The actual number of sub-steps taken depends on the frame time, the value of Timestep, and the value of NumSubSteps.</td>
	</tr>
	<tr>
		<td>DoFixedStep</td>
		<td>Boolean</td>
		<td><a href="PhysXModelLibrary__PhysXScene.htm">PhysXScene</a></td>
		<td>True</td>
		<td></td>
		<td>Flag to control whether Gamebryo takes substeps of a fixed duration (see Timestep above), or instead takes a single step of exactly one frame time in length.</td>
	</tr>
	<tr>
		<td>BlockOnFetch</td>
		<td>Boolean</td>
		<td><a href="PhysXModelLibrary__PhysXScene.htm">PhysXScene</a></td>
		<td>False</td>
		<td></td>
		<td>Flag to control whether Gamebryo blocks when fetching results from PhysX if the requested time is not yet available.</td>
	</tr>
	<tr>
		<td>NumSubSteps</td>
		<td>UInt32</td>
		<td><a href="PhysXModelLibrary__PhysXScene.htm">PhysXScene</a></td>
		<td>1</td>
		<td></td>
		<td>Timestep will be divided by NumSubSteps to determine the actual number of simulation steps requested of PhysX. More sub-steps improve the accuracy and stability of simulation, at the cost of increased computation time. At most MaxSubSteps steps will be taken.</td>
	</tr>
	<tr>
		<td>SceneName</td>
		<td>String</td>
		<td><a href="PhysXModelLibrary__PhysXScene.htm">PhysXScene</a></td>
		<td>PhysXDefaultSceneName</td>
		<td></td>
		<td>The name of the scene. Other models reference the scene by this name. Changing this property causes the scene to be removed and re-added.</td>
	</tr>
	<tr>
		<td>UseHardware</td>
		<td>Boolean</td>
		<td><a href="PhysXModelLibrary__PhysXScene.htm">PhysXScene</a></td>
		<td>False</td>
		<td>ReadOnly</td>
		<td>When hardware is available and this property is true, the sceen will be created in hardware. Otherwise, the scene will run on software. Scenes may also run on software if hardware creation fails for some reason. This property cannot be rapidly iterated nor can it be changed after scene creation.</td>
	</tr>
	<tr>
		<td>ActivateOnSetFinished</td>
		<td>Boolean</td>
		<td><a href="PhysXModelLibrary__PhysXScene.htm">PhysXScene</a></td>
		<td>True</td>
		<td></td>
		<td>Specifies whether to start simulating as soon entites are finished loading.</td>
	</tr>
	<tr>
		<td>SimActive</td>
		<td>Boolean</td>
		<td><a href="PhysXModelLibrary__PhysXScene.htm">PhysXScene</a></td>
		<td>False</td>
		<td>ReadOnly</td>
		<td>Scripts or services may use this property to determine whether or not the PhysX scene is currently actively simulating. It is unsafe to perform many PhysX operations when a scene is actively simulating. Internally, a scene is actively simulating when NxScene::simulate has been called and the corresponding NxScene::fetchResults has not yet returned true.</td>
	</tr>
</tbody>
</table>
<h4>Behaviors</h4>
<table>
<thead>
<tr><th>Name</th> <th>Target Type</th> <th>Source Model</th> <th>Traits</th> <th>Description</th></tr>
</thead>
<tbody>
	<tr>
		<td>OnCreate</td>
		<td>Abstract</td>
		<td><a href="StandardModelLibrary__BaseEntity.htm">BaseEntity</a></td>
		<td>Extends</td>
		<td>Behavior invoked when the Entity Manager adds the entity instance. Created entities do not render until they enter the world.</td>
	</tr>
	<tr>
		<td>OnAssetsLoaded</td>
		<td>Abstract</td>
		<td><a href="StandardModelLibrary__BaseEntity.htm">BaseEntity</a></td>
		<td>Extends</td>
		<td>Behavior invoked when the required assets have been loaded.</td>
	</tr>
	<tr>
		<td>OnEntitySetFinished</td>
		<td>Lua</td>
		<td><a href="PhysXModelLibrary__PhysXScene.htm">PhysXScene</a></td>
		<td>Extends</td>
		<td>Behavior invoked when all entities in a world file have completed their OnCreate lifecycle event.</td>
	</tr>
	<tr>
		<td>OnDestroy</td>
		<td>Abstract</td>
		<td><a href="StandardModelLibrary__BaseEntity.htm">BaseEntity</a></td>
		<td>ReverseExtends</td>
		<td>Behavior invoked when the scheduler removes the entity instance from the simulation.</td>
	</tr>
	<tr>
		<td>OnEnterWorld</td>
		<td>Abstract</td>
		<td><a href="StandardModelLibrary__BaseEntity.htm">BaseEntity</a></td>
		<td>Extends</td>
		<td>Behavior invoked when an entity is told to enter the world. By default entities automatically enter the world once OnCreate finishes.</td>
	</tr>
	<tr>
		<td>OnExitWorld</td>
		<td>Abstract</td>
		<td><a href="StandardModelLibrary__BaseEntity.htm">BaseEntity</a></td>
		<td>Extends</td>
		<td>Behavior invoked when an entity is told to exit the world. Once out of the world the entity is still valid but will no longer render.</td>
	</tr>
</tbody>
</table>
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
