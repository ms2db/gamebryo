<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiInstancingUtilities</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiInstancingUtilities</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../efd/efd__MemObject.htm">efd::MemObject</a></span></p>


<p class="NDLRefHeaderFile">&lt;NiInstancingUtilities.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/class_ni_instancing_utilities.gif" alt="Inheritance graph for NiInstancingUtilities"/>
  <p class="FigureCaption">Inheritance graph for NiInstancingUtilities</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">This class encapsulates the majority of the functions required to work with hardware instanced meshes. </p>
<p class="NDLNormal">All methods in this class are static utility functions, so there is no need to instantiate an <span class="NDLSystemFont">NiInstancingUtilities</span> object. </p>

<a name="public_static_methods"></a>
<p class="NDLRefHead1">Public Static Methods</p>


<a name="class_ni_instancing_utilities_1a15bc0f60dd1085fd7b734493ac458ebc"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  EnableMeshInstancing(<br/><span class="NDLSystemFont"><a href="NiMesh.htm">NiMesh</a></span>* pkMesh, <br/><span class="NDLSystemFont">NiUInt32</span> uiMaxTransforms, <br/><span class="NDLSystemFont"><a href="../NiMain/NiTransform.htm">NiTransform</a></span>* pkTransforms = NULL, <br/><span class="NDLSystemFont">NiUInt32</span> uiActiveTransforms = 0, <br/><span class="NDLSystemFont">NiUInt32</span> uiMaxIndicesPerSubmesh = 65536, <br/><span class="NDLSystemFont">bool</span> bCullPerInstance = true, <br/><span class="NDLSystemFont">bool</span> bStaticBounds = false, <br/><span class="NDLSystemFont">bool</span> bCPURead = true, <br/>void* pvIndexData = NULL, <br/><span class="NDLSystemFont">NiUInt32</span> uiIndexCount = 0, <br/><span class="NDLSystemFont"><a href="NiDataStreamElement.htm#class_ni_data_stream_element_1a4a4822c6a137f25713f304012b600d20">NiDataStreamElement::Format</a></span> eIndexFormat = NiDataStreamElement::F_UINT32_1)</p>
<p class="NDLRefMemberDescription">Enables mesh instancing on the provided mesh. </p>
<p class="NDLRefMemberDetailedDescription">This method will add the required transform data streams, attach the <span class="NDLSystemFont"><a href="NiInstancingMeshModifier.htm">NiInstancingMeshModifier</a></span>, configure the required submesh regions, and duplicate index data if required in order to allow the provided mesh to support hardware instancing.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pkMesh</span></td>
    <td>The mesh to have instancing support added. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiMaxTransforms</span></td>
    <td>The maximum number of instances, or transforms, that the instanced mesh will be able to support. This value cannot change after instancing has been enabled on the mesh. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkTransforms</span></td>
    <td>A pointer to an array of <span class="NDLSystemFont"><a href="../NiMain/NiTransform.htm">NiTransform</a></span> objects that the instance transforms should be initialized too. This array must contain at least a count of uiActiveTransforms valid transform objects. If this value is NULL all transforms will be assigned the identity transform. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiActiveTransforms</span></td>
    <td>The number of instances, or transforms, that will be active and visible. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiMaxIndicesPerSubmesh</span></td>
    <td>The maximum number of indices that will be allowed to be referenced per submesh. This value is used to mitigate the amount of index data duplicate that is required for instancing support for some platforms. The number of indices that can exist will be limited to this value. Decreasing this parameter will result in less data duplication on some platforms, but require more submeshes, hence additional render calls. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">bCullPerInstance</span></td>
    <td>Specifies whether per instance culling should be enabled for the instanced mesh. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">bStaticBounds</span></td>
    <td>Specifies whether the bounding volume that encapsulates all the instances should be static or dynamic. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">bCPURead</span></td>
    <td>Specifies whether the transform data stream should be created with CPU_READ flag. Note that some options, such as per instance culling, require this and will force CPU_READ regardless of what this flag is set too. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pvIndexData</span></td>
    <td>Pointer to either a NiUInt32 or a NiUInt16 array containing the index data for the mesh. This is only required if the current platform requires index data duplication and the index data in the mesh is not flagged with CPU_READ. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiIndexCount</span></td>
    <td>Number of index values referenced by the pvIndexData pointer. This is only required if the current platform requires index data duplication and the index data in the mesh is not flagged with CPU_READ. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">eIndexFormat</span></td>
    <td>Specifies the format of the index data referenced by the pvIndexData pointer. This is only required if the current platform requires index data duplication and the index data in the mesh is not flagged with CPU_READ. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_instancing_utilities_1ab9ed12c708c9c84e20b09ae9b6afa290"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  DisableMeshInstancing(<span class="NDLSystemFont"><a href="NiMesh.htm">NiMesh</a></span>* pkMesh)</p>
<p class="NDLRefMemberDescription">Disables mesh instancing on an instanced mesh. </p>
<p class="NDLRefMemberDetailedDescription">This includes removing the transform data streams and the instancing mesh modifier from the mesh. Note that this will not delete any existing <span class="NDLSystemFont"><a href="NiMeshHWInstance.htm">NiMeshHWInstance</a></span> objects that reference this mesh. </p>

<a name="class_ni_instancing_utilities_1a8edd6cbdd3e4721624e89941e4afc283"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  SetInstanceTransformations(<br/><span class="NDLSystemFont"><a href="NiMesh.htm">NiMesh</a></span>* pkMesh, <br/><span class="NDLSystemFont"><a href="../NiMain/NiTransform.htm">NiTransform</a></span>* pkTransforms, <br/><span class="NDLSystemFont">NiUInt32</span> uiTransformCount, <br/><span class="NDLSystemFont">NiUInt32</span> uiInstanceOffset = 0)</p>
<p class="NDLRefMemberDescription">Manually sets the transforms for instances of an instanced mesh. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pkMesh</span></td>
    <td>Pointer to the instanced mesh. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkTransforms</span></td>
    <td>Pointer to an array of <span class="NDLSystemFont"><a href="../NiMain/NiTransform.htm">NiTransform</a></span> objects that represent the transforms to be set. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiTransformCount</span></td>
    <td>Number of transforms that will be set. There must be at least a count of uiTransformCount transforms available in the array referenced by pkTransforms. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiInstanceOffset</span></td>
    <td>Offset, in instances, into the transform data stream that the pkTransforms data will be copied too. The sum of uiTransformCount and uiInstanceOffset can not be greater than the maximum number of instances. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Whether or not the transforms were successfully set. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_instancing_utilities_1ac8ce03a138797edacfd4903941578a7d"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  ComputeWorldBound(<span class="NDLSystemFont"><a href="NiMesh.htm">NiMesh</a></span>* pkMesh)</p>
<p class="NDLRefMemberDescription">Computes the world bound for an instanced mesh. </p>
<p class="NDLRefMemberDetailedDescription">This requires locking the transform data stream and iterating over every transform. </p>

<a name="class_ni_instancing_utilities_1a3a7245ca3459dd041211aeb76086272d"></a>
<p class="NDLRefMemberFunction">static void  PackTransform(<br/>const <span class="NDLSystemFont"><a href="../NiMain/NiTransform.htm">NiTransform</a></span>& kSourceTransform, <br/><span class="NDLSystemFont"><a href="../NiMain/NiPoint4.htm">NiPoint4</a></span>* pkDest)</p>
<p class="NDLRefMemberDescription">Helper method to pack a <span class="NDLSystemFont"><a href="../NiMain/NiTransform.htm">NiTransform</a></span> object into a <span class="NDLSystemFont"><a href="../NiMain/NiPoint4.htm">NiPoint4</a></span> object in format that is easily consumable by the graphics card. </p>

<a name="class_ni_instancing_utilities_1a3e682d7ee4623e0060ab5adc507a4ca0"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  AddMeshInstance(<br/><span class="NDLSystemFont"><a href="NiMesh.htm">NiMesh</a></span>* pkMesh, <br/><span class="NDLSystemFont"><a href="NiMeshHWInstance.htm">NiMeshHWInstance</a></span>* pkHWInstance)</p>
<p class="NDLRefMemberDescription">Attaches a <span class="NDLSystemFont"><a href="NiMeshHWInstance.htm">NiMeshHWInstance</a></span> object to the specified instanced mesh. </p>
<p class="NDLRefMemberDetailedDescription">Attaching a <span class="NDLSystemFont"><a href="NiMeshHWInstance.htm">NiMeshHWInstance</a></span> object to an instanced mesh will switch the mesh from working with manually provided transforms to only using transforms provided via <span class="NDLSystemFont"><a href="NiMeshHWInstance.htm">NiMeshHWInstance</a></span> objects. </p>

<a name="class_ni_instancing_utilities_1a6e437d1d52d32eee501139287753a5ed"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  RemoveMeshInstance(<br/><span class="NDLSystemFont"><a href="NiMesh.htm">NiMesh</a></span>* pkMesh, <br/><span class="NDLSystemFont"><a href="NiMeshHWInstance.htm">NiMeshHWInstance</a></span>* pkHWInstance)</p>
<p class="NDLRefMemberDescription">Detaches the provided <span class="NDLSystemFont"><a href="NiMeshHWInstance.htm">NiMeshHWInstance</a></span> object from the instanced mesh. </p>
<p class="NDLRefMemberDetailedDescription">The instanced mesh will no longer reference the <span class="NDLSystemFont"><a href="NiMeshHWInstance.htm">NiMeshHWInstance</a></span> object. This operation will not destroy the provided <span class="NDLSystemFont"><a href="NiMeshHWInstance.htm">NiMeshHWInstance</a></span> object. </p>

<a name="class_ni_instancing_utilities_1af3e3fcf0e8957cdc41cb48f140cdebf2"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">NiUInt32</span>  GetActiveInstanceCount(const <span class="NDLSystemFont"><a href="NiMesh.htm">NiMesh</a></span>* pkMesh)</p>
<p class="NDLRefMemberDescription">Returns the number of active instances on the instanced mesh. </p>

<a name="class_ni_instancing_utilities_1ac6545632bc84888fe31e112e9821c2e3"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">NiUInt32</span>  GetVisibleInstanceCount(const <span class="NDLSystemFont"><a href="NiMesh.htm">NiMesh</a></span>* pkMesh)</p>
<p class="NDLRefMemberDescription">Returns the number of visible instances of the instanced mesh. </p>

<a name="class_ni_instancing_utilities_1a44c16e8eb8b5b0e3830686fa0bbd743d"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">NiUInt32</span>  GetMaxInstanceCount(const <span class="NDLSystemFont"><a href="NiMesh.htm">NiMesh</a></span>* pkMesh)</p>
<p class="NDLRefMemberDescription">Returns the maximum number of instances that can be assigned to the instanced mesh. </p>

<a name="class_ni_instancing_utilities_1aa3fcfa730e402a7da885d51d0b51aad1"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">NiUInt32</span>  GetTransformsPerSubmesh(const <span class="NDLSystemFont"><a href="NiMesh.htm">NiMesh</a></span>* pkMesh)</p>
<p class="NDLRefMemberDescription">Returns the maximum number of transforms that can be used per submesh for the provided instanced mesh. </p>

<a name="class_ni_instancing_utilities_1ac0ff1f18b3321d40511d2519c14ec753"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">NiUInt32</span>  GetVisibleSubmeshCount(const <span class="NDLSystemFont"><a href="NiMesh.htm">NiMesh</a></span>* pkMesh)</p>
<p class="NDLRefMemberDescription">Returns the number of visible submeshes for the provided instanced mesh. </p>

<a name="class_ni_instancing_utilities_1a309a569a7478244fa18edf4859fc79e9"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">NiUInt32</span>  GetInstanceIndexFrequency(<br/>const <span class="NDLSystemFont"><a href="NiMesh.htm">NiMesh</a></span>* pkMesh, <br/><span class="NDLSystemFont">NiUInt32</span> uiSubmeshIdx)</p>
<p class="NDLRefMemberDescription">Gets the rate at which the indices should repeat for an instanced mesh. </p>

<a name="class_ni_instancing_utilities_1a7e7be63319f138ccd9af4ef1a85e2301"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">NiUInt32</span>  GetInstanceIndexFrequency(<br/>const <span class="NDLSystemFont"><a href="NiMesh.htm">NiMesh</a></span>* pkMesh, <br/><span class="NDLSystemFont">NiUInt32</span> uiSubmeshIdx, <br/>const <span class="NDLSystemFont"><a href="NiDataStreamRef.htm">NiDataStreamRef</a></span>* pkIndexBufferRef)</p>
<p class="NDLRefMemberDescription">Gets the rate at which the indices should repeat for an instanced submesh using the pre-specified stream reference. </p>

<a name="class_ni_instancing_utilities_1a26489121739773a25d1cffec3aca3d26"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">NiUInt32</span>  GetInstanceIndexCount(<br/>const <span class="NDLSystemFont"><a href="NiMesh.htm">NiMesh</a></span>* pkMesh, <br/><span class="NDLSystemFont">NiUInt32</span> uiSubmeshIdx)</p>
<p class="NDLRefMemberDescription">Gets the total number of indices for all active instances on an instanced submesh. </p>

<a name="class_ni_instancing_utilities_1ac43908290958cf3fdafe7eb1ba2ad783"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">NiUInt32</span>  GetInstanceIndexCount(<br/>const <span class="NDLSystemFont"><a href="NiMesh.htm">NiMesh</a></span>* pkMesh, <br/><span class="NDLSystemFont">NiUInt32</span> uiSubmeshIdx, <br/>const <span class="NDLSystemFont"><a href="NiDataStreamRef.htm">NiDataStreamRef</a></span>* pkIndexBufferRef)</p>
<p class="NDLRefMemberDescription">Gets the total number of indices for all active instances on an instanced submesh using the pre-specified stream reference. </p>

<a name="class_ni_instancing_utilities_1a1a258e97377dc013d4c5b0cc5e78c477"></a>
<p class="NDLRefMemberFunction">static void  SetActiveInstanceCount(<br/><span class="NDLSystemFont"><a href="NiMesh.htm">NiMesh</a></span>* pkMesh, <br/><span class="NDLSystemFont">NiUInt32</span> uiActiveCount)</p>
<p class="NDLRefMemberDescription">Sets the active instance count on the instanced mesh provided. </p>

<a name="class_ni_instancing_utilities_1a6841d8a75a3baded4a18cbf22c81ea32"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  InstancingIndexDuplicationRequired()</p>
<p class="NDLRefMemberDescription">Determines if the current platform requires the index data to be duplicated for instancing support. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
