<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiMesh Library Release Notes</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>NiMesh Library Release Notes</h1>

<p><a href="#Added_Features_and_Fixed_Bugs">Added Features,
Changed Behavior, and Fixed Bugs</a></p>

<p><a href="#Known_Issues_and_Limitations">Known Issues and
Limitations</a></p>

<a name="Added_Features_and_Fixed_Bugs" id="Added_Features_and_Fixed_Bugs"></a><h2>Added Features, Changed Behavior, and Fixed Bugs</h2>

<h3>Gamebryo LightSpeed 3.2</h3>

<ul>
  <li>Fixed an issue in NiMesh::IsInstancable which caused it to sometimes return incorrect
  results and interfere with the export of instanced meshes.</li>
</ul>

<h3>Gamebryo LightSpeed 3.1</h3>

<ul>
  <li>None in this release.</li>
</ul>

<h3>Gamebryo LightSpeed 3.0</h3>

<ul>
    <li>Added the <a href="NiDebugVisualizationClick.htm" class=
    "NDLSystemFont">NiDebugVisualizationClick</a> class to
    NiMesh. This is a render click intended for debugging
    purposes only, which allows cameras, lights, bounding
    volumes, and bones to be visualized in-game.</li>
</ul>

<h3>Gamebryo 2.6</h3>

<ul>
    <li>Updated the behavior of <span class=
    "NDLSystemFont"><a href=
    "../../Convert/Previous/Converting_to_Gamebryo_2.6_Overview.htm#Changes_to_NiDataStream__LockType_flags">
    NiDataStream::LockType</a></span> flags and the functions
    <span class="NDLSystemFont"><a href=
    "../../Convert/Previous/Converting_to_Gamebryo_2.6_Overview.htm#Changes_to_NiDataStream__LockRead_and_LockWrite">
    NiDataStream::LockRead</a></span> and <span class=
    "NDLSystemFont">LockWrite</span>.</li>

    <li>Fixed a bug where meshes with more than 256 submeshes
    could not be exported.</li>

    <li>Added a new usage type to the <span class=
    "NDLSystemFont"><a href=
    "../NiMesh/NiDataStream.htm">NiDataStream::Usage</a></span>
    enumeration: <span class=
    "NDLSystemFont">USAGE_DISPLAYLIST</span>.</li>
</ul>

<h3>Gamebryo 2.5</h3>

<ul>
    <li>Introduced <a href=
    "../../Programmer/NiMesh/Introduction_to_the_NiMesh_Library.htm">
        <span class="NDLSystemFont">NiMesh</span></a> as a
        replacement for <span class=
        "NDLSystemFont">NiGeometry</span>, <span class=
        "NDLSystemFont">NiGeometryData</span>, and their derived
        classes. Previously, <span class=
        "NDLSystemFont">NiGeometryData</span> provided storage
        for geometry data in a fixed format across all platforms.
        At run time, this data was reformatted and packed for
        optimal rendering by the renderer on each platform. While
        homogenous and portable, this approach required two
        copies of the geometry data at run time: Gamebryo loaded
        the cross-platform data from disc and then created the
        packed, renderable version. With static data, the
        cross-platform copy was purged after the renderer copy
        was created. Even with that optimization, however, there
        was an undesirable memory overhead during the conversion.
        <span class="NDLSystemFont">NiMesh</span> eliminates many
        of these limitations by allowing geometry to be
        preformatted in the art pipeline specifically for each
        platform renderer. The following list summarizes that
        benefit as well as the many other advantages <span class=
        "NDLSystemFont">NiMesh</span> offers over the old
        <span class="NDLSystemFont">NiGeometry</span> system:

        <ul>
            <li>Removes run time data conversions, accelerating
            data loading.</li>

            <li>Allows flexible and compressed data
            representations for reduced bus bandwidth to the
            GPU.</li>

            <li>Eliminates buffer to buffer copies and any memory
            fragmentation that may have occurred due to these
            copies for common geometry usage.</li>

            <li>Supports optimization of data access patterns
            using multiple geometry streams.</li>

            <li>Provides a generic interface for geometry data
            access using semantic names to distinguish data
            meaning. Multiple NBT sets, fur length, 3D texture
            coordinates, etc. are all supported.</li>

            <li>Removes the old limit of 65535 vertices within a
            single object.</li>

            <li>Enables <a href=
            "../../Programmer/NiMesh/Introduction_to_Instancing.htm">
            GPU instancing</a>.</li>

            <li>Enables more flexible geometry data sharing. E.g.
            sharing index, position, and uv coordinates while
            using unique vertex colors per object.</li>

            <li>Any material or shader may be applied to any
            compatible NiMesh object, including particle
            systems.</li>
        </ul>
    </li>

    <li>Introduced <a href=
    "../../Programmer/NiMesh/Introduction_to_Mesh_Modifiers.htm">
        Mesh Modifiers</a> as a general purpose API for
        dynamically updating geometry.

        <ul>
            <li>Gamebryo 2.5 comes with modifiers for <a href=
            "../NiMesh/NiSkinningMeshModifier.htm">skinning</a>,
            <a href=
            "../NiMesh/NiMorphMeshModifier.htm">morphing</a>,
            particle system <a href=
            "../NiParticle/NiPSSimulator.htm">simulation</a> and
            <a href=
            "../NiParticle/NiPSFacingQuadGenerator.htm">quad
            generation</a>, <a href=
            "../NiMesh/NiInstancingMeshModifier.htm">instance
            culling</a>, and <a href=
            "../../Learn/Demos/MeshCreation_Demo_Overview.htm">water
            simulation</a>.</li>

            <li>Custom modifiers can be created by customers to
            create effects unique to their game... Terrain,
            hair/fur, stencil shadow volumes, and much more.</li>

            <li>Modifiers may take full advantage of <a href=
            "../../Programmer/NiFloodgate/Introduction_to_NiFloodgate.htm">
            Floodgate</a>, so that work performed by the modifier
            is executed in parallel on multiple cores. All of the
            modifiers that ship with Gamebryo use Floodgate.</li>
        </ul>
    </li>

    <li>Introduced <a href=
    "../NiMesh/NiImmediateModeAdapter.htm"><span class=
    "NDLSystemFont">NiImmediateModeAdapter</span></a> and its
    helper class <a href=
    "../NiMesh/NiImmediateModeMacro.htm"><span class=
    "NDLSystemFont">NiImmediateModeMacro</span></a> to facilitate
    drawing debug geometry on screen without going through the
    whole process of creating data streams and meshes. This
    functionality has been incorporated into AssetViewer to draw
    debug cameras and lights.</li>
</ul>

<a name="Known_Issues_and_Limitations" id="Known_Issues_and_Limitations"></a><h2>Known Issues and Limitations</h2>

<ul>
    <li>Stream-out streams will not be correctly saved to or
    loaded from a NIF file.</li>

    <li>There is no way to purge the GPU data from an
    <span class="NDLSystemFont"><a href=
    "../NiMesh/NiDataStream.htm">NiDataStream</a></span> object
    without destroying the entire data stream. <span class=
    "NDLSystemFont">NiRenderer::PurgeAllRendererData</span> and
    <span class="NDLSystemFont">NiNode::PurgeRendererData</span>
    will not remove GPU data from the data streams, but
    <span class=
    "NDLSystemFont">NiMesh::RemoveAllStreamRefs</span> can be
    used release the entire data stream if necessary.</li>

    <li>The renderer is likely to crash when the index stream on a mesh is
    replaced but the material properties of the mesh remain the same. This
    bug is due to internal caching of the index stream in the material system
    in such a way that it is not refreshed even if the material is marked dirty
    or the stream changes. Should you need to modify the index stream of a mesh,
    we strongly recommend that you allocate a data stream containing as many
    elements as you will ever need, and use <span class="NDLSystemFont">
    <a href="NiDataStreamRef.htm">NiDataStreamRef::SetActiveCount</a>
    </span> to modify the number of active indices. Existing code for generating
    particle geometry provides an example. See the source for the
    <span class="NDLSystemFont">
    <a href="../NiParticle/NiPSFacingQuadGenerator.htm">NiPSFacingQuadGenerator</a>
    </span> class.
    </li>

    <li>The <a href=
    "../NiMesh/NiMorphMeshModifier.htm"><span class=
    "NDLSystemFont">NiMorphMeshModifier</span></a> class for
    controlling morphing is limited to at most 20 morph targets
    per-object on PS3.  This also applies to assets that are
    finalized as generic assets, so that they can be viewed on
    the PS3.</li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
