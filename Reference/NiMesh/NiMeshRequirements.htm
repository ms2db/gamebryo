<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiMeshRequirements</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiMeshRequirements</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../NiMain/NiRefObject.htm">NiRefObject</a></span></p>


<p class="NDLRefHeaderFile">&lt;NiMeshRequirements.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/class_ni_mesh_requirements.gif" alt="Inheritance graph for NiMeshRequirements"/>
  <p class="FigureCaption">Inheritance graph for NiMeshRequirements</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">This class holds the set of requirements that a <span class="NDLSystemFont"><a href="NiMesh.htm">NiMesh</a></span> object must meet in order to support an associated shader, modifier, etc. </p>
<p class="NDLNormal">These requirements are on the semantics present on the stream and all aspects of their formatting and storage.</p>
<p class="NDLNormal">Each object holds an array of requirement sets. The requirements will be considered satisfied if all of the contents of any one set are satisified.</p>
<p class="NDLNormal">The <span class="NDLSystemFont">NiMeshRequirements</span> class is used by the tool pipeline profile process and that system attempts to satisfies requirements from various modifiers and will use the first satisfiable set. As such, requirement sets should be specified with the most restrictive sets first. </p>

<a name="public_types"></a>
<p class="NDLRefHead1">Public Types</p>
<a name="class_ni_mesh_requirements_1a3a1ee4591a831705b202ae8063c9aa74"></a>
<p class=NDLRefHead2>NiMeshRequirements::StreamBehavior</p>


<p class="NDLRefMemberDescription">The various ways in which a stream interleaving request can be satisfied. </p>

<p class="NDLRefMemberDetailedDescription">STRICT_INTERLEAVE indicates that any semantic with the same streamID must be kept together - those semantics can not exist in separate data stream.</p>
<p class="NDLRefMemberDetailedDescription">CAN_SPLIT allows additional semantics to be specified in a stream, but allows for those semantics to be split apart if necessary. If those semantics are split apart, it is important to note that only other semantics having the same StreamID can exists with them.</p>
<p class="NDLRefMemberDetailedDescription">FLOATER indicates that the stream that the semantic is placed in doesn't matter. The FLOATER enumeration is used specifically by the tool pipeline profile system to allow a semantic to be merged into any stream that the profile needs the semantic to be in. In general, mixing FLOATERS with CAN_SPLIT and STRICT_INTERLEAVE streams should be avoided to ensure maximum flexibility.</p>
<p class="NDLRefMemberDetailedDescription">As an example, imagine that a profile specifies semantics A,B,C as CAN_SPLIT and gives each semantic the same streamID. Also imagine that a modifier specifies that A and B are optionally together (CAN_SPLIT) in the same stream but that C is marked as a FLOATER. In this situation, the merge will fail. When semantics are defined with STRICT_INTERLEAVE or CAN_SPLIT, the stream is being defined such that no other semantics can exist in that stream other than those specified.</p>
<p class="NDLRefMemberDetailedDescription">In the example given, the profile specifies that ABC can exist together in the same stream but that no other semantic can exist with it. It also allows for the semantics to be split apart and in any combination just as long as no other semantic is placed with it. Likewise, the modifier, by specifying semantics A and B as CAN_SPLIT and giving them the same streamID is ruling out that C can ever exist in that stream. In order for a successful merge to occur, the modifier should specify C as CAN_SPLIT, or alternatively, it should define semantics A and B as FLOATERS so that the profile will merge it in with semantic C.</p>
<p class="NDLRefMemberDetailedDescription">No concept exists at present for specifying that a subset of semantics should strictly be interleaved, but that any other semantic (a wildcard specification) may be added to the same stream. </p>

<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">STRICT_INTERLEAVE</span></td>
    <td>See text above. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">CAN_SPLIT</span></td>
    <td>See text above. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">FLOATER</span></td>
    <td>See text above. </td>
</tr>

  </tbody>
</table>
</div>



<a name="class_ni_mesh_requirements_1a8fdabce16b3f92ca83168531989d0e9b"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont"><a href="NiMeshRequirements__SemanticRequirement.htm">SemanticRequirement</a></span>&gt;  SemanticRequirementPtr</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_mesh_requirements_1a177bc0a79337586768a0e0973c259e0f"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../NiMain/NiTObjectPtrSet.htm">NiTObjectPtrSet</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">SemanticRequirementPtr</a></span>&gt;  RequirementSet</p>
<p class="NDLRefMemberDescription">Type for holding a set of requirements. </p>
<a name="public_attributes"></a>
<p class="NDLRefHead1">Public Attributes</p>


<a name="class_ni_mesh_requirements_1af57b9bf505464db6ed1e34ee81a74a71"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../NiMain/NiString.htm">NiString</a></span>  m_kReqName</p>
<p class="NDLRefMemberDescription">A name given to the requirement. </p>
<p class="NDLRefMemberDetailedDescription">Not necessary but may be useful for debugging. </p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="class_ni_mesh_requirements_1a11e55aeee76fe5345c084ab5c9c68c57"></a>
<p class="NDLRefMemberFunction">NiMeshRequirements(<br/>const char* pkRequirementName, <br/>NiSystemDesc::RendererID eRenderer)</p>
<p class="NDLRefMemberDescription">Constructed object contains no requirements. </p>

<a name="class_ni_mesh_requirements_1a42ecd45cd9d76c3bf9f2847456b66554"></a>
<p class="NDLRefMemberFunction">~NiMeshRequirements()</p>
<p class="NDLRefMemberDescription">Destructor. </p>

<a name="class_ni_mesh_requirements_1adb6482cec59eebf213f9d5fd24b42ba4"></a>
<p class="NDLRefMemberFunction">NiSystemDesc::RendererID  GetRenderer() const</p>
<p class="NDLRefMemberDescription">Access to the target platform, required because modifiers, and hence requirements, might be platform specific. </p>

<a name="class_ni_mesh_requirements_1aa856f69454c0c49b9c3dfaead438ce51"></a>
<p class="NDLRefMemberFunction">void  SetRenderer(const NiSystemDesc::RendererID eRenderer)</p>
<p class="NDLRefMemberDescription">Set the renderer we are seeking requirements for (default is any renderer). </p>

<a name="class_ni_mesh_requirements_1a7e9919954df0b1deac48f61e4c81cb90"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  CreateNewRequirementSet()</p>
<p class="NDLRefMemberDescription">Creates a new empty set of requirements. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>The index of the new set. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_mesh_requirements_1a72fe46a7e65501862e7bc3edc8c10af8"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  GetSetCount() const</p>
<p class="NDLRefMemberDescription">Obtain the number of requirement sets. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>The number of indexes that must be iterated over to examine every set of requirements. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_mesh_requirements_1ab738c07f018ff381a7d68bbc70da352e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  AddRequirement(<br/><span class="NDLSystemFont">NiUInt32</span> uiSet, <br/><span class="NDLSystemFont"><a href="NiMeshRequirements__SemanticRequirement.htm">SemanticRequirement</a></span>* pkRequirement)</p>
<p class="NDLRefMemberDescription">Add a requirement to the specified set. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">uiSet</span></td>
    <td>The set for which the requirement should be added to.</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkRequirement</span></td>
    <td>The requirement to add. This pointer will subsequently be owned by the <span class="NDLSystemFont">NiMeshRequirements</span> class via a smart pointer, and applications must not delete it.</td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The index at which the requirement was added. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_mesh_requirements_1ad2509c334008b54a5e78901f7e071127"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  AddRequirement(<br/><span class="NDLSystemFont">NiUInt32</span> uiSet, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>& kSemantic, <br/><span class="NDLSystemFont">NiUInt32</span> uiSemanticIndex, <br/><span class="NDLSystemFont"><a href="NiMeshRequirements.htm#class_ni_mesh_requirements_1a3a1ee4591a831705b202ae8063c9aa74">NiMeshRequirements::StreamBehavior</a></span> eStreamBehavior, <br/><span class="NDLSystemFont">NiUInt32</span> uiStreamID, <br/><span class="NDLSystemFont"><a href="NiDataStream.htm#class_ni_data_stream_1ad6c208b3047b3100e5da9ea08dabea0d">NiDataStream::Usage</a></span> eUsage, <br/><span class="NDLSystemFont">NiUInt8</span> uiAccess = 0, <br/><span class="NDLSystemFont"><a href="NiDataStreamElement.htm#class_ni_data_stream_element_1a4a4822c6a137f25713f304012b600d20">NiDataStreamElement::Format</a></span> eFormat = NiDataStreamElement::F_UNKNOWN)</p>
<p class="NDLRefMemberDescription">Add a requirement to the specified set. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">uiSet</span></td>
    <td>The set for which the requirement should be added to.</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kSemantic</span></td>
    <td>The semantic name for which the requirement holds.</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiSemanticIndex</span></td>
    <td>The semantic index for which the requirement holds.</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">eStreamBehavior</span></td>
    <td>The stream behavior requirements. See the details documented under the StreamBehavior enumeration.</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiStreamID</span></td>
    <td>The id stream for which the semantic should be associated with. Note that the stream behavior parameter effects how this id is interpreted. For FLOATERs, the stream id has no effect.</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">eUsage</span></td>
    <td>Specifies the required usage. When the tool-pipeline profile system attempts to merge modifier requirements, usage must have exact agreement or else merging fails.</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiAccess</span></td>
    <td>Specifies the required access flags. When the tool- pipeline profile system attempts to merge access flags, it allows for increases in access.</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">eFormat</span></td>
    <td>Specifies the required format. If more formats are allowed, they can be added after construction.</td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The index at which the requirement was added. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_mesh_requirements_1acd26ea2af2bcc54feafa671a15adccf1"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  GetRequirementCount(<span class="NDLSystemFont">NiUInt32</span> uiSet) const</p>
<p class="NDLRefMemberDescription">Get the number of requirements in the specified set. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">uiSet</span></td>
    <td>Specifies the requirement set to query.</td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The number of requirements for the particular set. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_mesh_requirements_1a205534339d750c9a2bf9137e928f3208"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../NiMain/NiTObjectPtrSet.htm">RequirementSet</a></span>*  GetSetAt(<span class="NDLSystemFont">NiUInt32</span> uiIndex) const</p>
<p class="NDLRefMemberDescription">Retrieve the requirement set at the specified index. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">uiIndex</span></td>
    <td>Specifies the requirement set to retrieve.</td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A pointer to the requested requirement-set. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_mesh_requirements_1a49fbd8e41b3890c70023b449d3712451"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiMeshRequirements__SemanticRequirement.htm">SemanticRequirement</a></span>*  GetRequirement(<br/><span class="NDLSystemFont">NiUInt32</span> uiSet, <br/><span class="NDLSystemFont">NiUInt32</span> uiIndex) const</p>
<p class="NDLRefMemberDescription">Obtain a requirement from the specified set. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">uiSet</span></td>
    <td>The set for which to query.</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiIndex</span></td>
    <td>The index of the desired requirement.</td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A pointer to the requirement, or NULL if the requested index does not hold a requirement. Applications should assign the returned pointer to a smart pointer if they wish the pointer to remain valid after the <span class="NDLSystemFont">NiMeshRequirements</span> object is deleted. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_mesh_requirements_1af5265bb557d1d01fefbdf3a5ea5698ae"></a>
<p class="NDLRefMemberFunction">void  ReleaseAllSemanticRequirements()</p>
<p class="NDLRefMemberDescription">Deletes all requirement sets and releases all semantic requirements. </p>

<a name="class_ni_mesh_requirements_1a94a2ac5b7860deaebbc5e3a3c88aa794"></a>
<p class="NDLRefMemberFunction">void  AddRequirementSet(<span class="NDLSystemFont"><a href="../NiMain/NiTObjectPtrSet.htm">RequirementSet</a></span>* pkReqSet)</p>
<p class="NDLRefMemberDescription">Add a requirement set. </p>

<a name="class_ni_mesh_requirements_1a707955765b9eb253d6b3eb4237dc3caf"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiMeshRequirements</span>&  operator=(const <span class="NDLSystemFont">NiMeshRequirements</span>& r)</p>
<p class="NDLRefMemberDescription">Assignment operator. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
