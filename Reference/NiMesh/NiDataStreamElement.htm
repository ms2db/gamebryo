<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiDataStreamElement</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiDataStreamElement</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../efd/efd__MemObject.htm">efd::MemObject</a></span></p>


<p class="NDLRefHeaderFile">&lt;NiDataStreamElement.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/class_ni_data_stream_element.gif" alt="Inheritance graph for NiDataStreamElement"/>
  <p class="FigureCaption">Inheritance graph for NiDataStreamElement</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">Describes an element of a <span class="NDLSystemFont"><a href="NiDataStream.htm">NiDataStream</a></span> object, by data type, format, and offset. </p>

<a name="public_types"></a>
<p class="NDLRefHead1">Public Types</p>
<a name="class_ni_data_stream_element_1a0d721d952c046046a09969f562caebdd"></a>
<p class=NDLRefHead2>NiDataStreamElement::Type</p>


<p class="NDLRefMemberDescription">Primitive C++ type of this element. </p>


<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">T_UNKNOWN</span></td>
    <td>Invalid/Indeterminate type. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">T_INT8</span></td>
    <td>Signed 8-bit integer (NiInt8). </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">T_UINT8</span></td>
    <td>Unsigned 8-bit integer (NiUInt8). </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">T_INT16</span></td>
    <td>Signed 16-bit integer (NiInt16). </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">T_UINT16</span></td>
    <td>Unsigned 16-bit integer (NiUInt16). </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">T_INT32</span></td>
    <td>Signed 32-bit integer (NiInt32). </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">T_UINT32</span></td>
    <td>Unsigned 32-bit integer (NiUInt32). </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">T_FLOAT16</span></td>
    <td>16-bit floating point value (No type exists). </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">T_FLOAT32</span></td>
    <td>32-bit floating point value (float). </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">T__EnumerationCount</span></td>
    <td>Maximum Type. </td>
</tr>

  </tbody>
</table>
</div>

<a name="class_ni_data_stream_element_1a4a4822c6a137f25713f304012b600d20"></a>
<p class=NDLRefHead2>NiDataStreamElement::Format</p>


<p class="NDLRefMemberDescription">Component count, size in bytes, type, and custom data for this element. </p>

<p class="NDLRefMemberDetailedDescription">Fixed point (integer) types are defined for each of the following:</p>
<ul>
<li>8bit, 16bit, 32bit</li>
<li>1, 2, 3, 4 components</li>
<li>signed, unsigned interpretation</li>
<li>unnormalized, normalized interpretation</li></ul>
<p class="NDLRefMemberDetailedDescription">Signed Float types are defined for each of the following:</p>
<ul>
<li>16bit, 32bit</li>
<li>1, 2, 3, 4 components</li></ul>
<p class="NDLRefMemberDetailedDescription">Additional packed types are defined. Component count is 1 for user code but expanded when decompressed.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">These values are subject to change in future releases. Applications should not depend on the contents of these enumerations to be invariant across releases. </p></p>

<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">F_CUSTOM_SHIFT</span></td>
    <td>Custom type bit. Bit 31 (Most Significant Bit). </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_CUSTOM_MASK</span></td>
    <td>Masks off most significant bit. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_COMP_COUNT_SHIFT</span></td>
    <td>Component count in bytes. Bits 16-23. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_COMP_COUNT_MASK</span></td>
    <td>Masks off most bits 16-23. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_COMP_SIZE_SHIFT</span></td>
    <td>Component type size in bytes. Bits 8-15. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_COMP_SIZE_MASK</span></td>
    <td>Masks off most bits 8-15. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_INDEX_SHIFT</span></td>
    <td>Component type index. Allows table lookups indexed by these enumerations. Bits 0-7. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_INDEX_MASK</span></td>
    <td>Masks off most bits 0-7. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_UNKNOWN</span></td>
    <td>Unknown, or don't care, format. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_INT8_1</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_INT8_2</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_INT8_3</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_INT8_4</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_UINT8_1</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_UINT8_2</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_UINT8_3</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_UINT8_4</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_NORMINT8_1</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_NORMINT8_2</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_NORMINT8_3</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_NORMINT8_4</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_NORMUINT8_1</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_NORMUINT8_2</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_NORMUINT8_3</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_NORMUINT8_4</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_INT16_1</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_INT16_2</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_INT16_3</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_INT16_4</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_UINT16_1</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_UINT16_2</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_UINT16_3</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_UINT16_4</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_NORMINT16_1</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_NORMINT16_2</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_NORMINT16_3</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_NORMINT16_4</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_NORMUINT16_1</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_NORMUINT16_2</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_NORMUINT16_3</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_NORMUINT16_4</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_INT32_1</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_INT32_2</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_INT32_3</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_INT32_4</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_UINT32_1</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_UINT32_2</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_UINT32_3</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_UINT32_4</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_NORMINT32_1</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_NORMINT32_2</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_NORMINT32_3</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_NORMINT32_4</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_NORMUINT32_1</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_NORMUINT32_2</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_NORMUINT32_3</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_NORMUINT32_4</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_FLOAT16_1</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_FLOAT16_2</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_FLOAT16_3</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_FLOAT16_4</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_FLOAT32_1</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_FLOAT32_2</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_FLOAT32_3</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_FLOAT32_4</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_UINT_10_10_10_L1</span></td>
    <td>Fixed point packed type. Component count is returned as 1. When decompressed, it will expand to x,y,z,1. The first three components each use 10 bits and are interpreted as an unsigned integer. The L1 designation indicates that despite 2 unused bits, the fourth component is always a literal value of 1. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_NORMINT_10_10_10_L1</span></td>
    <td>Fixed point packed type. Component count is treated as 1 in user code. When decompressed, it will expand to x,y,z,1. The first three components each use 10 bits and are interpreted as a normalized integer between -1 and 1. The L1 designation indicates that despite 2 unused bits, the fourth component is always a literal value of 1. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_NORMINT_11_11_10</span></td>
    <td>Fixed point packed type. Component count is treated as 1 in user code. When decompressed, it will expand to x,y,z. The three components use 11, 11, and 10 bits respectively and are interpreted as a normalized integer between -1 and 1. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_NORMUINT8_4_BGRA</span></td>
    <td>F_NORMUINT8_4_BGRA same as F_NORMUINT8_4 where XYZW -&gt; ZYXW. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_NORMINT_10_10_10_2</span></td>
    <td>Fixed point packed type. Component count is treated as 1 in user code. When decompressed, it will expand to x,y,z, w. The first three components each use 10 bits with the fourth component using the remaining 2 bits. Each component is interpreted as a normalized integer between -1 and 1. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_UINT_10_10_10_2</span></td>
    <td>Fixed point packed type. Component count is returned as 1 in user code. When decompressed, it will expand to x,y,z, w. The first three components each use 10 bits with the fourth component using the remaining 2 bits. Each component is interpreted as an unsigned integer. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_TYPE_COUNT</span></td>
    <td>update F_TYPE_COUNT (must be &lt;256) when adding standard types. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">F_MAX_COMP_SIZE</span></td>
    <td>Max component size. 32 bits (4 bytes) x 4 components = 16 bytes. </td>
</tr>

  </tbody>
</table>
</div>

<a name="class_ni_data_stream_element_1a43a85c4ed78a3f0aaa5d6660b6b5ddb4"></a>
<p class=NDLRefHead2>NiDataStreamElement::Layout</p>


<p class="NDLRefMemberDescription">Enumerates the layout of a predefined format. </p>


<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">L_X</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">L_XY</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">L_YX</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">L_XYZ</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">L_YXZ</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">L_XZY</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">L_ZXY</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">L_YZX</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">L_ZYX</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">L_XYZW</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">L_YXZW</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">L_XZYW</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">L_ZXYW</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">L_YZXW</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">L_ZYXW</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">L_XYWZ</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">L_YXWZ</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">L_XWYZ</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">L_WXYZ</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">L_YWXZ</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">L_WYXZ</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">L_XWZY</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">L_WXZY</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">L_XZWY</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">L_ZXWY</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">L_WZXY</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">L_ZWXY</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">L_WYZX</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">L_YWZX</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">L_WZYX</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">L_ZWYX</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">L_YZWX</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">L_ZYWX</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">L_UNKNOWN</span></td>
    <td>&nbsp;</td>
</tr>

  </tbody>
</table>
</div>


<a name="public_static_attributes"></a>
<p class="NDLRefHead1">Public Static Attributes</p>


<a name="class_ni_data_stream_element_1a793ac2277c39b9ddf6a9eb48c82a2819"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont">NiDataStreamElement</span>  ms_kInvalidElement</p>
<p class="NDLRefMemberDescription">Invalid data stream element. </p>
<p class="NDLRefMemberDetailedDescription">Useful as error sentinel return value. </p>
<a name="public_static_methods"></a>
<p class="NDLRefHead1">Public Static Methods</p>


<a name="class_ni_data_stream_element_1ade0a059a652af0b5b3591a0384af8b93"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont"><a href="NiDataStreamElement.htm#class_ni_data_stream_element_1a43a85c4ed78a3f0aaa5d6660b6b5ddb4">Layout</a></span>  GetLayout(<span class="NDLSystemFont"><a href="NiDataStreamElement.htm#class_ni_data_stream_element_1a4a4822c6a137f25713f304012b600d20">Format</a></span> eFormat)</p>
<p class="NDLRefMemberDescription">Retrieves the layout of a predefined format. </p>
<p class="NDLRefMemberDetailedDescription">If the format is not one of the predefined formats, L_UNKNOWN is returned. </p>

<a name="class_ni_data_stream_element_1ac208f26ea7a038327a7691e1c0a17a7c"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont"><a href="NiDataStreamElement.htm#class_ni_data_stream_element_1a4a4822c6a137f25713f304012b600d20">Format</a></span>  GetPredefinedPackedFormat(<br/><span class="NDLSystemFont">bool</span> bNormalized, <br/><span class="NDLSystemFont">bool</span> bSigned, <br/><span class="NDLSystemFont">bool</span> bLastFieldIsLiteral, <br/><span class="NDLSystemFont">NiUInt8</span> uiF0, <br/><span class="NDLSystemFont">NiUInt8</span> uiF1, <br/><span class="NDLSystemFont">NiUInt8</span> uiF2 = 0, <br/><span class="NDLSystemFont">NiUInt8</span> uiF3 = 0)</p>
<p class="NDLRefMemberDescription">Returns the predefined packed format matching the description. </p>
<p class="NDLRefMemberDetailedDescription">No swizzling is assumed. If no predefined format can be matched, F_UNKNOWN will be returned. </p>

<a name="class_ni_data_stream_element_1aed50770ab7c3c31b5d4475ab0470549c"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont"><a href="NiDataStreamElement.htm#class_ni_data_stream_element_1a4a4822c6a137f25713f304012b600d20">Format</a></span>  GetPredefinedFormat(<br/><span class="NDLSystemFont"><a href="NiDataStreamElement.htm#class_ni_data_stream_element_1a0d721d952c046046a09969f562caebdd">Type</a></span> eType, <br/><span class="NDLSystemFont">NiUInt8</span> uiComponentCount, <br/><span class="NDLSystemFont">bool</span> bNormalized, <br/><span class="NDLSystemFont"><a href="NiDataStreamElement.htm#class_ni_data_stream_element_1a43a85c4ed78a3f0aaa5d6660b6b5ddb4">Layout</a></span> eLayout)</p>
<p class="NDLRefMemberDescription">Returns the predefined type matching the description. </p>
<p class="NDLRefMemberDetailedDescription">If no predefined format can be matched, F_UNKNOWN will be returned. </p>

<a name="class_ni_data_stream_element_1ab87370be7cdd4c4eac2ffd4f0b807e09"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont"><a href="NiDataStreamElement.htm#class_ni_data_stream_element_1a4a4822c6a137f25713f304012b600d20">Format</a></span>  GetPredefinedFormat(<br/><span class="NDLSystemFont"><a href="NiDataStreamElement.htm#class_ni_data_stream_element_1a0d721d952c046046a09969f562caebdd">Type</a></span> eType, <br/><span class="NDLSystemFont">NiUInt8</span> uiComponentCount, <br/><span class="NDLSystemFont">bool</span> bNormalized)</p>
<p class="NDLRefMemberDescription">Returns the predefined type matching the description. </p>
<p class="NDLRefMemberDetailedDescription">No swizzling is assumed. If no predefined format can be matched, F_UNKNOWN will be returned. </p>

<a name="class_ni_data_stream_element_1a77f5b42e51daf7f632a09e2f164cdb76"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  IsPacked(<span class="NDLSystemFont"><a href="NiDataStreamElement.htm#class_ni_data_stream_element_1a4a4822c6a137f25713f304012b600d20">Format</a></span> eFormat)</p>
<p class="NDLRefMemberDescription">Returns true if the predefined format is packed and false otherwise. </p>

<a name="class_ni_data_stream_element_1a674228042692746be03f1382de7c1c58"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">NiUInt8</span>  GetFieldCount(<span class="NDLSystemFont"><a href="NiDataStreamElement.htm#class_ni_data_stream_element_1a4a4822c6a137f25713f304012b600d20">Format</a></span> eFormat)</p>
<p class="NDLRefMemberDescription">If the format is packed, returns the number of fields. </p>
<p class="NDLRefMemberDetailedDescription">Otherwise, a value of 0 is returned. </p>

<a name="class_ni_data_stream_element_1a14d001ca4764e958d70f7fcc18827a64"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">NiUInt8</span>  GetFieldBits(<br/><span class="NDLSystemFont"><a href="NiDataStreamElement.htm#class_ni_data_stream_element_1a4a4822c6a137f25713f304012b600d20">Format</a></span> eFormat, <br/><span class="NDLSystemFont">NiUInt8</span> uiField)</p>
<p class="NDLRefMemberDescription">If the format is packed, returns the number of bits allocated to the field specified. </p>
<p class="NDLRefMemberDetailedDescription">If the format is not packed, not one of the predefined formats, or if the field specified is out of range, 0 is returned. </p>

<a name="class_ni_data_stream_element_1aa73667564ae34a5c8ddd64474a3e7a6f"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  IsSwizzled(<span class="NDLSystemFont"><a href="NiDataStreamElement.htm#class_ni_data_stream_element_1a4a4822c6a137f25713f304012b600d20">Format</a></span> eFormat)</p>
<p class="NDLRefMemberDescription">Returns true if the format is one of the predefined swizzle formats. </p>
<p class="NDLRefMemberDetailedDescription">In all other cases, false is returned. </p>

<a name="class_ni_data_stream_element_1ad318713e896ec585d819d5c46e03b568"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  IsLastFieldLiteral(<span class="NDLSystemFont"><a href="NiDataStreamElement.htm#class_ni_data_stream_element_1a4a4822c6a137f25713f304012b600d20">Format</a></span> eFormat)</p>
<p class="NDLRefMemberDescription">Returns true if the last field is forced to literal value of 1. </p>

<a name="class_ni_data_stream_element_1a1b43fc4fedcb421b0fa4be2add0f8fd2"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  IsSigned(<span class="NDLSystemFont"><a href="NiDataStreamElement.htm#class_ni_data_stream_element_1a4a4822c6a137f25713f304012b600d20">Format</a></span> eFormat)</p>
<p class="NDLRefMemberDescription">Returns true if the predefined format is signed and false otherwise. </p>

<a name="class_ni_data_stream_element_1ab342a882a4f37d996428f2a2af6e76b4"></a>
<p class="NDLRefMemberFunction">static const char*  GetTypeString(<span class="NDLSystemFont"><a href="NiDataStreamElement.htm#class_ni_data_stream_element_1a0d721d952c046046a09969f562caebdd">Type</a></span> eType)</p>
<p class="NDLRefMemberDescription">Converts the given Type to a string. Valid for predefined types. </p>

<a name="class_ni_data_stream_element_1a51fbb05db1029e4a2936ba198092c1ec"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont"><a href="NiDataStreamElement.htm#class_ni_data_stream_element_1a0d721d952c046046a09969f562caebdd">Type</a></span>  TypeFromString(const char* pcType)</p>
<p class="NDLRefMemberDescription">Converts the given Format from a string. </p>
<p class="NDLRefMemberDetailedDescription">Valid for predefined types. </p>

<a name="class_ni_data_stream_element_1a5debb592c506359a81aa0583358d9c2a"></a>
<p class="NDLRefMemberFunction">static size_t  SizeOfType(<span class="NDLSystemFont"><a href="NiDataStreamElement.htm#class_ni_data_stream_element_1a0d721d952c046046a09969f562caebdd">Type</a></span> eType)</p>
<p class="NDLRefMemberDescription">Returns the size in bytes represented by the input type. </p>

<a name="class_ni_data_stream_element_1a741833d6b1e0bfcfa4bd3f58af1e2e4f"></a>
<p class="NDLRefMemberFunction">static size_t  SizeOfFormat(<span class="NDLSystemFont"><a href="NiDataStreamElement.htm#class_ni_data_stream_element_1a4a4822c6a137f25713f304012b600d20">Format</a></span> eFormat)</p>
<p class="NDLRefMemberDescription">Returns the size in bytes represented by the input format. </p>
<p class="NDLRefMemberDetailedDescription">Valid for predefined or custom formats. </p>

<a name="class_ni_data_stream_element_1a49e14db48ba7f914806f55012887a8e4"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">NiUInt8</span>  IndexOf(<span class="NDLSystemFont"><a href="NiDataStreamElement.htm#class_ni_data_stream_element_1a4a4822c6a137f25713f304012b600d20">Format</a></span> eFormat)</p>
<p class="NDLRefMemberDescription">Returns the index associated with the format. </p>
<p class="NDLRefMemberDetailedDescription">Valid for predefined formats. </p>

<a name="class_ni_data_stream_element_1afa2d98081cb45577d0cbcb3cf4bee70e"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  IsCustom(<span class="NDLSystemFont"><a href="NiDataStreamElement.htm#class_ni_data_stream_element_1a4a4822c6a137f25713f304012b600d20">Format</a></span> eFormat)</p>
<p class="NDLRefMemberDescription">Returns true if the custom bit is set. </p>

<a name="class_ni_data_stream_element_1ac8fe6989530b1ef2bce7befec9316672"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">NiUInt8</span>  GetComponentCount(<span class="NDLSystemFont"><a href="NiDataStreamElement.htm#class_ni_data_stream_element_1a4a4822c6a137f25713f304012b600d20">Format</a></span> eFormat)</p>
<p class="NDLRefMemberDescription">Returns the number of components represented by the format. </p>
<p class="NDLRefMemberDetailedDescription">Valid for predefined or custom formats. </p>

<a name="class_ni_data_stream_element_1a0eb82803e303ee9f40efb27f7e76d6b3"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">NiUInt8</span>  GetComponentSize(<span class="NDLSystemFont"><a href="NiDataStreamElement.htm#class_ni_data_stream_element_1a4a4822c6a137f25713f304012b600d20">Format</a></span> eFormat)</p>
<p class="NDLRefMemberDescription">Returns the size of one component in the format. </p>
<p class="NDLRefMemberDetailedDescription">Valid for predefined or custom format. </p>

<a name="class_ni_data_stream_element_1a27495eddd547a66cc1076161190d07bd"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont"><a href="NiDataStreamElement.htm#class_ni_data_stream_element_1a0d721d952c046046a09969f562caebdd">Type</a></span>  GetType(<span class="NDLSystemFont"><a href="NiDataStreamElement.htm#class_ni_data_stream_element_1a4a4822c6a137f25713f304012b600d20">Format</a></span> eFormat)</p>
<p class="NDLRefMemberDescription">Gets the base type for the format. </p>

<a name="class_ni_data_stream_element_1a9c0f94b7de38a5c395272a316e2dbb76"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  IsNormalized(<span class="NDLSystemFont"><a href="NiDataStreamElement.htm#class_ni_data_stream_element_1a4a4822c6a137f25713f304012b600d20">Format</a></span> eFormat)</p>
<p class="NDLRefMemberDescription">Gets whether the format is normalized. </p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="class_ni_data_stream_element_1a0d7a13155a4d48eb5efcfde20aff49ba"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiDataStreamElement.htm#class_ni_data_stream_element_1a4a4822c6a137f25713f304012b600d20">Format</a></span>  GetFormat() const</p>
<p class="NDLRefMemberDescription">Get the element format. </p>

<a name="class_ni_data_stream_element_1ae85475d4a56072ac61d2eb15f90903d6"></a>
<p class="NDLRefMemberFunction">void  SetFormat(<span class="NDLSystemFont"><a href="NiDataStreamElement.htm#class_ni_data_stream_element_1a4a4822c6a137f25713f304012b600d20">Format</a></span> eFormat)</p>
<p class="NDLRefMemberDescription">Set the element format. </p>

<a name="class_ni_data_stream_element_1a9468dbe99a5239ce69cf1f4b521482c2"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiDataStreamElement.htm#class_ni_data_stream_element_1a43a85c4ed78a3f0aaa5d6660b6b5ddb4">Layout</a></span>  GetLayout() const</p>
<p class="NDLRefMemberDescription">Retrieves the layout of a predefined format. </p>
<p class="NDLRefMemberDetailedDescription">If the format is not one of the predefined formats, L_UNKNOWN is returned. </p>

<a name="class_ni_data_stream_element_1aabecbb9c78f01db5f9aef4d4887ad377"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  GetOffset() const</p>
<p class="NDLRefMemberDescription">Get the offset in bytes to the first instance of this element in the data stream. </p>
<p class="NDLRefMemberDetailedDescription">Can be used with <span class="NDLSystemFont"><a href="NiDataStream.htm#class_ni_data_stream_1adfed0d91d77c38308cf0d222f7fcd3d7">NiDataStream::GetStride</a></span> to get the offset to the nth instance of this element as: GetStride() x n + <span class="NDLSystemFont"><a href="NiDataStreamElement.htm#class_ni_data_stream_element_1aabecbb9c78f01db5f9aef4d4887ad377">GetOffset()</a></span>. </p>

<a name="class_ni_data_stream_element_1a1ed65f9700984df325407e9f23468c30"></a>
<p class="NDLRefMemberFunction">void  SetOffset(<span class="NDLSystemFont">NiUInt32</span> uiOffset)</p>
<p class="NDLRefMemberDescription">Set the offset in bytes to the first instance of this element in the data stream. </p>

<a name="class_ni_data_stream_element_1a56c92c05748cb9b5df4e7eb8dd8c173e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsPacked() const</p>
<p class="NDLRefMemberDescription">Returns true if the predefined format is packed and false otherwise. </p>

<a name="class_ni_data_stream_element_1a8930718cba8b9c544cc627782a25fcf4"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt8</span>  GetFieldCount() const</p>
<p class="NDLRefMemberDescription">If the format is packed, returns the number of fields. </p>
<p class="NDLRefMemberDetailedDescription">Otherwise, a value of 0 is returned. </p>

<a name="class_ni_data_stream_element_1a533c06717031ac93b24a17f619f4b64c"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt8</span>  GetFieldBits(<span class="NDLSystemFont">NiUInt8</span> uiField) const</p>
<p class="NDLRefMemberDescription">If the format is packed, returns the number of bits allocated to the field specified. </p>
<p class="NDLRefMemberDetailedDescription">If the format is not packed, not one of the predefined formats, or if the field specified is out of range, 0 is returned. </p>

<a name="class_ni_data_stream_element_1a37408c424de1192de433fd91729f5a9d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsSwizzled() const</p>
<p class="NDLRefMemberDescription">Returns true if the format is one of the predefined swizzle formats. </p>
<p class="NDLRefMemberDetailedDescription">In all other cases, false is returned. </p>

<a name="class_ni_data_stream_element_1a324409241c47caa0642feeaa3a819869"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsLastFieldLiteral() const</p>
<p class="NDLRefMemberDescription">Returns true if the last field is forced to literal value of 1. </p>

<a name="class_ni_data_stream_element_1a88f4fd45a02a4055d44ba5bd7d5324b0"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsSigned() const</p>
<p class="NDLRefMemberDescription">Returns true if the predefined format is signed and false otherwise. </p>

<a name="class_ni_data_stream_element_1a52ada1c83bd60e79172fc0e09156b4d6"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../NiMain/NiString.htm">NiString</a></span>  GetFormatString() const</p>
<p class="NDLRefMemberDescription">Converts the Format to a string. </p>
<p class="NDLRefMemberDetailedDescription">Returns predefined enumeration name or hex code for custom types. </p>

<a name="class_ni_data_stream_element_1a935c51b3b9c96d64401d5c3acdb29912"></a>
<p class="NDLRefMemberFunction">size_t  SizeOf() const</p>
<p class="NDLRefMemberDescription">Returns the size in bytes. </p>

<a name="class_ni_data_stream_element_1a710e1a56222188bad163c415a7041295"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt8</span>  IndexOf() const</p>
<p class="NDLRefMemberDescription">Returns the index associated with the format. </p>

<a name="class_ni_data_stream_element_1ae61effb81a0facd6b8524a81d7932df7"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsCustom() const</p>
<p class="NDLRefMemberDescription">Returns true if the custom bit is set. </p>

<a name="class_ni_data_stream_element_1aa275c8c731786e86ca80c46b0dbe6b67"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt8</span>  GetComponentCount() const</p>
<p class="NDLRefMemberDescription">Returns the number of components represented by the format. </p>

<a name="class_ni_data_stream_element_1a288def3ed09ce06ed11cd60c87aff573"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt8</span>  GetComponentSize() const</p>
<p class="NDLRefMemberDescription">Returns the size of one component in the format. </p>

<a name="class_ni_data_stream_element_1a99edc844e70c3709664749431d89ac25"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiDataStreamElement.htm#class_ni_data_stream_element_1a0d721d952c046046a09969f562caebdd">Type</a></span>  GetType() const</p>
<p class="NDLRefMemberDescription">Gets the base type for the format. </p>

<a name="class_ni_data_stream_element_1ae1ad9fcea4fdced9fbb406da0734837a"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsNormalized() const</p>
<p class="NDLRefMemberDescription">Gets whether the format is normalized. </p>

<a name="class_ni_data_stream_element_1a10e895b145c03d1148e37abede2106d6"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsEqual(const <span class="NDLSystemFont">NiDataStreamElement</span>& rhs) const</p>
<p class="NDLRefMemberDescription">Compares elements for equality. </p>

<a name="class_ni_data_stream_element_1a3ace895eb972fe9660638e1e906ac474"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsValid() const</p>
<p class="NDLRefMemberDescription">Returns true if the format of the element is valid and not F_UNKNOWN, false otherwise. </p>

<a name="class_ni_data_stream_element_1aa0732c924eb0c1f2fabe74ebf2293506"></a>
<p class="NDLRefMemberFunction">NiDataStreamElement()</p>
<p class="NDLRefMemberDescription">Default constructor, sets all internal data to invalid values. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
