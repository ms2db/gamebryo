<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiMesh</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiMesh</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../NiMain/NiRenderObject.htm">NiRenderObject</a></span></p>


<p class="NDLRefHeaderFile">&lt;NiMesh.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/class_ni_mesh.gif" alt="Inheritance graph for NiMesh"/>
  <p class="FigureCaption">Inheritance graph for NiMesh</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal"><span class="NDLSystemFont">NiMesh</span> is the base class for all vertex-based geometry in Gamebryo. </p>
<p class="NDLNormal">The essential components of <span class="NDLSystemFont">NiMesh</span> are the array of <span class="NDLSystemFont"><a href="NiDataStreamRef.htm">NiDataStreamRef</a></span> objects that contain all varying attributes of the mesh (vertices, indices, etc), the list of modifiers that procedurally manipulate the mesh, and bounds management for the mesh. </p>

<a name="public_static_methods"></a>
<p class="NDLRefHead1">Public Static Methods</p>


<a name="class_ni_mesh_1a5f536df7a71ef47ac7233affa628d213"></a>
<p class="NDLRefMemberFunction">static void  SetUsePreloading(<span class="NDLSystemFont">bool</span> bPreload)</p>
<p class="NDLRefMemberDescription">Accesses a flag that controls whether or not <span class="NDLSystemFont">NiMesh</span> objects are precached as they are encountered during streaming. </p>
<p class="NDLRefMemberDetailedDescription">The default value for the flag is to precache. </p>

<a name="class_ni_mesh_1a6b6434fbab1778c5eca4700f860c77e1"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  GetUsePreloading()</p>
<p class="NDLRefMemberDescription">Accesses a flag that controls whether or not <span class="NDLSystemFont">NiMesh</span> objects are precached as they are encountered during streaming. </p>
<p class="NDLRefMemberDetailedDescription">The default value for the flag is to precache. </p>

<a name="class_ni_mesh_1a96d86c30ec42c1510da712ffaaa433c6"></a>
<p class="NDLRefMemberFunction">static void  SetDestroyAppDataFlag(<span class="NDLSystemFont">bool</span> bDestroy)</p>
<p class="NDLRefMemberDescription">Accesses a flag that controls whether or not the CPU memory buffers are released when <span class="NDLSystemFont">NiMesh</span> objects are precached during streaming. </p>
<p class="NDLRefMemberDetailedDescription">This will only be done for static buffers that do not have the CPU_WRITE flag enabled. The default value the flag is to release the memory. </p>

<a name="class_ni_mesh_1a41d190f87c39d4845ffa75e51d0e9c60"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  GetDestroyAppDataFlag()</p>
<p class="NDLRefMemberDescription">Accesses a flag that controls whether or not <span class="NDLSystemFont">NiMesh</span> objects are precached as they are encountered during streaming. </p>
<p class="NDLRefMemberDetailedDescription">The default value for the flag is to precache. </p>

<a name="class_ni_mesh_1afef3d817e3ba8393280e0e35504bd8a7"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont"><a href="NiDataStreamElement.htm#class_ni_data_stream_element_1a4a4822c6a137f25713f304012b600d20">NiDataStreamElement::Format</a></span>  VertexFormatEntryToDataStreamFormat(const <span class="NDLSystemFont"><a href="../NiMain/NiOutputStreamDescriptor__VertexFormatEntry.htm">NiOutputStreamDescriptor::VertexFormatEntry</a></span>& kEntry)</p>
<p class="NDLRefMemberDescription">Static method to convert an <span class="NDLSystemFont"><a href="../NiMain/NiOutputStreamDescriptor__VertexFormatEntry.htm">NiOutputStreamDescriptor::VertexFormatEntry</a></span> object's DataType field to the equivalent value in <span class="NDLSystemFont"><a href="NiDataStreamElement.htm#class_ni_data_stream_element_1a4a4822c6a137f25713f304012b600d20">NiDataStreamElement::Format</a></span>. </p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="class_ni_mesh_1ae82309f5d05968b0cf54b79bd0aadc06"></a>
<p class="NDLRefMemberFunction">NiMesh()</p>
<p class="NDLRefMemberDetailedDescription">Default constructor. </p>

<a name="class_ni_mesh_1a1645dad26401c0ee7f4c698cf6422018"></a>
<p class="NDLRefMemberFunction">virtual ~NiMesh()</p>
<p class="NDLRefMemberDescription">Virtual destructor. </p>

<a name="class_ni_mesh_1a639dfcb82e65fa4c1b0632036383d91c"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  GetVertexCount() const</p>
<p class="NDLRefMemberDescription">Returns the sum over all submeshes in the first USAGE_VERTEX data stream with per-vertex (not per-instance) data. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">Multiple references to the same <span class="NDLSystemFont"><a href="NiDataStream.htm">NiDataStream</a></span> Region by multiple submeshes are ignored. </p></p>

<a name="class_ni_mesh_1a6164115c20f6bacd63e294c63e4531c7"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  GetVertexCount(<span class="NDLSystemFont">NiUInt32</span> uiSubMesh) const</p>
<p class="NDLRefMemberDescription">Returns the count for the specified submesh in the first USAGE_VERTEX data stream with per-vertex (not per-instance) data. </p>

<a name="class_ni_mesh_1ac2da9779462105236e4e3164e1244cdf"></a>
<p class="NDLRefMemberFunction">void  SetPrimitiveType(<span class="NDLSystemFont"><a href="../NiMain/NiPrimitiveType.htm">NiPrimitiveType::Type</a></span> ePrimitiveType)</p>
<p class="NDLRefMemberDescription">Sets the primitive type for the <span class="NDLSystemFont">NiMesh</span> to the value specified in ePrimitiveType. </p>
<p class="NDLRefMemberDetailedDescription">Values are defined by the PrimitiveType enumeration. </p>

<a name="class_ni_mesh_1a62b5005bf7d2c413a9c519cf4ad5206b"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../NiMain/NiPrimitiveType.htm">NiPrimitiveType::Type</a></span>  GetPrimitiveType() const</p>
<p class="NDLRefMemberDescription">Gets the primitive type of the <span class="NDLSystemFont">NiMesh</span>. </p>
<p class="NDLRefMemberDetailedDescription">Values are defined by the PrimitiveType enumeration. </p>

<a name="class_ni_mesh_1a8373c0803ea19b951fc6a6f3b3417304"></a>
<p class="NDLRefMemberFunction">const char*  GetPrimitiveTypeString()</p>
<p class="NDLRefMemberDescription">Primitive type enumeration value returned as a string. </p>

<a name="class_ni_mesh_1a2c8aee6799f6b9a4772304164d72f84b"></a>
<p class="NDLRefMemberFunction">virtual void  RenderImmediate(<span class="NDLSystemFont"><a href="../NiMain/NiRenderer.htm">NiRenderer</a></span>* pkRenderer)</p>
<p class="NDLRefMemberDescription">Render the object immediately. </p>

<a name="class_ni_mesh_1a2068adc4bb2f2cb8dfcf9fdee37c53e3"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  RequiresMaterialOption(const <span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>& kMaterialOption) const</p>
<p class="NDLRefMemberDescription">Method to determine whether or not this mesh requires a material to implement specific functionality. </p>
<p class="NDLRefMemberDetailedDescription">RequiresMaterialOption may be used by materials to determine whether or not they are expected to do some work. kMaterialOption is a fixed string representing the work in question. It may be one of the standard Gamebryo material option strings (see <span class="NDLSystemFont"><a href="../NiMain/NiRenderObjectMaterialOption.htm">NiRenderObjectMaterialOption</a></span>) or a custom option string.</p>
<p class="NDLRefMemberDetailedDescription">A return value of true means that:</p>
<ul>
<li>the material should implement kMaterialOption, and</li>
<li>the mesh has the required data for implementing kMaterialOption.</li></ul>
<p class="NDLRefMemberDetailedDescription">A return value of false means that:</p>
<ul>
<li>the material should not implement kMaterialOption. </li></ul>

<a name="class_ni_mesh_1ac26ea3171a24b35b91320809e4ca01e1"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  ContainsData(<br/>const <span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>& kSemantic, <br/><span class="NDLSystemFont">NiUInt32</span> uiSemanticIndex = 0) const</p>
<p class="NDLRefMemberDescription">Returns true if the specified semantic exists on a datastream attached to this <span class="NDLSystemFont">NiMesh</span>. </p>

<a name="class_ni_mesh_1a1af0445d7ed91274079dc645a152fbf6"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">NiUInt32</span>  GetSemanticCount(const <span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>& kSemantic) const</p>
<p class="NDLRefMemberDescription">Returns the number of elements with the specified semantic across all semantic indices. </p>

<a name="class_ni_mesh_1a057eb8a453df16ac570fa7aae4c88ba7"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  GetSubmeshCount() const</p>
<p class="NDLRefMemberDescription">Gets the number of sub-meshes contained in this mesh. </p>

<a name="class_ni_mesh_1a06ec96886b3974941a193960f9155ee2"></a>
<p class="NDLRefMemberFunction">void  SetSubmeshCount(<br/><span class="NDLSystemFont">NiUInt32</span> uiSubmeshCount, <br/><span class="NDLSystemFont">NiUInt16</span> uiInitialRegionIndexValue = 0)</p>
<p class="NDLRefMemberDescription">Sets the slot index count for all StreamRefs, and resets all slot indices to the value uiInitialRegionIndexValue, which defaults to 0. </p>

<a name="class_ni_mesh_1a717e84e9a35192e5e38537a980ff07a5"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="NiDataStreamRef.htm">NiDataStreamRef</a></span>*  FindStreamRef(<br/>const <span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>& kSemantic, <br/><span class="NDLSystemFont">NiUInt32</span> uiSemanticIndex = 0, <br/><span class="NDLSystemFont"><a href="NiDataStreamElement.htm#class_ni_data_stream_element_1a4a4822c6a137f25713f304012b600d20">NiDataStreamElement::Format</a></span> eFormat = NiDataStreamElement::F_UNKNOWN) const</p>
<p class="NDLRefMemberDescription">Gets the data stream reference using the criteria specified (const-safe). </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kSemantic</span></td>
    <td>Semantic to match. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiSemanticIndex</span></td>
    <td>Semantic index to match. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">eFormat</span></td>
    <td><span class="NDLSystemFont"><a href="NiDataStreamElement.htm#class_ni_data_stream_element_1a4a4822c6a137f25713f304012b600d20">NiDataStreamElement::Format</a></span> to match. Ignored if eFormat = <span class="NDLSystemFont">NiDataStreamElement::F_UNKNOWN</span> (the default value). </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A const data stream reference matching the criteria specified, or NULL if none is found. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_mesh_1a3de980f5bfceb69cf27a2db39a2ff65e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiDataStreamRef.htm">NiDataStreamRef</a></span>*  FindStreamRef(<br/>const <span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>& kSemantic, <br/><span class="NDLSystemFont">NiUInt32</span> uiSemanticIndex = 0, <br/><span class="NDLSystemFont"><a href="NiDataStreamElement.htm#class_ni_data_stream_element_1a4a4822c6a137f25713f304012b600d20">NiDataStreamElement::Format</a></span> eFormat = NiDataStreamElement::F_UNKNOWN)</p>
<p class="NDLRefMemberDescription">Gets the data stream reference using the criteria specified. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kSemantic</span></td>
    <td>Semantic to match. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiSemanticIndex</span></td>
    <td>Semantic index to match. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">eFormat</span></td>
    <td><span class="NDLSystemFont"><a href="NiDataStreamElement.htm#class_ni_data_stream_element_1a4a4822c6a137f25713f304012b600d20">NiDataStreamElement::Format</a></span> to match. Ignored if eFormat = <span class="NDLSystemFont">NiDataStreamElement::F_UNKNOWN</span> (the default value). </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A data stream reference matching the criteria specified, or NULL if none is found. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_mesh_1ad41e60ef37dc5b9fad508ef40c1643f1"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  GetStreamRefCount() const</p>
<p class="NDLRefMemberDescription">Gets the number of streamrefs attached to this mesh. </p>

<a name="class_ni_mesh_1a9a7ec3be5845894ac6fe8774218f4b14"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="NiDataStreamRef.htm">NiDataStreamRef</a></span>*  GetStreamRefAt(<span class="NDLSystemFont">NiUInt32</span> uiStreamRefIdx) const</p>
<p class="NDLRefMemberDescription">Get the stream ref at the specified index (const-safe). </p>

<a name="class_ni_mesh_1a0d32ebe43565c8e1f9c87489991cc584"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiDataStreamRef.htm">NiDataStreamRef</a></span>*  GetStreamRefAt(<span class="NDLSystemFont">NiUInt32</span> uiStreamRefIdx)</p>
<p class="NDLRefMemberDescription">Get the stream ref at the specified index. </p>

<a name="class_ni_mesh_1a252f24de821622f9e625d63f8acd6e80"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiDataStreamRef.htm">NiDataStreamRef</a></span>*  AddOutputStream(<br/>const <span class="NDLSystemFont"><a href="../NiMain/NiMaterial.htm">NiMaterial</a></span>* pkMaterial, <br/><span class="NDLSystemFont"><a href="NiDataStream.htm">NiDataStream</a></span>* pkOutputStream, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>& kBindName, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>& kSemanticName, <br/><span class="NDLSystemFont">NiUInt32</span> uiSemanticIndex = 0)</p>
<p class="NDLRefMemberDescription">Method to add an existing datastream to the internal output streamref array while also filling in common streamref data. </p>
<p class="NDLRefMemberDetailedDescription">Each material can have a separate set of output streams, so the material that this output stream is used with must be specified here.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">This will bind all submesh region references to the first region in the datastream. </p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pkMaterial</span></td>
    <td>Material that will output data to this stream. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkOutputStream</span></td>
    <td><span class="NDLSystemFont"><a href="NiDataStream.htm">NiDataStream</a></span> to receive the output data. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kBindName</span></td>
    <td>Name applied to this data stream. This name will be used by the material to specify which stream it is writing to. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kSemanticName</span></td>
    <td>Semantic to bind to the first element desc. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiSemanticIndex</span></td>
    <td>Semantic index to bind to the first element desc. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_mesh_1a65bbd97ae9b1ff9caf9bce5d7c92684d"></a>
<p class="NDLRefMemberFunction">void  RemoveOutputStreamsForMaterial(const <span class="NDLSystemFont"><a href="../NiMain/NiMaterial.htm">NiMaterial</a></span>* pkMaterial)</p>
<p class="NDLRefMemberDescription">Removes the output stream refs, for the specified material, from this mesh. </p>

<a name="class_ni_mesh_1a194829dded87be373133114f04fb63d0"></a>
<p class="NDLRefMemberFunction">void  RemoveOutputStreamsForAllMaterials()</p>
<p class="NDLRefMemberDescription">Remove all output streams associated with this <span class="NDLSystemFont">NiMesh</span>. </p>

<a name="class_ni_mesh_1a7183d26cac473f1f708860e620395d35"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  GetCurrentMaterialOutputStreamRefCount()</p>
<p class="NDLRefMemberDescription">Gets the number of output stream refs attached to this mesh. </p>

<a name="class_ni_mesh_1a37e1676a83d8abd6f326c24a256bfd31"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiDataStreamRef.htm">NiDataStreamRef</a></span>*  GetCurrentMaterialOutputStreamRefAt(<span class="NDLSystemFont">NiUInt32</span> uiOutputStreamIdx)</p>
<p class="NDLRefMemberDescription">Get the stream ref at the specified index. </p>

<a name="class_ni_mesh_1aa2a613aaffcc79e12ebbd05a14f6d53b"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>&  GetCurrentMaterialOutputStreamRefNameAt(<span class="NDLSystemFont">NiUInt32</span> uiOutputStreamIdx)</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_mesh_1a11c04fccf37b39fc738473c10f65de00"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  FindStreamRefAndElementBySemantic(<br/>const <span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>& kSemantic, <br/><span class="NDLSystemFont">NiUInt32</span> uiSemanticIndex, <br/><span class="NDLSystemFont"><a href="NiDataStreamElement.htm#class_ni_data_stream_element_1a4a4822c6a137f25713f304012b600d20">NiDataStreamElement::Format</a></span> eFormat, <br/>const <span class="NDLSystemFont"><a href="NiDataStreamRef.htm">NiDataStreamRef</a></span> *& pkRef, <br/><span class="NDLSystemFont"><a href="NiDataStreamElement.htm">NiDataStreamElement</a></span>& kElement) const</p>
<p class="NDLRefMemberDescription">Finds an stream reference index and element reference index for the semantic and semantic index specified (const-safe). </p>
<p class="NDLRefMemberDetailedDescription">If eFormat is something other than F_UNKNOWN then the type will be checked as well. This method returns true if the semantic was located, false otherwise. </p>

<a name="class_ni_mesh_1afaf98bcec294129c5f702324c1ded901"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  FindStreamRefAndElementBySemantic(<br/>const <span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>& kSemantic, <br/><span class="NDLSystemFont">NiUInt32</span> uiSemanticIndex, <br/><span class="NDLSystemFont"><a href="NiDataStreamElement.htm#class_ni_data_stream_element_1a4a4822c6a137f25713f304012b600d20">NiDataStreamElement::Format</a></span> eFormat, <br/><span class="NDLSystemFont"><a href="NiDataStreamRef.htm">NiDataStreamRef</a></span> *& pkRef, <br/><span class="NDLSystemFont"><a href="NiDataStreamElement.htm">NiDataStreamElement</a></span>& kElement)</p>
<p class="NDLRefMemberDescription">Finds an stream reference index and element reference index for the semantic and semantic index specified. </p>
<p class="NDLRefMemberDetailedDescription">If eFormat is something other than F_UNKNOWN then the type will be checked as well. This method returns true if the semantic was located, false otherwise. </p>

<a name="class_ni_mesh_1a29607bbb91fed051b9de07a0095b6e45"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="NiDataStreamRef.htm">NiDataStreamRef</a></span>*  GetFirstStreamRef(<br/><span class="NDLSystemFont"><a href="NiDataStream.htm#class_ni_data_stream_1ad6c208b3047b3100e5da9ea08dabea0d">NiDataStream::Usage</a></span> eUsage, <br/><span class="NDLSystemFont">NiUInt32</span> uiAccessRequiredMask = ~0) const</p>
<p class="NDLRefMemberDescription">Returns the first StreamRef matching the <span class="NDLSystemFont"><a href="NiDataStream.htm#class_ni_data_stream_1ad6c208b3047b3100e5da9ea08dabea0d">NiDataStream::Usage</a></span> and <span class="NDLSystemFont"><a href="NiDataStream.htm#class_ni_data_stream_1a9dfad576a9c5a78bd73a8e8e2d8dd52e">NiDataStream::Access</a></span> flags specified (const-safe). </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">eUsage</span></td>
    <td>Single <span class="NDLSystemFont"><a href="NiDataStream.htm#class_ni_data_stream_1ad6c208b3047b3100e5da9ea08dabea0d">NiDataStream::Usage</a></span> to match. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiAccessRequiredMask</span></td>
    <td>Combination of <span class="NDLSystemFont"><a href="NiDataStream.htm#class_ni_data_stream_1a9dfad576a9c5a78bd73a8e8e2d8dd52e">NiDataStream::Access</a></span> values or'ed together. Defaults to allow any Access. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>First StreamRef matching input parameters. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_mesh_1aa9ff364939ab9b6af10f21a04508f38c"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiDataStreamRef.htm">NiDataStreamRef</a></span>*  GetFirstStreamRef(<br/><span class="NDLSystemFont"><a href="NiDataStream.htm#class_ni_data_stream_1ad6c208b3047b3100e5da9ea08dabea0d">NiDataStream::Usage</a></span> eUsage, <br/><span class="NDLSystemFont">NiUInt32</span> uiAccessRequiredMask = ~0)</p>
<p class="NDLRefMemberDescription">Returns the first StreamRef matching the <span class="NDLSystemFont"><a href="NiDataStream.htm#class_ni_data_stream_1ad6c208b3047b3100e5da9ea08dabea0d">NiDataStream::Usage</a></span> and <span class="NDLSystemFont"><a href="NiDataStream.htm#class_ni_data_stream_1a9dfad576a9c5a78bd73a8e8e2d8dd52e">NiDataStream::Access</a></span> flags specified. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">eUsage</span></td>
    <td>Single <span class="NDLSystemFont"><a href="NiDataStream.htm#class_ni_data_stream_1ad6c208b3047b3100e5da9ea08dabea0d">NiDataStream::Usage</a></span> to match. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiAccessRequiredMask</span></td>
    <td>Combination of <span class="NDLSystemFont"><a href="NiDataStream.htm#class_ni_data_stream_1a9dfad576a9c5a78bd73a8e8e2d8dd52e">NiDataStream::Access</a></span> values or'ed together. Defaults to allow any Access. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>First StreamRef matching input parameters. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_mesh_1a78357dc8638b8a88bea5d7708d18316a"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="NiDataStreamRef.htm">NiDataStreamRef</a></span>*  GetFirstUsageVertexPerVertexStreamRef() const</p>
<p class="NDLRefMemberDescription">Returns the first StreamRef that matching USAGE_VERTEX and containing per-vertex (as opposed to per-instance) data. </p>

<a name="class_ni_mesh_1aae891110305a959dc28959b85ab7ae28"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiDataStreamRef.htm">NiDataStreamRef</a></span>*  GetFirstUsageVertexPerVertexStreamRef()</p>
<p class="NDLRefMemberDescription">Returns the first StreamRef that matching USAGE_VERTEX and containing per-vertex (as opposed to per-instance) data. </p>
<p class="NDLRefMemberDetailedDescription">Non-const version. </p>

<a name="class_ni_mesh_1a0ee83a41699f33f70f7ded5fa147e99c"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiDataStreamRef.htm">NiDataStreamRef</a></span>*  AddStreamRef(<br/><span class="NDLSystemFont"><a href="NiDataStream.htm">NiDataStream</a></span>* pkStream, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>& kSemanticName, <br/><span class="NDLSystemFont">NiUInt32</span> uiSemanticIndex = 0, <br/><span class="NDLSystemFont">bool</span> bPerInstanceStream = false)</p>
<p class="NDLRefMemberDescription">Method to add an existing datastream to the internal streamref array while also filling in common streamref data. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">This will bind all submesh region references to the first region in the datastream. </p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pkStream</span></td>
    <td>Existing datastream </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kSemanticName</span></td>
    <td>Semantic to bind to the first element desc </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiSemanticIndex</span></td>
    <td>Semantic index to bind to the first element desc. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">bPerInstanceStream</span></td>
    <td>Determine if this is a source of instancing data </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_mesh_1a2ebf4d7a28ccc4c7015470905863ce0b"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiDataStreamRef.htm">NiDataStreamRef</a></span>*  AddStreamRef()</p>
<p class="NDLRefMemberDescription">Method to add a blank streamref to the mesh. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">In order to be useful, this streamref needs to be filled out with information. </p></p>

<a name="class_ni_mesh_1ad7811e5d1e590434bbc94dc8238e2947"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiDataStreamRef.htm">NiDataStreamRef</a></span>*  AddStreamRef(const <span class="NDLSystemFont"><a href="NiDataStreamRef.htm">NiDataStreamRef</a></span>* pkRef)</p>
<p class="NDLRefMemberDescription">Method to add a copy of the input streamref to the mesh. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">A copy is made of the streamref. No pointer sharing occurs. </p></p>

<a name="class_ni_mesh_1aa20787ad4d9f82f044c0c8f42a541110"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiDataStreamRef.htm">NiDataStreamRef</a></span>*  AddStream(<br/>const <span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>& kSemantic, <br/><span class="NDLSystemFont">NiUInt32</span> uiSemanticIndex, <br/><span class="NDLSystemFont"><a href="NiDataStreamElement.htm#class_ni_data_stream_element_1a4a4822c6a137f25713f304012b600d20">NiDataStreamElement::Format</a></span> eFormat, <br/><span class="NDLSystemFont">NiUInt32</span> uiCount, <br/><span class="NDLSystemFont">NiUInt8</span> uiAccessMask, <br/><span class="NDLSystemFont"><a href="NiDataStream.htm#class_ni_data_stream_1ad6c208b3047b3100e5da9ea08dabea0d">NiDataStream::Usage</a></span> eUsage, <br/>const void* pvSource = NULL, <br/><span class="NDLSystemFont">bool</span> bForceToolDSCreate = false, <br/><span class="NDLSystemFont">bool</span> bCreateDefaultRegion = true)</p>
<p class="NDLRefMemberDescription">Instantiates and adds a new, single-element stream to the mesh. </p>
<p class="NDLRefMemberDetailedDescription">The ownership of the pvSource pointer remains the responsibility of the caller and is not managed by the new stream. The data contained in pvSource (if not null) will be copied into the newly created stream.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kSemantic</span></td>
    <td>The semantic string for the newly instantiated stream. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiSemanticIndex</span></td>
    <td>The semantic index for the newly instantiated stream. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">eFormat</span></td>
    <td>The format of the single element in the stream. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiCount</span></td>
    <td>The number of instances of that element in the stream. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiAccessMask</span></td>
    <td>The access specifiers for this stream. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">eUsage</span></td>
    <td>The usage specifiers for this stream. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pvSource</span></td>
    <td>Optional, initial source data for this stream. The size and type of this buffer is expected to match the size and type of the stream that is being created. If static streams do not write their data at this time, a subsequent write lock can be obtained to write the data. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">bForceToolDSCreate</span></td>
    <td>This forces the factory to create an <span class="NDLSystemFont"><a href="NiToolDataStream.htm">NiToolDataStream</a></span>. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">bCreateDefaultRegion</span></td>
    <td>This creates a single region that is the size of the entire buffer. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td><span class="NDLSystemFont"><a href="NiDataStreamRef.htm">NiDataStreamRef</a></span> The pointer to the new stream. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_mesh_1a00da2c7153c97591a1766e79805ec360"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiDataStreamElementLock.htm">NiDataStreamElementLock</a></span>  AddStreamGetLock(<br/>const <span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>& kSemantic, <br/><span class="NDLSystemFont">NiUInt32</span> uiSemanticIndex, <br/><span class="NDLSystemFont"><a href="NiDataStreamElement.htm#class_ni_data_stream_element_1a4a4822c6a137f25713f304012b600d20">NiDataStreamElement::Format</a></span> eFormat, <br/><span class="NDLSystemFont">NiUInt32</span> uiCount, <br/><span class="NDLSystemFont">NiUInt8</span> uiAccessMask, <br/><span class="NDLSystemFont"><a href="NiDataStream.htm#class_ni_data_stream_1ad6c208b3047b3100e5da9ea08dabea0d">NiDataStream::Usage</a></span> eUsage, <br/><span class="NDLSystemFont">bool</span> bForceToolDSCreate = false, <br/><span class="NDLSystemFont">bool</span> bCreateDefaultRegion = true, <br/><span class="NDLSystemFont">NiUInt8</span> uiLockMask = NiDataStream::LOCK_READ|NiDataStream::LOCK_WRITE|NiDataStream::LOCK_TOOL_READ|NiDataStream::LOCK_TOOL_WRITE)</p>
<p class="NDLRefMemberDescription">Same as AddStream, but return a locked <span class="NDLSystemFont"><a href="NiDataStreamElementLock.htm">NiDataStreamElementLock</a></span> for the newly added <span class="NDLSystemFont"><a href="NiDataStream.htm">NiDataStream</a></span> object. </p>

<a name="class_ni_mesh_1a09ecc4bf699c7955662b8e75685a53c7"></a>
<p class="NDLRefMemberFunction">void  RemoveStreamRef(const <span class="NDLSystemFont"><a href="NiDataStreamRef.htm">NiDataStreamRef</a></span>* pkRef)</p>
<p class="NDLRefMemberDescription">Removes the specified stream ref. </p>
<p class="NDLRefMemberDetailedDescription">This will invalidate all outstanding <span class="NDLSystemFont"><a href="NiDataStreamRef.htm">NiDataStreamRef</a></span> pointers. </p>

<a name="class_ni_mesh_1af9ff96fb2caae3b861b51e565a4e877d"></a>
<p class="NDLRefMemberFunction">void  RemoveAllStreamRefs()</p>
<p class="NDLRefMemberDescription">Remove all stream ref's associated with this <span class="NDLSystemFont">NiMesh</span>. </p>

<a name="class_ni_mesh_1a6cc96c8ad550fdd204b2645289fd5208"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  GetCount(<br/><span class="NDLSystemFont">NiUInt32</span> uiSubmesh, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>& kSemantic, <br/><span class="NDLSystemFont">NiUInt32</span> uiSemanticIndex = 0) const</p>
<p class="NDLRefMemberDescription">Gets the number of elements in the stream with the semantic specified for the provided submesh. </p>

<a name="class_ni_mesh_1a1306b50184f25202fefdd21e0c7dd8be"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  GetTotalCount(<br/>const <span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>& kSemantic, <br/><span class="NDLSystemFont">NiUInt32</span> uiSemanticIndex = 0) const</p>
<p class="NDLRefMemberDescription">Gets the number of elements in the stream with the semantic specified for all submesh. </p>

<a name="class_ni_mesh_1aedc27b2b20f6206264f3f1fa837b84b4"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiInt32</span>  GetMaxIndexBySemantic(const <span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>& kSemantic) const</p>
<p class="NDLRefMemberDescription">Gets the largest semantic index matching the input semantic name. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>-1 if not found. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_mesh_1ad2f3ed5cd377b5a8d80db03a1d6f03b1"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  GetPrimitiveCount(<span class="NDLSystemFont">NiUInt32</span> uiSubmeshIndex) const</p>
<p class="NDLRefMemberDescription">Gets the number of primitives for a given mesh. </p>
<p class="NDLRefMemberDetailedDescription">If the index buffer exists, then it will be used with the primitive type to determine the number of primitives it contains. If the index buffer is not present the position buffer will be used with the primitive type to determine the number of primitives. A value of 0 will be returned in all other cases. </p>

<a name="class_ni_mesh_1a370b696c15cbac1de76c0559d3663a47"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  GetTotalPrimitiveCount() const</p>
<p class="NDLRefMemberDescription">Calls GetPrimitiveCount for all submesh and returns the total. </p>

<a name="class_ni_mesh_1a8f0ac5c6ab0d45aefcec5ae40c959aa7"></a>
<p class="NDLRefMemberFunction">void  UpdateCachedPrimitiveCount()</p>
<p class="NDLRefMemberDescription">Update the cached primitive count for the submesh at index 0 on the object. </p>
<p class="NDLRefMemberDetailedDescription">Applications only need to call this for meshes modified programmatically. The function is automatically called during cloning and streaming. </p>

<a name="class_ni_mesh_1afe15dbd8fafbba091cbe0e989e7dd297"></a>
<p class="NDLRefMemberFunction">virtual void  RetrieveMeshSet(<span class="NDLSystemFont"><a href="../NiMain/NiTPrimitiveSet.htm">NiTPrimitiveSet</a></span>&lt;<span class="NDLSystemFont">NiMesh</span>*&gt;& kMeshSet)</p>
<p class="NDLRefMemberDescription">Adds the <span class="NDLSystemFont">NiMesh</span> object to a set of objects that is used when preparing and finalizing the mesh. </p>
<p class="NDLRefMemberDetailedDescription">The default implementation of this function just adds "this" to the set. Derived classes may add additional embedded <span class="NDLSystemFont">NiMesh</span> objects to the set. </p>

<a name="class_ni_mesh_1af0a837f9632ffe05b56ac977672d6118"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsValid(<span class="NDLSystemFont"><a href="../NiMain/NiString.htm">NiString</a></span>* pkInvalidDescription = NULL) const</p>
<p class="NDLRefMemberDescription">Returns true if the mesh is valid for consumption by the renderers and <span class="NDLSystemFont"><a href="NiMeshAlgorithms.htm">NiMeshAlgorithms</a></span>. </p>
<p class="NDLRefMemberDetailedDescription">Checks if each <span class="NDLSystemFont"><a href="NiDataStreamRef.htm">NiDataStreamRef</a></span> is valid and contains the same number of submeshes as the mesh.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pkInvalidDescription</span></td>
    <td>If provided, set to cause of failure. </td>
</tr>

        </tbody>
    </table>
</div>


<a name="bounds_management"></a>
<p class="NDLRefHead1">Bounds Management</p>


<a name="class_ni_mesh_1a6893641367286ad63bfee3873d76d31f"></a>
<p class="NDLRefMemberFunction">void  SetModelBound(const <span class="NDLSystemFont"><a href="../NiMain/NiBound.htm">NiBound</a></span>& kBound)</p>
<p class="NDLRefMemberDescription">Set the model-space bound for this mesh. </p>

<a name="class_ni_mesh_1a951b5d707954ac979f9666d8cde31e86"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../NiMain/NiBound.htm">NiBound</a></span>&  GetModelBound() const</p>
<p class="NDLRefMemberDescription">Get the model-space bound for this mesh. </p>

<a name="class_ni_mesh_1a51fcea4ed4a1310868de821e7ef99aa8"></a>
<p class="NDLRefMemberFunction">void  RecomputeBounds()</p>
<p class="NDLRefMemberDescription">Compute the bounds from the stream containing the POSITION semantic. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">The POSITION stream must have CPU_READ access. </p></p>

<a name="class_ni_mesh_1adde360f9422c81b0c6575855033ccea6"></a>
<p class="NDLRefMemberFunction">virtual void  UpdateWorldBound()</p>
<p class="NDLRefMemberDescription">update the world bounds. </p>
<a name="public_instancing_helper_methods"></a>
<p class="NDLRefHead1">Public Instancing Helper Methods</p>

<p class="NDLRefMemberDescription">Helper methods to assist the renderers with instanced meshes. </p>

<a name="class_ni_mesh_1a815af64fd49504e7110e35c917cf4c37"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetInstanced() const</p>
<p class="NDLRefMemberDescription">Determine whether or not this mesh is instanced. </p>

<a name="class_ni_mesh_1a2541af4a6a5c0be599c13e9e204972f8"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiDataStreamRef.htm">NiDataStreamRef</a></span>*  GetBaseInstanceStream() const</p>
<p class="NDLRefMemberDescription">Get the reference for the base instance stream. </p>

<a name="class_ni_mesh_1a8e3ef857008269152cbe53fa8a1cef53"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiDataStreamRef.htm">NiDataStreamRef</a></span>*  GetVisibleInstanceStream() const</p>
<p class="NDLRefMemberDescription">Get the reference for the visible instance stream. </p>

<a name="class_ni_mesh_1a139a9b1e3c51483fab2a1223ca77cec6"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsInstancable(const <span class="NDLSystemFont">NiMesh</span>* pkTestMesh) const</p>
<p class="NDLRefMemberDescription">Returns true if the given mesh satisfies the requirements to be an instance. </p>
<p class="NDLRefMemberDetailedDescription">The function compares a wide range of data including data streams, materials, properties. All data on one mesh must exist on the other mesh and be equal on both meshes.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pkTestMesh</span></td>
    <td>The mesh to test against. </td>
</tr>

        </tbody>
    </table>
</div>


<a name="public_nimeshmodifier_helper_methods"></a>
<p class="NDLRefHead1">Public NiMeshModifier Helper Methods</p>

<p class="NDLRefMemberDescription">Methods to interact with the NiMeshModifiers attached to this <span class="NDLSystemFont">NiMesh</span>. </p>

<a name="class_ni_mesh_1a851086893e37a2016744c7acc9faf812"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  GetModifierCount() const</p>
<p class="NDLRefMemberDescription">Gets the number of modifiers on this mesh. </p>

<a name="class_ni_mesh_1a855794d77b507014a95c4910ab5d9abf"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiMeshModifier.htm">NiMeshModifier</a></span>*  GetModifierAt(<span class="NDLSystemFont">NiUInt32</span> uiModifierIndex) const</p>
<p class="NDLRefMemberDescription">Get the modifier at the specified index. </p>

<a name="class_ni_mesh_1a79cfc74d766d62035f443099538105d2"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  GetModifierIndex(<span class="NDLSystemFont"><a href="NiMeshModifier.htm">NiMeshModifier</a></span>* pkModifier) const</p>
<p class="NDLRefMemberDescription">Get the index of the specified modifier. </p>
<p class="NDLRefMemberDetailedDescription">Returns (NiUInt32)(-1) if the modifier is not present. </p>

<a name="class_ni_mesh_1a18bbf97de4f6f5570a61e6a65679e7a8"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiMeshModifier.htm">NiMeshModifier</a></span>*  GetModifierByType(const <span class="NDLSystemFont"><a href="../NiMain/NiRTTI.htm">NiRTTI</a></span>* pkRTTI) const</p>
<p class="NDLRefMemberDescription">Gets the first modifier with a given RTTI class. </p>

<a name="class_ni_mesh_1ac90b8ad07012c59c6ecbfacbbd744e74"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  AddModifier(<br/><span class="NDLSystemFont"><a href="NiMeshModifier.htm">NiMeshModifier</a></span>* pkModifier, <br/><span class="NDLSystemFont">bool</span> bAttach = true)</p>
<p class="NDLRefMemberDescription">Adds an <span class="NDLSystemFont"><a href="NiMeshModifier.htm">NiMeshModifier</a></span> to this <span class="NDLSystemFont">NiMesh</span>. </p>
<p class="NDLRefMemberDetailedDescription">If bAttach is false, the modifier is not Attached (see below). </p>

<a name="class_ni_mesh_1ab93551ba6a20d9f7dc7423ddefd2bebc"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  AddModifierAt(<br/><span class="NDLSystemFont">NiUInt32</span> uiInsertIndex, <br/><span class="NDLSystemFont"><a href="NiMeshModifier.htm">NiMeshModifier</a></span>* pkModifier, <br/><span class="NDLSystemFont">bool</span> bAttach = true)</p>
<p class="NDLRefMemberDescription">Adds an <span class="NDLSystemFont"><a href="NiMeshModifier.htm">NiMeshModifier</a></span> to this <span class="NDLSystemFont">NiMesh</span> at the index specified, which must be less than GetModifierCount. </p>
<p class="NDLRefMemberDetailedDescription">If bAttach is false, the modifier is not Attached (see below). </p>

<a name="class_ni_mesh_1a11c0bfba2aea86e9d1a0bad2e2ee0f65"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  RemoveModifier(<span class="NDLSystemFont"><a href="NiMeshModifier.htm">NiMeshModifier</a></span>* pkModifier)</p>
<p class="NDLRefMemberDescription">Remove an <span class="NDLSystemFont"><a href="NiMeshModifier.htm">NiMeshModifier</a></span> from this <span class="NDLSystemFont">NiMesh</span>. </p>

<a name="class_ni_mesh_1a4e68757903366ab031d9bfbe95efee2a"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  RemoveModifierAt(<span class="NDLSystemFont">NiUInt32</span> uiRemoveIndex)</p>
<p class="NDLRefMemberDescription">Removes an <span class="NDLSystemFont"><a href="NiMeshModifier.htm">NiMeshModifier</a></span> from this <span class="NDLSystemFont">NiMesh</span> using its index in the array of modifiers. </p>

<a name="class_ni_mesh_1ac2a65290979a22eb182ccc85f1145895"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetModifierAttachedAt(<span class="NDLSystemFont">NiUInt32</span> uiIndex) const</p>
<p class="NDLRefMemberDescription">Returns true if the modifier at the specified index has been attached. </p>

<a name="class_ni_mesh_1ab4b9a50fa93e9a2007cb7b44f8e1f103"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  AttachModifier(<span class="NDLSystemFont"><a href="NiMeshModifier.htm">NiMeshModifier</a></span>* pkModifier)</p>
<p class="NDLRefMemberDescription">Attaches an <span class="NDLSystemFont"><a href="NiMeshModifier.htm">NiMeshModifier</a></span> on this <span class="NDLSystemFont">NiMesh</span>. </p>
<p class="NDLRefMemberDetailedDescription">This action causes the modifier to associate itself with data streams on the mesh and do other work required to execute. </p>

<a name="class_ni_mesh_1a1afd5642823c5696879d36d2ef8bfee8"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  DetachModifier(<span class="NDLSystemFont"><a href="NiMeshModifier.htm">NiMeshModifier</a></span>* pkModifier)</p>
<p class="NDLRefMemberDescription">Detaches an <span class="NDLSystemFont"><a href="NiMeshModifier.htm">NiMeshModifier</a></span> from this <span class="NDLSystemFont">NiMesh</span>. </p>
<p class="NDLRefMemberDetailedDescription">This function undoes anything done during Attach for the same modifier. </p>

<a name="class_ni_mesh_1a3e7824e24c277c0b33f6aef66879d81c"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  AttachAllModifiers()</p>
<p class="NDLRefMemberDescription">A convenience function to call AttachModifier for all the modifiers on the mesh. </p>
<p class="NDLRefMemberDetailedDescription">Returns false if any one AttachModifier returns false, otherwise returns true. </p>

<a name="class_ni_mesh_1a97dcf8c5a786af198fd9f8136600350d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  DetachAllModifiers()</p>
<p class="NDLRefMemberDescription">A convenience function to call DetachModifier for all the modifiers on the mesh. </p>
<p class="NDLRefMemberDetailedDescription">Returns false if any one DetachModifier returns false, otherwise returns true. </p>

<a name="class_ni_mesh_1a3b894ce3ab088d8807a4e641f255b74a"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  ResetModifiers()</p>
<p class="NDLRefMemberDescription">Called to rebind any NiDataStreams referenced by modifiers on this mesh. </p>
<p class="NDLRefMemberDetailedDescription">This method should be called after datastreams are added or removed in order to make sure that the mesh modifiers do not reference invalid or stale datastreams. Internally, this method waits for any pending tasks, calls Detach on all modifiers, and then calls Attach on all modifiers.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<p class="NDLRefMemberDetailedDescription">This method is moderately expensive. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>False if there was any error, otherwise true. If there is an error resetting one modifier, the function continues to process the others, and then returns false;</td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_mesh_1a2ba9d587eeef037f9fbcebbb20166068"></a>
<p class="NDLRefMemberFunction">void  SubmitModifiers(<br/><span class="NDLSystemFont"><a href="../NiMain/NiSyncArgs.htm">NiSyncArgs</a></span>* pkArgs, <br/><span class="NDLSystemFont"><a href="../NiFloodgate/NiSPWorkflowManager.htm">NiSPWorkflowManager</a></span>* pkWFManager)</p>
<p class="NDLRefMemberDescription">Submit all modifiers that match the sync points in the argument. </p>

<a name="class_ni_mesh_1a70c2f38c346feca509e91aeb5a6cd6d4"></a>
<p class="NDLRefMemberFunction">void  CompleteModifiers(<span class="NDLSystemFont"><a href="../NiMain/NiSyncArgs.htm">NiSyncArgs</a></span>* pkArgs)</p>
<p class="NDLRefMemberDescription">Complete all modifiers that match the sync points in the argument. </p>

<a name="class_ni_mesh_1a2bce0311caa8396704d58842be25634e"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  AttachSceneModifiers(<span class="NDLSystemFont"><a href="../NiMain/NiAVObject.htm">NiAVObject</a></span>* pkScene)</p>
<p class="NDLRefMemberDescription">A static convenience function to call AttachModifier for all the modifiers on all of the meshes in a scene graph. </p>
<p class="NDLRefMemberDetailedDescription">Returns false if any one AttachModifier returns false, otherwise returns true. </p>

<a name="class_ni_mesh_1ac1f26113ca80487b57f4ab7bee26b626"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  DetachSceneModifiers(<span class="NDLSystemFont"><a href="../NiMain/NiAVObject.htm">NiAVObject</a></span>* pkScene)</p>
<p class="NDLRefMemberDescription">A static convenience function to call DetachModifier for all the modifiers on all of the meshes in a scene graph. </p>
<p class="NDLRefMemberDetailedDescription">Returns false if any one DetachModifier returns false, otherwise returns true. </p>

<a name="class_ni_mesh_1abb70dcdb30f5c84bd15c20d16d89d1e4"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  ResetSceneModifiers(<span class="NDLSystemFont"><a href="../NiMain/NiAVObject.htm">NiAVObject</a></span>* pkObject)</p>
<p class="NDLRefMemberDescription">A static convenience function to call ResetModifiers for all the modifiers on all of the meshes in a scene graph. </p>
<p class="NDLRefMemberDetailedDescription">Returns false if any one ResetModifiers returns false, otherwise returns true. </p>

<a name="class_ni_mesh_1a7665180d09bacca69cdcbb73150148da"></a>
<p class="NDLRefMemberFunction">static void  SubmitSceneModifiers(<br/><span class="NDLSystemFont"><a href="../NiMain/NiAVObject.htm">NiAVObject</a></span>* pkScene, <br/><span class="NDLSystemFont"><a href="../NiMain/NiSyncArgs.htm">NiSyncArgs</a></span>* pkArgs, <br/><span class="NDLSystemFont"><a href="../NiFloodgate/NiSPWorkflowManager.htm">NiSPWorkflowManager</a></span>* pkWorkflowManager)</p>
<p class="NDLRefMemberDescription">Traverse the scene and submit mesh modifiers (static function). </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pkScene</span></td>
    <td>Root of scene graph. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkArgs</span></td>
    <td>Synchronization points to submit for. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkWorkflowManager</span></td>
    <td>The workflow manager used to submit the modifiers. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_mesh_1a8fae1890913226160e44fb1e2700ee1a"></a>
<p class="NDLRefMemberFunction">static void  CompleteSceneModifiers(<br/><span class="NDLSystemFont"><a href="../NiMain/NiAVObject.htm">NiAVObject</a></span>* pkScene, <br/><span class="NDLSystemFont"><a href="../NiMain/NiSyncArgs.htm">NiSyncArgs</a></span>* pkArgs = 0)</p>
<p class="NDLRefMemberDescription">Traverse the scene and complete currently executing mesh modifiers (static function). </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pkScene</span></td>
    <td>Root of scene graph. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkArgs</span></td>
    <td>Synchronization points to complete. If this argument is 0, all modifiers are completed regardless of their syncronization points. </td>
</tr>

        </tbody>
    </table>
</div>


 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
