<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiTPrimitiveRandomAccessIterator</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiTPrimitiveRandomAccessIterator</p>


<p class="NDLRefHeaderFile">&lt;NiTPrimitiveRandomAccessIterator.h&gt;</p>


<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">Templated iterator class for traversing primitives using an index stream. </p>
<p class="NDLNormal">Primarily for use in traversing an index buffer, consuming a primitive's worth of indices with each step. INDEX_TYPE is meant to be the C++ type (unsigned short or unsigned int) of the indices. ITERATOR_TYPE is meant to contain the rate at which the indices are consumed.</p>
<p class="NDLNormal">
<p class="NDLNormal">There are four typedefs meant to cover the most common cases of primitive iterators:</p>
<ul>
<li>NiIndexedPrimitiveIterator32: Indexed 32-bit indices</li>
<li>NiIndexedPrimitiveIterator16: Indexed 16-bit indices</li>
<li>NiNonIndexedPrimitiveIterator32: Unindexed 32-bit indices</li>
<li>NiNonIndexedPrimitiveIterator16: Unindexed 16-bit indices </li></ul></p>

<a name="public_types"></a>
<p class="NDLRefHead1">Public Types</p>


<a name="class_ni_t_primitive_random_access_iterator_1a1a561a96216c22ac8087d3a751a94bba"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="NiTPrimitiveRandomAccessIterator__NiTPrimitive.htm">NiTPrimitive</a></span>  Primitive</p>
<p class="NDLRefMemberFunction"></p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="class_ni_t_primitive_random_access_iterator_1af041202cacfc3ccb4dba17afd83cd95f"></a>
<p class="NDLRefMemberFunction">NiTPrimitiveRandomAccessIterator(<br/>INDEX_TYPE* pBuffer, <br/><span class="NDLSystemFont">NiUInt32</span> uiPrimIndexCount, <br/><span class="NDLSystemFont">NiUInt32</span> uiPrimIndexStepCount, <br/><span class="NDLSystemFont">NiBool</span> bReverseOddWindings = false, <br/><span class="NDLSystemFont">NiBool</span> bIsOdd = false)</p>
<p class="NDLRefMemberDescription">Constructor for consuming a buffer of indices. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pBuffer</span></td>
    <td>Pointer to the index buffer. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiPrimIndexCount</span></td>
    <td>Number of indices in the buffer. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiPrimIndexStepCount</span></td>
    <td>Stride to get to the next primitive. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">bReverseOddWindings</span></td>
    <td>Should the index buffer reverse every other element? </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">bIsOdd</span></td>
    <td>Is the current pointer to an odd element? </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_t_primitive_random_access_iterator_1a94308807ea767e2cb20ab3b7391905bf"></a>
<p class="NDLRefMemberFunction">NiTPrimitiveRandomAccessIterator(<br/><span class="NDLSystemFont">NiUInt32</span> uiPrimIndexCount, <br/><span class="NDLSystemFont">NiUInt32</span> uiPrimIndexStepCount, <br/><span class="NDLSystemFont">NiBool</span> bReverseOddWindings = false, <br/><span class="NDLSystemFont">NiBool</span> bIsOdd = false, <br/>INDEX_TYPE kValue = INDEX_TYPE(0))</p>
<p class="NDLRefMemberDescription">Constructor for consuming indices. </p>
<p class="NDLRefMemberDetailedDescription">There is no buffer. The indices are generated algorithmically.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">uiPrimIndexCount</span></td>
    <td>Number of indices in the buffer. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiPrimIndexStepCount</span></td>
    <td>Stride to get to the next primitive. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">bReverseOddWindings</span></td>
    <td>Should the index buffer reverse every other element? </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">bIsOdd</span></td>
    <td>Is the current pointer to an odd element? </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kValue</span></td>
    <td>The value of the starting index in the iterator. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_t_primitive_random_access_iterator_1af899afef0d874bdd3f45748ecfee0a6e"></a>
<p class="NDLRefMemberFunction">NiTPrimitiveRandomAccessIterator(<br/>ITERATOR_TYPE& kIter, <br/><span class="NDLSystemFont">NiUInt32</span> uiPrimIndexCount, <br/><span class="NDLSystemFont">NiUInt32</span> uiPrimIndexStepCount, <br/><span class="NDLSystemFont">NiBool</span> bReverseOddWindings = false, <br/><span class="NDLSystemFont">NiBool</span> bIsOdd = false)</p>
<p class="NDLRefMemberDescription">Constructor for consuming indices. </p>
<p class="NDLRefMemberDetailedDescription">This can be used with indexed or generated indices.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kIter</span></td>
    <td>Iterator for generating the buffer </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiPrimIndexCount</span></td>
    <td>Number of indices in the buffer. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiPrimIndexStepCount</span></td>
    <td>Stride to get to the next primitive. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">bReverseOddWindings</span></td>
    <td>Should the index buffer reverse every other element? </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">bIsOdd</span></td>
    <td>Is the current pointer to an odd element? </td>
</tr>

        </tbody>
    </table>
</div>


<a name="data_access"></a>
<p class="NDLRefHead1">Data Access</p>


<a name="class_ni_t_primitive_random_access_iterator_1a10388f9520906cb53a199f5e5881679a"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiTPrimitiveRandomAccessIterator__NiTPrimitive.htm">Primitive</a></span>  operator[](size_t stIndex) const</p>
<p class="NDLRefMemberDescription">Array operator. </p>

<a name="class_ni_t_primitive_random_access_iterator_1aed425cebd76e122a050de9d0252f3c02"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="NiTPrimitiveRandomAccessIterator__NiTPrimitive.htm">Primitive</a></span>&  operator*() const</p>
<p class="NDLRefMemberDescription">Dereference operator *. </p>

<a name="class_ni_t_primitive_random_access_iterator_1a9dd6054497f2ae26b357696d6144d78d"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="NiTPrimitiveRandomAccessIterator__NiTPrimitive.htm">Primitive</a></span>*  operator-&gt;() const</p>
<p class="NDLRefMemberDescription">Dereference operator -&gt;. </p>
<a name="iterator_comparison_operators"></a>
<p class="NDLRefHead1">Iterator Comparison Operators</p>


<a name="class_ni_t_primitive_random_access_iterator_1ac0e64cc893d9a71bd95009e063c728d6"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  operator==(const <span class="NDLSystemFont">NiTPrimitiveRandomAccessIterator</span>& kRhs) const</p>
<p class="NDLRefMemberDescription">Equality operator. </p>

<a name="class_ni_t_primitive_random_access_iterator_1a8b23b7327488b2d5653d663fd1a81d21"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  operator!=(const <span class="NDLSystemFont">NiTPrimitiveRandomAccessIterator</span>& kRhs) const</p>
<p class="NDLRefMemberDescription">Inequality operator. </p>

<a name="class_ni_t_primitive_random_access_iterator_1a61bde1db680eaf5f7490f4159acd5d5d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  operator&lt;(const <span class="NDLSystemFont">NiTPrimitiveRandomAccessIterator</span>& kRhs) const</p>
<p class="NDLRefMemberDescription">Less than operator. </p>

<a name="class_ni_t_primitive_random_access_iterator_1a9291523b221ae673d398f8ca9a240bbc"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  operator&gt;(const <span class="NDLSystemFont">NiTPrimitiveRandomAccessIterator</span>& kRhs) const</p>
<p class="NDLRefMemberDescription">Greater than operator. </p>

<a name="class_ni_t_primitive_random_access_iterator_1a692a2a4f7222cfa42e004fd499910ee6"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  operator&lt;=(const <span class="NDLSystemFont">NiTPrimitiveRandomAccessIterator</span>& kRhs) const</p>
<p class="NDLRefMemberDescription">Less than or equal to operator. </p>

<a name="class_ni_t_primitive_random_access_iterator_1aa84793210d9729b3a0302789949521c2"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  operator&gt;=(const <span class="NDLSystemFont">NiTPrimitiveRandomAccessIterator</span>& kRhs) const</p>
<p class="NDLRefMemberDescription">Greater than or equal to operator. </p>
<a name="iterator_math_operators"></a>
<p class="NDLRefHead1">Iterator Math Operators</p>


<a name="class_ni_t_primitive_random_access_iterator_1a842a54167626b5fa202b7f3a1997ee95"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiTPrimitiveRandomAccessIterator</span>&  operator++()</p>
<p class="NDLRefMemberDescription">Prefix increment operator. </p>

<a name="class_ni_t_primitive_random_access_iterator_1ab52066cef126c3c168f3b0945bd8b1e2"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiTPrimitiveRandomAccessIterator</span>&  operator--()</p>
<p class="NDLRefMemberDescription">Prefix decrement operator. </p>

<a name="class_ni_t_primitive_random_access_iterator_1a0113aa40a0c45510f257cc92dda2a46e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiTPrimitiveRandomAccessIterator</span>  operator++(int )</p>
<p class="NDLRefMemberDescription">Postfix increment operator. </p>

<a name="class_ni_t_primitive_random_access_iterator_1a0125d68dd7746acec203195d7b8ba72c"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiTPrimitiveRandomAccessIterator</span>  operator--(int )</p>
<p class="NDLRefMemberDescription">Postfix decrement operator. </p>

<a name="class_ni_t_primitive_random_access_iterator_1a90ef7ecbbb70107aed9cf0053e7d9805"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiTPrimitiveRandomAccessIterator</span>&  operator+=(ptrdiff_t dtElements)</p>
<p class="NDLRefMemberDescription">Pointer math += operator. </p>

<a name="class_ni_t_primitive_random_access_iterator_1a59e7e8957b75a838dbc08f678d5b65ed"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiTPrimitiveRandomAccessIterator</span>&  operator-=(ptrdiff_t dtElements)</p>
<p class="NDLRefMemberDescription">Pointer math -= operator. </p>

<a name="class_ni_t_primitive_random_access_iterator_1ac4b53380286b40a6d30a01554775ac02"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiTPrimitiveRandomAccessIterator</span>  operator+(ptrdiff_t dtElements) const</p>
<p class="NDLRefMemberDescription">Pointer math + operator. </p>

<a name="class_ni_t_primitive_random_access_iterator_1a67e2540eba0f3a6ab3d49d3e39a810c0"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiTPrimitiveRandomAccessIterator</span>  operator-(ptrdiff_t dtElements) const</p>
<p class="NDLRefMemberDescription">Pointer math - operator. </p>

<a name="class_ni_t_primitive_random_access_iterator_1a14cfc09bcf43d625e5628a7a0d71a578"></a>
<p class="NDLRefMemberFunction">ptrdiff_t  operator-(const <span class="NDLSystemFont">NiTPrimitiveRandomAccessIterator</span>& kRhs) const</p>
<p class="NDLRefMemberDescription">Pointer math difference operator; valid only for iterators pointing to the same buffer. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
