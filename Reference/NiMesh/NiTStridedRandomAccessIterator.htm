<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiTStridedRandomAccessIterator</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiTStridedRandomAccessIterator</p>


<p class="NDLRefHeaderFile">&lt;NiTStridedRandomAccessIterator.h&gt;</p>


<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">Templated iterator that traverses a byte buffer at a fixed rate. </p>
<p class="NDLNormal">This class is useful for iterating the vertex elements of an <span class="NDLSystemFont"><a href="NiDataStream.htm">NiDataStream</a></span>. T can be any class or primitive type. </p>
<p class="NDLNormal">The sizeof T does not have to be the same size as the stride. This may be useful when the compiler inserts padding at the end of a class or when a user only wishes to traverse one element of a compound structure. </p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="class_ni_t_strided_random_access_iterator_1aa32b9d0f33137c9e6c928198e1c10177"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  operator==(const <span class="NDLSystemFont">NiTStridedRandomAccessIterator</span>& kRhs) const</p>
<p class="NDLRefMemberDescription">@ Iterator Comparison Operators </p>
<p class="NDLRefMemberDetailedDescription">Equality operator </p>

<a name="class_ni_t_strided_random_access_iterator_1a9a726faf8670af99ae8a339f6d90b909"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  operator!=(const <span class="NDLSystemFont">NiTStridedRandomAccessIterator</span>& kRhs) const</p>
<p class="NDLRefMemberDescription">Inequality operator. </p>

<a name="class_ni_t_strided_random_access_iterator_1a2611dcef216169474b10aa97830acf29"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  operator&lt;(const <span class="NDLSystemFont">NiTStridedRandomAccessIterator</span>& kRhs) const</p>
<p class="NDLRefMemberDescription">Less than operator. </p>

<a name="class_ni_t_strided_random_access_iterator_1a886470255f52d88fc7994d40ea846ab3"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  operator&gt;(const <span class="NDLSystemFont">NiTStridedRandomAccessIterator</span>& kRhs) const</p>
<p class="NDLRefMemberDescription">Greater than operator. </p>

<a name="class_ni_t_strided_random_access_iterator_1abf3af619d32910d516493c579ed186f2"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  operator&lt;=(const <span class="NDLSystemFont">NiTStridedRandomAccessIterator</span>& kRhs) const</p>
<p class="NDLRefMemberDescription">Less than or equal to operator. </p>

<a name="class_ni_t_strided_random_access_iterator_1a11fc7acc4e3b117028bccafc13e51891"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  operator&gt;=(const <span class="NDLSystemFont">NiTStridedRandomAccessIterator</span>& kRhs) const</p>
<p class="NDLRefMemberDescription">Greater than or equal to operator. </p>

<a name="class_ni_t_strided_random_access_iterator_1a240f349e4d7f7361f96e4e9a04d1c8e0"></a>
<p class="NDLRefMemberFunction">NiTStridedRandomAccessIterator()</p>
<p class="NDLRefMemberDescription">Construct an uninitialized iterator. </p>

<a name="class_ni_t_strided_random_access_iterator_1a685a861628f8b6ce539ebb4149f94267"></a>
<p class="NDLRefMemberFunction">NiTStridedRandomAccessIterator(<br/>T* pkObject, <br/>ptrdiff_t dtStride)</p>
<p class="NDLRefMemberDescription">Construct an iterator that points to pkObject in a buffer with stride dtStride. </p>

<a name="class_ni_t_strided_random_access_iterator_1a396f0039321f09f60880fc9a05b73a04"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  Exists() const</p>
<p class="NDLRefMemberDescription">Existence test. True if the iterator can be accessed. </p>
<a name="data_access"></a>
<p class="NDLRefHead1">Data Access</p>


<a name="class_ni_t_strided_random_access_iterator_1a0340f2cdfbae2ff05c4e04c39911a326"></a>
<p class="NDLRefMemberFunction">T&  operator*() const</p>
<p class="NDLRefMemberDescription">Dereference operator *. </p>

<a name="class_ni_t_strided_random_access_iterator_1a7fd0c1f6beefd6450ca2e0123a631c8c"></a>
<p class="NDLRefMemberFunction">T*  operator-&gt;() const</p>
<p class="NDLRefMemberDescription">Dereference operator -&gt;. </p>

<a name="class_ni_t_strided_random_access_iterator_1a5b7e39b6727ace25197898b0774c987d"></a>
<p class="NDLRefMemberFunction">T&  operator[](size_t stIndex) const</p>
<p class="NDLRefMemberDescription">Indexing operator. </p>
<a name="iterator_math_operators"></a>
<p class="NDLRefHead1">Iterator Math Operators</p>


<a name="class_ni_t_strided_random_access_iterator_1a3dd79f03a68932c4b8ebe6ed62af847a"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiTStridedRandomAccessIterator</span>&  operator++()</p>
<p class="NDLRefMemberDescription">Prefix increment operator. </p>

<a name="class_ni_t_strided_random_access_iterator_1a3ed48c1616ebdb45ee74d2474b0076f2"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiTStridedRandomAccessIterator</span>&  operator--()</p>
<p class="NDLRefMemberDescription">Prefix decrement operator. </p>

<a name="class_ni_t_strided_random_access_iterator_1a2e4d8b5200f865c9550ecf4ce20b347d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiTStridedRandomAccessIterator</span>  operator++(int )</p>
<p class="NDLRefMemberDescription">Postfix increment operator. </p>

<a name="class_ni_t_strided_random_access_iterator_1aff1fb4125178e9bb4a6550c217f5cb9f"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiTStridedRandomAccessIterator</span>  operator--(int )</p>
<p class="NDLRefMemberDescription">Postfix decrement operator. </p>

<a name="class_ni_t_strided_random_access_iterator_1ab703f088c2a6928386929fbdaab123ae"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiTStridedRandomAccessIterator</span>&  operator+=(ptrdiff_t dtElements)</p>
<p class="NDLRefMemberDescription">Pointer math += operator. </p>

<a name="class_ni_t_strided_random_access_iterator_1a9541fcbc631e570b7c365c1231f787b2"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiTStridedRandomAccessIterator</span>&  operator-=(ptrdiff_t dtElements)</p>
<p class="NDLRefMemberDescription">Pointer math -= operator. </p>

<a name="class_ni_t_strided_random_access_iterator_1aad87a7fb3042e00dbde7a823a1c39c85"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiTStridedRandomAccessIterator</span>  operator+(ptrdiff_t dtElements) const</p>
<p class="NDLRefMemberDescription">Pointer math + operator. </p>

<a name="class_ni_t_strided_random_access_iterator_1a62c87c57220c982af07c6cfdc82412da"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiTStridedRandomAccessIterator</span>  operator-(ptrdiff_t dtElements) const</p>
<p class="NDLRefMemberDescription">Pointer math - operator. </p>

<a name="class_ni_t_strided_random_access_iterator_1ad7f528545f6235fac5ac22312e6620b4"></a>
<p class="NDLRefMemberFunction">ptrdiff_t  operator-(const <span class="NDLSystemFont">NiTStridedRandomAccessIterator</span>& kRhs) const</p>
<p class="NDLRefMemberDescription">Pointer math difference operator; valid only for iterators pointing to the same buffer. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
