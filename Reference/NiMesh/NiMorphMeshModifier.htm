<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiMorphMeshModifier</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiMorphMeshModifier</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="NiMeshModifier.htm">NiMeshModifier</a></span></p>


<p class="NDLRefHeaderFile">&lt;NiMorphMeshModifier.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/class_ni_morph_mesh_modifier.gif" alt="Inheritance graph for NiMorphMeshModifier"/>
  <p class="FigureCaption">Inheritance graph for NiMorphMeshModifier</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">The <span class="NDLSystemFont">NiMorphMeshModifier</span> class provides the ability to morph streams of data from one data set to another. </p>
<p class="NDLNormal">Specifically, it performs linear-weighted blending between a set of target data streams. The current implementation assumes that the data stream format is F_FLOAT32_3 or F_FLOAT16_4.</p>
<p class="NDLNormal">If multiple semantics are to be morphed, it is assumed that all semantics have the same number of morph targets and that the same weights are used for all semantics.</p>
<p class="NDLNormal">The target data are assumed to be present as streams on the mesh that this modifier is attached to, named as determined by <span class="NDLSystemFont"><a href="NiMorphMeshModifier.htm#class_ni_morph_mesh_modifier_1abac17262e594280b603e1e47de0e18dc">MorphElementSemantic()</a></span>. The target vertices can be interpreted as either a set of independent targets or as a set of offsets from a base target. The first target stream is always assumed to be the base mesh for all of the offset targets. The target data streams must have ACCESS_CPU_READ.</p>
<p class="NDLNormal">The destination data stream(s) must be present and have CPU_WRITE_VOLATILE or CPU_WRITE_MUTABLE access.</p>
<p class="NDLNormal">The weights are taken from another stream on the mesh, with semantic MORPHWEIGHTS. This stream must be present for the modifier to successfully attach to the mesh. There must be at least as many weights as there are morph targets. Typically, the mesh will have an <span class="NDLSystemFont"><a href="../NiAnimation/NiMorphWeightsController.htm">NiMorphWeightsController</a></span> object attached to control the weights. That class is found in the NiAnimation library.</p>
<p class="NDLNormal">In addition, the following assumptions are made: The data format must be F_FLOAT32_3 or F_FLOAT16_4; data streams must have only one region.</p>
<p class="NDLNormal"><span class="NDLNormal" style=" x-condition: PS3; "> On the PS3, each of the morphed elements must be in its own single-element data stream. Since output streams are not DMA'd to the SPUs by Floodgate, interleaved data would otherwise be lost. </span></p>

<a name="public_static_methods"></a>
<p class="NDLRefHead1">Public Static Methods</p>


<a name="class_ni_morph_mesh_modifier_1abac17262e594280b603e1e47de0e18dc"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>  MorphElementSemantic(const <span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>& kSemantic)</p>
<p class="NDLRefMemberDescription">Returns <span class="NDLSystemFont"><a href="NiDataStreamRef.htm">NiDataStreamRef</a></span> semantic to use for morph targets for the given element. </p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="class_ni_morph_mesh_modifier_1acdafbfa70b6d05204f6c5f03128f2044"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt16</span>  GetNumTargets() const</p>
<p class="NDLRefMemberDescription">Get and set the number of morph targets. </p>

<a name="class_ni_morph_mesh_modifier_1a06d401580b7d60727379e0acab3cc00f"></a>
<p class="NDLRefMemberFunction">void  SetNumTargets(const <span class="NDLSystemFont">NiUInt16</span> uiNumTargets)</p>
<p class="NDLRefMemberDescription">Get and set the number of morph targets. </p>

<a name="class_ni_morph_mesh_modifier_1aa7d3a22bf6c5a0ca3986762eabc3bf29"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  Attach(<span class="NDLSystemFont"><a href="NiMesh.htm">NiMesh</a></span>* pkMesh)</p>
<p class="NDLRefMemberDescription">Creates Floodgate tasks required for morphing. </p>
<p class="NDLRefMemberDetailedDescription">Streams from the mesh are used as the source of Floodgate streams. </p>

<a name="class_ni_morph_mesh_modifier_1a233a0b20c2446e5cc23736ec8b5bdc48"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  Detach(<span class="NDLSystemFont"><a href="NiMesh.htm">NiMesh</a></span>* pkMesh)</p>
<p class="NDLRefMemberDescription">Removes all Floodgate tasks and references to streams on the mesh. </p>

<a name="class_ni_morph_mesh_modifier_1a2c32881d5cfe0054ced1c9c2d5dd7edc"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  SubmitTasks(<br/><span class="NDLSystemFont"><a href="NiMesh.htm">NiMesh</a></span>* pkMesh, <br/><span class="NDLSystemFont"><a href="../NiMain/NiSyncArgs.htm">NiSyncArgs</a></span>* pkArgs, <br/><span class="NDLSystemFont"><a href="../NiFloodgate/NiSPWorkflowManager.htm">NiSPWorkflowManager</a></span>* pkWFManager)</p>
<p class="NDLRefMemberDescription">Submits Floodgate tasks to support morphing, unless the morph is inactive. </p>

<a name="class_ni_morph_mesh_modifier_1a4a8eedbcfc02fd841211da506f530168"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  CompleteTasks(<br/><span class="NDLSystemFont"><a href="NiMesh.htm">NiMesh</a></span>* pkMesh, <br/><span class="NDLSystemFont"><a href="../NiMain/NiSyncArgs.htm">NiSyncArgs</a></span>* pkArgs)</p>
<p class="NDLRefMemberDescription">Forces completion of outstanding Floodgate tasks that match the requested sync points. </p>
<p class="NDLRefMemberDetailedDescription">Also does normal recalculation if required. </p>

<a name="class_ni_morph_mesh_modifier_1a4abf0283bd2da6b15f70fe81bf99fc7f"></a>
<p class="NDLRefMemberFunction">NiMorphMeshModifier(<span class="NDLSystemFont">NiUInt16</span> uiNumTargets = 0)</p>
<p class="NDLRefMemberDescription">Constructor. </p>
<p class="NDLRefMemberDetailedDescription">The number of morph targets can be specified. If not given, it must be set before the modifier is attached to a mesh. </p>

<a name="class_ni_morph_mesh_modifier_1ac6e88fb9cf9991ed36fff59210fb7820"></a>
<p class="NDLRefMemberFunction">virtual ~NiMorphMeshModifier()</p>
<p class="NDLRefMemberDescription">Destructor. </p>

<a name="class_ni_morph_mesh_modifier_1a483210dc8f457d298f89bdeff4662137"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  AddMorphedElement(<br/>const <span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>& kSemantic, <br/><span class="NDLSystemFont">NiUInt32</span> uiSemanticIdx)</p>
<p class="NDLRefMemberDescription">Specify a semantic to be morphed. </p>

<a name="class_ni_morph_mesh_modifier_1a459a9d48d1e5f71f7c2dd1db75284a6d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsMorphedElement(<br/>const <span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>& kSemantic, <br/><span class="NDLSystemFont">NiUInt32</span> uiSemanticIdx, <br/><span class="NDLSystemFont">NiUInt32</span>& uiIndexReturn) const</p>
<p class="NDLRefMemberDescription">Determine if an element will be morphed. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kSemantic</span></td>
    <td>The semantic sought. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiSemanticIdx</span></td>
    <td>The semantic index for the sought semantic. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiIndexReturn</span></td>
    <td>On return, holds the internal index for the semantic, which is the index to be used with GetMorphedElement to retrieve this semantic. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_morph_mesh_modifier_1a6b6e4ca7f263a7fc6857e95bd0210bbf"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetMorphedElement(<br/>const <span class="NDLSystemFont">NiUInt32</span> uiIndex, <br/><span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>& kSemantic, <br/><span class="NDLSystemFont">NiUInt32</span>& uiSemanticIdx)</p>
<p class="NDLRefMemberDescription">Get the element that will be morphed at the specified index of internal morph targets. </p>

<a name="class_ni_morph_mesh_modifier_1a7c5baffae559a16214147305049eeebf"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  AreRequirementsMet(<br/><span class="NDLSystemFont"><a href="NiMesh.htm">NiMesh</a></span>* pkMesh, <br/>NiSystemDesc::RendererID eRenderer) const</p>
<p class="NDLRefMemberDescription">This method checks, after finalization, if the mesh is suitable for morphing. </p>
<p class="NDLRefMemberDetailedDescription">If it returns false, the modifier may be removed from the mesh. </p>

<a name="class_ni_morph_mesh_modifier_1afc4c9b65a3fc6adec0b2b2a4c025db5e"></a>
<p class="NDLRefMemberFunction">virtual void  RetrieveRequirements(<span class="NDLSystemFont"><a href="NiMeshRequirements.htm">NiMeshRequirements</a></span>& kRequirements) const</p>
<p class="NDLRefMemberDescription">This method is called during the mesh data stream packing process. </p>
<p class="NDLRefMemberDetailedDescription">The requirements are used as a guide only - the packer is not guaranteed to achieve them. </p>

<a name="class_ni_morph_mesh_modifier_1ac700194085584d517167cc9645148172"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  IsComplete(<br/><span class="NDLSystemFont"><a href="NiMesh.htm">NiMesh</a></span>* pkMesh, <br/><span class="NDLSystemFont"><a href="../NiMain/NiSyncArgs.htm">NiSyncArgs</a></span>* pkArgs)</p>
<p class="NDLRefMemberDescription">Returns true if the mesh modifier has completed all required work for the provided sync points. </p>

<a name="class_ni_morph_mesh_modifier_1a31149269bb26f45f6acefad415390eb3"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  CalculateMorphBound(<span class="NDLSystemFont"><a href="NiMesh.htm">NiMesh</a></span>* pkMesh)</p>
<p class="NDLRefMemberDescription">Calculate morph bound by combining bounds of all targets. </p>
<p class="NDLRefMemberDetailedDescription">Returns true if the bound could be computed, false otherwise. MUST be called explicitly by tools or the application. </p>

<a name="class_ni_morph_mesh_modifier_1aa0042dbb07ce74999f38761266f59a60"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetAlwaysUpdate() const</p>
<p class="NDLRefMemberDescription">Get the flag controlling always update. </p>
<p class="NDLRefMemberDetailedDescription">If always update is set, the morph will always be computed even if the object is not visible or the morph weights have not changed. </p>

<a name="class_ni_morph_mesh_modifier_1a6210d88dd28c6da008cf9bad62872b36"></a>
<p class="NDLRefMemberFunction">void  SetAlwaysUpdate(const <span class="NDLSystemFont">bool</span> bValue)</p>
<p class="NDLRefMemberDescription">Set the flag controlling always update. </p>

<a name="class_ni_morph_mesh_modifier_1a1ef31816cbd58099a150eea769d50f2b"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetRelativeTargets() const</p>
<p class="NDLRefMemberDescription">Get the flag controlling the interpretation of target vertices. </p>
<p class="NDLRefMemberDetailedDescription">If true, the first morph target is considered a base mesh with remaining targets providing incremental offsets from the base. If false, all targets are absolute. </p>

<a name="class_ni_morph_mesh_modifier_1afeadce7a55d0901d5f6fc24e36c94d4b"></a>
<p class="NDLRefMemberFunction">void  SetRelativeTargets(const <span class="NDLSystemFont">bool</span> bValue)</p>
<p class="NDLRefMemberDescription">Set the flag controlling the interpretation of target vertices. </p>

<a name="class_ni_morph_mesh_modifier_1a02a3253821d3a2b8bb7bd72f39c957ab"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetUpdateNormals() const</p>
<p class="NDLRefMemberDescription">Get the flag controlling normal updating. </p>
<p class="NDLRefMemberDetailedDescription">If this flag is set, new normals will be computed based on the morphed vertex data. </p>

<a name="class_ni_morph_mesh_modifier_1ac6ccd5133809f3c516327205f122c76e"></a>
<p class="NDLRefMemberFunction">void  SetUpdateNormals(const <span class="NDLSystemFont">bool</span> bValue)</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_morph_mesh_modifier_1a5305be9d4a1735a2b3336ed1a49a59a0"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetNeedsUpdate() const</p>
<p class="NDLRefMemberDescription">Get the flag controlling updating. </p>
<p class="NDLRefMemberDetailedDescription">The morph will only be updated if this flag is set, and after submitting tasks to do update the flag is set back to false. </p>

<a name="class_ni_morph_mesh_modifier_1a364dba3741e98e6b1c40d52a3665de35"></a>
<p class="NDLRefMemberFunction">void  SetNeedsUpdate()</p>
<p class="NDLRefMemberDescription">Set the flag controlling updating. </p>

<a name="class_ni_morph_mesh_modifier_1a04b18e4d90ab38aee0841b88667adf5c"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetSkinned() const</p>
<p class="NDLRefMemberDescription">Get the flag indicating whether or not the mesh we are attached to is also skinned. </p>
<p class="NDLRefMemberDetailedDescription">This is only needed to determine which streams to use for normal re-calculation, if normal re-calculation is enabled. </p>

<a name="class_ni_morph_mesh_modifier_1af26d23ad1d3dc4cc3f17e1c8e2003ff3"></a>
<p class="NDLRefMemberFunction">void  SetSkinned(const <span class="NDLSystemFont">bool</span> bValue)</p>
<p class="NDLRefMemberDescription">Set the flag indicating whether or not the mesh we are attached to is also skinned. </p>

<a name="class_ni_morph_mesh_modifier_1a7f2956463f4f61685aafaa6f7be6fee9"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetSWSkinned() const</p>
<p class="NDLRefMemberDescription">Get the flag indicating whether or not the mesh the modifier is attached to is also software skinned. </p>
<p class="NDLRefMemberDetailedDescription">This flag is used to determine the sync points for the modifier, and must be set correctly before the Attach function is called. </p>

<a name="class_ni_morph_mesh_modifier_1a2983ab048c3655eaaad19fff0a8be5c2"></a>
<p class="NDLRefMemberFunction">void  SetSWSkinned(const <span class="NDLSystemFont">bool</span> bValue)</p>
<p class="NDLRefMemberDescription">Set the flag indicating whether or not the mesh the modifier is attached to is also software skinned. </p>

<a name="class_ni_morph_mesh_modifier_1a5a238eb4c8bcba3144e6e09205ba057d"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  RequiresMaterialOption(<br/>const <span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>& kMaterialOption, <br/><span class="NDLSystemFont">bool</span>& bResult) const</p>
<p class="NDLRefMemberDescription">Determine if the modifier supports a specific material option. </p>
<p class="NDLRefMemberDetailedDescription">Returns true, and sets bResult to true, only if the option is <span class="NDLSystemFont"><a href="../NiMain/NiRenderObjectMaterialOption.htm">NiRenderObjectMaterialOption::MORPHING()</a></span>. Otherwise, returns false. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
