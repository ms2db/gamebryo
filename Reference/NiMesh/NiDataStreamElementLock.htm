<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiDataStreamElementLock</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiDataStreamElementLock</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../efd/efd__MemObject.htm">efd::MemObject</a></span></p>


<p class="NDLRefHeaderFile">&lt;NiDataStreamElementLock.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/class_ni_data_stream_element_lock.gif" alt="Inheritance graph for NiDataStreamElementLock"/>
  <p class="FigureCaption">Inheritance graph for NiDataStreamElementLock</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">This class encapsulates locking an <span class="NDLSystemFont"><a href="NiDataStream.htm">NiDataStream</a></span> bound to a specific <span class="NDLSystemFont"><a href="NiMesh.htm">NiMesh</a></span> and iterating through the data contained within a given submesh. </p>
<p class="NDLNormal">This class will lock upon construction and will unlock upon destruction. Note that this class does not add a reference to the <span class="NDLSystemFont"><a href="NiDataStream.htm">NiDataStream</a></span> it is locking. Therefore, if the source <span class="NDLSystemFont"><a href="NiMesh.htm">NiMesh</a></span> is destroyed or the <span class="NDLSystemFont"><a href="NiDataStreamRef.htm">NiDataStreamRef</a></span> used by this lock is removed from the <span class="NDLSystemFont"><a href="NiMesh.htm">NiMesh</a></span> prior to the lock's destruction, a memory access exception will occur.</p>
<p class="NDLNormal">
<p class="NDLNormal">If iteration of primitives is desired, use <span class="NDLSystemFont"><a href="NiDataStreamPrimitiveLock.htm">NiDataStreamPrimitiveLock</a></span> instead. If iteration over explicit regions is desired instead of submeshes, use <span class="NDLSystemFont"><a href="NiDataStreamLock.htm">NiDataStreamLock</a></span>. </p></p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="class_ni_data_stream_element_lock_1a59d517a691df5b980c1137001774af9e"></a>
<p class="NDLRefMemberFunction">NiDataStreamElementLock()</p>
<p class="NDLRefMemberDescription">Default constructor. </p>

<a name="class_ni_data_stream_element_lock_1a3d46c92391e8cdad5252feda4d339f86"></a>
<p class="NDLRefMemberFunction">NiDataStreamElementLock(<br/><span class="NDLSystemFont"><a href="NiMesh.htm">NiMesh</a></span>* pkMesh, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>& kSemantic, <br/><span class="NDLSystemFont">NiUInt32</span> uiSemanticIndex, <br/><span class="NDLSystemFont"><a href="NiDataStreamElement.htm#class_ni_data_stream_element_1a4a4822c6a137f25713f304012b600d20">NiDataStreamElement::Format</a></span> eFormat = NiDataStreamElement::F_UNKNOWN, <br/><span class="NDLSystemFont">NiUInt8</span> uiLockMask = NiDataStream::LOCK_WRITE)</p>
<p class="NDLRefMemberDescription">Constructs a <span class="NDLSystemFont">NiDataStreamElementLock</span> from a <span class="NDLSystemFont"><a href="NiMesh.htm">NiMesh</a></span> that automatically locks upon construction. </p>
<p class="NDLRefMemberDetailedDescription">No lock is obtained if the given semantic with the given properties cannot be found on the mesh. Use IsLocked to test the success of this constructor.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pkMesh</span></td>
    <td><span class="NDLSystemFont"><a href="NiMesh.htm">NiMesh</a></span> to lock for access. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kSemantic</span></td>
    <td>Semantic of the data of interest. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiSemanticIndex</span></td>
    <td>Index of the semantic. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">eFormat</span></td>
    <td>Format of the <span class="NDLSystemFont"><a href="NiDataStream.htm">NiDataStream</a></span>. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiLockMask</span></td>
    <td>Mask indicating lock flags. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_data_stream_element_lock_1ae6fa3117c2de1c6e15f84b89f8af1bee"></a>
<p class="NDLRefMemberFunction">NiDataStreamElementLock(const <span class="NDLSystemFont">NiDataStreamElementLock</span>& kOther)</p>
<p class="NDLRefMemberDescription">Copy constructor. </p>
<p class="NDLRefMemberDetailedDescription">This will lock using the data from kOther. The underlying data stream will be locked a second time. </p>

<a name="class_ni_data_stream_element_lock_1acde0c23963749272d1c8f5e13a23e8ed"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiDataStreamElementLock</span>&  operator=(const <span class="NDLSystemFont">NiDataStreamElementLock</span>& kRHS)</p>
<p class="NDLRefMemberDescription">Assignment operator. </p>
<p class="NDLRefMemberDetailedDescription">The underlying data stream will be locked a second time. </p>

<a name="class_ni_data_stream_element_lock_1a64f63b9ba879d7983d3b329c3d710236"></a>
<p class="NDLRefMemberFunction">virtual ~NiDataStreamElementLock()</p>
<p class="NDLRefMemberDescription">Virtual destructor which unlocks the stream. </p>

<a name="class_ni_data_stream_element_lock_1a164d6483a18b2c21852bf0418bce3088"></a>
<p class="NDLRefMemberFunction">template &lt;typename T  &gt; <span class="NDLSystemFont"><a href="NiTStridedRandomAccessIterator.htm">NiTStridedRandomAccessIterator</a></span>&lt;T&gt;  begin(<span class="NDLSystemFont">NiUInt32</span> uiSubmeshIdx = 0) const</p>
<p class="NDLRefMemberDescription">Gets the starting iterator for the vertex elements from the given sub-mesh, which assumes a valid Lock. </p>

<a name="class_ni_data_stream_element_lock_1a90984e1de0bcbfd13d6620b1ff09d4ef"></a>
<p class="NDLRefMemberFunction">template &lt;typename T  &gt; <span class="NDLSystemFont"><a href="NiTStridedRandomAccessIterator.htm">NiTStridedRandomAccessIterator</a></span>&lt;T&gt;  end(<span class="NDLSystemFont">NiUInt32</span> uiSubmeshIdx = 0) const</p>
<p class="NDLRefMemberDescription">Gets the ending iterator for the vertex elements from the given sub-mesh, which assumes a valid lock. </p>

<a name="class_ni_data_stream_element_lock_1a452590f490293c18fa7362d062d705de"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  count(<span class="NDLSystemFont">NiUInt32</span> uiSubmeshIdx = 0) const</p>
<p class="NDLRefMemberDescription">Get number of vertex elements in the given sub-mesh, which assumes a valid lock. </p>

<a name="class_ni_data_stream_element_lock_1ac70dfb8841fc88d4ddaa9e09b83b7ca7"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  DataStreamExists() const</p>
<p class="NDLRefMemberDescription">Returns true if the internal reference to the mesh data stream is not null. </p>
<p class="NDLRefMemberDetailedDescription">Use this function to determine if a semantic and index exists on a mesh. </p>

<a name="class_ni_data_stream_element_lock_1ada523fd208ba02ff818ccd2db1c67cff"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsLocked() const</p>
<p class="NDLRefMemberDescription">Returns true if the data stream exists and is locked. </p>
<p class="NDLRefMemberDetailedDescription">Use this function for error checking creating an iterator. </p>

<a name="class_ni_data_stream_element_lock_1a4d196ce07ebf461d99ba3838179a5fb2"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt8</span>  GetLockMask() const</p>
<p class="NDLRefMemberDescription">Get the lock mask used to create this lock. </p>

<a name="class_ni_data_stream_element_lock_1a38ded4640d968acf4339fdf5195219cc"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  GetSubmeshCount() const</p>
<p class="NDLRefMemberDescription">Get the submesh count. </p>

<a name="class_ni_data_stream_element_lock_1a821ce0a6455ce6f785b77de51e8b9d40"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiDataStreamRef.htm">NiDataStreamRef</a></span>*  GetDataStreamRef()</p>
<p class="NDLRefMemberDescription">Get the data stream ref for the data we have locked. </p>

<a name="class_ni_data_stream_element_lock_1acb40f2d8837419367e72509b77ae1e55"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="NiDataStreamElement.htm">NiDataStreamElement</a></span>&  GetDataStreamElement()</p>
<p class="NDLRefMemberDescription">Get the data stream element for the data we have locked. </p>

<a name="class_ni_data_stream_element_lock_1a616f0277f2b077e55f76be21812085d9"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiDataStream.htm">NiDataStream</a></span>*  GetDataStream()</p>
<p class="NDLRefMemberDescription">Get the datastream that is being locked. </p>

<a name="class_ni_data_stream_element_lock_1a962e24a8623483edf13d863c8566c8d1"></a>
<p class="NDLRefMemberFunction">void  Unlock()</p>
<p class="NDLRefMemberDescription">Unlock the datastream before destruction. </p>
<p class="NDLRefMemberDetailedDescription">Generally, when the class is destroyed, it will unlock itself. If the user doesn't wish to scope the lock accordingly, they can add a call the unlock method. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
