<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiMeshModifier</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiMeshModifier</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../NiMain/NiObject.htm">NiObject</a></span></p>


<p class="NDLRefHeaderFile">&lt;NiMeshModifier.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/class_ni_mesh_modifier.gif" alt="Inheritance graph for NiMeshModifier"/>
  <p class="FigureCaption">Inheritance graph for NiMeshModifier</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">This virtual class is the base for mesh modifiers. </p>
<p class="NDLNormal">A mesh modifier is an object that is associated with an <span class="NDLSystemFont"><a href="NiMesh.htm">NiMesh</a></span> object and performs dynamic changes to the mesh. Examples include morphing and skinning.</p>
<p class="NDLNormal">Modifiers are designed to run in parallel with other Gamebryo processing, and contain information for synchronization with other engine activities. It is also possible to create modifiers that execute immediately. </p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="class_ni_mesh_modifier_1ae2876f022d4ce5b9640d059db84bf00d"></a>
<p class="NDLRefMemberFunction">NiMeshModifier()</p>
<p class="NDLRefMemberDetailedDescription">Constructor does nothing. </p>

<a name="class_ni_mesh_modifier_1a93a5bc8ca9949064d84af1cc704089bc"></a>
<p class="NDLRefMemberFunction">virtual ~NiMeshModifier()</p>
<p class="NDLRefMemberDescription">Destructor does nothing. </p>

<a name="class_ni_mesh_modifier_1af710d79105b629eaf16cbd6c28072f2d"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  IsComplete(<br/><span class="NDLSystemFont"><a href="NiMesh.htm">NiMesh</a></span>* pkMesh, <br/><span class="NDLSystemFont"><a href="../NiMain/NiSyncArgs.htm">NiSyncArgs</a></span>* pkArgs) = 0</p>
<p class="NDLRefMemberDescription">Returns true if the mesh modifier has completed all required work for the provided sync points. </p>
<a name="querying_requirements"></a>
<p class="NDLRefHead1">Querying Requirements</p>


<a name="class_ni_mesh_modifier_1a8d9b02e19b4d92cf11e45bf19ed3adc6"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  RequiresMaterialOption(<br/>const <span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>& kMaterialOption, <br/><span class="NDLSystemFont">bool</span>& bResult) const</p>
<p class="NDLRefMemberDescription">RequiresMaterialOption may be used by materials to determine whether or not they are expected to do some work. </p>
<p class="NDLRefMemberDetailedDescription">A return value of true means that: (a) the material should implement kMaterialOption and (b) the mesh has the required data for implementing kMaterialOption. A return value of false means that the material should not implement kMaterialOption. </p>

<a name="class_ni_mesh_modifier_1af174a80f9608b276e03452bcf1d7b65a"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  AreRequirementsMet(<br/><span class="NDLSystemFont"><a href="NiMesh.htm">NiMesh</a></span>* pkMesh, <br/>NiSystemDesc::RendererID ePlatform) const</p>
<p class="NDLRefMemberDescription">Validates the data stream requirements against the mesh. </p>
<p class="NDLRefMemberDetailedDescription">A caller may choose to remove the mesh modifier if the mesh does not satisfy the requirements.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">In some cases, NiSystemDesc::RENDERER_GENERIC is passed into this method. In those scenarios, it should be treated as if any renderer is being passed in. If certain requirements are renderer specific allow RENDERER_GENERIC satisfy those requirements. </p></p>

<a name="class_ni_mesh_modifier_1a2895d78bbe539c20e0b0be698f85168e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  AreRequirementsMet(<span class="NDLSystemFont"><a href="NiMesh.htm">NiMesh</a></span>* pkMesh) const</p>
<p class="NDLRefMemberDescription">Calls the polymorphic version with the current renderer ID. </p>
<p class="NDLRefMemberDetailedDescription">This function will likely fail if a renderer has not been created. </p>

<a name="class_ni_mesh_modifier_1ac2f2a72d827039d0eb4d919a078d44b2"></a>
<p class="NDLRefMemberFunction">virtual void  RetrieveRequirements(<span class="NDLSystemFont"><a href="NiMeshRequirements.htm">NiMeshRequirements</a></span>& kRequirements) const</p>
<p class="NDLRefMemberDescription">Retrieve the requirements from the mesh modifier. </p>
<a name="sync_point_functionality"></a>
<p class="NDLRefHead1">Sync Point Functionality</p>

<p class="NDLRefMemberDescription">All modifiers maintain information about the synchronization points at which they need updating. </p>

<a name="class_ni_mesh_modifier_1a3dcec3884eb9ef2c15bf2b1c2898cc05"></a>
<p class="NDLRefMemberFunction">virtual void  AddSubmitSyncPoint(const <span class="NDLSystemFont"><a href="../NiMain/NiSyncArgs.htm">NiSyncArgs::SyncPoint</a></span> uiSyncPt)</p>
<p class="NDLRefMemberDescription">Add a sync point at which some work should begin. </p>
<p class="NDLRefMemberDetailedDescription">Derived classes that implement this function must always call the base class version, which manages storage of supported sync points. </p>

<a name="class_ni_mesh_modifier_1a81e63516d09172ccb8d25c08db24a8fc"></a>
<p class="NDLRefMemberFunction">virtual void  RemoveSubmitSyncPoint(const <span class="NDLSystemFont"><a href="../NiMain/NiSyncArgs.htm">NiSyncArgs::SyncPoint</a></span> uiSyncPt)</p>
<p class="NDLRefMemberDescription">Remove a start sync point. </p>
<p class="NDLRefMemberDetailedDescription">Derived classes that implement this function must always call the base class version, which manages storage of supported sync points. </p>

<a name="class_ni_mesh_modifier_1aec75194e765e2eff1d45f161365e3d69"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  SupportsSubmitSyncPoint(const <span class="NDLSystemFont"><a href="../NiMain/NiSyncArgs.htm">NiSyncArgs::SyncPoint</a></span> uiSyncPt) const</p>
<p class="NDLRefMemberDescription">Query if a start sync point is supported. </p>

<a name="class_ni_mesh_modifier_1ab2287ed40fc4e3ecdac7b92fe4b880c7"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  GetSubmitSyncPointCount() const</p>
<p class="NDLRefMemberDescription">Get the number of submission points. </p>

<a name="class_ni_mesh_modifier_1aa236000923cd793bbda4c61f2a58e1a8"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../NiMain/NiSyncArgs.htm">NiSyncArgs::SyncPoint</a></span>  GetSubmitSyncPoint(const <span class="NDLSystemFont">NiUInt32</span> uiIndex) const</p>
<p class="NDLRefMemberDescription">Get a specific submit point. </p>

<a name="class_ni_mesh_modifier_1a04f08c71e2e95bcfe46ec3c6b2558b52"></a>
<p class="NDLRefMemberFunction">virtual void  AddCompleteSyncPoint(const <span class="NDLSystemFont"><a href="../NiMain/NiSyncArgs.htm">NiSyncArgs::SyncPoint</a></span> uiSyncPt)</p>
<p class="NDLRefMemberDescription">Add a sync point at which some work should complete. </p>
<p class="NDLRefMemberDetailedDescription">Derived classes that implement this function must always call the base class version, which manages storage of supported sync points. </p>

<a name="class_ni_mesh_modifier_1acb6228e75a517dd0d100d46129cfaf3a"></a>
<p class="NDLRefMemberFunction">virtual void  RemoveCompleteSyncPoint(const <span class="NDLSystemFont"><a href="../NiMain/NiSyncArgs.htm">NiSyncArgs::SyncPoint</a></span> uiSyncPt)</p>
<p class="NDLRefMemberDescription">Remove a completion sync point. </p>
<p class="NDLRefMemberDetailedDescription">Derived classes that implement this function must always call the base class version, which manages storage of supported sync points. </p>

<a name="class_ni_mesh_modifier_1af8a36e741315ea4ce8467479050cf491"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  SupportsCompleteSyncPoint(const <span class="NDLSystemFont"><a href="../NiMain/NiSyncArgs.htm">NiSyncArgs::SyncPoint</a></span> uiSyncPt) const</p>
<p class="NDLRefMemberDescription">Query if a completion sync point is supported. </p>

<a name="class_ni_mesh_modifier_1a9104589bb2e4637fb5d0e858251d52ab"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  GetCompleteSyncPointCount() const</p>
<p class="NDLRefMemberDescription">Get the number of completion points. </p>

<a name="class_ni_mesh_modifier_1aea0be7a2abb765852838f50c3bfd8401"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../NiMain/NiSyncArgs.htm">NiSyncArgs::SyncPoint</a></span>  GetCompleteSyncPoint(const <span class="NDLSystemFont">NiUInt32</span> uiIndex) const</p>
<p class="NDLRefMemberDescription">Get a specific completion point. </p>
<a name="updating_and_managing_parallel_tasks"></a>
<p class="NDLRefHead1">Updating and Managing Parallel Tasks</p>


<a name="class_ni_mesh_modifier_1af5e21fe19ab94611afdc4142ea538afa"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  Attach(<span class="NDLSystemFont"><a href="NiMesh.htm">NiMesh</a></span>* pkMesh) = 0</p>
<p class="NDLRefMemberDescription">Attach is called when a modifier is attached to a mesh or is otherwise required to do any set-up need for updating. </p>
<p class="NDLRefMemberDetailedDescription">Most commonly, the modifier will add <span class="NDLSystemFont"><a href="../NiFloodgate/NiStreamProcessor.htm">NiStreamProcessor</a></span> (Floodgate) tasks and attach kernels, input streams, output streams, etc. Any of these streams may be associated with a data stream on the mesh.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">AreRequirementsMet should be called prior to this method. This allows Attach to be leaner in implementation. This behavior is enforced by <span class="NDLSystemFont"><a href="NiMesh.htm">NiMesh</a></span>. </p></p>

<a name="class_ni_mesh_modifier_1ad5bba2b2ccf58a17c12b1dab0078cc4e"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  Detach(<span class="NDLSystemFont"><a href="NiMesh.htm">NiMesh</a></span>* pkMesh) = 0</p>
<p class="NDLRefMemberDescription">Performs any work needed to remove the modifier from a mesh. </p>
<p class="NDLRefMemberDetailedDescription">The calling function is responsible for ensuring that all outstanding Floodgate tasks are completed. All tasks should be deleted, streams released, etc. Code in this function can assume that CompleteTasks has been performed for all sync points. </p>

<a name="class_ni_mesh_modifier_1ad66c116096c670c8cc68ec49e42e934c"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  SubmitTasks(<br/><span class="NDLSystemFont"><a href="NiMesh.htm">NiMesh</a></span>* pkMesh, <br/><span class="NDLSystemFont"><a href="../NiMain/NiSyncArgs.htm">NiSyncArgs</a></span>* pkArgs, <br/><span class="NDLSystemFont"><a href="../NiFloodgate/NiSPWorkflowManager.htm">NiSPWorkflowManager</a></span>* pkWFManager) = 0</p>
<p class="NDLRefMemberDescription">This function is the entry point for an update, when a parallel processing modifier will submit its Floodgate tasks to the given workflow manager. </p>
<p class="NDLRefMemberDetailedDescription">Mesh modifiers that do not do any parallel work may choose to use this function as the primary work function. It will be called whenever a specific supported start sync point is hit.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">NiMeshModifier-derived classes must construct a Task Group ID for use with the <span class="NDLSystemFont"><a href="../NiFloodgate/NiSPWorkflowManager.htm">NiSPWorkflowManager</a></span> class using the <span class="NDLSystemFont"><a href="../NiMain/NiSyncArgs.htm">NiSyncArgs::GetTaskGroupID(SyncPoint, SyncPoint)</a></span> function. </p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pkMesh</span></td>
    <td>The mesh to which the modifier is attached. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkArgs</span></td>
    <td>Information about the sync point to submit for. If the submit point is specific, then the pkArgs is guaranteed to be of a matching type. When the submit point is SYNC_UPDATE or SYNC_POST_UPDATE, pkArgs is of type <span class="NDLSystemFont"><a href="../NiMain/NiUpdateSyncArgs.htm">NiUpdateSyncArgs</a></span>. When the submit point is SYNC_VISIBLE, pkArgs is of type <span class="NDLSystemFont"><a href="../NiMain/NiCullingSyncArgs.htm">NiCullingSyncArgs</a></span>. No specific type is guaranteed at other times. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkWFManager</span></td>
    <td>The workflow manager object that is to be used for Floodgate tasks. Tasks should be submitted using the functions provided by the workflow manager, and a <span class="NDLSystemFont"><a href="../NiFloodgate/NiSPWorkflow.htm">NiSPWorkflow</a></span> object will typically be provided in return. Mesh modifiers must hold on to the returned workflow in a smart pointer, as it is the only handle they have for completing the tasks and cleaning up.</td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The function should return true if any tasks are submitted to the workflow manager.</td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_mesh_modifier_1ab0d5a8a2a9db2d45fff28c0d6383d394"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  CompleteTasks(<br/><span class="NDLSystemFont"><a href="NiMesh.htm">NiMesh</a></span>* pkMesh, <br/><span class="NDLSystemFont"><a href="../NiMain/NiSyncArgs.htm">NiSyncArgs</a></span>* pkArgs) = 0</p>
<p class="NDLRefMemberDescription">This function is used to force tasks to complete. </p>
<p class="NDLRefMemberDetailedDescription">Tasks with the given start and end sync points must be forced to complete. The value NiAVObject::SYNC_ANY may be given for either the start or end sync point, in which case all the tasks starting or ending at that point should be completed. After completing all the tasks for a particular <span class="NDLSystemFont"><a href="../NiFloodgate/NiSPWorkflow.htm">NiSPWorkflow</a></span> object, any smart pointers to that workflow should be released.</p>
<p class="NDLRefMemberDetailedDescription">Mesh modifiers should, in this function, also do any other work required to complete an update step, such as computations that depend on the output of the Floodgate tasks.</p>
<p class="NDLRefMemberDetailedDescription">Mesh modifiers that do not use Floodgate could use this function to perform any work associated with the given pair of sync points.</p>
<p class="NDLRefMemberDetailedDescription">This function will only be called with SYNC_ANY or sync points that have been specified as starting or ending. There is no guarantee that the pkArgs variable is of any specific type.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>The function should return true if tasks were successfully completed. False indicates an error condition. </td>
</tr>

        </tbody>
    </table>
</div>


 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
