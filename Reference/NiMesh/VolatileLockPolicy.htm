<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>VolatileLockPolicy</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">VolatileLockPolicy</p>


<p class="NDLRefHeaderFile">&lt;NiDataStreamLockPolicy.h&gt;</p>


<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">Implements the locking policy used by <span class="NDLSystemFont"><a href="NiDataStream.htm">NiDataStream</a></span> subclasses with volatile read/write access. </p>
<p class="NDLNormal">This is a template class - the template argument must be a sub-class of <span class="NDLSystemFont"><a href="NiDataStream.htm">NiDataStream</a></span>. </p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="class_volatile_lock_policy_1a5950d1e47ee9a04cd5a28463663b8f3d"></a>
<p class="NDLRefMemberFunction">VolatileLockPolicy()</p>
<p class="NDLRefMemberDescription">Constructor. </p>

<a name="class_volatile_lock_policy_1ad07521ea71a82dfe2576326c3dd761e3"></a>
<p class="NDLRefMemberFunction">void*  LockRead(<br/>TDataStream* pkDS, <br/><span class="NDLSystemFont">bool</span> bForceRead)</p>
<p class="NDLRefMemberDescription">Locks the stream for read access and returns a pointer to the data. </p>

<a name="class_volatile_lock_policy_1aab23f6f0ca91907cd8afad61cfaca2e2"></a>
<p class="NDLRefMemberFunction">void*  LockWrite(<br/>TDataStream* pkDS, <br/><span class="NDLSystemFont">bool</span> bForceWrite)</p>
<p class="NDLRefMemberDescription">Locks the stream for write access and returns a pointer to the data. </p>
<p class="NDLRefMemberDetailedDescription">The content of the data stream is undefined. </p>

<a name="class_volatile_lock_policy_1a2e036829968f400784fd19d455c6891d"></a>
<p class="NDLRefMemberFunction">void*  LockReadWrite(<br/>TDataStream* pkDS, <br/><span class="NDLSystemFont">bool</span> bForceRead, <br/><span class="NDLSystemFont">bool</span> bForceWrite)</p>
<p class="NDLRefMemberDescription">Asserts false and returns NULL, as it is not possible to read and write from a volatile buffer with one lock. </p>

<a name="class_volatile_lock_policy_1a43590bda4faba4fefaba456f142161ff"></a>
<p class="NDLRefMemberFunction">void  UnlockRead(<br/>TDataStream* pkDS, <br/><span class="NDLSystemFont">bool</span> bForceRead)</p>
<p class="NDLRefMemberDescription">Unlocks a stream that was previously locked for read access. </p>

<a name="class_volatile_lock_policy_1a1a909d508b72d09a1c3cdce5c96de101"></a>
<p class="NDLRefMemberFunction">void  UnlockWrite(<br/>TDataStream* pkDS, <br/><span class="NDLSystemFont">bool</span> bForceWrite)</p>
<p class="NDLRefMemberDescription">Unlocks a stream that was previously locked for write access. </p>

<a name="class_volatile_lock_policy_1ad98055272ff2a0b9d2e1628c20f0ba8e"></a>
<p class="NDLRefMemberFunction">void  UnlockReadWrite(<br/>TDataStream* pkDS, <br/><span class="NDLSystemFont">bool</span> bForceRead, <br/><span class="NDLSystemFont">bool</span> bForceWrite)</p>
<p class="NDLRefMemberDescription">Unlocks a stream that was previously locked for read/write access. </p>

<a name="class_volatile_lock_policy_1a782b7bb3e571f85812f1fb158b58d363"></a>
<p class="NDLRefMemberFunction">void  Delete(TDataStream* pkDS)</p>
<p class="NDLRefMemberDescription">In debug builds, asserts that the stream is not locked and hence is safe to delete. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
