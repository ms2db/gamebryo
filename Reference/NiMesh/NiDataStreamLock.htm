<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiDataStreamLock</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiDataStreamLock</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../efd/efd__MemObject.htm">efd::MemObject</a></span></p>


<p class="NDLRefHeaderFile">&lt;NiDataStreamLock.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/class_ni_data_stream_lock.gif" alt="Inheritance graph for NiDataStreamLock"/>
  <p class="FigureCaption">Inheritance graph for NiDataStreamLock</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">This class encapsulates locking an arbitrary <span class="NDLSystemFont"><a href="NiDataStream.htm">NiDataStream</a></span> and iterating through the data contained within. </p>
<p class="NDLNormal">Iteration can be for the entire buffer or individual NiDataStream::Regions of the stream. This class will lock upon construction and will unlock upon destruction.</p>
<p class="NDLNormal">
<p class="NDLNormal">If iteration of primitives is desired, use <span class="NDLSystemFont"><a href="NiDataStreamPrimitiveLock.htm">NiDataStreamPrimitiveLock</a></span> instead. If iteration over submeshes is desired instead of regions, use <span class="NDLSystemFont"><a href="NiDataStreamElementLock.htm">NiDataStreamElementLock</a></span> instead. </p></p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="class_ni_data_stream_lock_1adc4e600c29d022fd81e935b8409b69ce"></a>
<p class="NDLRefMemberFunction">NiDataStreamLock()</p>
<p class="NDLRefMemberDescription">Default constructor. </p>

<a name="class_ni_data_stream_lock_1a373567f3caecc7cf085e7a0b90222940"></a>
<p class="NDLRefMemberFunction">NiDataStreamLock(<br/><span class="NDLSystemFont"><a href="NiDataStream.htm">NiDataStream</a></span>* pkDataStream, <br/>size_t stElementOffset = 0, <br/><span class="NDLSystemFont">NiUInt8</span> uiLockMask = NiDataStream::LOCK_WRITE)</p>
<p class="NDLRefMemberDescription">Constructs a <span class="NDLSystemFont">NiDataStreamLock</span> for an <span class="NDLSystemFont"><a href="NiDataStream.htm">NiDataStream</a></span> that automatically locks upon construction. </p>
<p class="NDLRefMemberDetailedDescription">Use IsLocked to check for failure of the constructor to lock the stream.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pkDataStream</span></td>
    <td><span class="NDLSystemFont"><a href="NiDataStream.htm">NiDataStream</a></span> to lock for access. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">stElementOffset</span></td>
    <td>Offset to the element that will be iterated. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiLockMask</span></td>
    <td>Mask indicating lock flags. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_data_stream_lock_1a3f717ef5a1c8fefecd6a0a44727712e1"></a>
<p class="NDLRefMemberFunction">NiDataStreamLock(const <span class="NDLSystemFont">NiDataStreamLock</span>& kLock)</p>
<p class="NDLRefMemberDescription">Copy constructor. </p>
<p class="NDLRefMemberDetailedDescription">This will lock using the data from kOther. The underlying data stream will be locked a second time. </p>

<a name="class_ni_data_stream_lock_1a5b609677beda3b96d87aba0fa6012ad1"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiDataStreamLock</span>&  operator=(const <span class="NDLSystemFont">NiDataStreamLock</span>& kRHS)</p>
<p class="NDLRefMemberDescription">Assignment operator. </p>
<p class="NDLRefMemberDetailedDescription">The underlying data stream will be locked a second time. </p>

<a name="class_ni_data_stream_lock_1a40f792e99db9aca456e3c9eabd57f7b2"></a>
<p class="NDLRefMemberFunction">~NiDataStreamLock()</p>
<p class="NDLRefMemberDescription">Destructor. </p>

<a name="class_ni_data_stream_lock_1a0a33298338f13801b3019c61e182ece8"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  DataStreamExists() const</p>
<p class="NDLRefMemberDescription">Returns true if the internal reference to the data stream is not null. </p>

<a name="class_ni_data_stream_lock_1a5113c825bb0667c2cf63bbba26e67716"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsLocked() const</p>
<p class="NDLRefMemberDescription">Returns true if the pointer to locked data is not null. </p>

<a name="class_ni_data_stream_lock_1a7068e4a7bb483cf1e41f1499693c02d5"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiDataStream.htm">NiDataStream</a></span>*  GetDataStream()</p>
<p class="NDLRefMemberDescription">Accessor for the internal reference to the data stream. </p>

<a name="class_ni_data_stream_lock_1a5ed33d23126b3680dfd58a77b48b9e7c"></a>
<p class="NDLRefMemberFunction">void  Unlock()</p>
<p class="NDLRefMemberDescription">Unlock the datastream before destruction. </p>
<p class="NDLRefMemberDetailedDescription">Generally, when the class is destroyed, it will unlock itself. This requires that the underlying data stream exist during destruction. If the user doesn't wish to scope the lock accordingly, they can add a call the unlock method. </p>
<a name="nidatastream_full_iteration"></a>
<p class="NDLRefHead1">NiDataStream Full Iteration</p>


<a name="class_ni_data_stream_lock_1a66675beaac5232306ca7d571a423e8f7"></a>
<p class="NDLRefMemberFunction">template &lt;typename T  &gt; <span class="NDLSystemFont"><a href="NiTStridedRandomAccessIterator.htm">NiTStridedRandomAccessIterator</a></span>&lt;T&gt;  begin() const</p>
<p class="NDLRefMemberDescription">Gets the starting iterator for all of the vertex elements in the datastream, which assumes a valid lock. </p>

<a name="class_ni_data_stream_lock_1a66490a79bca74638f9bbdb41674979a7"></a>
<p class="NDLRefMemberFunction">template &lt;typename T  &gt; <span class="NDLSystemFont"><a href="NiTStridedRandomAccessIterator.htm">NiTStridedRandomAccessIterator</a></span>&lt;T&gt;  end() const</p>
<p class="NDLRefMemberDescription">Gets the ending iterator for all of the vertex elements in the datastream, which assumes a valid lock. </p>

<a name="class_ni_data_stream_lock_1a7a911e14cf823672cd7c241a0392e9be"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  count() const</p>
<p class="NDLRefMemberDescription">Get number of vertex elements in the datastream, which assumes a valid lock. </p>
<a name="nidatastream_region_iteration"></a>
<p class="NDLRefHead1">NiDataStream Region Iteration</p>


<a name="class_ni_data_stream_lock_1aaaf596fb17b147b9e6a76ab9eee73b74"></a>
<p class="NDLRefMemberFunction">template &lt;typename T  &gt; <span class="NDLSystemFont"><a href="NiTStridedRandomAccessIterator.htm">NiTStridedRandomAccessIterator</a></span>&lt;T&gt;  begin_region(<span class="NDLSystemFont">NiUInt32</span> uiRegionIdx) const</p>
<p class="NDLRefMemberDescription">Gets the starting iterator for the vertex elements in the specified region, which assumes a valid lock. </p>

<a name="class_ni_data_stream_lock_1a0e0cf9632d54a25939c669ede3dd2f6b"></a>
<p class="NDLRefMemberFunction">template &lt;typename T  &gt; <span class="NDLSystemFont"><a href="NiTStridedRandomAccessIterator.htm">NiTStridedRandomAccessIterator</a></span>&lt;T&gt;  end_region(<span class="NDLSystemFont">NiUInt32</span> uiRegionIdx) const</p>
<p class="NDLRefMemberDescription">Gets the ending iterator for the vertex elements in the specified region, which assumes a valid lock. </p>

<a name="class_ni_data_stream_lock_1a3b36cdbc744c06499697b5ff2f531cea"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  count_region(<span class="NDLSystemFont">NiUInt32</span> uiRegionIdx) const</p>
<p class="NDLRefMemberDescription">Get number of vertex elements in the specified region, which assumes a valid lock. </p>

<a name="class_ni_data_stream_lock_1a8775567b482409d866de26ce9bd327bf"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  GetNumRegions() const</p>
<p class="NDLRefMemberDescription">Get the number of regions on this datastream. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
