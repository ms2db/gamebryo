<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiMeshScreenElements</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiMeshScreenElements</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="NiMesh.htm">NiMesh</a></span></p>


<p class="NDLRefHeaderFile">&lt;NiMeshScreenElements.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/class_ni_mesh_screen_elements.gif" alt="Inheritance graph for NiMeshScreenElements"/>
  <p class="FigureCaption">Inheritance graph for NiMeshScreenElements</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">2D primitives that are derived from <span class="NDLSystemFont"><a href="NiMesh.htm">NiMesh</a></span>, and inherit the characteristics of that class, including the ability to have transforms, shaders, properties and effects applied. </p>
<p class="NDLNormal">They are a versatile tool for rendering elements in screen space, but they require some special handling.</p>
<p class="NDLNormal">Internally, <span class="NDLSystemFont">NiMeshScreenElements</span> are only safe for 16-bit counts, so keep all vertex and index counts below 65535. </p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="class_ni_mesh_screen_elements_1af33d24dbe12b6c9d772b6af4b65691fa"></a>
<p class="NDLRefMemberFunction">NiMeshScreenElements(<br/><span class="NDLSystemFont">bool</span> bWantNormals, <br/><span class="NDLSystemFont">bool</span> bWantColors, <br/><span class="NDLSystemFont">NiUInt16</span> usNumTextureSets, <br/><span class="NDLSystemFont">NiInt32</span> iMaxPQuantity = 1, <br/><span class="NDLSystemFont">NiInt32</span> iPGrowBy = 1, <br/><span class="NDLSystemFont">NiInt32</span> iMaxVQuantity = 4, <br/><span class="NDLSystemFont">NiInt32</span> iVGrowBy = 1, <br/><span class="NDLSystemFont">NiInt32</span> iMaxTQuantity = 2, <br/><span class="NDLSystemFont">NiInt32</span> iTGrowBy = 1, <br/><span class="NDLSystemFont">NiUInt8</span> uiAccessMask = NiDataStream::ACCESS_GPU_READ|NiDataStream::ACCESS_CPU_READ|NiDataStream::ACCESS_CPU_WRITE_MUTABLE, <br/><span class="NDLSystemFont">bool</span> bForceFixedFunctionColors = false)</p>
<p class="NDLRefMemberDescription">Constructs a new <span class="NDLSystemFont">NiMeshScreenElements</span> object. </p>
<p class="NDLRefMemberDetailedDescription">The initial storage quantities for polygons (iMaxPQuantity and iPGrowBy), vertices (iMaxVQuantity and iVGrowBy), and triangles (iMaxTQuantity and iTGrowBy) have default values for the common case of a single axis-aligned rectangle on the screen. The growth quantities for the containers also have default values. If you know how much storage is required for your application, provide these values to avoid memory reallocations during the lifetime of this object.</p>
<p class="NDLRefMemberDetailedDescription">The uiAccessMask parameter describes the access mask for the streams. All streams in the elements will share the same access mask.</p>
<p class="NDLRefMemberDetailedDescription">The bForceFixedFunctionColors allows the creation of an <span class="NDLSystemFont">NiMeshScreenElements</span> object that will work with the fixed-function DX9 pipeline, though it may not work with other renderers. </p>

<a name="class_ni_mesh_screen_elements_1af949e032668cb5cfbece353c9659b811"></a>
<p class="NDLRefMemberFunction">NiMeshScreenElements()</p>
<p class="NDLRefMemberDescription">Default constructor. </p>

<a name="class_ni_mesh_screen_elements_1a4eb61d3cc775afa6b453a5638045f4b8"></a>
<p class="NDLRefMemberFunction">virtual ~NiMeshScreenElements()</p>
<p class="NDLRefMemberDescription">Destructor. </p>

<a name="class_ni_mesh_screen_elements_1acaf5101a6c1cca32555b70ec7499fcc3"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsValid(<span class="NDLSystemFont">NiInt32</span> iPolygon) const</p>
<p class="NDLRefMemberDescription">The validity of a polygon handle may be tested with this function. </p>
<p class="NDLRefMemberDetailedDescription">Polygon management is transparent to the user. All polygon operations involve polygon handles, which are integer valued. </p>

<a name="class_ni_mesh_screen_elements_1aad9fc8159860a6cc3b08979b2b03ab95"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiInt32</span>  Insert(<br/><span class="NDLSystemFont">NiUInt16</span> usNumVertices, <br/><span class="NDLSystemFont">NiUInt16</span> usNumTriangles = 0, <br/>const <span class="NDLSystemFont">NiUInt32</span>* auiTriList = 0)</p>
<p class="NDLRefMemberDescription">Polygon insertion. </p>
<p class="NDLRefMemberDetailedDescription">The number of vertices must be positive. An optional triangle index array may be passed in. If no array is passed in (number of triangles is zero and array is NULL), the requested polygon is assumed to be convex and a triangle fan is generated for the polygon. If an array is requested, the requested polygon can be as complex as you like, even a collection of disjoint polygons. The input array is a const pointer, this class copies the values and the caller is responsible for deleting the array in the event it was dynamically allocated. The return value is an opaque handle for the created polygon. See the comments for IsValid(...) regarding validity of the handle. On insertion, all you get is storage for the vertices and their attributes. You must fill them in with the Set* calls listed later in the class interface. </p>

<a name="class_ni_mesh_screen_elements_1a8497aa66c9f371336537355913f646b6"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  Remove(<span class="NDLSystemFont">NiInt32</span> iPolygon)</p>
<p class="NDLRefMemberDescription">Remove the polygon at the index specified. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">The handles are reused. If you store a handle to a polygon, remove the polygon, and then insert a new polygon, the handle you stored might be valid, but it would be for a polygon you are unaware of. </p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">iPolygon</span></td>
    <td>Index of the polygon to remove.</td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The return value is 'true' if the input polygon handle is valid. After removal of one or more polygons, the polygon handles that your application has stored for the remaining polygons are still valid.</td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_mesh_screen_elements_1abb27f3c0a1475b0c20c7a1a2782b6041"></a>
<p class="NDLRefMemberFunction">void  RemoveAll()</p>
<p class="NDLRefMemberDescription">Removes all polygons. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">The handles are reused. If you store a handle to a polygon, remove the polygon, and then insert a new polygon, the handle you stored might be valid, but it would be for a polygon you are unaware of. </p></p>

<a name="class_ni_mesh_screen_elements_1af308c97cf7051829a8f01cd7403cda30"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiInt32</span>  GetNumPolygons() const</p>
<p class="NDLRefMemberDescription">Gets the number of polygons in the container. </p>

<a name="class_ni_mesh_screen_elements_1ab55430e5db5d36953a9cb396e36455ce"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiInt32</span>  GetNumVertices(<span class="NDLSystemFont">NiInt32</span> iPolygon) const</p>
<p class="NDLRefMemberDescription">Gets the number of vertices in the specified polygon. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>The return value is positive for a valid polygon handle; otherwise, the return value is zero. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_mesh_screen_elements_1a30ca5edaff67a7e63b47c70eee4e40ce"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiInt32</span>  GetNumTriangles(<span class="NDLSystemFont">NiInt32</span> iPolygon) const</p>
<p class="NDLRefMemberDescription">Gets the number of triangles in the specified polygon. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>The return value is positive for a valid polygon handle; otherwise, the return value is zero. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_mesh_screen_elements_1a1f28290b33d84c84685b81f0bff30fa9"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  Resize(<br/>float fXScale, <br/>float fYScale)</p>
<p class="NDLRefMemberDescription">Resizing to support the UI system. </p>
<p class="NDLRefMemberDetailedDescription">The input scales should be positive. The returned Boolean value is 'true' if the operation was successful (the inputs are positive). </p>

<a name="class_ni_mesh_screen_elements_1a294e0d5bc75c4f753e2d0c60eb9ec778"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">NiUInt16</span>  GetTextureSets() const</p>
<p class="NDLRefMemberDescription">Returns the number of texture sets. </p>

<a name="class_ni_mesh_screen_elements_1a209f7a7ebf4e9a0138c1f630a382874d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  GetActiveVertexCount() const</p>
<p class="NDLRefMemberDescription">Gets the active vertex count. </p>

<a name="class_ni_mesh_screen_elements_1ae78a91eec83fd9f440a3a3127a7141d5"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  GetActiveIndexCount() const</p>
<p class="NDLRefMemberDescription">Gets the active index count. </p>

<a name="class_ni_mesh_screen_elements_1ade263ab209b980596f6b60b81a416ae4"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  GetActiveTriangleCount() const</p>
<p class="NDLRefMemberDescription">Gets the active triangle count. </p>
<a name="public_static_methods"></a>
<p class="NDLRefHead1">Public Static Methods</p>


<a name="class_ni_mesh_screen_elements_1a8b4c4d3588ab4338e015c12ad2a112c2"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">NiMeshScreenElements</span>*  Create(<br/><span class="NDLSystemFont"><a href="../NiMain/NiRenderer.htm">NiRenderer</a></span>* pkRenderer, <br/>const float fXOffset, <br/>const float fYOffset, <br/>const unsigned int uiWidth, <br/>const unsigned int uiHeight, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiRenderer.htm">NiRenderer::DisplayCorner</a></span> eCorner, <br/>const <span class="NDLSystemFont">bool</span> bForceSafeZone = true)</p>
<p class="NDLRefMemberDescription">Static factory method. </p>
<a name="access_to_vertex_and_attribute_arrays"></a>
<p class="NDLRefHead1">Access to Vertex and Attribute Arrays</p>

<p class="NDLRefMemberDescription">Access to vertex and attribute arrays may be accomplished by retrieving a particular stream using one of the methods provided.</p>
<p class="NDLRefMemberDescription">To determine the start offset into the vertex and attribute arrays, the GetPolyVertexRange can be used. To determine the start offset into the index array, the GetPolyIndexRange is used. Note, the application should unlock the stream before the next <span class="NDLSystemFont">NiMeshScreenElements</span> method call.</p>
<p class="NDLRefMemberDescription">
<p class="NDLRefMemberDescription">It is not possible to modify the number of indices directly. Instead, you must remove the old polygon and insert a new one. </p></p>

<a name="class_ni_mesh_screen_elements_1a84d84dfed9e2935d4b0a37f0e77d2ddb"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetPolyVertexRange(<br/><span class="NDLSystemFont">NiUInt32</span> uiPolygon, <br/><span class="NDLSystemFont">NiUInt32</span>& uiVertStart, <br/><span class="NDLSystemFont">NiUInt32</span>& uiVertRange) const</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_mesh_screen_elements_1a1223cde371fbd58ec503c77dc8dd771d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetPolyIndexRange(<br/><span class="NDLSystemFont">NiUInt32</span> uiPolygon, <br/><span class="NDLSystemFont">NiUInt32</span>& uiIndexStart, <br/><span class="NDLSystemFont">NiUInt32</span>& uiIndexRange) const</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_mesh_screen_elements_1ad490a519208e38303cb9fe4317b7c219"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiDataStream.htm">NiDataStream</a></span>*  GetVertexDataStream()</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_mesh_screen_elements_1a4cb647544894b235f6a91188bdc639a3"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="NiDataStream.htm">NiDataStream</a></span>*  GetVertexDataStream() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_mesh_screen_elements_1afbb6c20b6ee424e172402d9ffd76ddf6"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiDataStream.htm">NiDataStream</a></span>*  GetColorDataStream()</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_mesh_screen_elements_1ad18b86e6d404815c2d2d0ae750181279"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="NiDataStream.htm">NiDataStream</a></span>*  GetColorDataStream() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_mesh_screen_elements_1acdb45641f90ef19e620ffb47014863d6"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiDataStream.htm">NiDataStream</a></span>*  GetNormalDataStream()</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_mesh_screen_elements_1a674a87ab45593f3144b680c3fc5328c6"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="NiDataStream.htm">NiDataStream</a></span>*  GetNormalDataStream() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_mesh_screen_elements_1aa0d210d777d0cd8d3086ea70d528e468"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiDataStream.htm">NiDataStream</a></span>*  GetTexCoordDataStream(unsigned int uiSet)</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_mesh_screen_elements_1a3f545eea57d1e278bd0382292d90bdac"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="NiDataStream.htm">NiDataStream</a></span>*  GetTexCoordDataStream(unsigned int uiSet) const</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_mesh_screen_elements_1a9619bb8acf41cd5c3ad79a8b88cf1500"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiDataStream.htm">NiDataStream</a></span>*  GetIndexDataStream()</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_mesh_screen_elements_1affc6e18ca9297dace81d4cc03096f136"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="NiDataStream.htm">NiDataStream</a></span>*  GetIndexDataStream() const</p>
<p class="NDLRefMemberFunction"></p>
<a name="batch_updating"></a>
<p class="NDLRefHead1">Batch Updating</p>

<p class="NDLRefMemberDescription">These methods help performance of a chain of updates by locking and unlocking at the outermost scale rather than at each individual update.</p>
<p class="NDLRefMemberDescription">If you know that you are going to be doing many updates in a row, these can give a significant performance enhancement, since each stream is only locked once at the <span class="NDLSystemFont"><a href="NiMeshScreenElements.htm#class_ni_mesh_screen_elements_1a8b497b8bc56bbe799bded2e3a207eebc">BeginBatchUpdate()</a></span> call and unlocked once at the <span class="NDLSystemFont"><a href="NiMeshScreenElements.htm#class_ni_mesh_screen_elements_1a281db929a4bc090e5edeea9c1c86fc78">EndBatchUpdate()</a></span> call. Otherwise, each stream is likely to be locked and unlocked for each get/set call to modify the on-screen polygons. </p>

<a name="class_ni_mesh_screen_elements_1a8b497b8bc56bbe799bded2e3a207eebc"></a>
<p class="NDLRefMemberFunction">void  BeginBatchUpdate(<span class="NDLSystemFont">NiUInt8</span> uiLockMask = NiDataStream::LOCK_WRITE)</p>
<p class="NDLRefMemberDescription">Begins a batch update and sets the local cache of the data for each stream in the MeshScreenElements. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">uiLockMask</span></td>
    <td>Mask used to lock the data streams. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_mesh_screen_elements_1a281db929a4bc090e5edeea9c1c86fc78"></a>
<p class="NDLRefMemberFunction">void  EndBatchUpdate()</p>
<p class="NDLRefMemberDescription">Ends a batch update and unlocks all data streams. </p>
<a name="bounds_updating"></a>
<p class="NDLRefHead1">Bounds Updating</p>

<p class="NDLRefMemberDescription">Updates the model-space bounding volume.</p>
<p class="NDLRefMemberDescription">The bound-needs-update flag is automatically set when polygons are inserted or removed and when vertices are modified. </p>

<a name="class_ni_mesh_screen_elements_1a10687b63b1bba9648877cdafbd660273"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  BoundNeedsUpdate() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_mesh_screen_elements_1a733e97a7fea31637562267e8ff706827"></a>
<p class="NDLRefMemberFunction">void  UpdateBound()</p>
<p class="NDLRefMemberFunction"></p>
<a name="converting_from_niscreentexture"></a>
<p class="NDLRefHead1">Converting from NiScreenTexture</p>


<a name="class_ni_mesh_screen_elements_1a9f70131a56b72863e78abe4d79273557"></a>
<p class="NDLRefMemberFunction">void  AddNewScreenRect(<br/>short sTop, <br/>short sLeft, <br/>unsigned short usWidth, <br/>unsigned short usHeight, <br/>unsigned short usTexTop, <br/>unsigned short usTexLeft, <br/><span class="NDLSystemFont"><a href="../NiMain/NiColorA.htm">NiColorA</a></span> kColor = NiColorA::WHITE, <br/>unsigned int uiScreenWidth = 0, <br/>unsigned int uiScreenHeight = 0)</p>
<p class="NDLRefMemberDescription">Insert screen-space rectangle. </p>
<p class="NDLRefMemberDetailedDescription">This takes screen-space coordinates and converts to Normalized Device Coordinates (NDC).</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">If the render target is not the default back buffer, the conversion will not be correct. In this case set the screen width and height directly. </p></p>

<a name="class_ni_mesh_screen_elements_1a598404cdc43f29e58924b69efa9e5cdc"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">NiMeshScreenElements</span>*  Create(<br/><span class="NDLSystemFont"><a href="../NiMain/NiTexture.htm">NiTexture</a></span>* pkTexture, <br/><span class="NDLSystemFont"><a href="../NiMain/NiTexturingProperty.htm">NiTexturingProperty::ApplyMode</a></span> eMode = NiTexturingProperty::APPLY_REPLACE)</p>
<p class="NDLRefMemberDescription">The following methods are meant to ease the porting of old code that used <span class="NDLSystemFont"><a href="../NiMain/NiScreenTexture.htm">NiScreenTexture</a></span>. </p>
<p class="NDLRefMemberDetailedDescription">The signatures and arguments to these functions match those in the deprecated class <span class="NDLSystemFont"><a href="../NiMain/NiScreenTexture.htm">NiScreenTexture</a></span>.</p>
<p class="NDLRefMemberDetailedDescription">It is not intended that these methods will be used for newly-developed code, which should instead use the Insert and Set methods below. Factory Method.</p>
<p class="NDLRefMemberDetailedDescription">Creates an <span class="NDLSystemFont">NiMeshScreenElements</span> using the supplied <span class="NDLSystemFont"><a href="../NiMain/NiTexture.htm">NiTexture</a></span> object. A new <span class="NDLSystemFont"><a href="../NiMain/NiTexturingProperty.htm">NiTexturingProperty</a></span> is created, and the <span class="NDLSystemFont"><a href="../NiMain/NiTexture.htm">NiTexture</a></span> passed in is set as the base map. The base clamp mode is set to CLAMP_S_CLAMP_T, and the apply mode is set to the value provided in eMode, which defaults to APPLY_REPLACE. </p>
<a name="primitive_data_member_access"></a>
<p class="NDLRefHead1">Primitive Data Member Access</p>

<p class="NDLRefMemberDescription">The growth values should be positive.</p>
<p class="NDLRefMemberDescription">Internally, this is ensured by setting them to one if the requested values are nonpositive. </p>

<a name="class_ni_mesh_screen_elements_1a92a0bfe57a257ce8c3ed5ec7347d67f6"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiInt32</span>  GetMaxPQuantity() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_mesh_screen_elements_1af890370b57837d5965dedf19cbdd3911"></a>
<p class="NDLRefMemberFunction">void  SetPGrowBy(<span class="NDLSystemFont">NiInt32</span> iPGrowBy)</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_mesh_screen_elements_1a5087239ff064e24fe2c7288ac301d584"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiInt32</span>  GetPGrowBy() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_mesh_screen_elements_1aef47cced7a9432ff36a0567bdb078766"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiInt32</span>  GetMaxVQuantity() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_mesh_screen_elements_1a6215df5796c21018cd6c32178c8a6403"></a>
<p class="NDLRefMemberFunction">void  SetVGrowBy(<span class="NDLSystemFont">NiInt32</span> iVGrowBy)</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_mesh_screen_elements_1a4550cf4fa027f22cb093c1bdcb50fdca"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiInt32</span>  GetVGrowBy() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_mesh_screen_elements_1ad2474b481c1efeb522da8c553a17ab30"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiInt32</span>  GetMaxTQuantity() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_mesh_screen_elements_1a7ceb1bd403cdff43c3b9b8b26722804e"></a>
<p class="NDLRefMemberFunction">void  SetTGrowBy(<span class="NDLSystemFont">NiInt32</span> iTGrowBy)</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_mesh_screen_elements_1ac7273d75b9e418badfbfe97f81732fd9"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiInt32</span>  GetTGrowBy() const</p>
<p class="NDLRefMemberFunction"></p>
<a name="set_and_get_the_texture_coordinates"></a>
<p class="NDLRefHead1">Set and Get the Texture Coordinates</p>

<p class="NDLRefMemberDescription">The {Set,Get}Textures functions that take array inputs require arrays with (at least) the same number of texture coordinates as the number of polygon vertices.</p>
<p class="NDLRefMemberDescription">The SetTextures function that takes four floating-point values is for axis-aligned rectangles for which the texture subimage mapped to it is an axis-aligned rectangle. The last {Set,Get}Textures pair is for axis-aligned rectangles. </p>

<a name="class_ni_mesh_screen_elements_1a6c355ae8253e1622f19c5a903cb260b1"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  SetTexture(<br/><span class="NDLSystemFont">NiInt32</span> iPolygon, <br/><span class="NDLSystemFont">NiInt32</span> iVertex, <br/><span class="NDLSystemFont">NiUInt16</span> usSet, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint2.htm">NiPoint2</a></span>& kValue)</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_mesh_screen_elements_1a4039a3690b7407c756bc99d47b0f8b99"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetTexture(<br/><span class="NDLSystemFont">NiInt32</span> iPolygon, <br/><span class="NDLSystemFont">NiInt32</span> iVertex, <br/><span class="NDLSystemFont">NiUInt16</span> usSet, <br/><span class="NDLSystemFont"><a href="../NiMain/NiPoint2.htm">NiPoint2</a></span>& kValue) const</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_mesh_screen_elements_1a4ffa0934d78e0233c0633d92b49fd404"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  SetTextures(<br/><span class="NDLSystemFont">NiInt32</span> iPolygon, <br/><span class="NDLSystemFont">NiUInt16</span> usSet, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint2.htm">NiPoint2</a></span>* akValue)</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_mesh_screen_elements_1acd7046f9eb6656c2c8a637bcfe50815d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetTextures(<br/><span class="NDLSystemFont">NiInt32</span> iPolygon, <br/><span class="NDLSystemFont">NiUInt16</span> usSet, <br/><span class="NDLSystemFont"><a href="../NiMain/NiPoint2.htm">NiPoint2</a></span>* akValue) const</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_mesh_screen_elements_1ac2c1ba0a51d4ba1d2ed56352e5f2120e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  SetTextures(<br/><span class="NDLSystemFont">NiInt32</span> iPolygon, <br/><span class="NDLSystemFont">NiUInt16</span> usSet, <br/>float fLeft, <br/>float fTop, <br/>float fRight, <br/>float fBottom)</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_mesh_screen_elements_1a09bad94505d8ea8607167f53a47d055e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  SetTextures(<br/><span class="NDLSystemFont">NiInt32</span> iPolygon, <br/><span class="NDLSystemFont">NiUInt16</span> usSet, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint2.htm">NiPoint2</a></span>& kUpperLeft, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint2.htm">NiPoint2</a></span>& kLowerLeft, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint2.htm">NiPoint2</a></span>& kLowerRight, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint2.htm">NiPoint2</a></span>& kUpperRight)</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_mesh_screen_elements_1a4e6fd41a1b0a5683da43c91510f13e76"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetTextures(<br/><span class="NDLSystemFont">NiInt32</span> iPolygon, <br/><span class="NDLSystemFont">NiUInt16</span> usSet, <br/><span class="NDLSystemFont"><a href="../NiMain/NiPoint2.htm">NiPoint2</a></span>& kUpperLeft, <br/><span class="NDLSystemFont"><a href="../NiMain/NiPoint2.htm">NiPoint2</a></span>& kLowerLeft, <br/><span class="NDLSystemFont"><a href="../NiMain/NiPoint2.htm">NiPoint2</a></span>& kLowerRight, <br/><span class="NDLSystemFont"><a href="../NiMain/NiPoint2.htm">NiPoint2</a></span>& kUpperRight) const</p>
<p class="NDLRefMemberFunction"></p>
<a name="set_and_get_the_vertex_colors"></a>
<p class="NDLRefHead1">Set and Get the Vertex Colors</p>

<p class="NDLRefMemberDescription">The {Set,Get}Colors functions that take array inputs require arrays with (at least) the same number of colors as the number of polygon vertices.</p>
<p class="NDLRefMemberDescription">The last {Set,Get}Colors pair is for axis-aligned rectangles. </p>

<a name="class_ni_mesh_screen_elements_1a473f2dd875edbe10ed60d158a2c73458"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  SetColor(<br/><span class="NDLSystemFont">NiInt32</span> iPolygon, <br/><span class="NDLSystemFont">NiInt32</span> iVertex, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiColorA.htm">NiColorA</a></span>& kValue)</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_mesh_screen_elements_1a7a779bfd31afddb8405ef98da9d326de"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetColor(<br/><span class="NDLSystemFont">NiInt32</span> iPolygon, <br/><span class="NDLSystemFont">NiInt32</span> iVertex, <br/><span class="NDLSystemFont"><a href="../NiMain/NiColorA.htm">NiColorA</a></span>& kValue) const</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_mesh_screen_elements_1ad97c966fe30dfd6b82d6da7307f1ff60"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  SetColors(<br/><span class="NDLSystemFont">NiInt32</span> iPolygon, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiColorA.htm">NiColorA</a></span>* akValue)</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_mesh_screen_elements_1afdc752cc3bf7a5562a3cc4f94421a979"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  SetColors(<br/><span class="NDLSystemFont">NiInt32</span> iPolygon, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiColorA.htm">NiColorA</a></span>& kCommonValue)</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_mesh_screen_elements_1ac78a21df171296aa2f1671e92211abe5"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetColors(<br/><span class="NDLSystemFont">NiInt32</span> iPolygon, <br/><span class="NDLSystemFont"><a href="../NiMain/NiColorA.htm">NiColorA</a></span>* akValue) const</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_mesh_screen_elements_1a948c4e3870e3d5f4c5dd82fbe916f031"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  SetColors(<br/><span class="NDLSystemFont">NiInt32</span> iPolygon, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiColorA.htm">NiColorA</a></span>& kUpperLeft, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiColorA.htm">NiColorA</a></span>& kLowerLeft, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiColorA.htm">NiColorA</a></span>& kLowerRight, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiColorA.htm">NiColorA</a></span>& kUpperRight)</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_mesh_screen_elements_1a5715f6a7ac3754b0cec34ba9c3b6a27d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetColors(<br/><span class="NDLSystemFont">NiInt32</span> iPolygon, <br/><span class="NDLSystemFont"><a href="../NiMain/NiColorA.htm">NiColorA</a></span>& kUpperLeft, <br/><span class="NDLSystemFont"><a href="../NiMain/NiColorA.htm">NiColorA</a></span>& kLowerLeft, <br/><span class="NDLSystemFont"><a href="../NiMain/NiColorA.htm">NiColorA</a></span>& kLowerRight, <br/><span class="NDLSystemFont"><a href="../NiMain/NiColorA.htm">NiColorA</a></span>& kUpperRight) const</p>
<p class="NDLRefMemberFunction"></p>
<a name="set_and_get_the_vertex_normals"></a>
<p class="NDLRefHead1">Set and Get the Vertex Normals</p>

<p class="NDLRefMemberDescription">The {Set,Get}Normals functions that take array inputs require arrays with (at least) the same number of normals as the number of polygon vertices.</p>
<p class="NDLRefMemberDescription">The last {Set,Get}Normals pair is for axis-aligned rectangles. </p>

<a name="class_ni_mesh_screen_elements_1a63e5dac7b3f0c646b1cfd086bc7507b8"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  SetNormal(<br/><span class="NDLSystemFont">NiInt32</span> iPolygon, <br/><span class="NDLSystemFont">NiInt32</span> iVertex, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kValue)</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_mesh_screen_elements_1a73d53db5bcabc54cbe872a1cc03e502b"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetNormal(<br/><span class="NDLSystemFont">NiInt32</span> iPolygon, <br/><span class="NDLSystemFont">NiInt32</span> iVertex, <br/><span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kValue) const</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_mesh_screen_elements_1a20311bf193830f87ea6e1dfd8b61ce17"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  SetNormals(<br/><span class="NDLSystemFont">NiInt32</span> iPolygon, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>* akValue)</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_mesh_screen_elements_1affb882492d1cfffe1c7f85a6da2e3e7e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  SetNormals(<br/><span class="NDLSystemFont">NiInt32</span> iPolygon, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kCommonValue)</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_mesh_screen_elements_1a1d1a6522cef6f37d7cbaa9d07accdf13"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetNormals(<br/><span class="NDLSystemFont">NiInt32</span> iPolygon, <br/><span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>* akValue) const</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_mesh_screen_elements_1ac33a0822ad499ebbe62e7c393a36e928"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  SetNormals(<br/><span class="NDLSystemFont">NiInt32</span> iPolygon, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kUpperLeft, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kLowerLeft, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kLowerRight, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kUpperRight)</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_mesh_screen_elements_1aa42ec67a6fb00a4ade013925e297473e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetNormals(<br/><span class="NDLSystemFont">NiInt32</span> iPolygon, <br/><span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kUpperLeft, <br/><span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kLowerLeft, <br/><span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kLowerRight, <br/><span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kUpperRight) const</p>
<p class="NDLRefMemberFunction"></p>
<a name="set_and_get_vertices_and_attributes"></a>
<p class="NDLRefHead1">Set and Get Vertices and Attributes</p>

<p class="NDLRefMemberDescription">Set and get the polygon vertices.</p>
<p class="NDLRefMemberDescription">The return Boolean value indicates the success of the operation. It is false if the input polygon handle is invalid, if the input vertex index is out of range, or if the input number of texture sets is invalid.</p>
<p class="NDLRefMemberDescription">The vertices (x,y) are in normalized display coordinates (NDC); a point on the screen satisfies 0 &lt;= x &lt;= 1 and 0 &lt;= y &lt;= 1. You may use NDC values outside the unit square; for example, this is useful if you have GUI components that may be translated by the user on/off the screen. The {Set,Get}Vertices functions require arrays with (at least) the same number of vertices that the polygon has. The {Set,Get}Rectangle functions are for axis-aligned rectangles.</p>
<p class="NDLRefMemberDescription">If you have a known width w and height h, and you want to use screen coordinates (x,y) relative to w and h, you may set a vertex using SetVertex(polygon, vertex, <span class="NDLSystemFont"><a href="../NiMain/NiPoint2.htm">NiPoint2</a></span>(x/w, y/h)). The ratios x/w and y/w should be computed using floating-point arithmetic. </p>

<a name="class_ni_mesh_screen_elements_1ab2fd4c0b4eed1a6bf6b48483f09ee124"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  SetVertex(<br/><span class="NDLSystemFont">NiInt32</span> iPolygon, <br/><span class="NDLSystemFont">NiInt32</span> iVertex, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint2.htm">NiPoint2</a></span>& kValue)</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_mesh_screen_elements_1a8bb368d3319d3ddf38c5573a0fd49cba"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetVertex(<br/><span class="NDLSystemFont">NiInt32</span> iPolygon, <br/><span class="NDLSystemFont">NiInt32</span> iVertex, <br/><span class="NDLSystemFont"><a href="../NiMain/NiPoint2.htm">NiPoint2</a></span>& kValue) const</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_mesh_screen_elements_1ae100b18c8e762c5cc0d6e0f626003862"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  SetVertices(<br/><span class="NDLSystemFont">NiInt32</span> iPolygon, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint2.htm">NiPoint2</a></span>* akValue)</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_mesh_screen_elements_1a5d2ef77484112f4f0f780dda152fe06b"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetVertices(<br/><span class="NDLSystemFont">NiInt32</span> iPolygon, <br/><span class="NDLSystemFont"><a href="../NiMain/NiPoint2.htm">NiPoint2</a></span>* akValue) const</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_mesh_screen_elements_1a9b5d8477ba1cfa507cab05da6561a473"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  SetRectangle(<br/><span class="NDLSystemFont">NiInt32</span> iPolygon, <br/>float fLeft, <br/>float fTop, <br/>float fWidth, <br/>float fHeight)</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_mesh_screen_elements_1aa38c6daf0eda3e54d4d7e7cc0c6e1331"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetRectangle(<br/><span class="NDLSystemFont">NiInt32</span> iPolygon, <br/>float& fLeft, <br/>float& fTop, <br/>float& fWidth, <br/>float& fHeight) const</p>
<p class="NDLRefMemberFunction"></p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
