<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiImmediateModeAdapter</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiImmediateModeAdapter</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../NiMain/NiRefObject.htm">NiRefObject</a></span></p>


<p class="NDLRefHeaderFile">&lt;NiImmediateModeAdapter.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/class_ni_immediate_mode_adapter.gif" alt="Inheritance graph for NiImmediateModeAdapter"/>
  <p class="FigureCaption">Inheritance graph for NiImmediateModeAdapter</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">Adapter to <span class="NDLSystemFont"><a href="NiMesh.htm">NiMesh</a></span>. </p>
<p class="NDLNormal">It provides an API to submit simple geometry (vertices and colors) and draw it immediately. It is meant to have a similar API to the immediate mode of OpenGL. This class is designed to be used for rendering debug geometry, such as AI paths, collision volumes, light positions, scene cameras, etc...</p>
<p class="NDLNormal">The data for different geometry types is submitted depending on the primitive type. The unindexed and indexed appends can be used regardless of whether the geometry itself was created as indexed or unindexed. However, it is best to be consistent, if possible.</p>
<p class="NDLNormal">When making multiple calls to the indexed append methods, the indices must be local to that append call. In other words, the only vertices that can referred to by an index are ones that are given in the same append call. </p>

<a name="public_types"></a>
<p class="NDLRefHead1">Public Types</p>
<a name="class_ni_immediate_mode_adapter_1aecba4b864a0ff40e948acde92095ece1"></a>
<p class=NDLRefHead2>NiImmediateModeAdapter::NiIMError</p>


<p class="NDLRefMemberDescription">Error code. </p>


<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">NIIMERROR_OK</span></td>
    <td>No error. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">NIIMERROR_NO_RENDERER</span></td>
    <td>Renderer has not been created. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">NIIMERROR_NO_BOUND_RENDER_TARGET</span></td>
    <td>No render target is currently bound. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">NIIMERROR_REDUNDANT_BEGIN</span></td>
    <td>Begin was already called. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">NIIMERROR_ALREADY_ENDED</span></td>
    <td>End was already called. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">NIIMERROR_ILLEGAL_STATE_CHANGE</span></td>
    <td>Illegal state change between begin/end pair. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">NIIMERROR_ILLEGAL_APPEND</span></td>
    <td>Illegal append outside begin/end pair or an illegal number of primitives (i.e. appending only two verts for PRIMITIVE_TRIANGLES) </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">NIIMERROR_NO_CAMERA</span></td>
    <td>Camera not set. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">NIIMERROR_MAX_ERROR</span></td>
    <td>&nbsp;</td>
</tr>

  </tbody>
</table>
</div>


<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="class_ni_immediate_mode_adapter_1a9f0a370706cd7a54d56c8da7d283faca"></a>
<p class="NDLRefMemberFunction">NiImmediateModeAdapter(<br/>unsigned int uiInitialNumVerts = 1024, <br/>unsigned int uiInitialNumIndices = 1024)</p>
<p class="NDLRefMemberDescription">Constructor. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">uiInitialNumVerts</span></td>
    <td>The initial size of the vertex buffer. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiInitialNumIndices</span></td>
    <td>The initial size of the index buffer. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_immediate_mode_adapter_1a4f459a7a94e71be4f8aa0adc9cb45e8a"></a>
<p class="NDLRefMemberFunction">virtual ~NiImmediateModeAdapter()</p>
<p class="NDLRefMemberDescription">Virtual destructor. </p>

<a name="class_ni_immediate_mode_adapter_1ae015e0c5b52415c8240b910816df00fa"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  BeginDrawing(<br/><span class="NDLSystemFont"><a href="../NiMain/NiPrimitiveType.htm">NiPrimitiveType::Type</a></span> ePrimitiveType, <br/><span class="NDLSystemFont">bool</span> bIsIndexedPrimitive = true)</p>
<p class="NDLRefMemberDescription">Begins the submission of a geometry primitive of a given type. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">ePrimitiveType</span></td>
    <td>Type of primitive to create. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">bIsIndexedPrimitive</span></td>
    <td>Optionally specifies whether or not this primitive is indexed. Any append function (indexed or unindexed) can be used with both indexed and unindexed primitives. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Returns success. This function might fail if there is no valid renderer, the camera has not been set, or if BeginDrawing has already been called. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_immediate_mode_adapter_1a6103362d4fa9c72068846a07584e3fed"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  EndDrawing()</p>
<p class="NDLRefMemberDescription">Finish drawing this primitive. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>Returns true if successful. </td>
</tr>

        </tbody>
    </table>
</div>


<a name="functions_valid_between_begindrawing_and_enddrawing."></a>
<p class="NDLRefHead1">Functions valid between BeginDrawing and EndDrawing.</p>

<p class="NDLRefMemberDescription"></p>
<p class="NDLRefMemberDescription">All of the functions in this group can be safely called between BeginDrawing and EndDrawing. </p>

<a name="class_ni_immediate_mode_adapter_1a97f950e0a0350a74993e6b7b8f715d6e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsDrawing() const</p>
<p class="NDLRefMemberDescription">Is the adapter currently between a BeginDrawing/EndDrawing pair? </p>

<a name="class_ni_immediate_mode_adapter_1ab2c49ee6695d914b766baa958c6598c8"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsIndexed() const</p>
<p class="NDLRefMemberDescription">Is this primitive indexed? </p>

<a name="class_ni_immediate_mode_adapter_1a4ccfc2e67127d7ce82ecca3f4dd363c1"></a>
<p class="NDLRefMemberFunction">void  Append(const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>* pkVert0)</p>
<p class="NDLRefMemberDescription">Unindexed single primitive add, with default color. </p>

<a name="class_ni_immediate_mode_adapter_1afefe0a84147bd88a36f6330230d3d2e5"></a>
<p class="NDLRefMemberFunction">void  Append(<br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>* pkVert0, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>* pkVert1)</p>
<p class="NDLRefMemberDescription">Unindexed single primitive add, with default color. </p>

<a name="class_ni_immediate_mode_adapter_1a4dac74be182d67d102e2801fe8765606"></a>
<p class="NDLRefMemberFunction">void  Append(<br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>* pkVert0, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>* pkVert1, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>* pkVert2)</p>
<p class="NDLRefMemberDescription">Unindexed single primitive add, with default color. </p>

<a name="class_ni_immediate_mode_adapter_1a1709ceba27ff2ddbfbc91529eceafa6a"></a>
<p class="NDLRefMemberFunction">void  Append(<br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>* pkVert0, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>* pkVert1, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>* pkVert2, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>* pkVert3)</p>
<p class="NDLRefMemberDescription">Unindexed single primitive add, with default color. </p>

<a name="class_ni_immediate_mode_adapter_1a90c3c6fef9bb575555e46498de7da182"></a>
<p class="NDLRefMemberFunction">void  Append(<br/>unsigned int uiNumVerts, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>* pkVerts)</p>
<p class="NDLRefMemberDescription">Unindexed add multiple, with default color. </p>

<a name="class_ni_immediate_mode_adapter_1a3d414c48ed8473154da6aa835a2ff98c"></a>
<p class="NDLRefMemberFunction">void  Append(<br/>unsigned int uiNumVerts, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>* pkVerts, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiColorA.htm">NiColorA</a></span>* pkColors)</p>
<p class="NDLRefMemberDescription">Unindexed add multiple, per-vertex color. </p>

<a name="class_ni_immediate_mode_adapter_1ac942a444cbc5fea527ea5a066f74338a"></a>
<p class="NDLRefMemberFunction">void  Append(<br/>unsigned int uiNumVerts, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>* pkVerts, <br/>unsigned int uiNumIndices, <br/>const unsigned int* puiIndices)</p>
<p class="NDLRefMemberDescription">Indexed add multiple, with default color. </p>

<a name="class_ni_immediate_mode_adapter_1a65d5d4f29856f697e4742f02f2845e3e"></a>
<p class="NDLRefMemberFunction">void  Append(<br/>unsigned int uiNumVerts, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>* pkVerts, <br/>unsigned int uiNumIndices, <br/>const unsigned int* puiIndices, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiColorA.htm">NiColorA</a></span>* pkColors)</p>
<p class="NDLRefMemberDescription">Indexed add multiple, per-vertex color. </p>

<a name="class_ni_immediate_mode_adapter_1a0fef2ef39e3660878bcbab85abc0ed5f"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiImmediateModeAdapter.htm#class_ni_immediate_mode_adapter_1aecba4b864a0ff40e948acde92095ece1">NiIMError</a></span>  GetLastError() const</p>
<p class="NDLRefMemberDescription">Returns the last error state from a prior BeginDrawing or EndDrawing call. </p>

<a name="class_ni_immediate_mode_adapter_1a07603891d2dd6166e7b707422886ddd2"></a>
<p class="NDLRefMemberFunction">void  ClearLastError()</p>
<p class="NDLRefMemberDescription">Clears the last reported error. </p>

<a name="class_ni_immediate_mode_adapter_1a5f5e554c602fa0500d5293c6a5751aa8"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetZBufferCompare() const</p>
<p class="NDLRefMemberDescription">Gets the z-buffer compare value (default is enabled). </p>

<a name="class_ni_immediate_mode_adapter_1a64fde3c2ed478bc659af9f661c9fc5b2"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetZBufferWrite() const</p>
<p class="NDLRefMemberDescription">Gets the ZBufferWrite values (default is enabled). </p>

<a name="class_ni_immediate_mode_adapter_1ac9905319cff9bf59ac53b77e33e877fe"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../NiMain/NiTransform.htm">NiTransform</a></span>&  GetWorldTransform() const</p>
<p class="NDLRefMemberDescription">Gets the world transform (default is the identity). </p>

<a name="class_ni_immediate_mode_adapter_1ab36f7c3e499dc62d3f37d1224873a06b"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../NiMain/NiCamera.htm">NiCamera</a></span>*  GetCurrentCamera() const</p>
<p class="NDLRefMemberDescription">Gets the current camera. </p>

<a name="class_ni_immediate_mode_adapter_1ab9e7c77f2f3f98f8b83e92643d7a56c7"></a>
<p class="NDLRefMemberFunction">unsigned int  GetNumVerticesUsed() const</p>
<p class="NDLRefMemberDescription">Gets the number of vertices used between begin/end. </p>

<a name="class_ni_immediate_mode_adapter_1a6e14b2edb1602c98f890c5be98ea821a"></a>
<p class="NDLRefMemberFunction">unsigned int  GetNumIndicesUsed() const</p>
<p class="NDLRefMemberDescription">Gets the number of indices used between begin/end. </p>

<a name="class_ni_immediate_mode_adapter_1ac472c6278a2e7880e54ec81a9bdac0cd"></a>
<p class="NDLRefMemberFunction">unsigned int  GetVertexBufferSize() const</p>
<p class="NDLRefMemberDescription">Gets the vertex buffer size. </p>

<a name="class_ni_immediate_mode_adapter_1a6857222345355c0882e2143810fdf1a9"></a>
<p class="NDLRefMemberFunction">unsigned int  GetIndexBufferSize() const</p>
<p class="NDLRefMemberDescription">Gets the index buffer size. </p>

<a name="class_ni_immediate_mode_adapter_1a162e7281ce19fc03f8ff34c6e3889697"></a>
<p class="NDLRefMemberFunction">void  SetCurrentColor(const <span class="NDLSystemFont"><a href="../NiMain/NiColorA.htm">NiColorA</a></span>& kColor)</p>
<p class="NDLRefMemberDescription">Set the default color to be used if not specified (default is NiColorA(0,0,0,1)). </p>

<a name="class_ni_immediate_mode_adapter_1a329f281510816258fef4db3c8fd9ad94"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../NiMain/NiColorA.htm">NiColorA</a></span>&  GetCurrentColor() const</p>
<p class="NDLRefMemberDescription">Gets the current color. </p>

<a name="class_ni_immediate_mode_adapter_1acb20ae18739ef88e7028d07ab77b1403"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../NiMain/NiPrimitiveType.htm">NiPrimitiveType::Type</a></span>  GetPrimitiveType() const</p>
<p class="NDLRefMemberDescription">Gets the primitive type. </p>
<a name="other_state-related_functions"></a>
<p class="NDLRefHead1">Other state-related functions</p>

<p class="NDLRefMemberDescription"></p>
<p class="NDLRefMemberDescription">These state setting functions are only valid outside of a BeginDrawing/EndDrawing scope. They will fail silently if called illegally and will set the NIIMERROR_ILLEGAL_STATE_CHANGE error state. </p>

<a name="class_ni_immediate_mode_adapter_1af9a282f684294b68f200eebbae2f0667"></a>
<p class="NDLRefMemberFunction">void  SetNumMaxVertices(unsigned int uiMaxVerts)</p>
<p class="NDLRefMemberDescription">Set the size of the vertex buffer. </p>

<a name="class_ni_immediate_mode_adapter_1a9627562b88490b865030c5aa0e759334"></a>
<p class="NDLRefMemberFunction">void  SetNumMaxIndices(unsigned int uiMaxIndices)</p>
<p class="NDLRefMemberDescription">Set the size of the index buffer. </p>

<a name="class_ni_immediate_mode_adapter_1a1e7e22f7669cf953ac17047b4c893236"></a>
<p class="NDLRefMemberFunction">void  SetCurrentCamera(<span class="NDLSystemFont"><a href="../NiMain/NiCamera.htm">NiCamera</a></span>* pkCamera)</p>
<p class="NDLRefMemberDescription">Convenience method for setting the current camera state to a projection camera. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">One of the set camera functions must be called before drawing. </p></p>

<a name="class_ni_immediate_mode_adapter_1a1d27d4dac3bae99128643fe9395fe505"></a>
<p class="NDLRefMemberFunction">void  SetScreenSpaceCameraData(const <span class="NDLSystemFont"><a href="../NiMain/NiRect.htm">NiRect</a></span>&lt;float&gt;* pkViewPort = NULL)</p>
<p class="NDLRefMemberDescription">Convenience method for setting the current camera state to a screen space camera. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">One of the set camera functions must be called before drawing. </p></p>

<a name="class_ni_immediate_mode_adapter_1a96fc052bf0f9751788891835373dd38b"></a>
<p class="NDLRefMemberFunction">void  SetWorldTransform(const <span class="NDLSystemFont"><a href="../NiMain/NiTransform.htm">NiTransform</a></span>& kTransform)</p>
<p class="NDLRefMemberDescription">Sets the world transform. </p>

<a name="class_ni_immediate_mode_adapter_1a131cdd3121884e22321898954f0e7f35"></a>
<p class="NDLRefMemberFunction">void  SetZBufferProperty(<br/><span class="NDLSystemFont">bool</span> bCompareEnable, <br/><span class="NDLSystemFont">bool</span> bWriteEnable)</p>
<p class="NDLRefMemberDescription">Sets the ZBuffer property. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
