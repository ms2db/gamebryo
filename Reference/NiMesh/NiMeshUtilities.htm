<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiMeshUtilities</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiMeshUtilities</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../efd/efd__MemObject.htm">efd::MemObject</a></span></p>


<p class="NDLRefHeaderFile">&lt;NiMeshUtilities.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/class_ni_mesh_utilities.gif" alt="Inheritance graph for NiMeshUtilities"/>
  <p class="FigureCaption">Inheritance graph for NiMeshUtilities</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">Utility methods for operating on an <span class="NDLSystemFont"><a href="NiMesh.htm">NiMesh</a></span> or subcomponents of an <span class="NDLSystemFont"><a href="NiMesh.htm">NiMesh</a></span>. </p>

<a name="public_static_methods"></a>
<p class="NDLRefHead1">Public Static Methods</p>


<a name="class_ni_mesh_utilities_1a714a1c98fe4d300c18699d05ad64c8b3"></a>
<p class="NDLRefMemberFunction">static void  ComputeBoundsFromMesh(<br/><span class="NDLSystemFont"><a href="NiMesh.htm">NiMesh</a></span>* pkMesh, <br/>const <span class="NDLSystemFont">bool</span> bForceToolLock = false)</p>
<p class="NDLRefMemberDescription">Computes a bounding volume encompassing the specified data. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pkMesh</span></td>
    <td>The mesh to compute bounds on. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">bForceToolLock</span></td>
    <td>Forces TOOL_LOCK_READ which may potentially be slow. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_mesh_utilities_1a48e26744a50c1ad01b89d649c152ae76"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  RecalculateNormals(<br/><span class="NDLSystemFont"><a href="NiMesh.htm">NiMesh</a></span>* pkMesh, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>& kPosnSemantic, <br/>const <span class="NDLSystemFont">NiUInt16</span> uiPosnIndex, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>& kNormSemantic, <br/>const <span class="NDLSystemFont">NiUInt16</span> uiNormIndex, <br/>const <span class="NDLSystemFont">NiUInt16</span> uiSubMesh = 0, <br/>const <span class="NDLSystemFont">bool</span> bForceToolLock = false)</p>
<p class="NDLRefMemberDescription">Recompute normals for the given mesh using the triangle connectivity information. </p>
<p class="NDLRefMemberDetailedDescription">This function assumes that there is a kNormSemantic stream already on the mesh, with access CPU_READ and CPU_WRITE_MUTABLE. The function will make use of normal sharing information if available on the mesh.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pkMesh</span></td>
    <td>The mesh to compute normal sharing on. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kPosnSemantic</span></td>
    <td>The semantic to use for position information. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiPosnIndex</span></td>
    <td>The semantic index for position information </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kNormSemantic</span></td>
    <td>The semantic for the normals output. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiNormIndex</span></td>
    <td>The semantic index for normal information </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiSubMesh</span></td>
    <td>The sub-mesh for which to compute normals. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">bForceToolLock</span></td>
    <td>Forces TOOL_LOCK_READ which may potentially be slow. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_mesh_utilities_1a59b9460b8f24904475451b1aac8eae5f"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  CalculateNormals(<br/><span class="NDLSystemFont"><a href="NiMesh.htm">NiMesh</a></span>* pkMesh, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>& kPosnSemantic = NiCommonSemantics::POSITION(), <br/>const <span class="NDLSystemFont">NiUInt16</span> uiPosnIndex = 0, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>& kNormSemantic = NiCommonSemantics::NORMAL(), <br/>const <span class="NDLSystemFont">NiUInt16</span> uiNormIndex = 0, <br/>const <span class="NDLSystemFont">NiUInt8</span> uiAccessMask = NiDataStream::ACCESS_GPU_READ|NiDataStream::ACCESS_CPU_WRITE_STATIC, <br/>const <span class="NDLSystemFont">bool</span> bForceToolDSCreate = false)</p>
<p class="NDLRefMemberDescription">Compute normals for the given mesh using the triangle connectivity information. </p>
<p class="NDLRefMemberDetailedDescription">This function should only be called if there are no existing normals on the mesh. It adds a new normal stream with access set to the given mask. Normals are computed for all sub-meshes.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pkMesh</span></td>
    <td>The mesh to compute normal sharing on. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kPosnSemantic</span></td>
    <td>The semantic to use for position information. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiPosnIndex</span></td>
    <td>The semantic index for position information </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kNormSemantic</span></td>
    <td>The semantic for the normals output. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiNormIndex</span></td>
    <td>The semantic index for normal information </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiAccessMask</span></td>
    <td>The access mask to apply to the new normal stream. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">bForceToolDSCreate</span></td>
    <td>Forces the data stream created to be an <span class="NDLSystemFont"><a href="NiToolDataStream.htm">NiToolDataStream</a></span>. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_mesh_utilities_1a81493f72f8dc3e69d75379648552c755"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  RecalculateNBTs_NDL(<br/><span class="NDLSystemFont"><a href="NiMesh.htm">NiMesh</a></span>* pkMesh, <br/><span class="NDLSystemFont">NiUInt16</span> usUVSet, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>& kPosnSemantic, <br/>const <span class="NDLSystemFont">NiUInt16</span> uiPosnIndex, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>& kNormSemantic, <br/>const <span class="NDLSystemFont">NiUInt16</span> uiNormIndex, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>& kBiTangentSemantic, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>& kTangentSemantic, <br/>const <span class="NDLSystemFont">NiUInt16</span> uiSubMesh = 0, <br/>const <span class="NDLSystemFont">bool</span> bForceToolLock = false)</p>
<p class="NDLRefMemberDescription">Recompute NDL-style NBT frames for the given mesh using the triangle connectivity information. </p>
<p class="NDLRefMemberDetailedDescription">This function assumes that the required semantics already exist on the mesh, with appropriate access. If the data does not yet exist, use CalculateNBTs_NDL instead, which will create the streams and fill them. Note however that if the mesh has been cloned, CalculateNBTs_NDL will only create unshared data-streams.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pkMesh</span></td>
    <td>The mesh to recompute NBTs on. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">usUVSet</span></td>
    <td>The texture set to use. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kPosnSemantic</span></td>
    <td>The semantic to use for position information. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiPosnIndex</span></td>
    <td>The semantic index for position information </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kNormSemantic</span></td>
    <td>The semantic for normal information. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiNormIndex</span></td>
    <td>The semantic index for normal information </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kBiTangentSemantic</span></td>
    <td>The semantic to use for the bitangent stream. For example, BITANGENT_BP can be used to generate skinning streams. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kTangentSemantic</span></td>
    <td>The semantic to use for the tangent stream. For example, TANGENT_BP can be used to generate skinning streams. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiSubMesh</span></td>
    <td>The sub-mesh for which to compute NBTs. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">bForceToolLock</span></td>
    <td>Forces TOOL_LOCK_READ which may potentially be slow.</td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the operation succeeded, otherwise false. Typical reasons for failure include an inability to find or lock the necessary data streams. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_mesh_utilities_1a91d805f64951965b37417b02e06205bd"></a>
<p class="NDLRefMemberFunction">static void  FindBT(<br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kVert0, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kVert1, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kVert2, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint2.htm">NiPoint2</a></span>& kTex0, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint2.htm">NiPoint2</a></span>& kTex1, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint2.htm">NiPoint2</a></span>& kTex2, <br/><span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kBinormal, <br/><span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kTangent)</p>
<p class="NDLRefMemberDescription">Function to return the bitangent and the tangent for vertex 0 given the position and texture coordinate data of a triangle. </p>

<a name="class_ni_mesh_utilities_1a92a647e77c2dedd3b176d214698872fa"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  ValidateStream(<br/>const char* pcWhoIsValidating, <br/><span class="NDLSystemFont"><a href="NiMesh.htm">NiMesh</a></span>* pkMesh, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>& kSemantic, <br/>const <span class="NDLSystemFont">NiUInt32</span> uiSemanticIndex, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiTPrimitiveArray.htm">NiTPrimitiveArray</a></span>&lt;<span class="NDLSystemFont"><a href="NiDataStreamElement.htm#class_ni_data_stream_element_1a4a4822c6a137f25713f304012b600d20">NiDataStreamElement::Format</a></span>&gt;& kFormats, <br/><span class="NDLSystemFont">NiUInt8</span> uiRequiredAccessFlags = 0)</p>
<p class="NDLRefMemberDescription">Validates the stream specified (multi-format version). </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pcWhoIsValidating</span></td>
    <td>Context for tracing via NILOG in case of validation failure. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkMesh</span></td>
    <td>Mesh being validated. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kSemantic</span></td>
    <td>Semantic of <span class="NDLSystemFont"><a href="NiDataStreamRef.htm">NiDataStreamRef</a></span> that must exist on pkMesh. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiSemanticIndex</span></td>
    <td>Index of <span class="NDLSystemFont"><a href="NiDataStreamRef.htm">NiDataStreamRef</a></span> semantic that must exist on pkMesh. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kFormats</span></td>
    <td>List of supported formats. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiRequiredAccessFlags</span></td>
    <td>Access mask requirement (if multiple ACCESS_CPU_WRITE flags are specified, at least one must be present). </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the stream with semantic kSemantic, uiSemanticIndex exists on pkMesh and matches the specified format and access flags; false otherwise (also outputs an NILOG warning). </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_mesh_utilities_1a05b2ca599f6b8b10eda04a9be0425758"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  ValidateStream(<br/>const char* pcWhoIsValidating, <br/><span class="NDLSystemFont"><a href="NiMesh.htm">NiMesh</a></span>* pkMesh, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>& kSemantic, <br/>const <span class="NDLSystemFont">NiUInt32</span> uiSemanticIndex = 0, <br/>const <span class="NDLSystemFont"><a href="NiDataStreamElement.htm#class_ni_data_stream_element_1a4a4822c6a137f25713f304012b600d20">NiDataStreamElement::Format</a></span>& eFormat = NiDataStreamElement::F_UNKNOWN, <br/><span class="NDLSystemFont">NiUInt8</span> uiRequiredAccessFlags = 0)</p>
<p class="NDLRefMemberDescription">Validates the stream specified (single-format version). </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pcWhoIsValidating</span></td>
    <td>Context for tracing via NILOG in case of validation failure. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkMesh</span></td>
    <td>Mesh being validated. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kSemantic</span></td>
    <td>Semantic of <span class="NDLSystemFont"><a href="NiDataStreamRef.htm">NiDataStreamRef</a></span> that must exist on pkMesh. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiSemanticIndex</span></td>
    <td>Index of <span class="NDLSystemFont"><a href="NiDataStreamRef.htm">NiDataStreamRef</a></span> semantic that must exist on pkMesh. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">eFormat</span></td>
    <td>Format requirement (ignored if <span class="NDLSystemFont">NiDataStreamElement::F_UNKNOWN</span>). </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiRequiredAccessFlags</span></td>
    <td>Access mask requirement (if multiple ACCESS_CPU_WRITE flags are specified, at least one must be present). </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the stream with semantic kSemantic, uiSemanticIndex exists on pkMesh and matches the specified format and access flags. False otherwise (also outputs an NILOG warning). </td>
</tr>

        </tbody>
    </table>
</div>


 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
