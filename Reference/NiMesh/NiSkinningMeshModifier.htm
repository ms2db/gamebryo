<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiSkinningMeshModifier</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiSkinningMeshModifier</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="NiMeshModifier.htm">NiMeshModifier</a></span></p>


<p class="NDLRefHeaderFile">&lt;NiSkinningMeshModifier.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/class_ni_skinning_mesh_modifier.gif" alt="Inheritance graph for NiSkinningMeshModifier"/>
  <p class="FigureCaption">Inheritance graph for NiSkinningMeshModifier</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">This mesh modifier provides the functionality needed for both software (CPU/SPU) skinning and hardware (GPU) skinning. </p>
<p class="NDLNormal">This mesh modifier uses two kernels for skinning: CalculateBoneMatrices and Deform. CalculateBoneMatrices gathers the transforms for bones defined by other NiAVObjects in the scene graph, determines the delta transform from the pose the mesh was bound to, and then transforms the results by the current mesh transform. The output matrices from this process are then either fed to the GPU as shader constants in the hardware case or used as arguments to the Deform kernel in the software case. Deform will take the mesh vertices and the computed bone transforms and will "skin" the mesh. Deform is only invoked in the software skinning case.</p>
<p class="NDLNormal">
<p class="NDLNormal">Since shader constants are limited on GPU hardware, the number of bones influencing a mesh in a given draw call is also limited. Please use the methods in <span class="NDLSystemFont"><a href="../NiMeshTools/NiMeshTools.htm">NiMeshTools</a></span> to break the mesh into sub-meshes that are more GPU-friendly.</p>For an overview of skinning, please see the "Programming Skinnned Objects" section in "General Topics" of the "Programmer's Guide". </p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="class_ni_skinning_mesh_modifier_1aa9416b4130978708a166948c1681a842"></a>
<p class="NDLRefMemberFunction">NiSkinningMeshModifier(<span class="NDLSystemFont">NiUInt32</span> uiBoneCount)</p>
<p class="NDLRefMemberDetailedDescription">Constructs a new <span class="NDLSystemFont">NiSkinningMeshModifier</span> for the given number of bones </p>

<a name="class_ni_skinning_mesh_modifier_1a8fbcf635c9912a1c868d48e837d644ef"></a>
<p class="NDLRefMemberFunction">virtual ~NiSkinningMeshModifier()</p>
<p class="NDLRefMemberDescription">Destructor. </p>

<a name="class_ni_skinning_mesh_modifier_1a3b17e652cccd95dae4af18b40dcfbe81"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt32</span>  GetBoneCount() const</p>
<p class="NDLRefMemberDescription">Returns the number of bones influencing the mesh. </p>

<a name="class_ni_skinning_mesh_modifier_1a726eeec56ce7c8a08e08cf25329831dc"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetSoftwareSkinned() const</p>
<p class="NDLRefMemberDescription">Gets skinning mode (hardware / software). </p>

<a name="class_ni_skinning_mesh_modifier_1a6a2d8b5db48de0ebef327c95bbbfed35"></a>
<p class="NDLRefMemberFunction">void  SetSoftwareSkinned(<span class="NDLSystemFont">bool</span> bUseSoftwareSkinning)</p>
<p class="NDLRefMemberDescription">Sets the skinning mode (hardware / software). </p>
<p class="NDLRefMemberDetailedDescription"></p>
<p class="NDLRefMemberDetailedDescription">If modified after <span class="NDLSystemFont"><a href="NiSkinningMeshModifier.htm#class_ni_skinning_mesh_modifier_1ae8aa81ae9d190702a78e10dbfc740664">Attach()</a></span> has been called, the mesh modifier will need to be reset. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">bUseSoftwareSkinning</span></td>
    <td>Indicates if software skinning should be used. Pass true to use software (CPU/SPU) skinning; false to use GPU skinning.</td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_skinning_mesh_modifier_1a09bb728f7cc13ab520436af0da5dbb38"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../NiMain/NiBound.htm">NiBound</a></span>*  GetBoneBounds() const</p>
<p class="NDLRefMemberDescription">Gets the world-space bounds for each bone. </p>
<p class="NDLRefMemberDetailedDescription">This method returns NULL if model bound is static. </p>

<a name="class_ni_skinning_mesh_modifier_1aa54b34266d2986e0350009a6a00ccf67"></a>
<p class="NDLRefMemberFunction">void  EnableDynamicBounds()</p>
<p class="NDLRefMemberDescription">Enable dynamic bounds updating (does not immediately initialize bone bounds). </p>

<a name="class_ni_skinning_mesh_modifier_1a80ad398b437c4268a9079f6b6ac0b643"></a>
<p class="NDLRefMemberFunction">void  DisableDynamicBounds()</p>
<p class="NDLRefMemberDescription">Disable dynamic bounds updating (does not immediately initialize bone bounds). </p>

<a name="class_ni_skinning_mesh_modifier_1a1026c68966a811d498035d9ed7b26be7"></a>
<p class="NDLRefMemberFunction">void  SetRootBoneParent(<span class="NDLSystemFont"><a href="../NiMain/NiAVObject.htm">NiAVObject</a></span>* pkRootBone)</p>
<p class="NDLRefMemberDescription">Set the root bone parent node. </p>

<a name="class_ni_skinning_mesh_modifier_1a505bd36a3c4a94aed0f0ad96d9b839ee"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../NiMain/NiAVObject.htm">NiAVObject</a></span>*  GetRootBoneParent() const</p>
<p class="NDLRefMemberDescription">Gets the root bone parent node. </p>

<a name="class_ni_skinning_mesh_modifier_1a9d5886d710238aba6776e9d304858e67"></a>
<p class="NDLRefMemberFunction">void  SetRootBoneParentToSkinTransform(const <span class="NDLSystemFont"><a href="../NiMain/NiTransform.htm">NiTransform</a></span>& pkRoot)</p>
<p class="NDLRefMemberDescription">Sets the root bone parent to skin transform. </p>

<a name="class_ni_skinning_mesh_modifier_1a1357ba4e7a9eaa25d482e4fa78dcfc3d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../NiMain/NiTransform.htm">NiTransform</a></span>&  GetRootBoneParentToSkinTransform()</p>
<p class="NDLRefMemberDescription">Gets the root bone parent to skin transform. </p>

<a name="class_ni_skinning_mesh_modifier_1a6e494a72956b839fe0f802748a9ddee7"></a>
<p class="NDLRefMemberFunction">void  GetWorldToSkinTransform(<span class="NDLSystemFont"><a href="../NiMain/NiTransform.htm">NiTransform</a></span>& kWorldToSkin) const</p>
<p class="NDLRefMemberDescription">Gets the world to skin transform. </p>

<a name="class_ni_skinning_mesh_modifier_1ac2e162dea09d0ce7e74925630b1b3da9"></a>
<p class="NDLRefMemberFunction">void  GetRootBones(<span class="NDLSystemFont">NiTPointerList</span>&lt;<span class="NDLSystemFont"><a href="../NiMain/NiAVObject.htm">NiAVObject</a></span>*&gt;& kRootBones) const</p>
<p class="NDLRefMemberDescription">Gets the root bones. </p>

<a name="class_ni_skinning_mesh_modifier_1ad36f967cfb44f112b31f6512ae0825bc"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../NiMain/NiAVObject.htm">NiAVObject</a></span> **  GetBones() const</p>
<p class="NDLRefMemberDescription">Gets the set of bones. </p>

<a name="class_ni_skinning_mesh_modifier_1ab3e5feb2ed3c89b2f74abe0023a8f055"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../NiMain/NiTransform.htm">NiTransform</a></span>*  GetSkinToBoneTransforms() const</p>
<p class="NDLRefMemberDescription">Gets the set of skin to bone transforms. </p>

<a name="class_ni_skinning_mesh_modifier_1adf3d7ec53acf94e61d5e7e50a40ce502"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiMatrix3x4.htm">NiMatrix3x4</a></span>*  GetBoneMatrices() const</p>
<p class="NDLRefMemberDescription">Gets the bone matrices (returns NULL if called before <span class="NDLSystemFont"><a href="NiSkinningMeshModifier.htm#class_ni_skinning_mesh_modifier_1ae8aa81ae9d190702a78e10dbfc740664">Attach()</a></span>). </p>

<a name="class_ni_skinning_mesh_modifier_1a89f091248942848ff2783622c3f2704e"></a>
<p class="NDLRefMemberFunction">void  DeformVertex(<br/><span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kVertex, <br/><span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& kNormal, <br/><span class="NDLSystemFont"><a href="NiMesh.htm">NiMesh</a></span>* pkMesh, <br/><span class="NDLSystemFont">NiUInt32</span> uiWhichSubmesh, <br/><span class="NDLSystemFont">NiUInt32</span> uiWhichVertex)</p>
<p class="NDLRefMemberDescription">Deforms a single vertex. </p>
<p class="NDLRefMemberDetailedDescription">This method is useful when needing to skin a small set of vertices in a frame. It requires that the BLENDWEIGHTS, BLENDINDICES, BONES, POSITION, and NORMAL data streams are able to be locked for CPU_READ access.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kVertex</span></td>
    <td>The final skinned position in world space. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kNormal</span></td>
    <td>The final skinned normal in world space. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkMesh</span></td>
    <td>The mesh containing the skinned data streams and also has this modifier attached. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiWhichSubmesh</span></td>
    <td>The sub-mesh to use when skinning. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">uiWhichVertex</span></td>
    <td>The index of the vertex to skin within the specified submesh. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_skinning_mesh_modifier_1aac74a1416ca462788bcc75a1b2fd7eca"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  AreRequirementsMet(<br/><span class="NDLSystemFont"><a href="NiMesh.htm">NiMesh</a></span>* pkMesh, <br/>NiSystemDesc::RendererID ePlatform) const</p>
<p class="NDLRefMemberDescription">This method checks, after finalization, if the mesh is suitable for skinning. </p>
<p class="NDLRefMemberDetailedDescription">If it returns false, the modifier may be removed from the mesh. </p>

<a name="class_ni_skinning_mesh_modifier_1a70b2bdac1e3c9dd8477d5a0620da896f"></a>
<p class="NDLRefMemberFunction">virtual void  RetrieveRequirements(<span class="NDLSystemFont"><a href="NiMeshRequirements.htm">NiMeshRequirements</a></span>& kRequirements) const</p>
<p class="NDLRefMemberDescription">This method is called during the mesh data stream packing process. </p>
<p class="NDLRefMemberDetailedDescription">The requirements are used as a guide only - the packer is not guaranteed to achieve them. </p>

<a name="class_ni_skinning_mesh_modifier_1a43058207ffca94957842512f5fd1c018"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  IsComplete(<br/><span class="NDLSystemFont"><a href="NiMesh.htm">NiMesh</a></span>* pkMesh, <br/><span class="NDLSystemFont"><a href="../NiMain/NiSyncArgs.htm">NiSyncArgs</a></span>* pkArgs)</p>
<p class="NDLRefMemberDescription">Returns true if the mesh modifier has completed all required work for the provided sync points. </p>

<a name="class_ni_skinning_mesh_modifier_1a5985acb9b32b44807429f7284ff4419b"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  RequiresMaterialOption(<br/>const <span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>& kMaterialOption, <br/><span class="NDLSystemFont">bool</span>& bResult) const</p>
<p class="NDLRefMemberDescription">Determine if the modifier supports a specific material option. </p>
<p class="NDLRefMemberDetailedDescription">Returns true only if the option is <span class="NDLSystemFont"><a href="../NiMain/NiRenderObjectMaterialOption.htm">NiRenderObjectMaterialOption::TRANSFORM_SKINNED()</a></span>. If the option matches, bResult is set to indicate whether material should perform the skinning deformation. If hardware skinning is enabled, bResult is set to true; if software skinning is enabled, bResult is set to false. </p>
<a name="functions_for_updating_and_managing_parallel_tasks."></a>
<p class="NDLRefHead1">Functions for updating and managing parallel tasks.</p>


<a name="class_ni_skinning_mesh_modifier_1ae8aa81ae9d190702a78e10dbfc740664"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  Attach(<span class="NDLSystemFont"><a href="NiMesh.htm">NiMesh</a></span>* pkMesh)</p>
<p class="NDLRefMemberDescription">Creates Floodgate tasks required for skinning (exactly which tasks depend on CPU vs GPU skinning). </p>
<p class="NDLRefMemberDetailedDescription">Streams from the mesh are used as the source of Floodgate streams. </p>

<a name="class_ni_skinning_mesh_modifier_1af870c6f6c187961a12c04c1b16fe3a85"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  Detach(<span class="NDLSystemFont"><a href="NiMesh.htm">NiMesh</a></span>* pkMesh)</p>
<p class="NDLRefMemberDescription">Removes all Floodgate tasks and references to streams on the mesh. </p>

<a name="class_ni_skinning_mesh_modifier_1ad928002e5eeb245dbc23cf09003c8f00"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  SubmitTasks(<br/><span class="NDLSystemFont"><a href="NiMesh.htm">NiMesh</a></span>* pkMesh, <br/><span class="NDLSystemFont"><a href="../NiMain/NiSyncArgs.htm">NiSyncArgs</a></span>* pkArgs, <br/><span class="NDLSystemFont"><a href="../NiFloodgate/NiSPWorkflowManager.htm">NiSPWorkflowManager</a></span>* pkWFManager)</p>
<p class="NDLRefMemberDescription">Adds Floodgate tasks to support skinning. </p>
<p class="NDLRefMemberDetailedDescription">A task to update bone matrices is always added, while CPU skinning also adds a task to perform the skinning. </p>

<a name="class_ni_skinning_mesh_modifier_1aa957411f13e716cf48433b53d01dc607"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  CompleteTasks(<br/><span class="NDLSystemFont"><a href="NiMesh.htm">NiMesh</a></span>* pkMesh, <br/><span class="NDLSystemFont"><a href="../NiMain/NiSyncArgs.htm">NiSyncArgs</a></span>* pkArgs)</p>
<p class="NDLRefMemberDescription">Forces completion of outstanding Floodgate tasks that match the requested sync points. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
