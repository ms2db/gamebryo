<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>egmVisualizers::PropertyVisualizationHelpers</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">egmVisualizers::PropertyVisualizationHelpers</p>


<p class="NDLRefHeaderFile">&lt;PropertyVisualizationHelpers.h&gt;</p>


<p class="NDLRefHead1">Description</p>
<p class="NDLNormal"><span class="NDLSystemFont">PropertyVisualizationHelpers</span> contains a set of static methods intended to be used by the property visualizers to do their task. </p>
<p class="NDLNormal">There are utility functions to create geometry and get property values that a visualizer depends on. </p>

<a name="public_static_methods"></a>
<p class="NDLRefHead1">Public Static Methods</p>


<a name="classegm_visualizers_1_1_property_visualization_helpers_1ae7c92500211abc13f7267faf32e657a1"></a>
<p class="NDLRefMemberFunction">static void  CreateCircle(<br/><span class="NDLSystemFont"><a href="../NiMesh/NiMesh.htm">NiMesh</a></span>* pMesh, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> radius, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span> numSlices)</p>
<p class="NDLRefMemberDescription">Creates a non-filled circle with Z=0. </p>
<p class="NDLRefMemberDetailedDescription">If there are no streams, they will be created. Otherwise, the existing streams will be modified, so it's important that subsequent calls to CreateCircle on the same mesh have the same numSlices (which will result in the same amount of vertices being created).</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMesh</span></td>
    <td>Mesh to put the circle data on. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">radius</span></td>
    <td>Radius of the circle to create. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">numSlices</span></td>
    <td>Number of slices around the radius. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegm_visualizers_1_1_property_visualization_helpers_1a8fbf56df2af9dc6a39320e9aae443cf0"></a>
<p class="NDLRefMemberFunction">static void  CreateWireSphere(<br/><span class="NDLSystemFont"><a href="../NiMesh/NiMesh.htm">NiMesh</a></span>* pMesh, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> radius, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span> numSlices, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span> numStacks)</p>
<p class="NDLRefMemberDescription">Creates a wireframe sphere. </p>
<p class="NDLRefMemberDetailedDescription">If there are no streams, they will be created. Otherwise, the existing streams will be modified, so it's important that subsequent calls to CreateWireSphere on the same mesh have the same numSlices and numStacks (which will result in the same amount of vertices being created).</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMesh</span></td>
    <td>Mesh to put the sphere data on. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">radius</span></td>
    <td>Radius of the sphere to create. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">numSlices</span></td>
    <td>Number of slices around the radius. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">numStacks</span></td>
    <td>Number of stacks along the main axis. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegm_visualizers_1_1_property_visualization_helpers_1abf1c4dc619285a052f102d3c7cc368e6"></a>
<p class="NDLRefMemberFunction">static void  CreateWireCube(<br/><span class="NDLSystemFont"><a href="../NiMesh/NiMesh.htm">NiMesh</a></span>* pMesh, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> width, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> length, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> height)</p>
<p class="NDLRefMemberDescription">Creates a wireframe "cube" (rectangular parallelpiped. </p>
<p class="NDLRefMemberDetailedDescription">) If there are no streams, they will be created. Otherwise, the existing streams will be modified.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMesh</span></td>
    <td>Mesh to put the cube data on. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">width</span></td>
    <td>Width of the cube side (X dimension). </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">length</span></td>
    <td>Length of the cube side (Y dimension). </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">height</span></td>
    <td>Height of the cube side (Z dimension). </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegm_visualizers_1_1_property_visualization_helpers_1a6e0be8692c061fcb012ad9ed9139144c"></a>
<p class="NDLRefMemberFunction">static void  CreateSolidCube(<br/><span class="NDLSystemFont"><a href="../NiMesh/NiMesh.htm">NiMesh</a></span>* pMesh, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> width, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> length, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> height)</p>
<p class="NDLRefMemberDescription">Creates a solid triangle list "cube" If there are no streams, they will be created. </p>
<p class="NDLRefMemberDetailedDescription">Otherwise, the existing streams will be modified.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMesh</span></td>
    <td>Mesh to put the cube data on. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">width</span></td>
    <td>Width of the cube side (X dimension). </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">length</span></td>
    <td>Length of the cube side (Y dimension). </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">height</span></td>
    <td>Height of the cube side (Z dimension). </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegm_visualizers_1_1_property_visualization_helpers_1a2ae5dc423123f473040c0614b123669c"></a>
<p class="NDLRefMemberFunction">static void  CreateFrustum(<br/><span class="NDLSystemFont"><a href="../NiMesh/NiMesh.htm">NiMesh</a></span>* pMesh, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> fov, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> near, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> far, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> aspect)</p>
<p class="NDLRefMemberDescription">Creates a wireframe representation of a view frustum. </p>
<p class="NDLRefMemberDetailedDescription">If there are no streams, they will be created. Otherwise, the existing streams will be modified.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMesh</span></td>
    <td>Mesh to put the frustum data on. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fov</span></td>
    <td>Field of view. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">near</span></td>
    <td>Near plane. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">far</span></td>
    <td>Far plane. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">aspect</span></td>
    <td>Aspect ratio. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegm_visualizers_1_1_property_visualization_helpers_1add9547e321f31dccd44647232eebb055"></a>
<p class="NDLRefMemberFunction">static void  CreateAsterisk(<span class="NDLSystemFont"><a href="../NiMesh/NiMesh.htm">NiMesh</a></span>* pMesh)</p>
<p class="NDLRefMemberDescription">Creates a wireframe representation of an asterisk. </p>
<p class="NDLRefMemberDetailedDescription">If there are no streams, they will be created. Otherwise, the existing streams will be modified.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMesh</span></td>
    <td>Mesh to put the asterisk data on. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegm_visualizers_1_1_property_visualization_helpers_1aebc774b283bf3b0268b8e10adf5c3668"></a>
<p class="NDLRefMemberFunction">static void  CreateLine(<br/><span class="NDLSystemFont"><a href="../NiMesh/NiMesh.htm">NiMesh</a></span>* pMesh, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& point1, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& point2)</p>
<p class="NDLRefMemberDescription">Creates a line between two points. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMesh</span></td>
    <td>Mesh to put the line data on. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">point1</span></td>
    <td>the start point of the line. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">point2</span></td>
    <td>the end point of the line. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegm_visualizers_1_1_property_visualization_helpers_1ad5c502f2b0d057b04e7469f07ce29a13"></a>
<p class="NDLRefMemberFunction">static void  CreateSpline(<br/><span class="NDLSystemFont"><a href="../NiMesh/NiMesh.htm">NiMesh</a></span>* pMesh, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& point1, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& point2)</p>
<p class="NDLRefMemberDescription">Creates a spline between two points. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMesh</span></td>
    <td>Mesh to put the line data on. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">point1</span></td>
    <td>the start point of the line. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">point2</span></td>
    <td>the end point of the line. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegm_visualizers_1_1_property_visualization_helpers_1ad4fd9ed2312698143abbbb18088221b0"></a>
<p class="NDLRefMemberFunction">static void  CreateThickLine(<br/><span class="NDLSystemFont"><a href="../NiMesh/NiMesh.htm">NiMesh</a></span>* pMesh, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& point1, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& point2, <br/>float thickness)</p>
<p class="NDLRefMemberDescription">Creates a 'line' which is really a 3D box extending between two points. </p>
<p class="NDLRefMemberDetailedDescription">If there are no streams, they will be created. Otherwise, the existing streams will be modified.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMesh</span></td>
    <td>Mesh to put the box data on. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">point1</span></td>
    <td>the start point of the line. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">point2</span></td>
    <td>the target point of the line. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">thickness</span></td>
    <td>the thickness (in world units, not pixels) of the line. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegm_visualizers_1_1_property_visualization_helpers_1addb6001381aa933668be8806a5ca1e5f"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont"><a href="../NiMain/NiMaterialProperty.htm">NiMaterialProperty</a></span>*  AttachDefaultMaterial(<span class="NDLSystemFont"><a href="../NiMesh/NiMesh.htm">NiMesh</a></span>* pMesh)</p>
<p class="NDLRefMemberDescription">Attaches a material property with default settings to the mesh. </p>

<a name="classegm_visualizers_1_1_property_visualization_helpers_1abf733ad18f90d394a0ed92f31e00175b"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont"><a href="../ecr/ecr__SceneGraphService.htm#classecr_1_1_scene_graph_service_1a15b7b654f5037dc58de733d1aeb6f97d">ecr::SceneGraphService::SceneGraphHandle</a></span>  AddMeshToSceneGraphService(<br/><span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">NiMeshPtr</a></span> spMesh, <br/><span class="NDLSystemFont"><a href="../ecr/ecr__SceneGraphService.htm">ecr::SceneGraphService</a></span>* pSceneGraphService)</p>
<p class="NDLRefMemberDescription">Adds a single mesh to the scene graph service. </p>
<p class="NDLRefMemberDetailedDescription">This is simply an ease-of-use function.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">spMesh</span></td>
    <td>Mesh to add. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pSceneGraphService</span></td>
    <td>Scene graph service to add the mesh to. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegm_visualizers_1_1_property_visualization_helpers_1a8f262af4aaf04bcbc8484df08f38ee2a"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">egf::PropertyResult</a></span>  GetPropertyAsFloat(<br/><span class="NDLSystemFont"><a href="../egf/egf__Entity.htm">egf::Entity</a></span>* pEntity, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& propertyName, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>& value)</p>
<p class="NDLRefMemberDescription">Gets an numeric property as a float. </p>
<p class="NDLRefMemberDetailedDescription">There may be some conversion involved, and thus there may be a loss in precision.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pEntity</span></td>
    <td>Entity to retrieve the property value from. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">propertyName</span></td>
    <td>Name of the property to retrieve. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">value</span></td>
    <td>Returned value of the property. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Status of the conversion operation. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegm_visualizers_1_1_property_visualization_helpers_1aa272e368fa456b3e027c4a82ec4e4983"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">egf::PropertyResult</a></span>  GetPropertyAsString(<br/><span class="NDLSystemFont"><a href="../egf/egf__Entity.htm">egf::Entity</a></span>* pEntity, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& propertyName, <br/><span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& value)</p>
<p class="NDLRefMemberDescription">Gets a scalar property as a string. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pEntity</span></td>
    <td>Entity to retrieve the property from. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">propertyName</span></td>
    <td>Name of the property to retrieve. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">value</span></td>
    <td>The string representation of the property. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Status of the conversion operation. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegm_visualizers_1_1_property_visualization_helpers_1a950af9a77ba9edffc974249d9b3f2643"></a>
<p class="NDLRefMemberFunction">template &lt;class T  &gt; static <span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">egf::PropertyResult</a></span>  GetDependency(<br/><span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">egf::ExtraDataPtr</a></span> spExtraData, <br/><span class="NDLSystemFont"><a href="../egf/egf__Entity.htm">egf::Entity</a></span>* pEntity, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& dependency, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& defaultProperty, <br/>T& value)</p>
<p class="NDLRefMemberDescription">Gets a visualizer dependency from an entity, looking at a default if necessary. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">spExtraData</span></td>
    <td>Extra data that contains the visualizer definition. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pEntity</span></td>
    <td>Entity to retrieve the dependency from. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">dependency</span></td>
    <td>The type of the dependency to retrieve. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">defaultProperty</span></td>
    <td>The default property name if no dependency is specified. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">value</span></td>
    <td>The property value. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Status of the conversion operation. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegm_visualizers_1_1_property_visualization_helpers_1a2979d4a15ea6fea3ef2407b230eda779"></a>
<p class="NDLRefMemberFunction">template &lt;class T  &gt; static <span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">egf::PropertyResult</a></span>  GetAssocArrayDependency(<br/><span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">egf::ExtraDataPtr</a></span> spExtraData, <br/><span class="NDLSystemFont"><a href="../egf/egf__Entity.htm">egf::Entity</a></span>* pEntity, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& dependency, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& defaultProperty, <br/><span class="NDLSystemFont"><a href="../efd/efd__map.htm">efd::map</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>, T&gt;& o_values)</p>
<p class="NDLRefMemberDescription">Gets an associative array dependency from an entity, looking at a default if necessary. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">spExtraData</span></td>
    <td>Extra data that contains the visualizer definition. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pEntity</span></td>
    <td>Entity to retrieve the dependency from. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">dependency</span></td>
    <td>The type of the dependency to retrieve. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">defaultProperty</span></td>
    <td>The default property name if no dependency is specified. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">o_values</span></td>
    <td>The property keys/value. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Status of the conversion operation. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegm_visualizers_1_1_property_visualization_helpers_1a9b131d587b1d71d268b92033be06bd98"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">egf::PropertyResult</a></span>  GetDependency(<br/><span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">egf::ExtraDataPtr</a></span> spExtraData, <br/><span class="NDLSystemFont"><a href="../egf/egf__Entity.htm">egf::Entity</a></span>* pEntity, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& dependency, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& defaultProperty, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>& value)</p>
<p class="NDLRefMemberDescription">Gets a visualizer dependency from an entity, looking at a default if necessary. </p>
<p class="NDLRefMemberDetailedDescription">This is a specialization of a templated-version of this function which works with floats.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">spExtraData</span></td>
    <td>Extra data that contains the visualizer definition. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pEntity</span></td>
    <td>Entity to retrieve the dependency from. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">dependency</span></td>
    <td>The type of the dependency to retrieve. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">defaultProperty</span></td>
    <td>The default property name if no dependency is specified. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">value</span></td>
    <td>The property value. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Status of the conversion operation. </td>
</tr>

        </tbody>
    </table>
</div>


 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
