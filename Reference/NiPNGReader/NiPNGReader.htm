<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiPNGReader</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type=
"text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiPNGReader</p>

<p class="NDLRefParentage">: public <span><a href=
"../NiMain/NiImageReader.htm">NiImageReader</a></span></p>

<p class="NDLRefHeaderFile">&lt;NiPNGReader.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>The <span class="NDLSystemFont">NiPNGReader</span> is a subclass of the
abstract <span class="NDLSystemFont">NiImageReader</span> class. It implements
a subset of the image reading requirements for the PNG format. Most
applications will not use this class, and therefore it is not by default
included in the <span class="NDLSystemFont">NiDevImageConverter</span> class.
Unless the application explicitly links in the NiPNGReader library and adds the
reader, <span class="NDLSystemFont">NiDevImageConverter</span> will not have
the capability of loading PNGs. <span class="NDLSystemFont">NiPNGReader</span>
is used by the Gamebryo 3ds max Plug-in as a workaround for not being able to
get the alpha from palettized PNG files through the 3ds max SDK.</p>

<p>One final note is that the <span class="NDLSystemFont">NiPNGReader</span> is
dependent on the <span class="NDLSystemFont">libpng</span> and <span class=
"NDLSystemFont">zlib</span> open source libraries. Because of possible cross
platform compatibility issues with these libraries, <span class=
"NDLSystemFont">NiPNGReader</span> is not intended for end user
applications.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiPNGReader()</p>

<p class="NDLRefMemberDescription">Default (and sole) constructor. Creates the
internal data structures required for loading PNG image files.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">virtual bool CanReadFile(const char*
pcFileExtension) const</p>

<p class="NDLRefMemberDescription">Returns true if the given extension is
<span class="NDLSystemFont">.png</span>, and false otherwise. The base class
interface uses this virtual function to determine whether a generic image
loader can load a given file.</p>

<p class="NDLRefMemberFunction">virtual NiPixelData* ReadFile(NiFile&amp; kIst,
NiPixelData* pkOptDest)</p>

<p class="NDLRefMemberDescription">Reads the given file (assuming that it is a
valid PNG image file) and returns the data from the file as a flat <span class=
"NDLSystemFont">NiPixelData</span> object. The output pixel format may be:</p>

<div class="indent1">
    <ul>
        <li><span class="NDLSystemFont">NiPixelFormat::PALA4,</span></li>

        <li><span class="NDLSystemFont">NiPixelFormat::PALA8,</span> or</li>

        <li><span class="NDLSystemFont">NiPixelFormat::RGBA32</span> (4, 8, 16,
        24, or 32-bit PNG files).</li>
    </ul>
</div>

<p class="NDLRefMemberDescription">The function returns NULL if the PNG file
appears to be of the wrong format. The calling function should not rely on the
position of the file pointer following a call to this function.</p>

<p class="NDLRefMemberFunction">virtual bool ReadHeader(NiFile&amp; kIst,
unsigned int&amp; uiWidth, unsigned int&amp; uiHeight, NiPixelFormat&amp;
kFormat, bool&amp; bMipmap, unsigned int&amp; uiFaces)</p>

<p class="NDLRefMemberDescription">Returns <span class=
"NDLSystemFont">true</span> if the file appears to be a valid and readable by
the reader object and <span class="NDLSystemFont">false</span> otherwise. If
the function returns true, the <span class="NDLSystemFont">uiWidth</span>,
<span class="NDLSystemFont">uiHeight</span>, <span class=
"NDLSystemFont">kFormat</span>, and <span class="NDLSystemFont">bMipmap</span>
parameters will contain the width of the image file, the height of the image
file, the destination pixel format, and whether or not the file contains mipmap
data, respectively. The output pixel format will be <span class=
"NDLSystemFont">NiPixelFormat::PALA4, PixelFormat::PALA8,</span> or
<span class="NDLSystemFont">NiPixelFormat::RGBA32</span>. The mipmap flag will
be false. The face count will be one. The calling function should not rely on
the position of the file pointer following a call to this function.</p>

<p class="NDLRefMemberFunction">NiPixelData* ReadBody(NiFile &amp;kIst,
NiPixelData* pkOptDest)</p>

<p class="NDLRefMemberDescription">Returns the final <span class=
"NDLSystemFont">NiPixelFormat</span> for the image. This function handles all
the calls to the <span class="NDLSystemFont">libpng</span> sdk for correctly
reading the <span class="NDLSystemFont">.png</span> file<span class=
"NDLSystemFont">.</span> The function returns <span class=
"NDLSystemFont">false</span> on failure.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
