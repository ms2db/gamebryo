<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiSample</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->

<!--(Begin Links)===================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiSample</p>

<p class="NDLRefParentage">: public <a href=
"../../Reference/NiApplication/NiApplication.htm">NiApplication</a></p>

<p class="NDLRefHeaderFile">&lt;NiSample.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>This class provides consistent functionality among all our
samples. It allows the user to add a consistent UI system, camera
navigation controls, and setup the shader system. This class is
intended for Emergent use only.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiSample(const char*
pcWindowCaption, unsigned int uiWidth = DEFAULT_WIDTH, unsigned
int uiHeight = DEFAULT_HEIGHT, bool bUseFrameSystem = false,
unsigned int uiMenuID = 0, unsigned int uiNumStatusPanes = 0,
unsigned int uiBitDepth = 0)</p>

<p class="NDLRefMemberDescription">This constructor supplies all
of its arguments to <span class=
"NDLSystemFont">NiApplication</span> and initializes the
<span class="NDLSystemFont">NiSample</span> <a href=
"Signals_And_Slots.htm">slots</a>.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">virtual bool Initialize()</p>

<p class="NDLRefMemberDescription">Calls the creation methods in
the following order: <span class=
"NDLSystemFont">CreateCamera</span>, <span class=
"NDLSystemFont">CreateRenderer</span>, <span class=
"NDLSystemFont">CreateShaderSystem</span>, <span class=
"NDLSystemFont">CreateInputSystem</span>, <span class=
"NDLSystemFont">CreateCursor</span>, <span class=
"NDLSystemFont">CreateScene</span>, <span class=
"NDLSystemFont">CreateFrame</span> (only if using the frame
rendering system), <span class=
"NDLSystemFont">CreateUISystem</span>, <span class=
"NDLSystemFont">CreateNavigationControllers</span>, <span class=
"NDLSystemFont">CreateUIElements</span>, <span class=
"NDLSystemFont">CompleteUISystem</span>, and <span class=
"NDLSystemFont">CreateVisualTrackers</span>..</p>

<p class="NDLRefMemberFunction">virtual bool
CreateInputSystem()</p>

<p class="NDLRefMemberDescription">In Win32 builds, sets the
global message box function. In all builds, calls the base
<span class="NDLSystemFont"><a href=
"../../Reference/NiApplication/NiApplication.htm">NiApplication</a>::CreateInputSystem</span>
function.</p>

<p class="NDLRefMemberFunction">virtual bool CreateCursor()</p>

<p class="NDLRefMemberDescription">In Win32 builds, this method
creates an <span class=
"NDLSystemFont"><a href="../NiCursor/NiCursor_Overview.htm">NiCursor</a></span> object. In all other builds,
this method does nothing.</p>

<p class="NDLRefMemberFunction">virtual bool CreateUISystem()</p>

<p class="NDLRefMemberDescription">This method initializes the
<span class="NDLSystemFont"><a href=
"../../Reference/NiUserInterface/NiUIManager.htm">NiUIManager</a></span>
and <span class="NDLSystemFont"><a href=
"../../Reference/NiUserInterface/NiNavManager.htm">NiNavManager</a></span>
as well as binding the default gamepad and keyboard buttons to
hiding the UI windows.</p>

<p class="NDLRefMemberFunction">virtual bool
CreateNavigationControllers()</p>

<p class="NDLRefMemberDescription">This method creates the
default <span class="NDLSystemFont"><a href=
"../../Reference/NiUserInterface/NiNavFlyController.htm">NiNavFlyController</a></span>
and <span class="NDLSystemFont"><a href=
"../../Reference/NiUserInterface/NiNavOrbitController.htm">NiNavOrbitController</a></span>
for the sample if <span class=
"NDLSystemFont">m_bUseNavSystem</span> is true.</p>

<p class="NDLRefMemberFunction">virtual bool
AdjustNavigationControllers(NiAVObject* pkControlledObject,
NiAVObject* pkReferenceObject, const NiPoint3&amp; kUpDir, float
fScale)</p>

<p class="NDLRefMemberDescription">This method adjusts the
default <span class="NDLSystemFont"><a href=
"../../Reference/NiUserInterface/NiNavFlyController.htm">NiNavFlyController</a></span>
and <span class="NDLSystemFont"><a href=
"../../Reference/NiUserInterface/NiNavOrbitController.htm">NiNavOrbitController</a></span>
to use new settings if <span class=
"NDLSystemFont">m_bUseNavSystem</span> is true.</p>

<p class="NDLRefMemberFunction">virtual bool
CreateUIElements()</p>

<p class="NDLRefMemberDescription">This method is called to
create all of the default UI elements in <span class=
"NDLSystemFont">NiSample</span>, including the output log. If
necessary the default width and height of UI elements is adjusted
based off of the chosen backbuffer resolution. This method is
commonly overridden to provide the options window for a
sample.</p>

<p class="NDLRefMemberFunction">virtual bool
CompleteUISystem()</p>

<p class="NDLRefMemberDescription">This method is called to
initialize the renderer groups for all UI elements.</p>

<p class="NDLRefMemberFunction">virtual bool
CreateShaderSystem()</p>

<p class="NDLRefMemberDescription">This method is called to
initialize the shader system in Gamebryo. The error shader
callback is registered as well as adding the default shader
program directory. <span class=
"NDLSystemFont">RunShaderParsers</span> is called to pre-convert
all text-based shaders. <span class=
"NDLSystemFont">RunShaderLibraries</span> is called to parse all
shaders.</p>

<p class="NDLRefMemberFunction">virtual bool
RunShaderParsers(const char* pcShaderDir)</p>

<p class="NDLRefMemberDescription">If a non-DLL build is
specified, a custom parser callback is registered with the shader
factory. <span class="NDLSystemFont">RegisterShaderParsers</span>
is called in order to add any parser libraries to the list for
processing. For each registered parser library, <a href=
"../../Reference/NiMain/NiShaderFactory.htm"><span class=
"NDLSystemFont">NiShaderFactory::LoadAndRunParserLibrary</span></a>
is called.</p>

<p class="NDLRefMemberFunction">virtual bool
RunShaderLibraries(const char* pcShaderDir)</p>

<p class="NDLRefMemberDescription">If a non-DLL build is
specified, a custom class creation callback is registered with
the shader factory. <span class=
"NDLSystemFont">RegisterShaderLibraries</span> is called in order
to add any shader creation libraries to the list for processing.
For each registered creation library, <a href=
"../../Reference/NiMain/NiShaderFactory.htm"><span class=
"NDLSystemFont">NiShaderFactory::LoadAndRegisterShaderLibrary</span></a>
is called.</p>

<p class="NDLRefMemberFunction">virtual bool
RegisterShaderParsers()</p>

<p class="NDLRefMemberDescription">This method is meant for
derived class use. In DLL builds, applications should add the DLL
filename to the <span class=
"NDLSystemFont">m_kParserLibraries</span> array. In non-DLL
builds, the appropriate <span class=
"NDLSystemFont">NiShaderFactory::NISHADERLIBRARY_RUNPARSERCALLBACK</span>
should be specified.</p>

<p class="NDLRefMemberFunction">virtual bool
RegisterShaderLibraries()</p>

<p class="NDLRefMemberDescription">This method is meant for
derived class use. In DLL builds, applications should add the DLL
filename to the <span class=
"NDLSystemFont">m_kShaderLibraries</span> array. In non-DLL
builds, the appropriate <span class=
"NDLSystemFont">NiShaderFactory::NISHADERLIBRARY_CLASSCREATIONCALLBACK</span>
should be specified.</p>

<p class="NDLRefMemberFunction">virtual bool CreateFrame()</p>

<p class="NDLRefMemberDescription">Calls <span class=
"NDLSystemFont"><a href=
"../../Reference/NiApplication/NiApplication.htm">NiApplication</a>::CreateFrame</span>
and then appends a render step containing an <span class=
"NDLSystemFont"><a href=
"../../Reference/NiUserInterface/NiUIManagerRenderClick.htm">NiUIManagerRenderClick</a></span>
to the render frame. In Win32 builds, this function also appends
a render step containing an <span class="NDLSystemFont"><a href="../NiCursor/NiCursorRenderClick.htm">NiCursorRenderClick</a></span>
to the render frame.</p>

<p class="NDLRefMemberFunction">virtual void RenderFrame()</p>

<p class="NDLRefMemberDescription">This method overrides
<span class="NDLSystemFont"><a href=
"../../Reference/NiApplication/NiApplication.htm">NiApplication::RenderFrame</a></span>,
but adds in the support for rendering the UI elements.</p>

<p class="NDLRefMemberFunction">virtual void
RenderUIElements()</p>

<p class="NDLRefMemberDescription">This method renders the UI
elements. It also renders the cursor in Win32 builds. This
function is not called if the frame rendering system is being
used.</p>

<p class="NDLRefMemberFunction">virtual void Terminate()</p>

<p class="NDLRefMemberDescription">This method calls <a href=
"../../Reference/NiApplication/NiApplication.htm"><span class=
"NDLSystemFont">NiApplication::Terminate</span></a> and shuts
down all additional systems added by <span class=
"NDLSystemFont">NiSample</span>.</p>

<p class="NDLRefMemberFunction">virtual void UpdateFrame()</p>

<p class="NDLRefMemberDescription">This method calls <a href=
"../../Reference/NiApplication/NiApplication.htm"><span class=
"NDLSystemFont">NiApplication::UpdateFrame</span></a> and adds
the update of the mouse and UI manager.</p>

<p class="NDLRefMemberFunction">virtual void UpdateInput()</p>

<p class="NDLRefMemberDescription">This method calls <a href=
"../../Reference/NiApplication/NiApplication.htm"><span class=
"NDLSystemFont">NiApplication::UpdateInput</span></a>.</p>

<p class="NDLRefMemberFunction">virtual void EndUpdate()</p>

<p class="NDLRefMemberDescription">The UI system is updated after
the application updates scene, allowing cameras to be placed
correctly.</p>

<p class="NDLRefMemberFunction">virtual void SetUseNavSystem(bool
bUseNavSystem)</p>

<p class="NDLRefMemberFunction">virtual bool
GetUseNavSystem()</p>

<p class="NDLRefMemberDescription">These functions get or set
whether or not to use the navigation system for orbiting and
flying modes. By default, the nav system is used in <span class=
"NDLSystemFont">NiSample</span>-derived classes. It can be turned
off prior to the <span class=
"NDLSystemFont">CreateUISystem</span> function to prevent the
creation of the <span class="NDLSystemFont">NiNavManager</span>
object entirely.</p>

<p class="NDLRefMemberFunction">void ToggleNavHelp()</p>

<p class="NDLRefMemberDescription">This method toggles the
visibility of the navigation help UI.</p>

<p class="NDLRefMemberFunction">virtual void
ChangeController()</p>

<p class="NDLRefMemberDescription">This method switches to the
next <span class="NDLSystemFont"><a href=
"../../Reference/NiUserInterface/NiNavBaseController.htm">NiNavBaseController</a></span>
in the <span class="NDLSystemFont"><a href=
"../../Reference/NiUserInterface/NiNavManager.htm">NiNavManager</a></span>
as well as updating any UI associated with the navigation
controllers.</p>

<p class="NDLRefMemberFunction">void HideAllPressed(unsigned char
ucState)</p>

<p class="NDLRefMemberDescription">This method will toggle the
visibility of all UI elements.</p>

<p class="NDLRefMemberFunction">virtual void
UpdateControllerLog(NiNavBaseController* pkNewController)</p>

<p class="NDLRefMemberDescription">This method will update the
controller output log entry with the state of the current
controller.</p>

<p class="NDLRefMemberFunction">void
AddDefaultUIElements(NiUIGroup* pkGroup, float&amp; fLeftOffset,
float&amp; fTopOffset, float fElementWidth, float
fElementHeight)</p>

<p class="NDLRefMemberDescription">This method is called by
derived classes to add default UI elements to the options UI
group. These UI elements are: Changing the Navigation Controller,
Displaying the Navigation Help, and Quitting the application.
This method also calls <span class=
"NDLSystemFont">AddNavigationHelpUIElements</span>.</p>

<p class="NDLRefMemberFunction">void
AddNavigationHelpUIElements(float fLeftOffset, float fTopOffset,
float fElementWidth, float fElementHeight, float fImageWidth,
float fMinLabelWidth)</p>

<p class="NDLRefMemberDescription">This method will iterate
through the list of all <span class="NDLSystemFont"><a href=
"../../Reference/NiUserInterface/NiNavBaseController.htm">NiNavBaseControllers</a></span>
in the <span class="NDLSystemFont"><a href=
"../../Reference/NiUserInterface/NiNavManager.htm">NiNavManager</a></span>
and will generate a table of UI elements for each <span class=
"NDLSystemFont">NiInput</span> control associated with the
navigation controller.</p>

<p class="NDLRefMemberFunction">unsigned int AddLogEntry(const
char* pcNewLine)</p>

<p class="NDLRefMemberDescription">This method reserves a line in
the output log with the specified text. The index of this entry
is returned.</p>

<p class="NDLRefMemberFunction">bool ChangeLogEntry(unsigned int
uiLineNum, const char* pcNewLine)</p>

<p class="NDLRefMemberDescription">This method allows a developer
to change the contents of the specified log entry. <span class=
"NDLSystemFont">AddLogEntry</span> must have been called
previously to generate the appropriate handle.</p>

<p class="NDLRefMemberFunction">void ReinitializeLogText()</p>

<p class="NDLRefMemberDescription">This method is called to
regenerate the text of the output log.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
