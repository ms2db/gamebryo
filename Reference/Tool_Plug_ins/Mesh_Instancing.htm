<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Mesh Instancing</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">Mesh Instancing</p>

<p class="NDLRefParentage">Type: PROCESS</p>

<p class="NDLRefParentage">Version: 1.0</p>

<p class="NDLRefHeaderFile">&lt;MeshInstancing.dll&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>This plug-in compares all the <span class="NDLSystemFont"><a 
 href="../../Reference/NiMesh/NiMesh.htm">NiMesh</a></span> 
 objects in the scene to see if <a href="../../Reference/NiMesh/NiMeshHWInstance.htm"><span 
 class="NDLSystemFont">NiMeshHWInstance</span></a> can replace any of the 
 mesh objects. The <span class="NDLSystemFont">NiMesh::IsInstancable()</span> 
 function is called which compares to see if the given meshes have the 
 same data streams, material, properties, and effects. If any of these 
 are different the instance can not be made. To create an instance in the 
 DCC you need to duplicate an object as an instance of that object. This 
 will automatically cause the two objects to share the same data streams. 
 As long as you do not put any per instance data, the objects have the 
 ability to become instances. Just because meshes can be instances may 
 or may not be advantageous. The memory benefits have already been obtained 
 so the only benefit remaining is rendering. You can trade GPU cycles for 
 CPU cycles. So if the application is GPU bound instancing would not be 
 recommended.</p>

<p>It is important to note that when exporting &quot;generic&quot; 
 instances the index buffer will be set to <span class="NDLSystemFont">CPU_READ</span> 
 so the loader can convert the asset to the renderer specific format. This 
 results in wasted memory. It is highly recommended that when using hardware 
 instances that you export them with a specific format in mind.</p>

<p>See the <a HREF="../../RelNotes/All/Release_Notes__Tool_Plug_ins.htm#Mesh_Instancing_Known_Issues">Known 
 Issues and Limitations</a> for additional information.</p>

<p class="NDLRefHead1">Options</p>

<div class="NDLFigureContainer">
    <img src="./images/MeshIntancing.jpg" width="323" height="250"
/>
    <p class="NDLFigureCaption">Mesh Instancing Options</p>
</div>

<p>These options are used by the <span class="NDLSystemFont">MeshInstancingPlugin::ShouldCreateInstances()</span> 
 function to determine whether to create <span 
 class="NDLSystemFont"><a href="../../Reference/NiMesh/NiMeshHWInstance.htm">NiMeshHWInstance</a></span>nodes. The function takes 
 in the number of instances and the vertex count of the potential instanced 
 mesh. If either the number of instanced objects or the number of instanced 
 vertices (number of instanced objects * number of vertices) are greater 
 then the input values instances will be created.</p>

<p class="NDLRefHead2">Min Number of Instanced Objects</p>

<p>This number represents the minimum number of instances 
 to consider using hardware instances.</p>

<p class="NDLRefHead2">Min Number of Instanced Vertices</p>

<p>This number is the number of instances multiplied by 
 the number of vertices in the mesh. This variable is renderer specific 
 in that the expense of hardware instancing is not the same on each of 
 the renderers. In general the D3D renderers handle hardware 
 instancing better then the other renderers.  The Playstation 3 handles hardware
 instancing slightly better than the Xbox 360.  This information is general
 overview information.  Specific performance results for your circumstances
 should be assessed on a case by case basis.  The thing to remember is that
 hardware instancing is best suited when hundreds and even thousands of
 instances need to be rendered.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
