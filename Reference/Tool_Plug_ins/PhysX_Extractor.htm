<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>PhysX Extractor</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Build" content="PhysX" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Body)==========================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">PhysX Extractor</p>

<p class="NDLRefParentage">Type: PROCESS</p>

<p class="NDLRefParentage">Version: 1.3</p>

<p class="NDLRefHeaderFile">&lt;PhysXExtractor.dll&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>This plug-in extracts PhysX physics content from objects in
the scene graph and builds a physics prop for inclusion in the
exported NIF file.</p>

<p>It is recommended that PhysX Extractor be executed after
<a href="Scene_Graph_Optimization.htm">Scene Graph
Optimization</a> for best performance, although it is not
strictly necessary.</p>

<p class="NDLRefHead1">Options</p>

<div class="FigureContainer">
    <img src="images/PhysXExtractorOptions.jpg" width="417"
    height="404" alt="PhysXExtractorOptions (32K)">

    <p class="FigureCaption">PhysX Extractor Options</p>
</div>

<p class="NDLRefHead2">Prop Parameters</p>

<p>This set of option controls the PhysX prop (<span class=
"NDLSystemFont"><a href=
"../../Reference/NiPhysX/NiPhysXProp.htm">NiPhysXProp</a></span>)
objects that are exported.</p>

<ul>
    <li><b>Name:</b> The name of the exported <span class=
    "NDLSystemFont">NiPhysXProp</span> object, which can be used
    to identify the prop at run-time. If particle systems are
    created, these appear in a separate prop with a descriptive
    word appended to the name.</li>
    
    <li><b>Use scene scale if available</b> With this option enabled,
    the scale factor will be automatically determined by converting
    from the system units of the DCC tool to meters. Currently, this
    information is only reported from 3ds Max. If the scale isn't
    provided by the DCC tool or this option is unchecked, the scale 
    setting below is used.</li>

    <li>
        <p><b>Scale:</b> A scale factor between the PhysX world
        and the Gamebryo world. A scale of 10 means that PhysX
        objects are ten times the size of their Gamebryo
        counterparts. This scale is un-done automatically at
        runtime, so it is largely transparent to art designer. It
        exists because PhysX has a "sweet spot" for the scale of
        objects. Ideally, objects should be between about 1000
        and 0.01 in size when mixed in simulation. So if you are
        working with a terrain mesh that is 100,000 units across,
        you should typically export everything with a scale of
        about 0.001.</p>

        <p>The scale factor also scales velocities, densities,
        etc, by appropriate amounts to maintain a consistent
        physical world. For example, if your object is a cube 10
        units to a side, and the density is 1, then the mass
        should be 1000. If you scale the box on export by 0.1,
        the plug-in scales the density by 1000 (10 * 10 * 10) so
        that the scaled box has the same mass. Again, this should
        be transparent to users and is un-done at runtime when
        necessary.</p>
    </li>
</ul>

<p class="NDLRefHead2">Particle Systems</p>

<p>This set of options controls the conversion of particle
systems in the scene into Gamebryo-PhysX particle systems.</p>

<ul>
    <li><b>Convert to PhysX Rigid Particles:</b> If checked, then
    all the particle systems in the exported scene are converted
    to PhysX-based systems. See the Max and Maya PhysX artists
    guides for information on setting up particle systems for
    conversion. The particle systems appear in a separate
    <span class="NDLSystemFont">NiPhysXProp</span> object in the
    exported NIF file. This option cannot be used with the
    "Convert to PhysX Fluid Option".</li>

    <li><b>Convert to PhysX Fluid:</b> If checked, then all the
    particle systems in the exported scene are converted to PhysX
    fluid systems. See the Max and Maya PhysX artists guides for
    information on setting up particle systems for conversion to
    fluids. This option cannot be used with the "Convert to PhysX
    Rigid Particles".</li>

    <li><b>PSys in PhysX Space:</b> This box can be checked if
    the particle system object is located in the same coordinate
    system as the PhysX scene (and will be at run-time). In
    practice, you can check this box if the particle system
    object (not the emitters) is at the origin of the scene, is
    not rotated or scaled, and is not animated. At run-time, the
    same transformation must be applied to the particle system
    and the PhysX scene.</li>

    <li><b>Use PhysX Rotations:</b> If checked, mesh-based
    particle systems use PhysX actor rotations to control the
    particle rotations.</li>
</ul>

<p class="NDLRefHead2">Shape Properties</p>

<p>These options control the cooking of meshes for use in a PhysX
scene, and the handling of meshes and materials at runtime.</p>

<ul>
    <li><b>Skin Width:</b> This specifies the PhysX skin width
    parameter for all exported shapes. The per-shape parameters
    over-ride the default SDK parameter. In addition, convex
    shapes are expanded by the skin width to hide
    interpenetration errors. This value must be greater than 0,
    and it should be set based on how large your objects are in
    PhysX coordinates and how to a lesser extent on how many
    artifacts you are willing to tolerate for a given
    performance. Smaller skin width reduces artifacts but may
    lead to jitter and definitely reduces performance.</li>

    <li><b>Cook for Hardware:</b> Check this box if the meshes
    might be used on PhysX hardware. It is acceptable to have the
    flag checked even for software simulation, but it results in
    a larger memory footprint.</li>

    <li><b>Inflate:</b> Check this box to enable mesh inflation,
    which means that the collision mesh is expanded to be "Skin
    Width" larger than the rendered geometry, which can hide
    penetration artifacts.</li>

    <li><b>Uncompressed Normals:</b> Check this box to turn off
    compression of normal vectors when the mesh is cooked. It
    will result in larger meshes.</li>

    <li><b>Keep Mesh Data on Load:</b> Once a mesh has been
    loaded into an application, the data used to create it can
    typically be removed. The only reason you would not check
    this box is if you were planning to release the PhysX SDK
    object at runtime and then re-create the PhysX scene.</li>

    <li><b>Material Base Index:</b> Material indexes are global
    in PhysX, so if multiple scenes are to be used in the same
    application, you need to allocate a separate portion of the
    material indexes to each scene. This box allows you to enter
    the start of the range for this scene. The end of the range
    will depend on the number of materials present in the scene,
    but will not exceed the number of PhysX shapes (not actors)
    in the exported scene. The maximum material index is about
    64000.</li>
</ul>

<p class="NDLRefHead2">Initial States</p>

<p>These options control the cooking of meshes for use in a PhysX
scene, and the handling of meshes and materials at runtime.</p>

<ul>
    <li><b>Initial States from Sequences</b>: If checked, the
    tool plug-in will search for animation sequences tags, as
    used by the <span class="NDLSystemFont"><a href=
    "Controller_Extractor.htm">ControllerExtractor</a></span>
    tool plug-in, and creates a saved PhysX state for each of the
    sequences found. This option should be checked if you are
    exporting sequences for use with Gamebryo's <a href=
    "../../Tools/animation_tool/Introduction_to_PhysX_in_Animation_Tool.htm">
    Animation Tool</a> because it allows for proper playback of
    sequences with physics.</li>

    <li><b>Keep All after Creation</b>: If checked, all of the
    saved states will be kept after the PhysX content has been
    created at runtime. By default, all states are removed once
    they have been used to create PhysX content.</li>

    <li><b>Keep Default after Creation</b>: If checked, the
    Default PhysX state will be kept on loading. The Default
    state is that from frame 0. Other states will be
    deleted.</li>
</ul>

<p class="NDLRefHead2">Notes</p>

<p>If your final application includes several PhysX props that
are included in a single scene, then it is extremely important to
use a consistent "Scale" value across all the props. This should
be part of your art design. If there are simulation "islands" of
props that do not interact, then the parameters can vary among
props in different islands. Regardless of the way you combine
props, the names of the props can vary, and you should allocate
material indexes to each prop to avoid material property
conflicts (material property indexes are global, so no two props
should ever conflict in your application).</p>

<p>The settings here override those internal to Max or Maya (for
example, scale).</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
