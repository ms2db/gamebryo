<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>PhysX Viewer</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Build" content="PhysX" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Body)==========================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">PhysX Viewer</p>

<p class="NDLRefParentage">Type: VIEWER</p>

<p class="NDLRefParentage">Version: 1.1</p>

<p class="NDLRefHeaderFile">&lt;PhysXNIFViewer.dll&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>This plug-in runs the PhysX NIF Exporter plug-in on the scene
graph and saves a NIF file in a temporary directory. It then
spawns the viewer that handles NIF files containing PhysX,
passing it the newly created NIF file as input. The result of
this sequence of steps is that the Gamebryo PhysXNifViewer tool
is launched with the NIF file representing the current scene
graph and its physics content.</p>

<p class="NDLRefHead1">Options</p>

<div class="FigureContainer">
    <img src="images/PhysXViewerOptions.jpg" width="255" height=
    "419" alt="PhysXViewerOptions (37K)">

    <p class="FigureCaption">PhysX Viewer Options</p>
</div>

<ul>
    <li><b>Generate Debug Output:</b> Enables the production and
    rendering of debug geometry from PhysX, which is helpful for
    confirming that the PhysX content in the scene exported as
    you expect.</li>

    <li><b>Gravity:</b> Specify the gravity vector to use when
    viewing the scene.</li>

    <li><b>Enable Ground Plane:</b> This option turns on a ground
    plane in the viewer, which is useful for seeing how props
    will react when they collide with something.</li>

    <li><b>Height:</b> This option controls the height of the
    ground plane, which is its distance from the origin in the
    gravity-up direction.</li>

    <li><b>Resolution:</b> These options control the window used
    by the viewer.</li>

    <li><b>Renderer Type:</b> This option determines which type
    of renderer to use in the PhysXNifViewer. If D3D10 or D3D11 is
    selected, "-D3D10" or "-D3D11" is provided to the PhysXNifViewer as a
    command-line parameter.</li>
</ul>

<p class="NDLRefHead1">Artist Notes</p>

<p>Please see <a href=
"../../Tools/PhysX_NIF_Viewer/Introduction_to_the_PhysX_NIF_Viewer.htm">
PhysX Nif Viewer</a> for more details.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
