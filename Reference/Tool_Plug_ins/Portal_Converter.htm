<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Portal Converter</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">Portal Converter</p>

<p class="NDLRefParentage">Type: PROCESS</p>

<p class="NDLRefParentage">Version: 3.0</p>

<p class="NDLRefHeaderFile">&lt;PortalConverter.dll&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>The Portal Converter plug-in processes the scene graph,
converting specially tagged objects for use with the Gamebryo
portal system. See the <a href=
"../../Reference/NiPortal/The_Basics_of_Cell_Portal_Systems.htm">portal
system</a> documentation for more information about the workings
and theory behind portal-based datasets. The documentation below
describes how to tag objects with names and extra data in a
manner that this converter will recognize. Some of the Gamebryo
content creation tool plug-ins for <a href=
"../../Art/Max/Portals.htm">3ds Max</a>, <a href=
"../../Art/Maya/Create_Portal_Room.htm">Maya</a>, etc. support
additional buttons within the tool for tagging the scene graph in
a semi-automatic manner. See the individual artist's manuals in
the Gamebryo documentation for details of these semi-automatic
methods.</p>

<p class="NDLRefHead1">Options</p>

<p>There are no options for this plug-in.</p>

<p class="NDLRefHead1">Artist Notes</p>

<p>Portals are a powerful way of raising rendering performance
for interior scenes. The following sections detail how artists
can use Gamebryo to generate interior datasets that can take
advantage of the portal system.</p>

<p>In Gamebryo, artists can specify rooms, walls and portals in
their datasets without programmer intervention and see the
results without leaving their modeling tool. Artists using 3ds
max or Maya can add the Portal Converter plug-in to their process
script in the Gamebryo 3ds max Plug-in or Gamebryo Maya Plug-in. 
The Portal Converter plug-in extends the behavior of the standard
Gamebryo view and export paths in 3ds max and Maya, allowing
artists to create levels by tagging geometry as room groups,
rooms, and portals. With this plug-in added to their standard
processing script, artists can create completely portal-culled
levels, view them as they will appear with full portal-based
culling, and generate NIF files representing them, without having
to write code or even post-process their NIF files. The
portal-enabled datasets are generated directly out of the
modeling package.</p>

<p>The plug-in processes the Gamebryo scenes generated by a
modeling package prior to export or viewing, searching for
special tags in the object names (and 3ds max User Properties or
Maya string properties). It uses these tags to transform the
scene graph into a portalled representation. This representation
may be viewed immediately in the modeling package as a
walkthrough and may also be exported to the NIF file.</p>

<p>This document includes detailed information on how scenes may
be tagged for inline processing by the Portal Converter plug-in. 
It also details the overall strategy for tagging datasets and
includes an introduction to portals for artists (who may not be
familiar with them), and serves as the definitive guide to
generating these tags in a real scene.</p>

<p>The basic pipeline is as follows:</p>

<ol>
    <li>The artist ensures that the Portal Converter plug-in is
    one of the plug-ins in the process script, located in the
    Gamebryo 3ds max Plug-in or the Gamebryo Maya Plug-in panel.
    This step should only have to be done once per file, as the
    process script is saved in the model in Max and Maya.</li>

    <li>The artist generates or edits a level dataset that is
    tagged appropriately (either in 3ds max or Maya).</li>

    <li>The artist exports the scene to a NIF file (for example,
    <span class="NDLSystemFont">PortalledScene.NIF</span>.</li>

    <li>The programmer ensures that the game application being
    developed includes <span class=
    "NDLSystemFont">NiPortal.h</span> and links <span class=
    "NDLSystemFont">NiPortal.lib</span>.</li>

    <li>The programmer loads <span class=
    "NDLSystemFont">PortalledScene.NIF</span> into the
    application, which will render the scene using portals.</li>
</ol>

<p>Each time the artist needs to change the level, the
corresponding 3ds max or Maya file is edited and steps 2 and 3
above are repeated.</p>

<p class="NDLRefHead1">Portals Introduction</p>

<p>This section describes in a step-by-step manner how to create
scenes that are tagged for portalling in the art packages. It
does not go into detail on how one might break a particular scene
into rooms, walls, and portals, although it does include some
discussion of how one might organize the dataset to do so. By the
end of this section, one should be able to take simple scenes in
3ds max (the example used here; Maya is similar) and tag them for
portalling, potentially increasing the rendering performance
significantly.</p>

<p>This discussion assumes that the dataset (either existing or
about to be created) is an interior scene, suitable for
decomposition into rooms and portals.</p>

<p class="NDLRefHead2">Basic Introduction to Portals</p>

<p>In order to effectively generate an interior scene that uses
portals, an artist must first understand the basics of the portal
system itself. This section details the basics of portals from an
Art/architecture point of view. For the purposes of this
discussion, we assume that the scene in question is an interior
scene, consisting of rooms, hallways, doorways, etc. Each of the
following sections describes the purpose of a different Gamebryo
portals system object.</p>

<p class="NDLRefHead2">NiRoom</p>

<p>In the Gamebryo portal system, a <span class=
"NDLSystemFont">NiRoom</span> represents a convex region in the
level. Often each <span class="NDLSystemFont">NiRoom</span>
represents a room in the building, especially in the case of
simple office-style levels. However, since not all rooms are
convex, a <span class="NDLSystemFont">NiRoom</span> may represent
only part of a room in the building. For example, an L-shaped
room may be represented as the union of two <span class=
"NDLSystemFont">NiRoom</span> objects, each a rectangular
solid.</p>

<p>A room consists of a few basic components:</p>

<ul>
    <li>The room geometry. This includes the visible walls of the
    room, with holes cut out for doorways and windows, and the
    furniture and other objects in the room.</li>

    <li>The adjacency information. This includes which rooms are
    adjacent to the current room, as seen through the doorways
    and windows. The openings are represented by the <span class=
    "NDLSystemFont">NiPortal</span> objects described later in
    this document.</li>

    <li>The bounding representation of the room. The region of
    space occupied by the <span class=
    "NDLSystemFont">NiRoom</span> is delimited by a set of
    <span class="NDLSystemFont">NiRoom::Wall</span> objects as
    described next.</li>
</ul>

<p class="NDLRefHead2">NiRoom::Wall</p>

<p>The <span class="NDLSystemFont">NiRoom::Wall</span> objects
are not the visible wallboards, stone, or wood that make up the
walls of the room, but rather the infinite planes that bound the
room on all sides. In many cases, the <span class=
"NDLSystemFont">NiRoom::Wall</span> objects are coplanar with the
polygonal, rendered room walls, and the <span class=
"NDLSystemFont">NiRoom::Wall</span> objects can often be
generated directly by "wrapping" planes around the room's visible
wall geometry. For example, a classic, rectangular office
requires six <span class="NDLSystemFont">NiRoom::Wall</span>
planes: four for the walls, one for the floor, and one for the
ceiling. <span class="NDLSystemFont">NiRoom::Wall</span> objects
are used in the portal system to quickly determine whether or not
a player is in a room. If the player's position is on the
"inside" of all of the walls for a room, then the player is in
that room.</p>

<p class="NDLRefHead2">NiRoomGroup</p>

<p>The <span class="NDLSystemFont">NiRoomGroup</span> is the
keystone to an entire level. The room group serves as a container
that holds the set of <span class="NDLSystemFont">NiRooms</span>
that make up a level. In order to figure out which room contains
a player, the room group simply checks each of its rooms, looking
for one (if any) that contains the player.</p>

<p>In addition, if the <span class=
"NDLSystemFont">NiRoomGroup</span> represents a building, there
may be times when the player in not located inside the building.
In this case, the room group can also contain a scene graph,
called the <em>shell</em>, which is the building as seen from
outside a classic, exterior model of the building. If the player
is outside the building represented by the room group, then
rendering the room group results in rendering the shell.</p>

<p class="NDLRefHead2">NiPortal</p>

<p>Portals are the parts of an interior level that join the rooms
together. Without portals, each <span class=
"NDLSystemFont">NiRoom</span> would be drawn by itself, ignoring
any other rooms. Portals represent constrained ways of seeing
from one room into another. Generally, they are created to
represent doorways, windows, or invisible walls between two
rooms.</p>

<p>A portal consists of three things:</p>

<ul>
    <li>A <em>source</em> room. This room is the one out of which
    the portal can see. It is thought of as the room containing
    the portal.</li>

    <li>A shape and position. A polygon represents the shape and
    position of the doorway, window, or hole on a wall of the
    room. The polygon is not required to be convex.</li>

    <li>A <em>target</em> room. This room is the one that is seen
    through the portal. It is also known as the <em>adjoiner</em>,
    as it is a room adjoining the current room.</li>
</ul>

<p class="NDLRefHead2">Breaking Portal Scenes into Rooms</p>

<p>The first step in portalling any dataset is to examine the
original dataset, either as it exists in 3ds max or Maya, or as
it exists sketched on paper. The artist must set about to break
the dataset into convex <span class="NDLSystemFont">NiRoom</span>
objects. Note that each doorway, window, or archway between these
<span class="NDLSystemFont">NiRoom</span> objects will become a
portal, and must be coincident with a shared plane <span class=
"NDLSystemFont">(NiRoom::Wall)</span>, splitting the two
<span class="NDLSystemFont">NiRoom</span> objects.</p>

<p>The figure below shows the top view of a one-floor house
dataset and then the same dataset marked for walls, rooms and
portals. Note that the partitioning seen below is not unique
there are numerous ways that the scene could have been decomposed
into rooms.</p>

<div class="FigureContainer">
    <img src="images/image015.gif" width="377" height="198" alt=
    "image015 (12K)"> 
    <!-- <p class="FigureCaption">{Figure caption}</p> -->
</div>

<p class="NDLRefHead2">Defining NiRoomGroup and NiRoom Nodes</p>

<p>To create and tag the <span class=
"NDLSystemFont">NiRoomGroup</span> and its <span class=
"NDLSystemFont">NiRoom</span> objects in 3ds max, for example,
first create one dummy node that will represent the <span class=
"NDLSystemFont">NiRoomGroup</span> (Create: Standard: Dummy), and
give it a name that includes the text "<span class=
"NDLSystemFont">_NDLRG</span>", such as "<span class=
"NDLSystemFont">Level_NDLRG</span> ". The "<span class=
"NDLSystemFont">_NDLRG</span> " tag in the name tells the
PortalConverter that this object is to be converted into a
<span class="NDLSystemFont">NiRoomGroup</span>. Then, create one
dummy node for each <span class="NDLSystemFont">NiRoom</span>,
giving each a unique name that includes the tag "<span class=
"NDLSystemFont">_NDLRM</span>". Every room must have a unique
name because the portals will reference rooms by their name when
specifying an adjoiner. Having created the <span class=
"NDLSystemFont">NiRoom</span> tagged nodes, link each of them
directly to the <span class="NDLSystemFont">NiRoomGroup</span>
tagged node. In the Track View in 3ds max, this step should cause
the <span class="NDLSystemFont">NiRoom</span> nodes to appear as
direct children of the <span class=
"NDLSystemFont">NiRoomGroup</span> node.</p>

<p>An example of such a track view is shown in the figure
below.</p>

<div class="NDLFigureContainer">
    <img src="images/image016.gif" width="250" height="431" alt=
    "image016 (51K)"> 
    <!-- <p class="NDLFigureCaption">{Figure caption}</p> -->
</div>

<p class="NDLRefHead1">Track View From 3ds Max</p>

<p class="NDLRefHead2">Defining Room and Wall Information</p>

<p>There are two ways of tagging the objects that should be
considered when generating the <span class=
"NDLSystemFont">NiRoom::Wall</span> objects that bound each room.
The selection between these two methods is mainly dependent upon
the way that the interior dataset is created the complexity of
the geometry, and the amount of furniture or other
non-wall-related geometry in each room.</p>

<p>In any case, the geometry for all of the pieces of the room
should be under the room's tagged dummy node. This arrangement
includes wall geometry, floor and ceiling geometry, interior
geometry (such as furniture, columns, etc.), and (as we shall see
below) portals.</p>

<p>The first of the two options is to avoid wall tagging
altogether. In this case, the <span class=
"NDLSystemFont">NiRoom::Wall</span> objects for each room are
generated automatically by looking at all of the geometry under
each room's tagged node. A set of wall planes is automatically
wrapped around the room so that all of the geometry in the room
is contained by the set of walls. This system works very well for
simple scenes.</p>

<p>Although the first method is convenient, it can lead to longer
portal conversion processing times and more wall planes than are
needed, which can in turn lead to lower runtime performance. The
second option is to tag with <span class=
"NDLSystemFont">*_NDLWL</span> any pieces of geometry that should
be considered when generating <span class=
"NDLSystemFont">NiRoom::Wall</span> objects. If the portal
converter finds any <span class="NDLSystemFont">*_NDLWL</span>
tags in a room, it will only consider geometry tagged with
<span class="NDLSystemFont">*_NDLWL</span> when generating walls
for that room. Other rooms can still have their wall planes
automatically wrapped around all their geometry.</p>

<p>In neither case does the artist have to draw individual wall
planes. The walls are generated by wrapping as tight a set of
planes as possible around the set of vertices that are to be used
for wall generation. In the first method, this set of planes is
all of the geometry in the room in the second method, it is the
tagged objects.</p>

<p>This technique is not as difficult as it might seem because
the wall geometry for a given room can be grouped under a single
child node of the room node. The child node can be marked, for
example, with <span class=
"NDLSystemFont">MyRoom_NDLWL</span>.</p>

<p class="NDLRefHead2">Defining NiPortal Nodes</p>

<p>Tagging a node as an <span class=
"NDLSystemFont">NiPortal</span> object is more involved than
tagging the other types of nodes since a <span class=
"NDLSystemFont">NiPortal</span> represents a more complicated
relationship between objects in the level. Because it represents
a From-Through-To relationship (from a room through a doorway to
another room), more data must be specified.</p>

<p>The first step in tagging a portal is to create a geometry
object (normally an editable mesh) containing a polygon (face)
that represents the hole connecting two rooms. In the case of
so-called <em>strongly portalled</em> datasets, the portal polygon
is the exact shape of the doorway that must have already been cut
in the geometry of the wall where the portal is located. In the
case of a so-called <em>weakly portalled</em> dataset, the portal
polygon simply bounds the doorway hole that is already cut in the
wall geometry. In either case, the portal polygon must be
coplanar with the wall geometry itself. It must also be one-sided
and face into the "From" room (remember that a portal is
unidirectional). The polygon does not have to be convex.</p>

<p>Having created the portal polygon, the portal polygon node
should be given a (not necessarily unique) name that includes the
tag " <span class="NDLSystemFont">NDLPR</span> ". It must then be
linked as a child of the "From" room using the linker tool in 3ds
max or Maya. The figure below shows an example of a portal
emanating from the room.</p>

<div class="NDLFigureContainer">
    <img src="images/image017.gif" width="229" height="512" alt=
    "image017 (51K)"> 
    <!-- <p class="NDLFigureCaption">{Figure caption}</p> -->
</div>

<p class="NDLRefHead1">Track View in 3ds Max</p>

<p>So far, we have specified the "From" and the "Through" parts
of the portal. The final step is to specify the "To" section of
the relationship by selecting the room that is seen through the
portal. This "To" section is specified by adding a string to the
User Defined properties tab in the Object Properties panel for
the portal object.</p>

<p>The string to be added is of the form:</p>

<p><span class="NDLSystemFont">NDLADJOINER
"ROOMNAME_NDLRM"</span></p>

<p>where <span class="NDLSystemFont">ROOMNAME_NDLRM</span> is the
name for an <span class="NDLSystemFont">NiRoom</span> object in
the level. The quotes in the portal string are required. The
requirement that <span class="NDLSystemFont">NiRoom</span>
objects have unique names is necessary so that the portal
converter can resolve the unique room to which the portal points.
<span class="NDLSystemFont">NiPortal</span> objects can only have
a single adjoiner. In a situation where it is believed that
multiple adjoiners are needed, the artists should split the
current portal into multiple portals and assign a unique adjoiner
to each.</p>

<p>Portals represent holes, not objects. The <span class=
"NDLSystemFont">NiPortal</span> polygons are not drawn by
Gamebryo, so it is not necessary prior to viewing or exporting to
make portal geometry "hidden" in order for that geometry to be
invisible. If the geometry for a portal is not made hidden, 3ds
max will draw the portal geometry and thus block the doorways.
During artwork editing, the artist may choose to make the portals
hidden to allow the doorways to be clear when rendered by 3ds
max. If this is done, be sure either to disable the removal of
hidden objects in the Gamebryo 3ds max Plug-in or to un-hide the
portal objects prior to viewing or exporting.</p>

<p>In general, two portals must be created to make a two-way
visibility connection: one from room A to room B through polygon
P and one from room B to room A through the reverse of polygon P.
To assist artists, the Portal Converter can create portals in
pairs automatically. If an artist creates a one-way portal from
room A to room B and adds the additional key "<span class=
"NDLSystemFont">NDLTWOWAY</span> " to the User Defined
Properties, a matching portal from room B to room A will be
automatically generated by the Portal Converter. This technique
basically cuts the number of portals that must be specified by
the artist in half and can greatly increase artwork throughput.
In 3ds max, though, the track view will display the portal as if
it is only a one-way portal. Thus, when creating a new portal
from room A to room B, artists should first check room B to
ensure that a two-way portal to A does not already exist. One
convention that makes it easy for the artist to avoid creating
multiple two-way portals for the same opening is to always create
two-way portals in the room whose name is first alphabetically.
For example, when creating a two-way portal between rooms named
"A_NDLRM" and "B_NDLRM", create the portal in the room named
"A_NDLRM" and make the adjoiner the room named "B_NDLRM". In
this way, you only ever have to check one room to determine
whether a portal exists between a given pair of rooms.</p>

<p class="NDLRefHead2">Adding Portal Fixtures</p>

<p>The children of a <span class="NDLSystemFont">NiRoom</span>
object consist of portals and <em>fixtures</em>. The fixtures for a
room are drawn when the room is drawn. In a strongly portalled
dataset, fixtures are generally objects internal to the room,
such as furniture. In a weakly portalled dataset, the entire
visible room geometry is generally attached as a fixture since
the walls are usually invisible bounding planes for the actual
room geometry.</p>

<p class="NDLRefHead2">Wrapping Up Portal Scene Creation</p>

<p>Once the <span class="NDLSystemFont">NiRoomGroup</span>, the
<span class="NDLSystemFont">NiRoom</span> objects, the
<span class="NDLSystemFont">NiRoom::Wall</span> objects, the
<span class="NDLSystemFont">NiPortal</span> objects, and fixtures
are all specified, all that remains (other than texturing and
lighting) is exporting the data to NIF. Make sure to include the
Portal Converter plug-in in your script. A scene graph is allowed
to have multiple <span class="NDLSystemFont">NiRoomGroup</span>
objects as long as each room group does not have any room group
predecessors with respect to a depth-first traversal of the scene
graph.</p>

<p class="NDLRefHead2">Example</p>

<p>Please see <a href="../../Art/Max/Portal_Rooms_max.htm">Portal
Rooms.max</a> for more information.</p>
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
