<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiXMLLogger</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiXMLLogger</p>

<p class="NDLRefHeaderFile">&lt;NiXMLLogger.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>This class is a simple string-manipulation class that makes it
quick and easy to create XML log files. Internally, it manages
the log file using <a href=
"../../Reference/NiSystem/NiLogger.htm">NiLogger</a>.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">void CreateLog(const
NiString&amp; kFilename)</p>

<p class="NDLRefMemberDescription">This method creates a new log
file with the given filename. If a file with that name already
exists, it will be overwritten.</p>

<p class="NDLRefMemberFunction">void CloseLog()</p>

<p class="NDLRefMemberDescription">This method closes the
currently opened log file.</p>

<p class="NDLRefMemberFunction">void LogElement(const
NiString&amp; kElementName, const NiString&amp; kData)</p>

<p class="NDLRefMemberDescription">This method adds an XML
element to the log using the given element name and the data
provided. For example, calling LogElement("error", "Export
failed.") will add the following to the log file:
"&lt;error&gt;Export failed.&lt;/error&gt;\n".</p>

<p class="NDLRefMemberFunction">LogData(const NiString&amp;
kData)</p>

<p class="NDLRefMemberDescription">This method simply writes the
passed in text directly to the log file.</p>

<p class="NDLRefMemberFunction">StartElement(const NiString&amp;
kElementName)</p>

<p class="NDLRefMemberDescription">This method creates an element
tag with the given string as its name. This call must correspond
to a call to EndElement with the same string passed in.</p>

<p class="NDLRefMemberFunction">EndElement(const NiString&amp;
kElementName);</p>

<p class="NDLRefMemberDescription">This method creates a close
element tag with the given string as the element name. This call
must correspond to a call to StartElement with the same string
passed in.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
