<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Scripts</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Scripts</h1>

<p>All plug-ins are driven by a simple scripting system. The
script defines a pipeline for data to be manipulated or added. It
is represented as a <span class=
"NDLSystemFont">NiScriptInfo</span> object that contains a list
of <span class="NDLSystemFont">NiPluginInfo</span> objects. These
<span class="NDLSystemFont">NiPluginInfo</span> objects detail
information in the form of the name of the plug-in, its version
number, its type, and a set of key and value pairs detailing how
the plug-in should be executed. In an import plug-in, a key/value
pair would be the filename of the file to import. A process
plug-in may have a Boolean parameter that determines whether it
will flatten the scene graph. In this way, the parameters of the
<span class="NDLSystemFont">NiPluginInfo</span> drive the
execution of the plug-ins themselves.</p>

<p>Each <span class="NDLSystemFont">NiPlugin</span>-derived class
implements three distinct methods: <span class=
"NDLSystemFont">CanExecute</span>, <span class=
"NDLSystemFont">Execute</span>, and<span class=
"NDLSystemFont">DoManagementDialog</span>.</p>

<p><span class="NDLSystemFont">CanExecute</span> is a method that
takes a <span class="NDLSystemFont">NiPluginInfo</span> object as
input and returns whether or not the plug-in can handle it.
Pushing the responsibility of verifying whether the <span class=
"NDLSystemFont">NiPluginInfo</span> matches the <span class=
"NDLSystemFont">NiPlugin</span> to the plug-in itself enables
Gamebryo to support backwards compatibility more easily. If the
version number changes or the name of the DLL changes, it doesn't
matter because the plug-in itself verifies the scripts that can
be run on it.</p>

<p><span class="NDLSystemFont">Execute</span> is a method that
takes a previously verified <span class=
"NDLSystemFont">NiPluginInfo</span> object as input.</p>

<p><span class="NDLSystemFont">DoManagementDialog</span> is a
method that takes an <span class=
"NDLSystemFont">NiPluginInfo</span> object as input and outputs
an <span class="NDLSystemFont">NiPluginInfo</span> object. Its
purpose is to create a modal dialog box allowing the user to set
whatever parameters they need to pass into the plug-in for
execution. The input is whatever values were saved for the
plug-in earlier, allowing consistency in user interface. The
output is the new <span class="NDLSystemFont">NiPluginInfo</span>
object that reflects the choices made by the user.</p>

<p>The architecture of the <span class=
"NDLSystemFont">NiScriptInfo</span> system inherently supports
batching of plug-in executions. All that must be done is to
provide multiple <span class="NDLSystemFont">NiPluginInfo</span>
objects for a given <span class=
"NDLSystemFont">NiScriptInfo</span> object.</p>

<p><span class="NDLSystemFont">NiScriptInfo</span> objects may be
stored as text strings using any encoding method through the
<span class="NDLSystemFont">NiScriptWriter</span> and can be read
using any decoding method through the <span class=
"NDLSystemFont">NiScriptReader</span> interface. Saving these
text strings as text files will enable users to distribute
scripts to others. This approach will enable users to execute
specific script "pipelines" for different types of art
assets.</p>

<p>For instance, a company might have a "Character" script that
they execute on all characters that outputs KF sequences in
addition to a NIF file. Another script might precondition a
"Level" by burning in vertex colors for static lighting and
running portal conversion.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
