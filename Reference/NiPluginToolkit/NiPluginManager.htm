<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiPluginManager</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiPluginManager</p>

<p class="NDLRefParentage">: public <a href=
"../../Reference/NiSystem/NiMemObject.htm">NiMemObject</a></p>

<p class="NDLRefHeaderFile">&lt;NiPluginManager.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>The NiPluginManager is a singleton class that manages all the
plug-ins in the system. It takes care of loading and freeing the
plug-in DLLs and can be used to execute scripts.</p>

<p class="NDLRefHead1">Constructors</p>

<p>Since <span class="NDLSystemFont">NiPluginManager</span> is a
singleton class, only one instance of it can exist at any given
time. Thus, there is no public constructor. Instead, the single
instance is created and destroyed by the static functions
<span class="NDLSystemFont">CreateInstance</span> and
<span class="NDLSystemFont">DestroyInstance</span>. These
functions are called by <span class=
"NDLSystemFont">NiFramework</span> when it is initialized and
shut down.</p>

<p class="NDLRefHead1">Static Member Functions</p>

<p class="NDLRefMemberFunction">static void CreateInstance()</p>

<p class="NDLRefMemberDescription">This function creates the
single instance of <span class=
"NDLSystemFont">NiPluginManager</span>.</p>

<p class="NDLRefMemberFunction">static void DestroyInstance()</p>

<p class="NDLRefMemberDescription">This function destroys the
single instance of <span class=
"NDLSystemFont">NiPluginManager</span>.</p>

<p class="NDLRefMemberFunction">static NiPluginManager*
GetInstance()</p>

<p class="NDLRefMemberDescription">This function returns a
pointer to the current single instance of <span class=
"NDLSystemFont">NiPluginManager</span>. If no instance has been
created, it returns <span class="NDLSystemFont">NULL</span>.</p>

<p class="NDLRefMemberFunction">static NiScriptInfo*
GetLastExecutedScript()</p>

<p class="NDLRefMemberDescription">This function returns a
pointer to the last script that was executed.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">bool AddLibrary(NiString
strPath)</p>

<p class="NDLRefMemberDescription">This function adds a plug-in
DLL and registers all the plug-ins it contains with the
manager.</p>

<p class="NDLRefMemberFunction">virtual void AddPlugin(NiPlugin*
pkPlugin)</p>

<p class="NDLRefMemberDescription">This function adds a plug-in
to the manager.</p>

<p class="NDLRefMemberFunction">virtual void
AddPluginDirectory(const char* pcPath, bool bRecurse = true, bool
bSilentRunning = false)</p>

<p class="NDLRefMemberDescription">This function adds all the
plug-ins that reside in the directory indicated by <span class=
"NDLSystemFont">strPath</span>. If <span class=
"NDLSystemFont">bRecurse</span> is true, the function will also
look in all subdirectories for plug-in DLLs. If <span class=
"NDLSystemFont">bSilentRunning</span> is true, the function will
suppress any error dialogs, which is useful when creating
batch-mode applications.</p>

<p class="NDLRefMemberFunction">virtual NiBatchExecutionResultPtr
ExecuteScript( NiScriptInfo* pkScript, bool
bRememberAsLastExecutedScript = true)</p>

<p class="NDLRefMemberDescription">This function executes the
specified script. Setting <span class=
"NDLSystemFont">bRememberAsLastExecutedScript</span> will cause
this script to be returned by a subsequent call to <span class=
"NDLSystemFont">GetLastExecutedScript</span>.</p>

<p class="NDLRefMemberFunction">void
GetImportStrings(NiTObjectArray&lt;NiString&gt;&amp;
kFileDescriptorStrings, NiTObjectArray&lt;NiString&gt;&amp;
kFileTypeStrings)</p>

<p class="NDLRefMemberDescription">This function populates
kFileDescriptorStrings with the file descriptor strings and
kFileTypeStrings with the file type strings for all the
registered import plug-ins.</p>

<p class="NDLRefMemberFunction">void
GetExportStrings(NiTObjectArray&lt;NiString&gt;&amp;
kFileDescriptorStrings, NiTObjectArray&lt;NiString&gt;&amp;
kFileTypeStrings)</p>

<p class="NDLRefMemberDescription">This function populates
kFileDescriptorStrings with the file descriptor strings and
kFileTypeStrings with the file type strings for all the
registered export plug-ins.</p>

<p class="NDLRefMemberFunction">NiTPtrSet&lt;NiPluginPtr&gt;&amp;
GetAllPlugins()</p>

<p class="NDLRefMemberDescription">This function returns the set
of all plug-ins that have been loaded.</p>

<p class="NDLRefMemberFunction">NiPlugin*
GetPluginByClass(NiString strClass)</p>

<p class="NDLRefMemberDescription">This function returns the
<span class="NDLSystemFont">NiPlugin</span> object that has the
specified class name.</p>

<p class="NDLRefMemberFunction">NiPlugin*
GetPluginByName(NiString strPlugin)</p>

<p class="NDLRefMemberDescription">This function returns the
<span class="NDLSystemFont">NiPlugin</span> object that has the
specified display name.</p>

<p class="NDLRefMemberFunction">NiPlugin* GetPluginAt(unsigned
int uiIndex)</p>

<p class="NDLRefMemberDescription">This function returns the
<span class="NDLSystemFont">NiPlugin</span> object that is at the
index specified by <span class=
"NDLSystemFont">uiIndex</span>.</p>

<p class="NDLRefMemberFunction">unsigned int
GetPluginIndex(NiString strClass)</p>

<p class="NDLRefMemberDescription">This function returns the
index for the <span class="NDLSystemFont">NiPlugin</span> object
with the specified class name.</p>

<p class="NDLRefMemberFunction">unsigned int
GetTotalPluginCount()</p>

<p class="NDLRefMemberDescription">This function returns the
total number of plug-ins registered with the manager.</p>

<p class="NDLRefMemberFunction">bool
HasManagementDialog(NiPluginInfo* pkPluginInfo)</p>

<p class="NDLRefMemberDescription">This function returns whether
or not the first plug-in that can execute the <span class=
"NDLSystemFont">pkPluginInfo</span> script provides a management
dialog box.</p>

<p class="NDLRefMemberFunction">bool
DoManagementDialog(NiPluginInfo* pkInitialInfo, NiWindowRef
hWndParent)</p>

<p class="NDLRefMemberDescription">This function displays the
management dialog box for the first plug-in that can execute
<span class="NDLSystemFont">pkInitialInfo</span>.</p>

<p class="NDLRefMemberFunction">bool
VerifyScriptInfo(NiScriptInfo* pkInfo)</p>

<p class="NDLRefMemberDescription">This function returns
<span class="NDLSystemFont">true</span> if the <span class=
"NDLSystemFont">pkInfo</span> script can be executed and
<span class="NDLSystemFont">false</span> otherwise. This
information is determined by calling <span class=
"NDLSystemFont">CanExecute</span> for every <span class=
"NDLSystemFont">NiPluginInfo</span> in the script.</p>

<p class="NDLRefMemberFunction">NiPlugin*
GetMatchingPlugin(NiPluginInfo* pkInfo, unsigned int uiStartIdx =
0)</p>

<p class="NDLRefMemberDescription">This function returns the
first plug-in after <span class="NDLSystemFont">uiStartIdx</span>
that is compatible with <span class=
"NDLSystemFont">pkInfo</span>.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
