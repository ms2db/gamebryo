<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Potential Uses of Plug-ins</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Potential Uses of Plug-ins</h1>

<h2>Ideas for Art Directors</h2>

<p>The <span class="NDLSystemFont">NiPluginToolkit</span> can
empower and streamline your art pipeline in three important ways:
customizable exporting, consistent exporting with central
control, and custom processing.</p>

<p>Within the plug-in framework, you can customize the plug-ins
and options you use during export. You can streamline the artist
pipeline by using only the plug-ins you need. You can create
custom scripts for doing different types of exports. Different
types of objects (for example, characters vs. game levels) need
to be processed in different ways. Doing "Portal" conversion on a
character is pointless, so you can save time during export by not
having the portal plug-in in your character script.</p>

<p>The <span class="NDLSystemFont">NiPluginToolkit</span> enables
central control of scripts. All the artists can read their
scripts from the same place. For example, as the art director,
you could setup the export scripts for your project to export
characters, levels, and special effects. All your animators use
the same script and options for their characters. You no longer
need to ask if they remembered to export with the right
optimization settings. If you need to make changes to a script,
you can make changes in one place and all of your artists get the
same change.</p>

<p>The <span class="NDLSystemFont">NiPluginToolkit</span> enables
custom processing. You can create a custom set of multiple steps,
using custom options, in the specific order you need to run, as a
streamlined set of steps that is less error-prone, because it is
more easily standardized for your art pipeline.</p>

<p>The <span class="NDLSystemFont">NiPluginToolkit</span> enables
programmers to add their own custom plug-ins, as a part of the
existing artist pipeline. This design enables some exciting new
possibilities.</p>

<p>As art director, you could have a custom plug-in do some
checking of each piece of art for you at export time. You could
have your game level script check to make sure the exported game
level is within your size budget, level loading requirements
(e.g., spawn points), etc. Custom error checking could save tons
of time.</p>

<h2>Ideas for Programmers</h2>

<p>Finding problems early can save you lots of time and
trouble.</p>

<p>The <span class="NDLSystemFont">NiPluginToolkit</span> enables
you to do an almost endless variety of custom processing and
error checking when the art is being exported. For example, you
could create a plug-in to find and downsize large textures for
consoles. If your game requirements specify that all characters
have a 10,000-triangle budget, a plug-in can be written to check
such budgets more easily. Quick sanity checks on the structure of
your game levels can be done to make sure the pieces required by
your game are there.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
