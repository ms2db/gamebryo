<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiPlugin</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiPlugin</p>

<p class="NDLRefParentage">: public <span><a href=
"../../Reference/NiMain/NiRefObject.htm">NiRefObject</a></span></p>

<p class="NDLRefHeaderFile">&lt;NiPlugin.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<div class="NDLFigureContainer">
    <img src="images/image22.gif" width="317" height="80" alt=
    "image22 (2K)">
</div>

<p><span class="NDLSystemFont">NiPlugin</span> is a virtual base
class representing a plug-in in the <span class=
"NDLSystemFont">NiPluginToolkit</span>. It contains functions for
verifying that it can execute a particular script and for
actually executing the script. It also allows for an optional
plug-in management dialog to be spawned to populate the
parameters in the script. Each <span class=
"NDLSystemFont">NiPlugin</span> object must implement a variety
of virtual functions, including a function that populates a
<span class="NDLSystemFont">NiPluginInfo</span> with default
parameters for that plug-in.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiPlugin(const char* pcName,
const char* pcVersion, const char* pcShortDescription, const
char* pcLongDescription)</p>

<p class="NDLRefMemberDescription">The constructor takes strings
for the name of the plug-in for display purposes, its version,
and both a short and long description of the plug-in.</p>

<p class="NDLRefHead1">Pure Virtual Functions</p>

<p>The following virtual functions must be overridden in any
<span class="NDLSystemFont">NiPlugin</span>-derived class:</p>

<p class="NDLRefMemberFunction">virtual bool
CanExecute(NiPluginInfo* pkInfo) = 0</p>

<p class="NDLRefMemberDescription">This function takes a
<span class="NDLSystemFont">NiPluginInfo</span> script and
returns whether or not the plug-in can execute that script.</p>

<p class="NDLRefMemberFunction">virtual NiExecutionResultPtr
Execute(const NiPluginInfo* pkInfo) = 0</p>

<p class="NDLRefMemberDescription">This function executes the
provided <span class="NDLSystemFont">NiPluginInfo</span> script
and returns a <span class=
"NDLSystemFont">NiExecutionResult</span> indicating success or
failure.</p>

<p class="NDLRefMemberFunction">virtual NiPluginInfo*
GetDefaultPluginInfo() = 0</p>

<p class="NDLRefMemberDescription">This function returns a
<span class="NDLSystemFont">NiPluginInfo</span> script with
default parameters for the plug-in. These default parameters
should minimally include the name, class name, version number,
and short and long descriptions of the plug-in.</p>

<p class="NDLRefMemberFunction">virtual bool
HasManagementDialog() = 0</p>

<p class="NDLRefMemberDescription">This function returns a
Boolean value indicating whether or not the plug-in provides a
management dialog for setting <span class=
"NDLSystemFont">NiPluginInfo</span> parameters.</p>

<p class="NDLRefMemberFunction">virtual bool
DoManagementDialog(NiPluginInfo* pkInitialInfo, NiWindowRef
hWndParent) = 0</p>

<p class="NDLRefMemberDescription">This function executes the
management dialog for the plug-in using <span class=
"NDLSystemFont">pkInitialInfo</span> to populate the dialog box
parameters. <span class="NDLSystemFont">hWndParent</span> is the
window reference that should be used as the parent of the dialog
box. This function should set the new parameters into
<span class="NDLSystemFont">pkInitialInfo</span> upon successful
completion of the dialog box. The return value indicates whether
the values in <span class="NDLSystemFont">pkInitialInfo</span>
have been changed.</p>

<p class="NDLRefMemberFunction">virtual bool
CanCreateDefaultInstance()</p>

<p class="NDLRefMemberDescription">Determine whether or not this
plugin can instantiate a default version of its options. Those
that cannot will not be added to UI for script editing.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">const NiString&amp; GetName()
const</p>

<p class="NDLRefMemberDescription">This function returns the
display name of the plug-in.</p>

<p class="NDLRefMemberFunction">const NiString&amp; GetVersion()
const</p>

<p class="NDLRefMemberDescription">This function returns a string
with the version number of the plug-in.</p>

<p class="NDLRefMemberFunction">const NiString&amp;
GetShortDescription() const</p>

<p class="NDLRefMemberDescription">This function returns the
short description of the plug-in.</p>

<p class="NDLRefMemberFunction">const NiString&amp;
GetLongDescription() const</p>

<p class="NDLRefMemberDescription">This function returns the long
description of the plug-in.</p>

<p class="NDLRefMemberFunction">void SetModule(NiModuleRef
hModule)</p>

<p class="NDLRefMemberDescription">This function sets the module
reference (i.e., DLL handle) for this plug-in.</p>

<p class="NDLRefMemberFunction">NiModuleRef GetModule() const</p>

<p class="NDLRefMemberDescription">This function returns the
module reference for this plug-in, returning <span class=
"NDLSystemFont">NULL</span> if no handle has been set.</p>

<p class="NDLRefMemberFunction">NiSharedDataList*
GetSharedDataList()</p>

<p class="NDLRefMemberDescription">This is a helper function to
return a pointer to the shared data list for the <span class=
"NDLSystemFont">NiPluginToolkit</span>.</p>

<p class="NDLRefMemberFunction">NiSharedData*
GetSharedData(NiSharedDataType pkType)</p>

<p class="NDLRefMemberDescription">This is a helper function to
return a pointer to the shared data of the specified type if it
exists in the shared data list.</p>

<p class="NDLRefMemberFunction">virtual void
SetAbsolutePluginPath(const char* pcPath)</p>

<p class="NDLRefMemberDescription">This function sets the
absolute path on disk to the directory in which the DLL
containing this plug-in resides. It is called by the <span class=
"NDLSystemFont">NiPluginManager</span> when the plug-in is
loaded.</p>

<p class="NDLRefMemberFunction">virtual const NiString&amp;
GetAbsolutePluginPath()</p>

<p class="NDLRefMemberDescription">This function provides access
to the absolute path on disk to the directory in which the DLL
containing this plug-in resides. This path can be used when
loading or saving additional data files that the plug-in
uses.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
