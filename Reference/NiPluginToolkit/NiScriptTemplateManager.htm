<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiScriptTemplateManager</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiScriptTemplateManager</p>

<p class="NDLRefParentage">: public <a href=
"../../Reference/NiSystem/NiMemObject.htm"><span>NiMemObject</span></a></p>

<p class="NDLRefHeaderFile">&lt;NiScriptTemplateManager.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>This singleton class is designed to load scripts from files
into memory as converted <span class=
"NDLSystemFont">NiScriptInfo</span> template objects. This class
is the repository of all known scripts.</p>

<p class="NDLRefHead1">Static Member Functions</p>

<p class="NDLRefMemberFunction">static void CreateInstance()</p>

<p class="NDLRefMemberDescription">Creates the singleton
instance.</p>

<p class="NDLRefMemberFunction">static void DestroyInstance()</p>

<p class="NDLRefMemberDescription">Destroys the singleton
instance.</p>

<p class="NDLRefMemberFunction">static NiScriptTemplateManager*
GetInstance()</p>

<p class="NDLRefMemberDescription">This is the public interface
into the <span class=
"NDLSystemFont">NiScriptTemplateManager</span>.</p>

<p class="NDLRefMemberFunction">static NiScriptInfo*
OpenScript(NiString strScriptFile,
bool bVerboseErrors = true)</p>

<p class="NDLRefMemberDescription">This method opens a script
from a file and produces an <span class=
"NDLSystemFont">NiScriptInfo</span> object. This pointer is
<span class="NDLSystemFont">NULL</span> if unsuccessful. Error
dialogs will be created if <span class=
"NDLSystemFont">bVerboseErrors</span> is true. The script IS NOT
added to the manager.</p>

<p class="NDLRefMemberFunction">static NiScriptInfo*
ParseScript(NiString strScriptFile, NiScriptReader* pkReader,
bool bVerboseErrors = true)</p>

<p class="NDLRefMemberDescription">This method parses a string to
produce an <span class="NDLSystemFont">NiScriptInfo</span> object
and using the specified <span class=
"NDLSystemFont">NiScriptReader</span>. This pointer is
<span class="NDLSystemFont">NULL</span> if unsuccessful. Error
dialogs will be created if <span class=
"NDLSystemFont">bVerboseErrors</span> is true. The script IS NOT
added to the manager.</p>

<p class="NDLRefMemberFunction">static NiScriptInfo*
SaveScript(NiString strScriptFile, NiScriptInfo* pkScript,
bool bVerboseErrors = true)</p>

<p class="NDLRefMemberDescription">This method saves a script to
disk using the specified filename and <span class=
"NDLSystemFont">NiScriptInfo</span> object. Error dialogs will be
created if <span class="NDLSystemFont">bVerboseErrors</span> is
true. The script IS NOT added to the manager.</p>

<p class="NDLRefMemberFunction">static ReturnCode
GetLastReturnCode()</p>

<p class="NDLRefMemberDescription">If any of the previous static
methods returns <span class="NDLSystemFont">NULL</span> then the
last error can be accessed using this method.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">ReturnCode
AddScript(const char* pcPath, bool bVerboseErrors = true)</p>

<p class="NDLRefMemberFunction">ReturnCode
AddScript(NiScriptInfo* pkInfo, bool bTemplate = false,
bool bVerboseErrors = true)</p>

<p class="NDLRefMemberDescription">Add a script to the set of
known scripts. If this file was loaded from disk then specify
that it is a template, otherwise do not. Verbose errors will
create error dialogs where required.</p>

<p class="NDLRefMemberFunction">ReturnCode
AddScriptDirectory(const char* pcPath, bool bRecurse = true,
bool bVerboseErrors = false)</p>

<p class="NDLRefMemberDescription">Add any scripts found in a
directory (and possibly all subdirectories) to the set of known
scripts.</p>

<p class="NDLRefMemberFunction">NiScriptInfoPtr
RemoveScript(const char* pcScript)</p>

<p class="NDLRefMemberDescription">Remove a script from the set
of known scripts.</p>

<p class="NDLRefMemberFunction">void RemoveAllScripts()</p>

<p class="NDLRefMemberDescription">Removes all known scripts.</p>

<p class="NDLRefMemberFunction">ReturnCode
WriteScript(NiScriptInfo* pkScriptInfo, const char* pcFilename,
bool bVerboseErrors = false)</p>

<p class="NDLRefMemberDescription">Writes a script out to disk
using the extension of the filename to determine which writer to
use. Verbose errors will enable the creation of error dialogs
where appropriate.</p>

<p class="NDLRefMemberFunction">NiScriptInfo*
GetScript(const char* pcName)</p>

<p class="NDLRefMemberDescription">Get a script by name.</p>

<p class="NDLRefMemberFunction">unsigned int GetScriptCount()</p>

<p class="NDLRefMemberDescription">Get the number of known
scripts.</p>

<p class="NDLRefMemberFunction">NiScriptInfo*
GetScriptAt(unsigned int ui)</p>

<p class="NDLRefMemberDescription">Get the script at the
specified position.</p>

<p class="NDLRefMemberFunction">unsigned int
GetScriptIndex(const char* pcName)</p>

<p class="NDLRefMemberDescription">Get the index of the script by
the specified name.</p>

<p class="NDLRefMemberFunction">void
AddScriptReader(NiScriptReader* pkReader)</p>

<p class="NDLRefMemberDescription">Adds a script reader to the
set of known script readers.</p>

<p class="NDLRefMemberFunction">void
AddScriptWriter(NiScriptWriter* pkWriter)</p>

<p class="NDLRefMemberDescription">Adds a script writer to the
set of known script writers.</p>

<p class="NDLRefMemberFunction">NiString
ExtractExtension(NiString strPath)</p>

<p class="NDLRefMemberDescription">Extracts the extension from a
file path string.</p>

<p class="NDLRefMemberFunction">NiScriptReader*
GetReaderForExtension(const char* pcExt)</p>

<p class="NDLRefMemberDescription">Returns the <span class=
"NDLSystemFont">NiScriptReader</span> object that can handle the
given extension.</p>

<p class="NDLRefMemberFunction">NiScriptWriter*
GetWriterForExtension(const char* pcExt)</p>

<p class="NDLRefMemberDescription">Returns the <span class=
"NDLSystemFont">NiScriptWriter</span> object that can handle the
given extension.</p>

<p class="NDLRefMemberFunction">NiScriptInfoSet&amp;
GetScriptInfoSet()</p>

<p class="NDLRefMemberDescription">Get the <span class=
"NDLSystemFont">NiScriptInfoSet</span> containing all known
scripts.</p>

<p class="NDLRefMemberFunction">NiScriptInfoPtr
ReplaceScript(NiScriptInfo* pkNewScript)</p>

<p class="NDLRefMemberDescription">This method uses the name of
the input script to locate the script it needs to replace. If a
script of the same name is not present, it adds to the end of
this set. Otherwise, it copies over the script in the set.</p>

<p class="NDLRefMemberFunction">
NiTPtrSet&lt;NiScriptReaderPtr&gt;&amp; GetAllReaders()</p>

<p class="NDLRefMemberDescription">Get a set containing pointers
to all the script reader objects. Used when writing files.</p>

<p class="NDLRefMemberFunction">
NiTPtrSet&lt;NiScriptWriterPtr&gt;&amp; GetAllWriters()</p>

<p class="NDLRefMemberDescription">Get a set containing pointers
to all the script writer objects. Used when writing files.</p>

<p class="NDLRefMemberFunction">const char*
GetLastDirectoryAdded()</p>

<p class="NDLRefMemberDescription">Get the last directory added
to the ScriptTemplateManager</p>

<p class="NDLRefHead1">Notes</p>

<p class="NDLRefHead2">ReturnCodes</p>

<!--(Table)=========================================================-->
<table>
    <thead>
        <tr>
            <th>Meaning</th>

            <th>Value</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><span class=
            "NDLSystemFont">UNKNOWN_ERROR</span></td>

            <td>-1</td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">SUCCESS</span></td>

            <td>1</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">FILE_NOT_FOUND</span></td>

            <td>2</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">DIRECTORY_NOT_FOUND</span></td>

            <td>3</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">FILE_PARSE_ERROR</span></td>

            <td>4</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">NO_READER_FOR_FILE</span></td>

            <td>5</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">NO_WRITER_FOR_FILE</span></td>

            <td>6</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">IO_FAILURE</span></td>

            <td>7</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCRIPT_OF_SAME_NAME_ALREADY_EXISTS</span></td>

            <td>8</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">NULL_INPUT_SCRIPT</span></td>

            <td>9</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SCRIPT_IGNORED</span></td>

            <td>10</td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">CANCELLED</span></td>

            <td>11</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">NO_SCRIPTS_FOUND</span></td>

            <td>12</td>
        </tr>
    </tbody>
</table>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
