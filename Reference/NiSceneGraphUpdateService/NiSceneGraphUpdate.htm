<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiSceneGraphUpdate</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiSceneGraphUpdate</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../efd/efd__MemObject.htm">efd::MemObject</a></span></p>


<p class="NDLRefHeaderFile">&lt;NiSceneGraphUpdate.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/class_ni_scene_graph_update.gif" alt="Inheritance graph for NiSceneGraphUpdate"/>
  <p class="FigureCaption">Inheritance graph for NiSceneGraphUpdate</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">The <span class="NDLSystemFont">NiSceneGraphUpdate</span> replicates a Gamebryo scene graph across a network connection. </p>
<p class="NDLNormal">This singleton manages the updates to a cache of NiObjects that can be replicated to other <span class="NDLSystemFont">NiSceneGraphUpdate</span> instances. The object enables an editor to send an entire scene graph or incremental changes (as small as an individual <span class="NDLSystemFont"><a href="../NiMain/NiObject.htm">NiObject</a></span>) to one or more viewers.</p>
<p class="NDLNormal">Two derived classes (<span class="NDLSystemFont"><a href="NiEditorSceneGraphUpdate.htm">NiEditorSceneGraphUpdate</a></span> and <span class="NDLSystemFont"><a href="NiViewerSceneGraphUpdate.htm">NiViewerSceneGraphUpdate</a></span>) specialize the class for use in the corresponding application. Use one of these derived classes instead of <span class="NDLSystemFont">NiSceneGraphUpdate</span> when creating an application. </p>

<a name="public_types"></a>
<p class="NDLRefHead1">Public Types</p>
<a name="class_ni_scene_graph_update_1acc3669e9c7fdb6d91057ed1cf52c0a1e"></a>
<p class=NDLRefHead2>NiSceneGraphUpdate::MessageType</p>


<p class="NDLRefMemberDescription">Messages exchanged between <span class="NDLSystemFont">NiSceneGraphUpdate</span> instances across the network. </p>


<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">MESSAGE_INVALID</span></td>
    <td>Invalid message ID. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">MESSAGE_VIEWER_ADDED</span></td>
    <td>This message is sent by the viewer after it connects to the network. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">MESSAGE_VIEWER_REMOVED</span></td>
    <td>This message is sent by the viewer before it disconnects from the network. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">MESSAGE_EDITOR_STARTED</span></td>
    <td>This message is sent by the editor after it connects to the network. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">MESSAGE_EDITOR_STOPPED</span></td>
    <td>This message is sent by the editor before it disconnects from the network. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">MESSAGE_SET_ROOT_NODE</span></td>
    <td>Set the root scene graph node for replicated scene graph. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">MESSAGE_SET_ACTIVE_CAMERA</span></td>
    <td>Set the current camera object for viewers. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">MESSAGE_UPDATE_OBJECT</span></td>
    <td>Update an object in-place in a replicated scene graph. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">MESSAGE_REPLACE_OBJECT</span></td>
    <td>Replace an existing object in a replicated scene graph. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">MESSAGE_REMOVE_OBJECT</span></td>
    <td>Remove object from replicated scene graph. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">MESSAGE_REQUEST_OBJECT</span></td>
    <td>The viewer requests an object. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">MESSAGE_SCENE_DIRTY</span></td>
    <td>Changes have been made to the scene in the editor. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">MESSAGE_SCENE_CLEAN</span></td>
    <td>All update messages have been processed. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">MESSAGE_UPDATE_SETTINGS</span></td>
    <td>Config settings have been updated. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">MESSAGE_COUNT</span></td>
    <td>Total number of message types. </td>
</tr>

  </tbody>
</table>
</div>

<a name="class_ni_scene_graph_update_1af3a78e909f327c63732b3c275b2ecb55"></a>
<p class=NDLRefHead2>NiSceneGraphUpdate::ObjectState</p>


<p class="NDLRefMemberDescription">State of individual replicated objects. </p>


<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">OS_CLEAN</span></td>
    <td>The object is up-to-date. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">OS_UPDATE</span></td>
    <td>Update an existing object in-place. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">OS_REPLACE</span></td>
    <td>Replace an existing object. </td>
</tr>

  </tbody>
</table>
</div>

<a name="class_ni_scene_graph_update_1aac774a092c641547bc122113c42de481"></a>
<p class=NDLRefHead2>anonymous enum</p>




<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">NI_DEFAULT_PORT</span></td>
    <td>Default port to be used for editor-to-viewer communication. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">NI_INVALID_PORT</span></td>
    <td>Invalid port number for <span class="NDLSystemFont">NiSceneGraphUpdate</span>. </td>
</tr>

  </tbody>
</table>
</div>



<a name="class_ni_scene_graph_update_1a0276d43a6923a30e820e6b9d18b5dac6"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont">bool</span>(*  NISCENEGRAPHUPDATE_SCENEREADYCALLBACK)(void *pkParam)</p>
<p class="NDLRefMemberDescription">Function to set the scene ready callback. </p>
<p class="NDLRefMemberDetailedDescription">This gets called when the root node has been set. </p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="class_ni_scene_graph_update_1a220369812cb046c20ec8ac38672fc684"></a>
<p class="NDLRefMemberFunction">NiSceneGraphUpdate()</p>
<p class="NDLRefMemberDescription">Initialize object. </p>

<a name="class_ni_scene_graph_update_1a7c194fd3ddd0786dedba8f701a232d73"></a>
<p class="NDLRefMemberFunction">virtual ~NiSceneGraphUpdate()</p>
<p class="NDLRefMemberDescription">Destroy scene graph and shutdown network communication services. </p>

<a name="class_ni_scene_graph_update_1a2fbca552f5f90b0f20fe75024902b68e"></a>
<p class="NDLRefMemberFunction">void  SetupLogging(const char* pcLogName)</p>
<p class="NDLRefMemberDescription">Creates log for debug and release builds. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pcLogName</span></td>
    <td>Log file name (can be absolute or relative to current working directory) </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_scene_graph_update_1acf91a4bdb3b38f8d43c6548397be804c"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  Connect(<br/>const char* pcChannelMgrHost, <br/><span class="NDLSystemFont">NiUInt16</span> usChannelMgrPort)</p>
<p class="NDLRefMemberDescription">Used by viewer to establish a connection with a editor running on a specific host. </p>
<p class="NDLRefMemberDetailedDescription">Use <span class="NDLSystemFont"><a href="NiSceneGraphUpdate.htm#class_ni_scene_graph_update_1ac2e1a6e5c9bd6678c2d04ca9ef8f82a6">GetStatusMsg()</a></span> method to determine current connection status.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pcChannelMgrHost</span></td>
    <td>IP address of the machine running editor </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">usChannelMgrPort</span></td>
    <td>Port number to connect to </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if an attempt to connect will be made on the next tick, false if the <span class="NDLSystemFont"><a href="NiSceneGraphUpdateService.htm">NiSceneGraphUpdateService</a></span> has not been successfully created. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_scene_graph_update_1aef811cd178ab18dc2c7f6dd6f0c5f000"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiUInt16</span>  GetRemotePort()</p>
<p class="NDLRefMemberDescription">Returns the port number used by underlying <span class="NDLSystemFont"><a href="NiSceneGraphUpdateService.htm">NiSceneGraphUpdateService</a></span> to connect to the editor. </p>

<a name="class_ni_scene_graph_update_1a8b1420f2d66048bdfbb2611915bb18ca"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  Send(<br/><span class="NDLSystemFont"><a href="NiSceneGraphUpdate.htm#class_ni_scene_graph_update_1acc3669e9c7fdb6d91057ed1cf52c0a1e">MessageType</a></span> eType, <br/>const <span class="NDLSystemFont"><a href="NiSceneGraphUpdateObjectId.htm">NiSceneGraphUpdateObjectId</a></span>& kId = NiSceneGraphUpdateObjectId::NULL_OBJECT_ID, <br/><span class="NDLSystemFont"><a href="NiSceneGraphUpdateObject.htm">NiSceneGraphUpdateObject</a></span>* pkObject = 0)</p>
<p class="NDLRefMemberDescription">Queues message with the <span class="NDLSystemFont"><a href="NiSceneGraphUpdateService.htm">NiSceneGraphUpdateService</a></span> to be sent across the network. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">eType</span></td>
    <td>Type identifies the purpose of the message </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kId</span></td>
    <td>A unique identifier assigned by the editor to associate objects on the viewer with objects on the editor </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkObject</span></td>
    <td>The object to be transmitted across the network connection </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the messages was successfully queued </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_scene_graph_update_1aaef229ff31a12350d31b05be1ca230b8"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  SendImmediate(<br/><span class="NDLSystemFont"><a href="NiSceneGraphUpdate.htm#class_ni_scene_graph_update_1acc3669e9c7fdb6d91057ed1cf52c0a1e">MessageType</a></span> eType, <br/>const <span class="NDLSystemFont"><a href="NiSceneGraphUpdateObjectId.htm">NiSceneGraphUpdateObjectId</a></span>& kId = NiSceneGraphUpdateObjectId::NULL_OBJECT_ID, <br/><span class="NDLSystemFont"><a href="NiSceneGraphUpdateObject.htm">NiSceneGraphUpdateObject</a></span>* pkObject = 0)</p>
<p class="NDLRefMemberDescription">Immediately send message across the network. </p>
<p class="NDLRefMemberDetailedDescription">This method queues message and immediately ticks the <span class="NDLSystemFont"><a href="NiSceneGraphUpdateService.htm">NiSceneGraphUpdateService</a></span> until it has been sent across the network.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">eType</span></td>
    <td>Type identifies the purpose of the message </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kId</span></td>
    <td>A unique identifier assigned by the editor to associate objects on the viewer with objects on the editor </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkObject</span></td>
    <td>The object to be transmitted across the network connection </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the messages was successfully sent, false if the method timed out </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_scene_graph_update_1a9db79a8a53706a2092e3de3b1e31bfa2"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  Update() = 0</p>
<p class="NDLRefMemberDescription">Pure virtual method implemented by editor and viewer subclasses. </p>

<a name="class_ni_scene_graph_update_1a8364d8f55ceb230effd3d6e8f427010a"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  Start(<span class="NDLSystemFont">NiUInt32</span> uiWaitForNetworkInitInSec = 0)</p>
<p class="NDLRefMemberDescription">Start replicating scene graph from editor to viewers. </p>
<p class="NDLRefMemberDetailedDescription">Internally, the method flips the Ready flag to true.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">uiWaitForNetworkInitInSec</span></td>
    <td>If the caller specified a non-zero value, this method will wait until the network connection is established before returning </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>False if a wait time was specified and the network connection was not established before the time out </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_scene_graph_update_1a86d71f5242769cb6b2e6cee6e034361e"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  Stop()</p>
<p class="NDLRefMemberDescription">Halts replication of the scene graph. </p>

<a name="class_ni_scene_graph_update_1a3481f0fb234f2dd10591dc6b0a0e2804"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  Refresh()</p>
<p class="NDLRefMemberDescription">Intended to be overridden by editor to indicate when a Refresh has started. </p>

<a name="class_ni_scene_graph_update_1aac9183036f27d03ae4905f563746e929"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  AddObject(<br/>const <span class="NDLSystemFont"><a href="NiSceneGraphUpdateObjectId.htm">NiSceneGraphUpdateObjectId</a></span> kId, <br/><span class="NDLSystemFont"><a href="../NiMain/NiObject.htm">NiObject</a></span>* pkNiObject)</p>
<p class="NDLRefMemberDescription">Insert an object object to be replicated from editors to viewers. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kId</span></td>
    <td>Unique identifier defined by the editor </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkNiObject</span></td>
    <td>The object to be replicated </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_scene_graph_update_1ae9061f997abe24f34ca1d2c2005e22a0"></a>
<p class="NDLRefMemberFunction">virtual void  UpdateAllObjects()</p>
<p class="NDLRefMemberDescription">Send all objects in the local cache to viewers and then set camera, set root node, and send config settings to match editor settings. </p>

<a name="class_ni_scene_graph_update_1a31e939d10efa2be4a341bf896a3a29da"></a>
<p class="NDLRefMemberFunction">virtual void  RemoveAllObjects()</p>
<p class="NDLRefMemberDescription">Remove all replicated objects from viewers. </p>

<a name="class_ni_scene_graph_update_1aa8cbe1798a92d49b39d791499bb72c8d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  AddObjects(const <span class="NDLSystemFont"><a href="../NiMain/NiTMap.htm">NiTMap</a></span>&lt;<span class="NDLSystemFont"><a href="NiSceneGraphUpdateObjectId.htm">NiSceneGraphUpdateObjectId</a></span>, <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">NiObjectPtr</a></span>&gt;& kAddObjects)</p>
<p class="NDLRefMemberDescription">Inserts multiple objects with corresponding IDs into local object cache to be replicated to viewers. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kAddObjects</span></td>
    <td>Objects and IDs assigned by the editor </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if objects were successfully inserted </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_scene_graph_update_1a5ab690f543402d6a6881d5e23fe26fcf"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsInsertNode(const <span class="NDLSystemFont"><a href="../NiMain/NiNode.htm">NiNode</a></span>* pkNode) const</p>
<p class="NDLRefMemberDescription">Has the node been added to the insert list? </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pkNode</span></td>
    <td>Node in question </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if object is in the insert list </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_scene_graph_update_1ac335f0703b046460f27281539221e285"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsInsertNode(const <span class="NDLSystemFont"><a href="NiSceneGraphUpdateObjectId.htm">NiSceneGraphUpdateObjectId</a></span>& kId) const</p>
<p class="NDLRefMemberDescription">Has the node been added to the insert list? </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kId</span></td>
    <td>Unique ID assigned by editor that identifies object in question </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if object is in the insert list </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_scene_graph_update_1a3c53aa863465dac364ff59f1e019fdfd"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  AddInsertNode(<br/>const <span class="NDLSystemFont"><a href="NiSceneGraphUpdateObjectId.htm">NiSceneGraphUpdateObjectId</a></span>& kId, <br/><span class="NDLSystemFont"><a href="../NiMain/NiNode.htm">NiNode</a></span>* pkNode)</p>
<p class="NDLRefMemberDescription">Insert node into the insert list of objects to be replicated. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kId</span></td>
    <td>Unique ID of the node to be added to scene graph </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkNode</span></td>
    <td>New node </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if object is successfully added </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_scene_graph_update_1a059446f3083a4934800cc467c906f1fd"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  RemoveInsertNode(const <span class="NDLSystemFont"><a href="NiSceneGraphUpdateObjectId.htm">NiSceneGraphUpdateObjectId</a></span>& kId)</p>
<p class="NDLRefMemberDescription">Removes node from insert list. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kId</span></td>
    <td>The unique ID of the object to remove </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the node was found and successfully removed </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_scene_graph_update_1aa8b5e548b5f5352822509b75b3fd4e04"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsReady() const</p>
<p class="NDLRefMemberDescription">Returns true if replication is active. </p>

<a name="class_ni_scene_graph_update_1a385113716606e43e4001820b2e12e334"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsDirty() const</p>
<p class="NDLRefMemberDescription">Returns true if there are pending updates from the editor. </p>

<a name="class_ni_scene_graph_update_1a8e2ac40c1c25b3f7f813ad0559b3752f"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">NiSceneGraphUpdateObjectPtr</a></span>  GetObject(const <span class="NDLSystemFont"><a href="NiSceneGraphUpdateObjectId.htm">NiSceneGraphUpdateObjectId</a></span>& kId) const</p>
<p class="NDLRefMemberDescription">Returns the object from local cache identified by unique ID. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kId</span></td>
    <td>ID assigned by editor application </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Smart pointer to object, if it exits in the local cache </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_scene_graph_update_1af43e56e6759e69fce588d2da324aac44"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiSceneGraphUpdateObjectId.htm">NiSceneGraphUpdateObjectId</a></span>  GetObjectId(const <span class="NDLSystemFont"><a href="../NiMain/NiObject.htm">NiObject</a></span>* pkObject) const</p>
<p class="NDLRefMemberDescription">Returns the unique object ID for the specified object. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pkObject</span></td>
    <td>The object in question </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Object ID or <span class="NDLSystemFont"><a href="NiSceneGraphUpdateObjectId.htm#class_ni_scene_graph_update_object_id_1a8aaf523a6acf7df647f7c8aff2f979b5">NiSceneGraphUpdateObjectId::NULL_OBJECT_ID</a></span> if the object can not be found in the local cache </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_scene_graph_update_1a2b0476b5cb79e70b4b0c7d491f9f0722"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiSceneGraphUpdateSettings.htm">NiSceneGraphUpdateSettings</a></span>&  GetSettings()</p>
<p class="NDLRefMemberDescription">Returns the settings object for the <span class="NDLSystemFont">NiSceneGraphUpdate</span> singleton. </p>

<a name="class_ni_scene_graph_update_1a0b3aab7a82a967e4799b3c95dbee3b2b"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../NiMain/NiNode.htm">NiNode</a></span>*  GetRootNode()</p>
<p class="NDLRefMemberDescription">Returns the root node of the scene graph being replicated. </p>

<a name="class_ni_scene_graph_update_1a88bbf9a080dc0f6654a5a09a6bbb4ab8"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiSceneGraphUpdateObjectId.htm">NiSceneGraphUpdateObjectId</a></span>  GetRootNodeId() const</p>
<p class="NDLRefMemberDescription">Returns the unique ID of the scene graph root being replicated. </p>

<a name="class_ni_scene_graph_update_1a136e6d58827ba8b8a94ea2e5e8fe1069"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../NiMain/NiCamera.htm">NiCamera</a></span>*  GetActiveCamera()</p>
<p class="NDLRefMemberDescription">Returns the camera object set by the editor. </p>
<p class="NDLRefMemberDetailedDescription">The viewer can chose to use this object or not. </p>

<a name="class_ni_scene_graph_update_1adb1d462f791e83652da695c94b6f79b6"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiSceneGraphUpdateObjectId.htm">NiSceneGraphUpdateObjectId</a></span>  GetActiveCameraId() const</p>
<p class="NDLRefMemberDescription">Returns the unique ID for the camera object set by the editor. </p>

<a name="class_ni_scene_graph_update_1a1ca4efd7f597eeed18fa7b99ee38edfa"></a>
<p class="NDLRefMemberFunction">void  UpdateObject(<br/>const <span class="NDLSystemFont"><a href="NiSceneGraphUpdateObjectId.htm">NiSceneGraphUpdateObjectId</a></span>& kId, <br/><span class="NDLSystemFont"><a href="../NiMain/NiObject.htm">NiObject</a></span>* pkNiObject)</p>
<p class="NDLRefMemberDescription">Replace object in replicated scene graphs with caller-supplied object. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kId</span></td>
    <td>The unique editor-assigned ID of the object to be replaced </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkNiObject</span></td>
    <td>The new object </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_scene_graph_update_1a19bf7065d32d569f5cd406ef575c0211"></a>
<p class="NDLRefMemberFunction">void  RemoveObject(const <span class="NDLSystemFont"><a href="NiSceneGraphUpdateObjectId.htm">NiSceneGraphUpdateObjectId</a></span>& kId)</p>
<p class="NDLRefMemberDescription">Remove object from replicated scene graphs. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kId</span></td>
    <td>The unique editor-assigned ID of the object to be removed </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_scene_graph_update_1a6af1beed5716c332a77516afa4278825"></a>
<p class="NDLRefMemberFunction">void  CleanupObjects()</p>
<p class="NDLRefMemberDescription">Update properties and effects on the entire cached scene graph. </p>

<a name="class_ni_scene_graph_update_1a799da066ae5f26180cacc06cd063a7f5"></a>
<p class="NDLRefMemberFunction">virtual void  PostHandleUpdateObject()</p>
<p class="NDLRefMemberDescription">This method is called after objects have been received and inserted into the scene graph. </p>

<a name="class_ni_scene_graph_update_1a3a30eba8aae5da58d9dbcedcf1687de8"></a>
<p class="NDLRefMemberFunction">virtual void  PostHandleRemoveObject()</p>
<p class="NDLRefMemberDescription">This method is called after objects have been removed from the replicated scene graph. </p>

<a name="class_ni_scene_graph_update_1a5bd35784e2aec9f57adc747a18645a1b"></a>
<p class="NDLRefMemberFunction">virtual void  PostHandleUpdateSettings()</p>
<p class="NDLRefMemberDescription">This method is called after the config settings have been updated. </p>

<a name="class_ni_scene_graph_update_1a95bc8d842509cb629c5cbd2485cbc4bd"></a>
<p class="NDLRefMemberFunction">void  SetSceneReadyCallback(<br/><span class="NDLSystemFont"><a href="NiSceneGraphUpdate.htm#class_ni_scene_graph_update_1a0276d43a6923a30e820e6b9d18b5dac6">NISCENEGRAPHUPDATE_SCENEREADYCALLBACK</a></span> pfnSceneReadyCallback, <br/>void* pkParam)</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_scene_graph_update_1ac2e1a6e5c9bd6678c2d04ca9ef8f82a6"></a>
<p class="NDLRefMemberFunction">const char*  GetStatusMsg() const</p>
<p class="NDLRefMemberDescription">Returns a brief message about the connection status. </p>
<a name="public_static_methods"></a>
<p class="NDLRefHead1">Public Static Methods</p>


<a name="class_ni_scene_graph_update_1a38a9163b696746855050a8297471d635"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  IsObjectStateDirty(const <span class="NDLSystemFont">NiUInt32</span> uiState)</p>
<p class="NDLRefMemberDescription">Helper function that returns false if state is not clean. </p>

<a name="class_ni_scene_graph_update_1aed9f0292ba7eb287adf9cae528749fd9"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">NiSceneGraphUpdate</span>*  GetInstance()</p>
<p class="NDLRefMemberDescription">Returns the singleton. </p>

<a name="class_ni_scene_graph_update_1a710cfcd8d887e011b1ee8120233c6efd"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">NiUInt16</span>  GetListenPort()</p>
<p class="NDLRefMemberDescription">Returns the port number that the editor listens for connections on. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
