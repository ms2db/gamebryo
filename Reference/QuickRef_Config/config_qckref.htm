<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Configuration Options Quick Reference</title>

<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->

<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>

<!--(Begin Body)================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Configuration Options Quick Reference</h1>

<p>This page summarizes the set of configuration options recognized by Gamebryo LightSpeed. See
<a href="../../Programmer/Game_Initialization/game_init_configuration.htm">Configuring an
Application</a> for help in creating your own configuration options.</p>

<p>This page is arranged alphabetically by configuration Section.</p>

<a name="AssetWeb" id="AssetWeb"></a><h4>AssetWeb</h4>

<p>This section is recognized by the <a href=
"../../Programmer/AssetRuntimeService/asset_runtime_intro.htm">Asset Runtime Service</a>. It is
used to setup the location of the Asset Web Root where the game assets are located, configure the
game to connect to an Asset Controller (for rapid iteration), and to control the operation of the
Asset Controller when used as a CLI tool.</p>

<table class="NDLNoteContainer" width="100%">
    <tr align="left">
        <td class="NDLNoteContainerTD">
            <p class="NDLHeadingNoteContainer">Note</p>

            <div class="NDLNote">
                Only one of the Asset Controller command line tool options (AssetWeb.ExportAndExit,
                AssetWeb.TestAndExit or AssetWeb.ListAssets) can be specified at a time.
            </div>
        </td>
    </tr>
</table>

<table>
    <thead>
        <tr>
            <th>Key Name</th>

            <th>Value Type</th>

            <th>Value Default</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>Path</td>

            <td>String</td>

            <td>&lt;empty string&gt;</td>

            <td>The path to the Asset Web Root directory that has all the game assets. This can be
            a relative path from where the executable is located or an absolute path.</td>
        </tr>

        <tr>
            <td>OverrideSystemId</td>

            <td>Boolean</td>

            <td>false</td>

            <td>This parameter is used to configure rapid iteration when a second PC is utilized to
            run the game. When set to "true", this parameter will allow the game to connect to a
            different PC running Toolbench. The asset-web used by the game must have been made by
            the PC running Toolbench. For additional information, see <a href=
            "../../Programmer/AssetRuntimeService/asset_runtime_deploying_assets.htm">Deploying
            assets.</a></td>
        </tr>

        <tr>
            <td>UseDefaultChannelMgr</td>

            <td>Boolean</td>

            <td>false</td>

            <td>This parameter is used to configure rapid iteration when the game is run on a
            console or secondary PC that is located on a different subnet from the PC running
            Toolbench. For additional information, see <a href=
            "../../Programmer/AssetRuntimeService/asset_runtime_config.htm">Configuring the Asset
            Runtime Service.</a></td>
        </tr>

        <tr>
            <td>UseAssetHost</td>

            <td>String</td>

            <td>&lt;empty string&gt;</td>

            <td>This parameter is used to configure rapid iteration for a multi-player game when it
            is run on a console or secondary PC that is located on a different subnet from the PC
            running Toolbench. The value should be the Hostname or IP address of the PC that is
            running Toolbench.</td>
        </tr>

        <tr>
            <td>ExportAndExit</td>

            <td>Boolean</td>

            <td>false</td>

            <td>This parameter is used by the Asset Controller. When set to "true", the Asset
            Controller will just iterate over all assets, updating the metadata as necessary for
            assets that were added or removed.</td>
        </tr>

        <tr>
            <td>TestAndExit</td>

            <td>Boolean</td>

            <td>false</td>

            <td>This parameter is used by the Asset Controller. When set to "true", the Asset
            Controller will execute the query tests specified in the "QueryTest#" parameters.</td>
        </tr>

        <tr>
            <td>QueryTest#</td>

            <td>String</td>

            <td>&lt;empty string&gt;</td>

            <td>This parameter is used by the Asset Controller. You can specify this parameter as
            many times as you need; each specifying one asset lookup test such as
            "QueryTest#=urn:gamebryo-scenegraph:orge".</td>
        </tr>

        <tr>
            <td>ListAssets</td>

            <td>String</td>

            <td>&lt;empty string&gt;</td>

            <td>This parameter is used by the Asset Controller. You specify an asset lookup string
            as the value of this parameter and the Asset Controller will generate a list of assets
            that are returned by the lookup.</td>
        </tr>

        <tr>
            <td>PreloadGraphs</td>

            <td>Boolean</td>

            <td>true</td>

            <td>This parameter is used by the Asset Controller and AssetLocatorService
            to determine if all *.nt files should be loaded when an AssetWeb is loaded.
            If this flag is set to false, we wait until new tags are used in queries
            before we load their corresponding *.nt file.</td>
        </tr>
    </tbody>
</table>

<a name="BridgeService" id="BridgeService"></a><h4>BridgeService</h4>

<p>This section is recognized by the <a href=
"../efdNetwork/efd__BridgeService.htm">efd::BridgeService</a> class.</p>

<table>
    <thead>
        <tr>
            <th>Key Name</th>

            <th>Value Type</th>

            <th>Value Default</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>NetLibType</td>

            <td>String</td>

            <td>NetLibTCP</td>

            <td>Type of the incoming network library.</td>
        </tr>

        <tr>
            <td>Port</td>

            <td>Integer</td>

            <td>12210</td>

            <td>Port to use for receiving incoming network traffic.</td>
        </tr>
    </tbody>
</table>

<a name="ChannelManager" id="ChannelManager"></a><h4>ChannelManager#</h4>

<p>This section is recognized by the <a href=
"../efdNetwork/efd__NetService.htm">efd::NetService</a> and <a href=
"../efdNetwork/efd__ChannelManagerService.htm">efd::ChannelManagerService</a> classes.</p>

<table class="NDLNoteContainer" width="100%">
    <tr align="left">
        <td class="NDLNoteContainerTD">
            <p class="NDLHeadingNoteContainer">Note</p>

            <div class="NDLNote">
                Multiple ChannelManager sections are expected in the config file, each with a
                different number at the end. (As in: ChannelManager1, ChannelManager2, etc.) By
                using the # sign after the section name, the ConfigManager will automatically
                generate a number. So a config that contains multiple ChannelManager# section names
                will be translated into section names with unique numbers automatically. Therefore
                it is always best to use a section name of <b>ChannelManager#</b> in all config
                files.
            </div>
        </td>
    </tr>
</table>

<table>
    <thead>
        <tr>
            <th>Key Name</th>

            <th>Value Type</th>

            <th>Value Default</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>Hostname</td>

            <td>String</td>

            <td>127.0.0.1 (localhost)</td>

            <td>The name or IP of the host that is running the Channel Manager that will manage the
            channel.</td>
        </tr>

        <tr>
            <td>Port</td>

            <td>Integer</td>

            <td>13215</td>

            <td>The port of the host to connect to.</td>
        </tr>

        <tr>
            <td>QualityOfService</td>

            <td>String</td>

            <td>QOS_RELIABLE</td>

            <td>One of three quality of service level strings: QOS_RELIABLE, QOS_UNRELIABLE, or
            QOS_CONNECTIONLESS</td>
        </tr>

        <tr>
            <td>FailInUse</td>

            <td>Boolean</td>

            <td>false</td>

            <td>Tells ChannelManagerService if a failure to bind to a configured port should be
            treated as a failure. If set to true ChannelManagerService will return
            efd::AsyncResult_Failure from OnTick if the configured port is in use. Before returning
            failure ChannelManagerService first sends an immediate message of type
            MessageWrapper&lt;StreamMessage, kMSGID_ChannelManagerPortInUse&gt; to Category
            MessageService::GetServicePublicCategory(ChannelManagerService::CLASS_ID) with the port
            (UInt16) followed by the QualityOfService (UInt32) of the section that failed to bind
            streamed into the message.</td>
        </tr>
    </tbody>
</table>

<a name="LogicalIdTagger0" id="LogicalIdTagger0"></a><h4>DirectoryTagger</h4>

<p>This section is recognized by the Directory Tagger in the Asset Controller application and
should only exist in the DirectoryTagger.ini file. It is used to configure the efd::DirectoryTagger
class.</p>

<table>
    <thead>
        <tr>
            <th>Key Name</th>

            <th>Value Type</th>

            <th>Value Default</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>Classes</td>

            <td>List of String pairs</td>

            <td>No class</td>

            <td>List of asset classifications for directory names. Each value takes the form of
            'DirName=ClassName'.</td>
        </tr>

        <tr>
            <td>Labels</td>

            <td>List of String pairs</td>

            <td>No label</td>

            <td>List of label tags for directory names. Each value takes the form of
            'DirName=LabelName'. These labels are used to create groupings of assets that are
            related (e.g. for caching or level loading).</td>
        </tr>
    </tbody>
</table>

<a name="enum" id="enum"></a><h4>Enum</h4>

<p>This section is recognized by the <a href="../efd/efd__EnumManager.htm">efd::EnumManager</a>
class. It is used to configure the path to the directory where enum files are located.</p>

<table>
    <thead>
        <tr>
            <th>Key Name</th>

            <th>Value Type</th>

            <th>Value Default</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>Path</td>

            <td>String</td>

            <td>"D:" for Xbox360<br>
            "." for other platforms</td>

            <td>Path to the directory where enum files are located.</td>
        </tr>
    </tbody>
</table>

<a name="InputService" id="InputService"></a><h4>InputService</h4>

<p>This section is recognized by the <span class="NDLSystemFont"><a href=
"../ecrInput/ecrInput__InputService.htm">ecrInput::InputService</a></span> class.</p>

<table>
    <thead>
        <tr>
            <th>Key Name</th>

            <th>Value Type</th>

            <th>Value Default</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>ActionMapURN</td>

            <td>String</td>

            <td>Empty</td>

            <td>The urn of an action map that will be automatically loaded by the service upon
            start-up and used as the global action map. Note that the map is not ready until an
            <span class="NDLSystemFont"><a href=
            "../ecrInput/ecrInput__InputActionMapsLoaded.htm">ecrInput::InputActionMapsLoaded.htm</a></span>
            message is sent by the service.</td>
        </tr>
    </tbody>
</table>

<a name="Log" id="Log"></a><h4>Log</h4>

<p>This section is recognized by the <a href="../efd/efd__Logger.htm">efd::Logger</a> class.</p>

<table>
    <thead>
        <tr>
            <th>Key Name</th>

            <th>Value Type</th>

            <th>Value Default</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>ModuleEnum</td>

            <td>String</td>

            <td>efdLogIDs</td>

            <td>This parameter specifies which enum file should be loaded. When the enum file is
            loaded it allows you to use friendly string names for configuring the Log.Filters and
            also uses those friendly names in the log file output.</td>
        </tr>
    </tbody>
</table>

<a name="LogDestinations" id="LogDestinations"></a><h4>Log.Destinations</h4>

<p>This section is recognized by the <a href="../efd/efd__Logger.htm">efd::Logger</a> class. It is
used to create a new log destination.</p>

<p>Multiple Log.Destinations sections are expected in the config file, each with a different
destination name at the end. (As in: Log.Destinations.default, Log.Destinations.ErrorFile,
etc.)</p>

<table>
    <thead>
        <tr>
            <th>Key Name</th>

            <th>Value Type</th>

            <th>Value Default</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>UseDefaults</td>

            <td>Boolean</td>

            <td>false</td>

            <td>Specify "true" if you want the new log destination to have the default log filters
            applied.</td>
        </tr>

        <tr>
            <td>Type</td>

            <td>String</td>

            <td>No type</td>

            <td>One of the following types: "File", "Printf" or "DebugOut"</td>
        </tr>

        <tr>
            <td>FileName</td>

            <td>String</td>

            <td>No file name</td>

            <td>Used for the destination type of "File" to specify the log file name.</td>
        </tr>

        <tr>
            <td>FileMode</td>

            <td>String</td>

            <td>"FileOverwrite"</td>

            <td>Used for the destination type of "File" to specify the mode. The mode can be one of
            the followings: "FileAppend", "FileOverwrite", "UniqueFileName", or
            "IndexedFileName".<br>
            Given the FileName of "base.ext", specifying "UniqueFileName" will create a new log
            file every time the game runs with a name "base-nnnn.ext" where nnnn is a unique
            number.<br>
            Specifying "IndexedFileName" will create a log file with a name "base-n.ext" where n is
            only unique among the files currently in use. Only time you will see the 'n' not being
            1 is when multiple log destinations use the same FileName or you run multiple instances
            of the same game.</td>
        </tr>

        <tr>
            <td>FileInfoWithMsg</td>

            <td>Boolean</td>

            <td>false</td>

            <td>Specify true if the file and line number should be included when a log message is
            written; false otherwise.</td>
        </tr>

        <tr>
            <td>FileInfoWithAssert</td>

            <td>Boolean</td>

            <td>true</td>

            <td>Specify true if the file and line number should be included when an assert message
            is written; false otherwise.</td>
        </tr>

        <tr>
            <td>Decorate</td>

            <td>Boolean</td>

            <td>false</td>

            <td>Used for the destination types of "Printf" and "DebugOut". Specify true if you want
            headers on the log messages. The headers might include such information as time, level,
            module, file and line.</td>
        </tr>

        <tr>
            <td>FlushOnWrite</td>

            <td>Boolean</td>

            <td>false</td>

            <td>Specify true if you want the destination to call Flush after every log statement.
            For destination type of "File" every log write is flushed immediately to disk. This has
            performance implications as it will cause more blocking I/O.</td>
        </tr>
    </tbody>
</table>

<a name="LogFilters" id="LogFilters"></a><h4>Log.Filters</h4>

<p>This section is recognized by the <a href="../efd/efd__Logger.htm">efd::Logger</a> class. It is
used to set the log filters for the given log destination.</p>

<p>Multiple Log.Filters sections are expected in the config file, each with a different destination
name at the end (as in: Log.Filters.ErrorFile, Log.Filters.DebugOutput, etc.). This destination
name must match one of the log destination names defined in the Log.Destinations sections or
created in the code. You can create the default log filters that will apply to all log destinations
by creating the Log.Filters section with no destination name (as in [Log.Filters]).</p>

<table>
    <thead>
        <tr>
            <th>Key Name</th>

            <th>Value Type</th>

            <th>Value Default</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>(No Key)</td>

            <td>List of String pairs</td>

            <td>'ALL=UptoErr3 | UptoLvl2'</td>

            <td>Each entry takes the form "ModuleName=Log Level Mask &lt;Log Level Mask&gt;". The
            module name can be specified as an integer or as a friendly name. However, in order to
            use friendly names you need to configure Log.ModuleEnum, Enum.Path and use the
            EnumManager service.</td>
        </tr>
    </tbody>
</table>

<a name="LogLevels" id="LogLevels"></a><h4>Log.Levels</h4>

<p>This section is recognized by the <a href="../efd/efd__Logger.htm">efd::Logger</a> class. It is
used to create custom named level masks.</p>

<table>
    <thead>
        <tr>
            <th>Key Name</th>

            <th>Value Type</th>

            <th>Value Default</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>(No Key)</td>

            <td>List of String pairs</td>

            <td>No custom named level</td>

            <td>Each entry takes the form 'CustomName=level masks' and creates a new custom named
            log level mask. The 'level masks' is specified using the following pre-defined
            masks:<br>
            Err0, Err1, Err2, Err3br<br>
            Lvl0, Lvl1, Lvl2, Lvl3<br>
            UptoErr1, UptoErr2, UptoErr3<br>
            UptoLvl1, UptoLvl2, UptoLvl3<br>
            <br>
            You can also 'or' them as follows for example:<br>
            UptoErr3 | UptoLvl3</td>
        </tr>
    </tbody>
</table>

<a name="LogicalIdTagger" id="LogicalIdTagger"></a><h4>LogicalIdTagger</h4>

<p>This section is recognized by the Logical ID Tagger in the Asset Controller application and
should only exist in the LogicalIdTagger.ini file. It is used to configure the efd::LogicalIdTagger
class.</p>

<table>
    <thead>
        <tr>
            <th>Key Name</th>

            <th>Value Type</th>

            <th>Value Default</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>PersistentIds</td>

            <td>Boolean</td>

            <td>No default value</td>

            <td>When set to "True", the logical id's are created as one-time hash values that are
            re-generatable and are not persisted. When set to "False" they are created as GUID
            values that are persisted.</td>
        </tr>

        <tr>
            <td>Classes</td>

            <td>List of Strings</td>

            <td>No class</td>

            <td>List of asset classifications. These are reflected in the sub-directory names where
            the assets are stored.</td>
        </tr>

        <tr>
            <td>Assets</td>

            <td>List of Strings</td>

            <td>No asset</td>

            <td>List of asset types (assigned by the MimeTagger) that should have logical asset
            id's assigned to them. If the asset does not possess one of these tags, then no logical
            asset id is created for it. Logical asset id's are only needed for assets that will be
            referenced by other asset files such as block or model files.</td>
        </tr>
    </tbody>
</table>

<a name="MimeTagger" id="MimeTagger"></a><h4>MimeTagger</h4>

<p>This section is recognized by the MIME Tagger in the Asset Controller application and should
only exist in the ini files found in the "asset-web-config" folder of an asset web. It is used to
configure the efd::MimeTagger class.</p>

<table>
    <thead>
        <tr>
            <th>Key Name</th>

            <th>Value Type</th>

            <th>Value Default</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>Version</td>

            <td>Integer</td>

            <td>No value</td>

            <td>Use this version stamp to force metadata regeneration when Asset Controller code
            has been changed and is not backwards compatible to the old metadata. (Should only be
            set in MimeTagger.ini)</td>
        </tr>

        <tr>
            <td>(No Key)</td>

            <td>List of String pairs</td>

            <td>No file extension</td>

            <td>EEach entry takes the form 'ext=mime-type' and specifies a file extension and the
            tag values for that extension. For each file extension, a pair of tags are created from
            the associated MIME type. For example, "py=script/python-behavior" will result in every
            file with the ".py" extension having two tag values - "script" and "python-behavior".
            New file extensions can simply be added as needed.</td>
        </tr>

        <tr>
            <td>RunTime/td&gt;</td>

            <td>List of Strings</td>

            <td>No asset type</td>

            <td>List of asset type values (tags) that are needed by the LightSpeed runtime. This
            list is used with the "AssetWeb.ListAssets" option to generate a complete list of
            assets for deployment.</td>
        </tr>
    </tbody>
</table>

<a name="ModelData" id="ModelData"></a><h4>ModelData</h4>

<p>This section is recognized by the <a href=
"../egf/egf__FlatModelManager.htm">egf::FlatModelManager</a> class. It is used to find the flat
model files when the <a href="../efd/efd__AssetLocatorService.htm">Asset Locator Service</a> is not
used.</p>

<table>
    <thead>
        <tr>
            <th>Key Name</th>

            <th>Value Type</th>

            <th>Value Default</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>ModelDir</td>

            <td>String</td>

            <td>"D:" for Xbox360<br>
            "." for other platforms</td>

            <td>Path to the directory where the flat model files are stored.</td>
        </tr>

        <tr>
            <td>ModelFileExtension</td>

            <td>String</td>

            <td>.flat</td>

            <td>File extension for the flat model files.</td>
        </tr>
    </tbody>
</table>

<a name="NameResolutionService" id="NameResolutionService"></a><h4>NameResolutionService</h4>

<p>This section is recognized by the <a href=
"../efdNetwork/efd__NameResolutionService.htm">efd::NameResolutionService</a> class. It is used to
perform UDP broadcast discovery on a local network.</p>

<table>
    <thead>
        <tr>
            <th>Key Name</th>

            <th>Value Type</th>

            <th>Value Default</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>AnnouncePort</td>

            <td>Integer</td>

            <td>42221</td>

            <td>The UDP port to use for local broadcast announcement and discovery.</td>
        </tr>
    </tbody>
</table>

<a name="NetService" id="NetService"></a><h4>NetService</h4>

<p>This section is recognized by the <a href=
"../efdNetwork/efd__NetService.htm">efd::NetService</a> class. It is used to setup the connections
and initialization of the service.</p>

<table>
    <thead>
        <tr>
            <th>Key Name</th>

            <th>Value Type</th>

            <th>Value Default</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>NetLibType</td>

            <td>String</td>

            <td>NetLib</td>

            <td>The name of the net library to use. This is ignored if the name is passed into the
            NetService constructor.</td>
        </tr>

        <tr>
            <td>WaitBeforeReconnect</td>

            <td>Integer</td>

            <td>10</td>

            <td>Time (in seconds) to wait before trying to reconnect when a connection is
            dropped.</td>
        </tr>

        <tr>
            <td>AutoConnect</td>

            <td>Boolean</td>

            <td>false</td>

            <td>Determines if NetService should automatically connect to the configured
            ChannelManager automatically on startup.</td>
        </tr>

        <tr>
            <td>AutoReconnect</td>

            <td>Boolean</td>

            <td>true</td>

            <td>Determines if NetService should automatically reconnect to the configured
            ChannelManager automatically if the connection is lost.</td>
        </tr>

        <tr>
            <td>AssignDefaultNetID</td>

            <td>Boolean</td>

            <td>true</td>

            <td>If true the value of kNetID_Client is set into the netid of the NetLib owned by
            NetService in NetService::OnPreInit. kNetID_Client is never used if NetService is
            configured to share the NetLib of the ChannelManagerService in the same process.</td>
        </tr>

        <tr>
            <td>WaitTicksOnShutdown</td>

            <td>Integer</td>

            <td>60</td>

            <td>Number of ticks to wait attempting to send any queued messages after ServiceManager
            shutdown.</td>
        </tr>
    </tbody>
</table>

<a name="NetTransport" id="NetTransport"></a><h4>NetTransport</h4>

<p>This section is recognized by the <a href=
"../efdNetwork/efd__NetTransportTCP.htm">efd::NetTransportTCP</a> class. It is used to setup
parameters used by network connections.</p>

<table>
    <thead>
        <tr>
            <th>Key Name</th>

            <th>Value Type</th>

            <th>Value Default</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>MaxReceiveMessages</td>

            <td>Integer</td>

            <td>64</td>

            <td>The maximum number of messages to receive in a single frame. Since NetTransportTCP
            uses non-blocking I/O in the main thread it is important to limit the number of
            messages received in a single frame. If not limited and a large number of messages were
            received in a single frame it could cause NetService::OnTick to take too much frame
            time.</td>
        </tr>

        <tr>
            <td>MaxReceiveBytes</td>

            <td>Integer</td>

            <td>8192</td>

            <td>The maximum number of bytes to receive in a single frame.</td>
        </tr>

        <tr>
            <td>MaxSendMessages</td>

            <td>Integer</td>

            <td>64</td>

            <td>The maximum number of messages to send in a single frame. Because we limit the
            number of messages that are received in a single frame it is also important to limit
            the number of messages sent in a single frame. Otherwise the app will attempt to send
            messages faster than the other side of the connection is going to receive them.</td>
        </tr>

        <tr>
            <td>MaxSendBytes</td>

            <td>Integer</td>

            <td>8192</td>

            <td>The maximum number of bytes to send in a single frame.</td>
        </tr>
    </tbody>
</table>

<a name="PhysXFramework" id="PhysXFramework"></a><h4>PhysX.Framework</h4>

<p>This section is recognized by the PhysX Framework classes. See the PhysX SDK documentation for a
discussion of the effects of these properties on the PhysX simulation.</p>

<table>
    <thead>
        <tr>
            <th>Key Name</th>

            <th>Value Type</th>

            <th>Value Default</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>SceneProcessor</td>

            <td>Integer</td>

            <td>The highest processor number</td>

            <td>This parameter is used by <a href=
            "../egfPhysX/egfPhysX__SceneService.htm">egfPhysX::SceneService</a> to determine which
            processor thread should be used for PhysX simulation. For more information, see the
            CreateSceneOnDifferentCore method on the <a href=
            "../efdPhysX/efdPhysX__PhysXSDKManager.htm">efdPhysX::PhysXSDKManager</a> class. The
            processor numbers start at zero.</td>
        </tr>

        <tr>
            <td>DisableTerrainDebugRenderer</td>

            <td>Boolean</td>

            <td>false</td>

            <td>This parameter is used by <a href=
            "../egmPhysXTerrain/egmPhysXTerrain__PhysXTerrainService.htm">egmPhysXTerrain::PhysXTerrainService</a>
            to determine whether or not the debug geometry can be activated for PhysX terrain.
            Because PhysX terrain often has many actors, the performance cost of debug geometry on
            terrain reduces the usefulness of debug geometry as a whole. Disabling the debug
            geometry of the terrain may give performance improvements that make the use of debug
            geometry more useful for other PhysX objects. For more information, see <a href=
            "../../Programmer/NiPhysX/PhysX_Debug_Rendering.htm">PhysX Debug Rendering</a>.</td>
        </tr>
    </tbody>
</table>

<a name="PhysXSDK" id="PhysXSDK"></a><h4>PhysX.SDK</h4>

<p>This section is recognized by the <a href=
"../efdPhysX/efdPhysX__PhysXSDKManager.htm">efdPhysX::PhysXSDKManager</a> class. It is used to
define properties of the PhysX SDK object. See the PhysX SDK documentation for a discussion of the
effects of these properties on the PhysX simulation.</p>

<table>
    <thead>
        <tr>
            <th>Key Name</th>

            <th>Value Type</th>

            <th>Value Default</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>DefaultSleepLinear</td>

            <td>Real</td>

            <td>0.005</td>

            <td>The default sleep linear velocity.</td>
        </tr>

        <tr>
            <td>DefaultSleepAngular</td>

            <td>Real</td>

            <td>0.005</td>

            <td>The default sleep angular velocity.</td>
        </tr>

        <tr>
            <td>DefaultSleepEnergy</td>

            <td>Real</td>

            <td>0.005</td>

            <td>The default sleep energy.</td>
        </tr>

        <tr>
            <td>VRDHost</td>

            <td>String</td>

            <td>None</td>

            <td>The hostname for the Visual Remote Debugger (VRD). The VRD is only used when this
            option appears in the configuration.</td>
        </tr>

        <tr>
            <td>VRDPort</td>

            <td>Integer</td>

            <td><span class="NDLSystemFont">5425</span></td>

            <td>The Visual Remote Debugger port. This option is only used when "VRDHost" is
            provided.</td>
        </tr>

        <tr>
            <td>VRDEventMask</td>

            <td>Integer</td>

            <td><span class="NDLSystemFont">NX_DBG_EVENTMASK_EVERYTHING</span></td>

            <td>The Visual Remote Debugger event mask. This option is only used when "VRDHost" is
            provided.</td>
        </tr>
    </tbody>
</table>

<a name="QualityOfService" id="QualityOfService"></a><h4>QualityOfService</h4>

<p>This section is recognized by the <a href="../efd/efd__QOSCompare.htm">efd::QOSCompare</a>
class. It is used to map virtual Qualities of Service to Physical ones. See <a href=
"../../Programmer/Networking/sso_networking_quality_of_service.htm">Quality of Service</a> for
details.</p>

<table>
    <thead>
        <tr>
            <th>Key Name</th>

            <th>Value Type</th>

            <th>Value Default</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>Default</td>

            <td>String</td>

            <td>kQOS_TCP</td>

            <td>The default Quality of Service that any unset Qaulities of Service will
            automatically map to. This must be a reliable Quality of Service and have the
            NET_RELIABLE bit set.</td>
        </tr>

        <tr>
            <td>(Any valid Virtual Quality of Service)</td>

            <td>String</td>

            <td>(Whatever Default above is set to)</td>

            <td>Any Virtual Quality of Service can be mapped to any Physical Quality of Service.
            QOS_UNRELIABLE and QOS_CONNECTIONLESS do not map to the default and instead map to
            kQOS_Unreliable and kQOS_UnreliableConnectionless respectively.</td>
        </tr>
    </tbody>
</table>

<a name="RenderService" id="RenderService"></a><h4>RenderService</h4>

<p>This section is recognized by the <a href="../ecr/ecr__RenderService.htm">Render
Service</a>.</p>

<table>
    <thead>
        <tr>
            <th>Key Name</th>

            <th>Value Type</th>

            <th>Value Default</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>ShaderCachePath</td>

            <td>String</td>

            <td>Data/Shaders/Generated</td>

            <td>The location of the shader cache, relative to the application working directory.
            The path must be relative, not absolute.</td>
        </tr>
    </tbody>
</table>

<a name="RendererPS3" id="RendererPS3"></a><h4>Renderer.PS3</h4>

<p>This section is recognized by the Render Service. These renderer settings are specific to the
PS3.</p>

<table>
    <thead>
        <tr>
            <th>Key Name</th>

            <th>Value Type</th>

            <th>Value Default</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>CommandBufferSize</td>

            <td>Integer</td>

            <td>1 &lt;&lt; 20 = 1MB</td>

            <td>Command buffer size (comes out of main memory amount, must be at least 64 KB).</td>
        </tr>

        <tr>
            <td>FloatingPointFrameBuffer</td>

            <td>Boolean</td>

            <td>false</td>

            <td>Backbuffer format.</td>
        </tr>

        <tr>
            <td>HostMemorySize</td>

            <td>Integer</td>

            <td>8 &lt;&lt; 20 = 8MB</td>

            <td>Amount of main memory to allocate as GPU visible space.</td>
        </tr>

        <tr>
            <td>HUD</td>

            <td>Boolean</td>

            <td>false</td>

            <td>Enables the Heads Up Display (HUD) for debugging when set to true.</td>
        </tr>

        <tr>
            <td>LocalMemoryReservedSize</td>

            <td>Integer</td>

            <td>0</td>

            <td>Amount of RSX Local memory to *not* allocate via the GPU memory manager.</td>
        </tr>

        <tr>
            <td>MultisamplingMode</td>

            <td>String</td>

            <td>None</td>

            <td>Level and type of anti-aliasing.</td>
        </tr>

        <tr>
            <td>VideoMode</td>

            <td>String</td>

            <td>No default value</td>

            <td>Defines the video display mode.</td>
        </tr>

        <tr>
            <td>VSync</td>

            <td>Boolean</td>

            <td>true</td>

            <td>Forces the application to wait for the monitor's vertical sync before displaying
            the next frame.</td>
        </tr>
    </tbody>
</table>

<a name="RendererWin32" id="RendererWin32"></a><h4>Renderer.Win32</h4>

<p>This section is recognized by the Render Service. These renderer settings are specific to Win32.
They are also used in the <a href="../NiApplication/Renderer_Settings_Dialog.htm">Renderer Settings
Dialog</a>. See <a href="../NiApplication/Renderer_options_from_the_INI_file.htm">Renderer Options
from the INI File</a>.</p>

<table>
    <thead>
        <tr>
            <th>Key Name</th>

            <th>Value Type</th>

            <th>Value Default</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>D3D10DSFormat</td>

            <td>Integer</td>

            <td>DXGI_FORMAT_D24_UNORM_S8_UINT</td>

            <td>Enumeration value, converted to integer for D3D10 depth buffer format. See <a href=
            "../NiD3D10Renderer/Creation_of_a_D3D10Renderer.htm">Creation of an
            NiD3D10Renderer.</a></td>
        </tr>

        <tr>
            <td>D3D10MultisampleCount</td>

            <td>Integer</td>

            <td>1</td>

            <td>The number of samples to generate.</td>
        </tr>

        <tr>
            <td>D3D10MultisampleQuality</td>

            <td>Integer</td>

            <td>0</td>

            <td>The quality level of the multisampling.</td>
        </tr>

        <tr>
            <td>D3D10OutputIdx</td>

            <td>Integer</td>

            <td>0</td>

            <td>Display index for D3D10.</td>
        </tr>

        <tr>
            <td>D3D10RTFormat</td>

            <td>Integer</td>

            <td>DXGI_FORMAT_R8G8B8A8_UNORM</td>

            <td>Enumeration value, converted to integer for D3D10 render target format. See
            <a href="../NiD3D10Renderer/Creation_of_a_D3D10Renderer.htm">Creation of an
            NiD3D10Renderer.</a></td>
        </tr>

        <tr>
            <td>D3D11DSFormat</td>

            <td>Integer</td>

            <td>DXGI_FORMAT_D24_UNORM_S8_UINT</td>

            <td>Enumeration value, converted to integer for D3D11 depth buffer format. See <a href=
            "../ecrD3D11Renderer/Creation_of_a_D3D11Renderer.htm">Creation of an
            ecr::D3D11Renderer.</a></td>
        </tr>

        <tr>
            <td>D3D11FeatureLevel9_1</td>

            <td>Integer</td>

            <td>1</td>

            <td>Specify 1 to indicate that D3D11 Feature Level 9.1 is acceptable for the
            application. See <a href="../ecrD3D11Renderer/Creation_of_a_D3D11Renderer.htm">Creation
            of an ecr::D3D11Renderer.</a></td>
        </tr>

        <tr>
            <td>D3D11FeatureLevel9_2</td>

            <td>Integer</td>

            <td>1</td>

            <td>Specify 1 to indicate that D3D11 Feature Level 9.2 is acceptable for the
            application. See <a href="../ecrD3D11Renderer/Creation_of_a_D3D11Renderer.htm">Creation
            of an ecr::D3D11Renderer.</a></td>
        </tr>

        <tr>
            <td>D3D11FeatureLevel9_3</td>

            <td>Integer</td>

            <td>1</td>

            <td>Specify 1 to indicate that D3D11 Feature Level 9.3 is acceptable for the
            application. See <a href="../ecrD3D11Renderer/Creation_of_a_D3D11Renderer.htm">Creation
            of an ecr::D3D11Renderer.</a></td>
        </tr>

        <tr>
            <td>D3D11FeatureLevel10_0</td>

            <td>Integer</td>

            <td>1</td>

            <td>Specify 1 to indicate that D3D11 Feature Level 10.0 is acceptable for the
            application. See <a href="../ecrD3D11Renderer/Creation_of_a_D3D11Renderer.htm">Creation
            of an ecr::D3D11Renderer.</a></td>
        </tr>

        <tr>
            <td>D3D11FeatureLevel10_1</td>

            <td>Integer</td>

            <td>1</td>

            <td>Specify 1 to indicate that D3D11 Feature Level 10.1 is acceptable for the
            application. See <a href="../ecrD3D11Renderer/Creation_of_a_D3D11Renderer.htm">Creation
            of an ecr::D3D11Renderer.</a></td>
        </tr>

        <tr>
            <td>D3D11FeatureLevel11_0</td>

            <td>Integer</td>

            <td>1</td>

            <td>Specify 1 to indicate that D3D11 Feature Level 11.0 is acceptable for the
            application. See <a href="../ecrD3D11Renderer/Creation_of_a_D3D11Renderer.htm">Creation
            of an ecr::D3D11Renderer.</a></td>
        </tr>

        <tr>
            <td>D3D11MultisampleCount</td>

            <td>Integer</td>

            <td>1</td>

            <td>The number of samples to generate.</td>
        </tr>

        <tr>
            <td>D3D11MultisampleQuality</td>

            <td>Integer</td>

            <td>0</td>

            <td>The quality level of the multisampling.</td>
        </tr>

        <tr>
            <td>D3D11OutputIdx</td>

            <td>Integer</td>

            <td>0</td>

            <td>Display index for D3D11.</td>
        </tr>

        <tr>
            <td>D3D11RTFormat</td>

            <td>Integer</td>

            <td>DXGI_FORMAT_R8G8B8A8_UNORM</td>

            <td>Enumeration value, converted to integer for D3D11 render target format. See
            <a href="../ecrD3D11Renderer/Creation_of_a_D3D11Renderer.htm">Creation of an
            ecr::D3D11Renderer.</a></td>
        </tr>

        <tr>
            <td>DX9DepthSurfaceMode</td>

            <td>Integer</td>

            <td>NiDX9Renderer::DSFMT_D24S8</td>

            <td>Enumeration value, converted to integer for DX9 depth surface format. See <a href=
            "../NiDX9Renderer/Creation_of_a_DX9Renderer.htm">Creation of a DX9Renderer.</a></td>
        </tr>

        <tr>
            <td>DX9FrameBufferMode</td>

            <td>Integer</td>

            <td>NiDX9Renderer::FBMODE_DEFAULT</td>

            <td>Enumeration value, converted to integer for DX9 frame buffer format. See <a href=
            "../NiDX9Renderer/Creation_of_a_DX9Renderer.htm">Creation of a DX9Renderer.</a></td>
        </tr>

        <tr>
            <td>DX9RenderTargetMode</td>

            <td>Integer</td>

            <td>NiDX9Renderer::FBFMT_X8R8G8B8</td>

            <td>Enumeration value, converted to integer for DX9 render target format. See <a href=
            "../NiDX9Renderer/Creation_of_a_DX9Renderer.htm">Creation of a DX9Renderer.</a></td>
        </tr>

        <tr>
            <td>Fullscreen</td>

            <td>Integer</td>

            <td>0</td>

            <td>Specify 0 for windowed mode and 1 for fullscreen.</td>
        </tr>

        <tr>
            <td>MinScreenHeight</td>

            <td>Integer</td>

            <td>480</td>

            <td>Minimum selectable screen height resolution.</td>
        </tr>

        <tr>
            <td>MinScreenWidth</td>

            <td>Integer</td>

            <td>640</td>

            <td>Minimum selectable screen width resolution.</td>
        </tr>

        <tr>
            <td>MultiThread</td>

            <td>Integer</td>

            <td>0</td>

            <td>Specify 1 to enable multithreading.</td>
        </tr>

        <tr>
            <td>NVPerfHUD</td>

            <td>Integer</td>

            <td>0</td>

            <td>Specify 1 to use NVPerfHUD if available, 0 otherwise.</td>
        </tr>

        <tr>
            <td>PureDevice</td>

            <td>Integer</td>

            <td>1</td>

            <td>Set to 1 to create HAL device as pure.</td>
        </tr>

        <tr>
            <td>RefRast</td>

            <td>Integer</td>

            <td>0</td>

            <td>Specify 1 to request a reference rasterizer.</td>
        </tr>

        <tr>
            <td>RendererDialog</td>

            <td>Integer</td>

            <td>1</td>

            <td>Specify 1 to launch the Renderer Settings Dialog when the application starts.</td>
        </tr>

        <tr>
            <td>RendererID</td>

            <td>Integer</td>

            <td>efd::SystemDesc::RENDERER_DX9</td>

            <td>Specify which D3D renderer to use.</td>
        </tr>

        <tr>
            <td>SaveSettings</td>

            <td>Integer</td>

            <td>0</td>

            <td>Specify 1 to save the settings in the Renderer Settings Dialog.</td>
        </tr>

        <tr>
            <td>ScreenHeight</td>

            <td>Integer</td>

            <td>0</td>

            <td>The screen height resolution to use.</td>
        </tr>

        <tr>
            <td>ScreenWidth</td>

            <td>Integer</td>

            <td>0</td>

            <td>The screen height resolution to use.</td>
        </tr>

        <tr>
            <td>Use16Bit</td>

            <td>Integer</td>

            <td>0</td>

            <td>Specify 1 to use 16 bits in the depth buffer, 0 for 32 bits.</td>
        </tr>

        <tr>
            <td>UseD3D10Renderer</td>

            <td>Integer</td>

            <td>0</td>

            <td>Specify 0 for DX9 renderer and 1 for D3D10 renderer. This key can still be used,
            but it has been deprecated in favor of the RendererID key.</td>
        </tr>

        <tr>
            <td>VertexProcessing</td>

            <td>Integer</td>

            <td>1</td>

            <td>Enum values for vertex processing. 1 = hardware, 2 = mixed, 3 = software.</td>
        </tr>

        <tr>
            <td>VSync</td>

            <td>Integer</td>

            <td>0</td>

            <td>Set to 1 forces the application to wait for the monitor's vertical sync before
            displaying the next frame.</td>
        </tr>
    </tbody>
</table>

<a name="RendererXBOX360" id="RendererXBOX360"></a><h4>Renderer.XBOX360</h4>

<p>This section is recognized by the Render Service. These renderer settings are specific to the
Xbox360.</p>

<table>
    <thead>
        <tr>
            <th>Key Name</th>

            <th>Value Type</th>

            <th>Value Default</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>ScreenHeight</td>

            <td>Integer</td>

            <td>1280</td>

            <td>The screen height resolution to use.</td>
        </tr>

        <tr>
            <td>ScreenWidth</td>

            <td>Integer</td>

            <td>720</td>

            <td>The screen height resolution to use.</td>
        </tr>

        <tr>
            <td>VSync</td>

            <td>Integer</td>

            <td>1</td>

            <td>Set to 1 forces the application to wait for the monitor's vertical sync before
            displaying the next frame.</td>
        </tr>
    </tbody>
</table>

<a name="ReplicationGroup" id="ReplicationGroup"></a><h4>ReplicationGroup#</h4>

<p>This section is recognized by the Replication Service. ReplicationGroup0 through
ReplicationGroup31 are used to configure the 32 Replication Groups.</p>

<table>
    <thead>
        <tr>
            <th>Key Name</th>

            <th>Value Type</th>

            <th>Value Default</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>MinDelta=0.0</td>

            <td>Float</td>

            <td>0.0</td>

            <td>The minimum amount of time in seconds between updates from this Replication Group.
            A value of 0.0 would mean update every frame (do not wait between updates), a value of
            0.5 would mean no more than 2 updates per second. If no properties in this group have
            changed the interval between updates may be longer than this value.</td>
        </tr>

        <tr>
            <td>QualityOfService</td>

            <td>String</td>

            <td>QOS_RELIABLE</td>

            <td>The QualityOfService to send all messages on this Replication Group.</td>
        </tr>
        <tr>
            <td>AlwaysUpdateAllProperties</td>

            <td>Boolean</td>

            <td>false</td>

            <td>Expected to be used in conjunction with unreliable Qualities of Service. If set
            to true send all modified properties in this Replication Group will be sent in every
            update regardless of dirtiness. This is useful if an update message is lost as the most
            recent value of all properties in the group is in every update.</td>
        </tr>
        <tr>
            <td>TreatUpdatesAsDiscovers</td>

            <td>Boolean</td>

            <td>false</td>

            <td>Expected to be used in conjunction with unreliable Qualities of Service. If set
            to true then all update messages can be treated as initial discovery messages. When
            using this option you should avoid assuming all property values in the replication
            group are updated as an atomic whole; this implies you must support potentially
            paradoxical property states on the replica, but that can also be avoided by combining
            this policy with the "update all" policy. Without this policy a lost discovery message
            will prevent an entity from being replicated.</td>
        </tr>
    </tbody>
</table>

<a name="SamplePlatTagger" id="SamplePlatTagger"></a><h4>SamplePlatTagger</h4>

<p>This section is recognized by the Sample Platform Tagger in the Asset Controller application and
should only exist in the SamplePlatTargger.ini file. It is used to configure the
efd::SamplePlatTagger class.</p>

<table>
    <thead>
        <tr>
            <th>Key Name</th>

            <th>Value Type</th>

            <th>Value Default</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>ParentDir</td>

            <td>String</td>

            <td>No default value</td>

            <td>All directories immediately below the ParentDir will be checked to see if they are
            a platform name. If so, then a corresponding tag is applied to all assets below the
            platform directory.</td>
        </tr>

        <tr>
            <td>Platforms</td>

            <td>List of Strings</td>

            <td>No platform</td>

            <td>List of additional platform names.</td>
        </tr>
    </tbody>
</table>

<a name="SamplePrecacheTagger" id="SamplePrecacheTagger"></a><h4>SamplePrecacheTagger</h4>

<p>This section is recognized by the Sample Precache Tagger in the Asset Controller application and
should only exist in the SamplePrecacheTargger.ini file. It is used to configure the
efd::SamplePrecacheTagger class.</p>

<table>
    <thead>
        <tr>
            <th>Key Name</th>

            <th>Value Type</th>

            <th>Value Default</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>Directories</td>

            <td>List of Strings</td>

            <td>No directory</td>

            <td>List of directory names. The scene graph assets under these directories will be
            tagged with the label "urn:Precache" so that they can be easily identified and
            pre-loaded by the run-time system.</td>
        </tr>
    </tbody>
</table>

<a name="Scheduler" id="Scheduler"></a><h4>Scheduler</h4>

<p>This section is recognized by the <a href="../egf/egf__Scheduler.htm">egf::Scheduler</a> class.
It is used to setup the runtime parameters for the class.</p>

<table>
    <thead>
        <tr>
            <th>Key Name</th>

            <th>Value Type</th>

            <th>Value Default</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>MaxThread</td>

            <td>Integer</td>

            <td>256</td>

            <td>This parameter is used to set the limit on the number of behaviors that can be
            executed at a time.</td>
        </tr>

        <tr>
            <td>ShardID</td>

            <td>Integer</td>

            <td>0</td>

            <td>This parameter is used when generating EntityID values.</td>
        </tr>

        <tr>
            <td>StatsDumpIntervalInSec</td>

            <td>Float</td>

            <td>60.0</td>

            <td>Valid Range: 10.0 - 3600.0<br>
            This parameter is used to determine how often in seconds the statistics information
            about the entities/behaviors execution is logged.</td>
        </tr>
    </tbody>
</table>

<a name="ScriptEngineLua" id="ScriptEngineLua"></a><h4>ScriptEngine.Lua</h4>

<p>This section is recognized by the <a href=
"../egfLua/egf__SchedulerLua.htm">egf::SchedulerLua</a> class. It is used to setup the runtime
parameters for the class.</p>

<table class="NDLNoteContainer" width="100%">
    <tr align="left">
        <td class="NDLNoteContainerTD">
            <p class="NDLHeadingNoteContainer">Note</p>

            <div class="NDLNote">
                These parameters are expected to appear multiple times in the config file, each
                with a different number at the end (as in: LoadBuiltin1, LoadBuiltin2,
                SystemScriptPath1, SystemScriptPath2 and etc.). In order for all of the parameters
                to be read, the numbers must be sequential starting with 1. By using the # sign
                after the parameter name, numbers will automatically be generated sequentially for
                each parameter. So a configuration file that contains multiple of these parameter
                names will be translated into parameter names with sequentially unique numbers
                automatically. Therefore it is always best to use these parameter names with '#' at
                the end in all config files.
            </div>
        </td>
    </tr>
</table>

<table>
    <thead>
        <tr>
            <th>Key Name</th>

            <th>Value Type</th>

            <th>Value Default</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>LoadBuiltin#</td>

            <td>String</td>

            <td>Parameter does not exist.</td>

            <td>Each of these parameters specifies a dynamic module to load and optionally an
            initialization function to call within the module. The value takes the form of
            'module!function' such as 'egfLua!luaopen_BehaviorAPI'.</td>
        </tr>

        <tr>
            <td>SystemScriptPath#</td>

            <td>String</td>

            <td>Parameter does not exist.</td>

            <td>Each of these parameters specifies the path to a directory containing Lua system
            scripts.</td>
        </tr>

        <tr>
            <td>UserScriptPath#</td>

            <td>String</td>

            <td>Parameter does not exist.</td>

            <td>Each of these parameters specifies the path to a directory containing Lua user
            scripts such as entity behavior scripts.</td>
        </tr>
    </tbody>
</table>

<a name="ScriptEnginePython" id="ScriptEnginePython"></a><h4>ScriptEngine.Python</h4>

<p>This section is recognized by the <a href=
"../egfPython/egf__SchedulerPython.htm">egf::SchedulerPython</a> class. It is used to setup the
runtime parameters for the class.</p>

<table class="NDLNoteContainer" width="100%">
    <tr align="left">
        <td class="NDLNoteContainerTD">
            <p class="NDLHeadingNoteContainer">Note</p>

            <div class="NDLNote">
                These parameters are expected to appear multiple times in the config file, each
                with a different number at the end (as in: LoadBuiltin1, LoadBuiltin2,
                SystemScriptPath1, SystemScriptPath2 and etc.). In order for all of the parameters
                to be read, the numbers must be sequential starting with 1. By using the # sign
                after the parameter name, numbers will automatically be generated sequentially for
                each parameter. So a configuration file that contains multiple of these parameter
                names will be translated into parameter names with sequentially unique numbers
                automatically. Therefore it is always best to use these parameter names with '#' at
                the end in all config files.
            </div>
        </td>
    </tr>
</table>

<table>
    <thead>
        <tr>
            <th>Key Name</th>

            <th>Value Type</th>

            <th>Value Default</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>LoadBuiltin#</td>

            <td>String</td>

            <td>Parameter does not exist.</td>

            <td>Each of these parameters specify a dynamic module to load and optionally an
            initialization function to call within the module. The value takes the form of
            'module!function' such as 'egfPython!init_BehaviorAPI'.</td>
        </tr>

        <tr>
            <td>SystemScriptPath#</td>

            <td>String</td>

            <td>Parameter does not exist.</td>

            <td>Each of these parameters specifies the path to a directory containing Python system
            scripts.</td>
        </tr>

        <tr>
            <td>UserScriptPath#</td>

            <td>String</td>

            <td>Parameter does not exist.</td>

            <td>Each of these parameters specifies the path to a directory containing Python user
            scripts such as entity behavior scripts.</td>
        </tr>
    </tbody>
</table>

<a name="ServiceManager" id="ServiceManager"></a><h4>ServiceManager</h4>

<p>This section is recognized by the <a href=
"../efd/efd__ServiceManager.htm">efd::ServiceManager</a> class. It is used to setup the runtime
parameters for the class.</p>

<table>
    <thead>
        <tr>
            <th>Key Name</th>

            <th>Value Type</th>

            <th>Value Default</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>Sleep</td>

            <td>Integer</td>

            <td>0</td>

            <td>Specifies time in milliseconds to sleep at each tick cycle. A value of -1 specifies
            to not sleep at all. A value of 0 specifies to still sleep but very little.</td>
        </tr>

        <tr>
            <td>DeactivatedSleep</td>

            <td>Integer</td>

            <td>100</td>

            <td>Specifies time in milliseconds to sleep at each tick cycle when ServiceManager is
            deactivated with the UseDeactivatedSleepTime function. A value of -1 specifies to not
            sleep at all. A value of 0 specifies to still sleep but very little; the equivalent of
            calling efd::YieldThread.</td>
        </tr>
    </tbody>
</table>

<a name="VisualTracker" id="VisualTracker"></a><h4>VisualTracker</h4>

<p>This section is recognized by the <a href=
"../egmVisualTracker/egmVisualTracker__VisualTrackerService.htm">egmVisualTracker::VisualTrackerService</a>
class. It is used to define properties of the visual tracker chart. Please see the class reference
for details.</p>

<table>
    <thead>
        <tr>
            <th>Key Name</th>

            <th>Value Type</th>

            <th>Value Default</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>PerfMaxValue</td>

            <td>Real</td>

            <td>120.0</td>

            <td>The maximum value of the Performance chart.</td>
        </tr>

        <tr>
            <td>MemMaxValue</td>

            <td>Integer</td>

            <td>100000</td>

            <td>The maximum value of the Memory chart (in kilobytes).</td>
        </tr>

        <tr>
            <td>TimingMaxValue</td>

            <td>Real</td>

            <td>50.0</td>

            <td>The maximum value of the Time chart (in milliseconds).</td>
        </tr>

        <tr>
            <td>ServiceTrackers</td>

            <td>Integer</td>

            <td>0</td>

            <td>The number of manually specified services to track in the Performance chart.</td>
        </tr>

        <tr>
            <td>Service#</td>

            <td>Integer</td>

            <td>None</td>

            <td>The Service ID of the service you wish to chart. The "#" value should be the index
            in the list of ServiceTrackers specified above. Unlike normal numbered configuration
            values these numbers start at zero so you must manually replace the # with the correct
            number and can not use automatic number assignment.</td>
        </tr>

        <tr>
            <td>Service#Color</td>

            <td>Color</td>

            <td>None</td>

            <td>The color that the service line should take in the chart. The "#" value should be
            the index in the list of ServiceTrackers specified above. Unlike normal numbered
            configuration values these numbers start at zero so you must manually replace the #
            with the correct number and can not use automatic number assignment.</td>
        </tr>

        <tr>
            <td>ShowEntityPage</td>

            <td>Boolean</td>

            <td>false</td>

            <td>"true" or 1 if the entity page should be added to the visual tracker pages,
            "false" or 0 to exclude this page. Note that enabling this page, even if hidden,
            results in significant graphics resource usage to represent the entities on the
            scatter plot. On consoles a large application may exceed resource limits with
            this option enabled.</td>
        </tr>

        <tr>
            <td>EntityLeft</td>

            <td>Float</td>

            <td>-4000.0</td>

            <td>The left edge (negative X axis) for the bounding area in which to display entities.
            Adjust this based on the limits of the block file that will be loaded.</td>
        </tr>

        <tr>
            <td>EntityRight</td>

            <td>Float</td>

            <td>4000.0</td>

            <td>The right edge (positive X axis) for the bounding area in which to display
            entities. Adjust this based on the limits of the block file that will be loaded.</td>
        </tr>

        <tr>
            <td>EntityTop</td>

            <td>Float</td>

            <td>4000.0</td>

            <td>The top edge (positive Y axis) for the bounding area in which to display entities.
            Adjust this based on the limits of the block file that will be loaded.</td>
        </tr>

        <tr>
            <td>EntityBottom</td>

            <td>Float</td>

            <td>-4000.0</td>

            <td>The bottom edge (negative Y axis) for the bounding area in which to display
            entities. Adjust this based on the limits of the block file that will be loaded.</td>
        </tr>
    </tbody>
</table>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
