<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>egmAnimation::KFMCache</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">egmAnimation::KFMCache</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../efd/efd__IBase.htm">efd::IBase</a></span></p>


<p class="NDLRefHeaderFile">&lt;KFMCache.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classegm_animation_1_1_k_f_m_cache.gif" alt="Inheritance graph for egmAnimation::KFMCache"/>
  <p class="FigureCaption">Inheritance graph for egmAnimation::KFMCache</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">The <span class="NDLSystemFont">KFMCache</span> class is a helper for the Animation Service that manages the locating, loading and caching of KFM files (<span class="NDLSystemFont"><a href="../NiAnimation/NiActorManager.htm">NiActorManager</a></span> objects). </p>
<p class="NDLNormal">Applications may wish to interface to this class if they load KFMs outside of the Animation Service. Only one instance of the class may be initialized, so all services should obtain the single instance from the <span class="NDLSystemFont"><a href="egmAnimation__AnimationService.htm">egmAnimation::AnimationService</a></span> instance.</p>
<p class="NDLNormal">The <span class="NDLSystemFont">KFMCache</span> class also managed reload requests for "gamebryo-animation" (KFM) and "gamebryo-sequence-file" (KF) files. It also manages the reload of the NIF file associated with an actor. Subscribers to the channel returned by the GetReloadCategory method will receive messages of type <span class="NDLSystemFont"><a href="egmAnimation__KFMCacheResponse.htm">KFMCacheResponse</a></span> when an asset refresh must be processed.</p>
<p class="NDLNormal">The <span class="NDLSystemFont">KFMCache</span> requires the existence of a <span class="NDLSystemFont"><a href="../ecr/ecr__SceneGraphCache.htm">ecr::SceneGraphCache</a></span>. Typically, a pointer to this cache may be obtained from the <span class="NDLSystemFont"><a href="../ecr/ecr__SceneGraphService.htm">ecr::SceneGraphService</a></span>.</p>
<p class="NDLNormal">This class is not thread safe. </p>

<a name="public_types"></a>
<p class="NDLRefHead1">Public Types</p>
<a name="classegm_animation_1_1_k_f_m_cache_1a9342a9e565a0245aec09addff25cf525"></a>
<p class=NDLRefHead2>egmAnimation::KFMCache::AssetStatus</p>



<p class="NDLRefMemberDetailedDescription">An enumeration of the possible states of assets </p>

<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">AS_Invalid</span></td>
    <td>Not yet assigned. Assets in this state are not in the cache. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">AS_Locating</span></td>
    <td>Waiting on an asset locate. Assets in this state are not in the cache. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">AS_LoadingKFM</span></td>
    <td>Waiting on a KFM load. Assets in this state are not in the cache. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">AS_Reloading</span></td>
    <td>Waiting on a reload. A reloading asset has valid objects that can be used, but they will change later. You will get a message when this reload is done, on either the channel you requested the reload on, or the channel that this cache provides for rapid iteration asset refreshes. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">AS_Ready</span></td>
    <td>Available for use. </td>
</tr>

  </tbody>
</table>
</div>



<a name="classegm_animation_1_1_k_f_m_cache_1a384bec7a41e9396c552147c1d883ef10"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__MemObject.htm">efd::MemObject</a></span>  IKFMCacheRequestData</p>
<p class="NDLRefMemberDescription">Derive from the IKFMCacheRequestData type to hold per-request data. </p>

<a name="classegm_animation_1_1_k_f_m_cache_1ad2b95ace01601cbc70cc1a41fdb6a099"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">KFMCacheDataPtr</a></span>  KFMCacheHandle</p>
<p class="NDLRefMemberDescription">A handle to data in the cache, used to access data in the cache. </p>
<p class="NDLRefMemberDetailedDescription">It is a smart pointer, so setting a handle to zero is equivalent to releasing your interest in it. Handles with no external references may be uncached. </p>
<a name="public_static_attributes"></a>
<p class="NDLRefHead1">Public Static Attributes</p>


<a name="classegm_animation_1_1_k_f_m_cache_1a570121b6d642426b5911bafc456319c8"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">KFMCacheHandle</a></span>  k_invalidHandle</p>
<p class="NDLRefMemberDescription">An invalid handle, equal to zero for purposes of comparison. </p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classegm_animation_1_1_k_f_m_cache_1a1038c9cc95e729c6bc126fdd7f203119"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  CacheKFM(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& identifier, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span> responseCategory, <br/><span class="NDLSystemFont"><a href="../efd/efd__MemObject.htm">IKFMCacheRequestData</a></span>* pResponseData, <br/><span class="NDLSystemFont"><a href="../efd/efd__vector.htm">efd::vector</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">KFMCacheHandle</a></span>&gt;& handles)</p>
<p class="NDLRefMemberDescription">Methods to Cache KFM Files. </p>
<p class="NDLRefMemberDetailedDescription">Cache the KFM files referenced by a given identifier.</p>
<p class="NDLRefMemberDetailedDescription">The identifier may be a URN or raw filename. It's a urn if it contains a urn substring, otherwise a raw filename. A single URN may map to multiple files, and all files are cached.</p>
<p class="NDLRefMemberDetailedDescription">If the requested files are in the cache, the data for the item is returned in handles and the caller may use the handles to retrieve the objects. True is returned.</p>
<p class="NDLRefMemberDetailedDescription">Otherwise, false is returned and an <span class="NDLSystemFont"><a href="egmAnimation__KFMCacheResponse.htm">egmAnimation::KFMCacheResponse</a></span> message will be sent in response to this request when the requested scene graph objects are available, or on error. </p>

<a name="classegm_animation_1_1_k_f_m_cache_1aca430ea23932109f13663d1273f350f4"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  UnCacheKFM(<span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">KFMCacheHandle</a></span> handle)</p>
<p class="NDLRefMemberDescription">Remove a KFM file from the cache, given a handle. </p>
<p class="NDLRefMemberDetailedDescription">This call removes the asset if the reference count indicates there are no references the handle (other than those necessary to call this function). It should be called immediately before a handle is set to zero in user code, so that the cache knows to check for removal of the asset.</p>
<p class="NDLRefMemberDetailedDescription">If there is a pending reload request for this asset at the time it is removed the response to that message will be delivered only if the asset still has a non-zero request count, otherwise no response will be sent for the reload.</p>
<p class="NDLRefMemberDetailedDescription">True is returned if the objects were in the cache, false if they were not in the cache. </p>

<a name="classegm_animation_1_1_k_f_m_cache_1a5e2553995e56196e9840298fda3c0f1d"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  ReloadKFM(<br/><span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">KFMCacheHandle</a></span> handle, <br/><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span> responseCategory, <br/><span class="NDLSystemFont"><a href="../efd/efd__MemObject.htm">IKFMCacheRequestData</a></span>* pResponseData)</p>
<p class="NDLRefMemberDescription">Reload a KFM file. </p>
<p class="NDLRefMemberDetailedDescription">An <span class="NDLSystemFont"><a href="egmAnimation__KFMCacheResponse.htm">egmAnimation::KFMCacheResponse</a></span> message will be sent in response to this request when the requested KFM has been reloaded, or on error.</p>
<p class="NDLRefMemberDetailedDescription">The <span class="NDLSystemFont"><a href="egmAnimation__KFMCacheResponse.htm">egmAnimation::KFMCacheResponse</a></span> will contain an result code of AssetCacheResponse::ACR_AssetNotFound if the original asset has been removed from the cache before the new asset is ready.</p>
<p class="NDLRefMemberDetailedDescription">If a reload is received while a reload is in progress the latter reload will get whatever was loaded with the first reload. We assume that the file on disk could not have changed between the time the file is actually loaded and the time the response is received.</p>
<p class="NDLRefMemberDetailedDescription">True is returned if the object was found in the cache and the reload has begun. </p>

<a name="classegm_animation_1_1_k_f_m_cache_1a20b410731a101ae7b5f5971deb8fae4e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="egmAnimation__KFMCache.htm#classegm_animation_1_1_k_f_m_cache_1a9342a9e565a0245aec09addff25cf525">AssetStatus</a></span>  GetStatus(<span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">KFMCacheHandle</a></span> handle) const</p>
<p class="NDLRefMemberDescription">Methods to Access Data by Handle. </p>
<p class="NDLRefMemberDetailedDescription">Get the current status of the asset. </p>

<a name="classegm_animation_1_1_k_f_m_cache_1a62d6609c4cb6e28a20c122636ae00b01"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../NiAnimation/NiActorManager.htm">NiActorManager</a></span>*  GetActorManager(<span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">KFMCacheHandle</a></span> handle) const</p>
<p class="NDLRefMemberDescription">Get the actor manager. </p>
<p class="NDLRefMemberDetailedDescription">The returned pointer must be held in a smart pointer to avoid premature deletion when an asset is reloaded or removed. </p>

<a name="classegm_animation_1_1_k_f_m_cache_1a0f40b398d8f428b5842850f80331bbe5"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>&  GetPhysicalID(<span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">KFMCacheHandle</a></span> handle) const</p>
<p class="NDLRefMemberDescription">Get the physical ID for a cached KFM. </p>

<a name="classegm_animation_1_1_k_f_m_cache_1af706c34a38ad62f4d8c729e5e21277e2"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>&  GetFilePath(<span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">KFMCacheHandle</a></span> handle) const</p>
<p class="NDLRefMemberDescription">Get the file name for a cached KFM. </p>

<a name="classegm_animation_1_1_k_f_m_cache_1a621118873ff8f09368d0ac38b6ad756a"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span>  GetReloadCategory() const</p>
<p class="NDLRefMemberDescription">Get the category used to send asset reloaded messages. </p>
<p class="NDLRefMemberDetailedDescription">The category is available after Init has been called. Services wishing to know when the asset associated with a given handle has been changed should register for messages of type ecr::KFMCacheResponse on this category. </p>

<a name="classegm_animation_1_1_k_f_m_cache_1a012dd16aacb93aa87130e028c278e362"></a>
<p class="NDLRefMemberFunction">KFMCache()</p>
<p class="NDLRefMemberDescription">Constructor. </p>

<a name="classegm_animation_1_1_k_f_m_cache_1a4c31cf69b6f91c8246e85fdb6436d011"></a>
<p class="NDLRefMemberFunction">virtual ~KFMCache()</p>
<p class="NDLRefMemberDescription">Destructor. </p>
<p class="NDLRefMemberDetailedDescription">Cleans up any pending requests and empties the cache. Releases the smart pointer to the scene graph cache. </p>

<a name="classegm_animation_1_1_k_f_m_cache_1a75deb67bc6d352050136a7f4eb2c0c7e"></a>
<p class="NDLRefMemberFunction">virtual void  Init(<br/><span class="NDLSystemFont"><a href="../efd/efd__MessageService.htm">efd::MessageService</a></span>* pMessageService, <br/><span class="NDLSystemFont"><a href="../efd/efd__AssetLocatorService.htm">efd::AssetLocatorService</a></span>* pAssetLocator, <br/><span class="NDLSystemFont"><a href="../efd/efd__AssetFactoryManager.htm">efd::AssetFactoryManager</a></span>* pAssetFactory)</p>
<p class="NDLRefMemberDescription">Init must be called before any other functions are called. </p>
<p class="NDLRefMemberDetailedDescription">The various services should be ready to receive requests.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMessageService</span></td>
    <td>The message service to use when sending messages. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pAssetLocator</span></td>
    <td>The asset locator service used to find assets on disk. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pAssetFactory</span></td>
    <td>The Asset Factory Manager used to load assets. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegm_animation_1_1_k_f_m_cache_1ad65826098f4d990b8e6ae68cad402321"></a>
<p class="NDLRefMemberFunction">void  Shutdown()</p>
<p class="NDLRefMemberDescription">Shutdown must be called before the object is destructed in order to cleanly unsubscribe to messages. </p>

<a name="classegm_animation_1_1_k_f_m_cache_1a795eab41d9fb14c55a22526a409ba776"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  ReplaceKFM(<br/><span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">KFMCacheHandle</a></span> handle, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& newFileName, <br/><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span> responseCategory, <br/><span class="NDLSystemFont"><a href="../efd/efd__MemObject.htm">IKFMCacheRequestData</a></span>* pResponseData)</p>
<p class="NDLRefMemberDescription">Replace a KFM file. </p>
<p class="NDLRefMemberDetailedDescription">An <span class="NDLSystemFont"><a href="egmAnimation__KFMCacheResponse.htm">egmAnimation::KFMCacheResponse</a></span> message will be sent in response to this request when the requested KFM has been reloaded, or on error. The original handle continues to exist after the load, and a new handle will be returned in response. It is the application's responsibility to free the original handle.</p>
<p class="NDLRefMemberDetailedDescription">It is assumed that the identifier originally used for the asset is still the same (in other words, that the identifier is an Asset ID and the file that the ID refers to has changed). The Animation Service uses this function to handle file renames or moves.</p>
<p class="NDLRefMemberDetailedDescription">Replacements are tracked by the file name, so multiple requests for the same original handle and the same file name will result in multiple responses with the same new handle. However, multiple request using the same identifier with different file names will result in one new handle for each distinct file name.</p>
<p class="NDLRefMemberDetailedDescription">True is returned if the object was found in the cache and the replacement has begun. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
