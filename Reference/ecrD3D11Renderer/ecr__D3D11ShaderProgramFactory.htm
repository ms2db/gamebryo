<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>ecr::D3D11ShaderProgramFactory</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">ecr::D3D11ShaderProgramFactory</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../efd/efd__MemObject.htm">efd::MemObject</a></span></p>


<p class="NDLRefHeaderFile">&lt;D3D11ShaderProgramFactory.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classecr_1_1_d3_d11_shader_program_factory.gif" alt="Inheritance graph for ecr::D3D11ShaderProgramFactory"/>
  <p class="FigureCaption">Inheritance graph for ecr::D3D11ShaderProgramFactory</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">Singleton factory class responsible for creating and caching shader programs for the D3D11 renderer. </p>

<a name="construction_and_destruction"></a>
<p class="NDLRefHead1">Construction and Destruction</p>


<a name="classecr_1_1_d3_d11_shader_program_factory_1a43b27b59a2340257c03dee50554e72a2"></a>
<p class="NDLRefMemberFunction">virtual ~D3D11ShaderProgramFactory()</p>
<p class="NDLRefMemberDescription">Destructor. </p>
<a name="public_static_methods"></a>
<p class="NDLRefHead1">Public Static Methods</p>


<a name="classecr_1_1_d3_d11_shader_program_factory_1a54b15a69c6374b7f43652b32b80b3900"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">D3D11ShaderProgramFactory</span>*  GetInstance()</p>
<p class="NDLRefMemberDescription">Returns an instance of the <span class="NDLSystemFont">D3D11ShaderProgramFactory</span>. </p>

<a name="classecr_1_1_d3_d11_shader_program_factory_1a1421a989a5842d480027fb3b249ee670"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">efd::Bool</span>  CreateVertexShaderFromFile(<br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pFileName, <br/>const D3D_SHADER_MACRO* pDefines, <br/><span class="NDLSystemFont">ID3DInclude</span>* pInclude, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pEntryPoint, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pShaderTarget, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> flags, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pShaderName, <br/><span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">D3D11VertexShaderPtr</a></span>& spVertexShader)</p>
<p class="NDLRefMemberDescription">Create a vertex shader from a file. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pFileName</span></td>
    <td>Name of the file to read. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pDefines</span></td>
    <td>Set of D3D_SHADER_MACRO structures to use when compiling the shader program. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pInclude</span></td>
    <td>ID3D11Include-derived object to use to find include files when compiling the shader program. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pEntryPoint</span></td>
    <td>Entry point of the shader program to compile. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pShaderTarget</span></td>
    <td>Shader target to use when compiling the shader program. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">flags</span></td>
    <td>Flags to use when compiling the shader program. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pShaderName</span></td>
    <td>Name of the shader program, used to register the shader program with the shader program factory. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">spVertexShader</span></td>
    <td>Outputs the resulting shader program. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the function succeeds, false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_d3_d11_shader_program_factory_1ac4d1445fcfe6ed2e6e0cf9cbc70180ec"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">efd::Bool</span>  CreateVertexShaderFromBlob(<br/>ID3DBlob* pShaderCode, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pFileName, <br/>const D3D_SHADER_MACRO* pDefines, <br/><span class="NDLSystemFont">ID3DInclude</span>* pInclude, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pEntryPoint, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pShaderTarget, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> flags, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pShaderName, <br/><span class="NDLSystemFont">efd::Bool</span> isCompiled, <br/><span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">D3D11VertexShaderPtr</a></span>& spVertexShader)</p>
<p class="NDLRefMemberDescription">Create a vertex shader from a memory buffer containing compiled or uncompiled code. </p>
<p class="NDLRefMemberDetailedDescription">Even though this shader program does not come from a file, the pFileName parameter is used to select the appropriate <span class="NDLSystemFont"><a href="ecr__D3D11ShaderProgramCreator.htm">D3D11ShaderProgramCreator</a></span> object from the file name's extension. The file name can also be used to provide debug shader information.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pShaderCode</span></td>
    <td>ID3DBlob containing the shader program code. An ID3DBlob can be created using D3D11Renderer::D3D10CreateBlob. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pFileName</span></td>
    <td>Name of the shader program file. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pDefines</span></td>
    <td>Set of D3D_SHADER_MACRO structures to use when compiling the shader program. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pInclude</span></td>
    <td>ID3D11Include-derived object to use to find include files when compiling the shader program. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pEntryPoint</span></td>
    <td>Entry point of the shader program to compile. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pShaderTarget</span></td>
    <td>Shader target to use when compiling the shader program. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">flags</span></td>
    <td>Flags to use when compiling the shader program. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pShaderName</span></td>
    <td>Name of the shader program, used to register the shader program with the shader program factory. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">isCompiled</span></td>
    <td>Whether or not the code is compiled binary or uncompiled text. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">spVertexShader</span></td>
    <td>Outputs the resulting shader program. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the function succeeds, false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_d3_d11_shader_program_factory_1a7aba3517f25e4d4a586f432ccd501159"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">efd::Bool</span>  CreateHullShaderFromFile(<br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pFileName, <br/>const D3D_SHADER_MACRO* pDefines, <br/><span class="NDLSystemFont">ID3DInclude</span>* pInclude, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pEntryPoint, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pShaderTarget, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> flags, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pShaderName, <br/><span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">D3D11HullShaderPtr</a></span>& spHullShader)</p>
<p class="NDLRefMemberDescription">Create a hull shader from a file. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pFileName</span></td>
    <td>Name of the file to read. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pDefines</span></td>
    <td>Set of D3D_SHADER_MACRO structures to use when compiling the shader program. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pInclude</span></td>
    <td>ID3D11Include-derived object to use to find include files when compiling the shader program. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pEntryPoint</span></td>
    <td>Entry point of the shader program to compile. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pShaderTarget</span></td>
    <td>Shader target to use when compiling the shader program. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">flags</span></td>
    <td>Flags to use when compiling the shader program. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pShaderName</span></td>
    <td>Name of the shader program, used to register the shader program with the shader program factory. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">spHullShader</span></td>
    <td>Outputs the resulting shader program. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the function succeeds, false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_d3_d11_shader_program_factory_1ab26c1d4f7205d1decfe8a355bb8d630a"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">efd::Bool</span>  CreateHullShaderFromBlob(<br/>ID3DBlob* pShaderCode, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pFileName, <br/>const D3D_SHADER_MACRO* pDefines, <br/><span class="NDLSystemFont">ID3DInclude</span>* pInclude, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pEntryPoint, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pShaderTarget, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> flags, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pShaderName, <br/><span class="NDLSystemFont">efd::Bool</span> isCompiled, <br/><span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">D3D11HullShaderPtr</a></span>& spHullShader)</p>
<p class="NDLRefMemberDescription">Create a hull shader from a memory buffer containing compiled or uncompiled code. </p>
<p class="NDLRefMemberDetailedDescription">Even though this shader program does not come from a file, the pFileName parameter is used to select the appropriate <span class="NDLSystemFont"><a href="ecr__D3D11ShaderProgramCreator.htm">D3D11ShaderProgramCreator</a></span> object from the file name's extension. The file name can also be used to provide debug shader information.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pShaderCode</span></td>
    <td>ID3DBlob containing the shader program code. An ID3DBlob can be created using D3D11Renderer::D3D10CreateBlob. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pFileName</span></td>
    <td>Name of the shader program file. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pDefines</span></td>
    <td>Set of D3D_SHADER_MACRO structures to use when compiling the shader program. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pInclude</span></td>
    <td>ID3D11Include-derived object to use to find include files when compiling the shader program. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pEntryPoint</span></td>
    <td>Entry point of the shader program to compile. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pShaderTarget</span></td>
    <td>Shader target to use when compiling the shader program. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">flags</span></td>
    <td>Flags to use when compiling the shader program. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pShaderName</span></td>
    <td>Name of the shader program, used to register the shader program with the shader program factory. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">isCompiled</span></td>
    <td>Whether or not the code is compiled binary or uncompiled text. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">spHullShader</span></td>
    <td>Outputs the resulting shader program. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the function succeeds, false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_d3_d11_shader_program_factory_1aafbf3822d4ac8fba8ac67a5e84aa59f6"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">efd::Bool</span>  CreateDomainShaderFromFile(<br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pFileName, <br/>const D3D_SHADER_MACRO* pDefines, <br/><span class="NDLSystemFont">ID3DInclude</span>* pInclude, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pEntryPoint, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pShaderTarget, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> flags, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pShaderName, <br/><span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">D3D11DomainShaderPtr</a></span>& spDomainShader)</p>
<p class="NDLRefMemberDescription">Create a domain shader from a file. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pFileName</span></td>
    <td>Name of the file to read. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pDefines</span></td>
    <td>Set of D3D_SHADER_MACRO structures to use when compiling the shader program. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pInclude</span></td>
    <td>ID3D11Include-derived object to use to find include files when compiling the shader program. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pEntryPoint</span></td>
    <td>Entry point of the shader program to compile. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pShaderTarget</span></td>
    <td>Shader target to use when compiling the shader program. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">flags</span></td>
    <td>Flags to use when compiling the shader program. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pShaderName</span></td>
    <td>Name of the shader program, used to register the shader program with the shader program factory. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">spDomainShader</span></td>
    <td>Outputs the resulting shader program. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the function succeeds, false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_d3_d11_shader_program_factory_1aa4e74296072c8087eb03cec611c3be1a"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">efd::Bool</span>  CreateDomainShaderFromBlob(<br/>ID3DBlob* pShaderCode, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pFileName, <br/>const D3D_SHADER_MACRO* pDefines, <br/><span class="NDLSystemFont">ID3DInclude</span>* pInclude, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pEntryPoint, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pShaderTarget, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> flags, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pShaderName, <br/><span class="NDLSystemFont">efd::Bool</span> isCompiled, <br/><span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">D3D11DomainShaderPtr</a></span>& spDomainShader)</p>
<p class="NDLRefMemberDescription">Create a domain shader from a memory buffer containing compiled or uncompiled code. </p>
<p class="NDLRefMemberDetailedDescription">Even though this shader program does not come from a file, the pFileName parameter is used to select the appropriate <span class="NDLSystemFont"><a href="ecr__D3D11ShaderProgramCreator.htm">D3D11ShaderProgramCreator</a></span> object from the file name's extension. The file name can also be used to provide debug shader information.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pShaderCode</span></td>
    <td>ID3DBlob containing the shader program code. An ID3DBlob can be created using D3D11Renderer::D3D10CreateBlob. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pFileName</span></td>
    <td>Name of the shader program file. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pDefines</span></td>
    <td>Set of D3D_SHADER_MACRO structures to use when compiling the shader program. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pInclude</span></td>
    <td>ID3D11Include-derived object to use to find include files when compiling the shader program. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pEntryPoint</span></td>
    <td>Entry point of the shader program to compile. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pShaderTarget</span></td>
    <td>Shader target to use when compiling the shader program. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">flags</span></td>
    <td>Flags to use when compiling the shader program. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pShaderName</span></td>
    <td>Name of the shader program, used to register the shader program with the shader program factory. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">isCompiled</span></td>
    <td>Whether or not the code is compiled binary or uncompiled text. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">spDomainShader</span></td>
    <td>Outputs the resulting shader program. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the function succeeds, false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_d3_d11_shader_program_factory_1a3c9c0dc6e273e4a246230bd9164d28ab"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">efd::Bool</span>  CreateGeometryShaderFromFile(<br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pFileName, <br/>const D3D_SHADER_MACRO* pDefines, <br/><span class="NDLSystemFont">ID3DInclude</span>* pInclude, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pEntryPoint, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pShaderTarget, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> flags, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pShaderName, <br/><span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">D3D11GeometryShaderPtr</a></span>& spGeometryShader)</p>
<p class="NDLRefMemberDescription">Create a geometry shader from a file. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pFileName</span></td>
    <td>Name of the file to read. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pDefines</span></td>
    <td>Set of D3D_SHADER_MACRO structures to use when compiling the shader program. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pInclude</span></td>
    <td>ID3D11Include-derived object to use to find include files when compiling the shader program. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pEntryPoint</span></td>
    <td>Entry point of the shader program to compile. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pShaderTarget</span></td>
    <td>Shader target to use when compiling the shader program. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">flags</span></td>
    <td>Flags to use when compiling the shader program. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pShaderName</span></td>
    <td>Name of the shader program, used to register the shader program with the shader program factory. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">spGeometryShader</span></td>
    <td>Outputs the resulting shader program. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the function succeeds, false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_d3_d11_shader_program_factory_1af6474337d18ec2473ea03cb88b090611"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">efd::Bool</span>  CreateGeometryShaderFromBlob(<br/>ID3DBlob* pShaderCode, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pFileName, <br/>const D3D_SHADER_MACRO* pDefines, <br/><span class="NDLSystemFont">ID3DInclude</span>* pInclude, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pEntryPoint, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pShaderTarget, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> flags, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pShaderName, <br/><span class="NDLSystemFont">efd::Bool</span> isCompiled, <br/><span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">D3D11GeometryShaderPtr</a></span>& spGeometryShader)</p>
<p class="NDLRefMemberDescription">Create a geometry shader from a memory buffer containing compiled or uncompiled code. </p>
<p class="NDLRefMemberDetailedDescription">Even though this shader program does not come from a file, the pFileName parameter is used to select the appropriate <span class="NDLSystemFont"><a href="ecr__D3D11ShaderProgramCreator.htm">D3D11ShaderProgramCreator</a></span> object from the file name's extension. The file name can also be used to provide debug shader information.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pShaderCode</span></td>
    <td>ID3DBlob containing the shader program code. An ID3DBlob can be created using D3D11Renderer::D3D10CreateBlob. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pFileName</span></td>
    <td>Name of the shader program file. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pDefines</span></td>
    <td>Set of D3D_SHADER_MACRO structures to use when compiling the shader program. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pInclude</span></td>
    <td>ID3D11Include-derived object to use to find include files when compiling the shader program. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pEntryPoint</span></td>
    <td>Entry point of the shader program to compile. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pShaderTarget</span></td>
    <td>Shader target to use when compiling the shader program. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">flags</span></td>
    <td>Flags to use when compiling the shader program. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pShaderName</span></td>
    <td>Name of the shader program, used to register the shader program with the shader program factory. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">isCompiled</span></td>
    <td>Whether or not the code is compiled binary or uncompiled text. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">spGeometryShader</span></td>
    <td>Outputs the resulting shader program. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the function succeeds, false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_d3_d11_shader_program_factory_1aca9f4e5c76427bd4ee59a851b364f9dc"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">efd::Bool</span>  CreateGeometryShaderWithStreamOutputFromFile(<br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pFileName, <br/>const D3D_SHADER_MACRO* pDefines, <br/><span class="NDLSystemFont">ID3DInclude</span>* pInclude, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pEntryPoint, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pShaderTarget, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> flags, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pShaderName, <br/>const D3D11_SO_DECLARATION_ENTRY* pSODeclaration, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> numEntries, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>* outputStreamStrideArray, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> numOutputStreams, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> rasterizedStream, <br/><span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">D3D11GeometryShaderPtr</a></span>& spGeometryShader)</p>
<p class="NDLRefMemberDescription">Create a geometry shader with stream output from a file. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pFileName</span></td>
    <td>Name of the file to read. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pDefines</span></td>
    <td>Set of D3D_SHADER_MACRO structures to use when compiling the shader program. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pInclude</span></td>
    <td>ID3D11Include-derived object to use to find include files when compiling the shader program. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pEntryPoint</span></td>
    <td>Entry point of the shader program to compile. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pShaderTarget</span></td>
    <td>Shader target to use when compiling the shader program. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">flags</span></td>
    <td>Flags to use when compiling the shader program. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pShaderName</span></td>
    <td>Name of the shader program, used to register the shader program with the shader program factory. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pSODeclaration</span></td>
    <td>Array of D3D11_SO_DECLARATION_ENTRY describing the shader output buffers. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">numEntries</span></td>
    <td>Number of entries in pSODeclaration. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">outputStreamStrideArray</span></td>
    <td>Array of strides for each output stream. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">numOutputStreams</span></td>
    <td>Number of output streams. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">rasterizedStream</span></td>
    <td>ID of output stream to be passed to the rasterizer, or D3D11_SO_NO_RASTERIZED_STREAM if no stream is to be rasterized. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">spGeometryShader</span></td>
    <td>Outputs the resulting shader program. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the function succeeds, false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_d3_d11_shader_program_factory_1a88d0fb226fe263cad0ef33e43d799b42"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">efd::Bool</span>  CreateGeometryShaderWithStreamOutputFromBlob(<br/>ID3DBlob* pShaderCode, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pFileName, <br/>const D3D_SHADER_MACRO* pDefines, <br/><span class="NDLSystemFont">ID3DInclude</span>* pInclude, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pEntryPoint, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pShaderTarget, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> flags, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pShaderName, <br/>const D3D11_SO_DECLARATION_ENTRY* pSODeclaration, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> numEntries, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>* outputStreamStrideArray, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> numOutputStreams, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> rasterizedStream, <br/><span class="NDLSystemFont">efd::Bool</span> isCompiled, <br/><span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">D3D11GeometryShaderPtr</a></span>& spGeometryShader)</p>
<p class="NDLRefMemberDescription">Create a geometry shader with stream output from a memory buffer containing compiled or uncompiled code. </p>
<p class="NDLRefMemberDetailedDescription">Even though this shader program does not come from a file, the pFileName parameter is used to select the appropriate <span class="NDLSystemFont"><a href="ecr__D3D11ShaderProgramCreator.htm">D3D11ShaderProgramCreator</a></span> object from the file name's extension. The file name can also be used to provide debug shader information.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pShaderCode</span></td>
    <td>ID3DBlob containing the shader program code. An ID3DBlob can be created using D3D11Renderer::D3D10CreateBlob. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pFileName</span></td>
    <td>Name of the shader program file. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pDefines</span></td>
    <td>Set of D3D_SHADER_MACRO structures to use when compiling the shader program. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pInclude</span></td>
    <td>ID3D11Include-derived object to use to find include files when compiling the shader program. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pEntryPoint</span></td>
    <td>Entry point of the shader program to compile. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pShaderTarget</span></td>
    <td>Shader target to use when compiling the shader program. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">flags</span></td>
    <td>Flags to use when compiling the shader program. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pShaderName</span></td>
    <td>Name of the shader program, used to register the shader program with the shader program factory. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pSODeclaration</span></td>
    <td>Array of D3D11_SO_DECLARATION_ENTRY describing the shader output buffers. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">numEntries</span></td>
    <td>Number of entries in pSODeclaration. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">outputStreamStrideArray</span></td>
    <td>Array of strides for each output stream. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">numOutputStreams</span></td>
    <td>Number of output streams. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">rasterizedStream</span></td>
    <td>ID of output stream to be passed to the rasterizer, or D3D11_SO_NO_RASTERIZED_STREAM if no stream is to be rasterized. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">isCompiled</span></td>
    <td>Whether or not the code is compiled binary or uncompiled text. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">spGeometryShader</span></td>
    <td>Outputs the resulting shader program. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the function succeeds, false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_d3_d11_shader_program_factory_1aad29a281acc3bf16709ce1e4a7a922f0"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">efd::Bool</span>  CreatePixelShaderFromFile(<br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pFileName, <br/>const D3D_SHADER_MACRO* pDefines, <br/><span class="NDLSystemFont">ID3DInclude</span>* pInclude, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pEntryPoint, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pShaderTarget, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> flags, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pShaderName, <br/><span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">D3D11PixelShaderPtr</a></span>& spPixelShader)</p>
<p class="NDLRefMemberDescription">Create a pixel shader from a file. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pFileName</span></td>
    <td>Name of the file to read. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pDefines</span></td>
    <td>Set of D3D_SHADER_MACRO structures to use when compiling the shader program. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pInclude</span></td>
    <td>ID3D11Include-derived object to use to find include files when compiling the shader program. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pEntryPoint</span></td>
    <td>Entry point of the shader program to compile. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pShaderTarget</span></td>
    <td>Shader target to use when compiling the shader program. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">flags</span></td>
    <td>Flags to use when compiling the shader program. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pShaderName</span></td>
    <td>Name of the shader program, used to register the shader program with the shader program factory. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">spPixelShader</span></td>
    <td>Outputs the resulting shader program. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the function succeeds, false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_d3_d11_shader_program_factory_1a1f196d5df1a7b78f9cd7f13913c89c4e"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">efd::Bool</span>  CreatePixelShaderFromBlob(<br/>ID3DBlob* pShaderCode, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pFileName, <br/>const D3D_SHADER_MACRO* pDefines, <br/><span class="NDLSystemFont">ID3DInclude</span>* pInclude, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pEntryPoint, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pShaderTarget, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> flags, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pShaderName, <br/><span class="NDLSystemFont">efd::Bool</span> isCompiled, <br/><span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">D3D11PixelShaderPtr</a></span>& spPixelShader)</p>
<p class="NDLRefMemberDescription">Create a pixel shader from a memory buffer containing compiled or uncompiled code. </p>
<p class="NDLRefMemberDetailedDescription">Even though this shader program does not come from a file, the pFileName parameter is used to select the appropriate <span class="NDLSystemFont"><a href="ecr__D3D11ShaderProgramCreator.htm">D3D11ShaderProgramCreator</a></span> object from the file name's extension. The file name can also be used to provide debug shader information.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pShaderCode</span></td>
    <td>ID3DBlob containing the shader program code. An ID3DBlob can be created using D3D11Renderer::D3D10CreateBlob. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pFileName</span></td>
    <td>Name of the shader program file. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pDefines</span></td>
    <td>Set of D3D_SHADER_MACRO structures to use when compiling the shader program. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pInclude</span></td>
    <td>ID3D11Include-derived object to use to find include files when compiling the shader program. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pEntryPoint</span></td>
    <td>Entry point of the shader program to compile. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pShaderTarget</span></td>
    <td>Shader target to use when compiling the shader program. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">flags</span></td>
    <td>Flags to use when compiling the shader program. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pShaderName</span></td>
    <td>Name of the shader program, used to register the shader program with the shader program factory. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">isCompiled</span></td>
    <td>Whether or not the code is compiled binary or uncompiled text. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">spPixelShader</span></td>
    <td>Outputs the resulting shader program. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the function succeeds, false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_d3_d11_shader_program_factory_1ac5ab6c89adb273b8f80abcfb64b8d3bf"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">efd::Bool</span>  CreateComputeShaderFromFile(<br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pFileName, <br/>const D3D_SHADER_MACRO* pDefines, <br/><span class="NDLSystemFont">ID3DInclude</span>* pInclude, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pEntryPoint, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pShaderTarget, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> flags, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pShaderName, <br/><span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">D3D11ComputeShaderPtr</a></span>& spComputeShader)</p>
<p class="NDLRefMemberDescription">Create a compute shader from a file. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pFileName</span></td>
    <td>Name of the file to read. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pDefines</span></td>
    <td>Set of D3D_SHADER_MACRO structures to use when compiling the shader program. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pInclude</span></td>
    <td>ID3D11Include-derived object to use to find include files when compiling the shader program. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pEntryPoint</span></td>
    <td>Entry point of the shader program to compile. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pShaderTarget</span></td>
    <td>Shader target to use when compiling the shader program. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">flags</span></td>
    <td>Flags to use when compiling the shader program. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pShaderName</span></td>
    <td>Name of the shader program, used to register the shader program with the shader program factory. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">spComputeShader</span></td>
    <td>Outputs the resulting shader program. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the function succeeds, false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_d3_d11_shader_program_factory_1a3e80a93f02ecb763f3d06b9f0cc80558"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">efd::Bool</span>  CreateComputeShaderFromBlob(<br/>ID3DBlob* pShaderCode, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pFileName, <br/>const D3D_SHADER_MACRO* pDefines, <br/><span class="NDLSystemFont">ID3DInclude</span>* pInclude, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pEntryPoint, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pShaderTarget, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> flags, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pShaderName, <br/><span class="NDLSystemFont">efd::Bool</span> isCompiled, <br/><span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">D3D11ComputeShaderPtr</a></span>& spComputeShader)</p>
<p class="NDLRefMemberDescription">Create a pixel shader from a memory buffer containing compiled or uncompiled code. </p>
<p class="NDLRefMemberDetailedDescription">Even though this shader program does not come from a file, the pFileName parameter is used to select the appropriate <span class="NDLSystemFont"><a href="ecr__D3D11ShaderProgramCreator.htm">D3D11ShaderProgramCreator</a></span> object from the file name's extension. The file name can also be used to provide debug shader information.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pShaderCode</span></td>
    <td>ID3DBlob containing the shader program code. An ID3DBlob can be created using D3D11Renderer::D3D10CreateBlob. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pFileName</span></td>
    <td>Name of the shader program file. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pDefines</span></td>
    <td>Set of D3D_SHADER_MACRO structures to use when compiling the shader program. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pInclude</span></td>
    <td>ID3D11Include-derived object to use to find included files when compiling the shader program. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pEntryPoint</span></td>
    <td>Entry point of the shader program to compile. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pShaderTarget</span></td>
    <td>Shader target to use when compiling the shader program. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">flags</span></td>
    <td>Flags to use when compiling the shader program. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pShaderName</span></td>
    <td>Name of the shader program, used to register the shader program with the shader program factory. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">isCompiled</span></td>
    <td>Whether or not the code is compiled binary or uncompiled text. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">spComputeShader</span></td>
    <td>Outputs the resulting shader program. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the function succeeds, false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_d3_d11_shader_program_factory_1a891fce19c4d21654938da11d2829cdfb"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetUniversalShaderCreationFlags()</p>
<p class="NDLRefMemberDescription">Return flags to be ORed with incoming flags when compiling all shader programs. </p>

<a name="classecr_1_1_d3_d11_shader_program_factory_1aaff062340cd3c6b0d09d256fd0918080"></a>
<p class="NDLRefMemberFunction">static void  SetUniversalShaderCreationFlags(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> flags)</p>
<p class="NDLRefMemberDescription">Set flags to be ORed with incoming flags when compiling all shader programs. </p>

<a name="classecr_1_1_d3_d11_shader_program_factory_1ae69decdc598f3c793f7ff598805f0ae4"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">efd::Bool</span>  RegisterShaderCreator(<br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pExt, <br/><span class="NDLSystemFont"><a href="ecr__D3D11ShaderProgramCreator.htm">D3D11ShaderProgramCreator</a></span>* pCreator)</p>
<p class="NDLRefMemberDescription">Register a new shader program creator with the shader program factory. </p>
<p class="NDLRefMemberDetailedDescription">Shader program creators are registered by file extension - when compiling a new shader program, the file name is searched for the file extension to determine which shader program creator to use. A single shader program creator can be registered with multiple extensions if desired.</p>
<p class="NDLRefMemberDetailedDescription">This can also be used to override an existing registration.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pExt</span></td>
    <td>File extension to associate with this shader program creator. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pCreator</span></td>
    <td>Shader program creator to register </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Whether the registration was successful. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_d3_d11_shader_program_factory_1a239bf0dd1bba319472368e8aa0e2814b"></a>
<p class="NDLRefMemberFunction">static void  UnregisterShaderCreator(<span class="NDLSystemFont"><a href="ecr__D3D11ShaderProgramCreator.htm">D3D11ShaderProgramCreator</a></span>* pCreator)</p>
<p class="NDLRefMemberDescription">Unregister a shader program creator from all extensions it has been registered with. </p>

<a name="classecr_1_1_d3_d11_shader_program_factory_1abe5848b23d40f786f0c88459730198c2"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont"><a href="ecr__D3D11ShaderProgramCreator.htm">D3D11ShaderProgramCreator</a></span>*  GetShaderCreator(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pFilename)</p>
<p class="NDLRefMemberDescription">Return the shader program creator for a given filename. </p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classecr_1_1_d3_d11_shader_program_factory_1a86aa638d9c1b2ae7770a0af4ed59a7c6"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>*  GetFirstProgramDirectory(<span class="NDLSystemFont">NiTListIterator</span>& iter)</p>
<p class="NDLRefMemberDescription">Return the first directory to be searched for shader program files. </p>

<a name="classecr_1_1_d3_d11_shader_program_factory_1aa02a25fb5e8784f34b22e3c633fc9cbd"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>*  GetNextProgramDirectory(<span class="NDLSystemFont">NiTListIterator</span>& iter)</p>
<p class="NDLRefMemberDescription">Return the next directory to be searched for shader program files. </p>

<a name="classecr_1_1_d3_d11_shader_program_factory_1af9aadb078919a11c21845bad781adef6"></a>
<p class="NDLRefMemberFunction">void  AddProgramDirectory(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pDirectory)</p>
<p class="NDLRefMemberDescription">Add a directory to be searched for shader program files. </p>

<a name="classecr_1_1_d3_d11_shader_program_factory_1a30869d15e785ed885b3f20074ed0b551"></a>
<p class="NDLRefMemberFunction">void  RemoveProgramDirectory(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pDirectory)</p>
<p class="NDLRefMemberDescription">Remove a directory to be searched for shader program files. </p>

<a name="classecr_1_1_d3_d11_shader_program_factory_1a89a7fdf8b5087192f848407f3e595989"></a>
<p class="NDLRefMemberFunction">void  RemoveAllProgramDirectories()</p>
<p class="NDLRefMemberDescription">Remove all directories to be searched for shader program files. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
