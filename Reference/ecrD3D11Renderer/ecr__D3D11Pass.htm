<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>ecr::D3D11Pass</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">ecr::D3D11Pass</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../NiMain/NiRefObject.htm">NiRefObject</a></span></p>


<p class="NDLRefHeaderFile">&lt;D3D11Pass.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classecr_1_1_d3_d11_pass.gif" alt="Inheritance graph for ecr::D3D11Pass"/>
  <p class="FigureCaption">Inheritance graph for ecr::D3D11Pass</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal"><span class="NDLSystemFont">ecr::D3D11Pass</span> represents a single rendering pass for a <span class="NDLSystemFont"><a href="ecr__D3D11ShaderCore.htm">D3D11ShaderCore</a></span>. </p>

<a name="construction_and_destruction"></a>
<p class="NDLRefHead1">Construction and Destruction</p>


<a name="classecr_1_1_d3_d11_pass_1a51beb6716ee9c1f0fb72b849cba3ec1a"></a>
<p class="NDLRefMemberFunction">virtual ~D3D11Pass()</p>
<p class="NDLRefMemberDescription">Destructor. </p>
<a name="public_static_methods"></a>
<p class="NDLRefHead1">Public Static Methods</p>


<a name="classecr_1_1_d3_d11_pass_1a587f1fc93c42b65e7f05b1c5433b37d0"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">efd::Bool</span>  CreateNewPass(<span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">D3D11PassPtr</a></span>& spNewPass)</p>
<p class="NDLRefMemberDescription">Creates a new D3D11pass object. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">spNewPass</span></td>
    <td>Outputs a smart pointer to the new pass object. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the function succeeds, false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>


<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classecr_1_1_d3_d11_pass_1a6c9760e4f592e16d4e54f55e68b13a6f"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>*  GetName() const</p>
<p class="NDLRefMemberDescription">Return the name of the pass. </p>

<a name="classecr_1_1_d3_d11_pass_1a5c6f029cd5a01e823723543b9b7b802f"></a>
<p class="NDLRefMemberFunction">void  SetName(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pName)</p>
<p class="NDLRefMemberDescription">Set the name of the pass. </p>

<a name="classecr_1_1_d3_d11_pass_1acd6fd46214a81cdb69da8b05a348f097"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="ecr__D3D11RenderStateGroup.htm">D3D11RenderStateGroup</a></span>*  GetRenderStateGroup() const</p>
<p class="NDLRefMemberDescription">Return the render state group for the pass. </p>

<a name="classecr_1_1_d3_d11_pass_1a6b260860153b360e88fcfa2408cef9bd"></a>
<p class="NDLRefMemberFunction">void  SetRenderStateGroup(<span class="NDLSystemFont"><a href="ecr__D3D11RenderStateGroup.htm">D3D11RenderStateGroup</a></span>* pRenderStateGroup)</p>
<p class="NDLRefMemberDescription">Set the render state group for the pass. </p>

<a name="classecr_1_1_d3_d11_pass_1a43ff4b3ea2105ba9ea640df007eeda92"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetConstantMapCount() const</p>
<p class="NDLRefMemberDescription">Return the number of shader constant maps for the pass. </p>

<a name="classecr_1_1_d3_d11_pass_1a567335da2dad3fe3e2ee1676106fd552"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="ecr__D3D11ShaderConstantMap.htm">D3D11ShaderConstantMap</a></span>*  GetConstantMap(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> index) const</p>
<p class="NDLRefMemberDescription">Return the shader constant map with the given index. </p>

<a name="classecr_1_1_d3_d11_pass_1a314f9e822cc35169187e047b98fc2c46"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  AddConstantMap(<span class="NDLSystemFont"><a href="ecr__D3D11ShaderConstantMap.htm">D3D11ShaderConstantMap</a></span>* pSCMVertex)</p>
<p class="NDLRefMemberDescription">Add a new shader constant map pass, and return the index of that map. </p>

<a name="classecr_1_1_d3_d11_pass_1aa0fa579ec1cbfe093fe0252c6bf43a3e"></a>
<p class="NDLRefMemberFunction">void  RemoveConstantMap(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> index)</p>
<p class="NDLRefMemberDescription">Remove the shader constant map with the given index. </p>

<a name="classecr_1_1_d3_d11_pass_1a49a95edf5f5fd97a61f7e8f17b299568"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="ecr__D3D11VertexShader.htm">D3D11VertexShader</a></span>*  GetVertexShader() const</p>
<p class="NDLRefMemberDescription">Return the vertex shader on the pass. </p>

<a name="classecr_1_1_d3_d11_pass_1a9db6eca8d6b1d65b8faf46d407302ff6"></a>
<p class="NDLRefMemberFunction">void  SetVertexShader(<span class="NDLSystemFont"><a href="ecr__D3D11VertexShader.htm">D3D11VertexShader</a></span>* pVertexShader)</p>
<p class="NDLRefMemberDescription">Set the vertex shader on the pass. </p>

<a name="classecr_1_1_d3_d11_pass_1a03969155108b69e4093c06af4927ab1b"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>*  GetVertexShaderProgramFileName() const</p>
<p class="NDLRefMemberDescription">Return the name of the file that will be used to compile the vertex shader. </p>

<a name="classecr_1_1_d3_d11_pass_1ad9b652d726278c8dac375f658d8ea41b"></a>
<p class="NDLRefMemberFunction">void  SetVertexShaderProgramFileName(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pProgramFile)</p>
<p class="NDLRefMemberDescription">Set the name of the file that will be used to compile the vertex shader. </p>

<a name="classecr_1_1_d3_d11_pass_1a188b920d53b5358bb465aa08796291b2"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>*  GetVertexShaderProgramEntryPoint() const</p>
<p class="NDLRefMemberDescription">Return the entry point that will be used to compile the vertex shader. </p>

<a name="classecr_1_1_d3_d11_pass_1a043664ccdd52fd5908b88ffd62921d48"></a>
<p class="NDLRefMemberFunction">void  SetVertexShaderProgramEntryPoint(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pEntryPoint)</p>
<p class="NDLRefMemberDescription">Set the entry point that will be used to compile the vertex shader. </p>

<a name="classecr_1_1_d3_d11_pass_1a0ff849392a97f9466bca71e187523f35"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>*  GetVertexShaderProgramShaderTarget() const</p>
<p class="NDLRefMemberDescription">Return the shader target that will be used to compile the vertex shader. </p>

<a name="classecr_1_1_d3_d11_pass_1a1f0f305b384b562604cc3744f290d628"></a>
<p class="NDLRefMemberFunction">void  SetVertexShaderProgramShaderTarget(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pShaderTarget)</p>
<p class="NDLRefMemberDescription">Set the shader target that will be used to compile the vertex shader. </p>

<a name="classecr_1_1_d3_d11_pass_1a02d898517dcb0fe0ac51f9d3127931cc"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="ecr__D3D11HullShader.htm">D3D11HullShader</a></span>*  GetHullShader() const</p>
<p class="NDLRefMemberDescription">Return the hull shader on the pass. </p>

<a name="classecr_1_1_d3_d11_pass_1a217bd93afa8a2fdcfaac682eea29ba86"></a>
<p class="NDLRefMemberFunction">void  SetHullShader(<span class="NDLSystemFont"><a href="ecr__D3D11HullShader.htm">D3D11HullShader</a></span>* pHullShader)</p>
<p class="NDLRefMemberDescription">Set the hull shader on the pass. </p>

<a name="classecr_1_1_d3_d11_pass_1a9b8a151e84a9ebc1fec785528de2f639"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>*  GetHullShaderProgramFileName() const</p>
<p class="NDLRefMemberDescription">Return the name of the file that will be used to compile the hull shader. </p>

<a name="classecr_1_1_d3_d11_pass_1a695419b98689821c94d75d1c970a27b6"></a>
<p class="NDLRefMemberFunction">void  SetHullShaderProgramFileName(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pProgramFile)</p>
<p class="NDLRefMemberDescription">Set the name of the file that will be used to compile the hull shader. </p>

<a name="classecr_1_1_d3_d11_pass_1a0c8fee39da9c63c14983d025d2c5932e"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>*  GetHullShaderProgramEntryPoint() const</p>
<p class="NDLRefMemberDescription">Return the entry point that will be used to compile the hull shader. </p>

<a name="classecr_1_1_d3_d11_pass_1a24ea8735b356794a446652d365eb9870"></a>
<p class="NDLRefMemberFunction">void  SetHullShaderProgramEntryPoint(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pEntryPoint)</p>
<p class="NDLRefMemberDescription">Set the entry point that will be used to compile the hull shader. </p>

<a name="classecr_1_1_d3_d11_pass_1ab41f30369b946ff16ef4cfffb47cc22e"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>*  GetHullShaderProgramShaderTarget() const</p>
<p class="NDLRefMemberDescription">Return the shader target that will be used to compile the hull shader. </p>

<a name="classecr_1_1_d3_d11_pass_1a454128159fcac29c98898e4cbbf12441"></a>
<p class="NDLRefMemberFunction">void  SetHullShaderProgramShaderTarget(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pShaderTarget)</p>
<p class="NDLRefMemberDescription">Set the shader target that will be used to compile the hull shader. </p>

<a name="classecr_1_1_d3_d11_pass_1aefd3b6f1ed36c45b523a1737610314e3"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="ecr__D3D11DomainShader.htm">D3D11DomainShader</a></span>*  GetDomainShader() const</p>
<p class="NDLRefMemberDescription">Return the domain shader on the pass. </p>

<a name="classecr_1_1_d3_d11_pass_1ac4b1a29a20eccd9ecaf6a63955a57882"></a>
<p class="NDLRefMemberFunction">void  SetDomainShader(<span class="NDLSystemFont"><a href="ecr__D3D11DomainShader.htm">D3D11DomainShader</a></span>* pDomainShader)</p>
<p class="NDLRefMemberDescription">Set the domain shader on the pass. </p>

<a name="classecr_1_1_d3_d11_pass_1abb4e0ab01f176b72bbb1374c617e4c83"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>*  GetDomainShaderProgramFileName() const</p>
<p class="NDLRefMemberDescription">Return the name of the file that will be used to compile the domain shader. </p>

<a name="classecr_1_1_d3_d11_pass_1a2e99ad41e62be5339187285347b9aa05"></a>
<p class="NDLRefMemberFunction">void  SetDomainShaderProgramFileName(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pProgramFile)</p>
<p class="NDLRefMemberDescription">Set the name of the file that will be used to compile the domain shader. </p>

<a name="classecr_1_1_d3_d11_pass_1a5ca30f11127afac4418364c6d3448b75"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>*  GetDomainShaderProgramEntryPoint() const</p>
<p class="NDLRefMemberDescription">Return the entry point that will be used to compile the domain shader. </p>

<a name="classecr_1_1_d3_d11_pass_1ab183679a39510ff5471918378150d63e"></a>
<p class="NDLRefMemberFunction">void  SetDomainShaderProgramEntryPoint(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pEntryPoint)</p>
<p class="NDLRefMemberDescription">Set the entry point that will be used to compile the domain shader. </p>

<a name="classecr_1_1_d3_d11_pass_1af7f555c9209f28aa335ea758f7f96af2"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>*  GetDomainShaderProgramShaderTarget() const</p>
<p class="NDLRefMemberDescription">Return the shader target that will be used to compile the domain shader. </p>

<a name="classecr_1_1_d3_d11_pass_1afcc3e388b3ea0015f26141aee5046f10"></a>
<p class="NDLRefMemberFunction">void  SetDomainShaderProgramShaderTarget(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pShaderTarget)</p>
<p class="NDLRefMemberDescription">Set the shader target that will be used to compile the domain shader. </p>

<a name="classecr_1_1_d3_d11_pass_1a768e95f1ab36c28a39ed2bd39a5e237d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="ecr__D3D11GeometryShader.htm">D3D11GeometryShader</a></span>*  GetGeometryShader() const</p>
<p class="NDLRefMemberDescription">Return the geometry shader on the pass. </p>

<a name="classecr_1_1_d3_d11_pass_1aedf271b04a45f50ea323bb98d5a282d3"></a>
<p class="NDLRefMemberFunction">void  SetGeometryShader(<span class="NDLSystemFont"><a href="ecr__D3D11GeometryShader.htm">D3D11GeometryShader</a></span>* pGeometryShader)</p>
<p class="NDLRefMemberDescription">Set the geometry shader on the pass. </p>

<a name="classecr_1_1_d3_d11_pass_1a83bfd6ec5772c87dcb35fa391dad4fa3"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>*  GetGeometryShaderProgramFileName() const</p>
<p class="NDLRefMemberDescription">Return the name of the file that will be used to compile the geometry shader. </p>

<a name="classecr_1_1_d3_d11_pass_1a0815bbe772c17f75d80e46b849e50d79"></a>
<p class="NDLRefMemberFunction">void  SetGeometryShaderProgramFileName(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pProgramFile)</p>
<p class="NDLRefMemberDescription">Set the name of the file that will be used to compile the geometry shader. </p>

<a name="classecr_1_1_d3_d11_pass_1aab236ee304cb5d3417df0935fefd8b73"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>*  GetGeometryShaderProgramEntryPoint() const</p>
<p class="NDLRefMemberDescription">Return the entry point that will be used to compile the geometry shader. </p>

<a name="classecr_1_1_d3_d11_pass_1a162a50eb913363e5676baa4294d361cd"></a>
<p class="NDLRefMemberFunction">void  SetGeometryShaderProgramEntryPoint(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pEntryPoint)</p>
<p class="NDLRefMemberDescription">Set the entry point that will be used to compile the geometry shader. </p>

<a name="classecr_1_1_d3_d11_pass_1a6283e45ebf4e0740bf20ff330f1fa49f"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>*  GetGeometryShaderProgramShaderTarget() const</p>
<p class="NDLRefMemberDescription">Return the shader target that will be used to compile the geometry shader. </p>

<a name="classecr_1_1_d3_d11_pass_1af9c381376b72ffd3b2ef7ddf38459075"></a>
<p class="NDLRefMemberFunction">void  SetGeometryShaderProgramShaderTarget(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pShaderTarget)</p>
<p class="NDLRefMemberDescription">Set the shader target that will be used to compile the geometry shader. </p>

<a name="classecr_1_1_d3_d11_pass_1a7387c9fe03cf2cc7b4680fdc1ae872b9"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="ecr__D3D11PixelShader.htm">D3D11PixelShader</a></span>*  GetPixelShader() const</p>
<p class="NDLRefMemberDescription">Return the pixel shader on the pass. </p>

<a name="classecr_1_1_d3_d11_pass_1ad94bdeee9d7f5c2e4f7e62e5149a498f"></a>
<p class="NDLRefMemberFunction">void  SetPixelShader(<span class="NDLSystemFont"><a href="ecr__D3D11PixelShader.htm">D3D11PixelShader</a></span>* pPixelShader)</p>
<p class="NDLRefMemberDescription">Set the pixel shader on the pass. </p>

<a name="classecr_1_1_d3_d11_pass_1a7c55445babeb6b907bf44423c912fb1d"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>*  GetPixelShaderProgramFileName() const</p>
<p class="NDLRefMemberDescription">Return the name of the file that will be used to compile the pixel shader. </p>

<a name="classecr_1_1_d3_d11_pass_1a564749d5c63a1f9a7cfcc53f686cfb3b"></a>
<p class="NDLRefMemberFunction">void  SetPixelShaderProgramFileName(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pProgramFile)</p>
<p class="NDLRefMemberDescription">Set the name of the file that will be used to compile the pixel shader. </p>

<a name="classecr_1_1_d3_d11_pass_1a8c6010669094d5731336053de13c005e"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>*  GetPixelShaderProgramEntryPoint() const</p>
<p class="NDLRefMemberDescription">Return the entry point that will be used to compile the pixel shader. </p>

<a name="classecr_1_1_d3_d11_pass_1aeefdc9adba1eeaed1f4bade8d403c74a"></a>
<p class="NDLRefMemberFunction">void  SetPixelShaderProgramEntryPoint(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pEntryPoint)</p>
<p class="NDLRefMemberDescription">Set the entry point that will be used to compile the pixel shader. </p>

<a name="classecr_1_1_d3_d11_pass_1a61173febadc259adb4816d5cb3d4c1d7"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>*  GetPixelShaderProgramShaderTarget() const</p>
<p class="NDLRefMemberDescription">Return the shader target that will be used to compile the pixel shader. </p>

<a name="classecr_1_1_d3_d11_pass_1a1b0646871ee1d6a39b4547202576b7f8"></a>
<p class="NDLRefMemberFunction">void  SetPixelShaderProgramShaderTarget(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pShaderTarget)</p>
<p class="NDLRefMemberDescription">Set the shader target that will be used to compile the pixel shader. </p>

<a name="classecr_1_1_d3_d11_pass_1a3231289fa624e8ba7991c1feb8460321"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="ecr__D3D11ComputeShader.htm">D3D11ComputeShader</a></span>*  GetComputeShader() const</p>
<p class="NDLRefMemberDescription">Return the compute shader on the pass. </p>

<a name="classecr_1_1_d3_d11_pass_1ac8e2955aa25bbcb281aac20e49d21be0"></a>
<p class="NDLRefMemberFunction">void  SetComputeShader(<span class="NDLSystemFont"><a href="ecr__D3D11ComputeShader.htm">D3D11ComputeShader</a></span>* pComputeShader)</p>
<p class="NDLRefMemberDescription">Set the compute shader on the pass. </p>

<a name="classecr_1_1_d3_d11_pass_1a3d886586a799ed8b6c6b50aacf11364b"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>*  GetComputeShaderProgramFileName() const</p>
<p class="NDLRefMemberDescription">Return the name of the file that will be used to compile the compute shader. </p>

<a name="classecr_1_1_d3_d11_pass_1aa203e4860dbae5ba57adba123fe25739"></a>
<p class="NDLRefMemberFunction">void  SetComputeShaderProgramFileName(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pProgramFile)</p>
<p class="NDLRefMemberDescription">Set the name of the file that will be used to compile the compute shader. </p>

<a name="classecr_1_1_d3_d11_pass_1a654fe3bf629f641dbf178e685b523179"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>*  GetComputeShaderProgramEntryPoint() const</p>
<p class="NDLRefMemberDescription">Return the entry point that will be used to compile the compute shader. </p>

<a name="classecr_1_1_d3_d11_pass_1a19b247d06972b22fe72fb8c9b5fce39e"></a>
<p class="NDLRefMemberFunction">void  SetComputeShaderProgramEntryPoint(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pEntryPoint)</p>
<p class="NDLRefMemberDescription">Set the entry point that will be used to compile the compute shader. </p>

<a name="classecr_1_1_d3_d11_pass_1a8173891ec3dfdbc8c8da359be4e4ce8d"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>*  GetComputeShaderProgramShaderTarget() const</p>
<p class="NDLRefMemberDescription">Return the shader target that will be used to compile the compute shader. </p>

<a name="classecr_1_1_d3_d11_pass_1ad4f84428494a9d099a5e2e59b54ad6c6"></a>
<p class="NDLRefMemberFunction">void  SetComputeShaderProgramShaderTarget(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pShaderTarget)</p>
<p class="NDLRefMemberDescription">Set the shader target that will be used to compile the compute shader. </p>

<a name="classecr_1_1_d3_d11_pass_1a41ebd5ec93592f56ab6da500b6abb412"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  ExposeShaderParameters(<span class="NDLSystemFont"><a href="ecr__D3D11ShaderCore.htm">D3D11ShaderCore</a></span>* pShader)</p>
<p class="NDLRefMemberDescription">Query all the shader programs on the pass and set up all the structures necessary to provide the data for the parameters that the shader programs expect. </p>
<p class="NDLRefMemberDetailedDescription">The structures this function will set up include <span class="NDLSystemFont"><a href="ecr__ConstantBufferDesc.htm">ConstantBufferDesc</a></span> objects for the constant buffers, arrays of names for the shader resources and samplers, and <span class="NDLSystemFont"><a href="ecr__UAVSlot.htm">UAVSlot</a></span> objects for unordered access views.</p>
<p class="NDLRefMemberDetailedDescription">This function is normally called when <span class="NDLSystemFont"><a href="ecr__D3D11ShaderCore.htm#classecr_1_1_d3_d11_shader_core_1ac22568e43d10b4bc9d4520af3bb27a8d">D3D11ShaderCore::Initialize</a></span> iterates its pass array and calls the function on all its passes. If, for whatever reason, a pass is not included in that array when D3DShaderCore::Initialize is called on a derived shader class, then that derived shader needs to ensure the function is called on all its passes. </p>

<a name="classecr_1_1_d3_d11_pass_1a118a21d3bc84f4b18a8a73030b3ca32c"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  LinkUpShaderResources()</p>
<p class="NDLRefMemberDescription">Before rendering, ensure all <span class="NDLSystemFont"><a href="ecr__ConstantBufferDesc.htm">ConstantBufferDesc</a></span> objects refer to the appropriate <span class="NDLSystemFont"><a href="../NiMain/NiShaderConstantMap.htm">NiShaderConstantMap</a></span>, and all shader resources the shaders require are associated with <span class="NDLSystemFont">ResourceSource</span> objects. </p>
<p class="NDLRefMemberDetailedDescription">This function will not be called every frame; only when the renderer detects that the resources need to be relinked, such as after removing an <span class="NDLSystemFont"><a href="../NiMain/NiShaderConstantMap.htm">NiShaderConstantMap</a></span> from the pass. </p>

<a name="classecr_1_1_d3_d11_pass_1aa2670800bfd9ebb695f45661ed511fec"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  ApplyShaderPrograms(const <span class="NDLSystemFont"><a href="../NiMain/NiRenderCallContext.htm">NiRenderCallContext</a></span>& callContext)</p>
<p class="NDLRefMemberDescription">Set all shader programs on the device context. </p>

<a name="classecr_1_1_d3_d11_pass_1a0c75dcb92cd7f636622688fde6a2b8b9"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  ApplyShaderConstants(const <span class="NDLSystemFont"><a href="../NiMain/NiRenderCallContext.htm">NiRenderCallContext</a></span>& callContext)</p>
<p class="NDLRefMemberDescription">Update constant buffers and set them on the device context. </p>

<a name="classecr_1_1_d3_d11_pass_1a23b786194bbc3d9e5aba80aa29a43275"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  ApplyTextures()</p>
<p class="NDLRefMemberDescription">Obtain shader resources and set them on the device context. </p>

<a name="classecr_1_1_d3_d11_pass_1a62d36073e10432e5737e64aa2499c383"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  ApplyUAVs()</p>
<p class="NDLRefMemberDescription">Obtain unordered access views and set them on the device context. </p>

<a name="classecr_1_1_d3_d11_pass_1a7e89d6dc13e3ccfe2847e2d05b419c6a"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  SetupRenderingPass(const <span class="NDLSystemFont"><a href="ecr__D3D11ShaderCore.htm">D3D11ShaderCore</a></span>* pShader)</p>
<p class="NDLRefMemberDescription">Setup the pass for rendering the given object. </p>
<p class="NDLRefMemberDetailedDescription">This it the function that calls LinkUpShaderResources, UpdateSamplers, and UpdateUAVs if necessary. This function also updates the render states and calls ApplyTextures and ApplyUAVs. </p>

<a name="classecr_1_1_d3_d11_pass_1a3838f1dfeee2eca9ab98772fb3866df3"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  PostProcessRenderingPass(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> pass = 0)</p>
<p class="NDLRefMemberDescription">Performs any required functionality at the end of the pass. </p>
<p class="NDLRefMemberDetailedDescription">The base implementation does nothing. </p>

<a name="classecr_1_1_d3_d11_pass_1a8422c3f2831f248a0566c244e97e39ab"></a>
<p class="NDLRefMemberFunction">void  SetShaderResourceAsDirectResource(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__FixedString.htm">efd::FixedString</a></span>& resourceName, <br/><span class="NDLSystemFont"><a href="../NiMain/NiTexture.htm">NiTexture</a></span>* pResource)</p>
<p class="NDLRefMemberDescription">Registers a shader resource on the pass as an <span class="NDLSystemFont"><a href="../NiMain/NiTexture.htm">NiTexture</a></span>. </p>
<p class="NDLRefMemberDetailedDescription">When a shader program requires a shader resource, it will search the pass's list of registered shader resource sources by name. The resources source will then provide the resource itself to the shader. This function allows an application to directly provide an <span class="NDLSystemFont"><a href="../NiMain/NiTexture.htm">NiTexture</a></span> as the resource.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">resourceName</span></td>
    <td>Name of the shader resource. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pResource</span></td>
    <td><span class="NDLSystemFont"><a href="../NiMain/NiTexture.htm">NiTexture</a></span> to associate with that name. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_d3_d11_pass_1ab2206b3c5678249b047ca00ccd01e810"></a>
<p class="NDLRefMemberFunction">void  SetShaderResourceAsGamebryoMap(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__FixedString.htm">efd::FixedString</a></span>& resourceName, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> gbMap, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span> instanceID)</p>
<p class="NDLRefMemberDescription">Registers a shader resource on the pass as a map on an <span class="NDLSystemFont"><a href="../NiMain/NiTexturingProperty.htm">NiTexturingProperty</a></span>. </p>
<p class="NDLRefMemberDetailedDescription">When a shader program requires a shader resource, it will search the pass's list of registered shader resource sources by name. The resources source will then provide the resource itself to the shader. This function has the shader get the resource from a specific map on the rendering <span class="NDLSystemFont"><a href="../NiMesh/NiMesh.htm">NiMesh</a></span> object's <span class="NDLSystemFont"><a href="../NiMain/NiTexturingProperty.htm">NiTexturingProperty</a></span>.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">resourceName</span></td>
    <td>Name of the shader resource. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">gbMap</span></td>
    <td><span class="NDLSystemFont"><a href="../NiMain/NiTexturingProperty.htm">NiTexturingProperty</a></span> map to use, identified using <span class="NDLSystemFont"><a href="../NiMain/NiTextureStage.htm">NiTextureStage::TSTextureFlags</a></span> enumerations. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">instanceID</span></td>
    <td>Instance of the <span class="NDLSystemFont"><a href="../NiMain/NiTexturingProperty.htm">NiTexturingProperty</a></span> map to use for Shader or Decal maps. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_d3_d11_pass_1a5a2559074f32429d4c872d571c5a2a0c"></a>
<p class="NDLRefMemberFunction">void  SetShaderResourceAsTextureObject(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__FixedString.htm">efd::FixedString</a></span>& resourceName, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span> objectFlags)</p>
<p class="NDLRefMemberDescription">Registers a shader resource on the pass as a texture from an <span class="NDLSystemFont"><a href="../NiMain/NiTextureEffect.htm">NiTextureEffect</a></span>. </p>
<p class="NDLRefMemberDetailedDescription">When a shader program requires a shader resource, it will search the pass's list of registered shader resource sources by name. The resources source will then provide the resource itself to the shader. This function has the shader get the resource from a specific NiTexturingEffect applied to the rendering <span class="NDLSystemFont"><a href="../NiMesh/NiMesh.htm">NiMesh</a></span> object.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">resourceName</span></td>
    <td>Name of the shader resource. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">objectFlags</span></td>
    <td>Object ID to obtain texture from, identified using <span class="NDLSystemFont"><a href="../NiMain/NiTextureStage.htm">NiTextureStage::TSObjTextureFlags</a></span> enumerations. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_d3_d11_pass_1ade79536856a4caa3edaa28b6d718954d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../NiMain/NiTexture.htm">NiTexture</a></span>*  GetShaderResourceAsDirectResource(const <span class="NDLSystemFont"><a href="../efd/efd__FixedString.htm">efd::FixedString</a></span>& resourceName) const</p>
<p class="NDLRefMemberDescription">Returns the <span class="NDLSystemFont"><a href="../NiMain/NiTexture.htm">NiTexture</a></span> that is registered for a given shader resource. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">resourceName</span></td>
    <td>Name of the shader resource </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td><span class="NDLSystemFont"><a href="../NiMain/NiTexture.htm">NiTexture</a></span> registered with that name. If no resource source is registered with that name, or if a source is registered in some other form, this function will return NULL. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_d3_d11_pass_1a70c8a78b818ad79b84741ef22b490bb3"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  GetShaderResourceAsGamebryoMap(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__FixedString.htm">efd::FixedString</a></span>& resourceName, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>& gbMap) const</p>
<p class="NDLRefMemberDescription">Returns the <span class="NDLSystemFont"><a href="../NiMain/NiTexturingProperty.htm">NiTexturingProperty</a></span> map that is registered for a given shader resource. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">resourceName</span></td>
    <td>Name of the shader resource </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">gbMap</span></td>
    <td>Outputs the <span class="NDLSystemFont"><a href="../NiMain/NiTexturingProperty.htm">NiTexturingProperty</a></span> map registered with that name, identified using <span class="NDLSystemFont"><a href="../NiMain/NiTextureStage.htm">NiTextureStage::TSTextureFlags</a></span> enumerations. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the registered resource source with that name was found and it was in the correct form, and false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_d3_d11_pass_1ab44038ddf89c3a33fe3d39516a42dddf"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  GetShaderResourceAsTextureObject(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__FixedString.htm">efd::FixedString</a></span>& resourceName, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span>& objectFlags) const</p>
<p class="NDLRefMemberDescription">Returns the <span class="NDLSystemFont"><a href="../NiMain/NiTextureEffect.htm">NiTextureEffect</a></span> object that is registered for a given shader resource. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">resourceName</span></td>
    <td>Name of the shader resource </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">objectFlags</span></td>
    <td>Outputs the <span class="NDLSystemFont"><a href="../NiMain/NiTextureEffect.htm">NiTextureEffect</a></span> object registered with that name, identified using <span class="NDLSystemFont"><a href="../NiMain/NiTextureStage.htm">NiTextureStage::TSObjTextureFlags</a></span> enumerations. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the registered resource source with that name was found and it was in the correct form, and false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_d3_d11_pass_1a98166abfccb42a93a823ddde87d85fe7"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a59a3838ab5cdfe87f98f5b8371e4e91d">efd::UInt8</a></span>  GetShaderResourceCount() const</p>
<p class="NDLRefMemberDescription">Returns the number of shader resource names registered with the pass. </p>

<a name="classecr_1_1_d3_d11_pass_1af1890911bc116479c953491e7455dc7e"></a>
<p class="NDLRefMemberFunction">void  SetStreamOutSettings(const <span class="NDLSystemFont"><a href="../NiMain/NiStreamOutSettings.htm">NiStreamOutSettings</a></span>& streamOutSettings)</p>
<p class="NDLRefMemberDescription">Set the Stream Out settings on the pass. </p>

<a name="classecr_1_1_d3_d11_pass_1a071226c441f709220691c91755e8a3ed"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../NiMain/NiStreamOutSettings.htm">NiStreamOutSettings</a></span>&  GetStreamOutSettings()</p>
<p class="NDLRefMemberDescription">Return the Stream Out settings on the pass. </p>

<a name="classecr_1_1_d3_d11_pass_1acce7ff7f3d6f3d1a7ffc6d9cc5e2d3b8"></a>
<p class="NDLRefMemberFunction">void  SetComputeThreadGroupCounts(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> threadGroupCountX, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> threadGroupCountY, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> threadGroupCountZ)</p>
<p class="NDLRefMemberDescription">For a pass using compute shaders, set the thread group counts used to invoke the shader. </p>

<a name="classecr_1_1_d3_d11_pass_1a66fd723d84cb138fd8f9ef074b6c07ea"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetComputeThreadGroupCountX() const</p>
<p class="NDLRefMemberDescription">Return the X thread group count used to invoke a compute shader. </p>

<a name="classecr_1_1_d3_d11_pass_1ab755589b3a94f96af29fd942213630e6"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetComputeThreadGroupCountY() const</p>
<p class="NDLRefMemberDescription">Return the Y thread group count used to invoke a compute shader. </p>

<a name="classecr_1_1_d3_d11_pass_1a48c34fff8dd15e0bc2ab5c1316bffd9f"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetComputeThreadGroupCountZ() const</p>
<p class="NDLRefMemberDescription">Return the Z thread group count used to invoke a compute shader. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
