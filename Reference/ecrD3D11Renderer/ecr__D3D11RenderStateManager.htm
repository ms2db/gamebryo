<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>ecr::D3D11RenderStateManager</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">ecr::D3D11RenderStateManager</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../efd/efd__MemObject.htm">efd::MemObject</a></span></p>


<p class="NDLRefHeaderFile">&lt;D3D11RenderStateManager.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classecr_1_1_d3_d11_render_state_manager.gif" alt="Inheritance graph for ecr::D3D11RenderStateManager"/>
  <p class="FigureCaption">Inheritance graph for ecr::D3D11RenderStateManager</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal"><span class="NDLSystemFont">ecr::D3D11RenderStateManager</span> manages the D3D11 render state structures. </p>
<p class="NDLNormal"><span class="NDLSystemFont">ecr::D3D11RenderStateManager</span> handles the accumulation of individual render state changes and the creation of D3D11 state objects. Refer to the discussion on Render State Management in the ecrD3D11Renderer for more information. </p>

<a name="public_types"></a>
<p class="NDLRefHead1">Public Types</p>
<a name="classecr_1_1_d3_d11_render_state_manager_1abe011ff8086a84209d655bb15ffba328"></a>
<p class=NDLRefHead2>ecr::D3D11RenderStateManager::BlendStateValidFlags</p>


<p class="NDLRefMemberDescription">Flags that indicate which states in the D3D11_BLEND_DESC structures should be accumulated into the current render state. </p>


<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">BSVALID_ALPHATOCOVERAGEENABLE</span></td>
    <td>AlphaToCoverageEnable. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">BSVALID_INDEPENDENTBLENDENABLE</span></td>
    <td>IndependentBlendEnable. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">BSVALID_RENDERTARGET_0</span></td>
    <td>Indicates any of the states in the D3D11_RENDER_TARGET_BLEND_DESC for render target 0 are valid. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">BSVALID_RENDERTARGET_1</span></td>
    <td>Indicates any of the states in the D3D11_RENDER_TARGET_BLEND_DESC for render target 1 are valid. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">BSVALID_RENDERTARGET_2</span></td>
    <td>Indicates any of the states in the D3D11_RENDER_TARGET_BLEND_DESC for render target 2 are valid. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">BSVALID_RENDERTARGET_3</span></td>
    <td>Indicates any of the states in the D3D11_RENDER_TARGET_BLEND_DESC for render target 3 are valid. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">BSVALID_RENDERTARGET_4</span></td>
    <td>Indicates any of the states in the D3D11_RENDER_TARGET_BLEND_DESC for render target 4 are valid. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">BSVALID_RENDERTARGET_5</span></td>
    <td>Indicates any of the states in the D3D11_RENDER_TARGET_BLEND_DESC for render target 5 are valid. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">BSVALID_RENDERTARGET_6</span></td>
    <td>Indicates any of the states in the D3D11_RENDER_TARGET_BLEND_DESC for render target 6 are valid. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">BSVALID_RENDERTARGET_7</span></td>
    <td>Indicates any of the states in the D3D11_RENDER_TARGET_BLEND_DESC for render target 7 are valid. </td>
</tr>

  </tbody>
</table>
</div>

<a name="classecr_1_1_d3_d11_render_state_manager_1a6909e7b8e760fae65d0b8ad325e917e1"></a>
<p class=NDLRefHead2>ecr::D3D11RenderStateManager::BlendStateRenderTargetValidFlags</p>


<p class="NDLRefMemberDescription">Flags that indicate which states in the D3D11_RENDER_TARGET_BLEND_DESC structures should be accumulated into the current render state. </p>


<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">BSRTVALID_BLENDENABLE</span></td>
    <td>BlendEnable. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">BSRTVALID_SRCBLEND</span></td>
    <td>SrcBlend. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">BSRTVALID_DESTBLEND</span></td>
    <td>DestBlend. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">BSRTVALID_BLENDOP</span></td>
    <td>BlendOp. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">BSRTVALID_SRCBLENDALPHA</span></td>
    <td>SrcBlendAlpha. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">BSRTVALID_DESTBLENDALPHA</span></td>
    <td>DestBlendAlpha. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">BSRTVALID_BLENDOPALPHA</span></td>
    <td>BlendOpAlpha. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">BSRTVALID_RENDERTARGETWRITEMASK</span></td>
    <td>RenderTargetWriteMask. </td>
</tr>

  </tbody>
</table>
</div>

<a name="classecr_1_1_d3_d11_render_state_manager_1a80c9c516eac131a0653d0bb0fa89e5ff"></a>
<p class=NDLRefHead2>ecr::D3D11RenderStateManager::DepthStencilStateValidFlags</p>


<p class="NDLRefMemberDescription">Flags that indicate which states in the D3D11_DEPTH_STENCIL_DESC structures should be accumulated into the current render state. </p>


<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">DSSVALID_DEPTHENABLE</span></td>
    <td>DepthEnable. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">DSSVALID_DEPTHWRITEMASK</span></td>
    <td>DepthWriteMask. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">DSSVALID_DEPTHFUNC</span></td>
    <td>DepthFunc. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">DSSVALID_STENCILENABLE</span></td>
    <td>StencilEnable. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">DSSVALID_STENCILREADMASK</span></td>
    <td>StencilReadMask. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">DSSVALID_STENCILWRITEMASK</span></td>
    <td>StencilWriteMask. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">DSSVALID_FRONTFACE_STENCILFAILOP</span></td>
    <td>FrontFace.StencilFailOp. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">DSSVALID_FRONTFACE_STENCILDEPTHFAILOP</span></td>
    <td>FrontFace.StencilDepthFailOp. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">DSSVALID_FRONTFACE_STENCILPASSOP</span></td>
    <td>FrontFace.StencilPassOp. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">DSSVALID_FRONTFACE_STENCILFUNC</span></td>
    <td>FrontFace.StencilFunc. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">DSSVALID_BACKFACE_STENCILFAILOP</span></td>
    <td>BackFace.StencilFailOp. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">DSSVALID_BACKFACE_STENCILDEPTHFAILOP</span></td>
    <td>BackFace.StencilDepthFailOp. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">DSSVALID_BACKFACE_STENCILPASSOP</span></td>
    <td>BackFace.StencilPassOp. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">DSSVALID_BACKFACE_STENCILFUNC</span></td>
    <td>BackFace.StencilFunc. </td>
</tr>

  </tbody>
</table>
</div>

<a name="classecr_1_1_d3_d11_render_state_manager_1accec602e807e7444b37eabace8606d5a"></a>
<p class=NDLRefHead2>ecr::D3D11RenderStateManager::RasterizerStateValidFlags</p>


<p class="NDLRefMemberDescription">Flags that indicate which states in the D3D11_RASTERIZER_DESC structures should be accumulated into the current render state. </p>


<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">RSVALID_FILLMODE</span></td>
    <td>FillMode. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">RSVALID_CULLMODE</span></td>
    <td>CullMode. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">RSVALID_FRONTCOUNTERCLOCKWISE</span></td>
    <td>FrontCounterClockwise. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">RSVALID_DEPTHBIAS</span></td>
    <td>DepthBias. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">RSVALID_DEPTHBIASCLAMP</span></td>
    <td>DepthBiasClamp. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">RSVALID_SLOPESCALEDDEPTHBIAS</span></td>
    <td>SlopeScaledDepthBias. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">RSVALID_DEPTHCLIPENABLE</span></td>
    <td>DepthClipEnable. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">RSVALID_SCISSORENABLE</span></td>
    <td>ScissorEnable. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">RSVALID_MULTISAMPLEENABLE</span></td>
    <td>MultisampleEnable. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">RSVALID_ANTIALIASEDLINEENABLE</span></td>
    <td>AntialiasedLineEnable. </td>
</tr>

  </tbody>
</table>
</div>

<a name="classecr_1_1_d3_d11_render_state_manager_1a15e5ad98e89dde9c9b51c5b619f5cef0"></a>
<p class=NDLRefHead2>ecr::D3D11RenderStateManager::SamplerValidFlags</p>


<p class="NDLRefMemberDescription">Flags that indicate which states in the D3D11_SAMPLER_DESC structures should be accumulated into the current render state. </p>


<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">SVALID_FILTER</span></td>
    <td>Filter. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SVALID_ADDRESSU</span></td>
    <td>AddressU. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SVALID_ADDRESSV</span></td>
    <td>AddressV. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SVALID_ADDRESSW</span></td>
    <td>AddressW. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SVALID_MIPLODBIAS</span></td>
    <td>MipLODBias. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SVALID_MAXANISOTROPY</span></td>
    <td>MaxAnisotropy. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SVALID_COMPARISONFUNC</span></td>
    <td>ComparisonFunc. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SVALID_BORDERCOLOR</span></td>
    <td>BorderColor. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SVALID_MINLOD</span></td>
    <td>MinLOD. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SVALID_MAXLOD</span></td>
    <td>MaxLOD. </td>
</tr>

  </tbody>
</table>
</div>


<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classecr_1_1_d3_d11_render_state_manager_1a8d4527fac4ffce6314ac38a9411b2551"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  ApplyProperties(const <span class="NDLSystemFont"><a href="../NiMain/NiPropertyState.htm">NiPropertyState</a></span>* pState)</p>
<p class="NDLRefMemberDescription">Update the accumulated render states based on the properties in the <span class="NDLSystemFont"><a href="../NiMain/NiPropertyState.htm">NiPropertyState</a></span>. </p>
<p class="NDLRefMemberDetailedDescription">Only the <span class="NDLSystemFont"><a href="../NiMain/NiAlphaProperty.htm">NiAlphaProperty</a></span>, <span class="NDLSystemFont"><a href="../NiMain/NiStencilProperty.htm">NiStencilProperty</a></span>, <span class="NDLSystemFont"><a href="../NiMain/NiWireframeProperty.htm">NiWireframeProperty</a></span>, and <span class="NDLSystemFont"><a href="../NiMain/NiZBufferProperty.htm">NiZBufferProperty</a></span> properties are used by the <span class="NDLSystemFont">D3D11RenderStateManager</span> to update render state, though <span class="NDLSystemFont"><a href="../NiMain/NiTexturingProperty.htm">NiTexturingProperty</a></span> settings can also be applied by an <span class="NDLSystemFont"><a href="../NiMain/NiShader.htm">NiShader</a></span>. </p>

<a name="classecr_1_1_d3_d11_render_state_manager_1afb550e8c6511d01f990e572c5446d885"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  ApplyAlphaProperty(const <span class="NDLSystemFont"><a href="../NiMain/NiAlphaProperty.htm">NiAlphaProperty</a></span>* pNew)</p>
<p class="NDLRefMemberDescription">Update the accumulated render states based on the provided <span class="NDLSystemFont"><a href="../NiMain/NiAlphaProperty.htm">NiAlphaProperty</a></span>. </p>

<a name="classecr_1_1_d3_d11_render_state_manager_1a7dcd26d1a89c40de43b48c30e07e9dff"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  ApplyStencilProperty(const <span class="NDLSystemFont"><a href="../NiMain/NiStencilProperty.htm">NiStencilProperty</a></span>* pNew)</p>
<p class="NDLRefMemberDescription">Update the accumulated render states based on the provided <span class="NDLSystemFont"><a href="../NiMain/NiStencilProperty.htm">NiStencilProperty</a></span>. </p>

<a name="classecr_1_1_d3_d11_render_state_manager_1ac1903148279b0979d77a2996674df258"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  ApplyWireframeProperty(const <span class="NDLSystemFont"><a href="../NiMain/NiWireframeProperty.htm">NiWireframeProperty</a></span>* pNew)</p>
<p class="NDLRefMemberDescription">Update the accumulated render states based on the provided <span class="NDLSystemFont"><a href="../NiMain/NiWireframeProperty.htm">NiWireframeProperty</a></span>. </p>

<a name="classecr_1_1_d3_d11_render_state_manager_1a1b0f38804999b35cc7dd20847f2ce7f9"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  ApplyZBufferProperty(const <span class="NDLSystemFont"><a href="../NiMain/NiZBufferProperty.htm">NiZBufferProperty</a></span>* pNew)</p>
<p class="NDLRefMemberDescription">Update the accumulated render states based on the provided <span class="NDLSystemFont"><a href="../NiMain/NiZBufferProperty.htm">NiZBufferProperty</a></span>. </p>

<a name="classecr_1_1_d3_d11_render_state_manager_1a2a3fbbcb5500474981b09abdfd8a456f"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  ApplyRenderStateGroup(const <span class="NDLSystemFont"><a href="ecr__D3D11RenderStateGroup.htm">D3D11RenderStateGroup</a></span>* pRSGroup)</p>
<p class="NDLRefMemberDescription">Update the accumulated render states based on the <span class="NDLSystemFont"><a href="ecr__D3D11RenderStateGroup.htm">D3D11RenderStateGroup</a></span>. </p>

<a name="classecr_1_1_d3_d11_render_state_manager_1a80ca287f82296c2322001f6e89c19711"></a>
<p class="NDLRefMemberFunction">void  SetBlendStateDesc(<br/>const D3D11_BLEND_DESC& blendDesc, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> validFlags, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a59a3838ab5cdfe87f98f5b8371e4e91d">efd::UInt8</a></span> renderTargetValidFlags)</p>
<p class="NDLRefMemberDescription">Update the accumulated render states based on a blend state desc. </p>
<p class="NDLRefMemberDetailedDescription">Only those elements of the structure indicated by the valid flags will be accumulated to the current render state.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">blendDesc</span></td>
    <td>The blend state desc to set. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">validFlags</span></td>
    <td>The set of flags from <span class="NDLSystemFont"><a href="ecr__D3D11RenderStateManager.htm#classecr_1_1_d3_d11_render_state_manager_1abe011ff8086a84209d655bb15ffba328">D3D11RenderStateManager::BlendStateValidFlags</a></span> that indicate which states in the blend state desc are valid. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">renderTargetValidFlags</span></td>
    <td>An array of flags from <span class="NDLSystemFont"><a href="ecr__D3D11RenderStateManager.htm#classecr_1_1_d3_d11_render_state_manager_1a6909e7b8e760fae65d0b8ad325e917e1">D3D11RenderStateManager::BlendStateRenderTargetValidFlags</a></span> that indicate which render states are valid for each render target. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_d3_d11_render_state_manager_1a92d64e61d5eca5ed90b81dafebac8426"></a>
<p class="NDLRefMemberFunction">void  GetBlendStateDesc(D3D11_BLEND_DESC& blendDesc) const</p>
<p class="NDLRefMemberDescription">Return the currently accumulated blend state desc. </p>

<a name="classecr_1_1_d3_d11_render_state_manager_1a0b79e1e14ee6639e1bca0234268b8e45"></a>
<p class="NDLRefMemberFunction">void  SetBlendFactor(const float blendFactor)</p>
<p class="NDLRefMemberDescription">Set the current blend factor. </p>

<a name="classecr_1_1_d3_d11_render_state_manager_1ab441751062f939a295ef8e3a853e42cf"></a>
<p class="NDLRefMemberFunction">void  GetBlendFactor(float blendFactor) const</p>
<p class="NDLRefMemberDescription">Return the current blend factor. </p>

<a name="classecr_1_1_d3_d11_render_state_manager_1ac11f4a5eacb10461cc157c11cd45cf85"></a>
<p class="NDLRefMemberFunction">void  SetSampleMask(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> sampleMask)</p>
<p class="NDLRefMemberDescription">Set the current sample mask. </p>

<a name="classecr_1_1_d3_d11_render_state_manager_1a8a6ddaf8829f76267ce3d481b64b5faa"></a>
<p class="NDLRefMemberFunction">void  GetSampleMask(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>& sampleMask) const</p>
<p class="NDLRefMemberDescription">Return the current sample mask. </p>

<a name="classecr_1_1_d3_d11_render_state_manager_1a3b034f06d173f097fea3efad44f382ec"></a>
<p class="NDLRefMemberFunction">void  SetDepthStencilStateDesc(<br/>const D3D11_DEPTH_STENCIL_DESC& depthStencilDesc, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> validFlags)</p>
<p class="NDLRefMemberDescription">Update the accumulated render states based on a depth stencil state desc. </p>
<p class="NDLRefMemberDetailedDescription">Only those elements of the structure indicated by the valid flags will be accumulated to the current render state.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">depthStencilDesc</span></td>
    <td>The depth stencil state desc to set. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">validFlags</span></td>
    <td>The set of flags from <span class="NDLSystemFont"><a href="ecr__D3D11RenderStateManager.htm#classecr_1_1_d3_d11_render_state_manager_1a80c9c516eac131a0653d0bb0fa89e5ff">D3D11RenderStateManager::DepthStencilStateValidFlags</a></span> that indicate which states in the depth stencil state desc are valid. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_d3_d11_render_state_manager_1a4ae37c0aeaa0bf42ec5f9521499af519"></a>
<p class="NDLRefMemberFunction">void  GetDepthStencilStateDesc(D3D11_DEPTH_STENCIL_DESC& depthStencilDesc) const</p>
<p class="NDLRefMemberDescription">Return the currently accumulated depth stencil state desc. </p>

<a name="classecr_1_1_d3_d11_render_state_manager_1a2b18fcf3614e926917f8cc2e5d155dbd"></a>
<p class="NDLRefMemberFunction">void  SetStencilRef(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> stencilRef)</p>
<p class="NDLRefMemberDescription">Set the current stencil reference value. </p>

<a name="classecr_1_1_d3_d11_render_state_manager_1a34dc78f6c59ce7660e57929d9320dc26"></a>
<p class="NDLRefMemberFunction">void  GetStencilRef(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>& stencilRef) const</p>
<p class="NDLRefMemberDescription">Return the current stencil reference value. </p>

<a name="classecr_1_1_d3_d11_render_state_manager_1a9f863b46e60c400a8aa497f8c88a374a"></a>
<p class="NDLRefMemberFunction">void  SetRasterizerStateDesc(<br/>const D3D11_RASTERIZER_DESC& rasterizerDesc, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> validFlags)</p>
<p class="NDLRefMemberDescription">Update the accumulated render states based on a rasterizer state desc. </p>
<p class="NDLRefMemberDetailedDescription">Only those elements of the structure indicated by the valid flags will be accumulated to the current render state.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">rasterizerDesc</span></td>
    <td>The rasterizer state desc to set. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">validFlags</span></td>
    <td>The set of flags from <span class="NDLSystemFont"><a href="ecr__D3D11RenderStateManager.htm#classecr_1_1_d3_d11_render_state_manager_1accec602e807e7444b37eabace8606d5a">D3D11RenderStateManager::RasterizerStateValidFlags</a></span> that indicate which states in the rasterizer state desc are valid. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_d3_d11_render_state_manager_1a17794dcd7d68f607ddff5c9b765be77e"></a>
<p class="NDLRefMemberFunction">void  GetRasterizerStateDesc(D3D11_RASTERIZER_DESC& rasterizerDesc) const</p>
<p class="NDLRefMemberDescription">Return the currently accumulated rasterizer state desc. </p>

<a name="classecr_1_1_d3_d11_render_state_manager_1af89499977681d49f6f920ca8493e8b81"></a>
<p class="NDLRefMemberFunction">void  SetSamplerDesc(<br/><span class="NDLSystemFont"><a href="../NiMain/NiGPUProgram.htm">NiGPUProgram::ProgramType</a></span> shaderType, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> sampler, <br/>const D3D11_SAMPLER_DESC& samplerDesc, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> validFlags)</p>
<p class="NDLRefMemberDescription">Update the accumulated render states based on a sampler desc. </p>
<p class="NDLRefMemberDetailedDescription">Only those elements of the structure indicated by the valid flags will be accumulated to the current render state.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">shaderType</span></td>
    <td>Shader type for this sampler. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">sampler</span></td>
    <td>Sampler index for this sampler. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">samplerDesc</span></td>
    <td>The sampler desc to set. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">validFlags</span></td>
    <td>The set of flags from <span class="NDLSystemFont"><a href="ecr__D3D11RenderStateManager.htm#classecr_1_1_d3_d11_render_state_manager_1a15e5ad98e89dde9c9b51c5b619f5cef0">D3D11RenderStateManager::SamplerValidFlags</a></span> that indicate which states in the sampler desc are valid. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_d3_d11_render_state_manager_1a3ff06dcdfc3990066dcc1b5d18d5f597"></a>
<p class="NDLRefMemberFunction">void  GetSamplerDesc(<br/><span class="NDLSystemFont"><a href="../NiMain/NiGPUProgram.htm">NiGPUProgram::ProgramType</a></span> shaderType, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> sampler, <br/>D3D11_SAMPLER_DESC& samplerDesc) const</p>
<p class="NDLRefMemberDescription">Return the currently accumulated sampler desc for the given shader type and sampler index. </p>

<a name="classecr_1_1_d3_d11_render_state_manager_1aba4b51df95df6dfb15ee49f22f1c8529"></a>
<p class="NDLRefMemberFunction">void  ResetCurrentState()</p>
<p class="NDLRefMemberDescription">Remove all accumulated render states and reset their values to the defaults. </p>

<a name="classecr_1_1_d3_d11_render_state_manager_1aad2e8b970a4364cdb39848db624d4769"></a>
<p class="NDLRefMemberFunction">void  SetDefaultBlendStateDesc(const D3D11_BLEND_DESC& blendDesc)</p>
<p class="NDLRefMemberDescription">Set the default blend state desc values. </p>

<a name="classecr_1_1_d3_d11_render_state_manager_1a641e6e4be9d1c07c15924d6edc06759b"></a>
<p class="NDLRefMemberFunction">void  GetDefaultBlendStateDesc(D3D11_BLEND_DESC& blendDesc) const</p>
<p class="NDLRefMemberDescription">Return the default blend state desc values. </p>

<a name="classecr_1_1_d3_d11_render_state_manager_1abde730da184befdb78f417c4e92dcd74"></a>
<p class="NDLRefMemberFunction">void  SetDefaultBlendFactor(const float blendFactor)</p>
<p class="NDLRefMemberDescription">Set the default blend factor. </p>

<a name="classecr_1_1_d3_d11_render_state_manager_1ade01711b3b79e9e8365e67f1a48987f3"></a>
<p class="NDLRefMemberFunction">void  GetDefaultBlendFactor(float blendFactor) const</p>
<p class="NDLRefMemberDescription">Return the default blend factor. </p>

<a name="classecr_1_1_d3_d11_render_state_manager_1a8a3faf01f72a70f47e109292414cc81a"></a>
<p class="NDLRefMemberFunction">void  SetDefaultSampleMask(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> sampleMask)</p>
<p class="NDLRefMemberDescription">Set the default sample mask. </p>

<a name="classecr_1_1_d3_d11_render_state_manager_1ac406457dccc050b57a637a2d258afe7b"></a>
<p class="NDLRefMemberFunction">void  GetDefaultSampleMask(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>& sampleMask) const</p>
<p class="NDLRefMemberDescription">Return the default sample mask. </p>

<a name="classecr_1_1_d3_d11_render_state_manager_1af08b20cc192c157bad6f0d875ccb8770"></a>
<p class="NDLRefMemberFunction">void  SetDefaultDepthStencilStateDesc(const D3D11_DEPTH_STENCIL_DESC& depthStencilDesc)</p>
<p class="NDLRefMemberDescription">Set the default depth stencil state desc values. </p>

<a name="classecr_1_1_d3_d11_render_state_manager_1a803a769dfaf48946c04e598668779dad"></a>
<p class="NDLRefMemberFunction">void  GetDefaultDepthStencilStateDesc(D3D11_DEPTH_STENCIL_DESC& depthStencilDesc) const</p>
<p class="NDLRefMemberDescription">Return the default depth stencil state desc values. </p>

<a name="classecr_1_1_d3_d11_render_state_manager_1a9d6ab7d42fd14c99ce0c8773055c7936"></a>
<p class="NDLRefMemberFunction">void  SetDefaultStencilRef(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> stenciRef)</p>
<p class="NDLRefMemberDescription">Set the default stencil reference value. </p>

<a name="classecr_1_1_d3_d11_render_state_manager_1a498392c5bc98461562f02916ebbcb786"></a>
<p class="NDLRefMemberFunction">void  GetDefaultStencilRef(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>& stencilRef) const</p>
<p class="NDLRefMemberDescription">Return the default stencil reference value. </p>

<a name="classecr_1_1_d3_d11_render_state_manager_1ade3dfab8660195050993d34c0d2eca37"></a>
<p class="NDLRefMemberFunction">void  SetDefaultRasterizerStateDesc(const D3D11_RASTERIZER_DESC& rasterizerDesc)</p>
<p class="NDLRefMemberDescription">Set the default rasterizer state desc values. </p>

<a name="classecr_1_1_d3_d11_render_state_manager_1a0dfe530cc23f1c148cb5ecd1cf4d40c0"></a>
<p class="NDLRefMemberFunction">void  GetDefaultRasterizerStateDesc(D3D11_RASTERIZER_DESC& rasterizerDesc) const</p>
<p class="NDLRefMemberDescription">Return the default rasterizer state desc values. </p>

<a name="classecr_1_1_d3_d11_render_state_manager_1a0abbb749a6b15da04289c584640a3d44"></a>
<p class="NDLRefMemberFunction">void  SetDefaultSamplerDesc(const D3D11_SAMPLER_DESC& samplerDesc)</p>
<p class="NDLRefMemberDescription">Set the default sampler desc values, used for all samplers. </p>

<a name="classecr_1_1_d3_d11_render_state_manager_1abfe86ba0e6197875850a9f792c513f63"></a>
<p class="NDLRefMemberFunction">void  GetDefaultSamplerDesc(D3D11_SAMPLER_DESC& samplerDesc) const</p>
<p class="NDLRefMemberDescription">Return the default sampler state desc values, used for all samplers. </p>

<a name="classecr_1_1_d3_d11_render_state_manager_1ad9799516112100ec3805da672ab4f47d"></a>
<p class="NDLRefMemberFunction">void  ApplyCurrentState(const <span class="NDLSystemFont">D3DX11_STATE_BLOCK_MASK</span>* pMask = NULL)</p>
<p class="NDLRefMemberDescription">Apply currently accumulated render state to device context. </p>
<p class="NDLRefMemberDetailedDescription">The currently accumulated render states are used to create new state block objects which are set on the device context.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMask</span></td>
    <td>State block mask indicating which render state blocks to set. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_d3_d11_render_state_manager_1a83f6f0e5346ee60567ccbb4be59a3d3d"></a>
<p class="NDLRefMemberFunction">void  ApplyCurrentBlendState()</p>
<p class="NDLRefMemberDescription">Create blend state block object and set it on the device context. </p>

<a name="classecr_1_1_d3_d11_render_state_manager_1a5c351d080acd3187b5dd653b1470d273"></a>
<p class="NDLRefMemberFunction">void  ApplyCurrentDepthStencilState()</p>
<p class="NDLRefMemberDescription">Create depth stencil state block object and set it on the device context. </p>

<a name="classecr_1_1_d3_d11_render_state_manager_1abdf0ee04b93506942adee1aa60dfb2d9"></a>
<p class="NDLRefMemberFunction">void  ApplyCurrentRasterizerState()</p>
<p class="NDLRefMemberDescription">Create rasterizer state block object and set it on the device context. </p>

<a name="classecr_1_1_d3_d11_render_state_manager_1a61ae957a707eece901ccd986f07144cf"></a>
<p class="NDLRefMemberFunction">void  ApplyCurrentSamplers(const <span class="NDLSystemFont">D3DX11_STATE_BLOCK_MASK</span>* pMask = NULL)</p>
<p class="NDLRefMemberDescription">Create sampler objects and set them on the device context. </p>

<a name="classecr_1_1_d3_d11_render_state_manager_1a4a8f9d57205f9f534c05661ddd5b96be"></a>
<p class="NDLRefMemberFunction">void  ApplyCurrentSamplers(<br/><span class="NDLSystemFont"><a href="../NiMain/NiGPUProgram.htm">NiGPUProgram::ProgramType</a></span> shaderType, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> samplerStart, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> samplerCount, <br/>const <span class="NDLSystemFont">D3DX11_STATE_BLOCK_MASK</span>* pMask = NULL)</p>
<p class="NDLRefMemberDescription">Create sampler objects for the given shader type and set them on the device context. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">shaderType</span></td>
    <td>Shader type of samplers to be set. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">samplerStart</span></td>
    <td>First index of samplers to set. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">samplerCount</span></td>
    <td>Number of samplers to set. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pMask</span></td>
    <td>State block mask indicating which render state blocks to set. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_d3_d11_render_state_manager_1aea22378a306ff38f2d7ebd20b5261179"></a>
<p class="NDLRefMemberFunction">void  SetSamplerArray(<br/><span class="NDLSystemFont"><a href="../NiMain/NiGPUProgram.htm">NiGPUProgram::ProgramType</a></span> programType, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a59a3838ab5cdfe87f98f5b8371e4e91d">efd::UInt8</a></span> samplerCount, <br/><span class="NDLSystemFont"><a href="ecr__D3D11RenderStateGroup__Sampler.htm">D3D11RenderStateGroup::Sampler</a></span> ** samplerArray)</p>
<p class="NDLRefMemberDescription">Set an array of <span class="NDLSystemFont"><a href="ecr__D3D11RenderStateGroup__Sampler.htm">D3D11RenderStateGroup::Sampler</a></span> objects. </p>
<p class="NDLRefMemberDetailedDescription"><span class="NDLSystemFont"><a href="ecr__D3D11RenderStateGroup.htm">D3D11RenderStateGroup</a></span> objects accumulate sampler states based on a sampler name, but the samplers must be set on the device context based on shader program type and index value, which are determined by the shader programs themselves. Before applying samplers, a shader must construct arrays of Sampler objects that correspond to the sampler indices that the shader programs exist. This function is how those arrays are passed in before the render state manager constructs the ID3D11SamplerState objects and set on the device context. </p>

<a name="classecr_1_1_d3_d11_render_state_manager_1a09066fdd7d5c423a825648a537a9bf63"></a>
<p class="NDLRefMemberFunction">void  ClearSamplerArrays()</p>
<p class="NDLRefMemberDescription">Clear the array of <span class="NDLSystemFont"><a href="ecr__D3D11RenderStateGroup__Sampler.htm">D3D11RenderStateGroup::Sampler</a></span> objects. </p>
<a name="conversion_functions"></a>
<p class="NDLRefHead1">Conversion functions</p>


<a name="classecr_1_1_d3_d11_render_state_manager_1a98742f7ccb74d7b83d04dca684170c40"></a>
<p class="NDLRefMemberFunction">static D3D11_BLEND  ConvertGbBlendToD3D11Blend(<span class="NDLSystemFont"><a href="../NiMain/NiAlphaProperty.htm">NiAlphaProperty::AlphaFunction</a></span> alphaFunction)</p>
<p class="NDLRefMemberDescription">Convert an <span class="NDLSystemFont"><a href="../NiMain/NiAlphaProperty.htm">NiAlphaProperty::AlphaFunction</a></span> to a D3D11_BLEND enumeration. </p>

<a name="classecr_1_1_d3_d11_render_state_manager_1a333ff1a582814614ef6808f4b3ab865e"></a>
<p class="NDLRefMemberFunction">static D3D11_COMPARISON_FUNC  ConvertGbStencilFuncToD3D11Comparison(<span class="NDLSystemFont"><a href="../NiMain/NiStencilProperty.htm">NiStencilProperty::TestFunc</a></span> testFunction)</p>
<p class="NDLRefMemberDescription">Convert an <span class="NDLSystemFont"><a href="../NiMain/NiStencilProperty.htm">NiStencilProperty::TestFunc</a></span> to a D3D11_COMPARISON_FUNC enumeration. </p>

<a name="classecr_1_1_d3_d11_render_state_manager_1a98b86e01440cba2f60cb7b09f2fdfac7"></a>
<p class="NDLRefMemberFunction">static D3D11_STENCIL_OP  ConvertGbStencilActionToD3D11StencilOp(<span class="NDLSystemFont"><a href="../NiMain/NiStencilProperty.htm">NiStencilProperty::Action</a></span> action)</p>
<p class="NDLRefMemberDescription">Convert an <span class="NDLSystemFont"><a href="../NiMain/NiStencilProperty.htm">NiStencilProperty::Action</a></span> to a D3D11_STENCIL_OP enumeration. </p>

<a name="classecr_1_1_d3_d11_render_state_manager_1a72cfed797f585d5fe275f037de61fd81"></a>
<p class="NDLRefMemberFunction">static D3D11_COMPARISON_FUNC  ConvertGbDepthFuncToD3D11Comparison(<span class="NDLSystemFont"><a href="../NiMain/NiZBufferProperty.htm">NiZBufferProperty::TestFunction</a></span> testFunction)</p>
<p class="NDLRefMemberDescription">Convert an <span class="NDLSystemFont"><a href="../NiMain/NiZBufferProperty.htm">NiZBufferProperty::TestFunction</a></span> to a D3D11_COMPARISON_FUNC enumeration. </p>

<a name="classecr_1_1_d3_d11_render_state_manager_1a238fa6c12bd07c9153bd2c6a8bb8d2d3"></a>
<p class="NDLRefMemberFunction">static D3D11_FILTER  ConvertGbFilterModeToD3D11Filter(<span class="NDLSystemFont"><a href="../NiMain/NiTexturingProperty.htm">NiTexturingProperty::FilterMode</a></span> filterMode)</p>
<p class="NDLRefMemberDescription">Convert an <span class="NDLSystemFont"><a href="../NiMain/NiTexturingProperty.htm">NiTexturingProperty::FilterMode</a></span> to a D3D11_FILTER enumeration. </p>

<a name="classecr_1_1_d3_d11_render_state_manager_1ad91b27a581d797c64126497b9b0f5975"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">efd::Bool</span>  ConvertGbFilterModeToMipmapEnable(<span class="NDLSystemFont"><a href="../NiMain/NiTexturingProperty.htm">NiTexturingProperty::FilterMode</a></span> filterMode)</p>
<p class="NDLRefMemberDescription">Return whether an <span class="NDLSystemFont"><a href="../NiMain/NiTexturingProperty.htm">NiTexturingProperty::FilterMode</a></span> enables mipmapping or not. </p>

<a name="classecr_1_1_d3_d11_render_state_manager_1a0326cae2a54623e6e626c88746c9fdd9"></a>
<p class="NDLRefMemberFunction">static D3D11_TEXTURE_ADDRESS_MODE  ConvertGbClampModeToD3D11AddressU(<span class="NDLSystemFont"><a href="../NiMain/NiTexturingProperty.htm">NiTexturingProperty::ClampMode</a></span> clampMode)</p>
<p class="NDLRefMemberDescription">Convert an <span class="NDLSystemFont"><a href="../NiMain/NiTexturingProperty.htm">NiTexturingProperty::ClampMode</a></span> to a D3D11_TEXTURE_ADDRESS_MODE enumeration. </p>

<a name="classecr_1_1_d3_d11_render_state_manager_1a27bc1174957602eaafedb2dd89b5ef57"></a>
<p class="NDLRefMemberFunction">static D3D11_TEXTURE_ADDRESS_MODE  ConvertGbClampModeToD3D11AddressV(<span class="NDLSystemFont"><a href="../NiMain/NiTexturingProperty.htm">NiTexturingProperty::ClampMode</a></span> clampMode)</p>
<p class="NDLRefMemberDescription">Convert an <span class="NDLSystemFont"><a href="../NiMain/NiTexturingProperty.htm">NiTexturingProperty::ClampMode</a></span> to a D3D11_TEXTURE_ADDRESS_MODE enumeration. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
