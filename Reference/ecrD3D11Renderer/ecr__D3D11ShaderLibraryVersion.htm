<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>ecr::D3D11ShaderLibraryVersion</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">ecr::D3D11ShaderLibraryVersion</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../efd/efd__MemObject.htm">efd::MemObject</a></span></p>


<p class="NDLRefHeaderFile">&lt;D3D11ShaderLibraryVersion.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classecr_1_1_d3_d11_shader_library_version.gif" alt="Inheritance graph for ecr::D3D11ShaderLibraryVersion"/>
  <p class="FigureCaption">Inheritance graph for ecr::D3D11ShaderLibraryVersion</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">Container for the versioning information to use within the shader system. </p>
<p class="NDLNormal">The class is accessed through the Shader version information functions of the D3D11 renderer, through the functions described below.</p>
<p class="NDLNormal">The system version of compute shaders and the feature level will be set automatically by the renderer at creation time. If an application is utilizing the user-defined versions in their shader system, it should set the system user-defined version immediately after creation of the renderer.</p>
<p class="NDLNormal">D3D11ShaderLibrary-derived classes should use this class to determine the shader versioning information for the current run of their application. </p>

<a name="construction_and_destruction"></a>
<p class="NDLRefHead1">Construction and Destruction</p>


<a name="classecr_1_1_d3_d11_shader_library_version_1a4a8f468a106152f01fe9d91ef0528dbe"></a>
<p class="NDLRefMemberFunction">D3D11ShaderLibraryVersion()</p>
<p class="NDLRefMemberFunction"></p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classecr_1_1_d3_d11_shader_library_version_1a0e91bc7ea27ee93a2879ab5fbc981a64"></a>
<p class="NDLRefMemberFunction">void  SetSystemFeatureLevel(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> featureLevel)</p>
<p class="NDLRefMemberDescription">Set the system feature level to the given value. </p>
<p class="NDLRefMemberDetailedDescription">Values should come from the D3D_FEATURE_LEVEL enumeration. The renderer should be the only one to make this call and it should be set to the maximum feature level supported by the hardware. </p>

<a name="classecr_1_1_d3_d11_shader_library_version_1ad70926e87d5ed8cebf72da9b35b9da04"></a>
<p class="NDLRefMemberFunction">void  SetMinFeatureLevel(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> featureLevel)</p>
<p class="NDLRefMemberDescription">Set the minimum feature level the system should allow to the given value. </p>
<p class="NDLRefMemberDetailedDescription">Values should come from the D3D_FEATURE_LEVEL enumeration. </p>

<a name="classecr_1_1_d3_d11_shader_library_version_1a1fcebef1b83bf86dcddd6b6d11a33168"></a>
<p class="NDLRefMemberFunction">void  SetFeatureLevelRequest(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> featureLevel)</p>
<p class="NDLRefMemberDescription">Set the requested feature level the system should use to the given value. </p>
<p class="NDLRefMemberDetailedDescription">Values should come from the D3D_FEATURE_LEVEL enumeration. </p>

<a name="classecr_1_1_d3_d11_shader_library_version_1afbed32d9551d7d423c67a7008d2accbc"></a>
<p class="NDLRefMemberFunction">void  SetSystemComputeShaderVersion(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> version)</p>
<p class="NDLRefMemberDescription">Set the system compute shader version to the given value. </p>
<p class="NDLRefMemberDetailedDescription">Values should be formed using <span class="NDLSystemFont"><a href="ecr__D3D11ShaderFactory.htm#classecr_1_1_d3_d11_shader_factory_1ac3f8961f5134c544894c37579cd24b68">D3D11ShaderFactory::CreateComputeShaderVersion</a></span>. The renderer should be the only one to make this call and it should be set to the maximum compute shader version supported by the hardware. </p>

<a name="classecr_1_1_d3_d11_shader_library_version_1ab3f770eff0cb7e328fa46740ff81e770"></a>
<p class="NDLRefMemberFunction">void  SetMinComputeShaderVersion(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> version)</p>
<p class="NDLRefMemberDescription">Set the minimum compute shader version the system should allow to the given value. </p>
<p class="NDLRefMemberDetailedDescription">Values should be formed using <span class="NDLSystemFont"><a href="ecr__D3D11ShaderFactory.htm#classecr_1_1_d3_d11_shader_factory_1ac3f8961f5134c544894c37579cd24b68">D3D11ShaderFactory::CreateComputeShaderVersion</a></span>. </p>

<a name="classecr_1_1_d3_d11_shader_library_version_1ae6d67f85797b8dcad1f9ccc0263ea4e4"></a>
<p class="NDLRefMemberFunction">void  SetComputeShaderVersionRequest(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> version)</p>
<p class="NDLRefMemberDescription">Set the requested compute shader version the system should use to the given value. </p>
<p class="NDLRefMemberDetailedDescription">Values should be formed using <span class="NDLSystemFont"><a href="ecr__D3D11ShaderFactory.htm#classecr_1_1_d3_d11_shader_factory_1ac3f8961f5134c544894c37579cd24b68">D3D11ShaderFactory::CreateComputeShaderVersion</a></span>. </p>

<a name="classecr_1_1_d3_d11_shader_library_version_1a43db7982a0e2b422f13b7b890b956fac"></a>
<p class="NDLRefMemberFunction">void  SetSystemComputeShaderVersion(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> major, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> minor)</p>
<p class="NDLRefMemberDescription">Set the system compute shader version to the given major/minor values. </p>
<p class="NDLRefMemberDetailedDescription">The renderer should be the only one to make this call and it should be set to the maximum compute shader version supported by the hardware. </p>

<a name="classecr_1_1_d3_d11_shader_library_version_1afe53599707b960c16c388b69b1d4c707"></a>
<p class="NDLRefMemberFunction">void  SetMinComputeShaderVersion(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> major, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> minor)</p>
<p class="NDLRefMemberDescription">Set the minimum compute shader version the system should allow to the given major/minor values. </p>

<a name="classecr_1_1_d3_d11_shader_library_version_1a0a3aed7614f8293bba81fae0286b0d32"></a>
<p class="NDLRefMemberFunction">void  SetComputeShaderVersionRequest(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> major, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> minor)</p>
<p class="NDLRefMemberDescription">Set the requested compute shader version the system should use to the given major/minor values. </p>

<a name="classecr_1_1_d3_d11_shader_library_version_1a44f9f58377fb3715c051457c57ff9f67"></a>
<p class="NDLRefMemberFunction">void  SetSystemUserVersion(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> version)</p>
<p class="NDLRefMemberDescription">Set the system user-defined shader version to the given value. </p>
<p class="NDLRefMemberDetailedDescription">Values should be formed using <span class="NDLSystemFont"><a href="ecr__D3D11ShaderFactory.htm#classecr_1_1_d3_d11_shader_factory_1a80ddb49c1c3f250b03b2b5a6b17ee166">D3D11ShaderFactory::CreateVertexShaderVersion</a></span>. If the application uses the user-defined value as part of their shader system, this value should be set immediately after creating the renderer. </p>

<a name="classecr_1_1_d3_d11_shader_library_version_1a2bf3cd6f162a4871e84f4700d88cfcb3"></a>
<p class="NDLRefMemberFunction">void  SetMinUserVersion(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> version)</p>
<p class="NDLRefMemberDescription">Set the minimum compute user-defined version the system should allow to the given value. </p>
<p class="NDLRefMemberDetailedDescription">Values should be formed using <span class="NDLSystemFont"><a href="ecr__D3D11ShaderFactory.htm#classecr_1_1_d3_d11_shader_factory_1a80ddb49c1c3f250b03b2b5a6b17ee166">D3D11ShaderFactory::CreateVertexShaderVersion</a></span>. </p>

<a name="classecr_1_1_d3_d11_shader_library_version_1a3af9e0031e65e3ce6d2deb23cf40ce55"></a>
<p class="NDLRefMemberFunction">void  SetUserVersionRequest(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> version)</p>
<p class="NDLRefMemberDescription">Set the requested compute user-defined version the system should use to the given value. </p>
<p class="NDLRefMemberDetailedDescription">Values should be formed using <span class="NDLSystemFont"><a href="ecr__D3D11ShaderFactory.htm#classecr_1_1_d3_d11_shader_factory_1a80ddb49c1c3f250b03b2b5a6b17ee166">D3D11ShaderFactory::CreateVertexShaderVersion</a></span>. </p>

<a name="classecr_1_1_d3_d11_shader_library_version_1aa3e21fd426b69b21ac62300d9d928c4e"></a>
<p class="NDLRefMemberFunction">void  SetSystemUserVersion(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> major, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> minor)</p>
<p class="NDLRefMemberDescription">Set the system user-defined shader version to the given major/minor values. </p>
<p class="NDLRefMemberDetailedDescription">If the application uses the user-defined value as part of their shader system, this value should be set immediately after creating the renderer. </p>

<a name="classecr_1_1_d3_d11_shader_library_version_1ac4ecfe60e20d450eb6019e6807b2f175"></a>
<p class="NDLRefMemberFunction">void  SetMinUserVersion(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> major, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> minor)</p>
<p class="NDLRefMemberDescription">Set the minimum compute user-defined version the system should allow to the given major/minor values. </p>

<a name="classecr_1_1_d3_d11_shader_library_version_1a04b51bac1698798d3e119eff36f496ef"></a>
<p class="NDLRefMemberFunction">void  SetUserVersionRequest(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> major, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> minor)</p>
<p class="NDLRefMemberDescription">Set the requested compute user-defined version the system should use to the given major/minor values. </p>

<a name="classecr_1_1_d3_d11_shader_library_version_1a777000710e0b1151a1b7fc75cf34a25d"></a>
<p class="NDLRefMemberFunction">void  SetPlatform(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> platform)</p>
<p class="NDLRefMemberDescription">Set the platform flags to the given value. </p>
<p class="NDLRefMemberDetailedDescription">Values should come from the <span class="NDLSystemFont"><a href="../NiMain/NiShader.htm">NiShader::Platform</a></span> enumeration. The renderer will call this at creation. </p>

<a name="classecr_1_1_d3_d11_shader_library_version_1ad3cbef00a7e07d4c6238437eb5e207cb"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetSystemFeatureLevel() const</p>
<p class="NDLRefMemberDescription">Returns the currently-set system feature level. </p>

<a name="classecr_1_1_d3_d11_shader_library_version_1a2251552258f47e8ec8c2c396a5c39ffe"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetMinFeatureLevel() const</p>
<p class="NDLRefMemberDescription">Returns the currently-set minimum feature level. </p>

<a name="classecr_1_1_d3_d11_shader_library_version_1a69931ffa641a729558e881bc5f3ac45d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetFeatureLevelRequest() const</p>
<p class="NDLRefMemberDescription">Returns the currently-set requested feature level. </p>

<a name="classecr_1_1_d3_d11_shader_library_version_1a45cad16e1898cbabe926d335962221ca"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetSystemComputeShaderVersion() const</p>
<p class="NDLRefMemberDescription">Returns the currently-set system compute shader version. </p>
<p class="NDLRefMemberDetailedDescription">The compute shader version will be encoded using D3D11 macros, and the major version can be obtained using D3D11_SHVER_GET_MAJOR(version) while the minor version can be obtained using D3D11_SHVER_GET_MINOR(version). Alternatively, the <span class="NDLSystemFont"><a href="ecr__D3D11ShaderFactory.htm#classecr_1_1_d3_d11_shader_factory_1ab6d7b012be13fe5cc56c60265139c3b2">D3D11ShaderFactory::GetMajorComputeShaderVersion</a></span> and GetMinorComputeShaderVersion can be used. </p>

<a name="classecr_1_1_d3_d11_shader_library_version_1a925008107d9e78734a31819cfe70e8f7"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetMinComputeShaderVersion() const</p>
<p class="NDLRefMemberDescription">Returns the currently-set minimum compute shader version. </p>
<p class="NDLRefMemberDetailedDescription">The compute shader version will be encoded using D3D11 macros, and the major version can be obtained using D3D11_SHVER_GET_MAJOR(version) while the minor version can be obtained using D3D11_SHVER_GET_MINOR(version). Alternatively, the <span class="NDLSystemFont"><a href="ecr__D3D11ShaderFactory.htm#classecr_1_1_d3_d11_shader_factory_1ab6d7b012be13fe5cc56c60265139c3b2">D3D11ShaderFactory::GetMajorComputeShaderVersion</a></span> and GetMinorComputeShaderVersion can be used. </p>

<a name="classecr_1_1_d3_d11_shader_library_version_1aa393566f29ae7843223ba05f43e96672"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetComputeShaderVersionRequest() const</p>
<p class="NDLRefMemberDescription">Returns the currently-set requested compute shader version. </p>
<p class="NDLRefMemberDetailedDescription">The compute shader version will be encoded using D3D11 macros, and the major version can be obtained using D3D11_SHVER_GET_MAJOR(version) while the minor version can be obtained using D3D11_SHVER_GET_MINOR(version). Alternatively, the <span class="NDLSystemFont"><a href="ecr__D3D11ShaderFactory.htm#classecr_1_1_d3_d11_shader_factory_1ab6d7b012be13fe5cc56c60265139c3b2">D3D11ShaderFactory::GetMajorComputeShaderVersion</a></span> and GetMinorComputeShaderVersion can be used. </p>

<a name="classecr_1_1_d3_d11_shader_library_version_1adadc9c63c7e29b8a593c591df08bca6f"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetSystemUserVersion() const</p>
<p class="NDLRefMemberDescription">Returns the currently-set system user-defined shader version. </p>
<p class="NDLRefMemberDetailedDescription">The user-defined shader version will be encoded using D3D11 macros, and the major version can be obtained using D3D11_SHVER_GET_MAJOR(version) while the minor version can be obtained using D3D11_SHVER_GET_MINOR(version). Alternatively, the <span class="NDLSystemFont"><a href="ecr__D3D11ShaderFactory.htm#classecr_1_1_d3_d11_shader_factory_1a98845d1b47728121eeb1b450eef22717">D3D11ShaderFactory::GetMajorVertexShaderVersion</a></span> and GetMinorVertexShaderVersion can be used. </p>

<a name="classecr_1_1_d3_d11_shader_library_version_1a2774641f2488bb1849ac0dde7140e629"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetMinUserVersion() const</p>
<p class="NDLRefMemberDescription">Returns the currently-set minimum user-defined shader version. </p>
<p class="NDLRefMemberDetailedDescription">The user-defined shader version will be encoded using D3D11 macros, and the major version can be obtained using D3D11_SHVER_GET_MAJOR(version) while the minor version can be obtained using D3D11_SHVER_GET_MINOR(version). Alternatively, the <span class="NDLSystemFont"><a href="ecr__D3D11ShaderFactory.htm#classecr_1_1_d3_d11_shader_factory_1a98845d1b47728121eeb1b450eef22717">D3D11ShaderFactory::GetMajorVertexShaderVersion</a></span> and GetMinorVertexShaderVersion can be used. </p>

<a name="classecr_1_1_d3_d11_shader_library_version_1ac880ab3cd1783cef8c14f87b947a7b56"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetUserVersionRequest() const</p>
<p class="NDLRefMemberDescription">Returns the currently-set requested user-defined shader version. </p>
<p class="NDLRefMemberDetailedDescription">The user-defined shader version will be encoded using D3D11 macros, and the major version can be obtained using D3D11_SHVER_GET_MAJOR(version) while the minor version can be obtained using D3D11_SHVER_GET_MINOR(version). Alternatively, the <span class="NDLSystemFont"><a href="ecr__D3D11ShaderFactory.htm#classecr_1_1_d3_d11_shader_factory_1a98845d1b47728121eeb1b450eef22717">D3D11ShaderFactory::GetMajorVertexShaderVersion</a></span> and GetMinorVertexShaderVersion can be used. </p>

<a name="classecr_1_1_d3_d11_shader_library_version_1a8f141754071ea3535a7b6a4311485256"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetPlatform() const</p>
<p class="NDLRefMemberDescription">Returns the current platform as a combination of <span class="NDLSystemFont"><a href="../NiMain/NiShader.htm">NiShader::Platform</a></span> enumerations. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
