<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>ecr::D3D11ShaderConstantMap</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">ecr::D3D11ShaderConstantMap</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../NiMain/NiShaderConstantMap.htm">NiShaderConstantMap</a></span></p>


<p class="NDLRefHeaderFile">&lt;D3D11ShaderConstantMap.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classecr_1_1_d3_d11_shader_constant_map.gif" alt="Inheritance graph for ecr::D3D11ShaderConstantMap"/>
  <p class="FigureCaption">Inheritance graph for ecr::D3D11ShaderConstantMap</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">D3D11 implementation of <span class="NDLSystemFont"><a href="../NiMain/NiShaderConstantMap.htm">NiShaderConstantMap</a></span>. </p>
<p class="NDLNormal">An instance of this class provides data to a signle shader constant buffers.</p>
<p class="NDLNormal">The constant entries are stored in a set of arrays. There are <span class="NDLSystemFont">NiRenderer::PHASE_COUNT</span> arrays in this set. This set of arrays is implemented in the class as the m_phaseEntryArray member. The entries are partitioned into sets to allow varying update frequency per set. This feature is under development and currently provides no advantage. </p>

<a name="construction_and_destruction"></a>
<p class="NDLRefHead1">Construction and Destruction</p>


<a name="classecr_1_1_d3_d11_shader_constant_map_1a7605eb824065e74079ab6889130d5e65"></a>
<p class="NDLRefMemberFunction">D3D11ShaderConstantMap(<span class="NDLSystemFont"><a href="../NiMain/NiGPUProgram.htm">NiGPUProgram::ProgramType</a></span> shaderType)</p>
<p class="NDLRefMemberDescription">Constructor to create a <span class="NDLSystemFont">D3D11ShaderConstantMap</span> instance for the given shader program type. </p>
<p class="NDLRefMemberDetailedDescription">A single shader constant map can be applied to numerous shader program types, but one of those shader program types must be the type that is used to construct the shader constant map. </p>

<a name="classecr_1_1_d3_d11_shader_constant_map_1ace0760b12a4bc98b76d591d4d3923604"></a>
<p class="NDLRefMemberFunction">virtual ~D3D11ShaderConstantMap()</p>
<p class="NDLRefMemberDescription">Destructor. </p>
<a name="public_static_methods"></a>
<p class="NDLRefHead1">Public Static Methods</p>


<a name="classecr_1_1_d3_d11_shader_constant_map_1a133916296c10c5b8fc699d4d01f0f88b"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont"><a href="../efd/efd__FixedString.htm">efd::FixedString</a></span>&  GetGlobalConstantBufferString()</p>
<p class="NDLRefMemberDescription">Return the string "$Globals", which D3D11 uses for the globnal unnamed constant buffer. </p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classecr_1_1_d3_d11_shader_constant_map_1a8d770b9d3ed8e3133b8b6359e143f37a"></a>
<p class="NDLRefMemberFunction">void  SetName(const <span class="NDLSystemFont"><a href="../efd/efd__FixedString.htm">efd::FixedString</a></span>& name)</p>
<p class="NDLRefMemberDescription">Set the name of the <span class="NDLSystemFont">D3D11ShaderConstantMap</span>, which must match the name of the constant buffer the map will manage. </p>

<a name="classecr_1_1_d3_d11_shader_constant_map_1a07948c840dc1660d070463745ed741c6"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../efd/efd__FixedString.htm">efd::FixedString</a></span>&  GetName() const</p>
<p class="NDLRefMemberDescription">Return the name of the <span class="NDLSystemFont">D3D11ShaderConstantMap</span>. </p>

<a name="classecr_1_1_d3_d11_shader_constant_map_1a27263b1f1d7f122219bdddf576ca1d7b"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">NiShaderError</span>  AddEntry(<br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pKey, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> flags, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> extra, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> shaderRegister, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> registerCount, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pVariableName = NULL, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> dataSize = 0, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> dataStride = 0, <br/>const void* pDataSource = NULL, <br/><span class="NDLSystemFont">efd::Bool</span> copyData = false)</p>
<p class="NDLRefMemberDescription">Creates a new <span class="NDLSystemFont"><a href="../NiMain/NiShaderConstantMapEntry.htm">NiShaderConstantMapEntry</a></span>. </p>
<p class="NDLRefMemberDetailedDescription">The shaderRegister and registerCount parameters are less useful in D3D11, where shaders refer to variable by name rather than by a register number. However, the shader constant map system in Gamebryo still uses these values to prevent collisions, so a unique value must be provided for each entry. D3D11 will also use these values to encode the offset and size of each variable in the constant buffer, but applications rarely need to manage those details.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pKey</span></td>
    <td>Name of the entry. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">flags</span></td>
    <td>Encoding of the type of entry this will be. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">extra</span></td>
    <td>Additional information about the entry. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">shaderRegister</span></td>
    <td>Shader register for this entry, which must be unique for each entry. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">registerCount</span></td>
    <td>Register count for this entry. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pVariableName</span></td>
    <td>Name of the variable to set. If NULL, the name will be obtained from pKey. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">dataSize</span></td>
    <td>Total size of the data block provided to pDataSource. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">dataStride</span></td>
    <td>Stride of the individual array entries in the data block provided to pDataSource. If the variable is not an array, this should be equal to dataSize. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pDataSource</span></td>
    <td>Data provided to the entry as the default value for the variable. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">copyData</span></td>
    <td>True if the shader constant map entry should save its own copy of the data, or false if the shader constant map entry should only save a pointer to the data. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_d3_d11_shader_constant_map_1a5f659fcef68ecb6981059d93a7ade42c"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">NiShaderError</span>  AddPredefinedEntry(<br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pKey, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> extra, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> shaderRegister, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pVariableName)</p>
<p class="NDLRefMemberDescription">Creates a new <span class="NDLSystemFont"><a href="../NiMain/NiShaderConstantMapEntry.htm">NiShaderConstantMapEntry</a></span> of the PREDEFINED type. </p>
<p class="NDLRefMemberDetailedDescription">The shaderRegister and registerCount parameters are less useful in D3D11, where shaders refer to variable by name rather than by a register number. However, the shader constant map system in Gamebryo still uses these values to prevent collisions, so a unique value must be provided for each entry. D3D11 will also use these values to encode the offset and size of each variable in the constant buffer, but applications rarely need to manage those details.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pKey</span></td>
    <td>Name of the entry. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">extra</span></td>
    <td>Additional information about the entry. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">shaderRegister</span></td>
    <td>Shader register for this entry, which must be unique for each entry. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pVariableName</span></td>
    <td>Name of the variable to set. If NULL, the name will be obtained from pKey. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_d3_d11_shader_constant_map_1a0ad5247612f3574368a9a00de8c071f2"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">NiShaderError</span>  AddAttributeEntry(<br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pKey, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> flags, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> extra, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> shaderRegister, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> registerCount, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pVariableName, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> dataSize, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> dataStride, <br/>const void* pDataSource, <br/><span class="NDLSystemFont">efd::Bool</span> copyData = true)</p>
<p class="NDLRefMemberDescription">Creates a new <span class="NDLSystemFont"><a href="../NiMain/NiShaderConstantMapEntry.htm">NiShaderConstantMapEntry</a></span> of the ATTRIBUTE type. </p>
<p class="NDLRefMemberDetailedDescription">The shaderRegister and registerCount parameters are less useful in D3D11, where shaders refer to variable by name rather than by a register number. However, the shader constant map system in Gamebryo still uses these values to prevent collisions, so a unique value must be provided for each entry. D3D11 will also use these values to encode the offset and size of each variable in the constant buffer, but applications rarely need to manage those details.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pKey</span></td>
    <td>Name of the entry. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">flags</span></td>
    <td>Encoding of the type of entry this will be. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">extra</span></td>
    <td>Additional information about the entry. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">shaderRegister</span></td>
    <td>Shader register for this entry, which must be unique for each entry. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">registerCount</span></td>
    <td>Register count for this entry. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pVariableName</span></td>
    <td>Name of the variable to set. If NULL, the name will be obtained from pKey. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">dataSize</span></td>
    <td>Total size of the data block provided to pDataSource. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">dataStride</span></td>
    <td>Stride of the individual array entries in the data block provided to pDataSource. If the variable is not an array, this should be equal to dataSize. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pDataSource</span></td>
    <td>Data provided to the entry as the default value for the variable. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">copyData</span></td>
    <td>True if the shader constant map entry should save its own copy of the data, or false if the shader constant map entry should only save a pointer to the data. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_d3_d11_shader_constant_map_1ab178466e22a07d128cc7d401197388fd"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">NiShaderError</span>  AddConstantEntry(<br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pKey, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> flags, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> extra, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> shaderRegister, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> registerCount, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pVariableName, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> dataSize, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> dataStride, <br/>const void* pDataSource, <br/><span class="NDLSystemFont">efd::Bool</span> copyData = true)</p>
<p class="NDLRefMemberDescription">Creates a new <span class="NDLSystemFont"><a href="../NiMain/NiShaderConstantMapEntry.htm">NiShaderConstantMapEntry</a></span> of the CONSTANT type. </p>
<p class="NDLRefMemberDetailedDescription">The shaderRegister and registerCount parameters are less useful in D3D11, where shaders refer to variable by name rather than by a register number. However, the shader constant map system in Gamebryo still uses these values to prevent collisions, so a unique value must be provided for each entry. D3D11 will also use these values to encode the offset and size of each variable in the constant buffer, but applications rarely need to manage those details.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pKey</span></td>
    <td>Name of the entry. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">flags</span></td>
    <td>Encoding of the type of entry this will be. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">extra</span></td>
    <td>Additional information about the entry. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">shaderRegister</span></td>
    <td>Shader register for this entry, which must be unique for each entry. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">registerCount</span></td>
    <td>Register count for this entry. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pVariableName</span></td>
    <td>Name of the variable to set. If NULL, the name will be obtained from pKey. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">dataSize</span></td>
    <td>Total size of the data block provided to pDataSource. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">dataStride</span></td>
    <td>Stride of the individual array entries in the data block provided to pDataSource. If the variable is not an array, this should be equal to dataSize. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pDataSource</span></td>
    <td>Data provided to the entry as the default value for the variable. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">copyData</span></td>
    <td>True if the shader constant map entry should save its own copy of the data, or false if the shader constant map entry should only save a pointer to the data. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_d3_d11_shader_constant_map_1af351b7148ad2c9e87c812d6e1bce57df"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">NiShaderError</span>  AddGlobalEntry(<br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pKey, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> flags, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> extra, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> shaderRegister, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> registerCount, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pVariableName, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> dataSize, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> dataStride, <br/>const void* pDataSource, <br/><span class="NDLSystemFont">efd::Bool</span> copyData = false)</p>
<p class="NDLRefMemberDescription">Creates a new <span class="NDLSystemFont"><a href="../NiMain/NiShaderConstantMapEntry.htm">NiShaderConstantMapEntry</a></span> of the GLOBAL type. </p>
<p class="NDLRefMemberDetailedDescription">The shaderRegister and registerCount parameters are less useful in D3D11, where shaders refer to variable by name rather than by a register number. However, the shader constant map system in Gamebryo still uses these values to prevent collisions, so a unique value must be provided for each entry. D3D11 will also use these values to encode the offset and size of each variable in the constant buffer, but applications rarely need to manage those details.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pKey</span></td>
    <td>Name of the entry. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">flags</span></td>
    <td>Encoding of the type of entry this will be. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">extra</span></td>
    <td>Additional information about the entry. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">shaderRegister</span></td>
    <td>Shader register for this entry, which must be unique for each entry. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">registerCount</span></td>
    <td>Register count for this entry. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pVariableName</span></td>
    <td>Name of the variable to set. If NULL, the name will be obtained from pKey. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">dataSize</span></td>
    <td>Total size of the data block provided to pDataSource. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">dataStride</span></td>
    <td>Stride of the individual array entries in the data block provided to pDataSource. If the variable is not an array, this should be equal to dataSize. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pDataSource</span></td>
    <td>Data provided to the entry as the default value for the variable. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">copyData</span></td>
    <td>True if the shader constant map entry should save its own copy of the data, or false if the shader constant map entry should only save a pointer to the data. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_d3_d11_shader_constant_map_1ad785219bbbbcb6f038d544eb68e6ad1f"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">NiShaderError</span>  AddOperatorEntry(<br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pKey, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> flags, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> extra, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> shaderRegister, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> registerCount, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pVariableName)</p>
<p class="NDLRefMemberDescription">Creates a new <span class="NDLSystemFont"><a href="../NiMain/NiShaderConstantMapEntry.htm">NiShaderConstantMapEntry</a></span> of the OPERATOR type. </p>
<p class="NDLRefMemberDetailedDescription">The shaderRegister and registerCount parameters are less useful in D3D11, where shaders refer to variable by name rather than by a register number. However, the shader constant map system in Gamebryo still uses these values to prevent collisions, so a unique value must be provided for each entry. D3D11 will also use these values to encode the offset and size of each variable in the constant buffer, but applications rarely need to manage those details.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pKey</span></td>
    <td>Name of the entry. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">flags</span></td>
    <td>Encoding of the type of entry this will be. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">extra</span></td>
    <td>Additional information about the entry. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">shaderRegister</span></td>
    <td>Shader register for this entry, which must be unique for each entry. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">registerCount</span></td>
    <td>Register count for this entry. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pVariableName</span></td>
    <td>Name of the variable to set. If NULL, the name will be obtained from pKey. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_d3_d11_shader_constant_map_1af5abc13a930c8333da84f5d3345fbb8f"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">NiShaderError</span>  AddObjectEntry(<br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pKey, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> shaderRegister, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pVariableName, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> objectIndex, <br/><span class="NDLSystemFont"><a href="../NiMain/NiShaderAttributeDesc.htm">NiShaderAttributeDesc::ObjectType</a></span> objectType, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> count = 1)</p>
<p class="NDLRefMemberDescription">Creates a new <span class="NDLSystemFont"><a href="../NiMain/NiShaderConstantMapEntry.htm">NiShaderConstantMapEntry</a></span> of the OBJECT type. </p>
<p class="NDLRefMemberDetailedDescription">The shaderRegister and registerCount parameters are less useful in D3D11, where shaders refer to variable by name rather than by a register number. However, the shader constant map system in Gamebryo still uses these values to prevent collisions, so a unique value must be provided for each entry. D3D11 will also use these values to encode the offset and size of each variable in the constant buffer, but applications rarely need to manage those details.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pKey</span></td>
    <td>Name of the entry. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">shaderRegister</span></td>
    <td>Shader register for this entry, which must be unique for each entry. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pVariableName</span></td>
    <td>Name of the variable to set. If NULL, the name will be obtained from pKey. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">objectIndex</span></td>
    <td>Index of the <span class="NDLSystemFont"><a href="../NiMain/NiDynamicEffect.htm">NiDynamicEffect</a></span> object for this entry. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">objectType</span></td>
    <td>Type of the <span class="NDLSystemFont"><a href="../NiMain/NiDynamicEffect.htm">NiDynamicEffect</a></span> object for this entry. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">count</span></td>
    <td>Number of entries in the array if this variable is an array. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_d3_d11_shader_constant_map_1a97eb37bc0fcf88137fa8483d0483a7af"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">NiShaderError</span>  RemoveEntry(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pKey)</p>
<p class="NDLRefMemberDescription">Remove the specified entry from the shader constant map. </p>

<a name="classecr_1_1_d3_d11_shader_constant_map_1abfe89408c71248313ad0e654d5be9142"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../NiMain/NiShaderConstantMapEntry.htm">NiShaderConstantMapEntry</a></span>*  GetEntry(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pKey)</p>
<p class="NDLRefMemberDescription">Return the specified entry in the shader constant map. </p>

<a name="classecr_1_1_d3_d11_shader_constant_map_1a40a6146a9988a61539233db5f5810e48"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../NiMain/NiShaderConstantMapEntry.htm">NiShaderConstantMapEntry</a></span>*  GetEntryAtIndex(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> index)</p>
<p class="NDLRefMemberDescription">Return the specified entry in the shader constant map. </p>

<a name="classecr_1_1_d3_d11_shader_constant_map_1a8fb2d8a4cbf0d910dcf5a348cfc45e01"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetEntryCount()</p>
<p class="NDLRefMemberDescription">Return the number of entries in the shader constant map. </p>

<a name="classecr_1_1_d3_d11_shader_constant_map_1abb7afad4da36bcb5953f111d1aee72da"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiShaderError</span>  UpdateShaderConstants(<br/>const <span class="NDLSystemFont"><a href="../NiMain/NiRenderCallContext.htm">NiRenderCallContext</a></span>& callContext, <br/><span class="NDLSystemFont">efd::Bool</span> isGlobal = false)</p>
<p class="NDLRefMemberDescription">Update the constant buffer based on the shader constant entries. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">callContext</span></td>
    <td>Context for the rendering call. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">isGlobal</span></td>
    <td>Unused. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Whether or not the function succeeded. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_d3_d11_shader_constant_map_1a75e0c052723d484d11227e18d768a191"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  IsLinkable(const <span class="NDLSystemFont"><a href="ecr__ConstantBufferDesc.htm">ConstantBufferDesc</a></span>* pCBDesc) const</p>
<p class="NDLRefMemberDescription">Returns whether the shader constant map is capable of being linked to the <span class="NDLSystemFont"><a href="ecr__ConstantBufferDesc.htm">ConstantBufferDesc</a></span> that is passed in. </p>

<a name="classecr_1_1_d3_d11_shader_constant_map_1a36583cc9a90f93b28883f5594e7bb36b"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  LinkShaderConstantBuffer(const <span class="NDLSystemFont"><a href="ecr__ConstantBufferDesc.htm">ConstantBufferDesc</a></span>* pCBDesc)</p>
<p class="NDLRefMemberDescription">Encode the entries in the shader constant map with the offset and size of the variables in the constant buffer as described by the <span class="NDLSystemFont"><a href="ecr__ConstantBufferDesc.htm">ConstantBufferDesc</a></span>. </p>

<a name="classecr_1_1_d3_d11_shader_constant_map_1ab1c8fe933c9a933bfcfd93306a2d6175"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="ecr__D3D11DataStream.htm">D3D11DataStream</a></span>*  GetShaderConstantDataStream() const</p>
<p class="NDLRefMemberDescription">Return the <span class="NDLSystemFont"><a href="ecr__D3D11DataStream.htm">D3D11DataStream</a></span> that manages the constant buffer for this constant map. </p>

<a name="classecr_1_1_d3_d11_shader_constant_map_1a258799ad5da8ed4ff9626298ece81e6b"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  CreateShaderConstantDataStream(const <span class="NDLSystemFont"><a href="ecr__ConstantBufferDesc.htm">ConstantBufferDesc</a></span>* pCBDesc)</p>
<p class="NDLRefMemberDescription">Create the <span class="NDLSystemFont"><a href="ecr__D3D11DataStream.htm">D3D11DataStream</a></span> for this constant map's buffer. </p>

<a name="classecr_1_1_d3_d11_shader_constant_map_1a133f67b8f15f2bb2cc5766442e58821a"></a>
<p class="NDLRefMemberFunction">void  ReleaseShaderConstantDataStream()</p>
<p class="NDLRefMemberDescription">Release the <span class="NDLSystemFont"><a href="ecr__D3D11DataStream.htm">D3D11DataStream</a></span> for this constant map's buffer. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
