<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>ecr::D3D11Renderer</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">ecr::D3D11Renderer</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../NiMain/NiRenderer.htm">NiRenderer</a></span></p>


<p class="NDLRefHeaderFile">&lt;D3D11Renderer.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classecr_1_1_d3_d11_renderer.gif" alt="Inheritance graph for ecr::D3D11Renderer"/>
  <p class="FigureCaption">Inheritance graph for ecr::D3D11Renderer</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal"><span class="NDLSystemFont">D3D11Renderer</span> is the NiRenderer-derived class responsible for rendering through the D3D11 API. </p>
<p class="NDLNormal">For details on the support of optional features those functions are declared in the <span class="NDLSystemFont"><a href="../NiMain/NiRenderer.htm">NiRenderer</a></span> base class, see the Feature and LImitations of the D3D11 Renderer documentation. </p>

<a name="public_types"></a>
<p class="NDLRefHead1">Public Types</p>
<a name="classecr_1_1_d3_d11_renderer_1a43edaf109643d8a6e4c4d68179f76ed2"></a>
<p class=NDLRefHead2>ecr::D3D11Renderer::DriverType</p>


<p class="NDLRefMemberDescription">Mapping of D3D Driver type enumerations. </p>


<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">DRIVER_TYPE_UNKNOWN</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">DRIVER_TYPE_HARDWARE</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">DRIVER_TYPE_REFERENCE</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">DRIVER_TYPE_NULL</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">DRIVER_TYPE_SOFTWARE</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">DRIVER_TYPE_WARP</span></td>
    <td>&nbsp;</td>
</tr>

  </tbody>
</table>
</div>

<a name="classecr_1_1_d3_d11_renderer_1a44410b5bb42542e72f796449a54ef73e"></a>
<p class=NDLRefHead2>ecr::D3D11Renderer::CreateDeviceFlags</p>


<p class="NDLRefMemberDescription">Mapping of D3D Create Device flags. </p>


<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">CREATE_DEVICE_SINGLETHREADED</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">CREATE_DEVICE_DEBUG</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">CREATE_DEVICE_SWITCH_TO_REF</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">CREATE_DEVICE_PREVENT_INTERNAL_THREADING_OPTIMIZATIONS</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">CREATE_DEVICE_BGRA_SUPPORT</span></td>
    <td>&nbsp;</td>
</tr>

  </tbody>
</table>
</div>

<a name="classecr_1_1_d3_d11_renderer_1a828a5864ec5e3632b90b437368849dca"></a>
<p class=NDLRefHead2>ecr::D3D11Renderer::FeatureLevel</p>


<p class="NDLRefMemberDescription">Mapping of D3D feature level enumerations. </p>


<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">FEATURE_LEVEL_9_1</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">FEATURE_LEVEL_9_2</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">FEATURE_LEVEL_9_3</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">FEATURE_LEVEL_10_0</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">FEATURE_LEVEL_10_1</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">FEATURE_LEVEL_11_0</span></td>
    <td>&nbsp;</td>
</tr>

  </tbody>
</table>
</div>

<a name="classecr_1_1_d3_d11_renderer_1abda70c6d5fa381f1da74ee2597cbb351"></a>
<p class=NDLRefHead2>ecr::D3D11Renderer::WindowAssociationFlags</p>


<p class="NDLRefMemberDescription">Mapping of D3D window association flags. </p>


<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">WIND_ASN_NO_WINDOW_CHANGES</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">WIND_ASN_NO_ALT_ENTER</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">WIND_ASN_NO_PRINT_SCREEN</span></td>
    <td>&nbsp;</td>
</tr>

  </tbody>
</table>
</div>


<a name="occluded_device_notification_functions"></a>
<p class="NDLRefHead1">Occluded device notification functions</p>


<a name="classecr_1_1_d3_d11_renderer_1a79f2614ba913a100cbe3055b14fab57f"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont">efd::Bool</span>(*  OCCLUDEDNOTIFYFUNC)(efd::Bool beginOccluded, void *pData)</p>
<p class="NDLRefMemberDescription">Callback function type for responding to an occluded device. </p>
<p class="NDLRefMemberDetailedDescription">The OCCLUDEDNOTIFYFUNC type is for a pointer to a function that gets called as soon as the renderer encounters an occluded device, and again as soon as the renderer learns that the device is no longer occluded. The renderer calls the function with beginOccluded = true immediately when the occlusion starts, and beginOccluded = false as soon as the occlusion ends. Any data pointer that the application provides when registering the function is passed in to the callback function as the pData parameter. </p>

<a name="classecr_1_1_d3_d11_renderer_1ab7482cac319ae6748035f9aeaa948a4f"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  AddOccludedNotificationFunc(<br/><span class="NDLSystemFont"><a href="ecr__D3D11Renderer.htm#classecr_1_1_d3_d11_renderer_1a79f2614ba913a100cbe3055b14fab57f">OCCLUDEDNOTIFYFUNC</a></span> pNotifyFunc, <br/>void* pData)</p>
<p class="NDLRefMemberDescription">Register a callback function for responding to an occluded device. </p>
<p class="NDLRefMemberDetailedDescription">Callback functions will be made in the order they have been registered.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pNotifyFunc</span></td>
    <td>Function to call when the device is first occluded and when the occlusion is over. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pData</span></td>
    <td>Optional data pointer that will be passed in to the callback function. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The index of the registered callback function. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_d3_d11_renderer_1afbf052f18f82523d2db0bdadeff8214d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  RemoveOccludedNotificationFunc(<span class="NDLSystemFont"><a href="ecr__D3D11Renderer.htm#classecr_1_1_d3_d11_renderer_1a79f2614ba913a100cbe3055b14fab57f">OCCLUDEDNOTIFYFUNC</a></span> pNotifyFunc)</p>
<p class="NDLRefMemberDescription">Unregister the specified device-occluded callback function. </p>

<a name="classecr_1_1_d3_d11_renderer_1a4789c086295524f2f0847fb49aeafb9e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  RemoveOccludedNotificationFunc(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> index)</p>
<p class="NDLRefMemberDescription">Unregister the specified device-occluded callback function. </p>

<a name="classecr_1_1_d3_d11_renderer_1ae78ab341ab95482448e95aa5deafe9e5"></a>
<p class="NDLRefMemberFunction">void  RemoveAllOccludedNotificationFuncs()</p>
<p class="NDLRefMemberDescription">Unregister all device-occluded callback function. </p>

<a name="classecr_1_1_d3_d11_renderer_1a82cb02365f7032187c8271da3d5bc28e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  ChangeOccludedNotificationFuncData(<br/><span class="NDLSystemFont"><a href="ecr__D3D11Renderer.htm#classecr_1_1_d3_d11_renderer_1a79f2614ba913a100cbe3055b14fab57f">OCCLUDEDNOTIFYFUNC</a></span> pNotifyFunc, <br/>void* pData)</p>
<p class="NDLRefMemberDescription">Change the data pointer that will be passed to the specified device-occluded callback function. </p>

<a name="classecr_1_1_d3_d11_renderer_1abf2d471d35512a82bdd94ad71174fc42"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  ChangeOccludedNotificationFuncData(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> index, <br/>void* pData)</p>
<p class="NDLRefMemberDescription">Change the data pointer that will be passed to the specified device-occluded callback function. </p>

<a name="classecr_1_1_d3_d11_renderer_1a981b28d8cdb3d4560d26513a6360c5e9"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetOccludedNotificationFuncCount() const</p>
<p class="NDLRefMemberDescription">Return the number of callback functions registered to respond to an occluded device. </p>

<a name="classecr_1_1_d3_d11_renderer_1a4269933c2dfb8032768c95a9632497d9"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetOccludedNotificationFuncArrayCount() const</p>
<p class="NDLRefMemberDescription">Return the size of the array of callback functions registered to respond to an occluded device. </p>

<a name="classecr_1_1_d3_d11_renderer_1a2e6ed516465f969d245afdef4480ef91"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  FindOccludedNotificationFunc(<span class="NDLSystemFont"><a href="ecr__D3D11Renderer.htm#classecr_1_1_d3_d11_renderer_1a79f2614ba913a100cbe3055b14fab57f">OCCLUDEDNOTIFYFUNC</a></span> pNotifyFunc) const</p>
<p class="NDLRefMemberDescription">Return the index of the specified device-occluded callback function. </p>

<a name="classecr_1_1_d3_d11_renderer_1a71cfcc629ed21f5ae7124ad9a740dc0a"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="ecr__D3D11Renderer.htm#classecr_1_1_d3_d11_renderer_1a79f2614ba913a100cbe3055b14fab57f">OCCLUDEDNOTIFYFUNC</a></span>  GetOccludedNotificationFunc(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> index) const</p>
<p class="NDLRefMemberDescription">Return the specified device-occluded callback function. </p>
<a name="removed_device_notification_functions"></a>
<p class="NDLRefHead1">Removed device notification functions</p>


<a name="classecr_1_1_d3_d11_renderer_1ace5fcdc66d347a6242b8e0451d273956"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont">efd::Bool</span>(*  DEVICEREMOVEDNOTIFYFUNC)(void *pData)</p>
<p class="NDLRefMemberDescription">Callback function type for responding to a removed device. </p>
<p class="NDLRefMemberDetailedDescription">The DEVICEREMOVEDNOTIFYFUNC type is for a pointer to a function that gets called once, when the renderer first realizes that the device has been removed. Any data pointer that the application provides when registering the function is passed in as the pData parameter. </p>

<a name="classecr_1_1_d3_d11_renderer_1aa352e2b16d78cb368f3645b3da604b71"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  AddDeviceRemovedNotificationFunc(<br/><span class="NDLSystemFont"><a href="ecr__D3D11Renderer.htm#classecr_1_1_d3_d11_renderer_1ace5fcdc66d347a6242b8e0451d273956">DEVICEREMOVEDNOTIFYFUNC</a></span> pNotifyFunc, <br/>void* pData)</p>
<p class="NDLRefMemberDescription">Register a callback function for responding to an removed device. </p>
<p class="NDLRefMemberDetailedDescription">Callback functions will be made in the order they have been registered.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pNotifyFunc</span></td>
    <td>Function to call when the device is removed. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pData</span></td>
    <td>Optional data pointer that will be passed in to the callback function. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The index of the registered callback function. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_d3_d11_renderer_1a0a26fcfdb537a85412d84d6a17bb64d1"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  RemoveDeviceRemovedNotificationFunc(<span class="NDLSystemFont"><a href="ecr__D3D11Renderer.htm#classecr_1_1_d3_d11_renderer_1ace5fcdc66d347a6242b8e0451d273956">DEVICEREMOVEDNOTIFYFUNC</a></span> pNotifyFunc)</p>
<p class="NDLRefMemberDescription">Unregister the specified device-removed callback function. </p>

<a name="classecr_1_1_d3_d11_renderer_1a2d25d851dc5ab6f507eacaa43225ba7f"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  RemoveDeviceRemovedNotificationFunc(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> index)</p>
<p class="NDLRefMemberDescription">Unregister the specified device-removed callback function. </p>

<a name="classecr_1_1_d3_d11_renderer_1a50363ce6fe601fddce8c80cab92e33f3"></a>
<p class="NDLRefMemberFunction">void  RemoveAllDeviceRemovedNotificationFuncs()</p>
<p class="NDLRefMemberDescription">Unregister all device-removed callback function. </p>

<a name="classecr_1_1_d3_d11_renderer_1aa917da61b995d983f22d0a5d4cea8a75"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  ChangeDeviceRemovedNotificationFuncData(<br/><span class="NDLSystemFont"><a href="ecr__D3D11Renderer.htm#classecr_1_1_d3_d11_renderer_1ace5fcdc66d347a6242b8e0451d273956">DEVICEREMOVEDNOTIFYFUNC</a></span> pNotifyFunc, <br/>void* pData)</p>
<p class="NDLRefMemberDescription">Change the data pointer that will be passed to the specified device-removed callback function. </p>

<a name="classecr_1_1_d3_d11_renderer_1a5c9e1f654c98c4ed89659901c0474358"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  ChangeDeviceRemovedNotificationFuncData(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> index, <br/>void* pData)</p>
<p class="NDLRefMemberDescription">Change the data pointer that will be passed to the specified device-removed callback function. </p>

<a name="classecr_1_1_d3_d11_renderer_1a4a37d269a51e2d024c2fc6a17ac6c6e7"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetDeviceRemovedNotificationFuncCount() const</p>
<p class="NDLRefMemberDescription">Return the number of callback functions registered to respond to an removed device. </p>

<a name="classecr_1_1_d3_d11_renderer_1a515d0b5ba654d11fa318448c0a0fdfce"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetDeviceRemovedNotificationFuncArrayCount() const</p>
<p class="NDLRefMemberDescription">Return the size of the array of callback functions registered to respond to an removed device. </p>

<a name="classecr_1_1_d3_d11_renderer_1a95f9ca57a8140cd4bb32f8730432001e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  FindDeviceRemovedNotificationFunc(<span class="NDLSystemFont"><a href="ecr__D3D11Renderer.htm#classecr_1_1_d3_d11_renderer_1ace5fcdc66d347a6242b8e0451d273956">DEVICEREMOVEDNOTIFYFUNC</a></span> pNotifyFunc) const</p>
<p class="NDLRefMemberDescription">Return the index of the specified device-removed callback function. </p>

<a name="classecr_1_1_d3_d11_renderer_1ac9ceffe23f3badcb95c50ea62bcccd71"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="ecr__D3D11Renderer.htm#classecr_1_1_d3_d11_renderer_1ace5fcdc66d347a6242b8e0451d273956">DEVICEREMOVEDNOTIFYFUNC</a></span>  GetDeviceRemovedNotificationFunc(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> index) const</p>
<p class="NDLRefMemberDescription">Return the specified device-removed callback function. </p>
<a name="construction_and_destruction"></a>
<p class="NDLRefHead1">Construction and Destruction</p>


<a name="classecr_1_1_d3_d11_renderer_1a4c02deecc62e5b31a251e652791fd5b7"></a>
<p class="NDLRefMemberFunction">virtual ~D3D11Renderer()</p>
<p class="NDLRefMemberDescription">Destructor. </p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classecr_1_1_d3_d11_renderer_1a86dbca6acc6d1e0def97933bd475e751"></a>
<p class="NDLRefMemberFunction">void  GetCreationParameters(<span class="NDLSystemFont"><a href="ecr__D3D11Renderer__CreationParameters.htm">CreationParameters</a></span>& createParams) const</p>
<p class="NDLRefMemberDescription">Returns the creation parameters used to create the renderer. </p>

<a name="classecr_1_1_d3_d11_renderer_1a058d98f19b817bfc527eb7f5a3d42e9e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  ResizeBuffers(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> width, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> height, <br/>HWND hOutputWnd = NULL)</p>
<p class="NDLRefMemberDescription">Resize a swap chain. </p>
<p class="NDLRefMemberDetailedDescription">This function is most often called in response to a WM_SIZE message.</p>
<p class="NDLRefMemberDetailedDescription">This function can only be called from the device thread. Refer to the documentation on Restricted Thread Behavior for the <span class="NDLSystemFont">D3D11Renderer</span>.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">width</span></td>
    <td>New buffer width. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">height</span></td>
    <td>New buffer height. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">hOutputWnd</span></td>
    <td>Window whose swap chain is being resized. If this parameter is NULL, the default swap chain will be resized. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the function succeeds, false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_d3_d11_renderer_1a449219bdf9d025eec72c303e270ca01a"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  CreateSwapChainRenderTargetGroup(<br/>DXGI_SWAP_CHAIN_DESC& swapChainDesc, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> outputIndex = 0, <br/><span class="NDLSystemFont">efd::Bool</span> createDepthStencilBuffer = true, <br/>DXGI_FORMAT depthStencilFormat = DXGI_FORMAT_UNKNOWN)</p>
<p class="NDLRefMemberDescription">Create a new swap chain and associated render target group. </p>
<p class="NDLRefMemberDetailedDescription">This function is used to provide support for rendering to multiple windows. The render target group will be stored internal to the renderer, and can be obtained using GetSwapChainRenderTargetGroup.</p>
<p class="NDLRefMemberDetailedDescription">This function can only be called from the device thread. Refer to the documentation on Restricted Thread Behavior for the <span class="NDLSystemFont">D3D11Renderer</span>.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">swapChainDesc</span></td>
    <td>Description of the new swap chain. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">outputIndex</span></td>
    <td>Output to create the new swap chain on. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">createDepthStencilBuffer</span></td>
    <td>Whether or not to create a depth/stencil buffer for the new swap chain. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">depthStencilFormat</span></td>
    <td>Depth stencil format for the new depth/stencil buffer. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the function succeeds, false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_d3_d11_renderer_1a21e73f0944da712ace6b9f63c39d3c26"></a>
<p class="NDLRefMemberFunction">void  DestroySwapChainRenderTargetGroup(HWND hWnd)</p>
<p class="NDLRefMemberDescription">Destroy a swap chain and its associated render target group. </p>
<p class="NDLRefMemberDetailedDescription">Note that if the render target group associated with hWnd is the current render target, this function will fail. This function may be used to destroy the original render target group created with the device if hWnd is the window passed in the swap chain description in the original <span class="NDLSystemFont"><a href="ecr__D3D11Renderer__CreationParameters.htm">CreationParameters</a></span> structure provided to the <span class="NDLSystemFont"><a href="ecr__D3D11Renderer.htm#classecr_1_1_d3_d11_renderer_1aed935b1a15af231673821fd421d04e9a">D3D11Renderer::Create</a></span> function. In this case, the renderer will automatically assign one of the other swap chain render target groups, if any exist, as the new default render target group.</p>
<p class="NDLRefMemberDetailedDescription">This function can only be called from the device thread. Refer to the documentation on Restricted Thread Behavior for the <span class="NDLSystemFont">D3D11Renderer</span>. </p>

<a name="classecr_1_1_d3_d11_renderer_1a62baff4706d3ebdc79014cd897583251"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  RecreateSwapChainRenderTargetGroup(<br/>DXGI_SWAP_CHAIN_DESC& swapChainDesc, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> outputIndex = 0, <br/><span class="NDLSystemFont">efd::Bool</span> createDepthStencilBuffer = true, <br/>DXGI_FORMAT depthStencilFormat = DXGI_FORMAT_UNKNOWN)</p>
<p class="NDLRefMemberDescription">Recreates a swap chain with new parameters, leaving the swap chain's render target group intact. </p>
<p class="NDLRefMemberDetailedDescription">This function can only be called from the device thread. Refer to the documentation on Restricted Thread Behavior for the <span class="NDLSystemFont">D3D11Renderer</span>.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">swapChainDesc</span></td>
    <td>Description of the new swap chain. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">outputIndex</span></td>
    <td>Output to create the new swap chain on. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">createDepthStencilBuffer</span></td>
    <td>Whether or not to create a depth/stencil buffer for the new swap chain. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">depthStencilFormat</span></td>
    <td>Depth stencil format for the new depth/stencil buffer. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the function succeeds, false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_d3_d11_renderer_1a249f166b8df6f666099d5b7cd9c784bd"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../NiMain/NiRenderTargetGroup.htm">NiRenderTargetGroup</a></span>*  GetSwapChainRenderTargetGroup(HWND hWnd) const</p>
<p class="NDLRefMemberDescription">Returns the render target group for the specified window's swap chain. </p>

<a name="classecr_1_1_d3_d11_renderer_1ac44f42b191b2971c4da3abc5a5ac5152"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  SetDefaultSwapChainRenderTargetGroup(HWND hWnd)</p>
<p class="NDLRefMemberDescription">Makes the <span class="NDLSystemFont"><a href="../NiMain/NiRenderTargetGroup.htm">NiRenderTargetGroup</a></span> for the specified window the default render target group. </p>
<p class="NDLRefMemberDetailedDescription">This function can only be called from the device thread. Refer to the documentation on Restricted Thread Behavior for the <span class="NDLSystemFont">D3D11Renderer</span>. </p>

<a name="classecr_1_1_d3_d11_renderer_1abcc3c716f4aa043e7732c3268c3127f2"></a>
<p class="NDLRefMemberFunction">ID3D11Device*  GetD3D11Device() const</p>
<p class="NDLRefMemberDescription">Returns the D3D11 device. </p>

<a name="classecr_1_1_d3_d11_renderer_1a5c4d718804ebb33b5bd75526bbe94c0a"></a>
<p class="NDLRefMemberFunction">ID3D11DeviceContext*  GetImmediateD3D11DeviceContext() const</p>
<p class="NDLRefMemberDescription">Returns the immediate D3D11 device context. </p>

<a name="classecr_1_1_d3_d11_renderer_1aa73f8f8f0f93670f84c70cbac6656f03"></a>
<p class="NDLRefMemberFunction">ID3D11DeviceContext*  GetCurrentD3D11DeviceContext() const</p>
<p class="NDLRefMemberDescription">Returns the current D3D11 device context. </p>

<a name="classecr_1_1_d3_d11_renderer_1a0386d073c06af63ae7be6a6b9fda1138"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  DoesFormatSupportFlag(<br/>DXGI_FORMAT format, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> flags) const</p>
<p class="NDLRefMemberDescription">Check capabilities of a specific format on the current device. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">format</span></td>
    <td>Format to check </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">flags</span></td>
    <td>Set of flags to check. These flags come from the D3D11_FORMAT_SUPPORT enumeration, and can be OR-ed together to check multiple flags at once. All the specified capabilities must be supported for the function to return true. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the capability check passes, false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_d3_d11_renderer_1a8185b22563aa73be530397c93ac2a98f"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetFormatSupportFlags(DXGI_FORMAT format) const</p>
<p class="NDLRefMemberDescription">Returns the full set of D3D11_FORMAT_SUPPORT flags for the given format. </p>

<a name="classecr_1_1_d3_d11_renderer_1aa27b0936967b928c49d238185ad1d818"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetSyncInterval() const</p>
<p class="NDLRefMemberDescription">Returns the curent synchronization interval. </p>
<p class="NDLRefMemberDetailedDescription">This value that will be passed into all IDXGISwapChain::Present calls, and is used to synchronize the calls to the vertical refresh rate. An interval of 0 indicates new frames should be presented immediately, and 1 indicates the device should wait for the next refresh to present the frame. Values greater than 1 indicate how many refresh signals to wait until the frame is presented. </p>

<a name="classecr_1_1_d3_d11_renderer_1a95689b73a1e4c221b76d467dbce3451a"></a>
<p class="NDLRefMemberFunction">void  SetSyncInterval(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> syncInterval)</p>
<p class="NDLRefMemberDescription">Sets the curent synchronization interval. </p>
<p class="NDLRefMemberDetailedDescription">This value that will be passed into all IDXGISwapChain::Present calls, and is used to synchronize the calls to the vertical refresh rate. An interval of 0 indicates new frames should be presented immediately, and 1 indicates the device should wait for the next refresh to present the frame. Values greater than 1 indicate how many refresh signals to wait until the frame is presented. </p>

<a name="classecr_1_1_d3_d11_renderer_1ac9ce93f2722e2d30573918daa2c611e6"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="ecr__D3D11DeviceState.htm">D3D11DeviceState</a></span>*  GetDeviceState() const</p>
<p class="NDLRefMemberDescription">Return the renderer's <span class="NDLSystemFont"><a href="ecr__D3D11DeviceState.htm">D3D11DeviceState</a></span>. </p>

<a name="classecr_1_1_d3_d11_renderer_1a008ab4e7fbf4a4c869529938102133ec"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="ecr__D3D11RenderStateManager.htm">D3D11RenderStateManager</a></span>*  GetRenderStateManager() const</p>
<p class="NDLRefMemberDescription">Return the renderer's <span class="NDLSystemFont"><a href="ecr__D3D11RenderStateManager.htm">D3D11RenderStateManager</a></span>. </p>

<a name="classecr_1_1_d3_d11_renderer_1ab20137c35c896b0964cf50ecc44b2f29"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="ecr__D3D11ResourceManager.htm">D3D11ResourceManager</a></span>*  GetResourceManager() const</p>
<p class="NDLRefMemberDescription">Return the renderer's <span class="NDLSystemFont"><a href="ecr__D3D11ResourceManager.htm">D3D11ResourceManager</a></span>. </p>

<a name="classecr_1_1_d3_d11_renderer_1ab4f61ebc65555f91cd9528acb7c8618c"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="ecr__D3D11ShaderConstantManager.htm">D3D11ShaderConstantManager</a></span>*  GetShaderConstantManager() const</p>
<p class="NDLRefMemberDescription">Return the renderer's <span class="NDLSystemFont"><a href="ecr__D3D11ShaderConstantManager.htm">D3D11ShaderConstantManager</a></span>. </p>

<a name="classecr_1_1_d3_d11_renderer_1ae47d9763709d1df12952370db9eb1f66"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="ecr__D3D11Renderer.htm#classecr_1_1_d3_d11_renderer_1a828a5864ec5e3632b90b437368849dca">FeatureLevel</a></span>  GetFeatureLevel() const</p>
<p class="NDLRefMemberDescription">Return the current feature level for the device. </p>

<a name="classecr_1_1_d3_d11_renderer_1aa7d966474070af03c58d7615a2dc828d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetSupportedShaderTypeCount() const</p>
<p class="NDLRefMemberDescription">Return the number of supported shader program types that the devices supports. </p>
<p class="NDLRefMemberDetailedDescription">All D3D11 devices will support pixel and vertex shader programs, but other shader program types are only available at higher feature levels. </p>

<a name="classecr_1_1_d3_d11_renderer_1ac8b805de1a27cb284b2d8477ae3761a0"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../NiMain/NiGPUProgram.htm">NiGPUProgram::ProgramType</a></span>  GetSupportedShaderType(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> index) const</p>
<p class="NDLRefMemberDescription">Return a supported shader program type that the devices supports. </p>
<p class="NDLRefMemberDetailedDescription">All D3D11 devices will support pixel and vertex shader programs, but other shader program types are only available at higher feature levels.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">index</span></td>
    <td>The index of the shader program type. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A shader program type supported by the current device. If an index greater than the number of supported shader program types is provided, the function will return <span class="NDLSystemFont">NiGPUProgram::PROGRAM_MAX</span>. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_d3_d11_renderer_1aa068bb601e08034560812c52ff045c39"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetMaxComputeShader() const</p>
<p class="NDLRefMemberDescription">Return the current maximum compute shader version. </p>
<p class="NDLRefMemberDetailedDescription">The compute shader version will be encoded using D3D11 macros, and the major version can be obtained using D3D11_SHVER_GET_MAJOR(version) while the minor version can be obtained using D3D11_SHVER_GET_MINOR(version). Alternatively, the <span class="NDLSystemFont"><a href="ecr__D3D11ShaderFactory.htm#classecr_1_1_d3_d11_shader_factory_1ab6d7b012be13fe5cc56c60265139c3b2">D3D11ShaderFactory::GetMajorComputeShaderVersion</a></span> and GetMinorComputeShaderVersion can be used.</p>
<p class="NDLRefMemberDetailedDescription">The renderer only reports the compute shader version because that is the only shader type whose version specifications can not be reliably determined by feature level alone. </p>

<a name="classecr_1_1_d3_d11_renderer_1a7db35ae81beeeb54d4057f21190385ef"></a>
<p class="NDLRefMemberFunction">void  InvalidateDeviceState()</p>
<p class="NDLRefMemberDescription">Wrapper function for <span class="NDLSystemFont"><a href="ecr__D3D11DeviceState.htm#classecr_1_1_d3_d11_device_state_1a6aef14830b8641d3d811733c2f8542bf">D3D11DeviceState::InvalidateDeviceState</a></span>. </p>
<p class="NDLRefMemberDetailedDescription">Invalidates the cached version of the shaders, render state objects, samplers, shader resources, unordered access views, and shader constant buffers that Gamebryo maintains. This may cause Gamebryo to release the only reference to objects that are on the device, which will cause those objects to be deleted.</p>
<p class="NDLRefMemberDetailedDescription">This function can be called after an application has made calls directly on the D3D11 device to inform Gamebryo that the state objects may have changed. This prevents Gamebryo from incorrectly optimizing out a call to set a state object on the device. </p>

<a name="classecr_1_1_d3_d11_renderer_1a901bdd6b7666c020c1cedb1bd9224948"></a>
<p class="NDLRefMemberFunction">void  RegisterD3D11Shader(<span class="NDLSystemFont"><a href="ecr__D3D11ShaderInterface.htm">D3D11ShaderInterface</a></span>* pD3D11Shader)</p>
<p class="NDLRefMemberDescription">Register an instance of a D3D11 <span class="NDLSystemFont"><a href="../NiMain/NiShader.htm">NiShader</a></span> class with the renderer. </p>
<p class="NDLRefMemberDetailedDescription">Most shader libraries will manage the registration of shaders themselves, but this allows applications to register any of their own shaders not created through a shader library. </p>

<a name="classecr_1_1_d3_d11_renderer_1a0fe132ef9444d45b073db47245e374de"></a>
<p class="NDLRefMemberFunction">void  ReleaseD3D11Shader(<span class="NDLSystemFont"><a href="ecr__D3D11ShaderInterface.htm">D3D11ShaderInterface</a></span>* pD3D11Shader)</p>
<p class="NDLRefMemberDescription">Release an instance of a D3D11 <span class="NDLSystemFont"><a href="../NiMain/NiShader.htm">NiShader</a></span> class with the renderer. </p>

<a name="classecr_1_1_d3_d11_renderer_1a81926593bb0be44e5dda5293c4a425f0"></a>
<p class="NDLRefMemberFunction">void  PurgeD3D11Shader(<span class="NDLSystemFont"><a href="ecr__D3D11ShaderInterface.htm">D3D11ShaderInterface</a></span>* pD3D11Shader)</p>
<p class="NDLRefMemberDescription">Release an instance of a D3D11 <span class="NDLSystemFont"><a href="../NiMain/NiShader.htm">NiShader</a></span> class with the renderer and force it to release its D3D11 resources. </p>

<a name="classecr_1_1_d3_d11_renderer_1a73fbf2fb40a45ed6eda28195de5d37f4"></a>
<p class="NDLRefMemberFunction">void  PurgeAllD3D11Shaders()</p>
<p class="NDLRefMemberDescription">Release and purge all D3D11 <span class="NDLSystemFont"><a href="../NiMain/NiShader.htm">NiShader</a></span> instances currently registered. </p>

<a name="classecr_1_1_d3_d11_renderer_1ab51a1f96b2546062b18addf5c5d65561"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>*  GetVertexShaderProfile() const</p>
<p class="NDLRefMemberDescription">Return a string describing the maximum vertex shader target for this device. </p>

<a name="classecr_1_1_d3_d11_renderer_1aef007b00e7a2bae979041eaee5ddefb9"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>*  GetHullShaderProfile() const</p>
<p class="NDLRefMemberDescription">Return a string describing the maximum hull shader target for this device. </p>

<a name="classecr_1_1_d3_d11_renderer_1aff9cbef9fbf079245074d40374bf51e9"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>*  GetDomainShaderProfile() const</p>
<p class="NDLRefMemberDescription">Return a string describing the maximum domain shader target for this device. </p>

<a name="classecr_1_1_d3_d11_renderer_1a3bbf640f4d58c1198156dfc5d61325df"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>*  GetGeometryShaderProfile() const</p>
<p class="NDLRefMemberDescription">Return a string describing the maximum geometry shader target for this device. </p>

<a name="classecr_1_1_d3_d11_renderer_1a8756ef7271a847fdbde423ce9298721c"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>*  GetPixelShaderProfile() const</p>
<p class="NDLRefMemberDescription">Return a string describing the maximum pixel shader target for this device. </p>

<a name="classecr_1_1_d3_d11_renderer_1a18e7688094c4b22dd9eacc50fbcb6bff"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>*  GetComputeShaderProfile() const</p>
<p class="NDLRefMemberDescription">Return a string describing the maximum compute shader target for this device. </p>

<a name="classecr_1_1_d3_d11_renderer_1ac4041ddcef67441bacf21c137b1ef8b8"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">NiTexturePtr</a></span>  CreateNiTextureFromD3D11Resource(<br/>ID3D11Resource* pD3D11Texture, <br/>ID3D11ShaderResourceView* pResourceView = NULL)</p>
<p class="NDLRefMemberDescription">Create an <span class="NDLSystemFont"><a href="../NiMain/NiTexture.htm">NiTexture</a></span> to manage a D3D11 resource and shader resource view. </p>
<p class="NDLRefMemberDetailedDescription">This allows applications to create any D3D11 shader resource and still let Gamebryo manage and interact with it.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">The <span class="NDLSystemFont"><a href="../NiMain/NiTexture.htm">NiTexture</a></span> will add its own reference to the resource and shader resource view. Applications that call this function will need to release their own references to prevent a resource leak. </p></p>

<a name="classecr_1_1_d3_d11_renderer_1a0265cc64c3604e0d6029a8ce696fee8b"></a>
<p class="NDLRefMemberFunction">const D3D_SHADER_MACRO*  GetD3D11MacroList(<br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pFileType, <br/>const D3D_SHADER_MACRO* pUserMacros = NULL)</p>
<p class="NDLRefMemberDescription">Return pointer to array of D3D_SHADER_MACRO structures. </p>

<a name="classecr_1_1_d3_d11_renderer_1aabfb3179848db08289e9951a2ed57d83"></a>
<p class="NDLRefMemberFunction">virtual void  PushProfileMarker(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pName)</p>
<p class="NDLRefMemberDescription">Begin a profile marker section. </p>

<a name="classecr_1_1_d3_d11_renderer_1a8706aff621e8a8e3306c9e7a8d14ee96"></a>
<p class="NDLRefMemberFunction">virtual void  PopProfileMarker()</p>
<p class="NDLRefMemberDescription">End a profile marker section. </p>

<a name="classecr_1_1_d3_d11_renderer_1a17f3682c9bfe648cedef4794206d1e35"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">efd::Bool</span>  CreateWindowRenderTargetGroup(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a1c90207c9a9f0384d8ad0e75c8b68edf">efd::WindowRef</a></span> wndRef)</p>
<p class="NDLRefMemberDescription">Create a new render target group to act as a swap chain for a window. </p>

<a name="classecr_1_1_d3_d11_renderer_1a4278a0a2a239cd15d01c22dc4b96ac1d"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">efd::Bool</span>  RecreateWindowRenderTargetGroup(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a1c90207c9a9f0384d8ad0e75c8b68edf">efd::WindowRef</a></span> wndRef)</p>
<p class="NDLRefMemberDescription">Recreate the buffers in a render target group to act as a swap chain for a window. </p>

<a name="classecr_1_1_d3_d11_renderer_1a65fd201911e887a1c3bc030f52ee9ae1"></a>
<p class="NDLRefMemberFunction">virtual void  ReleaseWindowRenderTargetGroup(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a1c90207c9a9f0384d8ad0e75c8b68edf">efd::WindowRef</a></span> wndRef)</p>
<p class="NDLRefMemberDescription">Release a swap chain render target group for a window. </p>

<a name="classecr_1_1_d3_d11_renderer_1aa8340a16248aad33a6b3352d0ccc20f4"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../NiMain/NiRenderTargetGroup.htm">NiRenderTargetGroup</a></span>*  GetWindowRenderTargetGroup(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a1c90207c9a9f0384d8ad0e75c8b68edf">efd::WindowRef</a></span> wndRef) const</p>
<p class="NDLRefMemberDescription">Return a previously created swap chain render target group for a window. </p>
<a name="public_static_methods"></a>
<p class="NDLRefHead1">Public Static Methods</p>


<a name="classecr_1_1_d3_d11_renderer_1aed935b1a15af231673821fd421d04e9a"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">efd::Bool</span>  Create(<br/><span class="NDLSystemFont"><a href="ecr__D3D11Renderer__CreationParameters.htm">CreationParameters</a></span>& createParams, <br/><span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">D3D11RendererPtr</a></span>& spRenderer)</p>
<p class="NDLRefMemberDescription">Create a renderer. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">createParams</span></td>
    <td>Parameters to use to create the renderer. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">spRenderer</span></td>
    <td>Outputs the newly-created renderer, if creation succeeds. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the function succeeds, false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_d3_d11_renderer_1a7313018403a5eed3b519b2184f18dae1"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">D3D11Renderer</span>*  GetRenderer()</p>
<p class="NDLRefMemberDescription">Return the renderer, ensuring it is a D3D11 renderer. </p>

<a name="classecr_1_1_d3_d11_renderer_1a04f117201a901dde7f6569bc62ae58f6"></a>
<p class="NDLRefMemberFunction">static HRESULT  D3D11CreateDevice(<br/>__in_opt IDXGIAdapter* pAdapter, <br/>D3D_DRIVER_TYPE DriverType, <br/>HMODULE Software, <br/><span class="NDLSystemFont">UINT</span> Flags, <br/>__in_ecount_opt(FeatureLevels) CONST D3D_FEATURE_LEVEL* pFeatureLevels, <br/><span class="NDLSystemFont">UINT</span> FeatureLevels, <br/><span class="NDLSystemFont">UINT</span> SDKVersion, <br/>__out_opt ID3D11Device ** ppDevice, <br/>__out_opt D3D_FEATURE_LEVEL* pFeatureLevel, <br/>__out_opt ID3D11DeviceContext ** ppImmediateContext)</p>
<p class="NDLRefMemberDescription">Wrapper to D3D11 Library function D3D11CreateDevice. </p>

<a name="classecr_1_1_d3_d11_renderer_1a0031fafcf8cdf366e5428ab8dc2d7428"></a>
<p class="NDLRefMemberFunction">static HRESULT  D3D11CreateDeviceAndSwapChain(<br/>__in_opt IDXGIAdapter* pAdapter, <br/>D3D_DRIVER_TYPE DriverType, <br/>HMODULE Software, <br/><span class="NDLSystemFont">UINT</span> Flags, <br/>__in_ecount_opt(FeatureLevels) CONST D3D_FEATURE_LEVEL* pFeatureLevels, <br/><span class="NDLSystemFont">UINT</span> FeatureLevels, <br/><span class="NDLSystemFont">UINT</span> SDKVersion, <br/>__in_opt CONST DXGI_SWAP_CHAIN_DESC* pSwapChainDesc, <br/>__out_opt IDXGISwapChain ** ppSwapChain, <br/>__out_opt ID3D11Device ** ppDevice, <br/>__out_opt D3D_FEATURE_LEVEL* pFeatureLevel, <br/>__out_opt ID3D11DeviceContext ** ppImmediateContext)</p>
<p class="NDLRefMemberDescription">Wrapper to D3D11 Library function D3D11CreateDeviceAndSwapChain. </p>
<a name="nirenderer_virtual_overrides"></a>
<p class="NDLRefHead1">NiRenderer virtual overrides</p>


<a name="classecr_1_1_d3_d11_renderer_1aea75f6c812c9f257d110216b951fbfbb"></a>
<p class="NDLRefMemberFunction">virtual const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>*  GetDriverInfo() const</p>
<p class="NDLRefMemberDescription">Return a string describing the renderer. </p>

<a name="classecr_1_1_d3_d11_renderer_1a796d94140c33875fd29c753f282eb8b3"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetFlags() const</p>
<p class="NDLRefMemberDescription">Return the renderer capabilities for this renderer. </p>

<a name="classecr_1_1_d3_d11_renderer_1acc8681d513dbe0492ac905952be71b4f"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../efd/efd__SystemDesc.htm#classefd_1_1_system_desc_1a3cbca1b21d64ccdc84fb9bd8679435f9">efd::SystemDesc::RendererID</a></span>  GetRendererID() const</p>
<p class="NDLRefMemberDescription">Return a unique ID for the Renderer. </p>

<a name="classecr_1_1_d3_d11_renderer_1afdc7265eeca1497663e788a1ab585dc5"></a>
<p class="NDLRefMemberFunction">virtual void  SetDepthClear(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> depthClear)</p>
<p class="NDLRefMemberDescription">Set depth buffer clear value. </p>

<a name="classecr_1_1_d3_d11_renderer_1a95a0ccab4d282d632d7f8150fb0f1aed"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  GetDepthClear() const</p>
<p class="NDLRefMemberDescription">Return depth buffer clear value. </p>

<a name="classecr_1_1_d3_d11_renderer_1ac8a87baa992dbed117d009b172e6eba2"></a>
<p class="NDLRefMemberFunction">virtual void  SetBackgroundColor(const <span class="NDLSystemFont"><a href="../NiMain/NiColor.htm">NiColor</a></span>& color)</p>
<p class="NDLRefMemberDescription">Set background clear color. </p>

<a name="classecr_1_1_d3_d11_renderer_1a4bd3593ef1e2d932923cac9ef9fa4031"></a>
<p class="NDLRefMemberFunction">virtual void  SetBackgroundColor(const <span class="NDLSystemFont"><a href="../NiMain/NiColorA.htm">NiColorA</a></span>& color)</p>
<p class="NDLRefMemberDescription">Set background clear color. </p>

<a name="classecr_1_1_d3_d11_renderer_1a522b94913ceed1bc43ee67459134cbd7"></a>
<p class="NDLRefMemberFunction">virtual void  GetBackgroundColor(<span class="NDLSystemFont"><a href="../NiMain/NiColorA.htm">NiColorA</a></span>& color) const</p>
<p class="NDLRefMemberDescription">Return background clear color. </p>

<a name="classecr_1_1_d3_d11_renderer_1a78c290c0ee043e7dd89a8e79037ba837"></a>
<p class="NDLRefMemberFunction">virtual void  SetStencilClear(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> stencilClear)</p>
<p class="NDLRefMemberDescription">Set stencil buffer clear value. </p>

<a name="classecr_1_1_d3_d11_renderer_1ae41727536ff206b6e2dd57cc1270c1f3"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetStencilClear() const</p>
<p class="NDLRefMemberDescription">Return stencil buffer clear value. </p>

<a name="classecr_1_1_d3_d11_renderer_1a7e6ddee0b72a9afcb876c60d40bd665a"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">efd::Bool</span>  ValidateRenderTargetGroup(<span class="NDLSystemFont"><a href="../NiMain/NiRenderTargetGroup.htm">NiRenderTargetGroup</a></span>* pTarget)</p>
<p class="NDLRefMemberDescription">Validate that a render target group can run on the current hardware. </p>

<a name="classecr_1_1_d3_d11_renderer_1a6cf463e1dba2f8c242cf4481f7181631"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">efd::Bool</span>  IsDepthBufferCompatible(<br/><span class="NDLSystemFont"><a href="../NiMain/Ni2DBuffer.htm">Ni2DBuffer</a></span>* pBuffer, <br/><span class="NDLSystemFont"><a href="../NiMain/NiDepthStencilBuffer.htm">NiDepthStencilBuffer</a></span>* pDSBuffer)</p>
<p class="NDLRefMemberDescription">Check whether a render target and depth/stencil buffer can be used together. </p>

<a name="classecr_1_1_d3_d11_renderer_1aeaf7fafc42c32304b7f0fa91cb3e5a6e"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../NiMain/NiRenderTargetGroup.htm">NiRenderTargetGroup</a></span>*  GetDefaultRenderTargetGroup() const</p>
<p class="NDLRefMemberDescription">Return the default render target group. </p>

<a name="classecr_1_1_d3_d11_renderer_1a5fc555c0cb1f8491e6fa79d7cd97681d"></a>
<p class="NDLRefMemberFunction">virtual const <span class="NDLSystemFont"><a href="../NiMain/NiRenderTargetGroup.htm">NiRenderTargetGroup</a></span>*  GetCurrentRenderTargetGroup() const</p>
<p class="NDLRefMemberDescription">Return the currently active render target group. </p>

<a name="classecr_1_1_d3_d11_renderer_1accdb71a6d04475b10de2e4275d011d8b"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../NiMain/NiDepthStencilBuffer.htm">NiDepthStencilBuffer</a></span>*  GetDefaultDepthStencilBuffer() const</p>
<p class="NDLRefMemberDescription">Return the default depth stencil buffer. </p>

<a name="classecr_1_1_d3_d11_renderer_1a67289a777800ac908235d65abd04eeed"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../NiMain/Ni2DBuffer.htm">Ni2DBuffer</a></span>*  GetDefaultBackBuffer() const</p>
<p class="NDLRefMemberDescription">Return the default backbuffer. </p>

<a name="classecr_1_1_d3_d11_renderer_1aeeb3dcadba779a63ff5fd503a2d9805c"></a>
<p class="NDLRefMemberFunction">virtual const <span class="NDLSystemFont"><a href="../NiMain/NiPixelFormat.htm">NiPixelFormat</a></span>*  FindClosestPixelFormat(<span class="NDLSystemFont"><a href="../NiMain/NiTexture__FormatPrefs.htm">NiTexture::FormatPrefs</a></span>& formatPrefs) const</p>
<p class="NDLRefMemberDescription">Return the closest supporetd D3D11-specific pixel format for a given set of format prefs. </p>

<a name="classecr_1_1_d3_d11_renderer_1ac875c72cc74cb0abc2dabcab0ad9216f"></a>
<p class="NDLRefMemberFunction">virtual const <span class="NDLSystemFont"><a href="../NiMain/NiPixelFormat.htm">NiPixelFormat</a></span>*  FindClosestDepthStencilFormat(<br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPixelFormat.htm">NiPixelFormat</a></span>* pFrontBufferFormat, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> depthBPP, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> stencilBPP) const</p>
<p class="NDLRefMemberDescription">Return the closest supported D3D11-specific depth/stencil buffer format that can work with the provided parameters. </p>

<a name="classecr_1_1_d3_d11_renderer_1ab7d5874834e495b44c924e4a8abfa14f"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetMaxBuffersPerRenderTargetGroup() const</p>
<p class="NDLRefMemberDescription">Return maximum number of simultaneous render targets supported. </p>

<a name="classecr_1_1_d3_d11_renderer_1ad81f4c0c3263c57b04d06756f0a3d882"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">efd::Bool</span>  GetIndependentBufferBitDepths() const</p>
<p class="NDLRefMemberDescription">Return whether the concurrent render targets can have independent bit depths. </p>

<a name="classecr_1_1_d3_d11_renderer_1a35646d2358b24b69bb39d0f1d4c7ed0d"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">efd::Bool</span>  PrecacheTexture(<span class="NDLSystemFont"><a href="../NiMain/NiTexture.htm">NiTexture</a></span>* pTexture)</p>
<p class="NDLRefMemberDescription">Upload a texture to the D3D11 device. </p>

<a name="classecr_1_1_d3_d11_renderer_1a004e9555be1f3387e0629febb3b173d8"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">efd::Bool</span>  PrecacheShader(<span class="NDLSystemFont"><a href="../NiMain/NiRenderObject.htm">NiRenderObject</a></span>* pRenderObject)</p>
<p class="NDLRefMemberDescription">Precache the shader for the active material on the provided mesh. </p>

<a name="classecr_1_1_d3_d11_renderer_1a8136e4a15f9edd12b0f7343db3c0dae6"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">efd::Bool</span>  PrecacheMesh(<br/><span class="NDLSystemFont"><a href="../NiMain/NiRenderObject.htm">NiRenderObject</a></span>* pMesh, <br/><span class="NDLSystemFont">efd::Bool</span> releaseSystemMemory = true)</p>
<p class="NDLRefMemberDescription">Upload the NiDataStreams on the mesh to the D3D11 device. </p>

<a name="classecr_1_1_d3_d11_renderer_1af51e46d9e208d5f5eda65e85ec9be708"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">efd::Bool</span>  PerformPrecache()</p>
<p class="NDLRefMemberDescription">Perform the precaches that the renderer has queued up. </p>

<a name="classecr_1_1_d3_d11_renderer_1a1aa940163b9e0d4a474f7124557bad82"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">efd::Bool</span>  SetMipmapSkipLevel(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> skipLevel)</p>
<p class="NDLRefMemberDescription">Set the texture mipmap skip level. </p>

<a name="classecr_1_1_d3_d11_renderer_1ac2b4d35e859d5ed306d1fe2ea0b3dabe"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetMipmapSkipLevel() const</p>
<p class="NDLRefMemberDescription">Return the texture mipmap skip level. </p>

<a name="classecr_1_1_d3_d11_renderer_1a4f57214bd88e2a1d7471d92db87c4baa"></a>
<p class="NDLRefMemberFunction">virtual void  PurgeMaterial(<span class="NDLSystemFont"><a href="../NiMain/NiMaterialProperty.htm">NiMaterialProperty</a></span>* pMaterial)</p>
<p class="NDLRefMemberDescription">Purge cached renderer data for the material, which doesn't exist in D3D11. </p>

<a name="classecr_1_1_d3_d11_renderer_1a43da243408c9b4cd061e1ae1bdbb5b8e"></a>
<p class="NDLRefMemberFunction">virtual void  PurgeEffect(<span class="NDLSystemFont"><a href="../NiMain/NiDynamicEffect.htm">NiDynamicEffect</a></span>* pLight)</p>
<p class="NDLRefMemberDescription">Purge cached renderer data for the material, which doesn't exist in D3D11. </p>

<a name="classecr_1_1_d3_d11_renderer_1abb531d1e8a9fffe9aaa48b3296e191a5"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">efd::Bool</span>  PurgeTexture(<span class="NDLSystemFont"><a href="../NiMain/NiTexture.htm">NiTexture</a></span>* pTexture)</p>
<p class="NDLRefMemberDescription">Release the D3D11 resources for the texture. </p>

<a name="classecr_1_1_d3_d11_renderer_1a09eb7e06b4d67fe04b74668cc4f44f21"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">efd::Bool</span>  PurgeAllTextures(<span class="NDLSystemFont">efd::Bool</span> purgeLocked)</p>
<p class="NDLRefMemberDescription">Release the D3D11 resources for all textures. </p>

<a name="classecr_1_1_d3_d11_renderer_1af01d74480a6f5b39462eac60755e6e2e"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../NiMain/NiPixelData.htm">NiPixelData</a></span>*  TakeScreenShot(<br/>const <span class="NDLSystemFont"><a href="../NiMain/NiRect.htm">NiRect</a></span>&lt;<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>&gt;* pScreenRect, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiRenderTargetGroup.htm">NiRenderTargetGroup</a></span>* pTarget = NULL)</p>
<p class="NDLRefMemberDescription">Take a screen shot and return the contents in an <span class="NDLSystemFont"><a href="../NiMain/NiPixelData.htm">NiPixelData</a></span> object. </p>

<a name="classecr_1_1_d3_d11_renderer_1a5508789ee507575d9beee87c57d11657"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">efd::Bool</span>  SaveScreenShot(<br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pFilename, <br/><span class="NDLSystemFont"><a href="../NiMain/NiRenderer.htm">EScreenshotFormat</a></span> format)</p>
<p class="NDLRefMemberDescription">Take a screen shot and save the contents to file. </p>

<a name="classecr_1_1_d3_d11_renderer_1aaf8012fc38a1b4f3c726b092d47e16b8"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">efd::Bool</span>  FastCopy(<br/>const <span class="NDLSystemFont"><a href="../NiMain/Ni2DBuffer.htm">Ni2DBuffer</a></span>* pSrc, <br/><span class="NDLSystemFont"><a href="../NiMain/Ni2DBuffer.htm">Ni2DBuffer</a></span>* pDest, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiRect.htm">NiRect</a></span>&lt;<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>&gt;* pSrcRect = NULL, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> destX = 0, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> destY = 0)</p>
<p class="NDLRefMemberDescription">Copy an arbitrary region from one 2D buffer to the specified coordinates of a different 2D buffer. </p>
<p class="NDLRefMemberDetailedDescription">Note that the <span class="NDLSystemFont"><a href="../NiMain/NiPixelFormat.htm">NiPixelFormat</a></span> objects of both <span class="NDLSystemFont"><a href="../NiMain/Ni2DBuffer.htm">Ni2DBuffer</a></span> objects must match for this method. This is the fastest path possible for copying pixel data. Also note that a NULL value for the <span class="NDLSystemFont"><a href="../NiMain/NiRect.htm">NiRect</a></span> will use the dimensions of the <span class="NDLSystemFont"><a href="../NiMain/Ni2DBuffer.htm">Ni2DBuffer</a></span>. </p>

<a name="classecr_1_1_d3_d11_renderer_1a520a04055179e466caf1eacc5c23145c"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">efd::Bool</span>  Copy(<br/>const <span class="NDLSystemFont"><a href="../NiMain/Ni2DBuffer.htm">Ni2DBuffer</a></span>* pSrc, <br/><span class="NDLSystemFont"><a href="../NiMain/Ni2DBuffer.htm">Ni2DBuffer</a></span>* pDest, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiRect.htm">NiRect</a></span>&lt;<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>&gt;* pSrcRect, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiRect.htm">NiRect</a></span>&lt;<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>&gt;* pDestRect, <br/><span class="NDLSystemFont"><a href="../NiMain/Ni2DBuffer.htm">Ni2DBuffer::CopyFilterPreference</a></span> filterPref)</p>
<p class="NDLRefMemberDescription">Copy an arbitrary region from one 2D buffer to another arbitrary region in a different 2D buffer. </p>
<p class="NDLRefMemberDetailedDescription">Note that the <span class="NDLSystemFont"><a href="../NiMain/NiPixelFormat.htm">NiPixelFormat</a></span> objects of both <span class="NDLSystemFont"><a href="../NiMain/Ni2DBuffer.htm">Ni2DBuffer</a></span> objects may differ for this method. Also note that a NULL value for either <span class="NDLSystemFont"><a href="../NiMain/NiRect.htm">NiRect</a></span> will use the dimensions of the <span class="NDLSystemFont"><a href="../NiMain/Ni2DBuffer.htm">Ni2DBuffer</a></span>. This path is slower than the previous FastCopy method. </p>

<a name="classecr_1_1_d3_d11_renderer_1adf97be606db74c3e52e63d53d889612e"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../NiMain/NiDepthStencilBuffer.htm">NiDepthStencilBuffer</a></span>*  CreateCompatibleDepthStencilBuffer(<span class="NDLSystemFont"><a href="../NiMain/Ni2DBuffer.htm">Ni2DBuffer</a></span>* pBuffer) const</p>
<p class="NDLRefMemberDescription">Create a depth stencil buffer compatible with the passed-in buffer. </p>

<a name="classecr_1_1_d3_d11_renderer_1a9142e1b5c28e283fb51d423beb55d393"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">efd::Bool</span>  GetLeftRightSwap() const</p>
<p class="NDLRefMemberDescription">Return a flag indicating reversed left-right rendering is enabled. </p>

<a name="classecr_1_1_d3_d11_renderer_1adf47646af47e33e9188b0197e18a9c40"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">efd::Bool</span>  SetLeftRightSwap(<span class="NDLSystemFont">efd::Bool</span> swap)</p>
<p class="NDLRefMemberDescription">Set a flag that reverses left-right rendering. </p>

<a name="classecr_1_1_d3_d11_renderer_1acec6e3cb3e1843b2ddeeecf89288e60c"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  GetMaxFogValue() const</p>
<p class="NDLRefMemberDescription">Return the maximum fog density. </p>

<a name="classecr_1_1_d3_d11_renderer_1ab2709b0e885189df8e24beb2a7f862fd"></a>
<p class="NDLRefMemberFunction">virtual void  SetMaxFogValue(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> fogVal)</p>
<p class="NDLRefMemberDescription">Set the maximum fog density. </p>

<a name="classecr_1_1_d3_d11_renderer_1a84a608398553f64b6466f5620e8a9deb"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  GetMaxFogFactor() const</p>
<p class="NDLRefMemberDescription">Returns the max fog factor, which is the inverse of the max fog value as set by <span class="NDLSystemFont"><a href="../NiMain/NiRenderer.htm">NiRenderer::SetMaxFogValue</a></span>, minus 1. </p>

<a name="classecr_1_1_d3_d11_renderer_1a2bdbcc1da599975048ffa8ef9e94c4d3"></a>
<p class="NDLRefMemberFunction">virtual void  SetMaxAnisotropy(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span> maxAnisotropy)</p>
<p class="NDLRefMemberDescription">Set the maximum anisotropy. </p>

<a name="classecr_1_1_d3_d11_renderer_1a5fb06b78a370c085292e5508465704fb"></a>
<p class="NDLRefMemberFunction">virtual void  UseLegacyPipelineAsDefaultMaterial()</p>
<p class="NDLRefMemberDescription">Use the legacy fixed-function pipeline as the default material - this does nothing on D3D11, since there is no fixed-function pipeline. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
