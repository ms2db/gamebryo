<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Features and Limitations of the D3D11Renderer</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Features and Limitations of the D3D11Renderer</h1>

<p>The following topics describe the features and the limitations
of the D3D11 renderer:</p>

<a name="Alpha_Testing" id="Alpha_Testing"></a><h3>Alpha Testing</h3>

<p>The <span class="NDLSystemFont"><a href=
"ecr__D3D11Renderer.htm">D3D11Renderer</a></span> enables alpha
testing by performing the test in the pixel shader, because D3D11
does not natively support alpha testing. As a result, rendering
objects using alpha testing in D3D11 will not offer the same
performance advantages as on other platforms, and may actually
degrade performance over simple alpha blending.</p>


<a name="Antialiasing" id="Antialiasing"></a><h3>Antialiasing</h3>

<p>The <span class="NDLSystemFont"><a href=
"ecr__D3D11Renderer.htm">D3D11Renderer</a></span> supports
full-screen antialiasing via multisampled backbuffers. Specify a
valid multisample count and quality when creating the swap
buffer.</p>

<a name="Clipped_Projected_Textures" id="Clipped_Projected_Textures"></a><h3>Clipped Projected Textures</h3>

<p>The <span class="NDLSystemFont"><a href=
"ecr__D3D11Renderer.htm">D3D11Renderer</a></span> supports clipped
projected lights and shadows via the <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMain/NiStandardMaterial.htm">NiStandardMaterial</a></span>
pipeline. Please see the <a href=
"../../Programmer/Texturing/Introduction_to_Texturing.htm">Texturing</a>
documentation for details of this feature.</p>

<a name="Dynamic_and_Static_Geometry" id="Dynamic_and_Static_Geometry"></a><h3>Dynamic and Static Geometry</h3>

<p>The <span class="NDLSystemFont"><a href=
"ecr__D3D11Renderer.htm">D3D11Renderer</a></span> stores its
vertex data streams as D3D11 vertex buffers. Whenever the data
stream is modified, the vertex buffer for that object must be
uploaded to the video card. As a result, geometry that is not
morphed will be faster than geometry that is morphed each
frame.</p>

<a name="Hardware_Skinning" id="Hardware_Skinning"></a><h3>Hardware Skinning</h3>

<p>The <span class="NDLSystemFont"><a href=
"ecr__D3D11Renderer.htm">D3D11Renderer</a></span> supports
hardware-based skinning of 30 bones (matrices) per object
partition via the <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiStandardMaterial.htm">NiStandardMaterial</a></span>
pipeline. Skinned objects are partitioned by the artist tools
when they are exported with support for hardware skinning
enabled.</p>

<a name="Left_Right_Swapping" id="Left_Right_Swapping"></a><h3>Left-Right Swapping</h3>

<p>The <span class="NDLSystemFont"><a href=
"ecr__D3D11Renderer.htm">D3D11Renderer</a></span> supports the
ability to enable left-right viewport swapping for rear-view
mirrors, cube map face rendering, and other effects.</p>

<a name="Legacy_Rendering_Pipeline" id="Legacy_Rendering_Pipeline"></a><h3>Legacy Rendering Pipeline</h3>

<p>The <span class="NDLSystemFont"><a href=
"ecr__D3D11Renderer.htm">D3D11Renderer</a></span> does not support
Gamebryo's <a href=
"../../Programmer/NiMaterial/Gamebryo_Legacy_Pipeline.htm">legacy
rendering pipeline</a>.</p>

<a name="Multitexturing_Limitations" id="Multitexturing_Limitations"></a><h3>Multitexturing Limitations</h3>

<p>The <span class="NDLSystemFont"><a href=
"ecr__D3D11Renderer.htm">D3D11Renderer</a></span> supports 8
texture coordinate sets per vertex. Any additional texture
coordinate sets will be ignored.</p>

<a name="Using_D3D11_Resources_with_Gamebryo" id="Using_D3D11_Resources_with_Gamebryo"></a><h3>Using D3D11 Resources with Gamebryo</h3>

<p>Gamebryo allows applications to provide their own D3D11
resources and resource views to Gamebryo and let the engine wrap the resources in
<span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiTexture.htm">NiTexture</a></span>
objects that allow the textures to be used on Gamebryo objects.
They can do this using the function <span class=
"NDLSystemFont"><a href=
"ecr__D3D11Renderer.htm">ecr::D3D11Renderer</a></span><span class=
"NDLSystemFont">::CreateNiTextureFromD3D11Resource</span>, which
takes an <span class="NDLSystemFont">ID3D11Resource*</span> that
contains the resource and an <span class=
"NDLSystemFont">ID3D11ShaderResourceView*</span> that contains
the resource view. The function returns an <span class=
"NDLSystemFont">NiTexturePtr</span> which can be attached to
<span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiTexturingProperty.htm">NiTexturingProperty</a></span>
objects and <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiTextureEffect.htm">NiTextureEffect</a></span>
objects, for use with an <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiShader.htm">NiShader</a></span>.</p>

<p>By providing their own D3D11 textures, applications can make
use of any texture that the hardware supports, even if Gamebryo
does not support it natively. Note that like <a href=
"../../Reference/NiMain/NiRenderedTexture.htm"><span class=
"NDLSystemFont">NiRenderedTexture</span></a> objects, any
<span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiTexture.htm">NiTexture</a></span>
objects created using this mechanism will not be correctly
streamed.</p>

<a name="Using_D3D11_Textures_as_Render_Targets_with_Gamebryo" id="Using_D3D11_Textures_as_Render_Targets_with_Gamebryo"></a><h3>Using D3D11 Textures as Render Targets with Gamebryo</h3>

<p>Gamebryo allows applications to provide their own D3D11
textures to Gamebryo and let the engine wrap the textures in
<span class="NDLSystemFont"><a href=
"../../Reference/NiMain/Ni2DBuffer.htm">Ni2DBuffer</a>::RendererData</span>
objects that allow the textures to be used as render targets.
They can do this by calling <span class="NDLSystemFont"><a href=
"ecr__D3D11RenderTargetBufferData.htm">ecr::D3D11RenderTargetBufferData</a>::Create</span>,
which takes an <span class=
"NDLSystemFont">ID3D11Texture2D*</span> that contains the
texture, a <span class=
"NDLSystemFont">D3D11_RENDER_TARGET_VIEW_DESC*</span> that
describes how to create the render target view, and an
<span class="NDLSystemFont">Ni2DBuffer*</span> to hold the
resulting renderer data object. The <span class=
"NDLSystemFont">Ni2DBuffer</span> can then be attached to
<span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiRenderTargetGroup.htm">NiRenderTargetGroup</a></span>
objects so it can be rendered to by Gamebryo.</p>

<p>By providing their own D3D11 textures, applications can make
use of any texture as that render target group the hardware
supports, even if Gamebryo does not support it natively.</p>

<p>In a similar mechanism, applications can call <span class=
"NDLSystemFont"><a href=
"ecr__D3D11DepthStencilBufferData.htm">ecr::D3D11DepthStencilBufferData</a>::Create</span>
to use a D3D11 texture as a depth/stencil buffer, or <span class=
"NDLSystemFont"><a href=
"ecr__D3D11SwapChainBufferData.htm">ecr::D3D11SwapChainBufferData</a>::Create</span>
to use an entire <span class=
"NDLSystemFont">IDXGISwapChain</span>.</p>

<a name="Using_D3D11_Resources_as_UnorderedAccessViews_with_Gamebryo" id="Using_D3D11_Resources_as_UnorderedAccessViews_with_Gamebryo"></a><h3>Using D3D11 Textures as UnorderedAccessViews with Gamebryo</h3>

<p>Gamebryo allows applications to provide resources to act as unordered access views
in a compute shader.
They can do this by creating an <span class="NDLSystemFont"><a href=
"ecr__UnorderedAccessResource.htm">ecr::UnorderedAccessResource</a></span>,
and calling <span class="NDLSystemFont">SetResourceAsNiDataStream</span> on it
to set an <span class="NDLSystemFont">NiDataStream</span> as the resource, or
<span class="NDLSystemFont">SetResourceAsNiTexture</span> on it
to set an <span class="NDLSystemFont">NiTexture</span>. Alternatively, applications 
can provide their own D3D11 resources to Gamebryo to act as unordered access views
by calling <span class="NDLSystemFont">SetResourceAsD3D11Resource</span> on the 
<span class="NDLSystemFont"><a href=
"ecr__UnorderedAccessResource.htm">ecr::UnorderedAccessResource</a></span> and provide
an <span class="NDLSystemFont">ID3D11Resource*</span> and an optional <span class=
"NDLSystemFont">ID3D11UnorderedAccessView*</span>. Gamebryo will create its own default
<span class="NDLSystemFont">ID3D11UnorderedAccessView</span> if the application does not
provide one.

<a name="Vertex_Fogging" id="Vertex_Fogging"></a><h3>Vertex Fogging</h3>

<p>The <span class="NDLSystemFont"><a href=
"ecr__D3D11Renderer.htm">D3D11Renderer</a></span> supports the
ability to set the maximum fog value to a value other than full
fog. This is accomplished via the <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMain/NiRenderer.htm#Global_Fog_Settings_Functions">
NiRenderer</a>::SetMaxFogValue</span> function.</p>

<h3>Texture-related Features and Limitations</h3>

<p>These items are addressed <a href=
"Texture-Related_Features_and_Limitations_of_the_D3D11_Renderer.htm">
separately</a>.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
