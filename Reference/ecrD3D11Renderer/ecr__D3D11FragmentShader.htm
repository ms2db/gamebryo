<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>ecr::D3D11FragmentShader</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">ecr::D3D11FragmentShader</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="ecr__D3D11ShaderCore.htm">ecr::D3D11ShaderCore</a></span></p>


<p class="NDLRefHeaderFile">&lt;D3D11FragmentShader.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classecr_1_1_d3_d11_fragment_shader.gif" alt="Inheritance graph for ecr::D3D11FragmentShader"/>
  <p class="FigureCaption">Inheritance graph for ecr::D3D11FragmentShader</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal"><span class="NDLSystemFont">ecr::D3D11FragmentShader</span> is a special shader class that NiFragmentMaterial-derived classes, including <span class="NDLSystemFont"><a href="../NiMain/NiStandardMaterial.htm">NiStandardMaterial</a></span>, create in order to provide shaders with custom-built pixel and vertex shaders. </p>

<a name="construction_and_destruction"></a>
<p class="NDLRefHead1">Construction and Destruction</p>


<a name="classecr_1_1_d3_d11_fragment_shader_1a3bc65c2988e2529a37e0aaaf0fe293a5"></a>
<p class="NDLRefMemberFunction">D3D11FragmentShader(<span class="NDLSystemFont"><a href="../NiMain/NiMaterialDescriptor.htm">NiMaterialDescriptor</a></span>* pDesc)</p>
<p class="NDLRefMemberDescription">Constructor. </p>
<p class="NDLRefMemberDetailedDescription">Creates a new <span class="NDLSystemFont">D3D11FragmentShader</span> instance that will be built from the given <span class="NDLSystemFont"><a href="../NiMain/NiMaterialDescriptor.htm">NiMaterialDescriptor</a></span>. The constructor will not actually analyze the material descriptor at all, but it will save it so that the material will know which material descriptor was used to construct the shader. </p>

<a name="classecr_1_1_d3_d11_fragment_shader_1af73d2764bd3c07c11aeef13eb46273c5"></a>
<p class="NDLRefMemberFunction">virtual ~D3D11FragmentShader()</p>
<p class="NDLRefMemberDescription">Destructor. </p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classecr_1_1_d3_d11_fragment_shader_1a57fff4088d9b2d199f246c65ef8b5ac1"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">efd::Bool</span>  Initialize()</p>
<p class="NDLRefMemberDescription">Initializes the shader and indicates that all bone matrices will be transposed, 3-row world space matrices. </p>

<a name="classecr_1_1_d3_d11_fragment_shader_1a199addd742a700d1da652f448cd64403"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  UpdatePipeline(const <span class="NDLSystemFont"><a href="../NiMain/NiRenderCallContext.htm">NiRenderCallContext</a></span>& callContext)</p>
<p class="NDLRefMemberDescription">Prepares the shader resources from textures found in <span class="NDLSystemFont"><a href="../NiMain/NiTexturingProperty.htm">NiTexturingProperty</a></span>. </p>

<a name="classecr_1_1_d3_d11_fragment_shader_1ac8e0f67cda33b310986d4ea880179d64"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">efd::Bool</span>  IsGenericallyConfigurable()</p>
<p class="NDLRefMemberDescription">Returns true, indicating this class can be configured by an <span class="NDLSystemFont"><a href="../NiMain/NiFragmentMaterial.htm">NiFragmentMaterial</a></span>. </p>

<a name="classecr_1_1_d3_d11_fragment_shader_1aa18d7128302d970556de25947c40a460"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">efd::Bool</span>  AppendRenderPass(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>& passID)</p>
<p class="NDLRefMemberDescription">Add an additional render pass to the shader. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">passID</span></td>
    <td>Outputs the position of the new pass in the shader. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the function succeeds, false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_d3_d11_fragment_shader_1a9abcc6effc7d3fcc9c2b850ba5a562af"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">efd::Bool</span>  SetAlphaOverride(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> passID, <br/><span class="NDLSystemFont">efd::Bool</span> alphaBlend, <br/><span class="NDLSystemFont">efd::Bool</span> usePreviousSrcBlendMode, <br/><span class="NDLSystemFont"><a href="../NiMain/NiAlphaProperty.htm">NiAlphaProperty::AlphaFunction</a></span> srcBlendMode, <br/><span class="NDLSystemFont">efd::Bool</span> usePreviousDestBlendMode, <br/><span class="NDLSystemFont"><a href="../NiMain/NiAlphaProperty.htm">NiAlphaProperty::AlphaFunction</a></span> destBlendMode)</p>
<p class="NDLRefMemberDescription">Overrides the alpha blending mode of a pass. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">passID</span></td>
    <td>The ID of the pass to affect. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">alphaBlend</span></td>
    <td>Whether alpha blending should be enabled. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">usePreviousSrcBlendMode</span></td>
    <td>Indicates whether the pass should inherit the source blend mode from the previous pass. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">srcBlendMode</span></td>
    <td>The new source blend mode to use, if usePreviousSrcBlendMode is false. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">usePreviousDestBlendMode</span></td>
    <td>Indicates whether the pass should inherit the dest blend mode from the previous pass. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">destBlendMode</span></td>
    <td>The new dest blend mode to use, if usePreviousDestBlendMode is false. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the function succeeds, false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_d3_d11_fragment_shader_1acca786bbcb1f53d14ddfbf078c8ea7dc"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">efd::Bool</span>  SetGPUProgram(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> passID, <br/><span class="NDLSystemFont"><a href="../NiMain/NiGPUProgram.htm">NiGPUProgram</a></span>* pProgram, <br/><span class="NDLSystemFont"><a href="../NiMain/NiGPUProgram.htm">NiGPUProgram::ProgramType</a></span>& shaderType)</p>
<p class="NDLRefMemberDescription">Sets the specified <span class="NDLSystemFont"><a href="../NiMain/NiGPUProgram.htm">NiGPUProgram</a></span> on a pass. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">passID</span></td>
    <td>The ID of the pass to affect. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pProgram</span></td>
    <td>The <span class="NDLSystemFont"><a href="../NiMain/NiGPUProgram.htm">NiGPUProgram</a></span> to set </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">shaderType</span></td>
    <td>Outputs the <span class="NDLSystemFont"><a href="../NiMain/NiGPUProgram.htm">NiGPUProgram::ProgramType</a></span> for pProgram. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the function succeeds, false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_d3_d11_fragment_shader_1a0f481da7438b804b90556b0ee91759a0"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../NiMain/NiShaderConstantMap.htm">NiShaderConstantMap</a></span>*  CreateShaderConstantMap(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> passID, <br/><span class="NDLSystemFont"><a href="../NiMain/NiGPUProgram.htm">NiGPUProgram::ProgramType</a></span> shaderType, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> mapIndex = 0)</p>
<p class="NDLRefMemberDescription">Creates a new <span class="NDLSystemFont"><a href="../NiMain/NiShaderConstantMap.htm">NiShaderConstantMap</a></span> for a pass. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">passID</span></td>
    <td>The ID of the pass to affect. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">shaderType</span></td>
    <td>Type of shader program that the new shader constant map will be used for. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">mapIndex</span></td>
    <td>Unused. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The newly created <span class="NDLSystemFont"><a href="../NiMain/NiShaderConstantMap.htm">NiShaderConstantMap</a></span>, or NULL on failure. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_d3_d11_fragment_shader_1ae587d59475387c95301acaf3a6bd8e24"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">efd::Bool</span>  AppendTextureSampler(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> passID, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>& samplerID, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>& semantic, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiFixedString.htm">NiFixedString</a></span>& variableName, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> instance = 0)</p>
<p class="NDLRefMemberDescription">Adds a texture sampler to a pass. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">passID</span></td>
    <td>The ID of the pass to affect. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">samplerID</span></td>
    <td>Unused. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">semantic</span></td>
    <td>Indicates which map from <span class="NDLSystemFont"><a href="../NiMain/NiTexturingProperty.htm">NiTexturingProperty</a></span> to use. Valid values include the standard maps from that class, such as "Base", "Dark", and "Normal". </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">variableName</span></td>
    <td>Identifies the name of the sampler and texture variables that will make use of this texture. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">instance</span></td>
    <td>For "Shader" and "Decal" maps, this indicates which map of that type to use. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the function succeeds, false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_d3_d11_fragment_shader_1ae70799692714878419bdde14f8f72f3b"></a>
<p class="NDLRefMemberFunction">virtual const <span class="NDLSystemFont"><a href="../NiMain/NiShader__NiShaderInstanceDescriptor.htm">NiShader::NiShaderInstanceDescriptor</a></span>*  GetShaderInstanceDesc() const</p>
<p class="NDLRefMemberDescription">Returns the <span class="NDLSystemFont"><a href="../NiMain/NiMaterialDescriptor.htm">NiMaterialDescriptor</a></span> that was used to construct the shader. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
