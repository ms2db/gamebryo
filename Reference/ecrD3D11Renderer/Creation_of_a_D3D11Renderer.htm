<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Creation of a D3D11Renderer</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Creation of a D3D11Renderer</h1>

<p>Construction of an <span class=
"NDLSystemFont">ecr::D3D11Renderer</span> is accomplished using an
initialization structure, <span class=
"NDLSystemFont"><a href="ecr__D3D11Renderer__CreationParameters.htm">ecr::D3D11Renderer::CreateParameters</a></span>. The
structure is designed to be initialized with appropriate default
values, so creating a new <span class=
"NDLSystemFont">D3D11Renderer</span> object can be as simple as
possible:</p>
<pre>
ecr::D3D11Renderer::CreateParameters kCreate;
ecr::D3D11RendererPtr spD3D11Renderer;
bool bSuccess = ecr::D3D11Renderer::Create(kCreate, spD3D11Renderer);
</pre>

<p>This will construct a renderer using the default arguments,
described below. A D3D11 device will be created, but without a
default swap chain.</p>

<p>Most applications will want to create a renderer with a swap
chain to draw to a specific window. To set up the <span class=
"NDLSystemFont">ecr::D3D11Renderer::CreateParameters</span>
structure to handle this situation, an application can pass the
window handle into the <span class=
"NDLSystemFont">CreateParameters</span> constructor:</p>
<pre>

ecr::D3D11Renderer::CreateParameters kCreate(hTargetWnd);
ecr::D3D11RendererPtr spD3D11Renderer;
bool bSuccess = ecr::D3D11Renderer::Create(kCreate, spD3D11Renderer);
</pre>

<p>This will construct a renderer containing a D3D11 device and
default swap chain that will render to the provided window. The
application will start in windowed mode, and will be set up to
accept messages from that window. The remaining arguments will be
the defaults, as described below.</p>

<h2>Advanced D3D11Renderer Construction</h2>

<p>After creating an <span class=
"NDLSystemFont">ecr::D3D11Renderer::CreateParameters</span> object,
an application can alter the values in the object before calling
<span class="NDLSystemFont">ecr::D3D11Renderer::Create</span> in
order to have more control over the construction of the renderer,
the D3D11 device, and the default swap chain. Refer to the documentation on <span class=
"NDLSystemFont"><a href="ecr__D3D11Renderer__CreationParameters.htm">ecr::D3D11Renderer::CreateParameters</a></span>
for more information.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
