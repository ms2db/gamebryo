<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Multiple D3D11 Rendering Windows</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<h1>Multiple D3D11 Rendering Windows</h1>

<p>A <span class="NDLSystemFont">D3D11Renderer</span> 
 can render to multiple windows each frame  each window may use an independent 
 camera and scene. To render to a secondary window, use the creation call 
 <span class="NDLSystemFont">CreateSwapChainRenderTargetGroup</span>. This 
 function takes as parameters a subset of the variables in the <span class="NDLSystemFont">CreationParameters</span> 
 structure. The <span class="NDLSystemFont">OutputWindow</span> member of 
 the <span class="NDLSystemFont">swapChainDesc</span> argument should hold 
 the handle of the target window.</p>

<p>Although all D3D11 hardware can support rendering to 
 multiple windows, applications should be prepared for this function to 
 fail. Even though there is no fixed limit on the number of framebuffers 
 that a given renderer can support, other resources are not infinite  
 for example, creating numerous large rendering windows can exhaust the 
 VRAM on the hardware card. This is a less common situation in D3D11 than 
 it has been in the past, but it is still a possibility. If the windowed 
 framebuffer cannot be created, <span class="NDLSystemFont">CreateSwapChainRenderTargetGroup</span> 
 will return false. </p>

<p>To render to the new window's framebuffer, simply call 
 <span class="NDLSystemFont">BeginUsingRenderTargetGroup</span> with the 
 <a href="../../Reference/NiMain/NiRenderTargetGroup.htm"><span 
 class="NDLSystemFont">NiRenderTargetGroup</span></a> corresponding to the 
 desired window prior to rendering any objects. Applications can get the 
 correct <span class="NDLSystemFont">NiRenderTargetGroup</span> by calling 
 <span class="NDLSystemFont">GetSwapChainRenderTargetGroup</span> with the 
 desired window's <span class="NDLSystemFont">HWND</span>. The application 
 doesn't need to handle drawing to a separate window any differently than 
 drawing to a rendered texture. During <span class="NDLSystemFont">SwapBuffers</span>, 
 the fact that the new framebuffer also needs to be updated will be handled 
 automatically by the renderer.</p>

<p>To close a windowed framebuffer, call <span class="NDLSystemFont">DestroySwapChainRenderTargetGroup</span> 
 with the <span class="NDLSystemFont">HWND</span> of the desired framebuffer. 
 Applications should never attempt to destroy a framebuffer that they are 
 currently rendering to.</p>

<p>To resize a windowed framebuffer, the <span class="NDLSystemFont">ResizeBuffers</span> 
 function can be used. Most commonly, this call would be made in a <span 
 class="NDLSystemFont">WM_SIZE</span> message handler.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
