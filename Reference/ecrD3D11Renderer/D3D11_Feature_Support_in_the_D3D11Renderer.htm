<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>D3D11 Feature Support in the D3D11Renderer</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>D3D11 Feature Support in the D3D11Renderer</h1>

<p>The following topics describe the level of support for D3D11
features in the D3D11 renderer:</p>

<h3>Feature Levels</h3>

<p>The <span class="NDLSystemFont"><a href=
"ecr__D3D11Renderer.htm">D3D11Renderer</a></span> supports selecting
the desired feature level, and will run on all existing feature levels.</p>

<h3>Parallel Rendering</h3>

<p>The <span class="NDLSystemFont"><a href=
"ecr__D3D11Renderer.htm">D3D11Renderer</a></span> does not support parallel rendering
using multiple device contexts. Background creation of resources is supported, however.</p>

<h3>Dynamic Linking in HLSL 5.0</h3>

<p>The <span class="NDLSystemFont"><a href=
"ecr__D3D11Renderer.htm">D3D11Renderer</a></span> does not support dynamic linking
of shaders using HLSL 5.0.</p>

<h3>WARP device</h3>

<p>The <span class="NDLSystemFont"><a href=
"ecr__D3D11Renderer.htm">D3D11Renderer</a></span> does not support the WARP device.</p>


<h3>Geometry Shaders</h3>

<p>The <span class="NDLSystemFont"><a href=
"ecr__D3D11Renderer.htm">D3D11Renderer</a></span> supports
geometry shaders.</p>

<h3>Stream Output</h3>

<p>The <span class="NDLSystemFont"><a href=
"ecr__D3D11Renderer.htm">D3D11Renderer</a></span> supports
streaming data out of the Stream-Output Stage. This is discussed
in greater detail <a href=
"Stream_Out_in_the_D3D11Renderer.htm">here</a>.</p>

<h3>Hull and Domain Shaders</h3>

<p>The <span class="NDLSystemFont"><a href=
"ecr__D3D11Renderer.htm">D3D11Renderer</a></span> supports
hull and domain shaders. However, only triangle patches are
currently supported as patch types.</p>

<h3>Compute Shaders</h3>

<p>The <span class="NDLSystemFont"><a href=
"ecr__D3D11Renderer.htm">D3D11Renderer</a></span> supports
compute shaders. Note that compute shaders cannot be in a single
<span class="NDLSystemFont">NiShader</span> with shader programs 
of any other type in any of the passes.</p>

<h3>Constant Buffers</h3>

<p>The <span class="NDLSystemFont"><a href=
"ecr__D3D11Renderer.htm">D3D11Renderer</a></span> supports 
multiple constant buffers for each shader program. Each constant buffer
is managed by a single <span class="NDLSystemFont"><a href=
"ecr__D3D11ShaderConstantMap.htm">D3D11ShaderConstantMap</a></span>
object; it is not possible to have a single <span class=
"NDLSystemFont"><a href=
"ecr__D3D11ShaderConstantMap.htm">D3D11ShaderConstantMap</a></span>
set values in multiple shader constant buffers, or to have
multiple <a href="ecr__D3D11ShaderConstantMap.htm"><span class=
"NDLSystemFont">D3D11ShaderConstantMap</span></a> objects
affecting the same shader constant buffer.</p>

<h3>Texture Buffers</h3>

<p>The <span class="NDLSystemFont"><a href=
"ecr__D3D11Renderer.htm">D3D11Renderer</a></span> does not support
texture buffers.</p>

<h3>Unordered Access Views</h3>

<p>The <span class="NDLSystemFont"><a href=
"ecr__D3D11Renderer.htm">D3D11Renderer</a></span> does support
unordered access views for compute shaders through <span class=
"NDLSystemFont"><a href=
"ecr__UnorderedAccessResource.htm">UnorderedAccessResource</a></span> and <span class=
"NDLSystemFont"><a href="ecr__UAVSlot.htm">UAVSlot</a></span>. The renderer
does not support unordered access views for pixel shaders, though.</p>

<h3>FX Shaders</h3>

<p>The <span class="NDLSystemFont"><a href=
"ecr__D3D11Renderer.htm">D3D11Renderer</a></span> supports loading
FX shaders though the <span class=
"NDLSystemFont">ID3DX11Effect</span> system. However, it is
necessary to differentiate FX files that are loaded through the
D3DX9 <span class="NDLSystemFont">ID3DXEffect</span> system from
those files that will be loaded through the D3D11 <span class=
"NDLSystemFont">ID3DX11Effect</span> system. Gamebryo does this by
default by requiring D3D11 FX shaders to use the extension
".fx11" rather than simply ".fx".</p>

<h3>Adjacency Data in Index Buffers</h3>

<p>The <span class="NDLSystemFont"><a href=
"ecr__D3D11Renderer.htm">D3D11Renderer</a></span> does not support
creating or using adjacency data in index buffers.</p>

<h3>Patch Data in Index Buffers</h3>

<p>The <span class="NDLSystemFont"><a href=
"ecr__D3D11Renderer.htm">D3D11Renderer</a></span> does not support
creating or using patch data indicating the number of control points in a patch
in index buffers.</p>

<h3>Shader Program Formats</h3>

<p>The <span class="NDLSystemFont"><a href=
"ecr__D3D11Renderer.htm">D3D11Renderer</a></span> supports loading
compiled or text HLSL shader programs. Note that D3D11 does not support 
shader programs
written in assembly language.</p>

<p>When needed, the <span class="NDLSystemFont"><a href=
"ecr__D3D11Renderer.htm">D3D11Renderer</a></span> will set the
appropriate flags so it can compile HLSL shader programs to
shader models earlier than shader model 4.0 (using the 
"ps_4_0_level_9_*" and "vs_4_0_level_9_*" shader targets). However, even with
those compatibility flags, D3D11 does not support pixel shader
models earlier than ps_2_0. It is also necessary for all pixel
shaders compiled under D3D11 to have the exact same input
parameters that were output from the associated vertex shader,
including the Position output from the vertex shader. This is
true even though the pixel shader cannot actually make use of
that parameter in pixel shader models earlier than ps_3_0.</p>

<h3>Multiple Render Targets</h3>

<p>The <span class="NDLSystemFont"><a href=
"ecr__D3D11Renderer.htm">D3D11Renderer</a></span> supports as many
as 8 simultaneous render targets or as few as 1, depending on the 
feature level. The D3D11 cannot set the viewports independently for each.</p>

<h3>Presentation Intervals</h3>

<p>The <span class="NDLSystemFont"><a href=
"ecr__D3D11Renderer.htm">D3D11Renderer</a></span> allows the
application to specify the presentation interval passed into
<span class="NDLSystemFont">IDXGISwapChain::Present</span>
through the <span class=
"NDLSystemFont">D3D11Renderer::SetSyncInterval</span> function.
This can be used to reduce tearing.</p>

<h3>D3D11 API Layers</h3>

<p>The <span class="NDLSystemFont"><a href=
"ecr__D3D11Renderer.htm">D3D11Renderer</a></span> supports the
creation of the various API layers, such as the Debug Layer and
Switch-To-Reference Layer, through the device creation flags in
the <span class=
"NDLSystemFont">D3D11Renderer::CreationParameters</span>
structure. Refer to <a href=
"Creation_of_a_D3D11Renderer.htm">Creation of a D3D11Renderer</a>
for more details on these flags.</p>

<p>The Switch-To-Reference layer is incompatible with MSAA, so
Gamebryo will ignore requests to enable the Switch-To-Reference
layer when MSAA is requested.</p>

<h3>D3D11 Libraries</h3>

<p>The <span class="NDLSystemFont"><a href=
"ecr__D3D11Renderer.htm">D3D11Renderer</a></span> will load the
DXGI and D3D11 libraries through calls to <span class=
"NDLSystemFont">LoadLibrary</span>. The release versions of these
libraries will always be loaded. If the debug version is
required, this can be enabled in the DirectX Control Panel, or by
passing in the <span class=
"NDLSystemFont">D3D11_CREATE_DEVICE_DEBUG</span> flag in the
<span class="NDLSystemFont">m_uiCreateFlags</span> portion of the
<span class=
"NDLSystemFont">D3D11Renderer::CreationParameters</span>
structure. Refer to <a href=
"Creation_of_a_D3D11Renderer.htm">Creation of a D3D11Renderer</a>
for more details on these flags.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
