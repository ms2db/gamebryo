<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>ecr::D3D11ShaderCore</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">ecr::D3D11ShaderCore</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="ecr__D3D11ShaderInterface.htm">ecr::D3D11ShaderInterface</a></span></p>


<p class="NDLRefHeaderFile">&lt;D3D11ShaderCore.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classecr_1_1_d3_d11_shader_core.gif" alt="Inheritance graph for ecr::D3D11ShaderCore"/>
  <p class="FigureCaption">Inheritance graph for ecr::D3D11ShaderCore</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal"><span class="NDLSystemFont">D3D11ShaderCore</span> derives from <span class="NDLSystemFont"><a href="ecr__D3D11ShaderInterface.htm">D3D11ShaderInterface</a></span> and adds some commonly-used functionality. </p>
<p class="NDLNormal"><span class="NDLSystemFont">D3D11ShaderCore</span> introduces pass-based rendering, 'global' render state settings, and unordered access view resources. </p>

<a name="construction_and_destruction"></a>
<p class="NDLRefHead1">Construction and Destruction</p>


<a name="classecr_1_1_d3_d11_shader_core_1aa43a5354ec50fbde10d5ea20f7442ae9"></a>
<p class="NDLRefMemberFunction">D3D11ShaderCore()</p>
<p class="NDLRefMemberDescription">Constructs an empty, uninitialized shader object. </p>

<a name="classecr_1_1_d3_d11_shader_core_1a0fff8734a6a8be35fdd1c801e4a904ee"></a>
<p class="NDLRefMemberFunction">virtual ~D3D11ShaderCore()</p>
<p class="NDLRefMemberDescription">Destructor. </p>
<a name="public_static_methods"></a>
<p class="NDLRefHead1">Public Static Methods</p>


<a name="classecr_1_1_d3_d11_shader_core_1a2d29a9c126067a81ba6d851fff8a782c"></a>
<p class="NDLRefMemberFunction">static void  SetupSCMExtraData(<br/><span class="NDLSystemFont">D3D11ShaderCore</span>* pShader, <br/><span class="NDLSystemFont"><a href="../NiMain/NiRenderObject.htm">NiRenderObject</a></span>* pGeometry)</p>
<p class="NDLRefMemberDescription">Cache extra data pointers that the shader constant maps will use. </p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classecr_1_1_d3_d11_shader_core_1ae941bc70f82bfb8842d766d18c269666"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">efd::Bool</span>  IsInitialized()</p>
<p class="NDLRefMemberDescription">Returns whether or not the shader has been initialized. </p>

<a name="classecr_1_1_d3_d11_shader_core_1ac22568e43d10b4bc9d4520af3bb27a8d"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">efd::Bool</span>  Initialize()</p>
<p class="NDLRefMemberDescription">Performs initialization, including calling ExposeShaderParameters on each pass. </p>

<a name="classecr_1_1_d3_d11_shader_core_1a7384b46fd14386ae5e05d6e87cffe43b"></a>
<p class="NDLRefMemberFunction">virtual void  InvokeShader()</p>
<p class="NDLRefMemberDescription">Method for calling a shader that only contains compute shader programs. </p>

<a name="classecr_1_1_d3_d11_shader_core_1afe74816571322e5bb255c7b7af6de408"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  PreProcessPipeline(const <span class="NDLSystemFont"><a href="../NiMain/NiRenderCallContext.htm">NiRenderCallContext</a></span>& callContext)</p>
<p class="NDLRefMemberDescription">Updates the render state manager with all properties in the active <span class="NDLSystemFont"><a href="../NiMain/NiPropertyState.htm">NiPropertyState</a></span>, as well as the shader's render state group. </p>

<a name="classecr_1_1_d3_d11_shader_core_1a8ea8d8a136a42c9eb8b19c779d86457a"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  FirstPass()</p>
<p class="NDLRefMemberDescription">Set the shader's current pass ID to the first pass in the shader's pass array. </p>

<a name="classecr_1_1_d3_d11_shader_core_1a011167401782fc6c00fba01cc41ccfc2"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  SetupRenderingPass(const <span class="NDLSystemFont"><a href="../NiMain/NiRenderCallContext.htm">NiRenderCallContext</a></span>& callContext)</p>
<p class="NDLRefMemberDescription">Set up the stream output settings, if necessary, and calls SetupRenderingPass on the currently active pass. </p>

<a name="classecr_1_1_d3_d11_shader_core_1a26feb2acc5e26592cb1fb80140a071d4"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  SetupTransformations(const <span class="NDLSystemFont"><a href="../NiMain/NiRenderCallContext.htm">NiRenderCallContext</a></span>& callContext)</p>
<p class="NDLRefMemberDescription">Set the mesh's model transform on the renderer. </p>

<a name="classecr_1_1_d3_d11_shader_core_1ab15d331d3ace146f56194e3d2d6d3af2"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  SetupShaderPrograms(const <span class="NDLSystemFont"><a href="../NiMain/NiRenderCallContext.htm">NiRenderCallContext</a></span>& callContext)</p>
<p class="NDLRefMemberDescription">Calls ApplyShaderPrograms and ApplyShaderConstants on the currently active pass. </p>

<a name="classecr_1_1_d3_d11_shader_core_1a4b6325ad3b69a2c7701c3b6b89f81f89"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  PreRenderSubmesh(const <span class="NDLSystemFont"><a href="../NiMain/NiRenderCallContext.htm">NiRenderCallContext</a></span>& callContext)</p>
<p class="NDLRefMemberDescription">Set the index buffer, vertex buffer, input layout, and primitive topology. </p>

<a name="classecr_1_1_d3_d11_shader_core_1a822c039697081274aa76e562fc92c018"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  NextPass()</p>
<p class="NDLRefMemberDescription">Set the shader's current pass ID to the next pass in the shader's pass array. </p>

<a name="classecr_1_1_d3_d11_shader_core_1a0927e9397275865b423c0eb802b3316e"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">efd::Bool</span>  SetupGeometry(<br/><span class="NDLSystemFont"><a href="../NiMain/NiRenderObject.htm">NiRenderObject</a></span>* pGeometry, <br/><span class="NDLSystemFont"><a href="../NiMain/NiMaterialInstance.htm">NiMaterialInstance</a></span>* pMaterialInstance)</p>
<p class="NDLRefMemberDescription">Cache extra data pointers that the shader constant maps will use, and generate the input layout for the geometry/vertex shader combination. </p>

<a name="classecr_1_1_d3_d11_shader_core_1ab70563334e1bada6473929a388329460"></a>
<p class="NDLRefMemberFunction">void  ResetSCMExtraData(<span class="NDLSystemFont"><a href="../NiMain/NiRenderObject.htm">NiRenderObject</a></span>* pGeometry)</p>
<p class="NDLRefMemberDescription">Remove any cached extra data pointers. </p>

<a name="classecr_1_1_d3_d11_shader_core_1a107f99909745a4bcc46a7e2024da9b90"></a>
<p class="NDLRefMemberFunction">virtual void  DestroyRendererData()</p>
<p class="NDLRefMemberDescription">Release D3D11 shader programs in the shader. </p>

<a name="classecr_1_1_d3_d11_shader_core_1af4bd2ac23cd003a219a4b5475f8e81ee"></a>
<p class="NDLRefMemberFunction">virtual void  RecreateRendererData()</p>
<p class="NDLRefMemberDescription">Recreate D3D11 shader programs in the shader. </p>

<a name="classecr_1_1_d3_d11_shader_core_1a4909f200e3ce5807f08558ff58a7fd19"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  GetUsesNiRenderState() const</p>
<p class="NDLRefMemberDescription">Return whether the shader should set render state based on the <span class="NDLSystemFont"><a href="../NiMain/NiPropertyState.htm">NiPropertyState</a></span>. </p>

<a name="classecr_1_1_d3_d11_shader_core_1a76760f414a1c50172fb0d63206399ee6"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">efd::Bool</span>  SetUsesNiRenderState(<span class="NDLSystemFont">efd::Bool</span> bUses)</p>
<p class="NDLRefMemberDescription">Set whether shader should set render state based on the <span class="NDLSystemFont"><a href="../NiMain/NiPropertyState.htm">NiPropertyState</a></span>. </p>

<a name="classecr_1_1_d3_d11_shader_core_1aa26593de175da43ab20c12c31fb1a3f0"></a>
<p class="NDLRefMemberFunction">void  GetBoneParameters(<br/><span class="NDLSystemFont">efd::Bool</span>& transposeBones, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>& boneMatrixRegisters, <br/><span class="NDLSystemFont">efd::Bool</span>& worldSpaceBones)</p>
<p class="NDLRefMemberDescription">Get parameters related to how the shader expects bone matrices to be packed. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">transposeBones</span></td>
    <td>Returns whether the bone matrices should be transposed. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">boneMatrixRegisters</span></td>
    <td>Returns the number of rows expected for each matrix - 3 or 4. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">worldSpaceBones</span></td>
    <td>Returns whether bone matrices are packed in world space as opposed to skinned model space. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_d3_d11_shader_core_1a3fb9b97a42e8107dd87b80799d4921d1"></a>
<p class="NDLRefMemberFunction">void  SetBoneParameters(<br/><span class="NDLSystemFont">efd::Bool</span> transposeBones, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> boneMatrixRegisters, <br/><span class="NDLSystemFont">efd::Bool</span> worldSpaceBones)</p>
<p class="NDLRefMemberDescription">Set parameters related to how the shader expects bone matrices to be packed. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">transposeBones</span></td>
    <td>Whether the bone matrices should be transposed. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">boneMatrixRegisters</span></td>
    <td>The number of rows expected for each matrix - 3 or 4. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">worldSpaceBones</span></td>
    <td>Whether bone matrices are packed in world space as opposed to skinned model space. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_d3_d11_shader_core_1a6470156d493bcaaadcd1f89278e64274"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="ecr__UAVSlot.htm">UAVSlot</a></span>*  AddUAVSlot(<span class="NDLSystemFont"><a href="../efd/efd__FixedString.htm">efd::FixedString</a></span>& name)</p>
<p class="NDLRefMemberDescription">Add a new unordered access view slot with the given name to the shader. </p>

<a name="classecr_1_1_d3_d11_shader_core_1a09062c2cfb8282fbdf1dbc10c21f9391"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="ecr__UAVSlot.htm">UAVSlot</a></span>*  GetUAVSlot(<span class="NDLSystemFont"><a href="../efd/efd__FixedString.htm">efd::FixedString</a></span>& name) const</p>
<p class="NDLRefMemberDescription">Return the unordered access view slot with the given name on the shader. </p>

<a name="classecr_1_1_d3_d11_shader_core_1a68f09a336439f8067db3ab8ad70f575b"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  RemoveUAVSlot(<span class="NDLSystemFont"><a href="../efd/efd__FixedString.htm">efd::FixedString</a></span>& name)</p>
<p class="NDLRefMemberDescription">Remove the unordered access view slot with the given name from the shader. </p>

<a name="classecr_1_1_d3_d11_shader_core_1a3870f202a9de58558fcb1692bc361f55"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  RemoveUAVSlot(<span class="NDLSystemFont"><a href="ecr__UAVSlot.htm">UAVSlot</a></span>* pUAVSlot)</p>
<p class="NDLRefMemberDescription">Remove the providedi unordered access view slot from the shader. </p>

<a name="classecr_1_1_d3_d11_shader_core_1a469a3087ceaf533ea7a26398e0d0617b"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="ecr__UAVSlot.htm">UAVSlot</a></span>*  GetFirstUAVSlot() const</p>
<p class="NDLRefMemberDescription">Return the first <span class="NDLSystemFont"><a href="ecr__UAVSlot.htm">UAVSlot</a></span> on the shader. </p>

<a name="classecr_1_1_d3_d11_shader_core_1a7cd9a57fd4fa47c4049500f52cb04066"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="ecr__UAVSlot.htm">UAVSlot</a></span>*  GetNextUAVSlot(const <span class="NDLSystemFont"><a href="ecr__UAVSlot.htm">UAVSlot</a></span>* pUAVSlot) const</p>
<p class="NDLRefMemberDescription">Return the next <span class="NDLSystemFont"><a href="ecr__UAVSlot.htm">UAVSlot</a></span> on the shader. </p>

<a name="classecr_1_1_d3_d11_shader_core_1a4fa22ab7e423b908eeda48928f27ce93"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetPassCount() const</p>
<p class="NDLRefMemberDescription">Get the total pass count/. </p>

<a name="classecr_1_1_d3_d11_shader_core_1aac1eb4ab1257e5633c5b5179aa9ce655"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="ecr__D3D11Pass.htm">D3D11Pass</a></span>*  GetPass(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> passID)</p>
<p class="NDLRefMemberDescription">Get a specific pass. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
