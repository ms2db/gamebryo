<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>ecr::D3D11RenderTargetBufferData</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">ecr::D3D11RenderTargetBufferData</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="ecr__D3D112DBufferData.htm">ecr::D3D112DBufferData</a></span></p>


<p class="NDLRefHeaderFile">&lt;D3D112DBufferData.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classecr_1_1_d3_d11_render_target_buffer_data.gif" alt="Inheritance graph for ecr::D3D11RenderTargetBufferData"/>
  <p class="FigureCaption">Inheritance graph for ecr::D3D11RenderTargetBufferData</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">A class to represents a 2D buffer that can be used as a render target. </p>
<p class="NDLNormal">Gamebryo creates instances of this class internally to represent rendered textures, but applications can also create instances if they have an ID3D11Texture2D that they want to use as a render target. </p>

<a name="public_static_methods"></a>
<p class="NDLRefHead1">Public Static Methods</p>


<a name="classecr_1_1_d3_d11_render_target_buffer_data_1a49d15758c4a1b13f8dc7853453d9401f"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">D3D11RenderTargetBufferData</span>*  Create(<br/>ID3D11Texture2D* pD3DTexture, <br/><span class="NDLSystemFont"><a href="../NiMain/Ni2DBuffer.htm">Ni2DBuffer</a></span> *& pBuffer, <br/>D3D11_RENDER_TARGET_VIEW_DESC* pRTViewDesc = NULL)</p>
<p class="NDLRefMemberDescription">Creates a D3D11RenderTargetBufferDataObject for the provided texture. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">This function requires that a Ni2DBuffer* reference is passed in. Since D3D11 requires that you create a texture prior to creating the <span class="NDLSystemFont"><a href="../NiMain/Ni2DBuffer.htm">Ni2DBuffer</a></span>, the <span class="NDLSystemFont"><a href="../NiMain/Ni2DBuffer.htm">Ni2DBuffer</a></span> and its renderer data are populated by the Create call. Note that if pBuffer is NULL, a new <span class="NDLSystemFont"><a href="../NiMain/Ni2DBuffer.htm">Ni2DBuffer</a></span> will be created. If this new <span class="NDLSystemFont"><a href="../NiMain/Ni2DBuffer.htm">Ni2DBuffer</a></span> it is not stored in a smart pointer when the function returns, it will be leaked by the application. </p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pD3DTexture</span></td>
    <td>D3D11 texture to create the buffer data for. This texture must have been created with the D3D11_BIND_RENDER_TARGET bind flag. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pBuffer</span></td>
    <td><span class="NDLSystemFont"><a href="../NiMain/Ni2DBuffer.htm">Ni2DBuffer</a></span> pointer that will be filled with a new <span class="NDLSystemFont"><a href="../NiMain/Ni2DBuffer.htm">Ni2DBuffer</a></span> responsible for managing the new render target buffer data object. If pBuffer is NULL, then the caller needs to store the result in a smart pointer to prevent a leak. If pBuffer is not NULL, then the contents of pBuffer may be overwritten by this function. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pRTViewDesc</span></td>
    <td>Optional pointer to a D3D11_RENDER_TARGET_VIEW_DESC that will be used to create an ID3D11RenderTargetView for the render target. If NULL is passed in, then a default render target view will be created that references all the subresources of the highest mip level. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The resulting <span class="NDLSystemFont">D3D11RenderTargetBufferData</span>. </td>
</tr>

        </tbody>
    </table>
</div>


<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classecr_1_1_d3_d11_render_target_buffer_data_1ad4922d49d0f25b3dc93f8dec29787041"></a>
<p class="NDLRefMemberFunction">virtual ~D3D11RenderTargetBufferData()</p>
<p class="NDLRefMemberDetailedDescription">Destructor </p>

<a name="classecr_1_1_d3_d11_render_target_buffer_data_1af114a0dda606fd040dade0e35d9c0ad0"></a>
<p class="NDLRefMemberFunction">ID3D11RenderTargetView*  GetRenderTargetView() const</p>
<p class="NDLRefMemberDescription">Returns the render target view. </p>

<a name="classecr_1_1_d3_d11_render_target_buffer_data_1a301816d9ff5374995a0f2379405ffac5"></a>
<p class="NDLRefMemberFunction">ID3D11Texture2D*  GetRenderTargetBuffer() const</p>
<p class="NDLRefMemberDescription">Returns the render target resource. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
