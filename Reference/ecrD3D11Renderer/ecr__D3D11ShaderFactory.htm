<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>ecr::D3D11ShaderFactory</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">ecr::D3D11ShaderFactory</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../NiMain/NiShaderFactory.htm">NiShaderFactory</a></span></p>


<p class="NDLRefHeaderFile">&lt;D3D11ShaderFactory.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classecr_1_1_d3_d11_shader_factory.gif" alt="Inheritance graph for ecr::D3D11ShaderFactory"/>
  <p class="FigureCaption">Inheritance graph for ecr::D3D11ShaderFactory</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">D3D11 implementation of <span class="NDLSystemFont"><a href="../NiMain/NiShaderFactory.htm">NiShaderFactory</a></span>. </p>
<p class="NDLNormal">The class is essentially a self-contained singleton used by Gamebryo to attach and detach shaders on <span class="NDLSystemFont"><a href="../NiMesh/NiMesh.htm">NiMesh</a></span> instances. Applications should, for the majority of cases, only reference the functionality of this class through the base class interfaces. </p>

<a name="construction_and_destruction"></a>
<p class="NDLRefHead1">Construction and Destruction</p>


<a name="classecr_1_1_d3_d11_shader_factory_1a184a4b69529c916c4e5eb5c04d2d4f00"></a>
<p class="NDLRefMemberFunction">virtual ~D3D11ShaderFactory()</p>
<p class="NDLRefMemberDescription">Destructor. </p>
<a name="public_static_methods"></a>
<p class="NDLRefHead1">Public Static Methods</p>


<a name="classecr_1_1_d3_d11_shader_factory_1a2338442762e96cb9c17913a883644f90"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">D3D11ShaderFactory</span>*  GetD3D11ShaderFactory()</p>
<p class="NDLRefMemberDescription">Return the D3D11-specific shader factory. </p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classecr_1_1_d3_d11_shader_factory_1ae89a5cbffb526a18e1a0f39d6d0c70f9"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../NiMain/NiShader.htm">NiShader</a></span>*  RetrieveShader(<br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pName, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> implementation, <br/><span class="NDLSystemFont">efd::Bool</span> reportNotFound = true)</p>
<p class="NDLRefMemberDescription">Find a shader with the given name and implementation, and create it from a shader library if it does not already exist. </p>
<p class="NDLRefMemberDetailedDescription">Any shaders created will be automatically stored in the shader factory for future use.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pName</span></td>
    <td>Name of the shader </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">implementation</span></td>
    <td>Implementation ID o fthe shader </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">reportNotFound</span></td>
    <td>If true, the function will call ReportError with the NISHADERERR_SHADERNOTFOUND error. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classecr_1_1_d3_d11_shader_factory_1a83a0ddc05eea3448d5e46cd7ae0cf4c7"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../NiMain/NiShader.htm">NiShader</a></span>*  FindShader(<br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pName, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> implementation)</p>
<p class="NDLRefMemberDescription">Find a shader with the given name and implementation, but do not create it from a shader library if it does not already exist. </p>

<a name="classecr_1_1_d3_d11_shader_factory_1a166c75308eb16043ed19110298602586"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">efd::Bool</span>  ReleaseShaderFromLibrary(<br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1add86b31b043c249b287806395efeecd4">efd::Char</a></span>* pName, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> implementation)</p>
<p class="NDLRefMemberDescription">Release the specified shader from both the shader factory and the shader library that first provided the shader, and return whether or not the shader was found. </p>

<a name="classecr_1_1_d3_d11_shader_factory_1a65f630398628db62e49ee66d4bc3ea29"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">efd::Bool</span>  ReleaseShaderFromLibrary(<span class="NDLSystemFont"><a href="../NiMain/NiShader.htm">NiShader</a></span>* pShader)</p>
<p class="NDLRefMemberDescription">Release the specified shader from both the shader factory and the shader library that first provided the shader, and return whether or not the shader was found. </p>

<a name="classecr_1_1_d3_d11_shader_factory_1a98845d1b47728121eeb1b450eef22717"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetMajorVertexShaderVersion(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> version)</p>
<p class="NDLRefMemberDescription">Return the major version number from a D3D11 vertex shader version. </p>

<a name="classecr_1_1_d3_d11_shader_factory_1abb7a33302c6df57aa5b31a53593b2fcc"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetMinorVertexShaderVersion(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> version)</p>
<p class="NDLRefMemberDescription">Return the minor version number from a D3D11 vertex shader version. </p>

<a name="classecr_1_1_d3_d11_shader_factory_1a80ddb49c1c3f250b03b2b5a6b17ee166"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  CreateVertexShaderVersion(<br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> majorVersion, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> minorVersion)</p>
<p class="NDLRefMemberDescription">Create a D3D11 vertex shader version from a major and minor version number. </p>

<a name="classecr_1_1_d3_d11_shader_factory_1ae7666e9fbdbc82b2315ae129923bf61e"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetMajorHullShaderVersion(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> version)</p>
<p class="NDLRefMemberDescription">Return the major version number from a D3D11 hull shader version. </p>

<a name="classecr_1_1_d3_d11_shader_factory_1a1c3002adfad292a64dc3f4879f50e320"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetMinorHullShaderVersion(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> version)</p>
<p class="NDLRefMemberDescription">Return the minor version number from a D3D11 hull shader version. </p>

<a name="classecr_1_1_d3_d11_shader_factory_1a0f2378e79a5546c20dd90e9245c5e448"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  CreateHullShaderVersion(<br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> majorVersion, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> minorVersion)</p>
<p class="NDLRefMemberDescription">Create a D3D11 hull shader version from a major and minor version number. </p>

<a name="classecr_1_1_d3_d11_shader_factory_1ab80541d3c6010d72ccca8f7075e86131"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetMajorDomainShaderVersion(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> version)</p>
<p class="NDLRefMemberDescription">Return the major version number from a D3D11 domain shader version. </p>

<a name="classecr_1_1_d3_d11_shader_factory_1ad4111956c7a5f7ee7a597842703bd8c5"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetMinorDomainShaderVersion(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> version)</p>
<p class="NDLRefMemberDescription">Return the minor version number from a D3D11 domain shader version. </p>

<a name="classecr_1_1_d3_d11_shader_factory_1ab1b132dffbb64f44bf870b648d403418"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  CreateDomainShaderVersion(<br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> majorVersion, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> minorVersion)</p>
<p class="NDLRefMemberDescription">Create a D3D11 domain shader version from a major and minor version number. </p>

<a name="classecr_1_1_d3_d11_shader_factory_1aea17b7c13aa8c66902c476600cec930f"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetMajorGeometryShaderVersion(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> version)</p>
<p class="NDLRefMemberDescription">Return the major version number from a D3D11 geometry shader version. </p>

<a name="classecr_1_1_d3_d11_shader_factory_1a6d240a0ef33123ef62b207fa08231d7c"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetMinorGeometryShaderVersion(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> version)</p>
<p class="NDLRefMemberDescription">Return the minor version number from a D3D11 geometry shader version. </p>

<a name="classecr_1_1_d3_d11_shader_factory_1a065130558502b9396adcaeb221744737"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  CreateGeometryShaderVersion(<br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> majorVersion, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> minorVersion)</p>
<p class="NDLRefMemberDescription">Create a D3D11 geometry shader version from a major and minor version number. </p>

<a name="classecr_1_1_d3_d11_shader_factory_1a29dc06bf9dfd82ed1581b6174b8898d5"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetMajorPixelShaderVersion(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> version)</p>
<p class="NDLRefMemberDescription">Return the major version number from a D3D11 pixel shader version. </p>

<a name="classecr_1_1_d3_d11_shader_factory_1ab0c3d45a278b1e5e404980a252a09104"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetMinorPixelShaderVersion(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> version)</p>
<p class="NDLRefMemberDescription">Return the minor version number from a D3D11 pixel shader version. </p>

<a name="classecr_1_1_d3_d11_shader_factory_1a2e24e967e4c6cf6f7ecdf17d9d850404"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  CreatePixelShaderVersion(<br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> majorVersion, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> minorVersion)</p>
<p class="NDLRefMemberDescription">Create a D3D11 pixel shader version from a major and minor version number. </p>

<a name="classecr_1_1_d3_d11_shader_factory_1ab6d7b012be13fe5cc56c60265139c3b2"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetMajorComputeShaderVersion(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> version)</p>
<p class="NDLRefMemberDescription">Return the major version number from a D3D11 compute shader version. </p>

<a name="classecr_1_1_d3_d11_shader_factory_1a0b0ac56d24760bd7e0fa4246c600ee44"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetMinorComputeShaderVersion(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> version)</p>
<p class="NDLRefMemberDescription">Return the minor version number from a D3D11 compute shader version. </p>

<a name="classecr_1_1_d3_d11_shader_factory_1ac3f8961f5134c544894c37579cd24b68"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  CreateComputeShaderVersion(<br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> majorVersion, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> minorVersion)</p>
<p class="NDLRefMemberDescription">Create a D3D11 compute shader version from a major and minor version number. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
