<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>egf::PyObjectPtr</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">egf::PyObjectPtr</p>


<p class="NDLRefHeaderFile">&lt;PyObjectPtr.h&gt;</p>


<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">A smart pointer for PyObject pointers. </p>
<p class="NDLNormal">Automatically manages the reference count of python objects that are returned from methods like Py_BuildValue and PyObject_CallObject.</p>
<p class="NDLNormal">
<p class="NDLNormal">: Because this is designed to work with existing Python functions it has different semantics than <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>. Mainly, when a raw pointer is assigned to a <span class="NDLSystemFont">PyObjectPtr</span> it is assumed that pointer already has one outstanding reference so we do not call PyINCREF. As result special care must be taken if you use a <span class="NDLSystemFont">PyObjectPtr</span> to store a "borrowed" PyObject such as would be returned by, for example, PyDict_GetItemString. You must set such borrowed references using the Adopt method.</p>
<pre>        // Good usages of PyObjectPtr:
        PyObjectPtr pyModule = PyImport_ImportModule(&quot;scheduler&quot;);
        PyObjectPtr pyDictionary = PyModule_GetDict(pyModule);
        PyObjectPtr pyMethod.Adopt(PyDict_GetItemString(pyDictionary, &quot;StartBehavior&quot;));

        // ERROR: The following will result in the item being deleted from the dictionary!
        PyObjectPtr pyBadUsage = PyDict_GetItemString(pyDictionary, &quot;StartBehavior&quot;);
</pre>
</p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classegf_1_1_py_object_ptr_1ade9968d5637ed23213a199debb621130"></a>
<p class="NDLRefMemberFunction">PyObjectPtr(const <span class="NDLSystemFont">PyObjectPtr</span>& rhs)</p>
<p class="NDLRefMemberDescription">Copy Constructor. </p>

<a name="classegf_1_1_py_object_ptr_1a108417f462304e653e3df98f820c1d84"></a>
<p class="NDLRefMemberFunction">PyObjectPtr(PyObject* rhs)</p>
<p class="NDLRefMemberDescription">Constructor. </p>
<p class="NDLRefMemberDetailedDescription">This assumes that the passed in object already has an extra reference on it; the object is stored without adding any additional references. Use the default constructor and call Adopt instead if an extra reference needs to be held on the object. </p>

<a name="classegf_1_1_py_object_ptr_1a38bf993f0d00bcc7e0e8d92c4b969d19"></a>
<p class="NDLRefMemberFunction">PyObjectPtr(<br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1aa252daadc0d452d47b30950c7640118c">_Adopt</a></span> , <br/>PyObject* rhs)</p>
<p class="NDLRefMemberDescription">Adopting Constructor. </p>
<p class="NDLRefMemberDetailedDescription">This will add a reference to the passed in object. </p>

<a name="classegf_1_1_py_object_ptr_1aacba20c698b61fa4bdde236743a1ead5"></a>
<p class="NDLRefMemberFunction">PyObjectPtr()</p>
<p class="NDLRefMemberDescription">Default Constructor. </p>

<a name="classegf_1_1_py_object_ptr_1aa02a1139a7697e0999357aaa1fa674c6"></a>
<p class="NDLRefMemberFunction">~PyObjectPtr()</p>
<p class="NDLRefMemberDescription">Destructor. </p>

<a name="classegf_1_1_py_object_ptr_1ac57932ff2c9caeef78dd8623e8c3c451"></a>
<p class="NDLRefMemberFunction">operator PyObject *() const</p>
<p class="NDLRefMemberDescription">Cast operator. </p>

<a name="classegf_1_1_py_object_ptr_1ace7ee51a6ecde46b4eb807aaa4db311c"></a>
<p class="NDLRefMemberFunction">PyObject*  operator-&gt;() const</p>
<p class="NDLRefMemberDescription">Dereference operator. </p>

<a name="classegf_1_1_py_object_ptr_1a5ad4b0842f3d606d7a292ff1c4528cfa"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">PyObjectPtr</span>&  operator=(const <span class="NDLSystemFont">PyObjectPtr</span>& rhs)</p>
<p class="NDLRefMemberDescription">Assignment operator. </p>

<a name="classegf_1_1_py_object_ptr_1a690f3c11532ba447cfe03e9f2ac6f82f"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">PyObjectPtr</span>&  operator=(PyObject* rhs)</p>
<p class="NDLRefMemberDescription">Assignment operator. </p>
<p class="NDLRefMemberDetailedDescription">This assumes that the passed in object already has an extra reference on it; the object is stored without adding any additional references. Use Adopt instead if an extra reference needs to be held on the object. </p>

<a name="classegf_1_1_py_object_ptr_1af7e221479afdb94842dfbc5d3104b823"></a>
<p class="NDLRefMemberFunction">void  Adopt(PyObject* rhs)</p>
<p class="NDLRefMemberDescription">Assigns a PyObject pointer that doesn't have an extra reference into the smart pointer. </p>
<p class="NDLRefMemberDetailedDescription">This will add a reference to the passed in object and release any reference previously held by the smart pointer. </p>

<a name="classegf_1_1_py_object_ptr_1a0a8acc030b2fce8323bbfd089ee90bd4"></a>
<p class="NDLRefMemberFunction">PyObject*  Orphan()</p>
<p class="NDLRefMemberDescription">Returns the contained PyObject pointer and sets the internal pointer to NULL. </p>
<p class="NDLRefMemberDetailedDescription">Afterwards the caller is responsible for eventually freeing the returned PyObject pointer. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
