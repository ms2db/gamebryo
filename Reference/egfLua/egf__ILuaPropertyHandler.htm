<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>egf::ILuaPropertyHandler</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">egf::ILuaPropertyHandler</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../efd/efd__RefCount.htm">efd::RefCount</a></span></p>


<p class="NDLRefHeaderFile">&lt;ILuaPropertyHandler.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classegf_1_1_i_lua_property_handler.gif" alt="Inheritance graph for egf::ILuaPropertyHandler"/>
  <p class="FigureCaption">Inheritance graph for egf::ILuaPropertyHandler</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">Interface with methods for getting or setting a property from Lua. </p>
<p class="NDLNormal">Instances of this interface are registered with <span class="NDLSystemFont"><a href="egf__SchedulerLua.htm#classegf_1_1_scheduler_lua_1ae69622b36874d9f7c3aaf61b304985a6">SchedulerLua::RegisterPropertyHandler</a></span> for each supported property data type. Then the lua_GetProperty and lua_SetProperty methods will find the right instance and use these methods to read or write the property to or from the Lua stack. </p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classegf_1_1_i_lua_property_handler_1a48d234aacbdca1a64291a2a80df4e41b"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">PropertyResult</a></span>  GetProperty(<br/><span class="NDLSystemFont"><a href="../egf/egf__Entity.htm">Entity</a></span>* i_pEntity, <br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1af08acbbc1a28c9e4ee8dfb501449dc28">PropertyID</a></span> i_pid, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& i_key, <br/>lua_State* L, <br/>int& o_count) = 0</p>
<p class="NDLRefMemberDescription">Get the specified property from the entity and push the value onto the Lua stack. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_pEntity</span></td>
    <td>The entity on which to read the property </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_pid</span></td>
    <td>The property to read </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_key</span></td>
    <td>If the property to read is associative then this is the key that should be read. This will be an empty string if the property to read is scalar. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">L</span></td>
    <td>The lua state. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">o_count</span></td>
    <td>The number of Lua objects pushed into the stack as a result of your call. This will normally be 1 if the method is successful and 0 otherwise. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The PropertyResult value as returned by Entity::Get*PropertyValue. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_i_lua_property_handler_1aea3b5ec654a61849614ea72952002266"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">PropertyResult</a></span>  GetDefaultProperty(<br/><span class="NDLSystemFont"><a href="../egf/egf__Entity.htm">Entity</a></span>* i_pEntity, <br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1af08acbbc1a28c9e4ee8dfb501449dc28">PropertyID</a></span> i_pid, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& i_key, <br/>lua_State* L, <br/>int& o_count) = 0</p>
<p class="NDLRefMemberDescription">Get the default value of the specified property from the entity and push the value onto the Lua stack. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_pEntity</span></td>
    <td>The entity on which to read the property </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_pid</span></td>
    <td>The property to read </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_key</span></td>
    <td>If the property to read is associative then this is the key that should be read. This will be an empty string if the property to read is scalar. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">L</span></td>
    <td>The lua state. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">o_count</span></td>
    <td>The number of Lua objects pushed into the stack as a result of your call. This will normally be 1 if the method is successful and 0 otherwise. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The PropertyResult value as returned by Entity::Get*PropertyValue. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_i_lua_property_handler_1a5ce891c81b287cd534c03101bbf3915c"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">PropertyResult</a></span>  SetProperty(<br/><span class="NDLSystemFont"><a href="../egf/egf__Entity.htm">Entity</a></span>* i_pEntity, <br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1af08acbbc1a28c9e4ee8dfb501449dc28">PropertyID</a></span> i_pid, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& i_key, <br/>lua_State* L, <br/>int pos) = 0</p>
<p class="NDLRefMemberDescription">Read the specified property from the entity and push the value onto the Lua stack. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_pEntity</span></td>
    <td>The entity on which to set the property </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_pid</span></td>
    <td>The property to set </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_key</span></td>
    <td>If the property to set is associative then this is the key that should be set. This will be an empty string if the property to set is scalar. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">L</span></td>
    <td>The lua state. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pos</span></td>
    <td>The index on the Lua stack where the property value is location </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The PropertyResult value as returned by <span class="NDLSystemFont"><a href="../egf/egf__Entity.htm#classegf_1_1_entity_1a331f0ddc36dd030ee87f0997416b8bbf">Entity::SetPropertyValue</a></span>. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_i_lua_property_handler_1a068835ca1de24e105eb96bb8b0513aa8"></a>
<p class="NDLRefMemberFunction">virtual int  GetParameter(<br/><span class="NDLSystemFont"><a href="../efd/efd__ParameterList.htm">efd::ParameterList</a></span>* pParamList, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> paramIndex, <br/>lua_State* L) = 0</p>
<p class="NDLRefMemberDescription">Used for getting a parameter out of a ParameterList. </p>
<p class="NDLRefMemberDetailedDescription">On success this should push the resulting object(s) into the Lua stack. On Error the Lua stack should not be altered as the calling function will handle returning an appropriate error value.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pParamList</span></td>
    <td>the parameter list from which to fetch an argument </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">paramIndex</span></td>
    <td>The index within the parameter list to be fetched </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">L</span></td>
    <td>The lua state. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The number of objects pushed onto to the stack, which should be zero if an error occured. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_i_lua_property_handler_1af2b94258d27afe0b40c24f021331f1b7"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  SetParameter(<br/><span class="NDLSystemFont"><a href="../efd/efd__ParameterList.htm">efd::ParameterList</a></span>* pParamList, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& name, <br/>lua_State* L, <br/>int pos) = 0</p>
<p class="NDLRefMemberDescription">Used for adding a parameter to a ParameterList. </p>
<p class="NDLRefMemberDetailedDescription">You can optionally pass in a name or use an empty string to add an unnamed parameter. The value for the parameter is read from the given position on the Lua stack.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pParamList</span></td>
    <td>the parameter list to add the argument to </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">name</span></td>
    <td>The name of the parameter, or empty string to add an unnamed parameter </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">L</span></td>
    <td>The lua state. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pos</span></td>
    <td>The index on the Lua stack where the parameter value is location </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True for success, false for failure. </td>
</tr>

        </tbody>
    </table>
</div>


 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
