<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>egf::SwigPropHandler</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">egf::SwigPropHandler</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="egf__ILuaPropertyHandler.htm">egf::ILuaPropertyHandler</a></span></p>


<p class="NDLRefHeaderFile">&lt;SwigPropHandler.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classegf_1_1_swig_prop_handler.gif" alt="Inheritance graph for egf::SwigPropHandler"/>
  <p class="FigureCaption">Inheritance graph for egf::SwigPropHandler</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">An implementation of <span class="NDLSystemFont"><a href="egf__ILuaPropertyHandler.htm">ILuaPropertyHandler</a></span> that uses a Swig generated C++ class wrapper to implement the accessors. </p>
<p class="NDLNormal">This can be used with <span class="NDLSystemFont"><a href="egf__SchedulerLua.htm#classegf_1_1_scheduler_lua_1ae69622b36874d9f7c3aaf61b304985a6">SchedulerLua::RegisterPropertyHandler</a></span> to implement BehaviorAPI.GetProperty and BehaviorAPI.SetProperty for types bound by Swig.</p>
<p class="NDLNormal">The methods and types used by this template are defined as local statics in the generated Swig wrapper file. As a result, to use this class you must inject code into the generated Swig wrapper to create and register the correct instance. For example, you could place the following code into your Swig .i file:</p>
<p class="NDLNormal">
<pre>    // Include the file that binds the custom type
    %include &quot;CustomType.h&quot;

    // Add some code to the Swig wrapper to define a function to register an ILuaPropertyHandler
    // for the Swig-bound class.
    %{
    #include &lt;egfLua/SchedulerLua.h&gt;
    #include &lt;egfLua/SwigPropHandler.h&gt;

    SWIGEXPORT bool RegisterSwigPropertyHandlerForCustomType(egf::SchedulerLua* pSchedulerLua)
    {
        return pSchedulerLua-&gt;RegisterPropertyHandler(
            efd::kCLASSID_CustomType,
            EE_NEW egf::SwigPropHandler&lt;CustomType, swig_type_info&gt;(SWIGTYPE_p_CustomType));
    }
    %}
</pre>
</p>
<p class="NDLNormal">When using the sample above then you would need to call the generated function at some point prior to the first BehaviorAPI.GetProperty or BehaviorAPI.SetProperty call for your type.</p>
<p class="NDLNormal">The SwigTypeInfo template parameter must always be set to "swig_type_info". This is passed as a parameter only because "swig_type_info" is defined locally in the generated SWIG wrapper. This allows us to use the type in this header file without worrying about type matching. </p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classegf_1_1_swig_prop_handler_1afa3211ff92fed910cf3da6daf70fb2ef"></a>
<p class="NDLRefMemberFunction">SwigPropHandler(SwigTypeInfo* pSwigTypeInfo)</p>
<p class="NDLRefMemberFunction"></p>

<a name="classegf_1_1_swig_prop_handler_1a46a4557ea34ec2abc59c13bf564aecdb"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">egf::PropertyResult</a></span>  GetProperty(<br/><span class="NDLSystemFont"><a href="../egf/egf__Entity.htm">egf::Entity</a></span>* i_pEntity, <br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1af08acbbc1a28c9e4ee8dfb501449dc28">egf::PropertyID</a></span> i_pid, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& i_key, <br/>lua_State* L, <br/>int& o_count)</p>
<p class="NDLRefMemberDescription">Get the specified property from the entity and push the value onto the Lua stack. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_pEntity</span></td>
    <td>The entity on which to read the property </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_pid</span></td>
    <td>The property to read </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_key</span></td>
    <td>If the property to read is associative then this is the key that should be read. This will be an empty string if the property to read is scalar. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">L</span></td>
    <td>The lua state. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">o_count</span></td>
    <td>The number of Lua objects pushed into the stack as a result of your call. This will normally be 1 if the method is successful and 0 otherwise. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The PropertyResult value as returned by Entity::Get*PropertyValue. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_swig_prop_handler_1afe75dc4f3e510e4df2826a3914fe3f29"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">egf::PropertyResult</a></span>  GetDefaultProperty(<br/><span class="NDLSystemFont"><a href="../egf/egf__Entity.htm">egf::Entity</a></span>* i_pEntity, <br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1af08acbbc1a28c9e4ee8dfb501449dc28">egf::PropertyID</a></span> i_pid, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& i_key, <br/>lua_State* L, <br/>int& o_count)</p>
<p class="NDLRefMemberDescription">Get the default value of the specified property from the entity and push the value onto the Lua stack. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_pEntity</span></td>
    <td>The entity on which to read the property </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_pid</span></td>
    <td>The property to read </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_key</span></td>
    <td>If the property to read is associative then this is the key that should be read. This will be an empty string if the property to read is scalar. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">L</span></td>
    <td>The lua state. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">o_count</span></td>
    <td>The number of Lua objects pushed into the stack as a result of your call. This will normally be 1 if the method is successful and 0 otherwise. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The PropertyResult value as returned by Entity::Get*PropertyValue. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_swig_prop_handler_1a5993997fcc21767287989082553b974b"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">egf::PropertyResult</a></span>  SetProperty(<br/><span class="NDLSystemFont"><a href="../egf/egf__Entity.htm">egf::Entity</a></span>* i_pEntity, <br/><span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1af08acbbc1a28c9e4ee8dfb501449dc28">egf::PropertyID</a></span> i_pid, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& i_key, <br/>lua_State* L, <br/>int pos)</p>
<p class="NDLRefMemberDescription">Read the specified property from the entity and push the value onto the Lua stack. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_pEntity</span></td>
    <td>The entity on which to set the property </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_pid</span></td>
    <td>The property to set </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">i_key</span></td>
    <td>If the property to set is associative then this is the key that should be set. This will be an empty string if the property to set is scalar. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">L</span></td>
    <td>The lua state. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pos</span></td>
    <td>The index on the Lua stack where the property value is location </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The PropertyResult value as returned by <span class="NDLSystemFont"><a href="../egf/egf__Entity.htm#classegf_1_1_entity_1a331f0ddc36dd030ee87f0997416b8bbf">Entity::SetPropertyValue</a></span>. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_swig_prop_handler_1aafc1012c108a3f734dee2851929f16a9"></a>
<p class="NDLRefMemberFunction">virtual int  GetParameter(<br/><span class="NDLSystemFont"><a href="../efd/efd__ParameterList.htm">efd::ParameterList</a></span>* pParamList, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> paramIndex, <br/>lua_State* L)</p>
<p class="NDLRefMemberDescription">Used for getting a parameter out of a ParameterList. </p>
<p class="NDLRefMemberDetailedDescription">On success this should push the resulting object(s) into the Lua stack. On Error the Lua stack should not be altered as the calling function will handle returning an appropriate error value.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pParamList</span></td>
    <td>the parameter list from which to fetch an argument </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">paramIndex</span></td>
    <td>The index within the parameter list to be fetched </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">L</span></td>
    <td>The lua state. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The number of objects pushed onto to the stack, which should be zero if an error occured. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_swig_prop_handler_1aa610bdd6b329f49a3b9742b02d65dd0d"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  SetParameter(<br/><span class="NDLSystemFont"><a href="../efd/efd__ParameterList.htm">efd::ParameterList</a></span>* pParamList, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& name, <br/>lua_State* L, <br/>int pos)</p>
<p class="NDLRefMemberDescription">Used for adding a parameter to a ParameterList. </p>
<p class="NDLRefMemberDetailedDescription">You can optionally pass in a name or use an empty string to add an unnamed parameter. The value for the parameter is read from the given position on the Lua stack.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pParamList</span></td>
    <td>the parameter list to add the argument to </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">name</span></td>
    <td>The name of the parameter, or empty string to add an unnamed parameter </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">L</span></td>
    <td>The lua state. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pos</span></td>
    <td>The index on the Lua stack where the parameter value is location </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True for success, false for failure. </td>
</tr>

        </tbody>
    </table>
</div>


 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
