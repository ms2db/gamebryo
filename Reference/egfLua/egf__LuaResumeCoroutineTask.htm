<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>egf::LuaResumeCoroutineTask</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">egf::LuaResumeCoroutineTask</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../egf/egf__ScheduledTask.htm">egf::ScheduledTask</a></span></p>


<p class="NDLRefHeaderFile">&lt;LuaResumeCoroutineTask.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classegf_1_1_lua_resume_coroutine_task.gif" alt="Inheritance graph for egf::LuaResumeCoroutineTask"/>
  <p class="FigureCaption">Inheritance graph for egf::LuaResumeCoroutineTask</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">This task makes it easy to implement Lua tasks that yield the current coroutine. </p>
<p class="NDLNormal">Derive a task from this class and override the DoTask method to perform additional work. </p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classegf_1_1_lua_resume_coroutine_task_1ae5f466c9e36dba9adb58cdccdea8890d"></a>
<p class="NDLRefMemberFunction">LuaResumeCoroutineTask(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a37c593debc73d82d7ddc571c725f0e2d">efd::TimeType</a></span> when, <br/><span class="NDLSystemFont"><a href="../egf/egf__PendingBehavior.htm">egf::PendingBehavior</a></span>* what)</p>
<p class="NDLRefMemberDescription">Constructor. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">when</span></td>
    <td>The time at which this task should execute. This time will be used if you pass this task to <span class="NDLSystemFont"><a href="../egf/egf__Scheduler.htm#classegf_1_1_scheduler_1ad6ce8bc67f70de9adbb97e686ca60ef9">Scheduler::QueueTask</a></span>. If you manually resume the Lua coroutine by directly calling DoTask then this time has no effect. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">what</span></td>
    <td>The <span class="NDLSystemFont"><a href="../egf/egf__PendingBehavior.htm">PendingBehavior</a></span> for a blocking Lua behavior that is being yielded. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_lua_resume_coroutine_task_1aac80288c17114a1543139bfd20c1dcf4"></a>
<p class="NDLRefMemberFunction">virtual void  AbortTask(<span class="NDLSystemFont"><a href="../egf/egf__Scheduler.htm">egf::Scheduler</a></span>* )</p>
<p class="NDLRefMemberDescription">This override of <span class="NDLSystemFont"><a href="../egf/egf__ScheduledTask.htm#classegf_1_1_scheduled_task_1a39bb7f245a02264a535f634fb607f88d">ScheduledTask::AbortTask</a></span> will release any Lua references held by this task thus allowing them to be garbage collected. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription"><span class="NDLSystemFont"><a href="../egf/egf__ScheduledTask.htm#classegf_1_1_scheduled_task_1a39bb7f245a02264a535f634fb607f88d">ScheduledTask::AbortTask</a></span></p></p>

<a name="classegf_1_1_lua_resume_coroutine_task_1a542a782f3f806f3b4b78080ceddad84f"></a>
<p class="NDLRefMemberFunction">int  CacheAndYeildCoroutine(lua_State* L)</p>
<p class="NDLRefMemberDescription">Call this from within a Lua built-in method running in a coroutine. </p>
<p class="NDLRefMemberDetailedDescription">It will cache information about the current coroutine and hold a reference that will prevent the coroutine from being garbage collected. It will then yield the current coroutine by calling lua_yield.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">The result returned from this method must then be returned from the C++ Lua function which resulted in calling this method. Failure to return this value will corrupt the Lua state.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">L</span></td>
    <td>The Lua state for the running coroutine </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The integer value that must be returned from the current Lua function. This value will be negative if we yielded successfully or zero on error. </td>
</tr>

        </tbody>
    </table>
</div>


 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
