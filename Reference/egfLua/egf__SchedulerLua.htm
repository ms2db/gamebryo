<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>egf::SchedulerLua</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">egf::SchedulerLua</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../egf/egf__ISchedulerScripting.htm">egf::ISchedulerScripting</a></span></p>


<p class="NDLRefHeaderFile">&lt;SchedulerLua.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classegf_1_1_scheduler_lua.gif" alt="Inheritance graph for egf::SchedulerLua"/>
  <p class="FigureCaption">Inheritance graph for egf::SchedulerLua</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">A Lua specific implementation of SchedulerScripting. </p>
<p class="NDLNormal"><span class="NDLSystemFont">SchedulerLua</span> owns the Lua runtime. It's responsible for initializing any Lua-behavior built-ins when InitForScripting is called. <span class="NDLSystemFont">SchedulerLua</span> is called when a Lua behavior is called by the <span class="NDLSystemFont"><a href="../egf/egf__Scheduler.htm">Scheduler</a></span> by calling one of DoTickScript or DoScriptBehavior.</p>
<p class="NDLNormal">Built-in writers that bind to Lua need to add their initialization function to <span class="NDLSystemFont">SchedulerLua</span> before the Lua runtime is initialized. To accomplish this, add an appropriate entry to the config.ini for Dll builds, or call AddStaticBuiltinInitFunction in main for static builds. </p>

<a name="public_types"></a>
<p class="NDLRefHead1">Public Types</p>


<a name="classegf_1_1_scheduler_lua_1a2728d44e66d870393109152a1fe8a0ca"></a>
<p class="NDLRefMemberFunction">typedef int(*  LuaScriptInitFunction)(lua_State *)</p>
<p class="NDLRefMemberDescription">Typedef for LuaScriptInitFunction pointers. </p>
<p class="NDLRefMemberDetailedDescription">When defining custom built-in functions, SWIG will generate a function used to initialize that built-in and register it with the Lua runtime. These functions have the following declaration: </p>

<a name="classegf_1_1_scheduler_lua_1aa7b27d659e822d7511480b93944bd442"></a>
<p class="NDLRefMemberFunction">typedef <span class="NDLSystemFont"><a href="../efd/efd__list.htm">efd::list</a></span>&lt;<span class="NDLSystemFont"><a href="egf__SchedulerLua.htm#classegf_1_1_scheduler_lua_1a2728d44e66d870393109152a1fe8a0ca">LuaScriptInitFunction</a></span>&gt;  StaticBuiltinList</p>
<p class="NDLRefMemberDescription">Get the list of registered static initialization functions. </p>
<a name="public_static_attributes"></a>
<p class="NDLRefHead1">Public Static Attributes</p>


<a name="classegf_1_1_scheduler_lua_1a50d49ea6ec6db725d1494f46516ebb2c"></a>
<p class="NDLRefMemberFunction">static const char*  ms_LuaGlobalTable</p>
<p class="NDLRefMemberDescription">Name of the global Emergent table in Lua. </p>
<p class="NDLRefMemberDetailedDescription">We use this table to store application-wide values. </p>

<a name="classegf_1_1_scheduler_lua_1a990d10aed5c5a42ebc353383cc0deb6b"></a>
<p class="NDLRefMemberFunction">static const char*  ms_PropertyResult</p>
<p class="NDLRefMemberDescription">Name of the key in the Emergent global table that holds the <span class="NDLSystemFont"><a href="../Namespaces/egf.htm#namespaceegf_1a3c1812aef0e4c49b720109b5fd346c6e">egf::PropertyResult</a></span> value for the previous property operation. </p>
<p class="NDLRefMemberDetailedDescription">This can be used when accessing <span class="NDLSystemFont"><a href="../egf/egf__Entity.htm">Entity</a></span> properties directly via .PropertyName or ["PropertyName"] semantics, where the Lua specification for __index and __newindex metamethods only supports single value returns. </p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classegf_1_1_scheduler_lua_1ab3465218401a0ed1ee721cd230a67877"></a>
<p class="NDLRefMemberFunction">virtual lua_State*  GetLuaState() const</p>
<p class="NDLRefMemberDescription">Get the Lua runtime state for the main Lua thread. </p>

<a name="classegf_1_1_scheduler_lua_1ae69622b36874d9f7c3aaf61b304985a6"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  RegisterPropertyHandler(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span> propDataType, <br/><span class="NDLSystemFont"><a href="egf__ILuaPropertyHandler.htm">ILuaPropertyHandler</a></span>* pHandler)</p>
<p class="NDLRefMemberDescription">Register an instance of <span class="NDLSystemFont"><a href="egf__ILuaPropertyHandler.htm">ILuaPropertyHandler</a></span> that can perform Get and Set property operations for the given storage class data type. </p>
<p class="NDLRefMemberDetailedDescription">This method can be called as soon as the <span class="NDLSystemFont">SchedulerLua</span> instance is created. It is recommended that property handlers be added during the OnPreInit phase of system service configuration.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">propDataType</span></td>
    <td>A class ID defining the storage type for the property. Note that this is the storage type as might be returned by <span class="NDLSystemFont"><a href="../egf/egf__Entity.htm#classegf_1_1_entity_1aaa5aa3d64cc6b2aa5a1058c377e053c8">Entity::GetDataStorageType</a></span> and not the type of an <span class="NDLSystemFont"><a href="../egf/egf__IProperty.htm">egf::IProperty</a></span> instance which would hold that data type. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pHandler</span></td>
    <td>A property handler that knows how to read and write Lua objects to get and set entity properties. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the handler was registered, or false if the class ID conflicts. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_scheduler_lua_1a8c039ae6a55a9a7e33aeb817790720a5"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="egf__ILuaPropertyHandler.htm">ILuaPropertyHandler</a></span>*  GetPropertyHandler(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span> propDataType)</p>
<p class="NDLRefMemberDescription">Find a previously registered <span class="NDLSystemFont"><a href="egf__ILuaPropertyHandler.htm">ILuaPropertyHandler</a></span> instance. </p>

<a name="classegf_1_1_scheduler_lua_1aed5a324426b85c8b39954ec680da5391"></a>
<p class="NDLRefMemberFunction">void  HandleAssetLookupMsg(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__AssetLocatorResponse.htm">efd::AssetLocatorResponse</a></span>* pMessage, <br/><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span> targetChannel)</p>
<p class="NDLRefMemberDescription">Handler for AssetLookup Messages. </p>

<a name="classegf_1_1_scheduler_lua_1ad8f2a9bcacf7e76baad0fc679dcedf4d"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span>  GetAssetLoadCategory() const</p>
<p class="NDLRefMemberDescription">Get the category used by this scripting engine. </p>

<a name="classegf_1_1_scheduler_lua_1a05685b42ee636c5831cfacab8c622727"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  AppendLuaPath(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__ISection.htm">efd::ISection</a></span>* pLuaSection, <br/>const char* valueKey)</p>
<p class="NDLRefMemberDescription">Append any paths found in the given configuration section at valueKey to the lua package.path and package.cpath global search paths. </p>

<a name="classegf_1_1_scheduler_lua_1ad471b9962078d39e0e168b1138a094d5"></a>
<p class="NDLRefMemberFunction">virtual void  HandleAssetLoadResponse(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__AssetLoadResponse.htm">efd::AssetLoadResponse</a></span>* pResponse, <br/><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span> target)</p>
<p class="NDLRefMemberDescription">Handle AssetFactoryManager messages in response to ScriptFactory requests. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pResponse</span></td>
    <td>response message. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">target</span></td>
    <td>Category the message was delivered to. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_scheduler_lua_1a1912506304272b40d9e20087163c61da"></a>
<p class="NDLRefMemberFunction">int  GetParameter(lua_State* L)</p>
<p class="NDLRefMemberDescription">Similar to GetPropertyImpl but uses a ParameterList rather than an <span class="NDLSystemFont"><a href="../egf/egf__Entity.htm">Entity</a></span> to read the value. </p>
<p class="NDLRefMemberDetailedDescription">The Lua stack contains the parameter list followed by either an integer index or string name for the parameter to read from the list and the then uses the correct <span class="NDLSystemFont"><a href="egf__ILuaPropertyHandler.htm">ILuaPropertyHandler</a></span> instance to push the correct data onto the Lua stack.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">L</span></td>
    <td>the Lua state containing the stack to read arguments from and push results to. </td>
</tr>

        </tbody>
    </table>
</div>


<a name="public_static_methods"></a>
<p class="NDLRefHead1">Public Static Methods</p>


<a name="classegf_1_1_scheduler_lua_1ad47612cebb85556fe1887397d659c17d"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  AddStaticBuiltinInitFunction(<span class="NDLSystemFont"><a href="egf__SchedulerLua.htm#classegf_1_1_scheduler_lua_1a2728d44e66d870393109152a1fe8a0ca">LuaScriptInitFunction</a></span> i_pfn)</p>
<p class="NDLRefMemberDescription">Register a Lua module initialization function. </p>
<p class="NDLRefMemberDetailedDescription">This method can be called as early as desired. Calls made prior to <span class="NDLSystemFont"><a href="../egf/egf__Scheduler.htm#classegf_1_1_scheduler_1a5bc5cb905acf6dd6885e009831911cf1">Scheduler::OnInit</a></span> will be processed during <span class="NDLSystemFont"><a href="../egf/egf__Scheduler.htm#classegf_1_1_scheduler_1a5bc5cb905acf6dd6885e009831911cf1">Scheduler::OnInit</a></span> and calls made after this point will be run immediately.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">i_pfn</span></td>
    <td>The Lua module initialization method </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_scheduler_lua_1a2d13e06ca4f7c7c784f7af71ca787c59"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont"><a href="../efd/efd__list.htm">efd::list</a></span>&lt;<span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>&gt;  DumpLuaStack(<br/>lua_State* L = ms_currentState, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& prefix = efd::utf8string::NullString())</p>
<p class="NDLRefMemberDescription">Helper function to get the current Lua stack as a list of utf8strings. </p>

<a name="classegf_1_1_scheduler_lua_1a5cd0d0984a85cc853715176661df7dba"></a>
<p class="NDLRefMemberFunction">static void  AddAssetLocations(<br/>lua_State* state, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__AssetLocatorResponse.htm">efd::AssetLocatorResponse</a></span>* pMessage)</p>
<p class="NDLRefMemberDescription">Helper to add locations found in an AssetLocatorResponse to the LUA_PATH. </p>

<a name="classegf_1_1_scheduler_lua_1abd442646a7ae71313e8613a31dd4533b"></a>
<p class="NDLRefMemberFunction">static void  LuaError(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& msg = efd::utf8string::NullString(), <br/>lua_State* L = ms_currentState)</p>
<p class="NDLRefMemberDescription">Generate a Lua error message in the provided lua_State. </p>

<a name="classegf_1_1_scheduler_lua_1a8fe415357aa26e45b85782e3b634d55c"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  GetGlobalTable(lua_State* L)</p>
<p class="NDLRefMemberDescription">Get the global 'Emergent' Lua table from the given Lua state. </p>
<p class="NDLRefMemberDetailedDescription">Lua stack in: {any}</p>
<p class="NDLRefMemberDetailedDescription">Lua stack out: {any} [-1] 'Emergent' global Lua table, or no value if not found.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">L</span></td>
    <td>lua_State to look for the table. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>true if the table was found, false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_1_1_scheduler_lua_1a10bf2a8476e623e05bbb2040a5f57e0e"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">SchedulerLua</span>*  GetSchedulerLua(lua_State* L)</p>
<p class="NDLRefMemberDescription">Obtain 'this' from the Emergent global table found in the provided lua_State. </p>
<a name="construction_and_destruction"></a>
<p class="NDLRefHead1">Construction and Destruction</p>


<a name="classegf_1_1_scheduler_lua_1a2fa9cdea6d27a4af83fffdb4fd360c8c"></a>
<p class="NDLRefMemberFunction">virtual ~SchedulerLua()</p>
<p class="NDLRefMemberDescription">Virtual destructor. </p>

<a name="classegf_1_1_scheduler_lua_1a66d36a4ab8ab981e2c315e0b8ab4281a"></a>
<p class="NDLRefMemberFunction">SchedulerLua()</p>
<p class="NDLRefMemberDescription">Default constructor. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
