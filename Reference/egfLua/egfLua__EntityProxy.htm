<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>egfLua::EntityProxy</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">egfLua::EntityProxy</p>


<p class="NDLRefHeaderFile">&lt;EntityProxyLua.h&gt;</p>


<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">egfLua::Entity : A Lua proxy to a Game Framework <span class="NDLSystemFont"><a href="../egf/egf__Entity.htm">egf::Entity</a></span> instance. </p>
<p class="NDLNormal">The egfLua::Entity is a proxy object that exposes specific entity attributes to the Lua runtime. The runtime will automatically create an instance of this proxy each time an Entity / <span class="NDLSystemFont"><a href="../efd/EntityID.htm">EntityID</a></span> is passed from C++ to Lua.</p>
<p class="NDLNormal">Each Entity's proxy is passed directly to each behavior as the 'self' parameter.</p>
<p class="NDLNormal">If you have a UInt64 value that represents an <span class="NDLSystemFont"><a href="../efd/EntityID.htm">EntityID</a></span>, you can obtain an Entity proxy object by calling Emergent:GetEntity(UInt64). (BehaviorAPI.GetEntityById will also work.)</p>
<p class="NDLNormal">Typemaps exist that will automatically convert a proxy instances to and from an <span class="NDLSystemFont"><a href="../efd/EntityID.htm">EntityID</a></span>, as needed, when making built-in API calls.</p>
<p class="NDLNormal">The proxy defined the following Lua constants:</p>
<ul>
<li>Entity.InvalidEntity -- Represents an invalid <span class="NDLSystemFont"><a href="../efd/EntityID.htm">EntityID</a></span>, used to determine whether a specific proxy is valid.</li></ul>
<p class="NDLNormal">The proxy defines the following Lua attributes:</p>
<ul>
<li>ID -- The <span class="NDLSystemFont"><a href="../efd/EntityID.htm">EntityID</a></span> as a UInt64 value.</li></ul>
<p class="NDLNormal">The proxy defines the following additional functions:</p>
<ul>
<li>Clone -- Create another instance of this Proxy. This does not clone the underlying entity.</li>
<li>"==" -- Return true if this proxy represents the same entity as another proxy.</li>
<li>IsBound -- Returns true if this proxy is bound to a C++ entity. A proxy remains unbound until the Entity's OnCreate life cycle completes.</li>
<li>GetPrivateCatID -- Get the private category ID for the entity.</li>
<li>ContainsProperty -- Returns true if the Entity has the provided property.</li>
<li>ContainsPropertyWithKey -- Returns true if the Entity has a assocated array property with the provided key.</li>
<li>ContainsBehavior -- Returns true if the Entity has the provided behavior.</li>
<li>ContainsMixin -- Returns true if the Entity has the provided Mixin model.</li>
<li>GetModelName -- Returns the name of the flat model used by this Entity.</li>
<li>GetPropertyNames -- Returns a table containing the names of all the Entity's properties.</li>
<li>ResetProperty - Reset an Entity property back to initial conditions.</li>
<li>EnterWorld -- Request the Entity enters the world.</li>
<li>ExitWorld -- Request the entity exits the world.</li>
<li>SendEvent -- Sends an event to the proxy entity</li>
<li>tostring -- Returns a pretty-printable string representing this Entity.</li></ul>
<p class="NDLNormal">In addition, each Entity's properties are exposed in Lua directly using __index and __newindex metamethods. This allows Entity properties to be read/written without having to make <span class="NDLSystemFont"><a href="../Namespaces/BehaviorAPI.htm">BehaviorAPI</a></span> function calls. For example, if an entity has property 'Position' defined as a Point3 value, you can set/get it as follows:</p>
<p class="NDLNormal">
<pre>        local position = self.Position    -- Entity['Position'] also works.
        print(tostring(position))         -- calls Point3's __tostring metamethod.

        local newPosition = Point3.Point3(1,2,3)
        self.Position = newPosition       -- Could also pass a table { 1, 2, 3 }
        print(tostring(entity.Position))  -- prints 'Point3(1, 2, 3)'
</pre>
</p>
<p class="NDLNormal">Associative array properties are also bound using this proxy. Once again you can get/set/erase array entries without making <span class="NDLSystemFont"><a href="../Namespaces/BehaviorAPI.htm">BehaviorAPI</a></span> function calls. For example, if an entity has a list property named 'Nicknames' defined as a list of strings, you can manipulate it as follows:</p>
<p class="NDLNormal">
<pre>        local nicknames = self.Nicknames  -- 'table' with __index and __newindex methods.

        print(tostring(nicknames))        -- prints out something like 'Array Nicknames[10]'
        print(tostring(nicknames[0]))     -- prints the nickname a position 0.

        nicknames[0] = &quot;Enlightened&quot;      -- updates the array value at index 0.
        print(tostring(nicknames[0]))     -- prints 'Enlightened'

        local keys = nicknames:Keys()     -- Obtain all the keys for this associative array.

        for _, key in pairs(keys) do
            -- print out all the array values
            print(&quot;Nicknames[&quot;..key..&quot;] = &quot; .. tostring(nicknames[key]))
        end

        nicknames[0] = nil                -- Remove the key and value from index 0.
</pre>
</p>

 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
