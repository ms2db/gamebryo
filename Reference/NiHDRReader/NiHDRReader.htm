<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiHDRReader</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiHDRReader</p>

<p class="NDLRefParentage">: public <span><a href=
"../../Reference/NiMain/NiImageReader.htm">NiImageReader</a></span></p>

<p class="NDLRefHeaderFile">&lt;NiHDRReader.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>The <span class="NDLSystemFont">NiHDRReader</span> is a
subclass of the abstract <span class=
"NDLSystemFont">NiImageReader</span> class. It implements a
subset of the requirements in the full <a href=
"http://radsite.lbl.gov/radiance/refer/filefmts.pdf" target=
"_blank">specification</a> (see the heading under .pic files) of
Radiance's High Dynamic Range (HDR) image format. The supported
features are the ability to read in both RLE and non-RLE encoded
HDR files as well as flipped images. Rotated images are not
supported and will be silently read in as being flipped. No
fields are read from the header other than the resolution and
orientation information.</p>

<p>Most applications will not use this class, and therefore it is
not by default included in the <span class=
"NDLSystemFont">NiDevImageConverter</span> class. This class also
depends on the D3DX libraries to do conversion from floats to
halfs (16-bit floating point numbers). Unless the application
explicitly links in the NiHDRReader library and adds the reader,
<span class="NDLSystemFont">NiDevImageConverter</span> will not
have the capability of loading .hdr files. <span class=
"NDLSystemFont">NiHDRReader</span> is used by default in both the
Gamebryo 3ds Max Plugin and the Gamebryo Maya Plugin. Therefore,
Radiance HDR images may be used freely in both Max and Maya and
can be exported into natively supported NiPixelData assets.</p>

<p>This class always export textures in <span class=
"NDLSystemFont">NiPixelFormat::RGBA64</span> format. This is
because Gamebryo (and graphics cards) do not natively support the
8-bit per component + 8-bit shared exponent format of the
Radiance HDR image format. Choosing 16-bit half-floats over
32-bit floats is a design decision. Half-floats have a 5-bit
mantissa, so the tradeoff for choosing 32-bit floats is an
additional three bits of mantissa precision, but at the cost of
the textures doubling in size. For that reason, only the 16 bits
per pixel format is supported.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">virtual bool CanReadFile(const
char* pcFileExtension) const</p>

<p class="NDLRefMemberDescription">Returns true if the given
extension is <span class="NDLSystemFont">.hdr</span>, and false
otherwise. The base class interface uses this virtual function to
determine whether a generic image loader can load a given
file.</p>

<p class="NDLRefMemberFunction">virtual NiPixelData*
ReadFile(NiFile&amp; kIst, NiPixelData* pkOptDest)</p>

<p class="NDLRefMemberDescription">Reads the given file (assuming
that it is a valid HDR image file) and returns the data from the
file as a flat <span class="NDLSystemFont">NiPixelData</span>
object. The output pixel format will always be <span class=
"NDLSystemFont">NiPixelFormat::RGBA64,</span>.</p>

<p class="NDLRefMemberFunction">virtual bool
ReadHeader(NiFile&amp; kIst, unsigned int&amp; uiWidth,
unsigned int&amp; uiHeight, NiPixelFormat&amp; kFormat,
bool&amp; bMipmap)</p>

<p class="NDLRefMemberDescription">Returns <span class=
"NDLSystemFont">true</span> if the file appears to be valid and
readable by the reader object and <span class=
"NDLSystemFont">false</span> otherwise. If the function returns
true, the <span class="NDLSystemFont">uiWidth</span> and
<span class="NDLSystemFont">uiHeight</span> parameters will
contain the width of the image file and the height of the image
file. The <span class="NDLSystemFont">kFormat</span> parameter
will always be <span class=
"NDLSystemFont">NiPixelFormat::RGBA64,</span> and <span class=
"NDLSystemFont">bMipmap</span> will always be false. The calling
function should not rely on the position of the file pointer
following a call to this function.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
