<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>MangledMetal</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">MangledMetal</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../efd/efd__ISystemService.htm">efd::ISystemService</a></span></p>


<p class="NDLRefHeaderFile">&lt;MangledMetal.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/class_mangled_metal.gif" alt="Inheritance graph for MangledMetal"/>
  <p class="FigureCaption">Inheritance graph for MangledMetal</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">The <span class="NDLSystemFont">MangledMetal</span> class is the main class for the game. </p>
<p class="NDLNormal">It is a valid SystemService instantiation so it gets regular ticks from the framework. </p>

<a name="public_types"></a>
<p class="NDLRefHead1">Public Types</p>
<a name="class_mangled_metal_1a0c64778635efc038dc827587f61c8e3a"></a>
<p class=NDLRefHead2>MangledMetal::GameType</p>


<p class="NDLRefMemberDescription">Game type flags. </p>

<p class="NDLRefMemberDetailedDescription">Specifies Single Player only for now. Can enable/disable rapid iteration and remote debugging as well. </p>

<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">GameTypeSinglePlayer</span></td>
    <td>&nbsp;</td>
</tr>
<tr>
    <td><span class="NDLSystemFont">GameTypeAdvancedDebugging</span></td>
    <td>&nbsp;</td>
</tr>

  </tbody>
</table>
</div>


<a name="public_static_attributes"></a>
<p class="NDLRefHead1">Public Static Attributes</p>


<a name="class_mangled_metal_1a4df6d29b090e52b4fab7dc148b192f2a"></a>
<p class="NDLRefMemberFunction">static const char  m_titleName[]</p>
<p class="NDLRefMemberDescription">The name of this game. </p>
<p class="NDLRefMemberDetailedDescription">Used for debug logs and generating the <span class="NDLSystemFont"><a href="../efd/SystemUniqueIndex.htm">SystemUniqueIndex</a></span>. </p>

<a name="class_mangled_metal_1a93b51a039b18a9641678f79f6b8d7d33"></a>
<p class="NDLRefMemberFunction">static efd::SystemUniqueIndex  m_uniqueIndex</p>
<p class="NDLRefMemberDescription">Used to generate a unique index for log file names. </p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="class_mangled_metal_1ae19b54d97ef06de78c42d752fd777db9"></a>
<p class="NDLRefMemberFunction">MangledMetal(<span class="NDLSystemFont"><a href="MangledMetal.htm#class_mangled_metal_1a0c64778635efc038dc827587f61c8e3a">GameType</a></span> gameType)</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_mangled_metal_1ac331f79a40798a909daa88a4cbed2760"></a>
<p class="NDLRefMemberFunction">virtual ~MangledMetal()</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_mangled_metal_1abdbe0e7d5469cf1299e070b7de08a347"></a>
<p class="NDLRefMemberFunction">virtual void  DoQuit(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm">efd::SInt32</a></span> rc = 0)</p>
<p class="NDLRefMemberDescription">Public method that requests that we end the game. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">rc</span></td>
    <td>Allows the user to set a return code if desired; defaults to 0. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_mangled_metal_1ab05f980cdf98a95b4c3a68e289ee06c6"></a>
<p class="NDLRefMemberFunction">virtual void  GetMachineTimeStamp(<br/>char* timeStampBuffer, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm">efd::UInt32</a></span> bufferSize) const = 0</p>
<p class="NDLRefMemberDescription">Get a timestamp for logging purposes. </p>
<p class="NDLRefMemberDetailedDescription">This is a platform-specific function implemented in MangledMetal_&lt;platform&gt;.cpp. </p>

<a name="class_mangled_metal_1a890665ed170ff9f7adab9bb7cb054b29"></a>
<p class="NDLRefMemberFunction">virtual void  AppMemoryReport(<br/>const char* where, <br/><span class="NDLSystemFont"><a href="../efd/efd__File.htm">efd::File</a></span>* pkOutFile)</p>
<p class="NDLRefMemberDescription">Generate a custom memory report on the current platform. </p>
<p class="NDLRefMemberDetailedDescription">Report on the amount of available memory. Platforms may choose to implement a platform- specific report by overriding this function. The default base-level function does nothing.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">where</span></td>
    <td>A text tag giving some context for where the report is being generated. May be NULL. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkOutFile</span></td>
    <td>A file pointer. If not NULL, the report will be written to the specified file, in addition to being printed via EE_LOG. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_mangled_metal_1adcb5a0f5229532dba410ae1e9f6ecd27"></a>
<p class="NDLRefMemberFunction">virtual void  AppServiceReport(<br/>const char* where, <br/><span class="NDLSystemFont"><a href="../efd/efd__File.htm">efd::File</a></span>* pkOutFile)</p>
<p class="NDLRefMemberDescription">Generate a custom service time report on the current platform. </p>
<p class="NDLRefMemberDetailedDescription">This report breaks down time spent in each system service. Platforms may choose to implement a platform-specific report in addition to or instead of the main <span class="NDLSystemFont">MangledMetal</span> report by overriding this function.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">where</span></td>
    <td>A text tag giving some context for where the report is being generated. May be NULL. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkOutFile</span></td>
    <td>A file pointer. If not NULL, the report will be written to the specified file, in addition to being printed via EE_LOG. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_mangled_metal_1afa439a3d1d6d8f16a45b474bc4678f20"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  GetCommandLineArgs(<br/>int& argc, <br/>char **& argv) = 0</p>
<p class="NDLRefMemberDescription">Get the command-line arguments for this invocation, if available. </p>
<p class="NDLRefMemberDetailedDescription">This is a platform-specific function implemented in MangledMetal_&lt;platform&gt;.cpp.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">argc</span></td>
    <td>On input, this gives the max number of arguments that argv can handle. On output, it is the actual number of arguments. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">argv</span></td>
    <td>The returned list of arguments. argv[0] is the command name. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_mangled_metal_1a3871e18ed8283ede8daf802a4861963b"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm">efd::InstanceRef</a></span>  GetInstanceRef() const = 0</p>
<p class="NDLRefMemberDescription">Get the instance ref, if there is one. </p>
<p class="NDLRefMemberDetailedDescription">This is a platform-specific function implemented in MangledMetal_&lt;platform&gt;.cpp. </p>

<a name="class_mangled_metal_1abc321b80c49a0add2311e70dc0c461c1"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm">efd::WindowRef</a></span>  GetWindowRef() const = 0</p>
<p class="NDLRefMemberDescription">Get the window ref, if there is one. </p>
<p class="NDLRefMemberDetailedDescription">This is a platform-specific function implemented in MangledMetal_&lt;platform&gt;.cpp. </p>

<a name="class_mangled_metal_1a71fc0a750859cdf5d399f1a715cf0534"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  Initialize()</p>
<p class="NDLRefMemberDescription">Initialize the program. </p>

<a name="class_mangled_metal_1a6a4c6c357b6d832783f17b19fd7f9ef4"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  Run()</p>
<p class="NDLRefMemberDescription">Run the program. </p>
<p class="NDLRefMemberDetailedDescription">This function does not return until the game has exited. </p>

<a name="class_mangled_metal_1acef2066ebb720057dcc2f745f7a938e1"></a>
<p class="NDLRefMemberFunction">virtual const char*  GetDisplayName() const</p>
<p class="NDLRefMemberDescription">Returns the name of this service. </p>
<p class="NDLRefMemberDetailedDescription">This name is used mainly for improving the readability of various log statements and has no impact on functionality. Service names are not guaranteed to be unique.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>const char* Display name for the current service. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_mangled_metal_1aa029ddae615550b8a3eaed3e31e4d1d8"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__Logger.htm">efd::Logger</a></span>*  StartLogging()</p>
<p class="NDLRefMemberDescription">Start logging. </p>

<a name="class_mangled_metal_1a36528aa44425862e639560977e8f7f01"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__Float16.htm">efd::Float16</a></span>  GetMaxRunTime() const</p>
<p class="NDLRefMemberDescription">Get the maximum allowable run time, in seconds. </p>
<p class="NDLRefMemberDetailedDescription">If the max run time is a nonzero value, the program will exit when it runs that long. Useful for running regression tests that should exit after a specific period of time. </p>

<a name="class_mangled_metal_1a536bbe3035bb5f3c2f01194158dc4c23"></a>
<p class="NDLRefMemberFunction">void  ReportServiceTimes()</p>
<p class="NDLRefMemberDescription">Produce a report on which services consumed how much time during the reporting period. </p>
<p class="NDLRefMemberDetailedDescription">The accumulated statistics can be reset by calling ServiceManager::ResetAccumulatedServiceTimes(). </p>

<a name="class_mangled_metal_1a6105d8145a0421767377d89d16bda273"></a>
<p class="NDLRefMemberFunction">void  ResetFrameRateCalc()</p>
<p class="NDLRefMemberDescription">Reset the variables by which we calculate the running frame rate. </p>
<p class="NDLRefMemberDetailedDescription">The total number of frames and the total time will be reset to zero. </p>

<a name="class_mangled_metal_1a86c5d17741d1043d86174d7ad8dc2515"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm">efd::Float32</a></span>  GetFrameRate() const</p>
<p class="NDLRefMemberDescription">Get the calculated frame rate. </p>

<a name="class_mangled_metal_1a0ffd80dda359c6f664148c5ab74ac4df"></a>
<p class="NDLRefMemberFunction">void  EnableShadows(<span class="NDLSystemFont">efd::Bool</span> enableShadows)</p>
<p class="NDLRefMemberDescription">Enable or disable shadows. </p>

<a name="class_mangled_metal_1ade300f0e256ae65c5001a1dff8d8fc3c"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  GetEnableShadows() const</p>
<p class="NDLRefMemberDescription">Get shadow state. </p>

<a name="class_mangled_metal_1a1e63e6ef565c93098b7f0aec15af0557"></a>
<p class="NDLRefMemberFunction">void  SnapshotAllocations()</p>
<p class="NDLRefMemberDescription">Snapshot memory allocations. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
