<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiFont Overview</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>NiFont Overview</h1>

<p>The <span class="NDLSystemFont">NiFont</span> library provides
the ability to display dynamically generated ASCII and Unicode
strings using Windows fonts. It includes both the utility
functions for font generation, and the run-time functions for
displaying the font in an application. <span class=
"NDLSystemFont">NiFont</span> operates on Gamebryo Font Files
(NFF), which are created by the <span class=
"NDLSystemFont"><a href=
"../../Tools/NiFontCreator/NiFontCreator_Intro.htm">NiFontCreator</a></span>
tool.</p>

<p>Assuming <span class="NDLSystemFont">m_spRenderer</span>
points to the application's instance of <span class=
"NDLSystemFont">NiRenderer</span>, the following sample code
demonstrates creation of an <span class="NDLSystemFont"><a href=
"NiFont.htm">NiFont</a></span> from a Gamebryo font file named
<span class="NDLSystemFont">"ComicSansMS14.NFF"</span>, and
creation of an <span class="NDLSystemFont"><a href=
"Ni2DString.htm">Ni2DString</a></span> object that uses that
font:</p>
<pre>
NiFontPtr spFont = NiFont::Create(m_spRenderer, "ComicSansMS14.NFF");
NIASSERT(spFont != NULL);
 
NiColorA kRed(1.0f, 0.0f, 0.0f, 1.0f);
m_spTestString = NiNew Ni2DString(m_spFont,
    NiFontString::COLORED | NiFontString::CENTERED,
    32, "Test String\nTwo Lines", kRed, 320, 240);
</pre>

<p>The string created by this code has a maximum length of 32
characters, is initialized to display the text "Test String\nTwo
Lines" in red text, and will be displayed centered about the
pixel position (320, 240).</p>

<p>The following code will render the string to the screen:</p>
<pre>
if (m_spTestString)
    m_spTestString-&gt;Draw(m_spRenderer);
</pre>

<p>Normally, this code would be inserted after all the 3D
geometry has been rendered, but still between a call to
<span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiRenderer.htm#Render_Target_Access_Management">
NiRenderer::BeginUsingRenderTargetGroup</a></span> and a
subsequent call to <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiRenderer.htm#Render_Target_Access_Management">
NiRenderer::EndUsingRenderTargetGroup</a></span>, such as in the
function <span class=
"NDLSystemFont">NiApplication::RenderScreenItems</span>.</p>

<h2>Selecting the right font</h2>

<p>There are some important but subtle issues that should be
considered when selecting a font, aside from the aesthetics.
Unicode glyphs are broken up into families (Latin, Chinese,
Korean, Japanese, Russian, etc.) and a font may only implement
some font families. For example, the font SimHei only implements
basic Latin and the CJK ideographs. SimHei could be used to
display English or Chinese but not German or Russian, because the
font itself can't create those glyphs. Furthermore, a font is not
required to use anti-aliasing. A font may use anti-aliasing on
only some point sizes, so you should scrutinize the results to
verify you are getting the results you expect.</p>

<h2>Drawing Quality</h2>

<p>Selecting an anti-aliased font will often result in the best
quality. Note that some fonts do not use anti-aliasing,
however.</p>

<p><span class="NDLSystemFont"><a href=
"Ni2DString.htm">Ni2DString</a></span> creates 2D <span class=
"NDLSystemFont">NiMeshScreenElements</span> geometry that will
display a text string using a Unicode or Ascii font defined in an
<span class="NDLSystemFont">NiFont</span> object. Additionally,
<span class="NDLSystemFont"><a href=
"Ni2DString.htm">Ni2DString</a></span> enables you to dynamically
scale glyphs to any point size, but if the pixels are scaled too
much, the display quality will be impacted.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
