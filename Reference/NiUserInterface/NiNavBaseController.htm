<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiNavBaseController</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiNavBaseController</p>

<p class="NDLRefParentage">: public <a href=
"../../Reference/NiMain/NiRefObject.htm">NiRefObject</a></p>

<p class="NDLRefHeaderFile">&lt;NiNavBaseController.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiNavBaseController</span>
implements some basic functionality of all <span class=
"NDLSystemFont">NiNav*Controller</span> classes. Several pure
virtual functions occur in this class, which are implemented in
derived classes. Each controller has several controls defined by
a derived class. These controls are independent pieces of
functionality that can be mapped to a user-interface action.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiNavBaseController(const char*
pcName)</p>

<p class="NDLRefMemberDescription">This constructor initializes
all member variables to assumed starting values, and makes a deep
copy of the variable <span class=
"NDLSystemFont">pcName</span>.</p>

<p class="NDLRefHead1">Supported Enumerations</p>

<p>The <span class="NDLSystemFont">NiNavBaseController</span>
contains the following enumerated types. It is used by derived
classes in communicating with <span class=
"NDLSystemFont">NiNavBaseController</span>. It is detailed
below:</p>

<a name=
"NiNavBaseController__InputTypes" id="NiNavBaseController__InputTypes"></a><p class="NDLRefMemberFunction">protected NiNavBaseController::InputTypes</p>

<p class="NDLRefMemberDescription">The following enumerated
values allow a single character to describe which of the
following input types are supported by an operation. This is used
by the <span class="NDLSystemFont"><a href=
"NiNavBaseController.htm#Inputbinding">InputBinding</a></span>
class defined below. For mouse and Gamepad controls, an action
can only listen on an axis or use a button, but not both. The
following values are supplied:</p>

<!--(Table)=========================================================-->

<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Name</th>

                <th>Value</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td>InputKeyboard</td>

                <td>0x01</td>

                <td>If this bit is set, this action supports a
                keyboard hotkey. The members e<span class=
                "NDLSystemFont"><a href=
                "NiNavBaseController.htm#Inputbinding">KeyboardKey</a></span>
                and <span class="NDLSystemFont"><a href=
                "NiNavBaseController.htm#Inputbinding">eKeyboardModifier</a></span>
                must be set to valid values if this bit is
                set.</td>
            </tr>

            <tr>
                <td>InputMouseAxis</td>

                <td>0x02</td>

                <td>If this bit is set, this action expects to
                listen on a mouse axis. The member <span class=
                "NDLSystemFont"><a href=
                "NiNavBaseController.htm#Inputbinding">eMouseAxis</a></span>
                must be set to a valid value if this bit is set.
                If this bit is set for a positive navigation
                control, it must also be set for the negative
                direction.</td>
            </tr>

            <tr>
                <td>InputMouseButton</td>

                <td>0x04</td>

                <td>If this bit is set, this action supports a
                mouse button as a hotkey. The members
                <span class="NDLSystemFont"><a href=
                "NiNavBaseController.htm#Inputbinding">eMouseButton</a></span>
                and <span class="NDLSystemFont"><a href=
                "NiNavBaseController.htm#Inputbinding">eMouseModifier</a></span>
                must be set to valid values if this bit is
                set.</td>
            </tr>

            <tr>
                <td>InputGamePadAxis</td>

                <td>0x08</td>

                <td>If this bit is set, this action expects to
                listen on a Gamepad axis. The member <span class=
                "NDLSystemFont"><a href=
                "NiNavBaseController.htm#Inputbinding">eGamePadAxis</a></span>
                must be set to a valid value if this bit is set.
                If this bit is set for a positive control, it
                must also be set for the negative direction.</td>
            </tr>

            <tr>
                <td>InputGamePadButton</td>

                <td>0x10</td>

                <td>If this bit is set, this action supports a
                GamePad button as a hotkey. The members
                <span class="NDLSystemFont"><a href=
                "NiNavBaseController.htm#Inputbinding">eGamePadButton</a></span>
                and <span class="NDLSystemFont"><a href=
                "NiNavBaseController.htm#Inputbinding">eGamePadModifier</a></span>
                must be set to a valid value if this bit is set.
                Optionally, the <span class=
                "NDLSystemFont"><a href=
                "NiNavBaseController.htm#Inputbinding">eGamePadOptionalModifier</a></span>
                can also be set.</td>
            </tr>
        </tbody>
    </table>
</div>

<p class="NDLRefMemberFunction">public
NiNavBaseController::ControlType</p>

<p class="NDLRefMemberDescription">These enumerated values are
used when requesting a specific direction for a navigation
control. For instance, translating forward would be considered a
separate <span class="NDLSystemFont">ControlType</span> from
translating backward although they would be bound to the same
control. See <span class="NDLSystemFont">GetBinding</span> for an
example. The following values are supplied:</p>

<!--(Table)=========================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Name</th>

                <th>Value</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td>NEGATIVE_AXIS</td>

                <td>0</td>
            </tr>

            <tr>
                <td>POSITIVE_AXIS</td>

                <td>1</td>
            </tr>

            <tr>
                <td>DEFAULT</td>

                <td>1</td>
            </tr>
        </tbody>
    </table>
</div>

<p class="NDLRefHead1">Supported Member Functions</p>

<a name="SetActive" id="SetActive"></a><p class="NDLRefMemberFunction">virtual bool SetActive(bool bActive,
NiNavBaseController::NavState&amp; kCurState)</p>

<p class="NDLRefMemberDescription">This function sets this
navigation controller active, although it does not change the
internal state of any single control. If one control is meant to
be shut down, this should be done through the function
<span class="NDLSystemFont">SetControlActive</span>, and this
function will never alter that action. This function handles all
hotkey binding/unbinding necessary to ensure that an active
navigation controller receives its events from the <a href=
"NiUIManager.htm"><span class=
"NDLSystemFont">NiUIManager</span></a>, and an inactive
navigation controller does not.</p>

<p class="NDLRefMemberDescription">This function can return
<span class="NDLSystemFont">false</span> for only 2 reasons:</p>

<ul>
    <li><a href="NiUIManager.htm"><span class=
    "NDLSystemFont">NiUIManager</span></a> has not been
    initialized.</li>

    <li><span class="NDLSystemFont">bActive</span> == true and
    some requested hotkey could not be reserved.</li>
</ul>

<p class="NDLRefMemberDescription">If <span class=
"NDLSystemFont">SetActive(true, ...)</span> returns <span class=
"NDLSystemFont">false</span>, <span class=
"NDLSystemFont">SetActive(false, ...)</span> must still be called
to unreserve any hotkeys properly reserved. This was designed
thus since inability to reserve a single hotkey does not
necessarily impede other proper navigation.</p>

<p class="NDLRefMemberFunction">void SampleAndUpdate()</p>

<p class="NDLRefMemberDescription">This function is called once
per frame on the currently active navigation controller by the
<a href="NiNavManager.htm"><span class=
"NDLSystemFont">NiNavManager</span></a>. This function samples
all reserved axes, passing the proper information to derived
classes through the <a href="#MouseInput"><span class=
"NDLSystemFont">MouseInput</span></a> and <a href=
"#GamepadInput"><span class=
"NDLSystemFont">GamePadInput</span></a> functions. Note that the
<a href="NiUIManager.htm"><span class=
"NDLSystemFont">NiUIManager</span></a> properly samples buttons
sending information when one is active. If this function is
called by some other entity than the <a href=
"NiNavManager.htm"><span class=
"NDLSystemFont">NiNavManager</span></a>, it may lead to improper
navigation effects.</p>

<p class="NDLRefMemberFunction">const NiString&amp; GetName()
const</p>

<p class="NDLRefMemberDescription">Returns the name passed in to
the constructor. This name will be displayed when this navigation
controller is active.</p>

<p class="NDLRefMemberFunction">bool IsActive() const</p>

<p class="NDLRefMemberDescription">Returns whether or not the
controller is active.</p>

<p class="NDLRefMemberFunction"><a name="GetControlCount" id=
"GetControlCount">unsigned int GetControlCount() const</a></p>

<p class="NDLRefMemberDescription">Returns the number of controls
associated with this controller.</p>

<p class="NDLRefMemberFunction">virtual bool
IsControlActive(unsigned int uiControlId) const</p>

<p class="NDLRefMemberFunction">virtual bool
SetControlActive(unsigned int uiControlId, bool bActive =
true)</p>

<p class="NDLRefMemberDescription">Get and set whether or not a
given control is active.</p>

<p class="NDLRefMemberFunction">const InputBinding&amp;
GetBinding(unsigned int uiControlId, ControlType eType) const</p>

<p class="NDLRefMemberDescription">Get a specified input binding.
In some cases there are multiple input bindings associated with a
control ID, the control type specifies which binding to use in
this case.</p>

<p class="NDLRefMemberFunction">protected
TranslateAlongAxis(const NiPoint3&amp; kDir, float fAmount, const
NiPoint3&amp; kStartPos, NiPoint3&amp; kEndPos) const</p>

<p class="NDLRefMemberDescription">This function is used by
derived classes to translate along the input axis some given
amount. <span class="NDLSystemFont">kEndPos</span> is the output
from this function.</p>

<p class="NDLRefMemberFunction">protected
GetFrameFromObject(const NiAVObject* kFrameOwner, NiPoint3&amp;
kForward, NiPoint3&amp; kRight, NiPoint3&amp; kUp) const</p>

<p class="NDLRefMemberDescription">This function may be used by
derived classes. Given <span class=
"NDLSystemFont">kFrameOwner</span>, which has some orientation,
the input vectors are set with the appropriate directions.</p>

<p class="NDLRefMemberFunction">protected CreateNewFrame(const
NiPoint3&amp; kOldForward, const NiPoint3&amp; kOldUp, float
fRotUpAmt, const NiPoint3&amp; kNewForward, NiPoint3&amp;
kNewRight, NiPoint3&amp; kNewUp) const</p>

<p class="NDLRefMemberDescription">This function may be used by
derived classes. Given the old frame and the new look direction
(<span class="NDLSystemFont">kNewForward</span>), this returns
the remainder of the new frame. Under large rotations, where
<span class="NDLSystemFont">kNewForward</span> is nearly
coincident with +/- <span class="NDLSystemFont">kOldUp</span>,
the rotation amount in the up direction must be known, so
<span class="NDLSystemFont">fRotUpAmt</span> is passed in, with
negative values indicating turning down. This function may return
the wrong frame if rotations exceed 180 degrees.</p>

<p class="NDLRefHead1">Pure Virtual Member Functions</p>

<p>Each of the following functions must be implemented by derived
classes. Each is called either by functions in this class or by
the <span class="NDLSystemFont"><a href=
"NiNavManager.htm">NiNavManager</a></span>. All functions are
protected. All actions are assigned an integer value between 0
and <span class="NDLSystemFont"><a href=
"#GetControlCount">GetControlCount()</a></span>.</p>

<p class="NDLRefMemberFunction">public virtual const char*
GetControlName(unsigned int uiControlId) const = 0</p>

<p class="NDLRefMemberDescription">This name will be placed in
the label which describes the functionality of the
controller.</p>

<p class="NDLRefMemberFunction">protected virtual void
UpdatePose() = 0</p>

<p class="NDLRefMemberDescription">This function is called each
frame to incorporate recent input into the pose (orientation and
location) of the controlled object.</p>

<a name="MouseInput" id="MouseInput"></a><p class="NDLRefMemberFunction">virtual void MouseInput(unsigned int uiControlId,
float fDelta) = 0</p>

<p class="NDLRefMemberDescription">This function is called every
frame that non-zero mouse input is received from moving the mouse
or mouse wheel. Note that <span class=
"NDLSystemFont">fDelta</span> contains change in position instead
of absolute position. This value has also been scaled to be near
the range [-1..1], although it may be somewhat larger. In order
for this function to be called, the left mouse button must be
pressed and held during the duration of motion. If the initial
mouse press occurred over an active UI element, the motion
information is not sent. See <a href=
"Mouse_Actions.htm">NiUserInterface Mouse Actions</a> for more
details on mouse motion in the UI system.</p>

<a name="GamepadInput" id=
"GamepadInput"></a><p class="NDLRefMemberFunction">virtual void GamePadInput(unsigned int uiControlId, float fDelta) = 0</p>

<p class="NDLRefMemberDescription">This function is called every
frame that non-zero GamePad input is received from a reserved
analog axis. Note that <span class="NDLSystemFont">fDelta</span>
is scaled to the range [-1..1].</p>

<p class="NDLRefHead1">Nested Structures</p>

<a name="NiNavBaseController::NavState" id="NiNavBaseController::NavState"></a><p class="NDLRefHead2">NiNavBaseController::NavState</p>

<pre class="indent1">
struct NiNavBaseController::NavState
{
    NiAVObject* pkReferenceObject;
    float fScale;
    bool bIgnoreThis;
};
</pre>

<p class="indent1">This struct is used to pass information
between various <span class=
"NDLSystemFont">NiNav*Controllers</span> when they are made
active or inactive. All of these variables are set to proper
values when <span class="NDLSystemFont">SetActive(false,
NavState)</span> is called on a derived controller. When
<span class="NDLSystemFont">SetActive(true, NavState)</span> is
called, the derived controller may use any piece of this
information to maintain uniformity:</p>

<!--(Table)=========================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Variable</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td>pkReferenceObject</td>

                <td>This NiAVObject defines the reference frame
                for the navigation of the controlled object.</td>
            </tr>

            <tr>
                <td>fScale</td>

                <td>Translation speed, orbit radius and other
                similar values are set depending on this
                value.</td>
            </tr>

            <tr>
                <td>bIgnoreThis</td>

                <td>If this value is true, the above information
                is assumed invalid.</td>
            </tr>
        </tbody>
    </table>
</div>

<a name="Inputbinding" id="Inputbinding"></a><p class="NDLRefHead2">Class
NiNavBaseController::Inputbinding</p>

<p class="NDLRefMemberDescription">This class is used to convey
information about hotkeys from inherited classes to functions in
NiNavBaseController as well as to external classes. ucListenTypes
is a bit vector set through the protected <span class=
"NDLSystemFont"><a href=
"#NiNavBaseController__InputTypes">InputTypes</a></span>
enumeration. External classes should use the functions defined
below to discover which inputs are sampled. The remaining are
values enumerated in <span class="NDLSystemFont"><a href=
"../../Reference/NiInput/NiInputKeyboard.htm">NiInputKeyboard</a></span>,
<span class="NDLSystemFont"><a href=
"../../Reference/NiInput/NiInputMouse.htm">NiInputMouse</a></span>,
or <span class="NDLSystemFont"><a href=
"../../Reference/NiInput/NiInputGamePad.htm">NiInputGamePad</a></span>.
As stated previously, an action may bind on an axis or
button/modifier for a specific input device but not both. If the
eGamePadOptionalModifier is set, the input binding will map to an
input of either the eGamePadButton alone or a combination of the
eGamePadButton and eGamePadOptionalModifier.</p>

<p class="NDLRefMemberFunction">InputBinding()</p>

<p class="NDLRefMemberFunction">InputBinding(InputBinding*
pkKey)</p>

<p class="NDLRefMemberDescription">Constructors for the
binding.</p>

<p class="NDLRefMemberFunction">InputBinding operator = (const
InputBinding&amp; kKey)</p>

<p class="NDLRefMemberFunction">bool operator != (const
InputBinding&amp; kKey) const</p>

<p class="NDLRefMemberFunction">bool operator == (const
InputBinding&amp; kKey) const</p>

<p class="NDLRefMemberDescription">Comparison operators for the
binding.</p>

<p class="NDLRefMemberFunction">bool SupportsKeyboard() const</p>

<p class="NDLRefMemberFunction">bool SupportsMouseAxis()
const</p>

<p class="NDLRefMemberFunction">bool SupportsMouseButton()
const</p>

<p class="NDLRefMemberFunction">bool SupportsGamePadAxis()
const</p>

<p class="NDLRefMemberFunction">bool SupportsGamePadButton()
const</p>

<p class="NDLRefMemberDescription">These functions will read the
bit pattern of the <span class=
"NDLSystemFont">ucListenTypes</span> bit array and return the
appropriate value for this <span class=
"NDLSystemFont">InputBinding</span>.</p>

<p class="NDLRefMemberFunction">public members</p>

<p><span class="NDLSystemFont">unsigned char
ucListenTypes</span></p>

<p><span class="NDLSystemFont">NiInputKeyboard::KeyCode
eKeyboardKey</span></p>

<p><span class="NDLSystemFont">NiInputKeyboard::Modifiers
eKeyboardModifier</span></p>

<p><span class="NDLSystemFont">NiInputMouse::Button
eMouseButton</span></p>

<p><span class="NDLSystemFont">NiInputMouse::Modifiers
eMouseModifier</span></p>

<p><span class="NDLSystemFont">NiInputMouse::Axes
eMouseAxis</span></p>

<p><span class="NDLSystemFont">NiInputGamePad::Button
eGamePadButton</span></p>

<p><span class="NDLSystemFont">NiInputGamePad::ButtonMask
eGamePadModifier</span></p>

<p><span class="NDLSystemFont">NiInputGamePad::ButtonMask
eGamePadOptionalModifier</span></p>

<p><span class="NDLSystemFont">NiInputGamePad::DefaultAxis
eGamePadAxis</span></p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
