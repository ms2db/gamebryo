<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiUIBaseSlot</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiUIBaseSlot*</p>

<p class="NDLRefParentage">: public <a href=
"../../Reference/NiSystem/NiMemObject.htm">NiMemObject</a></p>

<p class="NDLRefHeaderFile">&lt;NiUISlot.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiUIBaseSlot0</span>, <span class=
"NDLSystemFont">NiUIBaseSlot1</span>, and <span class=
"NDLSystemFont">NiUIBaseSlot2</span> are three pure virtual
classes which implement much of the base functionality required
for all slots in the UI system. All functions are identical with
the exception of the types input to the functions. Note that
<span class="NDLSystemFont">NiBaseSlot1</span> and <span class=
"NDLSystemFont">NiBaseSlot2</span> are templates allowing for any
input type for the slot functions. For more information on slots
and signals, see the <a href=
"Communication_via_Slots_and_Signals.htm">discussion</a>.</p>

<p>This class is derived by two classes which should suffice for
any single type of callback function: <span class=
"NDLSystemFont"><a href=
"NiUIMemberSlot.htm">NiUIMemberSlot</a></span> and <span class=
"NDLSystemFont"><a href=
"NiUIStaticSlot.htm">NiUIStaticSlot</a></span>. The first
maintains an instance which owns the callback function while the
latter works both with static member functions as well as C-style
functions.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiUIBaseSlot0()</p>

<p class="NDLRefMemberFunction">template &lt;typename
Arg1Type&gt; NiUIBaseSlot1()</p>

<p class="NDLRefMemberFunction">template &lt;typename Arg1Type,
typename Arg2Type&gt; NiUIBaseSlot2()</p>

<p class="NDLRefMemberDescription">Default constructors.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">void
NiUIBaseSlot0::Subscribe(<a href=
"NiUISignal.htm">NiUISignal0</a>* kSignal)</p>

<p class="NDLRefMemberFunction">void
NiUIBaseSlot1::Subscribe(<a href=
"NiUISignal.htm">NiUISignal1</a>&lt;Arg1Type&gt;* kSignal)</p>

<p class="NDLRefMemberFunction">void
NiUIBaseSlot2::Subscribe(<a href=
"NiUISignal.htm">NiUISignal2</a>&lt;Arg1Type, Arg2Type&gt;*
kSignal)</p>

<p class="NDLRefMemberDescription">Adds kSignal to this element's
subscribed set and subscribes this slot to kSignal, if not
already subscribed.</p>

<p class="NDLRefMemberFunction">void
NiUIBaseSlot0::Unsubscribe(<a href=
"NiUISignal.htm">NiUISignal0</a>* kSignal)</p>

<p class="NDLRefMemberFunction">void
NiUIBaseSlot1::Unsubscribe(<a href=
"NiUISignal.htm">NiUISignal1</a>&lt;Arg1Type&gt;* kSignal)</p>

<p class="NDLRefMemberFunction">void
NiUIBaseSlot2::Unsubscribe(<a href=
"NiUISignal.htm">NiUISignal2</a>&lt;Arg1Type, Arg2Type&gt;*
kSignal)</p>

<p class="NDLRefMemberDescription">Removes kSignal from this
element's subscribed set and unsubscribes this slot from kSignal,
if subscribed.</p>

<p class="NDLRefMemberFunction">bool
NiUIBaseSlot0::IsSubscribed(<a href=
"NiUISignal.htm">NiUISignal0</a>* kSignal)</p>

<p class="NDLRefMemberFunction">bool
NiUIBaseSlot1::IsSubscribed(<a href=
"NiUISignal.htm">NiUISignal1</a>&lt;Arg1Type&gt;* kSignal)</p>

<p class="NDLRefMemberFunction">bool
NiUIBaseSlot2::IsSubscribed(<a href=
"NiUISignal.htm">NiUISignal2</a>&lt;Arg1Type, Arg2Type&gt;*
kSignal)</p>

<p class="NDLRefMemberDescription">Determines whether or not this
slot is set up to send events to the specified signal.</p>

<p class="NDLRefMemberFunction">unsigned int NumSubscribed()
const</p>

<p class="NDLRefMemberDescription">Returns the number of
subscribed signal elements.</p>

<p class="NDLRefHead1">Pure Virtual Member Function</p>

<p class="NDLRefMemberFunction"><a name="ReceiveSignal" id=
"ReceiveSignal">virtual void NiUIBaseSlot0::ReceiveSignal() const
= 0</a></p>

<p class="NDLRefMemberFunction">virtual void
NiUIBaseSlot1::ReceiveSignal(Arg1Type Arg1) const = 0</p>

<p class="NDLRefMemberFunction">virtual void
NiUIBaseSlot2::ReceiveSignal(Arg1Type Arg1, Arg2Type Arg2) const
= 0</p>

<p class="NDLRefMemberDescription">This function is called by any
signal to which this slot is subscribed. It should call the
callback function(s) with the input values.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
