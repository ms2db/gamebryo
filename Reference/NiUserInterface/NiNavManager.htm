<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiNavManager</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiNavManager</p>

<p class="NDLRefParentage">: public <a href=
"../../Reference/NiMain/NiRefObject.htm">NiRefObject</a></p>

<p class="NDLRefHeaderFile">&lt;NiNavManager.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiNavManager</span> is a singleton
responsible for proper transition between different <a href=
"NiNavBaseController.htm"><span class=
"NDLSystemFont">NiNavBaseControllers</span></a>, as well as
several UI steps.</p>

<p class="NDLRefHead1">Constructors</p>

<p>There are no public constructors for the <span class=
"NDLSystemFont">NiNavManager</span> class. The functions <a href=
"#Create"><span class="NDLSystemFont">Create</span></a>, <a href=
"#GetNavManager"><span class=
"NDLSystemFont">GetNavManager</span></a>, and <a href=
"#Shutdown"><span class="NDLSystemFont">Shutdown</span></a>
should be used to manage the <span class=
"NDLSystemFont">NiNavManager</span> singleton. At no time should
the application programmer create a smart pointer to the
reference returned from <a href="#GetNavManager"><span class=
"NDLSystemFont">GetNavManager</span></a>, as that can lead to
improper results after calling <a href="#Shutdown"><span class=
"NDLSystemFont">Shutdown</span></a>.</p>

<p class="NDLRefHead1">Static Member Functions</p>

<p class="NDLRefMemberFunction"><a name="Create" id=
"Create">static bool Create()</a></p>

<p class="NDLRefMemberDescription">Returns true if the singleton
was created or already existed. The <a href=
"NiUIManager.htm"><span class=
"NDLSystemFont">NiUIManager</span></a> must be properly created
before this function is called.</p>

<p class="NDLRefMemberFunction"><a name="GetNavManager" id=
"GetNavManager">static NiNavManager* GetNavManager()</a></p>

<p class="NDLRefMemberDescription">Returns the singleton, which
is set to NULL before <a href="#Create"><span class=
"NDLSystemFont">Create</span></a> and after <a href=
"#Shutdown"><span class="NDLSystemFont">Shutdown</span></a>.
Pointers to the address returned here should be considered
temporary, as the singleton could be destroyed by another piece
of code.</p>

<p class="NDLRefMemberFunction"><a name="Shutdown" id=
"Shutdown">static void Shutdown()</a></p>

<p class="NDLRefMemberDescription">Explicitly deletes the
singleton.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">void
AddNavigationController(<a href=
"NiNavBaseController.htm">NiNavBaseController</a>*
pkController)</p>

<p class="NDLRefMemberDescription">Adds the input controller to
the rotation. This function ensures that a controller is only in
the list once. Note that the underlying implementation of the
list of controllers does not preserve order, so as elements are
removed and inserted, round-robin order may change.</p>

<p class="NDLRefMemberFunction">void
RemoveNavigationController(<a href=
"NiNavBaseController.htm">NiNavBaseController</a>*
pkController)</p>

<p class="NDLRefMemberDescription">Removes the input controller
if it is in the rotation. Note that the underlying implementation
of the list of controllers does not preserve order, so as
elements are removed and inserted, round-robin order may
change.</p>

<p class="NDLRefMemberFunction">void Update(float fCurTime)</p>

<p class="NDLRefMemberDescription">This function should be called
only once per frame. It updates the frame timer and tells the
active navigation controller to sample its axes and update its
controlled object. The fCurTime argument is the current time in
seconds.</p>

<p class="NDLRefMemberFunction">float GetFrameTime()</p>

<p class="NDLRefMemberDescription">Returns the time (in seconds)
which passed between this and the previous frame.</p>

<p class="NDLRefMemberFunction">unsigned int
GetNumNavControllers()</p>

<p class="NDLRefMemberDescription">Return the number of
navigation controllers contained within the manager.</p>

<p class="NDLRefMemberFunction">NiNavBaseController*
GetNavControllerAt(unsigned int ui) const</p>

<p class="NDLRefMemberFunction">NiNavBaseController*
GetCurrentNavController() const</p>

<p class="NDLRefMemberFunction">unsigned int
GetCurrentNavControllerIndex() const</p>

<p class="NDLRefMemberFunction">int
GetControllerIdx(NiNavBaseController* pkNavController)</p>

<p class="NDLRefMemberDescription">These three functions may be
used to get information about the any navigation controller.</p>

<p class="NDLRefMemberFunction">void AdvanceController()</p>

<p class="NDLRefMemberDescription">This function should be called
when a different controller is desired. The controllers cycle in
a round-robin fashion.</p>

<p class="NDLRefMemberFunction">void
SetActiveController(NiNavBaseController* pkNavController)</p>

<p class="NDLRefMemberDescription">This function will set the
active controller to the specified controller if the specified
controller isn't already active and exists within the controller
list of the navigation manager.</p>

<p class="NDLRefMemberFunction">void
SubscribeControllerChanged(NiUIBaseSlot1&lt;NiNavBaseController*&gt;
kControllerChangedSlot)</p>

<p class="NDLRefMemberDescription">This slot will be attached to
a signal which is emitted when AdvanceController is called.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
