<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiUIImageButton</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiUIImageButton</p>

<p class="NDLRefParentage">: public <a href="NiUIBaseElement.htm">NiUIBaseElement</a></p>

<p class="NDLRefHeaderFile">&lt;NiUIImageButton.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiUIImageButton</span> 
 implements a simple toggle button which maintains one of two states (pressed 
 or unpressed) changing only when the mouse button or enter button are 
 first pressed. Unlike 
 the <span class="NDLSystemFont"><a href="NiUICheckBox.htm">NiUICheckBox</a></span>, 
 the <span class="NDLSystemFont">NiUIImageButton</span> can not have a hotkey, 
 and only displays an image for its representation, no text.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiUIImageButton()</p>

<p class="NDLRefMemberDescription">This constructor initializes all values 
 to default values.</p>

<p class="NDLRefHead1">Supported Enumerations</p>

<p class="NDLRefMemberFunction"><a name=ImageState>NiUIImageButton::ImageState</a></p>

<ul>
<li>NORMAL</li>
<li>HIGHLIT</li>
<li>NUM_STATES</li>
</ul>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">virtual void Draw(<a href="../../Reference/NiMain/NiRenderer.htm">NiRenderer</a>* 
 pkRenderer)</p>

<p class="NDLRefMemberDescription">This function should be called each frame.</p>

<p class="NDLRefMemberFunction">virtual void SetVisible(bool bVisible)</p>

<p class="NDLRefMemberDescription">Sets whether or not this element is drawn.</p>

<p class="NDLRefMemberFunction">void SetState(bool bToggleState)</p>

<p class="NDLRefMemberFunction">bool GetState() const</p>

<p class="NDLRefMemberDescription">Get and set the state for this image.</p>

<p class="NDLRefMemberFunction">void SetAtlasImageForState(NiUIImageButton::ImageState 
 eState, bool bToggleState, NiUIAtlasMap::UIElement eElement)</p>

<p class="NDLRefMemberDescription">This function must be called to set the 
 image for each of the four possible states: NORMAL + state:true, NORMAL 
 + state:false, HIGHLIT + state:true, HIGHLIT + state:false. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->Default 
 behavior, without this function being called, will not display anything.</p>

<p class="NDLRefMemberFunction">virtual void EnterPressed(unsigned char ucButtonState)</p>

<p class="NDLRefMemberFunction">virtual void LeftMouseButton(unsigned char 
 ucButtonState)</p>

<p class="NDLRefMemberDescription">These properly handle input from the user.</p>

<p class="NDLRefMemberFunction">virtual bool MouseLocation(unsigned int uiMouseX, 
 unsigned int uiMouseY)</p>

<p class="NDLRefMemberDescription">Nearly identical to the parent function, 
 but also sets the button state properly depending on if the mouse is over 
 it.</p>

<p class="NDLRefMemberFunction">void SubscribeToToggleEvent(<a href="NiUIBaseSlot.htm">NiUIBaseSlot1</a>&lt;bool&gt;* 
 kSlot)</p>

<p class="NDLRefMemberDescription">These functions allow application programmers 
 to easily receive any of the above events. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></p>

<p class="NDLRefMemberFunction">virtual bool SetFocus(bool bFocus)</p>

<p class="NDLRefMemberDescription">Beyond parent functionality, this function 
 also sets the button highlight color properly.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
