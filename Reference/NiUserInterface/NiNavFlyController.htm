<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiNavFlyController</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiNavFlyController</p>

<p class="NDLRefParentage">: public <a href=
"NiNavBaseController.htm">NiNavBaseController</a></p>

<p class="NDLRefHeaderFile">&lt;NiNavFlyController.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiNavFlyController</span> "flies"
an object around a scene, with the ability to translate along the
look axis as well as strafing in the horizontal direction. The
translation speed may be smoothly increased or decreased to allow
for changes in translation scale. The object may also rotate in
"yaw" and "pitch". This controller translates a controlled object
within the frame of a reference object, which may be the same as
the controlled object.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiNavFlyController(<a href=
"../../Reference/NiMain/NiAVObject.htm">NiAVObject</a>*
pkReferenceObject, <a href=
"../../Reference/NiMain/NiAVObject.htm">NiAVObject</a>*
pkControlledObject, const char* pcName, float fScale, <a href=
"../../Reference/NiMain/NiPoint3.htm">NiPoint3</a> kUpVector =
NiPoint3::ZERO, bool bFlipPitch = false, bool bFlipYaw =
false)</p>

<p class="NDLRefMemberDescription">This initializes all member
variables properly. If <span class=
"NDLSystemFont">kUpVector</span> has non-zero length, it enforces
a constraint of an up vector on all orientation as well as a
maximum rotation angle. If no constraint is desired, leave the
default value of (0, 0, 0).</p>

<p class="NDLRefHead1">Supported Enumerations</p>

<a name="Controls" id="Controls"></a><p class="NDLRefMemberFunction">NiNavFlyController::Controls</p>

<p class="NDLRefMemberDescription">These assign a separate value
(in the range [0.. FLY_NUM_CONTROLS]) to each allowed action.
When referring to any action, these values should be used. The
following values are supplied:</p>

<div class="ReferenceTable">
    <!--(Table)=========================================================-->

    <table>
        <thead>
            <tr>
                <th>Name</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td>SCALE_CHANGE</td>

                <td>This control will geometrically increase or
                decrease the speed at which translations occur.
                Rotation speed remains invariant under a scale
                change.</td>
            </tr>

            <tr>
                <td>YAW_LOOK</td>

                <td>Responsible for orientation change left-right
                (i.e. looking around when a camera is
                controlled).</td>
            </tr>

            <tr>
                <td>PITCH_LOOK</td>

                <td>Responsible for orientation change up-down
                (i.e. looking around when a camera is
                controlled).</td>
            </tr>

            <tr>
                <td>PAN_RIGHT_LEFT</td>

                <td>Responsible for translation right-left. These
                translation directions are defined in the
                reference object's frame.</td>
            </tr>

            <tr>
                <td>LOOK_DOLLY</td>

                <td>Responsible for translation front-back. These
                translation directions are defined in the
                reference object's frame.</td>
            </tr>

            <tr>
                <td>FLY_NUM_CONTROLS</td>

                <td>The maximum value for controls.</td>
            </tr>
        </tbody>
    </table>
</div>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">virtual bool SetActive(bool
bActive, <a href=
"NiNavBaseController.htm#NiNavBaseController::NavState">NiNavBaseController::NavState</a>&amp;
kCurState)</p>

<p class="NDLRefMemberDescription">This function sets
<span class="NDLSystemFont">kCurState</span> (if <span class=
"NDLSystemFont">bActive</span> is false) or reads from it (if
<span class="NDLSystemFont">bActive</span> is true) as well as
calling the <a href="NiNavBaseController.htm#SetActive">parent
function</a>.</p>

<p class="NDLRefMemberFunction">void ResetKeyboardHotkey(<a href=
"#Controls">NiNavFlyController::Controls</a> eControlId, bool
bPositiveDir, <a href=
"../../Reference/NiInput/NiInputKeyboard.htm#NiInputKeyboard::KeyCode">
NiInputKeyboard::KeyCode</a> eKey, <a href=
"../../Reference/NiInput/NiInputKeyboard.htm#NiInputKeyboard::Modifiers">
NiInputKeyboard::Modifiers</a> eModifier =
NiInputKeyboard::KMOD_NONE)</p>

<p class="NDLRefMemberFunction">void ResetMouseHotkey(<a href=
"#Controls">NiNavFlyController::Controls</a> eControlId, bool
bPositiveDir, <a href=
"../../Reference/NiInput/NiInputMouse.htm#NiInputMouse::Button">NiInputMouse::Button</a>
eButton, <a href=
"../../Reference/NiInput/NiInputMouse.htm#NiInputMouse::Modifiers">
NiInputMouse::Modifiers</a> eModifier =
NiInputMouse::MMOD_NONE)</p>

<p class="NDLRefMemberFunction">void ResetMouseAxis(<a href=
"#Controls">NiNavFlyController::Controls</a> eControlId, <a href=
"../../Reference/NiInput/NiInputMouse.htm#NiInputMouse::Axes">NiInputMouse::Axes</a>
eMouseAxis)</p>

<p class="NDLRefMemberFunction">void ResetGamePadHotkey(<a href=
"#Controls">NiNavFlyController::Controls</a> eControlId, bool
bPositiveDir, <a href=
"../../Reference/NiInput/NiInputGamePad.htm#NiInputGamePad::Button">
NiInputGamePad::Button</a> eButton, <a href=
"../../Reference/NiInput/NiInputGamePad.htm#NiInputGamePad::ButtonMask">
NiInputGamePad::ButtonMask</a> eModifier =
NiInputGamePad::NIGP_MASK_NONE)</p>

<p class="NDLRefMemberFunction">void ResetGamePadAxis(<a href=
"#Controls">NiNavFlyController::Controls</a> eControlId, <a href=
"../../Reference/NiInput/NiInputGamePad.htm#NiInputGamePad::DefaultAxis">
NiInputGamePad::DefaultAxis</a> eAxis)</p>

<p class="NDLRefMemberDescription">These functions will change
the binding of an action on the devices. This function may not be
called while this fly controller is active. Also, if the
different controls are to be shown in the label/hotkey pairs,
these functions must be called before the fly controller is added
to the <a href="NiNavManager.htm"><span class=
"NDLSystemFont">NiNavManager</span></a>.</p>

<p class="NDLRefMemberFunction">void
SetControlledObject(NiAVObject* pkControlledObject)</p>

<p class="NDLRefMemberDescription">The input object will be moved
by this controller</p>

<p class="NDLRefMemberFunction">void
SetReferenceObject(NiAVObject* pkReferenceObject)</p>

<p class="NDLRefMemberDescription">The frame of this object will
be used to define the "look" and "right/left" directions when
translating the controlled object.</p>

<p class="NDLRefMemberFunction">void SetUpDir(<a href=
"../../Reference/NiMain/NiPoint3.htm">NiPoint3</a>&amp;
kNewUpDir)</p>

<p class="NDLRefMemberDescription">If <span class=
"NDLSystemFont">kNewUpDir</span> has non-zero length, it enforces
a constraint of an up vector on all orientation as well as a
maximum rotation angle. If no constraint is desired, pass in a
value of (0, 0, 0).</p>

<p class="NDLRefMemberFunction">void SetControlActive(bool
bActive, <a href="#Controls">NiNavFlyController::Controls</a>
eControlId)</p>

<p class="NDLRefMemberDescription">This function sets the
specified control to the be active or inactive. If the this is
set before the label/hotkey image pair is initialized, then they
are not initialized for this control. After label/hotkey image
pair initialization, while this function will change system
response, it will not change the UI elements.</p>

<p class="NDLRefMemberFunction">void SetScale(float fScale)</p>

<p class="NDLRefMemberDescription">Sets the scalar by which all
actions are multiplied.</p>

<p class="NDLRefMemberFunction">virtual const char*
GetControlName(unsigned int uiControlId) const</p>

<p class="NDLRefMemberDescription">Returns the name of the
specified control.</p>

<p class="NDLRefMemberFunction">bool GetFlipPitch()</p>

<p class="NDLRefMemberFunction">void SetFlipPitch(bool
bFlipPitch)</p>

<p class="NDLRefMemberFunction">bool GetFlipYaw()</p>

<p class="NDLRefMemberFunction">void SetFlipYaw(bool
bFlipYaw)</p>

<p class="NDLRefMemberDescription">Reverses rotation's pitch and
yaw input deltas.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
