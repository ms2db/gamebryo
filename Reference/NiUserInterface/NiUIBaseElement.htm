<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiUIBaseElement</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiUIBaseElement</p>

<p class="NDLRefParentage">: public <a href=
"../../Reference/NiMain/NiRefObject.htm">NiRefObject</a></p>

<p class="NDLRefHeaderFile">&lt;NiUIBaseElement.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiUIBaseElement</span> implements
the base functionality and inherited interface for all UI
elements. Since this class is meant to be derived, protected and
pure virtual functions, as well as the implemented public
functions, are listed here.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiUIBaseElement(bool
bCanTakeFocus)</p>

<p class="NDLRefMemberDescription"><span class=
"NDLSystemFont">bCanTakeFocus</span> defines whether or not this
element can take mouse and keyboard focus. Examples of UI
elements which can take focus are the <a href=
"NiUIButton.htm"><span class=
"NDLSystemFont">NiUIButton</span></a>, <a href=
"NiUICheckBox.htm"><span class=
"NDLSystemFont">NiUICheckBox</span></a> and <a href=
"NiUISlider.htm"><span class=
"NDLSystemFont">NiUISlider</span></a>, while <a href=
"NiUILabel.htm"><span class="NDLSystemFont">NiUILabel</span></a>,
<a href="NiUIImage.htm"><span class=
"NDLSystemFont">NiUIImage</span></a>, etc. can not. This
initializes all other member variables to default values.</p>

<p class="NDLRefHead1">Static Member Functions</p>

<p>Although all static member functions are protected, they may
be used by inherited classes.</p>

<p class="NDLRefMemberFunction">protected static int
InsertQuads(unsigned int uiNumQuads, <a href=
"../../Reference/NiMesh/NiMeshScreenElements.htm">NiMeshScreenElements</a>*
pkElements)</p>

<p class="NDLRefMemberDescription">This function inserts
<span class="NDLSystemFont">uiNumQuads</span> contiguously into
<span class="NDLSystemFont">pkElements</span>. It returns the
index of the first quad inserted.</p>

<p class="NDLRefMemberFunction">protected static <a href=
"../../Reference/NiMain/NiRect.htm">NiRect</a>&lt;float&gt;
OriginAndDimensionsToRect(float fx, float fy, float fWidth, float
fHeight)</p>

<p class="NDLRefMemberDescription">This function exists solely as
a helper function which creates a <a href=
"../../Reference/NiMain/NiRect.htm"><span class=
"NDLSystemFont">NiRect</span></a> from the input data and returns
it.</p>

<p class="NDLRefMemberFunction">protected static bool
InitializeQuad(<a href=
"../../Reference/NiMesh/NiMeshScreenElements.htm">NiMeshScreenElements</a>*
pkElement, int iPolygon, const <a href=
"../../Reference/NiMain/NiRect.htm">NiRect</a>&lt;float&gt;&amp;
kShapeRectInNSC, const <a href=
"../../Reference/NiMain/NiRect.htm">NiRect</a>&lt;float&gt;&amp;
kUVs, const <a href=
"../../Reference/NiMain/NiColorA.htm">NiColorA</a>&amp;
kBackgroundColor)</p>

<p class="NDLRefMemberDescription">Initializes the default values
for the specified quad.</p>

<p class="NDLRefMemberFunction">protected static bool
HideQuad(<a href=
"../../Reference/NiMesh/NiMeshScreenElements.htm">NiMeshScreenElements</a>*
pkElement, int iPolygon)</p>

<p class="NDLRefMemberDescription">Adjusts the rectangle for the
specified quad to make it have zero size.</p>

<p class="NDLRefMemberFunction">protected static bool
InitializeNineQuad(<a href=
"../../Reference/NiMesh/NiMeshScreenElements.htm">NiMeshScreenElements</a>*
pkElement, int iPolygon, const <a href=
"../../Reference/NiMain/NiRect.htm">NiRect</a>&lt;float&gt;&amp;
kOuterRectInNSC, const <a href=
"../../Reference/NiMain/NiRect.htm">NiRect</a>&lt;float&gt;&amp;
kInnerRectInNSC, const <a href=
"../../Reference/NiMain/NiRect.htm">NiRect</a>&lt;float&gt;&amp;
kOuterUVs, const <a href=
"../../Reference/NiMain/NiRect.htm">NiRect</a>&lt;float&gt;&amp;
kInnerUVs, const <a href=
"../../Reference/NiMain/NiColorA.htm">NiColorA</a>&amp;
kBackgroundColor)</p>

<p class="NDLRefMemberFunction">protected static bool
HideNineQuad(<a href=
"../../Reference/NiMesh/NiMeshScreenElements.htm">NiMeshScreenElements</a>*
pkElement, int iPolygon)</p>

<p class="NDLRefMemberDescription">Some UI Elements contain some
portion with a fixed pixel size. For instance, as some elements
change size, the border should stay the same size, with the
middle portion scaling to fill in the void. In <span class=
"NDLSystemFont"><a href=
"NiUserInterface_Introduction.htm">NiUserInterface</a></span>,
this is implemented by creating elements as nine contiguous quads
arranged in a 3x3 grid. The four corners are fixed to be of
border width in both dimensions. The four other edge quads are
constrained to be border width in one dimension and can scale in
the other. The single purely internal quad grows with the
element. This function properly sets up this nine quad
structure.</p>

<p class="NDLRefMemberFunction">static NiRect&lt;float&gt;
ComputeInnerNSCRectPixelAccurateInner( NiUIAtlasMap::UIElement
eElement, const NiRect&lt;float&gt;&amp; kOuterNSCRect)</p>

<p class="NDLRefMemberDescription">This function will calculate
the inner quad size in NSC for the input outer NSC rectangle
while preserving pixel accuracy for this inner quad between what
appears on the screen and what is defined in the atlas map's
texture. This is used by <span class="NDLSystemFont"><a href=
"NiUISlider.htm">NiUISlider</a></span>, for instance.</p>

<p class="NDLRefMemberFunction">static NiRect&lt;float&gt;
ComputeInnerNSCRectPixelAccurateOuter( NiUIAtlasMap::UIElement
eElement, const NiRect&lt;float&gt;&amp; kOuterNSCRect)</p>

<p class="NDLRefMemberDescription">This function will calculate
the inner quad size in NSC for the input outer NSC rectangle
while preserving pixel accuracy for the boundary between the
inner and outer quad as defined in the atlas map's texture. This
is used by <span class="NDLSystemFont"><a href=
"NiUIButton.htm">NiUIButton</a></span>, among others.</p>

<p class="NDLRefMemberFunction">static NiRect&lt;float&gt;
ComputeAspectRatioPreservingInnerNSCRect( NiUIAtlasMap::UIElement
eElement, const NiRect&lt;float&gt;&amp; kOuterNSCRect)</p>

<p class="NDLRefMemberDescription">This function is similar to
the above functions, except instead of preserving pixel accuracy
for one component or the other, it preserves the same aspect
ratio.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">NiUIBaseElement* GetParent()
const</p>

<p class="NDLRefMemberFunction">void SetParent(NiUIBaseElement*
pkParent)</p>

<p class="NDLRefMemberFunction">virtual unsigned int
GetChildElementCount() const</p>

<p class="NDLRefMemberFunction">virtual NiUIBaseElement*
GetChildElement(unsigned int uiElement) const</p>

<p class="NDLRefMemberDescription">Elements are stored in a
hierarchical structure. This hierarchy is used to pass UI events,
group render elements and define screen location. These functions
may be used to traverse that hierarchy. It is important to note
that the functions handling child elements must be rewritten in
any derived class which has child elements, as these functions
only return 0 and NULL.</p>

<p class="NDLRefMemberFunction">void SetDimensions(float fWidth,
float fHeight)</p>

<p class="NDLRefMemberFunction">void SetOffset(float fLeftOffset,
float fTopOffset)</p>

<p class="NDLRefMemberFunction">NiPoint2 GetDimensions()
const</p>

<p class="NDLRefMemberFunction">NiPoint2 GetOffset() const</p>

<p class="NDLRefMemberDescription">These functions define the
screen space used by this element. The input values are in
normalized screen coordinates (see <a href=
"Safe_Zone_Rendering_in_the_UI.htm">the discussion</a>). The
offset position is relative to the parent's screen position.</p>

<p class="NDLRefMemberFunction">void SetPixelDimensions(unsigned
int uiWidth, unsigned int uiHeight)</p>

<p class="NDLRefMemberFunction">void SetPixelOffset(unsigned int
uiLeftOffset, unsigned int uiTopOffset)</p>

<p class="NDLRefMemberDescription">These functions are provided
for convenience. Elements whose position or size are set using
these functions will not scale with increased or decreased
resolution.</p>

<p class="NDLRefMemberFunction">NiRect&lt;float&gt; GetNSCRect()
const</p>

<p class="NDLRefMemberFunction">NiRect&lt;unsigned int&gt;
GetPixelRect() const</p>

<p class="NDLRefMemberDescription">These functions will only
return the correct screen location of the element (NSC or pixels)
if <span class="NDLSystemFont">UpdateRect</span> has been called
since the last time any of the functions affecting offset,
dimensions, or hierarchy information has been called.</p>

<p class="NDLRefMemberFunction">virtual void UpdateRect()</p>

<p class="NDLRefMemberDescription">This function must be called
after any of the functions setting offset, size or hierarchy
position are called on this element. Otherwise, those changes
will not take effect.</p>

<p class="NDLRefMemberFunction">virtual bool SetFocus(bool
bFocus)</p>

<p class="NDLRefMemberDescription">Called to change the focus on
given UI element.</p>

<p class="NDLRefMemberFunction">bool IsVisible()</p>

<p class="NDLRefMemberDescription">Determine whether the current
UI element is going to be rendered.</p>

<p class="NDLRefMemberFunction">virtual void SetVisible(bool
bVisible)</p>

<p class="NDLRefMemberDescription">This sets the visibility
properly for this as well as any children elements.</p>

<p class="NDLRefMemberFunction">void SubscribeShown(<a href=
"NiUIBaseSlot.htm">NiUIBaseSlot0</a>* kSlot)</p>

<p class="NDLRefMemberFunction">void SubscribeHidden(<a href=
"NiUIBaseSlot.htm">NiUIBaseSlot0</a>* kSlot)</p>

<p class="NDLRefMemberFunction">void SubscribeResize(<a href=
"NiUIBaseSlot.htm">NiUIBaseSlot1</a>&lt;<a href=
"../../Reference/NiMain/NiRect.htm">NiRect</a>&lt;float&gt;&gt;*
kSlot)</p>

<p class="NDLRefMemberFunction">void SubscribeGotFocus(<a href=
"NiUIBaseSlot.htm">NiUIBaseSlot0</a>* kSlot)</p>

<p class="NDLRefMemberFunction">void SubscribeLostFocus(<a href=
"NiUIBaseSlot.htm">NiUIBaseSlot0</a>* kSlot)</p>

<p class="NDLRefMemberDescription">These functions subscribe any
input slot to the specified events. These slots are properly
signaled by <span class="NDLSystemFont">NiUIBaseElement</span>
and derived classes need not handle them at all unless they
overwrite a function which handles these events.</p>

<p class="NDLRefMemberFunction"><a name="MouseLocation" id=
"MouseLocation">virtual bool MouseLocation(unsigned int uiMouseX,
unsigned int uiMouseY)</a></p>

<p class="NDLRefMemberDescription">This function tests whether
the input application space mouse coordinates are internal to
this element. It returns true only if the mouse is inside the
element and the element can receive focus.</p>

<p class="NDLRefMemberFunction">virtual bool
AttachResources(<a href=
"../../Reference/NiMesh/NiMeshScreenElements.htm">NiMeshScreenElements</a>*
pkScreenQuads)</p>

<p class="NDLRefMemberDescription">This function is called upon
initialization of the screen elements. It creates the number of
screen quads required by this element, passes <span class=
"NDLSystemFont">pkScreenQuads</span> to any children, and then
calls <a href="#ReinitializeDisplayElements"><span class=
"NDLSystemFont">ReinitializeDisplayElements</span></a>.</p>

<p class="NDLRefMemberFunction">protected virtual bool
IsInside(unsigned int uiX, unsigned int uiY)</p>

<p class="NDLRefMemberDescription">This function is a helper to
<a href="#MouseLocation"><span class=
"NDLSystemFont">MouseLocation</span></a>, and only checks if the
input application coordinates are inside this element.</p>

<p class="NDLRefMemberFunction">protected <a name=
"ReinitializeDisplayElements" id=
"ReinitializeDisplayElements">virtual void
ReinitializeDisplayElements()</a></p>

<p class="NDLRefMemberDescription">Although implemented in
<span class="NDLSystemFont">NiUIBaseElement</span>, this
implementation is essentially empty. This function should be
overwritten in any inherited classes with visible space on
screen.</p>

<p class="NDLRefMemberFunction">protected virtual void
ReinitializeChildDisplayElements()</p>

<p class="NDLRefMemberDescription">This function calls <a href=
"#ReinitializeDisplayElements"><span class=
"NDLSystemFont">ReinitializeDisplayElements</span></a> in all
child UI elements.</p>

<p class="NDLRefHead1">Pure Virtual Member Functions</p>

<p class="NDLRefMemberFunction">virtual void Draw(<a href=
"../../Reference/NiMain/NiRenderer.htm">NiRenderer</a>*
pkRenderer) = 0</p>

<p class="NDLRefMemberDescription">This function will be called
once per frame. Although the screen quads are rendered for all
child objects by <span class="NDLSystemFont"><a href=
"NiUIRenderGroup.htm">NiUIRenderGroup</a></span>, any text on
elements represented by <span class="NDLSystemFont"><a href=
"../../Reference/NiFont/Ni2DString.htm">Ni2DString</a></span>
variables must be told to draw. This function must also pass the
draw call to all children.</p>

<p class="NDLRefMemberFunction">virtual void
EnterPressed(unsigned char ucButtonState) = 0</p>

<p class="NDLRefMemberDescription">This function is called when
this element has focus and the Enter key is pressed on the
keyboard, or the primary selection button on a GamePad ("A" on a
Xenon controller, "X" on a PS3 controller).</p>

<p class="NDLRefMemberFunction">virtual void
LeftMouseButton(unsigned char ucButtonState) = 0</p>

<p class="NDLRefMemberDescription">This function is called when
the mouse left button is pressed while over this element.</p>

<p class="NDLRefMemberFunction">protected virtual unsigned int
NumQuadsRequired() = 0</p>

<p class="NDLRefMemberDescription">This refers to the number of
screen quads required to render this element.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
