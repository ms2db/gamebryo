<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiNavOrbitController</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiNavOrbitController</p>

<p class="NDLRefParentage">: public <a href=
"NiNavBaseController.htm">NiNavBaseController</a></p>

<p class="NDLRefHeaderFile">&lt;NiNavOrbitController.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiNavOrbitController</span> allows
an object to orbit around a center point. The center point may be
moved by panning in either of the two directions perpendicular to
the orbit sphere. Unlike the <a href=
"NiNavFlyController.htm"><span class=
"NDLSystemFont">NiNavFlyController</span></a>, the controlled
object and reference object must be the same.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiNavOrbitController(<a href=
"../../Reference/NiMain/NiAVObject.htm">NiAVObject</a>* pkObject,
const char* pcName, float fRadius, <a href=
"../../Reference/NiMain/NiPoint3.htm">NiPoint3</a> kUpVector =
NiPoint3::ZERO)</p>

<p class="NDLRefMemberDescription">This initializes all member
variables properly. If <span class=
"NDLSystemFont">kUpVector</span> has non-zero length, it enforces
a constraint of an up vector on all orientation as well as a
stopping all rotation at the poles. If no constraint is desired,
leave the default value of (0, 0, 0).</p>

<p class="NDLRefHead1">Supported Enumerations</p>

<a name="Controls" id="Controls"></a><p class="NDLRefMemberFunction">NiNavOrbitController::Controls</p>

<p class="NDLRefMemberDescription">These assign a separate value
(in the range [0.. ORBIT_NUM_CONTROLS]) to each allowed action.
When referring to any action, these values should be used. The
following values are supplied:</p>

<!--(Table)=========================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Name</th>

                <th>Description</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td>RADIUS_DOLLY</td>

                <td>This control will geometrically increase or
                decrease the radius of the orbit sphere, moving
                the object toward/away from the radius. In order
                to move the center point, the PAN* controls must
                be used. Rotation speed remains invariant under a
                radius change.</td>
            </tr>

            <tr>
                <td>LATITUDE_ORBIT</td>

                <td>This orbits the object horizontally (along
                latitude lines on a globe).</td>
            </tr>

            <tr>
                <td>LONGITUDE_ORBIT</td>

                <td>This orbits the object vertically (along
                longitude lines on a globe).</td>
            </tr>

            <tr>
                <td>PAN_RIGHT_LEFT</td>

                <td>Responsible for left-right translation.</td>
            </tr>

            <tr>
                <td>PAN_UP_DOWN</td>

                <td>Responsible for up down translation</td>
            </tr>

            <tr>
                <td>ORBIT_NUM_CONTROLS</td>

                <td>The maximum value for this enumeration</td>
            </tr>
        </tbody>
    </table>
</div>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">virtual bool SetActive(bool
bActive, <a href=
"NiNavBaseController.htm#NiNavBaseController::NavState">NiNavBaseController::NavState</a>&amp;
kCurState)</p>

<p class="NDLRefMemberDescription">This function sets
<span class="NDLSystemFont">kCurState</span> (if <span class=
"NDLSystemFont">bActive</span> is false) or reads from it (if
<span class="NDLSystemFont">bActive</span> is true) as well as
calling the <a href="NiNavBaseController.htm#SetActive">parent
function</a>.</p>

<p class="NDLRefMemberFunction">void ResetKeyboardHotkey(<a href=
"#Controls">NiNavOrbitController::Controls</a> eControlId, bool
bPositiveDir, <a href=
"../../Reference/NiInput/NiInputKeyboard.htm#NiInputKeyboard::KeyCode">
NiInputKeyboard::KeyCode</a> eKey, <a href=
"../../Reference/NiInput/NiInputKeyboard.htm#NiInputKeyboard::Modifiers">
NiInputKeyboard::Modifiers</a> eModifier =
NiInputKeyboard::KMOD_NONE)</p>

<p class="NDLRefMemberFunction">void ResetMouseHotkey(<a href=
"#Controls">NiNavOrbitController::Controls</a> eControlId, bool
bPositiveDir, <a href=
"../../Reference/NiInput/NiInputMouse.htm#NiInputMouse::Button">NiInputMouse::Button</a>
eButton, <a href=
"../../Reference/NiInput/NiInputMouse.htm#NiInputMouse::Modifiers">
NiInputMouse::Modifiers</a> eModifier =
NiInputMouse::MMOD_NONE)</p>

<p class="NDLRefMemberFunction">void ResetMouseAxis(<a href=
"#Controls">NiNavOrbitController::Controls</a> eControlId,
<a href=
"../../Reference/NiInput/NiInputMouse.htm#NiInputMouse::Axes">NiInputMouse::Axes</a>
eMouseAxis)</p>

<p class="NDLRefMemberFunction">void ResetGamePadHotkey(<a href=
"#Controls">NiNavOrbitController::Controls</a> eControlId, bool
bPositiveDir, <a href=
"../../Reference/NiInput/NiInputGamePad.htm#NiInputGamePad::Button">
NiInputGamePad::Button</a> eButton, <a href=
"../../Reference/NiInput/NiInputGamePad.htm#NiInputGamePad::ButtonMask">
NiInputGamePad::ButtonMask</a> eModifier =
NiInputGamePad::NIGP_MASK_NONE)</p>

<p class="NDLRefMemberFunction">void ResetGamePadAxis(<a href=
"#Controls">NiNavOrbitController::Controls</a> eControlId,
<a href=
"../../Reference/NiInput/NiInputGamePad.htm#NiInputGamePad::DefaultAxis">
NiInputGamePad::DefaultAxis</a> eAxis)</p>

<p class="NDLRefMemberDescription">These functions will change
the binding of an action on the devices. This function may not be
called while this fly controller is active. Also, if the
different controls are to be shown in the label/hotkey pairs,
these functions must be called before the fly controller is added
to the <span class="NDLSystemFont"><a href=
"NiNavManager.htm">NiNavManager</a></span>.</p>

<p class="NDLRefMemberFunction">void SetObject(NiAVObject*
pkObject)</p>

<p class="NDLRefMemberDescription">Changes the controlled object.
The frame of the controlled object is used to define the "look"
direction which is used to define the rotation center.</p>

<p class="NDLRefMemberFunction">void SetUpDir(<a href=
"../../Reference/NiMain/NiPoint3.htm">NiPoint3</a>&amp;
kNewUpDir)</p>

<p class="NDLRefMemberDescription">If <span class=
"NDLSystemFont">kNewUpDir</span> has non-zero length, it enforces
a constraint of an up vector on all orientation as well as a
maximum rotation angle. If no constraint is desired, pass in a
value of (0, 0, 0).</p>

<p class="NDLRefMemberFunction">void SetControlActive(bool
bActive, <a href="#Controls">NiNavOrbitController::Controls</a>
eControlId)</p>

<p class="NDLRefMemberDescription">This function sets the
specified control to the be active or inactive. If the this is
set before the label/hotkey image pair is initialized, then they
are not initialized for this control. After label/hotkey image
pair initialization, while this function will change system
response, it will not change the UI elements.</p>

<p class="NDLRefMemberFunction">void SetRadius(float fRadius)</p>

<p class="NDLRefMemberDescription">Set the radius used as the
center point of the orbit in this controller.</p>

<p class="NDLRefMemberFunction">virtual const char*
GetControlName(unsigned int uiControlId) const</p>

<p class="NDLRefMemberDescription">Returns the name of the
control specified by the input index.</p>

<p class="NDLRefHead1">Notes</p>

<p class="NDLRefHead2">Controls appear to flip at very low
radius</p>

<p>Although the implementation does limit the radius to within
floating point stability, it is possible to set a very small
radius for this controller. When this occurs, and there is no
visual object between the camera and the rest of the world, it
can appear that the controller has become a <a href=
"NiNavFlyController.htm"><span class=
"NDLSystemFont">NiNavFlyController</span></a> with the view
controls flipped (as the translation caused by the orbit is too
small to perceive, but the orientation change continues). Under
such conditions, increase the radius until all appears to return
to normal.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
