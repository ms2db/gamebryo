<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiUIButton</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiUIButton</p>

<p class="NDLRefParentage">: public <a href=
"NiUIBaseElement.htm">NiUIBaseElement</a></p>

<p class="NDLRefHeaderFile">&lt;NiUIButton.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class=
"NDLSystemFont">NiUIButton</span> implements two different types
of UI buttons: press buttons and toggle buttons. Press buttons
are standard buttons which only remain pressed while the mouse
button or enter button are held. Toggle buttons maintain one of
two states (pressed or unpressed) changing only when the mouse
button or enter button are first pressed. The toggle
functionality mirrors the functionality of the <span class=
"NDLSystemFont"><a href=
"NiUICheckBox.htm">NiUICheckBox</a></span>.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiUIButton(const char*
pcButtonText = "", <a href=
"#NiUIButtonType">NiUIButton::NiUIButtonType</a> eButtonType =
NiUIButton::PRESSBUTTON)</p>

<p class="NDLRefMemberDescription">This constructor initializes
all values to default values, excepting the two possible
inputs.</p>

<p class="NDLRefHead1">Supported Enumerations</p>

<p class="NDLRefMemberFunction"><a name="NiUIButtonType" id=
"NiUIButtonType">NiUIButton::NiUIButtonType</a></p>

<p class="NDLRefMemberDescription">PRESSBUTTON</p>
<p class="NDLRefMemberDescription">TOGGLEBUTTON</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">virtual void Draw(<a href=
"../../Reference/NiMain/NiRenderer.htm">NiRenderer</a>*
pkRenderer)</p>

<p class="NDLRefMemberDescription">This function should be called
each frame so that text appears properly on this element.</p>

<p class="NDLRefMemberFunction">virtual void SetVisible(bool
bVisible)</p>

<p class="NDLRefMemberDescription">Sets a given button to be
shown.</p>

<p class="NDLRefMemberFunction">void SetPressed(bool bPressed =
true)</p>

<p class="NDLRefMemberFunction">bool IsPressed()</p>

<p class="NDLRefMemberDescription">These functions only work
properly when the button is of the type
NiUIButtonType::TOGGLEBUTTON.</p>

<p class="NDLRefMemberFunction">void SetButtonType(<a href=
"#NiUIButtonType">NiUIButton::NiUIButtonType</a> eButtonType)</p>

<p class="NDLRefMemberFunction"><a href=
"#NiUIButtonType">NiUIButton::NiUIButtonType</a> GetButtonType()
const</p>

<p class="NDLRefMemberDescription">Get and set the button type
for this button.</p>

<p class="NDLRefMemberFunction">void SetText(const char*
pcButtonText)</p>

<p class="NDLRefMemberDescription">Set the text for this
button.</p>

<p class="NDLRefMemberFunction">virtual void
EnterPressed(unsigned char ucButtonState)</p>

<p class="NDLRefMemberFunction">virtual void
LeftMouseButton(unsigned char ucButtonState)</p>

<p class="NDLRefMemberDescription">These properly handle input
from the user.</p>

<p class="NDLRefMemberFunction">virtual bool
MouseLocation(unsigned int uiMouseX, unsigned int uiMouseY)</p>

<p class="NDLRefMemberDescription">Nearly identical to the parent
function, but also sets the button state properly depending on if
the mouse is over it.</p>

<p class="NDLRefMemberFunction">void
SubscribeToPressEvent(<a href=
"NiUIBaseSlot.htm">NiUIBaseSlot0</a>* kSlot)</p>

<p class="NDLRefMemberFunction">void
SubscribeToReleaseEvent(<a href=
"NiUIBaseSlot.htm">NiUIBaseSlot0</a>* kSlot)</p>

<p class="NDLRefMemberFunction">void
SubscribeToWhilePressedEvent(<a href=
"NiUIBaseSlot.htm">NiUIBaseSlot0</a>* kSlot)</p>

<p class="NDLRefMemberFunction">void
SubscribeToToggleEvent(<a href=
"NiUIBaseSlot.htm">NiUIBaseSlot1</a>&lt;bool&gt;* kSlot)</p>

<p class="NDLRefMemberDescription">These functions allow
application programmers to easily receive any of the above
events.</p>

<p class="NDLRefMemberFunction">bool AddKeyboardHotkey(<a href=
"../../Reference/NiInput/NiInputKeyboard.htm#NiInputKeyboard::KeyCode">
NiInputKeyboard::KeyCode</a> eKey, <a href=
"../../Reference/NiInput/NiInputKeyboard.htm#NiInputKeyboard::Modifiers">
NiInputKeyboard::Modifiers</a> eModifier =
NiInputKeyboard::KMOD_NONE)</p>

<p class="NDLRefMemberFunction">bool AddGamePadAxis(<a href=
"../../Reference/NiInput/NiInputGamePad.htm#NiInputGamePad::DefaultAxis">
NiInputGamePad::DefaultAxis</a> eAxis, bool bUseBothDirs =
false)</p>

<p class="NDLRefMemberFunction">bool AddGamePadHotkey(<a href=
"../../Reference/NiInput/NiInputGamePad.htm#NiInputGamePad::Button">
NiInputGamePad::Button</a> eButton, <a href=
"../../Reference/NiInput/NiInputGamePad.htm#NiInputGamePad::ButtonMask">
NiInputGamePad::ButtonMask</a> eModifier =
NiInputGamePad::NIGP_MASK_NONE)</p>

<p class="NDLRefMemberFunction">bool AddMouseHotkey(<a href=
"../../Reference/NiInput/NiInputMouse.htm#NiInputMouse::Button">NiInputMouse::Button</a>
eButton, <a href=
"../../Reference/NiInput/NiInputMouse.htm#NiInputMouse::Modifiers">
NiInputMouse::Modifiers</a> eModifier =
NiInputMouse::MMOD_NONE)</p>

<p class="NDLRefMemberFunction">bool AddMouseMotion()</p>

<p class="NDLRefMemberDescription">These functions attempt to
reserve the requested hotkey/axis to this button. Note that axis
must be sampled in application code if reserved. If the requested
item is reserved through the <span class="NDLSystemFont"><a href=
"NiUIManager.htm">NiUIManager</a></span>, the appropriate hotkey
image is set on the button. This function returns false if the
requested item is already reserved. For the functions with a
Boolean <span class="NDLSystemFont">bUseBothDirs</span>, this was
necessary for those buttons which wanted to reserve both vertical
and horizontal axis motion. The proper UI element is chosen in
that case.</p>

<p class="NDLRefMemberFunction">virtual bool SetFocus(bool
bFocus)</p>

<p class="NDLRefMemberDescription">Beyond parent functionality,
this function also sets the button highlight color properly.</p>

<p class="NDLRefMemberFunction">virtual unsigned int
GetChildElementCount() const</p>

<p class="NDLRefMemberFunction">virtual <a href=
"NiUIBaseElement.htm">NiUIBaseElement</a>*
GetChildElement(unsigned int uiElement) const</p>

<p class="NDLRefMemberDescription">These functions allow access
to child elements. They are used during initialization. Since the
type of <span class="NDLSystemFont"><a href=
"NiUIBaseElement.htm">NiUIBaseElement</a></span> stored at any
location may change, it is suggested that only functions
belonging to <span class="NDLSystemFont"><a href=
"NiUIBaseElement.htm">NiUIBaseElement</a></span> be called on the
returned value.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
