<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiUIAtlasMap</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiUIAtlasMap</p>

<p class="NDLRefHeaderFile">&lt;NiUIAtlasMap.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiUIAtlasMap</span> is a helper
class created for reading the "Look and Feel" texture for the all
UI Elements.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiUIAtlasMap()</p>

<p class="NDLRefMemberDescription">Initializes all variables to
default values.</p>

<p class="NDLRefHead1">Supported Enumerations</p>

<p>The <span class="NDLSystemFont">NiUIAltasMap</span> class
contains several enumerations. These are detailed below:</p>

<p class="NDLRefMemberFunction"><a name="UIElement" id=
"UIElement">NiUIAtlasMap::UIElement</a></p>

<p class="NDLRefMemberDescription">These describe the various
elements which can contain separate images in the texture
atlas.</p>

<ul>
    <li>GAMEPAD_BUTTON_RRIGHT</li>

    <li>GAMEPAD_BUTTON_RLEFT</li>

    <li>GAMEPAD_BUTTON_RUP</li>

    <li>GAMEPAD_BUTTON_RDOWN</li>

    <li>GAMEPAD_BUTTON_R2</li>

    <li>GAMEPAD_BUTTON_L2</li>

    <li>GAMEPAD_BUTTON_R1</li>

    <li>GAMEPAD_BUTTON_L1</li>

    <li>GAMEPAD_BUTTON_SELECT</li>

    <li>GAMEPAD_BUTTON_START</li>

    <li>GAMEPAD_CONTROL_STICK_HORIZONTAL</li>

    <li>GAMEPAD_CONTROL_STICK_VERTICAL</li>

    <li>GAMEPAD_CONTROL_STICK_OMNI</li>

    <li>GAMEPAD_CONTROL_STICK</li>

    <li>GAMEPAD_DPAD_HORIZONTAL</li>

    <li>GAMEPAD_DPAD_VERTICAL</li>

    <li>GAMEPAD_DPAD_OMNI</li>

    <li>GAMEPAD_DPAD</li>

    <li>MOUSE_BUTTON_LEFT</li>

    <li>MOUSE_BUTTON_RIGHT</li>

    <li>MOUSE_BUTTON_SCROLL</li>

    <li>MOUSE_MOVE</li>

    <li>MOUSE_NULL</li>

    <li>KEYBOARD_BUTTON_WIDE</li>

    <li>KEYBOARD_BUTTON</li>

    <li>UI_LABEL</li>

    <li>UI_BUTTON_DEFAULT</li>

    <li>UI_BUTTON_DOWN</li>

    <li>UI_BUTTON_HIGH</li>

    <li>UI_CHECK_BOX_DEFAULT</li>

    <li>UI_CHECK_BOX_DOWN</li>

    <li>UI_CHECK_BOX_HIGH</li>

    <li>UI_SLIDER_TRACK_DEFAULT</li>

    <li>UI_SLIDER_TRACK_HIGH</li>

    <li>UI_SLIDER_MARK_DEFAULT</li>

    <li>UI_SLIDER_MARK_HIGH</li>

    <li>UI_GROUP</li>

    <li>UI_MIN_DEFAULT</li>

    <li>UI_MIN_DOWN</li>

    <li>UI_MIN_HIGH</li>

    <li>UI_MAX_DEFAULT</li>

    <li>UI_MAX_DOWN</li>

    <li>UI_MAX_HIGH</li>

    <li>NUM_ELEMENTS</li>
</ul>

<p class="NDLRefMemberFunction"><a name="TextColor" id=
"TextColor">NiUIAtlasMap::TextColor</a></p>

<p class="NDLRefMemberDescription">These are the various elements
whose color may be set to follow a theme. The following values
are supplied:</p>

<ul>
    <li>TEXT_ON_KEYBOARD_BUTTON</li>

    <li>TEXT_ON_UI_DEFAULT</li>

    <li>TEXT_ON_UI_DOWN</li>

    <li>TEXT_ON_UI_HIGH</li>

    <li>TEXT_ON_GAMEPAD_CONTROL_STICK</li>

    <li>NUM_TEXT_COLORS</li>
</ul>

<p class="NDLRefMemberFunction"><a name="TextSize" id=
"TextSize">NiUIAtlasMap::TextSize</a></p>

<p class="NDLRefMemberDescription">In an attempt to allow for
uniform scaling at various resolutions, three different
resolution spaces are considered. The font may be set to a
different style/size depending on the resolution. The following
values are supplied:</p>

<ul>
    <li>TEXT_FOR_LOW_RESOLUTION</li>

    <li>TEXT_FOR_MED_RESOLUTION</li>

    <li>TEXT_FOR_HIGH_RESOLUTION</li>

    <li>NUM_TEXT_SIZES</li>
</ul>

<p class="NDLRefMemberFunction"><a name="CoordinateSystem" id=
"CoordinateSystem">NiUIAtlasMap::CoordinateSystem</a></p>

<p class="NDLRefMemberDescription">The various elements all exist
in three spaces. In order to differentiate between them, the
following values are supplied:</p>

<ul>
    <li>ATLAS_UV_SPACE</li>

    <li>ATLAS_PIXEL_SPACE</li>

    <li>DEVICE_NDC_SPACE</li>
</ul>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">bool ReadFile(const char*
pcAtlasFilename)</p>

<p class="NDLRefMemberDescription">The filename passed in should
be the name of the image file, which must be an image filetype
supported by Gamebryo. In the same directory, there should be a
file of type .bdr which is a text file which contains boundaries
for the different UI elements. The <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMain/NiRenderer.htm">NiRenderer</a></span>
must be initialized before this function is called.</p>

<p class="NDLRefMemberFunction">const <a href=
"../../Reference/NiMain/NiColor.htm">NiColor</a>
GetTextColor(<a href="#TextColor">NiUIAtlasMap::TextColor</a>
eUITextColor) const</p>

<p class="NDLRefMemberDescription">This function returns the
color to be placed on the specified UI element.</p>

<p class="NDLRefMemberFunction">const <a href=
"../../Reference/NiMain/NiString.htm">NiString</a>
GetTextFilename(<a href="#TextSize">NiUIAtlasMap::TextSize</a>
eTextSize) const</p>

<p class="NDLRefMemberDescription">This returns the filename of
the <span class="NDLSystemFont"><a href=
"../../Reference/NiFont/NiFont.htm">NiFont</a></span> File (.nff)
to be loaded for the specified text size..</p>

<p class="NDLRefMemberFunction">const <a href=
"../../Reference/NiMain/NiRect.htm">NiRect</a>&lt;float&gt;
GetOuterBounds(<a href="#UIElement">NiUIAtlasMap::UIElement</a>
eElement, <a href=
"#CoordinateSystem">NiUIAtlasMap::CoordinateSystem</a> eSystem =
NiUIAtlas::ATLAS_UV_SPACE) const</p>

<p class="NDLRefMemberDescription">Returns the outer boundary of
the specified element in the specified space. Since some UI
elements contain a border around the element (such as
<span class="NDLSystemFont"><a href=
"NiUIButton.htm">NiUIButton</a></span>), the outer boundary of
the image and the inner boundary may differ.</p>

<p class="NDLRefMemberFunction">const <a href=
"../../Reference/NiMain/NiRect.htm">NiRect</a>&lt;float&gt;
GetInnerBounds(<a href="#UIElement">NiUIAtlasMap::UIElement</a>
eElement, <a href=
"#CoordinateSystem">NiUIAtlasMap::CoordinateSystem</a> eSystem =
NiUIAtlas::ATLAS_UV_SPACE) const</p>

<p class="NDLRefMemberDescription">Returns the inner boundary of
the specified element in the specified space.</p>

<p class="NDLRefMemberFunction">const <a href=
"../../Reference/NiMain/NiRect.htm">NiRect</a>&lt;float&gt;
GetOuterBoundsDfference(<a href=
"#UIElement">NiUIAtlasMap::UIElement</a> eElement, <a href=
"#CoordinateSystem">NiUIAtlasMap::CoordinateSystem</a> eSystem =
NiUIAtlas::ATLAS_UV_SPACE) const</p>

<p class="NDLRefMemberDescription">Returns the border size of the
specified element in the specified space.</p>

<p class="NDLRefMemberFunction"><a href=
"../../Reference/NiMain/NiSourceTexture.htm">NiSourceTexture</a>*
GetAtlas() const</p>

<p class="NDLRefMemberDescription">Get the texture that stores
the atlas images.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
