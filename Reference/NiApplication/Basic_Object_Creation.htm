<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Basic Object Creation</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>


<h1>Basic Object Creation</h1>

<p><span class="NDLSystemFont">NiApplication</span> has several <span class="NDLSystemFont">NiObject</span>-derived members and corresponding virtual functions used to create these objects. The virtual functions that create these objects are overridden in many Gamebryo samples.</p>

<h2>Scene</h2>

<p class="NDLRefMemberFunction">NiNodePtr m_spScene</p>

<p class="NDLRefMemberDescription">Variable pointing to the root of the scene 
 graph.</p>

<p class="NDLRefMemberFunction">virtual bool CreateScene()</p>

<p class="NDLRefMemberDescription">Method that allocates an <span class="NDLSystemFont">NiNode</span> 
 to <span class="NDLSystemFont">m_spScene</span>. The return 
 value indicates success (<span class="NDLSystemFont">true</span>) or failure 
 (<span class="NDLSystemFont">false</span>). The default version creates 
 an empty scene graph (an <span class="NDLSystemFont">NiNode</span> object 
 with no children).</p>

<h2>Camera</h2>

<p class="NDLRefMemberFunction">NiCameraPtr m_spCamera</p>

<p class="NDLRefMemberDescription">Variable pointing to the camera for viewing 
 the scene graph.</p>

<p class="NDLRefMemberFunction">virtual bool CreateCamera()</p>

<p class="NDLRefMemberDescription">Method that allocates an <span class="NDLSystemFont">NiCamera</span> 
 to <span class="NDLSystemFont">m_spCamera</span>. The return value indicates 
 success (<span class="NDLSystemFont">true</span>) or failure (<span class="NDLSystemFont">false</span>). 
 The default version creates an <span class="NDLSystemFont">NiCamera</span> 
 object with view frustum values: </p>

<p class="NDLRefMemberDescription"><span class="NDLSystemFont">
left = -0.25f <br>
right = 0.25f<br>
top = 0.1875f<br>
bottom = -0.1875f<br>
near = 1.0f<br>
far = 1000.0f<br>
bOrtho = false</span></p> 

<p class="NDLRefMemberDescription">and a view port that fills the entire window:</p>

<p class="NDLRefMemberDescription"><span class="NDLSystemFont">
left = 0.0f<br>
right = 1.0f<br>
top = 1.0f<br>
bottom = 0.0f</span></p>

<h2>Renderer</h2>

<p class="NDLRefMemberFunction">NiRendererPtr m_spRenderer</p>

<p class="NDLRefMemberDescription">Variable pointing to the renderer.</p>

<p class="NDLRefMemberFunction">virtual bool CreateRenderer()</p>

<p class="NDLRefMemberDescription">Method that creates the <span class="NDLSystemFont">NiRenderer</span> 
 object. The return value indicates success (<span class="NDLSystemFont">true</span>) 
 or failure (<span class="NDLSystemFont">false</span>). Various renderer 
 creation parameters can be specified by the application before renderer 
 creation, either on the command line or in the constructor for the <span 
 class="NDLSystemFont">NiApplication</span>-derived class. These creation 
 parameters are platform-dependent but include options for things like 
 full screen vs. windowed rendering. Also, for Windows applications that 
 create a Direct3D renderer, an optional <a HREF="Using_the_Renderer_Settings_Dialog.htm">dialog</a> 
 can be displayed before renderer creation to allow the application to 
 select amongst the various installed hardware accelerators and their supported 
 modes.</p>

<h2>Render Frame</h2>

<p class="NDLRefMemberFunction">NiRenderFramePtr m_spFrame</p>

<p class="NDLRefMemberDescription">Variable holding the render frame.</p>

<p class="NDLRefMemberFunction">virtual bool CreateFrame()</p>

<p class="NDLRefMemberDescription">Method that creates the <span class="NDLSystemFont"><a 
 HREF="../../Reference/NiMain/NiRenderFrame.htm">NiRenderFrame</a></span> 
 object. This function is called if the <a HREF="../../Programmer/Frame_Rendering_System/Introduction_to_the_Frame_Rendering_System.htm">frame 
 rendering system</a> is enabled for <span class="NDLSystemFont"><a HREF="NiApplication.htm">NiApplication</a></span> 
 (i.e., if the <span class="NDLSystemFont">bUseFrameSystem</span> constructor 
 parameter is true). In this function, an <span class="NDLSystemFont"><a 
 HREF="../../Reference/NiMain/Ni3DRenderView.htm">Ni3DRenderView</a></span> 
 is created to hold <span class="NDLSystemFont">m_spScene</span>, <span class="NDLSystemFont">m_spCamera</span>, 
 and <span class="NDLSystemFont">m_spCuller</span>, the <span class="NDLSystemFont"><a 
 HREF="../../Reference/NiMain/NiCullingProcess.htm">NiCullingProcess</a></span>. 
 An <span class="NDLSystemFont"><a HREF="../../Reference/NiMain/NiAccumulatorProcessor.htm">NiAccumulatorProcessor</a></span> 
 is also created and added to the main render click. The accumulator for 
 this processor is set to be the one returned by <span class="NDLSystemFont"><a 
 HREF="../../Reference/NiMain/NiRenderer.htm">NiRenderer</a>::GetSorter</span> 
 at the beginning of the <span class="NDLSystemFont">NiApplication::RenderFrame</span> 
 function. Render clicks are also created for screen elements, screen textures, 
 and visual trackers. All render clicks are added to a single <span class="NDLSystemFont"><a 
 HREF="../../Reference/NiMain/NiDefaultClickRenderStep.htm">NiDefaultClickRenderStep</a></span> 
 object, which is added to the <span class="NDLSystemFont">NiRenderFrame</span>. 
 Derived classes that override this method may create and populate the 
 <span class="NDLSystemFont">m_spFrame</span> member variable any way they 
 want. See the <a HREF="NiApplication_and_the_Frame_Rendering_System.htm">NiApplication 
 and the Frame Rendering System</a> section for more details about how 
 <span class="NDLSystemFont">NiApplication</span> uses the frame rendering 
 system.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
