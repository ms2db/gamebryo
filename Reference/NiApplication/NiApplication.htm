<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiApplication</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiApplication</p>

<p class="NDLRefParentage">: public <a href=
"../../Reference/NiSystem/NiMemObject.htm"><span>NiMemObject</span></a></p>

<p class="NDLRefHeaderFile">&lt;NiApplication.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiApplication</span> is a
platform-independent wrapper for Gamebryo sample applications. It
is designed to wrap platform-dependent functions so that an
application can be written for one platform and run on the other
platforms that Gamebryo supports. <span class=
"NDLSystemFont">NiApplication</span> handles tasks such as window
creation, renderer creation, creation of an input system, and
providing access to the command line.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiApplication(const char*
pcWindowCaption, unsigned int uiWidth = DEFAULT_WIDTH, unsigned
int uiHeight = DEFAULT_HEIGHT, bool bUseFrameSystem = false,
unsigned int uiMenuID = 0, unsigned int uiNumStatusPanes = 0,
unsigned int uiBitDepth = 0)</p>

<p class="NDLRefMemberDescription">This is the default
constructor. The window caption, menu pane, and number of status
panes are all Win32-specific. The width, height, and bit depth
are all passed along to the renderer creation function. The width
and height have default values that are appropriate for the
target platform being compiled against. See the appropriate
<span class="NDLSystemFont">NiApplication</span> source file for
any particular platform to see what these default values are.
<span class="NDLSystemFont">bUseFrameSystem</span> indicates
whether or not to use the Gamebryo <a href=
"../../Programmer/Frame_Rendering_System/Introduction_to_the_Frame_Rendering_System.htm">
frame rendering system</a> to render the scene or to render the
frame directly.</p>

<p class="NDLRefHead1">Static Member Functions</p>

<p class="NDLRefMemberFunction">static NiApplication*
Create()</p>

<p class="NDLRefMemberDescription">This function must be
implemented in any derived class. This is the singleton
constructor method and must construct and return a pointer to the
<span class="NDLSystemFont">NiApplication</span> object.</p>

<p class="NDLRefMemberFunction">static void SetCommandLine(char*
pcCommandLine)</p>

<p class="NDLRefMemberFunction">static void SetCommandLine(int
iArgc, char** ppcArgv)</p>

<p class="NDLRefMemberDescription">These two functions set the
current command line for use with <span class=
"NDLSystemFont">GetCommand</span>. They are only called by the
platform-specific <span class="NDLSystemFont">main</span>
function.</p>

<p class="NDLRefMemberFunction">static NiCommand*
GetCommand()</p>

<p class="NDLRefMemberDescription">This function returns a pointer to an
<span class="NDLSystemFont">NiCommand</span> object that
represents the command line that started the application.</p>

<p class="NDLRefMemberFunction">static void SetMediaPath(const
char* pcPath)</p>

<p class="NDLRefMemberDescription">This function sets the current media path.
This path is used in conjunction with the <span class=
"NDLSystemFont">ConvertMediaFilename</span> function to
conveniently locate application-specific assets in a
cross-platform manner.</p>

<p class="NDLRefMemberFunction">static const char*
GetMediaPath()</p>

<p class="NDLRefMemberDescription">This function returns the current media
path.</p>

<p class="NDLRefMemberFunction">static const char*
ConvertMediaFilename(const char* pcFilename)</p>

<p class="NDLRefMemberDescription">This function concatenates the passed asset
filename with the current media path in a static buffer and
returns the resulting filename. This is used to find the path to
assets in a cross-platform manner. Note that a static buffer is
used for the result, so each call to this function will overwrite
the results of a previous call. If an application wants to keep
the results, it should copy the output string into another
buffer.</p>

<p class="NDLRefMemberFunction">static void
CommandSelectRenderer()</p>

<p class="NDLRefMemberDescription">This function processes some of the Gamebryo
command-line arguments.</p>

<p class="NDLRefMemberFunction">static void
SetInstanceReference(NiInstanceRef pInstance)</p>

<p class="NDLRefMemberFunction">static NiInstanceRef
GetInstanceReference()</p>

<p class="NDLRefMemberDescription">These functions set and get the <span class=
"NDLSystemFont">HINSTANCE</span> for the application.
<span class="NDLSystemFont">WinMain</span> calls <span class=
"NDLSystemFont">SetInstanceReference</span> to store the instance
that is passed into the function.</p>

<p class="NDLRefMemberFunction">static void
SetAcceleratorReference(NiAcceleratorRef pAccel)</p>

<p class="NDLRefMemberFunction">static NiAcceleratorRef
GetAcceleratorReference()</p>

<p class="NDLRefMemberDescription">These functions set and get the <span class=
"NDLSystemFont">HACCEL</span> for the application, if it is using
one.</p>

<p class="NDLRefMemberFunction">static LRESULT CALLBACK
WinProc(HWND hWnd, UINT uiMsg, WPARAM wParam, LPARAM lParam)</p>

<p class="NDLRefMemberDescription">This function is the default Windows
message-handling function that is used with the window that is created by
<span class="NDLSystemFont">NiApplication</span>.</p>

<p class="NDLRefMemberFunction">static bool
ShadowRenderStepPre(NiRenderStep* pkCurrentStep, void*
pvCallbackData)</p>

<p class="NDLRefMemberDescription">This is a callback function that is used by
Gamebryo's <a href=
"../../Programmer/Shadowing_System/Introduction_to_the_Shadowing_System.htm">
shadow rendering system</a>.</p>

<p class="NDLRefMemberFunction">static unsigned int
DebugOutMessageBoxFunc(const char* pcText, const char* pcCaption,
void* pvExtraData)</p>

<p class="NDLRefMemberDescription">This Win32-only function is an
implementation of a silent message box function for <span class=
"NDLSystemFont"><a href=
"../../Reference/NiSystem/NiMessageBox.htm">NiMessageBox</a></span>.
By default, it is not used. If <span class=
"NDLSystemFont">-test</span> is passed on the command-line for
internal testing purposes, this function will be used so
that the application can run unattended.</p>

<p class="NDLRefHead1">Virtual Member Functions</p>

<p>This section describes the set of virtual functions that are available
in <span class="NDLSystemFont">NiApplication</span>. For a description of some of the more important virtual functions in <span class="NDLSystemFont">NiApplication</span>, see <a href=
"Commonly_Overridden_Methods_in_NiApplication.htm">Commonly Overridden Methods in NiApplication</a>.</p>

<p class="NDLRefMemberFunction">virtual bool Initialize()</p>

<p class="NDLRefMemberDescription">This function is called when the application is being created, but before the first <span class=
"NDLSystemFont">OnIdle</span> loop. This function creates the
camera, renderer, input system, scene, and visual trackers. It
also updates the scene to time zero. Instead of overriding this function, classes that derive from <span class="NDLSystemFont">NiApplication</span> may override the sub-functions that it calls, such as <span class=
"NDLSystemFont">CreateScene</span>.</p>

<p class="NDLRefMemberFunction">virtual void Terminate()</p>

<p class="NDLRefMemberDescription">This function is called when the application is terminating, but before <span class=
"NDLSystemFont">NiShutdown</span>. Any Gamebryo-specific assets
should be destroyed here. Additionally, if any resources are
being held in smart pointers, they should explicitly be set to
zero here to avoid being deleted after <span class=
"NDLSystemFont">NiShutdown</span>.</p>

<p class="NDLRefMemberFunction">virtual void UpdateInput()</p>

<p class="NDLRefMemberDescription">This function is called to update all the input devices and handle any changes they might have. The processing of
these changes is handled in <span class=
"NDLSystemFont">ProcessInput</span>.</p>

<p class="NDLRefMemberFunction">virtual void ProcessInput()</p>

<p class="NDLRefMemberDescription">This function processes the input from all
input devices. By default, it adds the escape button as a button
to quit the application. This function should be overridden to add
custom polling or action map usage with <span class=
"NDLSystemFont">NiApplication</span>.</p>

<p class="NDLRefMemberFunction">virtual void
ProcessVisualTrackerInput()</p>

<p class="NDLRefMemberDescription">This function handles visual
tracker-specific input. It allows a user to toggle ON/OFF the
visual trackers. It is called from <span class=
"NDLSystemFont">ProcessInput</span>. For more information about <span class=
"NDLSystemFont">NiApplication</span> methods that support the use of <span class="NDLSystemFont">NiVisualTracker</span>, see <a href=
"NiApplication_and_NiVisualTrackers.htm">NiApplication and NiVisualTrackers</a>.</p>

<p class="NDLRefMemberFunction">virtual void OnIdle()</p>

<p class="NDLRefMemberDescription">This is the idle loop of the
application. Among other things, it calculates the current time,
updates the scene, culls it, renders it, and then displays
it.</p>

<p class="NDLRefMemberFunction">virtual void BeginUpdate()</p>

<p class="NDLRefMemberFunction">virtual void EndUpdate()</p>

<p class="NDLRefMemberFunction">virtual void BeginCull()</p>

<p class="NDLRefMemberFunction">virtual void EndCull()</p>

<p class="NDLRefMemberFunction">virtual void BeginRender()</p>

<p class="NDLRefMemberFunction">virtual void EndRender()</p>

<p class="NDLRefMemberDescription">These are helper functions for
application timings. They are called during <span class=
"NDLSystemFont">OnIdle</span>. They all start and stop timers
stored in the base class. The results of these timers are shown in the visual tracker graph.</p>

<p class="NDLRefMemberFunction">virtual void
ResetFrameTimings()</p>

<p class="NDLRefMemberDescription">This function resets the update, cull, and
render timings. It is called during <span class=
"NDLSystemFont">OnIdle</span>.</p>

<p class="NDLRefMemberFunction">virtual void UpdateFrame()</p>

<p class="NDLRefMemberFunction">virtual void CullFrame()</p>

<p class="NDLRefMemberFunction">virtual void RenderFrame()</p>

<p class="NDLRefMemberFunction">virtual void DisplayFrame()</p>

<p class="NDLRefMemberFunction">virtual void
UpdateVisualTrackers()</p>

<p class="NDLRefMemberDescription">These functions are all called
as part of the <span class="NDLSystemFont">OnIdle</span>
function. <span class="NDLSystemFont">CullFrame</span> is only
called if <span class="NDLSystemFont">bUseFrameSystem</span> in
the constructor is false. These functions are the heart of the idle loop of any
application. For more information about these
functions, see <a href=
"Commonly_Overridden_Methods_in_NiApplication.htm">Commonly Overridden Methods in NiApplication</a>.</p>

<p class="NDLRefMemberFunction">virtual void
RenderVisualTrackers()</p>

<p class="NDLRefMemberDescription">This function draws the visual trackers on
screen if visual trackers have been enabled. This function is
only called if <span class="NDLSystemFont">bUseFrameSystem</span>
in the constructor is false. For more information about <span class=
"NDLSystemFont">NiApplication</span> methods that support the use of <span class="NDLSystemFont">NiVisualTracker</span>, see <a href=
"NiApplication_and_NiVisualTrackers.htm">NiApplication and NiVisualTrackers</a>.</p>

<p class="NDLRefMemberFunction">virtual void
RenderScreenItems()</p>

<p class="NDLRefMemberDescription">This function renders the lists of mesh
screen elements. This is called as part of <span class=
"NDLSystemFont">NiApplication::RenderFrame</span>. This function
is only called if <span class=
"NDLSystemFont">bUseFrameSystem</span> in the constructor is
false.</p>

<p class="NDLRefMemberFunction">virtual void UpdateMetrics()</p>

<p class="NDLRefMemberDescription">This function updates application-specific
metrics. For memory builds, this includes memory information.
Applications that override this function should be sure to call
the base-class function.</p>

<p class="NDLRefMemberFunction">virtual bool OnWindowResize(int
iWidth, int iHeight, unsigned int uiSizeTpe, NiWindowRef
pWnd)</p>

<p class="NDLRefMemberDescription">This is a Win32-only function
that is called whenever the application receives a <span class=
"NDLSystemFont">WM_SIZE</span> message. In response, it resizes
the rendering window appropriately.</p>

<p class="NDLRefMemberFunction">virtual bool
OnWindowDestroy(NiWindowRef pWnd, bool bOption)</p>

<p class="NDLRefMemberDescription">This is a Win32-only function
that is called whenever the application receives a <span class=
"NDLSystemFont">WM_DESTROY</span> message, notifying it that it
is being destroyed. <span class=
"NDLSystemFont">NiApplication</span> does not do anything in this
case. The destruction of <span class=
"NDLSystemFont">NiApplication</span> takes place in <span class=
"NDLSystemFont">Terminate</span>.</p>

<p class="NDLRefMemberFunction">virtual bool OnDefault(NiEventRef
pEventRecord)</p>

<p class="NDLRefMemberDescription">This is a Win32-only function
that is called whenever the application receives a message that is
not a resize or destroy message. <span class=
"NDLSystemFont">NiApplication</span> does not do anything in this
case.</p>

<p class="NDLRefMemberFunction">virtual bool IsExclusiveMouse()
const</p>

<p class="NDLRefMemberDescription">This is a Win32-only function
that returns whether or not the input system was created with
flags to set the mouse as exclusive for this application.</p>

<p class="NDLRefMemberFunction">virtual bool CreateScene()</p>

<p class="NDLRefMemberFunction">virtual bool CreateCamera()</p>

<p class="NDLRefMemberFunction">virtual bool CreateFrame()</p>

<p class="NDLRefMemberFunction">virtual bool CreateRenderer()</p>

<p class="NDLRefMemberFunction">virtual bool
CreateInputSystem()</p>

<p class="NDLRefMemberFunction">virtual bool
CreateVisualTrackers()</p>

<p class="NDLRefMemberDescription">These functions are called from <span class="NDLSystemFont">Initialize</span>. They
set up default versions of whatever their function is designed to
handle. Classes that derive from <span class=
"NDLSystemFont">NiApplication</span> will probably want to
override some or all of these functions to set up their
application in a custom manner. <span class=
"NDLSystemFont">CreateFrame</span> is only called if <span class=
"NDLSystemFont">bUseFrameSystem</span> in the constructor is
true.</p>

<p class="NDLRefMemberFunction">virtual
NiInputSystem::CreateParams* GetInputSystemCreateParams()</p>

<p class="NDLRefMemberDescription">This function returns the parameters for
creating the input system. This function is called as a part of
the <span class="NDLSystemFOnt">CreateInputSystem</span>
function. It is a separate virtual function so that classes that
derive from <span class="NDLSystemFont">NiApplication</span> can
change the input system creation parameters without having to handle its creation.</p>

<p class="NDLRefMemberFunction">virtual bool MeasureTime()</p>

<p class="NDLRefMemberDescription">This function is called from
<span class="NDLSystemFont">OnIdle</span> and updates the current
time, among other things. It is also used as the frame limiting
function; it returns false if drawing a frame at the
current time would cause the frame rate to go over the max frame
rate.</p>

<p class="NDLRefMemberFunction">virtual void OnDisplayFrame()</p>

<p class="NDLRefMemberDescription">This function is called at the
beginning of the <span class="NDLSystemFont">DisplayFrame</span>
function. If screenshot capture has been enabled, either via the
command-line option <span class="NDLSystemFont">-test</span> or
manually, this function will call <span class=
"NDLSystemFont">SaveScreenshot</span> at regular intervals.
Classes that derive from <span class=
"NDLSystemFont">NiApplication</span> can override this function
to save screen captures under different conditions (for example, other
than time elapsed), or to perform desired pre-display testing.</p>

<p class="NDLRefMemberFunction">virtual void CreateMenuBar()</p>

<p class="NDLRefMemberDescription">This function allows an
application to customize how a menu bar is created. The default
implementation is empty.</p>

<p class="NDLRefMemberFunction">virtual void OnIdle(void)</p>

<p class="NDLRefMemberDescription">This is an idle-processing function. For more information about idle-processing, see <a href=
"Idle_Loop_Processing.htm">Idle Loop Processing</a>.</p>

<p class="NDLRefMemberFunction">virtual void BeginFrame()</p>

<p class="NDLRefMemberFunction">virtual void EndFrame()</p>

<p class="NDLRefMemberDescription">These functions inform the renderer when a
frame is beginning or ending.</p>

<p class="NDLRefMemberFunction">virtual void
ConfigureInputDevices()</p>

<p class="NDLRefMemberDescription">This function allows the application to
reconfigure the input devices.</p>

<p class="NDLRefMemberFunction">virtual void
CheckScreenshot()</p>

<p class="NDLRefMemberDescription">This is the function that performs the screenshot capture on some platforms.</p>

<p class="NDLRefMemberFunction">virtual void SaveScreenshot()</p>

<p class="NDLRefMemberDescription">This function uses the
<span class="NDLSystemFont">NiRenderer::SaveScreenShot</span>
function to write the current frame to disk. The filename is specified by calling <span class="NDLSystemFont">GetScreenshotFilename</span>.</p>

<p class="NDLRefMemberFunction">virtual void
GetScreenshotFilename(char* pcBuffer, unsigned int uiBufferSize,
const char* pcSuffix)</p>

<p class="NDLRefMemberDescription">This function is called from
the <span class="NDLSystemFont">SaveScreenshot</span> function to determine the appropriate filename for saving a screenshot.
The default filename construction is Screenshots\&lt;AppWindowName&gt;_&lt;ScreenshotID&gt;&lt;Suffix&gt;,
but classes that derive from <span class=
"NDLSystemFont">NiApplication</span> can override this function
to construct the filename differently. The result is placed in
<span class="NDLSystemFont">pcBuffer</span>, writing up to a
maximum size of <span class=
"NDLSystemFont">uiBufferSize</span>.</p>

<p class="NDLRefMemberFunction">virtual void
WaitForUserToExit(const char* pcMessage)</p>

<p class="NDLRefMemberDescription">This function is called if an
application fails during initialization (in other words, if <span class="NDLSystemFont">CreateScene()</span>,
etc... returns false), and will wait for the user quit callback
message before returning. Optionally, it can display a message that is passed in and will continue flipping the display and polling for
callbacks until the quit message is reached. This method should
only be called in exceptional circumstances, such as a corrupted
HDDGame installation that requires a reinstall to fix.</p>

<p class="NDLRefMemberFunction">virtual void
OnFootswitchPressed()</p>

<p class="NDLRefMemberDescription">This function is called when a
footswitch event is recorded. Because the footswitch is only available on
full development kits, it is only polled and the method will only be called if
GAMEBRYO_PROFILE is defined.</p>

<p class="NDLRefMemberFunction">virtual void EnableFrameRate(bool
bEnable)</p>

<p class="NDLRefMemberDescription">This function enables or
disables a frame rate counter in the upper-left corner of the
display.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">void SetFullscreen(bool bOn)</p>

<p class="NDLRefMemberFunction">bool GetFullscreen() const</p>

<p class="NDLRefMemberFunction">void SetStencil(bool bOn)</p>

<p class="NDLRefMemberFunction">bool GetStencil() const</p>

<p class="NDLRefMemberFunction">void SetRendererDialog(bool
bOn</p>

<p class="NDLRefMemberFunction">bool GetRendererDialog() cons</p>

<p class="NDLRefMemberFunction">void SetMultiThread(bool
bMultithread)</p>

<p class="NDLRefMemberFunction">bool GetMultiThread() const</p>

<p class="NDLRefMemberFunction">void SetRendererID(<a href="../../Reference/efd/efd__SystemDesc.htm">efd::SystemDesc::RendererID</a> eRendererID)</p>

<p class="NDLRefMemberFunction"><a href="../../Reference/efd/efd__SystemDesc.htm">efd::SystemDesc::RendererID</a> GetRendererID() const</p>

<p class="NDLRefMemberFunction">void SetD3D10Renderer(bool
bD3D10Renderer)</p>

<p class="NDLRefMemberFunction">bool GetD3D10Renderer() const</p>

<p class="NDLRefMemberFunction">void SetRefRast(bool
bRefRast)</p>

<p class="NDLRefMemberFunction">bool GetRefRast() const</p>

<p class="NDLRefMemberFunction">void SetPerfHUD(bool
bPerfHUD)</p>

<p class="NDLRefMemberFunction">bool GetPerfHUD() const</p>

<p class="NDLRefMemberFunction">void SetSWVertex(bool
bSWVertex)</p>

<p class="NDLRefMemberFunction">bool GetSWVertex() const</p>

<p class="NDLRefMemberDescription">These functions get and set
options for the renderer creation. If a class that derives from
<span class="NDLSystemFont">NiApplication</span> wishes to set
these values, they should do so before the <span class=
"NDLSystemFont">CreateRenderer</span> call. The last ten
functions are only available on the Win32 platform.</p>

<p class="NDLRefMemberDescription">Note that 
<span class="NDLSystemFont">SetD3D10Renderer</span> and 
<span class="NDLSystemFont">GetD3D10Renderer</span> have been deprecated.
<span class="NDLSystemFont">SetRendererID</span> and 
<span class="NDLSystemFont">GetRendererID</span> should be used instead.</p>

<p class="NDLRefMemberFunction">float GetMaxFrameRate()</p>

<p class="NDLRefMemberDescription">This function returns the maximum frame rate
for the application.</p>

<p class="NDLRefMemberFunction">void SetMaxFrameRate(float
fMax)</p>

<p class="NDLRefMemberDescription">This function sets the maximum frame rate
for the application. The <span class=
"NDLSystemFont">OnIdle</span> function will not run until after enough
time has passed that the frame rate is under this maximum.</p>

<p class="NDLRefMemberFunction">void SetShowAllTrackers(bool
bShow)</p>

<p class="NDLRefMemberDescription">This function sets all active visual
trackers to be shown or hidden. For more information about <span class=
"NDLSystemFont">NiApplication</span> methods that support the use of <span class="NDLSystemFont">NiVisualTracker</span>, see <a href=
"NiApplication_and_NiVisualTrackers.htm">NiApplication and NiVisualTrackers</a>.</p>

<p class="NDLRefMemberFunction">void HidePointer()</p>

<p class="NDLRefMemberDescription">This function makes the mouse pointer
invisible.</p>

<p class="NDLRefMemberFunction">void ShowPointer()</p>

<p class="NDLRefMemberDescription">This function shows the mouse pointer.</p>

<p class="NDLRefMemberFunction">void QuitApplication()</p>

<p class="NDLRefMemberDescription">This function cleanly terminates the
application.</p>

<p class="NDLRefMemberFunction">float GetCurrentTime()</p>

<p class="NDLRefMemberDescription">This function returns the time in seconds
that has elapsed since the application started.</p>

<p class="NDLRefMemberFunction">float GetAccumTime()</p>

<p class="NDLRefMemberDescription">This function returns the current
accumulated time in seconds. This may differ from the value
returned from <span class="NDLSystemFont">GetCurrentTime</span>
if the application is using fixed time steps.</p>

<p class="NDLRefMemberFunction">float GetLastTime()</p>

<p class="NDLRefMemberDescription">This function returns the last frame's
time.</p>

<p class="NDLRefMemberFunction">float GetFrameTime()</p>

<p class="NDLRefMemberDescription">This function returns the elapsed time in
seconds for this frame.</p>

<p class="NDLRefMemberFunction">NiCamera* FindFirstCamera(NiNode*
pkNode)</p>

<p class="NDLRefMemberDescription">This function returns the first occurrence
of an <span class="NDLSystemFont">NiCamera</span> in the
specified scene graph.</p>

<p class="NDLRefMemberFunction">void
AdjustCameraAspectRatio(NiCamera* pkCamera)</p>

<p class="NDLRefMemberDescription">This function adjusts the view frustum of
the specified camera so that it matches the current back-buffer
aspect ratio for the renderer.</p>

<p class="NDLRefMemberFunction">NiWindowRef CreateMainWindow(int
iWinMode, NiWindowRef hWnd = NULL) const</p>

<p class="NDLRefMemberDescription">This function constructs the main
window.</p>

<p class="NDLRefMemberFunction">NiWindowRef GetWindowReference()
const</p>

<p class="NDLRefMemberDescription">This function returns a reference to the
window receiving messages.</p>

<p class="NDLRefMemberFunction">NiWindowRef
GetRenderWindowReference() const</p>

<p class="NDLRefMemberDescription">This function returns a reference to the
window that is used to display the frame.</p>

<p class="NDLRefMemberFunction">NiAppWindow* GetAppWindow()
const</p>

<p class="NDLRefMemberDescription">This function returns the <span class=
"NDLSystemFont">NiAppWindow</span> that encapsulates the
window.</p>

<p class="NDLRefMemberFunction">unsigned int GetMenuID() const</p>

<p class="NDLRefMemberDescription">This function returns the ID of the menu
resource.</p>

<p class="NDLRefMemberFunction">void MainLoop()</p>

<p class="NDLRefMemberDescription">This function is called by
<span class="NDLSystemFont">WinMain</span> and contains the main
application loop.</p>

<p class="NDLRefMemberFunction"><a href=
"../../Reference/NiInput/NiInputSystem.htm">NiInputSystem</a>*
GetInputSystem()</p>

<p class="NDLRefMemberDescription">This function returns the application's
input handling system.</p>

<p class="NDLRefMemberFunction"><a href=
"../../Reference/NiMain/NiTPointerList.htm">NiTPointerList</a>&lt;<a href="../../Reference/NiMesh/NiMeshScreenElements.htm">
NiMeshScreenElementsPtr</a>&gt;&amp; GetScreenElements()</p>

<p class="NDLRefMemberDescription">This function returns the application's list
of <a href=
"../../Reference/NiMesh/NiMeshScreenElements.htm"><span class=
"NDLSystemFont">NiMeshScreenElements</span></a> objects.</p>

<p class="NDLRefMemberFunction"><a href=
"../../Reference/NiMain/NiTPointerList.htm">NiTPointerList</a>&lt;<a href="../../Reference/NiVisualTracker/NiVisualTracker.htm">
NiVisualTrackerPtr</a>&gt;&amp; GetVisualTrackers()</p>

<p class="NDLRefMemberDescription">This function returns the application's list
of <span class="NDLSystemFont"><a href=
"../../Reference/NiVisualTracker/NiVisualTracker.htm">
NiVisualTracker</a></span> objects.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
