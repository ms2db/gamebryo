<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiTurret</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type=
"text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiTurret</p>

<p class="NDLRefHeaderFile">&lt;NiTurret.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p class="NDLRefMemberDescription">This class is designed to support moving an
object where translation and rotation are not necessarily constrained to the
same node. In particular, the class supports a three-object hierarchical
sub-tree:</p>

<p class="NDLRefMemberDescription">TRANSLATION_NODE -&gt; ROTATION_NODE -&gt;
CAMERA</p>

<p class="NDLRefMemberDescription">that enables the camera to be moved so that
the translation node controls translation in x, y, z, and rotation about an
"up" vector.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiTurret (TurretInput eInputDevice =
TUR_DEFAULT)</p>

<p class="NDLRefMemberDescription">Constructs a <span class=
"NDLSystemFont">NiTurret</span> class using the device <span class=
"NDLSystemFont">eInputDevice</span>.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">bool Read()</p>

<p class="NDLRefMemberDescription">Read polls the user interface device
specified by the user for input and adjusts the turret nodes to reflect the
input for translation and rotation.</p>

<p class="NDLRefMemberFunction">void SetAxes(const <a href=
"../../Reference/NiMain/NiMatrix3.htm">NiMatrix3</a>&amp; rot)</p>

<p class="NDLRefMemberDescription">Grabs the current model-space axes of
movement from the rotation matrix <span class="NDLSystemFont">rot.</span></p>

<p class="NDLRefMemberFunction"><span class="NDLSystemFont">T</span>urretInput
GetInputDevice(void)</p>

<p class="NDLRefMemberFunction">void SetInputDevice(TurretInput
eInputDevice)</p>

<p class="NDLRefMemberDescription">Gets and sets the user interface device used
by the turret. See the "Notes" section for possible values for this
enumeration.</p><a name="Translation_Input_Functions" id=
"Translation_Input_Functions"></a>

<p class="NDLRefHead2">Translation Input Functions</p>

<p class="NDLRefMemberFunction">void SetStandardTrn(float fSpeed, <a href=
"../../Reference/NiMain/NiAVObject.htm">NiAVObject</a>* pkObject)</p>

<p class="NDLRefMemberDescription">Sets up standard user interface values for
translation. The default values are:</p>

<p class="NDLRefMemberDescription">'UP', 'DOWN', 'S', 'W', 'A', and 'D' for the
keyboard,</p>

<p class="NDLRefMemberDescription">left and right buttons for the mouse,
and</p>

<p class="NDLRefMemberDescription">the two analog sticks for the gamepad.</p>

<p class="NDLRefMemberFunction">void SetTrnButtonsKB(int iIndex, <a href=
"../../Reference/NiInput/NiInputKeyboard.htm#NiInputKeyboard::KeyCode">NiInputKeyboard::KeyCode</a>
eKeyM,<br>
<a href=
"../../Reference/NiInput/NiInputKeyboard.htm#NiInputKeyboard::KeyCode">NiInputKeyboard::KeyCode</a>
eKeyP)</p>

<p class="NDLRefMemberDescription">Sets the positive (<span class=
"NDLSystemFont">eKeyP</span>) and negative (<span class=
"NDLSystemFont">eKeyM</span>) translation keyboard keys for axis <span class=
"NDLSystemFont">iIndex</span>.</p>

<p class="NDLRefMemberFunction">void SetTrnButtonsM(int iIndex, <a href=
"../../Reference/NiInput/NiInputMouse.htm#NiInputMouse::Button">NiInputMouse::Button</a>
eButM,<br>
<a href=
"../../Reference/NiInput/NiInputMouse.htm#NiInputMouse::Button">NiInputMouse::Button</a>
eButP)</p>

<p class="NDLRefMemberDescription">Sets the positive (<span class=
"NDLSystemFont">eButP</span>) and negative (<span class=
"NDLSystemFont">eButM</span>) translation mouse buttons for axis <span class=
"NDLSystemFont">iIndex</span>.</p>

<p class="NDLRefMemberFunction">void SetTrnButtonsGP(int iIndex, <a href=
"../../Reference/NiInput/NiInputGamePad.htm#NiInputGamePad::Button">NiInputGamePad::Button</a>
eButM,<br>
<a href=
"../../Reference/NiInput/NiInputGamePad.htm#NiInputGamePad::Button">NiInputGamePad::Button</a>
eButP)</p>

<p class="NDLRefMemberDescription">Sets the positive (<span class=
"NDLSystemFont">eButP</span>) and negative (<span class=
"NDLSystemFont">eButM</span>) translation gamepad buttons for axis <span class=
"NDLSystemFont">iIndex</span>.</p>

<p class="NDLRefMemberFunction">void SetTrnButtonsStickDirGP (int iIndex,
<a href=
"../../Reference/NiInput/NiInputGamePad.htm#NiInputGamePad::Sticks">NiInputGamePad::Sticks</a>
eStick,<br>
<a href=
"../../Reference/NiInput/NiInputGamePad.htm#NiInputGamePad::Sticks">NiInputGamePad::Sticks</a>
eDir)</p>

<p class="NDLRefMemberDescription">Sets the positive and negative (<span class=
"NDLSystemFont">eDir</span>) translation analog stick (<span class=
"NDLSystemFont">eStick</span>) on the gamepad for axis <span class=
"NDLSystemFont">iIndex</span>.</p>

<p class="NDLRefMemberFunction">void SetTrnModifiers(int iIndex, long
lModifiers)</p>

<p class="NDLRefMemberDescription">Sets the sequence of modifiers, <span class=
"NDLSystemFont">lModifiers</span>, which must be pressed in addition to the
<span class="NDLSystemFont">TrnButtons</span> for axis <span class=
"NDLSystemFont">iIndex</span> in order to execute a translation.</p>

<p class="NDLRefMemberFunction">float GetTrnSpeed(int iIndex)</p>

<p class="NDLRefMemberFunction">void SetTrnSpeed(int iIndex, float fSpeed)</p>

<p class="NDLRefMemberDescription">Gets and sets the translation speed for axis
<span class="NDLSystemFont">iIndex</span>.</p><a name=
"Rotation_Input_Functions" id="Rotation_Input_Functions"></a>

<p class="NDLRefHead2">Rotation Input Functions</p>

<p class="NDLRefMemberFunction">void SetStandardRot(float fSpeed, <a href=
"../../Reference/NiMain/NiAVObject.htm">NiAVObject</a>* pkTrnObject,<br>
<a href="../../Reference/NiMain/NiAVObject.htm">NiAVObject</a>*
pkRotObject)</p>

<p class="NDLRefMemberDescription">Sets up standard user interface values for
rotation. The default values are:</p>

<p class="NDLRefMemberDescription">'LEFT,' 'RIGHT,' 'PAGE_UP' and 'PAGE_DOWN'
for the keyboard,</p>

<p class="NDLRefMemberDescription">nothing for the mouse, and</p>

<p class="NDLRefMemberDescription">'R1' plus the two analog sticks for the
gamepad.</p>

<p class="NDLRefMemberFunction">void SetRotButtonsKB(int iIndex, <a href=
"../../Reference/NiInput/NiInputKeyboard.htm#NiInputKeyboard::KeyCode">NiInputKeyboard::KeyCode</a>
eKeyM,<br>
<a href=
"../../Reference/NiInput/NiInputKeyboard.htm#NiInputKeyboard::KeyCode">NiInputKeyboard::KeyCode</a>
eKeyP)</p>

<p class="NDLRefMemberDescription">Sets the positive (<span class=
"NDLSystemFont">eKeyP</span>) and negative (<span class=
"NDLSystemFont">eKeyM</span>) rotation keyboard keys for axis <span class=
"NDLSystemFont">iIndex</span>.</p>

<p class="NDLRefMemberFunction">void SetRotButtonsM(int iIndex, <a href=
"../../Reference/NiInput/NiInputMouse.htm#NiInputMouse::Button">NiInputMouse::Button</a>
eButM,<br>
<a href=
"../../Reference/NiInput/NiInputMouse.htm#NiInputMouse::Button">NiInputMouse::Button</a>
eButP)</p>

<p class="NDLRefMemberDescription">Sets the positive (<span class=
"NDLSystemFont">eButP</span>) and negative (<span class=
"NDLSystemFont">eButM</span>) rotation mouse buttons for axis <span class=
"NDLSystemFont">iIndex</span>.</p>

<p class="NDLRefMemberFunction">void SetRotButtonsGP(int iIndex, <a href=
"../../Reference/NiInput/NiInputGamePad.htm#NiInputGamePad::Button">NiInputGamePad::Button</a>
eButM,<br>
<a href=
"../../Reference/NiInput/NiInputGamePad.htm#NiInputGamePad::Button">NiInputGamePad::Button</a>n
eButP)</p>

<p class="NDLRefMemberDescription">Sets the positive (<span class=
"NDLSystemFont">eButP</span>) and negative (<span class=
"NDLSystemFont">eButM</span>) translation gamepad buttons for axis <span class=
"NDLSystemFont">iIndex</span>.</p>

<p class="NDLRefMemberFunction">void SetRotButtonsStickDirGP(int iIndex,
<a href=
"../../Reference/NiInput/NiInputGamePad.htm#NiInputGamePad::Sticks">NiInputGamePad::Sticks</a>
eStick,<br>
<a href=
"../../Reference/NiInput/NiInputGamePad.htm#NiInputGamePad::Sticks">NiInputGamePad::Sticks</a>
eDir)</p>

<p class="NDLRefMemberDescription">Sets the positive and negative (<span class=
"NDLSystemFont">eDir</span>) translation analog stick (<span class=
"NDLSystemFont">eStick</span>) on the gamepad for axis <span class=
"NDLSystemFont">iIndex</span>.</p>

<p class="NDLRefMemberFunction">void SetRotModifiers(int iIndex, long
lModifiers)</p>

<p class="NDLRefMemberDescription">Sets the sequence of modifiers, <span class=
"NDLSystemFont">lModifiers</span>, which must be pressed in addition to the
<span class="NDLSystemFont">TrnButtons</span> for axis <span class=
"NDLSystemFont">iIndex</span> in order to execute a rotation.</p>

<p class="NDLRefMemberFunction">float GetRotSpeed(int iIndex)</p>

<p class="NDLRefMemberFunction">void SetRotSpeed(int iIndex, float fSpeed)</p>

<p class="NDLRefMemberDescription">Gets and sets the rotation speed for axis
<span class="NDLSystemFont">iIndex</span>.</p><a name="Target_Object_Functions"
id="Target_Object_Functions"></a>

<p class="NDLRefHead2">Target Object Functions</p>

<p class="NDLRefMemberFunction">void SetTrnObject(<a href=
"../../Reference/NiMain/NiAVObject.htm">NiAVObject</a>* pkObject)</p>

<p class="NDLRefMemberDescription">Sets the object, <span class=
"NDLSystemFont">pkObject</span>, which will accumulate the translations from
the turret for all three axes.</p>

<p class="NDLRefMemberFunction">void SetTrnObject(int iIndex, <a href=
"../../Reference/NiMain/NiAVObject.htm">NiAVObject</a>* pkObject)</p>

<p class="NDLRefMemberDescription">Sets the object, <span class=
"NDLSystemFont">pkObject</span>, which will accumulate the translations from
the turret for axis <span class="NDLSystemFont">iIndex</span>.</p>

<p class="NDLRefMemberFunction">void SetRotObject(<a href=
"../../Reference/NiMain/NiAVObject.htm">NiAVObject</a>* pkObject)</p>

<p class="NDLRefMemberDescription">Sets the object, <span class=
"NDLSystemFont">pkObject</span>, which will accumulate the rotations from the
turret for all three axes.</p>

<p class="NDLRefMemberFunction">void SetRotObject(int iIndex, <a href=
"../../Reference/NiMain/NiAVObject.htm">NiAVObject</a>* pkObject)</p>

<p class="NDLRefMemberDescription">Sets the object, <span class=
"NDLSystemFont">pkObject</span>, which will accumulate the rotations from the
turret for axis <span class="NDLSystemFont">iIndex</span>.</p>

<p class="NDLRefMemberFunction">void SetRotUseUpdateAxes(bool bUseAxis, bool
bUpdateAxis)</p>

<p class="NDLRefMemberDescription">Determines whether or not the turret uses
the supplied axes to determine translation and rotation direction (<span class=
"NDLSystemFont">bUseAxis</span>), and whether or not to adjust the axes to fit
the new rotations after they have been applied (<span class=
"NDLSystemFont">bUpdateAxis</span>) for all three axes.</p>

<p class="NDLRefMemberFunction">void SetRotUseUpdateAxes(int iIndex, bool
bUseAxis, bool bUpdateAxis)</p>

<p class="NDLRefMemberDescription">Determines whether or not the turret uses
the supplied axes to determine translation and rotation direction (<span class=
"NDLSystemFont">bUseAxis</span>), and whether or not to adjust the axes to fit
the new rotations after they have been applied (<span class=
"NDLSystemFont">bUpdateAxis</span>) for axis <span class=
"NDLSystemFont">iIndex</span>.</p>

<p class="NDLRefHead1">Notes</p>

<p class="NDLRefHead2">TurretInput Enumeration</p>

<p>Gamebryo provides its own set of device handlers for the <span class=
"NDLSystemFont">NiTurret</span> system. These device handlers may be set for
the turret through the use of the <span class=
"NDLSystemFont">TurretInput</span> enumeration, whose values are:</p>

<p><span class="NDLSystemFont">TUR_DEFAULT, TUR_KEYBOARD, TUR_MOUSE</span>, and
<span class="NDLSystemFont">TUR_GAMEPAD</span>.</p>

<p>The turret system will only read information from one device handler, which
is specified in either the constructor, or through the <span class=
"NDLSystemFont">SetInputDevice</span> method. On Win32, <span class=
"NDLSystemFont">TUR_DEFAULT</span> is equivalent to <span class=
"NDLSystemFont">TUR_KEYBOARD</span>. On the consoles, <span class=
"NDLSystemFont">TUR_DEFAULT</span> is equivalent to <span class=
"NDLSystemFont">TUR_GAMEPAD</span>.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
