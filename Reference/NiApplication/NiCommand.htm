<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiApplication</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>


<p class="NDLRefHeadClassTitle">NiCommand</p>

<p class="NDLRefParentage">: public <a href="../../Reference/NiSystem/NiMemObject.htm"><span>NiMemObject</span></a></p>

<p class="NDLRefHeaderFile">&lt;NiCommand.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiCommand</span> handles command 
    line parsing functionality in Gamebryo applications and tools. It encapsulates command line 
    parsing and provides query access for command line options. It is exposed thru 
    NiApplication and it is used directly in various tools and tool plugins.&nbsp; </p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiCommand(int iArgc, char** ppcArgv)</p>

<p class="NDLRefMemberDescription">This constructor creates a NiCommand object and 
    initializes it from a pointer to an array of character string pointers and the 
    size of the array. </p>

<p class="NDLRefMemberFunction">NiCommand(const char* pcCmdline)</p>

<p class="NDLRefMemberDescription">This constructor creates a NiCommand object and 
    initializes it from a pointer to a command line string. </p>
    <p class="NDLRefHead1">Member Functions</p>

<p class="NDLRefMemberFunction">int ExcessArguments()</p>

<p class="NDLRefMemberDescription">This function returns the number of arguments 
    that are unparsed.</p>

<p class="NDLRefMemberFunction">NiCommand&amp; Min(float fValue)</p>

    <p class="NDLRefMemberDescription">This function sets the minimum value for 
        numerical arguments.</p>

<p class="NDLRefMemberFunction">NiCommand&amp; Max(float fValue)</p>

    <p class="NDLRefMemberDescription">This function sets the maximum value for 
        numerical arguments.</p>

<p class="NDLRefMemberFunction">NiCommand&amp; Inf(float fValue)</p>

    <p class="NDLRefMemberDescription">This function sets the infima (greatest lower 
        bound) value for numerical arguments.</p>

<p class="NDLRefMemberFunction">NiCommand&amp; Sup(float fValue)</p>

    <p class="NDLRefMemberDescription">This function sets the suprema (least upper 
        bound) value for numerical arguments.</p>

    <p class="NDLRefMemberFunction">int Boolean(const char* pcName)</p>

<p class="NDLRefMemberDescription">This function returns the position in the command 
    line of the string pointed to by pcName and 0 if the string is not found.</p>

<p class="NDLRefMemberFunction">int Boolean(const char* pcName, bool&amp; bValue)</p>

<p class="NDLRefMemberDescription">This function returns the position in the command 
    line of the string pointed to by pcName and 0 if the string is not found. If the 
    string is found, the bValue parameter is set true. If the string is not found, 
    bValue is set false. </p>

<p class="NDLRefMemberFunction">int Integer(const char* pcName, int&amp; iValue)</p>

<p class="NDLRefMemberDescription">This function returns the position in the command 
    line of the string pointed to by pcName and 0 if the string is not found. If the 
    string is found, the iValue parameter is set from the next item parsed after 
    pcName. </p>

<p class="NDLRefMemberFunction">int Float(const char* pcName, int&amp; fValue)</p>

<p class="NDLRefMemberDescription">This function returns the position in the command 
    line of the string pointed to by pcName and 0 if the string is not found. If the 
    string is found, the fValue parameter is set from the next item parsed after 
    pcName. </p>

<p class="NDLRefMemberFunction">int String(const char* pcName, char* pcValue, 
    unsigned int uiBufferLen)</p>

<p class="NDLRefMemberDescription">This function returns the position in the command 
    line of the string pointed to by pcName and 0 if the string is not found. If the 
    string is found, the pcValue parameter is set from the next item parsed after 
    pcName. The caller must supply a buffer thru pcValue and specify it&#39;s length in 
    uiBufferLen.</p>

<p class="NDLRefMemberFunction">int Filename(char* pcFilename, unsigned int 
    uiBufferLen)</p>

<p class="NDLRefMemberDescription">This function returns the position in the command 
    line of a file name and 0 if a file name is not found. If a filename is found, 
    the pcFilename parameter is set from the file name. The caller must supply a 
    buffer thru pcValue and specify it&#39;s length in uiBufferLen. File names must be 
    the last argument in the command line.</p>

<p class="NDLRefMemberFunction">inline const char* GetLastError()</p>

<p class="NDLRefMemberDescription">This function retrieves the last error 
    encountered during command line parsing.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->    

</body>

</html>
