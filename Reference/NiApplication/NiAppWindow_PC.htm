<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiAppWindow - PC</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Build" content="PC" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Body)==========================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiAppWindow - PC</p>

<p class="NDLRefParentage">: public <a href=
"../../Reference/NiSystem/NiMemObject.htm"><span>NiMemObject</span></a></p>

<p class="NDLRefHeaderFile">&lt;Win32\NiAppWindow.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>The <span class="NDLSystemFont">NiAppWindow</span> class is
defined separately for each platform. On the Win32 platform, <span class="NDLSystemFont">NiAppWindow</span>
is a wrapper that encapsulates window styles, size, and
appearance. It is only used in <span class=
"NDLSystemFont">NiApplication</span>. <span class=
"NDLSystemFont">NiAppWindow</span> encapsulates platform-specific
functionality that <span class=
"NDLSystemFont">NiApplication</span> does not specify for the
application window. Note that the Win32 <span class=
"NDLSystemFont">NiAppWindow</span> has a non-virtual
destructor.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiAppWindow ( const char*
pcWindowCaption, int uiWidth, int uiHeight, int uiNumStatusPanes
= 0, unsigned long ulWindowStyle = WS_OVERLAPPED | WS_CAPTION |
WS_SYSMENU | WS_MINIMIZEBOX, unsigned long ulWindowExStyle = 0
);</p>

<p class="NDLRefMemberDescription">The window styles and window
style extensions are all defined consistent with the Win32 API.
The status panes are the number of panes in the status window.
The height, width, and caption describe the window height and
width in pixels and the window title caption.</p>

<p class="NDLRefHead1">Static Member Functions</p>

<p class="NDLRefMemberFunction">static const char*
GetWindowClassName();</p>

<p class="NDLRefMemberDescription">This function returns the
window class name that is used in window creation.</p>

<p class="NDLRefHead1">Virtual Member Functions</p>

<p class="NDLRefMemberFunction">NiWindowRef CreateMainWindow(int
iWinMode, NiWindowRef hWnd = NULL)</p>

<p class="NDLRefMemberDescription">This function is called to
create the main window. The <span class=
"NDLSystemFont">hWnd</span> is the window handle and <span class=
"NDLSystemFont">iWinMode</span> is the mode passed into the Win32
API call <span class="NDLSystemFont">ShowWindow</span>.</p>

<p class="NDLRefHead1">Member Functions</p>

<p class="NDLRefMemberFunction">unsigned long
GetWindowStyle()</p>

<p class="NDLRefMemberDescription">This function returns the
window style of the application window.</p>

<p class="NDLRefMemberFunction">void SetWindowStyle(unsigned long
ulWindowStyle)</p>

<p class="NDLRefMemberDescription">This function sets the window
style of the application window.</p>

<p class="NDLRefMemberFunction">unsigned long
GetWindowExStyle()</p>

<p class="NDLRefMemberDescription">This function returns the
extended window style of the application window.</p>

<p class="NDLRefMemberFunction">void SetWindowExStyle(unsigned
long ulWindowExStyle)</p>

<p class="NDLRefMemberDescription">This function sets the
extended window style of the application window.</p>

<p class="NDLRefMemberFunction">void SetWindowCaption(char*
pcCaption)</p>

<p class="NDLRefMemberDescription">This function sets the
application window caption.</p>

<p class="NDLRefMemberFunction">const char* GetWindowCaption()
const</p>

<p class="NDLRefMemberDescription">This function returns the
application window caption</p>

<p class="NDLRefMemberFunction">void SetWidth(unsigned int
uiWidth)</p>

<p class="NDLRefMemberDescription">This function sets the window
width. Note that this does not include the window frame if a
frame exists.</p>

<p class="NDLRefMemberFunction">unsigned int GetWidth() const</p>

<p class="NDLRefMemberDescription">This function returns the
window width. Note that this does not include the window frame if
a frame exists.</p>

<p class="NDLRefMemberFunction">void SetHeight(unsigned int
uiHeight)</p>

<p class="NDLRefMemberDescription">This function sets the window
height. Note that this does not include the window frame if a
frame exists.</p>

<p class="NDLRefMemberFunction">unsigned int GetHeight()
const</p>

<p class="NDLRefMemberDescription">This function returns the
window height. Note that this does not include the window frame
if a frame exists.</p>

<p class="NDLRefMemberFunction">void SetWindowOnTop(bool
bWindowOnTop)</p>

<p class="NDLRefMemberDescription">This function sets the window
behavior to always remain on top.</p>

<p class="NDLRefMemberFunction">bool GetWindowOnTop() const</p>

<p class="NDLRefMemberDescription">This function returns the
window behavior to always remain on top.</p>

<p class="NDLRefMemberFunction">void SetParentWidth(unsigned int
uiWidth)</p>

<p class="NDLRefMemberDescription">This function records the
width of the parent window.</p>

<p class="NDLRefMemberFunction">unsigned int GetParentWidth()
const</p>

<p class="NDLRefMemberDescription">This function returns the
width of the parent window.</p>

<p class="NDLRefMemberFunction">void SetParentHeight(unsigned int
uiHeight)</p>

<p class="NDLRefMemberDescription">This function records the
height of the parent window.</p>

<p class="NDLRefMemberFunction">unsigned int GetParentHeight()
const</p>

<p class="NDLRefMemberDescription">This function returns the
height of the parent window.</p>

<p class="NDLRefMemberFunction">void
SetStatusWindowReference(NiStatusWindowRef pWnd, unsigned int
uiPane)</p>

<p class="NDLRefMemberDescription">This function sets up a status
window pane using a window handle and a pane ordinal.</p>

<p class="NDLRefMemberFunction">NiStatusWindowRef
GetStatusWindowReference(unsigned int uiPane) const</p>

<p class="NDLRefMemberDescription">This function returns the
window handle of a pane of the status window.</p>

<p class="NDLRefMemberFunction">bool GetStatusPanesExist()
const</p>

<p class="NDLRefMemberDescription">This function returns whether
the window has any panes.</p>

<p class="NDLRefMemberFunction">unsigned int GetNumStatusPanes()
const</p>

<p class="NDLRefMemberDescription">This function returns the
number of panes.</p>

<p class="NDLRefMemberFunction">void WriteToStatusWindow(unsigned
int uiPane, char* pcMsg) cons</p>

<p class="NDLRefMemberDescription">This function sends a message
to a window pane of the window.</p>

<p class="NDLRefMemberFunction">void StatusWindowDestroy()</p>

<p class="NDLRefMemberDescription">This function destroys a
status window.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
