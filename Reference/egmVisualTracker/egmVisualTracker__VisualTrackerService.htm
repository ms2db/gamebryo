<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>egmVisualTracker::VisualTrackerService</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">egmVisualTracker::VisualTrackerService</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../efd/efd__ISystemService.htm">efd::ISystemService</a></span></p>


<p class="NDLRefHeaderFile">&lt;VisualTrackerService.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classegm_visual_tracker_1_1_visual_tracker_service.gif" alt="Inheritance graph for egmVisualTracker::VisualTrackerService"/>
  <p class="FigureCaption">Inheritance graph for egmVisualTracker::VisualTrackerService</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">This service provides a graphical display for tracking performance over time or other statistics. </p>
<p class="NDLNormal">There is built-in support for tracking frame rate, memory allocations, entity locations and some other common metrics.</p>
<p class="NDLNormal">The set of items to display is controlled by the configuration system. See the Configuration Options Quick Reference page for a summary.</p>
<p class="NDLNormal">The <span class="NDLSystemFont">VisualTrackerService</span> depends on the <span class="NDLSystemFont"><a href="../ecr/ecr__RenderService.htm">ecr::RenderService</a></span> service and the <span class="NDLSystemFont"><a href="../efd/efd__MessageService.htm">efd::MessageService</a></span> service. Users may wish to configure the visual tracker using the ConfigService. To do this, simply create a new section, "[VisualTracker]". To adjust the maximum values for Performance charts, create a variable called "PerfMaxValue" and set to the new maximum. Similarly, users can set the maximums for Timing charts with "TimingMaxValue" and Memory charts with "MemMaxValue". Additionally, individual service timings can be captured by setting a variable named "ServiceTrackers" with the count of trackers. Subsequent variables like "ServiceY" should be set with the Service ID of the service you wish to track. The "Y" variable should be the numeric index of the service to track, so the first service would be "Service0". Colors may also be specified per service using "ServiceYColor". Again, the "Y" variable name should be the service index.</p>
<p class="NDLNormal">The configuration system is also used to control the display of an entity location scatter plot. </p>

<a name="public_types"></a>
<p class="NDLRefHead1">Public Types</p>
<a name="classegm_visual_tracker_1_1_visual_tracker_service_1a0c9abf3d83dbec253a91f1a18c5c2a07"></a>
<p class=NDLRefHead2>egmVisualTracker::VisualTrackerService::ScatterGraphSymbols</p>


<p class="NDLRefMemberDescription">Any enumeration of the symbols that can be used for adding scatter graph points. </p>

<p class="NDLRefMemberDetailedDescription">These symbols are shown at the location of each point on the graph and are moved as the points are updated. In addition these symbols can be used with AddLegend to shown the symbol next to the legend name. </p>

<!--(Table)=========================================================-->
<div class="ReferenceTable">
<table>
  <thead>
	<tr>
        <th>Name</th>
	    <th>Description</th>
    </tr>
  </thead>
  <tbody>  
<tr>
    <td><span class="NDLSystemFont">SGS_invalid</span></td>
    <td>An invalid symbol value. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SGS_square_small</span></td>
    <td>A small square. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SGS_square</span></td>
    <td>A medium sized hollow square. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SGS_square_big</span></td>
    <td>A large hollow square. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SGS_solid</span></td>
    <td>A large solid square. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SGS_circle_hollow</span></td>
    <td>A small hollow circle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SGS_circle_solid</span></td>
    <td>A small solid circle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SGS_circle_large_hollow</span></td>
    <td>A large hollow circle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SGS_circle_large_solid</span></td>
    <td>A large solid circle. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SGS_arrow_top_right</span></td>
    <td>small arrow from top-right corner pointing at center </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SGS_arrow_top_left</span></td>
    <td>small arrow from top-left corner pointing at center </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SGS_arrow_bottom_left</span></td>
    <td>small arrow from bottom-left corner pointing at center </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SGS_arrow_bottom_right</span></td>
    <td>small arrow from bottom-right corner pointing at center </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SGS_arrow_up</span></td>
    <td>A large arrow pointing up. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SGS_arrow_down</span></td>
    <td>A large arrow pointing down. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SGS_arrow_left</span></td>
    <td>A large arrow pointing left. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SGS_arrow_right</span></td>
    <td>A large arrow pointing right. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SGS_plus_hollow</span></td>
    <td>An outline of a thick plus symbol. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SGS_plus_solid</span></td>
    <td>A solid thick plus symbol. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SGS_plus_thin</span></td>
    <td>A solid thin plus symbol. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SGS_plus_small</span></td>
    <td>A small solid plus symbol. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SGS_x_hollow</span></td>
    <td>An outline of a thick 'x' symbol. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SGS_x_solid</span></td>
    <td>A solid thick 'x' symbol. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SGS_x_thin</span></td>
    <td>A solid thin 'x' symbol. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SGS_x_small</span></td>
    <td>A small solid 'x' symbol. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SGS_minus_hollow</span></td>
    <td>An outline of a thick minus symbol. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SGS_minus_soild</span></td>
    <td>A solid thick minus symbol. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SGS_minus_thin</span></td>
    <td>A solid thin minus symbol. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SGS_minus_small</span></td>
    <td>A small solid minus symbol. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SGS_play_hollow</span></td>
    <td>A hollow triage like a standard play button. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SGS_play_solid</span></td>
    <td>A solid triage like a standard play button. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SGS_back_hollow</span></td>
    <td>A hollow triangle like 'play' but pointing left. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SGS_back_solid</span></td>
    <td>A solid triangle like 'play' but pointing left. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SGS_pause_hollow</span></td>
    <td>a standard pause button symbol </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SGS_pause_solid</span></td>
    <td>a standard pause button symbol </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SGS_stopsign_hollow</span></td>
    <td>An outline of a large octagon. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SGS_stopsign_solid</span></td>
    <td>An outline of a large octagon. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SGS_wedge_up_hollow</span></td>
    <td>A hollow triangle like 'play' but pointing up. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SGS_wedge_up_solid</span></td>
    <td>A solid triangle like 'play' but pointing up. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SGS_wedge_down_hollow</span></td>
    <td>A hollow triangle like 'play' but pointing down. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SGS_wedge_down_solid</span></td>
    <td>A solid triangle like 'play' but pointing down. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SGS_stick_man</span></td>
    <td>A stick figure. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SGS_little_dude</span></td>
    <td>A little alien looking person. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SGS_fido</span></td>
    <td>A critter icon that looks like a horse. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SGS_lightbulb</span></td>
    <td>A light bulb icon (looks more like a key to me). </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">SGS_camera</span></td>
    <td>A camera icon. </td>
</tr>

  </tbody>
</table>
</div>


<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classegm_visual_tracker_1_1_visual_tracker_service_1ad69ac13048591dada5f52a22b1b4822e"></a>
<p class="NDLRefMemberFunction">VisualTrackerService()</p>
<p class="NDLRefMemberDescription">Constructs the <span class="NDLSystemFont">VisualTracker</span> service. </p>

<a name="classegm_visual_tracker_1_1_visual_tracker_service_1a21ec0b74a07788a2f833a2711d8c74f1"></a>
<p class="NDLRefMemberFunction">virtual const char*  GetDisplayName() const</p>
<p class="NDLRefMemberDescription">Returns the display name, "VisualTrackerService". </p>

<a name="classegm_visual_tracker_1_1_visual_tracker_service_1acc140ebe5459dc9166e0348113132441"></a>
<p class="NDLRefMemberFunction">void  AddSurface(<span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">ecr::RenderSurfacePtr</a></span> spSurface)</p>
<p class="NDLRefMemberDescription">Sets a surface to which the tracker will be drawn. </p>
<p class="NDLRefMemberDetailedDescription">This function must be called for at least one surface in order to see any visual tracker output. Warnings will be sent to the log if it is not called before OnTick.</p>
<p class="NDLRefMemberDetailedDescription">Note that the tracker statistics are always pulled from the current default render surface as reported by the <span class="NDLSystemFont"><a href="../ecr/ecr__RenderService.htm">ecr::RenderService</a></span> object. This function controls where they are rendered to. </p>

<a name="classegm_visual_tracker_1_1_visual_tracker_service_1afbbadab7402a959a2b3443a7a9deca58"></a>
<p class="NDLRefMemberFunction">void  RemoveSurface(<span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">ecr::RenderSurfacePtr</a></span> spSurface)</p>
<p class="NDLRefMemberDescription">Removes the given surface from those receiving visual tracker output. </p>

<a name="classegm_visual_tracker_1_1_visual_tracker_service_1a21ed61813e21c13f0fa23ed2bdbb2104"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  AddPage(const char* pageName)</p>
<p class="NDLRefMemberDescription">Add a new page to the visual tracker output. </p>
<p class="NDLRefMemberDetailedDescription">Pages are cycled through each time the "VISUAL_TRACKER_ACTION" input action is triggered. Each page can have multiple charts and each chart can have multiple graphs. Each graph is typically a data line plotted over time on the chart.</p>
<p class="NDLRefMemberDetailedDescription">This method may be called during PreInit.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pageName</span></td>
    <td>The name of the current page. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Index of the page that was added, or -1 if the page name is in use or invalid. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegm_visual_tracker_1_1_visual_tracker_service_1aad0896d69538e1a3d200e57521c3e86c"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  SelectPage(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> index)</p>
<p class="NDLRefMemberDescription">Set the active display page using the page index. </p>
<p class="NDLRefMemberDetailedDescription">This method may be called during PreInit.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">index</span></td>
    <td>The page to select. This is normally a previously returned value from AddPage. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the index is a valid page index, false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegm_visual_tracker_1_1_visual_tracker_service_1a09c96e546cb4da10043420bd95deb5d9"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  SelectPage(const char* pageName)</p>
<p class="NDLRefMemberDescription">Set the active display page using the page name. </p>
<p class="NDLRefMemberDetailedDescription">This method may be called during PreInit.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pageName</span></td>
    <td>The page to select. The name is whatever name was passed to AddPage. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the name is a valid page, false otherwise. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegm_visual_tracker_1_1_visual_tracker_service_1a5341d964d08daaa89cfeacffb2ac5846"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetCurrentPage() const</p>
<p class="NDLRefMemberDescription">Returns the index of the current page. </p>
<p class="NDLRefMemberDetailedDescription">This method may be called during PreInit. </p>

<a name="classegm_visual_tracker_1_1_visual_tracker_service_1a0b0b237d80344fdc063b9387548b815b"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  AddChart(<br/>const char* chartName, <br/><span class="NDLSystemFont"><a href="../NiMain/NiRect.htm">NiRect</a></span>&lt;float&gt; dataRange, <br/><span class="NDLSystemFont"><a href="../NiMain/NiRect.htm">NiRect</a></span>&lt;float&gt; windowRect, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a37c593debc73d82d7ddc571c725f0e2d">efd::TimeType</a></span> fSamplingRate, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> numDecimalPlaces = 0, <br/><span class="NDLSystemFont">efd::Bool</span> updateOnlyWhenVisible = false)</p>
<p class="NDLRefMemberDescription">Add a chart to the current page. </p>
<p class="NDLRefMemberDetailedDescription">You must have previously called AddPage before you call this method.</p>
<p class="NDLRefMemberDetailedDescription">This method may be called during PreInit.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">chartName</span></td>
    <td>The name of the current chart. This name is displayed above the chart. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">dataRange</span></td>
    <td>The range for data points for all graphs added to this chart. For most GraphCallbackObject sources the integral width of this range is used as the number of samples to store. The height of this range is used to clamp the source values. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">windowRect</span></td>
    <td>The region within the render surface on which to render this chart. The specified dataRange will be scaled to fit in the windowRect. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">fSamplingRate</span></td>
    <td>The time frequency with which all graphs added to this chart will update. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">numDecimalPlaces</span></td>
    <td>The number of decimal places to display for axis labels. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">updateOnlyWhenVisible</span></td>
    <td>If true, update the chart only when visible. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the tracker was added, or false if there is no current page. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegm_visual_tracker_1_1_visual_tracker_service_1a41aeeba40386b6217545929a09865d0f"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  AddLineGraph(<br/>const char* graphName, <br/><span class="NDLSystemFont"><a href="../NiVisualTracker/NiVisualTracker__GraphCallbackObject.htm">NiVisualTracker::GraphCallbackObject</a></span>* pCallbackObject, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__Color.htm">efd::Color</a></span>& color)</p>
<p class="NDLRefMemberDescription">Add a time series line graph to the current chart. </p>
<p class="NDLRefMemberDetailedDescription">Line graphs are updated over time and draw a line showing previous values. The number of previous values used is determined by the width of the dataRange for the parent chart. You must have previously called AddChart before you call this method.</p>
<p class="NDLRefMemberDetailedDescription">This method may be called during PreInit.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">graphName</span></td>
    <td>The name of the current graph. This name is displayed in the given color in the legend under the graph. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pCallbackObject</span></td>
    <td>The callback object which queries the data points. The TakeSample method will be called on this object at the sampling rate specified by the chart and the results over time will be rendered as line graph. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">color</span></td>
    <td>The color used to render the line graph on the chart and the name in the legend. Every graph on the same chart should use a different color. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if a graph was added to the current chart, or false if there is no current chart or no current page. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegm_visual_tracker_1_1_visual_tracker_service_1a6487a2dfa9c69a366f0d78b6a1196248"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  AddScatterGraphPoint(<br/><span class="NDLSystemFont"><a href="../NiVisualTracker/NiVisualTracker__DataPointCallbackObject.htm">NiVisualTracker::DataPointCallbackObject</a></span>* pCallbackObject, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__Color.htm">efd::Color</a></span>& color, <br/><span class="NDLSystemFont"><a href="egmVisualTracker__VisualTrackerService.htm#classegm_visual_tracker_1_1_visual_tracker_service_1a0c9abf3d83dbec253a91f1a18c5c2a07">ScatterGraphSymbols</a></span> symbol)</p>
<p class="NDLRefMemberDescription">Add a scatter graph point to the current chart. </p>
<p class="NDLRefMemberDetailedDescription">A scatter graph does not represent a connected series of data. Rather they represent individual points within the dataRange of the parent chart. At the update frequency for the chart each point is refreshed which discards all previous data. You must have previously called AddChart before you call this method.</p>
<p class="NDLRefMemberDetailedDescription">Scatter graph points consume system resources and should be used with caution on resource limited platforms.</p>
<p class="NDLRefMemberDetailedDescription">This method may be called during PreInit.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pCallbackObject</span></td>
    <td>The callback object which queries the data points. The TakeSample method will be called on this object at the sampling rate specified by the chart and the results over time will be rendered as line graph. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">color</span></td>
    <td>The color used to render the line graph on the chart and the name in the legend. Every graph on the same chart should use a different color. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">symbol</span></td>
    <td>The index of the symbol to use when rendering this data point. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if a graph was added to the current chart, or false if there is no current chart or no current page. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegm_visual_tracker_1_1_visual_tracker_service_1a49b6d081f8a78d19aab3f9490fa10f00"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  AddLegend(<br/>const char* name, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__Color.htm">efd::Color</a></span>& color, <br/><span class="NDLSystemFont"><a href="egmVisualTracker__VisualTrackerService.htm#classegm_visual_tracker_1_1_visual_tracker_service_1a0c9abf3d83dbec253a91f1a18c5c2a07">ScatterGraphSymbols</a></span> symbol = SGS_invalid)</p>
<p class="NDLRefMemberDescription">Add a legend entry. </p>
<p class="NDLRefMemberDetailedDescription">AddLineGraph automatically adds a legend entry, but this can be used with AddScatterGraphPoint to provide labeling.</p>
<p class="NDLRefMemberDetailedDescription">This method may be called during PreInit. </p>

<a name="classegm_visual_tracker_1_1_visual_tracker_service_1a0b51e1c12cef2106775f078443038796"></a>
<p class="NDLRefMemberFunction">void  SetShowTrackers(<span class="NDLSystemFont">bool</span> show)</p>
<p class="NDLRefMemberDescription">Sets display status of tracker graphs. </p>

<a name="classegm_visual_tracker_1_1_visual_tracker_service_1a0366938f7cf95af8fa122797259f1dd5"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetShowTrackers() const</p>
<p class="NDLRefMemberDescription">Returns true if trackers are visible. </p>

<a name="classegm_visual_tracker_1_1_visual_tracker_service_1a5900fbf341c45e840f0870dbb4a78e73"></a>
<p class="NDLRefMemberFunction">void  ToggleShowTrackers()</p>
<p class="NDLRefMemberDescription">Toggles the visibility of the trackers. </p>

<a name="classegm_visual_tracker_1_1_visual_tracker_service_1a6dfff8efe231d5d5a4ab4691cdb7e728"></a>
<p class="NDLRefMemberFunction">void  HandleMessage(<br/>const <span class="NDLSystemFont"><a href="../ecrInput/ecrInput__InputActionMessage.htm">ecrInput::InputActionMessage</a></span>* pMsg, <br/><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span> targetChannel)</p>
<p class="NDLRefMemberDescription">Handle incoming action messages from the input service. </p>
<p class="NDLRefMemberDetailedDescription">The service looks for key presses of the F11 key or GamePad Right Stick, which toggles display. </p>

<a name="classegm_visual_tracker_1_1_visual_tracker_service_1a8f67f66b11832932086ae476922d3544"></a>
<p class="NDLRefMemberFunction">void  HandleEntityMessage(<br/>const <span class="NDLSystemFont"><a href="../egf/egf__EntityChangeMessage.htm">egf::EntityChangeMessage</a></span>* pMsg, <br/><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">efd::Category</a></span> )</p>
<p class="NDLRefMemberDescription">Handle entity discover and remove messages. </p>
<p class="NDLRefMemberDetailedDescription">Discovery adds the entity to any entity scatter plot, while removal causes the entity to be removed from the plot. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
