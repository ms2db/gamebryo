<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiProgramLauncher</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiProgramLauncher</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../efd/efd__MemObject.htm">efd::MemObject</a></span></p>


<p class="NDLRefHeaderFile">&lt;NiProgramLauncher.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/class_ni_program_launcher.gif" alt="Inheritance graph for NiProgramLauncher"/>
  <p class="FigureCaption">Inheritance graph for NiProgramLauncher</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">This singleton object is used to launch an executable on the local PC or console development kit. </p>
<p class="NDLNormal">When the <span class="NDLSystemFont">NiProgramLauncher</span> singleton is initialized, it will attempt to load platform-specific launcher plug-ins. The available platforms and targets can then be queried and used to create a <span class="NDLSystemFont"><a href="NiProgramRunner.htm">NiProgramRunner</a></span> object. </p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="class_ni_program_launcher_1a7dbf1df2a4a8507723bccb5a4665d343"></a>
<p class="NDLRefMemberFunction">void  GetAvailablePlatformNames(<span class="NDLSystemFont"><a href="../NiMain/NiTObjectArray.htm">NiStringArray</a></span>& kPlatformNames) const</p>
<p class="NDLRefMemberDescription">Returns the display names for platforms (for example, "PC", "Playstation 3", etc) where an executable can be launched. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">kPlatformNames</span></td>
    <td>An array used to return the name strings </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_program_launcher_1af381a5199aaf518a8359871e941f20ce"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetAvailableTargetNames(<br/>const char* pcPlatformName, <br/><span class="NDLSystemFont"><a href="../NiMain/NiTObjectArray.htm">NiStringArray</a></span>& kTargetNames, <br/><span class="NDLSystemFont"><a href="../NiMain/NiString.htm">NiString</a></span>* pkErrorInfo = NULL) const</p>
<p class="NDLRefMemberDescription">Returns the display names for targets (machine names) where an executable can be launched. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pcPlatformName</span></td>
    <td>The name of the platform (returned by <span class="NDLSystemFont"><a href="NiProgramLauncher.htm#class_ni_program_launcher_1a7dbf1df2a4a8507723bccb5a4665d343">GetAvailablePlatformNames()</a></span>) </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">kTargetNames</span></td>
    <td>An array used to return the machine name strings </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pkErrorInfo</span></td>
    <td>An optional string used to return an error message if the method fails </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True indicates no errors were encountered while querying the target names </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_program_launcher_1a2524b913e619f2fa1e82e202951b3469"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiProgramRunner.htm">NiProgramRunner</a></span>*  Create(const char* pcPlatformName)</p>
<p class="NDLRefMemberDescription">Create an object that can be used to execute a program on a PC or console development kit. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pcPlatformName</span></td>
    <td>The name of the platform that the executable will be launched on. This can be queried using the <span class="NDLSystemFont"><a href="NiProgramLauncher.htm#class_ni_program_launcher_1a7dbf1df2a4a8507723bccb5a4665d343">GetAvailablePlatformNames()</a></span> method. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>An object that can be used launch executable or NULL if the method failed </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_program_launcher_1a61895128822e955fa0bcfcf7068a5523"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="NiProgramRunnerFactory.htm">NiProgramRunnerFactory</a></span>*  GetProcessFactory(const char* pcPlatformName) const</p>
<p class="NDLRefMemberDescription">Returns pointer to a factory object that can be used to query information about the platform and create <span class="NDLSystemFont"><a href="NiProgramRunner.htm">NiProgramRunner</a></span> objects. </p>
<p class="NDLRefMemberDetailedDescription">This object is managed by the <span class="NDLSystemFont">NiProgramLauncher</span> singleton. Do not delete the object, it will be cleaned up at shutdown.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pcPlatformName</span></td>
    <td>The name of the platform that the executable will be launched on. This can be queried using the <span class="NDLSystemFont"><a href="NiProgramLauncher.htm#class_ni_program_launcher_1a7dbf1df2a4a8507723bccb5a4665d343">GetAvailablePlatformNames()</a></span> method. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>NULL if the platform is not supported (or the plug-in for the platform was not loaded) </td>
</tr>

        </tbody>
    </table>
</div>


<a name="public_static_methods"></a>
<p class="NDLRefHead1">Public Static Methods</p>


<a name="class_ni_program_launcher_1afe16e1a69ae7df3024ddda52d130ac22"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">NiProgramLauncher</span>*  GetInstance()</p>
<p class="NDLRefMemberDescription">Accessor for the singleton object. </p>
<p class="NDLRefMemberDetailedDescription">This method will return NULL if the <span class="NDLSystemFont"><a href="NiProgramLauncher.htm#class_ni_program_launcher_1a67d1a3488752ebc37f579984892c4008">Initialize()</a></span> method has not been called (or if the <span class="NDLSystemFont"><a href="NiProgramLauncher.htm#class_ni_program_launcher_1aa21bafe8ab703f3b6ec1b4770b850d51">Shutdown()</a></span> method has been called). </p>

<a name="class_ni_program_launcher_1a67d1a3488752ebc37f579984892c4008"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  Initialize(<br/><span class="NDLSystemFont"><a href="../NiMain/NiString.htm">NiString</a></span>* pkErrorInfo = NULL, <br/>const char* pcPluginDirectory = NULL)</p>
<p class="NDLRefMemberDescription">Create the singleton and query for available platforms. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pkErrorInfo</span></td>
    <td>Optional string object passed by the caller to hold any error messages generated during initialization </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pcPluginDirectory</span></td>
    <td>Optional path to a directory to find the console program launcher DLLs. If no directory is supplied the following directory will be used EMERGENT_PATH\sdk\Win32\DLL. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_program_launcher_1aa21bafe8ab703f3b6ec1b4770b850d51"></a>
<p class="NDLRefMemberFunction">static void  Shutdown()</p>
<p class="NDLRefMemberDescription">Unload any program launcher DLLs and destroy the singleton. </p>
<p class="NDLRefMemberDetailedDescription">Executables running on PC or consoles will not be terminated. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
