<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiProgramRunner</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiProgramRunner</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../NiMain/NiRefObject.htm">NiRefObject</a></span></p>


<p class="NDLRefHeaderFile">&lt;NiProgramRunner.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/class_ni_program_runner.gif" alt="Inheritance graph for NiProgramRunner"/>
  <p class="FigureCaption">Inheritance graph for NiProgramRunner</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">Interface that defines methods for launching an executable. </p>
<p class="NDLNormal">This interface is implemented by a concrete class for each platform supported by the <span class="NDLSystemFont"><a href="NiProgramLauncher.htm">NiProgramLauncher</a></span> library. </p>

<a name="public_static_attributes"></a>
<p class="NDLRefHead1">Public Static Attributes</p>


<a name="class_ni_program_runner_1a5c73300393440c3bba8910987f505a97"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont"><a href="../NiMain/NiRTTI.htm">NiRTTI</a></span>  ms_RTTI</p>
<p class="NDLRefMemberFunction"></p>
<a name="public_static_methods"></a>
<p class="NDLRefHead1">Public Static Methods</p>


<a name="class_ni_program_runner_1ad2c875d73fa9e024ff568d5f6e14b25b"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  IsExactKindOf(<br/>const <span class="NDLSystemFont"><a href="../NiMain/NiRTTI.htm">NiRTTI</a></span>* pkRTTI, <br/>const <span class="NDLSystemFont">NiProgramRunner</span>* pkObject)</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_program_runner_1a01664f85f4aea4227f515db1499bc151"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  IsKindOf(<br/>const <span class="NDLSystemFont"><a href="../NiMain/NiRTTI.htm">NiRTTI</a></span>* pkRTTI, <br/>const <span class="NDLSystemFont">NiProgramRunner</span>* pkObject)</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_program_runner_1ac5b587f0b541f4c210c43f1788f2a135"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">NiProgramRunner</span>*  VerifyStaticCastDebug(<br/>const <span class="NDLSystemFont"><a href="../NiMain/NiRTTI.htm">NiRTTI</a></span>* pkRTTI, <br/>const <span class="NDLSystemFont">NiProgramRunner</span>* pkObject)</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_program_runner_1a4fdb0754b8fb46508ea9340ffc2663ca"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">NiProgramRunner</span>*  DynamicCast(<br/>const <span class="NDLSystemFont"><a href="../NiMain/NiRTTI.htm">NiRTTI</a></span>* pkRTTI, <br/>const <span class="NDLSystemFont">NiProgramRunner</span>* pkObject)</p>
<p class="NDLRefMemberFunction"></p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="class_ni_program_runner_1ad405d0ea18f72efbc76f3e13b1e9a8a2"></a>
<p class="NDLRefMemberFunction">virtual const <span class="NDLSystemFont"><a href="../NiMain/NiRTTI.htm">NiRTTI</a></span>*  GetRTTI() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_program_runner_1a0072816d1d988b45fea21a59386f6577"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsExactKindOf(const <span class="NDLSystemFont"><a href="../NiMain/NiRTTI.htm">NiRTTI</a></span>* pkRTTI) const</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_program_runner_1a6a2b36dfe92981f4fc91881403b4bbc0"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  IsKindOf(const <span class="NDLSystemFont"><a href="../NiMain/NiRTTI.htm">NiRTTI</a></span>* pkRTTI) const</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_program_runner_1abdd2701022c9a0f832992ba1c6b0e6d9"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiProgramRunner</span>*  DynamicCast(const <span class="NDLSystemFont"><a href="../NiMain/NiRTTI.htm">NiRTTI</a></span>* pkRTTI) const</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_program_runner_1ab1bb6f421fd2e59fe9ba663a263f0933"></a>
<p class="NDLRefMemberFunction">NiProgramRunner()</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_program_runner_1a2a91da7e6796c77d3efd876064c722ff"></a>
<p class="NDLRefMemberFunction">virtual ~NiProgramRunner()</p>
<p class="NDLRefMemberFunction"></p>

<a name="class_ni_program_runner_1a6100967c8d9d319fb8c405d8968c4397"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../NiMain/NiString.htm">NiString</a></span>&  GetCommandLine()</p>
<p class="NDLRefMemberDescription">Get string that will be used as command line arguments when an executable is launched. </p>
<p class="NDLRefMemberDetailedDescription">This string can be replaced or appended to change or add options. The command line should not include the executable name. </p>

<a name="class_ni_program_runner_1a15588e6d887d07a659a3d80770af8cc0"></a>
<p class="NDLRefMemberFunction">void  AddFilePathMapping(<br/>const char* pcLocal, <br/>const char* pcRemote)</p>
<p class="NDLRefMemberDescription">This method either copies or configures paths required by the executable depending on the platform. </p>
<p class="NDLRefMemberDetailedDescription">The behavior of this method varies based on the platform type. Refer to the Ni[platform]ProgramRunner class definition for additional information.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pcLocal</span></td>
    <td>Path on the local PC </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pcRemote</span></td>
    <td>Path or variable used by the console development kit (see console-specific class for additional details) </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_program_runner_1afd09c89de2dfccd3d1b0eb6ddc5fae58"></a>
<p class="NDLRefMemberFunction">void  SetOutputWindow(<span class="NDLSystemFont">bool</span> bEnabled)</p>
<p class="NDLRefMemberDescription">Open or close a separate output window that displays text messages indicating progress or errors encountered while launching executable. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">bEnabled</span></td>
    <td>True indicates the window should be displayed </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_program_runner_1addb2e9dde2d47b2ac9425121e72752a3"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetOutputWindow()</p>
<p class="NDLRefMemberDescription">Gets the display status of the output window. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>True if the window is currently displayed </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_program_runner_1a8c171437485051fdf2d12854e34c877f"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  SetOutputWindowTitle(const char* pcTitle)</p>
<p class="NDLRefMemberDescription">Allows caller to assign a title to the output window associated with this runner object. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pcTitle</span></td>
    <td>The string to be used as the window title </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>False if the window could not be created </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_program_runner_1ab9e3a8b07817292c21fe05744acbb49a"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  Start(<br/>const char* pcTargetName, <br/>const char* pcExecutableFilename) = 0</p>
<p class="NDLRefMemberDescription">Launch executable on the specified target machine. </p>
<p class="NDLRefMemberDetailedDescription">The command line specified by <span class="NDLSystemFont"><a href="NiProgramRunner.htm#class_ni_program_runner_1a6100967c8d9d319fb8c405d8968c4397">GetCommandLine()</a></span> will be passed to the executable at launch. The progress or failure to launch the executable will be displayed as text messages in in a separate output window (if enabled using <span class="NDLSystemFont"><a href="NiProgramRunner.htm#class_ni_program_runner_1afd09c89de2dfccd3d1b0eb6ddc5fae58">SetOutputWindow()</a></span>).</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pcTargetName</span></td>
    <td>The name of target where the executable is to be launched. This can be queried from the <span class="NDLSystemFont"><a href="NiProgramLauncher.htm">NiProgramLauncher</a></span> singleton or a NiProgramFactory object </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pcExecutableFilename</span></td>
    <td>The path and filename to the executable on the local workstation </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the executable was successfully launched. Check output window if the launch failed for error messages. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="class_ni_program_runner_1a8219a3e8a770a0c26945609ef3b2ef43"></a>
<p class="NDLRefMemberFunction">int  DisplayMsg(<br/>const char* pcFormat, <br/>... )</p>
<p class="NDLRefMemberDescription">Show a message in the output window. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pcFormat</span></td>
    <td>Printf-like format specifier string </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The number of bytes displayed or -1 if the window is closed. </td>
</tr>

        </tbody>
    </table>
</div>


 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
