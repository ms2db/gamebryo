<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiD3D10ShaderProgramFactory</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiD3D10ShaderProgramFactory</p>

<p class="NDLRefParentage">: public <a href="../../Reference/NiSystem/NiMemObject.htm">NiMemObject</a></p>

<p class="NDLRefHeaderFile">&lt;NiD3D10ShaderProgramFactory.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiD3D10ShaderProgramFactory</span> 
 is the factory class used for loading shader programs.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberDescription">The shader program factory is instantiated 
 by the renderer. The application should not call any functions which would 
 create an instance of the factory.</p>

<p class="NDLRefHead1">Supported Static Member Functions</p>

<p class="NDLRefMemberFunction">static NiD3D10ShaderProgramFactory* GetInstance()</p>

<p class="NDLRefMemberDescription">Returns an instance of the <span class="NDLSystemFont">NiD3DShaderProgramFactory</span> 
 class. This function will only return an instance that has already been 
 constructed, and will not create a new instance. The only reason for getting 
 an instance of this class is to use it to call one of the supported member 
 functions described below. </p>

<p class="NDLRefMemberFunction">static bool CreateVertexShaderFromFile(const 
 char* pcFileName, const D3D10_SHADER_MACRO* pkDefines, ID3D10Include* 
 pkInclude, const char* pcEntryPoint, const char* pcShaderTarget, unsigned 
 int uiFlags, const char* pcShaderName, <a HREF="NiD3D10VertexShader.htm">NiD3D10VertexShaderPtr</a>&amp; 
 spVertexShader)</p>

<p class="NDLRefMemberDescription">Creates a vertex shader from the file 
 <span class="NDLSystemFont">pcFileName</span>. The file name will be parsed 
 for an extension, and the registered <span class="NDLSystemFont"><a HREF="NiD3D10ShaderProgramCreator.htm">NiD3D10ShaderProgramCreator</a></span> 
 class for that extension will be used to create the vertex shader. The 
 resulting <span class="NDLSystemFont"><a HREF="NiD3D10VertexShader.htm">NiD3D10VertexShader</a></span> 
 will have the name specified in <span class="NDLSystemFont">pcShaderName</span>. 
 The <span class="NDLSystemFont">pcEntryPoint</span> parameter indicates 
 the name of the function to use as the vertex shader, and <span class="NDLSystemFont">pcShaderTarget</span> 
 indicates which shader model to use when compiling the function. </p>

<p class="NDLRefMemberDescription">The <span class="NDLSystemFont">pkDefines</span> 
 and <span class="NDLSystemFont">pkInclude</span> parameters are optional 
 ways to provide either a set of macros or a user-defined class for handling 
 include files, respectively. The <span class="NDLSystemFont">uiFlags</span> 
 parameter is a set of compilation flags that will be combined with the 
 flags from the <a HREF="NiD3D10ShaderProgramCreator.htm"><span class="NDLSystemFont">NiD3D10ShaderProgramCreator</span></a> 
 object. These parameters will all be passed through to the <span class="NDLSystemFont">D3D10CompileShader</span> 
 function.</p>

<p class="NDLRefMemberDescription">The function returns whether or not the 
 shader program creation was successful.</p>

<p class="NDLRefMemberFunction">static bool CreateVertexShaderFromBlob(ID3D10Blob* 
 pkShaderCode, const char* pcFileName, const D3D10_SHADER_MACRO* pkDefines, 
 ID3D10Include* pkInclude, const char* pcEntryPoint, const char* pcShaderTarget, 
 unsigned int uiFlags, const char* pcShaderName, <a href="NiD3D10VertexShader.htm">NiD3D10VertexShaderPtr</a>&amp; 
 spVertexShader)</p>

<p class="NDLRefMemberDescription">Creates a vertex shader from the in-memory 
 blob <span class="NDLSystemFont">pkShaderCode</span>, which is expected 
 to contain uncompiled shader code. The file name will be parsed for an 
 extension, and the registered <span class="NDLSystemFont"><a href="NiD3D10ShaderProgramCreator.htm">NiD3D10ShaderProgramCreator</a></span> 
 class for that extension will be used to create the vertex shader. The 
 resulting <span class="NDLSystemFont"><a href="NiD3D10VertexShader.htm">NiD3D10VertexShader</a></span> 
 will have the name specified in <span class="NDLSystemFont">pcShaderName</span>. 
 The <span class="NDLSystemFont">pcEntryPoint</span> parameter indicates 
 the name of the function to use as the vertex shader, and <span class="NDLSystemFont">pcShaderTarget</span> 
 indicates which shader model to use when compiling the function. </p>

<p class="NDLRefMemberDescription">The <span class="NDLSystemFont">pkDefines</span> 
 and <span class="NDLSystemFont">pkInclude</span> parameters are optional 
 ways to provide either a set of macros or a user-defined class for handling 
 include files, respectively. The <span class="NDLSystemFont">uiFlags</span> 
 parameter is a set of compilation flags that will be combined with the 
 flags from the <a href="NiD3D10ShaderProgramCreator.htm"><span class="NDLSystemFont">NiD3D10ShaderProgramCreator</span></a> 
 object. These parameters will all be passed through to the <span class="NDLSystemFont">D3D10CompileShader</span> 
 function.</p>

<p class="NDLRefMemberDescription">The function returns whether or not the 
 shader program creation was successful.</p>

<p class="NDLRefMemberFunction">static bool CreateVertexShaderFromCompiledBlob(ID3D10Blob* 
 pkShaderByteCode, const char* pcFileName, const D3D10_SHADER_MACRO* pkDefines, 
 ID3D10Include* pkInclude,const char* pcEntryPoint, const char* pcShaderTarget, 
 unsigned int uiFlags, const char* pcShaderName, <a href="NiD3D10VertexShader.htm">NiD3D10VertexShaderPtr</a>&amp; 
 spVertexShader)</p>

<p class="NDLRefMemberDescription">Creates a vertex shader from the in-memory 
 blob <span class="NDLSystemFont">pkShaderCode</span>, which is expected 
 to contain compiled shader byte code. The file name will be parsed for 
 an extension, and the registered <span class="NDLSystemFont"><a href="NiD3D10ShaderProgramCreator.htm">NiD3D10ShaderProgramCreator</a></span> 
 class for that extension will be used to create the vertex shader. The 
 resulting <span class="NDLSystemFont"><a href="NiD3D10VertexShader.htm">NiD3D10VertexShader</a></span> 
 will have the name specified in <span class="NDLSystemFont">pcShaderName</span>. 
 The <span class="NDLSystemFont">pcEntryPoint</span> parameter indicates 
 the name of the function to use as the vertex shader, and <span class="NDLSystemFont">pcShaderTarget</span> 
 indicates which shader model to use when compiling the function. </p>

<p class="NDLRefMemberDescription">The <span class="NDLSystemFont">pkDefines</span> 
 and <span class="NDLSystemFont">pkInclude</span> parameters are optional 
 ways to provide either a set of macros or a user-defined class for handling 
 include files, respectively. The <span class="NDLSystemFont">uiFlags</span> 
 parameter is a set of compilation flags that will be combined with the 
 flags from the <a href="NiD3D10ShaderProgramCreator.htm"><span class="NDLSystemFont">NiD3D10ShaderProgramCreator</span></a> 
 object. These parameters will all be passed through to the <span class="NDLSystemFont">D3D10CompileShader</span> 
 function.</p>

<p class="NDLRefMemberDescription">The function returns whether or not the 
 shader program creation was successful.</p>

<p class="NDLRefMemberFunction">static bool CreateGeometryShaderFromFile(const 
 char* pcFileName, const D3D10_SHADER_MACRO* pkDefines, ID3D10Include* 
 pkInclude, const char* pcEntryPoint, const char* pcShaderTarget, unsigned 
 int uiFlags, const char* pcShaderName, NiD3D10GeometryShaderPtr&amp; spGeometryShader)</p>

<p class="NDLRefMemberDescription">Creates a geometry shader from the file 
 <span class="NDLSystemFont">pcFileName</span>. The file name will be parsed 
 for an extension, and the registered <span class="NDLSystemFont"><a href="NiD3D10ShaderProgramCreator.htm">NiD3D10ShaderProgramCreator</a></span> 
 class for that extension will be used to create the geometry shader. The 
 resulting <span class="NDLSystemFont"><a HREF="NiD3D10GeometryShader.htm">NiD3D10GeometryShader</a></span> 
 will have the name specified in <span class="NDLSystemFont">pcShaderName</span>. 
 The <span class="NDLSystemFont">pcEntryPoint</span> parameter indicates 
 the name of the function to use as the vertex shader, and <span class="NDLSystemFont">pcShaderTarget</span> 
 indicates which shader model to use when compiling the function. </p>

<p class="NDLRefMemberDescription">The <span class="NDLSystemFont">pkDefines</span> 
 and <span class="NDLSystemFont">pkInclude</span> parameters are optional 
 ways to provide either a set of macros or a user-defined class for handling 
 include files, respectively. The <span class="NDLSystemFont">uiFlags</span> 
 parameter is a set of compilation flags that will be combined with the 
 flags from the <a href="NiD3D10ShaderProgramCreator.htm"><span class="NDLSystemFont">NiD3D10ShaderProgramCreator</span></a> 
 object. These parameters will all be passed through to the <span class="NDLSystemFont">D3D10CompileShader</span> 
 function.</p>

<p class="NDLRefMemberDescription">The function returns whether or not the 
 shader program creation was successful.</p>

<p class="NDLRefMemberFunction">static bool CreateGeometryShaderFromBlob(ID3D10Blob* 
 pkShaderCode, const char* pcFileName, const D3D10_SHADER_MACRO* pkDefines, 
 ID3D10Include* pkInclude,const char* pcEntryPoint, const char* pcShaderTarget, 
 unsigned int uiFlags, const char* pcShaderName, <a HREF="NiD3D10GeometryShader.htm">NiD3D10GeometryShaderPtr</a>&amp; 
 spGeometryShader)</p>

<p class="NDLRefMemberDescription">Creates a geometry shader from the in-memory 
 blob <span class="NDLSystemFont">pkShaderCode</span>, which is expected 
 to contain uncompiled shader code. The file name will be parsed for an 
 extension, and the registered <span class="NDLSystemFont"><a href="NiD3D10ShaderProgramCreator.htm">NiD3D10ShaderProgramCreator</a></span> 
 class for that extension will be used to create the geometry shader. The 
 resulting <span class="NDLSystemFont"><a href="NiD3D10GeometryShader.htm">NiD3D10GeometryShader</a></span> 
 will have the name specified in <span class="NDLSystemFont">pcShaderName</span>. 
 The <span class="NDLSystemFont">pcEntryPoint</span> parameter indicates 
 the name of the function to use as the vertex shader, and <span class="NDLSystemFont">pcShaderTarget</span> 
 indicates which shader model to use when compiling the function. </p>

<p class="NDLRefMemberDescription">The <span class="NDLSystemFont">pkDefines</span> 
 and <span class="NDLSystemFont">pkInclude</span> parameters are optional 
 ways to provide either a set of macros or a user-defined class for handling 
 include files, respectively. The <span class="NDLSystemFont">uiFlags</span> 
 parameter is a set of compilation flags that will be combined with the 
 flags from the <a href="NiD3D10ShaderProgramCreator.htm"><span class="NDLSystemFont">NiD3D10ShaderProgramCreator</span></a> 
 object. These parameters will all be passed through to the <span class="NDLSystemFont">D3D10CompileShader</span> 
 function.</p>

<p class="NDLRefMemberDescription">The function returns whether or not the 
 shader program creation was successful.</p>

<p class="NDLRefMemberFunction">static bool CreateGeometryShaderFromCompiledBlob(ID3D10Blob* 
 pkShaderByteCode, const char* pcFileName, const D3D10_SHADER_MACRO* pkDefines, 
 ID3D10Include* pkInclude,const char* pcEntryPoint, const char* pcShaderTarget, 
 unsigned int uiFlags, const char* pcShaderName, <a href="NiD3D10GeometryShader.htm">NiD3D10GeometryShaderPtr</a>&amp; 
 spGeometryShader)</p>

<p class="NDLRefMemberDescription">Creates a geometry shader from the in-memory 
 blob <span class="NDLSystemFont">pkShaderCode</span>, which is expected 
 to contain compiled shader byte code. The file name will be parsed for 
 an extension, and the registered <span class="NDLSystemFont"><a href="NiD3D10ShaderProgramCreator.htm">NiD3D10ShaderProgramCreator</a></span> 
 class for that extension will be used to create the geometry shader. The 
 resulting <span class="NDLSystemFont"><a href="NiD3D10GeometryShader.htm">NiD3D10GeometryShader</a></span> 
 will have the name specified in <span class="NDLSystemFont">pcShaderName</span>. 
 The <span class="NDLSystemFont">pcEntryPoint</span> parameter indicates 
 the name of the function to use as the vertex shader, and <span class="NDLSystemFont">pcShaderTarget</span> 
 indicates which shader model to use when compiling the function. </p>

<p class="NDLRefMemberDescription">The <span class="NDLSystemFont">pkDefines</span> 
 and <span class="NDLSystemFont">pkInclude</span> parameters are optional 
 ways to provide either a set of macros or a user-defined class for handling 
 include files, respectively. The <span class="NDLSystemFont">uiFlags</span> 
 parameter is a set of compilation flags that will be combined with the 
 flags from the <a href="NiD3D10ShaderProgramCreator.htm"><span class="NDLSystemFont">NiD3D10ShaderProgramCreator</span></a> 
 object. These parameters will all be passed through to the <span class="NDLSystemFont">D3D10CompileShader</span> 
 function.</p>

<p class="NDLRefMemberDescription">The function returns whether or not the 
 shader program creation was successful.</p>

<p class="NDLRefMemberFunction">static bool CreateGeometryShaderWithStreamOutputFromFile(const 
 char* pcFileName, const D3D10_SHADER_MACRO* pkDefines, ID3D10Include* 
 pkInclude, const char* pcEntryPoint, const char* pcShaderTarget, unsigned 
 int uiFlags, const char* pcShaderName, const D3D10_SO_DECLARATION_ENTRY* 
 pkSODeclaration, unsigned int uiNumEntries, unsigned int uiOutputStreamStride, 
 <a href="NiD3D10GeometryShader.htm">NiD3D10GeometryShaderPtr</a>&amp; 
 spGeometryShader)</p>

<p class="NDLRefMemberDescription">Creates a geometry shader with stream 
 output from the file <span class="NDLSystemFont">pcFileName</span>. The 
 file name will be parsed for an extension, and the registered <span class="NDLSystemFont"><a href="NiD3D10ShaderProgramCreator.htm">NiD3D10ShaderProgramCreator</a></span> 
 class for that extension will be used to create the geometry shader. The 
 resulting <span class="NDLSystemFont"><a href="NiD3D10GeometryShader.htm">NiD3D10GeometryShader</a></span> 
 will have the name specified in <span class="NDLSystemFont">pcShaderName</span>. 
 The <span class="NDLSystemFont">pcEntryPoint</span> parameter indicates 
 the name of the function to use as the vertex shader, and <span class="NDLSystemFont">pcShaderTarget</span> 
 indicates which shader model to use when compiling the function. </p>

<p class="NDLRefMemberDescription">The <span class="NDLSystemFont">pkDefines</span> 
 and <span class="NDLSystemFont">pkInclude</span> parameters are optional 
 ways to provide either a set of macros or a user-defined class for handling 
 include files, respectively. The <span class="NDLSystemFont">uiFlags</span> 
 parameter is a set of compilation flags that will be combined with the 
 flags from the <a href="NiD3D10ShaderProgramCreator.htm"><span class="NDLSystemFont">NiD3D10ShaderProgramCreator</span></a> 
 object. These parameters will all be passed through to the <span class="NDLSystemFont">D3D10CompileShader</span> 
 function.</p>

<p class="NDLRefMemberDescription">The <span class="NDLSystemFont">pkSODeclaration</span>, 
 <span class="NDLSystemFont">uiNumEntries</span>, and uiOutputStreamStride 
 parameters describe the output buffer that the geometry shader will write 
 back to.</p>

<p class="NDLRefMemberDescription">The function returns whether or not the 
 shader program creation was successful.</p>

<p class="NDLRefMemberFunction">static bool CreateGeometryShaderWithStreamOutputFromBlob(ID3D10Blob* 
 pkShaderCode, const char* pcFileName, const D3D10_SHADER_MACRO* pkDefines, 
 ID3D10Include* pkInclude, const char* pcEntryPoint, const char* pcShaderTarget, 
 unsigned int uiFlags, const char* pcShaderName, const D3D10_SO_DECLARATION_ENTRY* 
 pkSODeclaration, unsigned int uiNumEntries, unsigned int uiOutputStreamStride, 
 <a href="NiD3D10GeometryShader.htm">NiD3D10GeometryShaderPtr</a>&amp; 
 spGeometryShader)</p>

<p class="NDLRefMemberDescription">Creates a geometry shader with stream 
 output from the in-memory blob <span class="NDLSystemFont">pkShaderCode</span>, 
 which is expected to contain uncompiled shader code. The file name will 
 be parsed for an extension, and the registered <span class="NDLSystemFont"><a href="NiD3D10ShaderProgramCreator.htm">NiD3D10ShaderProgramCreator</a></span> 
 class for that extension will be used to create the geometry shader. The 
 resulting <span class="NDLSystemFont"><a href="NiD3D10GeometryShader.htm">NiD3D10GeometryShader</a></span> 
 will have the name specified in <span class="NDLSystemFont">pcShaderName</span>. 
 The <span class="NDLSystemFont">pcEntryPoint</span> parameter indicates 
 the name of the function to use as the vertex shader, and <span class="NDLSystemFont">pcShaderTarget</span> 
 indicates which shader model to use when compiling the function. </p>

<p class="NDLRefMemberDescription">The <span class="NDLSystemFont">pkDefines</span> 
 and <span class="NDLSystemFont">pkInclude</span> parameters are optional 
 ways to provide either a set of macros or a user-defined class for handling 
 include files, respectively. The <span class="NDLSystemFont">uiFlags</span> 
 parameter is a set of compilation flags that will be combined with the 
 flags from the <a href="NiD3D10ShaderProgramCreator.htm"><span class="NDLSystemFont">NiD3D10ShaderProgramCreator</span></a> 
 object. These parameters will all be passed through to the <span class="NDLSystemFont">D3D10CompileShader</span> 
 function.</p>

<p class="NDLRefMemberDescription">The <span class="NDLSystemFont">pkSODeclaration</span>, 
 <span class="NDLSystemFont">uiNumEntries</span>, and uiOutputStreamStride 
 parameters describe the output buffer that the geometry shader will write 
 back to.</p>

<p class="NDLRefMemberDescription">The function returns whether or not the 
 shader program creation was successful.</p>

<p class="NDLRefMemberFunction">static bool CreateGeometryShaderWithStreamOutputFromCompiledBlob(ID3D10Blob* 
 pkShaderByteCode, const char* pcFileName, const D3D10_SHADER_MACRO* pkDefines, 
 ID3D10Include* pkInclude, const char* pcEntryPoint, const char* pcShaderTarget, 
 unsigned int uiFlags, const char* pcShaderName, const D3D10_SO_DECLARATION_ENTRY* 
 pkSODeclaration, unsigned int uiNumEntries, unsigned int uiOutputStreamStride, 
 <a href="NiD3D10GeometryShader.htm">NiD3D10GeometryShaderPtr</a>&amp; 
 spGeometryShader)</p>

<p class="NDLRefMemberDescription">Creates a geometry shader with stream 
 output from the in-memory blob <span class="NDLSystemFont">pkShaderCode</span>, 
 which is expected to contain compiled shader byte code. The file name 
 will be parsed for an extension, and the registered <span class="NDLSystemFont"><a href="NiD3D10ShaderProgramCreator.htm">NiD3D10ShaderProgramCreator</a></span> 
 class for that extension will be used to create the geometry shader. The 
 resulting <span class="NDLSystemFont"><a href="NiD3D10GeometryShader.htm">NiD3D10GeometryShader</a></span> 
 will have the name specified in <span class="NDLSystemFont">pcShaderName</span>. 
 The <span class="NDLSystemFont">pcEntryPoint</span> parameter indicates 
 the name of the function to use as the vertex shader, and <span class="NDLSystemFont">pcShaderTarget</span> 
 indicates which shader model to use when compiling the function. </p>

<p class="NDLRefMemberDescription">The <span class="NDLSystemFont">pkDefines</span> 
 and <span class="NDLSystemFont">pkInclude</span> parameters are optional 
 ways to provide either a set of macros or a user-defined class for handling 
 include files, respectively. The <span class="NDLSystemFont">uiFlags</span> 
 parameter is a set of compilation flags that will be combined with the 
 flags from the <a href="NiD3D10ShaderProgramCreator.htm"><span class="NDLSystemFont">NiD3D10ShaderProgramCreator</span></a> 
 object. These parameters will all be passed through to the <span class="NDLSystemFont">D3D10CompileShader</span> 
 function.</p>

<p class="NDLRefMemberDescription">The <span class="NDLSystemFont">pkSODeclaration</span>, 
 <span class="NDLSystemFont">uiNumEntries</span>, and uiOutputStreamStride 
 parameters describe the output buffer that the geometry shader will write 
 back to.</p>

<p class="NDLRefMemberDescription">The function returns whether or not the 
 shader program creation was successful.</p>

<p class="NDLRefMemberFunction">static bool CreatePixelShaderFromFile(const 
 char* pcFileName, const D3D10_SHADER_MACRO* pkDefines, ID3D10Include* 
 pkInclude, const char* pcEntryPoint, const char* pcShaderTarget, unsigned 
 int uiFlags, const char* pcShaderName, <a HREF="NiD3D10PixelShader.htm">NiD3D10PixelShaderPtr</a>&amp; 
 spPixelShader)</p>

<p class="NDLRefMemberDescription">Creates a pixel shader from the file <span 
 class="NDLSystemFont">pcFileName</span>. The file name will be parsed for 
 an extension, and the registered <span class="NDLSystemFont"><a href="NiD3D10ShaderProgramCreator.htm">NiD3D10ShaderProgramCreator</a></span> 
 class for that extension will be used to create the pixel shader. The 
 resulting <span class="NDLSystemFont"><a HREF="NiD3D10PixelShader.htm">NiD3D10PixelShader</a></span> 
 will have the name specified in <span class="NDLSystemFont">pcShaderName</span>. 
 The <span class="NDLSystemFont">pcEntryPoint</span> parameter indicates 
 the name of the function to use as the vertex shader, and <span class="NDLSystemFont">pcShaderTarget</span> 
 indicates which shader model to use when compiling the function. </p>

<p class="NDLRefMemberDescription">The <span class="NDLSystemFont">pkDefines</span> 
 and <span class="NDLSystemFont">pkInclude</span> parameters are optional 
 ways to provide either a set of macros or a user-defined class for handling 
 include files, respectively. The <span class="NDLSystemFont">uiFlags</span> 
 parameter is a set of compilation flags that will be combined with the 
 flags from the <a href="NiD3D10ShaderProgramCreator.htm"><span class="NDLSystemFont">NiD3D10ShaderProgramCreator</span></a> 
 object. These parameters will all be passed through to the <span class="NDLSystemFont">D3D10CompileShader</span> 
 function.</p>

<p class="NDLRefMemberDescription">The function returns whether or not the 
 shader program creation was successful.</p>

<p class="NDLRefMemberFunction">static bool CreatePixelShaderFromBlob(ID3D10Blob* 
 pkShaderCode, const char* pcFileName, const D3D10_SHADER_MACRO* pkDefines, 
 ID3D10Include* pkInclude,const char* pcEntryPoint, const char* pcShaderTarget, 
 unsigned int uiFlags, const char* pcShaderName, <a href="NiD3D10PixelShader.htm">NiD3D10PixelShaderPtr</a>&amp; 
 spPixelShader)</p>

<p class="NDLRefMemberDescription">Creates a pixel shader from the in-memory 
 blob <span class="NDLSystemFont">pkShaderCode</span>, which is expected 
 to contain uncompiled shader code. The file name will be parsed for an 
 extension, and the registered <span class="NDLSystemFont"><a href="NiD3D10ShaderProgramCreator.htm">NiD3D10ShaderProgramCreator</a></span> 
 class for that extension will be used to create the pixel shader. The 
 resulting <span class="NDLSystemFont"><a href="NiD3D10PixelShader.htm">NiD3D10PixelShader</a></span> 
 will have the name specified in <span class="NDLSystemFont">pcShaderName</span>. 
 The <span class="NDLSystemFont">pcEntryPoint</span> parameter indicates 
 the name of the function to use as the vertex shader, and <span class="NDLSystemFont">pcShaderTarget</span> 
 indicates which shader model to use when compiling the function. </p>

<p class="NDLRefMemberDescription">The <span class="NDLSystemFont">pkDefines</span> 
 and <span class="NDLSystemFont">pkInclude</span> parameters are optional 
 ways to provide either a set of macros or a user-defined class for handling 
 include files, respectively. The <span class="NDLSystemFont">uiFlags</span> 
 parameter is a set of compilation flags that will be combined with the 
 flags from the <a href="NiD3D10ShaderProgramCreator.htm"><span class="NDLSystemFont">NiD3D10ShaderProgramCreator</span></a> 
 object. These parameters will all be passed through to the <span class="NDLSystemFont">D3D10CompileShader</span> 
 function.</p>

<p class="NDLRefMemberDescription">The function returns whether or not the 
 shader program creation was successful.</p>

<p class="NDLRefMemberFunction">static bool CreatePixelShaderFromCompiledBlob(ID3D10Blob* 
 pkShaderByteCode, const char* pcFileName, const D3D10_SHADER_MACRO* pkDefines, 
 ID3D10Include* pkInclude,const char* pcEntryPoint, const char* pcShaderTarget, 
 unsigned int uiFlags, const char* pcShaderName, <a href="NiD3D10PixelShader.htm">NiD3D10PixelShaderPtr</a>&amp; 
 spPixelShader)</p>

<p class="NDLRefMemberDescription">Creates a pixel shader from the in-memory 
 blob <span class="NDLSystemFont">pkShaderCode</span>, which is expected 
 to contain compiled shader byte code. The file name will be parsed for 
 an extension, and the registered <span class="NDLSystemFont"><a href="NiD3D10ShaderProgramCreator.htm">NiD3D10ShaderProgramCreator</a></span> 
 class for that extension will be used to create the pixel shader. The 
 resulting <span class="NDLSystemFont"><a href="NiD3D10PixelShader.htm">NiD3D10PixelShader</a></span> 
 will have the name specified in <span class="NDLSystemFont">pcShaderName</span>. 
 The <span class="NDLSystemFont">pcEntryPoint</span> parameter indicates 
 the name of the function to use as the vertex shader, and <span class="NDLSystemFont">pcShaderTarget</span> 
 indicates which shader model to use when compiling the function. </p>

<p class="NDLRefMemberDescription">The <span class="NDLSystemFont">pkDefines</span> 
 and <span class="NDLSystemFont">pkInclude</span> parameters are optional 
 ways to provide either a set of macros or a user-defined class for handling 
 include files, respectively. The <span class="NDLSystemFont">uiFlags</span> 
 parameter is a set of compilation flags that will be combined with the 
 flags from the <a href="NiD3D10ShaderProgramCreator.htm"><span class="NDLSystemFont">NiD3D10ShaderProgramCreator</span></a> 
 object. These parameters will all be passed through to the <span class="NDLSystemFont">D3D10CompileShader</span> 
 function.</p>

<p class="NDLRefMemberDescription">The function returns whether or not the 
 shader program creation was successful.</p>

<p class="NDLRefMemberFunction">static unsigned int GetUniversalShaderCreationFlags()</p>

<p class="NDLRefMemberFunction">static void SetUniversalShaderCreationFlags(unsigned 
 int uiFlags)</p>

<p class="NDLRefMemberDescription">Set and retrieve an <span class="NDLSystemFont">unsigned 
 int</span> value that will be used by all derived <span class="NDLSystemFont"><a HREF="NiD3D10ShaderProgramCreator.htm">NiD3D10ShaderProgramCreator</a></span> 
 classes, to be passed into every shader program creation function. Each 
 derived class has the responsibility of ensuring that only the flags that 
 have meaning are used in that class's specific context. These functions 
 allow an application to make one call, after which all shader programs 
 created will, for instance, be created with debugging enabled and shader 
 optimization disabled.</p>

<p class="NDLRefMemberFunction">static bool RegisterShaderCreator(const char* 
 pcExt, <a HREF="NiD3D10ShaderProgramCreator.htm">NiD3D10ShaderProgramCreator</a>* 
 pkCreator)</p>

<p class="NDLRefMemberDescription">Registers the given <span class="NDLSystemFont"><a href="NiD3D10ShaderProgramCreator.htm">NiD3D10ShaderProgramCreator</a></span> 
 as the object to use when creating shader programs whose extension is 
 stored in <span class="NDLSystemFont">pcExt</span>. If an existing <span 
 class="NDLSystemFont"><a href="NiD3D10ShaderProgramCreator.htm">NiD3D10ShaderProgramCreator</a></span> 
 is already registered for that extension, this function will replace that 
 creator object with the one being passed in. In this manner, an application 
 can re-map what shader program creator objects are used with which extension. 
 This function returns a Boolean value indicating whether or not an existing 
 shader program creator was replaced. </p>

<p class="NDLRefMemberFunction">static void UnregisterShaderCreator(<a href="NiD3D10ShaderProgramCreator.htm">NiD3D10ShaderProgramCreator</a>* 
 pkCreator)</p>

<p class="NDLRefMemberDescription">Unregisters the given <span class="NDLSystemFont"><a href="NiD3D10ShaderProgramCreator.htm">NiD3D10ShaderProgramCreator</a></span> 
 from whatever extensions it is registers as the creator class for.</p>

<p class="NDLRefMemberFunction">static <a href="NiD3D10ShaderProgramCreator.htm">NiD3D10ShaderProgramCreator</a>* 
 GetShaderCreator(const char* pcFilename)</p>

<p class="NDLRefMemberDescription">Returns the <span class="NDLSystemFont"><a href="NiD3D10ShaderProgramCreator.htm">NiD3D10ShaderProgramCreator</a></span> 
 registered as the creator class for the extension contained in the <span 
 class="NDLSystemFont">pcFilename</span> parameter.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">const char* GetFirstProgramDirectory(NiTListIterator&amp; 
 kIter)</p>

<p class="NDLRefMemberDescription">This function returns the first program 
 directory that has been registered with the <span class="NDLSystemFont">NiD3D10ShaderProgramFactory</span> 
 object. It takes an <span class="NDLSystemFont">NiTListIterator</span>, 
 which can then be used with the <span class="NDLSystemFont">GetNextProgramDirectory</span> 
 function to iterate the list of all program directories that have been 
 registered. </p>

<p class="NDLRefMemberFunction">const char* GetNextProgramDirectory(NiTListIterator&amp; 
 kIter)</p>

<p class="NDLRefMemberDescription">This function uses the supplied <span 
 class="NDLSystemFont">NiTListIterator</span> to iterate the internal list 
 of program directories that has been registered with the <span class="NDLSystemFont">NiD3DShaderProgramFactory</span> 
 object, and it returns the next directory on the list.</p>

<p class="NDLRefMemberFunction">void AddProgramDirectory(const char* pcDirectory)</p>

<p class="NDLRefMemberDescription">Adds a directory to the list of directories 
 that will be searched for shader program files. The directories will be 
 searched in the order they have been added to the <span class="NDLSystemFont">NiD3D10ShaderProgramFactory</span> 
 object.</p>

<p class="NDLRefMemberFunction">void RemoveProgramDirectory(const char* pcDirectory)</p>

<p class="NDLRefMemberDescription">Removes a directory from the list of directories 
 that will be searched for shader program files.</p>

<p class="NDLRefMemberFunction">void RemoveAllProgramDirectories()</p>

<p class="NDLRefMemberDescription">Empties list of directories that will 
 be searched for shader program files.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
