<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiD3D10ShaderConstantManager</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiD3D10ShaderConstantManager</p>

<p class="NDLRefParentage">: public <a href=
"../../Reference/NiSystem/NiMemObject.htm">NiMemObject</a></p>

<p class="NDLRefHeaderFile">
&lt;NiD3D10ShaderConstantManager.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class=
"NDLSystemFont">NiD3D10ShaderConstantManager</span> is a Gamebryo
class that accumulates individual shader constant maps so they
can be set on the device all at once.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">
NiD3D10ShaderConstantManager(<a href=
"NiD3D10DeviceState.htm">NiD3D10DeviceState</a>*
pkDeviceState)</p>

<p class="NDLRefMemberDescription">The constructor initializes a
new <span class=
"NDLSystemFont">NiD3D10ShaderConstantManager</span> using the
<a href="NiD3D10DeviceState.htm"><span class=
"NDLSystemFont">NiD3D10DeviceState</span></a>. An application
should never construct a new shader constant manager, but should
obtain a pointer to the <span class="NDLSystemFont"><a href=
"NiD3D10Renderer.htm">NiD3D10Renderer</a></span> object's
instance instead.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">void ResetConstantBuffers()</p>

<p class="NDLRefMemberDescription">Removes all currently
accumulated shader constant buffers.</p>

<p class="NDLRefMemberFunction">void
SetShaderConstantMap(<a href="NiD3D10ShaderProgram.htm">NiD3D10ShaderProgram</a>*
pkShaderProgram, <a href=
"NiD3D10ShaderConstantMap.htm">NiD3D10ShaderConstantMap</a>*
pkConstantMap)</p>

<p class="NDLRefMemberDescription">Accumulate the constant map
<span class="NDLSystemFont">pkConstantMap</span> for the shader
program <span class="NDLSystemFont">pkShaderProgram</span>. This
function will examine the shader program to determine, by
comparing names, which index the given shader constant map needs
to be set in.</p>

<p class="NDLRefMemberFunction">void
SetVertexShaderConstantBuffers(unsigned int uiStartSlot, unsigned
int uiNumBuffers, ID3D10Buffer*const* ppkConstantBuffers)</p>

<p class="NDLRefMemberFunction">void
GetVertexShaderConstantBuffers(unsigned int uiStartSlot, unsigned
int uiNumBuffers, ID3D10Buffer** ppkConstantBuffers) const</p>

<p class="NDLRefMemberDescription">Get and set the currently
accumulated vertex constant maps in the given ranges.</p>

<p class="NDLRefMemberFunction">void
ClearVertexShaderConstantBuffers()</p>

<p class="NDLRefMemberDescription">Removes all currently
accumulated vertex shader constant buffers.</p>

<p class="NDLRefMemberFunction">void
SetGeometryShaderConstantBuffers(unsigned int uiStartSlot,
unsigned int uiNumBuffers, ID3D10Buffer*const*
ppkConstantBuffers)</p>

<p class="NDLRefMemberFunction">void
GetGeometryShaderConstantBuffers(unsigned int uiStartSlot,
unsigned int uiNumBuffers, ID3D10Buffer** ppkConstantBuffers)
const</p>

<p class="NDLRefMemberDescription">Get and set the currently
accumulated geometry constant maps in the given ranges.</p>

<p class="NDLRefMemberFunction">void
ClearGeometryShaderConstantBuffers()</p>

<p class="NDLRefMemberDescription">Removes all currently
accumulated geometry shader constant buffers.</p>

<p class="NDLRefMemberFunction">void
SetPixelShaderConstantBuffers(unsigned int uiStartSlot, unsigned
int uiNumBuffers, ID3D10Buffer*const* ppkConstantBuffers)</p>

<p class="NDLRefMemberFunction">void
GetPixelShaderConstantBuffers(unsigned int uiStartSlot, unsigned
int uiNumBuffers, ID3D10Buffer** ppkConstantBuffers) const</p>

<p class="NDLRefMemberDescription">Get and set the currently
accumulated pixel constant maps in the given ranges.</p>

<p class="NDLRefMemberFunction">void
ClearPixelShaderConstantBuffers()</p>

<p class="NDLRefMemberDescription">Removes all currently
accumulated pixel shader constant buffers.</p>

<p class="NDLRefMemberFunction">void ApplyShaderConstants()</p>

<p class="NDLRefMemberDescription">Set the accumulated shader
constant buffers on the device.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
