<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>D3D10 Feature Support in the NiD3D10Renderer</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>D3D10 Feature Support in the NiD3D10Renderer</h1>

<p>The following topics describe the level of support for D3D10
features in the D3D10 renderer:</p>

<h3>D3D10.1 API Layers</h3>

<p>The <span class="NDLSystemFont"><a href=
"NiD3D10Renderer.htm">NiD3D10Renderer</a></span> will attempt to
create a D3D10.1 device on hardware that supports it.</p>

<h3>Geometry Shaders</h3>

<p>The <span class="NDLSystemFont"><a href=
"NiD3D10Renderer.htm">NiD3D10Renderer</a></span> supports
geometry shaders, and treats them in the same way it treats pixel
and vertex shaders.</p>

<h3>Stream Output</h3>

<p>The <span class="NDLSystemFont"><a href=
"NiD3D10Renderer.htm">NiD3D10Renderer</a></span> supports
streaming data out of the Stream-Output Stage. This is discussed
in greater detail <a href=
"Stream_Out_in_the_NiD3D10Renderer.htm">here</a>.</p>

<h3>Constant Buffers</h3>

<p>The <span class="NDLSystemFont"><a href=
"NiD3D10Renderer.htm">NiD3D10Renderer</a></span> supports only
one constant buffer for each shader program. Each constant buffer
is managed by a single <span class="NDLSystemFont"><a href=
"NiD3D10ShaderConstantMap.htm">NiD3D10ShaderConstantMap</a></span>
object; it is not possible to have a single <span class=
"NDLSystemFont"><a href=
"NiD3D10ShaderConstantMap.htm">NiD3D10ShaderConstantMap</a></span>
set values in multiple shader constant buffers, or to have
multiple <a href="NiD3D10ShaderConstantMap.htm"><span class=
"NDLSystemFont">NiD3D10ShaderConstantMap</span></a> objects
affecting the same shader constant buffer.</p>

<h3>Texture Buffers</h3>

<p>The <span class="NDLSystemFont"><a href=
"NiD3D10Renderer.htm">NiD3D10Renderer</a></span> does not support
texture buffers.</p>

<h3>FX Shaders</h3>

<p>The <span class="NDLSystemFont"><a href=
"NiD3D10Renderer.htm">NiD3D10Renderer</a></span> supports loading
FX shaders though the <span class=
"NDLSystemFont">ID3D10Effect</span> system. However, it is
necessary to differentiate FX files that are loaded through the
D3DX9 <span class="NDLSystemFont">ID3DXEffect</span> system from
those files that will be loaded through the D3D10 <span class=
"NDLSystemFont">ID3D10Effect</span> system. Gamebryo does this by
default by requiring D3D10 FX shaders to use the extension
".fx10" rather than simply ".fx".</p>

<h3>Adjacency Data in Vertex Buffers</h3>

<p>The <span class="NDLSystemFont"><a href=
"NiD3D10Renderer.htm">NiD3D10Renderer</a></span> does not support
creating or using adjacency data in vertex buffers.</p>

<h3>Shader Program Formats</h3>

<p>The <span class="NDLSystemFont"><a href=
"NiD3D10Renderer.htm">NiD3D10Renderer</a></span> supports loading
text HLSL shader programs. Compiled HLSL shader programs are not
supported. Note that D3D10 no longer supports shader programs
written in assembly language.</p>

<p>When needed, the <span class="NDLSystemFont"><a href=
"NiD3D10Renderer.htm">NiD3D10Renderer</a></span> will set the
appropriate flags so it can compile HLSL shader programs to
shader models earlier than shader model 4.0. However, even with
those compatibility flags, D3D10 does not support pixel shader
models earlier than ps_2_0. It is also necessary for all pixel
shaders compiled under D3D10 to have the exact same input
parameters that were output from the associated vertex shader,
including the Position output from the vertex shader. This is
true even though the pixel shader cannot actually make use of
that parameter in pixel shader models earlier than ps_3_0.</p>

<h3>Multiple Render Targets</h3>

<p>The <span class="NDLSystemFont"><a href=
"NiD3D10Renderer.htm">NiD3D10Renderer</a></span> supports as many
as 8 simultaneous render targets, though it cannot set the
viewports independently for each.</p>

<h3>Presentation Intervals</h3>

<p>The <span class="NDLSystemFont"><a href=
"NiD3D10Renderer.htm">NiD3D10Renderer</a></span> allows the
application to specify the presentation interval passed into
<span class="NDLSystemFont">IDXGISwapChain::Present</span>
through the <span class=
"NDLSystemFont">NiD3D10Renderer::SetSyncInterval</span> function.
This can be used to reduce tearing.</p>

<h3>D3D10 API Layers</h3>

<p>The <span class="NDLSystemFont"><a href=
"NiD3D10Renderer.htm">NiD3D10Renderer</a></span> supports the
creation of the various API layers, such as the Debug Layer and
Switch-To-Reference Layer, through the device creation flags in
the <span class=
"NDLSystemFont">NiD3D10Renderer::CreationParameters</span>
structure. Refer to <a href=
"Creation_of_a_D3D10Renderer.htm">Creation of a D3D10Renderer</a>
for more details on these flags.</p>

<p>The Switch-To-Reference layer is incompatible with MSAA, so
Gamebryo will ignore requests to enable the Switch-To-Reference
layer when MSAA is requested.</p>

<h3>D3D10 Libraries</h3>

<p>The <span class="NDLSystemFont"><a href=
"NiD3D10Renderer.htm">NiD3D10Renderer</a></span> will load the
DXGI and D3D10 libraries through calls to <span class=
"NDLSystemFont">LoadLibrary</span>. The release versions of these
libraries will always be loaded. If the debug version is
required, this can be enabled in the DirectX Control Panel, or by
passing in the <span class=
"NDLSystemFont">D3D10_CREATE_DEVICE_DEBUG</span> flag in the
<span class="NDLSystemFont">m_uiCreateFlags</span> portion of the
<span class=
"NDLSystemFont">NiD3D10Renderer::CreationParameters</span>
structure. Refer to <a href=
"Creation_of_a_D3D10Renderer.htm">Creation of a D3D10Renderer</a>
for more details on these flags.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
