<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiD3D10ShaderFactory</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiD3D10ShaderFactory</p>

<p class="NDLRefParentage">: public <a href="../../Reference/NiMain/NiShaderFactory.htm">NiShaderFactory</a></p>

<p class="NDLRefHeaderFile">&lt;NiD3D10ShaderFactory.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiD3D10ShaderFactory</span> 
 is the platform-specific implementation of <span class="NDLSystemFont"><a 
 href="../../Reference/NiMain/NiShaderFactory.htm">NiShaderFactory</a></span> 
 for the D3D10 renderer. The class is essentially a self-contained singleton 
 utilized by the Gamebryo engine for attaching and detaching shaders on 
 <a href="../../Reference/NiMesh/NiMesh.htm"><span class="NDLSystemFont">NiMesh</span></a> 
 instances. Applications should, for the majority of cases, only reference 
 the functionality of this class through the base classes interfaces.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberDescription">The constructor for the class is protected 
 to prevent applications from creating them unnecessarily. The static <span class="NDLSystemFont">Create</span> 
 function is exposed, but an application should never call it, as the static 
 data management system will call it automatically.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">virtual <a href="../../Reference/NiMain/NiShader.htm">NiShader</a>* 
 RetrieveShader(const char* pcName, unsigned int uiImplementation, bool 
 bReportNotFound = true)</p>

<p class="NDLRefMemberDescription">Inherited from <span class="NDLSystemFont"><a 
 href="../../Reference/NiMain/NiShaderFactory.htm">NiShaderFactory</a></span>. 
 This function will attempt to find the shader with the given name and 
 implementation among all the shaders that the <span class="NDLSystemFont">NiShaderFactory</span> 
 has created. If it does not find a match, then it will query all of the 
 <span class="NDLSystemFont"><a href="../../Reference/NiMain/NiShaderLibrary.htm">NiShaderLibrary</a></span> 
 objects that have been registered. If any shader library contains a shader 
 with the given name, then it will return an instance of that shader. If 
 no matching shader is found even after querying all the shader libraries, 
 and the <span class="NDLSystemFont">bReportNotFound</span> parameter is 
 true, then this function will call <span class="NDLSystemFont">ReportError</span> 
 with the <span class="NDLSystemFont">NISHADERERR_SHADERNOTFOUND</span> error. 
 It is through this function that the Gamebryo shader system creates new 
 shaders from the registered shader libraries. </p>

<p class="NDLRefMemberFunction">virtual NiShader* FindShader(const char* 
 pcName, unsigned int uiImplementation)</p>

<p class="NDLRefMemberDescription">Inherited from <span class="NDLSystemFont"><a 
 href="../../Reference/NiMain/NiShaderFactory.htm">NiShaderFactory</a></span>. 
 This function will attempt to find the shader with the given name and 
 implementation among all the shaders that the <span class="NDLSystemFont">NiShaderFactory</span> 
 has created. If no such shader is found, then the shader libraries are 
 not queried, and the function simply returns <span class="NDLSystemFont">NULL</span>.</p>

<p class="NDLRefMemberFunction">virtual bool ReleaseShaderFromLibrary(const 
 char* pcName, unsigned int uiImplementation)</p>

<p class="NDLRefMemberFunction">virtual bool ReleaseShaderFromLibrary(NiShader* 
 pkShader)</p>

<p class="NDLRefMemberDescription">Inherited from <span class="NDLSystemFont"><a 
 href="../../Reference/NiMain/NiShaderFactory.htm">NiShaderFactory</a></span>. 
 Attempts to search through all registered libraries to release the shader 
 that's passed in through <span class="NDLSystemFont">pkShader</span>, or 
 that matches the given name and implementation. If the shader is successfully 
 found and released from the shader library, then the function returns 
 <span class="NDLSystemFont">true</span>. Note that releasing a shader from 
 the shader library won't necessarily cause it to be deleted if there are 
 other objects in an application that hold smart pointers to the shader.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
