<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiD3D10ShaderProgram</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiD3D10ShaderProgram</p>

<p class="NDLRefParentage">: public <a href="../../Reference/NiMain/NiGPUProgram.htm">NiGPUProgram</a></p>

<p class="NDLRefHeaderFile">&lt;NiD3D10ShaderProgram.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiD3D10ShaderProgram</span> 
 is the base class for D3D10 vertex, geometry, and pixel shaders in the 
 Gamebryo shader system.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiD3D10ShaderProgram(<a href="../../Reference/NiMain/NiGPUProgram.htm#ProgramType">NiGPUProgram::ProgramType</a> 
 eType, ID3D10Blob* pkShaderByteCode)</p>

<p class="NDLRefMemberDescription">The default constructor creates an initialized 
 <span class="NDLSystemFont">NiD3D10ShaderProgram</span> 
 instance. Rather than calling this constructor directly, applications 
 should create an <a HREF="NiD3D10VertexShader.htm"><span class="NDLSystemFont">NiD3D10VertexShader</span></a>, 
 <a HREF="NiD3D10GeometryShader.htm"><span class="NDLSystemFont">NiD3D10GeometryShader</span></a>, 
 or <a HREF="NiD3D10PixelShader.htm"><span class="NDLSystemFont">NiD3D10PixelShader</span></a>.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">const <a href="../../Reference/NiMain/NiFixedString.htm">NiFixedString</a>&amp; 
 GetName() const</p>

<p class="NDLRefMemberDescription">Returns the name associated with the shader 
 program.</p>

<p class="NDLRefMemberFunction">void SetName(const <a href="../../Reference/NiMain/NiFixedString.htm">NiFixedString</a>&amp; 
 kName)</p>

<p class="NDLRefMemberDescription">Sets the name of the shader program.</p>

<p class="NDLRefMemberFunction">ID3D10Blob* GetShaderByteCode() const</p>

<p class="NDLRefMemberDescription">Gets the byte code for the shader.</p>

<p class="NDLRefMemberFunction">void SetShaderByteCode(ID3D10Blob* pkShaderByteCode)</p>

<p class="NDLRefMemberDescription">Sets the byte code for the shader.</p>

<p class="NDLRefMemberFunction">void SetCreator(<a HREF="NiD3D10ShaderProgramCreator.htm">NiD3D10ShaderProgramCreator</a>* 
 pkCreator)</p>

<p class="NDLRefMemberDescription">Sets the <span class="NDLSystemFont"><a href="NiD3D10ShaderProgramCreator.htm">NiD3D10ShaderProgramCreator</a></span> 
 that was used to create this <span class="NDLSystemFont">NiD3D10ShaderProgram</span>. 
 Note that this function should never be used by an application.</p>

<p class="NDLRefMemberFunction"><a HREF="NiD3D10ShaderProgramCreator.htm">NiD3D10ShaderProgramCreator</a>* 
 GetCreator() const</p>

<p class="NDLRefMemberDescription">Gets the <span class="NDLSystemFont"><a href="NiD3D10ShaderProgramCreator.htm">NiD3D10ShaderProgramCreator</a></span> 
 that was used to create this <span class="NDLSystemFont">NiD3D10ShaderProgram</span>.</p>

<p class="NDLRefMemberFunction">virtual void DestroyRendererData()</p>

<p class="NDLRefMemberDescription">Release any device-specific data associated 
 with the shader.</p>

<p class="NDLRefMemberFunction">virtual void RecreateRendererData()</p>

<p class="NDLRefMemberDescription">Recreate any device-specific data associated 
 with the shader.</p>

<p class="NDLRefMemberFunction">void SetShaderReflection(ID3D10ShaderReflection* 
 pkReflection, bool bUpdateShaderConstantInfo = true)</p>

<p class="NDLRefMemberDescription">Sets the shader reflection on the shader. 
 The <span class="NDLSystemFont">bUpdateShaderConstantInfo</span> parameter 
 tells the shader to update its information on the shader's variables based 
 on the new shader reflection.</p>

<p class="NDLRefMemberFunction">ID3D10ShaderReflection* GetShaderReflection() 
 const</p>

<p class="NDLRefMemberDescription">Gets the shader reflection for the shader.</p>

<p class="NDLRefMemberFunction">void ClearShaderReflection()</p>

<p class="NDLRefMemberDescription">Release the shader reflection for the 
 shader. The information on the shader's variables will remain intact.</p>

<p class="NDLRefMemberFunction">unsigned int GetConstantBufferCount() const</p>

<p class="NDLRefMemberDescription">Returns the number of shader constant 
 buffers that the shader program requires. This value will not be valid 
 unless a shader reflection has been used to fill in the information on 
 the shader's variables.</p>

<p class="NDLRefMemberFunction">const <a href="../../Reference/NiMain/NiFixedString.htm">NiFixedString</a> 
 GetConstantBufferName(unsigned int uiIndex) const</p>

<p class="NDLRefMemberDescription">Returns the name of the shader constant 
 buffers specified by <span class="NDLSystemFont">uiIndex</span>. This value 
 will not be valid unless a shader reflection has been used to fill in 
 the information on the shader's variables.</p>

<p class="NDLRefMemberFunction">void ClearShaderReflectionData()</p>

<p class="NDLRefMemberDescription">Release the shader program's information 
 on the shader's variables.</p>

<p class="NDLRefMemberFunction">void UpdateShaderReflectionData()</p>

<p class="NDLRefMemberDescription">Update the shader program's information 
 on the shader's variables based on the shader reflection.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
