<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiD3D10Renderer</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiD3D10Renderer</p>

<p class="NDLRefParentage">: public <a href=
"../../Reference/NiMain/NiRenderer.htm">NiRenderer</a></p>

<p class="NDLRefHeaderFile">&lt;NiD3D10Renderer.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>Note that only functions that are either not declared in the
<span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiRenderer.htm">NiRenderer</a></span>
base class or have significant additions to the basic behavior
are discussed below. For details on the support of optional
features whose functions are declared in the <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMain/NiRenderer.htm">NiRenderer</a></span>
base class, see the <a href=
"Features_and_Limitations_of_the_NiD3D10Renderer.htm">Features
and Limitations of the NiD3D10Renderer</a> documentation.</p>

<p class="NDLRefHead1">Constructors</p>

<p>This class contains no public constructors the static
<span class="NDLSystemFont">Create</span> function below is used
to create <span class="NDLSystemFont">NiD3D10Renderer</span>
objects.</p>

<p class="NDLRefHead1">Static Member Functions</p>

<p class="NDLRefHead2">Renderer Creation</p>

<p class="NDLRefMemberFunction">static bool
Create(CreationParameters&amp; kCreate, NiD3D10RendererPtr&amp;
spRenderer)</p>

<p class="NDLRefMemberDescription">This function is used by the
application to create an <span class=
"NDLSystemFont">NiD3D10Renderer</span>. See the documentation on
<a href="Creation_of_a_D3D10Renderer.htm">renderer creation</a>
for discussion of the <span class=
"NDLSystemFont">CreationParameters</span> structure.</p>

<p class="NDLRefHead2">Renderer Access</p>

<p class="NDLRefMemberFunction">static NiD3D10Renderer*
GetRenderer()</p>

<p class="NDLRefMemberDescription">Returns the <span class=
"NDLSystemFont">NiD3D10Renderer</span>, if one exists. If the
current renderer is not an <span class=
"NDLSystemFont">NiD3D10Renderer</span>, the function returns
NULL.</p>

<p class="NDLRefMemberDescription">This function does not operate
under <a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>.</p>

<p class="NDLRefHead2">D3D10 Library Function Wrappers</p>

<p class="NDLRefMemberFunction">static HRESULT
D3D10CreateBlob(SIZE_T NumBytes, LPD3D10BLOB* ppBuffer)</p>

<p class="NDLRefMemberFunction">static HRESULT
D3D10CreateDevice(IDXGIAdapter* pAdapter, D3D10_DRIVER_TYPE
DriverType, HMODULE Software, UINT Flags, UINT SDKVersion,
ID3D10Device** ppDevice)</p>

<p class="NDLRefMemberFunction">static HRESULT
D3D10CreateDeviceAndSwapChain(IDXGIAdapter* pAdapter,
D3D10_DRIVER_TYPE DriverType, HMODULE Software, UINT Flags, UINT
SDKVersion, DXGI_SWAP_CHAIN_DESC* pSwapChainDesc,
IDXGISwapChain** ppSwapChain, ID3D10Device** ppDevice)</p>

<p class="NDLRefMemberFunction">static HRESULT
D3D10CreateDevice1(IDXGIAdapter* pAdapter, D3D10_DRIVER_TYPE
DriverType, HMODULE Software, UINT Flags, D3D10_FEATURE_LEVEL1
HardwareLevel, UINT SDKVersion, ID3D10Device1** ppDevice)</p>

<p class="NDLRefMemberFunction">static HRESULT
D3D10CreateDeviceAndSwapChain1(IDXGIAdapter* pAdapter,
D3D10_DRIVER_TYPE DriverType, HMODULE Software, UINT Flags,
D3D10_FEATURE_LEVEL1 HardwareLevel, UINT SDKVersion,
DXGI_SWAP_CHAIN_DESC* pSwapChainDesc, IDXGISwapChain**
ppSwapChain, ID3D10Device1** ppDevice);</p>

<p class="NDLRefMemberFunction">static HRESULT
D3D10CreateStateBlock(ID3D10Device* pDevice,
D3D10_STATE_BLOCK_MASK* pStateBlockMask, ID3D10StateBlock**
ppStateBlock)</p>

<p class="NDLRefMemberFunction">static HRESULT
D3D10GetInputAndOutputSignatureBlob(CONST void* pShaderBytecode,
SIZE_T BytecodeLength, ID3D10Blob** ppSignatureBlob)</p>

<p class="NDLRefMemberFunction">static HRESULT
D3D10GetInputSignatureBlob(CONST void* pShaderBytecode, SIZE_T
BytecodeLength, ID3D10Blob** ppSignatureBlob)</p>

<p class="NDLRefMemberFunction">static HRESULT
D3D10GetOutputSignatureBlob(CONST void* pShaderBytecode, SIZE_T
BytecodeLength, ID3D10Blob** ppSignatureBlob)</p>

<p class="NDLRefMemberFunction">static HRESULT
D3D10StateBlockMaskDifference(D3D10_STATE_BLOCK_MASK* pA,
D3D10_STATE_BLOCK_MASK* pB, D3D10_STATE_BLOCK_MASK* pResult)</p>

<p class="NDLRefMemberFunction">static HRESULT
D3D10StateBlockMaskDisableAll(D3D10_STATE_BLOCK_MASK* pMask)</p>

<p class="NDLRefMemberFunction">static HRESULT
D3D10StateBlockMaskDisableCapture(D3D10_STATE_BLOCK_MASK* pMask,
D3D10_DEVICE_STATE_TYPES StateType, UINT RangeStart, UINT
RangeLength)</p>

<p class="NDLRefMemberFunction">static HRESULT
D3D10StateBlockMaskEnableAll(D3D10_STATE_BLOCK_MASK* pMask)</p>

<p class="NDLRefMemberFunction">static HRESULT
D3D10StateBlockMaskEnableCapture(D3D10_STATE_BLOCK_MASK* pMask,
D3D10_DEVICE_STATE_TYPES StateType, UINT RangeStart, UINT
RangeLength)</p>

<p class="NDLRefMemberFunction">static BOOL
D3D10StateBlockMaskGetSetting(D3D10_STATE_BLOCK_MASK* pMask,
D3D10_DEVICE_STATE_TYPES StateType, UINT Entry)</p>

<p class="NDLRefMemberFunction">static HRESULT
D3D10StateBlockMaskIntersect(D3D10_STATE_BLOCK_MASK* pA,
D3D10_STATE_BLOCK_MASK* pB, D3D10_STATE_BLOCK_MASK* pResult)</p>

<p class="NDLRefMemberFunction">static HRESULT
D3D10StateBlockMaskUnion(D3D10_STATE_BLOCK_MASK* pA,
D3D10_STATE_BLOCK_MASK* pB, D3D10_STATE_BLOCK_MASK* pResult)</p>

<p class="NDLRefMemberFunction">static HRESULT
D3D10CompileShader(LPCSTR pSrcData, SIZE_T SrcDataLen, LPCSTR
pFileName, CONST D3D10_SHADER_MACRO* pDefines, LPD3D10INCLUDE
pInclude, LPCSTR pFunctionName, LPCSTR pProfile, UINT Flags,
ID3D10Blob** ppShader, ID3D10Blob** ppErrorMsgs)</p>

<p class="NDLRefMemberFunction">static HRESULT
D3D10DisassembleShader(CONST UINT* pShader, SIZE_T Size, BOOL
EnableColorCode, LPCSTR pComments, ID3D10Blob**
ppDisassembly)</p>

<p class="NDLRefMemberFunction">static LPCSTR
D3D10GetGeometryShaderProfile(ID3D10Device* pDevice)</p>

<p class="NDLRefMemberFunction">static LPCSTR
D3D10GetPixelShaderProfile(ID3D10Device* pDevice)</p>

<p class="NDLRefMemberFunction">static LPCSTR
D3D10GetVertexShaderProfile(ID3D10Device* pDevice)</p>

<p class="NDLRefMemberFunction">static HRESULT
D3D10PreprocessShader(LPCSTR pSrcData, SIZE_T SrcDataSize, LPCSTR
pFileName, CONST D3D10_SHADER_MACRO* pDefines, LPD3D10INCLUDE
pInclude, ID3D10Blob** ppShaderText, ID3D10Blob**
ppErrorMsgs)</p>

<p class="NDLRefMemberFunction">static HRESULT
D3D10ReflectShader(CONST void* pShaderBytecode, SIZE_T
BytecodeLength, ID3D10ShaderReflection** ppReflector)</p>

<p class="NDLRefMemberFunction">static HRESULT
D3D10CompileEffectFromMemory(void* pData, SIZE_T DataLength,
LPCSTR pSrcFileName, CONST D3D10_SHADER_MACRO* pDefines,
ID3D10Include* pInclude, UINT HLSLFlags, UINT FXFlags,
ID3D10Blob** ppCompiledEffect, ID3D10Blob** ppErrors)</p>

<p class="NDLRefMemberFunction">static HRESULT
D3D10CreateEffectFromMemory(void* pData, SIZE_T DataLength, UINT
FXFlags, ID3D10Device* pDevice, ID3D10EffectPool* pEffectPool,
ID3D10Effect** ppEffect)</p>

<p class="NDLRefMemberFunction">static HRESULT
D3D10CreateEffectPoolFromMemory(void* pData, SIZE_T DataLength,
UINT FXFlags, ID3D10Device* pDevice, ID3D10EffectPool**
ppEffectPool)</p>

<p class="NDLRefMemberFunction">static HRESULT
D3D10DisassembleEffect(ID3D10Effect* pEffect, BOOL
EnableColorCode, ID3D10Blob** ppDisassembly)</p>

<p class="NDLRefMemberDescription">Wrapper functions from the
D3D10 library so an application doesn't need to statically link
D3D10.lib in order to use them.</p>

<p class="NDLRefMemberDescription">These functions operate under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_D3D10Renderer.htm">discussion</a> on restricted
thread behavior in the D3D10 renderer for more information.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefHead2">Renderer and Swap Chain Functions</p>

<p class="NDLRefMemberFunction">void
GetCreationParameters(CreationParameters&amp; kCreate) const</p>

<p class="NDLRefMemberDescription">Fills in the <span class=
"NDLSystemFont">kCreate</span> object with the contents of the
<span class="NDLSystemFont">CreationParameters</span> structure
that was used to create the renderer.</p>

<p class="NDLRefMemberDescription">This function does not operate
under <a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>.</p>

<p class="NDLRefMemberFunction">bool ResizeBuffers(unsigned int
uiWidth, unsigned int uiHeight, HWND hOutputWnd = NULL)</p>

<p class="NDLRefMemberDescription">Resize the swap chain for the
window <span class="NDLSystemFont">hOutputWnd</span>. This
function can be called in response to an <span class=
"NDLSystemFont">WM_SIZE</span> message. If <span class=
"NDLSystemFont">hOutputWnd</span> is NULL, then the default swap
chain will be resized. If <span class=
"NDLSystemFont">uiWidth</span> and <span class=
"NDLSystemFont">uiHeight</span> are 0, D3D10 will resize the swap
chain to match its window size.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_D3D10Renderer.htm">discussion</a> on restricted
thread behavior in the D3D10 renderer for more information.</p>

<p class="NDLRefMemberFunction">bool
CreateSwapChainRenderTargetGroup(DXGI_SWAP_CHAIN_DESC&amp;
kSwapChainDesc, unsigned int uiOutputIndex = 0, bool
bCreateDepthStencilBuffer = true, DXGI_FORMAT eDepthStencilFormat
= DXGI_FORMAT_UNKNOWN)</p>

<p class="NDLRefMemberDescription">Creates a swap chain described
by <span class="NDLSystemFont">kSwapChainDesc</span> and using
the output specified by <span class=
"NDLSystemFont">uiOutputIndex</span>, and stores that swap chain
as an <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiRenderTargetGroup.htm">NiRenderTargetGroup</a></span>.
This render target group can then be rendered to just as any
other render target group. If <span class=
"NDLSystemFont">bCreateDepthStencilBuffer</span> is true, then a
new depth stencil buffer will be created for the render target
group using <span class=
"NDLSystemFont">eDepthStencilFormat</span> as the format for that
buffer. If the function fails for whatever reason, it will return
<span class="NDLSystemFont">false</span>. This function is used
to provide support for rendering to multiple windows.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_D3D10Renderer.htm">discussion</a> on restricted
thread behavior in the D3D10 renderer for more information.</p>

<p class="NDLRefMemberFunction">void
DestroySwapChainRenderTargetGroup(HWND hWnd)</p>

<p class="NDLRefMemberDescription">Destroy the swap chain and
<span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiRenderTargetGroup.htm">NiRenderTargetGroup</a></span>
associated with the specified window. Note that if the render
target group associated with <span class=
"NDLSystemFont">kWndDevice</span> is the current render target,
this function will fail. This function may be used to destroy the
original render target group created with the device if
<span class="NDLSystemFont">kWndDevice</span> is the window
passed in the swap chain description in the original <span class=
"NDLSystemFont">CreationParameters</span> structure provided to
the <span class="NDLSystemFont">NiD3D10Renderer::Create</span>
function. In this case, the renderer will automatically assign
one of the other swap chain render target groups, if any exist,
as the new default render target group.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_D3D10Renderer.htm">discussion</a> on restricted
thread behavior in the D3D10 renderer for more information.</p>

<p class="NDLRefMemberFunction">bool
RecreateSwapChainRenderTargetGroup(DXGI_SWAP_CHAIN_DESC&amp;
kSwapChainDesc, unsigned int uiOutputIndex = 0, bool
bCreateDepthStencilBuffer = true, DXGI_FORMAT eDepthStencilFormat
= DXGI_FORMAT_UNKNOWN)</p>

<p class="NDLRefMemberDescription">Recreates the swap chain
associated with the window described in the <span class=
"NDLSystemFont">OutputWindow</span> field for the swap chain
leaving the <a href=
"../../Reference/NiMain/NiRenderTargetGroup.htm">NiRenderTargetGroup</a>
that was used in the original construction.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Reference/NiMain/NiRenderTargetGroup.htm">NiRenderTargetGroup</a>*
GetSwapChainRenderTargetGroup(HWND hWnd) const</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_D3D10Renderer.htm">discussion</a> on restricted
thread behavior in the D3D10 renderer for more information.</p>

<p class="NDLRefMemberFunction">bool
SetDefaultSwapChainRenderTargetGroup(HWND hWnd)</p>

<p class="NDLRefMemberDescription">This function assigns the
<span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiRenderTargetGroup.htm">NiRenderTargetGroup</a></span>
that for the specified window as the default render target group.
If no render target group has been created for this window, this
function will do nothing.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_D3D10Renderer.htm">discussion</a> on restricted
thread behavior in the D3D10 renderer for more information.</p>

<p class="NDLRefHead2">Device Occluded or Removed Callbacks and
Notification Functions</p>

<p class="NDLRefMemberFunction">unsigned int
AddOccludedNotificationFunc(<a href=
"NiD3D10Renderer.htm#OccludedNotifyFunc">OCCLUDEDNOTIFYFUNC</a>
pfnNotify, void* pvData)</p>

<p class="NDLRefMemberDescription">Registers a <span class=
"NDLSystemFont"><a href=
"NiD3D10Renderer.htm#OccludedNotifyFunc">OCCLUDEDNOTIFYFUNC</a></span>
pointer, along with an optional data pointer. The renderer will
automatically call the provided function pointer when it first
learns that the device is occluded and when it first learns that
the occlusion is over, and will pass along the <span class=
"NDLSystemFont">pvData</span> pointer that is provided. In the
callback function, the application can perform any necessary
steps it wants to in order to switch to an idle state and reduce
CPU usage, or restore the application from the idle state.
<span class="NDLSystemFont">AddOccludedNotificationFunc</span>
returns an index that indicates the order in which the function
will be called, relative to any other registered callbacks,
before and after the occlusion is encountered.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_D3D10Renderer.htm">discussion</a> on restricted
thread behavior in the D3D10 renderer for more information.</p>

<p class="NDLRefMemberFunction">bool
RemoveOccludedNotificationFunc(<a href=
"NiD3D10Renderer.htm#OccludedNotifyFunc">OCCLUDEDNOTIFYFUNC</a>
pfnNotify)</p>

<p class="NDLRefMemberDescription">Removes the indicated callback
function from the list of registered functions to be called
before and after the device is occluded. If the callback function
was not found among the list of registered functions,
<span class="NDLSystemFont">RemoveOccludedNotificationFunc</span>
will return <span class="NDLSystemFont">false</span>.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_D3D10Renderer.htm">discussion</a> on restricted
thread behavior in the D3D10 renderer for more information.</p>

<p class="NDLRefMemberFunction">bool
RemoveOccludedNotificationFunc(unsigned int uiIndex)</p>

<p class="NDLRefMemberDescription">Removes the callback function
with the indicated index from the list of registered functions to
be called before and after the device is occluded. If no callback
function with the index was not found among the list of
registered functions, <span class=
"NDLSystemFont">RemoveOccludedNotificationFunc</span> will return
<span class="NDLSystemFont">false</span>.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_D3D10Renderer.htm">discussion</a> on restricted
thread behavior in the D3D10 renderer for more information.</p>

<p class="NDLRefMemberFunction">void
RemoveAllOccludedNotificationFuncs()</p>

<p class="NDLRefMemberDescription">Removes all the callback
functions from the list of registered functions to be called
before and after the device is occluded.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_D3D10Renderer.htm">discussion</a> on restricted
thread behavior in the D3D10 renderer for more information.</p>

<p class="NDLRefMemberFunction">bool
ChangeOccludedNotificationFuncData(<a href=
"NiD3D10Renderer.htm#OccludedNotifyFunc">OCCLUDEDNOTIFYFUNC</a>
pfnNotify, void* pvData)</p>

<p class="NDLRefMemberDescription">Changes the pointer that will
be passed in as one of the parameters to the <span class=
"NDLSystemFont">pfnNotify</span> callback function when the
renderer calls it. If the callback function was not found among
the list of registered functions, <span class=
"NDLSystemFont">ChangeOccludedNotificationFuncData</span> will
return <span class="NDLSystemFont">false</span>.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_D3D10Renderer.htm">discussion</a> on restricted
thread behavior in the D3D10 renderer for more information.</p>

<p class="NDLRefMemberFunction">bool
ChangeOccludedNotificationFuncData(unsigned int uiIndex, void*
pvData)</p>

<p class="NDLRefMemberDescription">Changes the pointer that will
be passed in as one of the parameters to the callback function
with the index <span class="NDLSystemFont">uiIndex</span> when
the renderer calls it. If the callback function was not found
among the list of registered functions, <span class=
"NDLSystemFont">ChangeOccludedNotificationFuncData</span> will
return <span class="NDLSystemFont">false</span>.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_D3D10Renderer.htm">discussion</a> on restricted
thread behavior in the D3D10 renderer for more information.</p>

<p class="NDLRefMemberFunction">unsigned int
GetOccludedNotificationFuncCount() const</p>

<p class="NDLRefMemberDescription">Returns the number of callback
functions that have been registered with the renderer to be
called before and after the device is occluded.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_D3D10Renderer.htm">discussion</a> on restricted
thread behavior in the D3D10 renderer for more information.</p>

<p class="NDLRefMemberFunction">unsigned int
GetOccludedNotificationFuncArrayCount() const</p>

<p class="NDLRefMemberDescription">Returns the size of the
<span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiTArray.htm">NiTArray</a></span> used to
store the callback functions that have been registered with the
renderer to be called before and after the device is
occluded.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_D3D10Renderer.htm">discussion</a> on restricted
thread behavior in the D3D10 renderer for more information.</p>

<p class="NDLRefMemberFunction">unsigned int
FindOccludedNotificationFunc(<a href=
"NiD3D10Renderer.htm#OccludedNotifyFunc">OCCLUDEDNOTIFYFUNC</a>
pfnNotify) const</p>

<p class="NDLRefMemberDescription">Returns the index of the
<span class="NDLSystemFont">pfnNotify</span> callback function.
If the callback function was not found among the list of
registered functions, <span class=
"NDLSystemFont">FindOccludedNotificationFunc</span> will return
<span class="NDLSystemFont">UINT_MAX</span>.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_D3D10Renderer.htm">discussion</a> on restricted
thread behavior in the D3D10 renderer for more information.</p>

<p class="NDLRefMemberFunction"><a href=
"NiD3D10Renderer.htm#OccludedNotifyFunc">OCCLUDEDNOTIFYFUNC</a>
GetOccludedNotificationFunc(unsigned int uiIndex) const</p>

<p class="NDLRefMemberDescription">Returns the callback function
whose index is <span class="NDLSystemFont">uiIndex</span>. If no
such callback function was not found, <span class=
"NDLSystemFont">GetOccludedNotificationFunc</span> will return
<span class="NDLSystemFont">NULL</span>.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_D3D10Renderer.htm">discussion</a> on restricted
thread behavior in the D3D10 renderer for more information.</p>

<p class="NDLRefMemberFunction">unsigned int
AddDeviceRemovedNotificationFunc(<a href=
"NiD3D10Renderer.htm#DeviceRemovedNotifyFunc">DEVICEREMOVEDNOTIFYFUNC</a>
pfnNotify, void* pvData)</p>

<p class="NDLRefMemberDescription">Registers a <span class=
"NDLSystemFont"><a href=
"NiD3D10Renderer.htm#DeviceRemovedNotifyFunc">DEVICEREMOVEDNOTIFYFUNC</a></span>
pointer, along with an optional data pointer. The renderer will
automatically call the provided function pointer as soon as it
realizes that the D3D10 device has been removed, and will pass
along the <span class="NDLSystemFont">pvData</span> pointer that
is provided. In the callback function, the application can
perform any necessary functionality that it deems necessary in
response to the removed device. <span class=
"NDLSystemFont">AddDeviceRemovedNotificationFunc</span> returns
an index that indicates the order in which the function will be
called, relative to any other registered callbacks, when the
device is lost.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_D3D10Renderer.htm">discussion</a> on restricted
thread behavior in the D3D10 renderer for more information.</p>

<p class="NDLRefMemberFunction">bool
RemoveDeviceRemovedNotificationFunc(<a href=
"NiD3D10Renderer.htm#DeviceRemovedNotifyFunc">DEVICEREMOVEDNOTIFYFUNC</a>
pfnNotify)</p>

<p class="NDLRefMemberDescription">Removes the indicated callback
function from the list of registered functions to be called when
the device has been removed. If the callback function was not
found among the list of registered functions, <span class=
"NDLSystemFont">RemoveDeviceRemovedNotificationFunc</span> will
return <span class="NDLSystemFont">false</span>.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_D3D10Renderer.htm">discussion</a> on restricted
thread behavior in the D3D10 renderer for more information.</p>

<p class="NDLRefMemberFunction">bool
RemoveDeviceRemovedNotificationFunc(unsigned int uiIndex)</p>

<p class="NDLRefMemberDescription">Removes the callback function
with the indicated index from the list of registered functions to
be called when the device has been removed. If no callback
function with the index was not found among the list of
registered functions, <span class=
"NDLSystemFont">RemoveDeviceRemovedNotificationFunc</span> will
return <span class="NDLSystemFont">false</span>.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_D3D10Renderer.htm">discussion</a> on restricted
thread behavior in the D3D10 renderer for more information.</p>

<p class="NDLRefMemberFunction">void
RemoveAllDeviceRemovedNotificationFuncs()</p>

<p class="NDLRefMemberDescription">Removes all the callback
functions from the list of registered functions to be called when
the device has been removed.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_D3D10Renderer.htm">discussion</a> on restricted
thread behavior in the D3D10 renderer for more information.</p>

<p class="NDLRefMemberFunction">bool
ChangeDeviceRemovedNotificationFuncData(<a href=
"NiD3D10Renderer.htm#DeviceRemovedNotifyFunc">DEVICEREMOVEDNOTIFYFUNC</a>
pfnNotify, void* pvData)</p>

<p class="NDLRefMemberDescription">Changes the pointer that will
be passed in as one of the parameters to the <span class=
"NDLSystemFont">pfnNotify</span> callback function when the
renderer calls it. If the callback function was not found among
the list of registered functions, <span class=
"NDLSystemFont">ChangeDeviceRemovedNotificationFuncData</span>
will return <span class="NDLSystemFont">false</span>.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_D3D10Renderer.htm">discussion</a> on restricted
thread behavior in the D3D10 renderer for more information.</p>

<p class="NDLRefMemberFunction">bool
ChangeDeviceRemovedNotificationFuncData(unsigned int uiIndex,
void* pvData)</p>

<p class="NDLRefMemberDescription">Changes the pointer that will
be passed in as one of the parameters to the callback function
with the index <span class="NDLSystemFont">uiIndex</span> when
the renderer calls it. If the callback function was not found
among the list of registered functions, <span class=
"NDLSystemFont">ChangeDeviceRemovedNotificationFuncData</span>
will return <span class="NDLSystemFont">false</span>.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_D3D10Renderer.htm">discussion</a> on restricted
thread behavior in the D3D10 renderer for more information.</p>

<p class="NDLRefMemberFunction">unsigned int
GetDeviceRemovedNotificationFuncCount() const</p>

<p class="NDLRefMemberDescription">Returns the number of callback
functions that have been registered with the renderer to be
called when the device has been removed.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_D3D10Renderer.htm">discussion</a> on restricted
thread behavior in the D3D10 renderer for more information.</p>

<p class="NDLRefMemberFunction">unsigned int
GetDeviceRemovedNotificationFuncArrayCount() const</p>

<p class="NDLRefMemberDescription">Returns the size of the
<span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiTArray.htm">NiTArray</a></span> used to
store the callback functions that have been registered with the
renderer to be called when the device has been removed.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_D3D10Renderer.htm">discussion</a> on restricted
thread behavior in the D3D10 renderer for more information.</p>

<p class="NDLRefMemberFunction">unsigned int
FindDeviceRemovedNotificationFunc(<a href=
"NiD3D10Renderer.htm#DeviceRemovedNotifyFunc">DEVICEREMOVEDNOTIFYFUNC</a>
pfnNotify) const</p>

<p class="NDLRefMemberDescription">Returns the index of the
<span class="NDLSystemFont">pfnNotify</span> callback function.
If the callback function was not found among the list of
registered functions, <span class=
"NDLSystemFont">FindDeviceRemovedNotificationFunc</span> will
return <span class="NDLSystemFont">UINT_MAX</span>.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_D3D10Renderer.htm">discussion</a> on restricted
thread behavior in the D3D10 renderer for more information.</p>

<p class="NDLRefMemberFunction"><a href=
"NiD3D10Renderer.htm#DeviceRemovedNotifyFunc">DEVICEREMOVEDNOTIFYFUNC</a>
GetDeviceRemovedNotificationFunc(unsigned int uiIndex) const</p>

<p class="NDLRefMemberDescription">Returns the callback function
whose index is <span class="NDLSystemFont">uiIndex</span>. If no
such callback function was not found, <span class=
"NDLSystemFont">GetDeviceRemovedNotificationFunc</span> will
return <span class="NDLSystemFont">NULL</span>.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_D3D10Renderer.htm">discussion</a> on restricted
thread behavior in the D3D10 renderer for more information.</p>

<p class="NDLRefHead2">D3D10 Device Access Functions</p>

<p class="NDLRefMemberFunction">ID3D10Device* GetD3D10Device()
const</p>

<p class="NDLRefMemberDescription">Returns the D3D10 device.</p>

<p class="NDLRefMemberDescription">This function does not operate
under <a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>.</p>

<p class="NDLRefMemberFunction">ID3D10Device1* GetD3D10Device1()
const</p>

<p class="NDLRefMemberDescription">Returns the D3D10.1 device, if
it exsists.</p>

<p class="NDLRefMemberDescription">This function does not operate
under <a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>.</p>

<p class="NDLRefMemberFunction">bool
DoesFormatSupportFlag(DXGI_FORMAT eFormat, unsigned int uiFlags)
const</p>

<p class="NDLRefMemberDescription">Returns whether the given
format supports all of the capabilities specified by <span class=
"NDLSystemFont">uiFlags</span> on the current device. The
possible values for <span class="NDLSystemFont">uiFlags</span>
are any combination of the <span class=
"NDLSystemFont">D3D10_FORMAT_SUPPORT</span> flags. Note that all
the specified capabilities must be supported for the function to
return <span class="NDLSystemFont">true</span>.</p>

<p class="NDLRefMemberDescription">This function does not operate
under <a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>.</p>

<p class="NDLRefMemberFunction">unsigned int
GetFormatSupportFlags(DXGI_FORMAT eFormat) const</p>

<p class="NDLRefMemberDescription">Returns the set of
<span class="NDLSystemFont">D3D10_FORMAT_SUPPORT</span> flags
that the given format supports on the current device.</p>

<p class="NDLRefMemberDescription">This function does not operate
under <a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>.</p>

<p class="NDLRefMemberFunction">unsigned int GetSyncInterval()
const</p>

<p class="NDLRefMemberFunction">void SetSyncInterval(unsigned int
uiSyncInterval)</p>

<p class="NDLRefMemberDescription">Get and set the
synchronization interval that will be passed into all
<span class="NDLSystemFont">IDXGISwapChain::Present</span> calls.
Setting the sync interval to 0 should cause the device to present
frames immediately, which will be faster but can cause tearing.
If the sync interval is 1 or more, the device will wait for that
number of vertical sync signals to occur before the frame is
presented.</p>

<p class="NDLRefMemberDescription">These functions operate under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_D3D10Renderer.htm">discussion</a> on restricted
thread behavior in the D3D10 renderer for more information.</p>

<p class="NDLRefHead2">Renderer Manager Classes</p>

<p class="NDLRefMemberFunction"><a href=
"NiD3D10DeviceState.htm">NiD3D10DeviceState</a>* GetDeviceState()
const</p>

<p class="NDLRefMemberDescription">Returns the renderer's
<a href="NiD3D10DeviceState.htm"><span class=
"NDLSystemFont">NiD3D10DeviceState</span></a> object.</p>

<p class="NDLRefMemberDescription">This function does not operate
under <a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>.</p>

<p class="NDLRefMemberFunction"><a href=
"NiD3D10RenderStateManager.htm">NiD3D10RenderStateManager</a>*
GetRenderStateManager() const</p>

<p class="NDLRefMemberDescription">Returns the renderer's
<a href="NiD3D10RenderStateManager.htm"><span class=
"NDLSystemFont">NiD3D10RenderStateManager</span></a> object.</p>

<p class="NDLRefMemberDescription">This function does not operate
under <a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>.</p>

<p class="NDLRefMemberFunction"><a href=
"NiD3D10ResourceManager.htm">NiD3D10ResourceManager</a>*
GetResourceManager() const</p>

<p class="NDLRefMemberDescription">Returns the renderer's
<a href="NiD3D10ResourceManager.htm"><span class=
"NDLSystemFont">NiD3D10ResourceManager</span></a> object.</p>

<p class="NDLRefMemberDescription">This function does not operate
under <a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>.</p>

<p class="NDLRefMemberFunction"><a href=
"NiD3D10ShaderConstantManager.htm">NiD3D10ShaderConstantManager</a>*
GetShaderConstantManager() const</p>

<p class="NDLRefMemberDescription">Returns the renderer's
<a href="NiD3D10ShaderConstantManager.htm"><span class=
"NDLSystemFont">NiD3D10ShaderConstantManager</span></a>
object.</p>

<p class="NDLRefMemberDescription">This function does not operate
under <a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>.</p>

<p class="NDLRefHead2">Shader Related Functions</p>

<p class="NDLRefMemberFunction">void RegisterD3D10Shader(<a href=
"NiD3D10ShaderInterface.htm">NiD3D10ShaderInterface</a>*
pkD3D10Shader)</p>

<p class="NDLRefMemberDescription">If an application creates an
instance of an <a href="NiD3D10ShaderInterface.htm"><span class=
"NDLSystemFont">NiD3D10ShaderInterface</span></a>-derived class
on its own, this function will register that instance with the
renderer.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_D3D10Renderer.htm">discussion</a> on restricted
thread behavior in the D3D10 renderer for more information.</p>

<p class="NDLRefMemberFunction">void ReleaseD3D10Shader(<a href=
"NiD3D10ShaderInterface.htm">NiD3D10ShaderInterface</a>*
pkD3D10Shader)</p>

<p class="NDLRefMemberDescription">This function unregisters an
instance of an <a href="NiD3D10ShaderInterface.htm"><span class=
"NDLSystemFont">NiD3D10ShaderInterface</span></a>-derived class
from the renderer.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_D3D10Renderer.htm">discussion</a> on restricted
thread behavior in the D3D10 renderer for more information.</p>

<p class="NDLRefMemberFunction">void PurgeD3D10Shader(<a href=
"NiD3D10ShaderInterface.htm">NiD3D10ShaderInterface</a>*
pkD3D10Shader)</p>

<p class="NDLRefMemberDescription">This function unregisters an
instance of an <a href="NiD3D10ShaderInterface.htm"><span class=
"NDLSystemFont">NiD3D10ShaderInterface</span></a>-derived class
from the renderer and forces it to release all its renderer
data.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_D3D10Renderer.htm">discussion</a> on restricted
thread behavior in the D3D10 renderer for more information.</p>

<p class="NDLRefMemberFunction">void PurgeAllD3D10Shaders()</p>

<p class="NDLRefMemberDescription">This function calls
<span class="NDLSystemFont">PurgeD3D10Shader</span> on all
shaders that have been registered with the renderer.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_D3D10Renderer.htm">discussion</a> on restricted
thread behavior in the D3D10 renderer for more information.</p>

<p class="NDLRefHead2">Miscellaneous Renderer Functions</p>

<p class="NDLRefMemberFunction">void InvalidateDeviceState()</p>

<p class="NDLRefMemberDescription">Invalidates the cached version
of the shaders, render state objects, samplers, shader resources,
and shader constant buffers that Gamebryo maintains. This may
cause Gamebryo to release the only reference to objects that are
on the device, which will cause those objects to be deleted.</p>

<p class="NDLRefMemberDescription">This function can be called
after an application has made calls directly on the D3D10 device
to inform Gamebryo that the state objects may have changed. This
prevents Gamebryo from incorrectly optimizing out a call to set a
state object on the device.</p>

<p class="NDLRefMemberFunction">NiTexturePtr
CreateNiTextureFromD3D10Texture(ID3D10Resource* pkD3D10Texture,
ID3D10ShaderResourceView* pkResourceView)</p>

<p class="NDLRefMemberDescription">Creates an <a href=
"NiD3D10Direct3DTexture.htm"><span class=
"NDLSystemFont">NiD3D10Direct3DTexture</span></a> object that
refers to the <span class="NDLSystemFont">ID3D10Resource</span>
that is passed into the function. The created texture is returned
in an <span class="NDLSystemFont">NiTexturePtr</span>, so the
code that calls this function must place the result in a smart
pointer to prevent the object from being deleted. The resulting
texture can be used any place in the engine where an <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMain/NiTexture.htm">NiTexture</a></span> is
expected, and will support any D3D10 texture, regardless of
texture size, format, creation pool, etc. Note that the texture
will include a reference to <span class=
"NDLSystemFont">pkD3DTexture</span>, so the code that calls this
function can safely release any of its own references.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_D3D10Renderer.htm">discussion</a> on restricted
thread behavior in the D3D10 renderer for more information.</p>

<p class="NDLRefMemberFunction">float GetMaxFogFactor() const</p>

<p class="NDLRefMemberDescription">Returns the max fog factor,
which is the inverse of the max fog value as set by <span class=
"NDLSystemFont">NiRenderer::SetMaxFogValue</span>, minus 1.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_D3D10Renderer.htm">discussion</a> on restricted
thread behavior in the D3D10 renderer for more information.</p>

<p class="NDLRefHead1">Notes</p>

<p class="NDLRefHead2">Function Pointer Types</p>

<p>Applications can provide any number of callback function
pointers to get called when the device reaches a Device Removed
or Occluded state.These callbacks allow the application to
respond to the situation accordingly. Refer to the documentation
on <a href=
"Responding_to_Occluded_or_Removed_Device_in_D3D10.htm">Responding
to Occluded or Removed Device in D3D10</a> for more
information.</p>

<p class="NDLRefMemberFunction"><a name="OccludedNotifyFunc" id=
"OccludedNotifyFunc">typedef bool (*OCCLUDEDNOTIFYFUNC)(bool
bBeginOccluded, void* pvData)</a></p>

<p class="NDLRefMemberDescription">The OCCLUDEDNOTIFYFUNC type is
for a pointer to a function that gets called as soon as the
renderer encounters an occluded device, and again as soon as the
renderer learns that the device is no longer occluded. The
renderer calls the function with <span class=
"NDLSystemFont">bBeginOccluded</span> = <span class=
"NDLSystemFont">true</span> immediately when the occlusion
starts, and <span class="NDLSystemFont">bBeginOccluded</span> =
<span class="NDLSystemFont">false</span> as soon as the occlusion
ends. Any data pointer that the application provides when
registering the function is passed in as the <span class=
"NDLSystemFont">pvData</span> parameter.</p>

<p class="NDLRefMemberFunction"><a name="DeviceRemovedNotifyFunc"
id="DeviceRemovedNotifyFunc">typedef bool
(*DEVICEREMOVEDNOTIFYFUNC)(void* pvData)</a></p>

<p class="NDLRefMemberDescription">The <span class=
"NDLSystemFont">DEVICEREMOVEDNOTIFYFUNC</span> type is for a
pointer to a function that gets called once, when the renderer
first realizes that the device has been removed. Any data pointer
that the application provides when registering the function is
passed in as the <span class="NDLSystemFont">pvData</span>
parameter.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
