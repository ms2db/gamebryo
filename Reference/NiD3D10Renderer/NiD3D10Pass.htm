<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiD3D10Pass</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiD3D10Pass</p>

<p class="NDLRefParentage">: public <a href=
"../../Reference/NiMain/NiRefObject.htm">NiRefObject</a></p>

<p class="NDLRefHeaderFile">&lt;NiD3D10Pass.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiD3D10Pass</span> represents a
single rendering pass for an <span class="NDLSystemFont"><a href=
"NiD3D10Shader.htm">NiD3D10Shader</a></span>.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiD3D10Pass()</p>

<p class="NDLRefMemberDescription">The constructor initializes
members to the default state, and allocates the texture stage
array which the pass will utilize. It is a good idea to not
directly create <span class="NDLSystemFont">NiD3D10Pass</span>
objects, but to call <span class=
"NDLSystemFont">CreateNewPass</span> to obtain a pass
instead.</p>

<p class="NDLRefHead1">Supported Static Member Functions</p>

<p class="NDLRefMemberFunction">static bool
CreateNewPass(NiD3D10PassPtr&amp; spNewPass)</p>

<p class="NDLRefMemberDescription">This function will return an
<span class="NDLSystemFont">NiD3D10Pass</span> instance. The
function will return a Boolean indicating whether or not the
operation was successful.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">const char* GetName() const</p>

<p class="NDLRefMemberDescription">Returns the name associated
with the pass. This can be <span class=
"NDLSystemFont">NULL</span>.</p>

<p class="NDLRefMemberFunction">void SetName(char* pcName)</p>

<p class="NDLRefMemberDescription">Sets the name of the pass to
the given <span class="NDLSystemFont">pcName</span>. Pass names
are provided primarily to aid in debugging, as they allow easy
identification.</p>

<p class="NDLRefMemberFunction"><a href=
"NiD3D10RenderStateGroup.htm">NiD3D10RenderStateGroup</a>*
GetRenderStateGroup() const</p>

<p class="NDLRefMemberDescription">Returns the render state group
instance, <span class=
"NDLSystemFont">m_pkRenderStateGroup</span>, associated with the
pass.</p>

<p class="NDLRefMemberFunction">void SetRenderStateGroup(<a href=
"NiD3D10RenderStateGroup.htm">NiD3D10RenderStateGroup</a>*
pkRenderStateGroup)</p>

<p class="NDLRefMemberDescription">Sets the render state group
instance for the pass to the given <span class=
"NDLSystemFont">pkRenderStateGroup</span>.</p>

<p class="NDLRefMemberFunction">unsigned int
GetVertexConstantMapCount() const</p>

<p class="NDLRefMemberDescription">Returns the number of shader
constant maps associated with the vertex shader.</p>

<p class="NDLRefMemberFunction"><a href=
"NiD3D10ShaderConstantMap.htm">NiD3D10ShaderConstantMap</a>*
GetVertexConstantMap(unsigned int uiIndex) const</p>

<p class="NDLRefMemberDescription">Returns the vertex shader
constant map indicated by <span class=
"NDLSystemFont">uiIndex</span>. If there is no constant map at
that index, the function will return NULL.</p>

<p class="NDLRefMemberFunction">void
SetVertexConstantMap(unsigned int uiIndex, <a href=
"NiD3D10ShaderConstantMap.htm">NiD3D10ShaderConstantMap</a>*
pkSCMVertex)</p>

<p class="NDLRefMemberDescription">Sets the passed-in vertex
shader constant map at slot <span class=
"NDLSystemFont">uiIndex</span>.</p>

<p class="NDLRefMemberFunction"><a href=
"NiD3D10VertexShader.htm">NiD3D10VertexShader</a>*
GetVertexShader() const</p>

<p class="NDLRefMemberDescription">Retrieves the vertex shader
instance used in this pass.</p>

<p class="NDLRefMemberFunction">void SetVertexShader(<a href=
"NiD3D10VertexShader.htm">NiD3D10VertexShader</a>*
pkVertexShader)</p>

<p class="NDLRefMemberDescription">Sets the vertex shader
instance for this pass.</p>

<p class="NDLRefMemberFunction"><a href=
"../../Reference/NiMain/NiTexture.htm">NiTexture</a>*
GetVertexTexture(unsigned int uiTexture) const</p>

<p class="NDLRefMemberDescription">Gets the texture assigned to
the <span class="NDLSystemFont">uiTexture</span> slot of the
vertex shader for this pass.</p>

<p class="NDLRefMemberFunction">void SetVertexTexture(unsigned
int uiTexture, <a href=
"../../Reference/NiMain/NiTexture.htm">NiTexture</a>*
pkTexture)</p>

<p class="NDLRefMemberDescription">Sets the provided texture to
the <span class="NDLSystemFont">uiTexture</span> slot of the
vertex shader for this pass.</p>

<p class="NDLRefMemberFunction">const char*
GetVertexShaderProgramFileName() const</p>

<p class="NDLRefMemberDescription">Returns the file name of the
vertex shader program file utilized in this pass.</p>

<p class="NDLRefMemberFunction">void
SetVertexShaderProgramFileName(const char* pcProgramFile)</p>

<p class="NDLRefMemberDescription">Sets the file name of the
vertex shader program file to use for this pass.</p>

<p class="NDLRefMemberFunction">const char*
GetVertexShaderProgramEntryPoint() const</p>

<p class="NDLRefMemberDescription">Returns the entry point for
the vertex shader program utilized in this pass.</p>

<p class="NDLRefMemberFunction">void
SetVertexShaderProgramEntryPoint(const char* pcEntryPoint)</p>

<p class="NDLRefMemberDescription">Sets the entry point for the
vertex shader program to use for this pass.</p>

<p class="NDLRefMemberFunction">const char*
GetVertexShaderProgramShaderTarget() const</p>

<p class="NDLRefMemberDescription">Returns the text representing
the shader target for the vertex shader program utilized in this
pass. Possible values for this include "vs_2_0", "vs_4_0", and
others listed in the D3D10 documentation.</p>

<p class="NDLRefMemberFunction">void
SetVertexShaderProgramShaderTarget(const char*
pcShaderTarget)</p>

<p class="NDLRefMemberDescription">Sets the shader target for the
vertex shader program to use for this pass. Possible values for
this include "vs_2_0", "vs_4_0", and others listed in the D3D10
documentation.</p>

<p class="NDLRefMemberFunction">unsigned int
GetGeometryConstantMapCount() const</p>

<p class="NDLRefMemberDescription">Returns the number of shader
constant maps associated with the geometry shader.</p>

<p class="NDLRefMemberFunction"><a href=
"NiD3D10ShaderConstantMap.htm">NiD3D10ShaderConstantMap</a>*
GetGeometryConstantMap(unsigned int uiIndex) const</p>

<p class="NDLRefMemberDescription">Returns the geometry shader
constant map indicated by <span class=
"NDLSystemFont">uiIndex</span>.</p>

<p class="NDLRefMemberFunction">void
SetGeometryConstantMap(unsigned int uiIndex, <a href=
"NiD3D10ShaderConstantMap.htm">NiD3D10ShaderConstantMap</a>*
pkSCMGeometry)</p>

<p class="NDLRefMemberDescription">Sets the passed-in geometry
shader constant map at slot <span class=
"NDLSystemFont">uiIndex</span>.</p>

<p class="NDLRefMemberFunction"><a href=
"NiD3D10GeometryShader.htm">NiD3D10GeometryShader</a>*
GetGeometryShader() const</p>

<p class="NDLRefMemberDescription">Retrieves the geometry shader
instance used in this pass.</p>

<p class="NDLRefMemberFunction">void SetGeometryShader(<a href=
"NiD3D10GeometryShader.htm">NiD3D10GeometryShader</a>*
pkGeometryShader)</p>

<p class="NDLRefMemberDescription">Sets the geometry shader
instance for this pass.</p>

<p class="NDLRefMemberFunction"><a href=
"../../Reference/NiMain/NiTexture.htm">NiTexture</a>*
GetGeometryTexture(unsigned int uiTexture) const</p>

<p class="NDLRefMemberDescription">Gets the texture assigned to
the <span class="NDLSystemFont">uiTexture</span> slot of the
geometry shader for this pass.</p>

<p class="NDLRefMemberFunction">void SetGeometryTexture(unsigned
int uiTexture, <a href=
"../../Reference/NiMain/NiTexture.htm">NiTexture</a>*
pkTexture)</p>

<p class="NDLRefMemberDescription">Sets the provided texture to
the <span class="NDLSystemFont">uiTexture</span> slot of the
geometry shader for this pass.</p>

<p class="NDLRefMemberFunction">const char*
GetGeometryShaderProgramFileName() const</p>

<p class="NDLRefMemberDescription">Returns the file name of the
geometry shader program file utilized in this pass.</p>

<p class="NDLRefMemberFunction">void
SetGeometryShaderProgramFileName(const char* pcProgramFile)</p>

<p class="NDLRefMemberDescription">Sets the file name of the
geometry shader program file to use for this pass.</p>

<p class="NDLRefMemberFunction">const char*
GetGeometryShaderProgramEntryPoint() const</p>

<p class="NDLRefMemberDescription">Returns the entry point for
the geometry shader program utilized in this pass.</p>

<p class="NDLRefMemberFunction">void
SetGeometryShaderProgramEntryPoint(const char* pcEntryPoint)</p>

<p class="NDLRefMemberDescription">Sets the entry point for the
geometry shader program to use for this pass.</p>

<p class="NDLRefMemberFunction">const char*
GetGeometryShaderProgramShaderTarget() const</p>

<p class="NDLRefMemberDescription">Returns the text representing
the shader target for the geometry shader program utilized in
this pass. Possible values for this include "gs_4_0".</p>

<p class="NDLRefMemberFunction">void
SetGeometryShaderProgramShaderTarget(const char*
pcShaderTarget)</p>

<p class="NDLRefMemberDescription">Sets the shader target for the
geometry shader program to use for this pass. Possible values for
this include "gs_4_0".</p>

<p class="NDLRefMemberFunction">unsigned int
GetPixelConstantMapCount() const</p>

<p class="NDLRefMemberDescription">Returns the number of shader
constant maps associated with the pixel shader.</p>

<p class="NDLRefMemberFunction"><a href=
"NiD3D10ShaderConstantMap.htm">NiD3D10ShaderConstantMap</a>*
GetPixelConstantMap(unsigned int uiIndex) const</p>

<p class="NDLRefMemberDescription">Returns the pixel shader
constant map indicated by <span class=
"NDLSystemFont">uiIndex</span>.</p>

<p class="NDLRefMemberFunction">void SetPixelConstantMap(unsigned
int uiIndex, <a href=
"NiD3D10ShaderConstantMap.htm">NiD3D10ShaderConstantMap</a>*
pkSCMPixel)</p>

<p class="NDLRefMemberDescription">Sets the passed-in pixel
shader constant map at slot <span class=
"NDLSystemFont">uiIndex</span>.</p>

<p class="NDLRefMemberFunction"><a href=
"NiD3D10PixelShader.htm">NiD3D10PixelShader</a>* GetPixelShader()
const</p>

<p class="NDLRefMemberDescription">Retrieves the pixel shader
instance used in this pass.</p>

<p class="NDLRefMemberFunction">void SetPixelShader(<a href=
"NiD3D10PixelShader.htm">NiD3D10PixelShader</a>*
pkPixelShader)</p>

<p class="NDLRefMemberDescription">Sets the pixel shader instance
for this pass.</p>

<p class="NDLRefMemberFunction"><a href=
"../../Reference/NiMain/NiTexture.htm">NiTexture</a>*
GetPixelTexture(unsigned int uiTextre) const</p>

<p class="NDLRefMemberDescription">Gets the texture assigned to
the <span class="NDLSystemFont">uiTexture</span> slot of the
pixel shader for this pass.</p>

<p class="NDLRefMemberFunction">void SetPixelTexture(unsigned int
uiTexture, <a href=
"../../Reference/NiMain/NiTexture.htm">NiTexture</a>*
pkTexture)</p>

<p class="NDLRefMemberDescription">Sets the provided texture to
the <span class="NDLSystemFont">uiTexture</span> slot of the
pixel shader for this pass.</p>

<p class="NDLRefMemberFunction">const char*
GetPixelShaderProgramFileName() const</p>

<p class="NDLRefMemberDescription">Returns the file name of the
pixel shader program file utilized in this pass.</p>

<p class="NDLRefMemberFunction">void
SetPixelShaderProgramFileName(const char* pcProgramFile)</p>

<p class="NDLRefMemberDescription">Sets the file name of the
pixel shader program file to use for this pass.</p>

<p class="NDLRefMemberFunction">const char*
GetPixelShaderProgramEntryPoint() const</p>

<p class="NDLRefMemberDescription">Returns the entry point for
the pixel shader program utilized in this pass.</p>

<p class="NDLRefMemberFunction">void
SetPixelShaderProgramEntryPoint(const char* pcEntryPoint)</p>

<p class="NDLRefMemberDescription">Sets the entry point for the
pixel shader program to use for this pass.</p>

<p class="NDLRefMemberFunction">const char*
GetPixelShaderProgramShaderTarget() const</p>

<p class="NDLRefMemberDescription">Returns the text representing
the shader target for the vertex shader program utilized in this
pass. Possible values for this include "ps_2_a", "ps_4_0", and
others listed in the D3D10 documentation.</p>

<p class="NDLRefMemberFunction">void
SetPixelShaderProgramShaderTarget(const char* pcShaderTarget)</p>

<p class="NDLRefMemberDescription">Sets the shader target for the
pixel shader program to use for this pass. Possible values for
this include "ps_2_a", "ps_4_0", and others listed in the D3D10
documentation.</p>

<p class="NDLRefMemberFunction">bool LinkUpConstantMaps()</p>

<p class="NDLRefMemberDescription">Ensures that any constant maps
on the pass are correctly aligned with the constant buffers in
the shader, and that the entries in the shader constant maps know
where in the constant buffer they will be writing their data.</p>

<p class="NDLRefMemberFunction">bool LinkUpShaderResources()</p>

<p class="NDLRefMemberDescription">Ensures that any textures and
sampler settings on the pass are correctly aligned with the
texture and sampler variables in the shader.</p>

<p class="NDLRefMemberFunction">virtual unsigned int
ApplyShaderPrograms(const <a href=
"../../Reference/NiMain/NiRenderCallContext.htm">NiRenderCallContext</a>&amp;
kRCC)</p>

<p class="NDLRefMemberDescription">This function is called by
<span class="NDLSystemFont"><a href=
"NiD3D10Shader.htm">NiD3D10Shader</a>::SetupShaderPrograms</span>.
It is responsible for setting the any vertex, geometry, and pixel
shaders.</p>

<p class="NDLRefMemberFunction">virtual unsigned int
ApplyShaderConstants(const <a href=
"../../Reference/NiMain/NiRenderCallContext.htm">NiRenderCallContext</a>&amp;
kRCC)</p>

<p class="NDLRefMemberDescription">This function is called by
<span class="NDLSystemFont"><a href=
"NiD3D10Shader.htm">NiD3D10Shader</a>::SetupShaderPrograms</span>.
It is responsible for setting the constant buffers for any
vertex, geometry, and pixel shaders.</p>

<p class="NDLRefMemberFunction">virtual unsigned int
ApplyTextures(const <a href=
"../../Reference/NiMain/NiRenderCallContext.htm">NiRenderCallContext</a>&amp;
kRCC)</p>

<p class="NDLRefMemberDescription">This function is called by
<span class=
"NDLSystemFont">NiD3D10Pass::SetupRenderingPass</span>. It is
responsible for ensuring its textures have been packed before
passing them to the device as shader resources.</p>

<p class="NDLRefMemberFunction">virtual unsigned int
SetupRenderingPass(const <a href=
"../../Reference/NiMain/NiRenderCallContext.htm">NiRenderCallContext</a>&amp;
kRCC)</p>

<p class="NDLRefMemberDescription">This function is called by
<span class="NDLSystemFont"><a href=
"NiD3D10Shader.htm">NiD3D10Shader</a></span><span class=
"NDLSystemFont">::SetupRenderingPass</span>. It is responsible
for calling <span class=
"NDLSystemFont">LinkUpShaderResources</span>, setting the 'local'
rendering states which are contained in the pass's render state
group, and calling <span class=
"NDLSystemFont">ApplyTextures</span> to set up the shader
resources.</p>

<p class="NDLRefMemberFunction">virtual unsigned int
PostProcessRenderingPass(unsigned int uiPass = 0)</p>

<p class="NDLRefMemberDescription">This function is called by the
<span class="NDLSystemFont"><a href=
"NiD3D10Shader.htm">NiD3D10Shader</a></span><span class=
"NDLSystemFont">::NextPass</span> function. It does nothing, but
it could be used by a derived class to clean up the pass after it
has rendered.</p>

<p class="NDLRefMemberFunction">void
ResetTexturesAndSamplers()</p>

<p class="NDLRefMemberDescription">For passes that are
programmatically filled in, such as in the case of <span class=
"NDLSystemFont"><a href=
"NiD3D10FragmentShader.htm">NiD3D10FragmentShader</a></span>,
this function clears out the internal texture and sampler
counters so new textures and samplers can be assigned to the
pass.</p>

<p class="NDLRefMemberFunction">unsigned int
GetFirstUnassignedTexture()</p>

<p class="NDLRefMemberDescription">For passes that are
programmatically filled in, such as in the case of <span class=
"NDLSystemFont"><a href=
"NiD3D10FragmentShader.htm">NiD3D10FragmentShader</a></span>,
this function returns the first texture slot that does not have a
texture assigned to it.</p>

<p class="NDLRefMemberFunction">unsigned int
GetActiveTextureCount() const</p>

<p class="NDLRefMemberDescription">For passes that are
programmatically filled in, such as in the case of <span class=
"NDLSystemFont"><a href=
"NiD3D10FragmentShader.htm">NiD3D10FragmentShader</a></span>,
this function returns number of texture slots that have been
filled in so far.</p>

<p class="NDLRefMemberFunction">unsigned int
GetActiveSamplerCount() const</p>

<p class="NDLRefMemberDescription">For passes that are
programmatically filled in, such as in the case of <span class=
"NDLSystemFont"><a href=
"NiD3D10FragmentShader.htm">NiD3D10FragmentShader</a></span>,
this function returns number of sampler slots that have been
filled in so far.</p>

<p class="NDLRefMemberFunction">bool SetTextureName(unsigned int
uiTexture, const <a href=
"../../Reference/NiMain/NiFixedString.htm">NiFixedString</a>&amp;
kTextureName)</p>

<p class="NDLRefMemberDescription">Assigns a variable name to the
texture at texture slot <span class=
"NDLSystemFont">uiTexture</span>. This is used in <span class=
"NDLSystemFont">LinkUpShaderResources</span> to align the
textures with what the shader is expecting.</p>

<p class="NDLRefMemberFunction">bool SetGamebryoMap(unsigned int
uiTexture, const <a href=
"../../Reference/NiMain/NiFixedString.htm">NiFixedString</a>&amp;
kTextureName, unsigned int uiGBMap, unsigned short usInstance,
unsigned short usObjectFlags)</p>

<p class="NDLRefMemberDescription">For passes that are
programmatically filled in, such as in the case of <span class=
"NDLSystemFont"><a href=
"NiD3D10FragmentShader.htm">NiD3D10FragmentShader</a></span>,
this function fills in one of the texture slots. The <span class=
"NDLSystemFont">uiTexture</span> parameter indicates which slot
is getting filled in; it must be a slot that is active but not
yet assigned, as a result of calling <span class=
"NDLSystemFont">GetFirstUnassignedTexture</span>. The texture
variable name from the shader is passed in through <span class=
"NDLSystemFont">kTextureName</span>. If the texture will come
from an <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiTexturingProperty.htm">NiTexturingProperty</a></span>,
<span class="NDLSystemFont">uiGBMap</span> and <span class=
"NDLSystemFont">usInstance</span> contain the <span class=
"NDLSystemFont"><a href=
"#GamebryoMapsEnumerations">GamebryoMaps</a></span> enumeration
for the texture that will be assigned to this slot and, if
necessary, the instance of that texture to use. If the texture
will come from an <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiTextureEffect.htm">NiTextureEffect</a></span>,
<span class="NDLSystemFont">usObjectFlags</span> parameter
contains the <span class="NDLSystemFont"><a href=
"#ObjectTextureFlagsEnumerations">ObjectTextureFlags</a></span>
enumeration. Only one of <span class=
"NDLSystemFont">uiGBMap</span> and <span class=
"NDLSystemFont">usObjectFlags</span> need to be filled in with
non-0 values.</p>

<p class="NDLRefMemberFunction">unsigned int
GetGamebryoMapFlags(unsigned int uiTexture) const</p>

<p class="NDLRefMemberDescription">Returns the <span class=
"NDLSystemFont"><a href=
"#GamebryoMapsEnumerations">GamebryoMaps</a></span> flags for
this texture slot.</p>

<p class="NDLRefMemberFunction">unsigned short
GetObjectTextureFlags(unsigned int uiTexture) const</p>

<p class="NDLRefMemberDescription">Returns the <span class=
"NDLSystemFont"><a href=
"#ObjectTextureFlagsEnumerations">ObjectTextureFlags</a></span>
flags for this texture slot.</p>

<p class="NDLRefMemberFunction">bool
NiD3D10Pass::SetSamplerName(unsigned int uiSampler, const
<a href="../../Reference/NiMain/NiFixedString.htm">NiFixedString</a>&amp;
kSamplerName)</p>

<p class="NDLRefMemberDescription">Assigns a variable name to the
texture at texture slot <span class=
"NDLSystemFont">uiTexture</span>. This is used in <span class=
"NDLSystemFont">LinkUpShaderResources</span> to align the
textures with what the shader is expecting.</p>

<p class="NDLRefMemberFunction">void SetStreamOutSettings(const
<a href=
"../../Reference/NiMain/NiStreamOutSettings.htm">NiStreamOutSettings</a>&amp;
kStreamOutSettings)</p>

<p class="NDLRefMemberFunction"><a href=
"../../Reference/NiMain/NiStreamOutSettings.htm">NiStreamOutSettings</a>&amp;
GetStreamOutSettings()</p>

<p class="NDLRefMemberDescription">Get and set the stream out
settings object, which dictates which output streams attached to
the <span class="NDLSystemFont"><a href=
"../../Reference/NiMesh/NiMesh.htm">NiMesh</a></span> are set up
to receive the output data.</p>

<p class="NDLRefHead1">Notes</p>

<a name="GamebryoMapsEnumerations" id="GamebryoMapsEnumerations"></a><p class="NDLRefHead2">GamebryoMaps Enumerations</p>

<p>The <span class="NDLSystemFont">NiD3D10Pass</span> object
keeps flags so it can load the textures from the <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMain/NiTexturingProperty.htm">NiTexturingProperty</a></span>
at render time. These flags are stored in an unsigned int per
texture slot. If that texture slot's flags are not <span class=
"NDLSystemFont">GB_MAP_IGNORE</span>, then the flags are masked
with <span class="NDLSystemFont">GB_MAP_TYPEMASK</span> to
determine which texture to use:</p>

<!--(Table)=========================================================-->
<table>
    <thead>
        <tr>
            <th>Flag</th>

            <th>Texture Source</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><span class=
            "NDLSystemFont">GB_MAP_IGNORE</span></td>

            <td>&nbsp;</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">GB_MAP_NONE</span></td>

            <td>No texture.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">GB_MAP_BASE</span></td>

            <td>Base map of the <span class=
            "NDLSystemFont"><a href=
            "../../Reference/NiMain/NiTexturingProperty.htm">NiTexturingProperty</a></span>.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">GB_MAP_DARK</span></td>

            <td>Dark map of the <span class=
            "NDLSystemFont"><a href=
            "../../Reference/NiMain/NiTexturingProperty.htm">NiTexturingProperty</a></span>.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">GB_MAP_DETAIL</span></td>

            <td>Detail map of the <span class=
            "NDLSystemFont"><a href=
            "../../Reference/NiMain/NiTexturingProperty.htm">NiTexturingProperty</a></span>.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">GB_MAP_GLOSS</span></td>

            <td>Gloss map of the <span class=
            "NDLSystemFont"><a href=
            "../../Reference/NiMain/NiTexturingProperty.htm">NiTexturingProperty</a></span>.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">GB_MAP_GLOW</span></td>

            <td>Glow map of the <span class=
            "NDLSystemFont"><a href=
            "../../Reference/NiMain/NiTexturingProperty.htm">NiTexturingProperty</a></span>.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">GB_MAP_BUMP</span></td>

            <td>Bump map of the <span class=
            "NDLSystemFont"><a href=
            "../../Reference/NiMain/NiTexturingProperty.htm">NiTexturingProperty</a></span>.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">GB_MAP_NORMAL</span></td>

            <td>Normal map of the <span class=
            "NDLSystemFont"><a href=
            "../../Reference/NiMain/NiTexturingProperty.htm">NiTexturingProperty</a></span>.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">GB_MAP_PARALLAX</span></td>

            <td>Parallax map of the <span class=
            "NDLSystemFont"><a href=
            "../../Reference/NiMain/NiTexturingProperty.htm">NiTexturingProperty</a></span>.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">GB_MAP_DECAL</span></td>

            <td>Decal map of the <span class=
            "NDLSystemFont"><a href=
            "../../Reference/NiMain/NiTexturingProperty.htm">NiTexturingProperty</a></span>.
            Note that the index will need to be queried to
            determine which decal map to use.</td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">GB_MAP_SHADER</span></td>

            <td>Shader map of the <span class=
            "NDLSystemFont"><a href=
            "../../Reference/NiMain/NiTexturingProperty.htm">NiTexturingProperty</a></span>.
            Note that the index will need to be queried to
            determine which shader map to use.</td>
        </tr>
    </tbody>
</table>

<p>If <span class="NDLSystemFont">GB_MAP_DECAL</span> or
<span class="NDLSystemFont">GB_MAP_SHADER</span> are returned,
then the flags must be masked with <span class=
"NDLSystemFont">GB_MAP_INDEX_MASK</span> to determine which map
of the respective type to use.</p>

<a name="ObjectTextureFlagsEnumerations" id="ObjectTextureFlagsEnumerations"></a><p class="NDLRefHead2">ObjectTextureFlags Enumerations</p>

<p>The <span class="NDLSystemFont">NiD3D10Pass</span> object
keeps flags so it can load the textures from <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMain/NiTextureEffect.htm">NiTextureEffect</a></span>
objects at render time. These flags are store in an unsigned
short per texture slot. If that texture slot's flags are not
<span class="NDLSystemFont">OTF_IGNORE</span>, then the upper
byte <span class="NDLSystemFont">((usObjTextureFlags &amp;
OTF_TYPE_MASK) &gt;&gt; OTF_TYPE_SHIFT)</span> contains the
<span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiShaderAttributeDesc.htm#ObjectType_Enumerations">
NiShaderAttributeDesc::ObjectType</a></span> enumeration for the
texture. For those object types that could have multiple
instances on a given object, the lower byte <span class=
"NDLSystemFont">(usObjTextureFlags &amp; OTF_INDEX_MASK)</span>
contains the index indicating which <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMain/NiTextureEffect.htm">NiTextureEffect</a></span>
the flags are referring to.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
