<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiD3D10Shader</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiD3D10Shader</p>

<p class="NDLRefParentage">: public <a href=
"NiD3D10ShaderInterface.htm">NiD3D10ShaderInterface</a></p>

<p class="NDLRefHeaderFile">&lt;NiD3D10Shader.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiD3D10Shader</span> implements an
<span class="NDLSystemFont"><a href=
"NiD3D10ShaderInterface.htm">NiD3D10ShaderInterface</a></span>
with some added members that aid in creating and using a shader
in the rendering pipeline. These members include an array of
<span class="NDLSystemFont"><a href=
"NiD3D10Pass.htm">NiD3D10Pass</a></span> instances, 'global'
render state settings, and vertex, geometry, and pixel shader
constant mappings which may also be considered 'global' to the
complete rendering effect. A Boolean flag indicating if the
shader has been initialized aids the shader factory in retrieving
and attaching shaders to geometry instances. Finally, there is a
Boolean flag that indicates whether the <span class=
"NDLSystemFont"><a href=
"NiD3D10RenderStateManager.htm">NiD3D10RenderStateManager</a></span><span class="NDLSystemFont">
::</span><span class="NDLSystemFont">SetProperties</span>
function should be called to apply any <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMain/NiProperty.htm">NiProperty</a></span>
instances attached to the object.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiD3D10Shader()</p>

<p class="NDLRefMemberDescription">The constructor for the class
initializes the member functions to appropriate states.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction"><span style=
"color: #000000;">virtual bool IsInitialized()</span></p>

<p class="NDLRefMemberDescription">Returns the Boolean flag,
<span class="NDLSystemFont">m_bInitialized</span>, which
indicates if the shader has had its <span class=
"NDLSystemFont">Initialize</span> function called.</p>

<p class="NDLRefMemberFunction">virtual unsigned int
RenderMeshes(<a href=
"../NiMain/NiVisibleArray.htm">NiVisibleArray</a>*
pkVisibleArray)</p>

<p class="NDLRefMemberDescription">Renders a list of meshes in a
visible array using this shader. It can be assumed that the
shader of the active material for each mesh is the same as
<span class="NDLSystemFont">this</span>. </p>

<p class="NDLRefMemberDescription">The default implementation of
this method on each platform is what is responsible for calling
the other shader rendering methods (<span class=
"NDLSystemFont">PreProcessPipeline</span>, <span class=
"NDLSystemFont">UpdatePipeline</span>, and so on).</p>

<p class="NDLRefMemberDescription">By overriding this method, it
is possible to create an optimized rendering path for a specific
shader or shader+geometry combination which doesn't do any work
which isn't necessary for that particular combination.</p>

<p class="NDLRefMemberDescription">Note: The implementation of this
method is also responsible for completing any mesh modifiers that
have work to do in the render phase.</p>

<p class="NDLRefMemberFunction">virtual bool Initialize()</p>

<p class="NDLRefMemberDescription">This function is provided to
allow a derived shader the chance to perform any additional
initialization required prior to its first use. The function is
called by the <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiMaterial.htm">NiMaterial</a></span>
prior to using the shader for an <a href=
"../../Reference/NiMesh/NiMesh.htm"><span class=
"NDLSystemFont">NiMesh</span></a> instance.</p>

<p class="NDLRefMemberFunction">virtual unsigned int
PreProcessPipeline(const <a href=
"../../Reference/NiMain/NiRenderCallContext.htm">NiRenderCallContext</a>&amp;
kRCC)</p>

<p class="NDLRefMemberDescription">If the shader has not been
initialized, this function will return <span class=
"NDLSystemFont">UINT_MAX</span>, indicating this fact. If the
<span class="NDLSystemFont">m_bUsesNiRenderState</span> flag is
<span class="NDLSystemFont">true</span>, <span class=
"NDLSystemFont"><a href=
"NiD3D10RenderStateManager.htm">NiD3D10RenderStateManager</a></span><span class="NDLSystemFont">
::</span><span class="NDLSystemFont">SetProperties</span> is
called with the supplied <span class=
"NDLSystemFont">pkState</span>. If any 'global' rendering states
are present, ie <span class=
"NDLSystemFont">m_spRenderStateGroup</span> is not <span class=
"NDLSystemFont">NULL</span>, then <span class=
"NDLSystemFont"><a href=
"NiD3D10RenderStateManager.htm">NiD3D10RenderStateManager</a></span><span class="NDLSystemFont">
::SetRenderStateGroup</span> is called to pass those states in to
the manager.</p>

<p class="NDLRefMemberFunction">virtual unsigned int
SetupRenderingPass(const <a href=
"../../Reference/NiMain/NiRenderCallContext.htm">NiRenderCallContext</a>&amp;
kRCC)</p>

<p class="NDLRefMemberDescription">Simply calls <span class=
"NDLSystemFont"><a href=
"NiD3D10Pass.htm">NiD3D10Pass</a>:</span><span class=
"NDLSystemFont">:SetupRenderingPass</span> on the <span class=
"NDLSystemFont">m_pkCurrentPass</span> pointer, returning the
result.</p>

<p class="NDLRefMemberFunction">virtual unsigned int
SetupTransformations(const <a href=
"../../Reference/NiMain/NiRenderCallContext.htm">NiRenderCallContext</a>&amp;
kRCC)</p>

<p class="NDLRefMemberDescription">If this is the first pass,
then <span class="NDLSystemFont"><a href=
"NiD3D10Renderer.htm">NiD3D10Renderer:</a>:SetModelTransform</span>
is called to store the currently rendered object's world
transform.</p>

<p class="NDLRefMemberFunction">virtual unsigned int
SetupShaderPrograms(const <a href=
"../../Reference/NiMain/NiRenderCallContext.htm">NiRenderCallContext</a>&amp;
kRCC)</p>

<p class="NDLRefMemberDescription">This function is responsible
for setting up the shader programs required for the pass, as well
as setting the shader constant buffers. The shader programs are
applied via a call to <span class="NDLSystemFont"><a href=
"NiD3D10Pass.htm">NiD3D10Pass</a>::ApplyShaderPrograms</span> on
the current pass pointer. Then, the 'global' constant buffers are
updated and set for each of the shader programs. Finally, the
pass is given the opportunity to set its own shader constant
buffers by calling <span class="NDLSystemFont"><a href=
"NiD3D10Pass.htm">NiD3D10Pass</a>::ApplyShaderConstants</span>.</p>

<p class="NDLRefMemberFunction">virtual unsigned int
PreRenderSubmesh(const <a href=
"../../Reference/NiMain/NiRenderCallContext.htm">NiRenderCallContext</a>&amp;
kRCC)</p>

<p class="NDLRefMemberDescription">Sets the index and vertex
streams, as well as the primitive topology and the <span class=
"NDLSystemFont">ID3D10InputLayout</span> (creating a new one if
necessary).</p>

<p class="NDLRefMemberFunction">virtual unsigned int
FirstPass()</p>

<p class="NDLRefMemberDescription">Sets the <span class=
"NDLSystemFont">m_uiCurrentPass</span> member to 0, and sets the
<span class="NDLSystemFont">m_pkCurrentPass</span> pointer to the
first pass in the <span class="NDLSystemFont">m_kPasses</span>
array. Returns the total number of passes required for the
effect.</p>

<p class="NDLRefMemberFunction">virtual unsigned int
NextPass()</p>

<p class="NDLRefMemberDescription">Calls <span class=
"NDLSystemFont">PostProcessRenderingPass</span> on the current
pass, then increments the <span class=
"NDLSystemFont">m_uiCurrentPass</span> member. If the current
pass is the last pass, the function will return 0 to indicate to
the renderer that all passes have been completed. Otherwise, the
<span class="NDLSystemFont">m_pkCurrentPass</span> pointer is set
to the correct pass (the next one to be rendered), and the
function returns the remaining passes in the effect.</p>

<p class="NDLRefMemberFunction">virtual bool
SetupGeometry(<a href=
"../../Reference/NiMain/NiRenderObject.htm">NiRenderObject</a>*
pkGeometry, <a href=
"../../Reference/NiMain/NiMaterialInstance.htm">NiMaterialInstance</a>*
pkMaterialInstance);</p>

<p class="NDLRefMemberDescription">This function is called by the
system whenever a shader is attached to a piece of geometry. It
allows for verification of the geometry as well as performing any
special processing the geometry may need to be usable with the
shader.</p>

<p class="NDLRefMemberFunction">void ResetSCMExtraData(<a href=
"../../Reference/NiMain/NiRenderObject.htm">NiRenderObject</a>*
pkGeometry)</p>

<p class="NDLRefMemberDescription">Resets the <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMain/NiSCMExtraData.htm">NiSCMExtraData</a></span>
object on the geometry if there is one. This function is called
by <span class="NDLSystemFont">SetupShaderPrograms</span> and
should only be called in a derived shader if it does not call the
<span class="NDLSystemFont">NiD3DShader</span> version of
<span class="NDLSystemFont">SetupShaderPrograms</span>.</p>

<p class="NDLRefMemberFunction">virtual void
DestroyRendererData()</p>

<p class="NDLRefMemberDescription">The function will cycle
through all passes, checking for shader programs. If they are
present, it calls the corresponding <span class=
"NDLSystemFont">DestroyRendererData</span> function on them.</p>

<p class="NDLRefMemberFunction">virtual void
RecreateRendererData()</p>

<p class="NDLRefMemberDescription">The function will cycle
through all passes, checking for shader programs. If they are
present, it calls the corresponding <span class=
"NDLSystemFont">RecreateRendererData</span> function on them.</p>

<p class="NDLRefMemberFunction">bool GetUsesNiRenderState()
const</p>

<p class="NDLRefMemberFunction">virtual void
SetUsesNiRenderState(bool bUses)</p>

<p class="NDLRefMemberDescription">Gets/sets the flag indicating
if the shader should update the render state using the Gamebryo
properties attached to the object during the <span class=
"NDLSystemFont">PreProcessPipeline</span> call.</p>

<p class="NDLRefMemberFunction">void GetBoneParameters(bool&amp;
bTransposeBones, unsigned int&amp; uiBoneMatrixRegisters,
bool&amp; bWorldSpaceBones)</p>

<p class="NDLRefMemberFunction">void SetBoneParameters(bool
bTransposeBones, unsigned int uiBoneMatrixRegisters, bool
bWorldSpaceBones)</p>

<p class="NDLRefMemberDescription">Gets and sets parameters
related to how the shader expects bone matrices to be packed. The
<span class="NDLSystemFont">bTransposeBones</span> controls
whether the bone matrices are transposed before packing them into
the vertex buffer, <span class=
"NDLSystemFont">uiBoneMatrixRegisters</span> indicates whether 3
or 4 rows will be needed for each matrix, and <span class=
"NDLSystemFont">bWorldSpaceBones</span> determines whether or not
the bone matrices are packed in world space or in skinned model
space.</p>

<p class="NDLRefHead1">Supported Static Member Functions</p>

<p class="NDLRefMemberFunction">static void
SetupSCMExtraData(NiD3DShader* pkD3DShader, <a href=
"../../Reference/NiMain/NiRenderObject.htm">NiRenderObject</a>*
pkGeometry)</p>

<p class="NDLRefMemberDescription">This static function sets up
an <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiSCMExtraData.htm">NiSCMExtraData</a></span>
instance on <span class="NDLSystemFont">pkGeometry</span> to
accelerate <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiExtraData.htm">NiExtraData</a></span>
lookups during rendering. It is called automatically by
<span class="NDLSystemFont">SetupGeometry</span>. Users should
only call this function if they remove and attach <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMain/NiExtraData.htm">NiExtraData</a></span>
objects to geometry objects during execution. This call recreates
the <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiSCMExtraData.htm">NiSCMExtraData</a></span>
object so that the program does not dereference dangling
<span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiExtraData.htm">NiExtraData</a></span>
pointers.</p>

<p class="NDLRefHead1">Supported Protected Functions</p>

<p>Derived <span class="NDLSystemFont">NiD3D10Shader</span>
objects can also make use of the following internal functions to
help construct a texture pipeline.</p>

<p class="NDLRefMemberFunction">static void
PackWorldParallelEffect(const <a href=
"../../Reference/NiMain/NiMatrix3.htm">NiMatrix3</a>&amp;
kWorldMat, const <a href=
"../../Reference/NiMain/NiPoint3.htm">NiPoint3</a>&amp;
kWorldTrans, <a href=
"../../Reference/NiDX9Renderer/NiD3DTextureStage.htm">NiD3DTextureStage</a>*
pkStage)</p>

<p class="NDLRefMemberFunction">static void
PackWorldPerspectiveEffect(const <a href=
"../../Reference/NiMain/NiMatrix3.htm">NiMatrix3</a>&amp;
kWorldMat, const <a href=
"../../Reference/NiMain/NiPoint3.htm">NiPoint3</a>&amp;
kWorldTrans, <a href=
"../../Reference/NiDX9Renderer/NiD3DTextureStage.htm">NiD3DTextureStage</a>*
pkStage)</p>

<p class="NDLRefMemberFunction">static void
PackWorldSphereEffect(const <a href=
"../../Reference/NiMain/NiMatrix3.htm">NiMatrix3</a>&amp;
kWorldMat, const <a href=
"../../Reference/NiMain/NiPoint3.htm">NiPoint3</a>&amp;
kWorldTrans, <a href=
"../../Reference/NiDX9Renderer/NiD3DTextureStage.htm">NiD3DTextureStage</a>*
pkStage)</p>

<p class="NDLRefMemberFunction">static void
PackCameraSphereEffect(const <a href=
"../../Reference/NiMain/NiMatrix3.htm">NiMatrix3</a>&amp;
kWorldMat, const <a href=
"../../Reference/NiMain/NiPoint3.htm">NiPoint3</a>&amp;
kWorldTrans, <a href=
"../../Reference/NiDX9Renderer/NiD3DTextureStage.htm">NiD3DTextureStage</a>*
pkStage)</p>

<p class="NDLRefMemberFunction">static void
PackSpecularCubeEffect(const <a href=
"../../Reference/NiMain/NiMatrix3.htm">NiMatrix3</a>&amp;
kWorldMat, const <a href=
"../../Reference/NiMain/NiPoint3.htm">NiPoint3</a>&amp;
kWorldTrans, <a href=
"../../Reference/NiDX9Renderer/NiD3DTextureStage.htm">NiD3DTextureStage</a>*
pkStage)</p>

<p class="NDLRefMemberFunction">static void
PackDiffuseCubeEffect(const <a href=
"../../Reference/NiMain/NiMatrix3.htm">NiMatrix3</a>&amp;
kWorldMat, const <a href=
"../../Reference/NiMain/NiPoint3.htm">NiPoint3</a>&amp;
kWorldTrans, <a href=
"../../Reference/NiDX9Renderer/NiD3DTextureStage.htm">NiD3DTextureStage</a>*
pkStage)</p>

<p class="NDLRefMemberDescription">These functions are used by
the system to determine the texture transformation matrix for
each particular projection method.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
