<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiD3D10RenderStateManager</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiD3D10RenderStateManager</p>

<p class="NDLRefParentage">: public <a href=
"../../Reference/NiSystem/NiMemObject.htm">NiMemObject</a></p>

<p class="NDLRefHeaderFile">
&lt;NiD3D10RenderStateManager.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiD3D10RenderStateManager</span>
handles the accumulation of individual render state changes and
the creation of D3D10 state objects. Refer to the discussion on
<a href=
"Render_State_Management_in_the_NiD3D10Renderer.htm">Render State
Management in the NiD3D10Renderer</a>.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">
NiD3D10RenderStateManager(ID3D10Device* pkDevice, <a href=
"NiD3D10DeviceState.htm">NiD3D10DeviceState</a>*
pkDeviceState)</p>

<p class="NDLRefMemberDescription">The constructor initializes a
new <span class="NDLSystemFont">NiD3D10RenderStateManager</span>
using the D3D10 device and the <a href=
"NiD3D10DeviceState.htm"><span class=
"NDLSystemFont">NiD3D10DeviceState</span></a>. An application
should never construct a new render state manager, but should
obtain a pointer to the <span class="NDLSystemFont"><a href=
"NiD3D10Renderer.htm">NiD3D10Renderer</a></span> object's
instance instead.</p>

<p class="NDLRefHead1">Static Member Functions</p>

<p class="NDLRefMemberFunction">static D3D10_BLEND
ConvertGbBlendToD3D10Blend(<a href=
"../../Reference/NiMain/NiAlphaProperty.htm#Alpha_Blending_Functions">
NiAlphaProperty::AlphaFunction</a> eFunction)</p>

<p class="NDLRefMemberDescription">Converts a Gamebryo <a href=
"../../Reference/NiMain/NiAlphaProperty.htm#Alpha_Blending_Functions">
<span class=
"NDLSystemFont">NiAlphaProperty::AlphaFunction</span></a> to a
D3D10 blend mode enumeration.</p>

<p class="NDLRefMemberFunction">static D3D10_COMPARISON_FUNC
ConvertGbStencilFuncToD3D10Comparison(<a href=
"../../Reference/NiMain/NiStencilProperty.htm#Test_Functions">NiStencilProperty::TestFunc</a>
eFunction)</p>

<p class="NDLRefMemberDescription">Converts a Gamebryo <a href=
"../../Reference/NiMain/NiStencilProperty.htm#Test_Functions"><span class="NDLSystemFont">
NiStencilProperty::TestFunc</span></a> to a D3D10 comparison
function enumeration.</p>

<p class="NDLRefMemberFunction">static D3D10_STENCIL_OP
ConvertGbStencilActionToD3D10StencilOp(<a href=
"../../Reference/NiMain/NiStencilProperty.htm#Actions">NiStencilProperty::Action</a>
eAction)</p>

<p class="NDLRefMemberDescription">Converts a Gamebryo <a href=
"../../Reference/NiMain/NiStencilProperty.htm#Actions"><span class="NDLSystemFont">
NiStencilProperty::Action</span></a> to a D3D10 stencil operation
enumeration.</p>

<p class="NDLRefMemberFunction">static D3D10_COMPARISON_FUNC
ConvertGbDepthFuncToD3D10Comparison(<a href=
"../../Reference/NiMain/NiZBufferProperty.htm">NiZBufferProperty::TestFunction</a>
eFunction)</p>

<p class="NDLRefMemberDescription">Converts a Gamebryo <a href=
"../../Reference/NiMain/NiZBufferProperty.htm"><span class=
"NDLSystemFont">NiZBufferProperty::TestFunction</span></a> to a
D3D10 comparison function enumeration.</p>

<p class="NDLRefMemberFunction">static D3D10_FILTER
ConvertGbFilterModeToD3D10Filter(<a href=
"../../Reference/NiMain/NiTexturingProperty.htm#Texture_Filter_Modes">
NiTexturingProperty::FilterMode</a> eFilterMode)</p>

<p class="NDLRefMemberDescription">Converts a Gamebryo <a href=
"../../Reference/NiMain/NiTexturingProperty.htm#Texture_Filter_Modes">
<span class=
"NDLSystemFont">NiTexturingProperty::FilterMode</span></a> to a
D3D10 filter mode enumeration.</p>

<p class="NDLRefMemberFunction">static bool
ConvertGbFilterModeToMipmapEnable(<a href=
"../../Reference/NiMain/NiTexturingProperty.htm#Texture_Filter_Modes">
NiTexturingProperty::FilterMode</a> eFilterMode)</p>

<p class="NDLRefMemberDescription">Converts a Gamebryo <a href=
"../../Reference/NiMain/NiTexturingProperty.htm#Texture_Filter_Modes">
<span class=
"NDLSystemFont">NiTexturingProperty::FilterMode</span></a> to a
Boolean indicating whether or not mipmapping should be
enabled.</p>

<p class="NDLRefMemberFunction">static D3D10_TEXTURE_ADDRESS_MODE
ConvertGbClampModeToD3D10AddressU(<a href=
"../../Reference/NiMain/NiTexturingProperty.htm#Texture_Clamping_Modes">
NiTexturingProperty::ClampMode</a> eClampMode)</p>

<p class="NDLRefMemberDescription">Converts a Gamebryo <a href=
"../../Reference/NiMain/NiTexturingProperty.htm#Texture_Clamping_Modes">
<span class=
"NDLSystemFont">NiTexturingProperty::ClampMode</span></a> to a
D3D10 texture address mode enumeration for the U parameter.</p>

<p class="NDLRefMemberFunction">static D3D10_TEXTURE_ADDRESS_MODE
ConvertGbClampModeToD3D10AddressV(<a href=
"../../Reference/NiMain/NiTexturingProperty.htm#Texture_Clamping_Modes">
NiTexturingProperty::ClampMode</a> eClampMode)</p>

<p class="NDLRefMemberDescription">Converts a Gamebryo <a href=
"../../Reference/NiMain/NiTexturingProperty.htm#Texture_Clamping_Modes">
<span class=
"NDLSystemFont">NiTexturingProperty::ClampMode</span></a> to a
D3D10 texture address mode enumeration for the V parameter.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">bool GetLeftRightSwap() const</p>

<p class="NDLRefMemberFunction">void SetLeftRightSwap(bool
bSwap)</p>

<p class="NDLRefMemberDescription">Gets and sets a flag that's
set in response to calls to <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiRenderer.htm">NiRenderer</a>::SetLeftRightSwap</span>.
The flag helps determine the value of the <span class=
"NDLSystemFont">FrontCounterClockwise</span> value of the depth
stencil state.</p>

<p class="NDLRefMemberFunction">bool SetProperties(const <a href=
"../../Reference/NiMain/NiPropertyState.htm">NiPropertyState</a>*
pkState)</p>

<p class="NDLRefMemberDescription">Update the accumulated render
states based on the properties in <span class=
"NDLSystemFont">pkState</span>. Only the <a href=
"../../Reference/NiMain/NiAlphaProperty.htm"><span class=
"NDLSystemFont">NiAlphaProperty</span></a>, <a href=
"../../Reference/NiMain/NiStencilProperty.htm"><span class=
"NDLSystemFont">NiStencilProperty</span></a>, <a href=
"../../Reference/NiMain/NiWireframeProperty.htm"><span class=
"NDLSystemFont">NiWireframeProperty</span></a>, and <a href=
"../../Reference/NiMain/NiZBufferProperty.htm"><span class=
"NDLSystemFont">NiZBufferProperty</span></a> properties are used
by the <span class=
"NDLSystemFont">NiD3D10RenderStateManager</span> to update render
state, though <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiTexturingProperty.htm">NiTexturingProperty</a></span>
settings can be applied by an <span class=
"NDLSystemFont"><a href="../../Reference/NiMain/NiShader.htm">NiShader</a></span>.</p>

<p class="NDLRefMemberFunction">bool SetAlphaProperty(const
<a href=
"../../Reference/NiMain/NiAlphaProperty.htm">NiAlphaProperty</a>*
pkNew)</p>

<p class="NDLRefMemberDescription">Update the accumulated render
states based on the provided <a href=
"../../Reference/NiMain/NiAlphaProperty.htm"><span class=
"NDLSystemFont">NiAlphaProperty</span></a>.</p>

<p class="NDLRefMemberFunction">bool SetStencilProperty(const
<a href=
"../../Reference/NiMain/NiStencilProperty.htm">NiStencilProperty</a>*
pkNew)</p>

<p class="NDLRefMemberDescription">Update the accumulated render
states based on the provided <a href=
"../../Reference/NiMain/NiStencilProperty.htm"><span class=
"NDLSystemFont">NiStencilProperty</span></a>.</p>

<p class="NDLRefMemberFunction">bool SetWireframeProperty(const
<a href=
"../../Reference/NiMain/NiWireframeProperty.htm">NiWireframeProperty</a>*
pkNew)</p>

<p class="NDLRefMemberDescription">Update the accumulated render
states based on the provided <a href=
"../../Reference/NiMain/NiWireframeProperty.htm"><span class=
"NDLSystemFont">NiWireframeProperty</span></a>.</p>

<p class="NDLRefMemberFunction">bool SetZBufferProperty(const
<a href=
"../../Reference/NiMain/NiZBufferProperty.htm">NiZBufferProperty</a>*
pkNew)</p>

<p class="NDLRefMemberDescription">Update the accumulated render
states based on the provided <a href=
"../../Reference/NiMain/NiZBufferProperty.htm"><span class=
"NDLSystemFont">NiZBufferProperty</span></a>.</p>

<p class="NDLRefMemberFunction">bool SetRenderStateGroup(const
<a href=
"NiD3D10RenderStateGroup.htm">NiD3D10RenderStateGroup</a>*
pkRSGroup)</p>

<p class="NDLRefMemberDescription">Update the accumulated render
states based on the provided <a href=
"NiD3D10RenderStateGroup.htm"><span class=
"NDLSystemFont">NiD3D10RenderStateGroup</span></a>.</p>

<p class="NDLRefMemberFunction">void SetBlendStateDesc(const
D3D10_BLEND_DESC&amp; kDesc, NiUInt32 uiValidFlags)</p>

<p class="NDLRefMemberDescription">Update the accumulated render
states based on the provided <span class=
"NDLSystemFont">D3D10_BLEND_DESC</span>. Only those elements of
the structure indicated by <span class=
"NDLSystemFont">uiValidFlags</span> will be added to the
accumulated render states. The possible flags are detailed
<a href=
"NiD3D10RenderStateManager.htm#BlendStateValidFlags">below</a>.</p>

<p class="NDLRefMemberFunction">void
GetBlendStateDesc(D3D10_BLEND_DESC&amp; kDesc) const</p>

<p class="NDLRefMemberDescription">Return the currently
accumulated <span class=
"NDLSystemFont">D3D10_BLEND_DESC</span>.</p>

<p class="NDLRefMemberFunction">void SetBlendFactor(const float
afBlendFactor[4])</p>

<p class="NDLRefMemberFunction">void GetBlendFactor(float
afBlendFactor[4]) const</p>

<p class="NDLRefMemberDescription">Get and set the current blend
factor.</p>

<p class="NDLRefMemberFunction">void SetSampleMask(NiUInt32
uiSampleMask)</p>

<p class="NDLRefMemberFunction">void GetSampleMask(NiUInt32&amp;
uiSampleMask) const</p>

<p class="NDLRefMemberDescription">Get and set the current sample
mask.</p>

<p class="NDLRefMemberFunction">void
SetDepthStencilStateDesc(const D3D10_DEPTH_STENCIL_DESC&amp;
kDesc, NiUInt32 uiValidFlags)</p>

<p class="NDLRefMemberDescription">Update the accumulated render
states based on the provided <span class=
"NDLSystemFont">D3D10_DEPTH_STENCIL_DESC</span>. Only those
elements of the structure indicated by <span class=
"NDLSystemFont">uiValidFlags</span> will be added to the
accumulated render states. The possible flags are detailed
<a href=
"NiD3D10RenderStateManager.htm#DepthStencilStateValidFlags">below.</a></p>

<p class="NDLRefMemberFunction">void
GetDepthStencilStateDesc(D3D10_DEPTH_STENCIL_DESC&amp; kDesc)
const</p>

<p class="NDLRefMemberDescription">Return the currently
accumulated <span class=
"NDLSystemFont">D3D10_DEPTH_STENCIL_DESC</span>.</p>

<p class="NDLRefMemberFunction">void SetStencilRef(NiUInt32
uiStencilRef)</p>

<p class="NDLRefMemberFunction">void GetStencilRef(NiUInt32&amp;
uiStencilRef) const</p>

<p class="NDLRefMemberDescription">Get and set the current
stencil ref.</p>

<p class="NDLRefMemberFunction">void SetRasterizerStateDesc(const
D3D10_RASTERIZER_DESC&amp; kDesc, NiUInt32 uiValidFlags)</p>

<p class="NDLRefMemberDescription">Update the accumulated render
states based on the provided <span class=
"NDLSystemFont">D3D10_RASTERIZER_DESC</span>. Only those elements
of the structure indicated by <span class=
"NDLSystemFont">uiValidFlags</span> will be added to the
accumulated render states. The possible flags are detailed
<a href=
"NiD3D10RenderStateManager.htm#RasterizerStateValidFlags">below</a>.</p>

<p class="NDLRefMemberFunction">void
GetRasterizerStateDesc(D3D10_RASTERIZER_DESC&amp; kDesc)
const</p>

<p class="NDLRefMemberDescription">Return the currently
accumulated <span class=
"NDLSystemFont">D3D10_RASTERIZER_DESC</span>.</p>

<p class="NDLRefMemberFunction">void SetSamplerDesc(<a href=
"../../Reference/NiMain/NiGPUProgram.htm#ProgramType">NiGPUProgram::ProgramType</a>
eType, NiUInt32 uiSampler, const D3D10_SAMPLER_DESC&amp; kDesc,
NiUInt32 uiValidFlags)</p>

<p class="NDLRefMemberDescription">Update the accumulated render
states for the sampler indicated by <span class=
"NDLSystemFont">eType</span> and <span class=
"NDLSystemFont">uiSampler</span> based on the provided
<span class="NDLSystemFont">D3D10_SAMPLER_DESC</span>. Only those
elements of the structure indicated by <span class=
"NDLSystemFont">uiValidFlags</span> will be added to the
accumulated render states. The possible flags are detailed
<a href=
"NiD3D10RenderStateManager.htm#SamplerValidFlags">below</a>.</p>

<p class="NDLRefMemberFunction">void GetSamplerDesc(<a href=
"../../Reference/NiMain/NiGPUProgram.htm#ProgramType">NiGPUProgram::ProgramType</a>
eType, NiUInt32 uiSampler, D3D10_SAMPLER_DESC&amp; kDesc)
const</p>

<p class="NDLRefMemberDescription">Return the currently
accumulated <span class="NDLSystemFont">D3D10_SAMPLER_DESC</span>
for the sampler indicated by <span class=
"NDLSystemFont">eType</span> and <span class=
"NDLSystemFont">uiSampler</span>.</p>

<p class="NDLRefMemberFunction">void ResetCurrentState()</p>

<p class="NDLRefMemberDescription">Remove all accumulated render
states and reset their values to the defaults.</p>

<p class="NDLRefMemberFunction">void
SetDefaultBlendStateDesc(const D3D10_BLEND_DESC&amp; kDesc)</p>

<p class="NDLRefMemberFunction">void
GetDefaultBlendStateDesc(D3D10_BLEND_DESC&amp; kDesc) const</p>

<p class="NDLRefMemberDescription">Get and set the default
<span class="NDLSystemFont">D3D10_BLEND_DESC</span> render
states.</p>

<p class="NDLRefMemberFunction">void SetDefaultBlendFactor(const
float afBlendFactor[4])</p>

<p class="NDLRefMemberFunction">void GetDefaultBlendFactor(float
afBlendFactor[4]) const</p>

<p class="NDLRefMemberDescription">Get and set the current blend
factor.</p>

<p class="NDLRefMemberFunction">void
SetDefaultSampleMask(NiUInt32 uiSampleMask)</p>

<p class="NDLRefMemberFunction">void
GetDefaultSampleMask(NiUInt32&amp; uiSampleMask) const</p>

<p class="NDLRefMemberDescription">Get and set the current sample
mask.</p>

<p class="NDLRefMemberFunction">void
SetDefaultDepthStencilStateDesc(const
D3D10_DEPTH_STENCIL_DESC&amp; kDesc)</p>

<p class="NDLRefMemberFunction">void
GetDefaultDepthStencilStateDesc(D3D10_DEPTH_STENCIL_DESC&amp;
kDesc) const</p>

<p class="NDLRefMemberDescription">Get and set the default
<span class="NDLSystemFont">D3D10_DEPTH_STENCIL_DESC</span>
render states.</p>

<p class="NDLRefMemberFunction">void
SetDefaultStencilRef(NiUInt32 uiStenciRef)</p>

<p class="NDLRefMemberFunction">void
GetDefaultStencilRef(NiUInt32&amp; uiStencilRef) const</p>

<p class="NDLRefMemberDescription">Get and set the current
stencil ref.</p>

<p class="NDLRefMemberFunction">void
SetDefaultRasterizerStateDesc(const D3D10_RASTERIZER_DESC&amp;
kDesc)</p>

<p class="NDLRefMemberFunction">void
GetDefaultRasterizerStateDesc(D3D10_RASTERIZER_DESC&amp; kDesc)
const</p>

<p class="NDLRefMemberDescription">Get and set the default
<span class="NDLSystemFont">D3D10_RASTERIZER_DESC</span> render
states.</p>

<p class="NDLRefMemberFunction">void
SetDefaultSamplerDesc(<a href=
"../../Reference/NiMain/NiGPUProgram.htm#ProgramType">NiGPUProgram::ProgramType</a>
eType, NiUInt32 uiSampler, const D3D10_SAMPLER_DESC&amp;
kDesc)</p>

<p class="NDLRefMemberFunction">void
GetDefaultSamplerDesc(<a href=
"../../Reference/NiMain/NiGPUProgram.htm#ProgramType">NiGPUProgram::ProgramType</a>
eType, NiUInt32 uiSampler, D3D10_SAMPLER_DESC&amp; kDesc)
const</p>

<p class="NDLRefMemberDescription">Get and set the default
<span class="NDLSystemFont">D3D10_SAMPLER_DESC</span> sampler
states for the sampler indicated by <span class=
"NDLSystemFont">eType</span> and <span class=
"NDLSystemFont">uiSampler</span>.</p>

<p class="NDLRefMemberFunction">void ApplyCurrentState(const
D3D10_STATE_BLOCK_MASK* pkMask = NULL)</p>

<p class="NDLRefMemberDescription">Create state objects from all
accumulated render states and set them on the device. The
<span class="NDLSystemFont">pkMask</span> parameter, if not NULL,
will be used to mask out which states to set.</p>

<p class="NDLRefMemberFunction">void ApplyCurrentBlendState()</p>

<p class="NDLRefMemberDescription">Create <span class=
"NDLSystemFont">ID3D10BlendState</span> state objects from the
appropriate accumulated render states and set it on the
device.</p>

<p class="NDLRefMemberFunction">void
ApplyCurrentDepthStencilState()</p>

<p class="NDLRefMemberDescription">Create <span class=
"NDLSystemFont">ID3D10DepthStencilState</span> state objects from
the appropriate accumulated render states and set it on the
device.</p>

<p class="NDLRefMemberFunction">void
ApplyCurrentRasterizerState()</p>

<p class="NDLRefMemberDescription">Create <span class=
"NDLSystemFont">ID3D10RasterizerState</span> state objects from
the appropriate accumulated render states and set it on the
device.</p>

<p class="NDLRefMemberFunction">void ApplyCurrentSamplers(const
D3D10_STATE_BLOCK_MASK* pkMask = NULL)</p>

<p class="NDLRefMemberDescription">Create <span class=
"NDLSystemFont">ID3D10Sampler</span> state objects from the
appropriate accumulated render states and set them on the device.
The <span class="NDLSystemFont">pkMask</span> parameter, if not
NULL, will be used to mask out which states to set.</p>

<p class="NDLRefMemberFunction">void
ApplyCurrentVertexSamplers(NiUInt32 uiSamplerStart = 0, NiUInt32
uiSamplerCount = D3D10_COMMONSHADER_SAMPLER_SLOT_COUNT)</p>

<p class="NDLRefMemberDescription">Create <span class=
"NDLSystemFont">ID3D10Sampler</span> state objects from the
accumulated vertex samplers indicated by <span class=
"NDLSystemFont">uiSamplerState</span> and <span class=
"NDLSystemFont">uiSamplerCount</span> and set them on the
device.</p>

<p class="NDLRefMemberFunction">void
ApplyCurrentGeometrySamplers(NiUInt32 uiSamplerStart = 0,
NiUInt32 uiSamplerCount =
D3D10_COMMONSHADER_SAMPLER_SLOT_COUNT)</p>

<p class="NDLRefMemberDescription">Create <span class=
"NDLSystemFont">ID3D10Sampler</span> state objects from the
accumulated geometry samplers indicated by <span class=
"NDLSystemFont">uiSamplerState</span> and <span class=
"NDLSystemFont">uiSamplerCount</span> and set them on the
device.</p>

<p class="NDLRefMemberFunction">void
ApplyCurrentPixelSamplers(NiUInt32 uiSamplerStart = 0, NiUInt32
uiSamplerCount = D3D10_COMMONSHADER_SAMPLER_SLOT_COUNT)</p>

<p class="NDLRefMemberDescription">Create <span class=
"NDLSystemFont">ID3D10Sampler</span> state objects from the
accumulated pixel samplers indicated by <span class=
"NDLSystemFont">uiSamplerState</span> and <span class=
"NDLSystemFont">uiSamplerCount</span> and set them on the
device.</p>

<p class="NDLRefMemberFunction">void
ApplyCurrentSamplers(<a href="../../Reference/NiMain/NiGPUProgram.htm#ProgramType">
NiGPUProgram::ProgramType</a> eType, NiUInt32 uiSamplerStart,
NiUInt32 uiSamplerCount)</p>

<p class="NDLRefMemberDescription">Create <span class=
"NDLSystemFont">ID3D10Sampler</span> state objects from the
accumulated samplers indicated by <span class=
"NDLSystemFont">eType</span>, <span class=
"NDLSystemFont">uiSamplerState</span>, and <span class=
"NDLSystemFont">uiSamplerCount</span> and set them on the
device.</p>

<p class="NDLRefHead1">Notes</p>

<p>The "Valid" enumerations are used by functions that take
render state descriptor structures. They indicate which members
of those structures should be accumulated into the current render
state.</p>

<a name="BlendStateValidFlags" id="BlendStateValidFlags"></a><p class="NDLRefHead2">BlendStateValidFlags Enumerations</p>

<!--(Table)=========================================================-->
<table>
    <thead>
        <tr>
            <th>Flag</th>

            <th>Structure Member to Accumulate</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><span class=
            "NDLSystemFont">BSVALID_ALPHATOCOVERAGEENABLE</span></td>

            <td><span class=
            "NDLSystemFont">AlphaToCoverageEnable</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">BSVALID_BLENDENABLE_0</span></td>

            <td><span class=
            "NDLSystemFont">BlendEnable[0]</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">BSVALID_BLENDENABLE_1</span></td>

            <td><span class=
            "NDLSystemFont">BlendEnable[1]</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">BSVALID_BLENDENABLE_2</span></td>

            <td><span class=
            "NDLSystemFont">BlendEnable[2]</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">BSVALID_BLENDENABLE_3</span></td>

            <td><span class=
            "NDLSystemFont">BlendEnable[3]</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">BSVALID_BLENDENABLE_4</span></td>

            <td><span class=
            "NDLSystemFont">BlendEnable[4]</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">BSVALID_BLENDENABLE_5</span></td>

            <td><span class=
            "NDLSystemFont">BlendEnable[5]</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">BSVALID_BLENDENABLE_6</span></td>

            <td><span class=
            "NDLSystemFont">BlendEnable[6]</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">BSVALID_BLENDENABLE_7</span></td>

            <td><span class=
            "NDLSystemFont">BlendEnable[7]</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">BSVALID_SRCBLEND</span></td>

            <td><span class="NDLSystemFont">SrcBlend</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">BSVALID_DESTBLEND</span></td>

            <td><span class="NDLSystemFont">DestBlend</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">BSVALID_BLENDOP</span></td>

            <td><span class="NDLSystemFont">BlendOp</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">BSVALID_SRCBLENDALPHA</span></td>

            <td><span class=
            "NDLSystemFont">SrcBlendAlpha</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">BSVALID_DESTBLENDALPHA</span></td>

            <td><span class=
            "NDLSystemFont">DestBlendAlpha</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">BSVALID_BLENDOPALPHA</span></td>

            <td><span class=
            "NDLSystemFont">BlendOpAlpha</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">BSVALID_RENDERTARGETWRITEMASK_0</span></td>

            <td><span class=
            "NDLSystemFont">RenderTargetWriteMask[0]</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">BSVALID_RENDERTARGETWRITEMASK_1</span></td>

            <td><span class=
            "NDLSystemFont">RenderTargetWriteMask[1]</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">BSVALID_RENDERTARGETWRITEMASK_2</span></td>

            <td><span class=
            "NDLSystemFont">RenderTargetWriteMask[2]</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">BSVALID_RENDERTARGETWRITEMASK_3</span></td>

            <td><span class=
            "NDLSystemFont">RenderTargetWriteMask[3]</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">BSVALID_RENDERTARGETWRITEMASK_4</span></td>

            <td><span class=
            "NDLSystemFont">RenderTargetWriteMask[4]</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">BSVALID_RENDERTARGETWRITEMASK_5</span></td>

            <td><span class=
            "NDLSystemFont">RenderTargetWriteMask[5]</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">BSVALID_RENDERTARGETWRITEMASK_6</span></td>

            <td><span class=
            "NDLSystemFont">RenderTargetWriteMask[6]</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">BSVALID_RENDERTARGETWRITEMASK_7</span></td>

            <td><span class=
            "NDLSystemFont">RenderTargetWriteMask[7]</span></td>
        </tr>
    </tbody>
</table>

<a name="DepthStencilStateValidFlags" id="DepthStencilStateValidFlags"></a><p class="NDLRefHead2">DepthStencilStateValidFlags
Enumerations</p>

<!--(Table)=========================================================-->
<table>
    <thead>
        <tr>
            <th>Flag</th>

            <th>Structure Member to Accumulate</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><span class=
            "NDLSystemFont">DSSVALID_DEPTHENABLE</span></td>

            <td><span class=
            "NDLSystemFont">DepthEnable</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">DSSVALID_DEPTHWRITEMASK</span></td>

            <td><span class=
            "NDLSystemFont">DepthWriteMask</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">DSSVALID_DEPTHFUNC</span></td>

            <td><span class="NDLSystemFont">DepthFunc</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">DSSVALID_STENCILENABLE</span></td>

            <td><span class=
            "NDLSystemFont">StencilEnable</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">DSSVALID_STENCILREADMASK</span></td>

            <td><span class=
            "NDLSystemFont">StencilReadMask</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">DSSVALID_STENCILWRITEMASK</span></td>

            <td><span class=
            "NDLSystemFont">StencilWriteMask</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">DSSVALID_FRONTFACE_STENCILFAILOP</span></td>

            <td><span class=
            "NDLSystemFont">FrontFace.StencilFailOp</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">DSSVALID_FRONTFACE_STENCILDEPTHFAILOP</span></td>

            <td><span class=
            "NDLSystemFont">FrontFace.StencilDepthFailOp</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">DSSVALID_FRONTFACE_STENCILPASSOP</span></td>

            <td><span class=
            "NDLSystemFont">FrontFace.StencilPassOp</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">DSSVALID_FRONTFACE_STENCILFUNC</span></td>

            <td><span class=
            "NDLSystemFont">FrontFace.StencilFunc</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">DSSVALID_BACKFACE_STENCILFAILOP</span></td>

            <td><span class=
            "NDLSystemFont">BackFace.StencilFailOp</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">DSSVALID_BACKFACE_STENCILDEPTHFAILOP</span></td>

            <td><span class=
            "NDLSystemFont">BackFace.StencilDepthFailOp</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">DSSVALID_BACKFACE_STENCILPASSOP</span></td>

            <td><span class=
            "NDLSystemFont">BackFace.StencilPassOp</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">DSSVALID_BACKFACE_STENCILFUNC</span></td>

            <td><span class=
            "NDLSystemFont">BackFace.StencilFunc</span></td>
        </tr>
    </tbody>
</table>

<a name="RasterizerStateValidFlags" id="RasterizerStateValidFlags"></a><p class="NDLRefHead2">RasterizerStateValidFlags Enumerations</p>

<!--(Table)=========================================================-->
<table>
    <thead>
        <tr>
            <th>Flag</th>

            <th>Structure Member to Accumulate</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><span class=
            "NDLSystemFont">RSVALID_FILLMODE</span></td>

            <td><span class="NDLSystemFont">FillMode</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">RSVALID_CULLMODE</span></td>

            <td><span class="NDLSystemFont">CullMode</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">RSVALID_FRONTCOUNTERCLOCKWISE</span></td>

            <td><span class=
            "NDLSystemFont">FrontCounterClockwise</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">RSVALID_DEPTHBIAS</span></td>

            <td><span class="NDLSystemFont">DepthBias</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">RSVALID_DEPTHBIASCLAMP</span></td>

            <td><span class=
            "NDLSystemFont">DepthBiasClamp</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">RSVALID_SLOPESCALEDDEPTHBIAS</span></td>

            <td><span class=
            "NDLSystemFont">SlopeScaledDepthBias</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">RSVALID_DEPTHCLIPENABLE</span></td>

            <td><span class=
            "NDLSystemFont">DepthClipEnable</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">RSVALID_SCISSORENABLE</span></td>

            <td><span class=
            "NDLSystemFont">ScissorEnable</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">RSVALID_MULTISAMPLEENABLE</span></td>

            <td><span class=
            "NDLSystemFont">MultisampleEnable</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">RSVALID_ANTIALIASEDLINEENABLE</span></td>

            <td><span class=
            "NDLSystemFont">AntialiasedLineEnable</span></td>
        </tr>
    </tbody>
</table>

<a name="SamplerValidFlags" id="SamplerValidFlags"></a><p class="NDLRefHead2">SamplerValidFlags Enumerations</p>

<!--(Table)=========================================================-->
<table>
    <thead>
        <tr>
            <th>Flag</th>

            <th>Structure Member to Accumulate</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><span class=
            "NDLSystemFont">SVALID_FILTER</span></td>

            <td><span class="NDLSystemFont">Filter</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SVALID_ADDRESSU</span></td>

            <td><span class="NDLSystemFont">AddressU</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SVALID_ADDRESSV</span></td>

            <td><span class="NDLSystemFont">AddressV</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SVALID_ADDRESSW</span></td>

            <td><span class="NDLSystemFont">AddressW</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SVALID_MIPLODBIAS</span></td>

            <td><span class=
            "NDLSystemFont">MipLODBias</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SVALID_MAXANISOTROPY</span></td>

            <td><span class=
            "NDLSystemFont">MaxAnisotropy</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SVALID_COMPARISONFUNC</span></td>

            <td><span class=
            "NDLSystemFont">ComparisonFunc</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SVALID_BORDERCOLOR</span></td>

            <td><span class=
            "NDLSystemFont">BorderColor</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SVALID_MINLOD</span></td>

            <td><span class="NDLSystemFont">MinLOD</span></td>
        </tr>

        <tr>
            <td><span class=
            "NDLSystemFont">SVALID_MAXLOD</span></td>

            <td><span class="NDLSystemFont">MaxLOD</span></td>
        </tr>
    </tbody>
</table>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
