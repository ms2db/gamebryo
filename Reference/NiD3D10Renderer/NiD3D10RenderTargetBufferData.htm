<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiD3D10RenderTargetBufferData</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiD3D10RenderTargetBufferData</p>

<p class="NDLRefParentage">: public <a href=
"NiD3D102DBufferData.htm">NiD3D102DBufferData</a></p>

<p class="NDLRefHeaderFile">&lt;NiD3D102DBufferData.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class=
"NDLSystemFont">NiD3D10RenderTargetBufferData</span> is a
Gamebryo class that represents a 2D buffer that can be used as a
render target. Gamebryo creates instances of this class
internally to represent rendered textures, but applications can
also create instances if they have an <span class=
"NDLSystemFont">ID3D10Texture2D</span> that they want to use as a
render target.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberDescription">This class contains no public
constructors the static <span class="NDLSystemFont">Create</span>
function below is used to create <span class=
"NDLSystemFont">NiD3D10RenderTargetBufferData</span> objects.</p>

<p class="NDLRefHead1">Static Member Functions</p>

<p class="NDLRefMemberFunction">static
NiD3D10RenderTargetBufferData* Create(ID3D10Texture2D*
pkD3DTexture, <a href=
"../../Reference/NiMain/Ni2DBuffer.htm">Ni2DBuffer</a>*&amp;
pkBuffer, D3D10_RENDER_TARGET_VIEW_DESC* pkRTViewDesc = NULL)</p>

<p class="NDLRefMemberDescription">Creates a new instance of an
<span class="NDLSystemFont">NiD3D10RenderTargetBufferData</span>
object. The <span class="NDLSystemFont">pkD3DTexture</span>
parameter should be the texture, which must have been created
with the <span class=
"NDLSystemFont">D3D10_BIND_RENDER_TARGET</span> bind flag, that
will be used as the render target buffer. The <span class=
"NDLSystemFont">pkBuffer</span> parameter will be the pointer
that holds the <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/Ni2DBuffer.htm">Ni2DBuffer</a></span>
object that references the <span class=
"NDLSystemFont">NiD3D10RenderTargetBufferData</span>. If
<span class="NDLSystemFont">pkBuffer</span> is not empty, then it
will be filled in with the newly created <span class=
"NDLSystemFont">NiDX9Direct3DBufferData</span> object, but if it
is empty, then when the function returns, <span class=
"NDLSystemFont">pkBuffer</span> will point to a new <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMain/Ni2DBuffer.htm">Ni2DBuffer</a></span>
object. This new object will need to be assigned to a smart
pointer to prevent it from getting leaked accidentally. The
optional <span class="NDLSystemFont">pkRTViewDesc</span>
parameter contains the render target view description that will
be passed into the <span class=
"NDLSystemFont">ID3D10Device::CreateRenderTargetView</span>
function - since NULL is a valid value for that function, it is
not necessary to provide a value for this parameter. This
function will add a reference to the passed-in <span class=
"NDLSystemFont">ID3D10Texture2D</span> object.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">ID3D10RenderTargetView*
GetRenderTargetView() const</p>

<p class="NDLRefMemberDescription">Returns the render target view
for this render target.</p>

<p class="NDLRefMemberFunction">ID3D10Texture2D*
GetRenderTargetBuffer() const</p>

<p class="NDLRefMemberDescription">Returns the texture for this
render target.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
