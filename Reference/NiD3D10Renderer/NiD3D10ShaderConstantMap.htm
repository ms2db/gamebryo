<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiD3D10ShaderConstantMap</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiD3D10ShaderConstantMap</p>

<p class="NDLRefParentage">: public <a href="../../Reference/NiMain/NiShaderConstantMap.htm">NiShaderConstantMap</a></p>

<p class="NDLRefHeaderFile">&lt;NiD3D10ShaderConstantMap.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiD3D10ShaderConstantMap</span> 
 is the base class for mapping values to shader constant buffers on the device.
 Each NiD3D10ShaderConstantMap manages one shader constant buffer. The constant 
 entries are stored in a set of arrays. There are NiRenderer::PHASE_COUNT arrays 
 in this set. This set of arrays is implemented in the class as the m_aspPhaseEntries 
 member. The entries are partitioned into sets to allow varying update frequency 
 per set. This feature is under development and currently provides no advantage.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiD3D10ShaderConstantMap(<a href="../../Reference/NiMain/NiGPUProgram.htm#ProgramType">NiGPUProgram::ProgramType</a> 
 eType)</p>

<p class="NDLRefMemberDescription">The default constructor creates an <span class="NDLSystemFont">NiD3D10ShaderConstantMap</span> instance 
 for the given shader program type, setting it to a known state. </p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">void SetName(const <a href="../../Reference/NiMain/NiFixedString.htm">NiFixedString</a>&amp; 
 kName)</p>

<p class="NDLRefMemberFunction">const <a href="../../Reference/NiMain/NiFixedString.htm">NiFixedString</a>&amp; 
 GetName() const</p>

<p class="NDLRefMemberDescription">Set and get the name for this constant 
 buffer.</p>

<p class="NDLRefMemberFunction">virtual <a href="../../Reference/NiMain/NiShaderError.htm">NiShaderError</a> 
 AddEntry(const char* pcKey, unsigned int uiFlags, unsigned int uiExtra, 
 unsigned int uiShaderRegister, unsigned int uiRegisterCount, const char* 
 pcVariableName = NULL, unsigned int uiDataSize = 0, unsigned int uiDataStride 
 = 0, const void* pvDataSource = NULL, bool bCopyData = false)</p>

<p class="NDLRefMemberDescription">Creates an <span class="NDLSystemFont"><a 
 href="../../Reference/NiMain/NiShaderConstantMapEntry.htm">NiShaderConstantMapEntry</a></span> 
 instance with the given parameters, and adds it to its list of entries. 
 If <span class="NDLSystemFont">pcVariableName</span> is <span class="NDLSystemFont">NULL</span>, 
 then the name passed into <span class="NDLSystemFont">pcKey</span> will 
 be used as the variable name.</p>

<p class="NDLRefMemberFunction">virtual <a href="../../Reference/NiMain/NiShaderError.htm">NiShaderError</a> 
 AddPredefinedEntry(const char* pcKey, unsigned int uiExtra, unsigned int 
 uiShaderRegister, const char* pcVariableName)</p>

<p class="NDLRefMemberDescription">Creates an <span class="NDLSystemFont"><a 
 href="../../Reference/NiMain/NiShaderConstantMapEntry.htm">NiShaderConstantMapEntry</a></span> 
 instance of the predefined value type with the given parameters, and adds 
 it to its list of entries.</p>

<p class="NDLRefMemberFunction">virtual <a href="../../Reference/NiMain/NiShaderError.htm">NiShaderError</a> 
 AddAttributeEntry(const char* pcKey, unsigned int uiFlags, unsigned int 
 uiExtra, unsigned int uiShaderRegister, unsigned int uiRegisterCount, 
 const char* pcVariableName, unsigned int uiDataSize, unsigned int uiDataStride, 
 const void* pvDataSource, bool bCopyData = true)</p>

<p class="NDLRefMemberDescription">Creates an <span class="NDLSystemFont"><a 
 href="../../Reference/NiMain/NiShaderConstantMapEntry.htm">NiShaderConstantMapEntry</a></span> 
 instance of the extra-data value type with the given parameters, and adds 
 it to its list of entries.</p>

<p class="NDLRefMemberFunction">virtual <a href="../../Reference/NiMain/NiShaderError.htm">NiShaderError</a> 
 AddConstantEntry(const char* pcKey, unsigned int uiFlags, unsigned int 
 uiExtra, unsigned int uiShaderRegister, unsigned int uiRegisterCount, 
 const char* pcVariableName, unsigned int uiDataSize, unsigned int uiDataStride, 
 const void* pvDataSource, bool bCopyData = true)</p>

<p class="NDLRefMemberDescription">Creates an <span class="NDLSystemFont"><a 
 href="../../Reference/NiMain/NiShaderConstantMapEntry.htm">NiShaderConstantMapEntry</a></span> 
 instance of the constant value type with the given parameters, and adds 
 it to its list of entries.</p>

<p class="NDLRefMemberFunction">virtual <a href="../../Reference/NiMain/NiShaderError.htm">NiShaderError</a> 
 AddGlobalEntry(const char* pcKey, unsigned int uiFlags, unsigned int uiExtra, 
 unsigned int uiShaderRegister, unsigned int uiRegisterCount, const char* 
 pcVariableName, unsigned int uiDataSize, unsigned int uiDataStride, void* 
 pvDataSource, bool bCopyData = false)</p>

<p class="NDLRefMemberDescription">Creates an <span class="NDLSystemFont"><a 
 href="../../Reference/NiMain/NiShaderConstantMapEntry.htm">NiShaderConstantMapEntry</a></span> 
 instance of the global value type with the given parameters, and adds 
 it to its list of entries. The function assumes the entry has been registered 
 with the shader factory via a call to <span class="NDLSystemFont"><a 
 href="../../Reference/NiMain/NiShaderFactory.htm">NiShaderFactory</a>::RegisterGlobalShaderConstant</span>.</p>

<p class="NDLRefMemberFunction">virtual <a href="../../Reference/NiMain/NiShaderError.htm">NiShaderError</a> 
 AddOperatorEntry(const char* pcKey, unsigned int uiFlags, unsigned int 
 uiExtra, unsigned int uiShaderRegister, unsigned int uiRegisterCount, 
 const char* pcVariableName)</p>

<p class="NDLRefMemberDescription">Creates an <span class="NDLSystemFont"><a 
 href="../../Reference/NiMain/NiShaderConstantMapEntry.htm">NiShaderConstantMapEntry</a></span> 
 instance of the operator value type with the given parameters, and adds 
 it to its list of entries. The function assumes the <span class="NDLSystemFont">uiExtra</span> 
 parameter has been setup properly to indicate the operator, and the two 
 entry indices to perform it on.</p>

<p class="NDLRefMemberFunction">virtual <a href="../../Reference/NiMain/NiShaderError.htm">NiShaderError</a> 
 AddObjectEntry(const char* pcKey, unsigned int uiShaderRegister, const 
 char* pcVariableName, unsigned int uiObjectIndex, NiShaderAttributeDesc::ObjectType 
 eObjectType, unsigned int uiCount)</p>

<p class="NDLRefMemberDescription">Creates an <span class="NDLSystemFont"><a 
 href="../../Reference/NiMain/NiShaderConstantMapEntry.htm">NiShaderConstantMapEntry</a></span> 
 instance of the object value type with the given parameters, and adds 
 it to its list of entries. </p>

<p class="NDLRefMemberFunction">virtual <a href="../../Reference/NiMain/NiShaderError.htm">NiShaderError</a> 
 RemoveEntry(const char* pcKey)</p>

<p class="NDLRefMemberDescription">Removes the entry of the given <span class="NDLSystemFont">pcKey</span>. 
 If it is not found, the function will return <span class="NDLSystemFont">NISHADERERR_ENTRYNOTFOUND</span>.</p>

<p class="NDLRefMemberFunction">virtual <a href="../../Reference/NiMain/NiShaderConstantMapEntry.htm">NiShaderConstantMapEntry</a>* 
 GetEntry(const char* pcKey)</p>

<p class="NDLRefMemberDescription">Retrieves the entry of the given <span class="NDLSystemFont">pcKey</span>. Returns <span class="NDLSystemFont">NULL</span> 
 if the entry is not found.</p>

<p class="NDLRefMemberFunction">virtual <a href="../../Reference/NiMain/NiShaderConstantMapEntry.htm">NiShaderConstantMapEntry</a>* 
 GetEntryAtIndex(unsigned int uiIndex)</p>

<p class="NDLRefMemberDescription">Returns the entry at the given index.</p>

<p class="NDLRefMemberFunction">unsigned int GetEntryCount()</p>

<p class="NDLRefMemberDescription">Gets the number of <span class="NDLSystemFont"><a 
 href="../../Reference/NiMain/NiShaderConstantMapEntry.htm">NiShaderConstantMapEntry</a></span> 
 instances held in the map.</p>

<p class="NDLRefMemberFunction"><a href="../../Reference/NiMain/NiShaderError.htm">NiShaderError</a> 
 UpdateShaderConstants(const <a href="../../Reference/NiMain/NiRenderCallContext.htm">NiRenderCallContext</a>&amp; 
 kRCC, bool bGlobal = false)</p>

<p class="NDLRefMemberDescription">Iterates over the entries, packing the 
 shader constant buffer using the values for each entry. If no shader constant 
 buffer has been generated yet for the shader constant map, one will be 
 generated automatically, but it will not necessarily match the layout 
 that the shader expects for the constant buffer. It is always safer to 
 use <span class="NDLSystemFont">LinkShaderConstantBuffer</span> to set up 
 the shader constant buffer before calling this function.</p>

<p class="NDLRefMemberFunction">bool LinkShaderConstantBuffer(ID3D10ShaderReflection* 
 pkShaderReflection)</p>

<p class="NDLRefMemberDescription">Calls <span class="NDLSystemFont">CreateShaderConstantData</span> 
 to creates a new <span class="NDLSystemFont"><a href="NiD3D10DataStream.htm">NiD3D10DataStream</a></span> 
 object if one does not exist. Then, it ensures that each <a href="../../Reference/NiMain/NiShaderConstantMapEntry.htm"><span 
 class="NDLSystemFont">NiShaderConstantMapEntry</span></a> knows where in 
 the shader constant buffer it will be writing to.</p>

<p class="NDLRefMemberFunction"><a HREF="NiD3D10DataStream.htm">NiD3D10DataStream</a>* 
 GetShaderConstantDataStream() const</p>

<p class="NDLRefMemberDescription">Returns the <span class="NDLSystemFont"><a 
 HREF="NiD3D10DataStream.htm">NiD3D10DataStream</a></span> object responsible 
 for the shader constant buffer for this shader constant map.</p>

<p class="NDLRefMemberFunction">NiUInt32 GetShaderConstantBufferIndex() const</p>

<p class="NDLRefMemberDescription">Returns the index that this shader constant 
 map will be uploaded to.</p>

<p class="NDLRefMemberFunction">bool CreateShaderConstantDataStream(ID3D10ShaderReflectionConstantBuffer* 
 pkBufferReflection = NULL, NiUInt32 uiBufferIndex = BUFFER_INDEX_UNASSIGNED)</p>

<p class="NDLRefMemberDescription">Creates a new <span class="NDLSystemFont"><a 
 href="NiD3D10DataStream.htm">NiD3D10DataStream</a></span> object to manage 
 the shader constant buffer, using the shader constant buffer's reflection. 
 The <span class="NDLSystemFont">uiBufferIndex</span> parameter contains 
 the index that this shader constant buffer is expected to use when it 
 is passed to the device.</p>

<p class="NDLRefMemberFunction">void ReleaseShaderConstantDataStream()</p>

<p class="NDLRefMemberDescription">Releases the <span class="NDLSystemFont"><a 
 href="NiD3D10DataStream.htm">NiD3D10DataStream</a></span> object responsible 
 for the shader constant buffer for this shader constant map.</p>

<p class="NDLRefMemberFunction">unsigned int GetPhaseIndex(NiRenderer::RenderingPhase ePhase)</p>

<p class="NDLRefMemberDescription">Converts a phase enumeration value 
 into an entry array phase index.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
