<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiD3D10ShaderInterface</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiD3D10ShaderInterface</p>

<p class="NDLRefParentage">: public <a href="../../Reference/NiMain/NiShader.htm">NiShader</a></p>

<p class="NDLRefHeaderFile">&lt;NiD3D10ShaderInterface.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiD3D10ShaderInterface</span> 
 implements the interface that the D3D10 renderers require a Gamebryo shader 
 to expose. It is a pure interface class, and the lowest level at which 
 an application can derive their own shaders from.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction"><span class="NDLSystemFont">NiD3D10ShaderInterface</span>()</p>

<p class="NDLRefMemberDescription">The constructor for the shader interface 
 simply initializes the member variables.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">virtual bool Initialize()</p>

<p class="NDLRefMemberDescription">This function will be called by the shader 
 factory when the shader is attached to geometry. The base implementation 
 does nothing, but derived shaders should use this function to load shader 
 programs and perform other required initialization steps.</p>

<p class="NDLRefMemberFunction">virtual void DestroyRendererData()</p>

<p class="NDLRefMemberDescription">This function is called when the renderer 
 data is being destroyed. The shader should release any data/objects that 
 are tied to the device at this point.</p>

<p class="NDLRefMemberFunction">virtual void RecreateRendererData()</p>

<p class="NDLRefMemberDescription">This function is called when the renderer 
 data is being reconstructed. The shader should recreate any data/objects 
 that are tied to the device at this point.</p>

<p class="NDLRefMemberFunction">virtual const D3D10_STATE_BLOCK_MASK* GetStateBlockMask( 
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->const 
 <a href="../../Reference/NiMain/NiRenderCallContext.htm">NiRenderCallContext</a>&amp; 
 kRCC) const</p>

<p class="NDLRefMemberDescription">Returns a mask indicating which render 
 states this shader will set.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
