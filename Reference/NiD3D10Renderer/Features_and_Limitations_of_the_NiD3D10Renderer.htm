<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Features and Limitations of the NiD3D10Renderer</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Features and Limitations of the NiD3D10Renderer</h1>

<p>The following topics describe the features and the limitations
of the D3D10 renderer:</p>

<a name="Alpha_Testing" id="Alpha_Testing"></a><h3>Alpha Testing</h3>

<p>The <span class="NDLSystemFont"><a href=
"NiD3D10Renderer.htm">NiD3D10Renderer</a></span> enables alpha
testing by performing the test in the pixel shader, because D3D10
does not natively support alpha testing. As a result, rendering
objects using alpha testing in D3D10 will not offer the same
performance advantages as on other platforms, and may actually
degrade performance over simple alpha blending.</p>


<a name="Antialiasing" id="Antialiasing"></a><h3>Antialiasing</h3>

<p>The <span class="NDLSystemFont"><a href=
"NiD3D10Renderer.htm">NiD3D10Renderer</a></span> supports
full-screen antialiasing via multisampled backbuffers. Specify a
valid multisample count and quality when creating the swap
buffer.</p>

<a name="Clipped_Projected_Textures" id="Clipped_Projected_Textures"></a><h3>Clipped Projected Textures</h3>

<p>The <span class="NDLSystemFont"><a href=
"NiD3D10Renderer.htm">NiD3D10Renderer</a></span> supports clipped
projected lights and shadows via the <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMain/NiStandardMaterial.htm">NiStandardMaterial</a></span>
pipeline. Please see the <a href=
"../../Programmer/Texturing/Introduction_to_Texturing.htm">Texturing</a>
documentation for details of this feature.</p>

<a name="Dynamic_and_Static_Geometry" id="Dynamic_and_Static_Geometry"></a><h3>Dynamic and Static Geometry</h3>

<p>The <span class="NDLSystemFont"><a href=
"NiD3D10Renderer.htm">NiD3D10Renderer</a></span> stores its
vertex data streams as D3D10 vertex buffers. Whenever the data
stream is modified, the vertex buffer for that object must be
uploaded to the video card. As a result, geometry that is not
morphed will be faster than geometry that is morphed each
frame.</p>

<a name="Hardware_Skinning" id="Hardware_Skinning"></a><h3>Hardware Skinning</h3>

<p>The <span class="NDLSystemFont"><a href=
"NiD3D10Renderer.htm">NiD3D10Renderer</a></span> supports
hardware-based skinning of 30 bones (matrices) per object
partition via the <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiStandardMaterial.htm">NiStandardMaterial</a></span>
pipeline. Skinned objects are partitioned by the artist tools
when they are exported with support for hardware skinning
enabled.</p>

<a name="Left_Right_Swapping" id="Left_Right_Swapping"></a><h3>Left-Right Swapping</h3>

<p>The <span class="NDLSystemFont"><a href=
"NiD3D10Renderer.htm">NiD3D10Renderer</a></span> supports the
ability to enable left-right viewport swapping for rear-view
mirrors, cube map face rendering, and other effects.</p>

<a name="Legacy_Rendering_Pipeline" id="Legacy_Rendering_Pipeline"></a><h3>Legacy Rendering Pipeline</h3>

<p>The <span class="NDLSystemFont"><a href=
"NiD3D10Renderer.htm">NiD3D10Renderer</a></span> does not support
Gamebryo's <a href=
"../../Programmer/NiMaterial/Gamebryo_Legacy_Pipeline.htm">legacy
rendering pipeline</a>.</p>

<a name="Multitexturing_Limitations" id="Multitexturing_Limitations"></a><h3>Multitexturing Limitations</h3>

<p>The <span class="NDLSystemFont"><a href=
"NiD3D10Renderer.htm">NiD3D10Renderer</a></span> supports 8
texture coordinate sets per vertex. Any additional texture
coordinate sets will be ignored.</p>

<a name="Source_Vertex_Color_Ranges" id="Source_Vertex_Color_Ranges"></a><h3>Source Vertex Color Ranges</h3>

<p>Applications that supply vertex colors as part of a model must
take care to ensure that the vertex colors are in the range
<span class="NDLSystemFont">[0.0, 1.0]</span>, as the
<span class="NDLSystemFont"><a href=
"NiD3D10Renderer.htm">NiD3D10Renderer</a></span> does not clamp
these values when they are packed to a UNORM format, as the
<span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiStandardMaterial.htm">NiStandardMaterial</a></span>
does. Values outside of this range will tend to "wrap", and will
not "saturate" the way some applications might expect. This is a
performance optimization, as applications that generate colors
that are out of range can simply clamp in the application code.
Lighting values outside of the above range may occur this is
fine. The restriction applies only to vertex colors specified in
engine-level geometry objects.</p>

<a name="Using_D3D10_Textures_with_Gamebryo" id="Using_D3D10_Textures_with_Gamebryo"></a><h3>Using D3D10 Textures with Gamebryo</h3>

<p>Gamebryo allows applications to provide their own D3D10
textures to Gamebryo and let the engine wrap the textures in
<span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiTexture.htm">NiTexture</a></span>
objects that allow the textures to be used on Gamebryo objects.
They can do this using the function <span class=
"NDLSystemFont"><a href=
"NiD3D10Renderer.htm">NiD3D10Renderer</a></span><span class=
"NDLSystemFont">::CreateNiTextureFromD3D10Texture</span>, which
takes an <span class="NDLSystemFont">ID3D10Resource*</span> that
contains the texture and an <span class=
"NDLSystemFont">ID3D10ShaderResourceView*</span> that contains
the resource view. The function returns an <span class=
"NDLSystemFont">NiTexturePtr</span> which can be attached to
<span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiTexturingProperty.htm">NiTexturingProperty</a></span>
objects and <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiTextureEffect.htm">NiTextureEffect</a></span>
objects, for use with an <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiShader.htm">NiShader</a></span>.</p>

<p>By providing their own D3D10 textures, applications can make
use of any texture that the hardware supports, even if Gamebryo
does not support it natively. Note that like <a href=
"../../Reference/NiMain/NiRenderedTexture.htm"><span class=
"NDLSystemFont">NiRenderedTexture</span></a> objects, any
<span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiTexture.htm">NiTexture</a></span>
objects created using this mechanism will not be correctly
streamed.</p>

<a name="Using_D3D10_Textures_as_Render_Targets_with_Gamebryo" id="Using_D3D10_Textures_as_Render_Targets_with_Gamebryo"></a><h3>Using D3D10 Textures as Render Targets with Gamebryo</h3>

<p>Gamebryo allows applications to provide their own D3D10
textures to Gamebryo and let the engine wrap the textures in
<span class="NDLSystemFont"><a href=
"../../Reference/NiMain/Ni2DBuffer.htm">Ni2DBuffer</a>::RendererData</span>
objects that allow the textures to be used as render targets.
They can do this by calling <span class="NDLSystemFont"><a href=
"NiD3D10RenderTargetBufferData.htm">NiD3D10RenderTargetBufferData</a>::Create</span>,
which takes an <span class=
"NDLSystemFont">ID3D10Texture2D*</span> that contains the
texture, a <span class=
"NDLSystemFont">D3D10_RENDER_TARGET_VIEW_DESC*</span> that
describes how to create the render target view, and an
<span class="NDLSystemFont">Ni2DBuffer*</span> to hold the
resulting renderer data object. The <span class=
"NDLSystemFont">Ni2DBuffer</span> can then be attached to
<span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiRenderTargetGroup.htm">NiRenderTargetGroup</a></span>
objects so it can be rendered to by Gamebryo.</p>

<p>By providing their own D3D10 textures, applications can make
use of any texture as that render target group the hardware
supports, even if Gamebryo does not support it natively.</p>

<p>In a similar mechanism, applications can call <span class=
"NDLSystemFont"><a href=
"NiD3D10DepthStencilBufferData.htm">NiD3D10DepthStencilBufferData</a>::Create</span>
to use a D3D10 texture as a depth/stencil buffer, or <span class=
"NDLSystemFont"><a href=
"NiD3D10SwapChainBufferData.htm">NiD3D10SwapChainBufferData</a>::Create</span>
to use an entire <span class=
"NDLSystemFont">IDXGISwapChain</span>.</p>

<a name="Vertex_Fogging" id="Vertex_Fogging"></a><h3>Vertex Fogging</h3>

<p>The <span class="NDLSystemFont"><a href=
"NiD3D10Renderer.htm">NiD3D10Renderer</a></span> supports the
ability to set the maximum fog value to a value other than full
fog. This is accomplished via the <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMain/NiRenderer.htm#Global_Fog_Settings_Functions">
NiRenderer</a>::SetMaxFogValue</span> function.</p>

<h3>Texture-related Features and Limitations</h3>

<p>These items are addressed <a href=
"Texture-Related_Features_and_Limitations_of_the_D3D10_Renderer.htm">
separately</a>.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
