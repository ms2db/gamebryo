<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiD3DShaderInterface</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiD3DShaderInterface</p>

<p class="NDLRefParentage">: public <a href=
"../../Reference/NiMain/NiShader.htm">NiShader</a></p>

<p class="NDLRefHeaderFile">&lt;NiD3DShaderInterface.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiD3DShaderInterface</span>
implements the interface that D3D-based renders require a
Gamebryo shader to expose. It is a pure interface class, and the
lowest level at which an application can derive their own shaders
from.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiD3DShaderInterface()</p>

<p class="NDLRefMemberDescription">The constructor for the shader
interface simply initializes the member variables for the
<span class="NDLSystemFont">D3DDevice</span>, <span class=
"NDLSystemFont">D3DRenderer</span>, and <span class=
"NDLSystemFont">D3DRenderState</span> to 0.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">virtual bool Initialize()</p>

<p class="NDLRefMemberDescription">This function will be called
by the shader factory when the shader is attached to geometry.
The base implementation does nothing, but derived shaders should
use this function to load shader programs and perform other
required initialization steps.</p>

<p class="NDLRefMemberFunction">virtual void
HandleLostDevice()</p>

<p class="NDLRefMemberDescription">The renderer calls this
function whenever it detects a lost device. The shader should
take whatever steps are necessary to prepare for a reset, such as
releasing any non-managed resources.</p>

<p class="NDLRefMemberFunction">virtual void
HandleResetDevice()</p>

<p class="NDLRefMemberDescription">The renderer calls this
function whenever it has successfully reset a lost device. The
shader should take whatever steps are necessary to recover from a
reset, such as recreating any non-managed resources.</p>

<p class="NDLRefMemberFunction">virtual void
DestroyRendererData()</p>

<p class="NDLRefMemberDescription">This function is called when
the renderer data is being destroyed. The shader should release
any data/objects that are tied to the device at this point.</p>

<p class="NDLRefMemberFunction">virtual void
RecreateRendererData()</p>

<p class="NDLRefMemberDescription">This function is called when
the renderer data is being reconstructed. The shader should
recreate any data/objects that are tied to the device at this
point.</p>

<p class="NDLRefMemberFunction">virtual bool
GetVSPresentAllPasses() const</p>

<p class="NDLRefMemberDescription">Returns true if all passes in
the shader are set up to use vertex shaders, and false
otherwise.</p>

<p class="NDLRefMemberFunction">virtual bool
GetVSPresentAnyPass() const</p>

<p class="NDLRefMemberDescription">Returns true if any pass in
the shader is set up to use a vertex shaders, and false
otherwise.</p>

<p class="NDLRefMemberFunction">virtual bool
GetPSPresentAllPasses() const</p>

<p class="NDLRefMemberDescription">Returns true if all passes in
the shader are set up to use pixel shaders, and false
otherwise.</p>

<p class="NDLRefMemberFunction">virtual bool
GetPSPresentAnyPass() const</p>

<p class="NDLRefMemberDescription">Returns true if any pass in
the shader is set up to use a pixel shaders, and false
otherwise.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
