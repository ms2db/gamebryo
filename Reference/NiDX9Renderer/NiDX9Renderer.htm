<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiDX9Renderer</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiDX9Renderer</p>

<p class="NDLRefParentage">: public <span><a href=
"../../Reference/NiMain/NiRenderer.htm">NiRenderer</a></span></p>

<p class="NDLRefHeaderFile">&lt;NiDX9Renderer.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>Note that only functions that are either not declared in the
<span class="NDLSystemFont">NiRenderer</span> base class or have
significant additions to the basic behavior are discussed below.
For details on the support of optional features whose functions
are declared in the <span class="NDLSystemFont">NiRenderer</span>
base class, see the <a href="Antialiasing_in_DX9.htm">DX9Renderer
Features and Limitations</a> documentation.</p>

<p class="NDLRefHead1">Constructors</p>

<p>This class contains no public constructors the static
<span class="NDLSystemFont">Create</span> function below is used
to create <span class="NDLSystemFont">NiDX9Renderer</span>s.</p>

<p class="NDLRefHead1">Static Member Functions</p>

<p class="NDLRefHead2">Renderer Creation</p>

<p class="NDLRefMemberFunction">static NiDX9Renderer*
Create(unsigned int uiWidth, unsigned int uiHeight,
unsigned int uiUseFlags, NiWindowRef kWndDevice,
NiWindowRef kWndFocus,
unsigned int uiAdapter = D3DADAPTER_DEFAULT,
DeviceDesc eDesc = DEVDESC_PURE,
FrameBufferFormat eFBFormat = FBFMT_UNKNOWN,
DepthStencilFormat eDSFormat = DSFMT_UNKNOWN,
PresentationInterval ePresentationInterval = PRESENT_INTERVAL_ONE,
SwapEffect eSwapEffect = SWAPEFFECT_DEFAULT, unsigned int
uiFBMode = FBMODE_DEFAULT, unsigned int uiBackBufferCount = 1,
unsigned int uiRefreshRate = REFRESHRATE_DEFAULT)</p>

<p class="NDLRefMemberDescription">This function is used by the
application to create an <span class=
"NDLSystemFont">NiDX9Renderer</span>. See the documentation on
<a href="Creation_of_a_DX9Renderer.htm">renderer creation</a> for
details and values of creation parameters.</p>

<p class="NDLRefMemberFunction">static void
AddDisplayFormat(D3DFORMAT eFormat)</p>

<p class="NDLRefMemberFunction">static void
RemoveDisplayFormat(D3DFORMAT eFormat)</p>

<p class="NDLRefMemberDescription">Add or remove a display format
for consideration when creating the device. Under DX9, a list of
all supported display formats is not provided, and the
application must specifically query for a display format to find
the resolutions allowed using that format. All backbuffer formats
supported by Direct3D are automatically considered when creating
a device: <span class="NDLSystemFont">D3DFMT_A1R5G5B5</span>,
<span class="NDLSystemFont">D3DFMT_A2R10G10B10</span>,
<span class="NDLSystemFont">D3DFMT_A8R8G8B8</span>, <span class=
"NDLSystemFont">D3DFMT_R5G6B5</span>, <span class=
"NDLSystemFont">D3DFMT_X1R5G5B5</span>, and <span class=
"NDLSystemFont">D3DFMT_X8R8G8B8</span>. There should be no need
for an application to add or remove any other formats.</p>

<p class="NDLRefMemberDescription">These functions do not operate
under <a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>.</p>

<p class="NDLRefHead2">Direct3D Access and Description</p>

<p class="NDLRefMemberFunction">static LPDIRECT3D9
GetDirect3D()</p>

<p class="NDLRefMemberDescription">Returns a pointer to the
<span class="NDLSystemFont">IDirect3D9</span> interface.</p>

<p class="NDLRefMemberDescription">This function does not operate
under <a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>.</p>

<p class="NDLRefMemberFunction">static <a href=
"NiDX9SystemDesc.htm"><span class=
"NDLSystemFont">NiDX9SystemDesc</span></a>* GetSystemDesc()</p>

<p class="NDLRefMemberDescription">Returns the Gamebryo DX9
system descriptor for the devices attached to the system. See the
documentation for <a href="NiDX9SystemDesc.htm"><span class=
"NDLSystemFont">NiDX9SystemDesc</span></a> for details of the use
of this device.</p>

<p class="NDLRefMemberDescription">This function does not operate
under <a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>.</p>

<p class="NDLRefHead2">Streaming Assistance</p>

<p class="NDLRefMemberFunction">static void
PrepareForStreaming(<a href=
"../../Reference/NiMain/NiObjectNET.htm">NiObjectNET</a>*
pkRoot)</p>

<p class="NDLRefMemberDescription">When an <span class=
"NDLSystemFont"><a href=
"NiD3DShader.htm">NiD3DShader</a></span>-derived object is
attached to an <span class="NDLSystemFont"><a href=
"../../Reference/NiMesh/NiMesh.htm">NiMesh</a></span>, it may
attach elements, such as an <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiShaderTimeController.htm">NiShaderTimeController</a></span>,
to the scene graph that prevent the scene graph from being
streamed out correctly. This function will walk the scene graph
and remove all these elements to ensure that streaming will be
successful.</p>

<p class="NDLRefMemberDescription">This function does not operate
under <a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>.</p>

<p class="NDLRefMemberFunction">static void
RestoreAfterStreaming()</p>

<p class="NDLRefMemberDescription">This function restores a scene
graph that has had <span class=
"NDLSystemFont">PrepareForStreaming</span> called on it, so it
can once again be rendered correctly.</p>

<p class="NDLRefMemberDescription">This function does not operate
under <a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>.</p>

<p class="NDLRefHead2">Gamebryo/D3D Conversions</p>

<p class="NDLRefMemberFunction">static unsigned char
GetD3DFormatSize(D3DFORMAT eFormat)</p>

<p class="NDLRefMemberDescription">Returns the size of the
requested surface format, in bits.</p>

<p class="NDLRefMemberDescription">This function does not operate
under <a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>.</p>

<p class="NDLRefMemberFunction">static D3DFORMAT
GetD3DFormat(FrameBufferFormat eFBFormat)</p>

<p class="NDLRefMemberDescription">Returns the <span class=
"NDLSystemFont">D3DFORMAT</span> that corresponds to the
<span class="NDLSystemFont">FrameBufferFormat</span>.</p>

<p class="NDLRefMemberDescription">This function does not operate
under <a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>.</p>

<p class="NDLRefMemberFunction">static D3DFORMAT
GetCompatibleAdapterFormat(FrameBufferFormat eFBFormat)</p>

<p class="NDLRefMemberDescription">Returns the <span class=
"NDLSystemFont">D3DFORMAT</span> that corresponds to the
<span class="NDLSystemFont">FrameBufferFormat</span> and is a
valid adapter format.</p>

<p class="NDLRefMemberDescription">This function does not operate
under <a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>.</p>

<p class="NDLRefMemberFunction">static FrameBufferFormat
GetNiFBFormat(D3DFORMAT eFormat)</p>

<p class="NDLRefMemberDescription">Returns the <span class=
"NDLSystemFont">FrameBufferFormat</span> that corresponds to the
<span class="NDLSystemFont">D3DFORMAT</span>.</p>

<p class="NDLRefMemberDescription">This function does not operate
under <a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>.</p>

<p class="NDLRefMemberFunction">static D3DFORMAT
GetD3DFormat(DepthStencilFormat eDSFormat)</p>

<p class="NDLRefMemberDescription">Returns the <span class=
"NDLSystemFont">D3DFORMAT</span> that corresponds to the
<span class="NDLSystemFont">DepthStencilFormat</span>.</p>

<p class="NDLRefMemberDescription">This function does not operate
under <a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>.</p>

<p class="NDLRefMemberFunction">static DepthStencilFormat
GetNiDSFormat(D3DFORMAT eFormat)</p>

<p class="NDLRefMemberDescription">Returns the <span class=
"NDLSystemFont">DepthStencilFormat</span> that corresponds to the
<span class="NDLSystemFont">D3DFORMAT</span>.</p>

<p class="NDLRefMemberDescription">This function does not operate
under <a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>.</p>

<p class="NDLRefMemberFunction">static D3DMULTISAMPLE_TYPE
GetMultiSampleType(unsigned int uiMode)</p>

<p class="NDLRefMemberDescription">Returns the <span class=
"NDLSystemFont">D3DMULTISAMPLE_TYPE</span> that corresponds to
the Gamebryo multisample mode that is passed in.</p>

<p class="NDLRefMemberDescription">This function does not operate
under <a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>.</p>

<p class="NDLRefMemberFunction">static unsigned int
GetMultiSampleQuality(unsigned int uiMode)</p>

<p class="NDLRefMemberDescription">Returns the multisample
quality level that corresponds to the Gamebryo multisample mode
that is passed in.</p>

<p class="NDLRefMemberDescription">This function does not operate
under <a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>.</p>

<p class="NDLRefMemberFunction">static D3DSWAPEFFECT
GetSwapEffect(SwapEffect eMode, unsigned int uiFBMode, unsigned
int uiUseFlags)</p>

<p class="NDLRefMemberDescription">Returns the <span class=
"NDLSystemFont">D3DSWAPEFFECT</span> that corresponds to the
Gamebryo <span class="NDLSystemFont">SwapEffect</span>, frame
buffer mode, and use flags that are passed in.</p>

<p class="NDLRefMemberDescription">This function does not operate
under <a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>.</p>

<p class="NDLRefMemberFunction">static unsigned int
GetRefreshRate(unsigned int uiRefreshRateHz)</p>

<p class="NDLRefMemberDescription">Returns the D3D refresh rate
enumeration that corresponds to the Gamebryo refresh rate that is
passed in.</p>

<p class="NDLRefMemberDescription">This function does not operate
under <a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>.</p>

<p class="NDLRefMemberFunction">static unsigned int
GetPresentInterval(PresentationInterval
ePresentationInterval)</p>

<p class="NDLRefMemberDescription">Returns the D3D present
interval enumeration that corresponds to the Gamebryo
presentation interval rate that is passed in.</p>

<p class="NDLRefMemberDescription">This function does not operate
under <a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>.</p>

<p class="NDLRefMemberFunction">static bool
GetDX9PrimitiveFromNiMeshPrimitiveType(<a href=
"../../Reference/NiMain/NiPrimitiveType.htm">NiPrimitiveType::Type</a>
eMeshPrimType, D3DPRIMITIVETYPE&amp; eOutputD3DPrimitiveType)</p>

<p class="NDLRefMemberDescription">Maps the Gamebryo primitive
type <span class="NDLSystemFont">eMeshPrimType</span> to D3D and
stores the result in <span class=
"NDLSystemFont">eOutputD3DPrimitiveType</span>. Returns true if
and only if this mapping was successful.</p>

<p class="NDLRefMemberDescription">This function does not operate
under <a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>.</p>

<p class="NDLRefHead2">Renderer Access</p>

<p class="NDLRefMemberFunction">static NiDX9Renderer*
GetRenderer()</p>

<p class="NDLRefMemberDescription">Returns the <span class=
"NDLSystemFont">NiDX9Renderer</span>, if one exists. If the
current renderer is not an <span class=
"NDLSystemFont">NiDX9Renderer</span>, the function returns
NULL.</p>

<p class="NDLRefMemberDescription">This function does not operate
under <a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefHead2">Device Reset Callbacks and Notification
Functions</p>

<p class="NDLRefMemberFunction">unsigned int
AddResetNotificationFunc(<span class="NDLSystemFont"><a href=
"#RESETNOTIFYFUNC">RESETNOTIFYFUNC</a></span> pfnNotify, void*
pvData)</p>

<p class="NDLRefMemberDescription">Registers a <span class=
"NDLSystemFont"><a href=
"#RESETNOTIFYFUNC">RESETNOTIFYFUNC</a></span> pointer, along with
an optional data pointer. The renderer will automatically call
the provided function pointer both before and after it resets the
D3D device, and will pass along the <span class=
"NDLSystemFont">pvData</span> pointer that is provided. In the
callback function, the application can perform any necessary
maintenance or initialization, including releasing and recreating
resources and re-rendering rendered textures, that is required in
anticipation of or in response to a device reset. <span class=
"NDLSystemFont">AddResetNotificationFunc</span> returns an index
that indicates the order in which the function will be called,
relative to any other registered callbacks, before and after the
device is reset.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_DX9Renderer.htm">discussion</a> on restricted
thread behavior in the DX9 renderer for more information.</p>

<p class="NDLRefMemberFunction">bool
RemoveResetNotificationFunc(<span class="NDLSystemFont"><a href=
"#RESETNOTIFYFUNC">RESETNOTIFYFUNC</a></span> pfnNotify)</p>

<p class="NDLRefMemberDescription">Removes the indicated callback
function from the list of registered functions to be called
before and after a device reset. If the callback function was not
found among the list of registered functions, <span class=
"NDLSystemFont">RemoveResetNotificationFunc</span> will return
<span class="NDLSystemFont">false</span>.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_DX9Renderer.htm">discussion</a> on restricted
thread behavior in the DX9 renderer for more information.</p>

<p class="NDLRefMemberFunction">bool
RemoveResetNotificationFunc(unsigned int uiIndex)</p>

<p class="NDLRefMemberDescription">Removes the callback function
with the indicated index from the list of registered functions to
be called before and after a device reset. If no callback
function with the index was not found among the list of
registered functions, <span class=
"NDLSystemFont">RemoveResetNotificationFunc</span> will return
<span class="NDLSystemFont">false</span>.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_DX9Renderer.htm">discussion</a> on restricted
thread behavior in the DX9 renderer for more information.</p>

<p class="NDLRefMemberFunction">void
RemoveAllResetNotificationFuncs()</p>

<p class="NDLRefMemberDescription">Removes all the callback
functions from the list of registered functions to be called
before and after a device reset.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_DX9Renderer.htm">discussion</a> on restricted
thread behavior in the DX9 renderer for more information.</p>

<p class="NDLRefMemberFunction">bool
ChangeResetNotificationFuncData(<span class=
"NDLSystemFont"><a href=
"#RESETNOTIFYFUNC">RESETNOTIFYFUNC</a></span> pfnNotify, void*
pvData)</p>

<p class="NDLRefMemberDescription">Changes the pointer that will
be passed in as one of the parameters to the <span class=
"NDLSystemFont">pfnNotify</span> callback function when the
renderer calls it. If the callback function was not found among
the list of registered functions, <span class=
"NDLSystemFont">ChangeResetNotificationFuncData</span> will
return <span class="NDLSystemFont">false</span>.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_DX9Renderer.htm">discussion</a> on restricted
thread behavior in the DX9 renderer for more information.</p>

<p class="NDLRefMemberFunction">bool
ChangeResetNotificationFuncData(unsigned int uiIndex, void*
pvData)</p>

<p class="NDLRefMemberDescription">Changes the pointer that will
be passed in as one of the parameters to the callback function
with the index <span class="NDLSystemFont">uiIndex</span> when
the renderer calls it. If the callback function was not found
among the list of registered functions, <span class=
"NDLSystemFont">ChangeResetNotificationFuncData</span> will
return <span class="NDLSystemFont">false</span>.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_DX9Renderer.htm">discussion</a> on restricted
thread behavior in the DX9 renderer for more information.</p>

<p class="NDLRefMemberFunction">unsigned int
GetResetNotificationFuncCount() const</p>

<p class="NDLRefMemberDescription">Returns the number of callback
functions that have been registered with the renderer to be
called before and after the device is reset.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_DX9Renderer.htm">discussion</a> on restricted
thread behavior in the DX9 renderer for more information.</p>

<p class="NDLRefMemberFunction">unsigned int
GetResetNotificationFuncArrayCount() const</p>

<p class="NDLRefMemberDescription">Returns the size of the
<span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiTArray.htm">NiTArray</a></span> used to
store the callback functions that have been registered with the
renderer to be called before and after the device is reset.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_DX9Renderer.htm">discussion</a> on restricted
thread behavior in the DX9 renderer for more information.</p>

<p class="NDLRefMemberFunction">unsigned int
FindResetNotificationFunc(<span class="NDLSystemFont"><a href=
"#RESETNOTIFYFUNC">RESETNOTIFYFUNC</a></span> pfnNotify)</p>

<p class="NDLRefMemberDescription">Returns the index of the
<span class="NDLSystemFont">pfnNotify</span> callback function.
If the callback function was not found among the list of
registered functions, <span class=
"NDLSystemFont">FindResetNotificationFunc</span> will return
<span class="NDLSystemFont">UINT_MAX</span>.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_DX9Renderer.htm">discussion</a> on restricted
thread behavior in the DX9 renderer for more information.</p>

<p class="NDLRefMemberFunction"><span class=
"NDLSystemFont"><a href=
"#RESETNOTIFYFUNC">RESETNOTIFYFUNC</a></span>
GetResetNotificationFunc(unsigned int uiIndex)</p>

<p class="NDLRefMemberDescription">Returns the callback function
whose index is <span class="NDLSystemFont">uiIndex</span>. If no
such callback function was not found, <span class=
"NDLSystemFont">GetResetNotificationFunc</span> will return
<span class="NDLSystemFont">NULL</span>.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_DX9Renderer.htm">discussion</a> on restricted
thread behavior in the DX9 renderer for more information.</p>

<p class="NDLRefMemberFunction">unsigned int
AddLostDeviceNotificationFunc(<span class=
"NDLSystemFont"><a href="#LOSTDEVICENOTIFYFUNC">LOSTDEVICENOTIFYFUNC</a></span>
pfnNotify, void* pvData)</p>

<p class="NDLRefMemberDescription">Registers a <span class=
"NDLSystemFont"><a href=
"#LOSTDEVICENOTIFYFUNC">LOSTDEVICENOTIFYFUNC</a></span> pointer,
along with an optional data pointer. The renderer will
automatically call the provided function pointer as soon as it
realizes that the D3D device is lost, and will pass along the
<span class="NDLSystemFont">pvData</span> pointer that is
provided. In the callback function, the application can perform
any necessary functionality that it deems necessary in response
to the lost device. <span class=
"NDLSystemFont">AddLostDeviceNotificationFunc</span> returns an
index that indicates the order in which the function will be
called, relative to any other registered callbacks, when the
device is lost.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_DX9Renderer.htm">discussion</a> on restricted
thread behavior in the DX9 renderer for more information.</p>

<p class="NDLRefMemberFunction">bool
RemoveLostDeviceNotificationFunc(<span class=
"NDLSystemFont"><a href=
"#LOSTDEVICENOTIFYFUNC">LOSTDEVICENOTIFYFUNC</a></span>
pfnNotify)</p>

<p class="NDLRefMemberDescription">Removes the indicated callback
function from the list of registered functions to be called when
the device is lost. If the callback function was not found among
the list of registered functions, <span class=
"NDLSystemFont">RemoveLostDeviceNotificationFunc</span> will
return <span class="NDLSystemFont">false</span>.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_DX9Renderer.htm">discussion</a> on restricted
thread behavior in the DX9 renderer for more information.</p>

<p class="NDLRefMemberFunction">bool
RemoveLostDeviceNotificationFunc(unsigned int uiIndex)</p>

<p class="NDLRefMemberDescription">Removes the callback function
with the indicated index from the list of registered functions to
be called when the device is lost. If no callback function with
the index was not found among the list of registered functions,
<span class=
"NDLSystemFont">RemoveLostDeviceNotificationFunc</span> will
return <span class="NDLSystemFont">false</span>.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_DX9Renderer.htm">discussion</a> on restricted
thread behavior in the DX9 renderer for more information.</p>

<p class="NDLRefMemberFunction">void
RemoveAllLostDeviceNotificationFuncs()</p>

<p class="NDLRefMemberDescription">Removes all the callback
functions from the list of registered functions to be called when
the device is lost.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_DX9Renderer.htm">discussion</a> on restricted
thread behavior in the DX9 renderer for more information.</p>

<p class="NDLRefMemberFunction">bool
ChangeLostDeviceNotificationFuncData(<span class=
"NDLSystemFont"><a href=
"#LOSTDEVICENOTIFYFUNC">LOSTDEVICENOTIFYFUNC</a></span>
pfnNotify, void* pvData)</p>

<p class="NDLRefMemberDescription">Changes the pointer that will
be passed in as one of the parameters to the <span class=
"NDLSystemFont">pfnNotify</span> callback function when the
renderer calls it. If the callback function was not found among
the list of registered functions, <span class=
"NDLSystemFont">ChangeLostDeviceNotificationFuncData</span> will
return <span class="NDLSystemFont">false</span>.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_DX9Renderer.htm">discussion</a> on restricted
thread behavior in the DX9 renderer for more information.</p>

<p class="NDLRefMemberFunction">bool
ChangeLostDeviceNotificationFuncData(unsigned int uiIndex, void*
pvData)</p>

<p class="NDLRefMemberDescription">Changes the pointer that will
be passed in as one of the parameters to the callback function
with the index <span class="NDLSystemFont">uiIndex</span> when
the renderer calls it. If the callback function was not found
among the list of registered functions, <span class=
"NDLSystemFont">ChangeLostDeviceNotificationFuncData</span> will
return <span class="NDLSystemFont">false</span>.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_DX9Renderer.htm">discussion</a> on restricted
thread behavior in the DX9 renderer for more information.</p>

<p class="NDLRefMemberFunction">unsigned int
GetLostDeviceNotificationFuncCount() const</p>

<p class="NDLRefMemberDescription">Returns the number of callback
functions that have been registered with the renderer to be
called when the device is lost.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_DX9Renderer.htm">discussion</a> on restricted
thread behavior in the DX9 renderer for more information.</p>

<p class="NDLRefMemberFunction">unsigned int
GetLostDeviceNotificationFuncArrayCount() const</p>

<p class="NDLRefMemberDescription">Returns the size of the
<span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiTArray.htm">NiTArray</a></span> used to
store the callback functions that have been registered with the
renderer to be called when the device is lost.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_DX9Renderer.htm">discussion</a> on restricted
thread behavior in the DX9 renderer for more information.</p>

<p class="NDLRefMemberFunction">unsigned int
FindLostDeviceNotificationFunc(<span class=
"NDLSystemFont"><a href=
"#LOSTDEVICENOTIFYFUNC">LOSTDEVICENOTIFYFUNC</a></span>
pfnNotify)</p>

<p class="NDLRefMemberDescription">Returns the index of the
<span class="NDLSystemFont">pfnNotify</span> callback function.
If the callback function was not found among the list of
registered functions, <span class=
"NDLSystemFont">FindLostDeviceNotificationFunc</span> will return
<span class="NDLSystemFont">UINT_MAX</span>.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_DX9Renderer.htm">discussion</a> on restricted
thread behavior in the DX9 renderer for more information.</p>

<p class="NDLRefMemberFunction"><span class=
"NDLSystemFont"><a href=
"#LOSTDEVICENOTIFYFUNC">LOSTDEVICENOTIFYFUNC</a></span>
GetLostDeviceNotificationFunc(unsigned int uiIndex)</p>

<p class="NDLRefMemberDescription">Returns the callback function
whose index is <span class="NDLSystemFont">uiIndex</span>. If no
such callback function was not found, <span class=
"NDLSystemFont">GetLostDeviceNotificationFunc</span> will return
<span class="NDLSystemFont">NULL</span>.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_DX9Renderer.htm">discussion</a> on restricted
thread behavior in the DX9 renderer for more information.</p>

<p class="NDLRefMemberFunction">unsigned int GetResetCounter()
const</p>

<p class="NDLRefMemberDescription">Returns a value indicating how
many times <span class="NDLSystemFont">Reset</span> has been
called on the device. Polling this function occasionally and
checking to see if the value has changed is a simple method of
detecting a reset from a lost device.</p>

<p class="NDLRefMemberDescription">This function does not operate
under <a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>.</p>

<p class="NDLRefMemberFunction">bool IsDeviceLost() const</p>

<p class="NDLRefMemberDescription">Returns whether or not the
device is currently lost.</p>

<p class="NDLRefMemberDescription">This function does not operate
under <a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>.</p>

<p class="NDLRefHead2">Device Resetting Functions</p>

<p class="NDLRefMemberFunction">RecreateStatus Recreate(unsigned
int uiWidth, unsigned int uiHeight, unsigned int uiUseFlags,
NiWindowRef kWndDevice = 0, FrameBufferFormat eFBFormat =
FBFMT_UNKNOWN, DepthStencilFormat eDSFormat = DSFMT_UNKNOWN,
PresentationInterval ePresentationInterval =
PRESENT_INTERVAL_ONE, SwapEffect eSwapEffect =
SWAPEFFECT_DEFAULT, unsigned int uiFBMode = FBMODE_DEFAULT,
unsigned int uiBackBufferCount = 1, unsigned int uiRefreshRate =
REFRESHRATE_DEFAULT)</p>

<p class="NDLRefMemberDescription">This function is used by the
application to reset an <span class=
"NDLSystemFont">NiDX9Renderer</span> using a different set of
display parameters. See the documentation on <a href=
"Changing_the_Display_Parameters_of_an_NiDX9Renderer.htm">changing
the display parameters</a> of an <span class=
"NDLSystemFont">NiDX9Renderer</span> for details and values of
the parameters and return value.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_DX9Renderer.htm">discussion</a> on restricted
thread behavior in the DX9 renderer for more information.</p>

<p class="NDLRefMemberFunction">RecreateStatus Recreate(unsigned
int uiWidth, unsigned int uiHeight)</p>

<p class="NDLRefMemberDescription">This function is used by the
application to reset an <span class=
"NDLSystemFont">NiDX9Renderer</span> using the same set of
display parameters as is currently in use except for the width
and height of the window. See the section above on changing the
display parameters of an <span class=
"NDLSystemFont">NiDX9Renderer</span> for details and values of
the parameters and return value.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_DX9Renderer.htm">discussion</a> on restricted
thread behavior in the DX9 renderer for more information.</p>

<p class="NDLRefMemberFunction">bool Recreate()</p>

<p class="NDLRefMemberDescription">This function is used by the
application to reset an <span class=
"NDLSystemFont">NiDX9Renderer</span> using the same set of
display parameters as is currently in use. See the section above
on changing the display parameters of an <span class=
"NDLSystemFont">NiDX9Renderer</span> for details and values of
the parameters and return value.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_DX9Renderer.htm">discussion</a> on restricted
thread behavior in the DX9 renderer for more information.</p>

<p class="NDLRefMemberFunction">void
GetCreationParameters(unsigned int&amp; uiWidth, unsigned
int&amp; uiHeight, unsigned int&amp; uiUseFlags, NiWindowRef&amp;
kWndDevice, NiWindowRef&amp; kWndFocus, unsigned int&amp;
uiAdapter, DeviceDesc&amp; eDesc, FrameBufferFormat&amp;
eFBFormat, DepthStencilFormat&amp; eDSFormat,
PresentationInterval&amp; ePresentationInterval, SwapEffect&amp;
eSwapEffect, unsigned int&amp; uiFBMode, unsigned int&amp;
uiBackBufferCount, unsigned int&amp; uiRefreshRate) const</p>

<p class="NDLRefMemberDescription">Returns the set of parameters
that was used to initially create the device. Note that these
values do not reflect any parameters used in calls to
<span class="NDLSystemFont">Recreate</span> that are made after
the initial device creation, only the values that are used during
the initial call to <span class=
"NDLSystemFont">Create</span>.</p>

<p class="NDLRefMemberDescription">This function does not operate
under <a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>.</p>

<p class="NDLRefHead2">Windowed Swap Chain Functions</p>

<p class="NDLRefMemberFunction">bool
CreateSwapChainRenderTargetGroup(unsigned int uiUseFlags,
NiWindowRef kWndDevice, FrameBufferFormat eFBFormat =
FBFMT_UNKNOWN, DepthStencilFormat eDSFormat = DSFMT_UNKNOWN,
PresentationInterval ePresentationInterval =
PRESENT_INTERVAL_ONE, SwapEffect eSwapEffect =
SWAPEFFECT_DEFAULT, unsigned int uiFBMode = FBMODE_DEFAULT,
unsigned int uiBackBufferCount = 1, unsigned int uiRefreshRate =
REFRESHRATE_DEFAULT)</p>

<p class="NDLRefMemberDescription">Creates a swap chain that can
be used in the window <span class=
"NDLSystemFont">kWndDevice</span>, and stores that swap chain as
an <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiRenderTargetGroup.htm">NiRenderTargetGroup</a></span>.
This render target group can then be rendered to just as any
other render target group. The parameters are the same as those
passed to <span class="NDLSystemFont">Create</span>. If the
function fails for whatever reason, it will return <span class=
"NDLSystemFont">false</span>. This function is used to provide
support for rendering to multiple windows.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_DX9Renderer.htm">discussion</a> on restricted
thread behavior in the DX9 renderer for more information.</p>

<p class="NDLRefMemberFunction">void
DestroySwapChainRenderTargetGroup(NiWindowRef kWndDevice)</p>

<p class="NDLRefMemberDescription">Destroy the swap chain and
<span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiRenderTargetGroup.htm">NiRenderTargetGroup</a></span>
associated with the specified window. Note that if the render
target group associated with <span class=
"NDLSystemFont">kWndDevice</span> is the current render target,
this function will fail. Also, this function should not be used
to destroy the original render target group created with the
device, where <span class="NDLSystemFont">kWndDevice</span> is
the device window passed into the <span class=
"NDLSystemFont">NiDX9Renderer::Create</span> function.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_DX9Renderer.htm">discussion</a> on restricted
thread behavior in the DX9 renderer for more information.</p>

<p class="NDLRefMemberFunction">bool
RecreateSwapChainRenderTargetGroup(unsigned int uiUseFlags,
NiWindowRef kWndDevice, FrameBufferFormat eFBFormat =
FBFMT_UNKNOWN, DepthStencilFormat eDSFormat = DSFMT_UNKNOWN,
PresentationInterval ePresentationInterval =
PRESENT_INTERVAL_ONE, SwapEffect eSwapEffect =
SWAPEFFECT_DEFAULT, unsigned int uiFBMode = FBMODE_DEFAULT,
unsigned int uiBackBufferCount = 1, unsigned int uiRefreshRate =
REFRESHRATE_DEFAULT)</p>

<p class="NDLRefMemberDescription">Recreates an existing swap
chain with new buffers that can be used in the window
<span class="NDLSystemFont">kWndDevice</span>, that is stored in
the same <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiRenderTargetGroup.htm">NiRenderTargetGroup</a></span>.
This render target group can then be rendered just as any other
render target group. The parameters are the same as those passed
to <span class="NDLSystemFont">Create</span>. If the function
fails for whatever reason, it will return <span class=
"NDLSystemFont">false</span>.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_DX9Renderer.htm">discussion</a> on restricted
thread behavior in the DX9 renderer for more information.</p>

<p class="NDLRefMemberFunction"><span class=
"NDLSystemFont"><a href=
"../../Reference/NiMain/NiRenderTargetGroup.htm">NiRenderTargetGroup</a></span>*
GetSwapChainRenderTargetGroup(NiWindowRef kWndDevice)</p>

<p class="NDLRefMemberDescription">This function returns the
<span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiRenderTargetGroup.htm">NiRenderTargetGroup</a></span>
that has been created for the window that's passed in. If no
render target group has been created, this function will return
<span class="NDLSystemFont">NULL</span>. This render target group
can be rendered to just as any other render target group.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_DX9Renderer.htm">discussion</a> on restricted
thread behavior in the DX9 renderer for more information.</p>

<p class="NDLRefHead2">Shader Related Functions</p>

<p class="NDLRefMemberFunction">void PurgeVertexShader(<a href=
"NiD3DVertexShader.htm">NiD3DVertexShader</a>* pkShader)</p>

<p class="NDLRefMemberFunction">void PurgePixelShader(<a href=
"NiD3DPixelShader.htm">NiD3DPixelShader</a>* pkShader)</p>

<p class="NDLRefMemberDescription">Forces the pixel or vertex
shader to release its renderer data.</p>

<p class="NDLRefMemberDescription">These functions operate under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_DX9Renderer.htm">discussion</a> on restricted
thread behavior in the DX9 renderer for more information.</p>

<p class="NDLRefMemberFunction">void RegisterD3DShader(<a href=
"NiD3DShaderInterface.htm">NiD3DShaderInterface</a>*
pkD3DShader)</p>

<p class="NDLRefMemberDescription">If an application creates an
instance of an <span class="NDLSystemFont"><a href=
"NiD3DShaderInterface.htm">NiD3DShaderInterface</a></span>-derived
class on its own, this function will register that instance with
the renderer. Before the device is reset, the renderer will call
<span class=
"NDLSystemFont">NiD3DShaderInterface::HandleLostDevice</span> on
all shaders that it has registered, and <span class=
"NDLSystemFont">NiD3DShaderInterface::HandleResetDevice</span> on
all those shaders just after the device is reset.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_DX9Renderer.htm">discussion</a> on restricted
thread behavior in the DX9 renderer for more information.</p>

<p class="NDLRefMemberFunction">void ReleaseD3DShader(<a href=
"NiD3DShaderInterface.htm">NiD3DShaderInterface</a>*
pkD3DShader)</p>

<p class="NDLRefMemberDescription">This function un-registers an
instance of an <span class="NDLSystemFont"><a href=
"NiD3DShaderInterface.htm">NiD3DShaderInterface</a></span>-derived
class from the renderer.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_DX9Renderer.htm">discussion</a> on restricted
thread behavior in the DX9 renderer for more information.</p>

<p class="NDLRefMemberFunction">void PurgeD3DShader(<a href=
"NiD3DShaderInterface.htm">NiD3DShaderInterface</a>*
pkD3DShader)</p>

<p class="NDLRefMemberDescription">This function un-registers an
instance of an <span class="NDLSystemFont"><a href=
"NiD3DShaderInterface.htm">NiD3DShaderInterface</a></span>-derived
class from the renderer and forces it to release all its renderer
data.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_DX9Renderer.htm">discussion</a> on restricted
thread behavior in the DX9 renderer for more information.</p>

<p class="NDLRefMemberFunction">void PurgeAllD3DShaders();</p>

<p class="NDLRefMemberDescription">This function calls
<span class="NDLSystemFont">PurgeD3DShader</span> on all shaders
that have been registered with the renderer.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_DX9Renderer.htm">discussion</a> on restricted
thread behavior in the DX9 renderer for more information.</p>

<p class="NDLRefHead2">Direct3D Interface Access and
Descriptions</p>

<p class="NDLRefMemberFunction">LPDIRECT3DDEVICE9 GetD3DDevice()
const</p>

<p class="NDLRefMemberDescription">Returns the D3D device.</p>

<p class="NDLRefMemberDescription">This function does not operate
under <a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>.</p>

<p class="NDLRefMemberFunction">unsigned int GetAdapter()
const</p>

<p class="NDLRefMemberDescription">Returns the number identifying
the current adapter.</p>

<p class="NDLRefMemberDescription">This function does not operate
under <a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>.</p>

<p class="NDLRefMemberFunction">D3DDEVTYPE GetDevType() const</p>

<p class="NDLRefMemberDescription">Returns the <span class=
"NDLSystemFont">D3DDEVTYPE</span> enumeration of the current
device.</p>

<p class="NDLRefMemberDescription">This function does not operate
under <a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>.</p>

<p class="NDLRefMemberFunction">D3DPRESENT_PARAMETERS*
GetPresentParams(const <a href=
"../../Reference/NiMain/NiRenderTargetGroup.htm">NiRenderTargetGroup</a>*
pkTarget = NULL) const</p>

<p class="NDLRefMemberDescription">Returns a pointer to the
<span class="NDLSystemFont">D3DPRESENT_PARAMETERS</span> object
used to create the specified <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiRenderTargetGroup.htm">NiRenderTargetGroup</a></span>.
If pkTarget is NULL, then the <span class=
"NDLSystemFont">D3DPRESENT_PARAMETERS</span> object for the
default render target group is returned. Otherwise, it is assumed
that pkTarget represents a render target group created by the
function <span class=
"NDLSystemFont">CreateSwapChainRenderTargetGroup</span>, and the
<span class="NDLSystemFont">D3DPRESENT_PARAMETERS</span> object
for that swap chain will be returned.</p>

<p class="NDLRefMemberDescription">This function does not operate
under <a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>.</p>

<p class="NDLRefMemberFunction">D3DFORMAT GetAdapterFormat()
const</p>

<p class="NDLRefMemberDescription">Returns the current adapter
format.</p>

<p class="NDLRefMemberDescription">This function does not operate
under <a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>.</p>

<p class="NDLRefMemberFunction">const D3DCAPS9* GetDeviceCaps()
const</p>

<p class="NDLRefMemberDescription">Returns a pointer to the
<span class="NDLSystemFont">D3DCAPS9</span> object that describes
the current device.</p>

<p class="NDLRefMemberDescription">This function does not operate
under <a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>.</p>

<p class="NDLRefMemberFunction">const <a href=
"NiDX9AdapterDesc.htm">NiDX9AdapterDesc</a>* GetAdapterDesc()
const</p>

<p class="NDLRefMemberFunction">const <a href=
"NiDX9DeviceDesc.htm">NiDX9DeviceDesc</a>* GetDeviceDesc()
const</p>

<p class="NDLRefMemberDescription">These functions return the
Gamebryo DX9, adapter, and device descriptors for the calling
renderer. These allow applications to query device capabilities
of the rendering device. See the reference documentation for
<a href="NiDX9AdapterDesc.htm"><span class=
"NDLSystemFont">NiDX9AdapterDesc</span></a> and <a href=
"NiDX9DeviceDesc.htm"><span class=
"NDLSystemFont">NiDX9DeviceDesc</span></a> for details.</p>

<p class="NDLRefMemberDescription">These functions do not operate
under <a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>.</p>

<p class="NDLRefHead2">Renderer Manager Classes</p>

<p class="NDLRefMemberFunction"><a href=
"NiDX9RenderState.htm">NiDX9RenderState</a>* GetRenderState()
const</p>

<p class="NDLRefMemberDescription">Returns the <span class=
"NDLSystemFont"><a href=
"NiDX9RenderState.htm">NiDX9RenderState</a></span> for the
renderer.</p>

<p class="NDLRefMemberDescription">This function does not operate
under <a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>.</p>

<p class="NDLRefMemberFunction"><a href=
"NiDX9TextureManager.htm">NiDX9TextureManager</a>*
GetTextureManager() const</p>

<p class="NDLRefMemberDescription">Returns the <span class=
"NDLSystemFont"><a href=
"NiDX9TextureManager.htm">NiDX9TextureManager</a></span> for the
renderer.</p>

<p class="NDLRefMemberDescription">This function does not operate
under <a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>.</p>

<p class="NDLRefMemberFunction"><a href=
"NiDX9LightManager.htm">NiDX9LightManager</a>* GetLightManager()
const</p>

<p class="NDLRefMemberDescription">Returns the <span class=
"NDLSystemFont"><a href=
"NiDX9LightManager.htm">NiDX9LightManager</a></span> for the
renderer.</p>

<p class="NDLRefMemberDescription">This function does not operate
under <a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>.</p>

<p class="NDLRefMemberFunction"><a href=
"NiD3DShader.htm">NiD3DShader</a>* GetLegacyDefaultShader()
const</p>

<p class="NDLRefMemberDescription">Returns the <a href=
"../../Programmer/NiMaterial/Gamebryo_Legacy_Pipeline.htm">legacy
default shader</a>.</p>

<p class="NDLRefMemberDescription">This function does not operate
under <a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>.</p>

<p class="NDLRefHead2">Miscellaneous Renderer Functions</p>

<p class="NDLRefMemberFunction">void UseQuickDecals(bool
bQuickDecals)</p>

<p class="NDLRefMemberDescription">Setting this option to
<span class="NDLSystemFont">true</span> will cause the <a href=
"../../Programmer/NiMaterial/Gamebryo_Legacy_Pipeline.htm">legacy
pipeline</a> to attempt to render multiple decals in the same
pass, if the hardware supports it. This will be faster than
rendering each decal in a separate pass, but it can lead to
visual artifacts when multiple decals layers attempt to place a
decal in the same place. The default value for this option is
<span class="NDLSystemFont">true</span>. This function has no
effect when using the <a href=
"../../Programmer/NiMaterial/Gamebryo_Standard_Material.htm">standard
pipeline</a>.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_DX9Renderer.htm">discussion</a> on restricted
thread behavior in the DX9 renderer for more information.</p>

<p class="NDLRefMemberFunction">NiTexturePtr
CreateNiTextureFromD3DTexture(D3DBaseTexturePtr pkD3DTexture)</p>

<p class="NDLRefMemberDescription">Creates an <span class=
"NDLSystemFont"><a href=
"NiDX9Direct3DTexture.htm">NiDX9Direct3DTexture</a></span> object
that refers to the <span class=
"NDLSystemFont">D3DBaseTexturePtr</span> that is passed into the
function. The created texture is returned in an <span class=
"NDLSystemFont">NiTexurePtr</span>, so the code that calls this
function must place the result in a smart pointer to prevent the
object from being deleted. The resulting texture can be used any
place in the engine where an <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiTexture.htm">NiTexture</a></span> is
expected, and will support any D3D texture, regardless of texture
size, format, creation pool, etc. Note that the texture will
include a reference to <span class=
"NDLSystemFont">pkD3DTexture</span>, so the code that calls this
function can safely release any of its own references. This
function will add a reference to the passed-in <span class=
"NDLSystemFont">D3DBaseTexturePtr</span> object.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_DX9Renderer.htm">discussion</a> on restricted
thread behavior in the DX9 renderer for more information.</p>

<p class="NDLRefMemberFunction">bool
RecreateNiTextureFromD3DTexture(NiTexture* pkTexture,
D3DBaseTexturePtr pkD3DTexture)</p>

<p class="NDLRefMemberDescription">Reinitializes an <span class=
"NDLSystemFont"><a href=
"NiDX9Direct3DTexture.htm">NiDX9Direct3DTexture</a></span> object
that has been created by <span class=
"NDLSystemFont">CreateNiTextureFromD3DTexture</span> with the new
<span class="NDLSystemFont">D3DBaseTexturePtr</span> that is
passed into the function. This allows the D3D texture to be
released and recreated, as must be done with non-managed textures
in response to a device reset, without needing to create a
different <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiTexture.htm">NiTexture</a></span>. Note
that the texture will release its reference to any D3D texture it
is already referring to, and will include a reference to
<span class="NDLSystemFont">pkD3DTexture</span>, so the code that
calls this function can safely release any of its own references.
This function will add a reference to the passed-in <span class=
"NDLSystemFont">D3DBaseTexturePtr</span> object.</p>

<p class="NDLRefMemberDescription">This function operates under
<a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>, and may only be legal to call
from a specific thread. Refer to the <a href=
"Threading_in_the_DX9Renderer.htm">discussion</a> on restricted
thread behavior in the DX9 renderer for more information.</p>

<p class="NDLRefHead2">Device Capability Queries</p>

<p class="NDLRefMemberFunction">const NiPixelFormat*
FindClosestPixelFormat(TexFormat eFormat, TexUsage eUsage)
const</p>

<p class="NDLRefMemberDescription">Returns an <span class=
"NDLSystemFont">NiPixelFormat</span> supported by the current
device that most closely matches the <span class=
"NDLSystemFont">TexFormat</span> and <span class=
"NDLSystemFont">TexUsage</span> values that are passed in.</p>

<p class="NDLRefMemberDescription">This function does not operate
under <a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>.</p>

<p class="NDLRefMemberFunction">unsigned int GetMaxStreams()
const</p>

<p class="NDLRefMemberDescription">Returns the maximum number of
vertex buffer streams that the current device can use
simultaneously.</p>

<p class="NDLRefMemberDescription">This function does not operate
under <a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>.</p>

<p class="NDLRefMemberFunction">unsigned int
GetPixelShaderVersion() const</p>

<p class="NDLRefMemberDescription">Returns the maximum pixel
shader version supported by the current device. This value will
be returned in the <span class=
"NDLSystemFont">D3DPS_VERSION</span> format that D3D uses.</p>

<p class="NDLRefMemberDescription">This function does not operate
under <a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>.</p>

<p class="NDLRefMemberFunction">unsigned int
GetVertexShaderVersion() const</p>

<p class="NDLRefMemberDescription">Returns the maximum vertex
shader version supported by the current device. This value will
be returned in the <span class=
"NDLSystemFont">D3DVS_VERSION</span> format that D3D uses.</p>

<p class="NDLRefMemberDescription">This function does not operate
under <a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>.</p>

<p class="NDLRefMemberFunction">bool GetMipmapCubeMaps()
const</p>

<p class="NDLRefMemberDescription">Returns a Boolean flag
indicating whether the current device supports mipmaps on cube
maps.</p>

<p class="NDLRefMemberDescription">This function does not operate
under <a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>.</p>

<p class="NDLRefMemberFunction">bool IsDynamicTexturesCapable()
const</p>

<p class="NDLRefMemberDescription">Returns a Boolean flag
indicating whether the current device supports dynamic textures.
If it does, than <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiDynamicTexture.htm">NiDynamicTexture</a></span>
objects will make use of this capability. If not, then this
functionality will be approximated by keeping a copy of the
texture in local memory that is uploaded to the device.</p>

<p class="NDLRefMemberDescription">This function does not operate
under <a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>.</p>

<p class="NDLRefMemberFunction">bool
GetMRTPostPixelShaderBlendingCapability() const</p>

<p class="NDLRefMemberDescription">Returns a Boolean flag
indicating whether the current device supports post-pixel-shader
blending functions such as fogging, alpha blending, alpha
testing, or dithering. Refer to the Microsoft DX9 documentation
for more information on this potential limitation on multiple
render targets.</p>

<p class="NDLRefMemberDescription">This function does not operate
under <a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>.</p>

<p class="NDLRefMemberFunction">bool
GetFormatPostPixelShaderBlendingCapability(D3DFORMAT eFormat)
const</p>

<p class="NDLRefMemberDescription">Returns a Boolean flag
indicating whether the current device supports post-pixel-shader
blending functions such as fogging, alpha blending, alpha
testing, or dithering, when a texture with the given pixel format
is used as a render target. Refer to the Microsoft DX9
documentation for more information on this potential
limitation.</p>

<p class="NDLRefMemberDescription">This function does not operate
under <a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>.</p>

<p class="NDLRefMemberFunction">unsigned short
GetHWMaxAnisotropy() const</p>

<p class="NDLRefMemberDescription">Returns the maximum level of
anisotropy supported by the current hardware. This method returns
the hardware-imposed maximum, instead of the current maximum
(returned by GetMaxAnisotropy()), which could be lower.</p>

<p class="NDLRefMemberDescription">This function does not operate
under <a href=
"../../Programmer/General_Topics/Threading_and_Renderers.htm#Restricted_Thread_Behavior">
restricted thread behavior</a>.</p>

<p class="NDLRefHead1">Notes</p>

<p class="NDLRefHead2">Function Pointer Types</p>

<p>Applications can provide any number of function pointer to get
called when the device is lost, and also before and after the D3D
device is reset. This allows the application to perform any
resource clean-up required before resetting the device, as well
as any re-initialization required before the application can
continue after the reset.</p>

<a name="RESETNOTIFYFUNC" id="RESETNOTIFYFUNC"></a><p class="NDLRefMemberFunction">typedef bool
(*RESETNOTIFYFUNC)(bool bBeforeReset, void* pvData)</p>

<p class="NDLRefMemberDescription">The <span class=
"NDLSystemFont">RESETNOTIFYFUNC</span> type is for a pointer to a
function that gets called both before and after the device is
reset. The renderer calls the function with <span class=
"NDLSystemFont">bBeforeReset</span> = <span class=
"NDLSystemFont">true</span> immediately before the device is
reset, and <span class="NDLSystemFont">bBeforeReset</span> =
<span class="NDLSystemFont">false</span> immediately afterwards.
Any data pointer that the application provides when registering
the function is passed in as the <span class=
"NDLSystemFont">pvData</span> parameter.</p>

<a name="LOSTDEVICENOTIFYFUNC" id="LOSTDEVICENOTIFYFUNC"></a><p class="NDLRefMemberFunction">typedef bool
(*LOSTDEVICENOTIFYFUNC)(void* pvData)</p>

<p class="NDLRefMemberDescription">The <span class=
"NDLSystemFont">LOSTDEVICENOTIFYFUNC</span> type is for a pointer
to a function that gets called once, when the renderer first
realizes that the device is lost. Any data pointer that the
application provides when registering the function is passed in
as the <span class="NDLSystemFont">pvData</span> parameter.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
