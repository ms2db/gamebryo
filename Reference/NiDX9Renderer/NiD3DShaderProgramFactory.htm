<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiD3DShaderProgramFactory</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiD3DShaderProgramFactory</p>

<p class="NDLRefParentage">: public <span><a href=
"../../Reference/NiMain/NiRefObject.htm">NiRefObject</a></span></p>

<p class="NDLRefHeaderFile">
&lt;NiD3DShaderProgramFactory.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiD3DShaderProgramFactory</span>
is the factory class used for loading shader programs.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberDescription">The shader factory is
instanced by the renderer. The application should not call any
functions which would create an instance of the factory.</p>

<p class="NDLRefHead1">Supported Static Member Functions</p>

<p class="NDLRefMemberFunction">static NiD3DShaderProgramFactory*
GetInstance()</p>

<p class="NDLRefMemberDescription">Returns an instance of the
<span class="NDLSystemFont">NiD3DShaderProgramFactory</span>
class. This function will only return an instance that has
already been constructed, and will not create a new instance. The
only reason for getting an instance of this class is to use it to
call one of the supported member functions described below.</p>

<p class="NDLRefMemberFunction">static <a href=
"NiD3DVertexShader.htm">NiD3DVertexShader</a>*
CreateVertexShaderFromFile(const char* pcFileName, const char*
pcShaderName, const char* pcEntryPoint, const char*
pcShaderTarget, NiD3DVertexDeclaration hDecl, unsigned int
uiUsage, bool bRecoverable = false)</p>

<p class="NDLRefMemberDescription">Creates a vertex shader from
the file <span class="NDLSystemFont">pcFileName</span>. The file
name will be parsed for an extension, and the registered
<span class="NDLSystemFont"><a href=
"NiD3DShaderProgramCreator.htm">NiD3DShaderProgramCreator</a></span>
class for that extension will be used to create the vertex
shader. The resulting <span class="NDLSystemFont"><a href=
"NiD3DVertexShader.htm">NiD3DVertexShader</a></span> will have
the name specified in <span class=
"NDLSystemFont">pcShaderName</span>. Some shader formats, such as
those written in the DirectX HLSL, also require an entry point
<span class="NDLSystemFont">pcEntryPoint</span>, which indicates
the name of the function to use as the vertex shader, and the
shader target <span class="NDLSystemFont">pcShaderTarget</span>,
which indicates which shader model to use when compiling the
function. Possible values for the shader model can be found in
the DirectX9 documentation for <span class=
"NDLSystemFont">D3DXGetVertexShaderProfile</span>.</p>

<p class="NDLRefMemberDescription">If <span class=
"NDLSystemFont">bRecoverable</span> is <span class=
"NDLSystemFont">true</span>, then a failure of any sort will not
go through the <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiShaderFactory.htm">NiShaderFactory</a></span>
error callback procedure. This should be set if an application
expects that a shader failure may be a possibility, and is
prepared to deal with it.</p>

<p class="NDLRefMemberDescription">The function returns
<span class="NDLSystemFont">NULL</span> if the shader creation
failed.</p>

<p class="NDLRefMemberFunction">static <a href=
"NiD3DVertexShader.htm">NiD3DVertexShader</a>*
CreateVertexShaderFromBuffer(const void* pvBuffer, unsigned int
uiBufferSize, const char* pcExt, const char* pcShaderName, const
char* pcEntryPoint, const char* pcShaderTarget,
NiD3DVertexDeclaration hDecl, unsigned int uiUsage, bool
bRecoverable = false)</p>

<p class="NDLRefMemberDescription">Creates a vertex shader using
the code found in <span class="NDLSystemFont">pvBuffer</span> and
the buffer size from <span class=
"NDLSystemFont">uiBufferSize</span>. The registered <span class=
"NDLSystemFont"><a href=
"NiD3DShaderProgramCreator.htm">NiD3DShaderProgramCreator</a></span>
class for the extension passed into <span class=
"NDLSystemFont">pcExt</span> will be used to create the vertex
shader. The resulting <span class="NDLSystemFont"><a href=
"NiD3DVertexShader.htm">NiD3DVertexShader</a></span> will have
the name specified in <span class=
"NDLSystemFont">pcShaderName</span>. Some shader formats, such as
those written in the DirectX HLSL, also require an entry point
<span class="NDLSystemFont">pcEntryPoint</span>, which indicates
the name of the function to use as the vertex shader, and the
shader target <span class="NDLSystemFont">pcShaderTarget</span>,
which indicates which shader model to use when compiling the
function. Possible values for the shader model can be found in
the DirectX9 documentation for <span class=
"NDLSystemFont">D3DXGetVertexShaderProfile</span>.</p>

<p class="NDLRefMemberDescription">If <span class=
"NDLSystemFont">bRecoverable</span> is <span class=
"NDLSystemFont">true</span>, then a failure of any sort will not
go through the <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiShaderFactory.htm">NiShaderFactory</a></span>
error callback procedure. This should be set if an application
expects that a shader failure may be a possibility, and is
prepared to deal with it.</p>

<p class="NDLRefMemberDescription">The function returns
<span class="NDLSystemFont">NULL</span> if the shader creation
failed.</p>

<p class="NDLRefMemberFunction">static <a href=
"NiD3DPixelShader.htm">NiD3DPixelShader</a>*
CreatePixelShaderFromFile(const char* pcFileName, const char*
pcShaderName, const char* pcEntryPoint, const char*
pcShaderTarget, bool bRecoverable = false)</p>

<p class="NDLRefMemberDescription">Creates a pixel shader from
the file <span class="NDLSystemFont">pcFileName</span>. The file
name will be parsed for an extension, and the registered
<span class="NDLSystemFont"><a href=
"NiD3DShaderProgramCreator.htm">NiD3DShaderProgramCreator</a></span>
class for that extension will be used to create the pixel shader.
The resulting <span class="NDLSystemFont"><a href=
"NiD3DPixelShader.htm">NiD3DPixelShader</a></span> will have the
name specified in <span class=
"NDLSystemFont">pcShaderName</span>. Some shader formats, such as
those written in the DirectX HLSL, also require an entry point
<span class="NDLSystemFont">pcEntryPoint</span>, which indicates
the name of the function to use as the pixel shader, and the
shader target <span class="NDLSystemFont">pcShaderTarget</span>,
which indicates which shader model to use when compiling the
function. Possible values for the shader model can be found in
the DirectX9 documentation for <span class=
"NDLSystemFont">D3DXGetPixelShaderProfile</span>.</p>

<p class="NDLRefMemberDescription">if <span class=
"NDLSystemFont">bRecoverable</span> is <span class=
"NDLSystemFont">true</span>, then a failure of any sort will not
go through the <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiShaderFactory.htm">NiShaderFactory</a></span>
error callback procedure. This should be set if an application
expects that a shader failure may be a possibility, and is
prepared to deal with it.</p>

<p class="NDLRefMemberDescription">The function returns
<span class="NDLSystemFont">NULL</span> if the shader creation
failed.</p>

<p class="NDLRefMemberFunction">static <a href=
"NiD3DPixelShader.htm">NiD3DPixelShader</a>*
CreatePixelShaderFromBuffer(const void* pvBuffer, unsigned int
uiBufferSize, const char* pcExt, const char* pcShaderName, const
char* pcEntryPoint, const char* pcShaderTarget, bool bRecoverable
= false)</p>

<p class="NDLRefMemberDescription">Creates a pixel shader using
the code found in <span class="NDLSystemFont">pvBuffer</span> and
the buffer size from <span class=
"NDLSystemFont">uiBufferSize</span>. The registered <span class=
"NDLSystemFont"><a href=
"NiD3DShaderProgramCreator.htm">NiD3DShaderProgramCreator</a></span>
class for the extension passed into <span class=
"NDLSystemFont">pcExt</span> will be used to create the pixel
shader. The resulting <span class="NDLSystemFont"><a href=
"NiD3DPixelShader.htm">NiD3DPixelShader</a></span> will have the
name specified in <span class=
"NDLSystemFont">pcShaderName</span>. Some shader formats, such as
those written in the DirectX HLSL, also require an entry point
<span class="NDLSystemFont">pcEntryPoint</span>, which indicates
the name of the function to use as the pixel shader, and the
shader target <span class="NDLSystemFont">pcShaderTarget</span>,
which indicates which shader model to use when compiling the
function. Possible values for the shader model can be found in
the DirectX9 documentation for <span class=
"NDLSystemFont">D3DXGetPixelShaderProfile</span>.</p>

<p class="NDLRefMemberDescription">if <span class=
"NDLSystemFont">bRecoverable</span> is <span class=
"NDLSystemFont">true</span>, then a failure of any sort will not
go through the <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiShaderFactory.htm">NiShaderFactory</a></span>
error callback procedure. This should be set if an application
expects that a shader failure may be a possibility, and is
prepared to deal with it.</p>

<p class="NDLRefMemberDescription">The function returns
<span class="NDLSystemFont">NULL</span> if the shader creation
failed.</p>

<p class="NDLRefMemberFunction">static unsigned int
GetUniversalShaderCreationFlags()</p>

<p class="NDLRefMemberFunction">static void
SetUniversalShaderCreationFlags(unsigned int uiFlags)</p>

<p class="NDLRefMemberDescription">Set and retrieve an
<span class="NDLSystemFont">unsigned int</span> value that will
be used by all derived <a href=
"NiD3DShaderProgramCreator.htm"><span class=
"NDLSystemFont">NiD3DShaderProgramCreator</span></a> classes, to
be passed into every shader program creation function. Each
derived class has the responsibility of ensuring that only the
flags that have meaning are used in that class's specific
context. These functions allow an application to make one call,
after which all shader programs created will, for instance, be
created with debugging enabled and shader optimization
disabled.</p>

<p class="NDLRefMemberFunction">static bool
RegisterShaderCreator(const char* pcExt, <a href=
"NiD3DShaderProgramCreator.htm">NiD3DShaderProgramCreator</a>*
pkCreator)</p>

<p class="NDLRefMemberDescription">Registers the given <a href=
"NiD3DShaderProgramCreator.htm"><span class=
"NDLSystemFont">NiD3DShaderProgramCreator</span></a> as the
object to use when creating shader programs whose extension is
stored in <span class="NDLSystemFont">pcExt</span>. If an
existing <a href="NiD3DShaderProgramCreator.htm"><span class=
"NDLSystemFont">NiD3DShaderProgramCreator</span></a> is already
registered for that extension, this function will replace that
creator object with the one being passed in. In this manner, an
application can re-map what shader program creator objects are
used with which extension. This function returns a Boolean value
indicating whether or not an existing shader program creator was
replaced.</p>

<p class="NDLRefMemberFunction">static void
UnregisterShaderCreator(<a href=
"NiD3DShaderProgramCreator.htm">NiD3DShaderProgramCreator</a>*
pkCreator)</p>

<p class="NDLRefMemberDescription">Unregisters the given <a href=
"NiD3DShaderProgramCreator.htm"><span class=
"NDLSystemFont">NiD3DShaderProgramCreator</span></a> from
whatever extensions it is registers as the creator class for.</p>

<p class="NDLRefMemberFunction">static <a href=
"NiD3DShaderProgramCreator.htm">NiD3DShaderProgramCreator</a>*
GetShaderCreator(const char* pcFilename)</p>

<p class="NDLRefMemberDescription">Returns the <a href=
"NiD3DShaderProgramCreator.htm"><span class=
"NDLSystemFont">NiD3DShaderProgramCreator</span></a> registered
as the creator class for the extension contained in the
<span class="NDLSystemFont">pcFilename</span> parameter.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">const char*
GetFirstProgramDirectory(NiTListIterator&amp; kIter)</p>

<p class="NDLRefMemberDescription">This function returns the
first program directory that has been registered with the
<span class="NDLSystemFont">NiD3DShaderProgramFactory</span>
object. It takes an <span class=
"NDLSystemFont">NiTListIterator</span>, which can then be used
with the <span class=
"NDLSystemFont">GetNextProgramDirectory</span> function to
iterate the list of all program directories that have been
registered.</p>

<p class="NDLRefMemberFunction">const char*
GetNextProgramDirectory(NiTListIterator&amp; kIter)</p>

<p class="NDLRefMemberDescription">This function uses the
supplied <span class="NDLSystemFont">NiTListIterator</span> to
iterate the internal list of program directories that has been
registered with the <span class=
"NDLSystemFont">NiD3DShaderProgramFactory</span> object, and it
returns the next directory on the list.</p>

<p class="NDLRefMemberFunction">void AddProgramDirectory(const
char* pcDirectory)</p>

<p class="NDLRefMemberDescription">Adds a directory to the list
of directories that will be searched for shader program files.
The directories will be searched in the order they have been
added to the <span class=
"NDLSystemFont">NiD3DShaderProgramFactory</span> object.</p>

<p class="NDLRefMemberFunction">void RemoveProgramDirectory(const
char* pcDirectory)</p>

<p class="NDLRefMemberDescription">Removes a directory from the
list of directories that will be searched for shader program
files.</p>

<p class="NDLRefMemberFunction">void
RemoveAllProgramDirectories()</p>

<p class="NDLRefMemberDescription">Empties list of directories
that will be searched for shader program files.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
