<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiD3DUtility</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiD3DUtility</p>

<p class="NDLRefHeaderFile">&lt;NiD3DUtility.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiD3DUtility</span> is a Gamebryo
internal class that contains some utility functions that are
useful in multiple parts of the renderer library.</p>

<p class="NDLRefHead1">Static Member Functions</p>

<p class="NDLRefMemberFunction">static void Log(char* pcFmt,
...);</p>

<p class="NDLRefMemberDescription">Writes a string to the output
window.</p>

<p class="NDLRefMemberFunction">static bool GetLogEnabled();</p>

<p class="NDLRefMemberFunction">static void SetLogEnabled(bool
bEnabled);</p>

<p class="NDLRefMemberDescription">Gets and sets whether the
NiD3DUtility logging function is enabled.</p>

<p class="NDLRefMemberFunction">static bool GetSplitPath(const
char* pcFilename, char* pcDrive, char* pcDir, char* pcFname,
char* pcExt);</p>

<p class="NDLRefMemberDescription">Wrapper for <span class=
"NDLSystemFont">_splitpath</span>.</p>

<p class="NDLRefMemberFunction">static bool GetFilePath(const
char* pcFilename, char* pcPath, unsigned int uiMaxLen);</p>

<p class="NDLRefMemberFunction">static bool GetFileName(const
char* pcFilename, char* pcName, unsigned int uiMaxLen);</p>

<p class="NDLRefMemberFunction">static bool
GetFileExtension(const char* pcFilename, char* pcExt, unsigned
int uiMaxLen);</p>

<p class="NDLRefMemberDescription">Wrapper for <span class=
"NDLSystemFont">_splitpath</span>, returning a portion of the
result.</p>

<p class="NDLRefMemberFunction">static unsigned int
SetString(char*&amp; pcDest, unsigned int uiDestSize, const char*
pcSrc);</p>

<p class="NDLRefMemberDescription">Copies <span class=
"NDLSystemFont">pcSrc</span> into <span class=
"NDLSystemFont">pcDest</span>, reallocating the destination
string if necessary. The length of the destination string is
returned.</p>

<p class="NDLRefMemberFunction">static bool WriteData(<a href=
"../../Reference/NiSystem/NiBinaryStream.htm">NiBinaryStream</a>&amp;
kStream, void* pvData, unsigned int uiSize, unsigned int
uiComponentSize = 1);</p>

<p class="NDLRefMemberDescription">Writes ASCII or binary data to
the <span class="NDLSystemFont"><a href=
"../../Reference/NiSystem/NiBinaryStream.htm">NiBinaryStream</a></span>.</p>

<p class="NDLRefMemberFunction">static bool ReadData(<a href=
"../../Reference/NiSystem/NiBinaryStream.htm">NiBinaryStream</a>&amp;
kStream, void*&amp; pvData, unsigned int&amp; uiSize);</p>

<p class="NDLRefMemberFunction">static bool
AllocateAndReadData(<a href=
"../../Reference/NiSystem/NiBinaryStream.htm">NiBinaryStream</a>&amp;
kStream, void*&amp; pvData, unsigned int&amp; uiDataSize,
unsigned int uiComponentSize = 1);</p>

<p class="NDLRefMemberDescription">Reads binary data from the
<span class="NDLSystemFont"><a href=
"../../Reference/NiSystem/NiBinaryStream.htm">NiBinaryStream</a></span>.
The <span class="NDLSystemFont">AllocateAndReadData</span>
function will also allocate the space for the data.</p>

<p class="NDLRefMemberFunction">static bool
ConvertCHARToWCHAR(WCHAR* pwDestination, const char* pcSource,
unsigned int uiDestChar);</p>

<p class="NDLRefMemberFunction">static bool
ConvertWCHARToCHAR(char* pcDestination, const WCHAR* pwSource,
unsigned int uiDestChar);</p>

<p class="NDLRefMemberFunction">static bool
ConvertTCHARToCHAR(char* pcDestination, const TCHAR* ptSource,
unsigned int uiDestChar);</p>

<p class="NDLRefMemberFunction">static bool
ConvertTCHARToWCHAR(WCHAR* pwDestination, const TCHAR* ptSource,
unsigned int uiDestChar);</p>

<p class="NDLRefMemberFunction">static bool
ConvertCHARToTCHAR(TCHAR* ptDestination, const char* pcSource,
unsigned int uiDestChar);</p>

<p class="NDLRefMemberFunction">static bool
ConvertWCHARToTCHAR(TCHAR* ptDestination, const WCHAR* pwSource,
unsigned int uiDestChar);</p>

<p class="NDLRefMemberDescription">Conversion routines between
double-byte and single-byte character strings.</p>

<p class="NDLRefMemberFunction">static void
GetD3DFromNi(D3DXMATRIX&amp; kD3D, const <a href=
"../../Reference/NiMain/NiTransform.htm">NiTransform</a>&amp;
kNi)</p>

<p class="NDLRefMemberDescription">Translate a Gamebryo
<span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiTransform.htm">NiTransform</a></span>
into a D3DXMATRIX struct.</p>

<p class="NDLRefMemberFunction">static void
GetD3DFromNi(D3DXMATRIX&amp; kD3D, const <a href=
"../../Reference/NiMain/NiMatrix3.htm">NiMatrix3</a>&amp; kNiRot,
const <a href=
"../../Reference/NiMain/NiPoint3.htm">NiPoint3</a>&amp; kNiTrans,
float fNiScale)</p>

<p class="NDLRefMemberDescription">Translate a Gamebryo transform
represented by a <a href=
"../../Reference/NiMain/NiMatrix3.htm"><span class=
"NDLSystemFont">NiMatrix3</span></a> rotation, <a href=
"../../Reference/NiMain/NiPoint3.htm"><span class=
"NDLSystemFont">NiPoint3</span></a> translation, and <span class=
"NDLSystemFont">float</span> scale into a D3DXMATRIX struct.</p>

<p class="NDLRefMemberFunction">static void
GetD3DTransposeFromNi(D3DXMATRIX&amp; kD3D, const <a href=
"../../Reference/NiMain/NiTransform.htm">NiTransform</a>&amp;
kNi)</p>

<p class="NDLRefMemberDescription">Translate the transpose of a
Gamebryo <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiTransform.htm">NiTransform</a></span>
into a D3DXMATRIX struct.</p>

<p class="NDLRefMemberFunction">static void
GetD3DTransposeFromNi(D3DXMATRIX&amp; kD3D, const <a href=
"../../Reference/NiMain/NiMatrix3.htm">NiMatrix3</a>&amp; kNiRot,
const <a href=
"../../Reference/NiMain/NiPoint3.htm">NiPoint3</a>&amp; kNiTrans,
float fNiScale)</p>

<p class="NDLRefMemberDescription">Translate the transpose of a
Gamebryo transform represented by a <a href=
"../../Reference/NiMain/NiMatrix3.htm"><span class=
"NDLSystemFont">NiMatrix3</span></a> rotation, <a href=
"../../Reference/NiMain/NiPoint3.htm"><span class=
"NDLSystemFont">NiPoint3</span></a> translation, and <span class=
"NDLSystemFont">float</span> scale into a D3DXMATRIX struct.</p>

<p class="NDLRefMemberFunction">static D3DXMATRIX*
D3DXMatrixMultiply_NonAccelerated(D3DXMATRIX* NI_RESTRICT pkOut,
const D3DXMATRIX* NI_RESTRICT pkM1, const D3DXMATRIX* NI_RESTRICT
pkM2)</p>

<p class="NDLRefMemberDescription">Perform a simple matrix
multiplication that avoids some incorrect results that the
optimized D3DXMatrixMultiply can result in.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
