<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiD3DDefaultShader</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiD3DDefaultShader</p>

<p class="NDLRefParentage">: public <a href=
"NiD3DDefaultShader.htm">NiD3DShader</a></p>

<p class="NDLRefHeaderFile">&lt;NiD3DDefaultShader.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiD3DDefaultShader</span> is
Gamebryo's internal <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiShader.htm">NiShader</a></span>
instance that implements the <a href=
"../../Programmer/NiMaterial/Gamebryo_Legacy_Pipeline.htm">legacy
default texturing pipeline</a>. New <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMain/NiShader.htm">NiShader</a></span> classes
can be derived from <span class=
"NDLSystemFont">NiD3DDefaultShader</span> if they want to modify
the results of the Gamebryo pipeline setup, or they can be
derived directly from <span class="NDLSystemFont"><a href=
"NiD3DShader.htm">NiD3DShader</a></span> if they want to
implement their own pipeline from scratch.</p>

<p>The current Gamebryo default pipeline is implemented in the
<span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiStandardMaterial.htm">NiStandardMaterial</a></span>
class. NiD3DDefaultShader will still be used on hardware that
doesn't support the shader model required by <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMain/NiStandardMaterial.htm">NiStandardMaterial</a></span>,
or if the application requests the legacy default pipeline. See
the Notes section below for discussion on the <span class=
"NDLSystemFont">NiD3DDefaultShader</span> implementation of this
pipeline.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction"><span class=
"NDLSystemFont">NiD3DDefaultShader</span>()</p>

<p class="NDLRefMemberDescription">The default constructor
creates an <span class="NDLSystemFont">NiD3DDefaultShader</span>
instance. Since the renderer will automatically create its own
instance of this class, applications should not need to use this
constructor directly.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">virtual bool Initialize()</p>

<p class="NDLRefMemberDescription">This function is called by the
renderer during initialization of the shader system. <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMain/NiShader.htm">NiShader</a></span> classes
that are derived from <span class=
"NDLSystemFont">NiD3DDefaultShader</span> will need to call
<span class="NDLSystemFont">NiD3DDefaultShader</span>'s
<span class="NDLSystemFont">Initialize</span> function from their
own <span class="NDLSystemFont">Initialize</span> function.</p>

<p class="NDLRefMemberFunction">virtual unsigned int
PreProcessPipeline(<a href=
"../../Reference/NiMain/NiRenderCallContext.htm">NiRenderCallContext</a>&amp;
kRCC)</p>

<p class="NDLRefMemberDescription">This function updates the
render state, materials, and lighting state based on the contents
of <span class="NDLSystemFont">kRCC</span>. <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMain/NiShader.htm">NiShader</a></span> classes
that are derived from <span class=
"NDLSystemFont">NiD3DDefaultShader</span> do not necessarily need
to call <span class="NDLSystemFont">NiD3DDefaultShader</span>'s
<span class="NDLSystemFont">PreProcessPipeline</span> function
from their own <span class=
"NDLSystemFont">PreProcessPipeline</span> function, but those
<span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiShader.htm">NiShader</a></span> classes
must be very careful about making sure the appropriate render
states are set elsewhere in the shader. Note that even if such a
shader does not call <span class=
"NDLSystemFont">NiD3DDefaultShader</span>'s <span class=
"NDLSystemFont">PreProcessPipeline</span> function, it will still
need to call <span class="NDLSystemFont"><a href=
"NiD3DShader.htm">NiD3DShader</a></span>'s version.</p>

<p class="NDLRefMemberFunction">virtual unsigned int
UpdatePipeline(<a href=
"../../Reference/NiMain/NiRenderCallContext.htm">NiRenderCallContext</a>&amp;
kRCC)</p>

<p class="NDLRefMemberDescription">This function performs
construction of the <span class="NDLSystemFont"><a href=
"NiD3DPass.htm">NiD3DPass</a></span> and <span class=
"NDLSystemFont"><a href=
"NiD3DTextureStage.htm">NiD3DTextureStage</a></span> objects that
will be used to render the object.</p>

<p class="NDLRefMemberFunction">virtual unsigned int
PostProcessPipeline(<a href=
"../../Reference/NiMain/NiRenderCallContext.htm">NiRenderCallContext</a>&amp;
kRCC)</p>

<p class="NDLRefMemberDescription">This function performs the
necessary post-render processing. <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMain/NiShader.htm">NiShader</a></span> classes
that are derived from <span class=
"NDLSystemFont">NiD3DDefaultShader</span> need to call
<span class="NDLSystemFont">NiD3DDefaultShader</span>'s
<span class="NDLSystemFont">PostProcessPipeline</span> function
from their own <span class=
"NDLSystemFont">PostProcessPipeline</span> function if they
called <span class="NDLSystemFont">NiD3DDefaultShader</span>'s
<span class="NDLSystemFont">PreProcessPipeline</span> function.
If they did not, they will need to call <span class=
"NDLSystemFont"><a href=
"NiD3DShader.htm">NiD3DShader</a></span>'s version of
<span class="NDLSystemFont">PostProcessPipeline</span> to balance
the call to <span class="NDLSystemFont"><a href=
"NiD3DShader.htm">NiD3DShader</a></span>'s version of
<span class="NDLSystemFont">PreProcessPipeline</span>.</p>

<p class="NDLRefMemberFunction">void UseQuickDecals(bool
bQuickDecals)</p>

<p class="NDLRefMemberDescription">Setting this option to
<span class="NDLSystemFont">true</span> will attempt to render
multiple decals in the same pass, if the hardware supports it.
This will be faster than rendering each decal in a separate pass,
but it can lead to visual artifacts when multiple decals layers
attempt to place a decal in the same place. The default value for
this option is <span class="NDLSystemFont">true</span>.</p>

<p class="NDLRefHead1">Supported Protected Functions</p>

<p>Derived <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiShader.htm">NiShader</a></span> objects
can also make use of the following internal functions to help
construct a texture pipeline.</p>

<p class="NDLRefMemberFunction">unsigned int
ConstructPipeline(<a href=
"../../Reference/NiMain/NiRenderCallContext.htm">NiRenderCallContext</a>&amp;
kRCC)</p>

<p class="NDLRefMemberDescription">Called by <span class=
"NDLSystemFont">UpdatePipeline</span>, this is the function that
actually constructs the texture pipeline based on the applied
properties and effects.</p>

<p class="NDLRefMemberFunction">void ClearProjectedTextures()</p>

<p class="NDLRefMemberDescription">This function clears the
arrays of stored projected textures.</p>

<p class="NDLRefMemberFunction">void
UpdateProjectedTextures(const <a href=
"../../Reference/NiMain/NiDynamicEffectState.htm">NiDynamicEffectState</a>*
pkEffects)</p>

<p class="NDLRefMemberDescription">This function detects and
stores any projected texture effects that will be needed in the
texture pipeline.</p>

<p class="NDLRefMemberFunction">bool SaveProjectedTexture(const
<a href=
"../../Reference/NiMain/NiTextureEffect.htm">NiTextureEffect</a>*
pkEffect, bool bClipped = false)</p>

<p class="NDLRefMemberDescription">This function, called by
<span class="NDLSystemFont">UpdateProjectedTextures</span>,
stores one texture effect for use in constructing the
pipeline.</p>

<p class="NDLRefMemberFunction">const <a href=
"../../Reference/NiMain/NiTextureEffect.htm">NiTextureEffect</a>*
GetClippedProjectedLight(unsigned int uiIndex) const</p>

<p class="NDLRefMemberFunction">const <a href=
"../../Reference/NiMain/NiTextureEffect.htm">NiTextureEffect</a>*
GetProjectedLight(unsigned int uiIndex) const</p>

<p class="NDLRefMemberFunction">const <a href=
"../../Reference/NiMain/NiTextureEffect.htm">NiTextureEffect</a>*
GetClippedProjectedShadow(unsigned int uiIndex) const</p>

<p class="NDLRefMemberFunction">const <a href=
"../../Reference/NiMain/NiTextureEffect.htm">NiTextureEffect</a>*
GetProjectedShadow(unsigned int uiIndex) const</p>

<p class="NDLRefMemberFunction">const <a href=
"../../Reference/NiMain/NiTextureEffect.htm">NiTextureEffect</a>*
GetEnvironmentMap(unsigned int uiIndex) const</p>

<p class="NDLRefMemberFunction">const <a href=
"../../Reference/NiMain/NiTextureEffect.htm">NiTextureEffect</a>*
GetFogMap(unsigned int uiIndex) const</p>

<p class="NDLRefMemberDescription">Returns the respective
projected texture effect with the given index.</p>

<p class="NDLRefMemberFunction">unsigned int
GetClippedProjectedLightCount() const</p>

<p class="NDLRefMemberFunction">unsigned int
GetProjectedLightCount() const</p>

<p class="NDLRefMemberFunction">unsigned int
GetClippedProjectedShadowCount() const</p>

<p class="NDLRefMemberFunction">unsigned int
GetProjectedShadowCount() const</p>

<p class="NDLRefMemberFunction">unsigned int
GetEnvironmentMapCount() const</p>

<p class="NDLRefMemberFunction">unsigned int GetFogMapCount()
const</p>

<p class="NDLRefMemberDescription">Returns the number of stored
projected texture effects of the desired type.</p>

<p class="NDLRefMemberFunction">void
PostProcessFogProperties(const <a href=
"../../Reference/NiMain/NiFogProperty.htm">NiFogProperty</a>*
pkFog, const <a href=
"../../Reference/NiMain/NiAlphaProperty.htm">NiAlphaProperty</a>*
pkAlpha, const <a href=
"../../Reference/NiMain/NiTexturingProperty_Map.htm">NiTexturingProperty::Map</a>*
pkBaseMap, NiTexturingProperty::ApplyMode eApply)</p>

<p class="NDLRefMemberDescription">Once the pipeline is
constructed, this function will modify the fog state for each
pass to ensure the final fog effect is consistent with all the
passes.</p>

<p class="NDLRefMemberFunction">void OpenNewPass(D3DBLEND
eSrcBlend = D3DBLEND_ONE, D3DBLEND eDestBlend = D3DBLEND_ZERO,
bool bReturnBaseTextureAlpha = false, bool
bReturnVertexColorAlpha = false)</p>

<p class="NDLRefMemberDescription">When constructing the
pipeline, this function will start a new pass and prepare it for
getting populated with texture stages. If a pass is already open,
this function will immediately return. The <span class=
"NDLSystemFont">eSrcBlend</span> and <span class=
"NDLSystemFont">eDestBlend</span> are used on each pass except
the first one to combine the pass with the previous passes
already in the color buffer. The next two parameters are used if
the object being rendered has an active <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMain/NiAlphaProperty.htm">NiAlphaProperty</a></span>
attached. They dictate whether the base texture and/or vertex
colors, respectively, are required to calculate the object's
alpha value. If necessary, the <span class=
"NDLSystemFont">NiD3DDefaultShader</span> will reserve a texture
stage at the end of the pass for the base texture so the pass can
output the correct alpha value.</p>

<p class="NDLRefMemberFunction">void ClosePass(const <a href=
"../../Reference/NiMain/NiTexturingProperty_Map.htm">NiTexturingProperty::Map</a>*
pkBaseMap = NULL)</p>

<p class="NDLRefMemberDescription">This function closes the
current pass for adding any more texture stages. If no pass is
open, this function will return immediately. If, during
<span class="NDLSystemFont">OpenNewPass</span>, the <span class=
"NDLSystemFont">NiD3DDefaultShader</span> reserved a texture
stage for the base texture, it will fill that in now using the
<span class="NDLSystemFont">pkBaseMap</span> parameter, if one
exists.</p>

<p class="NDLRefMemberFunction"><a href=
"NiD3DTextureStage.htm">NiD3DTextureStage</a>*
AddTextureStage(const <a href=
"../../Reference/NiMain/NiTexturingProperty_Map.htm">NiTexturingProperty::Map</a>*
pkMap, unsigned int uiIndex)</p>

<p class="NDLRefMemberFunction"><a href=
"NiD3DTextureStage.htm">NiD3DTextureStage</a>*
AddTextureStage(const <a href=
"../../Reference/NiMain/NiTexturingProperty_BumpMap.htm">NiTexturingProperty::BumpMap</a>*
pkMap, unsigned int uiIndex)</p>

<p class="NDLRefMemberFunction"><a href=
"NiD3DTextureStage.htm">NiD3DTextureStage</a>*
AddTextureStage(const <a href=
"../../Reference/NiMain/NiTextureEffect.htm">NiTextureEffect</a>*
pkEffect)</p>

<p class="NDLRefMemberFunction"><a href=
"NiD3DTextureStage.htm">NiD3DTextureStage</a>*
AddClipperStage(const <a href=
"../../Reference/NiMain/NiTextureEffect.htm">NiTextureEffect</a>*
pkEffect)</p>

<p class="NDLRefMemberDescription">These functions append a
stage, using the input map or effect, to the current pass. If no
pass is open, these functions will return immediately. The
<span class="NDLSystemFont">uiIndex</span> parameter indicates
the texture coordinate set that will be used with the texture; it
is important that this value not be greater than the number of
texture coordinate sets on the object itself.</p>

<p class="NDLRefMemberFunction">bool
IsCurrentCombineMode(D3DBLEND eSrcBlend, D3DBLEND eDestBlend)</p>

<p class="NDLRefMemberDescription">This function queries the
current open pass to determine if its combine mode matches the
values being passed in. The first pass will always return true,
since it has no combine mode. This function is useful in
determining if a texture stage can be placed in the current pass
or if it must go in a subsequent pass in order to produce the
correct effect.</p>

<p class="NDLRefHead1">Notes</p>

<p class="NDLRefHead2">Alpha Values in the Legacy Default
Pipeline</p>

<p>In order to simplify rendering and ensure consistency over
multipass effects, the <span class=
"NDLSystemFont">NiD3DDefaultShader</span> makes the following
assumptions:</p>

<ul>
    <li>Valid alpha values will only come from the base texture
    or from vertex colors</li>

    <li>Whenever possible, the result of every texture pass for a
    given object will contain the same alpha values.</li>
</ul>

<p>Note that this is a departure from the behavior of even
earlier versions of the engine, where alpha values from detail
maps and dark maps would affect the final alpha value of the
object. To enable the previous behavior, there is a line in
<span class="NDLSystemFont">NiD3DDefaultShader.h</span> that can
be uncommented that will define the value <span class=
"NDLSystemFont">D3D_NI42_TEXTURE_PIPELINE</span>. This will allow
legacy applications to continue to rely on the old behavior.</p>

<p class="NDLRefHead2">Multipass Fogging</p>

<p>The <span class="NDLSystemFont">NiD3DDefaultShader</span>
attempts to ensure that fogging behavior on objects that require
multiple passes are be correct. Objects that are alpha blended
can still lead to fogging artifacts, however, since they will
continue to write to the Z-buffer even where the alpha value is
0. Alpha testing can help in this situation, but artifacts can
still appear.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
