<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiD3DShaderProgram</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>


<p class="NDLRefHeadClassTitle">NiD3DShaderProgram</p>

<p class="NDLRefParentage">: public <a href="../../Reference/NiMain/NiGPUProgram.htm">NiGPUProgram</a></p>

<p class="NDLRefHeaderFile">&lt;NiD3DShaderProgram.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiShaderProgram</span> 
 is the base class for both D3D pixel and vertex shaders in the Gamebryo 
 shader system.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiD3DShaderProgram(NiD3DRenderer* pkRenderer, 
 <a href="../../Reference/NiMain/NiGPUProgram.htm#ProgramType">NiGPUProgram::ProgramType</a> 
 eType)</p>

<p class="NDLRefMemberDescription">The default constructor creates an initialized 
 <span class="NDLSystemFont">NiD3DShaderProgram</span> instance. 
 Rather than calling this constructor directly, applications should create 
 an <a HREF="NiD3DPixelShader.htm"><span class="NDLSystemFont">NiD3DPixelShader</span></a> 
 or <a HREF="NiD3DVertexShader.htm"><span class="NDLSystemFont">NiD3DVertexShader</span></a>.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">virtual const char* GetName()</p>

<p class="NDLRefMemberDescription">Returns the name associated with the shader 
 program.</p>

<p class="NDLRefMemberFunction">virtual void SetName(const char* pszName)</p>

<p class="NDLRefMemberDescription">Sets the name of the shader program.</p>

<p class="NDLRefMemberFunction">virtual const char* GetShaderProgramName()</p>

<p class="NDLRefMemberDescription">Returns the shader program file name.</p>

<p class="NDLRefMemberFunction">virtual void SetShaderProgramName(const char* 
 pszName)</p>

<p class="NDLRefMemberDescription">Sets the shader program file name.</p>

<p class="NDLRefMemberFunction">virtual unsigned int GetCodeSize()</p>

<p class="NDLRefMemberDescription">Returns the size of the code (NOTE: Currently, 
 this should not be used).</p>

<p class="NDLRefMemberFunction">virtual void* GetCode()</p>

<p class="NDLRefMemberDescription">Returns the pointer to the code (NOTE: 
 Currently, this should not be used).</p>

<p class="NDLRefMemberFunction">virtual void SetCode(unsigned int uiSize, 
 void* pvCode)</p>

<p class="NDLRefMemberDescription">Sets the size of the code, and pointer 
 to the code itself.</p>

<p class="NDLRefMemberFunction">virtual <a HREF="NiD3DShaderProgramCreator.htm">NiD3DShaderProgramCreator</a>* 
 GetCreator() const</p>

<p class="NDLRefMemberDescription">Gets the <span class="NDLSystemFont"><a 
 HREF="NiD3DShaderProgramCreator.htm">NiD3DShaderProgramCreator</a></span> 
 that was used to create this <span class="NDLSystemFont">NiD3DShaderProgram</span>.</p>

<p class="NDLRefMemberFunction">virtual void SetCreator(<a HREF="NiD3DShaderProgramCreator.htm">NiD3DShaderProgramCreator</a>* 
 pkCreator)</p>

<p class="NDLRefMemberDescription">Sets the <span class="NDLSystemFont"><a 
 HREF="NiD3DShaderProgramCreator.htm">NiD3DShaderProgramCreator</a></span> 
 that was used to create this <span class="NDLSystemFont">NiD3DShaderProgram</span>. 
 Note that this function should never be used by an application.</p>

<p class="NDLRefMemberFunction">virtual bool SetShaderConstant(<a href="../../Reference/NiMain/NiShaderConstantMap.htm">NiShaderConstantMapEntry</a>* 
 pkEntry, const void* pvDataSource = NULL, unsigned int uiRegisterCount 
 = 0)</p>

<p class="NDLRefMemberDescription">Allows the shader program to set the shader 
 constant described in <span class="NDLSystemFont">pkEntry</span>, using 
 the data in <span class="NDLSystemFont">pvDataSource</span> and the register 
 count in <span class="NDLSystemFont">uiRegisterCount</span>. If <span class="NDLSystemFont">pvDataSource</span> 
 is <span class="NDLSystemFont">NULL</span> or <span class="NDLSystemFont">uiRegisterCount</span> 
 is <span class="NDLSystemFont">0</span>, the function will use the appropriate 
 values from <span class="NDLSystemFont">pkEntry</span>. The function is 
 provided so that shader programs in different formats can set their constants 
 in a manner they expect.</p>

<p class="NDLRefMemberFunction">virtual bool SetShaderConstantArray(<a href="../../Reference/NiMain/NiShaderConstantMap.htm">NiShaderConstantMapEntry</a>* 
 pkEntry, const void* pvDataSource, unsigned int uiNumEntries, unsigned 
 int uiRegistersPerEntry, const unsigned short* pusReorderArray = NULL)</p>

<p class="NDLRefMemberDescription">Allows the shader program to set an array 
 of shader constants described in <span class="NDLSystemFont">pkEntry</span>, 
 using the data in <span class="NDLSystemFont">pvDataSource</span>, the number 
 of entries in <span class="NDLSystemFont">uiNumEntries</span>, the value 
 from <span class="NDLSystemFont">uiRegistersPerEntry</span>, and the array 
 <span class="NDLSystemFont">pusReorderArray</span>. The number of entries 
 corresponds directly to the number of values provided in <span class="NDLSystemFont">pvDataSource</span>, 
 and the number of registers per entry indicates how those entries will 
 be packed into registers. The reorder array allows the shader program 
 to take data that is in a contiguous block, and reorder the registers 
 according to how the shader program expects the data to be arranged. The 
 function is provided so that shader programs in different formats can 
 set their constants in a manner they expect.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
