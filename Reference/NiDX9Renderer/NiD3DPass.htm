<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiD3DPass</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiD3DPass</p>

<p class="NDLRefParentage">: public <a href=
"../../Reference/NiMain/NiRefObject.htm"><span>NiRefObject</span></a></p>

<p class="NDLRefHeaderFile">&lt;NiD3DPass.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiD3DPass</span> represents a
single rendering pass in D3D-based versions of the Gamebryo
rendering engine.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiD3DPass()</p>

<p class="NDLRefMemberDescription">The constructor initializes
members to the default state, and allocates the texture stage
array which the pass will utilize. In general, it is a good idea
to not directly create <span class=
"NDLSystemFont">NiD3DPass</span> objects, but to call
<span class="NDLSystemFont">CreateNewPass</span> to obtain a pass
from the pool of available passes.</p>

<p class="NDLRefHead1">Supported Static Member Functions</p>

<p class="NDLRefMemberFunction">static NiD3DPassPtr
CreateNewPass()</p>

<p class="NDLRefMemberDescription">This function will return an
<span class="NDLSystemFont">NiD3DPass</span> instance from the
pool of passes. This is provided to minimize memory
fragmentation. Note that the return value is an <span class=
"NDLSystemFont">NiSmartPointer</span> to an <span class=
"NDLSystemFont">NiD3DPass</span>; this means that any code that
calls this function must store the result in an <span class=
"NDLSystemFont">NiSmartPointer</span> as well, or the object will
be immediately deleted, and the resulting pointer will be
invalid.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">const char* GetName() const</p>

<p class="NDLRefMemberDescription">Returns the name associated
with the pass. This can be <span class=
"NDLSystemFont">NULL</span>.</p>

<p class="NDLRefMemberFunction">void SetName(char* pcName)</p>

<p class="NDLRefMemberDescription">Sets the name of the pass to
the given <span class="NDLSystemFont">pcName</span>. Pass names
are provided primarily to aid in debugging, as they allow easy
identification.</p>

<p class="NDLRefMemberFunction"><a href=
"NiD3DRenderStateGroup.htm">NiD3DRenderStateGroup</a>*
GetRenderStateGroup() const</p>

<p class="NDLRefMemberDescription">Returns the render state group
instance, <span class=
"NDLSystemFont">m_pkRenderStateGroup</span>, associated with the
pass.</p>

<p class="NDLRefMemberFunction">void SetRenderStateGroup(<a href=
"NiD3DRenderStateGroup.htm">NiD3DRenderStateGroup</a>*
pkRenderStateGroup)</p>

<p class="NDLRefMemberDescription">Sets the render state group
instance for the pass to the given <span class=
"NDLSystemFont">pkRenderStateGroup</span>.</p>

<p class="NDLRefMemberFunction">void SetRenderState(unsigned int
uiRenderState, unsigned int uiValue, bool bSave = false)</p>

<p class="NDLRefMemberDescription">Sets the given <span class=
"NDLSystemFont">uiRenderState</span> to the given <span class=
"NDLSystemFont">uiValue</span> for the pass. If <span class=
"NDLSystemFont">bSave</span> is <span class=
"NDLSystemFont">true</span>, the render state will be restored
upon completion of rendering the pass. This is added to the
render state group instance contained in the pass. If
<span class="NDLSystemFont">m_pkRenderStateGroup</span> is
<span class="NDLSystemFont">NULL</span> for the pass at the time
of the call, one is grabbed via the <span class=
"NDLSystemFont"><a href=
"NiD3DRenderStateGroup.htm">NiD3DRenderStateGroup</a>::GetFreeRenderStateGroup</span>
function. Note that the render state will be not be immediately
set on the device until the pass is run.</p>

<p class="NDLRefMemberFunction">bool RemoveRenderState(unsigned
int uiRenderState)</p>

<p class="NDLRefMemberDescription">Removes the given render
state, <span class="NDLSystemFont">uiRenderState</span>, from the
render state group.</p>

<p class="NDLRefMemberFunction">bool GetRenderState(unsigned int
uiRenderState, unsigned int&amp; uiValue, bool&amp; bSave)</p>

<p class="NDLRefMemberDescription">Retrieves the value set for
the given render state, <span class=
"NDLSystemFont">uiRenderState</span>, in the <span class=
"NDLSystemFont">uiValue</span> parameter. <span class=
"NDLSystemFont">bSave</span> will indicate whether the render
state is set to be restored upon completion of rendering the
pass. The function will return <span class=
"NDLSystemFont">true</span> if the state was found, <span class=
"NDLSystemFont">false</span> if it was not.</p>

<p class="NDLRefMemberFunction"><a href=
"NiD3DShaderConstantMap.htm">NiD3DShaderConstantMap</a>*
GetPixelConstantMap() const</p>

<p class="NDLRefMemberDescription">Returns the passes pixel
shader constant map instance, <span class=
"NDLSystemFont">m_spPixelConstantMap</span>.</p>

<p class="NDLRefMemberFunction">void SetPixelConstantMap(<a href=
"NiD3DShaderConstantMap.htm">NiD3DShaderConstantMap</a>*
pkSCMPixel)</p>

<p class="NDLRefMemberDescription">Sets the passes pixel shader
constant map instance to the given <span class=
"NDLSystemFont">pkSCMPixel</span>.</p>

<p class="NDLRefMemberFunction">const char*
GetPixelShaderProgramFileName()</p>

<p class="NDLRefMemberDescription">Returns the file name of the
pixel shader program file utilized in this pass.</p>

<p class="NDLRefMemberFunction">void
SetPixelShaderProgramFileName(const char* pcProgramFile)</p>

<p class="NDLRefMemberDescription">Sets the file name of the
pixel shader program file to use for this pass.</p>

<p class="NDLRefMemberFunction">const char*
GetPixelShaderProgramEntryPoint()</p>

<p class="NDLRefMemberDescription">Returns the entry point for
the pixel shader program utilized in this pass. This is only
valid for shader programs written in a high-level shader language
such as the DirectX HLSL.</p>

<p class="NDLRefMemberFunction">void
SetPixelShaderProgramEntryPoint(const char* pcEntryPoint)</p>

<p class="NDLRefMemberDescription">Sets the entry point for the
pixel shader program to use for this pass. This is only valid for
shader programs written in a high-level shader language such as
the DirectX HLSL.</p>

<p class="NDLRefMemberFunction">const char*
GetPixelShaderProgramShaderTarget()</p>

<p class="NDLRefMemberDescription">Returns the text representing
the shader target for the pixel shader program utilized in this
pass. Possible values for this include "ps_1_1", "ps_2_a", and
others listed in the DirectX documentation. This is only valid
for shader programs written in a high-level shader language such
as the DirectX HLSL.</p>

<p class="NDLRefMemberFunction">void
SetPixelShaderProgramEntryPoint(const char* pcEntryPoint)</p>

<p class="NDLRefMemberDescription">Sets the shader target for the
pixel shader program to use for this pass. Possible values for
this include "ps_1_1", "ps_2_a", and others listed in the DirectX
documentation. This is only valid for shader programs written in
a high-level shader language such as the DirectX HLSL.</p>

<p class="NDLRefMemberFunction"><a href=
"NiD3DPixelShader.htm">NiD3DPixelShader</a>* GetPixelShader()
const</p>

<p class="NDLRefMemberDescription">Retrieves the pixel shader
instance used in this pass.</p>

<p class="NDLRefMemberFunction">void SetPixelShader(<a href=
"NiD3DPixelShader.htm">NiD3DPixelShader</a>* pkPixelShader)</p>

<p class="NDLRefMemberDescription">Sets the pixel shader instance
for this pass.</p>

<p class="NDLRefMemberFunction"><a href=
"NiD3DShaderConstantMap.htm">NiD3DShaderConstantMap</a>*
GetVertexConstantMap() const</p>

<p class="NDLRefMemberDescription">Returns the passes vertex
shader constant map instance, <span class=
"NDLSystemFont">m_spVertexConstantMap</span>.</p>

<p class="NDLRefMemberFunction">void
SetVertexConstantMap(<a href="NiD3DShaderConstantMap.htm">NiD3DShaderConstantMap</a>*
pkSCMVertex)</p>

<p class="NDLRefMemberDescription">Sets the passes vertex shader
constant map instance to the given <span class=
"NDLSystemFont">pkSCMVertex</span>.</p>

<p class="NDLRefMemberFunction">const char*
GetVertexShaderProgramFileName()</p>

<p class="NDLRefMemberDescription">Returns the file name of the
vertex shader program file utilized in this pass.</p>

<p class="NDLRefMemberFunction">void
SetVertexShaderProgramFileName(const char* pcProgramFile)</p>

<p class="NDLRefMemberDescription">Sets the file name of the
vertex shader program file to use for this pass.</p>

<p class="NDLRefMemberFunction">const char*
GetVertexShaderProgramEntryPoint()</p>

<p class="NDLRefMemberDescription">Returns the entry point for
the pixel shader program utilized in this pass. This is only
valid for shader programs written in a high-level shader language
such as the DirectX HLSL.</p>

<p class="NDLRefMemberFunction">void
SetVertexShaderProgramEntryPoint(const char* pcEntryPoint)</p>

<p class="NDLRefMemberDescription">Sets the entry point for the
pixel shader program to use for this pass. This is only valid for
shader programs written in a high-level shader language such as
the DirectX HLSL.</p>

<p class="NDLRefMemberFunction">const char*
GetVertexShaderProgramShaderTarget()</p>

<p class="NDLRefMemberDescription">Returns the text representing
the shader target for the pixel shader program utilized in this
pass. Possible values for this include "ps_1_1", "ps_2_a", and
others listed in the DirectX documentation. This is only valid
for shader programs written in a high-level shader language such
as the DirectX HLSL.</p>

<p class="NDLRefMemberFunction">void
SetVertexShaderProgramEntryPoint(const char* pcEntryPoint)</p>

<p class="NDLRefMemberDescription">Sets the shader target for the
pixel shader program to use for this pass. Possible values for
this include "vs_1_1", "vs_2_a", and others listed in the DirectX
documentation. This is only valid for shader programs written in
a high-level shader language such as the DirectX HLSL.</p>

<p class="NDLRefMemberFunction"><a href=
"NiD3DVertexShader.htm">NiD3DVertexShader</a>* GetVertexShader()
const</p>

<p class="NDLRefMemberDescription">Retrieves the vertex shader
instance used in this pass.</p>

<p class="NDLRefMemberFunction">void SetVertexShader(<a href=
"NiD3DVertexShader.htm">NiD3DVertexShader</a>*
pkVertexShader)</p>

<p class="NDLRefMemberDescription">Sets the vertex shader
instance for this pass.</p>

<p class="NDLRefMemberFunction">unsigned int GetCurrentStage()
const</p>

<p class="NDLRefMemberDescription">Returns the current texture
stage being configured for this pass.</p>

<p class="NDLRefMemberFunction">unsigned int GetStageCount()
const</p>

<p class="NDLRefMemberDescription">Returns the number of texture
stages this pass utilized.</p>

<p class="NDLRefMemberFunction">unsigned int GetTextureCount()
const</p>

<p class="NDLRefMemberDescription">Returns the number of textures
used in this pass.</p>

<p class="NDLRefMemberFunction"><a href=
"NiD3DTextureStage.htm">NiD3DTextureStage</a>* GetStage(unsigned
int uiStageNum) const</p>

<p class="NDLRefMemberDescription">Returns the <span class=
"NDLSystemFont"><a href=
"NiD3DTextureStage.htm">NiD3DTextureStage</a></span> instance at
the given <span class="NDLSystemFont">uiStageNum</span>.</p>

<p class="NDLRefMemberFunction">NiD3DError SetStage(unsigned int
uiStageNum, <a href="NiD3DTextureStage.htm"><br>
NiD3DTextureStage</a>* pkStage)</p>

<p class="NDLRefMemberDescription">Sets the <span class=
"NDLSystemFont"><a href=
"NiD3DTextureStage.htm">NiD3DTextureStage</a></span> instance at
the given <span class="NDLSystemFont">uiStageNum</span> to the
given <span class="NDLSystemFont">pkStage</span>.</p>

<p class="NDLRefMemberFunction">NiD3DError AppendStage(<a href=
"NiD3DTextureStage.htm">NiD3DTextureStage</a>* pkStage)</p>

<p class="NDLRefMemberDescription">Sets the given <span class=
"NDLSystemFont">pkStage</span> at the current stage slot.</p>

<p class="NDLRefMemberFunction">virtual unsigned int
SetupShaderPrograms(<a href=
"../../Reference/NiMain/NiRenderCallContext.htm">NiRenderCallContext</a>&amp;
kRCC)</p>

<p class="NDLRefMemberDescription">This function is called by
<span class="NDLSystemFont"><a href=
"NiD3DShader.htm">NiD3DShader</a>::SetupShaderPrograms</span>. It
is responsible for setting the pixel shader and its corresponding
shader constants if they are present, or it sets the pixel shader
to 0. The vertex shader and its corresponding constants are then
set if they are present, otherwise, the FVF flags for the
geometry are set accordingly.</p>

<p class="NDLRefMemberFunction">virtual unsigned int
SetupRenderingPass(<a href=
"../../Reference/NiMain/NiRenderCallContext.htm">NiRenderCallContext</a>&amp;
kRCC)</p>

<p class="NDLRefMemberDescription">This function is called by
<span class=
"NDLSystemFont">NiD3DShader::SetupRenderingPass</span>. It is
responsible for setting the 'local' rendering states which are
contained in the passes <span class=
"NDLSystemFont">m_pkRenderStateGroup</span>. It will also step
through each stage in its texture stage array and configure them
via the function <span class="NDLSystemFont"><a href=
"NiD3DTextureStage.htm">NiD3DTextureStage</a>::ConfigureStage</span>.</p>

<p class="NDLRefMemberFunction">virtual unsigned int
PostProcessRenderingPass(unsigned int uiPass = 0)</p>

<p class="NDLRefMemberDescription">This function is called by the
<span class="NDLSystemFont"><a href=
"NiD3DShader.htm">NiD3DShader</a>::NextPass</span> function, and
is responsible for restoring any render states in the
<span class="NDLSystemFont">m_pkRenderStateGroup</span> which are
tagged as saved.</p>

<p class="NDLRefMemberFunction">bool IsPassEmpty() const</p>

<p class="NDLRefMemberDescription">Returns <span class=
"NDLSystemFont">true</span> if the stage count is 0, <span class=
"NDLSystemFont">false</span> otherwise. Used primarily by the
<span class="NDLSystemFont"><a href=
"NiD3DDefaultShader.htm">NiD3DDefaultShader</a></span> class.</p>

<p class="NDLRefMemberFunction">unsigned int ValidatePass()</p>

<p class="NDLRefMemberDescription">Currently not implemented.</p>

<p class="NDLRefMemberFunction">bool CheckFreeStages(unsigned int
uiStages = 1, unsigned int uiTextures = 1) const</p>

<p class="NDLRefMemberDescription">Returns <span class=
"NDLSystemFont">true</span> if there are enough stages and
texture slots left to allow for the given <span class=
"NDLSystemFont">uiStages</span> and <span class=
"NDLSystemFont">uiTextures</span> parameters. Used primarily by
the <span class="NDLSystemFont"><a href=
"NiD3DDefaultShader.htm">NiD3DDefaultShader</a></span> class.</p>

<p class="NDLRefMemberFunction">unsigned int GetAvailableStages()
const</p>

<p class="NDLRefMemberDescription">Returns the number of
available stages, <span class=
"NDLSystemFont">ms_uiMaxTextureBlendStages -
m_uiCurrentStage</span>. Used primarily by the <span class=
"NDLSystemFont"><a href=
"NiD3DDefaultShader.htm">NiD3DDefaultShader</a></span> class.</p>

<p class="NDLRefMemberFunction">unsigned int
GetAvailableTextures() const</p>

<p class="NDLRefMemberDescription">Returns the number of
available textures, <span class=
"NDLSystemFont">ms_uiMaxSimultaneousTextures -
m_uiTexturesPerPass</span>. Used primarily by the <span class=
"NDLSystemFont"><a href=
"NiD3DDefaultShader.htm">NiD3DDefaultShader</a></span> class.</p>

<p class="NDLRefMemberFunction">unsigned int
GetTotalAvailableStages() const</p>

<p class="NDLRefMemberDescription">Returns the number of
available stages, <span class=
"NDLSystemFont">ms_uiMaxTextureBlendStages -
m_uiStageCount</span>. Used primarily by the <span class=
"NDLSystemFont"><a href=
"NiD3DDefaultShader.htm">NiD3DDefaultShader</a></span> class.</p>

<p class="NDLRefMemberFunction">bool IsPassContiguous() const</p>

<p class="NDLRefMemberDescription">Returns <span class=
"NDLSystemFont">true</span> if the stage count is equal to the
current stage. Used primarily by the <span class=
"NDLSystemFont"><a href=
"NiD3DDefaultShader.htm">NiD3DDefaultShader</a></span> class.</p>

<p class="NDLRefMemberFunction">void ReleaseTextureStages()</p>

<p class="NDLRefMemberDescription">Releases all texture stages in
the array.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
