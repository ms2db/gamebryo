<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiD3DVertexShader</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>


<p class="NDLRefHeadClassTitle">NiD3DVertexShader</p>

<p class="NDLRefParentage">: public <a href="NiD3DShaderProgram.htm">NiD3DShaderProgram</a></p>

<p class="NDLRefHeaderFile">&lt;NiD3DVertexShader.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiD3DVertexShader</span> 
 is the shader program derivation for vertex shaders.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiVertexShader(<a HREF="NiDX9Renderer.htm">NiD3DRenderer</a>* 
 pkRenderer)</p>

<p class="NDLRefMemberDescription">The default constructor creates an initialized 
 <span class="NDLSystemFont">NiD3DVertexShader</span> 
 instance. </p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">virtual unsigned int GetUsage() const</p>

<p class="NDLRefMemberDescription">Returns the usage flag for this instance.</p>

<p class="NDLRefMemberFunction">virtual void SetUsage(unsigned int uiUsage)</p>

<p class="NDLRefMemberDescription">Sets the usage flag for this instance.</p>

<p class="NDLRefMemberFunction">virtual NiD3DVertexShaderHandle GetShaderHandle()</p>

<p class="NDLRefMemberDescription">Returns the <span class="NDLSystemFont">NiD3DVertexShaderHandle</span> 
 for the instance.</p>

<p class="NDLRefMemberFunction">virtual void SetShaderHandle(NiD3DVertexShaderHandle 
 hShader)</p>

<p class="NDLRefMemberDescription">Sets the <span class="NDLSystemFont">NiD3DVertexShaderHandle</span> 
 for the instance.</p>

<p class="NDLRefMemberFunction">virtual NiD3DVertexDeclaration GetVertexDeclaration() 
 const</p>

<p class="NDLRefMemberDescription">Returns the <span class="NDLSystemFont">NiD3DVertexDeclaration</span> 
 that was used to create the vertex shader.</p>

<p class="NDLRefMemberFunction">virtual void SetVertexDeclaration(NiD3DVertexDeclaration 
 hDecl)</p>

<p class="NDLRefMemberDescription">Sets the <span class="NDLSystemFont">NiD3DVertexDeclaration</span> 
 that was used to create the vertex shader.</p>

<p class="NDLRefMemberFunction">virtual void DestroyRendererData()</p>

<p class="NDLRefMemberDescription">Called when the renderer is being recreated, 
 this function will call <span class="NDLSystemFont"><a 
 HREF="NiDX9Renderer.htm">NiD3DRenderer</a>::PurgeVertexShader</span>, 
 which will release the device-specific data relative to the shader program.</p>

<p class="NDLRefMemberFunction">virtual void RecreateRendererData()</p>

<p class="NDLRefMemberDescription">Called when the renderer has completed 
 being recreated, this function will call <span class="NDLSystemFont"><a 
 HREF="NiDX9Renderer.htm">NiD3DRenderer</a>::RecreateVertexShader</span>, 
 which will restore the device-specific data relative to the shader program.</p>

<p class="NDLRefMemberFunction">virtual bool SetShaderConstant(<a href="../../Reference/NiMain/NiShaderConstantMap.htm">NiShaderConstantMapEntry</a>* 
 pkEntry, const void* pvDataSource = NULL, unsigned int uiRegisterCount 
 = 0)</p>

<p class="NDLRefMemberDescription">Allows the shader program to set the shader 
 constant described in <span class="NDLSystemFont">pkEntry</span>, using 
 the data in <span class="NDLSystemFont">pvDataSource</span> and the register 
 count in <span class="NDLSystemFont">uiRegisterCount</span>. If <span class="NDLSystemFont">pvDataSource</span> 
 is <span class="NDLSystemFont">NULL</span> or <span class="NDLSystemFont">uiRegisterCount</span> 
 is <span class="NDLSystemFont">0</span>, the function will use the appropriate 
 values from <span class="NDLSystemFont">pkEntry</span>. The function is 
 provided so that shader programs in different formats can set their constants 
 in a manner they expect.</p>

<p class="NDLRefMemberFunction">virtual bool SetShaderConstantArray(<a href="../../Reference/NiMain/NiShaderConstantMap.htm">NiShaderConstantMapEntry</a>* 
 pkEntry, const void* pvDataSource, unsigned int uiNumEntries, unsigned 
 int uiRegistersPerEntry, const unsigned short* pusReorderArray = NULL)</p>

<p class="NDLRefMemberDescription">Allows the shader program to set an array 
 of shader constants described in <span class="NDLSystemFont">pkEntry</span>, 
 using the data in <span class="NDLSystemFont">pvDataSource</span>, the number 
 of entries in <span class="NDLSystemFont">uiNumEntries</span>, the value 
 from <span class="NDLSystemFont">uiRegistersPerEntry</span>, and the array 
 <span class="NDLSystemFont">pusReorderArray</span>. The number of entries 
 corresponds directly to the number of values provided in <span class="NDLSystemFont">pvDataSource</span>, 
 and the number of registers per entry indicates how those entries will 
 be packed into registers. The reorder array allows the shader program 
 to take data that is in a contiguous block, and reorder the registers 
 according to how the shader program expects the data to be arranged. The 
 function is provided so that shader programs in different formats can 
 set their constants in a manner they expect.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
