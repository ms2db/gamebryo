<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiD3DShaderLibraryVersion</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiD3DShaderLibraryVersion</p>

<p class="NDLRefParentage">: public <a href=
"../../Reference/NiSystem/NiMemObject.htm">NiMemObject</a></p>

<p class="NDLRefHeaderFile">
&lt;NiD3DShaderLibraryVersion.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiD3DShaderLibraryVersion</span>
is a class that represents the versioning information to use
within the shader system. Each D3D-based renderer contains a
single instance of the class to supply the shader system with a
common access point for the information</p>

<p>The class is accessed through the Shader version information
functions of the D3D-based renderer, through the functions
described below.</p>

<p>The system versions of pixel and vertex shaders will be set
automatically by the renderer at creation time. If an application
is utilizing the user-defined versions in their shader
integration scheme, it should set the system user-defined version
immediately after creation of the renderer.</p>

<p><span class="NDLSystemFont"><a href=
"NiD3DShaderLibrary.htm">NiD3DShaderLibrary</a></span>-derived
classes should use this class to determine the shader versioning
information for the current run of their application.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiD3DShaderLibraryVersion()</p>

<p>The default constructor creates an uninitialized <span class=
"NDLSystemFont">NiD3DShaderLibraryVersion</span>. No application
should ever need to use this as the renderer creates the only
require instance at start up.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">void
SetSystemPixelShaderVersion(unsigned int uiVersion)</p>

<p class="NDLRefMemberDescription">Set the system pixel shader
version to the given <span class=
"NDLSystemFont">uiVersion</span>. Callers should use the
<span class="NDLSystemFont">D3DPS_VERSION</span> macro to form
this value. The renderer should be the only one to make this call
and it should be set to the maximum version supported by the
hardware.</p>

<p class="NDLRefMemberFunction">void
SetMinPixelShaderVersion(unsigned int uiVersion)</p>

<p class="NDLRefMemberDescription">Set the minimum pixel shader
version the system should allow to the given <span class=
"NDLSystemFont">uiVersion</span>.
Callers should use the <span class="NDLSystemFont">D3DPS_VERSION</span>
macro to form this value.</p>

<p class="NDLRefMemberFunction">void
SetPixelShaderVersionRequest(unsigned int uiVersion)</p>

<p class="NDLRefMemberDescription">Set the requested pixel shader
version the system should return to the given <span class=
"NDLSystemFont">uiVersion</span>.
Callers should use the <span class="NDLSystemFont">D3DPS_VERSION</span>
macro to form this value.</p>

<p class="NDLRefMemberFunction">void
SetSystemPixelShaderVersion(unsigned int uiMaj, unsigned int
uiMin)</p>

<p class="NDLRefMemberDescription">Set the system pixel shader
version to the given <span class="NDLSystemFont">uiMaj, uiMin</span>. The
function will use the <span class="NDLSystemFont">D3DPS_VERSION</span>
macro to form the combined value. The renderer should be the only
one to make this call and it should be set to the maximum version
supported by the hardware.</p>

<p class="NDLRefMemberFunction">void
SetMinPixelShaderVersion(unsigned int uiMaj, unsigned int
uiMin)</p>

<p class="NDLRefMemberDescription">Set the minimum pixel shader
version to the given <span class="NDLSystemFont">uiMaj, uiMin</span>. The
function will use the <span class="NDLSystemFont">D3DPS_VERSION</span>
macro to form the combined value.</p>

<p class="NDLRefMemberFunction">void
SetPixelShaderVersionRequest(unsigned int uiMaj, unsigned int
uiMin)</p>

<p class="NDLRefMemberDescription">Set the requested pixel shader
version to the given <span class="NDLSystemFont">uiMaj, uiMin</span>. The
function will use the <span class="NDLSystemFont">D3DPS_VERSION</span>
macro to form the combined value.</p>

<p class="NDLRefMemberFunction">void
SetSystemVertexShaderVersion(unsigned int uiVersion)</p>

<p class="NDLRefMemberDescription">Set the system vertex shader
version to the given <span class=
"NDLSystemFont">uiVersion</span>. Callers should use the
<span class="NDLSystemFont">D3DVS_VERSION</span> macro to form
this value. The renderer should be the only one to make this call
and it should be set to the maximum version supported by the
hardware.</p>

<p class="NDLRefMemberFunction">void
SetMinVertexShaderVersion(unsigned int uiVersion)</p>

<p class="NDLRefMemberDescription">Set the minimum vertex shader
version the system should allow to the given <span class=
"NDLSystemFont">uiVersion</span>. Callers should use the
<span class="NDLSystemFont">D3DVS_VERSION</span> macro to form
this value.</p>

<p class="NDLRefMemberFunction">void
SetVertexShaderVersionRequest(unsigned int uiVersion)</p>

<p class="NDLRefMemberDescription">Set the requested vertex
shader version the system should return to the given <span class=
"NDLSystemFont">uiVersion</span>. Callers should use the
<span class="NDLSystemFont">D3DVS_VERSION</span> macro to form
this value.</p>

<p class="NDLRefMemberFunction">void
SetSystemVertexShaderVersion(unsigned int uiMaj, unsigned int
uiMin)</p>

<p class="NDLRefMemberDescription">Set the system vertex shader
version to the given <span class="NDLSystemFont">uiMaj,
uiMin</span>. The function will use the <span class=
"NDLSystemFont">D3DVS_VERSION</span> macro to form the combined
value. The renderer should be the only one to make this call and
it should be set to the maximum version supported by the
hardware.</p>

<p class="NDLRefMemberFunction">void
SetMinVertexShaderVersion(unsigned int uiMaj, unsigned int
uiMin)</p>

<p class="NDLRefMemberDescription">Set the minimum vertex shader
version to the given <span class="NDLSystemFont">uiMaj,
uiMin</span>. The function will use the <span class=
"NDLSystemFont">D3DVS_VERSION</span> macro to form the combined
value.</p>

<p class="NDLRefMemberFunction">void
SetVertexShaderVersionRequest(unsigned int uiMaj, unsigned int
uiMin)</p>

<p class="NDLRefMemberDescription">Set the requested vertex
shader version to the given <span class="NDLSystemFont">uiMaj,
uiMin</span>. The function will use the <span class=
"NDLSystemFont">D3DVS_VERSION</span> macro to form the combined
value.</p>

<p class="NDLRefMemberFunction">void
SetSystemUserVersion(unsigned int uiVersion)</p>

<p class="NDLRefMemberDescription">Set the system user defined
version to the given <span class=
"NDLSystemFont">uiVersion</span>. Callers should use the
<span class="NDLSystemFont">D3DVS_VERSION</span> macro to form
this value. If the application uses the user-defined value as
part of their shader integration, this value should be set
immediately after creating the renderer.</p>

<p class="NDLRefMemberFunction">void SetMinUserVersion(unsigned
int uiVersion)</p>

<p class="NDLRefMemberDescription">Set the minimum user defined
version the system should allow to the given <span class=
"NDLSystemFont">uiVersion</span>. Callers should use the
<span class="NDLSystemFont">D3DVS_VERSION</span> macro to form
this value.</p>

<p class="NDLRefMemberFunction">void
SetUserVersionRequest(unsigned int uiVersion)</p>

<p class="NDLRefMemberDescription">Set the requested user defined
version the system should return to the given <span class=
"NDLSystemFont">uiVersion</span>. Callers should use the
<span class="NDLSystemFont">D3DVS_VERSION</span> macro to form
this value.</p>

<p class="NDLRefMemberFunction">void
SetSystemUserVersion(unsigned int uiMaj, unsigned int uiMin)</p>

<p class="NDLRefMemberDescription">Set the system user defined
version to the given <span class="NDLSystemFont">uiMaj,
uiMin</span>. The function will use the <span class=
"NDLSystemFont">D3DVS_VERSION</span> macro to form the combined
value. If the application uses the user-defined value as part of
their shader integration, this value should be set immediately
after creating the renderer.</p>

<p class="NDLRefMemberFunction">void SetMinUserVersion(unsigned
int uiMaj, unsigned int uiMin)</p>

<p class="NDLRefMemberDescription">Set the minimum user-defined
version to the given <span class="NDLSystemFont">uiMaj,
uiMin</span>. The function will use the <span class=
"NDLSystemFont">D3DVS_VERSION</span> macro to form the combined
value.</p>

<p class="NDLRefMemberFunction">void
SetUserVersionRequest(unsigned int uiMaj, unsigned int uiMin)</p>

<p class="NDLRefMemberDescription">Set the requested user-defined
version to the given <span class="NDLSystemFont">uiMaj,
uiMin</span>. The function will use the <span class=
"NDLSystemFont">D3DVS_VERSION</span> macro to form the combined
value.</p>

<p class="NDLRefMemberFunction">void SetPlatform(unsigned int
uiPlatform)</p>

<p class="NDLRefMemberDescription">Set the platform flag to the
given value, <span class="NDLSystemFont">uiPlatform</span>. This
should be one of the <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiShader.htm#Platform_Enumeration">NiShader::Platform</a></span>
enumeration values. (In most cases, you will only want to set the
flag for a single platform.) The renderer will call this at
creation.</p>

<p class="NDLRefMemberFunction">unsigned int
GetSystemPixelShaderVersion()</p>

<p class="NDLRefMemberDescription">Returns the system pixel
shader version currently set. Users should use the <span class=
"NDLSystemFont">D3DSHADER_VERSION_MAJOR</span> and <span class=
"NDLSystemFont">D3DSHADER_VERSION_MINOR</span> functions to
examine the results.</p>

<p class="NDLRefMemberFunction">unsigned int
GetMinPixelShaderVersion()</p>

<p class="NDLRefMemberDescription">Returns the minimum pixel
shader version currently set. Users should use the <span class=
"NDLSystemFont">D3DSHADER_VERSION_MAJOR</span> and <span class=
"NDLSystemFont">D3DSHADER_VERSION_MINOR</span> functions to
examine the results.</p>

<p class="NDLRefMemberFunction">unsigned int
GetPixelShaderVersionRequest()</p>

<p class="NDLRefMemberDescription">Returns the requested pixel
shader version currently set. Users should use the <span class=
"NDLSystemFont">D3DSHADER_VERSION_MAJOR</span> and <span class=
"NDLSystemFont">D3DSHADER_VERSION_MINOR</span> functions to
examine the results.</p>

<p class="NDLRefMemberFunction">unsigned int
GetSystemVertexShaderVersion()</p>

<p class="NDLRefMemberDescription">Returns the system vertex
shader version currently set. Users should use the <span class=
"NDLSystemFont">D3DSHADER_VERSION_MAJOR</span> and <span class=
"NDLSystemFont">D3DSHADER_VERSION_MINOR</span> functions to
examine the results.</p>

<p class="NDLRefMemberFunction">unsigned int
GetMinVertexShaderVersion()</p>

<p class="NDLRefMemberDescription">Returns the minimum vertex
shader version currently set. Users should use the <span class=
"NDLSystemFont">D3DSHADER_VERSION_MAJOR</span> and <span class=
"NDLSystemFont">D3DSHADER_VERSION_MINOR</span> functions to
examine the results.</p>

<p class="NDLRefMemberFunction">unsigned int
GetVertexShaderVersionRequest()</p>

<p class="NDLRefMemberDescription">Returns the requested vertex
shader version currently set. Users should use the <span class=
"NDLSystemFont">D3DSHADER_VERSION_MAJOR</span> and <span class=
"NDLSystemFont">D3DSHADER_VERSION_MINOR</span> functions to
examine the results.</p>

<p class="NDLRefMemberFunction">unsigned int
GetSystemUserVersion()</p>

<p class="NDLRefMemberDescription">Returns the system
user-defined version currently set. Users should use the
<span class="NDLSystemFont">D3DSHADER_VERSION_MAJOR</span> and
<span class="NDLSystemFont">D3DSHADER_VERSION_MINOR</span>
functions to examine the results.</p>

<p class="NDLRefMemberFunction">unsigned int
GetMinUserVersion()</p>

<p class="NDLRefMemberDescription">Returns the minimum
user-defined version currently set. Users should use the
<span class="NDLSystemFont">D3DSHADER_VERSION_MAJOR</span> and
<span class="NDLSystemFont">D3DSHADER_VERSION_MINOR</span>
functions to examine the results.</p>

<p class="NDLRefMemberFunction">unsigned int
GetUserVersionRequest()</p>

<p class="NDLRefMemberDescription">Returns the requested
user-defined version currently set. Users should use the
<span class="NDLSystemFont">D3DSHADER_VERSION_MAJOR</span> and
<span class="NDLSystemFont">D3DSHADER_VERSION_MINOR</span>
functions to examine the results.</p>

<p class="NDLRefMemberFunction">unsigned int GetPlatform()</p>

<p class="NDLRefMemberDescription">Return the current platform.
Will be a combination of the <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiShader.htm#Platform_Enumeration">NiShader::Platform</a></span>
enumeration values.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
