<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiDX9RenderState</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiDX9RenderState</p>

<p class="NDLRefParentage">: public <a href=
"../../Reference/NiMain/NiRefObject.htm">NiRefObject</a></p>

<p class="NDLRefHeaderFile">&lt;NiDX9RenderState.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>The <span class="NDLSystemFont">NiDX9RenderState</span> class
provides state tracking facilities to the setting of all
rendering states on a D3D device. This includes keeping track of
the current render state, vertex and pixel shaders, vertex
declaration, and each stage's current texture, texture stage
states, and sampler states. Many of these functions refer to
variable types that are defined in <a href=
"NiD3DDefines_h.htm">NiD3DDefines.h</a>.</p>

<p>This system allows the renderer to eliminate redundant state
changes and lets the application inform the renderer of state
changes made in an <span class="NDLSystemFont">NiShader</span>
instance. The application can also cause the renderer to save and
later restore the current state to ensure the rendering
properties are as expected when an <span class=
"NDLSystemFont">NiShader</span> is complete. To allow the
<span class="NDLSystemFont">NiDX9RenderState</span> to track the
render state values, all <span class=
"NDLSystemFont">NiShader</span> objects should make all
state-changing calls either through the <span class=
"NDLSystemFont">NiDX9RenderState</span> class or through an
appropriate helper class, such as <span class=
"NDLSystemFont">NiD3DRenderStateGroup</span> or <span class=
"NDLSystemFont">NiD3DTextureStageGroup</span>. In no circumstance
should an <span class="NDLSystemFont">NiShader</span> or
application make any of these calls directly through the
<span class="NDLSystemFont">IDirect3DDevice9</span>:</p>

<ul>
    <li><span class="NDLSystemFont">SetRenderState</span></li>

    <li><span class=
    "NDLSystemFont">SetTextureStageState</span></li>

    <li><span class="NDLSystemFont">SetSamplerState</span></li>

    <li><span class="NDLSystemFont">SetTexture</span></li>

    <li><span class="NDLSystemFont">SetPixelShader</span></li>

    <li><span class="NDLSystemFont">SetVertexShader</span></li>

    <li><span class="NDLSystemFont">SetFVF</span></li>

    <li><span class=
    "NDLSystemFont">SetVertexDeclaration</span></li>

    <li><span class=
    "NDLSystemFont">SetPixelShaderConstantF</span></li>

    <li><span class=
    "NDLSystemFont">SetPixelShaderConstantI</span></li>

    <li><span class=
    "NDLSystemFont">SetPixelShaderConstantB</span></li>

    <li><span class=
    "NDLSystemFont">SetVertexShaderConstantF</span></li>

    <li><span class=
    "NDLSystemFont">SetVertexShaderConstantI</span></li>

    <li><span class=
    "NDLSystemFont">SetVertexShaderConstantB</span></li>
</ul>

<p class="NDLRefHead1">Supported Static Member Functions</p>

<p class="NDLRefMemberFunction">static NiDX9RenderState*
Create(NiD3DRenderer* pkRenderer, const D3DCAPS9&amp; kD3DCaps9,
bool bZBuffer)</p>

<p class="NDLRefMemberDescription">This function creates an
instance of an <span class=
"NDLSystemFont">NiDX9RenderState</span>. Since the renderer
creates the default one automatically, no application should need
to use this function.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">void UpdateRenderState(const
<a href=
"../../Reference/NiMain/NiPropertyState.htm">NiPropertyState</a>*
pkNew)</p>

<p class="NDLRefMemberDescription">Updates the render states from
the <span class="NDLSystemFont">NiPropertyState</span> that is
passed in. The <span class=
"NDLSystemFont">NiD3DDefaultShader</span> calls this during
<span class="NDLSystemFont">PreProcessPipeline</span> to ensure
the render states for the object being drawn are correct. Derived
<span class="NDLSystemFont">NiShader</span> objects may choose to
use this to set up the render states for an object, but it is not
necessary if the <span class="NDLSystemFont">NiShader</span> sets
the appropriate render states itself.</p>

<p class="NDLRefMemberFunction">void ApplyAlpha(const <a href=
"../../Reference/NiMain/NiAlphaProperty.htm">NiAlphaProperty</a>*
pkNew)</p>

<p class="NDLRefMemberFunction">void ApplyDitherMode(const
<a href=
"../../Reference/NiMain/NiDitherProperty.htm">NiDitherProperty</a>*
pkNew)</p>

<p class="NDLRefMemberFunction">void ApplyFog(const <a href=
"../../Reference/NiMain/NiFogProperty.htm">NiFogProperty</a>*
pkNew)</p>

<p class="NDLRefMemberFunction">void ApplyMaterial(<a href=
"../../Reference/NiMain/NiMaterialProperty.htm">NiMaterialProperty</a>*
pkNew)</p>

<p class="NDLRefMemberFunction">void ApplyShading(const <a href=
"../../Reference/NiMain/NiShadeProperty.htm">NiShadeProperty</a>*
pkNew)</p>

<p class="NDLRefMemberFunction">void ApplySpecular(const <a href=
"../../Reference/NiMain/NiSpecularProperty.htm">NiSpecularProperty</a>*
pkNew)</p>

<p class="NDLRefMemberFunction">void ApplyStencil(const <a href=
"../../Reference/NiMain/NiStencilProperty.htm">NiStencilProperty</a>*
pkNew)</p>

<p class="NDLRefMemberFunction">void ApplyWireframe(const
<a href="../../Reference/NiMain/NiWireframeProperty.htm">NiWireframeProperty</a>*
pkNew)</p>

<p class="NDLRefMemberFunction">void ApplyZBuffer(const <a href=
"../../Reference/NiMain/NiZBufferProperty.htm">NiZBufferProperty</a>*
pkNew)</p>

<p class="NDLRefMemberDescription">Updates the render states for
the specific <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiProperty.htm">NiProperty</a></span>
that is passed in. <span class=
"NDLSystemFont">UpdateRenderState</span> calls each of these
functions in turn. If a derived <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMain/NiShader.htm">NiShader</a></span> wants
to set render states only for specific <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMain/NiProperty.htm">NiProperty</a></span>
objects in an object's <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiPropertyState.htm">NiPropertyState</a></span>,
it can call these functions directly.</p>

<p class="NDLRefMemberFunction">void DisableAlpha()</p>

<p class="NDLRefMemberDescription">Utility function to disable
alpha blending and testing render states.</p>

<p class="NDLRefMemberFunction">unsigned int
GetSrcAlphaCaps()</p>

<p class="NDLRefMemberFunction">unsigned int
GetDestAlphaCaps()</p>

<p class="NDLRefMemberDescription">Utility functions that return
a bitfield indicating the hardware capabilities for each of the
blend combine modes. If the hardware supports blend mode n, where
n is an <span class=
"NDLSystemFont">NiAlphaProperty::AlphaFunction</span>, then bit
(1 &lt;&lt; n) will be set.</p>

<p class="NDLRefMemberFunction">unsigned int
GetD3DBlendMode(NiAlphaProperty::AlphaFunction eBlend)</p>

<p class="NDLRefMemberDescription">Returns the <span class=
"NDLSystemFont">D3DBLEND</span> enumeration that corresponds to
the input <span class=
"NDLSystemFont">NiAlphaProperty::AlphaFunction</span>.</p>

<p class="NDLRefMemberFunction">unsigned int
GetD3DTestMode(NiAlphaProperty::TestFunction eTest)</p>

<p class="NDLRefMemberDescription">Returns the <span class=
"NDLSystemFont">D3DCMPFUNC</span> enumeration that corresponds to
the input <span class=
"NDLSystemFont">NiAlphaProperty::TestFunction</span>.</p>

<p class="NDLRefMemberFunction">void SetBoneCount(unsigned short
usNumBones)</p>

<p class="NDLRefMemberDescription">Sets the <span class=
"NDLSystemFont">D3DRS_VERTEXBLEND</span> render state with the
value appropriate for the number of bones passed in.</p>

<p class="NDLRefMemberFunction">void SetModelTransform(const
NiTransform&amp; kXform)</p>

<p class="NDLRefMemberDescription">Called by the <span class=
"NDLSystemFont"><a href=
"NiDX9Renderer.htm">NiDX9Renderer</a></span> functions that set
transforms, this function determines whether or not the
<span class="NDLSystemFont">D3DRS_NORMALIZENORMALS</span> render
state needs to be set. This function should not be called by an
application or <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiShader.htm">NiShader</a></span>
directly.</p>

<p class="NDLRefMemberFunction">void SetAntiAlias(bool bOn)</p>

<p class="NDLRefMemberDescription">Currently not implemented.
Full screen anti-aliasing can be enabled by requesting
multisampling during the <span class=
"NDLSystemFont">NiDX9Renderer::Create</span> function. Refer to
the <a href="Introduction_to_the_DX9Renderer.htm"><span class=
"NDLSystemFont">NiDX9Renderer</span></a> documentation for
details.</p>

<p class="NDLRefMemberFunction">float GetMaxFogValue()</p>

<p class="NDLRefMemberFunction">void SetMaxFogValue(float
fFogVal)</p>

<p class="NDLRefMemberDescription">Called by the <span class=
"NDLSystemFont"><a href=
"NiDX9Renderer.htm">NiDX9Renderer</a></span> functions with the
same name, these functions get and set the max fog density.</p>

<p class="NDLRefMemberFunction">float GetMaxFogFactor() const</p>

<p class="NDLRefMemberDescription">Retrieves a value derived from
the max fog value used for fogging calculations.</p>

<p class="NDLRefMemberFunction">void SetCameraNearAndFar(float
fNear, float fFar)</p>

<p class="NDLRefMemberFunction">void SetCameraNearAndFar(float
fNear, float fFar)</p>

<p class="NDLRefMemberDescription">Called by the <span class=
"NDLSystemFont"><a href=
"NiDX9Renderer.htm">NiDX9Renderer</a></span> function that sets
camera data, these functions get and set the camera near and far
plane values so the <span class=
"NDLSystemFont">NiDX9RenderState</span> can perform fogging
calculations. This function should not be called by an
application or <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiShader.htm">NiShader</a></span>
directly.</p>

<p class="NDLRefMemberFunction">bool GetLeftHanded()</p>

<p class="NDLRefMemberFunction">void SetLeftHanded(bool
bLeft)</p>

<p class="NDLRefMemberDescription">Called by the <span class=
"NDLSystemFont"><a href=
"NiDX9Renderer.htm">NiDX9Renderer</a></span> function that sets
camera data, these functions let the <span class=
"NDLSystemFont">NiD3DRenderState</span> be aware of whether the
renderer is drawing objects reflected right-to-left. This
function should not be called by an application or <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMain/NiShader.htm">NiShader</a></span>
directly.</p>

<p class="NDLRefMemberFunction">void PurgeMaterial(<a href=
"../../Reference/NiMain/NiMaterialProperty.htm">NiMaterialProperty</a>*
pkMaterial)</p>

<p class="NDLRefMemberDescription">Called by the <span class=
"NDLSystemFont">NiDX9Renderer</span>, this function causes a
given material to be purged from the <span class=
"NDLSystemFont">NiD3DRenderState</span>. This function should not
be called by an application or <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMain/NiShader.htm">NiShader</a></span>
directly.</p>

<p class="NDLRefMemberFunction">void InitRenderState()</p>

<p class="NDLRefMemberDescription">Initializes the known render
states and ensures the device render states match. This function
should not be called by an application or <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMain/NiShader.htm">NiShader</a></span>
directly.</p>

<p class="NDLRefMemberFunction">void SaveRenderState()</p>

<p class="NDLRefMemberDescription">Saves the current known value
of the entire render state. Note that there is only one save slot
available; repeated saves will save over the previous saved
value.</p>

<p class="NDLRefMemberFunction">void RestoreRenderState()</p>

<p class="NDLRefMemberDescription">Restores the entire render
state to the last saved values, or to the initial values if no
save has taken place.</p>

<p class="NDLRefMemberFunction">void
SetRenderState(D3DRENDERSTATETYPE eState, unsigned int uiValue,
bool bSave)</p>

<p class="NDLRefMemberFunction">void
SetRenderState(D3DRENDERSTATETYPE eState, unsigned int
uiValue)</p>

<p class="NDLRefMemberDescription">Sets the given render state,
<span class="NDLSystemFont">eState</span>, to the given value,
<span class="NDLSystemFont">dwValue</span>. In the first version,
if <span class="NDLSystemFont">bSave</span> is true, the render
state will be saved, and can be restored with a call to
<span class="NDLSystemFont">RestoreRenderState</span>. In the
second version, the render state is not saved. Note that when
saving, there is only one save slot available; repeated saves
will save over the previous saved value.</p>

<p class="NDLRefMemberFunction">unsigned int
GetRenderState(D3DRENDERSTATETYPE eState) const</p>

<p class="NDLRefMemberDescription">Returns the last known value
of the given render state, <span class=
"NDLSystemFont">eState</span>, which should match the current
state value on the device.</p>

<p class="NDLRefMemberFunction">void
RestoreRenderState(D3DRENDERSTATETYPE eState)</p>

<p class="NDLRefMemberDescription">Restores the given render
state, <span class="NDLSystemFont">eState</span>, to the last
saved value, or to the initial value if no save has taken
place.</p>

<p class="NDLRefMemberFunction">void InitShaderState()</p>

<p class="NDLRefMemberDescription">Initializes the known pixel
and vertex shader values to their D3D defaults and ensures the
device render states match. This function should not be called by
an application or <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiShader.htm">NiShader</a></span>
directly.</p>

<p class="NDLRefMemberFunction">void SaveShaderState()</p>

<p class="NDLRefMemberDescription">Saves the current known value
of the pixel and vertex shaders. Note that there is only one save
slot available; repeated saves will save over the previous saved
value.</p>

<p class="NDLRefMemberFunction">void RestoreShaderState()</p>

<p class="NDLRefMemberDescription">Restores the value of the
pixel and vertex shaders to the last saved values, or to the
initial values if no save has taken place.</p>

<p class="NDLRefMemberFunction">void
SetPixelShader(NiD3DPixelShaderHandle hShader, bool bSave =
false)</p>

<p class="NDLRefMemberDescription">Sets the pixel shader to the
given pixel shader handle, <span class=
"NDLSystemFont">hShader</span>. If <span class=
"NDLSystemFont">bSave</span> is true, the previously set shader
will be saved. Note that there is only one save slot available;
repeated saves will save over the previous saved value.</p>

<p class="NDLRefMemberFunction">NiD3DPixelShaderHandle
GetPixelShader() const</p>

<p class="NDLRefMemberDescription">Returns the last known value
of the active pixel shader, which should match the active pixel
shader on the device.</p>

<p class="NDLRefMemberFunction">void RestorePixelShader()</p>

<p class="NDLRefMemberDescription">Restores the pixel shader to
the last saved value, or to the initial value of no save has
taken place.</p>

<p class="NDLRefMemberFunction">void
ClearPixelShader(NiD3DPixelShaderHandle hShader)</p>

<p class="NDLRefMemberDescription">Removes the given pixel
shader, if it is active on the device.</p>

<p class="NDLRefMemberFunction">void
SetVertexShader(NiD3DVertexShaderHandle hShader, bool bSave =
false)</p>

<p class="NDLRefMemberDescription">Sets the vertex shader to the
given vertex shader handle, <span class=
"NDLSystemFont">hShader</span>. If <span class=
"NDLSystemFont">bSave</span> is true, the previously set shader
will be saved. Note that there is only one save slot available;
repeated saves will save over the previous saved value.</p>

<p class="NDLRefMemberFunction">NiD3DVertexShaderHandle
GetVertexShader() const</p>

<p class="NDLRefMemberDescription">Returns the last known value
of the active vertex shader, which should match the active vertex
shader on the device.</p>

<p class="NDLRefMemberFunction">void RestoreVertexShader()</p>

<p class="NDLRefMemberDescription">Restores the vertex shader to
the last saved value, or to the initial value of no save has
taken place.</p>

<p class="NDLRefMemberFunction">void
ClearVertexShader(NiD3DVertexShaderHandle hShader)</p>

<p class="NDLRefMemberDescription">Removes the given vertex
shader, if it is active on the device.</p>

<p class="NDLRefMemberFunction">void SetFVF(unsigned int uiFVF,
bool bSave = false)</p>

<p class="NDLRefMemberDescription">Sets the flexible vertex
format flags to the given value. Under DX9, the FVF flags and the
vertex declaration are mutually exclusive; either can be used,
but setting one will clear the other. If <span class=
"NDLSystemFont">bSave</span> is true, the previously set flags
will be saved. Note that there is only one save slot available;
repeated saves will save over the previous saved value.</p>

<p class="NDLRefMemberFunction">unsigned int GetFVF() const</p>

<p class="NDLRefMemberDescription">Returns the last known value
of the active FVF flags, which should match the active FVF on the
device. Under DX9, the FVF flags and the vertex declaration are
mutually exclusive; either can be used, but setting one will
clear the other. If current vertex type was most recently set by
<span class="NDLSystemFont">SetVertexDeclaration</span> or
<span class="NDLSystemFont">RestoreVertexDeclaration</span>,
<span class="NDLSystemFont">GetFVF</span> will return 0.</p>

<p class="NDLRefMemberFunction">void RestoreFVF()</p>

<p class="NDLRefMemberDescription">Restores the FVF flags to the
last saved value, or to the initial value of no save has taken
place. Under DX9, the FVF flags and the vertex declaration are
mutually exclusive; either can be used, but setting one will
clear the other.</p>

<p class="NDLRefMemberFunction">void ClearFVF(unsigned int
uiFVF)</p>

<p class="NDLRefMemberDescription">Removes the given set of FVF
flags, if it is active on the device. Under DX9, the FVF flags
and the vertex declaration are mutually exclusive; either can be
used, but setting one will clear the other. If current vertex
type was most recently set by <span class=
"NDLSystemFont">SetVertexDeclaration</span> or <span class=
"NDLSystemFont">RestoreVertexDeclaration</span>, <span class=
"NDLSystemFont">ClearFVF</span> will do nothing.</p>

<p class="NDLRefMemberFunction">void
SetDeclaration(NiD3DVertexDeclaration hDeclaration, bool bSave =
false)</p>

<p class="NDLRefMemberDescription">Sets the vertex declaration to
the given value. Under DX9, the FVF flags and the vertex
declaration are mutually exclusive; either can be used, but
setting one will clear the other. If <span class=
"NDLSystemFont">bSave</span> is true, the previously set flags
will be saved. Note that there is only one save slot available;
repeated saves will save over the previous saved value.</p>

<p class="NDLRefMemberFunction">NiD3DVertexDeclaration
GetDeclaration() const</p>

<p class="NDLRefMemberDescription">Returns the last known value
of the active vertex declaration, which should match the active
vertex declaration on the device. Under DX9, the FVF flags and
the vertex declaration are mutually exclusive; either can be
used, but setting one will clear the other. If current vertex
type was most recently set by <span class=
"NDLSystemFont">SetFVF</span> or <span class=
"NDLSystemFont">RestoreFVF</span>, <span class=
"NDLSystemFont">GetVertexDeclaration</span> will return 0.</p>

<p class="NDLRefMemberFunction">void RestoreDeclaration()</p>

<p class="NDLRefMemberDescription">Restores the vertex
declaration to the last saved value, or to the initial value of
no save has taken place. Under DX9, the FVF flags and the vertex
declaration are mutually exclusive; either can be used, but
setting one will clear the other.</p>

<p class="NDLRefMemberFunction">void
ClearDeclaration(NiD3DVertexDeclaration hDeclaration)</p>

<p class="NDLRefMemberDescription">Removes the given vertex
declaration, if it is active on the device. Under DX9, the FVF
flags and the vertex declaration are mutually exclusive; either
can be used, but setting one will clear the other. If current
vertex type was most recently set by <span class=
"NDLSystemFont">SetFVF</span> or <span class=
"NDLSystemFont">RestoreFVF</span>, <span class=
"NDLSystemFont">ClearVertexDeclaration</span> will do
nothing.</p>

<p class="NDLRefMemberFunction">void InitTextureStageState()</p>

<p class="NDLRefMemberDescription">Initializes the known texture
stage state values to their DX defaults for all stages and
ensures the device render states match. This function should not
be called by an application or <span class=
"NDLSystemFont">NiShader</span> directly.</p>

<p class="NDLRefMemberFunction">void SaveTextureStageState()</p>

<p class="NDLRefMemberDescription">Saves the current known value
of the entire texture stage state for all stages. Note that there
is only one save slot available; repeated saves will save over
the previous saved value.</p>

<p class="NDLRefMemberFunction">void
RestoreTextureStageState()</p>

<p class="NDLRefMemberDescription">Restores the entire texture
stage state for all stages to the last saved values, or to the
initial values if no save has taken place.</p>

<p class="NDLRefMemberFunction">void
SetTextureStageState(unsigned int uiStage,
D3DTEXTURESTAGESTATETYPE eState, unsigned int uiValue, bool
bSave)</p>

<p class="NDLRefMemberFunction">void
SetTextureStageState(unsigned int uiStage,
D3DTEXTURESTAGESTATETYPE eState, unsigned int uiValue)</p>

<p class="NDLRefMemberDescription">Sets the texture stage state
value, <span class="NDLSystemFont">dwValue</span>, for the given
texture stage state, <span class="NDLSystemFont">eState</span>,
for the given stage, <span class="NDLSystemFont">uiStage</span>.
In the first version, f <span class="NDLSystemFont">bSave</span>
is true, the previously set state will be saved. In the second
version, the texture stage state is not saved. Note that there is
only one save slot available; repeated saves will save over the
previous saved value.</p>

<p class="NDLRefMemberFunction">unsigned int
GetTextureStageState(unsigned int uiStage,
D3DTEXTURESTAGESTATETYPE eState) const</p>

<p class="NDLRefMemberDescription">Returns the last known value
of the given texture stage state, <span class=
"NDLSystemFont">eState</span>, and the given <span class=
"NDLSystemFont">stage</span>, uiStage, which should match the
current state value on the device.</p>

<p class="NDLRefMemberFunction">void
RestoreTextureStageState(unsigned int uiStage,
D3DTEXTURESTAGESTATETYPE eState)</p>

<p class="NDLRefMemberDescription">Restores the state for the
given texture stage state, <span class=
"NDLSystemFont">eState</span>, and the given stage, <span class=
"NDLSystemFont">uiStage</span>, to the last saved value. If no
save has taken place, the initial value is restored.</p>

<p class="NDLRefMemberFunction">void SetSamplerState(unsigned int
uiStage, NiD3DSamplerState eState, unsigned int uiValue, bool
bSave)</p>

<p class="NDLRefMemberFunction">void SetSamplerState(unsigned int
uiStage, NiD3DSamplerState eState, unsigned int uiValue)</p>

<p class="NDLRefMemberDescription">Sets the sampler state value,
<span class="NDLSystemFont">dwValue</span>, for the given sampler
state, <span class="NDLSystemFont">eState</span>, for the given
stage, <span class="NDLSystemFont">uiStage</span>. In the first
version, if <span class="NDLSystemFont">bSave</span> is true, the
previously set states will be saved. In the second version, the
sampler state is not saved. Note that there is only one save slot
available; repeated saves will save over the previous saved
value. This version of <span class=
"NDLSystemFont">SetSamplerState</span> is deprecated; for best
performance, you should prefer the version that uses the
<span class="NDLSystemFont">D3DSAMPLERSTATETYPE</span>
parameter.</p>

<p class="NDLRefMemberFunction">unsigned int
GetSamplerState(unsigned int uiStage, NiD3DSamplerState
eState)</p>

<p class="NDLRefMemberDescription">Returns the last known value
of the given samplerstate, <span class=
"NDLSystemFont">eState</span>, and the given stage, <span class=
"NDLSystemFont">uiStage</span>, which should match the current
state value on the device. This version of <span class=
"NDLSystemFont">GetSamplerState</span> is deprecated; for best
performance, you should prefer the version that uses the
<span class="NDLSystemFont">D3DSAMPLERSTATETYPE</span>
parameter.</p>

<p class="NDLRefMemberFunction">void RestoreSamplerState(unsigned
int uiStage, NiD3DSamplerState eState)</p>

<p class="NDLRefMemberDescription">Restores the state for the
given sampler state, <span class="NDLSystemFont">eState</span>,
and the given stage, <span class="NDLSystemFont">uiStage</span>,
to the last saved value. If no save has taken place, the initial
value is restored. This version of <span class=
"NDLSystemFont">RestoreSamplerState</span> is deprecated; for
best performance, you should prefer the version that uses the
<span class="NDLSystemFont">D3DSAMPLERSTATETYPE</span>
parameter.</p>

<p class="NDLRefMemberFunction">void SetSamplerState(unsigned int
uiStage, D3DSAMPLERSTATETYPE eState, unsigned int uiValue, bool
bSave)</p>

<p class="NDLRefMemberFunction">void SetSamplerState(unsigned int
uiStage, D3DSAMPLERSTATETYPE eState, unsigned int uiValue)</p>

<p class="NDLRefMemberDescription">Sets the sampler state value,
<span class="NDLSystemFont">dwValue</span>, for the given sampler
state, <span class="NDLSystemFont">eState</span>, for the given
stage, <span class="NDLSystemFont">uiStage</span>. In the first
version, if <span class="NDLSystemFont">bSave</span> is true, the
previously set shader will be saved. In the second version, the
sampler state is not saved. Note that there is only one save slot
available; repeated saves will save over the previous saved
value.</p>

<p class="NDLRefMemberFunction">unsigned int
GetSamplerState(unsigned int uiStage, D3DSAMPLERSTATETYPE
eState)</p>

<p class="NDLRefMemberDescription">Returns the last known value
of the given <span class=
"NDLSystemFont">D3DSAMPLERSTATETYPE</span> <span class=
"NDLSystemFont">eState</span>, and the given stage, <span class=
"NDLSystemFont">uiStage</span>, which should match the current
state value on the device.</p>

<p class="NDLRefMemberFunction">void RestoreSamplerState(unsigned
int uiStage, D3DSAMPLERSTATETYPE eState)</p>

<p class="NDLRefMemberDescription">Restores the state for the
given <span class="NDLSystemFont">D3DSAMPLERSTATETYPE</span>
<span class="NDLSystemFont">eState</span>, and the given stage,
<span class="NDLSystemFont">uiStage</span>, to the last saved
value. If no save has taken place, the initial value is
restored.</p>

<p class="NDLRefMemberFunction">void InitTextures()</p>

<p class="NDLRefMemberDescription">Initializes the known texture
values to their D3D defaults for all stages.</p>

<p class="NDLRefMemberFunction">void SetTexture(unsigned int
uiStage, D3DBaseTexturePtr pkTexture)</p>

<p class="NDLRefMemberDescription">Sets the given texture stage,
<span class="NDLSystemFont">uiStage</span>, texture to the given
texture, <span class="NDLSystemFont">pkTexture</span>. Note that
there is not an option to save the last known texture; the
renderer will always check a new texture against the current
known texture before rendering. To ensure that the correct
texture is loaded in a subsequent rendering pass, the application
can set the texture to NULL.</p>

<p class="NDLRefMemberFunction">D3DBaseTexturePtr
GetTexture(unsigned int uiStage)</p>

<p class="NDLRefMemberDescription">Returns the texture currently
applied to the given texture stage.</p>

<p class="NDLRefMemberFunction">void
ClearTexture(D3DBaseTexturePtr pkTexture)</p>

<p class="NDLRefMemberDescription">Removes the texture, if it is
active in any of the stages of the device.</p>

<p class="NDLRefMemberFunction">bool
SetVertexShaderConstantB(unsigned int uiStartRegister, const
BOOL* pbConstantData, unsigned int uiBoolCount, bool bSave =
false)</p>

<p class="NDLRefMemberDescription">Sets the set of Boolean vertex
shader constant registers, beginning with <span class=
"NDLSystemFont">uiStartRegister</span> and continuing for
<span class="NDLSystemFont">uiBoolCount</span> registers, to the
data in the <span class="NDLSystemFont">pbConstantData</span>
array. If <span class="NDLSystemFont">bSave</span> is true, the
values previously set in the Boolean vertex shader constant
registers will be saved. Note that since Boolean vertex shader
constants are only available under DX9, that is the only renderer
for which this function will do anything. The function returns
<span class="NDLSystemFont">true</span> on success, and
<span class="NDLSystemFont">false</span> if the requested
registers are not valid.</p>

<p class="NDLRefMemberFunction">bool
GetVertexShaderConstantB(unsigned int uiStartRegister, BOOL*
pbConstantData, unsigned int uiBoolCount)</p>

<p class="NDLRefMemberDescription">Returns the current values of
the Boolean vertex shader constant registers, beginning with
<span class="NDLSystemFont">uiStartRegister</span> and continuing
for <span class="NDLSystemFont">uiBoolCount</span> registers, in
the <span class="NDLSystemFont">pbConstantData</span> array. Note
that since Boolean vertex shader constants are only available
under DX9, that is the only renderer for which this function will
do anything. The function returns <span class=
"NDLSystemFont">true</span> on success, and <span class=
"NDLSystemFont">false</span> if the requested registers are not
valid or if they have not yet been set.</p>

<p class="NDLRefMemberFunction">bool
RestoreVertexShaderConstantB(unsigned int uiStartRegister,
unsigned int uiBoolCount)</p>

<p class="NDLRefMemberDescription">Restores the set of Boolean
vertex shader constant registers, beginning with <span class=
"NDLSystemFont">uiStartRegister</span> and continuing for
<span class="NDLSystemFont">uiBoolCount</span> registers, The
function returns <span class="NDLSystemFont">true</span> on
success, and <span class="NDLSystemFont">false</span> if the
requested registers are not valid or no value has been saved for
them.</p>

<p class="NDLRefMemberFunction">bool
SetVertexShaderConstantF(unsigned int uiStartRegister, const
float* pfConstantData, unsigned int uiFloat4Count, bool bSave =
false)</p>

<p class="NDLRefMemberDescription">Sets the set of floating point
vertex shader constant registers, beginning with <span class=
"NDLSystemFont">uiStartRegister</span> and continuing for
<span class="NDLSystemFont">uiFloat4Count</span> registers, to
the data in the <span class="NDLSystemFont">pfConstantData</span>
array. If <span class="NDLSystemFont">bSave</span> is true, the
values previously set in the floating point vertex shader
constant registers will be saved. The function returns
<span class="NDLSystemFont">true</span> on success, and
<span class="NDLSystemFont">false</span> if the requested
registers are not valid.</p>

<p class="NDLRefMemberFunction">bool
GetVertexShaderConstantF(unsigned int uiStartRegister, float*
pfConstantData, unsigned int uiFloat4Count)</p>

<p class="NDLRefMemberDescription">Returns the current values of
the floating point vertex shader constant registers, beginning
with <span class="NDLSystemFont">uiStartRegister</span> and
continuing for <span class="NDLSystemFont">uiFloat4Count</span>
registers, in the <span class=
"NDLSystemFont">pfConstantData</span> array. The function returns
<span class="NDLSystemFont">true</span> on success, and
<span class="NDLSystemFont">false</span> if the requested
registers are not valid or if they have not yet been set.</p>

<p class="NDLRefMemberFunction">bool
RestoreVertexShaderConstantF(unsigned int uiStartRegister,
unsigned int uiFloat4Count)</p>

<p class="NDLRefMemberDescription">Restores the set of floating
point vertex shader constant registers, beginning with
<span class="NDLSystemFont">uiStartRegister</span> and continuing
for <span class="NDLSystemFont">uiFloat4Count</span> registers,
The function returns <span class="NDLSystemFont">true</span> on
success, and <span class="NDLSystemFont">false</span> if the
requested registers are not valid or no value has been saved for
them.</p>

<p class="NDLRefMemberFunction">bool
SetVertexShaderConstantI(unsigned int uiStartRegister, const int*
piConstantData, unsigned int uiInt4Count, bool bSave = false)</p>

<p class="NDLRefMemberDescription">Sets the set of integer vertex
shader constant registers, beginning with <span class=
"NDLSystemFont">uiStartRegister</span> and continuing for
<span class="NDLSystemFont">uiInt4Count</span> registers, to the
data in the <span class="NDLSystemFont">piConstantData</span>
array. If <span class="NDLSystemFont">bSave</span> is true, the
values previously set in the integer vertex shader constant
registers will be saved. Note that since integer vertex shader
constants are only available under DX9, that is the only renderer
for which this function will do anything. The function returns
<span class="NDLSystemFont">true</span> on success, and
<span class="NDLSystemFont">false</span> if the requested
registers are not valid.</p>

<p class="NDLRefMemberFunction">bool
GetVertexShaderConstantI(unsigned int uiStartRegister, int*
piConstantData, unsigned int uiInt4Count)</p>

<p class="NDLRefMemberDescription">Returns the current values of
the integer vertex shader constant registers, beginning with
<span class="NDLSystemFont">uiStartRegister</span> and continuing
for <span class="NDLSystemFont">uiInt4Count</span> registers, in
the <span class="NDLSystemFont">piConstantData</span> array. Note
that since integer vertex shader constants are only available
under DX9, that is the only renderer for which this function will
do anything. The function returns <span class=
"NDLSystemFont">true</span> on success, and <span class=
"NDLSystemFont">false</span> if the requested registers are not
valid or if they have not yet been set.</p>

<p class="NDLRefMemberFunction">bool
RestoreVertexShaderConstantI(unsigned int uiStartRegister,
unsigned int uiInt4Count)</p>

<p class="NDLRefMemberDescription">Restores the set of integer
vertex shader constant registers, beginning with <span class=
"NDLSystemFont">uiStartRegister</span> and continuing for
<span class="NDLSystemFont">uiInt4Count</span> registers, The
function returns <span class="NDLSystemFont">true</span> on
success, and <span class="NDLSystemFont">false</span> if the
requested registers are not valid or no value has been saved for
them.</p>

<p class="NDLRefMemberFunction">bool
SetVertexShaderConstant(unsigned int uiStartRegister, const
float* pfConstantData, unsigned int uiFloat4Count, bool bSave =
false)</p>

<p class="NDLRefMemberDescription">Sets the set of floating point
vertex shader constant registers, beginning with <span class=
"NDLSystemFont">uiStartRegister</span> and continuing for
<span class="NDLSystemFont">uiFloat4Count</span> registers, to
the data in the <span class="NDLSystemFont">pfConstantData</span>
array. If <span class="NDLSystemFont">bSave</span> is true, the
values previously set in the floating point vertex shader
constant registers will be saved. The function returns
<span class="NDLSystemFont">true</span> on success, and
<span class="NDLSystemFont">false</span> if the requested
registers are not valid.</p>

<p class="NDLRefMemberFunction">bool
GetVertexShaderConstant(unsigned int uiStartRegister, float*
pfConstantData, unsigned int uiFloat4Count)</p>

<p class="NDLRefMemberDescription">Returns the current values of
the floating point vertex shader constant registers, beginning
with <span class="NDLSystemFont">uiStartRegister</span> and
continuing for <span class="NDLSystemFont">uiFloat4Count</span>
registers, in the <span class=
"NDLSystemFont">pfConstantData</span> array. The function returns
<span class="NDLSystemFont">true</span> on success, and
<span class="NDLSystemFont">false</span> if the requested
registers are not valid or if they have not yet been set.</p>

<p class="NDLRefMemberFunction">bool
RestoreVertexShaderConstant(unsigned int uiStartRegister,
unsigned int uiFloat4Count)</p>

<p class="NDLRefMemberDescription">Restores the set of floating
point vertex shader constant registers, beginning with
<span class="NDLSystemFont">uiStartRegister</span> and continuing
for <span class="NDLSystemFont">uiFloat4Count</span> registers,
The function returns <span class="NDLSystemFont">true</span> on
success, and <span class="NDLSystemFont">false</span> if the
requested registers are not valid or no value has been saved for
them.</p>

<p class="NDLRefMemberFunction">bool
SetPixelShaderConstantB(unsigned int uiStartRegister, const BOOL*
pbConstantData, unsigned int uiBoolCount, bool bSave = false)</p>

<p class="NDLRefMemberDescription">Sets the set of Boolean pixel
shader constant registers, beginning with <span class=
"NDLSystemFont">uiStartRegister</span> and continuing for
<span class="NDLSystemFont">uiBoolCount</span> registers, to the
data in the <span class="NDLSystemFont">pbConstantData</span>
array. If <span class="NDLSystemFont">bSave</span> is true, the
values previously set in the Boolean pixel shader constant
registers will be saved. Note that since Boolean pixel shader
constants are only available under DX9, that is the only renderer
for which this function will do anything. The function returns
<span class="NDLSystemFont">true</span> on success, and
<span class="NDLSystemFont">false</span> if the requested
registers are not valid.</p>

<p class="NDLRefMemberFunction">bool
GetPixelShaderConstantB(unsigned int uiStartRegister, BOOL*
pbConstantData, unsigned int uiBoolCount)</p>

<p class="NDLRefMemberDescription">Returns the current values of
the Boolean pixel shader constant registers, beginning with
<span class="NDLSystemFont">uiStartRegister</span> and continuing
for <span class="NDLSystemFont">uiBoolCount</span> registers, in
the <span class="NDLSystemFont">pbConstantData</span> array. Note
that since Boolean pixel shader constants are only available
under DX9, that is the only renderer for which this function will
do anything. The function returns <span class=
"NDLSystemFont">true</span> on success, and <span class=
"NDLSystemFont">false</span> if the requested registers are not
valid or if they have not yet been set.</p>

<p class="NDLRefMemberFunction">bool
RestorePixelShaderConstantB(unsigned int uiStartRegister,
unsigned int uiBoolCount)</p>

<p class="NDLRefMemberDescription">Restores the set of Boolean
pixel shader constant registers, beginning with <span class=
"NDLSystemFont">uiStartRegister</span> and continuing for
<span class="NDLSystemFont">uiBoolCount</span> registers, The
function returns <span class="NDLSystemFont">true</span> on
success, and <span class="NDLSystemFont">false</span> if the
requested registers are not valid or no value has been saved for
them.</p>

<p class="NDLRefMemberFunction">bool
SetPixelShaderConstantF(unsigned int uiStartRegister, const
float* pfConstantData, unsigned int uiFloat4Count, bool bSave =
false)</p>

<p class="NDLRefMemberDescription">Sets the set of floating point
pixel shader constant registers, beginning with <span class=
"NDLSystemFont">uiStartRegister</span> and continuing for
<span class="NDLSystemFont">uiFloat4Count</span> registers, to
the data in the <span class="NDLSystemFont">pfConstantData</span>
array. If <span class="NDLSystemFont">bSave</span> is true, the
values previously set in the floating point pixel shader constant
registers will be saved. The function returns <span class=
"NDLSystemFont">true</span> on success, and <span class=
"NDLSystemFont">false</span> if the requested registers are not
valid.</p>

<p class="NDLRefMemberFunction">bool
GetPixelShaderConstantF(unsigned int uiStartRegister, float*
pfConstantData, unsigned int uiFloat4Count)</p>

<p class="NDLRefMemberDescription">Returns the current values of
the floating point pixel shader constant registers, beginning
with <span class="NDLSystemFont">uiStartRegister</span> and
continuing for <span class="NDLSystemFont">uiFloat4Count</span>
registers, in the <span class=
"NDLSystemFont">pfConstantData</span> array. The function returns
<span class="NDLSystemFont">true</span> on success, and
<span class="NDLSystemFont">false</span> if the requested
registers are not valid or if they have not yet been set.</p>

<p class="NDLRefMemberFunction">bool
RestorePixelShaderConstantF(unsigned int uiStartRegister,
unsigned int uiFloat4Count)</p>

<p class="NDLRefMemberDescription">Restores the set of floating
point pixel shader constant registers, beginning with
<span class="NDLSystemFont">uiStartRegister</span> and continuing
for <span class="NDLSystemFont">uiFloat4Count</span> registers,
The function returns <span class="NDLSystemFont">true</span> on
success, and <span class="NDLSystemFont">false</span> if the
requested registers are not valid or no value has been saved for
them.</p>

<p class="NDLRefMemberFunction">bool
SetPixelShaderConstantI(unsigned int uiStartRegister, const int*
piConstantData, unsigned int uiInt4Count, bool bSave = false)</p>

<p class="NDLRefMemberDescription">Sets the set of integer pixel
shader constant registers, beginning with <span class=
"NDLSystemFont">uiStartRegister</span> and continuing for
<span class="NDLSystemFont">uiInt4Count</span> registers, to the
data in the <span class="NDLSystemFont">piConstantData</span>
array. If <span class="NDLSystemFont">bSave</span> is true, the
values previously set in the integer pixel shader constant
registers will be saved. Note that since integer pixel shader
constants are only available under DX9, that is the only renderer
for which this function will do anything. The function returns
<span class="NDLSystemFont">true</span> on success, and
<span class="NDLSystemFont">false</span> if the requested
registers are not valid.</p>

<p class="NDLRefMemberFunction">bool
GetPixelShaderConstantI(unsigned int uiStartRegister, int*
piConstantData, unsigned int uiInt4Count)</p>

<p class="NDLRefMemberDescription">Returns the current values of
the integer pixel shader constant registers, beginning with
<span class="NDLSystemFont">uiStartRegister</span> and continuing
for <span class="NDLSystemFont">uiInt4Count</span> registers, in
the <span class="NDLSystemFont">piConstantData</span> array. Note
that since integer pixel shader constants are only available
under DX9, that is the only renderer for which this function will
do anything. The function returns <span class=
"NDLSystemFont">true</span> on success, and <span class=
"NDLSystemFont">false</span> if the requested registers are not
valid or if they have not yet been set.</p>

<p class="NDLRefMemberFunction">bool
RestorePixelShaderConstantI(unsigned int uiStartRegister,
unsigned int uiInt4Count)</p>

<p class="NDLRefMemberDescription">Restores the set of integer
pixel shader constant registers, beginning with <span class=
"NDLSystemFont">uiStartRegister</span> and continuing for
<span class="NDLSystemFont">uiInt4Count</span> registers, The
function returns <span class="NDLSystemFont">true</span> on
success, and <span class="NDLSystemFont">false</span> if the
requested registers are not valid or no value has been saved for
them.</p>

<p class="NDLRefMemberFunction">bool
SetPixelShaderConstant(unsigned int uiStartRegister, const float*
pfConstantData, unsigned int uiFloat4Count, bool bSave =
false)</p>

<p class="NDLRefMemberDescription">Sets the set of floating point
pixel shader constant registers, beginning with <span class=
"NDLSystemFont">uiStartRegister</span> and continuing for
<span class="NDLSystemFont">uiFloat4Count</span> registers, to
the data in the <span class="NDLSystemFont">pfConstantData</span>
array. If <span class="NDLSystemFont">bSave</span> is true, the
values previously set in the floating point pixel shader constant
registers will be saved. The function returns <span class=
"NDLSystemFont">true</span> on success, and <span class=
"NDLSystemFont">false</span> if the requested registers are not
valid.</p>

<p class="NDLRefMemberFunction">bool
GetPixelShaderConstant(unsigned int uiStartRegister, float*
pfConstantData, unsigned int uiFloat4Count)</p>

<p class="NDLRefMemberDescription">Returns the current values of
the floating point pixel shader constant registers, beginning
with <span class="NDLSystemFont">uiStartRegister</span> and
continuing for <span class="NDLSystemFont">uiFloat4Count</span>
registers, in the <span class=
"NDLSystemFont">pfConstantData</span> array. The function returns
<span class="NDLSystemFont">true</span> on success, and
<span class="NDLSystemFont">false</span> if the requested
registers are not valid or if they have not yet been set.</p>

<p class="NDLRefMemberFunction">bool
RestorePixelShaderConstant(unsigned int uiStartRegister, unsigned
int uiFloat4Count)</p>

<p class="NDLRefMemberDescription">Restores the set of floating
point pixel shader constant registers, beginning with
<span class="NDLSystemFont">uiStartRegister</span> and continuing
for <span class="NDLSystemFont">uiFloat4Count</span> registers,
The function returns <span class="NDLSystemFont">true</span> on
success, and <span class="NDLSystemFont">false</span> if the
requested registers are not valid or no value has been saved for
them.</p>

<p class="NDLRefMemberFunction">void
FastOverwriteVertexShaderConstantB(unsigned int uiStartRegister,
const BOOL* pbConstantData, unsigned int uiBoolCount)</p>

<p class="NDLRefMemberDescription">Sets a group of Boolean vertex
shader constants without updating the dirty flags. When used in
conjunction with <span class=
"NDLSystemFont">MarkVertexShaderConstantsDirtyB</span>, this can
be useful when an application will be setting a large number of
shader constants and it would prefer to mark the constants as
dirty once rather than after each shader constant is set. This
function can be dangerous if used incorrectly, so use
<span class="NDLSystemFont">SetVertexShaderConstantB</span> if
there is any uncertainly.</p>

<p class="NDLRefMemberFunction">void
MarkVertexShaderConstantsDirtyB(unsigned int
uiFirstDirtyRegister, unsigned int uiFirstCleanRegister)</p>

<p class="NDLRefMemberDescription">Marks a group of Boolean
vertex shader constants as dirty. When used in conjunction with
<span class=
"NDLSystemFont">FastOverwriteVertexShaderConstantsB</span>, this
can be useful when an application will be setting a large number
of shader constants and it would prefer to mark the constants as
dirty once rather than after each shader constant is set. This
function can be dangerous if used incorrectly, so use
<span class="NDLSystemFont">SetVertexShaderConstantB</span> if
there is any uncertainly.</p>

<p class="NDLRefMemberFunction">void
FastOverwriteVertexShaderConstantF(unsigned int uiStartRegister,
const float* pfConstantData, unsigned uiFloat4Count)</p>

<p class="NDLRefMemberDescription">Sets a group of floating-point
vertex shader constants without updating the dirty flags. When
used in conjunction with <span class=
"NDLSystemFont">MarkVertexShaderConstantsDirtyF</span>, this can
be useful when an application will be setting a large number of
shader constants and it would prefer to mark the constants as
dirty once rather than after each shader constant is set. This
function can be dangerous if used incorrectly, so use
<span class="NDLSystemFont">SetVertexShaderConstantF</span> if
there is any uncertainly.</p>

<p class="NDLRefMemberFunction">void
MarkVertexShaderConstantsDirtyF(unsigned int
uiFirstDirtyRegister, unsigned int uiFirstCleanRegister)</p>

<p class="NDLRefMemberDescription">Marks a group of
floating-point vertex shader constants as dirty. When used in
conjunction with <span class=
"NDLSystemFont">FastOverwriteVertexShaderConstantsF</span> this
can be useful when an application will be setting a large number
of shader constants and it would prefer to mark the constants as
dirty once rather than after each shader constant is set. This
function can be dangerous if used incorrectly, so use
<span class="NDLSystemFont">SetVertexShaderConstantF</span> if
there is any uncertainly.</p>

<p class="NDLRefMemberFunction">void
FastOverwriteVertexShaderConstantI(unsigned int uiStartRegister,
const int* piConstantData, unsigned int uiInt4Count)</p>

<p class="NDLRefMemberDescription">Sets a group of integer vertex
shader constants without updating the dirty flags. When used in
conjunction with <span class=
"NDLSystemFont">MarkVertexShaderConstantsDirtyI</span>, this can
be useful when an application will be setting a large number of
shader constants and it would prefer to mark the constants as
dirty once rather than after each shader constant is set. This
function can be dangerous if used incorrectly, so use
<span class="NDLSystemFont">SetVertexShaderConstantI</span> if
there is any uncertainly.</p>

<p class="NDLRefMemberFunction">void
MarkVertexShaderConstantsDirtyI(unsigned int
uiFirstDirtyRegister, unsigned int uiFirstCleanRegister)</p>

<p class="NDLRefMemberDescription">Marks a group of integer
vertex shader constants as dirty. When used in conjunction with
<span class=
"NDLSystemFont">FastOverwriteVertexShaderConstantsI</span> this
can be useful when an application will be setting a large number
of shader constants and it would prefer to mark the constants as
dirty once rather than after each shader constant is set. This
function can be dangerous if used incorrectly, so use
<span class="NDLSystemFont">SetVertexShaderConstantI</span> if
there is any uncertainly.</p>

<p class="NDLRefMemberFunction">void
FastOverwritePixelShaderConstantB(unsigned int uiStartRegister,
const BOOL* pbConstantData, unsigned int uiBoolCount)</p>

<p class="NDLRefMemberDescription">Sets a group of Boolean pixel
shader constants without updating the dirty flags. When used in
conjunction with <span class=
"NDLSystemFont">MarkVertexPixelConstantsDirtyB</span>, this can
be useful when an application will be setting a large number of
shader constants and it would prefer to mark the constants as
dirty once rather than after each shader constant is set. This
function can be dangerous if used incorrectly, so use
<span class="NDLSystemFont">SetPixelShaderConstantB</span> if
there is any uncertainly.</p>

<p class="NDLRefMemberFunction">void
MarkPixelShaderConstantsDirtyB(unsigned int uiFirstDirtyRegister,
unsigned int uiFirstCleanRegister)</p>

<p class="NDLRefMemberDescription">Marks a group of Boolean pixel
shader constants as dirty. When used in conjunction with
<span class=
"NDLSystemFont">FastOverwritePixelShaderConstantsB</span>, this
can be useful when an application will be setting a large number
of shader constants and it would prefer to mark the constants as
dirty once rather than after each shader constant is set. This
function can be dangerous if used incorrectly, so use
<span class="NDLSystemFont">SetPixelShaderConstantB</span> if
there is any uncertainly.</p>

<p class="NDLRefMemberFunction">void
FastOverwritePixelShaderConstantF(unsigned int uiStartRegister,
const float* pfConstantData, unsigned uiFloat4Count)</p>

<p class="NDLRefMemberDescription">Sets a group of floating-point
pixel shader constants without updating the dirty flags. When
used in conjunction with <span class=
"NDLSystemFont">MarkVertexPixelConstantsDirtyF</span>, this can
be useful when an application will be setting a large number of
shader constants and it would prefer to mark the constants as
dirty once rather than after each shader constant is set. This
function can be dangerous if used incorrectly, so use
<span class="NDLSystemFont">SetPixelShaderConstantF</span> if
there is any uncertainly.</p>

<p class="NDLRefMemberFunction">void
MarkPixelShaderConstantsDirtyF(unsigned int uiFirstDirtyRegister,
unsigned int uiFirstCleanRegister)</p>

<p class="NDLRefMemberDescription">Marks a group of
floating-point pixel shader constants as dirty. When used in
conjunction with <span class=
"NDLSystemFont">FastOverwritePixelShaderConstantsF</span>, this
can be useful when an application will be setting a large number
of shader constants and it would prefer to mark the constants as
dirty once rather than after each shader constant is set. This
function can be dangerous if used incorrectly, so use
<span class="NDLSystemFont">SetPixelShaderConstantF</span> if
there is any uncertainly.</p>

<p class="NDLRefMemberFunction">void
FastOverwritePixelShaderConstantI(unsigned int uiStartRegister,
const int* piConstantData, unsigned int uiInt4Count)</p>

<p class="NDLRefMemberDescription">Sets a group of integer pixel
shader constants without updating the dirty flags. When used in
conjunction with <span class=
"NDLSystemFont">MarkVertexPixelConstantsDirtyI</span>, this can
be useful when an application will be setting a large number of
shader constants and it would prefer to mark the constants as
dirty once rather than after each shader constant is set. This
function can be dangerous if used incorrectly, so use
<span class="NDLSystemFont">SetPixelShaderConstantI</span> if
there is any uncertainly.</p>

<p class="NDLRefMemberFunction">void
MarkPixelShaderConstantsDirtyI(unsigned int uiFirstDirtyRegister,
unsigned int uiFirstCleanRegister)</p>

<p class="NDLRefMemberDescription">Marks a group of integer pixel
shader constants as dirty. When used in conjunction with
<span class=
"NDLSystemFont">FastOverwritePixelShaderConstantsI</span>, this
can be useful when an application will be setting a large number
of shader constants and it would prefer to mark the constants as
dirty once rather than after each shader constant is set. This
function can be dangerous if used incorrectly, so use
<span class="NDLSystemFont">SetPixelShaderConstantI</span> if
there is any uncertainly.</p>

<p class="NDLRefMemberFunction">void
SetForceNormalizeNormals(bool bSet)</p>

<p class="NDLRefMemberDescription">Sets a flag that forces the
renderer to always normalize any normals it encounters, even if
the renderer determines that the normals don't need
re-normalization. This calculation will often reduce performance,
but may be useful to eliminate lighting artifacts in some rare
circumstances.</p>

<p class="NDLRefMemberFunction">bool GetForceNormalizeNormals()
const</p>

<p class="NDLRefMemberDescription">Returns the value of a flag
that forces the renderer to always normalize any normals it
encounters.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
