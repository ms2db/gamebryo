<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiDX9ShaderConstantManager</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiDX9ShaderConstantManager</p>

<p class="NDLRefParentage">: public <a href=
"../../Reference/NiMain/NiRefObject.htm">NiRefObject</a></p>

<p class="NDLRefHeaderFile">
&lt;NiDX9ShaderConstantManager.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiDX9ShaderConstantManager</span>
is the interface through which applications and <span class=
"NDLSystemFont"><a href=
"NiD3DShader.htm">NiD3DShader</a></span>-derived objects can set
vertex and pixel shader constants in DX9. By using this
interface, calls to set shader constants will be batched, so they
will only be called once per frame.</p>

<p>The <span class="NDLSystemFont"><a href=
"NiDX9RenderState.htm">NiDX9RenderState</a></span> functions that
set vertex and pixel shader constants also make use of this
interface. Users are encouraged to use the <span class=
"NDLSystemFont"><a href=
"NiDX9RenderState.htm">NiDX9RenderState</a></span> functions
instead of their <span class=
"NDLSystemFont">NiDX9ShaderConstantManager</span> counterparts,
in order to keep the interface for setting state on the device
consistent.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">bool
SetVertexShaderConstantB(unsigned int uiStartRegister, const
BOOL* pbConstantData, unsigned int uiBoolCount, bool bSave)</p>

<p class="NDLRefMemberFunction">bool
SetVertexShaderConstantB(unsigned int uiStartRegister, const
BOOL* pbConstantData, unsigned int uiBoolCount)</p>

<p class="NDLRefMemberDescription">Sets the set of Boolean vertex
shader constant registers, beginning with <span class=
"NDLSystemFont">uiStartRegister</span> and continuing for
<span class="NDLSystemFont">uiBoolCount</span> registers, to the
data in the <span class="NDLSystemFont">pbConstantData</span>
array. In the first version, if <span class=
"NDLSystemFont">bSave</span> is true, the values previously set
in the Boolean vertex shader constant registers will be saved. In
the second version, no shader constants will be saved. The
function returns <span class="NDLSystemFont">true</span> on
success, and <span class="NDLSystemFont">false</span> if the
requested registers are not valid.</p>

<p class="NDLRefMemberFunction">bool
GetVertexShaderConstantB(unsigned int uiStartRegister, BOOL*
pbConstantData, unsigned int uiBoolCount)</p>

<p class="NDLRefMemberDescription">Returns the current values of
the Boolean vertex shader constant registers, beginning with
<span class="NDLSystemFont">uiStartRegister</span> and continuing
for <span class="NDLSystemFont">uiBoolCount</span> registers, in
the <span class="NDLSystemFont">pbConstantData</span> array. The
function returns <span class="NDLSystemFont">true</span> on
success, and <span class="NDLSystemFont">false</span> if the
requested registers are not valid or if they have not yet been
set.</p>

<p class="NDLRefMemberFunction">bool
RestoreVertexShaderConstantB(unsigned int uiStartRegister,
unsigned int uiBoolCount)</p>

<p class="NDLRefMemberDescription">Restores the set of Boolean
vertex shader constant registers, beginning with <span class=
"NDLSystemFont">uiStartRegister</span> and continuing for
<span class="NDLSystemFont">uiBoolCount</span> registers, The
function returns <span class="NDLSystemFont">true</span> on
success, and <span class="NDLSystemFont">false</span> if the
requested registers are not valid or no value has been saved for
them.</p>

<p class="NDLRefMemberFunction">bool
SetVertexShaderConstantF(unsigned int uiStartRegister, const
float* pfConstantData, unsigned int uiFloat4Count, bool
bSave)</p>

<p class="NDLRefMemberFunction">bool
SetVertexShaderConstantF(unsigned int uiStartRegister, const
float* pfConstantData, unsigned int uiFloat4Count)</p>

<p class="NDLRefMemberDescription">Sets the set of floating point
vertex shader constant registers, beginning with <span class=
"NDLSystemFont">uiStartRegister</span> and continuing for
<span class="NDLSystemFont">uiFloat4Count</span> registers, to
the data in the <span class="NDLSystemFont">pfConstantData</span>
array. In the first version, if <span class=
"NDLSystemFont">bSave</span> is true, the values previously set
in the floating point vertex shader constant registers will be
saved. In the second version, no shader constants will be saved.
The function returns <span class="NDLSystemFont">true</span> on
success, and <span class="NDLSystemFont">false</span> if the
requested registers are not valid.</p>

<p class="NDLRefMemberFunction">bool
GetVertexShaderConstantF(unsigned int uiStartRegister, float*
pfConstantData, unsigned int uiFloat4Count)</p>

<p class="NDLRefMemberDescription">Returns the current values of
the floating point vertex shader constant registers, beginning
with <span class="NDLSystemFont">uiStartRegister</span> and
continuing for <span class="NDLSystemFont">uiFloat4Count</span>
registers, in the <span class=
"NDLSystemFont">pfConstantData</span> array. The function returns
<span class="NDLSystemFont">true</span> on success, and
<span class="NDLSystemFont">false</span> if the requested
registers are not valid or if they have not yet been set.</p>

<p class="NDLRefMemberFunction">bool
RestoreVertexShaderConstantF(unsigned int uiStartRegister,
unsigned int uiFloat4Count)</p>

<p class="NDLRefMemberDescription">Restores the set of floating
point vertex shader constant registers, beginning with
<span class="NDLSystemFont">uiStartRegister</span> and continuing
for <span class="NDLSystemFont">uiFloat4Count</span> registers,
The function returns <span class="NDLSystemFont">true</span> on
success, and <span class="NDLSystemFont">false</span> if the
requested registers are not valid or no value has been saved for
them.</p>

<p class="NDLRefMemberFunction">bool
SetVertexShaderConstantI(unsigned int uiStartRegister, const int*
piConstantData, unsigned int uiInt4Count, bool bSave)</p>

<p class="NDLRefMemberFunction">bool
SetVertexShaderConstantI(unsigned int uiStartRegister, const int*
piConstantData, unsigned int uiInt4Count)</p>

<p class="NDLRefMemberDescription">Sets the set of integer vertex
shader constant registers, beginning with <span class=
"NDLSystemFont">uiStartRegister</span> and continuing for
<span class="NDLSystemFont">uiInt4Count</span> registers, to the
data in the <span class="NDLSystemFont">piConstantData</span>
array. In the first version, if <span class=
"NDLSystemFont">bSave</span> is true, the values previously set
in the integer vertex shader constant registers will be saved. In
the second version, no shader constants will be saved. The
function returns <span class="NDLSystemFont">true</span> on
success, and <span class="NDLSystemFont">false</span> if the
requested registers are not valid.</p>

<p class="NDLRefMemberFunction">bool
GetVertexShaderConstantI(unsigned int uiStartRegister, int*
piConstantData, unsigned int uiInt4Count)</p>

<p class="NDLRefMemberDescription">Returns the current values of
the integer vertex shader constant registers, beginning with
<span class="NDLSystemFont">uiStartRegister</span> and continuing
for <span class="NDLSystemFont">uiInt4Count</span> registers, in
the <span class="NDLSystemFont">piConstantData</span> array. The
function returns <span class="NDLSystemFont">true</span> on
success, and <span class="NDLSystemFont">false</span> if the
requested registers are not valid or if they have not yet been
set.</p>

<p class="NDLRefMemberFunction">bool
RestoreVertexShaderConstantI(unsigned int uiStartRegister,
unsigned int uiInt4Count)</p>

<p class="NDLRefMemberDescription">Restores the set of integer
vertex shader constant registers, beginning with <span class=
"NDLSystemFont">uiStartRegister</span> and continuing for
<span class="NDLSystemFont">uiInt4Count</span> registers, The
function returns <span class="NDLSystemFont">true</span> on
success, and <span class="NDLSystemFont">false</span> if the
requested registers are not valid or no value has been saved for
them.</p>

<p class="NDLRefMemberFunction">bool
SetPixelShaderConstantB(unsigned int uiStartRegister, const BOOL*
pbConstantData, unsigned int uiBoolCount, bool bSave)</p>

<p class="NDLRefMemberFunction">bool
SetPixelShaderConstantB(unsigned int uiStartRegister, const BOOL*
pbConstantData, unsigned int uiBoolCount)</p>

<p class="NDLRefMemberDescription">Sets the set of Boolean pixel
shader constant registers, beginning with <span class=
"NDLSystemFont">uiStartRegister</span> and continuing for
<span class="NDLSystemFont">uiBoolCount</span> registers, to the
data in the <span class="NDLSystemFont">pbConstantData</span>
array. In the first version, if <span class=
"NDLSystemFont">bSave</span> is true, the values previously set
in the Boolean pixel shader constant registers will be saved. In
the second version, no shader constants will be saved. The
function returns <span class="NDLSystemFont">true</span> on
success, and <span class="NDLSystemFont">false</span> if the
requested registers are not valid.</p>

<p class="NDLRefMemberFunction">bool
GetPixelShaderConstantB(unsigned int uiStartRegister, BOOL*
pbConstantData, unsigned int uiBoolCount)</p>

<p class="NDLRefMemberDescription">Returns the current values of
the Boolean pixel shader constant registers, beginning with
<span class="NDLSystemFont">uiStartRegister</span> and continuing
for <span class="NDLSystemFont">uiBoolCount</span> registers, in
the <span class="NDLSystemFont">pbConstantData</span> array. The
function returns <span class="NDLSystemFont">true</span> on
success, and <span class="NDLSystemFont">false</span> if the
requested registers are not valid or if they have not yet been
set.</p>

<p class="NDLRefMemberFunction">bool
RestorePixelShaderConstantB(unsigned int uiStartRegister,
unsigned int uiBoolCount)</p>

<p class="NDLRefMemberDescription">Restores the set of Boolean
pixel shader constant registers, beginning with <span class=
"NDLSystemFont">uiStartRegister</span> and continuing for
<span class="NDLSystemFont">uiBoolCount</span> registers, The
function returns <span class="NDLSystemFont">true</span> on
success, and <span class="NDLSystemFont">false</span> if the
requested registers are not valid or no value has been saved for
them.</p>

<p class="NDLRefMemberFunction">bool
SetPixelShaderConstantF(unsigned int uiStartRegister, const
float* pfConstantData, unsigned int uiFloat4Count, bool
bSave)</p>

<p class="NDLRefMemberFunction">bool
SetPixelShaderConstantF(unsigned int uiStartRegister, const
float* pfConstantData, unsigned int uiFloat4Count)</p>

<p class="NDLRefMemberDescription">Sets the set of floating point
pixel shader constant registers, beginning with <span class=
"NDLSystemFont">uiStartRegister</span> and continuing for
<span class="NDLSystemFont">uiFloat4Count</span> registers, to
the data in the <span class="NDLSystemFont">pfConstantData</span>
array. In the first version, if <span class=
"NDLSystemFont">bSave</span> is true, the values previously set
in the floating point pixel shader constant registers will be
saved. In the second version, no shader constants will be saved.
The function returns <span class="NDLSystemFont">true</span> on
success, and <span class="NDLSystemFont">false</span> if the
requested registers are not valid.</p>

<p class="NDLRefMemberFunction">bool
GetPixelShaderConstantF(unsigned int uiStartRegister, float*
pfConstantData, unsigned int uiFloat4Count)</p>

<p class="NDLRefMemberDescription">Returns the current values of
the floating point pixel shader constant registers, beginning
with <span class="NDLSystemFont">uiStartRegister</span> and
continuing for <span class="NDLSystemFont">uiFloat4Count</span>
registers, in the <span class=
"NDLSystemFont">pfConstantData</span> array. The function returns
<span class="NDLSystemFont">true</span> on success, and
<span class="NDLSystemFont">false</span> if the requested
registers are not valid or if they have not yet been set.</p>

<p class="NDLRefMemberFunction">bool
RestorePixelShaderConstantF(unsigned int uiStartRegister,
unsigned int uiFloat4Count)</p>

<p class="NDLRefMemberDescription">Restores the set of floating
point pixel shader constant registers, beginning with
<span class="NDLSystemFont">uiStartRegister</span> and continuing
for <span class="NDLSystemFont">uiFloat4Count</span> registers,
The function returns <span class="NDLSystemFont">true</span> on
success, and <span class="NDLSystemFont">false</span> if the
requested registers are not valid or no value has been saved for
them.</p>

<p class="NDLRefMemberFunction">bool
SetPixelShaderConstantI(unsigned int uiStartRegister, const int*
piConstantData, unsigned int uiInt4Count, bool bSave)</p>

<p class="NDLRefMemberFunction">bool
SetPixelShaderConstantI(unsigned int uiStartRegister, const int*
piConstantData, unsigned int uiInt4Count)</p>

<p class="NDLRefMemberDescription">Sets the set of integer pixel
shader constant registers, beginning with <span class=
"NDLSystemFont">uiStartRegister</span> and continuing for
<span class="NDLSystemFont">uiInt4Count</span> registers, to the
data in the <span class="NDLSystemFont">piConstantData</span>
array. In the first version, if <span class=
"NDLSystemFont">bSave</span> is true, the values previously set
in the integer pixel shader constant registers will be saved. In
the second version, no shader constants will be saved. The
function returns <span class="NDLSystemFont">true</span> on
success, and <span class="NDLSystemFont">false</span> if the
requested registers are not valid.</p>

<p class="NDLRefMemberFunction">bool
GetPixelShaderConstantI(unsigned int uiStartRegister, int*
piConstantData, unsigned int uiInt4Count)</p>

<p class="NDLRefMemberDescription">Returns the current values of
the integer pixel shader constant registers, beginning with
<span class="NDLSystemFont">uiStartRegister</span> and continuing
for <span class="NDLSystemFont">uiInt4Count</span> registers, in
the <span class="NDLSystemFont">piConstantData</span> array. The
function returns <span class="NDLSystemFont">true</span> on
success, and <span class="NDLSystemFont">false</span> if the
requested registers are not valid or if they have not yet been
set.</p>

<p class="NDLRefMemberFunction">bool
RestorePixelShaderConstantI(unsigned int uiStartRegister,
unsigned int uiInt4Count)</p>

<p class="NDLRefMemberDescription">Restores the set of integer
pixel shader constant registers, beginning with <span class=
"NDLSystemFont">uiStartRegister</span> and continuing for
<span class="NDLSystemFont">uiInt4Count</span> registers, The
function returns <span class="NDLSystemFont">true</span> on
success, and <span class="NDLSystemFont">false</span> if the
requested registers are not valid or no value has been saved for
them.</p>

<p class="NDLRefMemberFunction">void
FastOverwriteVertexShaderConstantB(unsigned int uiStartRegister,
const BOOL* pbConstantData, unsigned int uiBoolCount)</p>

<p class="NDLRefMemberDescription">Sets a group of Boolean vertex
shader constants without updating the dirty flags. When used in
conjunction with <span class=
"NDLSystemFont">MarkVertexShaderConstantsDirtyB</span>, this can
be useful when an application will be setting a large number of
shader constants and it would prefer to mark the constants as
dirty once rather than after each shader constant is set. This
function can be dangerous if used incorrectly, so use
<span class="NDLSystemFont">SetVertexShaderConstantB</span> if
there is any uncertainly.</p>

<p class="NDLRefMemberFunction">void
MarkVertexShaderConstantsDirtyB(unsigned int
uiFirstDirtyRegister, unsigned int uiFirstCleanRegister)</p>

<p class="NDLRefMemberDescription">Marks a group of Boolean
vertex shader constants as dirty. When used in conjunction with
<span class=
"NDLSystemFont">FastOverwriteVertexShaderConstantsB</span>, this
can be useful when an application will be setting a large number
of shader constants and it would prefer to mark the constants as
dirty once rather than after each shader constant is set. This
function can be dangerous if used incorrectly, so use
<span class="NDLSystemFont">SetVertexShaderConstantB</span> if
there is any uncertainly.</p>

<p class="NDLRefMemberFunction">void
FastOverwriteVertexShaderConstantF(unsigned int uiStartRegister,
const float* pfConstantData, unsigned uiFloat4Count)</p>

<p class="NDLRefMemberDescription">Sets a group of floating-point
vertex shader constants without updating the dirty flags. When
used in conjunction with <span class=
"NDLSystemFont">MarkVertexShaderConstantsDirtyF</span>, this can
be useful when an application will be setting a large number of
shader constants and it would prefer to mark the constants as
dirty once rather than after each shader constant is set. This
function can be dangerous if used incorrectly, so use
<span class="NDLSystemFont">SetVertexShaderConstantF</span> if
there is any uncertainly.</p>

<p class="NDLRefMemberFunction">void
MarkVertexShaderConstantsDirtyF(unsigned int
uiFirstDirtyRegister, unsigned int uiFirstCleanRegister)</p>

<p class="NDLRefMemberDescription">Marks a group of
floating-point vertex shader constants as dirty. When used in
conjunction with <span class=
"NDLSystemFont">FastOverwriteVertexShaderConstantsF</span> this
can be useful when an application will be setting a large number
of shader constants and it would prefer to mark the constants as
dirty once rather than after each shader constant is set. This
function can be dangerous if used incorrectly, so use
<span class="NDLSystemFont">SetVertexShaderConstantF</span> if
there is any uncertainly.</p>

<p class="NDLRefMemberFunction">void
FastOverwriteVertexShaderConstantI(unsigned int uiStartRegister,
const int* piConstantData, unsigned int uiInt4Count)</p>

<p class="NDLRefMemberDescription">Sets a group of integer vertex
shader constants without updating the dirty flags. When used in
conjunction with <span class=
"NDLSystemFont">MarkVertexShaderConstantsDirtyI</span>, this can
be useful when an application will be setting a large number of
shader constants and it would prefer to mark the constants as
dirty once rather than after each shader constant is set. This
function can be dangerous if used incorrectly, so use
<span class="NDLSystemFont">SetVertexShaderConstantI</span> if
there is any uncertainly.</p>

<p class="NDLRefMemberFunction">void
MarkVertexShaderConstantsDirtyI(unsigned int
uiFirstDirtyRegister, unsigned int uiFirstCleanRegister)</p>

<p class="NDLRefMemberDescription">Marks a group of integer
vertex shader constants as dirty. When used in conjunction with
<span class=
"NDLSystemFont">FastOverwriteVertexShaderConstantsI</span> this
can be useful when an application will be setting a large number
of shader constants and it would prefer to mark the constants as
dirty once rather than after each shader constant is set. This
function can be dangerous if used incorrectly, so use
<span class="NDLSystemFont">SetVertexShaderConstantI</span> if
there is any uncertainly.</p>

<p class="NDLRefMemberFunction">void
FastOverwritePixelShaderConstantB(unsigned int uiStartRegister,
const BOOL* pbConstantData, unsigned int uiBoolCount)</p>

<p class="NDLRefMemberDescription">Sets a group of Boolean pixel
shader constants without updating the dirty flags. When used in
conjunction with <span class=
"NDLSystemFont">MarkVertexPixelConstantsDirtyB</span>, this can
be useful when an application will be setting a large number of
shader constants and it would prefer to mark the constants as
dirty once rather than after each shader constant is set. This
function can be dangerous if used incorrectly, so use
<span class="NDLSystemFont">SetPixelShaderConstantB</span> if
there is any uncertainly.</p>

<p class="NDLRefMemberFunction">void
MarkPixelShaderConstantsDirtyB(unsigned int uiFirstDirtyRegister,
unsigned int uiFirstCleanRegister)</p>

<p class="NDLRefMemberDescription">Marks a group of Boolean pixel
shader constants as dirty. When used in conjunction with
<span class=
"NDLSystemFont">FastOverwritePixelShaderConstantsB</span>, this
can be useful when an application will be setting a large number
of shader constants and it would prefer to mark the constants as
dirty once rather than after each shader constant is set. This
function can be dangerous if used incorrectly, so use
<span class="NDLSystemFont">SetPixelShaderConstantB</span> if
there is any uncertainly.</p>

<p class="NDLRefMemberFunction">void
FastOverwritePixelShaderConstantF(unsigned int uiStartRegister,
const float* pfConstantData, unsigned uiFloat4Count)</p>

<p class="NDLRefMemberDescription">Sets a group of floating-point
pixel shader constants without updating the dirty flags. When
used in conjunction with <span class=
"NDLSystemFont">MarkVertexPixelConstantsDirtyF</span>, this can
be useful when an application will be setting a large number of
shader constants and it would prefer to mark the constants as
dirty once rather than after each shader constant is set. This
function can be dangerous if used incorrectly, so use
<span class="NDLSystemFont">SetPixelShaderConstantF</span> if
there is any uncertainly.</p>

<p class="NDLRefMemberFunction">void
MarkPixelShaderConstantsDirtyF(unsigned int uiFirstDirtyRegister,
unsigned int uiFirstCleanRegister)</p>

<p class="NDLRefMemberDescription">Marks a group of
floating-point pixel shader constants as dirty. When used in
conjunction with <span class=
"NDLSystemFont">FastOverwritePixelShaderConstantsF</span>, this
can be useful when an application will be setting a large number
of shader constants and it would prefer to mark the constants as
dirty once rather than after each shader constant is set. This
function can be dangerous if used incorrectly, so use
<span class="NDLSystemFont">SetPixelShaderConstantF</span> if
there is any uncertainly.</p>

<p class="NDLRefMemberFunction">void
FastOverwritePixelShaderConstantI(unsigned int uiStartRegister,
const int* piConstantData, unsigned int uiInt4Count)</p>

<p class="NDLRefMemberDescription">Sets a group of integer pixel
shader constants without updating the dirty flags. When used in
conjunction with <span class=
"NDLSystemFont">MarkVertexPixelConstantsDirtyI</span>, this can
be useful when an application will be setting a large number of
shader constants and it would prefer to mark the constants as
dirty once rather than after each shader constant is set. This
function can be dangerous if used incorrectly, so use
<span class="NDLSystemFont">SetPixelShaderConstantI</span> if
there is any uncertainly.</p>

<p class="NDLRefMemberFunction">void
MarkPixelShaderConstantsDirtyI(unsigned int uiFirstDirtyRegister,
unsigned int uiFirstCleanRegister)</p>

<p class="NDLRefMemberDescription">Marks a group of integer pixel
shader constants as dirty. When used in conjunction with
<span class=
"NDLSystemFont">FastOverwritePixelShaderConstantsI</span>, this
can be useful when an application will be setting a large number
of shader constants and it would prefer to mark the constants as
dirty once rather than after each shader constant is set. This
function can be dangerous if used incorrectly, so use
<span class="NDLSystemFont">SetPixelShaderConstantI</span> if
there is any uncertainly.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
