<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiDX9FragmentShader</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">NiDX9FragmentShader</p>

<p class="NDLRefParentage">: public <a HREF="NiD3DShader.htm">NiD3DShader</a></p>

<p class="NDLRefHeaderFile">&lt;NiDX9FragmentShader.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p><span class="NDLSystemFont">NiDX9FragmentShader</span> 
 is a special shader class that <a href="../../Reference/NiMain/NiFragmentMaterial.htm"><span 
 class="NDLSystemFont">NiFragmentMaterial</span></a>-derived classes, including 
 <a href="../../Reference/NiMain/NiStandardMaterial.htm"><span 
 class="NDLSystemFont">NiStandardMaterial</span></a>, create in order to 
 provide shaders with custom-built pixel and vertex shaders. </p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiDX9FragmentShader(<a href="../../Reference/NiMain/NiMaterialDescriptor.htm">NiMaterialDescriptor</a>* 
 pkDesc)</p>

<p class="NDLRefMemberDescription">Creates a new <span class="NDLSystemFont">NiDX9FragmentShader</span> 
 instance that will be built from the given <span class="NDLSystemFont"><a href="../../Reference/NiMain/NiMaterialDescriptor.htm">NiMaterialDescriptor</a></span>. 
 The constructor will not actually analyze the material descriptor at all, 
 but it will save it so that the material will know which material descriptor 
 was used to construct the shader.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">virtual bool Initialize()</p>

<p class="NDLRefMemberDescription">Inherited from <a href="NiD3DShader.htm"><span 
 class="NDLSystemFont">NiD3DShader</span></a>. Initializes the shader.</p>

<p class="NDLRefMemberFunction">virtual unsigned int UpdatePipeline(<a href="../../Reference/NiMain/NiRenderCallContext.htm">NiRenderCallContext</a>&amp; kRCC)</p>

<p class="NDLRefMemberDescription">Inherited from <a href="NiD3DShader.htm"><span 
 class="NDLSystemFont">NiD3DShader</span></a>. Updates the textures stages 
 with the textures from the <a href="../../Reference/NiMain/NiRenderCallContext.htm"><span class="NDLSystemFont">NiRenderCallContext</span></a>.</p>

<p class="NDLRefMemberFunction">virtual void DestroyRendererData()</p>

<p class="NDLRefMemberDescription">Inherited from <a href="NiD3DShader.htm"><span 
 class="NDLSystemFont">NiD3DShader</span></a>. Calls the base <span class="NDLSystemFont">DestroyRendererData</span> 
 function.</p>

<p class="NDLRefMemberFunction">virtual void RecreateRendererData()</p>

<p class="NDLRefMemberDescription">Inherited from <a href="NiD3DShader.htm"><span 
 class="NDLSystemFont">NiD3DShader</span></a>. Calls the base <span class="NDLSystemFont">RecreateRendererData</span> 
 function.</p>

<p class="NDLRefMemberFunction">virtual bool IsGenericallyConfigurable()</p>

<p class="NDLRefMemberDescription">Inherited from <a href="NiD3DShader.htm"><span 
 class="NDLSystemFont">NiD3DShader</span></a>. Returns <span class="NDLSystemFont">true</span>, 
 since this particular class can be configured by an <span class="NDLSystemFont"><a href="../../Reference/NiMain/NiFragmentMaterial.htm">NiFragmentMaterial</a></span>.</p>

<p class="NDLRefMemberFunction">virtual bool AppendRenderPass(unsigned int&amp; 
 uiPassId)</p>

<p class="NDLRefMemberDescription">Inherited from <a href="NiD3DShader.htm"><span 
 class="NDLSystemFont">NiD3DShader</span></a>. Add an additional render pass 
 to the shader. If the function succeeds, it will return the number of 
 the new pass in <span class="NDLSystemFont">uiPassId</span> and return <span 
 class="NDLSystemFont">true</span>. </p>

<p class="NDLRefMemberFunction">virtual bool SetAlphaOverride(unsigned int 
 uiPassId, bool bAlphaBlend, bool bUsePreviousSrcBlendMode, <a href="../../Reference/NiMain/NiAlphaProperty.htm#Alpha_Blending_Functions">NiAlphaProperty::AlphaFunction</a> 
 eSrcBlendMode, bool bUsePreviousDestBlendMode, <a href="../../Reference/NiMain/NiAlphaProperty.htm#Alpha_Blending_Functions">NiAlphaProperty::AlphaFunction</a> 
 eDestBlendMode)</p>

<p class="NDLRefMemberDescription">Inherited from <a href="NiD3DShader.htm"><span 
 class="NDLSystemFont">NiD3DShader</span></a>. Sets the alpha blending mode 
 of the pass indicated by <span class="NDLSystemFont">uiPassId</span>. The 
 <span class="NDLSystemFont">bAlphaBlend</span> parameter indicates whether 
 alpha blending should be enabled. If <span class="NDLSystemFont">bUsePreviousSrcBlendMode</span> 
 is true, then the pass will not set the source blend mode, and will use 
 whatever setting was already on the renderer; otherwise, it will set the 
 source blend mode to <span class="NDLSystemFont">eSrcBlendMode</span>. The 
 parameters <span class="NDLSystemFont">bUsePreviousDestBlendMode</span> 
 and <span class="NDLSystemFont">eDestBlendMode</span> work the same way. 
 </p>

<p class="NDLRefMemberFunction">virtual bool SetGPUProgram(unsigned int uiPassId, 
 NiGPUProgram* pkProgram, NiGPUProgram::ProgramType&amp; eProgramType)</p>

<p class="NDLRefMemberDescription">Inherited from <a href="NiD3DShader.htm"><span 
 class="NDLSystemFont">NiD3DShader</span></a>. Sets the specified <span class="NDLSystemFont"><a href="../../Reference/NiMain/NiGPUProgram.htm">NiGPUProgram</a></span> 
 on the pass identified by <span class="NDLSystemFont">uiPassId</span>. The 
 <span class="NDLSystemFont">eProgramId</span> parameter is ignored. This 
 function returns <span class="NDLSystemFont">false</span> if the shader 
 class is not meant to be configured by an <span class="NDLSystemFont"><a href="../../Reference/NiMain/NiFragmentMaterial.htm">NiFragmentMaterial</a></span>.</p>

<p class="NDLRefMemberFunction">virtual NiShaderConstantMap* CreateShaderConstantMap( 
 unsigned int uiPassId, NiGPUProgram::ProgramType eProgramType, unsigned 
 int uiMapIndex = 0)</p>

<p class="NDLRefMemberDescription">Inherited from <a href="NiD3DShader.htm"><span 
 class="NDLSystemFont">NiD3DShader</span></a>. Creates a new <span class="NDLSystemFont"><a href="../../Reference/NiMain/NiShaderConstantMap.htm">NiShaderConstantMap</a></span> 
 for the given pass that will service the type of GPU program specified 
 by <span class="NDLSystemFont">eProgramID</span>. Valid values for <span 
 class="NDLSystemFont">eProgramID</span> are enumerations from <span class="NDLSystemFont"><a href="../../Reference/NiMain/NiGPUProgram.htm#ProgramType">NiGPUProgram::ProgramType</a></span>. 
 This function returns <span class="NDLSystemFont">NULL</span> if the shader 
 class is not meant to be configured by an <span class="NDLSystemFont"><a href="../../Reference/NiMain/NiFragmentMaterial.htm">NiFragmentMaterial</a></span>.</p>

<p class="NDLRefMemberFunction">virtual bool AppendTextureSampler(unsigned 
 int uiPassId, unsigned int&amp; uiSamplerId, const <a href="../../Reference/NiMain/NiFixedString.htm">NiFixedString</a>&amp; 
 kSemantic, const <a href="../../Reference/NiMain/NiFixedString.htm">NiFixedString</a>&amp; 
 kVariableName, unsigned int uiInstance = 0)</p>

<p class="NDLRefMemberDescription">Inherited from <a href="NiD3DShader.htm"><span 
 class="NDLSystemFont">NiD3DShader</span></a>. Adds a texture sampler to 
 the pass specified by <span class="NDLSystemFont">uiPassID</span>. The <span 
 class="NDLSystemFont">kSemantic</span> parameter identifies what map from 
 <span class="NDLSystemFont"><a href="../../Reference/NiMain/NiTexturingProperty.htm">NiTexturingProperty</a></span> 
 to use; valid values include the standard maps from that class, such as 
 &quot;Base&quot; &quot;Dark&quot; and &quot;Normal&quot;. For &quot;Shader&quot; 
 and &quot;Decal&quot; maps, <span class="NDLSystemFont">uiInstance</span> 
 indicates which map of that type to use. The <span class="NDLSystemFont">kVariableName</span> 
 parameter identifies the name of the shader variable for the sampler. 
 This function returns false if the shader class is not meant to be configured 
 by an <a href="../../Reference/NiMain/NiFragmentMaterial.htm"><span 
 class="NDLSystemFont">NiFragmentMaterial</span></a>.</p>

<p class="NDLRefMemberFunction">virtual const <a href="../../Reference/NiMain/NiShader__NiShaderInstanceDescriptor.htm">NiShader::NiShaderInstanceDescriptor</a>* 
 GetShaderInstanceDesc() const</p>

<p class="NDLRefMemberDescription">Inherited from <a href="NiD3DShader.htm"><span 
 class="NDLSystemFont">NiD3DShader</span></a>. Returns the descriptor for 
 this shader, which will be the <span class="NDLSystemFont"><a href="../../Reference/NiMain/NiMaterialDescriptor.htm">NiMaterialDescriptor</a></span> 
 that was used to construct the shader.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
