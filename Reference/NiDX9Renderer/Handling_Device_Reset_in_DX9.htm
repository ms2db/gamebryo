<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Handling Device Reset in DX9</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Handling Lost Devices and Device Reset in DX9</h1>

<p>When the Direct3D device is lost, there are often a number of
things that an application needs to do to respond to it. This may
include pausing the application and handling the device reset. In
addition, there are a number of other circumstances that may
require a device reset, such as when the application window needs
to be resized, when a device-level feature like lockable
backbuffers or fullscreen antialiasing needs to be enabled or
disabled.</p>

<p>Whenever the device is reset, all DirectX resources that are
not automatically managed need to be released before the reset,
and then recreated afterwards. Gamebryo automatically takes care
of most of this work without any need for user intervention, but
many applications that make advanced use of the Gamebryo engine
require that special code be run in the event of a device reset.
This includes any applications that contain rendered textures
that are not redrawn every frame, or make use of non-managed
resources that were created outside of Gamebryo.</p>

<p>For these circumstances, Gamebryo provides some callback
functionality to give applications the ability to perform their
needed tasks as soon as device is lost and immediately before and
after the device is reset. The first callback function is a
<span class="NDLSystemFont">LOSTDEVICENOTIFYFUNC</span>, and once
it is registered with the renderer using <span class=
"NDLSystemFont">NiDX9Renderer::AddLostDeviceNotificationFunc</span>,
the renderer will call it as soon as it realizes that the device
has been lost. This callback function takes one parameter, which
is an application-provided pointer that can be specified when the
function is registered.</p>

<p>The second callback function is a <span class=
"NDLSystemFont">RESETNOTIFYFUNC</span>, which is registered using
<span class=
"NDLSystemFont">NiDX9Renderer::AddResetNotificationFunc</span>.
This callback function gets called both before and immediately
after any attempt to reset the device, and it takes two
parameters; one is a Boolean value that indicates whether the
function is getting called before the reset or after, and the
other is another application-provided pointer that the callback
function can use however it needs.</p>

<p>Applications can register any number of either callback
function with the renderer, and the functions will get called in
the order in which they are registered in response to the
appropriate event.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
