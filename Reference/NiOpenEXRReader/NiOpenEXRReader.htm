<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiOpenEXRReader</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiOpenEXRReader</p>

<p class="NDLRefParentage">: public <a href=
"../../Reference/NiMain/NiImageReader.htm">NiImageReader</a></p>

<p class="NDLRefHeaderFile">&lt;NiOpenEXRReader.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>The <span class="NDLSystemFont">NiOpenEXRReader</span> is a
subclass of the abstract <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiImageReader.htm">NiImageReader</a></span>
class. It implements a subset of the image reading requirements
for the OpenEXR format. Most applications will not use this
class, and therefore it is not by default included in the
<span class="NDLSystemFont">NiDevImageConverter</span> class.
Unless the application explicitly links in the NiOpenEXRReader
library and adds the reader, <span class=
"NDLSystemFont">NiDevImageConverter</span> will not have the
capability of loading OpenEXRs. <span class=
"NDLSystemFont">NiOpenEXRReader</span> is used by the Gamebryo
Maya Plug-in as a way of incorporating High Dynamic Range
images.</p>

<p>One final note is that the <span class=
"NDLSystemFont">NiOpenEXRReader</span> is dependent on the
<span class="NDLSystemFont">OpenEXR</span> and <span class=
"NDLSystemFont">zlib</span> open source libraries. Because of
possible cross platform compatibility issues with these
libraries, <span class="NDLSystemFont">NiOpenEXRReader</span> is
not intended for end user applications.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiOpenEXRReader()</p>

<p class="NDLRefMemberDescription">Default (and sole)
constructor. Creates the internal data structures required for
loading EXR image files.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">virtual bool CanReadFile(const
char* pcFileExtension) const</p>

<p class="NDLRefMemberDescription">Returns true if the given
extension is <span class="NDLSystemFont">.exr</span>, and false
otherwise. The base class interface uses this virtual function to
determine whether a generic image loader can load a given
file.</p>

<p class="NDLRefMemberFunction">virtual NiPixelData*
ReadFile(NiFile&amp; kIst, NiPixelData* pkOptDest)</p>

<p class="NDLRefMemberDescription">Reads the given file (assuming
that it is a valid and supported OpenEXR image file) and returns
the data from the file as a flat <span class=
"NDLSystemFont">NiPixelData</span> object. The supported OpenEXR
formats are those that have RGBA channels. This includes files
having tile descriptors, however, mipmap levels are currently
ignored in such files. The function returns NULL if the EXR file
appears to be of the wrong format. The calling function should
not rely on the position of the file pointer following a call to
this function.</p>

<p class="NDLRefMemberFunction">virtual bool
ReadHeader(NiFile&amp; kIst, unsigned int&amp; uiWidth, unsigned
int&amp; uiHeight, NiPixelFormat&amp; kFormat, bool&amp; bMipmap,
unsigned int&amp; uiNumFaces)</p>

<p class="NDLRefMemberDescription">Returns <span class=
"NDLSystemFont">true</span> if the file appears to be a valid and
readable by the reader object and <span class=
"NDLSystemFont">false</span> otherwise. If the function returns
true, the <span class="NDLSystemFont">uiWidth</span>,
<span class="NDLSystemFont">uiHeight</span>, <span class=
"NDLSystemFont">kFormat</span>, <span class=
"NDLSystemFont">bMipmap, and uiNumFaces</span> parameters will
contain the width of the image file, the height of the image
file, the destination pixel format, whether or not the file
contains mipmap data, and the number of faces for cubemaps
respectively. The output pixel format will be <span class=
"NDLSystemFont">NiPixelFormat::RGBA64</span>. The mipmap flag
will be false. The calling function should not rely on the
position of the file pointer following a call to this
function.</p>

<p class="NDLRefMemberFunction">NiPixelData* ReadBody(NiFile
&amp;kIst, NiPixelData* pkOptDest)</p>

<p class="NDLRefMemberDescription">Returns the final <span class=
"NDLSystemFont">NiPixelFormat</span> for the image. This function
handles all the calls to the openexr sdk for correctly reading
the <span class="NDLSystemFont">.exr</span> file<span class=
"NDLSystemFont">.</span> The function returns <span class=
"NDLSystemFont">false</span> on failure.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
