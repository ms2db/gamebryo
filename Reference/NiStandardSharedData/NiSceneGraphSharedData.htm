<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiSceneGraphSharedData</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiSceneGraphSharedData</p>

<p class="NDLRefParentage">: public <a href=
"../../Reference/NiPluginToolkit/NiSharedData.htm">NiSharedData</a></p>

<p class="NDLRefHeaderFile">&lt;NiSceneGraphSharedData.h&gt;</p>

<p class="NDLRefHead1">Description</p>

<p>This class indicates which scene graph is currently in use.
The scene graph shared data object is one of the basic shared
data objects provided with Gamebryo.</p>

<p class="NDLRefHead1">Constructors</p>

<p class="NDLRefMemberFunction">NiSceneGraphSharedData()</p>

<p class="NDLRefMemberDescription">Default constructor.</p>

<p class="NDLRefHead1">Supported Member Functions</p>

<p class="NDLRefMemberFunction">void AddRoot(NiNode* pkRoot,
const char* pcName = "", bool bStreamable = true)</p>

<p class="NDLRefMemberDescription">Adds a root into the root
array. This broadcasts a message to any handlers.</p>

<p class="NDLRefMemberFunction">NiNodePtr RemoveRoot(NiNode*
pkRoot)</p>

<p class="NDLRefMemberDescription">Removes root from the root
list. This broadcasts a message to any handlers.</p>

<p class="NDLRefMemberFunction">void RemoveAllRoots()</p>

<p class="NDLRefMemberDescription">Removes all the roots from the
root list. This broadcasts a message for each root removed.</p>

<p class="NDLRefMemberFunction">void UpdateAll(float fTime)</p>

<p class="NDLRefMemberDescription">Update all of the roots. This
broadcasts a message to any handlers.</p>

<p class="NDLRefMemberFunction">void UpdateRoot(NiNode* pkRoot,
float fTime)</p>

<p class="NDLRefMemberDescription">Update a specific root. This
broadcasts a message to any handlers.</p>

<p class="NDLRefMemberFunction">unsigned int GetRootCount()</p>

<p class="NDLRefMemberDescription">Get the total number of roots
in the system.</p>

<p class="NDLRefMemberFunction">NiNode* GetRootAt(unsigned int
uiIndex)</p>

<p class="NDLRefMemberDescription">Get a root out of the shared
data by index.</p>

<p class="NDLRefMemberFunction">NiString GetRootName(NiNode*
pkRoot)</p>

<p class="NDLRefMemberDescription">Returns the stored name of the
specified root node.</p>

<p class="NDLRefMemberFunction">bool IsRootStreamable(NiNode*
pkRoot)</p>

<p class="NDLRefMemberDescription">Returns whether or not the
specified root node is streamable.</p>

<p class="NDLRefMemberFunction">float GetLastUpdateTime(NiNode*
pkRoot)</p>

<p class="NDLRefMemberDescription">Returns the last time that the
specified root node was updated at.</p>

<p class="NDLRefMemberFunction">NiNodePtr GetFullSceneGraph()</p>

<p class="NDLRefMemberDescription">Returns all root nodes
attached as children of an empty node.</p>

<p class="NDLRefMemberFunction">bool GetPreserveEndianness()</p>

<p class="NDLRefMemberDescription">Get whether the tool plugin
pipeline should preserve the endianness of the source of this
scene graph.</p>

<p class="NDLRefMemberFunction">bool GetSourceLittleEndian()</p>

<p class="NDLRefMemberDescription">Get whether the source of this
scene graph is a little endian platform.</p>

<p class="NDLRefMemberFunction">void SetSourceLittleEndian(bool
bLittleEndian, bool bPreserve = true)</p>

<p class="NDLRefMemberDescription">Set whether the source of this
scene graph is little endian and whether that endianness should
be preserved throughout the tool plugin pipeline.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
