<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>egfPhysX::EntityActorData</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">egfPhysX::EntityActorData</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../efd/efd__MemObject.htm">efd::MemObject</a></span></p>


<p class="NDLRefHeaderFile">&lt;EntityActorData.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classegf_phys_x_1_1_entity_actor_data.gif" alt="Inheritance graph for egfPhysX::EntityActorData"/>
  <p class="FigureCaption">Inheritance graph for egfPhysX::EntityActorData</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">The <span class="NDLSystemFont">EntityActorData</span> class holds information relating an Entity to its PhysX actor. </p>
<p class="NDLNormal">This class is used to manage information about actors that are created from entity properties, particularly triggers. </p>

<a name="public_static_methods"></a>
<p class="NDLRefHead1">Public Static Methods</p>


<a name="classegf_phys_x_1_1_entity_actor_data_1a7741720288918dd3edc3bfb2beb5ab78"></a>
<p class="NDLRefMemberFunction">static void  LeakDump(<br/>void* pMem, <br/>char* o_buffer, <br/>unsigned int i_cchBuffer)</p>
<p class="NDLRefMemberDescription">Helper for generating memory leak reports. </p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classegf_phys_x_1_1_entity_actor_data_1a24034e6352842997fe963653796d0c69"></a>
<p class="NDLRefMemberFunction">void  IncRefCount() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="classegf_phys_x_1_1_entity_actor_data_1aa0789ba2a9262f92c0e927f5a337a875"></a>
<p class="NDLRefMemberFunction">void  DecRefCount() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="classegf_phys_x_1_1_entity_actor_data_1a47a5ee7184ac33bce1d5632d240616ed"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetRefCount() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="classegf_phys_x_1_1_entity_actor_data_1a76fa2e8ed6294ca799cc9b3490debfea"></a>
<p class="NDLRefMemberFunction">EntityActorData(<span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">egf::EntityPtr</a></span> spEntity)</p>
<p class="NDLRefMemberDescription">Create a data object for the given entity. </p>
<p class="NDLRefMemberDetailedDescription">The actor is set to NULL. </p>

<a name="classegf_phys_x_1_1_entity_actor_data_1a8fd44d658231edddd558fa8e5730f698"></a>
<p class="NDLRefMemberFunction">virtual ~EntityActorData()</p>
<p class="NDLRefMemberDescription">Destructor. </p>

<a name="classegf_phys_x_1_1_entity_actor_data_1ab0349b94e918509f2345e05a3c8d5a2b"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">egf::EntityPtr</a></span>  GetEntity() const</p>
<p class="NDLRefMemberDescription">Get the entity for this data. </p>

<a name="classegf_phys_x_1_1_entity_actor_data_1a4999dea3c6eb3ba520bd8f93c26c0caf"></a>
<p class="NDLRefMemberFunction">NxActor*  GetActor() const</p>
<p class="NDLRefMemberDescription">Get the actor for this data. </p>

<a name="classegf_phys_x_1_1_entity_actor_data_1a3aefa51402f102dea91b383167ec2d77"></a>
<p class="NDLRefMemberFunction">void  SetActor(NxActor* pActor)</p>
<p class="NDLRefMemberDescription">Set the actor for this data. </p>

<a name="classegf_phys_x_1_1_entity_actor_data_1a286f29f5d6c86852a9f7b9c445c5d011"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>&  GetSceneScale() const</p>
<p class="NDLRefMemberDescription">Get the scale of the PhysX scene holding this actor. </p>

<a name="classegf_phys_x_1_1_entity_actor_data_1ab359011ba3476cd4d1316de864ec2d08"></a>
<p class="NDLRefMemberFunction">void  SetSceneScale(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>& scale)</p>
<p class="NDLRefMemberDescription">Set the scale of the PhysX scene holding this actor. </p>

<a name="classegf_phys_x_1_1_entity_actor_data_1af127f80a94960b3acea08a9ff56629cb"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>&  GetSceneName() const</p>
<p class="NDLRefMemberDescription">Get the name of the PhysX scene that holds this actor. </p>

<a name="classegf_phys_x_1_1_entity_actor_data_1ac22a8c92d702699f55463e2f110cafc3"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a37c593debc73d82d7ddc571c725f0e2d">efd::TimeType</a></span>  GetNextStayEventTime() const</p>
<p class="NDLRefMemberDescription">Get the earliest time that the next stay event will be sent. </p>

<a name="classegf_phys_x_1_1_entity_actor_data_1aa75b385342665f0e1a5985b53d583073"></a>
<p class="NDLRefMemberFunction">void  SetNextStayEventTime(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a37c593debc73d82d7ddc571c725f0e2d">efd::TimeType</a></span> nextTime)</p>
<p class="NDLRefMemberDescription">Set the earliest time that the next stay event can be sent. </p>

<a name="classegf_phys_x_1_1_entity_actor_data_1af70d4f81f848ce91d1eed74e7ce18d89"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  GetStayEventInterval() const</p>
<p class="NDLRefMemberDescription">Get the repeat interval for stay events. </p>

<a name="classegf_phys_x_1_1_entity_actor_data_1a65be4c12d361a05e5f28aa262642a8c6"></a>
<p class="NDLRefMemberFunction">void  SetStayEventInterval(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> stayInterval)</p>
<p class="NDLRefMemberDescription">Set the repeat interval for stay events. </p>

<a name="classegf_phys_x_1_1_entity_actor_data_1a2e3bdce5746bb0ab3a67ee3a31d3f058"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  IsTrigger() const</p>
<p class="NDLRefMemberDescription">Returns whether or not this actor is also a trigger. </p>

<a name="classegf_phys_x_1_1_entity_actor_data_1a7a4ee912e5ecf089dfd7aedbfa594fd7"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  DoEntityUpdated()</p>
<p class="NDLRefMemberDescription">Perform processing necessary for an entity update message on this entity. </p>
<p class="NDLRefMemberDetailedDescription">This function caches updated properties for later application, in the OnTick function.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>True if relevant PhysX data was changed and the entity must be ticked. False if there have been no changes to the PhysX related properties. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_phys_x_1_1_entity_actor_data_1aa9fcc75bc7d52025b93f78364c44b022"></a>
<p class="NDLRefMemberFunction">void  OnTick()</p>
<p class="NDLRefMemberDescription">Apply cached updates. </p>
<p class="NDLRefMemberDetailedDescription">This function must be called outside a PhysX simulate/fetchResult block. </p>

<a name="classegf_phys_x_1_1_entity_actor_data_1ad031025af5c628a6021e1167bec6c20f"></a>
<p class="NDLRefMemberFunction">void  SetTriggerOwnsActor(const <span class="NDLSystemFont">bool</span> isOwned)</p>
<p class="NDLRefMemberDescription">Mark this actor as owned (or not) by the trigger service. </p>
<p class="NDLRefMemberDetailedDescription">When owned, the Trigger Service will attempt to release the actor when the entity data is removed. </p>

<a name="classegf_phys_x_1_1_entity_actor_data_1a46fc42696674ecec6c0a4a42cf2af92f"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetTriggerOwnsActor() const</p>
<p class="NDLRefMemberDescription">Get the Trigger Service ownership status. </p>

<a name="classegf_phys_x_1_1_entity_actor_data_1ad644930c1f611fc7c3680f77cc3980d6"></a>
<p class="NDLRefMemberFunction">void  MarkForRelease()</p>
<p class="NDLRefMemberDescription">Mark this data for future actor release. </p>

<a name="classegf_phys_x_1_1_entity_actor_data_1a841f85740bafb03319b52ae0e6ac5d96"></a>
<p class="NDLRefMemberFunction">void  ClearForRelease()</p>
<p class="NDLRefMemberDescription">Clear any future actor release flag. </p>

<a name="classegf_phys_x_1_1_entity_actor_data_1a6eed2e3936a5aeb450fc220eaabaf610"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  IsMarkedForRelease() const</p>
<p class="NDLRefMemberDescription">Query whether this data is marked for actor release. </p>

<a name="classegf_phys_x_1_1_entity_actor_data_1a1edfdaf9dffd6eff19e7c280caa7aa10"></a>
<p class="NDLRefMemberFunction">void  MarkForRemoval()</p>
<p class="NDLRefMemberDescription">Mark this data for future removal. </p>

<a name="classegf_phys_x_1_1_entity_actor_data_1a6286500d7601ca5a255581d2637e3fb7"></a>
<p class="NDLRefMemberFunction">void  ClearForRemoval()</p>
<p class="NDLRefMemberDescription">Clear any future removal flag. </p>

<a name="classegf_phys_x_1_1_entity_actor_data_1ae662e6780a6aea8244a35cf152913f4e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  IsMarkedForRemoval() const</p>
<p class="NDLRefMemberDescription">Query whether this data is marked for removal. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
