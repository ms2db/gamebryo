<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>egfPhysX::SceneService</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">egfPhysX::SceneService</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../efd/efd__ISystemService.htm">efd::ISystemService</a></span></p>


<p class="NDLRefHeaderFile">&lt;SceneService.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classegf_phys_x_1_1_scene_service.gif" alt="Inheritance graph for egfPhysX::SceneService"/>
  <p class="FigureCaption">Inheritance graph for egfPhysX::SceneService</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">The Scene Service provides functionality to handle the adding, removing, modifying and simulating of PhysX scenes. </p>

<a name="public_static_attributes"></a>
<p class="NDLRefHead1">Public Static Attributes</p>


<a name="classegf_phys_x_1_1_scene_service_1a28d8f74f045fce9699f048f6a1105f7e"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a37c593debc73d82d7ddc571c725f0e2d">efd::TimeType</a></span>  ms_kInvalidSimulationTime</p>
<p class="NDLRefMemberDescription">A static constant used to convey an invalid simulation time. </p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classegf_phys_x_1_1_scene_service_1aae7e84e7fe209463072b4eb428cdbdf4"></a>
<p class="NDLRefMemberFunction">SceneService(<span class="NDLSystemFont">bool</span> runSynchronously = false)</p>
<p class="NDLRefMemberDetailedDescription">Constructor </p>

<a name="classegf_phys_x_1_1_scene_service_1a7dec06ae0f2fe40dc2739bcc5f2bf268"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  GetGroupCollisionFlag(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& sceneName, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span> group1, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span> group2, <br/><span class="NDLSystemFont">efd::Bool</span>& isEnabled)</p>
<p class="NDLRefMemberDescription">Get collision flag information based on scene name. </p>
<p class="NDLRefMemberDetailedDescription">Sets the value of isEnabled to the value of the collision flag for the specified groups.</p>
<p class="NDLRefMemberDetailedDescription">Return true if the scene is found and the groups are valid. Otherwise, return false. </p>

<a name="classegf_phys_x_1_1_scene_service_1a31573dc22efb15e7fe17ed7eaa1c74f3"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  GetGroupCollisionFlag(<br/>const <span class="NDLSystemFont"><a href="../egf/egf__Entity.htm">egf::Entity</a></span>* pSceneEntity, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span> group1, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span> group2, <br/><span class="NDLSystemFont">efd::Bool</span>& isEnabled)</p>
<p class="NDLRefMemberDescription">Get collision flag information based on scene entity. </p>
<p class="NDLRefMemberDetailedDescription">Sets the value of isEnabled to the value of the collision flag for the specified groups.</p>
<p class="NDLRefMemberDetailedDescription">Return true if the entity has a PhysX Scene model and the groups are valid. Otherwise, return false. </p>

<a name="classegf_phys_x_1_1_scene_service_1ac3b51ab09f485c55277a3d8d562d1e76"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  SetGroupCollisionFlag(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& sceneName, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span> group1, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span> group2, <br/><span class="NDLSystemFont">efd::Bool</span> isEnabled)</p>
<p class="NDLRefMemberDescription">Method to set the collision flag between two collision groups in a scene. </p>
<p class="NDLRefMemberDetailedDescription">Return true if the scene is found and the groups are valid. Otherwise, return false. </p>

<a name="classegf_phys_x_1_1_scene_service_1af205e0005b6704db1852e5c14f8a2ee8"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  SetGroupCollisionFlag(<br/>const <span class="NDLSystemFont"><a href="../egf/egf__Entity.htm">egf::Entity</a></span>* sceneEntity, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span> group1, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span> group2, <br/><span class="NDLSystemFont">efd::Bool</span> isEnabled)</p>
<p class="NDLRefMemberDescription">Method to set the collision flag between two collision groups in a scene. </p>
<p class="NDLRefMemberDetailedDescription">Return true if the entity has a PhysX Scene model and the groups are valid. Otherwise, return false. </p>
<a name="global_simulate_and_fetch_functions"></a>
<p class="NDLRefHead1">Global Simulate and Fetch Functions</p>

<p class="NDLRefMemberDescription">These functions invoke simulate and fetchResults for all known scenes, and send messages so that services managing non-owned scenes know to simulate. </p>

<a name="classegf_phys_x_1_1_scene_service_1a34c4f851ad5433c55ffc23a39c7c4a81"></a>
<p class="NDLRefMemberFunction">virtual void  Simulate(const <span class="NDLSystemFont">efd::Bool</span> forceSim)</p>
<p class="NDLRefMemberDescription">Method to start PhysX simulations. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">forceSim</span></td>
    <td>Sets time to ensure simulation if <span class="NDLSystemFont">SceneService</span> handles simulation. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_phys_x_1_1_scene_service_1af5f5cb9ac2b75629e1d44f1aeeae6573"></a>
<p class="NDLRefMemberFunction">void  Simulate()</p>
<p class="NDLRefMemberDescription">Method to start PhysX simulations. </p>
<p class="NDLRefMemberDetailedDescription">This version of Simulate simple calls the virtual method version with a false parameter. </p>

<a name="classegf_phys_x_1_1_scene_service_1aa35550bfe980b350b553a5c1d423d6a3"></a>
<p class="NDLRefMemberFunction">virtual void  FetchResults(const <span class="NDLSystemFont">efd::Bool</span> forceBlockOnFetch)</p>
<p class="NDLRefMemberDescription">Method to fetch the results of the PhysX simulations. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">forceBlockOnFetch</span></td>
    <td>Forces block on results if <span class="NDLSystemFont">SceneService</span> handles simulation. This over-rides the setting in any individual scene data. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_phys_x_1_1_scene_service_1a120f4f4a9e43959b0f71267956f1ed99"></a>
<p class="NDLRefMemberFunction">void  FetchResults()</p>
<p class="NDLRefMemberDescription">Method to fetch the results of the PhysX simulations. </p>
<p class="NDLRefMemberDetailedDescription">This version of FetchResults simple calls the virtual method version with a false parameter. </p>
<a name="physx_scene_data_access"></a>
<p class="NDLRefHead1">PhysX Scene Data Access</p>

<p class="NDLRefMemberDescription">The following functions provide access to the <span class="NDLSystemFont"><a href="egfPhysX__PhysXSceneData.htm">PhysXSceneData</a></span> object for the named scene or the given entity.</p>
<p class="NDLRefMemberDescription">See the <span class="NDLSystemFont"><a href="egfPhysX__PhysXSceneData.htm">egfPhysX::PhysXSceneData</a></span> class for details on the meaning of each parameter. </p>

<a name="classegf_phys_x_1_1_scene_service_1adea7b946fb274baadeca1add44d1afdb"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  GetSceneOwned(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& sceneName, <br/><span class="NDLSystemFont">efd::Bool</span>& isOwned) const</p>
<p class="NDLRefMemberDescription">Get the ownership of the named scene. </p>
<p class="NDLRefMemberDetailedDescription">Return true if the scene is found. Otherwise, return false. </p>

<a name="classegf_phys_x_1_1_scene_service_1abc09db9c885f5efd61fba15bcc719c05"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  SetSceneOwned(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& sceneName, <br/>const <span class="NDLSystemFont">efd::Bool</span> isOwned)</p>
<p class="NDLRefMemberDescription">Sets ownership of the named scene. </p>
<p class="NDLRefMemberDetailedDescription">Return true if the scene is found. Otherwise, return false. </p>

<a name="classegf_phys_x_1_1_scene_service_1a3873101542bd8674508ed4f6fce1a0f0"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  GetScaleFactor(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& sceneName, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>& scale) const</p>
<p class="NDLRefMemberDescription">Sets the value of scale to be the scale factor of named scene. </p>
<p class="NDLRefMemberDetailedDescription">Return true if the scene is found. Otherwise, return false. </p>

<a name="classegf_phys_x_1_1_scene_service_1a7c3ab19c9f2fd8ea56da9baf2c171efc"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  SetScaleFactor(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& sceneName, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> scale)</p>
<p class="NDLRefMemberDescription">Set the scale of the named scene. </p>
<p class="NDLRefMemberDetailedDescription">Strange things will happen if you set this after OnInit is called.</p>
<p class="NDLRefMemberDetailedDescription">Return true if the scene is found. Otherwise, return false. </p>

<a name="classegf_phys_x_1_1_scene_service_1ab8c7f7908eecf636f8656a7c752a48ad"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  GetHandleSimulate(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& sceneName, <br/><span class="NDLSystemFont">efd::Bool</span>& handleSimulate) const</p>
<p class="NDLRefMemberDescription">Sets handleSimulate for the named scene. </p>
<p class="NDLRefMemberDetailedDescription">If handleSimulate is false, the service only sends notification messages when starting and finishing simulations when Simulate and FetchResults are called. Other application code is expected to handle the actual PhysX simulation.</p>
<p class="NDLRefMemberDetailedDescription">Return true if the scene is found. Otherwise, return false. </p>

<a name="classegf_phys_x_1_1_scene_service_1aa36a7de3da1e7ce088abbef32030107c"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  SetHandleSimulate(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& sceneName, <br/>const <span class="NDLSystemFont">efd::Bool</span> handleSimulate)</p>
<p class="NDLRefMemberDescription">Set whether or not this service does the PhysX simulation work in addition to sending messages when starting and finishing simulation. </p>
<p class="NDLRefMemberDetailedDescription">Return true if the scene is found. Otherwise, return false. </p>

<a name="classegf_phys_x_1_1_scene_service_1a624e05ffc7436bb37ac8f946e8e7792f"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  StartSimulating(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& sceneName, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a37c593debc73d82d7ddc571c725f0e2d">efd::TimeType</a></span>& time = ms_kInvalidSimulationTime)</p>
<p class="NDLRefMemberDescription">Start simulation on the named scene with the specified start time. </p>
<p class="NDLRefMemberDetailedDescription">Return true if the scene with the specified name is found. Otherwise, return false. </p>

<a name="classegf_phys_x_1_1_scene_service_1a43cf01fa0eb9428af10418cb69a34f2d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  StartSimulating(<br/>const <span class="NDLSystemFont"><a href="../egf/egf__Entity.htm">egf::Entity</a></span>* pSceneEntity, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a37c593debc73d82d7ddc571c725f0e2d">efd::TimeType</a></span>& time = ms_kInvalidSimulationTime)</p>
<p class="NDLRefMemberDescription">Start simulation on the entity's scene with the specified start time. </p>
<p class="NDLRefMemberDetailedDescription">Return true if the entity mixes in the PhysX Scene model, false otherwise. </p>

<a name="classegf_phys_x_1_1_scene_service_1aa1f3394f0a9d2b89b72ab4e16cb5ba8b"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  StopSimulating(const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& sceneName)</p>
<p class="NDLRefMemberDescription">Stop simulation on the named scene. </p>
<p class="NDLRefMemberDetailedDescription">Return true if the scene is found. Otherwise, return false. </p>

<a name="classegf_phys_x_1_1_scene_service_1a7a10b10d92f74bdb6cbf30f1e0399e5b"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  StopSimulating(const <span class="NDLSystemFont"><a href="../egf/egf__Entity.htm">egf::Entity</a></span>* pSceneEntity)</p>
<p class="NDLRefMemberDescription">Stop simulation on the entity's scene. </p>
<p class="NDLRefMemberDetailedDescription">Return true if the scene is found. Otherwise, return false. </p>

<a name="classegf_phys_x_1_1_scene_service_1ae4c97aa6d06d09e1dc6658f1166f9b5f"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a37c593debc73d82d7ddc571c725f0e2d">efd::TimeType</a></span>  GetCurrentPhysXTime(const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& sceneName)</p>
<p class="NDLRefMemberDescription">Returns the last time used in simulation for the named scene. </p>
<p class="NDLRefMemberDetailedDescription">If the scene is not found, return kINVALID_SIMULATION_TIME </p>

<a name="classegf_phys_x_1_1_scene_service_1a737dabddc307260611caac659b3f25cd"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a37c593debc73d82d7ddc571c725f0e2d">efd::TimeType</a></span>  GetCurrentPhysXTime(const <span class="NDLSystemFont"><a href="../egf/egf__Entity.htm">egf::Entity</a></span>* pSceneEntity)</p>
<p class="NDLRefMemberDescription">Returns the last time used in simulation for the entity's scene. </p>
<p class="NDLRefMemberDetailedDescription">If the scene is not found, return kINVALID_SIMULATION_TIME </p>

<a name="classegf_phys_x_1_1_scene_service_1a8eb0265c850eb3c235c2ad65817e1669"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  GetDoFixedStep(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& sceneName, <br/><span class="NDLSystemFont">efd::Bool</span>& isFixedStep) const</p>
<p class="NDLRefMemberDescription">Get the fixed step flag for the named scene. </p>
<p class="NDLRefMemberDetailedDescription">Sets isFixedStep to the value of the flag controlling fixed or variable simulation timing for the specified scene.</p>
<p class="NDLRefMemberDetailedDescription">Return true if the scene is found. Otherwise, return false. </p>

<a name="classegf_phys_x_1_1_scene_service_1a7a22ada5ce6c59f814acbd8a0fbc69c9"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  SetDoFixedStep(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& sceneName, <br/>const <span class="NDLSystemFont">efd::Bool</span> isFixedStep)</p>
<p class="NDLRefMemberDescription">Set the flag controlling fixed or variable simulation timing for the named scene. </p>
<p class="NDLRefMemberDetailedDescription">Return true if the scene is found. Otherwise, return false. </p>

<a name="classegf_phys_x_1_1_scene_service_1ac5b23acd8f48fce3bf6fc326dfddda44"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  GetTimestep(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& sceneName, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>& step) const</p>
<p class="NDLRefMemberDescription">Get the time step for the names scene. </p>
<p class="NDLRefMemberDetailedDescription">Return true if the scene is found. Otherwise, return false. </p>

<a name="classegf_phys_x_1_1_scene_service_1a7e4ae49118c92d49901f05eb61019edb"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  SetTimestep(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& sceneName, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span> step)</p>
<p class="NDLRefMemberDescription">Set the timestep used with fixed time stepping for the specified scene. </p>
<p class="NDLRefMemberDetailedDescription">Return true if the scene is found. Otherwise, return false. </p>

<a name="classegf_phys_x_1_1_scene_service_1abb084f365f4cf07d1e10d586dbe8341c"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  GetMaxSubSteps(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& sceneName, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>& maxSteps) const</p>
<p class="NDLRefMemberDescription">Get the maximum number of sub-steps that PhysX will be asked to take for the named scene. </p>
<p class="NDLRefMemberDetailedDescription">Return true if the scene is found. Otherwise, return false. </p>

<a name="classegf_phys_x_1_1_scene_service_1a38dd77c8a9979e9fb6ded585760fb0bc"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  SetMaxSubSteps(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& sceneName, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> maxSteps)</p>
<p class="NDLRefMemberDescription">Set the maximum number of steps that PhysX will be asked to take for the named scene. </p>
<p class="NDLRefMemberDetailedDescription">Return true if the scene is found. Otherwise, return false. </p>

<a name="classegf_phys_x_1_1_scene_service_1a323816cd82bb4e5ca5e07a78ab8c3a05"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  GetNumSubSteps(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& sceneName, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>& numSubSteps) const</p>
<p class="NDLRefMemberDescription">Gets the number of sub-steps per timestep for the named scene. </p>
<p class="NDLRefMemberDetailedDescription">Returns true if the scene is found. Otherwise, returns false. </p>

<a name="classegf_phys_x_1_1_scene_service_1ad4603f66c1cd07f325db4462e4b6b9eb"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  SetNumSubSteps(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& sceneName, <br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> numSubSteps)</p>
<p class="NDLRefMemberDescription">Sets the number of sub-steps per timestep for the named scene. </p>
<p class="NDLRefMemberDetailedDescription">Returns true if the scene is found. Otherwise, returns false. </p>

<a name="classegf_phys_x_1_1_scene_service_1ab8bd468b9ba8f4002d0534cd37f00172"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  GetBlockOnFetch(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& sceneName, <br/><span class="NDLSystemFont">efd::Bool</span>& blockOnFetch) const</p>
<p class="NDLRefMemberDescription">Get the block on fetch status for the named scene. </p>
<p class="NDLRefMemberDetailedDescription">Return true if the scene is found. Otherwise, return false. </p>

<a name="classegf_phys_x_1_1_scene_service_1a7299263ee365bdb01bb79e13e36351b1"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  SetBlockOnFetch(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& sceneName, <br/>const <span class="NDLSystemFont">efd::Bool</span> blockOnFetch)</p>
<p class="NDLRefMemberDescription">Set the blocking status of fetch results for the specified scene. </p>
<p class="NDLRefMemberDetailedDescription">Return true if the scene is found. Otherwise, return false. </p>

<a name="classegf_phys_x_1_1_scene_service_1a58991762676c73b8e607ed781a55a948"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  GetGravity(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& sceneName, <br/><span class="NDLSystemFont"><a href="../efd/efd__Point3.htm">efd::Point3</a></span>& gravity) const</p>
<p class="NDLRefMemberDescription">Get the PhysX scene's gravity. </p>
<p class="NDLRefMemberDetailedDescription">Return true if the scene is found. Otherwise, return false. </p>

<a name="classegf_phys_x_1_1_scene_service_1a5479693dfe45c0019d228c353704139f"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  SetGravity(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& sceneName, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__Point3.htm">efd::Point3</a></span> gravity)</p>
<p class="NDLRefMemberDescription">Set the PhysX scene's gravity. </p>
<p class="NDLRefMemberDetailedDescription">Return true if the scene is found. Otherwise, return false. </p>

<a name="classegf_phys_x_1_1_scene_service_1a5e4246ebd99e030ac6446874c735f74d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  IsSimulationActive(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& sceneName, <br/><span class="NDLSystemFont">efd::Bool</span>& isActive) const</p>
<p class="NDLRefMemberDescription">Get the simulation active status for the named scene. </p>
<p class="NDLRefMemberDetailedDescription">The isActive parameter will be set true when the scene name is found and a Simulate call has been made on the scene with no matching successful FetchResults. The isActive parameter will be false if there has been no Simulate call since the last successful FetchResults. In general, it is only safe to perform operations on the PhysX SDK when the isActive parameter is returned as false.</p>
<p class="NDLRefMemberDetailedDescription">Return true if the scene is found. Otherwise, return false and do not change isActive. </p>
<a name="physx_scene_management"></a>
<p class="NDLRefHead1">PhysX Scene Management</p>

<p class="NDLRefMemberDescription">The Scene Service handles scene management.</p>
<p class="NDLRefMemberDescription">PhysX scenes are created outside of the service and added to the scene map. Each scene is given a name when it is added to the Scene Service. It can then be accessed by that name.</p>
<p class="NDLRefMemberDescription">Name conflicts are resolved by not adding the scene. As everything related to scenes is managed by name, subsequent functions accessing a scene of the conflicting name will receive data from the original scene with the name. </p>

<a name="classegf_phys_x_1_1_scene_service_1a8775dd3dd1387ee08198dff531f691b1"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="egfPhysX__PhysXSceneData.htm">PhysXSceneData</a></span>*  GetSceneData(const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& sceneName) const</p>
<p class="NDLRefMemberDescription">Get the scene data with the specified name. </p>
<p class="NDLRefMemberDetailedDescription">This may be used to access any scene properties. including the NxScene object. </p>

<a name="classegf_phys_x_1_1_scene_service_1a41d6df68207db87611185baadcdae4b8"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">efd::Bool</span>  AddScene(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& sceneName, <br/><span class="NDLSystemFont"><a href="egfPhysX__PhysXSceneData.htm">PhysXSceneData</a></span>* pSceneData)</p>
<p class="NDLRefMemberDescription">Add the PhysX scene to the Scene Service. </p>
<p class="NDLRefMemberDetailedDescription">This scene will be accessed by using the specified name. If a scene already exists with the given name, the existing scene is removed under the assumption that the existing scene will subsequently be renamed and re-added.</p>
<p class="NDLRefMemberDetailedDescription">An application that adds a scene in this way is responsible for removing it from the Scene Service. It is also responsible for deleting the pSceneData after the scene has been removed from the service.</p>
<p class="NDLRefMemberDetailedDescription">The Scene Service sends a SceneAddedMessage message when a scene is added</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>False if a scene with the given name existed and was removed; otherwise true. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_phys_x_1_1_scene_service_1a4b102fe363560710fcb542791624b86f"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">efd::Bool</span>  RemoveScene(const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& sceneName)</p>
<p class="NDLRefMemberDescription">Remove the PhysX scene with the specified name from the list of scenes. </p>
<p class="NDLRefMemberDetailedDescription">The Scene Service sends a SceneRemovingMessage message when it knows a scene will be removed, but while it is still possible to interact with the scene via the service. A SceneRemovedMessage message is sent when the scene has been removed. Subsequent attempts to access the scene will fail.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>True if the scene was removed, false if a scene with the specified name was not found </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegf_phys_x_1_1_scene_service_1abba32a1ceadc1dbd361c20e762f44967"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../efd/efd__ProcessorAffinity.htm">efd::ProcessorAffinity</a></span>  GetProcessorAffinity() const</p>
<p class="NDLRefMemberDescription">Get the service's recommended processor affinity for creating PhysX scenes. </p>
<p class="NDLRefMemberDetailedDescription">May be called during PreInit or Init. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
