<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>egfPhysX::PhysXSceneData</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">egfPhysX::PhysXSceneData</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../efd/efd__IBase.htm">efd::IBase</a></span></p>


<p class="NDLRefHeaderFile">&lt;PhysXSceneData.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classegf_phys_x_1_1_phys_x_scene_data.gif" alt="Inheritance graph for egfPhysX::PhysXSceneData"/>
  <p class="FigureCaption">Inheritance graph for egfPhysX::PhysXSceneData</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">The <span class="NDLSystemFont">PhysXSceneData</span> class manages all the data necessary to configure and control an NxScene in the Game Framework. </p>
<p class="NDLNormal">Entites that mix in PhysXScene use this data object, and the <span class="NDLSystemFont"><a href="egfPhysX__SceneService.htm">egfPhysX::SceneService</a></span> caches pointers to the data for all scene graphs it knows of. </p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classegf_phys_x_1_1_phys_x_scene_data_1a3ebb1c284145390f003e13113a267fea"></a>
<p class="NDLRefMemberFunction">PhysXSceneData()</p>
<p class="NDLRefMemberDetailedDescription">Constructor sets all default properties. </p>

<a name="classegf_phys_x_1_1_phys_x_scene_data_1affd7f84b22057c3a693aadafb9cd35a2"></a>
<p class="NDLRefMemberFunction">virtual ~PhysXSceneData()</p>
<p class="NDLRefMemberDescription">Virtual destructor. </p>

<a name="classegf_phys_x_1_1_phys_x_scene_data_1a158459f9d4cfb75b05f21a1ee6291128"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__Point3.htm">efd::Point3</a></span>  GetGravity() const</p>
<p class="NDLRefMemberDescription">Get the current gravity value. </p>

<a name="classegf_phys_x_1_1_phys_x_scene_data_1a5a5eb8bb8e18a647590f046acb15fcac"></a>
<p class="NDLRefMemberFunction">void  SetGravity(const <span class="NDLSystemFont"><a href="../efd/efd__Point3.htm">efd::Point3</a></span>& gravity)</p>
<p class="NDLRefMemberDescription">Set the current gravity value. </p>
<p class="NDLRefMemberDetailedDescription">The default is 0,0,-9.8; </p>

<a name="classegf_phys_x_1_1_phys_x_scene_data_1a34cb9ba3ed76a5662fdccaf3949fe9c5"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  GetEntityOwned() const</p>
<p class="NDLRefMemberDescription">Query whether or not this data belongs to an entity. </p>

<a name="classegf_phys_x_1_1_phys_x_scene_data_1aa1b46a09af1f3ed20c66e224dc93f91b"></a>
<p class="NDLRefMemberFunction">void  SetEntityOwned(const <span class="NDLSystemFont">efd::Bool</span> haveEntity)</p>
<p class="NDLRefMemberDescription">Set whether or not this data belongs to an entity. </p>

<a name="classegf_phys_x_1_1_phys_x_scene_data_1a09f31bf019d3ab854a9842fc4cca69f0"></a>
<p class="NDLRefMemberFunction">virtual const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>&  GetSceneName() const</p>
<p class="NDLRefMemberDescription">Get the name of the scene. </p>

<a name="classegf_phys_x_1_1_phys_x_scene_data_1a86674d0b171033703d0c58daabb54f99"></a>
<p class="NDLRefMemberFunction">virtual void  SetSceneName(const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& newName)</p>
<p class="NDLRefMemberDescription">Set the name of the scene. </p>

<a name="classegf_phys_x_1_1_phys_x_scene_data_1a80ef8b84b4509edf6d47c064ff218ab7"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  GetUseHardware() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="classegf_phys_x_1_1_phys_x_scene_data_1a2bcb31281add002e167e2c929e2fd6aa"></a>
<p class="NDLRefMemberFunction">void  SetUseHardware(const <span class="NDLSystemFont">efd::Bool</span>& useHardware)</p>
<p class="NDLRefMemberFunction"></p>

<a name="classegf_phys_x_1_1_phys_x_scene_data_1ab5c16be1205723de5b27640a8eacf77b"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  GetGroupCollisionFlag(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span> group1, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span> group2, <br/><span class="NDLSystemFont">efd::Bool</span>& isEnabled)</p>
<p class="NDLRefMemberDescription">Get the collision flag between two collision groups in a scene. </p>
<p class="NDLRefMemberDetailedDescription">The result of the query is placed in isEnabled.</p>
<p class="NDLRefMemberDetailedDescription">Return true if the groups are valid. Otherwise, return false. </p>

<a name="classegf_phys_x_1_1_phys_x_scene_data_1a752da966b805834521ae38a44b6396bf"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  SetGroupCollisionFlag(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span> group1, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span> group2, <br/><span class="NDLSystemFont">efd::Bool</span> isEnabled)</p>
<p class="NDLRefMemberDescription">Set the collision flag between two collision groups in a scene. </p>
<p class="NDLRefMemberDetailedDescription">Return true if the PhysX scene exists and the groups are valid. Otherwise, return false. </p>
<a name="physx_coordinate_system"></a>
<p class="NDLRefHead1">PhysX Coordinate System</p>

<p class="NDLRefMemberDescription">A scale factor relates the size of objects in the PhysX scene to those in the broader simulation.</p>
<p class="NDLRefMemberDescription">PhysX operates optimally at a particular ratio of force and mass to size, roughly corresponding to real-world physical quantities. Applications that have a world coordinate system designed for some other purpose may need to set the scale to place PhysX within its optimal range.</p>
<p class="NDLRefMemberDescription">Physics size is the scale factor times world (entity property) size. For example, an entity that is 100 units across in the rendered world with a scale factor of 0.01 will be 1 unit across in the PhysX simulation.</p>
<p class="NDLRefMemberDescription">The default scale factor is 1.0. </p>

<a name="classegf_phys_x_1_1_phys_x_scene_data_1a33ff6e75895d23515cb8b5b7d1bc4b69"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  GetScaleWorldToPhysX() const</p>
<p class="NDLRefMemberDescription">Get the value of the scale factor from world to PhysX coordinates. </p>

<a name="classegf_phys_x_1_1_phys_x_scene_data_1a84ae98329f2ba8785f2bb30a370b7ea1"></a>
<p class="NDLRefMemberFunction">void  SetScaleWorldToPhysX(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>& scaleWorldToPhysX)</p>
<p class="NDLRefMemberDescription">Set the value of the scale factor from world to PhysX coordinates. </p>
<p class="NDLRefMemberDetailedDescription">This should not be changed after the scene has been created and actors have been added. </p>
<a name="physx_scene_functions"></a>
<p class="NDLRefHead1">PhysX Scene Functions</p>

<p class="NDLRefMemberDescription">The <span class="NDLSystemFont">PhysXSceneData</span> object is responsible for managing scenes that it owns, including creation and destruction. </p>

<a name="classegf_phys_x_1_1_phys_x_scene_data_1afa59eb8da03554f92768b0110946aad9"></a>
<p class="NDLRefMemberFunction">NxScene*  GetPhysXScene() const</p>
<p class="NDLRefMemberDescription">Get the PhysX Scene object that corresponds to this scene, or NULL if there is no scene. </p>

<a name="classegf_phys_x_1_1_phys_x_scene_data_1aa3671dd2ea7c43ac1ba1c75964d139d6"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  GetOwnScene() const</p>
<p class="NDLRefMemberDescription">Query whether this model owns its corresponding PhysX scene. </p>
<p class="NDLRefMemberDetailedDescription">The scene may be owned by an <span class="NDLSystemFont"><a href="../NiPhysX/NiPhysXScene.htm">NiPhysXScene</a></span> from PhysX Core Services, in which case this function will return false. </p>

<a name="classegf_phys_x_1_1_phys_x_scene_data_1a73cc8cef83b135d84149bbef38744a4c"></a>
<p class="NDLRefMemberFunction">void  SetOwnScene(const <span class="NDLSystemFont">efd::Bool</span> ownScene)</p>
<p class="NDLRefMemberDescription">Set the ownership status of the PhysX scene. </p>
<p class="NDLRefMemberDetailedDescription">Only owned scenes are deleted by this model. </p>

<a name="classegf_phys_x_1_1_phys_x_scene_data_1ae7ae33ecf47a5f590f6cadc916bbebd1"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  CreateScene(const <span class="NDLSystemFont"><a href="../efd/efd__ProcessorAffinity.htm">efd::ProcessorAffinity</a></span>& affinity)</p>
<p class="NDLRefMemberDescription">Create the PhysX scene from the stored properties. </p>
<p class="NDLRefMemberDetailedDescription">Returns true if the scene was successfully created, false otherwise. </p>

<a name="classegf_phys_x_1_1_phys_x_scene_data_1ae75ba481bb5ec38a7154cfa012a4aa8e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  ReleaseScene()</p>
<p class="NDLRefMemberDescription">Release the PhysX scene. </p>
<p class="NDLRefMemberDetailedDescription">This function may block until simulation on the scene can be completed.</p>
<p class="NDLRefMemberDetailedDescription">Returns true if the scene was successfully removed, false if removal failed or if the scene is not owned. </p>

<a name="classegf_phys_x_1_1_phys_x_scene_data_1a1bfb1263e66ad484f04c3a064c8e7cbb"></a>
<p class="NDLRefMemberFunction">void  FlushPendingChanges()</p>
<p class="NDLRefMemberDescription">Flush queued changes to the PhysX object. </p>
<p class="NDLRefMemberDetailedDescription">Entity property changes may come in at any time, but results can only be written to the PhysX scene when it is not simulating. This method pushes any pending changes to the scene. </p>
<a name="simulation_functions"></a>
<p class="NDLRefHead1">Simulation Functions</p>

<p class="NDLRefMemberDescription">The <span class="NDLSystemFont">PhysXSceneData</span> object has two levels of simulation management.</p>
<p class="NDLRefMemberDescription">When GetHandleSimulate returns true, the object will completely manage all scene simulation, including making calls to NxScene::simulate and NxScene::fetchResults. If GetHandleSimulate returns false, the scene service will send messages indicating when simulation is starting and when simulation is finishing, and when simulation has finished, but the data will not actually handle the simulation. In this case, the expectation is that another service will manage the simulation when it receives the start and end simulation messages.</p>
<p class="NDLRefMemberDescription">When GetHandleSimulate returns true, the <span class="NDLSystemFont">PhysXSceneData</span> object takes complete control over the timing of the physics compartment when simulating. Applications should not make any calls to NxScene::setTiming or NxCompartment::setTiming - they will be over-ridden by this object.</p>
<p class="NDLRefMemberDescription">Some of these functions control the time step used when calling simulate for this scene and the time steps that PhysX uses. These functions only have an impact if GetHandleSimulate returns true. If active, fixed stepping uses a multiple of the given time step (set through SetTimestep) sufficient to get to or surpass the current tick time, otherwise it uses the difference between the target time and the most recent time (which depends on how the service is ticked). The PhysX scene is set to use the same stepping mechanism, fixed or variable, as this object. The time step passed to NxCompartment::setTiming is controlled by SetTimeStep and SetNumSubSteps. The argument to SetMaxNumSteps is the same as would be passed as the maxIter argument to NxCompartment::setTiming.</p>
<p class="NDLRefMemberDescription">There are functions to control whether or not simulation takes place. When the scene is created, simulation is disabled and <span class="NDLSystemFont"><a href="egfPhysX__PhysXSceneData.htm#classegf_phys_x_1_1_phys_x_scene_data_1a0bdb4cb46569b10c2a8c6261c5a7bd24">StartSimulating()</a></span> must be called to enable it. <span class="NDLSystemFont"><a href="egfPhysX__PhysXSceneData.htm#classegf_phys_x_1_1_phys_x_scene_data_1ad1efbd1315d0416a17290b9a96e51e50">StopSimulating()</a></span> will pause the simulation indefinitely. </p>

<a name="classegf_phys_x_1_1_phys_x_scene_data_1a5f819d939efe3a5c80546cfa1a6dc91b"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  GetHandleSimulation() const</p>
<p class="NDLRefMemberDescription">Query whether this object controls simulation of its corresponding the PhysX scene. </p>
<p class="NDLRefMemberDetailedDescription">Another service may be looking for messages to start and finish simulation on the scene, in which case this object should not handle simulation. </p>

<a name="classegf_phys_x_1_1_phys_x_scene_data_1a8c0d46de0782b8e97b66286ba4e7cc36"></a>
<p class="NDLRefMemberFunction">void  SetHandleSimulation(const <span class="NDLSystemFont">efd::Bool</span> handleSimulation)</p>
<p class="NDLRefMemberDescription">Set the simulation control status of the PhysX scene. </p>
<p class="NDLRefMemberDetailedDescription">This model only calls simulate/fetchResults on scenes for which it handles simulation. </p>

<a name="classegf_phys_x_1_1_phys_x_scene_data_1a0bdb4cb46569b10c2a8c6261c5a7bd24"></a>
<p class="NDLRefMemberFunction">virtual void  StartSimulating(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a37c593debc73d82d7ddc571c725f0e2d">efd::TimeType</a></span>& time)</p>
<p class="NDLRefMemberDescription">Start simulation on the scene with the specified start time. </p>
<p class="NDLRefMemberDetailedDescription">If time is less than 0, use the Current PhysX Time.</p>
<p class="NDLRefMemberDetailedDescription">NOTE: No simulation will occur before this method is called. The ActivateOnSetFinished property, if true, will cause this function to be called when the entity set has finished loading. </p>

<a name="classegf_phys_x_1_1_phys_x_scene_data_1ad1efbd1315d0416a17290b9a96e51e50"></a>
<p class="NDLRefMemberFunction">virtual void  StopSimulating()</p>
<p class="NDLRefMemberDescription">Stop simulating. </p>
<p class="NDLRefMemberDetailedDescription">Any currently active step will complete during the next Finish Simulation tick. </p>

<a name="classegf_phys_x_1_1_phys_x_scene_data_1a3a1ab1bb78ea4d7a4885235f6a8e1e77"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetSimulating() const</p>
<p class="NDLRefMemberDescription">Return true when StartSimulating has been with no matching StopSimulation. </p>

<a name="classegf_phys_x_1_1_phys_x_scene_data_1aee190d281e1ec745e94a124348ad4c63"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  Simulate(<br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a37c593debc73d82d7ddc571c725f0e2d">efd::TimeType</a></span>& targetTime, <br/>const <span class="NDLSystemFont">efd::Bool</span> forceSim)</p>
<p class="NDLRefMemberDescription">Start a simulation step. </p>
<p class="NDLRefMemberDetailedDescription">The targetTime is manipulated according to the timing values described below, although if forceSim is called and the internal time is in the future the time will be set to force a step.</p>
<p class="NDLRefMemberDetailedDescription">The simulation only starts of the handle simulation flag is true and the scene exists and the time is in the future (unless forced). True is returned when the step is started, false otherwise. </p>

<a name="classegf_phys_x_1_1_phys_x_scene_data_1a932ea491b3b04201efe3bd1d3553c8b3"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  FetchResults(<br/>const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a37c593debc73d82d7ddc571c725f0e2d">efd::TimeType</a></span>& targetTime, <br/>const <span class="NDLSystemFont">efd::Bool</span> forceBlockOnFetch)</p>
<p class="NDLRefMemberDescription">Fetch the simulation results. </p>
<p class="NDLRefMemberDetailedDescription">The results are only fetched if the object handles simulation for this data, we are actively simulating, the PhysX scene exists, the target time is greater than our most recent simulation target time, or the passed forced flag is true or the internal forced flag is true.</p>
<p class="NDLRefMemberDetailedDescription">Returns true if simulation completed, false otherwise. </p>

<a name="classegf_phys_x_1_1_phys_x_scene_data_1a4bcc6f6e6d9366c5345783428cd384af"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  GetSimActive() const</p>
<p class="NDLRefMemberDescription">Get the status of the simulation. </p>
<p class="NDLRefMemberDetailedDescription">True is returned when a Simulate call has been made on the scene with no matching successful FetchResults. False is returned if there has been no Simulate call since the last successful FetchResults. In general, it is only safe to perform operations on the PhysX SDK when this method returns false. </p>

<a name="classegf_phys_x_1_1_phys_x_scene_data_1a58ac460493869ced34353c54711080b1"></a>
<p class="NDLRefMemberFunction">void  SetSimActive(const <span class="NDLSystemFont">efd::Bool</span> isActive)</p>
<p class="NDLRefMemberDescription">Set the status of the simulation. </p>
<p class="NDLRefMemberDetailedDescription">This should be called by other services or systems that handle simulation on behalf of this model. </p>

<a name="classegf_phys_x_1_1_phys_x_scene_data_1a008bfc1f2d1acd7341a27d97f4ef50c6"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a37c593debc73d82d7ddc571c725f0e2d">efd::TimeType</a></span>  GetCurrentPhysXTime() const</p>
<p class="NDLRefMemberDescription">Return the last fetch time. </p>

<a name="classegf_phys_x_1_1_phys_x_scene_data_1a0ed92f0d3f98f2a9de1934eb113fe5ff"></a>
<p class="NDLRefMemberFunction">void  SetCurrentPhysXTime(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a37c593debc73d82d7ddc571c725f0e2d">efd::TimeType</a></span>& time)</p>
<p class="NDLRefMemberDescription">Set the last fetch time, which is equivalent to setting the current simulation time. </p>

<a name="classegf_phys_x_1_1_phys_x_scene_data_1acaa9a664b11acf1a1a17dd82a734863a"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a37c593debc73d82d7ddc571c725f0e2d">efd::TimeType</a></span>  GetLastDelta() const</p>
<p class="NDLRefMemberDescription">Get the most recent delta time. </p>

<a name="classegf_phys_x_1_1_phys_x_scene_data_1a1bac6d119d4ad4eec4f5eba3c2ba5ccc"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>  GetTimeStep() const</p>
<p class="NDLRefMemberDescription">Get the time step. </p>

<a name="classegf_phys_x_1_1_phys_x_scene_data_1af136aaaaeefbdbc06a316fea66f99720"></a>
<p class="NDLRefMemberFunction">void  SetTimeStep(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a84dd4659cdf07ea3cbc429edc92db34a">efd::Float32</a></span>& timeStep)</p>
<p class="NDLRefMemberDescription">Set the time step. </p>
<p class="NDLRefMemberDetailedDescription">Default is 1.0 / 30.0. </p>

<a name="classegf_phys_x_1_1_phys_x_scene_data_1a7e3db05504d59f8a05b19d51296f5884"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetMaxSubSteps() const</p>
<p class="NDLRefMemberDescription">Get the maximum number of simulation sub steps the scene will use. </p>

<a name="classegf_phys_x_1_1_phys_x_scene_data_1a0c7aa3df5cf55608defc2f25212f00e3"></a>
<p class="NDLRefMemberFunction">void  SetMaxSubSteps(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>& maxSubSteps)</p>
<p class="NDLRefMemberDescription">Set the maximum number of simulation sub steps the scene will use. </p>
<p class="NDLRefMemberDetailedDescription">Default is 8. </p>

<a name="classegf_phys_x_1_1_phys_x_scene_data_1a367fc863428cbb7b5e076e7274feaef9"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetNumSubSteps() const</p>
<p class="NDLRefMemberDescription">Get the number of PhysX steps per Framework time step. </p>
<p class="NDLRefMemberDetailedDescription">More sub-steps increases the resolution of the PhysX simulation, with the cost of greater simulation time. </p>

<a name="classegf_phys_x_1_1_phys_x_scene_data_1adf56855b4b27e9454057d3f4ad9a5488"></a>
<p class="NDLRefMemberFunction">void  SetNumSubSteps(const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>& numSubSteps)</p>
<p class="NDLRefMemberDescription">Set the number of PhysX steps per Framework time step. </p>
<p class="NDLRefMemberDetailedDescription">Default value is 1. </p>

<a name="classegf_phys_x_1_1_phys_x_scene_data_1a9807862356adb3fb904cad2d2c951af2"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  GetFixedTimeStep() const</p>
<p class="NDLRefMemberDescription">Get the fixed time step flag. </p>

<a name="classegf_phys_x_1_1_phys_x_scene_data_1a4db13525a35e3ddb186828edeffce35e"></a>
<p class="NDLRefMemberFunction">void  SetFixedTimeStep(const <span class="NDLSystemFont">efd::Bool</span>& fixedTimeStep)</p>
<p class="NDLRefMemberDescription">Set the fixed time step flag. </p>
<p class="NDLRefMemberDetailedDescription">Default is true. </p>

<a name="classegf_phys_x_1_1_phys_x_scene_data_1aa6f0bd302064afb4fac1298d28cc8935"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  GetBlockOnFetch() const</p>
<p class="NDLRefMemberDescription">Get the block on fetch flag. </p>

<a name="classegf_phys_x_1_1_phys_x_scene_data_1ad3c51345370e2605b87f52e5d998081f"></a>
<p class="NDLRefMemberFunction">void  SetBlockOnFetch(const <span class="NDLSystemFont">efd::Bool</span>& block)</p>
<p class="NDLRefMemberDescription">Set the block on fetch flag. </p>
<p class="NDLRefMemberDetailedDescription">Default is false. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
