<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::NetTransportTCP</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::NetTransportTCP</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="efd__INetTransport.htm">efd::INetTransport</a></span></p>


<p class="NDLRefHeaderFile">&lt;NetTransportTCP.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classefd_1_1_net_transport_t_c_p.gif" alt="Inheritance graph for efd::NetTransportTCP"/>
  <p class="FigureCaption">Inheritance graph for efd::NetTransportTCP</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">A Transport class for sending reliable ordered TCP messages. </p>

<a name="construction_and_destruction"></a>
<p class="NDLRefHead1">Construction and Destruction</p>


<a name="classefd_1_1_net_transport_t_c_p_1a24d6f40e528343893325bd7bdc0e6557"></a>
<p class="NDLRefMemberFunction">NetTransportTCP(<br/><span class="NDLSystemFont"><a href="../efd/efd__GenericFactory.htm">MessageFactory</a></span>* pMessageFactory, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a3f46b06120f84d47e33a25e39034ed8e">QualityOfService</a></span> qos)</p>
<p class="NDLRefMemberDescription">Virtual destructor. </p>

<a name="classefd_1_1_net_transport_t_c_p_1a0ee10a64946d519acd5636e482f72705"></a>
<p class="NDLRefMemberFunction">virtual ~NetTransportTCP()</p>
<p class="NDLRefMemberDescription">Virtual destructor. </p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classefd_1_1_net_transport_t_c_p_1a672e8b235ecde8dc8caf2422815af20c"></a>
<p class="NDLRefMemberFunction">void  IncRefCount() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_net_transport_t_c_p_1a813390d0940b3bc698e6c90236daefb0"></a>
<p class="NDLRefMemberFunction">void  DecRefCount() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_net_transport_t_c_p_1a086384d4f1b4ee4c8282387c16905a0b"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetRefCount() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_net_transport_t_c_p_1a356469e33b028d061ca59b65ca65721d"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  Send(<br/><span class="NDLSystemFont"><a href="../efd/efd__EnvelopeMessage.htm">EnvelopeMessage</a></span>* pMessage, <br/><span class="NDLSystemFont"><a href="../efd/efd__RefCountedMemObj.htm">ConnectionIDSet</a></span>* pListenerSet)</p>
<p class="NDLRefMemberDescription">Accept a message for sending to our connection. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMessage</span></td>
    <td>The outgoing message </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pListenerSet</span></td>
    <td>The <span class="NDLSystemFont"><a href="../efd/efd__set.htm">set</a></span> of listeners for this message </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>: True if the message was sent </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_net_transport_t_c_p_1a94a4315755746b7e64ee14b9d040f04c"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  Send(<br/><span class="NDLSystemFont"><a href="../efd/efd__EnvelopeMessage.htm">EnvelopeMessage</a></span>* pMessage, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span>& cid)</p>
<p class="NDLRefMemberDescription">Accept a message for sending to a specific connection. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMessage</span></td>
    <td>The envelope message to send. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">cid</span></td>
    <td>the id of the connection to send the message on </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>: True if the message was sent </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_net_transport_t_c_p_1a264c7bd7e03bde0bae5ac9ab5c0de950"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ad81d366c75ea1e1119513a730f79910d">efd::AsyncResult</a></span>  OnTick()</p>
<p class="NDLRefMemberDescription">Called once per frame. </p>

<a name="classefd_1_1_net_transport_t_c_p_1a61232a80492a72f5ecbb57c407edc34c"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ad81d366c75ea1e1119513a730f79910d">efd::AsyncResult</a></span>  OnInit()</p>
<p class="NDLRefMemberDescription">Called once before OnTick is called. </p>

<a name="classefd_1_1_net_transport_t_c_p_1a76892593d0177ace9dc54c4ee4e40130"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ad81d366c75ea1e1119513a730f79910d">efd::AsyncResult</a></span>  OnShutdown()</p>
<p class="NDLRefMemberDescription">Called once before the network shuts down. </p>

<a name="classefd_1_1_net_transport_t_c_p_1ad43fda0aea87415f820b966fbc0446bf"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a3f46b06120f84d47e33a25e39034ed8e">efd::QualityOfService</a></span>  GetTransportType()</p>
<p class="NDLRefMemberDescription">Returns the transport type for this transport. </p>

<a name="classefd_1_1_net_transport_t_c_p_1ad897d16eaf5eb37dd9ee93812e268aa6"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">efd::ConnectionID</a></span>  Listen(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span> portListen, <br/><span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>* pCallback)</p>
<p class="NDLRefMemberDescription">Creates a socket and starts listening on the specified port. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">portListen</span></td>
    <td>The port to listen of incoming connections on. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pCallback</span></td>
    <td>Callback pointer. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>: returns true if the connection succeeded. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_net_transport_t_c_p_1a2e53a0c2125ff82ce94598c69e547372"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span>  Connect(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& strServerAddress, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span> portServer, <br/><span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>* pCallback)</p>
<p class="NDLRefMemberDescription">Creates a new connection outgoing connection and listens for incoming messages. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">strServerAddress</span></td>
    <td>The server address to connect to </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">portServer</span></td>
    <td>The server port to connect to </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pCallback</span></td>
    <td>Callback pointer. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_net_transport_t_c_p_1aa8341d996b04410036f60f92863df6ed"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  SendTo(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span>& sourceConnectionID, <br/><span class="NDLSystemFont"><a href="../efd/efd__EnvelopeMessage.htm">EnvelopeMessage</a></span>* pEnvelopeMessage, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& strServerAddress, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span> portServer)</p>
<p class="NDLRefMemberDescription">Sends a message to the specified port and ip address originating from an already established connection. </p>
<p class="NDLRefMemberDetailedDescription">Only valid for unreliable connectionless qualities of service. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">sourceConnectionID</span></td>
    <td>The connection/socket to use to send the message </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pEnvelopeMessage</span></td>
    <td>The outgoing message </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">strServerAddress</span></td>
    <td>The server address to connect to </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">portServer</span></td>
    <td>The server port to connect to </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_net_transport_t_c_p_1a746c6512c7698917d58b547ad3e0e2d6"></a>
<p class="NDLRefMemberFunction">virtual void  ReceiveMessages()</p>
<p class="NDLRefMemberDescription">Loops through all the available transports and pulls off any messages that have been received. </p>
<p class="NDLRefMemberDetailedDescription">Calls ReceiveMessage for each message received. </p>

<a name="classefd_1_1_net_transport_t_c_p_1a891ec32b6e82ff965761382581bab272"></a>
<p class="NDLRefMemberFunction">virtual void  SendMessages()</p>
<p class="NDLRefMemberDescription">Sends any queued messages. </p>

<a name="classefd_1_1_net_transport_t_c_p_1a02887c3e2e4acada4be22c823a37d5fa"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  QueryOutgoingQueueSize()</p>
<p class="NDLRefMemberDescription">Query the total size of all outgoing queues in this transport. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>The total size of all outgoing queues in this transport. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_net_transport_t_c_p_1ac811fcde64ea87a5a4b69f4ab3760c8a"></a>
<p class="NDLRefMemberFunction">virtual void  ReceiveMessage(<br/><span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>* pMessageCallback, <br/><span class="NDLSystemFont"><a href="../efd/efd__EnvelopeMessage.htm">EnvelopeMessage</a></span>* pEnvelopeMessage)</p>
<p class="NDLRefMemberDescription">Called when a message is received. </p>
<p class="NDLRefMemberDetailedDescription">Actually delivers the message to the <span class="NDLSystemFont"><a href="efd__NetService.htm">NetService</a></span>. If any packet mangling or extra enveloping needs to happen at the transport layer, this is the method to override. </p>

<a name="classefd_1_1_net_transport_t_c_p_1a70966c70763f3f1d4ca84e1368ea53bc"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  Send(<span class="NDLSystemFont"><a href="../efd/efd__EnvelopeMessage.htm">EnvelopeMessage</a></span>* pMessage)</p>
<p class="NDLRefMemberDescription">Send the message using the TCP Transport. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMessage</span></td>
    <td>The outgoing message </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_net_transport_t_c_p_1a41cdf4b1e0af707b507ef6638c3492e5"></a>
<p class="NDLRefMemberFunction">virtual void  CloseConnection(const <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span>& cid)</p>
<p class="NDLRefMemberDescription">Close a connection by <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span>. </p>
<p class="NDLRefMemberDetailedDescription">It actually marks the connection so that it will be closed later when it is safe. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">cid</span></td>
    <td>The connectionID of the connection to close. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_net_transport_t_c_p_1a902e50e748356a52312f3476b3db9a18"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="efd__IConnection.htm">IConnection</a></span>*  GetTransportData(const <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span>& cid)</p>
<p class="NDLRefMemberDescription">Get transport data by connection ID. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">cid</span></td>
    <td>ID of the transport data (connection) get </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_net_transport_t_c_p_1a7f19455d265502511a470cef449c160d"></a>
<p class="NDLRefMemberFunction">virtual void  SetMessageCallback(<span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>* pMessageCallback)</p>
<p class="NDLRefMemberDescription">Set the callback to use when the transport receives a message. </p>

<a name="classefd_1_1_net_transport_t_c_p_1af85a74a27c0f1ee17ccdfa352f7c8d1b"></a>
<p class="NDLRefMemberFunction">virtual void  RemoveCallback(<br/><span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>* pCallbackToRemove, <br/><span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>* pReplacementCallback)</p>
<p class="NDLRefMemberDescription">Remove the specified callback from all connections. </p>

<a name="classefd_1_1_net_transport_t_c_p_1a6bfe3e397531bc1931a94f0c50d9ae03"></a>
<p class="NDLRefMemberFunction">virtual void  CloseAllConnections()</p>
<p class="NDLRefMemberDescription">Check for any remaining connections that need to be closed and closes them. </p>

<a name="classefd_1_1_net_transport_t_c_p_1a957c6985a830cbc07cbb8d8675b806f3"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  GetLastResult()</p>
<p class="NDLRefMemberDescription">Used to check the last result of a send was for this transport. </p>
<p class="NDLRefMemberDetailedDescription">It is mainly used to keep track of whether a failure notice has been sent to the client.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>True if the last send was successful. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_net_transport_t_c_p_1a4618de8368bab28745981d3206988ea6"></a>
<p class="NDLRefMemberFunction">virtual void  SetLastResult(<span class="NDLSystemFont">bool</span> result)</p>
<p class="NDLRefMemberDescription">Used to save the last result of a send for this transport. </p>
<p class="NDLRefMemberDetailedDescription">It is mainly used to keep track of whether a failure notice has been sent to the client.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">result</span></td>
    <td>True if the last send was successful. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_net_transport_t_c_p_1a8678fede15a3fd37e2aeec8f41d503da"></a>
<p class="NDLRefMemberFunction">virtual void  ReportError(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span>& cid, <br/><span class="NDLSystemFont"><a href="efd__IConnection.htm">IConnection</a></span>* pConnection)</p>
<p class="NDLRefMemberDescription">Called when a connection function call returns an error. </p>
<p class="NDLRefMemberDetailedDescription">Forwards the error information to the category kCAT_NetErrorMessage, so interested parties can subscribe for notifications.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">cid</span></td>
    <td>The connection ID </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pConnection</span></td>
    <td>Pointer to the connection that reported the error </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_net_transport_t_c_p_1a4b22ed02ff2b2d2246e296f9030e54ed"></a>
<p class="NDLRefMemberFunction">virtual void  ReportError(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span>& cid, <br/><span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>* pCallback, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span> error, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">utf8string</a></span>& errorString)</p>
<p class="NDLRefMemberDescription">An override of ReportError that takes an <span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span> for cases where the <span class="NDLSystemFont"><a href="efd__IConnection.htm">IConnection</a></span> is invalid. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">cid</span></td>
    <td>The connection ID </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pCallback</span></td>
    <td>The callback to forward the net message to </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">error</span></td>
    <td>The EE_SOCKET_ERROR value </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">errorString</span></td>
    <td>String representation of the error. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_net_transport_t_c_p_1a38fe99959760b2273a975976e32ef775"></a>
<p class="NDLRefMemberFunction">virtual void  Configure(<span class="NDLSystemFont"><a href="../efd/efd__ISection.htm">ISection</a></span>* pISection)</p>
<p class="NDLRefMemberDescription">Used to configure this <span class="NDLSystemFont"><a href="efd__INetTransport.htm">INetTransport</a></span> instance. </p>
<p class="NDLRefMemberDetailedDescription">A derived class can read any configuration information needed out of the passed in <span class="NDLSystemFont"><a href="../efd/efd__ISection.htm">ISection</a></span>.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pISection</span></td>
    <td>The section of configuration information to use to read configuration information out of. </td>
</tr>

        </tbody>
    </table>
</div>


 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
