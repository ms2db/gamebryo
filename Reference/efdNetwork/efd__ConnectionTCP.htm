<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::ConnectionTCP</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::ConnectionTCP</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="efd__IConnection.htm">efd::IConnection</a></span></p>


<p class="NDLRefHeaderFile">&lt;ConnectionTCP.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classefd_1_1_connection_t_c_p.gif" alt="Inheritance graph for efd::ConnectionTCP"/>
  <p class="FigureCaption">Inheritance graph for efd::ConnectionTCP</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">A wrapper for data sent via the <span class="NDLSystemFont"><a href="efd__NetTransportTCP.htm">NetTransportTCP</a></span> transport. </p>

<a name="construction_and_destruction"></a>
<p class="NDLRefHead1">Construction and Destruction</p>


<a name="classefd_1_1_connection_t_c_p_1a4a072860f249c62fe6c49528bc2f20b3"></a>
<p class="NDLRefMemberFunction">ConnectionTCP(<br/>const <span class="NDLSystemFont">ConnectionTCP</span>& rhs, <br/><span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span> remoteConnectionID)</p>
<p class="NDLRefMemberDescription">Virtual destructor. </p>

<a name="classefd_1_1_connection_t_c_p_1a3b349ebaba1e6c9ce30d497973bd36d5"></a>
<p class="NDLRefMemberFunction">ConnectionTCP(<br/><span class="NDLSystemFont"><a href="../efd/efd__GenericFactory.htm">MessageFactory</a></span>* pMessageFactory, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a3f46b06120f84d47e33a25e39034ed8e">QualityOfService</a></span> qos, <br/><span class="NDLSystemFont"><a href="efd__Socket.htm">Socket</a></span>* pSocket, <br/><span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>* pMessageCallback, <br/><span class="NDLSystemFont">bool</span> incomingConnection)</p>
<p class="NDLRefMemberDescription">Virtual destructor. </p>

<a name="classefd_1_1_connection_t_c_p_1a4f265a1a54e3c6ef6a01e93f932b2d75"></a>
<p class="NDLRefMemberFunction">ConnectionTCP(<br/><span class="NDLSystemFont"><a href="../efd/efd__GenericFactory.htm">MessageFactory</a></span>* pMessageFactory, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a3f46b06120f84d47e33a25e39034ed8e">QualityOfService</a></span> qos, <br/><span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>* pMessageCallback, <br/><span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>* pConnectionCallback)</p>
<p class="NDLRefMemberDescription">Virtual destructor. </p>

<a name="classefd_1_1_connection_t_c_p_1aa09c7969c735f30060205a5893b25313"></a>
<p class="NDLRefMemberFunction">virtual ~ConnectionTCP()</p>
<p class="NDLRefMemberDescription">Virtual destructor. </p>
<a name="public_static_methods"></a>
<p class="NDLRefHead1">Public Static Methods</p>


<a name="classefd_1_1_connection_t_c_p_1aed9d88967a4bae9c49b7345e54ea8b70"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont">ConnectionTCP</span>&gt;  Listen(<br/><span class="NDLSystemFont"><a href="../efd/efd__GenericFactory.htm">MessageFactory</a></span>* pMessageFactory, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a3f46b06120f84d47e33a25e39034ed8e">efd::QualityOfService</a></span> qos, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span> portListen, <br/><span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>* pMessageCallback, <br/><span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>* pConnectionCallback)</p>
<p class="NDLRefMemberDescription">Factory a <span class="NDLSystemFont">ConnectionTCP</span>, bind to a port and listen for incoming connections. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMessageFactory</span></td>
    <td>Pointer to a MessageFactory. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">qos</span></td>
    <td>Quality of service to use. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">portListen</span></td>
    <td>port to bind and listen for incoming connections on </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pMessageCallback</span></td>
    <td>Callback object to deliver messages on. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pConnectionCallback</span></td>
    <td>callback to receive connection notifications </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_connection_t_c_p_1a2c75f288c8a7654c752304d8a99bc555"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont">ConnectionTCP</span>&gt;  Connect(<br/><span class="NDLSystemFont"><a href="../efd/efd__GenericFactory.htm">MessageFactory</a></span>* pMessageFactory, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a3f46b06120f84d47e33a25e39034ed8e">efd::QualityOfService</a></span> qos, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& strServerAddress, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span> portServer, <br/><span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>* pMessageCallback, <br/><span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>* pConnectionCallback)</p>
<p class="NDLRefMemberDescription">Factory a <span class="NDLSystemFont">ConnectionTCP</span>, use it to attempt to connect to a server. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMessageFactory</span></td>
    <td>Pointer to a MessageFactory. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">qos</span></td>
    <td>Quality of service to use. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">strServerAddress</span></td>
    <td>address of the server to connect to </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">portServer</span></td>
    <td>port of the server to connect to </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pMessageCallback</span></td>
    <td>callback object to deliver messages to </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pConnectionCallback</span></td>
    <td>callback object to report connection status events to </td>
</tr>

        </tbody>
    </table>
</div>


<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classefd_1_1_connection_t_c_p_1ab25774c75cd9a56946ccaa43ffb12761"></a>
<p class="NDLRefMemberFunction">virtual void  IncRefCount() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_connection_t_c_p_1a1da7498dcaf9c023c0cf0adbd4694d38"></a>
<p class="NDLRefMemberFunction">virtual void  DecRefCount() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_connection_t_c_p_1a710ed652cd16877bc6ca23cb41705c7b"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetRefCount() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_connection_t_c_p_1aa018dba4a24661a3ea1f0bc8f5783420"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a3f46b06120f84d47e33a25e39034ed8e">efd::QualityOfService</a></span>  GetTransportType()</p>
<p class="NDLRefMemberDescription">Retrieves the QualityOfService associated with this object. </p>

<a name="classefd_1_1_connection_t_c_p_1a6df0b1f9b242057bf71d0d485a38998f"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  IsValid()</p>
<p class="NDLRefMemberDescription">Returns true if the Connection is connected and valid. </p>

<a name="classefd_1_1_connection_t_c_p_1afdc33a76fe3cf0129c0c3ff753a5391f"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>  ReceiveMessage(<br/><span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">EnvelopeMessagePtr</a></span>& spEnvelopeMessage, <br/><span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span>& remoteConnectionID)</p>
<p class="NDLRefMemberDescription">Receive a message from the underlying network and populate pEnvelopeMessage with the contents of the received message. </p>

<a name="classefd_1_1_connection_t_c_p_1a0b70bac413f78f727d30c6dfc0eed7ab"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>  SendMessages()</p>
<p class="NDLRefMemberDescription">Send any queued messages. </p>

<a name="classefd_1_1_connection_t_c_p_1a804d7cd74314e8716a964d811fe97758"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  QueryOutgoingQueueSize()</p>
<p class="NDLRefMemberDescription">Query the size of the outgoing <span class="NDLSystemFont"><a href="../efd/efd__queue.htm">queue</a></span> in this connection. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>The size of the outgoing <span class="NDLSystemFont"><a href="../efd/efd__queue.htm">queue</a></span> in this connection. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_connection_t_c_p_1a1ee4df9abe77fe78ae9df9e6ef4867d9"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>  CompleteConnection()</p>
<p class="NDLRefMemberDescription">Attempt to complete a connection asynchronously. </p>

<a name="classefd_1_1_connection_t_c_p_1a398744d78d19db1b5dcf55f1010ef1ba"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span>  GetRemoteConnectionID() const</p>
<p class="NDLRefMemberDescription">Retrieves the remote <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span> that this connection object receives messages from and sends messages to. </p>
<p class="NDLRefMemberDetailedDescription">If this connection is a listening connection or a many to one connection (such as UDP) then GetRemoteConnectionID will return the listening <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span>. </p>

<a name="classefd_1_1_connection_t_c_p_1a159aa0287e471989caad343b6c07b059"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  Send(<br/><span class="NDLSystemFont"><a href="../efd/efd__EnvelopeMessage.htm">EnvelopeMessage</a></span>* pMessage, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span>& cid)</p>
<p class="NDLRefMemberDescription">Actually sends the message across the network. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMessage</span></td>
    <td>The envelope message to send. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">cid</span></td>
    <td>connection id to send to. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>: True if the message was sent. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_connection_t_c_p_1a66f9a5ceb488c826e254b115f63c84af"></a>
<p class="NDLRefMemberFunction">virtual void  Close()</p>
<p class="NDLRefMemberDescription">Closes the connection associated with this object. </p>

<a name="classefd_1_1_connection_t_c_p_1a36884a91a5403cc5d1d244b2fbfcd463"></a>
<p class="NDLRefMemberFunction">virtual void  SetConnectionCallback(<span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>* pConnectionCallback)</p>
<p class="NDLRefMemberDescription">Set a callback object to receive connection oriented events: kMSGID_ConnectionConnectedMsg kMSGID_ConnectionFailedToConnectMsg kMSGID_ConnectionDisconnectedMsg kMSGID_ConnectionAcceptedMsg kMSGID_ConnectionFailedToAcceptMsg. </p>

<a name="classefd_1_1_connection_t_c_p_1a611e3cca75fe770aaca626f1dcb6ab15"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>*  GetConnectionCallback()</p>
<p class="NDLRefMemberDescription">Retrieve the object <span class="NDLSystemFont"><a href="../efd/efd__set.htm">set</a></span> to receive connection oriented events. </p>

<a name="classefd_1_1_connection_t_c_p_1afdad6167092d17fe0b9b80e791a21fbe"></a>
<p class="NDLRefMemberFunction">virtual void  SetMessageCallback(<span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>* pMessageCallback)</p>
<p class="NDLRefMemberDescription">Set a callback to receive data events: kMSGID_ConnectionDataReceivedMsg. </p>

<a name="classefd_1_1_connection_t_c_p_1ae4cb3d59df115adc8c952922d5e0f7b8"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>*  GetMessageCallback()</p>
<p class="NDLRefMemberDescription">Retrieve the object <span class="NDLSystemFont"><a href="../efd/efd__set.htm">set</a></span> to receive data events. </p>

<a name="classefd_1_1_connection_t_c_p_1a374408ef61f8e0530b80f457755a0bbb"></a>
<p class="NDLRefMemberFunction">virtual void  RemoveCallback(<br/><span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>* pCallbackToRemove, <br/><span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>* pReplacementCallback)</p>
<p class="NDLRefMemberDescription">Remove a callback object that no longer wishes to receive events. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pCallbackToRemove</span></td>
    <td>callback object to remove </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pReplacementCallback</span></td>
    <td>callback object to register instead, may be NULL </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_connection_t_c_p_1a69a261ebb3337bf491099a92cdb8d2cd"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">NetMessagePtr</a></span>  GetStatusMessage()</p>
<p class="NDLRefMemberDescription">Factories the appropriate connection notification message based on the status of the connection. </p>

<a name="classefd_1_1_connection_t_c_p_1a15cce57df1b45accb351b9ace6506714"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">IConnectionPtr</a></span>  Accept()</p>
<p class="NDLRefMemberDescription">Check for an incoming connection. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>a <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">SmartPointer</a></span> to the <span class="NDLSystemFont"><a href="efd__IConnection.htm">IConnection</a></span> for the newly established connection </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_connection_t_c_p_1a55aa94ac400e7d74ca8b44f68ce67ae0"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>  ReceiveVersions(<br/><span class="NDLSystemFont"><a href="../efd/efd__EnvelopeMessage.htm">efd::EnvelopeMessage</a></span>* pEnvelopeMessage, <br/><span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span>& versionConnectionID)</p>
<p class="NDLRefMemberDescription">Called when a message of type kMSGID_UnreliableVersion is received. </p>
<p class="NDLRefMemberDetailedDescription">Validates the version numbers and sends a response if required. Completes the connection if pending. versionConnectionID contains the <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span> this version message was targeted at. </p>

<a name="classefd_1_1_connection_t_c_p_1ad918459a4c2af7a8a5b6c7aa59c55156"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  IsListening()</p>
<p class="NDLRefMemberDescription">returns true if this is a listening connection </p>

<a name="classefd_1_1_connection_t_c_p_1ac3120e50a070e21308664094232a653b"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  IsIncomingConnection()</p>
<p class="NDLRefMemberDescription">returns true if this is an incoming connection </p>

<a name="classefd_1_1_connection_t_c_p_1a9f94dad3d6ffdc168f0533e6dd12fc9e"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>  GetLastError()</p>
<p class="NDLRefMemberDescription">@ { </p>
<p class="NDLRefMemberDetailedDescription">These functions implement the error-handling portion of the <span class="NDLSystemFont"><a href="efd__IConnection.htm">IConnection</a></span> interface. </p>
<p class="NDLRefMemberDetailedDescription"><span class="NDLSystemFont"><a href="efd__IConnection.htm">IConnection</a></span>. </p>

<a name="classefd_1_1_connection_t_c_p_1a8fe49892e22415fde3dc74fc0431dd0b"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>  GetLastErrorString()</p>
<p class="NDLRefMemberDescription">Returns a string describing the last failure that occurred in this Connection object. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td><span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span> The description </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_connection_t_c_p_1a02c98dc386227b73c9d115e0fb5cee24"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetLastSystemError()</p>
<p class="NDLRefMemberDescription">Returns the last error generated in the platform-specific networking code. </p>
<p class="NDLRefMemberDetailedDescription">For Berkeley sockets and related (e.g Winsock), this calls GetLastError.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> The error code. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_connection_t_c_p_1a21fbd9f28d5de1955a6ea12758223847"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>  GetLastSystemErrorString()</p>
<p class="NDLRefMemberDescription">Returns a string describing the last error in the platform-specific networking code. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td><span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span> The error description. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_connection_t_c_p_1a93ae39f4efb43fbadfc3e057a5ea2a67"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>  SetLastError(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span> errCode)</p>
<p class="NDLRefMemberDescription">@ } </p>
<p class="NDLRefMemberDetailedDescription">Returns the same value as <span class="NDLSystemFont"><a href="../efd/efd__set.htm">set</a></span>, so we can <span class="NDLSystemFont"><a href="../efd/efd__set.htm">set</a></span> the err code and return as a one-liner </p>

<a name="classefd_1_1_connection_t_c_p_1ae2f7e2e7353e2fc1aae3c8d0fd61a161"></a>
<p class="NDLRefMemberFunction">virtual void  Configure(<span class="NDLSystemFont"><a href="../efd/efd__ISection.htm">ISection</a></span>* pSection)</p>
<p class="NDLRefMemberDescription">Used to configure this <span class="NDLSystemFont"><a href="efd__IConnection.htm">IConnection</a></span> instance. </p>
<p class="NDLRefMemberDetailedDescription">A derived class can read any configuration information needed out of the passed in <span class="NDLSystemFont"><a href="../efd/efd__ISection.htm">ISection</a></span>. The default implementation does nothing.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pSection</span></td>
    <td>The config section from which to read settings </td>
</tr>

        </tbody>
    </table>
</div>


 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
