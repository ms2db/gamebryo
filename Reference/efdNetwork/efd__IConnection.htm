<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::IConnection</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::IConnection</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../efd/efd__MemObject.htm">efd::MemObject</a></span></p>


<p class="NDLRefHeaderFile">&lt;IConnection.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classefd_1_1_i_connection.gif" alt="Inheritance graph for efd::IConnection"/>
  <p class="FigureCaption">Inheritance graph for efd::IConnection</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">Interface class for the network transport data. </p>
<p class="NDLNormal">It is used to hold the connection data for the transports so it can be shared among transports as required. </p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classefd_1_1_i_connection_1ac341c78162ec3c6b35d8bc6e24eed6da"></a>
<p class="NDLRefMemberFunction">virtual void  IncRefCount() const = 0</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_i_connection_1a87ef5caac7f39c976e0a8911f13892dd"></a>
<p class="NDLRefMemberFunction">virtual void  DecRefCount() const = 0</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_i_connection_1a5adead001eddf9d39786a7e6f54ba8e7"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetRefCount() const = 0</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_i_connection_1afe02a8c23063d1910db9391e3b059692"></a>
<p class="NDLRefMemberFunction">virtual ~IConnection()</p>
<p class="NDLRefMemberDescription">Virtual destructor. </p>

<a name="classefd_1_1_i_connection_1a434183d0b897fa21320dc936058bf3ad"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a3f46b06120f84d47e33a25e39034ed8e">efd::QualityOfService</a></span>  GetTransportType() = 0</p>
<p class="NDLRefMemberDescription">Retrieves the QualityOfService associated with this object. </p>

<a name="classefd_1_1_i_connection_1a9c9fcd25b132b80970d09f405e6df4cc"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span>  GetRemoteConnectionID() const = 0</p>
<p class="NDLRefMemberDescription">Retrieves the remote <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span> that this connection object receives messages from and sends messages to. </p>
<p class="NDLRefMemberDetailedDescription">If this connection is a listening connection or a many to one connection (such as UDP) then GetRemoteConnectionID will return the listening <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span>. </p>

<a name="classefd_1_1_i_connection_1a0fd3b439854fa68020cb05f55e6e32ca"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  Send(<br/><span class="NDLSystemFont"><a href="../efd/efd__EnvelopeMessage.htm">EnvelopeMessage</a></span>* pMessage, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span>& cid) = 0</p>
<p class="NDLRefMemberDescription">Actually sends the message across the network. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMessage</span></td>
    <td>The envelope message to send. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">cid</span></td>
    <td>connection id to send to. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>: True if the message was sent. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_connection_1a2af32602c55b24c599af4d3b13b3d696"></a>
<p class="NDLRefMemberFunction">virtual void  Close() = 0</p>
<p class="NDLRefMemberDescription">Closes the connection associated with this object. </p>

<a name="classefd_1_1_i_connection_1af37cabefee8315a6a01c43f9947afbd2"></a>
<p class="NDLRefMemberFunction">virtual void  SetConnectionCallback(<span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>* pConnectionCallback) = 0</p>
<p class="NDLRefMemberDescription">Set a callback object to receive connection oriented events: kMSGID_ConnectionConnectedMsg kMSGID_ConnectionFailedToConnectMsg kMSGID_ConnectionDisconnectedMsg kMSGID_ConnectionAcceptedMsg kMSGID_ConnectionFailedToAcceptMsg. </p>

<a name="classefd_1_1_i_connection_1a77fd7348b05cb74e49d3d106b8fa9d6f"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>*  GetConnectionCallback() = 0</p>
<p class="NDLRefMemberDescription">Retrieve the object <span class="NDLSystemFont"><a href="../efd/efd__set.htm">set</a></span> to receive connection oriented events. </p>

<a name="classefd_1_1_i_connection_1af56975b5d97d3f5ee3d3c5a48655a302"></a>
<p class="NDLRefMemberFunction">virtual void  SetMessageCallback(<span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>* pMessageCallback) = 0</p>
<p class="NDLRefMemberDescription">Set a callback to receive data events: kMSGID_ConnectionDataReceivedMsg. </p>

<a name="classefd_1_1_i_connection_1a49419f6335a1ef5adf7c4ccac32e0564"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>*  GetMessageCallback() = 0</p>
<p class="NDLRefMemberDescription">Retrieve the object <span class="NDLSystemFont"><a href="../efd/efd__set.htm">set</a></span> to receive data events. </p>

<a name="classefd_1_1_i_connection_1ac0365b13427ed7e8e230f3c2abe5ece3"></a>
<p class="NDLRefMemberFunction">virtual void  RemoveCallback(<br/><span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>* pCallbackToRemove, <br/><span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>* pReplacementCallback) = 0</p>
<p class="NDLRefMemberDescription">Remove a callback object that no longer wishes to receive events. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pCallbackToRemove</span></td>
    <td>callback object to remove </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pReplacementCallback</span></td>
    <td>callback object to register instead, may be NULL </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_connection_1ab11023e7ba28035c5664c0444379af3e"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>  CompleteConnection() = 0</p>
<p class="NDLRefMemberDescription">Attempt to complete a connection asynchronously. </p>

<a name="classefd_1_1_i_connection_1a1f5e58e44ba3c14f1dda4d3e39a4d892"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">NetMessagePtr</a></span>  GetStatusMessage() = 0</p>
<p class="NDLRefMemberDescription">Factories the appropriate connection notification message based on the status of the connection. </p>

<a name="classefd_1_1_i_connection_1a5bfe4b0595b6c91fc8931a5285456dd3"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  IsValid() = 0</p>
<p class="NDLRefMemberDescription">Returns true if the Connection is connected and valid. </p>

<a name="classefd_1_1_i_connection_1a4bd826fd63df3ba17ba8d4677b00c6af"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>  ReceiveMessage(<br/><span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">EnvelopeMessagePtr</a></span>& spEnvelopeMessage, <br/><span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span>& remoteConnectionID) = 0</p>
<p class="NDLRefMemberDescription">Receive a message from the underlying network and populate pEnvelopeMessage with the contents of the received message. </p>

<a name="classefd_1_1_i_connection_1a3ccf537c4664489384ed67c07aed51dc"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>  SendMessages() = 0</p>
<p class="NDLRefMemberDescription">Send any queued messages. </p>

<a name="classefd_1_1_i_connection_1a7a6bfdd20dddb712a650f2009df39ee3"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  QueryOutgoingQueueSize() = 0</p>
<p class="NDLRefMemberDescription">Query the size of the outgoing <span class="NDLSystemFont"><a href="../efd/efd__queue.htm">queue</a></span> in this connection. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>The size of the outgoing <span class="NDLSystemFont"><a href="../efd/efd__queue.htm">queue</a></span> in this connection. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_connection_1a95526afe289a81195bf0423a8ee14959"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">IConnectionPtr</a></span>  Accept() = 0</p>
<p class="NDLRefMemberDescription">Check for an incoming connection. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>a <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">SmartPointer</a></span> to the <span class="NDLSystemFont">IConnection</span> for the newly established connection </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_connection_1aaf41bf36c9668d6233d30499e37f7071"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  IsListening() = 0</p>
<p class="NDLRefMemberDescription">returns true if this is a listening connection </p>

<a name="classefd_1_1_i_connection_1a8891b5a85b2e6f09cce1901cc307e69b"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  IsIncomingConnection() = 0</p>
<p class="NDLRefMemberDescription">returns true if this is an incoming connection </p>

<a name="classefd_1_1_i_connection_1a103f7867211c1118d086ebcfe7ce3c85"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>  GetLastError() = 0</p>
<p class="NDLRefMemberDescription">Returns the LightSpeed-specific error code associated with the last failure that occurred in this connection object. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> The error code. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_connection_1ab413229920129aaccb401977cb07e705"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>  GetLastErrorString() = 0</p>
<p class="NDLRefMemberDescription">Returns a string describing the last failure that occurred in this Connection object. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td><span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span> The description </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_connection_1ae33a747baf42e75095840bbe69736ec8"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetLastSystemError() = 0</p>
<p class="NDLRefMemberDescription">Returns the last error generated in the platform-specific networking code. </p>
<p class="NDLRefMemberDetailedDescription">For Berkeley sockets and related (e.g Winsock), this calls GetLastError.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> The error code. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_connection_1a30410748cb4426af1dcceceefcbf0d3d"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>  GetLastSystemErrorString() = 0</p>
<p class="NDLRefMemberDescription">Returns a string describing the last error in the platform-specific networking code. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td><span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span> The error description. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_connection_1a37c658b73696dacd0a432cdf5e932178"></a>
<p class="NDLRefMemberFunction">virtual void  Configure(<span class="NDLSystemFont"><a href="../efd/efd__ISection.htm">ISection</a></span>* pSection)</p>
<p class="NDLRefMemberDescription">Used to configure this <span class="NDLSystemFont">IConnection</span> instance. </p>
<p class="NDLRefMemberDetailedDescription">A derived class can read any configuration information needed out of the passed in <span class="NDLSystemFont"><a href="../efd/efd__ISection.htm">ISection</a></span>. The default implementation does nothing.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pSection</span></td>
    <td>The config section from which to read settings </td>
</tr>

        </tbody>
    </table>
</div>


 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
