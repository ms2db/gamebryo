<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::INetLib</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::INetLib</p>


<p class="NDLRefHeaderFile">&lt;INetLib.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classefd_1_1_i_net_lib.gif" alt="Inheritance graph for efd::INetLib"/>
  <p class="FigureCaption">Inheritance graph for efd::INetLib</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">/brief Abstract interface class for network layer used by <span class="NDLSystemFont"><a href="efd__NetService.htm">NetService</a></span> and <span class="NDLSystemFont"><a href="efd__ChannelManagerService.htm">ChannelManagerService</a></span>. </p>
<p class="NDLNormal"><span class="NDLSystemFont">INetLib</span> is the low level network abstraction that allows direct connections between <span class="NDLSystemFont">INetLib</span> instances. <span class="NDLSystemFont">INetLib</span> is not intended to be used directly by applications. <span class="NDLSystemFont">INetLib</span> is the expected integration point for third party network integrations. </p>

<a name="public_static_methods"></a>
<p class="NDLRefHead1">Public Static Methods</p>


<a name="classefd_1_1_i_net_lib_1ad0a324a92d02929ac10206dbbd6428f4"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span>  GenerateConnectionID(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a3f46b06120f84d47e33a25e39034ed8e">efd::QualityOfService</a></span> qos, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> ip, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span> remotePort, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span> localPort = 0)</p>
<p class="NDLRefMemberDescription">Uses port and IP address (possibly CONNECTION_PROTOCOL as well) to generate a private category. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">qos</span></td>
    <td>Quality of service. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">ip</span></td>
    <td>32-bit IP address of the remote host to which to connect. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">remotePort</span></td>
    <td>16-bit port on remote host to which to connect. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">localPort</span></td>
    <td>16-bit local port. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Private connection ID. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_net_lib_1acdfeb4130a70192509cf7d84c133cf63"></a>
<p class="NDLRefMemberFunction">template &lt;typename T  &gt; static void  RegisterNetLib(const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& netLibName)</p>
<p class="NDLRefMemberDescription">Used to register the factory method for an <span class="NDLSystemFont">INetLib</span>. </p>

<a name="classefd_1_1_i_net_lib_1adb2efb46d0f42e8821b11fa2c7c93522"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">SmartPointer</a></span>&lt;<span class="NDLSystemFont">INetLib</span>&gt;  CreateNetLib(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& netLibType, <br/><span class="NDLSystemFont"><a href="../efd/efd__GenericFactory.htm">MessageFactory</a></span>* pMessageFactory, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__ISection.htm">efd::ISection</a></span>* pSection)</p>
<p class="NDLRefMemberDescription">Create our <span class="NDLSystemFont">INetLib</span> object based on the string passed in. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">netLibType</span></td>
    <td>The type of the net lib to be created. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pMessageFactory</span></td>
    <td>The MessageFactory to be used by the newly created net lib instance. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pSection</span></td>
    <td>A Pointer to the configuration section to allow NetTransport configuration. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>A smart pointer to the newly created net lib. </td>
</tr>

        </tbody>
    </table>
</div>


<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classefd_1_1_i_net_lib_1ada4b76f82491dc60af5d031b13dd6e3a"></a>
<p class="NDLRefMemberFunction">void  SetNetID(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> netID)</p>
<p class="NDLRefMemberDescription">Access the network ID. </p>

<a name="classefd_1_1_i_net_lib_1a9546a64bf72beaeabb0b54c2a2c3e452"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetNetID() const</p>
<p class="NDLRefMemberDescription">Access the network ID. </p>

<a name="classefd_1_1_i_net_lib_1a72f459acf8170fc44cb7d772862850a8"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  StartNet()</p>
<p class="NDLRefMemberDescription">Start, stop and poll the network. </p>

<a name="classefd_1_1_i_net_lib_1ad80cfddb361522e4efc357aea1031541"></a>
<p class="NDLRefMemberFunction">static void  StopNet()</p>
<p class="NDLRefMemberDescription">Access the network ID. </p>

<a name="classefd_1_1_i_net_lib_1a48b2f9390c90d08240e190fbe33585a2"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont">bool</span>  IsNetReady()</p>
<p class="NDLRefMemberDescription">Access the network ID. </p>

<a name="classefd_1_1_i_net_lib_1ab382999baeb73a8e4b3046c7dec41f4a"></a>
<p class="NDLRefMemberFunction">INetLib()</p>
<p class="NDLRefMemberDetailedDescription">Constructor. </p>

<a name="classefd_1_1_i_net_lib_1ae1eebb4f789bd8bf2db8215084aad352"></a>
<p class="NDLRefMemberFunction">virtual ~INetLib()</p>
<p class="NDLRefMemberDescription">Virtual destructor. </p>

<a name="classefd_1_1_i_net_lib_1add021367defffd6c7667802f32b39014"></a>
<p class="NDLRefMemberFunction">virtual void  SetMessageFactory(<span class="NDLSystemFont"><a href="../efd/efd__GenericFactory.htm">MessageFactory</a></span>* pMessageFactory)</p>
<p class="NDLRefMemberDescription">Set the MessageFactory to be used by this instance. </p>

<a name="classefd_1_1_i_net_lib_1a630762237d313d615cbda072990b8e05"></a>
<p class="NDLRefMemberFunction">virtual void  Send(<br/><span class="NDLSystemFont"><a href="../efd/efd__IMessage.htm">IMessage</a></span>* pMessageToSend, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>& destCategory, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a3f46b06120f84d47e33a25e39034ed8e">efd::QualityOfService</a></span> defaultQOS = QOS_INVALID) = 0</p>
<p class="NDLRefMemberDescription">Send Message to all subscribers including subscribers in the current process (anyone in the current process that has subscribed to a message). </p>
<p class="NDLRefMemberDetailedDescription">Iterate local consumer data structure and calls callback for each also sends to all remote consumers of that category.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMessageToSend</span></td>
    <td>Message to send. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">destCategory</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span> to which to send message. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">defaultQOS</span></td>
    <td>QOS to send message on if category is not associated with a QOS by BeginCategoryProduction. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_net_lib_1af4b24534028386ec4f4804dcbe1e5d05"></a>
<p class="NDLRefMemberFunction">virtual void  SendRemote(<br/><span class="NDLSystemFont"><a href="../efd/efd__IMessage.htm">IMessage</a></span>* pMessageToSend, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>& destCategory, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a3f46b06120f84d47e33a25e39034ed8e">efd::QualityOfService</a></span> defaultQOS = QOS_INVALID) = 0</p>
<p class="NDLRefMemberDescription">Send Message to subscribers in remote processes only. </p>
<p class="NDLRefMemberDetailedDescription">Gets NetSet from RemoteConsumer data struct, and calls NetSet::Send() to send to a group of connections via NetRoute.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMessageToSend</span></td>
    <td>Message to send. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">destCategory</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span> to which to send message. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">defaultQOS</span></td>
    <td>QOS to send message on if category is not associated with a QOS by BeginCategoryProduction. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_net_lib_1aa293ed107a1fbfc20dc7a40369e04945"></a>
<p class="NDLRefMemberFunction">virtual void  SendRemote(<br/><span class="NDLSystemFont"><a href="../efd/efd__IMessage.htm">IMessage</a></span>* pMessageToSend, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>& destCategory, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span>& cid) = 0</p>
<p class="NDLRefMemberDescription">Send Message on a specific connection identified by cid. </p>
<p class="NDLRefMemberDetailedDescription">Send only to the CID provided.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMessageToSend</span></td>
    <td>Message to send. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">destCategory</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span> to which to send message. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">cid</span></td>
    <td>Connection ID. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_net_lib_1a29de8d2c066eb58bc6ef3700debf3fba"></a>
<p class="NDLRefMemberFunction">virtual void  SendTo(<br/><span class="NDLSystemFont"><a href="../efd/efd__IMessage.htm">IMessage</a></span>* pMessageToSend, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>& destCategory, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span>& sourceConnectionID, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& strServerAddress, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span> portServer) = 0</p>
<p class="NDLRefMemberDescription">Sends a message to the specified hostname and port originating from an already established connection. </p>
<p class="NDLRefMemberDetailedDescription">Only valid for unreliable connectionless qualities of service. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMessageToSend</span></td>
    <td>Message to send. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">destCategory</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span> to which to send message. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">sourceConnectionID</span></td>
    <td>The connection/socket to use to send the message </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">strServerAddress</span></td>
    <td>The server address to connect to </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">portServer</span></td>
    <td>The server port to connect to </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_net_lib_1a7e09e14e261f867453899e91790a8835"></a>
<p class="NDLRefMemberFunction">virtual void  Forward(<br/><span class="NDLSystemFont"><a href="../efd/efd__EnvelopeMessage.htm">EnvelopeMessage</a></span>* pEnvelopeMessage, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a3f46b06120f84d47e33a25e39034ed8e">efd::QualityOfService</a></span> defaultQOS = QOS_INVALID) = 0</p>
<p class="NDLRefMemberDescription">Forward an envelope message without looking at/inflating contents. </p>
<p class="NDLRefMemberDetailedDescription">Does not modify sender NetID; forwards via NetRoute.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pEnvelopeMessage</span></td>
    <td>Message to send. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">defaultQOS</span></td>
    <td>Quality of service to send message on if category is not associated with a QOS by BeginCategoryProduction. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_net_lib_1a0bd27869a1284667378e1acfd7d090d7"></a>
<p class="NDLRefMemberFunction">virtual void  Forward(<br/><span class="NDLSystemFont"><a href="../efd/efd__EnvelopeMessage.htm">EnvelopeMessage</a></span>* pEnvelopeMessage, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span>& cid) = 0</p>
<p class="NDLRefMemberDescription">Forward an envelope message without looking at/inflating contents do not modify sender NetID forwards only to the CID provided. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pEnvelopeMessage</span></td>
    <td>Message to send. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">cid</span></td>
    <td>Connection ID. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_net_lib_1a9afcaaee402c8a8344ed0100626aa74a"></a>
<p class="NDLRefMemberFunction">virtual void  SendAllRemote(<br/><span class="NDLSystemFont"><a href="../efd/efd__IMessage.htm">IMessage</a></span>* pMessageToSend, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>& destCategory) = 0</p>
<p class="NDLRefMemberDescription">Send Message to all remote listeners regardless of subscription sends to all remote listeners via NetRoute's Sendall. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMessageToSend</span></td>
    <td>Message to send. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">destCategory</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span> to which to send message. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_net_lib_1a7218264b7cd9637e3709f54c6255e6fe"></a>
<p class="NDLRefMemberFunction">virtual void  ForwardAllRemote(<span class="NDLSystemFont"><a href="../efd/efd__EnvelopeMessage.htm">EnvelopeMessage</a></span>* pEnvelopeMessage) = 0</p>
<p class="NDLRefMemberDescription">Forward an <span class="NDLSystemFont"><a href="../efd/efd__EnvelopeMessage.htm">EnvelopeMessage</a></span> without looking at/inflating contents to all remotely connected processes. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pEnvelopeMessage</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/efd__EnvelopeMessage.htm">EnvelopeMessage</a></span> to Forward to remote processes </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_net_lib_1a38fc18efd23b6b3ca518987c8037a731"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  QueryOutgoingQueueSize(<span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">efd::ConnectionID</a></span> cid = kCID_INVALID) = 0</p>
<p class="NDLRefMemberDescription">Query the size of the outgoing message <span class="NDLSystemFont"><a href="../efd/efd__queue.htm">queue</a></span> of the specified connection. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">cid</span></td>
    <td>The <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span> of the connection to query. If kCID_INVALID is specified this function should return the total of all outgoing <span class="NDLSystemFont"><a href="../efd/efd__queue.htm">queue</a></span> sizes for all connections. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The size of the queried outgoing <span class="NDLSystemFont"><a href="../efd/efd__queue.htm">queue</a></span>. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_net_lib_1a1cdb42221152eb5e9c649c06aa178514"></a>
<p class="NDLRefMemberFunction">virtual void  AddLocalConsumer(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>& destCategory, <br/><span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>* callback) = 0</p>
<p class="NDLRefMemberDescription">Register local callback for specified category and mask. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">destCategory</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span> to which to send message. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">callback</span></td>
    <td>Local callback. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_net_lib_1a3f2945d622246f899f162d551c43bdd0"></a>
<p class="NDLRefMemberFunction">virtual void  RemoveLocalConsumer(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>& destCategory, <br/><span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>* callback) = 0</p>
<p class="NDLRefMemberDescription">Unregister local callback for specific category. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">destCategory</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span> to which to send message. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">callback</span></td>
    <td>Local callback. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_net_lib_1acd4198330a97c2d86d8bc0024648a06c"></a>
<p class="NDLRefMemberFunction">virtual void  RemoveLocalConsumer(<span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>* pCallback) = 0</p>
<p class="NDLRefMemberDescription">Unregister local callback for all categories. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pCallback</span></td>
    <td>Local callback. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_net_lib_1a26cebb54e691e05188661f6b19e38ac6"></a>
<p class="NDLRefMemberFunction">virtual void  RemoveAllLocalConsumers() = 0</p>
<p class="NDLRefMemberDescription">Remove all local consumers. </p>
<p class="NDLRefMemberDetailedDescription">No more callbacks will fire. </p>

<a name="classefd_1_1_i_net_lib_1af238f3044dd49dab6706be415712ee53"></a>
<p class="NDLRefMemberFunction">virtual void  AddRemoteConsumer(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>& destCategory, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span>& consumerPrivateCat) = 0</p>
<p class="NDLRefMemberDescription">Looks up Connection of specified consumerPrivateCat and adds that connection to the NetRoutes route for that category. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">destCategory</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span> to which to send message. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">consumerPrivateCat</span></td>
    <td>Connection ID. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_net_lib_1a31f56b84d298756bbaba4bfe8abb5460"></a>
<p class="NDLRefMemberFunction">virtual void  RemoveRemoteConsumer(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>& destCategory, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span>& consumerPrivateCat) = 0</p>
<p class="NDLRefMemberDescription">Unregister remote consumer from the netroute. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">destCategory</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span> to which to send message. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">consumerPrivateCat</span></td>
    <td>Connection ID. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_net_lib_1abcc380061f445557ab6d79dd3860f545"></a>
<p class="NDLRefMemberFunction">virtual void  RemoveRemoteConsumer(const <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span>& cid) = 0</p>
<p class="NDLRefMemberDescription">Unregister remote consumer for all categories. </p>
<p class="NDLRefMemberDetailedDescription">Removes that cid from the netroute.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">cid</span></td>
    <td>Connection ID. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_net_lib_1a745ca4032d88aaef77e08e04e1aabd97"></a>
<p class="NDLRefMemberFunction">virtual void  RemoveAllRemoteConsumers() = 0</p>
<p class="NDLRefMemberDescription">Remove all remote consumers. </p>
<p class="NDLRefMemberDetailedDescription">No more messages will be sent out; cleans up the NetRoute. </p>

<a name="classefd_1_1_i_net_lib_1af95afa91638d90bf056fec43397203ec"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">efd::Bool</span>  HasRemoteConsumers(const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>& destCategory) = 0</p>
<p class="NDLRefMemberDescription">Tests if there are any remote consumers for the given category. </p>
<p class="NDLRefMemberDetailedDescription">Returns true if at least one remote consumer for the given category is found, otherwise returns false. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">destCategory</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span> to test.</td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_net_lib_1a97d2e849b6a8624ca29331d039fe0510"></a>
<p class="NDLRefMemberFunction">virtual void  ProducerAssociate(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span>& producer, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>& categoryProduced) = 0</p>
<p class="NDLRefMemberDescription">Associate a producer with a specific destination category, this allows us to call producer forward, which will send a message to all producers on a cat. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">producer</span></td>
    <td>Connection ID for producer. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">categoryProduced</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span> produced. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_net_lib_1ad688cd37d7e6a361ce93bd0c94b21c8e"></a>
<p class="NDLRefMemberFunction">virtual void  ProducerDeassociate(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span>& producer, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>& categoryProduced) = 0</p>
<p class="NDLRefMemberDescription">Disassociate a producer with a specific destination category, this allows us to call producer forward, which will send a message to all producers on a cat. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">producer</span></td>
    <td>Connection ID for producer. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">categoryProduced</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span> produced. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_net_lib_1a2cdbe36df3e4ddfbe4512f66482cc397"></a>
<p class="NDLRefMemberFunction">virtual void  ProducerSendRemote(<br/><span class="NDLSystemFont"><a href="../efd/efd__IMessage.htm">IMessage</a></span>* pMessageToSend, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>& categoryProduced) = 0</p>
<p class="NDLRefMemberDescription">Sends a message to the producer of the specified category. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMessageToSend</span></td>
    <td>Message to send. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">categoryProduced</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span> produced. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_net_lib_1a2332656c60b90f6644dc0e6c511a9a5c"></a>
<p class="NDLRefMemberFunction">virtual void  ProducerForward(<br/><span class="NDLSystemFont"><a href="../efd/efd__EnvelopeMessage.htm">EnvelopeMessage</a></span>* pMessageToSend, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>& categoryProduced) = 0</p>
<p class="NDLRefMemberDescription">Forwards a message to the producers of the specified category. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMessageToSend</span></td>
    <td>Message to send. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">categoryProduced</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span> produced. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_net_lib_1a30c110cc85bf4e859620ab2fd04eb3bf"></a>
<p class="NDLRefMemberFunction">virtual void  RegisterEventHandler(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> eventType, <br/><span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>* pCallback, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span>& cid, <br/><span class="NDLSystemFont">bool</span> consume = true) = 0</p>
<p class="NDLRefMemberDescription">Registers an event handler for events globally in <span class="NDLSystemFont">INetLib</span>. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">eventType</span></td>
    <td>Event type. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pCallback</span></td>
    <td>Local callback. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">cid</span></td>
    <td>Connection ID. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">consume</span></td>
    <td>True mirrors Emergent's implementation, where one can either register a local consumer, or an event handler. If an event handler is used, the old implementation is to consume that event. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_net_lib_1a35ce51639e4a43dd011a9718a9b5e108"></a>
<p class="NDLRefMemberFunction">virtual void  UnregisterEventHandler(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> eventType, <br/><span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>* pCallback, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span>& cid) = 0</p>
<p class="NDLRefMemberDescription">Unregisters an event handler. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">eventType</span></td>
    <td>Event type. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pCallback</span></td>
    <td>Local callback. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">cid</span></td>
    <td>Connection ID. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_net_lib_1a1ce493ed888f6d567dc4d3b8846e645f"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span>  Connect(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& ipaddress, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span> port, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a3f46b06120f84d47e33a25e39034ed8e">efd::QualityOfService</a></span> qualityOfService, <br/><span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>* callback = 0) = 0</p>
<p class="NDLRefMemberDescription">Calls GenerateConnectionID with ip and port. </p>
<p class="NDLRefMemberDetailedDescription">Creates a Connection by calling Connection::Connect(). <span class="NDLSystemFont">INetLib</span> handles callback. Adds private cat and connection to m_privCatToConn and m_privConnToCat so fast lookup can be done by either private category or Connection*.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">ipaddress</span></td>
    <td>IP address of the host to connect to in host byte order. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">port</span></td>
    <td>Port on remote host to which to connect in host byte order. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">qualityOfService</span></td>
    <td>Quality of service on which to send message. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">callback</span></td>
    <td>Local callback. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>ID of the Connection created. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_net_lib_1adc4cc86684ab443eb0806751ae1c4de2"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">efd::ConnectionID</a></span>  Listen(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& ipaddress, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span> port, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a3f46b06120f84d47e33a25e39034ed8e">efd::QualityOfService</a></span> qualityOfService, <br/><span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>* callback = 0) = 0</p>
<p class="NDLRefMemberDescription">Creates a Connection and calls Connection::Listen. </p>
<p class="NDLRefMemberDetailedDescription"><span class="NDLSystemFont">INetLib</span> handles callback. Adds private cat and connection to m_privCatToConn and m_privConnToCat so fast lookup can be done by either private category or Connection*.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">ipaddress</span></td>
    <td>IP address of the host to connect to in network byte order. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">port</span></td>
    <td>Port on remote host to which to connect in host byte order. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">qualityOfService</span></td>
    <td>Quality of service on which to send message. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">callback</span></td>
    <td>Local callback. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if listen completed successfully. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_net_lib_1a07429a987344c66dfab74f00214d89c2"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">efd::ConnectionID</a></span>  Listen(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span> port, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a3f46b06120f84d47e33a25e39034ed8e">efd::QualityOfService</a></span> qualityOfService, <br/><span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>* callback = 0) = 0</p>
<p class="NDLRefMemberDescription">Creates a Connection and calls Connection::Listen. </p>
<p class="NDLRefMemberDetailedDescription"><span class="NDLSystemFont">INetLib</span> handles callback. Adds private cat and connection to m_privCatToConn and m_privConnToCat so fast lookup can be done by either private category or Connection*. This version listens on all available interfaces (0.0.0.0).</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">port</span></td>
    <td>Port on remote host to which to connect in host byte order. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">qualityOfService</span></td>
    <td>Quality of service on which to send message. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">callback</span></td>
    <td>Local callback. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if listen completed successfully. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_net_lib_1a290f1c71b756b70453e3b5cb9caa4bc7"></a>
<p class="NDLRefMemberFunction">virtual void  CloseConnection(const <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span>& cid) = 0</p>
<p class="NDLRefMemberDescription">Closes the connection identified by connectionPrivateCat. </p>
<p class="NDLRefMemberDetailedDescription">This function will essentially delete that connection and all references to it.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">cid</span></td>
    <td>Connection ID. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_net_lib_1a2634094a8c1ac42d0c297a6048afee22"></a>
<p class="NDLRefMemberFunction">virtual void  MapCategoryToQualityOfService(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>& destCategory, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a3f46b06120f84d47e33a25e39034ed8e">QualityOfService</a></span> virtualQOS) = 0</p>
<p class="NDLRefMemberDescription">Declare that the specified <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span> should be sent over the specified QualityOfService. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">destCategory</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span> that is being mapped. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">virtualQOS</span></td>
    <td>QualityOfService that the <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span> is being mapped to. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_net_lib_1a798129c77e52d7526a32c802907f9cd1"></a>
<p class="NDLRefMemberFunction">virtual void  BeginCategoryProduction(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>& categoryToProduce, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a3f46b06120f84d47e33a25e39034ed8e">efd::QualityOfService</a></span> qualityOfService) = 0</p>
<p class="NDLRefMemberDescription">Declares that this <span class="NDLSystemFont">INetLib</span> will be producing the specified category. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">categoryToProduce</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span> to produce. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">qualityOfService</span></td>
    <td>Quality of service to use. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_net_lib_1aa66f455ef9d87ce5bb0d3694d9397b66"></a>
<p class="NDLRefMemberFunction">virtual void  EndCategoryProduction(const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>& categoryToProduce) = 0</p>
<p class="NDLRefMemberDescription">Declares that this <span class="NDLSystemFont">INetLib</span> will no longer be producing the specified category. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">categoryToProduce</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span> to produce. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_net_lib_1a440fe76534842b26502f778e7b0a28c0"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ad81d366c75ea1e1119513a730f79910d">efd::AsyncResult</a></span>  Tick() = 0</p>
<p class="NDLRefMemberDescription">Run any per-frame or periodic processing <span class="NDLSystemFont">INetLib</span> needs, such as calling accept on pending incoming sockets. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>Asynchronous result. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_net_lib_1af582050f6969c5cc810e0327eba64b95"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>  IPToString(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> ipAddress) = 0</p>
<p class="NDLRefMemberDescription">Utility method to convert a 4 byte ipaddress into a string. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">ipAddress</span></td>
    <td>ip address in host order </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_net_lib_1a2db59307cd007d6654fd7b634dd8ab48"></a>
<p class="NDLRefMemberFunction">virtual void  HandleNetMessage(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__IMessage.htm">IMessage</a></span>* pIncomingMessage, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span>& sender) = 0</p>
<p class="NDLRefMemberDescription">Callback that handles all incoming messages and queues them for later delivery. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pIncomingMessage</span></td>
    <td>Incoming message. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">sender</span></td>
    <td>Sender of incoming message. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_net_lib_1a0ea4673faee30f1acbf8aafa6ba96f9b"></a>
<p class="NDLRefMemberFunction">virtual void  Shutdown() = 0</p>
<p class="NDLRefMemberDescription">Release resources. </p>
<p class="NDLRefMemberDetailedDescription">This function should be called manually before destroying the NetLIb object. </p>

<a name="classefd_1_1_i_net_lib_1af183f664ce11261038afef57984bbd0a"></a>
<p class="NDLRefMemberFunction">virtual void  RemoveCallback(<span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>* pCallback) = 0</p>
<p class="NDLRefMemberDescription">Remove all instances of a callback from all data structures. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pCallback</span></td>
    <td>Callback function to be removed from all data structures. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_net_lib_1a5e7d4391cd472654e7684bf808c1b59d"></a>
<p class="NDLRefMemberFunction">virtual void  CloseAllConnections() = 0</p>
<p class="NDLRefMemberDescription">Close all connections. </p>

<a name="classefd_1_1_i_net_lib_1af2775f0bc64fe534b07f8a78768ad6fe"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a3f46b06120f84d47e33a25e39034ed8e">efd::QualityOfService</a></span>  GetTransport(const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>& destCategory) = 0</p>
<p class="NDLRefMemberDescription">Lookup which transport on which to send data for a specific category. </p>
<p class="NDLRefMemberDetailedDescription">A category can only be mapped to a single transport.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">destCategory</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span> to which to send message. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Quality of service to use. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_i_net_lib_1a83f1d78a260a42b5e1eb0107cbe3591e"></a>
<p class="NDLRefMemberFunction">virtual void  SendAddLocalConsumerRequests(const <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span>& privateCategory) = 0</p>
<p class="NDLRefMemberDescription">send subscribe messages for all subscribed categories to the specified connection </p>

<a name="classefd_1_1_i_net_lib_1a824bbf60546941728b404f8ca2c2a749"></a>
<p class="NDLRefMemberFunction">virtual void  SendAddLocalConsumerRequest(const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>& category) = 0</p>
<p class="NDLRefMemberDescription">Tell all remote processes that a remote consumer should be subscribed to the specified category. </p>

<a name="classefd_1_1_i_net_lib_1ad8239ff2e0b1f5987aecba76e6178b95"></a>
<p class="NDLRefMemberFunction">virtual void  SendAddLocalConsumerRequest(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>& category, <br/><span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span> cid) = 0</p>
<p class="NDLRefMemberDescription">Tell remote processes specified by cid that a remote consumer should be subscribed to the specified category. </p>

<a name="classefd_1_1_i_net_lib_1ae0af2e89e8d648467f88fa2af60ff6b3"></a>
<p class="NDLRefMemberFunction">virtual void  SendRemoveLocalConsumerRequest(const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>& category) = 0</p>
<p class="NDLRefMemberDescription">Tell all remote processes that a remote consumer should no longer be subscribed to the specified category. </p>

<a name="classefd_1_1_i_net_lib_1aa785b34b56c25a2a1464a4202348b2fa"></a>
<p class="NDLRefMemberFunction">virtual void  SendRemoveLocalConsumerRequest(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>& category, <br/><span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span> cid) = 0</p>
<p class="NDLRefMemberDescription">Tell remote processes specified by cid that a remote consumer should no longer be subscribed to the specified category. </p>

<a name="classefd_1_1_i_net_lib_1a4e5deabebffdda526abc6d8b600c5066"></a>
<p class="NDLRefMemberFunction">virtual void  SendBeginCategoryProduction(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>& categoryToProduce, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a3f46b06120f84d47e33a25e39034ed8e">QualityOfService</a></span> qualityOfService) = 0</p>
<p class="NDLRefMemberDescription">Declares that this <span class="NDLSystemFont">INetLib</span> will be producing the specified category. </p>
<p class="NDLRefMemberDetailedDescription">Sends a message notifying the Channel Manager of production. </p>

<a name="classefd_1_1_i_net_lib_1a936a02acf0b634a76af8df56cef6de53"></a>
<p class="NDLRefMemberFunction">virtual void  SendEndCategoryProduction(const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>& categoryToProduce) = 0</p>
<p class="NDLRefMemberDescription">Declares that this <span class="NDLSystemFont">INetLib</span> will no longer be producing the specified category. </p>
<p class="NDLRefMemberDetailedDescription">Sends a message notifying the Channel Manager of stopping of production. </p>

<a name="classefd_1_1_i_net_lib_1ac44e029ab284d833b27faf8e95708aec"></a>
<p class="NDLRefMemberFunction">virtual void  SendCategoryProductionMessages(const <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span>& cid) = 0</p>
<p class="NDLRefMemberDescription">Send a messages to privateCategory for every category being produced. </p>

<a name="classefd_1_1_i_net_lib_1a271f42edc5784c6c76e5920dbb970cd8"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">efd::ConnectionID</a></span>  GetChannelManagerConnectionID(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a3f46b06120f84d47e33a25e39034ed8e">QualityOfService</a></span> qualityOfService)</p>
<p class="NDLRefMemberDescription">Return the connection private category of the ChannelManager. </p>

<a name="classefd_1_1_i_net_lib_1a62c342e1bdfec2822bf6f142ef07b764"></a>
<p class="NDLRefMemberFunction">virtual void  SetChannelManagerConnectionID(const <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">efd::ConnectionID</a></span>& CMConnectionID)</p>
<p class="NDLRefMemberDescription">Set the connection private category of the ChannelManager. </p>

<a name="classefd_1_1_i_net_lib_1a25eef620f1eb874a239aec0e3e40196e"></a>
<p class="NDLRefMemberFunction">virtual void  SendNetIDAnnouncement(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span>& newConnectionID, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span>& destConnectionID)</p>
<p class="NDLRefMemberDescription">Send NetID announcement. </p>

<a name="classefd_1_1_i_net_lib_1a6e1af607dbb2d1824364e4585597f95a"></a>
<p class="NDLRefMemberFunction">virtual void  Configure(const <span class="NDLSystemFont"><a href="../efd/efd__ISection.htm">ISection</a></span>* pISection)</p>
<p class="NDLRefMemberDescription">Used to configure this <span class="NDLSystemFont">INetLib</span> instance. </p>
<p class="NDLRefMemberDetailedDescription">A derived class can read any configuration information needed out of the passed in <span class="NDLSystemFont"><a href="../efd/efd__ISection.htm">ISection</a></span>. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pISection</span></td>
    <td>The section of configuration information to use to read configuration information out of. </td>
</tr>

        </tbody>
    </table>
</div>


 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
