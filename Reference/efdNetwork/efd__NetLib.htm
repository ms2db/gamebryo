<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::NetLib</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::NetLib</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../efd/efd__MemObject.htm">efd::MemObject</a></span></p>


<p class="NDLRefHeaderFile">&lt;NetLib.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classefd_1_1_net_lib.gif" alt="Inheritance graph for efd::NetLib"/>
  <p class="FigureCaption">Inheritance graph for efd::NetLib</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">Simple concrete implementation of <span class="NDLSystemFont"><a href="efd__INetLib.htm">INetLib</a></span>. </p>

<a name="public_static_attributes"></a>
<p class="NDLRefHead1">Public Static Attributes</p>


<a name="classefd_1_1_net_lib_1a12daa362b24e17cd0607fa61beeea333"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span>  ms_localConnectionAddress</p>
<p class="NDLRefMemberDetailedDescription">Local connection address (ID). </p>
<a name="public_static_methods"></a>
<p class="NDLRefHead1">Public Static Methods</p>


<a name="classefd_1_1_net_lib_1ab80da32d95d61578ea717623ccbb0e2e"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">INetTransportPtr</a></span>  CreateTransport(<br/><span class="NDLSystemFont"><a href="../efd/efd__GenericFactory.htm">MessageFactory</a></span>* pMessageFactory, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a3f46b06120f84d47e33a25e39034ed8e">QualityOfService</a></span> qualityOfService)</p>
<p class="NDLRefMemberDescription">Transport factory. </p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classefd_1_1_net_lib_1af4574b1c9dc4b52dca28ed36ee557e2d"></a>
<p class="NDLRefMemberFunction">NetLib()</p>
<p class="NDLRefMemberDescription">Constructor. </p>

<a name="classefd_1_1_net_lib_1ab7c8904c718f11d601481a3a20cc592d"></a>
<p class="NDLRefMemberFunction">virtual ~NetLib()</p>
<p class="NDLRefMemberDescription">Virtual destructor. </p>

<a name="classefd_1_1_net_lib_1a6177a5ed164f32b94ae06ea8b5accb92"></a>
<p class="NDLRefMemberFunction">virtual void  Send(<br/><span class="NDLSystemFont"><a href="../efd/efd__IMessage.htm">IMessage</a></span>* pMessageToSend, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>& destCategory, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a3f46b06120f84d47e33a25e39034ed8e">efd::QualityOfService</a></span> defaultQOS = QOS_INVALID)</p>
<p class="NDLRefMemberDescription">Send Message to all subscribers including subscribers in the current process (anyone in the current process that has subscribed to a message). </p>
<p class="NDLRefMemberDetailedDescription">Iterate local consumer data structure and calls callback for each also sends to all remote consumers of that category.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMessageToSend</span></td>
    <td>Message to send. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">destCategory</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span> to which to send message. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">defaultQOS</span></td>
    <td>QOS to send message on if category is not associated with a QOS by BeginCategoryProduction. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_net_lib_1a7caa97b927ed7c891b828cf7510a01ba"></a>
<p class="NDLRefMemberFunction">virtual void  SendRemote(<br/><span class="NDLSystemFont"><a href="../efd/efd__IMessage.htm">IMessage</a></span>* pMessageToSend, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>& destCategory, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a3f46b06120f84d47e33a25e39034ed8e">efd::QualityOfService</a></span> defaultQOS = QOS_INVALID)</p>
<p class="NDLRefMemberDescription">Send Message to subscribers in remote processes only. </p>
<p class="NDLRefMemberDetailedDescription">Gets NetSet from RemoteConsumer data struct, and calls NetSet::Send() to send to a group of connections via NetRoute.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMessageToSend</span></td>
    <td>Message to send. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">destCategory</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span> to which to send message. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">defaultQOS</span></td>
    <td>QOS to send message on if category is not associated with a QOS by BeginCategoryProduction. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_net_lib_1a993d0e40d612571d26daff7a5cabe342"></a>
<p class="NDLRefMemberFunction">virtual void  SendRemote(<br/><span class="NDLSystemFont"><a href="../efd/efd__IMessage.htm">IMessage</a></span>* pMessageToSend, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>& destCategory, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span>& cid)</p>
<p class="NDLRefMemberDescription">Send Message on a specific connection identified by cid. </p>
<p class="NDLRefMemberDetailedDescription">Send only to the CID provided.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMessageToSend</span></td>
    <td>Message to send. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">destCategory</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span> to which to send message. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">cid</span></td>
    <td>Connection ID. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_net_lib_1a0c37c21aa7993ade41ecf91c18d778e0"></a>
<p class="NDLRefMemberFunction">virtual void  SendTo(<br/><span class="NDLSystemFont"><a href="../efd/efd__IMessage.htm">IMessage</a></span>* pMessageToSend, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>& destCategory, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span>& sourceConnectionID, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& strServerAddress, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span> portServer)</p>
<p class="NDLRefMemberDescription">Sends a message to the specified hostname and port originating from an already established connection. </p>
<p class="NDLRefMemberDetailedDescription">Only valid for unreliable connectionless qualities of service. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMessageToSend</span></td>
    <td>Message to send. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">destCategory</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span> to which to send message. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">sourceConnectionID</span></td>
    <td>The connection/socket to use to send the message </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">strServerAddress</span></td>
    <td>The server address to connect to </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">portServer</span></td>
    <td>The server port to connect to </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_net_lib_1a759bb5b7f6f2f91eb387381172c4c6b0"></a>
<p class="NDLRefMemberFunction">virtual void  Forward(<br/><span class="NDLSystemFont"><a href="../efd/efd__EnvelopeMessage.htm">EnvelopeMessage</a></span>* pEnvelopeMessage, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a3f46b06120f84d47e33a25e39034ed8e">efd::QualityOfService</a></span> defaultQOS = QOS_INVALID)</p>
<p class="NDLRefMemberDescription">Forward an envelope message without looking at/inflating contents. </p>
<p class="NDLRefMemberDetailedDescription">Does not modify sender NetID; forwards via NetRoute.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pEnvelopeMessage</span></td>
    <td>Message to send. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">defaultQOS</span></td>
    <td>Quality of service to send message on if category is not associated with a QOS by BeginCategoryProduction. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_net_lib_1abc7ca94a59b68ca92ae0c683235592b6"></a>
<p class="NDLRefMemberFunction">virtual void  Forward(<br/><span class="NDLSystemFont"><a href="../efd/efd__EnvelopeMessage.htm">EnvelopeMessage</a></span>* pEnvelopeMessage, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span>& cid)</p>
<p class="NDLRefMemberDescription">Forward an envelope message without looking at/inflating contents do not modify sender NetID forwards only to the CID provided. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pEnvelopeMessage</span></td>
    <td>Message to send. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">cid</span></td>
    <td>Connection ID. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_net_lib_1a1474504bfeeb099d3d0a5890ddfc4f65"></a>
<p class="NDLRefMemberFunction">virtual void  SendAllRemote(<br/><span class="NDLSystemFont"><a href="../efd/efd__IMessage.htm">IMessage</a></span>* pMessageToSend, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>& destCategory)</p>
<p class="NDLRefMemberDescription">Send Message to all remote listeners regardless of subscription sends to all remote listeners via NetRoute's Sendall. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMessageToSend</span></td>
    <td>Message to send. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">destCategory</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span> to which to send message. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_net_lib_1ab06f62862834bdc1fa9d496e757506c6"></a>
<p class="NDLRefMemberFunction">virtual void  ForwardAllRemote(<span class="NDLSystemFont"><a href="../efd/efd__EnvelopeMessage.htm">EnvelopeMessage</a></span>* pEnvelopeMessage)</p>
<p class="NDLRefMemberDescription">Forward an <span class="NDLSystemFont"><a href="../efd/efd__EnvelopeMessage.htm">EnvelopeMessage</a></span> without looking at/inflating contents to all remotely connected processes. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pEnvelopeMessage</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/efd__EnvelopeMessage.htm">EnvelopeMessage</a></span> to Forward to remote processes </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_net_lib_1aa00105d873c3304430250d54ac373f69"></a>
<p class="NDLRefMemberFunction">virtual void  AddLocalConsumer(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>& destCategory, <br/><span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>* callback)</p>
<p class="NDLRefMemberDescription">Register local callback for specified category and mask. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">destCategory</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span> to which to send message. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">callback</span></td>
    <td>Local callback. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_net_lib_1a5bb2bbb243e7cc71dad92650cf69242a"></a>
<p class="NDLRefMemberFunction">virtual void  RemoveLocalConsumer(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>& destCategory, <br/><span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>* callback)</p>
<p class="NDLRefMemberDescription">Unregister local callback for specific category. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">destCategory</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span> to which to send message. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">callback</span></td>
    <td>Local callback. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_net_lib_1a6b18ac39a1618e2d8447753c9680892c"></a>
<p class="NDLRefMemberFunction">virtual void  RemoveLocalConsumer(<span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>* pCallback)</p>
<p class="NDLRefMemberDescription">Unregister local callback for all categories. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pCallback</span></td>
    <td>Local callback. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_net_lib_1af0f454238c400a122ac0efe184abf2d4"></a>
<p class="NDLRefMemberFunction">virtual void  RemoveAllLocalConsumers()</p>
<p class="NDLRefMemberDescription">Remove all local consumers. </p>
<p class="NDLRefMemberDetailedDescription">No more callbacks will fire. </p>

<a name="classefd_1_1_net_lib_1ae6008df7315e1041bd44da352542f7e9"></a>
<p class="NDLRefMemberFunction">virtual void  AddRemoteConsumer(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>& destCategory, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span>& consumerPrivateCat)</p>
<p class="NDLRefMemberDescription">Looks up Connection of specified consumerPrivateCat and adds that connection to the NetRoutes route for that category. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">destCategory</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span> to which to send message. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">consumerPrivateCat</span></td>
    <td>Connection ID. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_net_lib_1aa373a26f58657a0971a7645af376a510"></a>
<p class="NDLRefMemberFunction">virtual void  RemoveRemoteConsumer(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>& destCategory, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span>& consumerPrivateCat)</p>
<p class="NDLRefMemberDescription">Unregister remote consumer from the netroute. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">destCategory</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span> to which to send message. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">consumerPrivateCat</span></td>
    <td>Connection ID. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_net_lib_1ac77d02a9a461391ee5eee3b4e73fcf9b"></a>
<p class="NDLRefMemberFunction">virtual void  RemoveRemoteConsumer(const <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span>& cid)</p>
<p class="NDLRefMemberDescription">Unregister remote consumer for all categories. </p>
<p class="NDLRefMemberDetailedDescription">Removes that cid from the netroute.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">cid</span></td>
    <td>Connection ID. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_net_lib_1acc28ed267461dcbf14b2ca0f320bcddb"></a>
<p class="NDLRefMemberFunction">virtual void  RemoveAllRemoteConsumers()</p>
<p class="NDLRefMemberDescription">Remove all remote consumers. </p>
<p class="NDLRefMemberDetailedDescription">No more messages will be sent out; cleans up the NetRoute. </p>

<a name="classefd_1_1_net_lib_1a26c5ca8075dfae35d11832d673a5cd99"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">efd::Bool</span>  HasRemoteConsumers(const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>& destCategory)</p>
<p class="NDLRefMemberDescription">Tests if there are any remote consumers for the given category. </p>
<p class="NDLRefMemberDetailedDescription">Returns true if at least one remote consumer for the given category is found, otherwise returns false. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">destCategory</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span> to test.</td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_net_lib_1acde3283bc1181a85df408b47700fd7c4"></a>
<p class="NDLRefMemberFunction">virtual void  ProducerAssociate(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span>& producer, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>& categoryProduced)</p>
<p class="NDLRefMemberDescription">Associate a producer with a specific destination category, this allows us to call producer forward, which will send a message to all producers on a cat. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">producer</span></td>
    <td>Connection ID for producer. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">categoryProduced</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span> produced. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_net_lib_1a509005f515c36d92816ed2fc1450345d"></a>
<p class="NDLRefMemberFunction">virtual void  ProducerDeassociate(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span>& producer, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>& categoryProduced)</p>
<p class="NDLRefMemberDescription">Disassociate a producer with a specific destination category, this allows us to call producer forward, which will send a message to all producers on a cat. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">producer</span></td>
    <td>Connection ID for producer. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">categoryProduced</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span> produced. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_net_lib_1ab95ce4d7ba8e1b0da895cca959c03e29"></a>
<p class="NDLRefMemberFunction">virtual void  ProducerSendRemote(<br/><span class="NDLSystemFont"><a href="../efd/efd__IMessage.htm">IMessage</a></span>* pMessageToSend, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>& categoryProduced)</p>
<p class="NDLRefMemberDescription">Sends a message to the producer of the specified category. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMessageToSend</span></td>
    <td>Message to send. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">categoryProduced</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span> produced. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_net_lib_1a106a98928538c10a1996c255622261ae"></a>
<p class="NDLRefMemberFunction">virtual void  ProducerForward(<br/><span class="NDLSystemFont"><a href="../efd/efd__EnvelopeMessage.htm">EnvelopeMessage</a></span>* pMessageToSend, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>& categoryProduced)</p>
<p class="NDLRefMemberDescription">Forwards a message to the producers of the specified category. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMessageToSend</span></td>
    <td>Message to send. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">categoryProduced</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span> produced. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_net_lib_1aedf34887d2d2062f8a75df53338e3ad5"></a>
<p class="NDLRefMemberFunction">virtual void  RegisterEventHandler(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> eventType, <br/><span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>* pCallback, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span>& cid, <br/><span class="NDLSystemFont">bool</span> consume = true)</p>
<p class="NDLRefMemberDescription">Registers an event handler for events globally in <span class="NDLSystemFont"><a href="efd__INetLib.htm">INetLib</a></span>. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">eventType</span></td>
    <td>Event type. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pCallback</span></td>
    <td>Local callback. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">cid</span></td>
    <td>Connection ID. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">consume</span></td>
    <td>True mirrors Emergent's implementation, where one can either register a local consumer, or an event handler. If an event handler is used, the old implementation is to consume that event. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_net_lib_1a022a52ec4554475467140dc1b286f805"></a>
<p class="NDLRefMemberFunction">virtual void  UnregisterEventHandler(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> eventType, <br/><span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>* pCallback, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span>& cid)</p>
<p class="NDLRefMemberDescription">Unregisters an event handler. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">eventType</span></td>
    <td>Event type. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pCallback</span></td>
    <td>Local callback. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">cid</span></td>
    <td>Connection ID. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_net_lib_1a2c9bdd7fb7b8466883f3adadcc4819d5"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span>  Connect(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& ipaddress, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span> port, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a3f46b06120f84d47e33a25e39034ed8e">efd::QualityOfService</a></span> qualityOfService, <br/><span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>* callback = 0)</p>
<p class="NDLRefMemberDescription">Calls GenerateConnectionID with ip and port. </p>
<p class="NDLRefMemberDetailedDescription">Creates a Connection by calling Connection::Connect(). <span class="NDLSystemFont"><a href="efd__INetLib.htm">INetLib</a></span> handles callback. Adds private cat and connection to m_privCatToConn and m_privConnToCat so fast lookup can be done by either private category or Connection*.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">ipaddress</span></td>
    <td>IP address of the host to connect to in host byte order. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">port</span></td>
    <td>Port on remote host to which to connect in host byte order. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">qualityOfService</span></td>
    <td>Quality of service on which to send message. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">callback</span></td>
    <td>Local callback. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>ID of the Connection created. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_net_lib_1a564ea7ccd5f40f79c15a951aa9b39510"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">efd::ConnectionID</a></span>  Listen(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& ipaddress, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span> port, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a3f46b06120f84d47e33a25e39034ed8e">efd::QualityOfService</a></span> qualityOfService, <br/><span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>* callback = 0)</p>
<p class="NDLRefMemberDescription">Creates a Connection and calls Connection::Listen. </p>
<p class="NDLRefMemberDetailedDescription"><span class="NDLSystemFont"><a href="efd__INetLib.htm">INetLib</a></span> handles callback. Adds private cat and connection to m_privCatToConn and m_privConnToCat so fast lookup can be done by either private category or Connection*.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">ipaddress</span></td>
    <td>IP address of the host to connect to in network byte order. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">port</span></td>
    <td>Port on remote host to which to connect in host byte order. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">qualityOfService</span></td>
    <td>Quality of service on which to send message. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">callback</span></td>
    <td>Local callback. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if listen completed successfully. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_net_lib_1acb382e2502f87c38a908db5c3fb948c7"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">efd::ConnectionID</a></span>  Listen(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span> port, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a3f46b06120f84d47e33a25e39034ed8e">efd::QualityOfService</a></span> qualityOfService, <br/><span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>* callback = 0)</p>
<p class="NDLRefMemberDescription">Creates a Connection and calls Connection::Listen. </p>
<p class="NDLRefMemberDetailedDescription"><span class="NDLSystemFont"><a href="efd__INetLib.htm">INetLib</a></span> handles callback. Adds private cat and connection to m_privCatToConn and m_privConnToCat so fast lookup can be done by either private category or Connection*. This version listens on all available interfaces (0.0.0.0).</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">port</span></td>
    <td>Port on remote host to which to connect in host byte order. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">qualityOfService</span></td>
    <td>Quality of service on which to send message. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">callback</span></td>
    <td>Local callback. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if listen completed successfully. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_net_lib_1a7d2daa15ff1a18503b1b46f2b09026ee"></a>
<p class="NDLRefMemberFunction">virtual void  CloseConnection(const <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span>& cid)</p>
<p class="NDLRefMemberDescription">Closes the connection identified by connectionPrivateCat. </p>
<p class="NDLRefMemberDetailedDescription">This function will essentially delete that connection and all references to it.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">cid</span></td>
    <td>Connection ID. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_net_lib_1adaaf688eb1dd48b1cdee0917655aec77"></a>
<p class="NDLRefMemberFunction">virtual void  MapCategoryToQualityOfService(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>& destCategory, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a3f46b06120f84d47e33a25e39034ed8e">QualityOfService</a></span> virtualQOS)</p>
<p class="NDLRefMemberDescription">Declare that the specified <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span> should be sent over the specified QualityOfService. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">destCategory</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span> that is being mapped. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">virtualQOS</span></td>
    <td>QualityOfService that the <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span> is being mapped to. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_net_lib_1af4d82fba93ac4f1cdd3515f9a04e246f"></a>
<p class="NDLRefMemberFunction">virtual void  BeginCategoryProduction(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>& categoryToProduce, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a3f46b06120f84d47e33a25e39034ed8e">efd::QualityOfService</a></span> qualityOfService)</p>
<p class="NDLRefMemberDescription">Declares that this <span class="NDLSystemFont"><a href="efd__INetLib.htm">INetLib</a></span> will be producing the specified category. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">categoryToProduce</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span> to produce. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">qualityOfService</span></td>
    <td>Quality of service to use. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_net_lib_1ac5f5dac1084dd656ff926e44781cbe14"></a>
<p class="NDLRefMemberFunction">virtual void  EndCategoryProduction(const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>& categoryToProduce)</p>
<p class="NDLRefMemberDescription">Declares that this <span class="NDLSystemFont"><a href="efd__INetLib.htm">INetLib</a></span> will no longer be producing the specified category. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">categoryToProduce</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span> to produce. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_net_lib_1a28cf717f86b6d3418652f88ace6c861b"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ad81d366c75ea1e1119513a730f79910d">efd::AsyncResult</a></span>  Tick()</p>
<p class="NDLRefMemberDescription">Run any per-frame or periodic processing <span class="NDLSystemFont"><a href="efd__INetLib.htm">INetLib</a></span> needs, such as calling accept on pending incoming sockets. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>Asynchronous result. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_net_lib_1adc5fd766b44dc8eeaddd514cb2554dec"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>  IPToString(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> ipAddress)</p>
<p class="NDLRefMemberDescription">Utility method to convert a 4 byte ipaddress into a string. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">ipAddress</span></td>
    <td>ip address in host order </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_net_lib_1ace268f104539ae873e7b1a838e4d9f7a"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  QueryOutgoingQueueSize(<span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">efd::ConnectionID</a></span> cid = kCID_INVALID)</p>
<p class="NDLRefMemberDescription">Query the size of the outgoing message <span class="NDLSystemFont"><a href="../efd/efd__queue.htm">queue</a></span> of the specified connection. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">cid</span></td>
    <td>The <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span> of the connection to query. If kCID_INVALID is specified this function should return the total of all outgoing <span class="NDLSystemFont"><a href="../efd/efd__queue.htm">queue</a></span> sizes for all connections. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>The size of the queried outgoing <span class="NDLSystemFont"><a href="../efd/efd__queue.htm">queue</a></span>. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_net_lib_1aa50695c742d593ee91239040ed3d5c72"></a>
<p class="NDLRefMemberFunction">virtual void  HandleNetMessage(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__IMessage.htm">IMessage</a></span>* pIncomingMessage, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span>& senderConnectionID)</p>
<p class="NDLRefMemberDescription">Callback method used by network code to deliver messages received from remote connections. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pIncomingMessage</span></td>
    <td>The message received. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">senderConnectionID</span></td>
    <td>The <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span> the message was received from. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_net_lib_1a606d91bea9a5a76469d5a7be18142a71"></a>
<p class="NDLRefMemberFunction">virtual void  Shutdown()</p>
<p class="NDLRefMemberDescription">Release resources. </p>
<p class="NDLRefMemberDetailedDescription">This function should be called manually before destroying the NetLIb object. </p>

<a name="classefd_1_1_net_lib_1ace8b5ef8eb45d032f5dee9a30165a32d"></a>
<p class="NDLRefMemberFunction">virtual void  RemoveCallback(<span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>* pCallback)</p>
<p class="NDLRefMemberDescription">Remove all instances of a callback from all data structures. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pCallback</span></td>
    <td>Callback function to be removed from all data structures. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_net_lib_1a41e6a9605709f875b0469af610f06bf3"></a>
<p class="NDLRefMemberFunction">virtual void  CloseAllConnections()</p>
<p class="NDLRefMemberDescription">Close all connections. </p>

<a name="classefd_1_1_net_lib_1addaf1746068573ea8645599a341663ee"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a3f46b06120f84d47e33a25e39034ed8e">efd::QualityOfService</a></span>  GetTransport(const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>& destCategory)</p>
<p class="NDLRefMemberDescription">Lookup which transport on which to send data for a specific category. </p>
<p class="NDLRefMemberDetailedDescription">A category can only be mapped to a single transport.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">destCategory</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span> to which to send message. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Quality of service to use. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_net_lib_1ae95226ab6b16f81b8f61591d00915a23"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a3f46b06120f84d47e33a25e39034ed8e">efd::QualityOfService</a></span>  SafeGetTransport(const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>& destCategory)</p>
<p class="NDLRefMemberDescription">Wrapper for GetTransport that handles the case of an invalid category. </p>

<a name="classefd_1_1_net_lib_1a45e3dc798a297166f6a7be0355db566a"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">efd::Bool</span>  HaveLocalListeners()</p>
<p class="NDLRefMemberDescription">Returns true is there are local listeners registered. </p>

<a name="classefd_1_1_net_lib_1a286a64e235c941868e74e38f7b64141a"></a>
<p class="NDLRefMemberFunction">virtual void  SendAddLocalConsumerRequests(const <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span>& privateCategory)</p>
<p class="NDLRefMemberDescription">send subscribe messages for all subscribed categories to the specified connection </p>

<a name="classefd_1_1_net_lib_1ad176d3463a25591afd61715992e7a947"></a>
<p class="NDLRefMemberFunction">virtual void  SendAddLocalConsumerRequest(const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>& category)</p>
<p class="NDLRefMemberDescription">Tell all remote processes that a remote consumer should be subscribed to the specified category. </p>

<a name="classefd_1_1_net_lib_1a57d20793931776878f4cf0b6dfda2521"></a>
<p class="NDLRefMemberFunction">virtual void  SendAddLocalConsumerRequest(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>& category, <br/><span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span> cid)</p>
<p class="NDLRefMemberDescription">Tell remote processes specified by cid that a remote consumer should be subscribed to the specified category. </p>

<a name="classefd_1_1_net_lib_1a6620cf4e56be90b7c7ce7653ab203b92"></a>
<p class="NDLRefMemberFunction">virtual void  SendRemoveLocalConsumerRequest(const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>& category)</p>
<p class="NDLRefMemberDescription">Tell all remote processes that a remote consumer should no longer be subscribed to the specified category. </p>

<a name="classefd_1_1_net_lib_1ab60990356188e97595cf445c65bc31b4"></a>
<p class="NDLRefMemberFunction">virtual void  SendRemoveLocalConsumerRequest(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>& category, <br/><span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span> cid)</p>
<p class="NDLRefMemberDescription">Tell remote processes specified by cid that a remote consumer should no longer be subscribed to the specified category. </p>

<a name="classefd_1_1_net_lib_1afe95ae5620e062e3fb8dcace9af3b27d"></a>
<p class="NDLRefMemberFunction">virtual void  SendBeginCategoryProduction(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>& categoryToProduce, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a3f46b06120f84d47e33a25e39034ed8e">QualityOfService</a></span> qualityOfService)</p>
<p class="NDLRefMemberDescription">Declares that this <span class="NDLSystemFont"><a href="efd__INetLib.htm">INetLib</a></span> will be producing the specified category. </p>
<p class="NDLRefMemberDetailedDescription">Sends a message notifying the Channel Manager of production. </p>

<a name="classefd_1_1_net_lib_1a54e40b5113086adc8cb0a6f6c7bede07"></a>
<p class="NDLRefMemberFunction">virtual void  SendEndCategoryProduction(const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>& categoryToProduce)</p>
<p class="NDLRefMemberDescription">Declares that this <span class="NDLSystemFont"><a href="efd__INetLib.htm">INetLib</a></span> will no longer be producing the specified category. </p>
<p class="NDLRefMemberDetailedDescription">Sends a message notifying the Channel Manager of stopping of production. </p>

<a name="classefd_1_1_net_lib_1ac74cc3d54e797a0d9fdda6ab2b8e45f0"></a>
<p class="NDLRefMemberFunction">virtual void  SendCategoryProductionMessages(const <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span>& cid)</p>
<p class="NDLRefMemberDescription">Send a messages to privateCategory for every category being produced. </p>

<a name="classefd_1_1_net_lib_1a6370174d5f4967b27a875f16e085ec73"></a>
<p class="NDLRefMemberFunction">virtual void  Configure(<span class="NDLSystemFont"><a href="../efd/efd__ISection.htm">ISection</a></span>* pISection)</p>
<p class="NDLRefMemberFunction"></p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
