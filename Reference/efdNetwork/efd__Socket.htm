<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::Socket</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::Socket</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../efd/efd__MemObject.htm">efd::MemObject</a></span></p>


<p class="NDLRefHeaderFile">&lt;Socket.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classefd_1_1_socket.gif" alt="Inheritance graph for efd::Socket"/>
  <p class="FigureCaption">Inheritance graph for efd::Socket</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">Abstract representation of a socket connection. </p>

<a name="construction_and_destruction"></a>
<p class="NDLRefHead1">Construction and Destruction</p>


<a name="classefd_1_1_socket_1ad67d8db7bb1ba1ca8e60fa457463534e"></a>
<p class="NDLRefMemberFunction">Socket(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span> listenPort, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a3f46b06120f84d47e33a25e39034ed8e">QualityOfService</a></span> qos, <br/><span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>* pCallback)</p>
<p class="NDLRefMemberDescription">given a port number, create a socket. </p>

<a name="classefd_1_1_socket_1a6a60a5c65b585410485ff210fcbe1249"></a>
<p class="NDLRefMemberFunction">Socket(<br/><span class="NDLSystemFont">SOCKET</span> socketId, <br/>struct sockaddr_in& localAddr, <br/>struct sockaddr_in& remoteAddr, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a3f46b06120f84d47e33a25e39034ed8e">QualityOfService</a></span> qos, <br/><span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>* pCallback)</p>
<p class="NDLRefMemberDescription">Constructor. </p>
<p class="NDLRefMemberDetailedDescription">used for creating instances dedicated to client communication. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">socketId</span></td>
    <td>socket id of the socket created by call to accept </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">localAddr</span></td>
    <td>sockaddr_in for the local end of the socket </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">remoteAddr</span></td>
    <td>sockaddr_in for the remote end of the socket </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">qos</span></td>
    <td>Quality of service. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pCallback</span></td>
    <td>Callback to use to response to caller. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_socket_1a92facf4ae1930821728e3731439b5124"></a>
<p class="NDLRefMemberFunction">virtual ~Socket()</p>
<p class="NDLRefMemberDescription">given a port number, create a socket. </p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classefd_1_1_socket_1ab53b5a4d0a6d78536fcdcd72bcd4cf16"></a>
<p class="NDLRefMemberFunction">virtual void  IncRefCount() const = 0</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_socket_1a4136e6912fa74edfd67598053336268f"></a>
<p class="NDLRefMemberFunction">virtual void  DecRefCount() const = 0</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_socket_1a3875d349458277001d64e55f9c996a6c"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetRefCount() const = 0</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_socket_1a404186c232233936d4862fcbbf8a3c24"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>  Send(const <span class="NDLSystemFont"><a href="../efd/efd__SmartBuffer.htm">efd::SmartBuffer</a></span>& buffer) = 0</p>
<p class="NDLRefMemberDescription">Sends a message to a connected host. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">buffer</span></td>
    <td>message to send </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>: number of bytes sent or error </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_socket_1a137bd6b7f990c5228dfda173eb29b7bf"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>  SendTo(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__SmartBuffer.htm">efd::SmartBuffer</a></span>& buffer, <br/><span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">efd::ConnectionID</a></span> destinationConnectionID) = 0</p>
<p class="NDLRefMemberDescription">Sends a message to a datagram socket. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">buffer</span></td>
    <td>message to send </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">destinationConnectionID</span></td>
    <td>Destination connection ID. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>: number of bytes sent or error </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_socket_1aae070a89fe3c0ab05f804f16da64869a"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>  Receive(<span class="NDLSystemFont"><a href="../efd/efd__SmartBuffer.htm">efd::SmartBuffer</a></span>& o_buffer) = 0</p>
<p class="NDLRefMemberDescription">receive messages and stores the message in a buffer. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">o_buffer</span></td>
    <td>The buffer to fill in with the received data</td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>int The number of bytes in the stream, 0 if no data available on a non blocking call, -1 if a socket error occurred </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_socket_1a76eab9c52b6abb56c217397fcd69d8ed"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>  ReceiveFrom(<br/><span class="NDLSystemFont"><a href="../efd/efd__SmartBuffer.htm">efd::SmartBuffer</a></span>& o_buffer, <br/><span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">efd::ConnectionID</a></span>& senderConnectionID) = 0</p>
<p class="NDLRefMemberDescription">Receive a message from a datagram socket. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">o_buffer</span></td>
    <td>The buffer to fill in with the received data </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">senderConnectionID</span></td>
    <td>The <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span> of the sender of the data</td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>int The number of bytes in the stream, 0 if no data available on a non blocking call, -1 if a socket error occurred </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_socket_1a35adee1c256c52025accd6c4f89aee40"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  Bind()</p>
<p class="NDLRefMemberDescription">Binds the socket to an address and port number a server call. </p>
<p class="NDLRefMemberDetailedDescription">Returns true if the bind succeeded, false if it failed. </p>

<a name="classefd_1_1_socket_1aefc4aceb2ac46bb8c726d7d5eaf4b03d"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">Socket</span>*  Accept()</p>
<p class="NDLRefMemberDescription">Accepts a connecting client. </p>
<p class="NDLRefMemberDetailedDescription">The address of the connected client is stored in the returned <span class="NDLSystemFont">Socket</span>. Call this on the server side of the connection. </p>

<a name="classefd_1_1_socket_1a43d940bf8d20bc62cb41b62f9dc5ff28"></a>
<p class="NDLRefMemberFunction">virtual void  Listen(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> numPorts = 5)</p>
<p class="NDLRefMemberDescription">Listens to connecting clients, a server call. </p>

<a name="classefd_1_1_socket_1a8ab35a48070c572442f80c7e8bf25cb1"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>  Connect(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& serverNameOrAddr, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span> portServer) = 0</p>
<p class="NDLRefMemberDescription">Connect to a listening server. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">serverNameOrAddr</span></td>
    <td>hostname or ip address of server to connect to </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">portServer</span></td>
    <td>port to connect to </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_socket_1a30fb7e75103fb111c207c491c8f547b7"></a>
<p class="NDLRefMemberFunction">virtual void  Shutdown()</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_socket_1a0f49e578eb687a16a754c2f6cca8ccf9"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  SendPending()</p>
<p class="NDLRefMemberDescription">Returns true if there is a message in the process of being sent. </p>

<a name="classefd_1_1_socket_1ac4e7c3c5dbbd336aa69bff31f98a6de9"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">Socket</span>*  CreateSocket(<br/><span class="NDLSystemFont">SOCKET</span> newSocket, <br/>struct sockaddr_in clientAddress) = 0</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_socket_1a6e3a33bd0c5f0ed76e624fca2f51ade7"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">SOCKET</span>  getSocketId()</p>
<p class="NDLRefMemberDescription">Get the current socket identifier. </p>

<a name="classefd_1_1_socket_1a8631e6ee7222d4f42c717076f6884c1e"></a>
<p class="NDLRefMemberFunction">virtual unsigned short  getLocalPort()</p>
<p class="NDLRefMemberDescription">Get the port of the local side of the socket connection. </p>

<a name="classefd_1_1_socket_1a67e5bd916b257974e509b64043a914b3"></a>
<p class="NDLRefMemberFunction">virtual unsigned int  getLocalIP()</p>
<p class="NDLRefMemberDescription">Get the ip of the local side of the socket connection. </p>

<a name="classefd_1_1_socket_1ab9429ae61ff3c468e81ee6326441b702"></a>
<p class="NDLRefMemberFunction">virtual unsigned short  getRemotePort()</p>
<p class="NDLRefMemberDescription">Get the port of the remote side of the socket connection. </p>

<a name="classefd_1_1_socket_1ae32c8eb8c1345648ff1911c15ea06438"></a>
<p class="NDLRefMemberFunction">virtual unsigned int  getRemoteIP()</p>
<p class="NDLRefMemberDescription">Get the ip of the remote side of the socket connection. </p>

<a name="classefd_1_1_socket_1a81cebae284722aa9f914bca75cbf4b86"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span>  GetConnectionID()</p>
<p class="NDLRefMemberDescription">Get the unique connection ID for this TCP <span class="NDLSystemFont">Socket</span>. </p>

<a name="classefd_1_1_socket_1a5b4918fce1e2f77559f499d8e68ba131"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  getError()</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_socket_1a79dd7203737953ccbc1aae4f75685da7"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>  getErrorMessage()</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_socket_1ac8ccd1a5bcdc92017664da872d596289"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>  getErrorMessage(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> errorNum)</p>
<p class="NDLRefMemberFunction"></p>
<a name="get_socket_options_settings._1=on,_0=off."></a>
<p class="NDLRefHead1">Get socket options settings. 1=On, 0=Off.</p>


<a name="classefd_1_1_socket_1a81d117bda04d3c9e8284709d60575722"></a>
<p class="NDLRefMemberFunction">int  getDebug()</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_socket_1a46aab6e57ce52468bad34ec2cf891949"></a>
<p class="NDLRefMemberFunction">int  getReuseAddr()</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_socket_1a01e84dd8f712f50866b29d36faa0f1a2"></a>
<p class="NDLRefMemberFunction">virtual int  getKeepAlive()</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_socket_1a155a1f7906bdc48cd3df9fa7e59be53a"></a>
<p class="NDLRefMemberFunction">int  getSendBufSize()</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_socket_1a09bc41d04430d15e4b2b4127aeaadc5e"></a>
<p class="NDLRefMemberFunction">int  getReceiveBufSize()</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_socket_1a8bc95968f696c742a4fc7cfd5661759b"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  getSocketBlocking()</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_socket_1a135a6447f020c57d8d22459098d5d42c"></a>
<p class="NDLRefMemberFunction">int  getLingerSeconds()</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_socket_1a7f7ddb07baf09f17cc021d21ce67fd8c"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  getLingerOnOff()</p>
<p class="NDLRefMemberFunction"></p>
<a name="inetcallback_methods"></a>
<p class="NDLRefHead1">INetCallback methods</p>


<a name="classefd_1_1_socket_1a8366e87026ca04ee6688b648e8690a35"></a>
<p class="NDLRefMemberFunction">virtual void  SetCallback(<span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>* pCallback)</p>
<p class="NDLRefMemberDescription">Set the <span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span> method to call when data is received in this socket. </p>

<a name="classefd_1_1_socket_1a8acb56c44eb065b3347a12614cea6958"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>*  GetCallback()</p>
<p class="NDLRefMemberDescription">Get the currently registered <span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span> instance. </p>
<a name="set_the_size_of_the_send_and_receive_buffers."></a>
<p class="NDLRefHead1">Set the size of the send and receive buffers.</p>


<a name="classefd_1_1_socket_1aeeacf3f86fb0e40c9a718a3b4bb27301"></a>
<p class="NDLRefMemberFunction">void  setSendBufSize(int )</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_socket_1abc06d0705241d9913edb699a92d3738d"></a>
<p class="NDLRefMemberFunction">void  setReceiveBufSize(int )</p>
<p class="NDLRefMemberFunction"></p>
<a name="socket_options:_1=on,_0=off"></a>
<p class="NDLRefHead1">Socket options: 1=On, 0=Off</p>


<a name="classefd_1_1_socket_1a7f34e92eeac7b6f5f9646e2665827dbf"></a>
<p class="NDLRefMemberFunction">void  setDebug(int )</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_socket_1a1b3877653cfbc541c562b16c914fab96"></a>
<p class="NDLRefMemberFunction">void  setReuseAddr(int )</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_socket_1a6e622a20a753a590dcfb2eff72c001d6"></a>
<p class="NDLRefMemberFunction">virtual void  setKeepAlive(int )</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_socket_1ac4b41fe804c66d3e6953717b42122a0c"></a>
<p class="NDLRefMemberFunction">void  setLingerOnOff(<span class="NDLSystemFont">bool</span> )</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_socket_1a3eaf604e0b56e0fac7d80a69a9659065"></a>
<p class="NDLRefMemberFunction">void  setLingerSeconds(int )</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_socket_1aa1030f9f0dbdfbf9ae7b0b89eb331152"></a>
<p class="NDLRefMemberFunction">void  setSocketBlocking(<span class="NDLSystemFont">bool</span> )</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_socket_1adcdd07e061e8dab7950880f8fec506aa"></a>
<p class="NDLRefMemberFunction">void  setSocketBroadcast(int )</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_socket_1af13ff64773b28444a2d5ca3290fbe7ea"></a>
<p class="NDLRefMemberFunction">void  setSocketNoDelay(int )</p>
<p class="NDLRefMemberFunction"></p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
