<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::ChannelManagerService</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::ChannelManagerService</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../efd/efd__ISystemService.htm">efd::ISystemService</a></span></p>


<p class="NDLRefHeaderFile">&lt;ChannelManagerService.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classefd_1_1_channel_manager_service.gif" alt="Inheritance graph for efd::ChannelManagerService"/>
  <p class="FigureCaption">Inheritance graph for efd::ChannelManagerService</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal"><span class="NDLSystemFont">ChannelManagerService</span> receives messages from connected NetServices and routes those messages to all other connected NetServices based on Subscription to Categories. </p>
<p class="NDLNormal">The Network System uses <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span> subscription to route messages between processes. All processes that wish to communicate must connect to a central <span class="NDLSystemFont">ChannelManagerService</span>. The <span class="NDLSystemFont">ChannelManagerService</span> can exist in a process separate from all clients (client/server) or in the same process as a client (peer to peer). </p>

<a name="config_strings_used_by_this_service"></a>
<p class="NDLRefHead1">Config strings used by this service</p>


<a name="classefd_1_1_channel_manager_service_1a4c0c4075d445b9d5dbb6598fdbad59f1"></a>
<p class="NDLRefMemberFunction">static const char*  kConfigSection</p>
<p class="NDLRefMemberDescription">The default section name for retrieving configuration variables. </p>

<a name="classefd_1_1_channel_manager_service_1a1d49b89ade5953d164181ce901dc8ddb"></a>
<p class="NDLRefMemberFunction">static const char*  kHostname</p>
<p class="NDLRefMemberDescription">hostname that <span class="NDLSystemFont">ChannelManagerService</span> listens on </p>

<a name="classefd_1_1_channel_manager_service_1aca1a6376bc81716ed7f379e80753eeea"></a>
<p class="NDLRefMemberFunction">static const char*  kPort</p>
<p class="NDLRefMemberDescription">port that <span class="NDLSystemFont">ChannelManagerService</span> listens on </p>

<a name="classefd_1_1_channel_manager_service_1abfca3d29765ca0856c6a2b8b6a0748af"></a>
<p class="NDLRefMemberFunction">static const char*  kFailInUse</p>
<p class="NDLRefMemberDescription">Should <span class="NDLSystemFont">ChannelManagerService</span> return failure from OnInit/OnTick if port is in use. </p>

<a name="classefd_1_1_channel_manager_service_1a4abb082054cfec1657727371f00cc1a9"></a>
<p class="NDLRefMemberFunction">static const char*  kQualityOfService</p>
<p class="NDLRefMemberDescription">Quality of Service that <span class="NDLSystemFont">ChannelManagerService</span> listens on and allowed values. </p>

<a name="classefd_1_1_channel_manager_service_1a3be316a1316e6e7630c7bc3a637dbd6d"></a>
<p class="NDLRefMemberFunction">static const char*  kQOS_Reliable</p>
<p class="NDLRefMemberDescription">The default section name for retrieving configuration variables. </p>

<a name="classefd_1_1_channel_manager_service_1ac6dcbb20239516c96f88e4afb396747c"></a>
<p class="NDLRefMemberFunction">static const char*  kQOS_Unreliable</p>
<p class="NDLRefMemberDescription">The default section name for retrieving configuration variables. </p>

<a name="classefd_1_1_channel_manager_service_1a631ae98637c83bf2ff1cd19d2e87bdf1"></a>
<p class="NDLRefMemberFunction">static const char*  kQOS_Connectionless</p>
<p class="NDLRefMemberDescription">The default section name for retrieving configuration variables. </p>

<a name="classefd_1_1_channel_manager_service_1a4f1bc6fe1850e385fc9cc392ebe6ea85"></a>
<p class="NDLRefMemberFunction">static const char*  kQOS_Invalid</p>
<p class="NDLRefMemberDescription">The default section name for retrieving configuration variables. </p>

<a name="classefd_1_1_channel_manager_service_1aa1c39eef283b793542356cb994759cf5"></a>
<p class="NDLRefMemberFunction">static const <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span>  defaultListenPort</p>
<p class="NDLRefMemberDescription">default numeric port if no configuration is provided </p>
<a name="construction_and_destruction"></a>
<p class="NDLRefHead1">Construction and Destruction</p>


<a name="classefd_1_1_channel_manager_service_1a8a9ef8a40b68bb28f4c5e0d8fc538b4f"></a>
<p class="NDLRefMemberFunction">ChannelManagerService(const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& netLibType = efd::utf8string::NullString())</p>
<p class="NDLRefMemberDescription">Default constructor. </p>

<a name="classefd_1_1_channel_manager_service_1a795c85cfcf98abe2332a95030255c6af"></a>
<p class="NDLRefMemberFunction">ChannelManagerService(<span class="NDLSystemFont"><a href="efd__INetLib.htm">INetLib</a></span>* pNetLib)</p>
<p class="NDLRefMemberDescription">Constructor that takes a pre-constructed <span class="NDLSystemFont"><a href="efd__NetLib.htm">NetLib</a></span>. </p>

<a name="classefd_1_1_channel_manager_service_1ab4ead6f567488251496e276960aecbc2"></a>
<p class="NDLRefMemberFunction">virtual ~ChannelManagerService()</p>
<p class="NDLRefMemberDescription">Virtual destructor. </p>
<a name="public_static_methods"></a>
<p class="NDLRefHead1">Public Static Methods</p>


<a name="classefd_1_1_channel_manager_service_1a086bd1d47218c881b2cdeaa70cf7160a"></a>
<p class="NDLRefMemberFunction">static void  ReadConfig(<br/><span class="NDLSystemFont"><a href="../efd/efd__IConfigManager.htm">IConfigManager</a></span>* i_pConfigManager, <br/><span class="NDLSystemFont"><a href="../efd/efd__RefCountedMemObj.htm">ChannelManagerConfigList</a></span>& o_result)</p>
<p class="NDLRefMemberDescription">Reads ChannelManager config section and returns a <span class="NDLSystemFont"><a href="../efd/efd__list.htm">list</a></span> of <span class="NDLSystemFont"><a href="efd__ChannelManagerConfig.htm">ChannelManagerConfig</a></span> objects each describing a ChannelManager/QualityOfService to connect to. </p>
<p class="NDLRefMemberDetailedDescription">Allocates a new <span class="NDLSystemFont"><a href="../efd/efd__list.htm">list</a></span> that can be used to keep track of connection status. </p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classefd_1_1_channel_manager_service_1a0ee407c592ac68a5805f6e0962a98d2a"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a62e4d1bc94248c629612480b748bfd0e">SyncResult</a></span>  OnPreInit(<span class="NDLSystemFont"><a href="../efd/efd__IDependencyRegistrar.htm">efd::IDependencyRegistrar</a></span>* pDependencyRegistrar)</p>
<p class="NDLRefMemberDescription">Called by the framework after the service has been registered and before the service receives the first call to OnInit. </p>
<p class="NDLRefMemberDetailedDescription">This allows the service to perform any synchronous setup. Although you may query for the existence of other services, for example in order to cache a smart pointer to a tightly coupled service, at this point you should not call any methods on other services unless the method explicitly states it is safe to call during OnPreInit. If the method does not indicate it is safe to call from OnPreInit you should not call it since the service may not have had a change to setup yet and might fail to handle the method as a result. You should wait until OnInit before you rely on cross-service interaction. You may also register additional service dependencies during OnPreInit. You should not register additional aliases, those should be done during OnServiceRegistered.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">OnPreInit is called in the order services are registered.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pDependencyRegistrar</span></td>
    <td>Services can use this interface to optional register dependencies which determine the order in which OnInit and OnShutdown will be called. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>SyncResult the service's progress through the initialization state, one of:
<ul>
<li>SyncResult_Success : The PreInit phase succeeded and this service is ready to be moved to the OnInit <span class="NDLSystemFont"><a href="../efd/efd__queue.htm">queue</a></span>.</li>
<li>SyncResult_Failure : The PreInit phase failed, this will cause framework to begin shutdown and unloading of all services. </li></ul></td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_channel_manager_service_1aaf4974dad4b2b66a2ccf7398ab27753e"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ad81d366c75ea1e1119513a730f79910d">AsyncResult</a></span>  OnInit()</p>
<p class="NDLRefMemberDescription">Called by the framework after the service has had OnPreInit called and before the service receives its first OnTick. </p>
<p class="NDLRefMemberDetailedDescription">This allows the service to perform any initialization that it requires. During the OnInit phase it should be safe or call methods on other services since all services will have had a chance to be pre-initialized already. This phase is primarily intended for establishing cross-service relationships such as the registering of message handlers. The OnInit phase is asynchronous meaning that you can stay in this phase for multiple ticks. Once a service returns AsyncResult_Complete from OnInit on the next tick OnTick will be called even if not all of the other services have completed their OnInit.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">OnInit is called in dependency order.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>AsyncResult the service's progress through the initialization state, one of:
<ul>
<li>AsyncResult_Pending : More initialization work is required. OnInit will be called again until it completes or fails.</li>
<li>AsyncResult_Failure : Initialization has critically failed. The entire framework will be shut down and the process will exit.</li>
<li>AsyncResult_Complete : Initialization has completed for this service. It will receive no more OnInit calls. </li></ul></td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_channel_manager_service_1a6a63e72a229c508a25a60f98c8c96958"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ad81d366c75ea1e1119513a730f79910d">AsyncResult</a></span>  OnTick()</p>
<p class="NDLRefMemberDescription">Called by the framework every cycle to allow the service to do its work. </p>
<p class="NDLRefMemberDetailedDescription">The service should perform a small slice of work and return as quickly as possible. This is where your application will spend the vast majority of its lifetime.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">OnTick is called in priority order. Higher values are called before lower values.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>AsyncResult the service's progress through the running state, one of:
<ul>
<li>AsyncResult_Pending : This is the normal result, your service is still running and will continue to receive future OnTick calls.</li>
<li>AsyncResult_Failure : The service has critically failed. The entire framework will be shut down and the process will exit.</li>
<li>AsyncResult_Complete : The service no longer requires OnTick calls. It will remain registered and might still have things like message handlers that are active but it will not receive future OnTick calls. </li></ul></td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_channel_manager_service_1a2b2878b8283cc1a6afb062cdfec133eb"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ad81d366c75ea1e1119513a730f79910d">AsyncResult</a></span>  OnShutdown()</p>
<p class="NDLRefMemberDescription">Called by the framework after the framework shutdown has been requested. </p>
<p class="NDLRefMemberDetailedDescription">This allows the service to perform any clean up that it requires. The service should cleanly shutdown which might involve persisting various state. If the service is unregistered while the framework is running it should be careful not to spend too much time in a single call and should instead do a small amount of work on each call while returning "pending" to request additional calls. In some rare cases OnShutdown can be called even if OnInit has never been called, for example if your service was unregistered or if the service manager is shutdown after OnPreInit was called but before OnInit was called.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">OnShutdown is called in reverse dependency order.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>AsyncResult the service's progress through the initialization state, one of:
<ul>
<li>AsyncResult_Pending : More shutdown work is required. OnShutdown will be called again until it completes or fails.</li>
<li>AsyncResult_Failure : Shutdown has critically failed. The framework shutdown state will be aborted and the process will exit immediately.</li>
<li>AsyncResult_Complete : Shutdown has completed for this service. It will receive no more OnShutdown calls. </li></ul></td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_channel_manager_service_1a21cb569a9a54cdfc53128ac74620bff2"></a>
<p class="NDLRefMemberFunction">virtual const char*  GetDisplayName() const</p>
<p class="NDLRefMemberDescription">Returns the name of this service. </p>
<p class="NDLRefMemberDetailedDescription">This name is used mainly for improving the readability of various log statements and has no impact on functionality. Service names are not guaranteed to be unique.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>const char* Display name for the current service. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_channel_manager_service_1a9760ff496013eadc479916004e9187cb"></a>
<p class="NDLRefMemberFunction">virtual void  HandleMessage(const <span class="NDLSystemFont"><a href="../efd/efd__EnvelopeMessage.htm">efd::EnvelopeMessage</a></span>* pEnvelopeMessage)</p>
<p class="NDLRefMemberDescription">Receives messages from all connected NetServices. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pEnvelopeMessage</span></td>
    <td>Message to handle </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_channel_manager_service_1ae7d67cbf52683235116084a8afd56855"></a>
<p class="NDLRefMemberFunction">virtual void  AddConnection(const <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">efd::ConnectionID</a></span>& acceptedConnectionID)</p>
<p class="NDLRefMemberDescription">Handle a new incoming connection. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">acceptedConnectionID</span></td>
    <td>New <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span> to add </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_channel_manager_service_1a9a7752f3adc08fe02874774ec893ba80"></a>
<p class="NDLRefMemberFunction">virtual void  RemoveConnection(const <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">efd::ConnectionID</a></span>& acceptedConnectionID)</p>
<p class="NDLRefMemberDescription">Handle a disconnection. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">acceptedConnectionID</span></td>
    <td>Previously added <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span> to remove </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_channel_manager_service_1a2ca3c5e535cbad84029b329252d4845d"></a>
<p class="NDLRefMemberFunction">virtual void  AnnounceService(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& name, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& extraInfo)</p>
<p class="NDLRefMemberDescription">Uses the <span class="NDLSystemFont"><a href="efd__NameResolutionService.htm">NameResolutionService</a></span> to announce the ChannelManager on the network. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">name</span></td>
    <td>A name used to identify this particular ChannelManager </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">extraInfo</span></td>
    <td>Additional info about this process. Not used in lookup search. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_channel_manager_service_1aa24424c2b51acb86b601796352c1bff5"></a>
<p class="NDLRefMemberFunction">virtual void  CancelAnnounceService(const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& name)</p>
<p class="NDLRefMemberDescription">Uses the <span class="NDLSystemFont"><a href="efd__NameResolutionService.htm">NameResolutionService</a></span> to stop announcing the ChannelManager. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">name</span></td>
    <td>A name used to identify this particular ChannelManager </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_channel_manager_service_1a09b2be9a3e2fcfbfc9dcb21f96ae2bcf"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../efd/efd__RefCountedMemObj.htm">ChannelManagerConfigList</a></span>&  GetConfigList()</p>
<p class="NDLRefMemberDescription">Returns a const pointer to the ChannelManagerConfigList. </p>
<p class="NDLRefMemberDetailedDescription">The pointer is const because you should not modify this data directly. Making changes to the config this way will not guarantee that indexes are unique or that they remain in ascending order. The preferred way to change the configuration at runtime is to construct channel manager config objects and add them using AddConfig (or use the helper function AddChannelManagerConnection), and remove them from the CM using RemoveConfig. </p>

<a name="classefd_1_1_channel_manager_service_1ad2f1aad83fe119b73cf4b044b01742b7"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  AddConfig(<span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">ChannelManagerConfigPtr</a></span> spConfig)</p>
<p class="NDLRefMemberDescription">Start listening on a socket with the params assigned by the passed-in channel manager config. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">spConfig</span></td>
    <td>The config to use for the new listen socket.</td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> The index assigned to the socket. You can later use this index to remove the socket from the <span class="NDLSystemFont"><a href="../efd/efd__list.htm">list</a></span>. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_channel_manager_service_1a54accf93f45303f9d6fd737677e49baf"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  RemoveConfig(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> index)</p>
<p class="NDLRefMemberDescription">Removes the config with the index value passed in, shutting down the corresponding listener. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">index</span></td>
    <td>The index value of the config entry to remove. Note that this is not necessarily the same as the position in the <span class="NDLSystemFont"><a href="../efd/efd__list.htm">list</a></span>; it is actually the index value assigned to the config entry object.</td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>bool Returns true if the entry was found and removed. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_channel_manager_service_1a0badabee60b1fc7958a44faaf55bbea2"></a>
<p class="NDLRefMemberFunction">void  RemoveConfig(<span class="NDLSystemFont"><a href="../efd/efd__list.htm#classefd_1_1list_1ae79762a07a0edca216a7be7ca519bb8f">ChannelManagerConfigList::iterator</a></span> it)</p>
<p class="NDLRefMemberDescription">Removes the config pointed to by the iterator passed in, shutting down the corresponding listener. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">it</span></td>
    <td>The iterator pointing to the entry to remove. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_channel_manager_service_1af19984cd73dc855167a0299988d32b2a"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  AddChannelManagerConnection(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& hostname, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span> port, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a3f46b06120f84d47e33a25e39034ed8e">efd::QualityOfService</a></span> qos)</p>
<p class="NDLRefMemberDescription">Shortcut function for adding a new channel manager listener. </p>
<p class="NDLRefMemberDetailedDescription">Creates the config from the params passed in, starts listening and adds the config to the <span class="NDLSystemFont"><a href="../efd/efd__list.htm">list</a></span> of configs.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">hostname</span></td>
    <td>The name of the host to start listening on. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">port</span></td>
    <td>The port number to listen on. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">qos</span></td>
    <td>The quality of service to use for the connection.</td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> The index of the config added to the <span class="NDLSystemFont"><a href="../efd/efd__list.htm">list</a></span>. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_channel_manager_service_1ab4606da405db3023146d8261b2778b42"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetNextIndexValue()</p>
<p class="NDLRefMemberDescription">A convenience function for generating a unique index value. </p>
<p class="NDLRefMemberDetailedDescription">We keep the config <span class="NDLSystemFont"><a href="../efd/efd__list.htm">list</a></span> sorted ascending by index, so we can create a new unique index by simply taking the last one and incrementing it.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> The new index value. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_channel_manager_service_1a815a969e027d6ef82b33843801049efa"></a>
<p class="NDLRefMemberFunction">virtual void  HandleNetMessage(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__IMessage.htm">IMessage</a></span>* pIncomingMessage, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span>& senderConnectionID)</p>
<p class="NDLRefMemberDescription">Callback method used by network code to deliver messages received from remote connections. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pIncomingMessage</span></td>
    <td>The message received. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">senderConnectionID</span></td>
    <td>The <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span> the message was received from. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_channel_manager_service_1a410f9e82b2ea58625b9afa7a6685671e"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="efd__INetLib.htm">INetLib</a></span>*  GetNetLib()</p>
<p class="NDLRefMemberDescription">Returns the <span class="NDLSystemFont"><a href="efd__NetLib.htm">NetLib</a></span> used by this service. </p>

<a name="classefd_1_1_channel_manager_service_1a2cdcff6ac26c5918c27e0bc054fb5d5e"></a>
<p class="NDLRefMemberFunction">virtual void  AddNetService(<span class="NDLSystemFont"><a href="efd__NetService.htm">NetService</a></span>* pNetService)</p>
<p class="NDLRefMemberDescription">Add a local <span class="NDLSystemFont"><a href="efd__NetService.htm">NetService</a></span> in this process. </p>
<p class="NDLRefMemberDetailedDescription">If <span class="NDLSystemFont"><a href="../efd/efd__set.htm">set</a></span><span class="NDLSystemFont">ChannelManagerService</span> will expect that the <span class="NDLSystemFont"><a href="efd__NetService.htm">NetService</a></span> has not connected over the network and will deliver any messages to it directly. </p>

<a name="classefd_1_1_channel_manager_service_1a556216dacdfdbd6a54f10c0db4eb7f23"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a59a3838ab5cdfe87f98f5b8371e4e91d">efd::UInt8</a></span>  GetUnboundConfigurations()</p>
<p class="NDLRefMemberDescription">Returns the number of unbound configurations. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
