<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::NetService</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::NetService</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../efd/efd__INetService.htm">efd::INetService</a></span></p>


<p class="NDLRefHeaderFile">&lt;NetService.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classefd_1_1_net_service.gif" alt="Inheritance graph for efd::NetService"/>
  <p class="FigureCaption">Inheritance graph for efd::NetService</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal"><span class="NDLSystemFont">NetService</span> connects to a <span class="NDLSystemFont"><a href="efd__ChannelManagerService.htm">ChannelManagerService</a></span>. </p>
<p class="NDLNormal">The <span class="NDLSystemFont">NetService</span> is the service that connects to and communicates with the <span class="NDLSystemFont"><a href="efd__ChannelManagerService.htm">ChannelManagerService</a></span>. Each client process must have a <span class="NDLSystemFont">NetService</span>. When a process wants to express interest in aCategory it tells <span class="NDLSystemFont">NetService</span> to Subscribe to that <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>. <span class="NDLSystemFont">NetService</span> notifies the <span class="NDLSystemFont"><a href="efd__ChannelManagerService.htm">ChannelManagerService</a></span> it is connected to that it is interested in the <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>. From then on whenever a message is sent from a <span class="NDLSystemFont">NetService</span> on that <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span> the <span class="NDLSystemFont"><a href="efd__ChannelManagerService.htm">ChannelManagerService</a></span> routes the message to any process that has expressed interest. </p>

<a name="config_strings_used_by_this_service"></a>
<p class="NDLRefHead1">Config strings used by this service</p>


<a name="classefd_1_1_net_service_1a57ac0cacbdfe55c3c81414ae4d14fba7"></a>
<p class="NDLRefMemberFunction">static const char*  kConfigSection</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_net_service_1ae051791733351a86311d1f527d47d6b3"></a>
<p class="NDLRefMemberFunction">static const char*  kNetLibType</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_net_service_1a00080a0c1f0780c974fa1d115a566973"></a>
<p class="NDLRefMemberFunction">static const char*  kNetLib</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_net_service_1a933d70644078f1b71f1385c1c73983cf"></a>
<p class="NDLRefMemberFunction">static const char*  kWaitBeforeReconnect</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_net_service_1ac94572c3d88863afd8dc117d96b2a3d3"></a>
<p class="NDLRefMemberFunction">static const char*  kAutoConnect</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_net_service_1afda0f5bb681b7b6dbdacc34b13bd7d03"></a>
<p class="NDLRefMemberFunction">static const char*  kAutoReconnect</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_net_service_1a838e9e26df36803178eee9190bbe6a0b"></a>
<p class="NDLRefMemberFunction">static const char*  kAssignDefaultNetID</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_net_service_1ad60f974e0733c87bfd789b0431fa98e8"></a>
<p class="NDLRefMemberFunction">static const char*  kWaitTicksOnShutdown</p>
<p class="NDLRefMemberFunction"></p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classefd_1_1_net_service_1ac7031a098043342feabda72f1c0742c3"></a>
<p class="NDLRefMemberFunction">virtual void  Subscribe(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>& cat, <br/><span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>* pCallback)</p>
<p class="NDLRefMemberDescription">Subscribe tells <span class="NDLSystemFont">NetService</span> that the <span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span> specified by pCallback is interested in receiving messages on the <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span> cat. </p>
<p class="NDLRefMemberDetailedDescription">Messages delivered to this <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span> will be delivered to the <span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span> specified. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">cat</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span> to subscribe to </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pCallback</span></td>
    <td>pointer to callback class to handle messages </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_net_service_1aa442dc507764495086c7b7458e48c6e1"></a>
<p class="NDLRefMemberFunction">virtual void  Unsubscribe(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>& cat, <br/><span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>* pCallback)</p>
<p class="NDLRefMemberDescription">Unsubscribe tells <span class="NDLSystemFont">NetService</span> that the <span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span> specified by pCallback is no longer interested in receiving messages on the <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span> cat. </p>
<p class="NDLRefMemberDetailedDescription">Messages delivered to the <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span> specified will no longer be delivered to the <span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span> specified.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">cat</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span> to subscribe to </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pCallback</span></td>
    <td>pointer to callback class to handle messages </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_net_service_1af12e6e382ce9eae26412d359cc6ba758"></a>
<p class="NDLRefMemberFunction">virtual void  Unsubscribe(<span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>* pCallback)</p>
<p class="NDLRefMemberDescription">Unsubscribe the specified callback from all Categories. </p>
<p class="NDLRefMemberDetailedDescription">Used in cases where the callback object pCallback is going to be deleted, or is otherwise no longer interested in receiving any more callbacks</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pCallback</span></td>
    <td>pointer to callback object to Unsubscribe </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_net_service_1afd97062ad6bbb3245d8f2140f6faa850"></a>
<p class="NDLRefMemberFunction">virtual void  SendRemote(<br/><span class="NDLSystemFont"><a href="../efd/efd__IMessage.htm">IMessage</a></span>* pMessage, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>& cat, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a3f46b06120f84d47e33a25e39034ed8e">efd::QualityOfService</a></span> defaultQOS = QOS_INVALID)</p>
<p class="NDLRefMemberDescription">Send an <span class="NDLSystemFont"><a href="../efd/efd__IMessage.htm">IMessage</a></span> to every process except this one (Send to every remote process). </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMessage</span></td>
    <td>Pointer to message for delivery </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">cat</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span> to send with </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">defaultQOS</span></td>
    <td>quality of service to send message on </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_net_service_1a55c63c4458d42b627750d57ed1d3b4b2"></a>
<p class="NDLRefMemberFunction">virtual void  SendRemote(<br/><span class="NDLSystemFont"><a href="../efd/efd__IMessage.htm">IMessage</a></span>* pMessage, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>& cat, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span>& cid)</p>
<p class="NDLRefMemberDescription">Send an <span class="NDLSystemFont"><a href="../efd/efd__IMessage.htm">IMessage</a></span> the remote process specified by cid. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">: This function ignores subscription data and sends directly to the connection.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMessage</span></td>
    <td>Pointer to message for delivery </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">cat</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span> to send with </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">cid</span></td>
    <td>the <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span> to send message to </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_net_service_1a7df16bf367b5687c469928ccf41750d6"></a>
<p class="NDLRefMemberFunction">virtual void  ProducerSendRemote(<br/><span class="NDLSystemFont"><a href="../efd/efd__IMessage.htm">IMessage</a></span>* pMessage, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>& categoryProduced, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a3f46b06120f84d47e33a25e39034ed8e">QualityOfService</a></span> defaultQOS = QOS_INVALID)</p>
<p class="NDLRefMemberDescription">Send a message to producers of specified category. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMessage</span></td>
    <td>Pointer to message for delivery </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">categoryProduced</span></td>
    <td>send message to anyone who produces this category </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">defaultQOS</span></td>
    <td>Quality of service. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_net_service_1ab2b7c54c5232f546e707cc1d7a14e178"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  BeginCategoryProduction(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>& cat, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a3f46b06120f84d47e33a25e39034ed8e">QualityOfService</a></span> qualityOfService, <br/><span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>* pCallback)</p>
<p class="NDLRefMemberDescription">BeginCategoryProduction assigns a quality of service to a category and notifies the CategoryManager of the intention of this <span class="NDLSystemFont">NetService</span> to produce messages destined for the specified category. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">cat</span></td>
    <td>The category specified "match" category </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">qualityOfService</span></td>
    <td>Quality of service for this category </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pCallback</span></td>
    <td>the callback that will receive producer messages for this category </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_net_service_1ad21a8609164bbb57112e11b23f657fc7"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  EndCategoryProduction(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span>& cat, <br/><span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>* pCallback)</p>
<p class="NDLRefMemberDescription">EndCategoryProduction notifies the CategoryManager of the intention of this <span class="NDLSystemFont">NetService</span> to no longer produce messages destined for the specified category. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">cat</span></td>
    <td>The category specified "match" category </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pCallback</span></td>
    <td>the callback that will no longer receive producer messages for this category </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_net_service_1a59f01512892255197fb147e4fe1db3ac"></a>
<p class="NDLRefMemberFunction">virtual void  HandleNetMessage(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__IMessage.htm">IMessage</a></span>* pIncomingMessage, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span>& senderConnectionID)</p>
<p class="NDLRefMemberDescription">Callback method used by network code to deliver messages received from remote connections. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pIncomingMessage</span></td>
    <td>The message received. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">senderConnectionID</span></td>
    <td>The <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span> the message was received from. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_net_service_1ad38be979c9e842a17aa38097a40a04e2"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">efd::ConnectionID</a></span>  GetChannelManagerConnectionID(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a3f46b06120f84d47e33a25e39034ed8e">QualityOfService</a></span> qualityOfService)</p>
<p class="NDLRefMemberDescription">Return the connection private category of the ChannelManager. </p>

<a name="classefd_1_1_net_service_1aff9780753f603957b0e15782846347e0"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetChannelManagerNetID()</p>
<p class="NDLRefMemberDescription">Return the NetID of the ChannelManager we are connected to. </p>

<a name="classefd_1_1_net_service_1a917815097a90b68987c55c2d3acc1e39"></a>
<p class="NDLRefMemberFunction">virtual void  ConnectToDefaultChannelManager()</p>
<p class="NDLRefMemberDescription">Sets the desired ip and port of the ChannelManager based on whatever default settings are specified in the Config.ini. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">Applications with ProgramType ProgType_Server will automatically connect to the ChannelManager using this method, so they should not need to call this. </p></p>

<a name="classefd_1_1_net_service_1af3f453198859a594b79456a912b52154"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">efd::ConnectionID</a></span>  ConnectToChannelManager(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a3f46b06120f84d47e33a25e39034ed8e">QualityOfService</a></span> qualityOfService, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& cmIPAddress, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span> cmPort)</p>
<p class="NDLRefMemberDescription">Sets the desired ip and port of the ChannelManager. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">: Applications with ProgramType ProgType_Server will automatically connect to the ChannelManager using ConnectToDefaultChannelManager, so they should not need to call this. </p></p>

<a name="classefd_1_1_net_service_1aba85f86835dbc111fa218bf09abd1ad7"></a>
<p class="NDLRefMemberFunction">virtual void  DisconnectFromChannelManager()</p>
<p class="NDLRefMemberDescription">Tell <span class="NDLSystemFont">NetService</span> to disconnect from the ChannelManager it is currently connected to. </p>

<a name="classefd_1_1_net_service_1a8e6e84bc7073191a7051bb907e1fe1f8"></a>
<p class="NDLRefMemberFunction">virtual void  AutoReconnectToChannelManager(<span class="NDLSystemFont">bool</span> autoReconnect)</p>
<p class="NDLRefMemberDescription">Tell the <span class="NDLSystemFont">NetService</span> whether or not to automatically reconnect when the channel manager connection is unexpectedly dropped. </p>
<p class="NDLRefMemberDetailedDescription">The default is to auto-reconnect to ChannelManager.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">autoReconnect</span></td>
    <td>true if auto reconnection is desired </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_net_service_1a8c55387c72e687ac73a1113ded98c331"></a>
<p class="NDLRefMemberFunction">virtual void  AutoConnectToChannelManager(<span class="NDLSystemFont">bool</span> autoConnect)</p>
<p class="NDLRefMemberDescription">Tell <span class="NDLSystemFont">NetService</span> to auto-connect or not. </p>
<p class="NDLRefMemberDetailedDescription">Default is to not auto-connect to ChannelManager </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">autoConnect</span></td>
    <td>true if auto-connection is desired </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_net_service_1af1cba7140f0ae5c0d5709922c4d4df59"></a>
<p class="NDLRefMemberFunction">virtual void  AssignClientNetID(<span class="NDLSystemFont">bool</span> assignClientNetID)</p>
<p class="NDLRefMemberDescription">Tell <span class="NDLSystemFont">NetService</span> to assign client NetID until connected or not. </p>
<p class="NDLRefMemberDetailedDescription">Default is to assign the client NetID. Note: the client NetID will only be assigned until a connection to a ChannelManager is established. You can subscribe to the <span class="NDLSystemFont"><a href="../efd/efd__AssignNetIDMessage.htm">AssignNetIDMessage</a></span> message on <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span> MessageService::GetServicePublicCategory(INetService::CLASS_ID) if you want to be notified when the NetID changes.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">assignClientNetID</span></td>
    <td>true if assignment of client NetID is desired </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_net_service_1ac5057e6bdc82788ca7ece1acc9e31167"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="efd__INetLib.htm">INetLib</a></span>*  GetNetLib()</p>
<p class="NDLRefMemberDescription">Accessor for contained INetLib*. </p>

<a name="classefd_1_1_net_service_1a62116242155ee12b2bbc8c45d234f2e8"></a>
<p class="NDLRefMemberFunction">virtual void  Resubscribe(const <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span>& cid)</p>
<p class="NDLRefMemberDescription">Resends all subscription messages to specified connection. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">cid</span></td>
    <td>id of the connection to send subscription messages to </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_net_service_1ae20557a7f72f0274398c791e0869219f"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a3b3ac05aae06dbfe022fc0b79d48de28">ConnectionStatus</a></span>  GetConnectionStatus()</p>
<p class="NDLRefMemberDescription">Return internal ConnectionStatus. </p>

<a name="classefd_1_1_net_service_1aaf0e0dde55bb3cb2188b150bc830fc6d"></a>
<p class="NDLRefMemberFunction">virtual void  SetMessageService(<span class="NDLSystemFont"><a href="../efd/efd__MessageService.htm">MessageService</a></span>* pMessageService)</p>
<p class="NDLRefMemberDescription">Set the <span class="NDLSystemFont"><a href="../efd/efd__MessageService.htm">MessageService</a></span> this <span class="NDLSystemFont">NetService</span> will use. </p>
<p class="NDLRefMemberDetailedDescription">Will no longer be necessary once full virtual processes are implemented </p>

<a name="classefd_1_1_net_service_1a431f0a2000ee9aeeadb553b0f4dcb13b"></a>
<p class="NDLRefMemberFunction">virtual void  CreateNetLib(<span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span> netLibType)</p>
<p class="NDLRefMemberDescription">Create our <span class="NDLSystemFont"><a href="efd__INetLib.htm">INetLib</a></span> object based on the string passed in. </p>

<a name="classefd_1_1_net_service_1a5089002fbac84e1ea049a2fa44a725a3"></a>
<p class="NDLRefMemberFunction">virtual void  SetChannelManager(<span class="NDLSystemFont"><a href="efd__ChannelManagerService.htm">ChannelManagerService</a></span>* pChannelManagerService)</p>
<p class="NDLRefMemberDescription">Set the pointer to the ChannelManager in this process. </p>

<a name="classefd_1_1_net_service_1aeb645165d4a549f86940641b5f32557f"></a>
<p class="NDLRefMemberFunction">virtual void  CheckPendingSubscriptions(<br/><span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span> catIDToCheck, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a3f46b06120f84d47e33a25e39034ed8e">QualityOfService</a></span> qos)</p>
<p class="NDLRefMemberDescription">Make sure the specified <span class="NDLSystemFont"><a href="../efd/efd__Category.htm">Category</a></span> is associated with the specified QualityOfService. </p>

<a name="classefd_1_1_net_service_1a3c5a3f5d2974dd6cc45aab69bb47f0d0"></a>
<p class="NDLRefMemberFunction">virtual void  SetChannelManagerConnectionID(const <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">efd::ConnectionID</a></span>& cmConnectionID)</p>
<p class="NDLRefMemberDescription">Set the <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span> of the ChannelManager we are currently connected to. </p>
<a name="public_static_methods"></a>
<p class="NDLRefHead1">Public Static Methods</p>


<a name="classefd_1_1_net_service_1a791343e200b2cebb4f97a656d45d8414"></a>
<p class="NDLRefMemberFunction">template &lt;<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  MessageID&gt; static void  SendConnectionUpdate(<br/><span class="NDLSystemFont"><a href="../efd/efd__MessageService.htm">efd::MessageService</a></span>* pMessageService, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span>& cid, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">UInt32</a></span> netID)</p>
<p class="NDLRefMemberDescription">Used to send Connection and Disconnection notifications. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMessageService</span></td>
    <td>pointer to the <span class="NDLSystemFont"><a href="../efd/efd__MessageService.htm">MessageService</a></span> instance to use to send the update </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">cid</span></td>
    <td><span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span> of the connection that has just connected or disconnected </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">netID</span></td>
    <td>Network ID. </td>
</tr>

        </tbody>
    </table>
</div>


<a name="accessors_for_netid"></a>
<p class="NDLRefHead1">Accessors for NetID</p>


<a name="classefd_1_1_net_service_1a8154399c33dfa8fbb644e73025bb916e"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetNetID() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_net_service_1a94645d5d7042347d460f8564d24da92e"></a>
<p class="NDLRefMemberFunction">virtual void  SetNetID(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> netID)</p>
<p class="NDLRefMemberFunction"></p>
<a name="channelmanager_configuration_accessors."></a>
<p class="NDLRefHead1">ChannelManager configuration accessors.</p>


<a name="classefd_1_1_net_service_1a3266387fd79c66d5e596853b847da351"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../efd/efd__RefCountedMemObj.htm">ChannelManagerConfigList</a></span>&  GetConfigList()</p>
<p class="NDLRefMemberDescription">Returns a const pointer to the ChannelManagerConfigList. </p>
<p class="NDLRefMemberDetailedDescription">The pointer is const because you should not modify this data directly. Making changes to the config this way will not guarantee that indexes are unique or that they remain in ascending order. The preferred way to change the configuration at runtime is to construct channel manager config objects and add them using AddConfig (or use the helper function AddChannelManagerConnection), and remove them from the CM using RemoveConfig. </p>

<a name="classefd_1_1_net_service_1acd875739799df190860438db1d92d1dd"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  AddConfig(<span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">ChannelManagerConfigPtr</a></span> spConfig)</p>
<p class="NDLRefMemberDescription">Add configuration to connect to a ChannelManager. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">spConfig</span></td>
    <td>The config to use for the new listen socket.</td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> The index assigned to the socket. You can later use this index to remove the socket from the <span class="NDLSystemFont"><a href="../efd/efd__list.htm">list</a></span>. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_net_service_1ac15f10a74c02a1e3c065327083f3c95a"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  RemoveConfig(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> index)</p>
<p class="NDLRefMemberDescription">Removes the config with the index value passed in, disconnecting the corresponding connection (if connected). </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">index</span></td>
    <td>The index value of the config entry to remove. Note that this is not necessarily the same as the position in the <span class="NDLSystemFont"><a href="../efd/efd__list.htm">list</a></span>; it is actually the index value assigned to the config entry object.</td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>bool Returns true if the entry was found and removed. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_net_service_1ac1385a5e282372434f9d82e4482c5a25"></a>
<p class="NDLRefMemberFunction">void  RemoveConfig(<span class="NDLSystemFont"><a href="../efd/efd__list.htm#classefd_1_1list_1ae79762a07a0edca216a7be7ca519bb8f">ChannelManagerConfigList::iterator</a></span> it)</p>
<p class="NDLRefMemberDescription">Removes the config pointed to by the iterator passed in, disconnecting the corresponding connection (if connected). </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">it</span></td>
    <td>The iterator pointing to the entry to remove. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_net_service_1aa69014be2f358966d0f20d8b1a98278d"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  AddChannelManagerConnection(<br/><span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span> hostname, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span> port, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a3f46b06120f84d47e33a25e39034ed8e">efd::QualityOfService</a></span> qos)</p>
<p class="NDLRefMemberDescription">Shortcut function for adding a new channel manager connection. </p>
<p class="NDLRefMemberDetailedDescription">Creates the config from the params passed in, and adds the config to the <span class="NDLSystemFont"><a href="../efd/efd__list.htm">list</a></span> of configs.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">hostname</span></td>
    <td>The name of the host to start listening on. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">port</span></td>
    <td>The port number to listen on. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">qos</span></td>
    <td>The quality of service to use for the connection.</td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> The index of the config added to the <span class="NDLSystemFont"><a href="../efd/efd__list.htm">list</a></span>. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_net_service_1ab1a34f512f54f974196a6e282725b6df"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetNextIndexValue()</p>
<p class="NDLRefMemberDescription">A convenience function for generating a unique index value. </p>
<p class="NDLRefMemberDetailedDescription">We keep the config <span class="NDLSystemFont"><a href="../efd/efd__list.htm">list</a></span> sorted ascending by index, so we can create a new unique index by simply taking the last one and incrementing it.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> The new index value. </td>
</tr>

        </tbody>
    </table>
</div>


<a name="construction_and_destruction"></a>
<p class="NDLRefHead1">Construction and Destruction</p>


<a name="classefd_1_1_net_service_1a3f2f95107d350f98e1a55b9630c12346"></a>
<p class="NDLRefMemberFunction">virtual ~NetService()</p>
<p class="NDLRefMemberDescription">Virtual destructor. </p>

<a name="classefd_1_1_net_service_1a901a18a76ebda924ebe794379a5c64ce"></a>
<p class="NDLRefMemberFunction">NetService(<span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span> netLibType = "")</p>
<p class="NDLRefMemberDescription">Default constructor. </p>

<a name="classefd_1_1_net_service_1a605c98f55b87e87192585ba976096026"></a>
<p class="NDLRefMemberFunction">NetService(<span class="NDLSystemFont"><a href="efd__INetLib.htm">INetLib</a></span>* pNetLib)</p>
<p class="NDLRefMemberDescription">Constructor that takes a pre-constructed <span class="NDLSystemFont"><a href="efd__NetLib.htm">NetLib</a></span>. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
