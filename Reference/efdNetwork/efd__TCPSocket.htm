<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::TCPSocket</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::TCPSocket</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="efd__Socket.htm">efd::Socket</a></span></p>


<p class="NDLRefHeaderFile">&lt;TCPSocket.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classefd_1_1_t_c_p_socket.gif" alt="Inheritance graph for efd::TCPSocket"/>
  <p class="FigureCaption">Inheritance graph for efd::TCPSocket</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">An implementation of <span class="NDLSystemFont"><a href="efd__Socket.htm">Socket</a></span> that uses TCP as the transport mechanism. </p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classefd_1_1_t_c_p_socket_1a4066d64fb2a948d4a26fb10f5478eb38"></a>
<p class="NDLRefMemberFunction">virtual void  IncRefCount() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_t_c_p_socket_1ad2e85d98888dbb58974c2cf55a7d2824"></a>
<p class="NDLRefMemberFunction">virtual void  DecRefCount() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_t_c_p_socket_1ab3cce899110c7f6d3f14e61d68a604fe"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span>  GetRefCount() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_t_c_p_socket_1a21df782a9efefeea8e5f51896b34315c"></a>
<p class="NDLRefMemberFunction">TCPSocket(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a3f46b06120f84d47e33a25e39034ed8e">efd::QualityOfService</a></span> qos, <br/><span class="NDLSystemFont">SOCKET</span> socketId, <br/>struct sockaddr_in& localAddr, <br/>struct sockaddr_in& remoteAddr, <br/><span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>* pCallback)</p>
<p class="NDLRefMemberDescription">Constructor. </p>
<p class="NDLRefMemberDetailedDescription">used for creating instances dedicated to client communication. </p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">qos</span></td>
    <td>Quality of service. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">socketId</span></td>
    <td>socket id of the socket created by call to accept </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">localAddr</span></td>
    <td>sockaddr_in for the local end of the socket </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">remoteAddr</span></td>
    <td>sockaddr_in for the remote end of the socket </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pCallback</span></td>
    <td>Callback pointer. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_t_c_p_socket_1a8cfc52c8a2c61cb8e5948ce28c27ddb5"></a>
<p class="NDLRefMemberFunction">TCPSocket(<br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a3f46b06120f84d47e33a25e39034ed8e">efd::QualityOfService</a></span> qos, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span> listenPort, <br/><span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>* pCallback)</p>
<p class="NDLRefMemberDescription">Used to create a new TCP socket given a local port to listen to. </p>

<a name="classefd_1_1_t_c_p_socket_1a0bc6d9826318a0b64066e8caedd53efe"></a>
<p class="NDLRefMemberFunction">virtual ~TCPSocket()</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_t_c_p_socket_1ac10a29edc0fd3be7750ed32bb0c5bb4d"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>  Send(const <span class="NDLSystemFont"><a href="../efd/efd__SmartBuffer.htm">efd::SmartBuffer</a></span>& buffer)</p>
<p class="NDLRefMemberDescription">Sends a message to a connected host. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">buffer</span></td>
    <td>Message to send </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>Number of bytes sent or error </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_t_c_p_socket_1a22e46a1cfd0ed3680903aabc965c302a"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>  SendTo(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__SmartBuffer.htm">efd::SmartBuffer</a></span>& buff, <br/><span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">efd::ConnectionID</a></span> destinationConnectionID)</p>
<p class="NDLRefMemberDescription">Sends a message to a datagram socket. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">buff</span></td>
    <td>message to send </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">destinationConnectionID</span></td>
    <td>Destination connection ID. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>: number of bytes sent or error </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_t_c_p_socket_1a406a716b00dc713b50aff019c9f8ead4"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>  Receive(<span class="NDLSystemFont"><a href="../efd/efd__SmartBuffer.htm">efd::SmartBuffer</a></span>& o_buff)</p>
<p class="NDLRefMemberDescription">receive messages and stores the message in a buffer. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">o_buff</span></td>
    <td>The buffer to fill in with the received data</td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>int The number of bytes in the stream, 0 if no data available on a non blocking call, -1 if a socket error occurred </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_t_c_p_socket_1a9ac1edaa799ad6d5316fb4932dc4557a"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>  ReceiveFrom(<br/><span class="NDLSystemFont"><a href="../efd/efd__SmartBuffer.htm">efd::SmartBuffer</a></span>& o_buff, <br/><span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">efd::ConnectionID</a></span>& senderConnectionID)</p>
<p class="NDLRefMemberDescription">Receive a message from a datagram socket. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">o_buff</span></td>
    <td>The buffer to fill in with the received data </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">senderConnectionID</span></td>
    <td>The <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span> of the sender of the data</td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>int The number of bytes in the stream, 0 if no data available on a non blocking call, -1 if a socket error occurred </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_t_c_p_socket_1a38c15f1a1401ae41fc6f8cb80c7eeb3e"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  Bind()</p>
<p class="NDLRefMemberDescription">Binds the socket to an address and port number a server call. </p>
<p class="NDLRefMemberDetailedDescription">Returns true if the bind succeeded, false if it failed. </p>

<a name="classefd_1_1_t_c_p_socket_1abc65ed4ba342aea1d37d072934aea754"></a>
<p class="NDLRefMemberFunction">virtual void  Listen(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ac109bbf377c83566102d95319120db7b">efd::UInt32</a></span> backlog = 5)</p>
<p class="NDLRefMemberDescription">Listens to connecting clients, a server call. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">backlog</span></td>
    <td>Maximum length of the <span class="NDLSystemFont"><a href="../efd/efd__queue.htm">queue</a></span> of pending connections </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_t_c_p_socket_1a9b120abb513b5c23217dccb4a4b88bd2"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1aab8784cd0d3fb2fa32b479bd64702149">efd::SInt32</a></span>  Connect(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& serverNameOrAddr, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a2ed07576a2c351e88e18847f247b5705">efd::UInt16</a></span> portServer)</p>
<p class="NDLRefMemberDescription">Connect to a listening server. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">serverNameOrAddr</span></td>
    <td>hostname or ip address of server to connect to </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">portServer</span></td>
    <td>port to connect to </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_t_c_p_socket_1a1e1b060dff500b2c5627863976a5b660"></a>
<p class="NDLRefMemberFunction">virtual void  Shutdown()</p>
<p class="NDLRefMemberDescription">Begin shutting down the socket endpoint. </p>

<a name="classefd_1_1_t_c_p_socket_1a1445afd202cdc353342cba580e046a34"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="efd__Socket.htm">Socket</a></span>*  CreateSocket(<br/><span class="NDLSystemFont">SOCKET</span> newSocket, <br/>struct sockaddr_in clientAddress)</p>
<p class="NDLRefMemberDescription">Create a new <span class="NDLSystemFont">TCPSocket</span> instance. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">newSocket</span></td>
    <td>Native socket descriptor for new instance </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">clientAddress</span></td>
    <td>Address of remote endpoint </td>
</tr>

        </tbody>
    </table>
</div>


 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
