<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiBinaryShaderLib Files</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<p class="NDLRefHeadClassTitle">NiBinaryShaderLib Files</p>

<p class="NDLRefHead1">Description</p>

<p>These files, <span class=
"NDLSystemFont">NiBinaryShaderLib.cpp</span> and <span class=
"NDLSystemFont">NiBinaryShaderLib.h</span>, provide the interface
function for static lib based builds of the shader library. It
defines a single function for creating the library, which the
application must call during <span class=
"NDLSystemFont">ClassCreationCallback</span>. Refer to the
documentation on <a href=
"../../Programmer/NiShader/Exposing_your_ShaderLibrary_to_the_tool_chain.htm">
Exposing your ShaderLibrary to the tool-chain</a> for more
details.</p>

<p class="NDLRefHead1">Functions</p>

<p class="NDLRefMemberFunction">bool
NiBinaryShaderLib_LoadShaderLibrary(NiRenderer* pkRenderer, int
iDirectoryCount, char* apcDirectories[], bool bRecurseSubFolders,
NiShaderLibrary** ppkLibrary)</p>

<p class="NDLRefMemberDescription">This function is provided for
static lib based builds of applications that wish to utilize the
<span class="NDLSystemFont">NiBinaryShaderLib</span>. The function
simply creates an instance of the <span class=
"NDLSystemFont">NiBinaryShaderLibLibrary</span> and returns it. The
application MUST be aware of this function if it is using static
lib-based builds.</p>

<p class="NDLRefMemberFunction">NIBINARYSHADERLIB_ENTRY bool
LoadShaderLibrary(NiRenderer* pkRenderer, int iDirectoryCount,
char* apcDirectories[], bool bRecurseSubFolders,
NiShaderLibrary** ppkLibrary)</p>

<p class="NDLRefMemberDescription">This function defines the
interface that the DLL-based shader factory system will use to
get an instance of the library.</p>

<p class="NDLRefMemberFunction">NIBINARYSHADERLIB_ENTRY unsigned int
GetCompilerVersion(void)</p>

<p class="NDLRefMemberDescription">This function simply returns a
value that identifies the version of the MSVC compiler used to
build this library. This prevents libraries built with differing
compiler versions from being used together and causing memory
corruption errors. Refer to the documentation on <a href=
"../../GetStart/All/getstart_reqs_vs.htm">Visual Studio compiler
versions</a> for more information.</p>

<p class="NDLRefMemberFunction">BOOL WINAPI DllMain(HINSTANCE
hinstDLL, ULONG fdwRead, LPVOID lpvReserved)</p>

<p class="NDLRefMemberDescription">Function supplied strictly for
DLL-based builds. Calls the <span class=
"NDLSystemFont">NiBinaryShaderLibSDM::Init</span> function when the
process is attached, and <span class=
"NDLSystemFont">NiBinaryShaderLibSDM::Shutdown</span> when the process
is detached.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
