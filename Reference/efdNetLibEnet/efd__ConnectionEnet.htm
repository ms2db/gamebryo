<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>efd::ConnectionEnet</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">efd::ConnectionEnet</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../efdNetwork/efd__IConnection.htm">efd::IConnection</a></span></p>


<p class="NDLRefHeaderFile">&lt;ConnectionEnet.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classefd_1_1_connection_enet.gif" alt="Inheritance graph for efd::ConnectionEnet"/>
  <p class="FigureCaption">Inheritance graph for efd::ConnectionEnet</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">A wrapper for data sent via the <span class="NDLSystemFont"><a href="efd__NetTransportEnet.htm">NetTransportEnet</a></span> transport. </p>

<a name="construction_and_destruction"></a>
<p class="NDLRefHead1">Construction and Destruction</p>


<a name="classefd_1_1_connection_enet_1ac5959f9dba36ad6b3daee55e9ef5b617"></a>
<p class="NDLRefMemberFunction">ConnectionEnet(<br/><span class="NDLSystemFont"><a href="../efd/efd__GenericFactory.htm">MessageFactory</a></span>* pMessageFactory, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm">QualityOfService</a></span> qos, <br/>_ENetHost* pENetHost, <br/><span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>* pMessageCallback, <br/><span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>* pConnectionCallback, <br/><span class="NDLSystemFont">bool</span> incomingConnection, <br/><span class="NDLSystemFont">bool</span> isListening)</p>
<p class="NDLRefMemberDescription">Virtual destructor. </p>

<a name="classefd_1_1_connection_enet_1a23bf9074454116f24b54bef135afa72a"></a>
<p class="NDLRefMemberFunction">virtual ~ConnectionEnet()</p>
<p class="NDLRefMemberDescription">Virtual destructor. </p>
<a name="public_static_methods"></a>
<p class="NDLRefHead1">Public Static Methods</p>


<a name="classefd_1_1_connection_enet_1a835c68ea738db9cb47b0a806676ff478"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont">ConnectionEnet</span>&gt;  Connect(<br/><span class="NDLSystemFont"><a href="../efd/efd__GenericFactory.htm">MessageFactory</a></span>* pMessageFactory, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm">efd::QualityOfService</a></span> qos, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& strServerAddress, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm">efd::UInt16</a></span> portServer, <br/><span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>* pMessageCallback, <br/><span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>* pConnectionCallback)</p>
<p class="NDLRefMemberDescription">Factory a <span class="NDLSystemFont">ConnectionEnet</span>, use it to attempt to connect. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMessageFactory</span></td>
    <td>Pointer to MessageFactory. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">qos</span></td>
    <td>Quality of Service. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">strServerAddress</span></td>
    <td>String version of server address. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">portServer</span></td>
    <td>Server port. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pMessageCallback</span></td>
    <td>Callback object to deliver messages to. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pConnectionCallback</span></td>
    <td>Callback object to report connection status events to. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_connection_enet_1a54c751612d7e2962307b2268a843b316"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::SmartPointer</a></span>&lt;<span class="NDLSystemFont">ConnectionEnet</span>&gt;  Listen(<br/><span class="NDLSystemFont"><a href="../efd/efd__GenericFactory.htm">MessageFactory</a></span>* pMessageFactory, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm">efd::QualityOfService</a></span> qos, <br/><span class="NDLSystemFont"><a href="../Namespaces/efd.htm">efd::UInt16</a></span> portListen, <br/><span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>* pMessageCallback, <br/><span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>* pConnectionCallback)</p>
<p class="NDLRefMemberDescription">Factory a <span class="NDLSystemFont">ConnectionEnet</span>, use it to attempt to listen. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMessageFactory</span></td>
    <td>Pointer to MessageFactory. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">qos</span></td>
    <td>Quality of Service. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">portListen</span></td>
    <td>Port to listen on. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pMessageCallback</span></td>
    <td>callback object to deliver messages to </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pConnectionCallback</span></td>
    <td>callback object to report connection status events to </td>
</tr>

        </tbody>
    </table>
</div>


<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classefd_1_1_connection_enet_1ae4391670c1aff4b94c1fa2406ae889f5"></a>
<p class="NDLRefMemberFunction">virtual void  IncRefCount() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_connection_enet_1a6b9560de4225c47a98a45f4e075dd85f"></a>
<p class="NDLRefMemberFunction">virtual void  DecRefCount() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_connection_enet_1a8b60f63fc0e2197b7ab4bc23160dcc52"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm">efd::UInt32</a></span>  GetRefCount() const</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_connection_enet_1a6357743d962178fa5bbaa876e1811d83"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm">efd::QualityOfService</a></span>  GetTransportType()</p>
<p class="NDLRefMemberDescription">Retrieves the QualityOfService associated with this object. </p>

<a name="classefd_1_1_connection_enet_1af3b4e86cb259905f1279084b5d818af4"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  IsValid()</p>
<p class="NDLRefMemberDescription">Returns true if the Connection is connected and valid. </p>

<a name="classefd_1_1_connection_enet_1a4188f4d3a9f6c764e3ed1c486af8d4c6"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm">efd::SInt32</a></span>  ReceiveMessage(<br/><span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">EnvelopeMessagePtr</a></span>& spEnvelopeMessage, <br/><span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span>& remoteConnectionID)</p>
<p class="NDLRefMemberDescription">Receive a message from the underlying network and populate pEnvelopeMessage with the contents of the received message. </p>

<a name="classefd_1_1_connection_enet_1a69dbc6f5b14027c8e99fb87fc9902707"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm">efd::SInt32</a></span>  ReceiveMessage(<br/><span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">EnvelopeMessagePtr</a></span>& spEnvelopeMessage, <br/><span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span>& senderConnectionID, <br/><span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">SmartPointer</a></span>&lt;<span class="NDLSystemFont">ConnectionEnet</span>&gt;& spNewConnection)</p>
<p class="NDLRefMemberDescription">Service any events on this connection. </p>

<a name="classefd_1_1_connection_enet_1a1a0a14cd54a63414829dd6d4818cc3f1"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm">efd::SInt32</a></span>  SendMessages()</p>
<p class="NDLRefMemberDescription">Send any queued messages. </p>

<a name="classefd_1_1_connection_enet_1a73c1eb8d662e93ef2951c2b9f94732fa"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm">efd::SInt32</a></span>  CompleteConnection()</p>
<p class="NDLRefMemberDescription">Attempt to complete a connection asynchronously. </p>

<a name="classefd_1_1_connection_enet_1a24e5266768b4072c8d3667c24abda069"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span>  GetRemoteConnectionID() const</p>
<p class="NDLRefMemberDescription">Retrieves the remote <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span> that this connection object receives messages from and sends messages to. </p>
<p class="NDLRefMemberDetailedDescription">If this connection is a listening connection or a many to one connection (such as UDP) then GetRemoteConnectionID will return the listening <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span>. </p>

<a name="classefd_1_1_connection_enet_1a17fbadd71a8635136c1d40509cd35a98"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  Send(<br/><span class="NDLSystemFont"><a href="../efd/efd__EnvelopeMessage.htm">EnvelopeMessage</a></span>* pMessage, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__ConnectionID.htm">ConnectionID</a></span>& cid)</p>
<p class="NDLRefMemberDescription">Actually sends the message across the network. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pMessage</span></td>
    <td>The envelope message to send. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">cid</span></td>
    <td>connection id to send to. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>: True if the message was sent. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_connection_enet_1ad2ddbd81d908d8c24af21cfbb386abd5"></a>
<p class="NDLRefMemberFunction">virtual void  Close()</p>
<p class="NDLRefMemberDescription">Closes the connection associated with this object. </p>

<a name="classefd_1_1_connection_enet_1a3eb282008c89df839c33a2609f5d4fae"></a>
<p class="NDLRefMemberFunction">virtual void  SetConnectionCallback(<span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>* pConnectionCallback)</p>
<p class="NDLRefMemberDescription">Set a callback object to receive connection oriented events: kMSGID_ConnectionConnectedMsg kMSGID_ConnectionFailedToConnectMsg kMSGID_ConnectionDisconnectedMsg kMSGID_ConnectionAcceptedMsg kMSGID_ConnectionFailedToAcceptMsg. </p>

<a name="classefd_1_1_connection_enet_1ad4d5f0f3f325dec3e73b9f4dd66464cb"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>*  GetConnectionCallback()</p>
<p class="NDLRefMemberDescription">Retrieve the object <span class="NDLSystemFont"><a href="../efd/efd__set.htm">set</a></span> to receive connection oriented events. </p>

<a name="classefd_1_1_connection_enet_1a3807531c8bf4bbd152944cd6586763b1"></a>
<p class="NDLRefMemberFunction">virtual void  SetMessageCallback(<span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>* pMessageCallback)</p>
<p class="NDLRefMemberDescription">Set a callback to receive data events: kMSGID_ConnectionDataReceivedMsg. </p>

<a name="classefd_1_1_connection_enet_1a70c3773657670220a0ecae4230ce1993"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>*  GetMessageCallback()</p>
<p class="NDLRefMemberDescription">Retrieve the object <span class="NDLSystemFont"><a href="../efd/efd__set.htm">set</a></span> to receive data events. </p>

<a name="classefd_1_1_connection_enet_1a7927f59fc0a9555120f9b7fe0869cc49"></a>
<p class="NDLRefMemberFunction">virtual void  RemoveCallback(<br/><span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>* pCallbackToRemove, <br/><span class="NDLSystemFont"><a href="../efd/efd__INetCallback.htm">INetCallback</a></span>* pReplacementCallback)</p>
<p class="NDLRefMemberDescription">Remove a callback object that no longer wishes to receive events. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pCallbackToRemove</span></td>
    <td>callback object to remove </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pReplacementCallback</span></td>
    <td>callback object to register instead, may be NULL </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_connection_enet_1abe29451114efed3d3bb021577ddf2311"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">NetMessagePtr</a></span>  GetStatusMessage()</p>
<p class="NDLRefMemberDescription">Factories the appropriate connection notification message based on the status of the connection. </p>

<a name="classefd_1_1_connection_enet_1af9bc5bb911fcaba6520acfc3e75f8654"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm">efd::SInt32</a></span>  ReceiveVersions(<span class="NDLSystemFont"><a href="../efd/efd__EnvelopeMessage.htm">efd::EnvelopeMessage</a></span>* pEnvelopeMessage)</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_connection_enet_1a7022de554a573fb9c89f23575466d8c5"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">IConnectionPtr</a></span>  Accept()</p>
<p class="NDLRefMemberDescription">Check for an incoming connection. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>a <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">SmartPointer</a></span> to the <span class="NDLSystemFont"><a href="../efdNetwork/efd__IConnection.htm">IConnection</a></span> for the newly established connection </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_connection_enet_1a48b2e9fe4ca69406b9ad5c1412389559"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  IsListening()</p>
<p class="NDLRefMemberDescription">returns true if this is a listening connection </p>

<a name="classefd_1_1_connection_enet_1a57822e8c8c568fe5e0eb6105c88dd41c"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont">bool</span>  IsIncomingConnection()</p>
<p class="NDLRefMemberDescription">returns true if this is an incoming connection </p>

<a name="classefd_1_1_connection_enet_1ac7980017cbdf172afd8267b9ecf05bb3"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm">efd::UInt32</a></span>  QueryOutgoingQueueSize()</p>
<p class="NDLRefMemberDescription">Query the size of the outgoing <span class="NDLSystemFont"><a href="../efd/efd__queue.htm">queue</a></span> in this connection. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>The size of the outgoing <span class="NDLSystemFont"><a href="../efd/efd__queue.htm">queue</a></span> in this connection. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_connection_enet_1a41c02eb66a1d30772627411434ff477e"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm">efd::SInt32</a></span>  GetLastError()</p>
<p class="NDLRefMemberDescription">@ { </p>
<p class="NDLRefMemberDetailedDescription">These functions implement the error-handling portion of the <span class="NDLSystemFont"><a href="../efdNetwork/efd__IConnection.htm">IConnection</a></span> interface. </p>
<p class="NDLRefMemberDetailedDescription"><span class="NDLSystemFont"><a href="../efdNetwork/efd__IConnection.htm">IConnection</a></span>. </p>

<a name="classefd_1_1_connection_enet_1a4cec5dd8d23451b41aeb6c3218eb8c45"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>  GetLastErrorString()</p>
<p class="NDLRefMemberDescription">Returns a string describing the last failure that occurred in this Connection object. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td><span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span> The description </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_connection_enet_1a628742a1e3c125d39ddf5c45db657319"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm">efd::UInt32</a></span>  GetLastSystemError()</p>
<p class="NDLRefMemberDescription">Returns the last error generated in the platform-specific networking code. </p>
<p class="NDLRefMemberDetailedDescription">For Berkeley sockets and related (e.g Winsock), this calls GetLastError.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td><span class="NDLSystemFont"><a href="../Namespaces/efd.htm">efd::UInt32</a></span> The error code. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_connection_enet_1a7693afe2bbfc44fd6691683c226263cd"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>  GetLastSystemErrorString()</p>
<p class="NDLRefMemberDescription">Returns a string describing the last error in the platform-specific networking code. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td><span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span> The error description. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classefd_1_1_connection_enet_1a89690e3995c2f15ce52146d69b702da5"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm">efd::SInt32</a></span>  SetLastError(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm">efd::SInt32</a></span> errCode)</p>
<p class="NDLRefMemberDescription">@ } </p>

<a name="classefd_1_1_connection_enet_1ab5e1c92721cc7ded43ebd0bd247e2c96"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../Namespaces/efd.htm">efd::SInt32</a></span>  SetLastSystemError(<span class="NDLSystemFont"><a href="../Namespaces/efd.htm">efd::SInt32</a></span> errCode)</p>
<p class="NDLRefMemberFunction"></p>

<a name="classefd_1_1_connection_enet_1ad4f33e5708c3cac650f4fc8b0346d83a"></a>
<p class="NDLRefMemberFunction">virtual void  Configure(<span class="NDLSystemFont"><a href="../efd/efd__ISection.htm">ISection</a></span>* pSection)</p>
<p class="NDLRefMemberDescription">Used to configure this <span class="NDLSystemFont"><a href="../efdNetwork/efd__IConnection.htm">IConnection</a></span> instance. </p>
<p class="NDLRefMemberDetailedDescription">A derived class can read any configuration information needed out of the passed in <span class="NDLSystemFont"><a href="../efd/efd__ISection.htm">ISection</a></span>. The default implementation does nothing.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pSection</span></td>
    <td>The config section from which to read settings </td>
</tr>

        </tbody>
    </table>
</div>


 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
