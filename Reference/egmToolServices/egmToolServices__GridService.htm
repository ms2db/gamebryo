<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>egmToolServices::GridService</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">egmToolServices::GridService</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../efd/efd__ISystemService.htm">efd::ISystemService</a></span></p>


<p class="NDLRefHeaderFile">&lt;GridService.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classegm_tool_services_1_1_grid_service.gif" alt="Inheritance graph for egmToolServices::GridService"/>
  <p class="FigureCaption">Inheritance graph for egmToolServices::GridService</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">The <span class="NDLSystemFont">GridService</span> is responsible for constructing and managing grid meshes used to help visualize scale in scenes. </p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classegm_tool_services_1_1_grid_service_1a8f2a23dfcda1a138ce1b8c5352141d5b"></a>
<p class="NDLRefMemberFunction">GridService()</p>
<p class="NDLRefMemberFunction"></p>

<a name="classegm_tool_services_1_1_grid_service_1a623a9d3d7b8173a24d7f746d7a73a739"></a>
<p class="NDLRefMemberFunction">virtual const char*  GetDisplayName() const</p>
<p class="NDLRefMemberDescription">Returns the name of this service. </p>
<p class="NDLRefMemberDetailedDescription">This name is used mainly for improving the readability of various log statements and has no impact on functionality. Service names are not guaranteed to be unique.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>const char* Display name for the current service. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegm_tool_services_1_1_grid_service_1a82617506d50d8e36b70edb9129f72619"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a62e4d1bc94248c629612480b748bfd0e">efd::SyncResult</a></span>  OnPreInit(<span class="NDLSystemFont"><a href="../efd/efd__IDependencyRegistrar.htm">efd::IDependencyRegistrar</a></span>* pDependencyRegistrar)</p>
<p class="NDLRefMemberDescription">Called by the framework after the service has been registered and before the service receives the first call to OnInit. </p>
<p class="NDLRefMemberDetailedDescription">This allows the service to perform any synchronous setup. Although you may query for the existence of other services, for example in order to cache a smart pointer to a tightly coupled service, at this point you should not call any methods on other services unless the method explicitly states it is safe to call during OnPreInit. If the method does not indicate it is safe to call from OnPreInit you should not call it since the service may not have had a change to setup yet and might fail to handle the method as a result. You should wait until OnInit before you rely on cross-service interaction. You may also register additional service dependencies during OnPreInit. You should not register additional aliases, those should be done during OnServiceRegistered.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">OnPreInit is called in the order services are registered.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pDependencyRegistrar</span></td>
    <td>Services can use this interface to optional register dependencies which determine the order in which OnInit and OnShutdown will be called. </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>SyncResult the service's progress through the initialization state, one of:
<ul>
<li>SyncResult_Success : The PreInit phase succeeded and this service is ready to be moved to the OnInit queue.</li>
<li>SyncResult_Failure : The PreInit phase failed, this will cause framework to begin shutdown and unloading of all services. </li></ul></td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegm_tool_services_1_1_grid_service_1ab629bd79f6f242af9c98076b6d45ff19"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ad81d366c75ea1e1119513a730f79910d">efd::AsyncResult</a></span>  OnInit()</p>
<p class="NDLRefMemberDescription">Called by the framework after the service has had OnPreInit called and before the service receives its first OnTick. </p>
<p class="NDLRefMemberDetailedDescription">This allows the service to perform any initialization that it requires. During the OnInit phase it should be safe or call methods on other services since all services will have had a chance to be pre-initialized already. This phase is primarily intended for establishing cross-service relationships such as the registering of message handlers. The OnInit phase is asynchronous meaning that you can stay in this phase for multiple ticks. Once a service returns AsyncResult_Complete from OnInit on the next tick OnTick will be called even if not all of the other services have completed their OnInit.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">OnInit is called in dependency order.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>AsyncResult the service's progress through the initialization state, one of:
<ul>
<li>AsyncResult_Pending : More initialization work is required. OnInit will be called again until it completes or fails.</li>
<li>AsyncResult_Failure : Initialization has critically failed. The entire framework will be shut down and the process will exit.</li>
<li>AsyncResult_Complete : Initialization has completed for this service. It will receive no more OnInit calls. </li></ul></td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegm_tool_services_1_1_grid_service_1a0af7d67ca911150844ea9363ade874a1"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ad81d366c75ea1e1119513a730f79910d">efd::AsyncResult</a></span>  OnTick()</p>
<p class="NDLRefMemberDescription">Called by the framework every cycle to allow the service to do its work. </p>
<p class="NDLRefMemberDetailedDescription">The service should perform a small slice of work and return as quickly as possible. This is where your application will spend the vast majority of its lifetime.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">OnTick is called in priority order. Higher values are called before lower values.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>AsyncResult the service's progress through the running state, one of:
<ul>
<li>AsyncResult_Pending : This is the normal result, your service is still running and will continue to receive future OnTick calls.</li>
<li>AsyncResult_Failure : The service has critically failed. The entire framework will be shut down and the process will exit.</li>
<li>AsyncResult_Complete : The service no longer requires OnTick calls. It will remain registered and might still have things like message handlers that are active but it will not receive future OnTick calls. </li></ul></td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegm_tool_services_1_1_grid_service_1ae297356c9e9a83c0badb5fd7704b7e7f"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1ad81d366c75ea1e1119513a730f79910d">efd::AsyncResult</a></span>  OnShutdown()</p>
<p class="NDLRefMemberDescription">Called by the framework after the framework shutdown has been requested. </p>
<p class="NDLRefMemberDetailedDescription">This allows the service to perform any clean up that it requires. The service should cleanly shutdown which might involve persisting various state. If the service is unregistered while the framework is running it should be careful not to spend too much time in a single call and should instead do a small amount of work on each call while returning "pending" to request additional calls. In some rare cases OnShutdown can be called even if OnInit has never been called, for example if your service was unregistered or if the service manager is shutdown after OnPreInit was called but before OnInit was called.</p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">OnShutdown is called in reverse dependency order.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>AsyncResult the service's progress through the initialization state, one of:
<ul>
<li>AsyncResult_Pending : More shutdown work is required. OnShutdown will be called again until it completes or fails.</li>
<li>AsyncResult_Failure : Shutdown has critically failed. The framework shutdown state will be aborted and the process will exit immediately.</li>
<li>AsyncResult_Complete : Shutdown has completed for this service. It will receive no more OnShutdown calls. </li></ul></td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegm_tool_services_1_1_grid_service_1a5112bb5bb621e1de3f7319ac386a1042"></a>
<p class="NDLRefMemberFunction">void  DeleteGrid()</p>
<p class="NDLRefMemberFunction"></p>

<a name="classegm_tool_services_1_1_grid_service_1aa763ad229f5fce54e6266b6e53ac030f"></a>
<p class="NDLRefMemberFunction">void  SetDisplayGrid(<span class="NDLSystemFont">bool</span> flag)</p>
<p class="NDLRefMemberFunction"></p>

<a name="classegm_tool_services_1_1_grid_service_1a018c7816a1463a0a74c6048687b20ff3"></a>
<p class="NDLRefMemberFunction">void  SetMinorLineColor(const <span class="NDLSystemFont"><a href="../NiMain/NiColor.htm">NiColor</a></span>& color)</p>
<p class="NDLRefMemberFunction"></p>

<a name="classegm_tool_services_1_1_grid_service_1aacce505b4a041510a5174754628d1853"></a>
<p class="NDLRefMemberFunction">void  SetMajorLineColor(const <span class="NDLSystemFont"><a href="../NiMain/NiColor.htm">NiColor</a></span>& color)</p>
<p class="NDLRefMemberFunction"></p>

<a name="classegm_tool_services_1_1_grid_service_1a3ba82e32dba46bb60d3e385be4ab7bb3"></a>
<p class="NDLRefMemberFunction">void  SetMinorLineSpacing(float spacing)</p>
<p class="NDLRefMemberFunction"></p>

<a name="classegm_tool_services_1_1_grid_service_1ae4517a8c5cb1c82cbfb6fd99a183ad10"></a>
<p class="NDLRefMemberFunction">void  SetMajorLineSpacing(float spacing)</p>
<p class="NDLRefMemberFunction"></p>

<a name="classegm_tool_services_1_1_grid_service_1aeb0b5d3127477671580899265eb7aa78"></a>
<p class="NDLRefMemberFunction">void  SetExtents(float extents)</p>
<p class="NDLRefMemberFunction"></p>

<a name="classegm_tool_services_1_1_grid_service_1a3da6aab588f7d46a3f38fddf89f9e3ac"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetDisplayGrid()</p>
<p class="NDLRefMemberFunction"></p>

<a name="classegm_tool_services_1_1_grid_service_1ad3fa4a3ed8bd9ec46deea6a9474b9cd6"></a>
<p class="NDLRefMemberFunction">void  ToggleDisplayGrid()</p>
<p class="NDLRefMemberFunction"></p>

<a name="classegm_tool_services_1_1_grid_service_1ae4663b474cbf27d8682a9bb8f4ceb4e7"></a>
<p class="NDLRefMemberFunction">float  GetVerticalInterval()</p>
<p class="NDLRefMemberFunction"></p>

<a name="classegm_tool_services_1_1_grid_service_1aa7a8d1a6b33b2754f0991eb4636dccce"></a>
<p class="NDLRefMemberFunction">void  SetVerticalInterval(float interval)</p>
<p class="NDLRefMemberFunction"></p>

<a name="classegm_tool_services_1_1_grid_service_1a57b1f39177aff3c706b272cd0b9ee132"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont">bool</span>  GetUseVerticalInterval()</p>
<p class="NDLRefMemberFunction"></p>

<a name="classegm_tool_services_1_1_grid_service_1a423349b05ff333c83ec651256b15b879"></a>
<p class="NDLRefMemberFunction">void  SetUseVerticalInterval(<span class="NDLSystemFont">bool</span> useInterval)</p>
<p class="NDLRefMemberFunction"></p>

<a name="classegm_tool_services_1_1_grid_service_1a209b191c63097da01248934aaf38e396"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>  PickOnGrid(<br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& rayOrigin, <br/>const <span class="NDLSystemFont"><a href="../NiMain/NiPoint3.htm">NiPoint3</a></span>& rayDirection)</p>
<p class="NDLRefMemberFunction"></p>

<a name="classegm_tool_services_1_1_grid_service_1a650d2f0997a5c2bb324104b4c5436190"></a>
<p class="NDLRefMemberFunction">virtual void  OnSurfacePreDraw(<br/><span class="NDLSystemFont"><a href="../ecr/ecr__RenderService.htm">ecr::RenderService</a></span>* pService, <br/><span class="NDLSystemFont"><a href="../ecr/ecr__RenderSurface.htm">ecr::RenderSurface</a></span>* pSurface)</p>
<p class="NDLRefMemberDescription">Called by the RenderService when the RenderSurface is about to be drawn. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pService</span></td>
    <td>Pointer to the RenderService. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pSurface</span></td>
    <td>Pointer to the render surface that is about to be drawn. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegm_tool_services_1_1_grid_service_1a1f8c2d85464e5688253b4f326a48daca"></a>
<p class="NDLRefMemberFunction">virtual void  RequestRebuildGrid()</p>
<p class="NDLRefMemberFunction"></p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
