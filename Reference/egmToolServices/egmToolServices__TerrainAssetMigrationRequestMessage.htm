<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>egmToolServices::TerrainAssetMigrationRequestMessage</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">egmToolServices::TerrainAssetMigrationRequestMessage</p>
<p class="NDLRefParentage">: public <span class="NDLSystemFont"><a href="../efd/efd__IMessage.htm">efd::IMessage</a></span></p>


<p class="NDLRefHeaderFile">&lt;ToolServicesMessages.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classegm_tool_services_1_1_terrain_asset_migration_request_message.gif" alt="Inheritance graph for egmToolServices::TerrainAssetMigrationRequestMessage"/>
  <p class="FigureCaption">Inheritance graph for egmToolServices::TerrainAssetMigrationRequestMessage</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">This message type is used for triggering a migration of a terrain asset in the UI. </p>

<a name="construction_and_destruction"></a>
<p class="NDLRefHead1">Construction and Destruction</p>


<a name="classegm_tool_services_1_1_terrain_asset_migration_request_message_1adb8029016d48232099859e34041cbf95"></a>
<p class="NDLRefMemberFunction">TerrainAssetMigrationRequestMessage()</p>
<p class="NDLRefMemberDescription">Default Constructor. </p>

<a name="classegm_tool_services_1_1_terrain_asset_migration_request_message_1a8c91e33906e65c470db118a2ac09b9a7"></a>
<p class="NDLRefMemberFunction">TerrainAssetMigrationRequestMessage(<br/>const <span class="NDLSystemFont"><a href="../efd/efd__ID128.htm">efd::ID128</a></span>& entityId, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& assetId, <br/>const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>& assetPath)</p>
<p class="NDLRefMemberDescription">Default Constructor. </p>

<a name="classegm_tool_services_1_1_terrain_asset_migration_request_message_1aed5785205e179f1a291ca96b0b99f281"></a>
<p class="NDLRefMemberFunction">virtual ~TerrainAssetMigrationRequestMessage()</p>
<p class="NDLRefMemberDescription">Virtual Destructor. </p>
<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classegm_tool_services_1_1_terrain_asset_migration_request_message_1a4793d95f87746a7760e59f0c9e08bc60"></a>
<p class="NDLRefMemberFunction">virtual <span class="NDLSystemFont"><a href="../Namespaces/efd.htm#namespaceefd_1a11b3d968bc96d7f04115a0aad3893469">efd::ClassID</a></span>  GetClassID() const</p>
<p class="NDLRefMemberDescription">Helper method to directly get ClassID. </p>
<p class="NDLRefMemberDetailedDescription">
<p class="NDLRefMemberDetailedDescription">GetClassDesc is virtual, so this function will return the most derived ClassID by default. GetClassID is virtual to support creating multiple "virtual" classes from the same C++ class. E.g., using MessageWrapper&lt;&gt;, or supporting subclasses that do not use EE_DECLARE_CLASS macros.</p></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>ClassID Returned class ID. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegm_tool_services_1_1_terrain_asset_migration_request_message_1aaf02cdf818ff30412b460b148fd3d5e1"></a>
<p class="NDLRefMemberFunction">virtual void  Serialize(<span class="NDLSystemFont"><a href="../efd/efd__Archive.htm">efd::Archive</a></span>& io_ar)</p>
<p class="NDLRefMemberDescription">Serialize a polymorphic type to or from an Archive. </p>
<p class="NDLRefMemberDetailedDescription">This method must be overridden, but if your streamable object has no data the override can be an empty function. A typical implementation of this method will make one call to <span class="NDLSystemFont"><a href="../Namespaces/efd__Serializer.htm#namespaceefd_1_1_serializer_1a63e0b99047011bde53be44786ab9ee7b">efd::Serializer::SerializeObject</a></span> for each member of the class. If you are derived from another streamable class you should be sure to call to parent implementation of this method as well; it is recommended that the parent class be serialized first before adding the data for the derived class. If your class contains complex data such as STL-style contianers or pointers to allocated data then you can simplify the implementation of Serialize by using the templated helper functions in &lt;<span class="NDLSystemFont">efd/SerializeRoutines.h</span>&gt;; these can serialize even the most complex data structures with a single method call and will reduce the chance of making common mistakes (which could introduce security vulnerabilities if marshalling data from untrusted sources).</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">io_ar</span></td>
    <td>The Archive to serialize to or from. </td>
</tr>

        </tbody>
    </table>
</div>


<a name="public_static_methods"></a>
<p class="NDLRefHead1">Public Static Methods</p>


<a name="classegm_tool_services_1_1_terrain_asset_migration_request_message_1aef9e9d6089dc198dcef1185c7e102da6"></a>
<p class="NDLRefMemberFunction">static <span class="NDLSystemFont"><a href="../efd/efd__SmartPointer.htm">efd::IMessagePtr</a></span>  FactoryMethod()</p>
<p class="NDLRefMemberDescription">Factory method to create this message. </p>
<a name="fetch_the_properties"></a>
<p class="NDLRefHead1">Fetch the properties</p>


<a name="classegm_tool_services_1_1_terrain_asset_migration_request_message_1abf4d57a24b47b1cd54562d1116f62475"></a>
<p class="NDLRefMemberFunction"><span class="NDLSystemFont"><a href="../efd/efd__ID128.htm">efd::ID128</a></span>  GetEntityId() const</p>
<p class="NDLRefMemberDescription">Returns the ID of the entity to migrate. </p>

<a name="classegm_tool_services_1_1_terrain_asset_migration_request_message_1a68cb03fa1e1a2c6685e5e811730c32ec"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>&  GetAssetId() const</p>
<p class="NDLRefMemberDescription">Returns the ID of the asset to use for migration. </p>

<a name="classegm_tool_services_1_1_terrain_asset_migration_request_message_1abd9496e94e74ffcd70500dac15533b21"></a>
<p class="NDLRefMemberFunction">const <span class="NDLSystemFont"><a href="../efd/efd__utf8string.htm">efd::utf8string</a></span>&  GetAssetPath() const</p>
<p class="NDLRefMemberDescription">Returns the ID of the asset's path. </p>
 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
