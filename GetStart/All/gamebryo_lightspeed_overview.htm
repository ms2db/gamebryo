<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Gamebryo LightSpeed Overview</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>

<!--(Begin Body)================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<h1>Gamebryo LightSpeed Overview</h1>

<p>Gamebryo<sup>&reg;</sup> from Emergent Game Technologies is the game engine and foundational
technology for more than 300 shipped or in-production games-worldwide and in every genre.
Gamebryo<sup>&reg;</sup> LightSpeed&trade; (LightSpeed) builds on top of the multiplatform
rendering, digital content tool exporters, and other tools and technology for game development.
LightSpeed adds a game logic system, extensible tools infrastructure , tools for designers of every
type, and scripting system.</p>

<p>Gamebryo LightSpeed provides a pipeline and runtime solution that allows programmers, artists,
and designers to quickly stand up content, then rapidly and continuously iterate on game design,
level design, gameplay mechanics, core logic, and game assets. LightSpeed's functionality is
designed to support two principal objectives of today's game developers:</p>

<ul>
    <li><em>Rapid iteration</em>&mdash;change the art, entities, levels, and behaviors and see the
    effect in your game without recompiling. This minimizes the need for game restarts and reduces
    development delays.</li>

    <li><em>Rapid prototyping and production</em>&mdash;quickly move game content into a playable
    form, enabling you to evaluate technology and gameplay mechanics and assess the look and feel
    of levels and assets, and build on that work throughout the production cycle.</li>
</ul>

<p>LightSpeed's features include the following:</p>

<ul>
    <li>
        <b>Core Runtime</b>

        <ul>
            <li><em>Rendering:</em> Robust, cross-platform renderers enable a broad range of
            advanced rendering techniques for developers through a straightforward scene graph that
            provides flexibility and extensibility in addition to ease of use. By default, the
            standard material system offers the basic rendering features expected by all modern
            games including per-pixel lighting, normal mapping, parallax mapping, and more.</li>

            <li><em>Animation:</em> Gamebryo's animation system allows many different types of
            information to be animated via a controller based system. Applications can blend
            between multiple animations either programmatically or via transitions set up in the
            Animation Tool.</li>

            <li><em>Floodgate<sup>&reg;</sup>:</em> Gamebryo's Floodgate stream processing system
            provides a platform-independent API for harnessing the power of multicore systems.
            Developers can benefit out of the box from Floodgate kernels that parallelize particle
            simulation and skinning, or they can write their own kernels that will be scheduled and
            executed across any platform.</li>
        </ul>
    </li>

    <li>
        <b>Entity and behavior system</b>

        <ul>
            <li><em>Data-driven entity definition:</em> Entities are composed of properties and
            behaviors (scripts). They are defined with data files that enable a wide variety of
            prototyping and iteration methods that do not require recompiling or restarting the
            game.</li>

            <li><em>Entity composition:</em> The entity system provides an object-oriented paradigm
            through its use of entity models. Model inheritance using Ruby-like mix-ins allows
            reuse through extension and specialization.</li>

            <li><em>Behaviors in multiple programming languages:</em> Out of the box, LightSpeed
            provides the ability to control entity behavior with Lua or C++. It also includes a
            sample Python integration for a subset of platforms. Additionally, almost any language
            can be easily employed as an entity behavior scripting language using SWIG.</li>
        </ul>
    </li>

    <li>
        <b>Cross-platform game framework</b>

        <ul>
            <li><em>Simulation:</em> LightSpeed's Entity Scheduler manages events (behavior
            invocation requests). It invokes behavior scripts when they are scheduled to run. It
            also manages behaviors as they span across frame ticks. Because the scheduler's
            implementation is independent of the entity and behavior system, a studio is free to
            implement other scheduling paradigms.</li>

            <li><em>Real-time editing:</em> The game framework responds to live edits, additions,
            and deletions of model descriptions, levels, and behaviors without restarting the game.
            Changes are incrementally delivered to running applications to provide this
            capability.</li>

            <li><em>Third-party technology integrations:</em> A wide variety of middleware
            technology can be integrated easily with the Game Framework, providing all of the
            intrinsic advantages, including rapid prototyping and rapid iteration.</li>
        </ul>
    </li>

    <li>
        <b>Online</b>

        <ul>
            <li><em><a href="../../Programmer/Networking/sso_networking_intro.htm">Multiplatform
            Messaging</a>:</em> Networked communication is seamlessly integrated with the
            LightSpeed messaging system. Messages are automatically routed to the appropriate
            clients, whether the target is on a local or remote process, and enables rapid
            iteration on multiple connected clients. Modular and extensible Network Libraries
            (NetLibs) provide a common interface between LightSpeed's messaging system and the
            underlying network transports.</li>

            <li><em><a href=
            "../../Programmer/Entity_Replication/sso_replication_intro.htm">Replication</a>:</em>
            The replication system provides a powerful yet easy-to-use mechanism for communicating
            property changes from one client to other clients without having to manually code
            complex messaging protocols. Remote clients create a local entity cache which is
            automatically kept up-to-date based on each property's replication group interval.</li>

            <li><em><a href="../../Learn/SSO/sso_matchmaking_sample_intro.htm">Platform-specific
            service integrations</a>:</em> Samples are provided to demonstrate basic login, session
            hosting, and matchmaking on Xbox Live and Playstation Network.</li>
        </ul>
    </li>

    <li>
        <b>Tools</b>

        <ul>
            <li><em><a href="../../Tools/Toolbench/tb_intro.htm">Toolbench</a>:</em> An application
            platform written from the ground up to be an enterprise-level hosting platform for any
            and all tools associated with game development. Toolbench is driven purely through the
            use of plug-ins, where plug-ins define their extensibility in a data-driven manner.
            Toolbench is designed primarily as an interactive GUI, but it may also be used as a
            command-line application to support automated builds of data.</li>

            <li><em><a href="../../Tools/EntityModelingTool/emt_intro.htm">Entity Modeling Tool
            (EMT)</a>:</em> A Toolbench plug-in that allows a content developer to create and edit
            Entity Model definitions. EMT is a graphical and property sheet-based editor in which
            Model mix-in inheritance, property descriptions, and behaviors can be edited.</li>

            <li><em><a href="../../Tools/WorldBuilder/wb_intro.htm">World Builder</a>:</em> A
            Toolbench plug-in level editor that enables designers to populate the game world with
            models previously created in the Entity Modeling Tool.</li>

            <li><em><a href="../../Tools/ScriptDebugger/efr_script_debugger_intro.htm">Script
            Debugger</a>:</em> A Toolbench plug-in that allows a developer to debug script code in
            a running game application. This tool enables developers to place breakpoints and step
            through behavior script code. Lua expressions can be evaluated in the watch window to
            monitor the state of a game while it is running.</li>

            <li><em><a href="../../Tools/SimDebugger/sim_debugger_intro.htm">Simulation
            Debugger</a>:</em> A Toolbench-hosted tool that records game events and plays them back
            using a 2D world visualization. This debugger is useful both for getting a high level
            view of the entity system and for analyzing detailed entity interactions.</li>

            <li><em><a href="../../Art/Maya/rpi_intro.htm">Rapid Particle Iteration with
            Maya</a>:</em> Enables real-time viewing of particle systems while they are being
            edited with Maya. The technology that enables this capability is provided so that it
            can be used between any two applications. For example, it could be used to connect Maya
            to a custom tool or a running game.</li>
        </ul>
    </li>
</ul>

<p>There are many other features in LightSpeed&mdash;all supporting the rapid iteration and
prototyping objectives. See the <a href="../../Learn/ProductTour/ProductTour.htm">Product Tour</a>
for further details.</p>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
    <li><a href="What_s_New_in_Gamebryo.htm">What's New in Gamebryo LightSpeed</a></li>

    <li><a href="rapid_iteration_overview.htm">Rapid Iteration Overview</a></li>

    <li><a href="../../Learn/Introduction_to_Learning_Gamebryo.htm">Learning Gamebryo
    LightSpeed</a></li>

    <li><a href="../Architecture/architecture_intro.htm">Gamebryo LightSpeed Architecture</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
