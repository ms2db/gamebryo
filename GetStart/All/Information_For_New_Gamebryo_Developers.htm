<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Information for New Gamebryo LightSpeed Developers</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Information for New Gamebryo LightSpeed Developers</h1>

<p>For a new Gamebryo LightSpeed developer, the suggested reading
list is:</p>

<ol>
    <li>
        <b>Introductory Material:</b>

        <ul>
            <li><a href="getstart_intro.htm">Getting Started with
            Gamebryo</a>: This platform-independent document
            includes suggestions for documentation reading
            sequence and information about components of the
            Gamebryo development kit.</li>

            <li>The following documents contain information about
            setting up Gamebryo for development on specific
            platforms. This information includes: compiler setup,
            project settings, installation of code, compiling,
            and discussion of the application layer. (Note that
            platform-specific documentation is included in your
            install only if you have licensed it.)

                <ul>
                    <li><a href="../PC/Introduction.htm">Building
                    Gamebryo LightSpeed for PC</a></li>

                    <li><a href=
                    "../../ee_goto.htm#GetStart/PS3/Introduction_to_Gamebryo_for_PS3.htm">
                    Building Gamebryo LightSpeed for PS3</a></li>

                    <li><a href=
                    "../../ee_goto.htm#GetStart/Xbox/Introduction_to_Gamebryo_for_Xenon.htm">
                    Building Gamebryo LightSpeed for Xbox
                    360</a></li>
                </ul>
            </li>
        </ul>
    </li>

    <li>
        <b>Tutorials and Sample Applications:</b>

        <ul>
            <li>Tutorials:

                <ul>
                    <li>The <a href=
                    "../../Learn/ProductTour/ProductTour.htm">Product
                    Tour</a> provides a brief tour through the
                    major tools and workflows provided with
                    Gamebryo LightSpeed.</li>

                    <li>The <a href=
                    "../../Learn/Tutorials/Intro_to_Gamebryo.htm">
                    Core Runtime tutorial track</a> progresses
                    step-by-step from building the simplest
                    Gamebryo application through creating an
                    application that handles input, renders
                    assets, creates a screen texture, creates a
                    rendered texture, and demonstrates other
                    intermediate-level features of Gamebryo's
                    Core Runtime.</li>

                    <li>The <a href=
                    "../../Tutorials/Hello_World/hello_world_intro.htm">
                    Hello World tutorial</a> introduces you to
                    the basic concepts and components of the
                    Emergent Game Framework.</li>

                    <li>The <a href=
                    "../../Tutorials/Base_Game/base_game_intro.htm">
                    Base Game tutorial</a> walks you through a
                    sample singleplayer game that shows the
                    usage of Foundation and GameFramework in a
                    real game situation.</li>

                    <li>The <a href=
                    "../../Tutorials/Peer_Game/sso_peer_game_intro.htm">
                    Peer Game tutorial</a> walks you through a
                    sample multiplayer game that shows the
                    usage of Foundation, GameFramework and Online in a
                    real game situation.</li>

                    <li>For getting up to speed on how the Core
                    Runtime interfaces with PhysX, take a look at
                    the <a href=
                    "../../Learn/Tutorials/Introduction_to_the_Gamebryo_PhysX_Tutorial.htm">
                    Intro to Gamebryo PhysX</a> tutorial
                    track.</li>

                    <li>The <a href=
                    "../../Tools/WorldBuilder/wb_intro.htm">World
                    Builder introduction</a> describes Gamebryo&#39;s world-editing tool.</li>

                    <li>The <a href=
                    "../../Tools/animation_tool/Animation_Tool_Working.htm">
                    Animation Tool tutorials</a> introduce
                    Gamebryo's tool for setting up character
                    animation sequences.</li>
                </ul>
            </li>

            <li>
                <a href=
                "../../Learn/FullDemos/Full_Demos_Introduction.htm">
                Game Demos</a>: Examples of both basic and
                advanced Gamebryo techniques:

                <ul>
                    <li><a href=
                    "../../Learn/MangledMetal/mm_intro.htm">MangledMetal</a>:
                    The MangledMetal demo takes place in a world
                    of giant steam-powered mechanical beings
                    called Warjacks, from Privateer Press's
                    table-top role-playing game, Warmachine&reg;.
                    You control the actions of a mechanical being
                    and are able to interact with the world via
                    physical actions (using NVidia PhysX&trade;)
                    and combat (moderated by Lua scripts). It is
                    a full-featured, robust application
                    demonstrating many of the features and best
                    practices of the Emergent Game
                    Framework.</li>

                    <li><a href=
                    "../../Learn/FullDemos/MOUT_Sample.htm">MOUT</a>:
                    The MOUT (Military Operations in Urban
                    Terrain) sample is a demonstration of an
                    interactive, animated character exploring an
                    outdoor environment with terrain, buildings,
                    and fire and smoke.</li>

                    <li><a href=
                    "../../Learn/FullDemos/MetalWars_Overview.htm">
                    MetalWars</a>: MetalWars supplements the
                    techniques demonstrated in MOUT with an array
                    of advanced shader and animation blending
                    techniques. Full source and artist files are
                    included with both the samples. These samples
                    can serve as excellent starting points for
                    larger customer applications and games.</li>

                    <li><a href=
                    "../../Learn/FullDemos/Lenguins_on_Ice_Overview.htm">
                    Lenguins On Ice</a> (requires PhysX): This
                    sample demonstrates PhysX by smashing little
                    birds around with giant ice cubes. The
                    demonstration is fully playable and also
                    demonstrates several interesting Gamebryo
                    shader techniques.</li>

                    <li><a href=
                    "../../Learn/FullDemos/Dodgeball_Overview.htm">
                    DodgeBall</a> (requires PhysX): Demonstrates
                    the use of physics rag-doll and blending in a
                    light-hearted game environment. Also shows
                    Gamebryo shadows.</li>
                </ul>
            </li>

            <li><a href=
            "../../Learn/Demos/Demos_Introduction.htm">Graphics
            Tech Demos</a>: Additional sample applications, as
            interests dictate. Each showcases just one feature or
            subsystem, providing a more concise view.</li>
        </ul>
    </li>

    <li>
        <b>System Details:</b>

        <ul>
            <li><a href=
            "../../Programmer/General_Topics/Introduction_to_Gamebryo.htm">
            Programmer Level: General Topics</a>: This section
            presents a high level overview of basic Core Runtime
            concepts such as 3D world representation, viewing,
            culling, and rendering, special effects, and NIF file
            streaming.</li>

            <li><a href=
            "../../Reference/NiAnimation/Introduction_to_Animation.htm">
            Animation</a>: This section discusses the powerful
            Gamebryo animation system. Gamebryo handles nearly
            every animated value that can be specified in 3ds max
            and Maya automatically upon export. In addition, it
            contains a character animation system that allows for
            blending between an arbitrary number of animation
            sequences. This documentation gives a general
            overview of the animation system along with
            lower-level descriptions of how the <span class=
            "NDLSystemFont">NiAnimation</span> library works.
            Artists should consider looking at the <a href=
            "../../Tools/animation_tool/Introduction_to_Animation_Tool.htm">
            Animation Tool</a> documentation.</li>

            <li><a href=
            "../../Programmer/NiParticle/Introduction_to_NiParticle.htm">
            Particle Systems</a>: This documentation describes
            the extensive particle system capabilities of
            Gamebryo. Particle effects can be designed and
            created by artists in 3ds max and Maya and exported
            to NIF files to just work in the engine. Particle
            effects can also be tweaked or created
            programmatically, if desired. This documentation
            includes a high-level overview of the system as a
            whole along with descriptions of the various required
            and optional components. A full class reference for
            the <span class="NDLSystemFont">NiParticle</span>
            library is also included.</li>

            <li><a href=
            "../../Programmer/Texturing/Introduction_to_Texturing.htm">
            Texturing</a>: Detailed topics on the texturing
            system, including how Gamebryo handles static and
            projected multitextures, vertex lighting, and related
            items. The first few topics cover the basics of how
            Gamebryo handles texturing.</li>

            <li><a href=
            "../../Programmer/NiShader/Introduction_to_Gamebryo_s_Shader_System.htm">
            Shader System</a>: This documentation describes the
            Gamebryo shader system and how to use it
            properly.</li>

            <li><a href=
            "../../Programmer/NiMesh/Introduction_to_the_NiMesh_Library.htm">
            NiMesh Library</a>: This documentation describes
            Gamebryo's cross-platform set of classes for
            interacting with geometry.</li>

            <li><a href=
            "../../Programmer/Introduction_to_GamebryoPhysX_Programming.htm">
            NiPhysX</a>: Gamebryo is fully integrated with NVIDIA
            PhysX. Read this documentation to discover how to
            take advantage of PhysX in your Gamebryo
            application.</li>

            <li><a href=
            "../../Programmer/NiFloodgate/Introduction_to_NiFloodgate.htm">
            Floodgate</a>: Floodgate is a cross-platform stream
            processing engine that enables developers to exploit
            the data-processing power of multi-processor
            machines. It is used heavily by the Gamebryo PS3
            renderer.</li>

            <li>A discussion of the platform-independent
            application layers included with Gamebryo, including
            <a href=
            "../../Reference/NiApplication/Introduction_to_NiApplication.htm">
                <span class=
                "NDLSystemFont">NiApplication</span></a>,
                <a href="../../Reference/NiSample/Introduction_To_NiSample.htm">
                <span class="NDLSystemFont">NiSample</span></a>,
                <a href=
                "../../Reference/NiCursor/NiCursor_Overview.htm"><span class="NDLSystemFont">
                NiCursor</span></a>, <a href=
                "../../Reference/NiInput/Introduction_To_NiInput.htm">
                <span class="NDLSystemFont">NiInput</span></a>,
                and <a href=
                "../../Reference/NiFont/NiFont_Overview.htm"><span class="NDLSystemFont">
                NiFont</span></a>, among others. <span class=
                "NDLSystemFont">NiApplication</span> and
                <span class="NDLSystemFont">NiSample</span> are
                used by virtually all the Core Runtime samples
                that ship with the evaluation SDK. These layers
                hide the underlying operating system, windowing
                system, and low-level Gamebryo setup. Although a
                customer may choose to use these layers, it is
                not necessary nor recommended to do so, if, for
                example, your application requires more than
                basic input handling. A simple application that
                does not use <span class=
                "NDLSystemFont">NiApplication</span> is
                illustrated in:

                <p class="indent1"><span class=
                "NDLSystemFont"><em>%EMERGENT_PATH%</em>\Samples\GraphicsTechDemos\SimpleApp</span></p>
            </li>

            <li><a href=
            "../../Programmer/Logging/Logging_intro.htm">Logging,
            asserts and debugging</a>: This section gives an
            overview of the logging, assert, and debugging
            features available in Gamebryo LightSpeed. It
            describes how logging works and how to configure
            logging levels without recompiling your
            application.</li>

            <li><a href=
            "../../Programmer/Messages/message_intro.htm">Messages</a>:
            The Emergent Foundation, Game Framework and other
            systems rely heavily on messages to pass events
            between subsystems, entities, and system services.
            The Message System abstracts both remote and local
            messaging.</li>

            <li><a href=
            "../../Programmer/Networking/sso_networking_intro.htm">Networking</a>:
            The Networking System extends the Message System 
            so that multiple processes can communicate. This 
            allows the same messages that the Emergent Foundation,
            Game Framework and other systems use to communicate within
            the same process to communicate with remote processes as well.</li>

            <li><a href=
            "../../Programmer/AssetRuntimeService/asset_runtime_intro.htm">
            Asset Infrastructure</a>: The Asset Infrastructure
            provides a consistent framework for naming, locating,
            and organizing your assets. It is used extensively in
            LightSpeed Game Framework applications.</li>

            <li><a href=
            "../../Programmer/SystemServices/system_service_intro.htm">
            System services</a>: A system service can be any
            encapsulated module that needs to share compute
            cycles with other modules. Or, it can be an
            encapsulated module that needs to be looked up
            commonly as a singleton. The Service Manager
            initializes, ticks, and ultimately destroys each
            system service.</li>

            <li><a href=
            "../../Programmer/Models/entity_models_intro.htm">Models</a>:
            A model is a data-driven description of a class of
            Entity from which many entity instances are created
            and initialized. You can create a hierarchy of models
            to represent the various entities in your
            application.</li>

            <li><a href=
            "../../Programmer/Entities/entity_intro.htm">Entities</a>:
            Entities are game objects used to represent game
            logic during runtime. Entities are the instantiation
            of models developed in the Entity Modeling Tool
            (EMT). They have unique properties and behaviors that
            define them. Entities can be created at runtime and
            interact with one another.</li>

            <li><a href=
            "../../Programmer/Entity_Replication/sso_replication_intro.htm">Entity Replication</a>:
            Replication is an extension to the entity system that
            uses networking to communicate changes to entity
            properties to other processes. Each process maintains
            a local cache of replicated entities that it can use
            to read information about remote entities.</li>

            <li><a href=
            "../../Programmer/CoreRuntimeServices/core_services_intro.htm">
            Core runtime services</a>: The core runtime system
            services provide an interface between the Core
            Runtime system layer and the Game Framework system
            layer. These services include the Scene Graph
            Service, the Animation Service, and the Light
            Service.</li>
        </ul>
    </li>

    <li>
        <b>Tools and Content Handling:</b>

        <ul>
            <li>Content Tools: These tools include the following:

                <ul>
                    <li><a href=
                    "../../Art/Max/Max_Plug_in_Introduction.htm">Max
                    Exporter</a>&mdash;a plug-in for max that
                    extracts and formats data for use with
                    Gamebryo</li>

                    <li><a href=
                    "../../Art/Maya/Maya_Plug_in_Introduction.htm">
                    Maya Exporter</a>&mdash;a plug-in for Maya
                    that extracts and formats data for use with
                    Gamebryo</li>

                    <li><a href="../../Art/XSI/XSI_intro.htm">XSI
                    Exporter</a>&mdash;a plug-in for XSI that
                    extracts and formats data for use with
                    Gamebryo</li>

                    <li><a href=
                    "../../Tools/WorldBuilder/wb_intro.htm">World
                    Builder</a>&mdash;an application that allows
                    designers and artists to assemble game
                    objects into a world or level</li>

                    <li><a href=
                    "../../Tools/EntityModelingTool/emt_intro.htm">
                    Entity Modeling Tool</a>&mdash;an application
                    that allows designers to create and edit game
                    objects containing properties and
                    behaviors</li>

                    <li><a href=
                    "../../Tools/ScriptDebugger/efr_script_debugger_intro.htm">
                    Script Debugger</a>&mdash;an application that
                    assists with debugging script code</li>

                    <li><a href=
                    "../../Tools/SimDebugger/sim_debugger_intro.htm">
                    Simulation Debugger</a>&mdash;a tool for visualizing game state
                    and debugging entities</li>

                    <li><a href=
                    "../../Tools/Animation_Tool/Introduction_to_Animation_Tool.htm">
                    Animation Tool</a>&mdash;an application that
                    allows artists to manage and control
                    animation sequences, transitions and
                    layers</li>

                    <li><a href=
                    "../../Tools/Asset_Viewer/Introduction_to_the_Asset_Viewer.htm">
                    Asset Viewer</a>&mdash;an application that
                    provides previewing of scenes from Scene
                    Designer</li>

                    <li><a href=
                    "../../Reference/Tool_Plug_ins/Available_Tool_Plug_ins.htm">
                    Tool Plugins</a>&mdash;.DLLs that can be used
                    to customize art tool export processing</li>
                </ul>

                <p class="indent1">You can find source code for
                these tools in the following location:</p>

                <p class="indent1"><span class=
                "NDLSystemFont"><em>%EMERGENT_PATH%</em>\Source\Tools</span></p>
            </li>
        </ul>
    </li>

    <li>
        <b>Release Notes:</b>

        <ul>
            <li><a href=
            "../../RelNotes/Release_Notes_Introduction.htm">Release
            Notes</a>: Contains sections for major subsystems,
            tools, samples, third party code, and
            platform-specific issues. Release notes within each
            section list added features, fixes to known or
            reported bugs, and currently known bugs in the
            current release of Gamebryo.</li>
        </ul>
    </li>
</ol>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
