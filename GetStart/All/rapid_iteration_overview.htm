<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Rapid Iteration Overview</title>

<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>

<!--(Begin Body)================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Rapid Iteration Overview</h1>

<p>If you're developing a game and you have to rely on code changes to drive content, you've
probably already realized that there's a lot of down-time and inefficiency built into game
development cycles. Maybe your designers require assistance from programmers to create level
assets. A bottleneck is created while the programmer's time has to be prioritized to help the
designer. Or, perhaps your artists have a collection of art assets for your game, but your
designers and programmers have to wait while the artists tweak artwork in their digital content
creation tools. And just when the team's efforts finally seem to be coordinated, everyone has to
wait for the application to be recompiled and/or restarted to see the latest and greatest.</p>

<p>Gamebryo LightSpeed avoids these bottlenecks and augments efficiencies by providing a
data-driven Game Framework and tools that expedite rapid prototyping and iteration. When you build
your game on the Game Framework, artists, designers, and programmers work together, moving
efficiently through the concept, prototyping, development, and delivery phases at an impressive
speed without having to recompile or restart. LightSpeed's data-driven approach is equally applied
to game logic and game object definition through the use of the Entity/Behavior system. This
enables you to create significant amounts of content and behavior in any game genre while enhancing
your ability to differentiate your product.</p>

<p>For more information about LightSpeed's major tools and workflows, see the <a href=
"../../Learn/ProductTour/ProductTour.htm">Product Tour</a>.</p>

<p>For more information on LightSpeed's Game Framework and other major subsystems, see <a href=
"../Architecture/architecture_intro.htm">Gamebryo LightSpeed Architecture</a>.</p>

<h2>Rapid Iteration Benefits</h2>

<p>The main premise of rapid iteration is that artists, designers, and programmers can quickly
experiment with changes in a meaningful way. They can then view and evaluate those changes right
away in the game runtime as actual playable content. With LightSpeed, these evaluations can be
performed on the PC and consoles simultaneously. This enables team members to compare appearance
and performance across target platforms.</p>

<p>LightSpeed's rapid iteration workflow is a productivity boon to all aspects of game development.
Artists can now preview art assets in the game running on the target platform(s) without having to
wait for lengthy build turnarounds. Game designers can expand the game content palette and can
create new worlds without waiting for code changes and rebuilds to introduce new elements in the
game. Programmers can realize much of the game's logic and mechanics through the use of real
scripting languages like Lua and easy-to-learn, powerful, extensible script APIs.</p>

<p>For guided examples that show how to use LightSpeed tools to rapidly iterate on a game, see the
<a href="../../Tutorials/Rapid_Iteration/rapid_intro.htm">Rapid Iteration</a>, <a href=
"../../Tutorials/Multiplayer_Rapid/sso_multiplayer_rapid_intro.htm">Multiplayer Rapid
Iteration</a>, <a href="../../Tutorials/Hello_World/hello_world_tutorial_overview.htm">Hello
World</a>, <a href="../../Tutorials/Base_Game/base_game_tutorial_overview.htm">Base Game</a>, and
<a href="../../Tutorials/Peer_Game/sso_peer_game_tutorial_overview.htm">Peer Game</a>
tutorials.</p>

<h2>Suggested Rapid Iteration Workflow for Designers</h2>

<p>Much of a designer's work on game content is accomplished within two Toolbench
plug-ins&mdash;the Entity Modeling Tool (EMT) and World Builder. Both of these tools can be used
with the rapid iteration feature to immediately reload and preview changes in the game. To preview,
designers run the game alongside Toolbench, either on the same PC or from an attached console. The
game reflects changes whenever the tools' export functions are run. In EMT, exporting Flat Models
causes the game to refresh with updated entity models. In World Builder, exporting the world
creates a new .xblock file that the game re-loads automatically. By relying on the export function,
the tools allow designers to freely edit and save changes. It also lets designers batch together a
full set of related changes for preview in the game.</p>

<p>For more information on LightSpeed tools for designers, see <a href=
"../../Tools/EntityModelingTool/emt_intro.htm">Entity Modeling Tool</a> (EMT) and <a href=
"../../Tools/WorldBuilder/wb_intro.htm">World Builder</a>.</p>

<h2>Suggested Rapid Iteration Workflow for Programmers</h2>

<p>Programmers work primarily within the Toolbench plug-ins for script editing and debugging. These
modules let programmers navigate to the script code associated with model behaviors. When
programmers update and save scripts changes, LightSpeed automatically detects and applies these
changes the next time the behavior is invoked.</p>

<p>If a programmer is developing script changes that could cause instability in the game simulation
(for example, if changes span several dependent script modules), the programmer can choose to pause
the game simulation from within the World Builder. After verifying that their changes are
syntactically and semantically correct, they save their changes to the affected scripts and resume
the game. Alternately, if the changes are likely to upset the state of the in-progress simulation,
the simulation can be restarted from within World Builder.</p>

<p>For more information about the script editing and debugging capabilities in LightSpeed, see
<a href="../../Tools/ScriptDebugger/efr_script_debugger_intro.htm">Script Debugger:
Introduction</a>.</p>

<p>For more information about the Asset Runtime Service, which provides the asset management
backbone for rapid iteration, see the <a href=
"../../Programmer/AssetRuntimeService/asset_runtime_intro.htm">asset infrastructure </a>
documentation which discusses this service and other portions of the LightSpeed asset management
infrastructure.</p>

<h2>Suggested Rapid Iteration Workflow for Artists</h2>

<p>Artist workflows employ a number of different digital content creation tools. The key benefit of
rapid iteration is that LightSpeed automatically detects and re-loads exported art assets into a
running game for immediate preview. To iterate on a particular art asset, an artist re-exports the
run-time asset file (in other words, the Gamebryo scenegraph or animation files). Externally
referenced textures can also be rapidly iterated on. When these files are updated, the game
receives a notification and automatically reloads the updated assets.</p>

<p>For more information about working with the digital art tool exporters, see the documentation
sections about <a href="../../Art/Max/Max_Plug_in_Introduction.htm">3ds max</a>, <a href=
"../../Art/Maya/Maya_Plug_in_Introduction.htm">Maya</a>, and <a href=
"../../Art/XSI/XSI_intro.htm">XSI</a>.</p>

<h2>Deploying Metadata to Consoles after Rapid Iteration</h2>

<p>Metadata updates are not automatically deployed to consoles during rapid iteration.
For example if you create a new Model, this data is not automatically copied to consoles.
The application will get this metadata from the AssetController for as long as the application
is connected to it. Once the application disconnects, these metadata updates are no longer
available on the console. This can result in unexpected behavior in your application, including 
a failure to load initial world files.</p>

<table class="NDLNoteContainer" width="100%">
    <tr align="left">
        <td class="NDLNoteContainerTD">
            <p class="NDLHeadingNoteContainer">Note</p>

            <div class="NDLNote">
 When developing for consoles, if you make changes in Toolbench that result in metadata updates
you should ensure that this metadata (asset-web-metadata) is re-deployed to the application working directory.
Failure to do so will result in unexpected runtime behavior.
            </div>
        </td>
    </tr>
</table>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
    <li><a href="../../Learn/Introduction_to_Learning_Gamebryo.htm">Learning Gamebryo
    LightSpeed</a></li>

    <li><a href="../../Art/Maya/rpi_intro.htm">Rapid Particle Iteration with the Maya
    Plug-in</a></li>

    <li><a href="../../Programmer/Introduction_to_GameFramework_Programming.htm">Game Framework
    Programming</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
