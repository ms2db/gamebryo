<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>About System Services</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>About System Services</h1>

<p>Gamebryo LightSpeed's Foundation subsystem uses a service
oriented paradigm to coordinate required and optional modules in
Foundation, Game Framework, Game Modules, and your application.
This groups functionality into interoperable services, each with
a specific purpose and functionality. The services are loosely
coupled and communicate with each other via asynchronous messages
using the Message System. This approach allows the application to
instantiate only the services it requires and add custom services
that implement application specific logic.</p>

<p>The Foundation System Services framework is composed of a
Service Manager and a collection of customizable System Services.
The application normally creates and registers the services it
needs. After registering these services, your application invokes
the main loop of the Service Manager, which then executes the
services in turn. The Service Manager provides System Services
processing cycles once per frame.</p>

<p>The Service Manager controls complex initialization and
shutdown order dependency. In particular, the key LightSpeed
services are set up in the right order relative to a custom game
application.</p>

<p>This framework enables game studios to customize the
application by instantiating only the services that they need
from the set available with LightSpeed. Development best practice
is to encapsulate both application-specific or specialized
services and standard LightSpeed services using the LightSpeed
system service paradigm. Used in this way, the mechanism becomes
an "application framework". However, the system has also been
designed to integrate with a preexisting studio application code
base that uses a different approach.</p>

<h2>System Services and Application Performance</h2>

<p>As noted above, System Services are granted cycle time on a
per-frame basis. If you create a System Service that performs too
much work during a single frame, your application will not
perform adequately, resulting in slow frames and general runtime
performance problems. To avoid these problems, each System
Service should be designed so that it implements long-running
commands over multiple frames. If you have a CPU-intensive
calculation that must happen once per frame, consider using
<a href=
"../../Programmer/NiFloodgate/Introduction_to_NiFloodgate.htm">Floodgate</a>
to parallelize the operation.</p>

<h2>Asynchronous Communication</h2>

<p>System Services use the Message System to communicate with one
another. The majority of System Services use this method to pass
information between services. <em>These messages are normally
sent asynchronously and processed during the next tick</em>.</p>

<p>Your application should not rely on tight timing synchronicity
between services, particularly within one frame. If you have one
or more services that require tight coupling, you should consider
incorporating the functionality of these related services into a
single, unified System Service instead. Alternatively, tightly
coupled System Services could hold pointers to other System
Services and make direct function calls on these services.</p>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
    <li><a href=
    "../../Programmer/SystemServices/system_service_intro.htm">Working
    with System Services</a></li>

    <li><a href="architecture_overview.htm">Gamebryo LightSpeed
    overview</a></li>

    <li><a href="architecture_foundation_overview.htm">Foundation
    overview</a></li>

    <li><a href="architecture_core_runtime_overview.htm">Core
    Runtime overview</a></li>

    <li><a href="architecture_framework_overview.htm">Game
    Framework overview</a></li>

    <li><a href="architecture_online_overview.htm">Online
    overview</a></li>

    <li><a href="architecture_sys_services_about.htm">About
    System Services</a></li>

    <li><a href="architecture_msg_system_about.htm">About the
    Message System</a></li>

    <li><a href="architecture_entities_about.htm">About
    entities</a></li>

    <li><a href="architecture_scheduler_about.htm">About the
    Scheduler</a></li>

    <li><a href=
    "architecture_asset_runtime_service_about.htm">About the
    Asset Runtime Service</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
