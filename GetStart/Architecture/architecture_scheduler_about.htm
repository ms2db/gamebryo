<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>About the Scheduler</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>About the Scheduler</h1>

<p>In Gamebryo LightSpeed, the <a href=
"../../Programmer/Scheduler/scheduler_intro.htm">Scheduler</a> is
the system service that allows entities to run behaviors.
Entities interact with each other by sending events. These events
are handled by the Scheduler using game-time. In each frame, the
pending event list is inspected, and any entity that is ready to
run will have a behavior started.</p>

<p>The Scheduler also manages behaviors that are suspended from a
previous tick. By using coroutines from scripting runtime virtual
machine, the system supports process-oriented computation. This
allows a behavior to block, save an execution context, then
continue executing later from that point. For example, a
character can wait three seconds to recover from an attack, then
continue with the rest of the event.</p>

<p>The system also supports event-based processing in which each
event completes in one tick. These kinds of behaviors must be
implemented to take care of an entity's state transitions by
using variables stored in properties.</p>

<p>The Scheduler is independent of the entity and behavior
system. This allows a game studio to implement other scheduling
paradigms, such as turn-based games or fast-forward semantics.
The default scheduler is a real-time, discrete event system that
allows for scheduling of future events. Other classes of
scheduler could be created for other scheduling approaches; for
example, turn-based games or time-stepped simulations.</p>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
    <li><a href=
    "../../Programmer/Scheduler/scheduler_intro.htm">Working with
    the Scheduler</a></li>

    <li><a href="architecture_overview.htm">Gamebryo LightSpeed
    overview</a></li>

    <li><a href="architecture_foundation_overview.htm">Foundation
    overview</a></li>

    <li><a href="architecture_core_runtime_overview.htm">Core
    Runtime overview</a></li>

    <li><a href="architecture_framework_overview.htm">Game
    Framework overview</a></li>

    <li><a href="architecture_online_overview.htm">Online
    overview</a></li>

    <li><a href="architecture_sys_services_about.htm">About
    System Services</a></li>

    <li><a href="architecture_msg_system_about.htm">About the
    Message System</a></li>

    <li><a href="architecture_entities_about.htm">About
    entities</a></li>

    <li><a href=
    "architecture_asset_runtime_service_about.htm">About the
    Asset Runtime Service</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
