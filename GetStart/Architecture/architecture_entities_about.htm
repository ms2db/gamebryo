<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>About Entities</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>About Entities</h1>

<p>In Gamebryo LightSpeed, an <a href=
"../../Programmer/Entities/entity_intro.htm">Entity</a> is the
smallest individual object in the simulation. Any simulation
object with changeable state is represented by an entity. Obvious
examples of entities include player and AI characters. Entities
can also include abstract, non-rendering objects used simply to
influence the simulation state. For example, an entity could
represent weather in a game.</p>

<p>An Entity is composed of <a href=
"../../Programmer/Entity_Properties/entity_property_intro.htm">Properties</a>
and <a href=
"../../Programmer/Behaviors/behavior_intro.htm">Behaviors</a>.
Properties represent the data for the entity and behaviors are
methods that can be invoked on the entity either directly or in
response to various events.</p>

<p>Entities use a data-driven template, called an <a href=
"../../Programmer/Models/entity_models_intro.htm">Entity
Model</a>, to define their properties and behaviors. Creating and
editing Entity models is done using the <a href=
"../../Tools/EntityModelingTool/emt_intro.htm">Entity Modeling
Tool</a> (EMT).</p>

<p>You can combine together multiple models via mix-in
composition to form new models while automatically resolving
multiple inheritance conflicts. Default values for all properties
are specified in the model. The mix-in process automatically
determines default values for mix-in properties based on the
mix-in order. A child model can further specialize itself by
overriding parent model properties and behaviors.</p>

<p>A model that does not add Properties or change Behaviors, but
only overrides default property values, is called a <a href=
"architecture_online_overview.htm">Preset model</a>. This kind of
model is used to create classes of objects with different initial
configuration states, and are used when a group of entity
instances of the same type that are placed in the world need to
be reconfigured simultaneously.</p>

<p>When an entity is created at runtime, it is always created
using a single model as the template. The <a href=
"../../Tools/EntityModelingTool/emt_intro.htm">Entity Modeling
Tool</a> (EMT) maintains the relationship between parent and
child models. The EMT export process flattens this relationship
into a single flat model file that contains the complete runtime
definition of the model.</p>

<h2>Entity Creation Considerations</h2>

<p>The process of creating a new Entity at runtime is
asynchronous. An Entity created at runtime is not available until
it is added to the Entity Manager and is made available to the
Scheduler. You should not attempt to interact with an Entity
until it is made generally available. However, the creation
request provides the EntityID of the nascent Entity.</p>

<p>You can detect when an individual Entity is available by
listening for the 'OwnedEntityAdded' message. To detect when all
entities in a world are available, listen for the
'EntityCreationComplete' message in your System Service or
implement the 'OnEntitySetFinished' life cycle Behavior found in
the BaseEntity Model for one or more Entities.</p>

<p>The process of adding an Entity to the Entity Manager might be
delayed if the Entity indicates that it must wait for dependent
assets. This happens when an Entity requests asset loads during
its OnCreate life cycle behavior. The Entity is not made
generally available until all the required assets have loaded. An
Entity itself can detect when its dependent assets are loaded by
implementing the 'OnAssetsLoaded' behavior.</p>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
    <li><a href="architecture_overview.htm">Gamebryo LightSpeed
    overview</a></li>

    <li><a href="architecture_foundation_overview.htm">Foundation
    overview</a></li>

    <li><a href="architecture_core_runtime_overview.htm">Core
    Runtime overview</a></li>

    <li><a href="architecture_framework_overview.htm">Game
    Framework overview</a></li>

    <li><a href="architecture_online_overview.htm">Online
    overview</a></li>

    <li><a href="architecture_sys_services_about.htm">About
    System Services</a></li>

    <li><a href="architecture_msg_system_about.htm">About the
    Message System</a></li>

    <li><a href="architecture_scheduler_about.htm">About the
    Scheduler</a></li>

    <li><a href=
    "architecture_asset_runtime_service_about.htm">About the
    Asset Runtime Service</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
