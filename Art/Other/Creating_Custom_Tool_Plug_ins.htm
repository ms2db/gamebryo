<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Creating Custom Tool Plug-ins</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>


<h1>Creating Custom Tool Plug-ins</h1>

<p>Constructing a script out of tool plug-ins gives you 
 more control on how content is processed before being used in a game or 
 application. The tool plug-in framework is even more powerful when you 
 create custom tool plug-ins.</p>

<p>Because the tool plug-in framework dynamically loads 
 all tool plug-ins from dll files in the tool plug-ins' directory, new 
 tool plug-ins can easily be added by just dropping a new plug-in dll into 
 that location. Once a new tool plug-in has been created, adding it to 
 a script to have it automatically executed on each export is trivial.</p>

<p>In the most common case, tool plug-ins are used to manipulate 
 the scenegraph, report some information from it, or save it out to a file. 
 However, tool plug-ins can really do anything that you want to be an automatic 
 part of the art asset pipeline.</p>

<p>When a tool plug-in is used in a script on export, it 
 is passed the scene graph that was exported. It has the ability to make 
 any changes to the scene. This enables a custom tool plug-in to do things 
 like add entirely new objects to the scene, or extract certain objects 
 from the scene into separate files.</p>

<h4>How to get started</h4>

<p>Gamebryo ships with sample code for 4 very basic tool 
 plug-ins; one for each type (import, process, viewer, and export). The 
 code for these samples can be used as a starting point for creating your 
 own custom tool plug-ins. You can find these plugins in the following location:</p>

<p><span class="NDLSystemFont"><em>%EMERGENT_PATH%</em>\Samples\SampleLibs\SamplePluginsDLL.</span></p>

<p>Note that a single DLL can contain any number of plug-ins 
and that the plug-ins are loaded when the <span class="NDLSystemFont">GetPlugins</span> function is called 
 on DLL load.</p>

<p>Once you know what type of plug-in you want to make, 
 all you have to do is create a new class that is derived from the abstract 
 class matching your type of plugin and implement the required functions. 
 This should be straightforward given the example code.</p>

<p class="NDLHeadingProcedure">Related topics</p>
<ul>
	
	<li><a href="../../Reference/NiPluginToolkit/Introduction_to_the_NiPluginToolkit_Library.htm">Introduction 
 to the NiPluginToolkit Library</a></li>
	
	<li><a href="../../Reference/NiPluginToolkit/Creating_Custom_Tool_Plugins.htm">Introduction 
 to Creating Custom Tool Plug-ins</a></li>
	
	<li><a href="../../Reference/NiPluginToolkit/Important_Project_Settings.htm">Important 
 Project Settings</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->
</body>

</html>
