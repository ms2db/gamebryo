<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Introduction to Mesh Profiles</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Introduction to The Mesh Profile System</h1>

<p>At the highest level, a mesh profile is nothing more than a
template that defines how an exported mesh is to be formed and
manipulated during the <a href=
"Introduction_to_the_Gamebryo_Tool_Plug_in_Framework.htm">tool
plug-in pipeline</a>. Plug-ins may have expectations concerning
how an exported mesh is set up. For example, a plug-in may expect
a mesh to have a data stream that matches a specific semantic
name and / or have a specific format. This expectation might be
satisfied by renaming and reformatting some existing data stream
prior to running the plug-ins. In contrast, by the end of the
plug-in pipeline, it is often desired to <em>finalize</em> the
mesh data streams in a manner that is optimal for a specific set
of requirements. These requirements might be dictated by shaders,
or by hardware, application specific demands, or by whether or
not the mesh is skinned, has a morph modifier, or perhaps some
custom mesh modifier. Mesh profiles can help solve these issues.
In summary, while the normal plug-ins found in the pipeline may
be used to tailor and optimize a mesh in very specific ways, a
mesh profile can be used to optimize a mesh such that it
satisfies the demands from mesh modifiers, shaders, targeted
hardware, and application requirements.</p>

<h2>Mesh Profiles and the Tool Plug-in
Framework</h2>

<p>In order to properly use mesh profiles within the Tool Plug-in
Framework, the <span class="NDLSystemFont"><a href=
"../../Reference/Tool_Plug_ins/Mesh_Finalize.htm">MeshFinalize</a></span>
plug-in is required. Moreover, the <span class=
"NDLSystemFont">MeshFinalize</span> plug-in is required to be the
last plug-in in the process script. Having the plug-in ordered
correctly in the script will ensure that the mesh profiles
operate as designed. The <span class=
"NDLSystemFont">MeshFinalize</span> plug-in will manipulate a
mesh as defined by the profile that has been selected for it.
Programmatically, this amounts to attaching some extra data to
the mesh that contains the name of a profile. XML base
representations of profiles can be located in the <span class=
"NDLSystemFont"><em>%EMERGENT_PATH%</em>\Media\ToolPluginsData\MeshProfiles</span>
directory and are in a format that can be parsed by the
<span class="NDLSystemFont"><a href=
"../../Reference/NiMeshProfileXMLParser/Introduction_to_NiMeshProfileXMLParser.htm">
NiMeshProfileXMLParser</a></span> library. The <span class=
"NDLSystemFont">MeshFinalize</span> plug-in simply looks up the
in-memory profile using the name and specified target
renderer.</p>

<p>From an artist and exporter point of view, assigning a profile
amounts to selecting the profile name from the provided
interface. See the following sections for this exporter specific
information:</p>

<ul>
    <li>Using Mesh Profiles in 3ds Max</li>

    <li><a href=
    "../Maya/Add_Mesh_Packing_Profile.htm">Assigning a
    Per-Object Mesh Profile in Maya</a></li>

    <li><a href=
    "../Maya/Export_Mesh_Packing_Profile_Options.htm">Assigning
    a Per-Scene Mesh Profile in Maya</a></li>
</ul>

<h2>Choosing an Appropriate Profile for a
Mesh</h2>

<p>Gamebryo provides a default profile that is designed with
enough flexibility to satisfy many requirements for a typical
export. Some studios may find that they need to tailor a profile
to solve specific requirements. In these situations, the
technical director or programmer lead should offer instruction on
when to use these profiles.</p>

<p>In some situations, the <span class=
"NDLSystemFont">MeshFinalize</span> plug-in may generate errors
upon exporting with a specific profile. These errors and warnings
could result from a number of various reasons. For example, the
most common case will occur with custom profiles. Custom profiles
may be designed to handle a specific scenario - a mesh with a
specific shader or set of modifiers, a specific format
conversion, etc. If the custom profile were misapplied, the
system may not be able to accommodate all of the profiles
requirements for the given mesh. In other cases, the profile
author may have provided an erroneous profile that needs to be
"debugged". Still, in other situations, a custom or misplaced
plug-in may have been introduced into the plug-in pipeline. Such
a plug-in could in theory modify the mesh such that the profile
can no longer be applied appropriately. To a large extent, these
issues will be detected early on when introduced into the plug-in
pipeline. For all other situations, these plug-ins will report a
fairly verbose set of warnings and errors that will offer insight
into the nature of the problem.</p>

<p>In summary, coordinate with the technical director or
programmer lead when deciding on what set of profiles to use and
when to use them. In general, the default profile will be
sufficient. Gamebryo ships with a handful of other mesh profiles
that are tailored to specific situations or demos. For
completeness they are described below:</p>

<ul>
    <li><span class=
    "NDLSystemFont">BadSushi_MeshProfile_Fish</span>&mdash;The mesh
    profile that was used for the fish in the <span class=
    "NDLSystemFont">BadSushi</span> demo</li>

    <li><span class="NDLSystemFont">Default</span>&mdash;The default
    Gamebryo profile that provides the most flexibility and the
    greatest support for mesh modifiers.</li>

    <li><span class="NDLSystemFont">DefaultCompressed</span>&mdash;The default compressed Gamebryo mesh profile. This profile
    attempts to use 16 bit float representations for most
    elements.</li>

    <li><span class=
    "NDLSystemFont">DX9FixedFunctionPipeline</span>&mdash;A profile
    designed to be used for exports targeting the DX9 Fixed
    Function Pipeline.</li>

    <li><span class="NDLSystemFont">LenguinsMeshDicer</span>&mdash;This profile has been designed for use with the Lenguins Mesh
    Dicing Tool. The profile separates the position and normal
    elements into separate <span class=
    "NDLSystemFont">CPU_READ</span> streams. It als enables
    <span class="NDLSystemFont">CPU_READ</span> on indexes.</li>

    <li><span class="NDLSystemFont">LenguinsPickMesh</span>&mdash;This profile has been designed for use with Lenguins picking
    code. The profile separates position, normal and color into
    individual streams.</li>

    <li><span class="NDLSystemFont">NBTUVCompress</span>&mdash;This
    profile compresses Normal, Binormal, Tangent, and UV data.
    The UV data will be clamped ta range between 0 and 1.
    Morphing is not supported by this profile.</li>

    <li><span class="NDLSystemFont">PosNormPicking</span>&mdash;Separates position and normal elements to separate
    <span class="NDLSystemFont">CPU_READ</span> streams for use
    with picking. This profile does not support morphing.</li>

    <li><span class="NDLSystemFont">ShadowMappingProfile</span>&mdash;Separates position and
    texcoord elements to a separate stream to improve vertex cache performance when creating shadow
    maps. Also compresses most data streams.</li>

    <li><span class="NDLSystemFont">VCBlenderProfile</span>&mdash;This profile is designed to exactly match the expected input
    of the <span class=
    "NDLSystemFont">VCAlphaTextureBlender</span> shader. This
    profile does not work with skinning or morphing.</li>
</ul>

<h2>Authoring XML Mesh Profiles</h2>

<p>Authoring an XML representation of a Mesh Profile requires a
broad and deep understanding of many different systems. For
example, an understanding of mesh modifier requirements, hardware
needs, shader requirements, application subsystem needs, etc. is
required to write a flexible and suitable profile. The XML
representation that is currently used by Gamebryo's tools and
exporters are based on the <span class=
"NDLSystemFont">NiMeshProfileXMLParser</span> library. Technical
directors and programmers intending to author profiles should
read the <span class=
"NDLSystemFont">NiMeshProfileXMLParser</span> documentation
before attempting to <a href=
"../../Reference/NiMeshProfileXMLParser/Introduction_to_Authoring_XML_Mesh_Profiles.htm">
author</a> their own XML based profiles.</p>
<!--kadov_tag{{<placeholder id="footer">}}-->


</body>

</html>
