<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Introduction to General Tool Pipeline Topics</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Introduction to General Tool Pipeline Topics</h1>

<p>Topics in this section relate to the general Gamebryo tool
pipeline workflow. These topics are not specific to just 3ds Max,
Maya, or XSI Plug-ins. It covers common creation techniques and
links to many general areas of information on which one can dig
in deeper.</p>

<h2>Creating art in your Digital Content Creation Tool (3ds Max,
Maya or XSI)</h2>

<p>Gamebryo is a very flexible and extendable pipeline. In
general, an artist will create all art (except terrain) in his
digital content creation (DCC) tool of choice. Gamebryo provides
plugins for 3ds Max, Maya and XSI that are installed during
Gamebryo installation. The only art currently created outside of
these tools is Terrain.</p>

<p>Gamebryo is not a antiquated brush editor. All art (data) gets
created in the DCC tools to give artists the flexibility and
power they desire. Even particle systems and effects are created
in the DCC art tools.</a></p>

<h3>The DCC work flow and export pipeline is depicted here</h3>

<div class="FigureContainer">
    <img src="images/GeometryMaterialsAnimationPipeline.png"
    width="615" height="336" alt=
    "GeometryMaterialsAnimationPipeline (32K)"> 
    <!-- <p class="FigureCaption"></p> -->
</div>

<h2>Knowing the limits</h2>

<p>Artists and game teams have full flexibility to choose unit
types, up axis, what type of shaders to use, etc. There are few
limitations with the Gamebryo engine. So, for example, if an
artist wanted to create a character with more then 256 bones
influencing its skin, Gamebryo bends over backwards to support
that.</p>

<p>But with much flexibility comes the ability to make more
mistakes, so wisdom is needed on part of the artist. In other
words, even though Gamebryo supports having more then 65,000
vertices per mesh, it doesn't mean thats a good thing to do.
<a href="../Max/Introduction_!Geometry_and_Performance.htm">Some
topics on best practices for creating art for real time engines
can be found here.</a>  <a href=
"../Maya/Introduction_!Geometry_and_Performance.htm">Another
section, devoted more to Maya users can be found here.</a></p>

<h2>Previewing and iteration time in your DCC tool</h2>

<p>In general, an artist will work inside of Max, Maya or XSI and
will preview work directly from the DCC tool by using one of our
Quick preview buttons that launch Gamebryo's Asset Viewer,
Animation tool or platform specific viewers.</p>

<p>This process of adjusting values in the DCC tool and viewing
is referred to as iteration. Most iteration time happens during
the later periods of creation while adjusting materials,
particles and lighting. Here subtle differences in the way the
scene graph is displayed in the DCC tool vs Gamebryo require this
previewing and iteration time.</p>

<h2>Rapid Particle Iteration</h2>

<p>If creating particles in Maya, Gamebryo has a fast path to see
changes called Rapid Particle Iteration. This greatly reduces the
amount of time needed to adjust particle systems by removing the
need to export more then once and then only sending over delta
changes to the viewer once it is open. More on RPI can be found
here. <a href="../Maya/rpi_intro.htm">More about Gamebryo's Rapid
Particle Iteration can be found here.</a></p>

<h2>The main types of data created in the DCC tools</h2>

<ul>
    <li>
        <b>Geometry data</b>

        <p class="indent1">The vertex, face, &amp; normal data
        that defines any props, characters, and effects. Also
        includes things like vertex colors, UV channels, etc.
        During Export, Gamebryo will convert the geometry data to
        the specified platform (PS3, Win32, etc.) and can also
        rearrange the way the data is stored by using mesh
        profiles. Mesh profiles allow a artist or programmer to
        define specific way to store a mesh. So, for example, if
        you only wanted objects to cast shadows but not render,
        you could pass along only the position data and save
        memory and bandwidth by not transferring other data like
        normal and UV channels. A Mesh Profile can be applied to
        any mesh or to your entire scene that is exported.
        <a href="Introduction_to_Mesh_Profiles.htm">More on Mesh
        Profiles can be found here</a>.</p>
    </li>

    <li>
        <b>Shader or Material data</b>

        <p class="indent1">Gamebryo uses standard material
        interfaces for each DCC tool to create the shaders and
        materials used when exported. The 'Gamebryo Shader' and
        the 'NiMultiShader' can be found in Max and Maya under
        the standard interfaces provided by those tools. The
        material data is embedded in the .nif file on each piece
        of Geometry data. As well, textures attached to the
        shader can be inside the .nif file or kept externally
        according to the settings on the export dialog. <a href=
        "../Max/Materials_Introduction.htm">More on the default
        Gamebryo Material can be found here for max</a> ,
        <a href="../Maya/Introduction_to_the_NiMultiShader.htm">here
        for Maya</a> and <a href=
        "../XSI/Specifying_Materials.htm">here for XSI.</a></p>
    </li>

    <li>
        <b>Animation data</b>

        <p class="indent1">Animation data would include character
        animations and any other changes recorded along the DCC
        time line tool. This data can be stored in the same .nif
        file or saved separately to key fame (.kf) files for
        characters or props that need to access more then 1
        animation sequence. <a href=
        "../Max/Animation_Manager_Reference_and_Description.htm">More
        can be found on animation and Animation Manager here for
        Max</a>, <a href="../Maya/Animation_Intro.htm">Maya</a>
        and <a href="../XSI/Animation.htm">XSI</a>.</p>

        <p class="indent1">Just about any attribute that is
        animated in the DCC tools is supported by Gamebryo, not
        just position and rotation. <a href=
        "../Max/Supported_Max_Features.htm">A full list of
        supported features from Max can be found here.</a> As
        well a <a href="../Maya/Supported_Maya_Features.htm">full
        list of supported features from Maya can be found
        here.</a></p>
    </li>

    <li>
        <b>Extra data</b>

        <p class="indent1">Any unique attributes specifically
        added by the artist that define strings, integers, color
        data, etc. Basically, any additional properties the
        artist wants exported with an asset that might define
        game play or graphic hooks needed by the game
        application. Many Gamebryo scripts use extra data to
        define things like Billboards, Level of detail, etc. And
        game teams can define their own work flows using extra
        data as well. <a href=
        "../Maya/Extra_Attributes.htm">Setting up extra data for
        Maya can be found here.</a> <a href=
        "../Max/Adding_Custom_Content_to_3ds_Max.htm">Setting up
        extra data for Max can be found here</a>. <a href=
        "../XSI/Custom_Parameters_in_XSI.htm">Setting up extra
        data for XSI can be found here.</a></p>
    </li>
</ul>

<h2>The Export</h2>

<p>During export, and when previewing, Gamebryo takes the scene
graph it gets from the DCC tools and converts that into a game
ready scene graph by running a series of plugins on the data.
These plugins can do anything from convert geometry to platform
specific versions to optimizing out unneeded UV channels and
extra nodes to adding fur.</p>

<p>The artist can set up how the data is modified by changing the
export script on the export dialog of the given DCC tool.
Gamebryo provides over 30 default plugins that can modify the
data during export and programmers can write additional plugins
for custom functionality when needed. <a href=
"Introduction_to_the_Gamebryo_Tool_Plug_in_Framework.htm">More on
the Export process can be found here.</a></p>

<h2>Putting it all together with LightSpeed</h2>

<p>Once the art files have been exported into Gamebryo's specific
formats (.nif, .kf and .km) it can be either directly loaded by a
game application or further manipulated in Gamebryo's level and
game design tools that launch from inside Toolbench. <a href=
"../../Tools/Toolbench/tb_intro.htm">Toolbench</a> is the
foundation level application that currently hosts three specific
and powerful tools; <a href=
"../../Tools/WorldBuilder/wb_intro.htm">World Builder</a>,
<a href="../../Tools/EntityModelingTool/emt_intro.htm">Entity
Modeling Tool (EMT)</a> and the <a href=
"../../Tools/ScriptDebugger/efr_script_debugger_intro.htm">Script
Debugger</a>.</p>

<h3>The LightSpeed pipeline is depicted here:</h3>

<div class="FigureContainer">
    <img src="images/GameDesignPipeline.png" width="480" height=
    "453" alt="GameDesignPipeline (28K)"> 
    <!-- <p class="FigureCaption"></p> -->
</div>

<p>This flexibility lets the game team decide if they want to
create entire levels directly in the DCC tool of their choice
that get loaded directly by the game application, or if they want
to export their game as a series of props and characters that are
then arranged in World Builder and have game play data added via
Entity Modeling tool. The latter is the suggested work flow.</p>

<p>In other words, the suggested work flow is to create unique
entities in Max, Maya and XSI that are exported as unique meshes
(.nif files) or as actors (.nif, .kf &amp; .kfm files) and import
them into EMT (Entity Modeling tool) using the Import
Factory feature.</p>

<h3>Example of the Preset Factory dialog box in EMT</h3>

<div class="FigureContainer">
    <img src="images/PresetFactory.jpg" width="800" height="417"
    alt="PresetFactory (169K)"> 
    <!-- <p class="FigureCaption"></p> -->
</div>

<p>Then those Entity Models with their attached physical and game
play attributes can be selected from World Builder's palette and
placed, scaled, or even transmogrified in World Builder. Further
properties, behaviors and scripts can be created and attached to
the Entity Models using Lua with the Script Debugger or the EMT
tool.</p>

<h3>Example of the dropping a Entity Model into a level (.block
file) with World Builder from the Palette View</h3>

<div class="FigureContainer">
    <img src="images/WorldBuilder.jpg" width="1024" height="633"
    alt="WorldBuilder (712K)"> 
    <!-- <p class="FigureCaption"></p> -->
</div>

<p>Once the entity project (.emtproj) file and level (.block)
have been created, the level and entities can be exported into a
game optimized format and loaded by the game application.
<a href="../../Tools/Toolbench/tb_ui_file_types.htm">More on
Toolbench file types and their uses can be found here.</a></p>

<p>Once the application is up and running, changes to entity
models, scripts or even the source art modified in the DCC tools
can be seen instantly when they are updated and re saved thanks
to Gamebryo's asset management system. <a href=
"../../Tools/Toolbench/tb_fundmtls_asset_management.htm">More on
the Asset Manager can be found here</a>.</p>

<h2>An important note on the term 'Model'</h2>

<p>Please note that Gamebryo uses the term 'Model' and 'Entity
Model' in to define a template of constructs that may or may not
include a physical model. The term 'Model' does not refer to only
3d vertex data. It refers to any properties or game play
constructs created in EMT that define the overall entity and its
behavior. <a href=
"../../Tools/EntityModelingTool/emt_fundmtls_entity_models.htm">More
about Entity Models can be found here.</a></p>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
    <li><a href=
    "Introduction_to_the_Gamebryo_Tool_Plug_in_Framework.htm">Introduction
    to the Gamebryo Tool Plug-in Framework</a></li>

    <li><a href="Introduction_to_Mesh_Profiles.htm">Introduction
    to The Mesh Profile System</a></li>

    <li><a href=
    "../Max/Animation_Manager_Reference_and_Description.htm">Introduction
    to Animation Manager for Max</a>, <a href=
    "../Maya/Animation_Intro.htm">Maya</a> or <a href=
    "../XSI/Animation.htm">XSI</a></li>

    <li><a href=
    "../../Tools/Animation_Tool/Introduction_to_Animation_Tool.htm">
    Introduction to Animation Tool</a></li>

    <li><a href=
    "../../Tools/ScriptDebugger/efr_script_debugger_intro.htm">Introduction
    to Script Debugger</a></li>

    <li><a href="../../Tools/Toolbench/tb_intro.htm">Introduction
    to Toolbench</a></li>

    <li><a href=
    "../../Tools/EntityModelingTool/emt_intro.htm">Introduction
    to Entity Modeling Tool</a></li>

    <li><a href=
    "../../Tools/WorldBuilder/wb_intro.htm">Introduction to World
    Builder</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>
</html>
