<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>The Triangle/Mesh Ratio</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>


<h1>The Triangle/Mesh Ratio</h1>

<p>The triangle to mesh ratio is the most important geometric 
 metric for game performance. The issue with triangles and meshes is that 
 when rendering an mesh, Gamebryo must do a fixed amount of work on the 
 CPU (property-state setup, texture swapping, etc.) each time it passes 
 down the set of triangles, no matter how big. You should, thus, try to 
 pack as many triangles as possible into each mesh. </p>

<p>In general, a game should never have fewer than 20 triangles 
 per mesh. You don't have to increase the number of triangles just to improve 
 the triangle/mesh ratio, but if doing so will improve vertex lighting 
 or some geometric detail, it won't hurt the performance. Another way to 
 tackle improving the ratio is to collapse similar meshes with the same 
 materials that are close together in a scene. This collapsed mesh will 
 be converted to a single mesh instead of several separate meshes, thus 
 improving the overall ratio.</p>

<p>The importance of a large triangle/mesh ratio (i.e. 
 a lot of triangles per mesh) is increased on hardware transform and lighting 
 cards (high-end graphics cards). Hardware transform and lighting cards 
 perform vertex transformation, lighting, and rasterization on the graphics 
 card. Earlier cards could only perform the rasterization while the CPU 
 was forced to do the vertex transformation and lighting. </p>

<p>Hardware transform and lighting cards both free the 
 CPU of this task and perform it faster than the CPU ever could. This division 
 of labor decreases the time required to render an individual polygon but 
 leaves the fixed amount of work that Gamebryo must do for each mesh (discussed 
 earlier) unchanged. In a low triangle/mesh situation the CPU will become 
 the bottleneck (doing the rendering setup) and the full rendering capabilities 
 of the graphics card will not be used. In contrast, a high triangle/mesh 
 ratio will allow the graphics card to draw as many polygons as possible 
 and leave the CPU free to perform other operations.</p>

<h2>Performance Metrics</h2>

<p>Performance analysis done at nVidia and ATI revealed 
 that on a 1 GHz CPU, you can render 25,000 objects per second before you 
 spend all of your time on the CPU, a circumstance you wish to avoid at 
 almost all costs.</p>

<p>What do these statistics mean to an artist? For performance 
 of 60 fps on a 1 GHz CPU, try to <b>keep the number of visible objects 
 in any given scene below 417 objects</b>. In other words, <b>make every 
 object count!</b></p>

<p>As the CPU speed of the target machine increases, the 
 number of visible objects that may be rendered per frame will correspondingly 
 increase.</p>

<p>The following sections will discuss how art content 
 issues could increase or decrease the Triangle/Mesh ratio.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->
</body>

</html>
