<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Precache Custom Attributes</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type=
"text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Precache Custom Attributes</h1>

<div class="FigureContainer">
    <img src="images/PrecacheCustAttribs.jpg" width="170" height="264" alt=
    "Precache Custom Attributes (25K)">

    <p class="FigureCaption">Precache Custom Attributes</p>
</div>

<p>The precache attributes serve a similar purpose to the <a href=
"Mesh_Profile_Custom_Attribute.htm">Mesh Profile Custom Attribute</a>. The mesh
profile system provides all of the functionality of the precache attributes and
more. The precache attributes still exist in case a user wants precache control
without having to author a custom profile as well as for backwards
compatibility.</p>

<p>These custom attributes tell the Gamebryo renderers how to treat an object
once they have created the platform-specific versions of it. Creating the
platform-specific version is called "pre-caching" the object. In some cases it
may be useful for applications to keep information lying around after it has
been "pre-cached".</p>

<p>As an important example, triangle-triangle collision detection will not work
if the triangles are thrown away once the renderer has pre-cached its data.</p>

<p>Typically, artists will not need to add these attributes, since any
application that pre-caches geometry, can set the "Keep" flags to hold on to
data that is needed, as well. The UI exists so that advanced users can have
complete control over how specific art assets are used by the renderers.</p>

<p>These flags can be added through the user-interface via the <a href=
"Gamebryo_MaxScript_Toolbar_Introduction.htm">Gamebryo toolbar</a>. Click on
the "Add/Remove Precache flags" icon.</p>

<h3>Geometry Data Consistency</h3>

<p>This radio button allows you to set how the renderer treats the data at
runtime. "Default" sets the consistency to whatever Gamebryo best determines
the data to be. "Static" means that once the data is in the renderer it will
never change. This is a good setting for set pieces like buildings. "Mutable"
means that the object may change from time to time. This would be useful for an
application effect like changing a car's geometry to reflect hits it has taken
on the road while driving. "Volatile" means that the object changes every
frame. This setting is best set for when you are changing vertex colors on the
fly or manually animating the UV coordinates.</p>

<p>In general, the mesh profile system should be used instead of the precache
attributes. Sometimes utilizing the consistency setting on a mesh can have
undesired results. For example, marking a mesh as volatile results in all of
its streams being marked volatile which is rarely a desired result since it
uses additional resources and may result in rendering anomalies.</p>

<h3>Data To Preserve</h3>

<p>These check boxes allow the user to set which data is kept around after the
"pre-cache" has occurred.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
