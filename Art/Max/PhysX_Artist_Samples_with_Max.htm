<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>PhysX Artist Samples with Max</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Build" content="PhysX" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Body)==========================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>PhysX Artist Samples with Max</h1>

<p>Several example scenes are provided to demonstrate various
features and techniques for authoring Gamebryo-PhysX content in
3ds Max. They can be found in the <span class=
"NDLSystemFont"><em>%EMERGENT_PATH%</em>\Samples\Models\Max
Artist Examples\PhysX</span> directory of your Gamebryo install,
or in the <span class="NDLSystemFont">ArtFiles</span> directories
of the programming samples. The custom Gamebryo viewer for all of
these samples is set to the <a href=
"../../Tools/PhysX_NIF_Viewer/Introduction_to_the_PhysX_NIF_Viewer.htm">
PhysX Nif Viewer</a> which is the viewer that Gamebryo provides
for previewing PhysX content.</p>

<ul>
    <li><b>BlowTorchPhysX.max</b>&mdash;demonstrates the creation
    of a PhysX-based particle system. Note the two small spheres
    toward the middle of the scene. These are rigged as PhysX
    rigid bodies. Look in their User Props. You will see that
    each has a User Prop with key <span class=
    "NDLSystemFont">NiPhysXParticleActor</span> and a value that
    is one of the particle systems. That User Prop marks the
    actor as the particle for that system. This scene is exported
    with a modified version of the Default PhysX Export script:
    the "Convert to PhysX Rigid Particles" box was checked to
    enable the PhysX particle systems. This example was created with a previous
    PhysX Max plug-in but the techniques for setting up particle actors
    remain the same. See
    <a href="PhysX_Based_Particle_Systems_and_Max.htm">
    PhysX Based Particle Systems and Max</a>.</li>

    <li><b>Cloth.max</b>&mdash;demonstrates a basic cloth scene
    with a Gamebryo shader attached. This example uses the older
    PhysX Max plug-in because the newest plug-in doesnot support
    cloth outside of the APEX system, and Gamebryo does not yet
    support APEX. See <a href="PhysX_Cloth_with_Max.htm">PhysX Cloth with Max</a>.
    Note that, in the Gamebryo
    Shader properties for the object, the NBT method is set as
    "NDL". The cloth is also two-sided.</li>

    <li><b>Ragdoll_m2009.max</b>&mdash;demonstrates a
    rag-doll rigged using the tools provided in the PhysX Max plug-in.
    See <a href="Creating_Ragdolls_with_Max.htm">Creating Ragdolls with Max</a>.
    </li>

    <li>
    <b><em>%EMERGENT_PATH%</em>\Samples\GameDemos\DodgeBall\ArtFiles\Slim.max</b>&mdash;demonstrates
    a rag-doll rigged with proxies for the collision shapes and
    using PhysX D6Joint objects for fully configurable joints.
    This character is also fully rigged for use in Gamebryo's
    Animation System, including a "PhysX01" sequence designed for
    physical control. This character also has animation
    accumulation turned on in the Animation Manager. Hence, the
    character root (Bip01) is a dynamic rigid body. This character was
    rigged using the older PhysX Max plug-in.</li>

    <li>
    <b><em>%EMERGENT_PATH%</em>\Samples\GraphicsTechDemos\PhysXFluids\ArtFiles\HardwareFluids.max</b>&mdash;is
    an example of a fluid simulation scene. The particle system
    uses a PCloud type emitter and the geometry is all very
    simple, particularly the dynamic convex shape which must have
    less than 32 faces. Note that the emitter object is the child
    of a PhysX kinematic actor. This animates the emitter because
    it is attached to the actor in the exported PhysX scene. On
    export, the "Convert to PhysX Fluids" box is checked in the
    PhysX Extractor tool plug-in. See <a href="PhysX_Fluids_and_Max.htm">PhysX Fluids and Max</a>.
    This scene was created using the older PhysX Max plug-in.</li>

    <li>
    <b><em>%EMERGENT_PATH%</em>\Samples\GraphicsTechDemos\PhysXParticles\ArtFiles\BubbleTank.max</b>&mdash;is
    another example of PhysX-based particle systems. There are
    three export scripts associated with this scene, one for
    Gamebryo particles, one to get software PhysX particles, and
    one for hardware particles. Copy these scripts into the
    directory containing Gamebryo Max export scripts on your
    machine to use them for export. They differ from the Default
    PhysX Export in the skin width (reduced for the very small
    particle actors), the scale of the scene, and reduced gravity
    to fake buoyancy. The particles in this scene have gravity
    disabled when loaded at run-time. See
    <a href="PhysX_Based_Particle_Systems_and_Max.htm">
    PhysX Based Particle Systems and Max</a>.
    This scene was created using the older PhysX Max plug-in.</li>

    <li>
    <b><em>%EMERGENT_PATH%</em>\Samples\GraphicsTechDemos\PhysXTiming\ArtFiles\BoxPaddleBalls.max</b>&mdash;is
    a simple scene with rigid bodies, including a kinematic
    (animated) object. This scene exports with the Default PhysX
    Export script with only the "Skin Width" modified.
    This scene was created using the older PhysX Max plug-in.</li>

    <li>
    <b><em>%EMERGENT_PATH%</em>\Samples\GameDemos\LenguinsOnIce\Art
    Files\Fx\Iceblock01-square.max</b>&mdash;is the art file for
    the whole ice blocks in the <a href=
    "../../Learn/FullDemos/Lenguins_On_Ice_Overview.htm">Lenguins
    on Ice</a> demo. It is possibly the simplest rigid-body prop.
    A proxy box shape has been added to bound the complex ice
    block geometry. Note that the proxy is a "non-physical"
    object - all proxies must be tagged in this way. The export
    script for these sets the skin width to 1 (because the blocks
    are very large) and the base material index to 5. The blocks
    will appear in a scene with other PhysX props, so they need a
    non-default material base to ensure that materials do not get
    mixed up between props. This scene was created using the older PhysX Max plug-in.</li>

    <li>
    <b><em>%EMERGENT_PATH%</em>\Samples\GameDemos\LenguinsOnIce\Art
    Files\Fx\iceblock_pieces.max</b>&mdash;is the art file for
    the broken ice blocks in the <a href=
    "../../Learn/FullDemos/Lenguins_On_Ice_Overview.htm">Lenguins
    on Ice</a> demo. This scene makes extensive use of proxy
    geometry to simplify the collision shapes, but is otherwise a
    basic rigid body scene. We also made use of the <span class=
    "NDLSystemFont">NiPhysXActorGroup</span> User Prop to specify
    a collision group for the actor (see
    <a href="Gamebryo_Rigid_Body_Extras_with_Max.htm">Gamebryo Rigid Body Extras with Max</a>).
    This scene was created using the older PhysX Max plug-in.</li>
</ul>
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
