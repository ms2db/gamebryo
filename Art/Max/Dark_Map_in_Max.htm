<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Dark Map in Max</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>


<h1>Dark Map in Max</h1>

<p>The &quot;Dark&quot; map field is intended to hold a 
 static dark map for the material, typically, but not exclusively, a grayscale 
 map.</p>

<p>In Gamebryo, the base map's r,g,b values will be multiplied 
 by the dark map's values causing it to appear dark where the dark map 
 is dark and the regular base texture where the dark map is light. </p>

<p>This behavior also means that the dark map can only 
 darken the base map (hence the name). In other words, white pixels in 
 the dark map will pass the base map's color through untouched but any 
 non-white dark map pixel will darken the base map's pixel. </p>

<p>Dark maps are commonly arranged with a different set 
 of UVs than the base map so that a single surface has an un-tiled dark 
 map that stretches across its entire extent, and the base map is tiled. 
 This is a common solution for creating static lighting. </p>

<h2>&nbsp;Using the Max Render to Texture feature to create 
 Darkmaps</h2>

<p>Once an artist achieves good scene lighting in 3ds max 
 (whether via Radiosity, normal lighting with shadows, or even using the 
 Light Tracer), the next step is to get that information &quot;baked&quot; 
 into the objects so it can be used at runtime in Gamebryo. At this point, 
 3ds max's &quot;Render to Texture&quot; feature becomes useful. The following 
 steps will enable you use the Render-to-texture feature:</p>

<ol style="list-style: decimal;"
	type=1>
	
	<li>Create/Load your scene 
 and place lights. Use whatever method desired to achieve the desired lighting. 
 The approach may be as simple as using omni lights with shadows, or as 
 complex as a Radiosity solution.</li>
	
	<li>Open the 'Render 
 to texture' dialog in Max under the 'Rendering' menu. </li>
	
	<li>Set the 'File Output 
 Path' to a reasonable directory (likely the same directory as the model). 
 Turn 'Automatic Unwrap Mapping' on if you have not created a UV channel with
 unique texture mapping for each face.  If using Automatic Unwrap, Check that the 
 default map channel is one you have not already used. (It is set to Channel 
 3 by default)</li>
	
	<li>Under the 'Selected 
 Element Common Settings', add a 'LightingMap'; this step will render the 
 lighting and the shadows to a texture. Set the map size to whatever works 
 best for the dataset (256x256 is likely a valid initial value). If you 
 are not creating a lighting effect, add whatever type of map you need. 
 Change the &quot;Target Map Slot&quot; to point to the Dark Map of the 
 Gamebryo Shader if such a shader is applied to the selected object.</li>
	
	<li>Gamebryo will export 
 the resulting material. </li>
</ol>

<p>Use a viewer to look at the result, or export to a .NIF 
 file. Repeat these steps until you achieve your desired look. You can 
 also delete the shell material and manually load your lightmaps into the 
 Darkmap slot of the Gamebryo shader to keep things more organized and 
 simple.</p>

<p>NOTES: </p>

<ul>
	
	<li>If using a dark map for 
	static lighting, it would be more efficient to remove all of the lights from
	the scene when exporting, or set them to not include the geometry that has
	the darkmap. Then to ensure that the geometry shows up, either an emittance
	color, emittance vertex colors could be used, or an ambient light could be
	applied.</li>
	
	<li>If using a Baked Material, 
 the baked material seen in the viewport is the one that will be used. 
 The render/viewport toggle will not affect the output Gamebryo material. 
 </li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->
</body>

</html>
