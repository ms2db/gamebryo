<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Gamebryo Rigid-Body Extras with Max</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>

<!--(Begin Body)================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<h1>Gamebryo Rigid-Body Extras with Max</h1>

<p>Here we outline the additional features and issues related to creating PhysX rigid-bodies for
use in Gamebryo applications. Almost all of the rigid-body modeling functionality is provided by
the PhysX Max Plug-in, so you should read first about that plug-in before continuing.</p>

<h2>Additional User Props</h2>

<p>Gamebryo export understands four additional tags found in the User Props of rigid bodies
in Max:</p>

<ul>
    <li><span class="NDLSystemFont">NiPhysXActorIterations = &lt;integer&gt;</span> can be used on
    an object that will be a PhysX dynamic actor. It specifies the number of iterations that will
    be used when solving the dynamics for the actor. Higher values give more stable simulation but
    reduce performance. However, in objects with many joints, particularly rag-dolls, increasing
    this value is typically essential. The default is 4.</li>

    <li><span class="NDLSystemFont">NiPhysXActorGroup = &lt;integer&gt;</span> can be used on an
    object that will be a PhysX actor (dynamic, kinematic or static). It specifies the actor group
    which is used in basic collision filtering.</li>

    <li><span class="NDLSystemFont">NiPhysXShapeGroup = &lt;integer&gt;</span> can be used on an
    object that will be a PhysX shape (an actor or a proxy for an actor or part of a shape group).
    It specifies the shape group which is used in basic collision filtering.</li>

    <li><span class="NDLSystemFont">NiPhysXParticleActor = PSystemName</span> can be used on an
    object that will be a PhysX actor and tags that actor as the particle for a <a href=
    "PhysX_Based_Particle_Systems_and_Max.htm">PhysX-based particle system</a>.</li>
</ul>

<h2>Global Application Consistency</h2>

<p>Material property containers are also global objects. Every time a Max scene is exported, as
many new material containers are created as there are distinct material properties (elasticity,
friction) in the scene. These are given indexes (application global) starting at the value given in
the <a href="../../Reference/Tool_Plug_ins/PhysX_Extractor.htm">PhysX Extractor</a> tool plug-in
options. If multiple props are to be used in the same application at run-time, then it is essential
that the props use non-overlapping material index ranges. A conservative estimate is that there can
be no more materials in a prop than the number of Max objects that are known to the PhysX system.
So if one prop has 5 objects and another has 10, then using 0 and 6 as the export material start
indexes will ensure non-overlap. Overlapping ranges will result in a random choice of material for
some objects. Alternatively, you can determine precisely how many materials will be used if
all PhysX objects in Max use pre-defined materials from the PhysX Material Editor. Each
pre-defined material uses at most one runtime material slot.</p>

<p>Finally, either your 3ds Max System Units setting or the "Scale" parameter in the <a href=
"../../Reference/Tool_Plug_ins/PhysX_Extractor.htm">PhysX Extractor</a> tool plug-in option should
be globally consistent across all props that will be simulated in the same PhysX scene. For
simplicity, it is probably best to decide on a suitable scale factor for your game and use it for
all exported content.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
