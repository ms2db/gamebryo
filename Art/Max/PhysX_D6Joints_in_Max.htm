<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>PhysX D6Joints in Max</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Build" content="PhysX" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type=
"text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>PhysX D6Joints in Max</h1>

<p>The PhysX Max Plug-in adds a <span class="NDLSystemFont">D6Joint</span>
object to 3ds Max, used to create, edit and export a completely general joint
between two rigid bodies. This joint object is largely undocumented and the
parameters are non-obvious. We provide some assistance here.</p>

<h2>Creating a D6Joint Object</h2>

<p>On the <span class="NDLSystemFont">Create panel</span>, under <span class=
"NDLSystemFont">Helpers</span>, there is a roll-out for <span class=
"NDLSystemFont">PX Primitives</span>. The button to create a <span class=
"NDLSystemFont">D6Joint</span> object can be found there. Under some
circumstances the D6Joint may be found under <span class=
"NDLSystemFont">Geometry</span> rather than <span class=
"NDLSystemFont">Helpers</span>.</p>

<p>The location of the joint is the center of rotation if the joint does not
allow translation between the jointed bodies (like a spherical joint) or is the
point from which translation limits are measured if the joint allows
translation. The orientation of the joint is important. PhysX terms the X-axis
of the joint is the <span class="NDLSystemFont">twist</span> axis, the Y-axis
is the <span class="NDLSystemFont">swing1</span> axis, and the Z-axis is the
<span class="NDLSystemFont">swing2</span> axis. The axes of the joint also
determine along which directions the rigid-bodies are allowed to translate. You
can position and rotate the joint using the standard max translation and
rotation gizmos.</p>

<h2>Modifying a D6Joint Object</h2>

<p>A D6Joint may be selected and modified using the <span class=
"NDLSystemFont">Modify Panel</span>.</p>

<p>The first roll-out deals with general joint properties. These are all
explained in the PhysX plug-in and SDK documentation. However, there are some
very important differences between what you will see if you simulate the joint
using PhysX in Max, versus if you export to Gamebryo and simulate in the
Gamebryo run-time:</p>

<ul>
    <li>At least one body must be selected for the joint to export successfully
    with the Gamebryo plug-in. It does not matter which one. The bodies
    selected must be dynamic or kinematic actors. They cannot be proxy shapes.
    If both bodies are specified, <span class="NDLSystemFont">Body0</span> is
    the "parent" body and <span class="NDLSystemFont">Body1</span> is the
    "child" body, although these distinctions are somewhat arbitrary. If only
    one body is specified, the joint is anchored to the world coordinate system
    - use this rather than connecting to a static actor. The in-Max PhysX
    preview will not allow a joint unless both bodies are specified.</li>

    <li>The <span class="NDLSystemFont">Projection Mode</span> parameters are
    ignored by the Gamebryo exporter because we cannot extract them from Max.
    The PhysX support team typically states that the default projection mode is
    the only one that should be used.</li>
</ul>

<p>The second roll-out is the Swing and Twist constraint parameters. See the
PhysX SDK documentation for a description of the meaning of each of these
parameters. As the parameters are adjusted, the Max node will display geometry
to visualize the constraints. We have found this visualization to be
occasionally misleading - it does not provide a substitute for exporting and
viewing the joint's behavior. We have also found the in-Max PhysX preview to
give behavior that differs from Gamebryo export, and the behavior appears
somewhat inconsistent as a joint is edited. Again, export the joint and preview
in a Gamebryo application before finalizing your design. Remember:</p>

<ul>
    <li><span class="NDLSystemFont">Swing1</span> is rotation about the joint's
    Y axis.</li>

    <li><span class="NDLSystemFont">Swing2</span> is rotation about the joint's
    Z axis.</li>

    <li><span class="NDLSystemFont">Twist</span> is rotation about the joint's
    X axis.</li>
</ul>

<p>The next roll-out is the Translation constraint parameters. You can only
edit the <span class="NDLSystemFont">Radius</span> value if one of the
directions is not locked. There is a bug in that sometimes the radius is
unavailable when it should be editable. Simply change one of the translation
constraint radio buttons, and the display will become available (and then
change the radio buttons back to their original configuration). The directions
referred to here are the local axis directions of the joint object.</p>

<p>The final roll-out is the display radius, which determines the size in Max
of the joint visualization geometry (this geometry will not appear in your
exported Gamebryo scene).</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
