<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>PhysX Artist Samples with Maya</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Build" content="PhysX" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Body)==========================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>


<h1>PhysX Artist Samples with Maya</h1>


<p>Several example scenes are provided to demonstrate various 
 features and techniques for authoring Gamebryo-PhysX content in Maya. 
 They can be found in the <span class="NDLSystemFont"><em>%EMERGENT_PATH%</em>\Samples\Models\Maya 
 Artist Examples\Artist Doc\PhysX</span> directory of your Gamebryo install. 
 Each samples has a corresponding NIF file showing the results of export 
 for Gamebryo. These can be viewed using the PhysX Nif Viewer to see their PhysX content in action. </p>

<ul>	
	<li><b>PhysXParticles.mb</b> 
 demonstrates the creation of a PhysX-based particle system for Gamebryo. 
 We started with an existing example of particle collision, removed the 
 Maya collider and added a PhysX capsule shape around the character. In 
 the scene is a rigid body named &quot;Particle Actor&quot;, which is the 
 rigid body which will be used for the particle. If you look at the Extra 
 Attributes of that node, you will see <span class="NDLSystemFont">NiData_NiPhysXParticleActor</span> 
 with the value &quot;particleShape1&quot; which is the name of the particle 
 system that Gamebryo exports. A particle actor is necessary for all PhysX 
 particle systems. It can appear anywhere in the hypergraph. We also added 
 a ground plane object for the particle to collide with, and reduced the 
 emission rate. If the emission rate is too high, the particles collide 
 with each other immediately upon emission and PhysX computations slow 
 down dramatically.
	
	<p class="indent1">On export, we edited the Default PhysX Export script 
 and selected the &quot;Convert to PhysX Rigid Particles&quot; option. 
 In the PhysX Nif Viewer, you can turn on debug geometry to see all the 
 particles, although this slows rendering dramatically. </p>
	</li>
	
	<li><b>Rain.mb</b> demonstrates 
 the creation of a PhysX fluid system for Gamebryo. We started with an 
 existing example of particle emission from a volume. We re-oriented the 
 volume and re-shaped it, and set the emission direction to be the positive 
 Z direction in local coordinates (which points downward). We also added 
 a ground plane just below the textured polygon (it is hidden so that Gamebryo 
 does not render it, but it is still present as a PhysX actor upon export). 
	
 <p class="indent1">On export, we edited the Default PhysX Export script 
 and selected the &quot;Convert to PhysX Fluids&quot; option. This scene 
 can only be previewed on a machine with PhysX hardware, although it can 
 be created on any computer.</p>
	</li>
	
</ul>

<p class="NDLHeadingRelatedTopic">Related topics</p>
    <ul>
        <li><a href="../../Tools/PhysX_NIF_Viewer/Introduction_to_the_PhysX_NIF_Viewer.htm">Introduction to the PhysX Nif Viewer</a>
        </li>
			<li><a href="../../Reference/Tool_Plug_ins/PhysX_Ragdoll.htm">PhysX Ragdoll</a>
			</li>
    </ul> 

<!--kadov_tag{{<placeholder id="footer">}}-->
</body>

</html>
