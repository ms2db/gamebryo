<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiParticleSystem Node Reference</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>

<!--(Begin Body)================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<h1>NiParticleSystem Node Reference</h1>

<p>The NiParticleSystem node has a 1:1 relationship to particle system objects exported to the
Gamebryo scene graph. Other nodes, such as <a href="rpi_niemitter_node_reference.htm">NiEmitter</a>
and <a href="rpi_niforce_node_reference.htm">NiForce</a>, <span class="NDLEmphasis">must</span> be
associated with a NiParticleSystem in order to be exported and represented in the Gamebryo
scene.</p>

<h2>Connections</h2>

<div class="FigureContainer">
    <img alt="maya particle connections" src="./images/rpi_maya_particle_connections.png" height=
    "225" width="428">

    <p class="FigureCaption">NiParticleSystem Connections user interface</p>
</div>

<table>
    <thead>
        <tr>
            <th>Attribute</th>

            <th>Keyable</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><span class="NDLGUILabel">Living Spawn Rate</span></td>

            <td>Yes</td>

            <td>The spawn rate (particles/second) at which particles will spawn from the particles
            defined by this node. For example, if the current node describes a meteorite particle,
            this setting would control the spawn rate of associated debris particles. This setting
            only has an effect if a living spawner is attached to the particle system.</td>
        </tr>

        <tr>
            <td><span class="NDLGUILabel">Spawn on Death</span></td>

            <td>No</td>

            <td>If this setting is true and a death spawner is associated with the particle system,
            then particles described by the death spawner will spawn when this particle dies. For
            example, if the current node describes a fire particle, this setting would control the
            spawn rate of associated smoke particles. This setting only has an effect if a death
            spawner is attached to the particle system.</td>
        </tr>

        <tr>
            <td><span class="NDLGUILabel">Emitter</span></td>

            <td>No</td>

            <td>A convenient way to navigate and view the list of emitters that are currently
            associated with the particle system. This can also be viewed in the Maya
            Hypergraph.</td>
        </tr>
    </tbody>
</table><a name="BaseParameters" id="BaseParameters"></a>

<h2>Base Parameters</h2>

<div class="FigureContainer">
    <img alt="maya particle base parameters" src="./images/rpi_maya_particle_base_parameters.png"
    height="160" width="428">

    <p class="FigureCaption">NiParticleSystem Base Parameters user interface</p>
</div>

<table>
    <thead>
        <tr>
            <th>Attribute</th>

            <th>Keyable</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><span class="NDLGUILabel">Max Number of Particles</span></td>

            <td>No</td>

            <td>The maximum number of particles represented by this node that can be alive at the
            same time. Once this limit is reached, no new particles will be created until some
            existing particles die (assuming particle life span isn't set to Live Forever).</td>
        </tr>

        <tr>
            <td><span class="NDLGUILabel">Particles In World Space</span></td>

            <td>No</td>

            <td>Selecting this option places all the particles in world space. The particles will
            not be transformed according to their location in the scene graph.</td>
        </tr>

        <tr>
            <td><span class="NDLGUILabel">Center U<br>
            <br>
            Center V</span></td>

            <td>No</td>

            <td>
                The texture pivot point offset in the U and V directions. For example:

                <ul>
                    <li>(0,0) = Default pivot in the center of th texture</li>

                    <li>(-1.0, -1.0) = Top left corner of the texture</li>

                    <li>(1.0, 1.0) = Bottom right corner of the texture</li>

                    <li>(3.0, 0.0) = Pivot is to the right center of the texture (outside the
                    texture). The pivot would be the width of the particle away from the edge of
                    the particle.</li>
                </ul>This feature can be useful when creating explosion an effect where the pivot
                point is set to bottom middle (0.0, 1.0) of the texture.
            </td>
        </tr>

        <tr>
            <td><span class="NDLGUILabel">Z Buffer Write<br>
            <br>
            Z Buffer Test<br>
            <br>
            Z Buffer Test Function</span></td>

            <td>No</td>

            <td>
                Controls how particle pixels are written to Z buffer. See <span class=
                "NDLSystemFont">NiZBufferProperty</span> description in the Gamebryo Documentation
                for a complete explanation of Z buffer write, test, and test function
                attributes.<br>

                <div class="NDLTDNote">
                    <span class="NDLTableNote">Note:</span> Z Buffer settings require the Refresh
                    button to be pressed to be updated in the Remote Viewer.
                </div>
            </td>
        </tr>
    </tbody>
</table>

<h2>Bounding Volume Parameters</h2>

<table class="NDLNoteContainer" width="100%">
    <tbody>
        <tr align="left">
            <td class="NDLNoteContainerTD">
                <p class="NDLHeadingNoteContainer">Note</p>

                <div class="NDLNote">
                    NiMeshParticleSystems calculate there bounds directly from the mesh particle
                    objects. The parent contains the inclusive bound which is used for the particle
                    system bound. This does not incur an additional cost.
                </div>
            </td>
        </tr>
    </tbody>
</table><img alt="maya particle bounding volume parameters" src=
"./images/rpi_maya_particle_bounding_volume_parameters.png" height="44" width="428">

<div class="FigureContainer">
    <p class="FigureCaption">NiParticleSystem Bounding Volume Parameters user interface</p>
</div>

<table>
    <thead>
        <tr>
            <th>Attribute</th>

            <th>Keyable</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><span class="NDLGUILabel">Bounds Type</span></td>

            <td>No</td>

            <td>
                This option specifies whether the bounding volume of the particle system is
                dynamically updated, as the particle system is simulating, or static
                (pre-computed).<br>
                <br>
                As a performance optimization, it is possible to delay how often the bounds of a
                particle system are updated for the dynamic options (see the dynamic options below
                for additional details).<br>
                <br>
                Possible values for this attribute are:

                <ul>
                    <li><span class="NDLSystemFont">Dynamic Automatic Update</span> - Automatically
                    compute the number of frames to skip between bounds calculations. Refer to
                    description of AUTO_SKIP_UPDATE in Gamebryo NiParticle Documentation for
                    details on how the bound update is computed.</li>

                    <li><span class="NDLSystemFont">Dynamic Fixed Update</span> - Allows the user
                    to specify the number of frames between bounds calculations. The <span class=
                    "NDLGUILabel">Update Every X Frames</span> field will appear when this option
                    is selected.</li>

                    <li><span class="NDLSystemFont">Static Automatic</span> - This is the default
                    option. It simulates the particle system to determine the ideal bounding size.
                    It stores this value as the static bound. This process is done at export time
                    and may produce incorrect results if other factors modify the size of a
                    particle system outside of the current scene. The application can add a new
                    force or perhaps even animate the parameters outside of the scene.</li>

                    <li><span class="NDLSystemFont">Static</span> - Set a fixed bounding sphere
                    around the particle system. This can be used for controlling which particle
                    system is rendered in front when two particles systems are close together. The
                    <span class="NDLGUILabel">Bound</span> <span class=
                    "NDLGUILabel">Position</span> and <span class="NDLGUILabel">Bound Radius</span>
                    fields will appear when this option is selected.</li>
                </ul>
            </td>
        </tr>
    </tbody>
</table>

<h3>Dynamic Fixed Update Bounding Volume</h3>

<div class="FigureContainer">
    <img alt="maya dynamic fixed update bounding volume parameters" src=
    "./images/rpi_maya_particle_dynamic_fixed_update.png" height="67" width="428">

    <p class="FigureCaption">NiParticleSystem Dynamic Fixed Update Bounding Volume Parameters user
    interface</p>
</div>

<table>
    <thead>
        <tr>
            <th>Attribute</th>

            <th>Keyable</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><span class="NDLGUILabel">Update Every X Frames</span></td>

            <td>No</td>

            <td>This attribute specifies how many frames should be skipped between updates of the
            bound. A value of 0 indicates it will be updated every frame. A value of 9 indicates it
            will be updated every tenth frame.</td>
        </tr>
    </tbody>
</table>

<h3>Static Bounding Volume</h3>

<div class="FigureContainer">
    <img alt="maya static bounding volume parameters" src=
    "./images/rpi_maya_particle_static_bounding_volume.png" height="90" width="434">

    <p class="FigureCaption">NiParticleSystem Static Bounding Volume Parameters user interface</p>
</div>

<table>
    <thead>
        <tr>
            <th>Attribute</th>

            <th>Keyable</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><span class="NDLGUILabel">Bound Position<br>
            <br>
            Bound Radius</span></td>

            <td>No</td>

            <td>These attributes specify the static bounding volume position and radius in local
            space.</td>
        </tr>
    </tbody>
</table>

<h2>Mesh Particle Parameters</h2>

<p>These optimization parameters are only displayed when the particle system emits meshes.</p>

<div class="FigureContainer">
    <img alt="maya mesh particle parameters" src=
    "./images/rpi_maya_particle_mesh_particle_parameters.png" height="74" width="434">

    <p class="FigureCaption">NiParticleSystem Mesh Particle Parameters user interface</p>
</div>

<table>
    <thead>
        <tr>
            <th>Attribute</th>

            <th>Keyable</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><span class="NDLGUILabel">Fill Pools On Load</span></td>

            <td>No</td>

            <td>When a mesh particle system creates a particle it must create a clone. These clones
            share geometry and texture information, but there is still an overhead associated with
            creating a clone. Mesh Particle systems may contain pools of cloned objects to reuse
            instead of constantly deleting and recreating each particle. A mesh particle system may
            still show performance shudder as it starts up because the initial particles need to be
            created. This is often seen with explosions of mesh particles where many particles are
            created at once and they are never reused. To alleviate this problem, enable
            <span class="NDLGUILabel">Fill Pools On Load</span>. When this NIF is loaded it will
            fill the pools with cloned objects. This will slightly increase the load time of the
            particle system, but it will start playing more quickly.</td>
        </tr>

        <tr>
            <td><span class="NDLGUILabel">Pool Size Equals Max Particles<br>
            <br>
            Default Pool Size</span></td>

            <td>No</td>

            <td>The <span class="NDLEmphasis">Pool Size</span> specifies how many unused particles
            to hold in the free particle pool for reuse. Constant emission particle systems will
            need a smaller pool size while bursty particle systems will need a larger pool.<br>
            <br>
            The <span class="NDLGUILabel">Pool Size Equals Max Particles</span> checkbox will
            automatically set the pool size equal to the <a href=
            "rpi_niparticlesystem_node_reference.htm">Max Number of Particles</a> setting.</td>
        </tr>
    </tbody>
</table><a name="AnimatedParameters" id="AnimatedParameters"></a>

<h2>Animated Parameters</h2>

<table class="NDLNoteContainer" width="100%">
    <tbody>
        <tr align="left">
            <td class="NDLNoteContainerTD">
                <p class="NDLHeadingNoteContainer">Note</p>

                <div class="NDLNote">
                    The attributes in the Animated Parameters <span class="NDLEmphasis">must be
                    keyed</span> to have any effect. If animation attributes are not required, then
                    use the corresponding parameters on the <a href=
                    "rpi_niemitter_node_reference.htm">NiEmitter</a> node instead. It is more
                    efficient to set the emission parameters since these Animated Parameters incur
                    performance overhead.
                </div>
            </td>
        </tr>
    </tbody>
</table>

<div class="FigureContainer">
    <img alt="maya animated parameters" src="./images/rpi_maya_particle_animated_parameters.png"
    height="110" width="425">

    <p class="FigureCaption">NiParticleSystem Animated Parameters user interface</p>
</div>

<table>
    <thead>
        <tr>
            <th>Attribute</th>

            <th>Keyable</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><span class="NDLGUILabel">Color</span></td>

            <td>Yes</td>

            <td>
                This attribute controls the color tint of particles in the same way vertex color
                affects regular objects. This attribute is animated over the life of the particle.
                Animating the vertex color has no affect when using mesh particles. Animate the
                color value on the mesh's material instead.<br>
                <br>
                If using a NiMultiShader material on the particle, make sure to set the following
                attributes to ensure the particle colors are visible:<br>
                <br>
                Vertex Colors

                <ul>
                    <li><span class="NDLGUILabel">Source Mode</span> = Emissive</li>

                    <li><span class="NDLGUILabel">Light Mode</span> = Emissive Only</li>
                </ul>

                <div class="NDLTDNote">
                    <span class="NDLTableNote">Note:</span> Color and Color Alpha are contained in
                    the same vertex color. If only one of these is animated, the result might not
                    be desired.
                </div>
            </td>
        </tr>

        <tr>
            <td><span class="NDLGUILabel">Color Alpha</span></td>

            <td>Yes</td>

            <td>
                Controls the alpha of the particles the same way vertex alpha affects regular
                objects. This attribute is animated over the life of the particle. Animating the
                vertex alpha has no affect when using mesh particles. Animate the alpha value on
                the mesh's material instead.

                <div class="NDLTDNote">
                    <span class="NDLTableNote">Note:</span> Color and Color Alpha are contained in
                    the same vertex color. If only one of these is animated, the result might not
                    be desired.
                </div>
            </td>
        </tr>

        <tr>
            <td><span class="NDLGUILabel">Particle Size</span></td>

            <td>Yes</td>

            <td>This value is multiplied by the size of the particle to compute the particle's
            size. For example, a value of 1.0 will not change the particle's size. This attribute
            is animated over the life of the particle. In addition, an initial Particle Size
            multiplier can be set on the <a href="rpi_niemitter_node_reference.htm">NiEmitter</a>
            node.<br>
            <br>
            The particle size is calculated as follows:<br>
            <br>
            Final Size = [Particle Shape Particle Size] x [Emitter Particle Size] (assuming zero
            variance)</td>
        </tr>

        <tr>
            <td><span class="NDLGUILabel">Rotation Angle</span></td>

            <td>Yes</td>

            <td>The rotation (in degrees) is added to the initial rotation angle of the particle.
            This attribute is animated over the life of the particle. In addition, the initial
            Rotation Angle can be set at emission on the <a href=
            "rpi_niemitter_node_reference.htm">NiEmitter</a> node.<br>
            <br>
            The particle's rotation angle is computed as:<br>
            <br>
            Rotation Angle = [Particle Shape Rotation Angle] + [Emitter Rotation Angle] (assuming
            zero variance)</td>
        </tr>
    </tbody>
</table><a name="AlignmentParameters" id="AlignmentParameters"></a>

<h2>Alignment Parameters</h2>

<p>By default, sprite particles are Normal and Up Aligned toward the Camera, resulting in a
billboard effect.</p>

<div class="FigureContainer">
    <img alt="maya alignment and scale parameters" src=
    "./images/rpi_maya_particle_alignment_and_scale.png" height="70" width="430">

    <p class="FigureCaption">NiParticleSystem Alignment Parameters user interface</p>
</div>

<table>
    <thead>
        <tr>
            <th>Attribute</th>

            <th>Keyable</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><span class="NDLGUILabel">Normal Align</span></td>

            <td>No</td>

            <td>
                Controls the normal direction used for orienting particles.<br>
                <br>
                Possible values for this attribute are:<br>
                <br>

                <ul>
                    <li><span class="NDLSystemFont">Fixed</span> - Fixed alignment allows the
                    artist to specify the direction (in local space) in the <span class=
                    "NDLSystemFont">Direction</span> attribute that appears when this option is
                    selected.</li>

                    <li><span class="NDLSystemFont">Position</span> - Align in the direction of
                    local position, relative to the particle system object.</li>

                    <li><span class="NDLSystemFont">Velocity</span> - Align in the direction of
                    particle velocity.</li>

                    <li>
                        <span class="NDLSystemFont">Camera</span> - The normal is always aligned to
                        the view plane normal, and up aligned to view up.

                        <div class="NDLTDNote">
                            <span class="NDLTableNote">Note:</span> This is not a valid setting for
                            mesh particles.
                        </div>
                    </li>
                </ul>
            </td>
        </tr>

        <tr>
            <td><span class="NDLGUILabel">Up Align</span></td>

            <td>No</td>

            <td>
                Controls the up direction of the particle.<br>
                <br>
                Possible values for this attribute are:<br>
                <br>

                <ul>
                    <li><span class="NDLSystemFont">Fixed</span> - Fixed alignment allows the
                    artist to specify the direction (in local space) in the <span class=
                    "NDLSystemFont">Direction</span> attribute that appears when this option is
                    selected.</li>

                    <li><span class="NDLSystemFont">Position</span> - Align in the direction of
                    local position, relative to the particle system object.</li>

                    <li><span class="NDLSystemFont">Velocity</span> - Align in the direction of
                    particle velocity. For mesh particles, the Z-axis is assumed to be up when
                    aligning to velocity.</li>

                    <li>
                        <span class="NDLSystemFont">Camera</span> - The normal is always aligned to
                        the view plane normal, and up aligned to view up.

                        <div class="NDLTDNote">
                            <span class="NDLTableNote">Note:</span> This is not a valid setting for
                            mesh particles.
                        </div>
                    </li>
                </ul>
            </td>
        </tr>
    </tbody>
</table><a name="ScaleParameters" id="ScaleParameters"></a>

<h2>Scale Parameters</h2>

<p>The scale parameters affect the particle's size proportional to its speed.</p>

<div class="FigureContainer">
    <img alt="maya up align velocity parameters" src=
    "./images/rpi_maya_particle_up_align_velocity.png" height="111" width="429">

    <p class="FigureCaption">NiParticleSystem Scale Parameters user interface</p>
</div>

<table>
    <thead>
        <tr>
            <th>Attribute</th>

            <th>Keyable</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><span class="NDLGUILabel">Scale Factor U<br>
            <br>
            Scale Factor V</span></td>

            <td>No</td>

            <td>
                This value controls the rate at which the particle stretches in the U or V
                directions as a particle's speed increases. Common values are:

                <ul>
                    <li>Zero indicates the scaling is disabled in the given direction.</li>

                    <li>1.0 is linear growth between the <span class="NDLGUILabel">Scale
                    Rest</span> and <span class="NDLGUILabel">Scale Limit</span> values as speed
                    increases.</li>

                    <li>&gt; 1.0 is exponential growth.</li>
                </ul>Scale in the U or V direction is computed based on the following attributes as
                such:<br>
                <br>
                Scale = (Factor x Velocity x Limit + Rest) / (Factor x Velocity + 1)
            </td>
        </tr>

        <tr>
            <td><span class="NDLGUILabel">Scale Rest UV</span></td>

            <td>No</td>

            <td>The U or V multiplier when the particle is at rest (particle speed is zero).</td>
        </tr>

        <tr>
            <td><span class="NDLGUILabel">Scale Limit UV</span></td>

            <td>No</td>

            <td>The maximum U or V multiplier that will be applied to a particle. This limits the
            maximum scale that will be applied as speed approaches infinity.</td>
        </tr>
    </tbody>
</table><a name="TextureAnimationParameters" id="TextureAnimationParameters"></a>

<h2>Texture Animation Parameters</h2>

<div class="FigureContainer">
    <img alt="maya texture animation parameters" src=
    "./images/rpi_maya_particle_texture_animation_parameters.png" height="230" width="428">

    <p class="FigureCaption">NiParticleSystem Texture Animation Parameters user interface</p>
</div>

<table>
    <thead>
        <tr>
            <th>Attribute</th>

            <th>Keyable</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><span class="NDLGUILabel">Ping Pong</span></td>

            <td>No</td>

            <td>
                Keys are played forward and then backward. When using this setting the <span class=
                "NDLGUILabel">Initial Time</span> and <span class="NDLGUILabel">Final Time</span>
                parameters should be set to allow the animation to play up and then back down. For
                example, the following settings will result in a single ping-pong (count up and
                count down over the particle's life):

                <ul>
                    <li><span class="NDLGUILabel">Initial Time</span> = 0.0</li>

                    <li><span class="NDLGUILabel">Final Time</span> = 0.5</li>
                </ul>
            </td>
        </tr>

        <tr>
            <td><span class="NDLGUILabel">UV Scrolling</span></td>

            <td>No</td>

            <td>
                Controls whether or not to scroll smoothly through texture coordinates of sub
                textures or snap to frames in the sprite animation texture atlas.

                <div class="NDLTDNote">
                    <span class="NDLTableNote">Note:</span> This setting requires a texture that
                    has only one row.
                </div>
            </td>
        </tr>

        <tr>
            <td><span class="NDLGUILabel">Number of Frames Across<br>
            <br>
            Number of Frames Down</span></td>

            <td>No</td>

            <td>
                The number of frames across and down in the animation texture atlas.

                <div class="NDLTDNote">
                    <span class="NDLTableNote">Note:</span> Frames are ordered left to right and
                    top to bottom in the texture atlas.
                </div>
            </td>
        </tr>

        <tr>
            <td><span class="NDLGUILabel">Initial Frame</span></td>

            <td>No</td>

            <td>The index of the first frame in the atlas to display. This value uses zero-based
            counting. Thus, the first texture in the atlas is referred to as frame 0 (not frame
            1).<br></td>
        </tr>

        <tr>
            <td><span class="NDLGUILabel">Initial Frame Variance</span></td>

            <td>No</td>

            <td>If this value is non-zero, new particles will be assigned a random initial frame
            that will be evenly distributed over the range [<span class="NDLGUILabel">Initial
            Frame</span> +/- <span class="NDLGUILabel">Initial Frame Variance]</span>.<br>
            <br>
            For example, if the <span class="NDLGUILabel">Initial Frame</span> is set to 3 and the
            <span class="NDLGUILabel">Initial Frame Variance</span> is set to 3, the initial frame
            for each particle will range between frame 0 through frame 5.</td>
        </tr>

        <tr>
            <td><span class="NDLGUILabel">Number of Frames</span></td>

            <td>No</td>

            <td>The number of frames to display over the life of the particle. This value can be
            larger than the total number of frames, which means that it will wrap around to the
            first frame.<br>
            <br>
            For example, if a texture is 3 frames across and 4 frames down, it will contain a total
            of 3 x 4 = 12 frames.<br>
            <br>
            If the <span class="NDLGUILabel">Initial Frame</span> is set to 0 and <span class=
            "NDLGUILabel">Number of Frames</span> is set to 24 (twice the number of frames in the
            atlas), it will display two loops of the frames over the life of the particle.<br>
            <br>
            In addition, if the <span class="NDLGUILabel">Initial Frame</span> is set to 10 and the
            <span class="NDLGUILabel">Number of Frames</span> is set to 5. Frames 10, 11, 0, 1, and
            2 will be displayed over the life of the particle.</td>
        </tr>

        <tr>
            <td><span class="NDLGUILabel">Number of Frames Variance</span></td>

            <td>No</td>

            <td>If this value is non zero, new particles will display a random number of frames
            over its life. The number of frames displayed will be evenly distributed over the range
            [<span class="NDLGUILabel">Number of Frames</span> +/- <span class="NDLGUILabel">Number
            of Frames Variance</span>].<br>
            <br>
            For example, if the <span class="NDLGUILabel">Number of Frames</span> is set to 10 and
            the <span class="NDLGUILabel">Number of Frames Variance</span> is set to 2, the frames
            displayed over the lives of individual particles will range between frames 8 and
            11.</td>
        </tr>

        <tr>
            <td><span class="NDLGUILabel">Initial Time</span></td>

            <td>No</td>

            <td>The time during the particle's life (between 0.0 and 1.0) when the animation will
            start. The <span class="NDLGUILabel">Initial Frame</span> will be displayed until this
            time is reached.<br>
            <br>
            If <b class="NDLGUILabel">Initial Time</b> is greater than 1.0, the <b class=
            "NDLGUILabel">Initial Frame</b> will remain over the entire life of the particle.</td>
        </tr>

        <tr>
            <td><span class="NDLGUILabel">Final Time</span></td>

            <td>No</td>

            <td>The time during the particle's life (between 0.0 and 1.0) when the animation will
            stop. The last frame (<span class="NDLGUILabel">Initial Frame</span> + <span class=
            "NDLGUILabel">Number of Frames</span>) will be displayed until the particle dies
            <span class="NDLEmphasis">unless</span> <span class="NDLGUILabel">Ping Pong</span> is
            selected. If <span class="NDLGUILabel">Ping Pong</span> is selected, the frames will
            oscillate until the particle dies.<br>
            <br>
            If <b class="NDLGUILabel">Final Time</b> is greater than 1.0, the frames will change
            more slowly. This essentially has increased the factor at which the animation plays
            over an artificially longer amount of time.</td>
        </tr>
    </tbody>
</table>

<h2>Collision Parameters</h2>

<p>The collision parameters are only displayed if a collider is associated with the particle
system.</p>

<div class="FigureContainer">
    <img alt="maya collision parameters" src="./images/rpi_maya_particle_collision_parameters.png"
    height="119" width="429">

    <p class="FigureCaption">NiParticleSystem Collision Parameters user interface</p>
</div>

<table>
    <thead>
        <tr>
            <th>Attribute</th>

            <th>Keyable</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><span class="NDLGUILabel">Bounce</span></td>

            <td>No</td>

            <td>The bounce is multiplied by the collider bounce to equate the total bounce. The
            greater the bounce the faster the particle will reflect from the collider.</td>
        </tr>

        <tr>
            <td><span class="NDLGUILabel">Spawn on Collide</span></td>

            <td>No</td>

            <td>This setting controls whether or not particles are spawned on collision. The
            particles that are spawned is controlled by the <span class="NDLGUILabel">Collider
            Spawner</span> associated with the collider.</td>
        </tr>

        <tr>
            <td><span class="NDLGUILabel">Die on Collide</span></td>

            <td>No</td>

            <td>Controls whether or not particles disappear immediately upon collision.</td>
        </tr>

        <tr>
            <td><span class="NDLGUILabel">Collider</span></td>

            <td>No</td>

            <td>A convenient way to view and navigate to a <a href=
            "rpi_nicollider_node_reference.htm">NiCollider</a> associated with the particle
            system.</td>
        </tr>

        <tr>
            <td><span class="NDLGUILabel">Collider Spawner</span></td>

            <td>No</td>

            <td>A convenient way to view and navigate to the <a href=
            "rpi_niparticlesystemspawner_node_reference.htm">spawner</a> associated with the
            particle system.</td>
        </tr>
    </tbody>
</table>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>