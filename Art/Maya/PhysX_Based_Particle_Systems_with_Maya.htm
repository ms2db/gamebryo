<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>PhysX-Based Particle Systems with Maya</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Build" content="PhysX" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
   
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Body)==========================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>


<h1>PhysX-Based Particle Systems with Maya</h1>


<p>Gamebryo-PhysX supports PhysX-based particle systems in which the particles are modeled as
PhysX actors with their motion controlled by standard Gamebryo particle modifiers.</p>

<p>There are two principle advantages to PhysX-based particles: </p>

<ul>
	
	<li>Particles use PhysX 
 collision detection and resolution, which means they can collide with 
 any kind of PhysX-enabled geometry. </li>
	
	<li>The particle actors 
 have mass and other physical properties, so they can push dynamic objects 
 around or be pushed around by kinematic or dynamic objects. </li>
</ul>

<p>There are two basic steps in creating a PhysX-based 
 particle system: create a prototypical particle actor, and convert the 
 particle system on export. </p>

<h2>Creating Particle Actors</h2>

<p>The rigid body actor to be used for the particle must 
 be tagged with a <span class="NDLSystemFont">NiData_NiPhysXParticleActor</span> 
 extra attribute. </p>

<p>There must be one actor for each particle system in 
 the scene. You can choose not to specify an actor, but then one must be 
 provided at run-time before the particle system can be used (which must 
 be done by programming). The actor can have any properties at all, but 
 it must be a single actor, not a jointed pair or other combination. The 
 shape for the actor can be any shape and will determine how the particle 
 collides with and interacts with other objects. For the simplest effects, 
 a small sphere of the particle's rendered size is best, but other shapes 
 are possible, including groups of shapes. </p>

<p>At run-time, the particle is not scaled by the rendered 
 size. It remains a fixed size. The rendered particle appearance is completely 
 controlled by PSystem modifiers, independent of the actors' shapes. </p>

<h4>Mesh Particle Actors</h4>

<p>Mesh particle systems require at least one PhysX actor, 
 for the first particle generation. Subsequent generations can have their 
 own actor or will fall back to the most recent generation's actor. To 
 specify a mesh particle actor, you must append &quot;:X&quot; after the 
 particle system name to indicate the actor. For example, <span class="NDLSystemFont">NiData_NiPhysXParticleActor 
 = MeshPSys:0</span> specifies the actor for generation 0 of the particle 
 system named MeshPSys. </p>

<p>At run-time, the particle shape or motion is not affected 
 by any animations on the mesh object. The rendered particle appearance 
 is completely controlled by PSystem modifiers, independent of the actor's 
 shapes. </p>

<h2>Exporting PhysX-based Particles</h2>

<p>Use the PhysX Extractor tool plug-in to convert a particle system to use PhysX-based particles. Check the &quot;Convert to PhysX Rigid Particles&quot; box and any particle systems in the scene will be converted to use PhysX actors. The other options for the tool plug-in control the PhysX scene that is 
 created to simulate the particles and any other PhysX content in the scene. 
 Other Gamebryo particle-system export settings apply, but see the notes 
 below for additional information. </p>

<h2>Notes</h2>

<p>Always try to put the particle system object at the 
 origin in Maya with no scale or rotation. It does not matter where the 
 emitters are located. If the particle system is at the origin, you can 
 check the &quot;PSys in PhysX Space&quot; check-box in the PhysX 
 Extractor tool plug-in. This enables a run-time optimization which 
 avoids transformations on the particle state. </p>

<p>If particle rotation is enabled, then there are two 
 options for controlling the rotations. You may choose to use standard 
 particle system rotation controls, or take the rotations from the PhysX 
 actors. The behavior is controlled by the &quot;Use PhysX Rotations&quot; 
 check-box in the PhysX Extractor tool plug-in. </p>

<p>PhysX-based particles always move in the PhysX global 
 coordinate system.</p>

<p class="NDLHeadingRelatedTopic">Related topics</p>
    <ul>
        <li><a HREF="../../Programmer/NiPhysX/Introduction_to_NiPhysXParticle.htm">Introduction to NiPhysXParticle</a> 
        </li>
			<li><a href="Gamebryo_Rigid_Body_Extras_and_Maya.htm">Gamebryo Rigid-Body Extras and Maya</a>
			</li>
			<li><a href="../../Reference/Tool_Plug_ins/PhysX_Extractor.htm">PhysX Extractor</a>
			</li>
    </ul> 

<!--kadov_tag{{<placeholder id="footer">}}-->
</body>

</html>
