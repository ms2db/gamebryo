<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Particle Attribute Window</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>


<h1>Particle Attribute Window</h1>


<p>The Particle Attribute window can be found by selecting 
 the particle shape. If all the categories are fully expanded, it may be 
 necessary to collapse a few of the categories in order to view others.</p>


<div class="FigureContainer">
    <img src="images/ParticleShape.gif" width="447" height="689" alt="ParticleShape (10K)" />
          <p class="FigureCaption">Particle Attribute window</p>
</div>

<table>
	<thead>
		<tr>
			<th>Use this field...</th>
			<th>To...</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td class="ColSpan" colspan="2">General Parameters</td>

		</tr>
		<tr>
			<td>Target Particle</td>

			<td>Enter the name of the particles that you want to spawn.
 The particle name will be the name of the transform node immediately above the
 desired particle's shape node. Particles from this system will be spawned 
 when particles from the selected system collide.</td>

		</tr>

		<tr>
			<td>Use Worldspace</td>

			<td>Specify
that particles be in world space and should not be transformed
according to their location in the scene graph. This value is stored in
Ni_ParticlesInWorldSpace.</td>

		</tr>
		<tr>
			<td>Z Buffer Property</td>

			<td>Specify how ow a sprite particle system will use the <a href="Create_Z_Buffer_Attribute.htm">ZBuffer</a>. The default and typical value is "Test-ON Write-OFF". This value is stored in Ni_ZBufferProperty.</td>

		</tr>
		<tr>
			<td>Skip Bound Update</td>

			<td>Delay
how often the bound of a particle system is updated (performance
optimization). This field specifies how many frames should be skipped
between updates of the bound. Zero (0) indicates that the bound will be
updated every frame. Nine (9) indicates that the bound will be updated
every tenth frame.</td>

		</tr>
		<tr>
			<td class="ColSpan" colspan="2">Vertex Color</td>
		</tr>
		<tr>

			<td>Vertex Color</td>
			<td>Tint particles in the same way as you would when setting the vertex 
 color of regular objects. Using the Alpha value, set the alpha value of each object.</td>

		</tr>
		<tr>
			<td>Vertex Color Alpha</td>

			<td>Set the alpha value of each object.
			<div class="NDLTDNote"><span class="NDLTableNote">Note:</span>
You can animate the particle color by right-clicking on the option and
choosing "Set Key". Animated particle color ONLY supports LINEAR
TANGENTS.</div>
		</td></tr>
		<!-- TODO Requires SME input and/or review 012009 AN -->
		<!-- <tr>
			<td>Animated Time Range</td>
			<td>The classic view of animation does not apply to particle 
 systems. Your animated vertex color and alpha are meant to describe 
 the life of a particle, not time with the scene. For this reason, 
 the length of your animation is not important. All animations start 
 at time zero and end with the last key you define. The best way to explain these settings is to use an example. If your animated particle vertex color ends of frame 100, then the lifetime of each particle is described by the animation curves from frame 0 to frame 100. The length of the color animation doesn't change the lifetime of a particle.</div>
			</td>

		</tr> -->
		<tr>
			<td class="ColSpan" colspan="2">Size</td>

		</tr>
		<tr>
			<td>Size Variance</td>

			<td>Specify
a percentage range of random sizes for particles. The variance ranges
from 0.0% to 100.0% where 0.0 indicates the particles are all the same
size. A value of 50% indicates the particles will be +/- 50% of their
default size.</td>

		</tr>
		<tr>
			<td>Grow Frames</td>

			<td>Specify the number of frames in which a particle will grow from its initial (born) size (zero) to its full size.</td>

		</tr>
		<tr>
			<td>Shrink Frames</td>

			<td>Specify the number of frames that it will take for a particle to shrink from its full size to zero size.</td>

		</tr>
		<tr>
			<td class="ColSpan" colspan="2">Rotation</td>

		</tr>
		<tr>
			<td>Rotate Random Axis</td>

			<td>Set
how geometry particles will rotate. Select (check) this checkbox if you
want the geometry particles to rotate about a randomly defined axis.</td>

		</tr>
		<tr>
			<td>Rotate Axis X,Y, Z</td>

			<td>Define the axis of rotation for geometry particle if you do not select <span class="NDLGUILabel">Rotate Random Axis</span>.</td>

		</tr>
		<tr>
			<td>Rotation Speed</td>

			<td>Set
the rotation speed of particles in degrees per second. This works for
both sprite and geometry particles. Positive values indicate clockwise
rotation.</td>

		</tr>
		<tr>
			<td>Rotation Speed Variation</td>

			<td>Set
a random range for the initial speed. For example, specifying a speed
of 90 degrees and a Variation of 30 degrees means the particle rotation
speed will be from 60 to 120 degrees.</td>

		</tr>
		<tr>
			<td>Bi-Directional Rotation</td>

			<td>Randomly
determine the direction of particle rotation. For example, if the
rotation speed is +90 and Bi-Directional Rotation is NOT set, then all
particles will rotate clockwise at 90 degrees per second. If
Bi-Directional Rotation is set, then half of the particle will rotate
clockwise at 90 degrees and the other half will rotate at 90 degrees
counter clockwise. </td>

		</tr>
		<tr>
			<td>Initial Rotation and Initial Rotation Variation</td>

			<td>Set the initial rotation of sprite and mesh particles 
 as well as the amount of random variation in the initial rotation. Both 
 parameters are in degrees.</td>

		</tr>
		<tr>
			<td class="ColSpan" colspan="2">Spawning</td>

		</tr>
		<tr>
			<td>Spawn On Death</td>

			<td>Spawn
new particles when these particles die. The following parameters are
for the spawn on death behavior and do not apply to spawning on
collision.</td>

		</tr>
		<tr>
			<td>Number of Generations</td>

			<td>Specify the number of generations a particle should be spawned.</td>

		</tr>
		<tr>
			<td>Minimum To Spawn and Maximum to Spawn</td>
			<td>Set the minimum and maximum bounds of a random number of 
 particles that will spawn when a particle dies.</td>

		</tr>
		<tr>
			<td>Percentage Spawned</td>

			<td>Set how likely a particle will spawn new particles. Values range from 0.0 (never spawn) to 1.0 (always spawn)</td>

		</tr>
		<tr>
			<td>Spawned Speed Chaos</td>

			<td>Specify
the speed of spawned particles. The new particle speed will be at most
the (1.0 + Spawned Speed Chaos) * original speed. A value of 0.0
indicates maintaining the same speed. A value of 0.5 indicates the
child speed will be the original speed plus up to 50%. A value of -0.5
indicates the child speed will be the original speed minus up to 50%.</td>

		</tr>
		<tr>
			<td>Spawned Spread</td>

			<td>Set the direction deviation of the spawned particle. Values range from 0.0 (same as parent) to 1.0 (any direction).</td>

		</tr>
		<!-- TODO Requires SME input and/or review 012009 AN -->
		<!-- <tr>
			<td class="ColSpan" colspan="2">Advanced</td>

		</tr> -->

		<tr>
			<td class="ColSpan" colspan="2">Pooling</td>

		</tr>
		<tr>
			<td>Pool Meshes</td>

			<td>When
a mesh particle system creates a particle it must create a "Clone".
These clones share geometry and texture information but there is still
an overhead associated with creating a clone. Mesh Particle systems may
contain pools of cloned objects to reuse instead of constantly deleting
and recreating each particle. A mesh particle system may still show
performance shudder as it starts up because the initial particles need
to be created. You would see this with things like explosions of mesh
particles where many particles are create at once and they are never
reused. To alleviate this problem check "Fill Pools On Load". When this
NIF is loaded, it will fill the pools with cloned objects. This will
slightly increase the load time of the particle system but it will
start playing quickly.</td>

		</tr>
		<tr>
			<td>Default Pool Size</td>

			<td>Setting the Default Pool Size will specify how many 
 un-used particles to hold in the free particle pool for re-use. Constant 
 emission particle systems will need a smaller pool size while bursty particle 
 systems will need a larger pool. The default value -1 indicates the pools 
 size will be set to the maximum number of particles. </td>

		</tr>
		<!-- TODO Requires SME input and/or review 012009 AN -->
		<!-- <tr>
			<td>Particle Material</td>

			<td>The Gamebryo Maya Plug-in will detect the material applied 
 to the particles and use that material during export.&nbsp;The Gamebryo 
 Maya Plug-in allows any material including the NiMultiShader to be applied.</td>
		</tr> -->
	</tbody>
</table>

<!-- <p class="NDLHeadingRelatedTopic">Related topics</p>
    <ul>
        <li>
        </li>
    </ul>  -->

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>