<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Export Filtering Options</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>


<h1>Export Filtering Options</h1>

<p>You may choose among the six different texture filtering 
 options. Each option allows different styles of filtering textures. The 
 option chosen here will be the default for all textures in the NIF file, 
 but it can be over-ridden on a per-texture basis. </p>


<div class="FigureContainer">
    <img src="./images/image005.gif" width="570" height="76" />
          <p class="FigureCaption">Filtering Options</p>
</div>

<p>The second step in the computation of the color contribution 
 of a texture map (once the exact texture coordinate is established) is 
 to determine what method is used to pull a color from the texture map&mdash;otherwise known as &quot;filtering&quot;.&nbsp; Gamebryo supplies six 
 possible filter modes, but one can think of these as being broken down 
 into two independent categories:&nbsp; there are two methods of filtering 
 across a given mipmap level, and there are three methods of filtering 
 between mipmap levels.</p>

<p>The two methods of filtering within a mipmap level are 
 &quot;nearest neighbor&quot; and &quot;bilinear interpolation&quot;.&nbsp; 
 &quot;Nearest neighbor&quot; simply picks the color of the closest texture 
 pixel (texel) and uses it.&nbsp; &quot;Bilinear interpolation&quot; linearly 
 interpolates between the four texels that enclose the texture coordinate.&nbsp; 
 All current hardware and most software renderers support both methods 
 now, and there are only two reasons to select &quot;Nearest neighbor&quot; 
 over &quot;Bilinear interpolation&quot;.&nbsp; The most common reason 
 to use &quot;nearest neighbor&quot; filtering is to achieve a &quot;blocky&quot; 
 effect.&nbsp; &quot;Bilinear interpolation&quot; causes a texture to look 
 &quot;blurry&quot;, which may not be the desire of the artist for a given 
 texture.&nbsp; Another reason to use &quot;nearest neighbor&quot; filtering 
 (without any mipmapping  see below) is to increase the performance on 
 software rasterizers.&nbsp; Many applications switch to &quot;nearest 
 neighbor&quot; from &quot;bilinear interpolation&quot; when running on 
 software rasterizers, as &quot;Bilinear interpolation&quot; is expensive 
 to do in software.</p>

<p>There are three methods of selecting the correct mipmap 
 levels between which to interpolate.&nbsp; The simplest is to avoid mipmapping 
 altogether and use the fully detailed version of the texture for interpolation 
  this is equivalent to turning off mipmapping.&nbsp; The next level is 
 the simplest form of mipmapping, in which the mipmap level that is the 
 closest to fitting the level of detail of the pixel  this is called &quot;nearest 
 level mipmapping&quot;.&nbsp; The final mipmapping selection system selects 
 two mipmap levels that &quot;enclose&quot; the desired level of detail 
  one that is too detailed, and one that is not detailed enough.&nbsp; 
 It then linearly interpolates between those two levels.&nbsp; This approach 
 is called &quot;linear mipmap interpolation&quot;.&nbsp; As such, the 
 given order defines increasing rendering quality among the three modes.&nbsp; 
 Note also that the order of increasing cost is the same.</p>

<p>Put together, this 3x2 set of options leaves six possible 
 modes:</p>

    <table>
			<thead>
      	<tr>
				<th>Filter Mode Name
           	</th>
          	<th>Filter Computation
          	</th>
        </tr>
			</thead>
			<tbody>	
        <tr>
        	<td>FILTER_NEAREST
          </td>
          <td>Uses "nearest neighbor", with no mipmapping
          </td>
        </tr>
        <tr>
        	<td>FILTER_BILERP
          </td>
          <td>Uses "bilinear interpolation" with no mipmapping
          </td>
        </tr>
        <tr>
        	<td>FILTER_NEAREST_MIPNEAREST
          </td>
          <td>Uses "nearest level mipmapping", then uses "nearest neighbor" on the result
          </td>
        </tr>
        <tr>
        	<td>FILTER_BILERP_MIPNEAREST
          </td>
          <td>Uses "nearest level mipmapping", then uses "bilinear interpolation" on the result
          </td>
        </tr>
        <tr>
        	<td>FILTER_NEAREST_MIPLERP
          </td>
          <td>Uses "nearest neighbor" on each of the two nearest mipmap levels and then performs "linear mipmap interpolation" between the results
          </td>
        </tr>
        <tr>
        	<td>FILTERP_TRILERP
          </td>
          <td>Uses "bilinear interpolation" on each of the two nearest mipmap levels, then performs "linear mipmap interpolation" between the results
          </td>
        </tr>
		</tbody>	
    </table>
 

<p>Current hardware typically supports the full range of mipmapping 
 options. Some mipmapping is highly recommended because it can reduce the 
 texture cache footprint of distant textures and hence improve rendering 
 performance, while also giving improved visual results. The only situation 
 in which to avoid mipmapping is when a texture will always be viewed at 
 the highest resolution (say, a HUD texture) and hence there is no need 
 to waste memory on additional mipmap levels. </p>

<!-- <p class="NDLHeadingRelatedTopic">Related topics</p>
    <ul>
        <li>
        </li>
    </ul>  -->

<!--kadov_tag{{<placeholder id="footer">}}-->
</body>

</html>
