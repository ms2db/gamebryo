<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>NiMesh Object Count vs. Clipping &amp; Culling</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>


<h1>NiMesh Object Count vs. Clipping &amp; Culling</h1>


<p>These two issues, the number of <span class="NDLSystemFont">NiMesh</span> objects and the culling/clipping behavior, place somewhat contradictory demands on model design. Improvement in the <span class="NDLSystemFont">NiMesh</span> object count comes from having as much geometry as possible associated with each shape (mesh collapsing, increasing the number of triangles in the mesh, and so on). Simultaneously, the <span class="NDLSystemFont">NiMesh</span> objects must be kept compact to allow efficient culling. There is no simple solution to this problem and you must constantly balance the two constraints. In general, triangles should be grouped into <span class="NDLSystemFont">NiMesh</span> objects so that culling will still be effective but the <span class="NDLSystemFont">NiMesh</span> objects contain the most triangles possible. </p>

<p>For example, when modeling the four walls of a room, if the walls are relatively complex, each wall should be in its own <span 
 class="NDLSystemFont">NiMesh</span> object. Having all the walls in a single 
 <span class="NDLSystemFont">NiMesh</span> object would reduce the object 
 count but would force clipping on all the geometry as a single unit. By 
 dividing the walls into four <span class="NDLSystemFont">NiMesh</span> objects,  two of them will usually be culled leaving the other two to be clipped.  However, if the walls were very simple (such as 2 triangles each) then  it might make sense to clump all the wall triangles together to avoid 
 having several 2 triangle <span class="NDLSystemFont">NiMesh</span> objects.</p>

<p class="NDLHeadingRelatedTopic">Related topics</p>
    <ul>
        <li><a href="../../Reference/NiMesh/Introduction_to_NiMesh_Class_Reference.htm">Introduction to NiMesh Class Reference</a>
        </li>
	   </ul> 

<!--kadov_tag{{<placeholder id="footer">}}-->
</body>

</html>
