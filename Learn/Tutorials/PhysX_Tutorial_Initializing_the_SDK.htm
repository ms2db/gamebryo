<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>PhysX Tutorial - Initializing the SDK</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Build" content="PhysX" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type=
"text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>PhysX Tutorial - Initializing the SDK</h1>

<p>The aim of this portion of the Gamebryo-PhysX tutorial is to describe the
process that initializes the PhysX SDK and sets it up for use with Gamebryo.
When you run this tutorial, you should see something like the image below.
Nothing is happening in the scene&mdash;that comes later.</p>

<div class="NDLFigureContainer">
    <img src="./images/Initializing_the_SDK_Screen.jpg" width="400" height=
    "313"> <!-- <p class="NDLFigureCaption">{Figure caption}</p> -->
</div>

<h2>Initializing PhysX</h2>

<p>The interesting part of the tutorial code, at least from a physics
perspective, is in the <span class="NDLSystemFont">Initialize</span> and
<span class="NDLSystemFont">Terminate</span> functions.</p>

<p>When headers for the <span class="NDLSystemFont"><a href=
"../../Reference/efdPhysX/efdPhysX__PhysXSDKManager.htm">efdPhysX::PhysXSDKManager</a></span>
class are included, Gamebryo maintains a singleton manager object responsible
for global operations on the PhysX SDK, such as collision mesh management,
multi-threading locks, and memory management. The code</p>

<p><span class="NDLSystemFont">m_pkPhysManager =
efd::PhysXSDKManager::GetPhysXManager();</span></p>

<p>obtains a pointer to this object, which the application keeps around for
future use. This manager must be initialized, once, by an application. This
creates the PhysX SDK, or obtains an existing one if already created. The
default behavior is to pass Gamebryo's default PhysX memory manager and debug
message stream to this PhysX SDK. Applications can provide their own functions
if desired.</p>

<p>There are many parameters that can be set to control the behavior of the
PhysX SDK. These should be set before any PhysX content is loaded or created.
In this tutorial code we set parameters to reduce the skin width (less
inter-penetration of objects), make the balls bounce more, and turn on debug
geometry flags.</p>

<p>The remainder of the application initialization and run-time is standard
Gamebryo.</p>

<h2>Terminating PhysX</h2>

<p>Before terminating the Gamebryo application, after all the PhysX content has
been destroyed (or, at least, after any calls you might make to PhysX) you must
shut down the manager. The following code does it:</p>

<p><span class="NDLSystemFont">m_pkPhysManager-&gt;ShutDown();</span></p>

<p>This releases the SDK only if this application created the SDK. If an
existing SDK object was found by <span class=
"NDLSystemFont">m_pkPhysManager-&gt;Initialize()</span> then the SDK is not
released because we presume that another thread needs it.</p>

<h3>Next</h3>

<p>The <a href="PhysX_Tutorial_Ball_in_a_Box.htm">Ball-In-A-Box</a> tutorial is
next.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
