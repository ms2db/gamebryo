<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>TessellationEffect</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>TessellationEffect</h1>

<p>This effect implements the tessellation effect
found in the PNTriangles11 sample in the DX SDK. 
It uses an NSF file to manage the various shaders,
including the hull and domain shaders that are responsible for
tessellation.
</p>

<p>The Tessellation shader is applied to the teapot mesh inside 3ds max,
and the scene is exported in a NIF.</p>

<p>As with all other effects, this class relies on a static
instance of a dummy helper class to create an instance of a
<span class="NDLSystemFont">TessellationEffect</span>. This allows the
effect to handle its own creation and initialization without any
need to change the code for the default application or any other
effects.</p>

<h2>Init</h2>

<p>During initialization, the first thing to happen is the
<span class="NDLSystemFont">ShaderEffect::Init</span> function
gets called, so the <span class=
"NDLSystemFont">RegisterShaderLibrary</span> will get a chance to
load the shader library. Then, the NIF containing the entire
scene is loaded, and the scene graph and camera are extracted
from it. The camera is detached from the scene graph so it can
move independently. A wireframe property is added to better
show off the object's tessellation. Then the scene and the camera are each
updated, and the presence of the shader is tested to determine
whether the shader was loaded correctly.</p>

<p>The <a href=
"../../Programmer/Frame_Rendering_System/Frame_Rendering_System_Render_Click.htm">
render click</a> created by this function simply holds an
<span class="NDLSystemFont"><a href=
"../../Reference/NiMain/Ni3DRenderView.htm">Ni3DRenderView</a></span>
with the main scene and camera. This render click is added to the
<a href=
"../../Programmer/Frame_Rendering_System/Frame_Rendering_System_Render_Step.htm">
render step</a> created by <span class="NDLSystemFont"><a href=
"ShaderEffect.htm">ShaderEffect</a>::Init</span>.</p>

<h2>Shutdown</h2>

<p>The default shutdown function <span class=
"NDLSystemFont">ShaderEffect::Shutdown</span> is called.</p>

<h2>UpdateScene</h2>

<p>This function animates the tessellation parameters and
then calls <span class=
"NDLSystemFont">Update</span> on the scene.</p>

<p>Refer to <a href=
"ShaderSample_Platform_Considerations.htm">Platform
Considerations</a> for additional details on platform-specific
issues.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
