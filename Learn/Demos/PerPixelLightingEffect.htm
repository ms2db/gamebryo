<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>PerPixelLightingEffect</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>PerPixelLightingEffect</h1>

<p>This effect uses Dot3 bump mapping to produce a per-pixel
lighting effect. The shader program was written in Microsoft's
HLSL, and the shader is in the FX file format. It makes use of a
vertex shader and a pixel shader, though the FX file contains
code that would allow the shader to just use a vertex shader.
This is done by creating two techniques in the FX file, one that
makes use of a pixel shader and one that uses the fixed-function
pixel processing pipeline. In this sample, the shader using the
pixel shader is used.</p>

<p>As with all other effects, this class relies on a static
instance of a dummy helper class to create an instance of a
<span class="NDLSystemFont">PerPixelLightingEffect</span>. This
allows the effect to handle its own creation and initialization
without any need to change the code for the default application
or any other effects.</p>

<p>The D3D10/D3D11 version of this shader adds a geometry shader to the
globe that extrudes the triangles slightly along each triangle's
face normal and inverts the vertex normals for half the
triangles.</p>

<h2>Init</h2>

<p>During initialization, the first thing to happen is the
<span class="NDLSystemFont">ShaderEffect::Init</span> function
gets called, so the <span class=
"NDLSystemFont">RegisterShaderLibrary</span> will get a chance to
load the shader library. Then, the scene containing the Earth and
Sun geometry is loaded and the camera is detached from the scene
itself. The scene and camera are updated, and a pointer to the
Sun mesh is stored, for later determination of the light
direction.Then, the presence of the shader on the "Earth"
object is tested to determine whether the shader was loaded
correctly.</p>

<p>The <a href=
"../../Programmer/Frame_Rendering_System/Frame_Rendering_System_Render_Click.htm">
render click</a> created by this function simply holds an
<span class="NDLSystemFont"><a href=
"../../Reference/NiMain/Ni3DRenderView.htm">Ni3DRenderView</a></span>
with the main scene and camera. This render click is added to the
<a href=
"../../Programmer/Frame_Rendering_System/Frame_Rendering_System_Render_Step.htm">
render step</a> created by <span class=
"NDLSystemFont">ShaderEffect::Init</span>.</p>

<h2>Shutdown</h2>

<p>The default shutdown function <span class=
"NDLSystemFont">ShaderEffect::Shutdown</span> is called.</p>

<h2>UpdateScene</h2>

<p>During <span class="NDLSystemFont">UpdateScene</span>, the
scene gets <span class="NDLSystemFont">Update</span> called on
it. This updates the position of the light in the scene graph,
which is automatically queried by the shader via Gamebryo's FX
semantics and annotations. No application code or explicit
shader constant updates are required.</p>

<p>Refer to <a href=
"ShaderSample_Platform_Considerations.htm">Platform
Considerations</a> for details on platform-specific issues.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
