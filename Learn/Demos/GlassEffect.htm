<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>GlassEffect</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>GlassEffect</h1>

<p>This effect implements the reflective/refractive glass shader
that ships with the current release of ATi's RenderMonkey. It
uses an NSF file to get the pixel and vertex shader programs,
which have been only slightly altered from the original code,
into Gamebryo. The shader program changes that were made were
only enough to work around some assumptions about the camera
transforms that were present in the original code, and also to
assist in altering the cube map lookup into a format that DirectX
expects..</p>

<p>The glass shader is applied to the teapot mesh inside 3ds max,
and the scene is exported in a NIF. The cube that is used to
display the environment of the teapot is included in that NIF,
and it shares its textures with the cube map that has been placed
in the shader's <span class="NDLSystemFont">EnvMap</span> texture
attribute.</p>

<p>As with all other effects, this class relies on a static
instance of a dummy helper class to create an instance of a
<span class="NDLSystemFont">GlassEffect</span>. This allows the
effect to handle its own creation and initialization without any
need to change the code for the default application or any other
effects.</p>

<p>The D3D10/D3D11 version of this shader adds a geometry shader to the
teapot that causes the individual vertices to be rendered as
screen-facing sprites..</p>

<h2>Init</h2>

<p>During initialization, the first thing to happen is the
<span class="NDLSystemFont">ShaderEffect::Init</span> function
gets called, so the <span class=
"NDLSystemFont">RegisterShaderLibrary</span> will get a chance to
load the shader library. Then, the NIF containing the entire
scene is loaded, and the scene graph and camera are extracted
from it. The camera is detached from the scene graph so it can
move independently. Then the scene and the camera are each
updated, and the presence of the shader is tested to determine
whether the shader was loaded correctly.</p>

<p>The <a href=
"../../Programmer/Frame_Rendering_System/Frame_Rendering_System_Render_Click.htm">
render click</a> created by this function simply holds an
<span class="NDLSystemFont"><a href=
"../../Reference/NiMain/Ni3DRenderView.htm">Ni3DRenderView</a></span>
with the main scene and camera. This render click is added to the
<a href=
"../../Programmer/Frame_Rendering_System/Frame_Rendering_System_Render_Step.htm">
render step</a> created by <span class="NDLSystemFont"><a href=
"ShaderEffect.htm">ShaderEffect</a>::Init</span>.</p>

<h2>Shutdown</h2>

<p>The default shutdown function <span class=
"NDLSystemFont">ShaderEffect::Shutdown</span> is called.</p>

<h2>UpdateScene</h2>

<p>This function simply calls <span class=
"NDLSystemFont">Update</span> on the scene.</p>

<p>Refer to <a href=
"ShaderSample_Platform_Considerations.htm">Platform
Considerations</a> for additional details on platform-specific
issues.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
