<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>LibraryEffect</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>LibraryEffect</h1>

<p>This effect demonstrates how programmatic shaders can be used
as part of the art pipeline. The shaders in question, Halo and
Aniso, were present in earlier versions of Gamebryo.</p>

<p>The three models each had their shaders applied to them inside
3ds max. In the case of the Halo shader, which is capable of two
different visual effects, the active shader is selected in the
art tool using the exposed shader attributes. There are other
tweakable parameters exposed as well.</p>

<p>As with all other effects, this class relies on a static
instance of a dummy helper class to create an instance of a
<span class="NDLSystemFont">LibraryEffect</span>. This allows the
effect to handle its own creation and initialization without any
need to change the code for the default application or any other
effects.</p>

<p>The D3D10/D3D11 version of this shader adds a geometry shader to the
Halo shaders, so the halo effect is rendered as a series of
concentric shells, and so the ship with the Toon effect has its
triangles subdivided with an oscillating center vertex.</p>

<h2>Init</h2>

<p>During initialization, the first thing to happen is the
<span class="NDLSystemFont">ShaderEffect::Init</span> function
gets called, so the <span class=
"NDLSystemFont">RegisterShaderLibrary</span> will get a chance to
load the shader library. Then, the three spaceship meshes are
loaded, each with its own shader already applied. The spaceships
are positioned relative to each other, and the scene and camera
are updated. Then the presence of the shader is tested to
determine whether the shaders were loaded correctly.</p>

<p>The <a href=
"../../Programmer/Frame_Rendering_System/Frame_Rendering_System_Render_Click.htm">
render click</a> created by this function simply holds an
<span class="NDLSystemFont"><a href=
"../../Reference/NiMain/Ni3DRenderView.htm">Ni3DRenderView</a></span>
with the main scene and camera. This render click is added to the
<a href=
"../../Programmer/Frame_Rendering_System/Frame_Rendering_System_Render_Step.htm">
render step</a> created by <span class=
"NDLSystemFont">ShaderEffect::Init</span>.</p>

<h2>Shutdown</h2>

<p>The default shutdown function <span class=
"NDLSystemFont">ShaderEffect::Shutdown</span> is called.</p>

<h2>UpdateScene</h2>

<p>This function simply calls <span class=
"NDLSystemFont">Update</span> on the scene.</p>

<h2>Enable</h2>

<p>Before calling the default enabling function <span class=
"NDLSystemFont">ShaderEffect::Enable</span>, the effect updates
the camera parameters to values appropriate for the scene and
sets the background color to sky blue.</p>

<p>Refer to <a href=
"ShaderSample_Platform_Considerations.htm">Platform
Considerations</a> for details on platform-specific issues.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
