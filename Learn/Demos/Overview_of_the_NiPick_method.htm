<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Overview of the NiPick Method</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Overview of the NiPick Method</h1>

<p>The <span class="NDLSystemFont">Picking</span> demo uses the
<span class="NDLSystemFont"><a href=
"../../Reference/NiCollision/NiPick.htm">NiPick</a></span> class
to perform a scene-graph based traversal of the world and
determine which objects have been hit by the ray generated from
the cursor's window position. The Gamebryo <span class=
"NDLSystemFont"><a href=
"../../Reference/NiCollision/NiPick.htm">NiPick</a></span> class
is a very powerful mechanism for determining the results of a ray
cast and can provide a wide variety of data in its results.
Depending on the amount of data that you wish to receive back,
you can tweak the performance of the picking method.</p>

<h2>How The NiPick Method Works</h2>

<p><span class="NDLSystemFont"><a href=
"../../Reference/NiCollision/NiPick.htm">NiPick</a></span> will
recurse through the scene graph hierarchy testing the bounding
sphere of the nodes in the hierarchy to determine if the spheres
intersect the ray. If the sphere and ray intersect, the picking
method can recurse into the geometry's triangle data to determine
which triangles intersect the picking ray. This triangle search
can be configured to include all triangles or only front-facing
triangles. The results are returned to the application using the
<span class="NDLSystemFont"><a href=
"../../Reference/NiCollision/NiPick__Record.htm">NiPick::Record</a></span>
data structure. This data structure can be queried for a variety
of per-vertex data, if the user specified that the data be
generated in the pick request.</p>

<h2>Limitations of the NiPick Method</h2>

<p>Triangle level picking is only possible if the Gamebryo
triangle geometry is available. Unless you created the
<span class="NDLSystemFont"><a href=
"../../Reference/NiMesh/NiDataStream.htm">NiDataStreams</a></span>
with the proper flags, loading the geometry will only place the
vertex information on the video hardware memory. These flags may
be set in the art packages (3DS Max, Maya) where the NIF files
are created.</p>

<p>Additionally, any vertex positions that are adjusted in the
process of rendering the object will not be part of the picking
code. This means that skinning and morphing of vertex data will
not be taken into account in the picking operation. This will
often generate odd results as the default non-animated vertex
data will be used in the pick operation. In this case,
approximations are used in the <span class=
"NDLSystemFont">NiPick</span> path, in the form of ABV geometry
or bounding volumes of bones (for skinned meshes). When more
exact data is needed, the best result is to use the <a href=
"Overview_of_the_Shader_Picking_Method.htm">shader-based</a>
picking mechanism specified in this sample.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
