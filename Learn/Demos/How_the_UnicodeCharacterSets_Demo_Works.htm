<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>How the UnicodeCharacterSets Demo Works</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>How the UnicodeCharacterSets Demo Works</h1>

<p>The main application code for the <span class=
"NDLSystemFont">UnicodeCharacterSets</span> demo, subclassed from
<span class="NDLSystemFont"><a href=
"../../Reference/NiSample/NiSample.htm">NiSample</a></span>, is
fairly straightforward. Its purpose is to demonstrate the
capability to display Unicode fonts through the Gamebryo
<span class="NDLSystemFont"><a href=
"../../Reference/NiFont/NiFont_Overview.htm">NiFont</a></span>
library.</p>

<p>The NFF file itself, from which the font configuration and
font texture information is streamed into the application to
create an <span class="NDLSystemFont"><a href=
"../../Reference/NiFont/NiFont_Overview.htm">NiFont</a></span>
instance, is created by the <span class="NDLSystemFont"><a href=
"../../Tools/NiFontCreator/NiFontCreator_Intro.htm">NiFontCreator</a></span>
tool.</p>

<p>Note that other strings in Gamebryo, such as file names, file
paths, object names, etc. remain in ASCII. Also, the capability
to display Unicode fonts is limited to 2-byte Unicode characters
(UTC-2).</p>

<h2>CreateScene</h2>

<p><span class=
"NDLSystemFont">UnicodeCharacterSets::CreateScene</span> calls
the base class version. Next, because the scene will have some
elements with alpha, it creates an <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMain/NiAlphaAccumulator.htm">NiAlphaAccumulator</a></span>
object so alpha gets sorted and drawn correctly. Then it loads a
NFF font file,
UnicodeCharacterSets\Data\Font\ArialUnicodeMS_BA_36.nff, to
create the <span class="NDLSystemFont"><a href=
"../../Reference/NiFont/NiFont_Overview.htm">NiFont</a></span>
instance. The NFF file was created using Gamebryo's <span class=
"NDLSystemFont"><a href=
"../../Tools/NiFontCreator/NiFontCreator_Intro.htm">NiFontCreator</a></span>
tool. Next, it loads the "welcome" and "options" Unicode strings
from text files and initializes the default setting to the
English version.</p>

<p>The configuration file,
UnicodeCharacterSets\Data\Font\CJK_Sample01.cfg, that was used to
create the NFF file could conceivably also be used to load the
Unicode strings into the application instead of using separate
Unicode text files, but this approach is not required and was not
done for this demo.</p>

<p>In addition, <span class="NDLSystemFont">CreateScene</span>
determines the location of text and point size based on screen or
window dimensions, since the demo must run on a variety of
platforms and/or screen or window dimensions. Finally, it sets up
the backdrop parchment and logo by calling <span class=
"NDLSystemFont">CreateScreenElements</span>.</p>

<h2>LoadWelcomeString, LoadOptionsString</h2>

<p>These member functions basically open Unicode text files for
reading using <span class="NDLSystemFont"><a href=
"../../Reference/NiSystem/NiFile.htm">NiFile</a></span>, set the
file to read as little Endian, and call <span class=
"NDLSystemFont">StreamWelcomeString</span> or <span class=
"NDLSystemFont">StreamOptionsString</span> to stream in the
respective strings.</p>

<h2>StreamWelcomeString, StreamOptionsString</h2>

<p>These member functions first load the byte order mark, a
two-byte sequence at the beginning of the Unicode encoded string,
to indicate that the encoded characters that follow it use big or
little endian byte order. Next, the welcome or options strings
are read in for all 4 languages. While it is preferable to use a
special character to delimit the individual strings, it is hard
to exclude a specific character to dedicate it for such a special
purpose. For that reason, this implementation merely counts a
specific number of characters to delineate each string.</p>

<h2>CreateScreenElements</h2>

<p><span class=
"NDLSystemFont">UnicodeCharacterSets::CreateScreenElements</span>
creates a screen texture for the Emergent logo and positions it
in the lower right corner. It also creates a screen element for a
background parchment texture, so it may be resized for different
window or screen dimensions, as well as console overscan.
Finally, <span class="NDLSystemFont">UpdateProperties</span> and
<span class="NDLSystemFont">Update</span> are called, since they
need to be called at least once.</p>

<h2>CreateUIElements</h2>

<p><span class=
"NDLSystemFont">UnicodeCharacterSets::CreateUIElements</span>
calls the base class version. An "Options" <span class=
"NDLSystemFont"><a href=
"../../Reference/NiUserInterface/NiUIGroup.htm">NiUIGroup</a></span>
object is created and a "Next Language" button is created to
represent the space bar, which selects the next language. Default
UI elements are created via a call to <span class=
"NDLSystemFont">AddDefaultUIElements</span>.</p>

<h2>SetNextLanguage</h2>

<p><span class=
"NDLSystemFont">UnicodeCharacterSets::SetNextLanguage</span>
determines the next language to display, adjusts the welcome and
options strings accordingly, and changes the log entry to reflect
the current language choice.</p>

<h2>CreateUIButton</h2>

<p><span class=
"NDLSystemFont">UnicodeCharacterSets::CreateUIButton</span>
creates a user interface button, given all the relevant
information needed to do so.</p>

<h2>RenderFrame</h2>

<p><span class=
"NDLSystemFont">UnicodeCharacterSets::RenderFrame</span> calls
the base class version. Next, it renders screen items that
include the background parchment texture and Emergent logo. Then,
it draws the appropriate for the current language selection.
Finally, it draws the user interface elements last, so they will
appear on top of everything else. The user interface options may
be collapsed or may be "turned off" by pressing the "Z" key.</p>

<p>Examples of Unicode fonts that include all the characters used
in this demo are Arial Unicode MS, Code2000, and SimSun. Arial
Unicode MS was chosen since it contains glyphs for all code
points within The Unicode Standard, Version 2.0. Arial Unicode MS
and SimSun are available with various Microsoft Office products
or may be purchased separately. Code2000 is available as
shareware, although a free evaluation period is offered.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
