<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>InputDemo Functional Overview</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>InputDemo Functional Overview</h1>

<h2>Basic Concepts</h2>

<p>The <span class="NDLSystemFont">InputDemo</span> is made up of
different 'info-screens' that are displayed to give the user
feedback on what is occurring with the system. Each info-screen
consists of up to six sub-screens that display the information
for the devices that are plugged in. While the focus of the demo
is not how the information is displayed, but how the information
is obtained, a short description will be given of how the screens
work.</p>

<h2>The InfoScreen and Sub-Screen classes</h2>

<h3>InfoScreen</h3>

<p>The <span class="NDLSystemFont">InfoScreen</span> class
contains the following members:</p>

<ul>
    <li>The width and height of the screen.</li>

    <li>A pointer to the <span class=
    "NDLSystemFont">NiInputSystem</span> instance for the
    application.</li>

    <li>A pointer to the <span class=
    "NDLSystemFont">NiFont</span> that should be used to create
    display strings.</li>

    <li>A set of <span class="NDLSystemFont">NiString2D</span>
    instances which represent the labels for the screen, and
    information on their color and positions.</li>

    <li>A collection of <span class=
    "NDLSystemFont">ControlInfoSubScreen</span> instances.</li>
</ul>

<p>Each <span class="NDLSystemFont">InfoScreen</span> has a
collection of functions which include the following:</p>

<ul>
    <li>An <span class="NDLSystemFont">Initialize</span> function
    that is used when the screen is created.</li>

    <li>Standard access functions for its members.</li>

    <li>A function to tell the screen to activate/deactivate,
    allowing for it to remove items from the screen space camera
    instance so they don't draw incorrectly.</li>

    <li>A <span class="NDLSystemFont">Render</span> function that
    is used by the application to tell the screen to draw
    itself.</li>

    <li>An <span class="NDLSystemFont">Update</span> function
    that is used by the application to tell the screen to update
    itself.</li>

    <li>A <span class="NDLSystemFont">HandleNewDevice</span>
    function that is used to inform the screen a new device has
    been plugged in.</li>

    <li>A set of functions for creating device-specific
    sub-screens.</li>
</ul>

<h3>ControllerInfoSubScreen</h3>

<p>The <span class="NDLSystemFont">ControllerInfoSubScreen</span>
class contains the following members:</p>

<ul>
    <li>The position of the sub-screen within the parent
    info-screen.</li>

    <li>A pointer to the <span class=
    "NDLSystemFont">NiFont</span> that is used to create display
    strings.</li>

    <li>Two arrays of <span class=
    "NDLSystemFont">NiString2D</span> instances which represent
    static and dynamic strings that are displayed.</li>
</ul>

<p>Each <span class=
"NDLSystemFont">ControllerInfoSubScreen</span> has a collection
of functions which include the following:</p>

<ul>
    <li>An <span class="NDLSystemFont">Initialize</span> function
    used when creating the sub-screen.</li>

    <li>A function to retrieve the input device associated with
    the sub-screen.</li>

    <li>A function to activate/deactivate the sub-screen.</li>

    <li>A <span class="NDLSystemFont">Render</span> function
    called by the parent info-screen to draw the sub-screen.</li>

    <li>An <span class="NDLSystemFont">Update</span> function
    called by the parent info-screen to update the
    sub-screen.</li>

    <li>A set of functions to create the static and dynamic
    string instances that contain the sub-screen
    information.</li>

    <li>A function to update the dynamic strings of the
    sub-screen, called by the <span class=
    "NDLSystemFont">Update</span> function.</li>
</ul>

<h3>Derived Screen Classes</h3>

<p>The following screens are derived from the <span class=
"NDLSystemFont">InfoScreen</span> class:</p>

<ul>
    <li>
        <b>ImmediateModeInfoScreen</b>&mdash;this screen
        demonstrates the input system being utilized in immediate
        mode. It contains the following derived sub-screens for
        the stated device types:

        <ul>
            <li>
            <b>KeyboardImmediateInfoSubScreen</b>&mdash;handles
            polling of a keyboard device and displaying the
            results.</li>

            <li><b>MouseImmediateInfoSubScreen</b>&mdash;handles
            polling of a mouse device and displaying the
            results.</li>

            <li>
            <b>GamePadImmediateInfoSubScreen</b>&mdash;handles
            polling of a game pad device and displaying the
            result.</li>
        </ul>
    </li>

    <li>
        <b>RumbleInfoScreen</b>&mdash;this screen demonstrates
        the input systems rumble functionality. It will contain
        the following derived sub-screen for any game pad devices
        which are present:

        <ul>
            <li><b>RumbleInfoSubScreen</b>&mdash;handles polling
            the state of the L1/R1 controls, and uses their
            corresponding value to set the rumble value of up to
            two motors on the game pad.</li>
        </ul>
    </li>

    <li>
        <b>ActionMapModeInfoScreen</b>&mdash;this screen
        demonstrates the input system being utilized in action
        mapping mode. This class contains a function which is
        called while processing the action data held by the
        system. The function updates the display strings
        indicating the action that occurs. It contains a single
        derived sub-screen which is used for all device types:

        <ul>
            <li><b>ActionMapModeInfoSubScreen</b>&mdash;handles
            displaying the strings indicating the action which
            occurred.</li>
        </ul>
    </li>

    <li><b>CallbackActionModeInfoScreen</b>&mdash;this screen
    demonstrates the input system using action mapping mode, but
    utilizes callbacks instead of enumerations. It also uses the
    <span class="NDLSystemFont">ActionMapModeInfoSubScreen</span>
    to display actions which occurred for each device.</li>
</ul>

<h2>General Application Flow</h2>

<p><span class="NDLSystemFont">InputDemo</span> is derived from
<span class="NDLSystemFont">NiApplication</span>, and follows the
format defined for that system. The <span class=
"NDLSystemFont">Initialize</span> function performs the usual
<span class="NDLSystemFont">Create*</span> calls, and then
creates the instances of the info screens it will be using.</p>

<p>The <span class="NDLSystemFont">OnIdle</span> call will
perform frame synchronization by checking the <span class=
"NDLSystemFont">MeasureTime</span> call for a <span class=
"NDLSystemFont">false</span> return value. If this is the case,
the function will quick out. If it returns <span class=
"NDLSystemFont">true</span>, then the application updates and
processes the input system. It next sets the current click count
in the LERCallback object if the Callback Action Map screen is
currently being displayed. The current screen is then updated,
which will update each sub-screen it contains. This is followed
by the standard rendering calls.</p>

<p><span class="NDLSystemFont">OnIdle</span> then polls the game
pad and/or keyboard for the screen switch control. If the screen
switch was triggered, the previous screen is set to inactive, the
correct action map for the next screen will be set, and the
screen is activated. If the exit screen is the displayed screen,
the exit conditions are also checked for by polling the
devices.</p>

<p>The <span class="NDLSystemFont">UpdateInput</span> function,
called from the <span class="NDLSystemFont">OnIdle</span>, will
use <span class="NDLSystemFont"><a href=
"../../Reference/NiInput/NiInputSystem.htm#NiInputSystem::UpdateActionMap">
NiInputSystem::UpdateActionMap</a></span> if the system is in
<span class="NDLSystemFont">MAPPED</span> mode, or <span class=
"NDLSystemFont"><a href=
"../../Reference/NiInput/NiInputSystem.htm#NiInputSystem::UpdateAllDevices">
NiInputSystem::UpdateAllDevices</a></span> if not. If a device
change has occurred, indicated by a return value of either
<span class="NDLSystemFont">DEVICELOST</span> or <span class=
"NDLSystemFont">DEVICECHANGE</span>, the application will walk
the device descriptions, and check to see if a different device
is present. If this is the case, the application will flag the
port on which the change occurred, and release the device
currently at that location. Once it has determined all the
devices that changed, it will open the new devices and inform
each info screen of the new devices via calls to the <span class=
"NDLSystemFont">InfoScreen::HandleNewDevice</span> function.</p>

<p>The <span class="NDLSystemFont">ProcessInput</span> function
will only perform processing when in one of the two action mapped
modes. In these cases, the application will loop, popping the
current action data queue entries and calling the appropriate
info screens <span class="NDLSystemFont">HandleActionData</span>
function. If any other screen is up, the polling of the devices
is left up to the info screen <span class=
"NDLSystemFont">Update</span> call.</p>

<h2>Action Map Creation</h2>

<p>The application creates three instances of the <span class=
"NDLSystemFont"><a href=
"../../Reference/NiInput/NiActionMap.htm">NiActionMap</a></span>
class. These include:</p>

<ul>
    <li>An empty map that is used to clear the actions from the
    system when the info screens utilize a polling method. The
    map named "EmptyMap" is created, but no actions are added to
    it.</li>

    <li>A map used when the <span class=
    "NDLSystemFont">ActionMapModeInfoScreen</span> is being
    displayed. This map, named "InputDemo", is filled with
    actions via the <a href=
    "../../Reference/NiInput/Setting_up_an_Action_Map.htm#The_Enumeration_Method">
    Enumeration Method</a>. Several different combinations of
    actions are inserted into this action map to demonstrate the
    power of the system. Please see the <span class=
    "NDLSystemFont">InputDemo::CreateActionMap</span> code
    details for complete details on the creation of this action
    map.</li>

    <li>A map is the one used when the <span class=
    "NDLSystemFont">CallbackActionModeInfoScreen</span> is being
    displayed. This map, named "CallbackActionMap", is filled
    with actions made up of callback-objects a-la the <a href=
    "../../Reference/NiInput/Setting_up_an_Action_Map.htm#The_Unique_Callback_Method">
    Unique Callback Method</a>. Please see the <span class=
    "NDLSystemFont">InputDemo::CreateCallbackActionMap</span>
    code details for complete details on the creation of this
    action map.</li>
</ul>

<h2>Common Sub-Screen Processing</h2>

<p>All sub-screens display the type and status of the device they
'own'. The status string will contain the status of the current
device, corresponding to its <span class="NDLSystemFont"><a href=
"../../Reference/NiInput/NiInputDevice.htm#NiInputDevice::Status">
NiInputDevice::Status</a></span> enumeration value.</p>

<h2>Immediate Mode Processing</h2>

<p>The following image shows the <span class=
"NDLSystemFont">ImmediateModeInfoScreen</span>:</p>

<div class="NDLFigureContainer">
    <img src="images/ImmediateMode_Screen.jpg" width="800"
    height="600" alt="ImmediateMode_Screen (79K)"> 
    <!-- <p class="NDLFigureCaption">{Figure caption}</p> -->
</div>

<p>The screen is made up of the label strings, and up to six
sub-screens depending on the number of devices plugged into the
operating hardware, and the type of device. Looking at the screen
above, you can see a game pad is plugged into port 4 and 0, a
keyboard is in port 6, and a mouse is in port 5.</p>

<p>The game pad sub-screens contains two cross-hair diagrams
showing the position of the left and right analog sticks. The
horizontal and vertical values of the sticks are also displayed
directly below the cross-hair diagrams. The cross-hairs utilize
the NiMeshScreenElements class to display the position of the
sticks. The <span class=
"NDLSystemFont">GamePadImmediateInfoSubScreen::Update</span>
function polls the analog sticks and sets the position of the
cross icon appropriately. The <span class=
"NDLSystemFont">GamePadImmediateInfoSubScreen::UpdateDynamicStrings</span>
function then polls each control on the game pad and fills in the
appropriate string with its value. Buttons receive an 'X'
indicating a digital press, or a 'O' indicating no digital press,
along with the actual analog value. Digital buttons will display
a 255 for the pressed state.</p>

<p>On PS3, this screen also displays the immediate value of the
SIXAXIS sensors.</p>

<p>The keyboard sub-screen will simply display any keys which are
pressed. This is taken care of by polling the state of each key
in the <span class=
"NDLSystemFont">KeyboardImmediateInfoSubScreen::UpdateDynamicStrings</span>
function.</p>

<p>The mouse sub-screen polls each axis and button on the device
and updates the strings in the <span class=
"NDLSystemFont">MouseImmediateInfoSubScreen::UpdateDynamicStrings</span>
function.</p>

<h2>Rumble Processing</h2>

<p>The following image shows the <span class=
"NDLSystemFont">RumbleInfoScreen</span>:</p>

<div class="NDLFigureContainer">
    <img src="images/Rumble_Screen.jpg" width="800" height="600"
    alt="Rumble_Screen (62K)"> 
    <!-- <p class="NDLFigureCaption">{Figure caption}</p> -->
</div>

<p>The screen is made up of the label strings, and up to six
sub-screens depending on the number of game pad devices plugged into the
operating hardware, as only game pads support rumble (at this
time). Looking at the screen above, you can see a game pad is
plugged into port 4 and 0, so there is a rumble sub-screen for
each of them. As a keyboard was in port 6, and a mouse was in
port 5, there are no sub-screens for those ports.</p>

<p>In the <span class=
"NDLSystemFont">RumbleInfoSubScreen::Update</span> function, the
L1 and R1 buttons of the game pad are sampled and used to set the
rumble values of the first two motors on the game pad. The
<span class=
"NDLSystemFont">RumbleInfoSubScreen::UpdateDynamicStrings</span>
function will set the display strings to show the current value
being used for each rumble motor.</p>

<h2>Action Map Mode Processing</h2>

<p>The following image shows the <span class=
"NDLSystemFont">ActionMapModeInfoScreen</span>:</p>

<div class="NDLFigureContainer">
    <img src="images/ActionMapMode_Screen.jpg" width="800"
    height="600" alt="ActionMapMode_Screen (62K)"> 
    <!-- <p class="NDLFigureCaption">{Figure caption}</p> -->
</div>

<p>The screen is made up of the label strings, and up to six
sub-screens depending on the number of devices plugged into the
operating hardware. The sub-screen class <span class=
"NDLSystemFont">ActionMapModeInfoSubScreen</span> is used
regardless of the device plugged in. The screen simply contains
an array of strings that hold the last six actions that were
generated by that device. These strings are set via the
<span class=
"NDLSystemFont">ActionMapModeInfoSubScreen::AddString</span>
function.</p>

<p>When this screen is the active one, the <span class=
"NDLSystemFont">InputDemo::ProcessInput</span> function will call
<span class=
"NDLSystemFont">InputDemo::ProcessActionMapMode</span>. This
function will simply pop all available actions off the queue via
the <span class=
"NDLSystemFont">NiInputSystem::PopActionData</span> function and
pass them to the <span class=
"NDLSystemFont">ActionMapModeInfoSubScreen::HandleActionData</span>
function. The app data is retrieved from the action data
instanced passed in, and used to add a display string identifying
the action that occurred. After the action has been handled, it
is returned to the input system action pool via the <span class=
"NDLSystemFont">NiInputSystem::ReleaseActionData</span>
function.</p>

<h2>Callback Action Mode Processing</h2>

<p>The following image shows the <span class=
"NDLSystemFont">CallbackActionModeInfoScreen</span>:</p>

<div class="NDLFigureContainer">
    <img src="images/CallbackActionMap_Screen.jpg" width="800"
    height="600" alt="CallbackActionMap_Screen (57K)"> 
    <!-- <p class="NDLFigureCaption">{Figure caption}</p> -->
</div>

<p>The screen is made up of the label strings, and up to six
sub-screens depending on the number of devices plugged into the
operating hardware. The sub-screen class <span class=
"NDLSystemFont">ActionMapModeInfoSubScreen</span> is used for
this screen as well, regardless of the device plugged in. The
screen simply contains an array of strings that hold the last six
actions that were generated by that device. These strings are set
via the <span class=
"NDLSystemFont">ActionMapModeInfoSubScreen::AddString</span>
function.</p>

<p>When this screen is the active one, the <span class=
"NDLSystemFont">InputDemo::ProcessInput</span> function will call
<span class=
"NDLSystemFont">InputDemo::ProcessCallbackActionMapMode</span>.
This function will simply pop all available actions off the queue
via the <span class=
"NDLSystemFont">NiInputSystem::PopActionData</span> function. The
app data is retrieved from the action data instanced passed in,
and cast to a <span class=
"NDLSystemFont">ActionCallbackObject</span> pointer. The
<span class="NDLSystemFont">ExecuteAction</span> function is
called on this pointer, which will add an action identifying
string to the sub-screen for the device that generated the
action.</p>

<p>The application derives two classes from the <span class=
"NDLSystemFont">ActionCallbackObject</span> base class. The first
is the <span class=
"NDLSystemFont">StartEscLeftPressCallbackObject</span> which is
triggered by the <span class="NDLSystemFont">START</span> button
on the game pad, the <span class="NDLSystemFont">ESCAPE</span>
key on the keyboard, or the <span class=
"NDLSystemFont">LEFT</span> button on the mouse. The <span class=
"NDLSystemFont">ExecuteAction</span> function of this derivation
will add the string "<span class="NDLSystemFont">START/ESC/LEFT
button pressed!</span>" to the sub-screen representing the device
that generated the action.</p>

<p>The second class is the <span class=
"NDLSystemFont">LUPEnterRightPressCallbackObject</span>, which is
triggered by the <span class="NDLSystemFont">LUP</span> button on
the game pad, the <span class="NDLSystemFont">ENTER</span> key on
the keyboard, or the <span class="NDLSystemFont">RIGHT</span>
button on the mouse. The <span class=
"NDLSystemFont">ExecuteAction</span> function of this derivation
will add a string informing the user of the applications click
count at the time the action was generated.</p>

<h2>Exit Screen</h2>

<p>The following image shows the <span class=
"NDLSystemFont">ExitAppInfoScreen</span>:</p>

<div class="NDLFigureContainer">
    <img src="images/Exit_Screen.jpg" width="800" height="600"
    alt="Exit_Screen (30K)"> 
    <!-- <p class="NDLFigureCaption">{Figure caption}</p> -->
</div>

<p>This screen contains no sub-screens. It is displayed to
provide the user with the ability to exit the application. When
this screen is active, the <span class=
"NDLSystemFont">InputDemo::OnIdle</span> function will check for
the appropriate exit conditions on each game pad or the keyboard,
and if present, will exit.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
