<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>CharacterAnimation Demo Code Overview</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<h1>CharacterAnimation Demo Code Overview</h1>

<p>The following are the principal classes that are utilized in
the <span class="NDLSystemFont">CharacterAnimation</span>
demo:</p>

<ul>
  <li><span class="NDLSystemFont">NiActorManager</span>&mdash;This class allows the application to easily control the many artist-generated animation sequences available in Momma. The application simply needs to provide the actor manager with a single "event code" that tells the manager what sequence to use during a given animation. The <span class="NDLSystemFont">NiActorManager</span> class handles all of the complexities of animation blending and transitioning.</li>
  
  <li><span class="NDLSystemFont">NiActorManager</span>&mdash;This class provides a callback system for applications to manage animation sequence events. In the <span class="NDLSystemFont">CharacterAnimationDemo</span>, the walk and run animation sequences were tagged with "text keys" to identify when in those sequences Momma's feet strike the ground. <span 
   class="NDLSystemFont">CharacterAnimationDemo</span> implements a very basic footprint mechanism to demonstrate this functionality; a left or right footprint becomes visible when these events occur. When one footprint is made visible, the other disappears. (We recommend something more advanced and artistic in terms of application behavior for games that want to have their characters leave footprints behind them).</li>
  
  <li><span class="NDLSystemFont">NiSkinningLODController</span>&mdash;This class gives the application control over the number of bones that are used to deform Momma's skin. BoneLOD allows an application to dynamically adjust how many bones in a skeleton affect its skin. It allows both the polygon count of the mesh and the number of bones to be swapped out at run-time by switching between levels of detail.</li>
</ul>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
<li><a href="CharacterAnimationDemo_overview.htm">CharacterAnimation Demo Overview</a></li>
<li><a href="CharacterAnimationDemo_art.htm">CharacterAnimation Demo Art Asset Details</a></li>
</ul>


<!--kadov_tag{{<placeholder id="footer">}}-->
</body>

</html>
