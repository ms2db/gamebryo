<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>PhysX Fluids Demo Code Overview</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Build" content="PhysX" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>PhysX Fluids Demo Code Overview</h1>

<p>This section details the functionality of significant member
functions of the <span class="NDLSystemFont">PhysXFluids</span>
class that implements the demo.</p>

<h2>PhysXFluids::Initialize</h2>

<p><span class="NDLSystemFont">Initialize</span>, like most
Gamebryo-PhysX applications, first creates the PhysX SDK object
via the <span class="NDLSystemFont"><a href=
"../../Reference/efdPhysX/efdPhysX__PhysXSDKManager.htm">efdPhysX::PhysXSDKManager::Initialize</a></span>
function. We must create the PhysX SDK before calling
<span class="NDLSystemFont">NiApplication::Initialize</span>
because the latter creates PhysX objects via <span class=
"NDLSystemFont">CreateScene</span>. We also set several SDK
parameters including those for debug visualization of fluid
simulation data. Note that initially the visualization parameters
are all set to 0 to prevent the PhysX SDK from generating debug
geometry that is not needed.</p>

<h2>PhysXFluids::CreateScene</h2>

<p><span class="NDLSystemFont">CreateScene</span> checks for
hardware then loads the NIF file. The function than locates a
camera and the <span class="NDLSystemFont"><a href=
"../../Reference/NiPhysX/NiPhysXProp.htm">NiPhysXProp</a></span>
object.</p>

<p>Before instantiating the PhysX content we modify some of the
fluid properties stored in the snapshot. This is common practice
for fluid simulations because the streamed fluid properties are
all set to their default values. We obtain the snapshot which is
a fluid-specific version, <span class="NDLSystemFont"><a href=
"../../Reference/NiPhysXFluid/NiPhysXFluidPropDesc.htm">NiPhysXFluidPropDesc</a></span>.
From this we get the <span class="NDLSystemFont"><a href=
"../../Reference/NiPhysXFluid/NiPhysXFluidDesc.htm">NiPhysXFluidDesc</a></span>
object which contains the fluid simulation properties. We edit
some of these properties related to the interactions with
other objects in the scene.</p>

<p>We then create an <a href=
"../../Reference/NiPhysX/NiPhysXScene.htm"><span class=
"NDLSystemFont">NiPhysXScene</span></a> object, and <span class=
"NDLSystemFont">NxScene</span> object, and add the fluid prop to
the scene. We use the presence of hardware detected earlier to
decide if this will be a hardware or software scene. All the
connections between Gamebryo and PhysX are automatically set up.
Finally, the function activates sources and destinations.</p>

<h2>PhysXFluids::UpdateFrame</h2>

<p><span class="NDLSystemFont">UpdateFrame</span> is a standard
asynchronous Gamebryo-PhysX update function. No special action is
required for a fluid simulation - the existing scene graph update
and source and destination updates perform all the necessary
work.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
