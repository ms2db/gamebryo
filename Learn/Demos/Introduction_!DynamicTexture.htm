<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Introduction to the DynamicTexture Demo</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Introduction to the DynamicTexture Demo</h1>

<p>This demo shows how to use the Gamebryo <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMain/NiDynamicTexture.htm">NiDynamicTexture</a></span>
class with dynamically changing texture data. Use of a dynamic
texture is one of the ways to implement so-called "procedural
texturing" in Gamebryo. Procedural texturing is any effect in
which the texture applied to an object is not simply loaded from
an image file and used directly, but is instead generated
on-the-fly using some per-texel algorithm. The texture may be
computed once, at load time (a static procedural texture) or may
be recomputed per-frame at runtime (a dynamic procedural
texture).</p>

<p>This sample demonstrates a dynamic procedural texture,
implemented in a cross-platform manner in Gamebryo. The code
generates an animated, cloud-like texture that is mapped onto a
single <a href=
"../../Reference/NiMesh/NiMeshScreenElements.htm"><span class=
"NDLSystemFont">NiMeshScreenElements</span></a> object, which is
the only object rendered by the sample. The overall effect in
this case is to create the impression of moving, layered
clouds.</p>

<p>Although secondary to the purpose of this demo, the actual
procedure used to generate the texture is a version of "Perlin
noise" (Ken Perlin, SIGGRAPH '85, "An Image Synthesizer",
pp287-296; the method is explained in more detail in most modern
3D graphics texts). Perlin noise is a method of generating
multidimensional, coherent noise, which can be used across
multiple frames without any random, temporal "shimmering".</p>

<p>This sample demonstrates code that will work without
modification across all platforms, and is likely a good initial
basis for creating procedural textures.</p>

<p>Changing texel data of a device texture on the host processor,
especially on a per-frame basis, can be expensive, both in terms
of host processor cycles and memory bandwidth. Even so, changing
texel data in a <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiDynamicTexture.htm">NiDynamicTexture</a></span>
is much faster than changing texel data in a <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMain/NiSourceTexture.htm">NiSourceTexture</a></span>
object's application-level <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiPixelData.htm">NiPixelData</a></span>
object and causing it to get updated. However, using a
<span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiDynamicTexture.htm">NiDynamicTexture</a></span>
may not be quite as fast as using a <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMain/NiRenderedTexture.htm">NiRenderedTexture</a></span>
(which enables a texture to be specified as the target of any
Gamebryo scene rendering) because of the bus bandwidth.</p>

<p>In addition, applications that will only run on Direct3D Pixel
Shader-capable hardware should also consider the option of using
a Pixel Shader to implement procedural textures. Examples of such
shaders are available from 3D hardware vendors and on the
web.</p>

<div class="NDLFigureContainer">
    <img src="images/DynamicTextures.jpg" width="515" height=
    "400" alt="DynamicTextures (22K)"> 
    <!-- <p class="NDLFigureCaption">{Figure caption}</p> -->
</div>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
