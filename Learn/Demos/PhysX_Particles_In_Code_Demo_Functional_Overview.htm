<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>PhysX Particles-In-Code Demo Functional Overview</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Build" content="PhysX" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>PhysX Particles-In-Code Demo Functional Overview</h1>

<p>This demo creates all content in software. We focus on the
creation of the PhysX-based particle system and its runtime
management.</p>

<h2>Detecting PhysX Hardware</h2>

<p>The <span class="NDLSystemFont">getHWVersion()</span> in the
PhysX SDK object returns 0 if there is no hardware present. This
is the simplest way to check for PhysX hardware. You can also try
creating a <span class="NDLSystemFont">NxScene</span> object with
hardware simulation parameters and test if it fails.</p>

<h2>Creating a PhysX Particle System in Software</h2>

<p>Creating a PhysX-based particle system is almost identical to
creating a regular Gamebryo particle system, except that some
modifiers must be PhysX-specific and you must specify an actor to
use for the particles. See <a href=
"../../Programmer/NiParticle/Particle_System_Programmatic_Creation.htm">
Programmatic Particle System Creation</a> for details on creating
a regular Gamebryo particle system, from which much of this demo
derives.</p>

<h2>Resetting a PhysX Particle Simulation</h2>

<p>This application allows for simulation reset. The snapshot on
which the reset is based is created at the same time the PhysX
content is created. The descriptor for the scene itself is saved
in the snapshot along with a descriptor for the box actor. These
are the only elements of the scene that need to be reset via the
snapshot. The snapshot does not include the particle actors,
because they can be reconstructed from the particle system.</p>

<h2>Updating PhysX Particles</h2>

<p>In addition to standard Gamebryo scene graph updating, an
application with PhysX content must also explicitly update the
PhysX scene. The process is not automated because there are many
possible variants on how this is done, each with different
implications for performance and appearance. See <a href=
"../../Programmer/NiPhysX/Basic_PhysX_Updating_Tasks.htm">Updating
Gamebryo-PhysX</a> for more details. A PhysX-based particle
system includes destinations of PhysX content, so <span class=
"NDLSystemFont">UpdateDestinations</span> must be called on the
<span class="NDLSystemFont"><a href=
"../../Reference/NiPhysX/NiPhysXScene.htm">NiPhysXScene</a></span>
object, in addition to <span class=
"NDLSystemFont">Simulate</span> and <span class=
"NDLSystemFont">FetchResults</span>.</p>

<p>Physical simulation in this example is asynchronous.</p>

<h2>PhysX Debug Visualization</h2>

<p>The PhysX API supports the production of debugging geometry,
useful for visualizing the system state as the physics engine
sees it. Gamebryo can process and render this geometry for you
simply by setting the appropriate flag on the <span class=
"NDLSystemFont"><a href=
"../../Reference/NiPhysX/NiPhysXScene.htm">NiPhysXScene</a></span>
object. Note that this can have a major negative impact on
performance, as this demo shows. You will also see that PhysX
hardware does not produce all the possible debug output. In this
example, collision shapes are not produced if on hardware.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
