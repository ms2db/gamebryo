<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>SimpleApp Demo Code Description</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>SimpleApp Demo Code Description</h1>

<p>Implementation varies from platform to
platform, so it is not useful to describe the code in depth here.
The source code can be referred to for specific details, but the
general methodology of the sample is easy to understand.</p>

<p>First, the platform-dependent
initializations occur. This can include initializing the run-time
environment, preparing the message loop, and creating a suitable
window. Command-line arguments or initialization files should be
consulted in this part of the code to determine how the initial
state of the program should be created.</p>

<p>Then, the Gamebryo initializations occur.
First, an <span class="NDLSystemFont">NiCamera</span> is created,
and then an <span class="NDLSystemFont">NiRenderer</span> object
to act as the main renderer. Once this is complete, the initial
scene can be built, whether programmatically, through NIF files,
or using both methods. The parts then need to be connected so the
<span class="NDLSystemFont">NiCamera</span> knows where the
<span class="NDLSystemFont">NiRenderer</span> object and scene
graph are. At this point, it is usually a good idea to do an
initial <span class="NDLSystemFont">Update</span> call on the
scene.</p>

<p>After the Gamebryo components and scene are
initialized, the message loop of the program can begin. This
section is usually of the form:</p>
<pre>
while (bProgramNotDone)
{
    HandleUserInteraction();
    UpdateSceneBasedOnInteraction();
 
    spRenderer-&gt;BeginFrame();
 
    spRenderer-&gt;BeginUsingDefaultRenderTargetGroup(NiRenderer::CLEAR_ALL);
    NiDrawScene(spCamera, spScene, kCuller);
    spRenderer-&gt;EndUsingRenderTargetGroup();
 
    spRenderer-&gt;EndFrame();
    spRenderer-&gt;DisplayFrame();
}
</pre>

<p>Once the application has completed, it must
begin cleaning up after itself. Gamebryo objects should be
deleted, including the scene graph, <span class="NDLSystemFont">NiRenderer</span> object, and
<span class="NDLSystemFont">NiCamera</span>. Then the program
can free any system resources it is using, and exit the program
entirely.</p>

<p>Note that a call to <span class="NDLSystemFont">NiInit()</span> must precede any calls to Gamebryo
interfaces, and that <span class="NDLSystemFont">NiShutdown()</span>
must be called prior to application exit, but after the last call
to any Gamebryo function.  All Gamebryo objects must be deleted
prior to the call to <span class="NDLSystemFont">NiShutdown()</span>.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
