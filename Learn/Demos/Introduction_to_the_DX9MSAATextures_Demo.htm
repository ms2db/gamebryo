<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Introduction to the DX9MSAATextures Demo</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Introduction to the DX9MSAATextures Demo</h1>

<p>This sample demonstrates how to render to textures with
multisampled antialiasing (MSAA) enabled in Gamebryo using the
<span class="NDLSystemFont"><a href=
"../../Reference/NiDX9Renderer/Introduction_to_the_DX9Renderer.htm">
NiDX9Renderer</a></span>.</p>

<p>Gamebryo's <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiRenderedTexture.htm">NiRenderedTexture</a></span>
class has a multisampling hint associated with it, which the DX9
renderer does not honor. In DX9, it is not possible to render
directly to a texture with MSAA enabled, because the textures
aren't formatted to be able to hold multiple samples per pixel.
This means that any rendering techniques that make use of
rendered textures won't be able to get the benefit of using
MSAA.</p>

<p>Fortunately, there is a workaround. Instead of rendering to a
texture, DX9 will allow an application to create and draw to a
render target surface that does have MSAA enabled. An application
can then copy the data from that render target surface to a
rendered texture. This process will cause the rendered data to be
downsampled, so that the data can be used in a texture, but the
rendered image still has the visual improvement that MSAA
enables.</p>

<p>The DX9MSAATextures sample demonstrates how to use this
workaround in Gamebryo. A simple scene is rendered to a texture,
and that texture is applied to a full-screen geometry object so
the image will appear on screen. The use of full-screen geometry
objects is common when using pixel shaders to do post-processing
effects (as in the <a href="GlowEffect.htm">GlowEffect</a> portion of the
<a href="Overview_!ShaderSample.htm">ShaderSample</a> demo, or
in <a href="../FullDemos/MetalWars_Overview.htm">MetalWars</a>), but
MSAATextures doesn't use a pixel shader so that the rendered
texture (and any aliasing artifacts) can be more clearly
seen.</p>

<p>The sample can either render the scene directly to the
rendered texture, or it can make use of an intermediate render
target. If the sample was created with MSAA enabled, then the
intermediate render target will also be created with that same
level of MSAA. Hitting the space bar or the R_DOWN button on a
gamepad will switch between these two modes, which will make it
appear that MSAA is being enabled or disabled. Note that if the
application is initialized without MSAA enabled, then the
rendered scene will look the same whether the sample is rendering
directly to the texture or through the intermediate surface.</p>

<div class="FigureContainer">
    <img src="images/DX9MSAATextures.jpg" width="515" height=
    "400" alt="DX9MSAATextures (52K)"> 
    	<p class="FigureCaption">DX9MSAATextures Demo</p>
</div>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
