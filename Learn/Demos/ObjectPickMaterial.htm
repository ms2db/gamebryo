<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>ObjectPickMaterial</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>ObjectPickMaterial</h1>

<p>The <span class="NDLSystemFont">ObjectPickShader</span> is in
charge of assigning a shader to each object that will draw it
using a unique ID color.</p>

<h3>ObjectPickMaterial (Constructor)</h3>

<p>The constructor first queries the renderer to find out if it
is running SM2.0-capable hardware, as this will determine which
set of shaders is used. When this is done, the function calls
<span class="NDLSystemFont">LoadShaders</span> to read in the
shaders that will be used.</p>

<h3>Create</h3>

<p>The standard <span class="NDLSystemFont">Create</span>
function for <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiMaterial.htm">NiMaterial</a></span>-derived
objects is to first check for an existing instance of the
material (identified by name) and return that one. If no such
material exists already, a new instance is created and
returned.</p>

<h3>IsShaderCurrent</h3>

<p>This function, used to determine if a cached shader is correct
for the given situation, simply calls <span class=
"NDLSystemFont">GetCurrentShader</span> because that function is
so simple.</p>

<h3>GetCurrentShader</h3>

<p>This function first loads the shaders, if necessary. Then, it
performs a simple check: if the shader is capable of SM2.0, then
it will return either the skinned or the unskinned version of the
<span class="NDLSystemFont">ObjectPickBinaryShader</span> shader;
otherwise, it returns the <span class=
"NDLSystemFont">FixedFunctionPickShader</span>.</p>

<h3>UnloadShaders</h3>

<p>This function simply releases all the shaders the material was
holding on to.</p>

<h3>LoadShaders</h3>

<p>This function loads in the shaders that the material will
need. If the hardware supports SM2.0, then it will load the
<span class="NDLSystemFont">ObjectPickBinaryShader</span> shaders
using the <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiShaderFactory.htm">NiShaderFactory</a></span>,
otherwise, it will create a new <span class=
"NDLSystemFont">FixedFunctionPickShader</span> instance. Either
way, the function will provide a pointer to the <span class=
"NDLSystemFont">ColorPicker</span> object so the shader can call
<span class="NDLSystemFont">GetColorForObject</span>, and will
then call <span class="NDLSystemFont">Initialize</span> on the
shaders.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
