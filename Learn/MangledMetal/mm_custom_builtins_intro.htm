<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>MangledMetal custom built-ins</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type=
"text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>MangledMetal custom built-ins</h1>

<p>MangledMetal defines a few custom C++ built-ins for its Lua code to call.
Time-intensive calls and calls that require a C++ caller should be made via
built-ins.</p>

<table>
    <thead>
        <tr>
            <th>Built-in</th>

            <th>Built-in Set</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>GetEntitiesByProximity(entity, radius)</td>

            <td>MmWorldServiceBuiltins</td>

            <td>Compute a list of all the entities within a given radius of a
            given entity. Used by the combat AI to detect enemies.</td>
        </tr>

        <tr>
            <td>GetEntitiesInArc(entity, radius, arc)</td>

            <td>MmWorldServiceBuiltins</td>

            <td>Compute a list of all the entities within a given radius of a
            given entity that fall within the specified arc. Used by the combat
            system to determine who takes damage from a given attack.</td>
        </tr>

        <tr>
            <td>PrintDebugString(string)</td>

            <td>MmWorldServiceBuiltins</td>

            <td>Print a string to the debug log. Your code should probably use
            BehaviorAPI.LogMessage or BehaviorAPI.LogError instead of this
            built-in.</td>
        </tr>

        <tr>
            <td>QuitProgram(rc)</td>

            <td>MmWorldServiceBuiltins</td>

            <td>Terminate MangledMetal with the specified return code. Used by
            unit tests to quit the program after a given time.</td>
        </tr>

        <tr>
            <td>Random()</td>

            <td>MmWorldServiceBuiltins</td>

            <td>Returns a random floating point number in the range 0.0 to 1.0,
            including the endpoints.</td>
        </tr>

        <tr>
            <td>HideRegion(region)</td>

            <td>MmOcclusionBuiltins</td>

            <td>Hides the specified region by region number. All environmental
            assets mapped to that region number will be hidden, saving
            rendering time.</td>
        </tr>

        <tr>
            <td>ShowRegion(region)</td>

            <td>MmOcclusionBuiltins</td>

            <td>Shows the specified region by region number. Environmental
            assets mapped to that region number will be shown.</td>
        </tr>

        <tr>
            <td>ComputeWalk(entity, goal, result)</td>

            <td>MmWalkableBuiltins</td>

            <td>Decide whether an entity can walk to a given point. Returns the
            closest point the entity can walk to based on walkable/nonwalkable
            regions. Both 'goal' and 'result' are 3D vectors. Note that this
            built-in is not actually used in the code since C++ code does the
            path calculations for entities, but it is a good example of how
            this COULD be done in script.</td>
        </tr>
    </tbody>
</table>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
