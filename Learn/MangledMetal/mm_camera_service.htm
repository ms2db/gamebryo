<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>MangledMetal Camera Service</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>MangledMetal Camera Service</h1>

<p>The MangledMetal Camera Service (MmCameraService) is
responsible for managing gameplay camera entity built-ins. A
built-in model is a user-defined C++ object that is associated
with an instance of an entity. In MangledMetal, entities of model
MMCamera are associated with objects of class MmCamera as defined
in <span class="NDLSystemFont">MmCamera.h</span>.</p>

<p>When MmCameraService is initialized, it
registers an MMCamera built-in factory with the
GameFramework FlatModelManager. Later, when MmWorldService
initializes the world instance, it creates an MMCamera entity and
registers it with the EntityManager. Because the MMCamera model
specifies the BuiltinModel trait, the
MMCamera built-in factory is then called to create an
instance of the associated built-in class.</p>

<p>When the MMCamera built-in is created, the
MmCameraService assigns it an integer handle. The first MMCamera
that is created will be assigned the value 0, which is used as
the default gameplay camera handle. Note that this is the only
MMCamera instance that MangledMetal creates, although the
mechanism to handle more is provided for experimentation.
MmCameraService::kMaxCameras defines the maximum number of
MMCamera built-ins that are supported. When this limit is
reached, no more built-ins can be created until others are
destroyed. It also
provides a service interface to its built-ins. It does not
destroy them, however. The GameFramework is responsible for the
lifetime of built-ins from the moment they are created
via the built-in factory.</p>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
<li><a href="mm_services_overview.htm">MangledMetal services overview</a></li>
<li><a href="mm_character_service.htm">MangledMetal Character Service</a></li>
<li><a href="mm_hud_service.htm">MangledMetal HUD Service</a></li>
<li><a href="mm_walkable_service.htm">MangledMetal Walkable Service</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
