<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Adding a new physical prop to MangledMetal</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->

<!--(Begin Links)===================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type=
"text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Adding a new physical prop to MangledMetal</h1>

<p>Since MangledMetal uses <a href=
"../../Programmer/CoreRuntimeServices/core_services_ecrPhysX.htm">ecrPhysX</a>
to integrate PhysX with the Game Framework, you can manage game physics with
EMT models and World Builder data. Here's a simple example of building a new
object in 3dsMax, giving it physics, and adding it to the game. You can carry
out the same operations in Maya; Maya and its PhysX plugin will be different,
but the Gamebryo Export interface should be identical.</p>

<p>First, creating the new asset:</p>

<ol>
    <li>Launch 3dsMax with the Gamebryo and PhysX plugins installed.</li>

    <li>Create a sphere.

        <ol>
            <li>Since MangledMetal is modeled in centimeters, set the radius
            100.</li>

            <li>The snap-to-surface and align-to-surface options in <a href=
            "../../Tools/WorldBuilder/wb_intro.htm">World Builder</a> will
            control the location of the origin of our Nif file. If we wanted to
            use these options, we would need to be careful to position the
            sphere so that its bottom was located exactly at the origin.
            Alternately, we could specify <a href=
            "../../Tools/WorldBuilder/wb_entity_snapping.htm">snap points</a>
            to tell World Builder to use a non-default location for
            alignment.</li>
        </ol>
    </li>

    <li>Make it physical:

        <ol>
            <li>Open the Utilities tab and the PhysX Control Panel.</li>

            <li>With your sphere selected, click on "Make Physical/Edit". Use
            the Rigid Body Properties pane to edit any parameters you want to
            change (mass <b>or</b> density, friction, perhaps an initial spin
            or velocity), then click "Add Selected". 3dsMax should pause for a
            moment as the PhysX scene is initialized.</li>
        </ol>
    </li>

    <li>Export it:

        <ol>
            <li>Click on the "Gamebryo Export" icon at the top left. Name the
            file "sphere.nif".</li>

            <li>For the Process Script, select "Default PhysX Export"</li>

            <li>From the Plugin List for Current Script, double click on PhysX
            Extractor Plug-in. The plug-in list can be displayed by clicking
            the "Edit" button beside the name of the process script.</li>

            <li>Set the scale to 0.01 (since we've modeled in centimeters, but
            want to run the PhysX simulation in meters). Click OK/Yes through
            the dialogs and your NIF should be saved.</li>
        </ol>
    </li>

    <li>Copy the new nif file into <span class=
    "NDLSystemFont">Samples\GameDemos\MangledMetal\Data\MangledMetal\GamebryoData\Generic\Props\</span>.</li>
</ol>

<p>Now, adding it to the world:</p>

<ol>
    <li>Launch Toolbench, and open <span class=
    "NDLSystemFont">MangledMetal.gsl</span> from the directory <span class=
    "NDLSystemFont">%EMERGENT_PATH%\Samples\GameDemos\MangledMetal\Data</span>.
    Make sure the file <span class="NDLSystemFont">Level03.block</span> is
    writeable since we will be editing it. Also make sure that the contents of
    the directory <span class="NDLSystemFont">MangledMetal\Exported</span> are
    writeable. This directory contains the xblock file that we will be
    exporting.

        <ol>
            <li>If we were going to add many copies of this sphere to the
            world, we might use EMT to create a new Preset in <span class=
            "NDLSystemFont">MangledMetal.emtproj</span>. Since we're only
            adding one, we'll use an existing Model, changing it to instantiate
            our new sphere.</li>
        </ol>
    </li>

    <li>In the Game Solution tab, double-click on <span class="NDLSystemFont">Level03.block</span>.
		This will load the block file in World Builder, which will take a moment.

    <img src="images/choose-level03.png" width="1158" height="673">
    </li>

    <li>Move the camera near the player's spawn point.</li>

    <li>Turn off Snap To Surface by activating Free Placement. This will leave
    the object floating in mid-air, but since it is physical, once the game
    loads it will fall to the ground.<br>
    <br>
    <img src="images/select-freeplacement.png"></li>

    <li>From the Palette View, drag a <span class="NDLSystemFont">MMPhysXProp</span>
		into the world near the spawn point. This creates a new entity, and its
		properties should be displayed in the Entity Editor pane on the right.
		Since it has no runtime graphical representation yet, all you will see in
		the world is a set of coordinate axes.

        <ol>
            <li>If you do not see the Palette, open it by choosing View-&gt;
						Palette View.</li>

            <li>You can find <span class="NDLSystemFont">MMPhysXProp</span>
						faster by typing <span class="NDLSystemFont">MM</span> into the
						Filter edit box at the top of the Palette View.</li>

            <li>If you accidentally deselect the entity, the axes will
            disappear; choose View-&gt; Entity View and select the entity named
            <span class="NDLSystemFont">MMPhysXProp0</span> in the top of the
						hierarchy to make the axes reappear.<br></li>
        </ol>
				<img src="images/add-mmphysxprop.png" width="1158" height="673">
    </li>

    <li>Your new entity mixes in the <span class="NDLSystemFont">Mesh</span>
		model, which has a <span class="NDLSystemFont">NifAsset</span> property
    that is currently set to <span class="NDLSystemFont">No Asset Defined</span>.
		Click on the ellipsis button (...) next to that
    property, and select your new Nif file. Once the file is verified as a
    valid asset, you should be able to see the new sphere in the world. Make
    sure it is above ground.

        <ol>
            <li>If you need to move it, you can activate the Translation Gizmo
            (yellow cone and blue arrow button) and drag the axes.</li>
        </ol>
    </li>

    <li>There are a number of other properties you may want to adjust. For
    example:

        <ol>
            <li><span class="NDLSystemFont">PhysXProp::InteractWithTriggers</span>,
						if set to true, will allow this sphere to set off scripted triggers.
						The player could then use the sphere to open gates or spawn enemies
						by rolling it towards triggers.</li>

            <li><span class="NDLSystemFont">Placeable::Scale</span> will change
						the size at which the sphere is rendered, but it will <b>not</b>
						change the size of the object in the physics simulation.</li>

            <li><span class="NDLSystemFont">Shadowable::IsCastingShadow</span>
						can be set to <span class="NDLSystemFont">False</span> to improve
            performance, or <span class="NDLSystemFont">IsReceivingShadow</span>
						can be set to <span class="NDLSystemFont">True</span> to improve
            appearance.</li>
        </ol>

        <img src="images/finished-block.png" width="1158" height="673">
    </li>

    <li>Save the block. (This will also write an xblock file into the Exported
    directory, which is the representation loaded by your game at
    runtime.)</li>
</ol>

<p>Finally, viewing it in the game:</p>

<ol>
    <li>Launch MangledMetal. You should see the sphere in the world, obeying
    game physics.</li>

    <li>If you run a Debug or Release build of MangledMetal, you can continue
    editing the game in Toolbench and see the results of your editing show up
    in the game every time you export from World Builder, or edit the art in
    3dsMax and see the new shape showing up every time you export from the DCC
    tool.</li>
</ol>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
    <li><a href="mm_adding_custom_trigger.htm">Adding a custom trigger type to
    MangledMetal</a></li>

    <li><a href="mm_adding_enemy.htm">Adding a new enemy type to
    MangledMetal</a></li>

    <li><a href="mm_block_mangledmetal.htm">Mangled Metal Blocks
    Detail</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
