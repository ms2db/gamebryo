<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>MangledMetal Spawn Points</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type=
"text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>MangledMetal Spawn Points</h1>

<h2>Spawn Points</h2>

<p>Spawning of enemies in MangledMetal is basically handled in two ways. Some
entities are present when the world is first loaded; these are created in the
Block file with specific positions. They don't really "spawn", they are created
in place and their AI scripts begin running immediately.</p>

<p>MangledMetal does feature a dynamic spawning object, though - the Spawn
Temple. The Spawn Temple creates enemies on a regular basis. It has a number of
features controlled via properties.</p>

<ul>
    <li>The Spawn Temple supports a maximum active spawn count, and it tracks
    its spawns. If it has too many active children, it will stop spawning. If
    one of its children dies, it will spawn a replacement.</li>

    <li>The temple can be disabled via one or more calls to a Disable( )
    behavior. Any action in the world can trigger the Disable( ) call. In the
    demo, there are two destructible objects that must be destroyed in order to
    disable the spawn temple; each calls Disable( ) once, and the temple is set
    up to quit spawning after Disable( ) is called twice.</li>

    <li>The temple determines what model to spawn based on a property. Hence,
    you can easily change what enemies come out of the temple, even at
    runtime.</li>

    <li>Models that are spawned walk to a predetermined waypoint, and from
    there continue into a waypoint patrol pattern that you can choose.</li>

    <li>The temple plays an animation when it spawns an entity, and another
    when that entity reports that it has reached its initial way point. This
    lets us open and close the temple doors at appropriate times.</li>
</ul>

<p>The spawn temple construct uses the following models:</p>

<table>
    <thead>
        <tr>
            <th>Model Name</th>

            <th>Description</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><a href="MangledMetal__SpawnTemple.htm">SpawnTemple</a></td>

            <td>The Spawn Temple entity itself. The temple instance in
            MangledMetal is set up so that two calls to Disable() must be made
            to disable it. This is done via the 'RequiredDisableRequests'
            property. It has an associated SpawnTempleWaypoint directly outside
            the front doors, set via the 'InitialWaypoint' property; new spawns
            path to this point before re-enabling the temple.</td>
        </tr>

        <tr>
            <td><a href=
            "MangledMetal__SpawnTempleWaypoint.htm">SpawnTempleWaypoint</a></td>

            <td>The initial waypoint to which the spawned entities move. This
            model has special code to report back to the SpawnTemple when the
            entity reaches it; make sure never to use a SpawnTempleWaypoint in
            a regular waypoint network.</td>
        </tr>

        <tr>
            <td><a href="MangledMetal__SoulCage.htm">SoulCage</a></td>

            <td>The Soul Cage is an object in the game that can be destroyed.
            When it is destroyed, it runs an OnDeath behavior that can invoke
            an arbitrary behavior on another, related object. The behavior is
            specified by property 'NotifyBehaviorName'; the related object is
            'EntityToNotify'. In the case of the spawn temple instance in
            MangledMetal, there are two soul cages, each of which point to the
            SpawnTemple instance as their EntityToNotify. They call the
            Disable() behavior on the SpawnTemple. Since the SpawnTemple is set
            up to require two calls to Disable() to actually turn it off, both
            soul cages must be destroyed to disable the temple.<br>
            <br>
            Note that another instance of SoulCage exists which, when
            destroyed, causes a gate to open. This demonstrates the flexibility
            of the SoulCage object.</td>
        </tr>
    </tbody>
</table>

<p>Note that the TriggersLibrary also defines some spawning triggers;
MangledMetal does not actually use these trigger types.</p>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
    <li><a href="MangledMetal__ProjectIntro.htm">MangledMetal Library
    Details</a></li>

    <li><a href="mm_library_triggers.htm">TriggersLibrary</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
