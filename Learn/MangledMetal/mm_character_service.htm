<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>MangledMetal Character Service</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>

<!--(Begin Body)================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>MangledMetal Character Service</h1>

<p>The MangledMetal Character Service (MmCharacterService) is responsible for managing gameplay
character entity built-ins. A built-in model is a user-defined C++ object that is associated with
an instance of an entity. In MangledMetal, entities of model MMActor are associated with objects of
class MmCharacter as defined in MmCharacter.h.</p>

<p>When MmCharacterService is initialized, it registers a character built-in factory with the
GameFramework FlatModelManager. Later, when the world file is loaded, the FlatModelManager will
call this factory function for every entity using the MmCharacter entity model to create the
entity's associated MMCharacter built-in.</p>

<p>When an MMCharacter built-in is initialized, it checks to see if its entity mixes in the Player
model. If so, it requests that the MmCharacterService initialize it as a gameplay character. The
entity then becomes the subject of the gameplay camera's focus, and the built-in is registered with
the MmControlService as the main character control delegate.</p>

<p>Once created, the MmCharacterService ticks the MMCharacter built-in objects throughout their
lifetimes. It does not destroy them, however. The GameFramework is responsible for the lifetime of
built-ins from the moment they are created via the built-in factory.</p>

<p>MmCharacterService::kMaxCharacters defines the maximum number of MMCharacter built-ins that are
supported. When this limit is reached, no more built-ins can be created until others are destroyed
during gameplay.</p>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
    <li><a href="mm_services_overview.htm">MangledMetal services overview</a></li>

    <li><a href="mm_camera_service.htm">MangledMetal Camera Service</a></li>

    <li><a href="mm_hud_service.htm">MangledMetal HUD Service</a></li>

    <li><a href="mm_walkable_service.htm">MangledMetal Walkable Service</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
