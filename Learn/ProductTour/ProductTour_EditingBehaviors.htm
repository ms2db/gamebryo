<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Product Tour: Editing Behaviors</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>

<!--(Begin Body)================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
        WriteNavLink(2);
</script>

<h1>Product Tour: Editing Behaviors</h1>

<p>You've explored creating new entity models and editing their properties. Now, let's take a look
at the final missing piece for making our game objects come alive: entity behaviors.</p>

<h2>Product Tour at-a-Glance</h2>

<ol>
    <li><a href="ProductTour.htm">Overview</a></li>

    <li><a href="ProductTour_DataDrivenGames.htm">Data Driven Games</a></li>

    <li><a href="ProductTour_EditingLevels.htm">Editing Levels</a></li>

    <li><a href="ProductTour_EditingGameObjects.htm">Editing Game Objects</a></li>

    <li><b>Editing Behaviors&nbsp;&nbsp;&lt;-- You are here</b></li>

    <li><a href="ProductTour_Editing3DContent.htm">Editing 3D Content</a></li>
</ol>

<p>In the Game Solution View, open the MangledMetal EMT project file (<span class=
"NDLSystemFont">MangledMetal.emtproj</span>) if it's not already open. Find the "Victim" model in the 
EMT Project Explorer and double-click it to open it in the Entity Modeling Tool. 
This model encapsulates any game object that can take damage and be killed.
Expand the "Behaviors" section of the Entity Model Editor panel. Notice that there are two
behaviors, "OnAttacked" and "OnDeath". If you move your mouse over each behavior, a description
will appear as a ToolTip.</p>

<div class="FigureContainer">
    <img alt="MangledMetal Victim" src="images/Victim.jpg">

    <p class="FigureCaption">Victim entity model in Entity Modeling Tool.</p>
</div>

<p>The Game Framework can support several different languages for behaviors. The primary supported
scripting language is Lua. There is also a sample integration with Python. If performance is a
concern, you can always write your behaviors in C++, although you'll lose the ability to rapidly
iterate on them.</p>

<p>Click the "OnAttacked" behavior and then click the "Edit" button. This opens a lua script file
called <span class="NDLSystemFont">EseVictim.lua</span>, which is associated with the behavior.</p>

<p>Creating game logic through scripting is fantastic because it allows you to rapidly iterate.
However, it can also be error prone. Toolbench provides another plug-in called the <a href=
"../../Tools/ScriptDebugger/efr_script_debugger_intro.htm">Script Debugger</a> for the Lua
scripting language. It can operate on your game instance either locally or over the network.</p>

<p>Find the second branch in the "OnAttacked" behavior. It should correspond with the following
line:</p>

<p><span class="NDLSystemFont">if(damageEffect ~= "") then</span></p>

<p>Place a breakpoint on this line by pressing F9. You should see a red filled circle in the left
margin. This represents the breakpoint. Now, from the menu bar, select <span class=
"NDLGUILabel">Debug &gt; Toggle Script Debugging</span>. This will add a new toolbar and activate
additional menu items.</p>

<div class="FigureContainer">
    <img alt="MangledMetal Victim" src="images/OnAttackedDebugging.jpg">

    <p class="FigureCaption">OnAttacked Behavior with breakpoint set and script debugging
    enabled.</p>
</div>

<p>Now let's go find some enemies to attack. As soon as you encounter your first enemy, don't
attack it. Instead let it attack you. When this happens, the game should pause and the <span class=
"NDLSystemFont">EseVictim.lua</span> behavior should now have a green highlight on the line
containing your breakpoint. If you've already killed everything in the level, you can reset by
going back to the <span class="NDLSystemFont">Level03.block</span> tab and selecting <span class="NDLGUILabel">Game -&gt; Reset
Game</span> from the menu.</p>

<p>You can single-step through this particular behavior, causing all other behaviors to be
suspended until you complete this behavior's execution. If you examine the bottom panel of
Toolbench, you'll notice panels for Watches, Call Stack, Locals, and other Visual Studio-like tools
for debugging.</p>

<p>You can also perform completely custom script code at the current line of execution using the
Immediate Mode panel. For instance, type the following code into the Immediate Mode input line:</p>

<p><span class="NDLSystemFont">self.Scale = 0.5</span></p>

<p>When you click the "Play" button to resume execution from this behavior, the Player will now be
half size.</p>

<div class="FigureContainer">
    <img alt="MangledMetal Player Half-Size" src="images/HalfSizePlayer.jpg">

    <p class="FigureCaption">Player at half-size through Immediate Mode execution.</p>
</div>

<p>Let's add some completely new code to the script. Let's scale up our character by 20% every time
he gets attacked.</p>

<p>The character's current scale is equal to the property "Scale" from the current entity ID. The
following code snippet will get the scale:</p>

<p><span class="NDLSystemFont">local curScale = self.Scale</span></p>

<p>Then you take that current scale and increase it by 20%.</p>

<p><span class="NDLSystemFont">curScale = curScale * 1.2</span></p>

<p>Now, let's set that property back on the player. Using self, you also have this script change
affect enemies as well.</p>

<p><span class="NDLSystemFont">self.Scale = curScale</span></p>

<div class="FigureContainer">
    <img alt="MangledMetal Player 20% Growth" src="images/CodeInserted.jpg">

    <p class="FigureCaption">The 20% scale OnAttacked inserted into the script.</p>
</div>

<p>Save the script change, remove the breakpoint, click Play, and now every time you get hit you'll
be increasing by 20% in size. Since the enemy also is a "Victim", if you attack him, he will
continue to grow in size, too.</p>

<div class="FigureContainer">
    <img alt="MangledMetal Player After Several Growth Cycles" src="images/BigPlayer.jpg">

    <p class="FigureCaption">The Player after OnAttacked has happened several times.</p>
</div>

<p>As you can see, it is very easy to make script changes and also to use the debugger to look at
what is happening inside the game logic. You have the entire game under your command now.</p>

<p>Go ahead and undo the changes you've made in this session to return to the pristine state.</p>

<h2>Moving on...</h2>

<p>Now that you've been introduced to editing behaviors, let's take a look at using some of the
other content tools that are included with Gamebryo LightSpeed. See <a href=
"ProductTour_Editing3DContent.htm">Editing 3D Content</a>.</p>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
    <li><a href="../../Programmer/Scheduler/scheduler_intro.htm">Scheduler: Introduction (for
    programmers)</a></li>

    <li><a href="../../Programmer/Scripting/scripting_intro.htm">Scripting: Introduction (for
    programmers)</a></li>

    <li><a href="../../Tools/EntityModelingTool/emt_model_intro.htm">Entity Modeling Tool: Working
    with Entity Models (for all)</a></li>

    <li><a href="../../Tools/ScriptDebugger/efr_script_debugger_intro.htm">Script Debugger
    Introduction (for all)</a></li>
	
	<li><a href="../../Tools/EntityModelingTool/emt_ref_find_in_files.htm">Find in Behavior Files</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
