<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Product Tour: Editing Game Objects</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>

<!--(Begin Body)================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
        WriteNavLink(2);
</script>

<h1>Product Tour: Editing Game Objects</h1>

<p>Let's look at some of the things you can do to affect gameplay using World Builder and other
tools in Toolbench.</p>

<h2>Product Tour at-a-Glance</h2>

<ol>
    <li><a href="ProductTour.htm">Overview</a></li>

    <li><a href="ProductTour_DataDrivenGames.htm">Data Driven Games</a></li>

    <li><a href="ProductTour_EditingLevels.htm">Editing Levels</a></li>

    <li><b>Editing Game Objects&nbsp;&nbsp;&lt;-- You are here</b></li>

    <li><a href="ProductTour_EditingBehaviors.htm">Editing Behaviors</a></li>

    <li><a href="ProductTour_Editing3DContent.htm">Editing 3D Content</a></li>
</ol>

<h2>Editing Game Object Properties In World Builder</h2>

<p>For our first example, let's change the top speed of our character. Open the Characters folder
in the Entity view and then double-click the "Player0" entity to focus on it in the viewport. In
the Entity Editor, all of the properties that define that character are listed, including
"Position," "Rotation," "Scale," "IsRenderable," "CastShadows," and so on. These properties are
used at runtime to control how the character interacts with the world.</p>

<div class="FigureContainer">
    <img src="images/Player0SelectedOriginal.jpg" alt="Player0SelectedOriginal (250K)">

    <p class="FigureCaption">Player0 selected in the World Builder.</p>
</div>

<p>Locate the property "TopSpeed" in the "MMActor" category. This property controls how fast the
character can go before it reaches its maximum speed. Try driving around the character in the game.
Notice how it gradually eases in and out of a run animation?</p>

<p>If you edit this value locally, you can control how this particular instance runs in the game.
Try changing the value to 3000 and then save the level and try it out in the game. Notice how much
faster the character moves now? You can tweak these values without having to restart the game,
making gameplay tweaks very easy.</p>

<p>If you've navigated the player away from his original location, it will teleport back to its
initial location due to the reset back to its original properties.</p>

<p>As stated before, by editing this value, you're only really editing that <em>particular</em>
instance called "Player0". Up to this point, we've only discussed entity instances, but what are
they instances of? To find out the answer to that question, take a look at the "Model" property in
the Entity Editor. You'll notice that "Player0" is an instance of the "Player" Entity Model.</p>

<p>Entity Models are the templates that define the game objects that are used in World Builder.
When you make changes to Entity Models, the changes affect all entity instances in all of the world
files in which they are utilized.</p>

<p>Notice that there is a checkbox next to the "TopSpeed" property that you edited before. This
checkbox indicates that you've chosen to override the property that was defined in the parent
Entity Model. Uncheck this value and notice that the value now reverts back to the value originally
defined in the parent entity model.</p>

<p>Let's explore more about this "Player" Entity Model. Click the "View" button adjacent to the
"Model" property.</p>

<h2>Editing Game Object Properties in Entity Modeling Tool</h2>

<p>You've now opened up the "Player" entity model in the <a href=
"../../Tools/EntityModelingTool/emt_intro.htm">Entity Modeling Tool</a> (EMT). Like World Builder,
EMT is a Toolbench plug-in. It allows you to interact with the entity models that define the
templates for your game objects.</p>

<div class="FigureContainer">
    <img src="images/PlayerModel.jpg" alt="PlayerModel (150K)">

    <p class="FigureCaption">Player entity model in EMT</p>
</div>

<p>Let's take a moment to orient to this new tool.</p>

<p>The left panel shows the Game Solution View that we used previously to 
open <span class="NDLSystemFont">Level03.block</span>. Notice that 
there are several more projects that are expandable. When you opened the Entity Modeling Tool
project for Player, you actually opened up the Entity Modeling Tool project file for
MangledMetal &mdash; the <span class="NDLSystemFont">MangledMetal.emtproj</span> file. Entity Modeling
Tool project files contain multiple entity models that define a portion of your game objects. If
you click the EMT Project Explorer tab (beside the game solution), you will see a list of all of the
Entity Models in the current library. If you scroll down, you should see the "Player" model
listed.</p>

<p>The center panel shows an automatically generated diagram for the "Player" model. The items on
the top of the graph are parent entity models that are "mixed-in" to create "Player". Though there
are no such items in this example, any items listed below "Player" would be models that have
"Player" mixed-in to them.</p>

<p>What does it mean to "mix-in" an entity model? When you think about how to represent game
objects, often they don't fall neatly into a single inheritance hierarchy. Let's take the "Player"
model as an example. A player avatar is many "things" at once. It is capable of being rendered,
attacking enemies, playing animations in response to events, being the subject of the game camera,
being damaged, playing a rag-doll when hit, colliding with the environment, and much more. Wouldn't
it be nice to capture these independent aspects of the "Player" in separate components that you can
easily assemble? With Entity Modeling Tool, you can do just that. Each one of these aspects can be
represented as a self-contained Entity Model. Each Entity Model can be tested in isolation.
Creating new variations is as easy as drawing a mix-in line from one entity model to another.</p>

<p>The panel on the right is the Entity Model Editor. It contains all of the properties and
behaviors that define this entity. Much like in World Builder, you can override property values
from parent models. If you focus on "Mixin Properties", you can see that "TopSpeed" property that we
were just editing on the entity instance in World Builder. This time, try changing the "TopSpeed"
to 400 and then Save the project. Now take a look at this in the game. Notice how the "Player"
never gets going fast enough to go into the "Run" animation sequence? The values that indicate when
certain animations get played can be found in the "MovementSequences" and "MovementSpeeds" list
properties. If you expand the black triangle in the value column, you'll see list of values.</p>

<p>If the "TopSpeed" manipulation in the prior step didn't work, you most likely still have
"TopSpeed" overridden in Level03. Go back to the Level03 block file. When you select the Level03
block file, you'll be prompted whether or not you want to accept recent model changes. Choose Yes.
Now uncheck the override box next to "TopSpeed" for the "Player" model and save. Now go back to the
MangledMetal application and test again.</p>

<p>For now, go ahead and undo the changes that you made and return the "Player" to its original
values. To fully undo the changes, you'll need to undo the changes in both EMT and World Builder.
First, undo the changes made to the model in the emtproj. Afterwards, undo the changes in the block
file so that the entity will once again override the "TopSpeed" property.</p>

<h2>Creating New Entity Models</h2>

<p>Before you leave the Entity Modeling project, let's see what it looks like to make some
brand-new models. In the EMT Project Explorer View, select the MangledMetal entity modeling project 
in the breadcrumb control at the top of the view if it isn't already selected. Press the 
<span class="NDLGUILabel">Add</span> button at the top-right corner of the view and choose 
<span class="NDLGUILabel">Add -&gt; New Model</span> from the context menu. Name the new model "NewRock1". 
This will be a rock that you add to the world. When you create a new entity, it has no properties 
and no behaviors. It knows nothing but its name. So, rather than re-write a lot of properties 
and behaviors, let's mix-in some capabilities.</p>

<p>Here, you'll mix-in the "MMMesh" model into the "NewRock1" model, giving the model a visual
NIF asset, translation, rotation, scale, and many other visual properties. To perform the mix-in,
you need to drag and drop the "MMMesh" model from the EMT Project Explorer View onto the <span class=
"NDLSystemFont">MangledMetal.emtproj</span> document where your "NewRock1" model is currently
displayed. When you do so, you need to drop the "MMMesh" model <em>above</em> your "NewRock1"
model. If you drag and drop the "MMMesh" model below your model, you will add "MMMesh" as a reverse
mix-in. Since you want to mix-in "MMMesh" into your model, and not the other way around, position
the cursor above the model and drop the MMMesh model into the <span class=
"NDLSystemFont">.emtproj</span> file.</p>

<div class="FigureContainer">
    <img src="images/NewRock1.jpg" alt="NewRock1 (165K)">

    <p class="FigureCaption">NewRock1 defined in Entity Modeling Tool.</p>
</div>

<p>Note that you did not have to write any new code&mdash;you just mix it in visually and you get
all of these capabilities. Next, pick the 3D graphics asset that you'll use for this rock
(<span class=
"NDLSystemFont">MangledMetal\GamebryoData\Generic\Props\PropRocklarge03_square03.nif</span>). Now
you have a new entity model for our project and you can use World Builder to add an instance of it
into the scene. But before you do that, let's make one more model in EMT.</p>

<p>Using the button in the top-right of the EMT Project Explorer, press <span class="NDLGUILabel">Add -&gt; New
Model</span>. Name the new model "NewRock2". Since you do not want to
re-write everything you just did, mix "NewRock1" into "NewRock2". Through the mix-in relationship,
the "NewRock2" model uses the same graphical NIF asset that was defined for "NewRock1". However, if
you also want this entity to be physically simulated, mix-in "MMPhysXProp". When you add this
mix-in, you have a physically simulated rock that you can add to the world. This will work because
the NIF Asset that we chose has already been set up with a PhysX rigid body in 3ds Max. It is
valuable to be able to choose when all of those edits get applied to your game level.</p>

<p>Save the <span class="NDLSystemFont">MangledMetal.emtproj</span> file you added the two new rock models to.</p>

<p>Switch to the <span class="NDLSystemFont">Level03.block</span> content tab. You'll be 
asked if you want to re-synchronize this World Builder content with your recent changes to 
the EMT Project, choose "Yes". Open the Palette View and filter the view by "new" and you should 
now see your new models "NewRock1" and "NewRock2". Add instances of both of them into the 
level in the same empty section that you used before.</p>

<p>Multiselect these new entity instances and lift them up off the ground a little bit. You may
need to be in <a href="../../Tools/WorldBuilder/wb_ref_toolbars.htm#Snap_Toolbar">Free Placement
mode</a> (<img src="../../Tools/WorldBuilder/images/PlacementFreeLarge.png">).</p>

<div class="FigureContainer">
    <img src="images/NewRock1And2InWB.jpg" alt="NewRock1And2InWB (190K)">

    <p class="FigureCaption">Instances of NewRock1 and NewRock2 in World Builder.</p>
</div>

<p>Go ahead and move the player to the location where the new entities will spawn in. Save the
level in World Builder. The two entities will spawn in. The instance of "NewRock2" will immediately
fall to the ground as it is physically simulated. The instance of "NewRock1" will not fall. We
didn't have to edit any code, you didn't have to recompile the game, yet you were able to add two
new entity types to the content of the game.</p>

<div class="FigureContainer">
    <img src="images/NewRock1And2InGame.jpg" alt="NewRock1And2InGame (139K)">

    <p class="FigureCaption">Instances of NewRock1 and NewRock2 in MangledMetal.</p>
</div>

<p>Go ahead and undo your changes in the block file and emtproj files.</p>

<h2>Moving on...</h2>

<p>Now that you've constructed entities and adjusted their properties, let's take a look at
behaviors. See <a href="ProductTour_EditingBehaviors.htm">Editing Entity Behaviors</a>.</p>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
    <li><a href="../../Programmer/Models/entity_models_intro.htm">Models: Introduction</a></li>

    <li><a href="../../Tools/EntityModelingTool/emt_best_practices_intro.htm">Entity Modeling Tool
    - Best Practices</a></li>

    <li><a href="../../Tools/EntityModelingTool/emt_model_intro.htm">Entity Modeling Tool: Working
    with Entity Models</a></li>

    <li><a href="../../Reference/QuickRef_Models/model_qckref_intro.htm">Standard Model Quick
    Reference</a></li>

    <li><a href="../../Learn/MangledMetal/mm_entity_model_ref.htm">MangledMetal Model
    Reference</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
