<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Converting to Gamebryo 2.5 Overview</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Converting to Gamebryo 2.5 Overview</h1>

<p>This document describes the changes to interfaces that existed
in Gamebryo 2.3. It is intended to help users of Gamebryo 2.3
convert to Gamebryo 2.5. This document does not describe all the
new features in Gamebryo 2.5. For that, see the <a href=
"../../RelNotes/Release_Notes_Introduction.htm">Release
Notes</a>.</p>

<p>The following topics should be reviewed for successful
conversion to Gamebryo 2.5:</p>

<p><a href=
"Converting_to_Gamebryo_2_5_Overview.htm#Addition_of_License_Code_Embedding">
Addition of License Code Embedding</a></p>

<p><a href=
"Converting_to_Gamebryo_2_5_Overview.htm#Changes_to_NiGeometry">Changes
to NiGeometry</a></p>

<p><a href=
"Converting_to_Gamebryo_2_5_Overview.htm#Changes_to_Materials">Changes
to Material and Shader handling</a></p>

<p><a href=
"Converting_to_Gamebryo_2_5_Overview.htm#Changes_to_NiCullingProcess">
Changes to NiCullingProcess</a></p>

<p><a href=
"Converting_to_Gamebryo_2_5_Overview.htm#Deprecated_Screen_Space_Classes">
Deprecated Screen-Space Classes</a></p>

<p><a href=
"Converting_to_Gamebryo_2_5_Overview.htm#Changes_to_Fragment_and_Standard_Material">
Changes to NiFragmentMaterial and NiStandardMaterial</a></p>

<p><a href=
"Converting_to_Gamebryo_2_5_Overview.htm#Removed_Batch_Rendering">
Removed Batch Rendering</a></p>

<p><a href=
"Converting_to_Gamebryo_2_5_Overview.htm#Changes_to_the_NiParticle_Library">
Changes to the NiParticle Library</a></p>

<p><a href=
"Converting_to_Gamebryo_2_5_Overview.htm#Changes_to_Static_Data_Management">
Changes to Static Data Management</a></p>

<p><a href=
"Converting_to_Gamebryo_2_5_Overview.htm#Removal_of_OpenFlight_Support">
Removal of OpenFlight Support</a></p>

<p><a href=
"Converting_to_Gamebryo_2_5_Overview.htm#NiThreadProcedure_Parameter_Changed">
NiThreadProcedure Parameter Changed</a></p>

<p><a href=
"Converting_to_Gamebryo_2_5_Overview.htm#NifConvert_Removed">NifConvert
Tool Removed</a></p>

<p><a href=
"Converting_to_Gamebryo_2_5_Overview.htm#NIFVersion">NIF
Version</a></p>

<p><a href=
"Converting_to_Gamebryo_2_5_Overview.htm#Name_Change_to_Shader_Library_DLLs">
Name Change to Shader Library DLLs</a></p>

<p><a href=
"Converting_to_Gamebryo_2_5_Overview.htm#Picking_Changes">Changes
to NiPick</a></p>

<p><a href=
"Converting_to_Gamebryo_2_5_Overview.htm#NiShaderConstantMap_Changes">
Changes to NiShaderConstantMap</a></p>

<p><a href=
"Converting_to_Gamebryo_2_5_Overview.htm#Changes_to_NiDX9Renderer">
Changes to NiDX9Renderer</a></p>

<p><a href=
"Converting_to_Gamebryo_2_5_Overview.htm#Addition_of_Stack_Allocated_Memory">
Addition of Stack-Allocated Memory</a></p>

<p><a href=
"Converting_to_Gamebryo_2_5_Overview.htm#ProcessorSpecificCode_Deprecation">
Deprecation of NiProcessorSpecificCode</a></p>

<p><a href=
"Converting_to_Gamebryo_2_5_Overview.htm#Changes_to_NiSourceTexture_Loading">
Changes to NiSourceTexture Loading</a></p>

<p><a href=
"Converting_to_Gamebryo_2_5_Overview.htm#NiStreamProcessor_Wait">Changes
to NiStreamProcessor::Wait</a></p>

<p><a href=
"Converting_to_Gamebryo_2_5_Overview.htm#VectorExtraData_Deprecation">
Deprecation of NiVectorExtraData</a></p>

<p><a href=
"Converting_to_Gamebryo_2_5_Overview.htm#LogicOrdering360">Issues
with Application Logic Ordering Unique to Xbox
360</a></p><a name="Addition_of_License_Code_Embedding" id=
"Addition_of_License_Code_Embedding"></a>

<h2>Addition of License Code Embedding</h2>

<p>The Gamebryo binary installer now requires a valid license
code, obtained from the Gamebryo sales team in order to operate.
Academic users, partners, evaluators, and binary customers will
be prompted for this license code during the install. All
applications using the Gamebryo binary libraries must contain the
following source code in order to correctly link:<br>
 </p>

<p><span class="NDLSystemFont">#include &lt;NiLicense.h&gt;<br>
NiEmbedGamebryoLicenseCode;</span></p>

<a name="Changes_to_NiGeometry" id="Changes_to_NiGeometry"></a><h2>Changes to NiGeometry</h2>

<p>Gamebryo geometry data storage has been completely refactored
to provide <a href="../../Reference/NiMesh/NiMesh_Rel_Notes.htm">new features and flexibility</a> demanded by next-gen games. This
affects <span class="NDLSystemFont">NiGeometry</span>,
<span class="NDLSystemFont">NiGeometryData</span>, and all
derived classes (<span class="NDLSystemFont">NiTriShape</span>,
<span class="NDLSystemFont">NiTriStrips</span>, <span class=
"NDLSystemFont">NiParticles</span>, etc). These classes have been
deprecated and replaced by <span class="NDLSystemFont"><a href=
"../../Reference/NiMesh/NiMesh.htm">NiMesh</a></span>.
<span class="NDLSystemFont">NiSkinInstance</span> and
<span class="NDLSystemFont">NiGeomMorpherController</span> have
also been deprecated and replaced by <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMesh/NiMeshModifier.htm">NiMeshModifier</a>-</span>derived
classes which serve the same purpose.</p>

<p><a href="NiGeometry_Conversion.htm">Customers must convert
their application code</a> from <span class=
"NDLSystemFont">NiGeometry</span> to <span class=
"NDLSystemFont">NiMesh</span>. The <a href=
"NiGeometry_Conversion.htm">NiGeometry Conversion</a> guide
describes the required changes.</p>

<p>Customers must convert their legacy NIF assets as well. There
are three alternative ways to do this:</p>

<ol>
    <li>Re-export the assets from the DCC tool. This option
    offers the best performance as well as the ability to
    leverage new <span class="NDLSystemFont">NiMesh</span>
    features directly in the DCC tool.</li>

    <li>Convert the assets using <a href=
    "../../Tools/Tool_Plug_in_Batch_Tool/Tool_Plug_in_Batch_Tool_Example_Convert_23_Assets.htm">
    ToolPluginBatch</a>. This option offers very good
    performance, but the assets are limited to the <span class=
    "NDLSystemFont">NiGeometry</span> feature-set.</li>

    <li>Do nothing. Gamebryo will automatically convert the
    assets when they are loaded. This option requires no work,
    but it is not recommended for a shipping title due to the
    overhead of the conversion process. Also, runtime performance
    is not as good as with option 1 or 2 because vertex buffers
    are not interleaved.</li>
</ol>

<p>Options 2 and 3 both rely on the <span class=
"NDLSystemFont">NiGeometryConverter</span> to process legacy
assets. See <a href=
"Asset_Conversion_with_the_NiGeometryConverter.htm">Asset
Conversion with the NiGeometryConverter</a> for details on how
the converter works and what classes it handles.</p><a name=
"Changes_to_Materials" id="Changes_to_Materials"></a>

<h2>Changes to Material and Shader handling</h2>

<p><span class="NDLSystemFont"><a href=
"../../Programmer/NiMaterial/NiMaterialInstance.htm">NiMaterialInstance</a></span>
objects no longer default to a state where they check whether a
shader is up to date each frame. This prior behavior was a
convenience to developers based on the behavior from fixed
function hardware, where changes to data would simply change the
display. Game code must now either call <span class=
"NDLSystemFont">SetMaterialNeedsUpdate(true)</span>, or (with a
performance cost) call <span class=
"NDLSystemFont">SetDefaultMaterialNeedsUpdateFlag(true)</span>.
<a href=
"../../Programmer/NiMaterial/NiMaterialInstance.htm"><span class=
"NDLSystemFont">NiMaterialInstance</span></a> also no longer
re-generates a shader if the cached shader is NULL. See <a href=
"../../Programmer/NiMaterial/Renderer_Interaction_With_Materials.htm#NiMaterialInstanceEvaluation">
NiMaterialInstance Evaluation</a> for details.</p>

<p>The <a href=
"../../Programmer/NiMaterial/Renderer_Interaction_With_Materials.htm#DefaultMaterial">
Default Material</a> will no longer be applied to objects with
custom shaders that fail to bind correctly. Instead, the error
shader will be used. To use the default material either set and
activate it on an object, or disable all materials on that
object.</p>

<p>Applying a custom shader to an object with missing varying
inputs is now treated as an error unless the application calls
<span class=
"NDLSystemFont">NiMeshMaterialBinding::SetCreateMissingStreams(true)</span>.
Calling that function will preserve the behavior of previous
versions of Gamebryo: missing varying inputs are bound to vertex
buffers containing (1,1,1,1) for colors or (0,0,0,0) for anything
else. By default, this flag is false. This means that assets that
work in game (e.g. MetalWars) may not be viewable in tools unless
this flag is programatically set.</p>

<p>Since packing no longer occurs at run-time, the role of
<a href=
"../../Reference/NiMain/NiShaderDeclaration.htm"><span class=
"NDLSystemFont">NiShaderDeclaration</span></a> objects had been
significantly reduced, and is now completely handled by <a href=
"../../Reference/NiMain/NiSemanticAdapterTable.htm"><span class=
"NDLSystemFont">NiSemanticAdapterTable</span></a> objects. As a
result, the renderer-specific <span class=
"NDLSystemFont">NiShaderDeclaration</span> derived classes have
been removed, along with the <span class=
"NDLSystemFont">NiRenderer::CreateShaderDeclaration</span>
factories, and the actual <span class=
"NDLSystemFont">NiShaderDeclaration</span> object that was
associated with each <span class="NDLSystemFont">NiShader</span>
derived class.</p>

<p>If your application has custom <span class=
"NDLSystemFont">NiShader</span> derived classes that extended the
base-class usage of <span class=
"NDLSystemFont">NiShaderDeclaration</span>, the code can either
be ported to create a <span class=
"NDLSystemFont">NiSemanticAdapterTable</span> object fairly
easily, or you can use the <a href=
"../../Reference/NiMain/NiShader.htm"><span class=
"NDLSystemFont">NiShader::SetSemanticAdapterTableFromShaderDeclaration</span></a>
method, which performs a one-time conversion from a <span class=
"NDLSystemFont">NiShaderDeclaration</span> to a <span class=
"NDLSystemFont">NiSemanticAdapterTable</span>.</p>

<p>In the same way, <span class=
"NDLSystemFont">GetVertexInputSemantics</span> has been removed
from both shaders and materials.</p><a name="Changes_To_Update"
id="Changes_To_Update"></a>

<h2>Changes to NiAVObject::Update</h2>

<p>The previous versions of the <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMain/NiAVObject.htm#UpdateFunctions">NiAVObject::Update</a></span>
and <span class="NDLSystemFont">NiAVObject::UpdateSelected</span>
functions have been deprecated in favor of new versions that take
a single argument of type <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiUpdateProcess.htm">NiUpdateProcess</a></span>.
This change was necessary to provide pre- and post-update
callback functionality for mesh modifiers. Applications cannot
create objects of type <span class=
"NDLSystemFont">NiUpdateProcess</span> - instead they must use
the <span class="NDLSystemFont"><a href=
"../../Reference/NiMesh/NiMeshUpdateProcess.htm">NiMeshUpdateProcess</a></span>
or <span class="NDLSystemFont"><a href=
"../../Reference/NiMesh/NiBatchedUpdateProcess.htm">NiBatchedUpdateProcess</a></span>
classes.</p>

<p>Most existing code will continue to compile. However, the
deprecated functions use an application-wide statically allocated
instance of an <span class=
"NDLSystemFont">NiMeshUpdateProcess</span> object. This is not
thread-safe in applications that issue update calls from multiple
threads. Multi-threaded applications must move to the new
functions and declare per-thread instances of the <span class=
"NDLSystemFont">NiMeshUpdateProcess</span> class to use with each
thread's update calls, even if the scene graphs updated by
different threads are distinct. The thread safety issue lies in
the Floodgate <span class="NDLSystemFont"><a href=
"../../Reference/NiFloodgate/NiSPWorkflowManager.htm">NiSPWorkflowManager</a></span>
class, an instance of which is held by every <span class=
"NDLSystemFont">NiUpdateProcess</span> object.</p>

<p>Applications that called <span class=
"NDLSystemFont">NiAVObject::UpdateDownwardPass</span>,
<span class="NDLSystemFont">UpdatedSelectedDownwardPass</span>,
or <span class="NDLSystemFont">UpdateRigidDownwardPass</span>
will not compile without converting the calls to pass in a valid
per-thread <span class="NDLSystemFont">NiUpdateProcess</span>
object.</p>

<p>The <span class="NDLSystemFont">bUpdateSelected</span> flag in
the deprecated <span class=
"NDLSystemFont">NiAVObject::Update</span> function will be passed
into the <span class="NDLSystemFont">SetUpdateControllers</span>
and <span class="NDLSystemFont">SetSubmitModifiers</span>
functions of a temporary <span class=
"NDLSystemFont">NiUpdateProcess</span> object. This can cause
slightly different behaviors than it has in the past, depending
on the mesh modifiers that exist in the scene - for instance, the
<span class="NDLSystemFont"><a href=
"../../Reference/NiMesh/NiSkinningMeshModifier.htm">NiSkinningMeshModifier</a></span>
uses an update task to cache the skin's bone transforms. If that
modifier's task is not run as part of the update process, then
the skinned mesh may not display correctly. For that reason,
passing false to the <span class=
"NDLSystemFont">bUpdateSelected</span> flag should only be used
on a scene that will not be displayed immediately and that will
be updated in the standard manner before it is displayed.
Otherwise, out-of-date results from computations may be used in
rendering.</p><a name="Changes_to_NiCullingProcess" id=
"Changes_to_NiCullingProcess"></a>

<h2>Changes to NiCullingProcess</h2>

<p><span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiCullingProcess.htm">NiCullingProcess</a></span>
was updated in this version to facilitate the execution of mesh
modifiers. Since the <span class=
"NDLSystemFont">NiFloodgate</span> library depends on the
<span class="NDLSystemFont">NiMain</span> library and mesh
modifiers rely heavily on Floodgate classes, it is not possible
for the base class to contain the necessary logic. As a result,
no class may derive from <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiCullingProcess.htm">NiCullingProcess</a></span>.
All of its constructors are private. <span class=
"NDLSystemFont">NiMeshCullingProcess</span> is declared as a
friend and derives from <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiCullingProcess.htm">NiCullingProcess</a></span>.
Applications should extend <span class=
"NDLSystemFont">NiMeshCullingProcess</span> if additional culling
functionality is needed in a subclass.</p>

<p>Additionally, the method <span class=
"NDLSystemFont">NiCullingProcess::Process</span> was changed to
protected access. Applications should initiate culling by calling
<span class="NDLSystemFont">NiCullingProcess::Cull</span> which
has the same signature as <span class=
"NDLSystemFont">Process</span>. <span class=
"NDLSystemFont">Cull</span> will call <span class=
"NDLSystemFont">Process</span> but also calls the necessary
post-processing functions to insure that mesh modifiers are
executed correctly. Because C++ allows subclasses to change the
access specification of a virtual method, the compiler will only
generate an error if <span class="NDLSystemFont">Process</span>
is called via a base class pointer. Users should search their
codebase for calls to <span class="NDLSystemFont">Process</span>
accessed via a subclass object or pointer and update them to call
<span class="NDLSystemFont">Cull</span> instead.</p>

<a name="Deprecated_Screen_Space_Classes" id="Deprecated_Screen_Space_Classes"></a><h2>Deprecated Screen-Space Classes</h2>

<p>Several screen-space classes have been deprecated. These are
documented on a <a href=
"Deprecated_Screen_Space_Classes.htm">separate
page</a>.</p><a name="Changes_to_Fragment_and_Standard_Material"
id="Changes_to_Fragment_and_Standard_Material"></a>

<h2>Changes to NiFragmentMaterial and NiStandardMaterial</h2>

<p>Several modifications were made to NiFragmentMaterial and
NiStandardMaterial to improve their ability to serve as base
classes for custom materials and to make them compatible with
NiRenderObject and NiMesh. Additionally, the headers for these
classes have been more clearly documented.</p>

<p>Modified Functions:</p>

<ul>
    <li><span class=
    "NDLSystemFont">NiFragmentMaterial::IsShaderCurrent</span></li>

    <li><span class=
    "NDLSystemFont">NiFragmentMaterial::GetCurrentShader</span></li>

    <li><span class=
    "NDLSystemFont">NiFragmentMaterial::PrecacheGPUPrograms</span></li>

    <li><span class=
    "NDLSystemFont">NiFragmentMaterial::GenerateDescriptor</span></li>

    <li><span class=
    "NDLSystemFont">NiStandardMaterial::GenerateDescriptor</span></li>

    <li><span class=
    "NDLSystemFont">NiStandardMaterial::SetupTransformPipeline</span></li>

    <li><span class=
    "NDLSystemFont">NiStandardMaterial::HandlePreLightTextureApplication</span></li>

    <li><span class=
    "NDLSystemFont">NiStandardMaterial::HandleCustomMaps</span></li>
</ul>

<p>Added Functions:</p>

<ul>
    <li><span class=
    "NDLSystemFont">NiFragmentMaterial::EvaluateProgram</span></li>

    <li><span class=
    "NDLSystemFont">NiFragmentMaterial::GenerateShaderProgramsForPass</span></li>

    <li><span class=
    "NDLSystemFont">NiFragmentMaterial::GenerateVertexShadeTree</span></li>

    <li><span class=
    "NDLSystemFont">NiFragmentMaterial::GeneratePixelShadeTree</span></li>

    <li><span class=
    "NDLSystemFont">NiFragmentMaterial::GenerateGeometryShadeTree</span></li>

    <li><span class=
    "NDLSystemFont">NiFragmentMaterial::GenerateShaderProgram</span></li>

    <li><span class=
    "NDLSystemFont">NiFragmentMaterial::AddDefaultMaterialNodes</span></li>

    <li><span class=
    "NDLSystemFont">NiStandardMaterial::GenerateVertexShadeTree</span></li>

    <li><span class=
    "NDLSystemFont">NiStandardMaterial::GeneratePixelShadeTree</span></li>

    <li><span class=
    "NDLSystemFont">NiStandardMaterial::GenerateGeometryShadeTree</span></li>

    <li><span class=
    "NDLSystemFont">NiStandardMaterial::HandleVertexUVSets</span></li>

    <li><span class=
    "NDLSystemFont">NiStandardMaterial::HandleFinalVertexOutputs</span></li>

    <li><span class=
    "NDLSystemFont">NiStandardMaterial::HandleTextureUVSetGen</span></li>

    <li><span class=
    "NDLSystemFont">NiStandardMaterial::HandleTextureEffectUVSetGen</span></li>

    <li><span class=
    "NDLSystemFont">NiStandardMaterial::HandleVertexLightingAndMaterials</span></li>

    <li><span class=
    "NDLSystemFont">NiStandardMaterial::HandlePixelInputs</span></li>

    <li><span class=
    "NDLSystemFont">NiStandardMaterial::HandlePixelMaterialInitialValues</span></li>

    <li><span class=
    "NDLSystemFont">NiStandardMaterial::HandlePixelUVSets</span></li>

    <li><span class=
    "NDLSystemFont">NiStandardMaterial::HandleShadingCoefficients</span></li>

    <li><span class=
    "NDLSystemFont">NiStandardMaterial::HandleTexGen</span></li>

    <li><span class=
    "NDLSystemFont">NiStandardMaterial::HandleColorAccumulation</span></li>

    <li><span class=
    "NDLSystemFont">NiStandardMaterial::HandleFinalPixelOutputs</span></li>
</ul>

<p>Removed Functions:</p>

<ul>
    <li><span class=
    "NDLSystemFont">NiFragmentMaterial::GenerateShaderPrograms</span></li>

    <li><span class=
    "NDLSystemFont">NiFragmentMaterial::GenerateVertexShaderProgram</span></li>

    <li><span class=
    "NDLSystemFont">NiFragmentMaterial::GeneratePixelShaderProgram</span></li>

    <li><span class=
    "NDLSystemFont">NiFragmentMaterial::GenerateGeometryShaderProgram</span></li>

    <li><span class=
    "NDLSystemFont">NiStandardMaterial::GenerateVertexShaderProgram</span></li>

    <li><span class=
    "NDLSystemFont">NiStandardMaterial::GeneratePixelShaderProgram</span></li>

    <li><span class=
    "NDLSystemFont">NiStandardMaterial::GenerateGeometryShaderProgram</span></li>

    <li><span class=
    "NDLSystemFont">NiStandardMaterial::HandleTextureEffectUVSet</span></li>

    <li><span class=
    "NDLSystemFont">NiStandardMaterial::HandleGouraudCoefficients</span></li>

    <li><span class=
    "NDLSystemFont">NiStandardMaterial::AddOutputPredefined</span></li>

    <li><span class=
    "NDLSystemFont">NiStandardMaterial::AddOutputObject</span></li>
</ul><a name="Removed_Batch_Rendering" id=
"Removed_Batch_Rendering"></a>

<h2>Removed Batch Rendering</h2>

<p>Batch rendering has been removed from the <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMain/NiRenderer.htm">NiRenderer</a></span>
interface; applications that were using batch rendering must be
ported to use the standard rendering APIs instead. Consider using
<a href=
"../../Programmer/NiMesh/Introduction_to_Instancing.htm">GPU
Instancing</a>, <a href=
"../../Reference/NiMain/NiMaterialSwapProcessor.htm">NiMaterialSwapProcessor</a>,
or a custom <a href=
"../../Reference/NiMain/NiRenderListProcessor.htm">NiRenderListProcessor</a>
if it applies to your application's needs.</p>

<a name="Changes_to_the_NiParticle_Library" id="Changes_to_the_NiParticle_Library"></a><h2>Changes to the NiParticle Library</h2>

<p>The <span class="NDLSystemFont">NiParticle</span> library has
been completely revamped to take advantage of mesh modifiers and
Floodgate. These changes are documented on a <a href=
"NiParticle_Conversion.htm">separate page</a>.</p>

<a name="Changes_to_Static_Data_Management" id="Changes_to_Static_Data_Management"></a><h2>Changes to Static Data Management</h2>

<p>The <span class="NDLSystemFont"><a href=
"../../Reference/NiSystem/NiStaticDataManager.htm">NiStaticDataManager</a></span>
class and associated macros (defined in <span class=
"NDLSystemFont">NiSDMMacros.h</span>) have been modified to
provide a means of controlling the initialization order for
static data. The complete details appear on a <a href=
"Static_Data_Manager_Changes.htm">separate page</a>.</p>

<a name="Removal_of_OpenFlight_Support" id="Removal_of_OpenFlight_Support"></a><h2>Removal of OpenFlight Support</h2>

<p>OpenFlight support has been deprecated and removed from
Gamebryo 2.5 because Gamebryo customers are no longer using
it.</p><a name="NiThreadProcedure_Parameter_Changed" id=
"NiThreadProcedure_Parameter_Changed"></a>

<h2>NiThreadProcedure Parameter Changed</h2>

<p>Classes that inherit from the <span class=
"NDLSystemFont"><a href=
"../../Reference/NiSystem/NiThreadProcedure.htm">NiThreadProcedure</a></span>
class will have to be modified to pass an <span class=
"NDLSystemFont">NiThread*</span> parameter instead of <span class=
"NDLSystemFont">void*</span> into the
<span class="NDLSystemFont">ThreadProcedure</span> method. This
change was made to clarify the parameter and to make the method
call more type safe. Note that failure to upgrade the signature
of a derived class will cause <span class=
"NDLSystemFont"><a href="../../Reference/NiSystem/NiThread.htm">NiThread</a></span>
objects to appear not to run. In reality, the base class version
which simply returns zero will be invoked due to C++ name lookup
rules.</p><a name="NifConvert_Removed" id=
"NifConvert_Removed"></a>

<h2>NifConvert Tool Removed</h2>

<p>The NifConvert tool that converts NIF files from an older
version of Gamebryo to the current version has been removed. The
ToolPluginBatch tool is a full replacement for its functionality.
See the <a href=
"../../Tools/Tool_Plug_in_Batch_Tool/Tool_Plug_in_Batch_Tool_Intro.htm">
documentation for the ToolPluginBatch tool</a> for more
details.</p>

<a name="NIFVersion" id="NIFVersion"></a><h2>NIF Version</h2>

<p>The minimum NIF version for Gamebryo has been changed to
10.1.0.114, which corresponds to the Gamebryo 1.2 release. Any
legacy NIF files with versions prior to Gamebryo 1.2 will fail to
load in Gamebryo 2.5.</p>

<p>Furthermore, several classes that were deprecated in Gamebryo
1.2 have also been removed in Gamebryo 2.5. These classes
are:</p>

<ul>
    <li><span class="NDLSystemFont">NiFloatController</span></li>

    <li><span class=
    "NDLSystemFont">NiLookAtController</span></li>

    <li><span class="NDLSystemFont">NiPathController</span></li>

    <li><span class="NDLSystemFont">NiRollController</span></li>
</ul>

<p>NIF files containing any of these objects will fail to
load.</p>

<a name="Name_Change_to_Shader_Library_DLLs" id="Name_Change_to_Shader_Library_DLLs"></a><h2>Name Change to Shader Library DLLs</h2>

<p>The names of the shader library DLLs have been changed to
remove the trailing "DX9" or "D3D10". For instance, the DLLs
NSBShaderLibDX923VC80D.dll and
NiD3D10BinaryShaderLibD3D1023VC80S.dll from Gamebryo 2.3 are now
known as NSBShaderLib25VC80D.dll and
NiD3D10BinaryShaderLib25VC80S.dll.</p>

<a name="Picking_Changes" id="Picking_Changes"></a><h2>Changes to NiPick</h2>

<p>New features have been added to the picking code code in
Gamebryo and in several places its API has been made clearer and
more consistent. See <a href="NiPick_Conversion.htm">this
documentation</a> for more details.</p>

<a name="NiShaderConstantMap_Changes" id="NiShaderConstantMap_Changes"></a><h2>Changes to NiShaderConstantMap</h2>

<p>Several predefined mappings related to skinning have been
deprecated and removed. Currently, the only supported bone
mapping is <span class=
"NDLSystemFont">SCM_DEF_SKINBONE_MATRIX_3</span>. These
deprecations apply to all supported Gamebryo shader types (NSF,
FX, FXL, etc...) and any shaders that use the old mappings will
need to be updated. Here is the full list of deprecated
mappings:</p>

<ul>
    <li><span class=
    "NDLSystemFont">SCM_DEF_SKINWORLDVIEW</span></li>

    <li><span class=
    "NDLSystemFont">SCM_DEF_INVSKINWORLDVIEW</span></li>

    <li><span class=
    "NDLSystemFont">SCM_DEF_SKINWORLDVIEW_T</span></li>

    <li><span class=
    "NDLSystemFont">SCM_DEF_INVSKINWORLDVIEW_T</span></li>

    <li><span class=
    "NDLSystemFont">SCM_DEF_SKINWORLDVIEWPROJ</span></li>

    <li><span class=
    "NDLSystemFont">SCM_DEF_INVSKINWORLDVIEWPROJ</span></li>

    <li><span class=
    "NDLSystemFont">SCM_DEF_SKINWORLDVIEWPROJ_T</span></li>

    <li><span class=
    "NDLSystemFont">SCM_DEF_INVSKINWORLDVIEWPROJ_T</span></li>

    <li><span class="NDLSystemFont">SCM_DEF_SKINWORLD</span></li>

    <li><span class=
    "NDLSystemFont">SCM_DEF_INVSKINWORLD</span></li>

    <li><span class=
    "NDLSystemFont">SCM_DEF_SKINWORLD_T</span></li>

    <li><span class=
    "NDLSystemFont">SCM_DEF_INVSKINWORLD_T</span></li>

    <li><span class=
    "NDLSystemFont">SCM_DEF_BONE_MATRIX_3</span></li>

    <li><span class=
    "NDLSystemFont">SCM_DEF_BONE_MATRIX_4</span></li>

    <li><span class=
    "NDLSystemFont">SCM_DEF_SKINBONE_MATRIX_4</span></li>
</ul>

<p>To port your application, effects, and shaders to use
<span class="NDLSystemFont">SCM_DEF_SKINBONE_MATRIX_3</span>,
replace any SKIN version of WORLD, WORLDVIEW, and WORLDVIEWPROJ
constants with the corresponding non-SKIN version (e.g.,
<span class="NDLSystemFont">SCM_DEF_SKINWORLDVIEW</span> becomes
<span class="NDLSystemFont">SCM_DEF_WORLDVIEW</span>, etc), and
replace any of the MATRIX constants with <span class=
"NDLSystemFont">SCM_DEF_SKINBONE_MATRIX_3</span>.</p>

<p>For an example, compare the MetalWars demo's
GeneralDiffuseSpecularGlowSkinned shader from Gamebryo 2.5 with
the same shader from a previous version of Gamebryo.</p>

<a name="Changes_to_NiDX9Renderer" id="Changes_to_NiDX9Renderer"></a><h2>Changes to NiDX9Renderer</h2>

<p>The following functions will now add references to the D3D
resources passed into them:</p>

<ul>
    <li><span class=
    "NDLSystemFont">NiDX9Renderer::CreateNiTextureFromD3DTexture</span></li>

    <li><span class=
    "NDLSystemFont">NiDX9Renderer::RecreateNiTextureFromD3DTexture</span></li>

    <li><span class=
    "NDLSystemFont">NiDX9Direct3DBufferData::Create</span></li>

    <li><span class=
    "NDLSystemFont">NiDX9Direct3DBufferData::RecreateBufferData</span></li>

    <li><span class=
    "NDLSystemFont">NiDX9Direct3DDepthStencilBufferData::Create</span></li>

    <li><span class=
    "NDLSystemFont">NiDX9Direct3DDepthStencilBufferData::RecreateBufferData</span>. </li>
</ul>

<p>After calling these functions, the D3D resources will have
references to them for the lifetime of the resulting Gamebryo
objects (or until their renderer resources are purged.) As a
result, the calling application may also need to release its
reference to the respective D3D resources to ensure that the
resources are correctly deleted.</p>

<a name="Addition_of_Stack_Allocated_Memory" id="Addition_of_Stack_Allocated_Memory"></a><h2>Addition of Stack-Allocated Memory</h2>

<p>To improve performance, Gamebryo now makes use of arrays
allocated on the stack for some short-term allocations rather
than the heap. These allocations are done through the new
<a href="../../Reference/NiSystem/NiMemoryDefines.htm#StackAllocRoutines">
stack allocation routines</a>. Though we have tried to ensure
that such allocations remain relatively small (512 bytes or less
for any given function allocating off the stack), it is possible
that applications using Gamebryo may need to increase their stack
size to prevent overflowing the stack.</p>

<a name="ProcessorSpecificCode_Deprecation" id="ProcessorSpecificCode_Deprecation"></a><h2>Deprecation of NiProcessorSpecificCode</h2>

<p>The previously undocumented functions <span class=
"NDLSystemFont">NiProcessorSpecificCode::TransformPoints</span>
and <span class=
"NDLSystemFont">NiProcessorSpecificCode::TransformVectors</span>
have been marked as deprecated. While these functions remain in
the engine for this release, they will be removed and replaced
with similar functionality in a future version. Additionally, the
PC version now defaults to the pentium-optimized version as that
version is compatible with all modern processors. Several other
functions used internal to the PC version of
NiProcessorSpecificCode have been removed as they were largely
inaccurate.</p>

<a name="Changes_to_NiSourceTexture_Loading" id="Changes_to_NiSourceTexture_Loading"></a><h2>Changes to NiSourceTexture Loading</h2>

<p><span class="NDLSystemFont">NiSourceTexture</span> objects no
longer directly load their image files during the post-link step
of streaming. Instead, the textures are precached using the
<span class="NDLSystemFont">NiRenderer::PrecacheTexture</span>
function, and do not get loaded until <span class=
"NDLSystemFont">NiRenderer::PerformPrecache</span> is called
(either explicitly by the application by the renderer during
drawing).</p>

<a name="NiStreamProcessor_Wait" id="NiStreamProcessor_Wait"></a><h2>Changes to NiStreamProcessor::Wait</h2>

<p>The interpretation of the timeout argument for <a href=
"../../Reference/NiFloodgate/NiStreamProcessor.htm"><span class=
"NDLSystemFont">NiStreamProcessor::Wait</span></a> has been
changed. In previous versions, a timeout of 0 specified an
infinite wait. In Gamebryo 2.5, 0 specifies an immediate return.
Infinite waiting can be achieved by passing 0xFFFFFFFF, the
default, as the timeout. Since the default is still the infinite
value, applications that did not pass the timeout argument will
not need an update, but applications that explicitly passed a
timeout will need to be updated. Also of note, the timeout has
been standardized across platforms. It is now specified in
microseconds rather than performance counter ticks.</p>

<a name="VectorExtraData_Deprecation" id="VectorExtraData_Deprecation"></a><h2>Deprecation of NiVectorExtraData</h2>

<p>The <span class="NDLSystemFont">NiVectorExtraData</span> class
has been marked as deprecated and should no longer be used by
applications. While this class remains in the engine for Gamebryo
2.5, it will be removed from the next version of Gamebryo, since
<span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiFloatsExtraData.htm">NiFloatsExtraData</a></span>
is a more general class with the same functionality, that is
fully supported in the shader system.</p>

<a name="LogicOrdering360" id="LogicOrdering360"></a><h2>Issues with Application Logic Ordering Unique to Xbox
360</h2>

<p>Notes on this topic can be found <a href=
"../../ee_goto.htm#Convert/Previous/Converting_to_Gamebryo_2_5_Xbox360.htm">
here</a>.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
