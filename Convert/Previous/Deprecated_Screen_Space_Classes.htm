<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Deprecated Screen-Space Classes</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<h1>Deprecated Screen-Space Classes</h1>

<p>Several classes related to screen-space drawing were 
 deprecated and replaced with new classes as part of the 2.5 release. The 
 following sections list the deprecated classes, their replacements, and 
 how to convert existing code. </p>

<h2>NiScreenElements</h2>

<p><span class="NDLSystemFont"><a HREF="../../Reference/NiMain/NiScreenElements.htm">NiScreenElements</a></span> 
 has been deprecated and should no longer be used. There is a new class 
 in the <span class="NDLSystemFont"><a HREF="../../Reference/NiMesh/NiMesh.htm">NiMesh</a></span> 
 project, <span class="NDLSystemFont"><a HREF="../../Reference/NiMesh/NiMeshScreenElements.htm">NiMeshScreenElements</a></span>, 
 which replaces it. Similarly, <span class="NDLSystemFont"><a HREF="../../Reference/NiMain/NiScreenElementsData.htm">NiScreenElementsData</a></span> 
 has been deprecated. There is no replacement class for <span class="NDLSystemFont"><a HREF="../../Reference/NiMain/NiScreenElementsData.htm">NiScreenElementsData</a></span>, 
 as its functionality has been included in the new <span class="NDLSystemFont"><a HREF="../../Reference/NiMesh/NiMeshScreenElements.htm">NiMeshScreenElements</a></span> 
 class. </p>

<p>To convert a use of <span class="NDLSystemFont"><a HREF="../../Reference/NiMain/NiScreenElements.htm">NiScreenElements</a></span> 
 to <span class="NDLSystemFont"><a HREF="../../Reference/NiMesh/NiMeshScreenElements.htm">NiMeshScreenElements</a></span>, 
 first change the construction call as follows. If the old code read:</p>
 
<pre>
NiScreenElementsPtr spScreenElements = NiNew NiScreenElements( NiNew NiScreenElementsData(false, true, 1));
</pre> 
 
<p>Replace it with:</p>

<pre>
NiMeshScreenElementsPtr spMeshScreenElements = NiNew NiMeshScreenElements(false, true, 1);
</pre>

<p>The constructor for <span class="NDLSystemFont"><a HREF="../../Reference/NiMesh/NiMeshScreenElements.htm">NiMeshScreenElements</a></span> 
 takes all the same parameters as the old constructor for <span class="NDLSystemFont">NiScreenElementsData</span>, 
 so all uses should convert easily.</p>

<pre>
NiScreenElementsData(bool bWantNormals, bool bWantColors, unsigned short usNumTextureSets, int iMaxPQuantity = 1, int iPGrowBy = 1, int iMaxVQuantity = 4, int iVGrowBy = 1, int iMaxTQuantity = 2, int iTGrowBy = 1);
NiMeshScreenElements(bool bWantNormals, bool bWantColors, NiUInt16 usNumTextureSets, NiInt32 iMaxPQuantity = 1, NiInt32 iPGrowBy = 1, NiInt32 iMaxVQuantity = 4, NiInt32 iVGrowBy = 1, NiInt32 iMaxTQuantity = 2,
NiInt32 iTGrowBy = 1);
</pre> 

<p>If the <span class="NDLSystemFont">NiRenderer::CreateScreenElements</span> 
 factory method was used instead, this is replaced by a new static factory 
 method, <span class="NDLSystemFont">NiMeshScreenElements::Create</span>. 
 Again, all parameters are identical to the old factory method.</p>

<pre>
NiScreenElements* CreateScreenElement( const float fXOffset, const float fYOffset, const unsigned int uiWidth, const unsigned int uiHeight, const DisplayCorner eCorner, const bool bForceSafeZone = true);
static NiMeshScreenElements* Create( NiRenderer* pkRenderer, const float fXOffset, const float fYOffset, const unsigned int uiWidth, const unsigned int uiHeight, const NiRenderer::DisplayCorner eCorner, const bool
bForceSafeZone = true);
</pre>

<p>Once constructed, the <span class="NDLSystemFont"><a HREF="../../Reference/NiMesh/NiMeshScreenElements.htm">NiMeshScreenElements</a></span> 
 can be used like the old <span class="NDLSystemFont"><a HREF="../../Reference/NiMain/NiScreenElements.htm">NiScreenElements</a></span> 
 class. One important difference is that any calls to <span class="NDLSystemFont">NiScreenElements::Draw</span> 
 should be replaced with calls to <span class="NDLSystemFont">NiMeshScreenElements::RenderImmediate</span>.</p>

<h2>Ni2DRenderView</h2>

<p><span class="NDLSystemFont"><a HREF="../../Reference/NiMain/Ni2DRenderView.htm">Ni2DRenderView</a></span>, 
 used to assist in the rendering of <span class="NDLSystemFont"><a HREF="../../Reference/NiMain/NiScreenElements.htm">NiScreenElements</a></span>, 
 has been deprecated along with <span class="NDLSystemFont"><a HREF="../../Reference/NiMain/NiScreenElements.htm">NiScreenElements</a></span>. 
 It is replaced with <span class="NDLSystemFont"><a HREF="../../Reference/NiMesh/NiMesh2DRenderView.htm">NiMesh2DRenderView</a></span> 
 in the <span class="NDLSystemFont">NiMesh</span> project. Other than the 
 class name change, it functions identically to the old <span class="NDLSystemFont"><a HREF="../../Reference/NiMain/Ni2DRenderView.htm">Ni2DRenderView</a></span>.</p>

<h2>NiScreenFillingRenderView</h2>

<p><a HREF="../../Reference/NiMain/NiScreenFillingRenderView.htm"><span 
 class="NDLSystemFont">NiScreenFillingRenderView</span></a> is now a pure 
 virtual class and cannot be instantiated with <span class="NDLSystemFont">NiNew</span>. 
 Applications should call <span class="NDLSystemFont">NiScreenFillingRenderView::Create</span> 
 instead to obtain a <a HREF="../../Reference/NiMesh/NiScreenFillingRenderViewImpl.htm"><span 
 class="NDLSystemFont">NiScreenFillingRenderViewImpl</span></a> instance. 
 That class functions identically to the old <a href="../../Reference/NiMain/NiScreenFillingRenderView.htm"><span 
 class="NDLSystemFont">NiScreenFillingRenderView</span></a>.</p>

<h2>NiScreenTexture</h2>

<p><span class="NDLSystemFont"><a HREF="../../Reference/NiMain/NiScreenTexture.htm">NiScreenTexture</a></span> 
 has been deprecated and should no longer be used. <span class="NDLSystemFont"><a HREF="../../Reference/NiMesh/NiMeshScreenElements.htm">NiMeshScreenElements</a></span> 
 is the new class to use. Because the interface for these two classes differ 
 greatly, some conversion effort is necessary. To help, two methods have 
 been created in <span class="NDLSystemFont"><a HREF="../../Reference/NiMesh/NiMeshScreenElements.htm">NiMeshScreenElements</a></span> 
 to assist in the effort.</p>

<p>The first is a static factory method.</p>

<pre>
static NiMeshScreenElements* Create(NiTexture* pkTexture, NiTexturingProperty::ApplyMode eMode = NiTexturingProperty::APPLY_REPLACE);
</pre>

<p>This mirrors the constructor for <span class="NDLSystemFont"><a HREF="../../Reference/NiMain/NiScreenTexture.htm">NiScreenTexture</a></span>, 
 plus allows for the specification of the texture apply mode, as in <span 
 class="NDLSystemFont">NiScreenTexture::SetApplyMode</span>. Unlike the basic 
 constructor or factory method mentioned in the <span class="NDLSystemFont"><a HREF="../../Reference/NiMain/NiScreenElements.htm">NiScreenElements</a></span> 
 section, this factory method creates the appropriate <span class="NDLSystemFont"><a HREF="../../Reference/NiMain/NiTexturingProperty.htm">NiTexturingProperty</a></span> 
 and attaches it to the <span class="NDLSystemFont"><a HREF="../../Reference/NiMesh/NiMeshScreenElements.htm">NiMeshScreenElements</a></span>. 
 This is similar to how the old <span class="NDLSystemFont"><a HREF="../../Reference/NiMain/NiScreenTexture.htm">NiScreenTexture</a></span> 
 objects were created, and should help the conversion.</p>

<p>The second helper method is:</p>

<pre>
void AddNewScreenRect(short sTop, short sLeft, unsigned short usWidth, unsigned short usHeight, unsigned short usTexTop, unsigned short usTexLeft, NiColorA kColor = NiColorA::WHITE, unsigned int uiScreenWidth = 0,
unsigned int uiScreenHeight = 0);
</pre>

<p>This matches the code for <span class="NDLSystemFont">NiScreenTexture::AddNewScreenRect</span>. 
 An important note is that <span class="NDLSystemFont"><a HREF="../../Reference/NiMesh/NiMeshScreenElements.htm">NiMeshScreenElements</a></span> 
 works internally in normalized floating-point coordinates, while pixel-space 
 coordinates are used for all parameters, so a conversion happens internally 
 in this method. This may have performance implications if <span class="NDLSystemFont">AddNewScreenRect</span> 
 is called frequently. It may be better performance-wise to work with normalized 
 coordinates and use the native <span class="NDLSystemFont"><a HREF="../../Reference/NiMesh/NiMeshScreenElements.htm">NiMeshScreenElements</a></span> 
 calls of <span class="NDLSystemFont">Insert</span>, <span class="NDLSystemFont">SetVertex</span>, 
 etc. </p>

<p>Furthermore, <span class="NDLSystemFont">AddNewScreenRect</span> 
 correctly computes the on-screen coordinates only if the screen element 
 is rendering to the default back buffer. If a different render target 
 is set, the coordinates and size of the resulting image is likely to be 
 incorrect. In this case, you must use the use the optional arguments to 
 set the screen width and height. These values are used in the conversion 
 to normalized floating-point coordinates.</p>

<p>Replacing a call to <span class="NDLSystemFont">NiScreenTexture::GetTexture</span> 
 can be achieved as follows:</p>

<pre>
NiTexturingProperty* pkTexProp = (NiTexturingProperty*)pkMeshScreenElements-&gt; GetProperty(NiProperty::TEXTURING); NiTexture* pkTexture = pkTexProp-&gt;GetBaseTexture();
</pre>

<p>Similarly, the texture apply mode and clamp mode can 
 be set by getting the <span class="NDLSystemFont"><a HREF="../../Reference/NiMain/NiTexturingProperty.htm">NiTexturingProperty</a></span> as above and calling methods on that.</p>

<p>Other needed changes are made by using the appropriate 
 methods for <span class="NDLSystemFont"><a HREF="../../Reference/NiMesh/NiMeshScreenElements.htm">NiMeshScreenElements</a></span>, 
 with the caution that, as mentioned above, <span class="NDLSystemFont"><a HREF="../../Reference/NiMesh/NiMeshScreenElements.htm">NiMeshScreenElements</a></span> 
 uses normalized floating-point coordinates for all values and not pixel 
 values as did <span class="NDLSystemFont"><a HREF="../../Reference/NiMain/NiScreenTexture.htm">NiScreenTexture</a></span>, 
 so conversion will be necessary. </p>

<h2>NiScreenTextureRenderClick</h2>

<p><span class="NDLSystemFont">NiScreenTextureRenderClick</span> 
 has been deprecated along with <span class="NDLSystemFont"><a HREF="../../Reference/NiMain/NiScreenTexture.htm">NiScreenTexture</a></span>. 
 The replacement is to use a <span class="NDLSystemFont"><a HREF="../../Reference/NiMesh/NiMesh2DRenderView.htm">NiMesh2DRenderView</a></span> 
 as above. This class can be attached to <span class="NDLSystemFont"><a HREF="../../Reference/NiMain/NiViewRenderClick.htm">NiViewRenderClick</a></span> 
 for cases where a render click is needed instead of a render view.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->
</body>

</html>
