<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>

<title>Converting to Gamebryo LightSpeed 3.2 Overview</title>

<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Fresnel" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->

<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>

<!--(Begin Body)================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Converting to Gamebryo LightSpeed 3.2 Overview</h1>

<p>Some Gamebryo LightSpeed 3.1 interfaces have changed in Gamebryo LightSpeed 3.2. These changes
are listed in this section to help you identify actions you might need to take to ensure a smooth
conversion path from Gamebryo LightSpeed 3.1 to Gamebryo LightSpeed 3.2. If you are updating from
Gamebryo LightSpeed 3.0 you should also consult the <a href=
"Converting_to_Gamebryo_3_1_Overview.htm">Converting to Gamebryo LightSpeed 3.1 Overview</a>.</p>

<table class="NDLNoteContainer" width="100%">
    <tr align="left">
        <td class="NDLNoteContainerTD">
            <p class="NDLHeadingNoteContainer">Note</p>

            <div class="NDLNote">
                For an overview of the features in this release, see <a href=
                "../../GetStart/All/What_s_New_in_Gamebryo.htm">What's New in Gamebryo
                LightSpeed</a>. Additional discussion of new features, fixed issues, and changes in
                behavior are outlined in the <a href=
                "../../RelNotes/Release_Notes_Introduction.htm">Release Notes</a>.
            </div>
        </td>
    </tr>
</table>

<p>The following notes apply to the 3.1-to-3.2 conversion path:</p>

<h3><a href="#FoundationChanges" style="text-decoration: none;color:black">Foundation Changes</a></h3>
<ul>
    <li><a href="#ConvertDataStream">Removal of efd::DataStream class</a></li>
    <li><a href="#EE_SPECIALIZE_TYPE">EE_SPECIALIZE_TYPE macro changes</a></li>
    <li><a href="#MinMax">Changes to efd::Min, efd::Max, NiMin, and NiMax</a></li>
    <li><a href="#NetworkAPI">Networking API changes</a></li>
</ul>

<h3><a href="#CoreRuntimeChanges" style="text-decoration: none;color:black">Core Runtime Changes</a></h3>
<ul>
    <li><a href="#NiEnvironmentChanges">Changes to NiEnvironment</a></li>
    <li><a href="#NiPhysXChanges">NiPhysX Library Changes</a></li>
    <li><a href="#NiTerrainChanges">Changes to NiTerrain</a></li>
    <li><a href="#ShadowChanges">Shadow technique API changes</a></li>
</ul>

<h3><a href="#SystemServiceChanges" style="text-decoration: none;color:black">System Service Changes</a></h3>
<ul>
    <li><a href="#ServiceAliases">System service registration changes and service aliases</a></li>
    <li><a href="#ServiceDependencies">Service dependency support added to efd::ISystemService and efd::ServiceManager</a></li>
    <li><a href="#AnimationServiceCaching">Caching Actors in Animation Service</a></li>
    <li><a href="#AnimationServiceMessages">Animation Service Messages</a></li>
    <li><a href="#SceneGraphService">Scene Graph Service Changes</a></li>
    <li><a href="#RenderService">Render Service Changes</a></li>
    <li><a href="#LightService">Light Service Changes</a></li>
    <li><a href="#TerrainGameFrameworkChanges">Changes to the Terrain Game Framework</a></li>
    <li><a href="#SceneServiceChanges">PhysX Scene Service Changes</a></li>
    <li><a href="#TriggerServiceChanges">PhysX Trigger Service Changes</a></li>
    <li><a href="#PropServiceMessages">PhysX Prop Service Messages</a></li>
    <li><a href="#PhysXFrameEvents">PhysX Frame Events and Removed Services</a></li>
</ul>

<h3><a href="#EntityModelChanges" style="text-decoration: none;color:black">Entity / Built-in Model Changes</a></h3>
<ul>
    <li><a href="#BlockCallbacks">Changes to EntityLoaderService block loading callbacks</a></li>
    <li><a href="#BlockLoadAPIs">Changes to EntityLoaderService block loading APIs</a></li>
    <li><a href="#BuiltinModelAccessorReturnValues">Built-in Model 'Get' by Reference Accessors</a></li>
    <li><a href="#CBehaviors">Behavior signature change for C++ and built-in behaviors</a></li>
    <li><a href="#ConversionToBuiltinModels">Conversion to Built-in Models</a></li>
    <li><a href="#DefaultOnCreateParam">Default parameters to OnCreate behaviors</a></li>
    <li><a href="#EntityCreation">Setting initial property values during Entity creation</a></li>
</ul>

<h3><a href="#LuaChanges" style="text-decoration: none;color:black">Lua Changes</a></h3>
<ul>
    <li><a href="#AdvancedLuaBinding">Lua behavior parameter changes</a></li>
    <li><a href="#AutoconversionEntityID">Auto-conversion of EntityID values to Entity proxies in Lua</a></li>
    <li><a href="#DirectLuaClassBindings">Direct Lua Bindings for efd::Utility classes</a></li>
    <li><a href="#ExternalSWIGLuaRuntime">External SWIG Lua Runtime Code</a></li>
    <li><a href="#ILuaPropertyHandler">New ILuaPropertyHandler methods for ParameterList usage</a></li>
    <li><a href="#LuaDirectPropertyAccess">Direct access to entity properties in Lua</a></li>
    <li><a href="#Point3LuaRemoval">Removal of point3.lua</a></li>
</ul>

<h3><a href="#OtherChanges" style="text-decoration: none;color:black">Other Changes</a></h3>	
<ul>
    <li><a href="#MigratingToolbenchData">Migrating Toolbench Data</a></li>
    <li><a href="#Misc">Miscellaneous compile affecting changes</a></li>
</ul>
<hr/><br/><br/>

<a name="FoundationChanges" id="FoundationChanges"></a>
<h1>Foundation Changes</h1>

<a name="ConvertDataStream" id="ConvertDataStream"></a>
<h2>Removal of efd::DataStream class</h2>
<p>The <span class="NDLSystemFont">DataStream</span> class was previously used for data marshalling
in both the messaging system and the entity behavior system. Several elements of the design of this
class made it difficult to use and the class has insufficient security against buffer overflows or
underflows. As such, this class has been replaced with a new system that has several improved
features. This requires significant changes to any previous stream operators and any <span
class="NDLSystemFont"><a href="../../Reference/efd/efd__IStreamable.htm">IStreamable</a></span>
implementations (such as all <span class="NDLSystemFont"><a
href="../../Reference/efd/efd__IMessage.htm">IMessage</a></span> classes). Complete details are
discussed in <a href="DataStream_Deprecation.htm">Data Stream Deprecation</a>.</p>

<a name="EE_SPECIALIZE_TYPE" id="EE_SPECIALIZE_TYPE"></a>
<h2>EE_SPECIALIZE_TYPE macro changes</h2>

<p>The <span class="NDLSystemFont">EE_SPECIALIZE_TYPE</span> macro must now be used at the global
scope. Previously it was used inside of the <span class="NDLSystemFont">efd</span> namespace.
Code that does not update the macro usage may generate compile errors such as:</p>
<pre>
error C2039: 'ClassID' : is not a member of 'efd::efd'
error C2912: explicit specialization; 'efd::ClassID efd::efd::GetClassIDFromType&lt;YourType&gt;(void)' is not a specialization of a function template
</pre>

<a name="MinMax" id="MinMax"></a>
<h2>Changes to efd::Min, efd::Max, NiMin, and NiMax</h2>

<p>The efd::Min and efd::Max functions were converted into templated functions in order to better
support a wider range of types and also to better avoid signed/unsigned comparison errors.
Previously these methods only accepted <span class="NDLSystemFont">efd::SInt32</span> or <span
class="NDLSystemFont">efd::Float32</span> type data and any other data would be converted
implicitly. If this API is being called with inconsistent types it will now generate an error
similar to the following example from MSVC:</p>

<pre>error C2782: 'T efd::Min(T,T)' : template parameter 'T' is ambiguous
        could be 'efd::SInt32'
        or       'efd::UInt32'</pre>

<p>When encountering these errors, casting the parameters to <span class="NDLSystemFont"
>efd::SInt32</span> will result in the new behavior matching the previous behavior, but you should
ensure this conversion is safe. Consider following common error:</p>
<pre>
    efd::UInt32 a = 2;
    efd::UInt32 b = 0xFFFFFFFF;
    // Error: code with cast to signed int in order to match the legacy function signature:
    efd::UInt32 result = (efd::UInt32)efd::Min((efd::SInt32)a, (efd::SInt32)b);
</pre>
<p>The result value is 0xFFFFFFFF, not 2, because of the cast to a signed value. In this example you
should remove the bogus cast to the legacy function signature and the code will now work. If you
want implicit conversion to a specific type consider manually specifying the template parameter:</p>
<pre>
    efd::UInt16 a = ...;
    efd::SInt8 b = ...;
    efd::SInt32 result = efd::Min&lt;efd::SInt32&gt;(a, b); // compiler will convert args to SInt32
</pre>

<a name="NetworkAPI" id="NetworkAPI"></a>
<h2>Networking API changes</h2>
<p>As a result of the <span class="NDLSystemFont">efd::DataStream</span> deprecation, low level
networking related interfaces were updated to use <span class="NDLSystemFont"><a
href="../../Reference/efd/efd__SmartBuffer.htm">efd::SmartBuffer</a></span> or <span
class="NDLSystemFont"><a href="../../Reference/efd/efd__Archive.htm">efd::Archive</a></span> instead
of <span class="NDLSystemFont">efd::DataStream</span>. This includes methods in <span
class="NDLSystemFont"><a href="../../Reference/efdNetwork/efd__Socket.htm">efd::Socket</a></span>
and all derived classes. Any custom socket implementations must be updated to match this change.</p>
<p>Further, the <span class="NDLSystemFont"><a href="../../Reference/efd/efd__INetService.htm">
efd::INetService</a></span> interface that is used by Foundation and Framework code to connect the
<span class="NDLSystemFont"><a href="../../Reference/efd/efd__MessageService.htm">
efd::MessageService</a></span> to the networking implementation has been greatly simplified.
Previously this interface contained numerous methods that were implementation details of the default
<span class="NDLSystemFont"><a href="../../Reference/efdNetwork/efd__NetService.htm">efd::NetService
</a></span> implementation and were not required for implementing alternate networking services.
These methods all still exist on the default <span class="NDLSystemFont">NetService</span>
implementation.</p>

<a name="CoreRuntimeChanges" id="CoreRuntimeChanges"></a>
<br/><br/><h1>Core Runtime Changes</h1>

  <a name="NiEnvironmentChanges" id="NiEnvironmentChanges"></a>
  <h2>Changes to NiEnvironment</h2>
  <p>These changes relate to the 2.6 Overlay version only, for users who may have downloaded this
    overlay. For all other users, NiEnvironment is a new feature in Gamebryo LightSpeed 3.2.</p>
  <ul>
    <li>The 2.6 Overlay's time of day file format (.xml) is no longer supported. Artists will need to
      recreate time of day assets through the new Toolbench time of day interface.</li>
    <li>See the Environment - Game Framework documentation for more information about the new format 
      and the changes to apply to existing files. </li>
  </ul>

<a name="NiPhysXChanges" id="NiPhysXChanges"></a>
<h2>NiPhysX Library Changes</h2>

<p>Various methods in the
<span class="NDLSystemFont"><a href="../../Reference/NiPhysX/NiPhysXBodyDesc.htm">NiPhysXBodyDesc</a></span>
class have been modified to take a sleeping parameter. When the sleep status is true, and
the velocities are zero, the actor will be put to sleep whenever cached state is restored.
Code that calls state caching methods must be modified to add the additional parameter.
</p>
    
<p>Gamebryo-PhysX no longer shares collision meshes based upon names. Sharing is now
implemented at the level of
<span class="NDLSystemFont"><a href="../../Reference/NiPhysX/NiPhysXMeshDesc.htm">NiPhysXMeshDesc</a></span>
objects; if two PhysX collision shapes share a pointer to an instance of 
<span class="NDLSystemFont">NiPhysXMeshDesc</span> they also share the underlying PhysX collision
mesh. The <span class="NDLSystemFont">NiPhysXClothMesh</span>,
<span class="NDLSystemFont">NiPhysXConvexMesh</span> and
<span class="NDLSystemFont">NiPhysXTriangleMesh</span> classes have all been removed
as they are no longer needed. The mesh sharing functionality in
<span class="NDLSystemFont"><a href="../../Reference/efdPhysX/efdPhysX__PhysXSDKManager.htm">efdPhysX::PhysXSDKManager</a></span>
has been completely removed. The 
<span class="NDLSystemFont"><a href="../../Reference/NiPhysX/NiPhysXProp.htm">NiPhysXProp</a>::SetMeshPrependName</span>
and
<span class="NDLSystemFont"><a href="../../Reference/NiPhysX/NiPhysXProp.htm">NiPhysXProp</a>::GetMeshPrependName</span>
have also been removed, as there is no need to modify mesh names.
</p>

<p>The changes to sharing mean that meshes will not in general be shared between assets
from different NIF files (sharing within the file is automatic, as is sharing between clones).
To share between NIF files, you must process the PhysX content to force the sharing of
<span class="NDLSystemFont"><a href="../../Reference/NiPhysX/NiPhysXMeshDesc.htm">NiPhysXMeshDesc</a></span>
objects between shapes with the same mesh.
</p>

<p>The mapping from PhysX cloth vertices to Gamebryo mesh vertices has been moved from the
<span class="NDLSystemFont"><a href="../../Reference/NiPhysX/NiPhysXMeshDesc.htm">NiPhysXMeshDesc</a></span>
class to the
<span class="NDLSystemFont"><a href="../../Reference/NiPhysX/NiPhysXClothDesc.htm">NiPhysXClothDesc</a></span>
class so that cloth meshes may be shared. The <span class="NDLSystemFont">SetVertexMap</span>
and <span class="NDLSystemFont">GetVertexMap</span> methods have simply been moved; usage is the
same apart from the object on which the calls should be invoked. A method, named
<span class="NDLSystemFont">GetBackCompatVertexMap</span>, remains in
<span class="NDLSystemFont">NiPhysXMeshDesc</span> to support back compatibility in streamed
files. It should never be used by applications.
</p>

<a name="NiTerrainChanges" id="NiTerrainChanges"></a>
<h2>Changes to NiTerrain</h2>
  <p>Significant changes were made to NiTerrain for the 3.2 release. Please refer below when 
  migrating existing terrain assets and applications to make the appropriate changes.</p>
  <h4>
    Updated file formats
  </h4>
  <p>This release of terrain has seen a large change in the way terrain data is stored and read from 
  disk. Migration of existing assets to the new format is simple, and can be done by following one
  of the following sets of steps.</p>
  <ul>
  <li>
    Migrating terrain assets that were used in 'Block' files:
    <p>
        For block file assets that had a Terrain entity in their scene, 
        the following steps should be followed to migrate your asset.
    </p>
    <ol>
        <li>Make sure all files and folders related to the block file and its terrain assets 
        are <b>not</b> marked read-only.</li>
        <li>Open the game solution. 
        <p>(Note: At this point you should be asked to migrate your
        Game Solution to contain the latest StandardModelLibrary and asset-web-config settings. 
        This must be done for the following steps to work.)</p></li>
        <li>Open the block file within Toolbench.</li>
        <li>An initial prompt will attempt to convert the terrain entity's properties
        into the new terrain entity model. When this completes, the block file will attempt to load.
        <p>If this does not complete successfully, please verify that your asset-web-config settings have
        been updated to the latest versions, and contain the appropriate terrain asset tags. </p></li>
        <li>A second migration wizard window will appear and prompt the user to migrate the
        terrain asset referenced by the terrain entity. Simply read the wizard and click 'next'.</li>
        <li>When the wizard completes, click 'finish' and the Terrain asset should load.</li>
        <li>Click 'save' to push the migration changes to disk</li>
    </ol>
    <p>
        If the migration fails at any point then it may be re-attempted by simply opening the 
        block file again
    </p>
  </li>
  <li>
    Migrating terrain assets that were used in 'GSA' files:
    <p>
        While GSA files and Scene Designer are no longer supported in Gamebryo, terrain assets
        that were used and edited in Scene Designer may be edited and used within Toolbench. 
        Migration of these assets involves an initial 'import an old terrain asset' step. 
        Please follow these steps when attempting to load these assets in Toolbench.
    </p>
    <ol>
        <li>Open Toolbench</li>
        <li>Open or create a Game Solution in the asset-web of the terrain that requires migration</li>
        <li>Create a new block file</li>
        <li>Follow the instructions in the document <a href="../../Tools/WorldBuilderTerrain/wbt_create_terrain.htm">
        "Creating a New Terrain"</a> and select the option "Import an old terrain asset"</li>
        <li>Once the terrain entity is created, a migration wizard will appear and prompt the the 
        user to migrate the terrain asset selected. Simply read the wizard and click 'next'.</li>
        <li>When the wizard completes, click 'finish' and the Terrain asset should load.</li>
        <li>Click 'save' to push the migration changes to disk</li>
    </ol>
  </li>
  </ul>
  
  <p>
        Please attempt to migrate all terrain assets in all block files in your game solution before 
        continuing development of your scenes.
  </p>
  <p>Some significant changes to the file formats to note include:</p>
  <ul>
    <li>
      The terrain archive path is now the only directory used to store files.<br>
    </li>
    <li>
      Sector data is now all stored in a single .dof file and each sector's files are stored in the terrain archive path directory.
    </li>
    <li>
      A new 'root.terrain' file now exists that contains all the surface references of the terrain, and the terrain's basic configuration values. These configuration values no longer need to be set before loading a terrain.<br>
    </li>
    <li>
      Terrain PhysX data can now be saved within the .dof file when using a PhysXTerrain Model. This facilitates the streaming of the data when loading and unloading the terrain.
    </li>
  </ul>
<h4>
    Support removed for the Scene Designer terrain plug-in
  </h4>
  <p>The NiTerrain library is no longer supported by Scene Designer. All terrain assets must now be 
  developed in Toolbench where old assets may be imported. Please consult the Toolbench artist guide 
  documentation for information on importing and migrating old terrain assets.</p>
  <h4>
    Support removed for the NiEntity system
  </h4>
  <p>The NiTerrain library no longer supports the NiEntity framework. The NiTerrainComponent and 
  NiTerrainSectorComponent classes have been removed from the library and no longer work. Users 
  should use the Game Framework block document to load terrain objects in their scene. Please 
  consult the documentation on the Game Framework for information on how to support terrain in your 
  application.</p>
  <h4>
    Updated terrain painting and deformation system
  </h4>
  <p>The painting and sculpting systems have undergone a complete rewrite and share little resemblance
  to the previous version. The entire interface has been moved to the NiTerrain object and no longer relies upon 
  point pools, allowing it to have higher performance and the possibility of filters for the data to 
  be implemented. Detailed information on the new painting process may be found in the terrain 
  documentation on Painting and Deformation.</p>
  <h4>
    <a id=_Removal_of_the_NiTerrainInter name=_Removal_of_the_NiTerrainInter></a> Removal of the NiTerrainInteractor class
  </h4>
  <p>The NiTerrainInteractor class has been deprecated and removed from the NiTerrain library. As 
  such, all of its functionality has either been made directly available on the NiTerrain object 
  itself, or through other mechanisms already available in the terrain system. The following table 
  outlines the migration of the NiTerrainInteractor's functionality. Please refer to the class 
  reference for further information on the refactor of this interface.</p>
  <br />
  <table>
        <thead>
            <tr>
                <th>Original functionality</th>
                <th>New location</th>
            </tr>
        </thead>
        <tbody>
        <tr>
          <td>
            Ray casting and collision functions
          </td>
          <td>
            All collision related functionality has been moved to the NiTerrain class except for the bool Collide(NiRay&, NiTerrainSector& , NiUInt32) function.
          </td>
        </tr>
        <tr>
          <td>
            MetaData functions
          </td>
          <td>
            All metadata related functionality has been moved to the NiTerrain class.
          </td>
        </tr>
        <tr>
          <td>
            Painting functions
          </td>
          <td>
            The painting interface has changed dramatically. Please see the section on the painting 
            system changes for information on the new system. This functionality is now available on 
            the NiTerrain class.
          </td>
        </tr>
        <tr>
          <td>
            Decal functions
          </td>
          <td>
            All decal related functionality has been moved to the NiTerrain class.
          </td>
        </tr>
        <tr>
          <td>
            Toolmode functions
          </td>
          <td>
            All toolmode related functionality has been moved to the NiTerrain class.
          </td>
        </tr>
        <tr>
          <td>
            GetBound
          </td>
          <td>
            Available on NiTerrain through the GetWorldBound function.
          </td>
        </tr>
        <tr>
          <td>
            GetSectorNode
          </td>
          <td>
            Available on NiTerrain through the GetSector function.
          </td>
        </tr>
        <tr>
          <td>
            UpdateSectors
          </td>
          <td>
            Available on NiTerrain through the Update function.
          </td>
        </tr>
        <tr>
          <td>
            MarkSurfaceChanged
          </td>
          <td>
            Available on NiTerrain through the NotifySurfaceChanged function.
          </td>
        </tr>
        <tr>
          <td>
            RemoveSurface<br>
          </td>
          <td>
            Available on NiTerrain through the RemoveSurface function.
          </td>
        </tr>
        <tr>
          <td>
            RenderLowDetailTextures
          </td>
          <td>
            Available on NiTerrain through the RenderLowDetailTextures function.
          </td>
        </tr>
        <tr>
          <td>
            GetSmoothedValue
          </td>
          <td>
            No longer provided.
          </td>
        </tr>
        <tr>
          <td>
            GetSurfaceOpacity
          </td>
          <td>
            Available on NiTerrain through the GetSurfaceOpacity function.
          </td>
        </tr>
        <tr>
          <td>
            GetNumTriangles
          </td>
          <td>
            No longer provided.
          </td>
        </tr>
        </tbody>
      </table>

  <h4>
    Removal of triangle counting functionality from NiTerrain library
  </h4>
  <p>The ability to query the approximate number of triangles the terrain has rendered in the last 
  frame has been removed and is no longer supported.</p>
  <h4>
    Removal of NiTerrainInteractor::Collide overload from NiTerrain library
  </h4>
  <p>
  The bool NiTerrainInteractor::Collide(NiRay&, NiTerrainSector& , NiUInt32) function has been removed
   as a NiTerrainSector pointer can be retrieved using NiRay::GetCollidedCell().</p>
   
   <h4>
    Interface changes for Meta-Data queries
  </h4>
  <p>
  The void NiTerrain::GetBlendedMetaData( ... ) and void NiTerrain::GetMetaData( ... ) functions have changed. 
  Those are now using a efd::map &lt efd::utf8string, NiMetaData &gt as a return parameter instead of the previously used NiTFixedStringMap.
  Purpose and usage of the parameter however remains the same.</p>

<a name="ShadowChanges" id="ShadowChanges"></a>
<h2>Shadow technique API changes</h2>

<p>Several member methods of the <a href="../../Reference/NiMain/NiShadowTechnique.htm">
NiShadowTechnique</a> class have been altered to take a <span class="NDLSystemFont">LightType</span>
argument, so that the depth buffer format may be set per light type for example. Additional methods
have also been added to control filtering and clamping properties.  Custom shadow technique
implementations will need to adjust to initialize the properties for each light type, instead of
just once for the entire technique.</p>

<p>The <a href="../../Reference/NiMain/NiShadowManager.htm">NiShadowManager</a> methods <span
class="NDLSystemFont">CreateShadowMap</span> and <span class="NDLSystemFont">CreateShadowCubeMap
</span> now take a pointer to the technique and light type, instead of explicitly listing out all of
the configuration parameters.</p>

<a name="SystemServiceChanges" id="SystemServiceChanges"></a>
<br/><br/><h1>System Service Changes</h1>

<a name="ServiceAliases" id="ServiceAliases"></a>
<h2>System Service registration changes and service aliases.</h2>
<p>Previously the ServiceManager::RegisterSystemService method took an SSID as the first argument.
This argument was always simply the ClassID of the service being registered with two rare exceptions,
one being when a service derived from another service and the other being when multiple instances
of the same service were registered. Now this SSID parameter has been removed and these two rare
cases are handled through other means.</p>
<p>When a service is registered it will always use the ClassID as reported by the Foundation RTTI
system for the class. For services that derive from another service, there is now a service alias
system that allows the service to also register the base class ClassID as an alias for the same
service instance. When a system service is registered via ServiceManager::RegisterSystemService it
will immediately receive a callback to the efd::ISystemService::OnServiceRegistered method. This
method is provided an efd::IAliasRegistrar interface on which aliases can be registered.</p>
<p>For the case of registering multiple instances of the same service class, you can call the
ServiceManager::RegisterAlternateSystemService method instead of the normal registration method.
Services registered in this way cannot register any aliases and can only be fetched using the
SSID provided when registering the service.</p>

<a name="ServiceDependencies" id="ServiceDependencies"></a>
<h2>Service dependency support added to efd::ISystemService and efd::ServiceManager</h2>
<p>The <span class="NDLSystemFont"><a href="../../Reference/efd/efd__ISystemService.htm">
efd::ISystemService</a></span> interface and the <span class="NDLSystemFont"><a href=
"../../Reference/efd/efd__ServiceManager.htm">efd::ServiceManager</a></span> class have been
significantly altered in order to support explicitly declared dependencies between different system
services. This new dependency system controls the order in which system services have their OnInit
and OnShutdown methods called. The order in which OnTick is called is still controlled by the
previous service priority system. For more details on initialization order, see <a href=
"../../Programmer/SystemServices/system_service_features.htm">System Service Features</a>.</p>
<p>As a
result of these changes, the signature for efd::ISystemService::OnPreInit has changed and existing
overrides must be updated. In addition, the <span class="NDLSystemFont">EE_DEPENDS_ON_SERVICE</span>
and <span class="NDLSystemFont">EE_CONDITIONAL_DEPENDS_ON_SERVICE</span> macros have been removed.
Instead of using these macros, call <span class="NDLSystemFont"><a href=
"../../Reference/efd/efd__IDependencyRegistrar.htm">efd::IDependencyRegistrar</a>::AddDependency
</span> during the OnPreInit method of your service.</p>


<a name="AnimationServiceCaching" id="AnimationServiceCaching"></a>
<h2>Caching Actors in Animation Service</h2>

<p>The <a href="../../Reference/egmAnimation/egmAnimation__AnimationService.htm">Animation Service
</a> caching API has changed. The <span class="NDLSystemFont">Cache</span> member function now
takes a category on which to send a response message indicating that the cache operation has
completed, and a vector of handles to return the cached objects if the requested URN has already
been cached. The function returns <span class="NDLSystemFont">true</span> when the objects
are already cached and the handles vector is returned non-empty. Otherwise,
<span class="NDLSystemFont">false</span> is returned.
</p>

<p>When <span class="NDLSystemFont">false</span> is returned a response message will be sent on the
given category when the assets are loaded and in the cache. That message will be of type <span
class="NDLSystemFont"><a href="../../Reference/egmAnimation/egmAnimation__KFMCacheResponse.htm"
>egmAnimation::KFMCacheResponse</a></span>. Calling code that does not wish to receieve a response
message should use <span class="NDLSystemFont">efd::kCAT_INVALID</span> for the response category.
</p>

<p>The set of handles returned from the cache call or in the message should be retained for use in
removing the objects from the cache, if explicit removal is required.</p>

<a name="AnimationServiceMessages" id="AnimationServiceMessages"></a>
<h2>Animation Service Messages</h2>

<p>Actor <a href="../../Reference/egmAnimation/egmAnimation__ActorAddedMessage.htm">Add</a> and
<a href="../../Reference/egmAnimation/egmAnimation__ActorRemovedMessage.htm">Removed</a> messages
are now sent on a special category that may be obtained using the <span class="NDLSystemFont"><a
href="../../Reference/egmAnimation/egmAnimation__AnimationService.htm">GetMessageCategory</a></span>
method in the Animation Service class. Services that receive such messages must subscribe to the
new category after the Animation Service has had <span class="NDLSystemFont">OnPreInit</span>
called, as would be the case in the <span class="NDLSystemFont">OnInit</span> function of the
receiving service.</p>

<a name="SceneGraphService" id="SceneGraphService"></a>
<h2>Scene Graph Service Changes</h2>
<p>The <span class="NDLSystemFont">CreateSceneGraphUnmanaged</span> method has been renamed to
<span class="NDLSystemFont">CreateExternalSceneGraph</span> to better reflect its
functionality. The method also gained a parameter to enable updating of the external scene
graph. Any application code making use of this function must be modified to use the
new name.</p>

<p>Almost all of the methods in the Scene Graph Service that took an
<span class="NDLSystemFont">egf::EntityID</span> now take
an <span class="NDLSystemFont">egf::Entity*</span> instead. Calling code that already had a pointer to the entity can now
avoid the call to get its ID, while calling code that has only an entity ID can look
up the entity using the Scheduler.</p>

<p>The <span class="NDLSystemFont">FlushUnusedPreloadedAssets</span> method has been removed
because it serves no purpose. Any references to this method may safely be removed from
application code.</p>



<a name="RenderService" id="A1"></a>
<h2>Render Service Changes</h2>

<p>The following functions of the <span class="NDLSystemFont">
<a href="../../Reference/ecr/ecr__RenderService.htm">ecr::RenderService</a></span> and
<span class="NDLSystemFont"><a href="../../Reference/ecr/ecr__RenderContext.htm">
ecr::RenderContext</a></span> classes were changed to deal with entity pointers instead of
entity IDs: <span class="NDLSystemFont">AddRenderedEntity</span> and
<span class="NDLSystemFont">RemoveRenderedEntity</span>.</p>

<p>Two new callback functions were added to <span class="NDLSystemFont">
<a href="../../Reference/ecr/ecr__IRenderServiceDelegate.htm">ecr::IRenderServiceDelegate</a>
</span>: <span class="NDLSystemFont">OnRenderedEntityAdded</span> and
<span class="NDLSystemFont">OnRenderedEntityRemoved</span>.
These functions are called on delegates when an entity scene graph is added or removed from
the render service.  This allows other services that deal with rendered objects to be informed
when rendered objects appear or disappear from the world.</p>

<a name="LightService" id="A2"></a>
<h2>Light Service Changes</h2>

<p><span class="NDLSystemFont"><a href="../../Reference/ecr/ecr__LightService.htm">
ecr::LightService</a></span> has been modified to support entities entering and exiting the
world.  The implementation takes advantage of the new callback functions in the
<span class="NDLSystemFont">IRenderServiceDelegate</span> class rather than using the scene
graph added and scene graph removed messages.  Thus, the functionality of the previous
<span class="NDLSystemFont">HandleSceneGraphAddedMessage</span> and
<span class="NDLSystemFont">HandleSceneGraphRemovedMessage</span> have been moved to the new
<span class="NDLSystemFont">OnRenderedEntityAdded</span> and
<span class="NDLSystemFont">OnRenderedEntityRemoved</span> functions.</p>

<a name="TerrainGameFrameworkChanges" id="TerrainGameFrameworkChanges"></a>
<h2>
Changes to the Terrain Game Framework</h2>
<p>
The following sections outline the main changes made to the Terrain Game Framework
integration in the 3.2 release. Please refer to this section when migrating existing
terrain assets and applications to make the appropriate changes.
</p>
<p>
Users are encouraged to backup their work and assets before migrating to the new
version of the terrain.
</p>
<h3>
Entity model changes
</h3>
<p>
The new terrain engine has made some changes to the way terrain entities are modeled
within the Game Framework. Terrain assets are no longer referenced by their .dof
files and explicit references to the material packages are no longer required. Users
will be prompted to migrate their terrain assets through a wizard when opening old
block files in Toolbench and the relevant updates to both the entites and the assets
will be taken care of.
</p>
<p>
However, one step is not performed by the migration wizard. This step is the deletion
of the old asset files that are no longer required. These files are usually found
within the 'sector_0_0' directory of the terrain archive path, and once the terrain
has been successfully migrated, these files are no longer required.
</p>
<h3>Asset tagger changes</h3>
<p>
The terrain engine has some specific configuration requirements of the asset-web-config
configuration data, as such, some of the tagger configuration files have changed
with the new terrain engine. Users will be prompted to update their asset web configuration
when opening game solutions from older releases of the engine and if followed through,
the wizard will take care of all the necessary updates to existing assets.
</p>
<p>
The section in this documentation titled 'Terrain assets' contains more information
on the specific configuration details of these files.
</p>

<h3>PhysXTerrainService</h3>
<p>
 The new PhysX terrain service no longer relies on its own file format. PhysX specific data is 
 now saved within the terrain .dof file and does not require a different file. This process is
 handled automatically when saving or loading an Entity implementing the PhysXTerrain model. Once the
 migration wizard has completed its process, saving will update the PhysX data as required. The .tpx
 file is no longer used.
</p>

<a name="SceneServiceChanges" id="SceneServiceChanges"></a>
<h2>PhysX Scene Service Changes</h2>

<p>The <span class="NDLSystemFont"><a href=
"../../Reference/QuickRef_Services/svc_qckref_scene_svc.htm">PhysX Scene Service</a></span>
has been refactored to use a
<a href="../../Reference/egfPhysX/egfPhysX__PhysXSceneModel.htm">built-in model</a>
for the <a href=
"../../Reference/QuickRef_Models/PhysXModelLibrary__PhysXScene.htm">PhysXScene</a> model.
As part of this work, some of the APIs for accessing scenes in the PhysX Scene Service have
changed, and the timing of messages has also been affected. Most importantly, most methods
to access scenes by entity ID have been removed. Get the scene name from the entity and use
that to find it in the PhysX Scene Service.
</p>
        

<a name="TriggerServiceChanges" id="TriggerServiceChanges"></a>
<h2>PhysX Trigger Service Changes</h2>

<p>The <span class="NDLSystemFont">AddEntityActor</span> method of the
<span class="NDLSystemFont">
<a href="../../Reference/egfPhysX/egfPhysX__TriggerService.htm">egf::TriggerService</a>
</span> class has gained a parameter that determines how the entity's actor is treated upon
entity removal. When the <span class="NDLSystemFont">takeOwnership</span> parameter is true the
Trigger Service will release the actor when the entity is removed. Application code calls to this
method must be updated. The addition of this parameter enabled cleaner shutdown. The
<span class="NDLSystemFont">releaseActor</span> parameter to the
<span class="NDLSystemFont">RemoveEntityActor</span> method has been removed, as ownership is now
sufficient to determine the removal behavior.
</p>

<p>The <span class="NDLSystemFont">
<a href="../../Reference/egfPhysX/egfPhysX__EntityActorData.htm">egf::EntityActorData</a>
</span> class has been modified to store the ownership flag.
</p>

<a name="PropServiceMessages" id="PropServiceMessages"></a>
<h2>PhysX Prop Service Messages</h2>

<p>Message sending from the <a href="../../Reference/QuickRef_Services/svc_qckref_prop_svc.htm">
PhysX Prop Service</a> has been changed. Previously, messages were sent as raw
<span class="NDLSystemFont"><a href="../../Reference/efd/efd__StreamMessage.htm">efd::StreamMessage</a></span>
objects that needed to be unpacked by the application. Now, there is a specific message
class for <span class="NDLSystemFont"><a href="../../Reference/ecrPhysX/ecrPhysX__NiPhysXSceneAdded.htm">
NiPhysXSceneAdded</a></span> messages. There is a generic message class,
<span class="NDLSystemFont"><a href="../../Reference/ecrPhysX/ecrPhysX__PhysXPropMessage.htm">
PhysXPropMessage</a></span> that is wrapped to provide the
<span class="NDLSystemFont">PhysXPropAddedToScene</span> and
<span class="NDLSystemFont">PhysXPropRemovingFromScene</span> messages. Services that
receive any of these messages must be updated to handle the new types.</p>

<a name="PhysXFrameEvents" id="PhysXFrameEvents"></a>
<h2>PhysX Frame Events and Removed Services</h2>

<p>The <span class="NDLSystemFont">egfPhysX::StartSimulationService</span> and
<span class="NDLSystemFont">egfPhysX::FinishSimulationService</span> classes have been
replaced by frame events, named <span class="NDLSystemFont">SceneService!Simulate</span>
and <span class="NDLSystemFont">SceneService!FetchResults</span>, managed by the
<a href=
"../../Reference/QuickRef_Services/svc_qckref_scene_svc.htm">PhysX Scene Service</a>.
Applications that previously created these services must be modified to remove the now-unnecessary
code; the Scene Service now automatically manages all aspects of starting and stopping simulation.
For more information on Frame Events see the reference documentation for
<span class="NDLSystemFont"><a href="../../Reference/efd/efd__IFrameEvent.htm">efd::IFrameEvent</a>
</span>.
</p>

<p>The <span class="NDLSystemFont">ecrPhysX::UpdateDestinationsService</span> and
<span class="NDLSystemFont">ecrPhysX::UpdateSourcesService</span> classes have been
replaced by frame events, named <span class="NDLSystemFont">PropService!UpdateDestinations</span>
and <span class="NDLSystemFont">PropService!UpdateSources</span>, managed by the
<a href=
"../../Reference/QuickRef_Services/svc_qckref_prop_svc.htm">PhysX Prop Service</a>.
Applications that previously created these services must be modified to remove the now-unnecessary
code; the Prop Service now automatically manages all aspects of updating PhysX object and updating
Gamebryo from PhysX.
</p>

<p>Applications that used custom implementations of the removed classes, or derived from them,
have two options for re-implemening the customizations. One option is to use a frame event handler
object (derived from <span class="NDLSystemFont">
<a href="../../Reference/efd/efd__IBase.htm">efd::IBase</a></span>, or even a system service)
and register to handle the relevant frame events. The handler can specify a priority to control
whether it receives the frame event before or after the relevant PhysX service. The alternative is
to modify the frame event handlers in the PhysX Scene Service or PhysX Prop Service. We strongly
discourage the latter option as it is less robust to future code changes and harder to merge in
source control operations.
</p>

<a name="EntityModelChanges" id="EntityModelChanges"></a>
<br/><br/><h1>Entity / Built-in Model Changes</h1>

<a name="BlockCallbacks" id="BlockCallbacks"></a>
<h2>Changes to EntityLoaderService block loading callbacks</h2>
<p>Callbacks associated with block loading and unloading through the <span class="NDLSystemFont"><a
href="../../Reference/egf/egf__EntityLoaderService.htm">egf::EntityLoaderService</a></span> are now
more reliably invoked. In particular, the callbacks used when a block was first loaded will now
receive all messages associated with the unloading of a block. This includes both message based
callbacks and behavior based callbacks. Typically this means that the call to unload a block will
not need to pass a callback unless that callback is different from the one used when loading the
block. Using the same callback for both load and unload will now result in the callback being
invoked twice. Also note that new block loading settings allow supressing some block loading
callbacks so unwanted callbacks can be avoided.</p>

<a name="BlockLoadAPIs" id="BlockLoadAPIs"></a>
<h2>Changes to EntityLoaderService block loading APIs</h2>
<p>Block loading APIs have changed to support the following new features.</p>
<h3>Support for multiple block instances</h3>
<p>The <span class="NDLSystemFont"><a href="../../Reference/egf/egf__EntityLoaderService.htm">
egf::EntityLoaderService</a></span> now supports loading multiple instances of the same block by
allowing the caller to specify a 32-bit block instance number. The combination of the block <span
class="NDLSystemFont">AssetID</span> and instance number are now stored in an <span class=
"NDLSystemFont"><a href="../../Reference/egf/egf__BlockIdentification.htm">egf::BlockIdentification
</a></span> instance which is now used by all Entity Loader Service methods instead of just the
<span class="NDLSystemFont">AssetID</span>. If you are not using instancing, you can construct a
default <span class="NDLSystemFont">BlockIdentification</span> from an <span class="NDLSystemFont">
AssetID</span> or from a string containing a URN.</p>
<h3>Additional control settings when loading a block</h3>
<p>Block loading also now supports many control parameters beyond the simple callbacks that
could previously be specified. Examples include the ability to offset and rotate blocks when they
are loaded, control how quickly blocks load to limit CPU usage and specify which block progress
messages will be sent to avoid unwanted messaging. To support all these settings, all block loading
configuration has been moved into the <span class="NDLSystemFont"><a href=
"../../Reference/egf/egf__BlockLoadParameters.htm">egf::BlockLoadParameters</a></span> class. To
adjust these settings you should create an instance of this class (on the stack is fine), call the
appropriate <span class="NDLSystemFont">BlockLoadParameters</span> methods to select the desired
options and then pass in a reference to the object to the block loading API. Users loading a block
from script can specify all the same parameters and the block instance ID by constructing a
<span class="NDLSystemFont">ParameterList</span> with options and calling <span class=
"NDLSystemFont"><a href="../../Reference/Namespaces/BehaviorAPI.htm">BehaviorAPI.LoadBlockFile</a></span>.</p>

<a name="BuiltinModelAccessorReturnValues" id="BuiltinModelAccessorReturnValues"></a>
<h2>Built-in Model 'Get' by Reference Accessors</h2>

<p>Two new macros (<span class="NDLSystemFont">EE_BUILTINMODELPROPERTY_ACCESSOR_REF</span> and <span
class="NDLSystemFont">EE_BUILTINMODELPROPERTY_READONLY_ACCESSOR_REF</span>) were added to <span
class="NDLSystemFont">egf::BuiltinModelHelper.h</span> to support 'Get' accessors that return
properties by const reference instead of by value.</p>

<p>You might consider using these new macros for all non-plain old data (POD) types to avoid the
construction of intermediate temporary objects when returning objects from 'Get' accessor methods.
You can uses these macros for POD types also, but this will have no effect as these types do not
create temporary objects for return values.</p>

<p>You must avoid returning references to temporary local variables. For example, when returning a
calculated value by reference. You can avoid this by continuing to use the non-reference version of
these macros and return your calculated property by value. Returning non-static local variables by
reference from 'Get' accessors will result in undefined behavior at runtime, and most likely will
crash your application.</p>

<p>Example: The following shows a previous implementation of a built-in model 'Get' accessor
followed by the updated version.</p>

<p><b>Previous built-in model 'Get' accessor, return by value:</b></p>

    <pre>
    ...
    EE_BUILTINMODELPROPERTY_READONLY_ACCESSOR(
        MyComponent,
        kPID_MyValuePropertyID,
        utf8string,
        MyComponent,
        GetValue)
    ...

public:
    utf8string GetValue() const
    {
        return m_value;
    }

private:
    utf8string m_value;</pre>

<p><b>Updated built-in model 'Get' accessor, return by const reference:</b></p>

<pre>
    ...
    EE_BUILTINMODELPROPERTY_READONLY_ACCESSOR_REF(
        MyComponent,
        kPID_MyValuePropertyID,
        utf8string,
        MyComponent,
        GetValue)
    ...

public:
    const utf8string&amp; GetValue() const
    {
        return m_value;
    }

private:
    utf8string m_value;
</pre>

<a name="CBehaviors" id="CBehaviors"></a>
<h2>Behavior signature change for C++ and built-in behaviors</h2>
<p>Use of <span class="NDLSystemFont">efd::DataStream</span> for behaviors has been replaced with
<span class="NDLSystemFont"><a href="../../Reference/efd/efd__ParameterList.htm">efd::ParameterList</a></span>.
This changes the function signature of <span class="NDLSystemFont"><a
href="../../Reference/egf/egf__IBuiltinModel.htm">IBuiltinModel</a>::Dispatch</span>; all built-in
model implementations that use the dispatch method to invoke behaviors must be updated. Without
this update they will compile correctly but fail to invoke expected behaviors at runtime.</p><p> In
addition, the signature for all C++ behaviors as passed to <span class="NDLSystemFont"><a
href="../../Reference/egf/egf__BehaviorDescriptor.htm">BehaviorDescriptor</a>::AddStaticBahavior</span>
has changed. A compile error will result unless these methods are updated. For either behavior type,
updating these methods simply involves replacing the old <span class="NDLSystemFont">DataStream</span>
with a <span class="NDLSystemFont">ParameterList</span> as shown in the examples discussed in <a
href="DataStream_Deprecation.htm">Data Stream Deprecation</a>.</p>

<a name="ConversionToBuiltinModels" id="ConversionToBuiltinModels"></a>
<h2>Conversion to Built-in Models</h2>

<p>Some entity models across all libraries have been converted to built-ins. <em>All models
should be re-exported by opening the EMT project in Toolbench and selecting "Save" from the
File menu.</em> Toolbench does not automatically detect the switch to a built-in model, so
commands that save only changed models are not adequate. Failure to re-export models that mix-in
new built-ins will result in incorrect entity behavior.
</p>

<a name="DefaultOnCreateParam" id="DefaultOnCreateParam"></a>
<h2>Default parameters to OnCreate behaviors</h2>

<p>The <span class="NDLSystemFont">OnCreate</span> behavior now takes a new optional parameter that
is handled by the Game Framework directly. This new parameter, named "<span class="NDLSystemFont"
>AutoEnterWorld</span>" informs the <span class="NDLSystemFont">OnCreate</span> behavior whether
this entity will be automatically entering the world once the <span class="NDLSystemFont">OnCreate
</span> behavior completes.</p><p>The addition of this new parameter can break some previously valid
<span class="NDLSystemFont">OnCreate</span> behavior implementations; any <span
class="NDLSystemFont">OnCreate</span> that used the presence or absence of any parameters as a mode
selector will need to be updated to account for this optional parameter that could be injected by
the Game Framework. It is highly recommended that all "extends" style behaviors such as <span
class="NDLSystemFont">OnCreate</span> and <span class="NDLSystemFont">OnDestroy</span> be updated to
use named parameters to avoid this problem.</p><p>Consider this example adapted from the Mangled Metal
sample:</p>
<pre>
-- Old code
function OnCreate(selfID, strm)
    if (strm == nil or strm:Eof()) then
        -- No parameters passed in; return early
        return
    end

    -- In 3.1 it was valid to assume your scripts were the only source of OnCreate parameters, but
    -- this could generate a type mismatch error or read the wrong parameter in 3.2 due to the
    -- addition of new optional default parameters!
    local hasPosition = strm:GetBool()
    if hasPosition then
        local initialPosition = strm:GetPoint3()
        BehaviorAPI.SetProperty(selfID, "Position", initialPosition)
    end

    local hasRotation = strm:GetBool()
    if hasRotation then
        local initialRotation = strm:GetPoint3()
        BehaviorAPI.SetProperty(selfID, "Rotation", initialRotation)
    end
end

-- New code
function OnCreate(self, params)
    -- Using named parameters allows safe access to the parameter and will work even if you mix
    -- together multiple models that each require parameters to OnCreate. If the parameter is not
    -- there nil is returned. If the parameter is there but the wrong type an error is generated.
    local initialPosition = params:GetPoint3("InitialPosition")
    if initialPosition ~= nil then
        self.Position = initialPosition
    end

    local initialRotation = params:GetPoint3("InitialRotation")
    if initialRotation ~= nil then
        self.Rotation = initialRotation
    end
end
</pre>

<p><b>Note:</b> The above example is used to set the Entity Position in OnCreate. In previous LightSpeed
releases this was required because there was no way to specify initial property values when creating
new entities.</p><p>In LightSpeed 3.2 you can specify these values directly and they are set before OnCreate
is even called. See <a href="#EntityCreation">"Setting initial property values"</a>.
This eliminates the need to set initial property values in OnCreate for dynamically created entities (entities created
using EntityManager::CreateEntity or BehaviorAPI::CreateEntity). This does not apply to entities created as part of a 
block load as the initial  property values are set based on values in the block or the entity's flat model.</p>

<a name="EntityCreation" id ="EntityCreation"></a>
<h2>Setting initial property values during Entity creation</h2>
<p>The <span class="NDLSystemFont"><a href="../../Reference/egf/egf__EntityManager.htm">
egf::EntityManager</a>::CreateEntity</span> method now takes an additional <span class=
"NDLSystemFont"><a href="../../Reference/efd/efd__ParameterList.htm">efd::ParameterList</a></span>
that can be used to specify initial property values. This is in addition to the previous <span
class="NDLSystemFont">ParameterList</span> that is used to pass arguments to the OnCreate behavior.
Values placed into this new list are applied as soon as the entity is allocated and before the
OnCreate behavior is executed. In many cases, using this new method can remove the need to even
implement an OnCreate behavior; doing so can improve performance and decrease entity creation time.
</p>


<a name="LuaChanges" id="LuaChanges"></a>
<br/><br/><h1>Lua Changes</h1>

<p>There have been extensive changes to the Lua scripting system in the 3.2 release. These changes
were designed to make scripting in Lua easier and more intuitive. Care has been 
taken to maintain backwards compatiability but you may run into situations where previous scripts no 
longer function as expected. This section describes these changes.</p>

<a name="AdvancedLuaBinding" id="AdvancedLuaBinding"></a>
<h2>Lua behavior parameter changes</h2>
<p>The parameters passed to Lua behaviors have changed. Existing scripts will work without change in
many cases because the new functionality provides a backwards compatible interface, but it is
important to understand the changes.</p><p>The first parameter is now an entity proxy
object (named "<span class="NDLSystemFont">self</span>" by default) that can be used to read and
write properties and call entity-related BehaviorAPI methods directly.</p><p>The second parameter is now a
<span class="NDLSystemFont">ParameterList</span> instance (called "<span class="NDLSystemFont"
>params</span>" by default). <span class="NDLSystemFont">ParameterList</span> is a more advanced
list of parameters that supports named parameters, random access and is type safe. Effort has been
made to maintain backwards compatibility, but some Lua commands that previously worked with the old
integer "<span class="NDLSystemFont">selfID</span>" may now result in bugs. In general any built-in
API method that takes an <span class="NDLSystemFont">EntityID</span> can now take either an entity
proxy object or an integer containing just an <span class="NDLSystemFont">EntityID</span>; however,
many Lua functions treat the userdata object very differently from an integer. The most common issue
we have seen involves the <span class="NDLSystemFont">string.format</span> function:</p>
<pre>
-- Old behavior that worked but now results in an error:
function SomeBehavior(selfID, strm)
    print( string.format("Behavior called on entity %x", selfID) )
end

-- New style for the same functionality
function SomeBehavior(self, params)
    -- use the "ID" member on self to get just the EntityID an a Lua integer:
    print( string.format("Behavior called on entity %x", self.ID) )

    -- alternatively, tostring can be used but this outputs in a different format than before:
    print( "Behavior called on entity " .. tostring(self) )
end
</pre>
<p>All of the old built-in API methods should continue to work the same, but you may wish to update
your existing Lua behaviors to use the new syntax in order to improve script readability. The most
common changes can be made by using a series of search and replace commands. </p><p>For example, the table
that follows shows the replacements that were made to all Emergent samples. The following strings
use the Visual Studio regular expression syntax and should work with the "Match Case" and "Match
Whole Word" options enabled. These replacements assume all BehaviorAPI calls are each on a single
line. There may be some lines that do not convert correctly so be sure to carefully review the
results. Also, the following changes should be made <em>in order</em> as some assume that previous
matching lines have already been replaced:</p>

<table>
    <thead>
        <tr>
            <th>'Find what:' Visual Studio regular expression:</th>
            <th>'Replace with:' Visual Studio regular expression:</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>BehaviorAPI\.GetProperty\(:b*selfID,:b*"{:i}":b*\)</td>
            <td>self.\1</td>
        </tr>
        <tr>
            <td>BehaviorAPI\.GetProperty\(:b*selfID,:b*'{:i}':b*\)</td>
            <td>self.\1</td>
        </tr>
        <tr>
            <td>BehaviorAPI\.GetProperty\(:b*selfID,:b*{:i}:b*\)</td>
            <td>self[\1]</td>
        </tr>
        <tr>
            <td>BehaviorAPI\.GetProperty\(:b*selfID,:b*"{:i}",:b*{(:q|:i|:z)}:b*\)</td>
            <td>self.\1[\2]</td>
        </tr>
        <tr>
            <td>BehaviorAPI\.GetProperty\(:b*selfID,:b*'{:i}',:b*{(:q|:i|:z)}:b*\)</td>
            <td>self.\1[\2]</td>
        </tr>
        <tr>
            <td>BehaviorAPI\.GetProperty\(:b*selfID,:b*{:i},:b*{(:q|:i|:z)}:b*\)</td>
            <td>self[\1][\2]</td>
        </tr>
        <tr>
            <td>{:b*}{(local:b*)*:i}:b*=:b*BehaviorAPI\.SetProperty{.*}</td>
            <td>\1BehaviorAPI.SetProperty\3\n\1\2 = Emergent.PropertyResult</td>
        </tr>
        <tr>
            <td>BehaviorAPI\.SetProperty\(:b*selfID,:b*"{:i}",:b*{(:q|:i|:z)},:b*{.*}:b*\)</td>
            <td>self.\1[\2] = \3</td>
        </tr>
        <tr>
            <td>BehaviorAPI\.SetProperty\(:b*selfID,:b*'{:i}',:b*{(:q|:i|:z)},:b*{.*}:b*\)</td>
            <td>self.\1[\2] = \3</td>
        </tr>
        <tr>
            <td>BehaviorAPI\.SetProperty\(:b*selfID,:b*{:i},:b*{(:q|:i|:z)},:b*{.*}:b*\)</td>
            <td>self[\1][\2] = \3</td>
        </tr>
        <tr>
            <td>BehaviorAPI\.SetProperty\(:b*selfID,:b*"{:i}",:b*{.*}:b*\)</td>
            <td>self.\1 = \2</td>
        </tr>
        <tr>
            <td>BehaviorAPI\.SetProperty\(:b*selfID,:b*'{:i}',:b*{.*}:b*\)</td>
            <td>self.\1 = \2</td>
        </tr>
        <tr>
            <td>BehaviorAPI\.SetProperty\(:b*selfID,:b*{:i},:b*{.*}:b*\)</td>
            <td>self[\1] = \2</td>
        </tr>
        <tr>
            <td>BehaviorAPI\.GetModelName\(:b*selfID:b*\)</td>
            <td>self:GetModelName()</td>
        </tr>
        <tr>
            <td>BehaviorAPI\.SendEvent\(:b*selfID,:b*</td>
            <td>self:SendEvent(</td>
        </tr>
        <tr>
            <td>BehaviorAPI\.ResetProperty\(:b*selfID,:b*</td>
            <td>self:ResetProperty(</td>
        </tr>
        <tr>
            <td>BehaviorAPI\.HasProperty\(:b*selfID,:b*{(:q|:i)}:b*\):b*==:b*BehaviorAPI\.ec_Yes</td>
            <td>self:ContainsProperty(\1)</td>
        </tr>
        <tr>
            <td>BehaviorAPI\.ec_Yes:b*==:b*BehaviorAPI\.HasProperty\(:b*selfID,:b*{(:q|:i)}:b*\)</td>
            <td>self:ContainsProperty(\1)</td>
        </tr>
        <tr>
            <td>BehaviorAPI\.HasProperty\(:b*selfID,:b*{(:q|:i)}:b*\):b*\~=:b*BehaviorAPI\.ec_Yes</td>
            <td>not self:ContainsProperty(\1)</td>
        </tr>
        <tr>
            <td>BehaviorAPI\.ec_Yes:b*\~=:b*BehaviorAPI\.HasProperty\(:b*selfID,:b*{(:q|:i)}:b*\)</td>
            <td>not self:ContainsProperty(\1)</td>
        </tr>
        <tr>
            <td>BehaviorAPI\.HasBehavior\(:b*selfID,:b*{(:q|:i)}:b*\):b*==:b*BehaviorAPI\.ec_Yes</td>
            <td>self:ContainsBehavior(\1)</td>
        </tr>
        <tr>
            <td>BehaviorAPI\.ec_Yes:b*==:b*BehaviorAPI\.HasBehavior\(:b*selfID,:b*{(:q|:i)}:b*\)</td>
            <td>self:ContainsBehavior(\1)</td>
        </tr>
        <tr>
            <td>BehaviorAPI\.HasBehavior\(:b*selfID,:b*{(:q|:i)}:b*\):b*\~=:b*BehaviorAPI\.ec_Yes</td>
            <td>not self:ContainsBehavior(\1)</td>
        </tr>
        <tr>
            <td>BehaviorAPI\.ec_Yes:b*\~=:b*BehaviorAPI\.HasBehavior\(:b*selfID,:b*{(:q|:i)}:b*\)</td>
            <td>not self:ContainsBehavior(\1)</td>
        </tr>
        <tr>
            <td>BehaviorAPI\.HasMixin\(:b*selfID,:b*{(:q|:i)}:b*\):b*==:b*BehaviorAPI\.ec_Yes</td>
            <td>self:ContainsMixin(\1)</td>
        </tr>
        <tr>
            <td>BehaviorAPI\.ec_Yes:b*==:b*BehaviorAPI\.HasMixin\(:b*selfID,:b*{(:q|:i)}:b*\)</td>
            <td>self:ContainsMixin(\1)</td>
        </tr>
        <tr>
            <td>BehaviorAPI\.HasMixin\(:b*selfID,:b*{(:q|:i)}:b*\):b*\~=:b*BehaviorAPI\.ec_Yes</td>
            <td>not self:ContainsMixin(\1)</td>
        </tr>
        <tr>
            <td>BehaviorAPI\.ec_Yes:b*\~=:b*BehaviorAPI\.HasMixin\(:b*selfID,:b*{(:q|:i)}:b*\)</td>
            <td>not self:ContainsMixin(\1)</td>
        </tr>
        <tr>
            <td>selfID</td>
            <td>self</td>
        </tr>
    </tbody>
</table>


<a name="AutoconversionEntityID" id="AutoconversionEntityID"></a>
<h2>Auto-conversion of EntityID values to Entity proxies in Lua</h2>

<p>All <span class="NDLSystemFont">EntityID</span> values passed into and out of Lua are now
auto-converted to a Lua-side proxy object for the underlying entity. These proxies bind many of the
functions also defined in the BehaviorAPI, including methods like '<span class="NDLSystemFont"
>GetModelName</span>' and '<span class="NDLSystemFont">SendEvent</span>,' to perform the operation
using the ID of the enity proxy. The following sample Lua code shows a send event before and after
these changes.</p>

<p><b>Previous SendEvent Example</b></p>
<pre>BehaviorAPI.SendEvent(selfID, "BehaviorName")</pre>

<p><b>LightSpeed 3.2 Version</b></p>
<pre>self:SendEvent("BehaviorName")</pre>

<p>The Lua Entity proxy has a standard attribute named '<span class="NDLSystemFont">ID</span>' that
contains the UInt64 numeric representation of the EntityID.</p>

<p><b>ID Attribute Example:</b></p>

<pre>local entityIDValue = entityProxy.ID</pre>

<p>In addition, you can bind an arbitrary UInt64 value to an Entity proxy by calling <span
class="NDLSystemFont">Emergent:GetEntity(eid)</span>, passing in the ID value. If you are passing
EntityIDs as UInt64 values (for example, placing UInt64 values in a ParameterList), you must explicit
convert this UInt64 value to an Entity proxy by calling Emergent:GetEntity(eid).</p>

<p>An entity proxy is created whenever an EntityID is passed into the Lua runtime. This includes the
<span class="NDLSystemFont">BehaviorAPI.CreateEntity</span> call. Previously this call would return
'<span class="NDLSystemFont">nil</span>' if the entity could not be created. In LightSpeed 3.2, this
call returns <span class="NDLSystemFont">Entity.InvalidEntity</span> on failure instead.</p>

<p><b>Previous CreateEntity Example</b></p>
<pre>local entityID = BehaviorAPI.CreateEntity("MyModel")
if entityID ~= nil then ...</pre>

<p><b>LightSpeed 3.2 Version</b></p>
<pre>local entity = BehaviorAPI.CreateEntity("MyModel")
if entity ~= Entity.InvalidEntity then...</pre>

<p>See <a href="../../Programmer/Scripting/lua_lib_Entity.htm">Entity (proxy)</a> Lua binding documentation for more information 
about the Lua Entity proxy object.</p>

<a name="DirectLuaClassBindings" id="DirectLuaClassBindings"></a>
<h2>Direct Lua Bindings for efd::Utility Classes</h2>

<p>SWIG bindings for the efd utility classes (<span class="NDLSystemFont">efd::Point2</span>, <span
class="NDLSystemFont">efd::Point3</span>, <span class="NDLSystemFont">efd::Point4</span>, <span
class="NDLSystemFont">efd::Matrix3</span>, <span class="NDLSystemFont">Quaternion</span>, <span
class="NDLSystemFont">efd::Color</span>, <span class="NDLSystemFont">efd::ColorA</span>, <span
class="NDLSystemFont">egf::AttachNifData</span>) used as property types were added to the Lua
runtime system. These bindings
maintain backward compatibility with the previous table-based bindings for these types and add
direct access to many of the C++ methods for these classes. For more details on these bindings and
the functions available to them from Lua see the <a
href="../../Programmer/Scripting/lua_scripting_overview.htm">Lua Scripting Overview</a> section of
the documentation. It is also easy to directly bind other property types as needed. </p>

<p>If you've written Lua implementations of common utility class C++ methods, you might consider
switching to these bindings. You can then remove your Lua implementations and make calls directly to
the C++ methods using these bindings. An example of this would be the addition of two <span
class="NDLSystemFont">efd::Point3</span> instances in Lua.</p>

<p><b>Previous Point3 Addition Lua Script</b></p>
<pre>require 'point3.lua'
local p1 = Point3_new(1,2,3)
local p2 = Point3_new(4,5,6)
local p3 = p1:add(p2)</pre>

<p><b>LightSpeed 3.2 Point3 Addition Lua Script</b></p>
<pre>local p1 = Point3.Point3(1,2,3)
local p2 = Point3.Point3(4,5,6)
local p3 = p1 + p2</pre>

<p>Using the built-in utility class bindings should make your scripts easier to comprehend and
maintain.</p>

<a name="ExternalSWIGLuaRuntime" id="ExternalSWIGLuaRuntime"></a>
<h2>External SWIG Lua Runtime Code</h2>

<p>An update was made to the way Lua bindings are generated using SWIG. In previous LightSpeed
releases, each SWIG generated <span class="NDLSystemFont">_wrap.cpp</span> file included common SWIG
Lua type binding code. This resulted in the generation of unnecessary code and made binding
additional types outside of SWIG difficult.</p>

<p>The egfLua library now generates an external header file containing this common code. The file,
in the egfLua directory, is called <span class="NDLSystemFont">SWIGLuaRuntime.h</span>. All of the
Lua SWIG wrappers generated by LightSpeed projects now reference this common header.</p>

<p>If you have bound types or built-in properties to Lua using SWIG, you must include the following
definition on the swig.exe command line when generating your <span class="NDLSystemFont">_wrap.cpp
</span> file:</p>

<pre>EE_EXTERNAL_RUNTIME=egfLua\SWIGLuaRuntime.h</pre>

<p>Example: The following shows a typical command line to generate a Lua SWIG wrapper in LightSpeed 3.0
LightSpeed releases followed by an the LightSpeed 3.2 version:</p>

<p><b>Previous SWIG command line:</b></p>

<pre>swig.exe -c++ -lua -DWIN32 -DEE_PLATFORM_WIN32 -I"include" -o MyClass_LuaWrap.cpp MyClass.i</pre>

<p><b>LightSpeed 3.2 SWIG command line:</b></p>

<pre>swig.exe -c++ -lua -DEE_EXTERNAL_RUNTIME=egfLua\SWIGLuaRuntime.h -DWIN32 -DEE_PLATFORM_WIN32 -I"include" -o MyClass_LuaWrap.cpp MyClass.i</pre>

<a name="ILuaPropertyHandler" id="ILuaPropertyHandler"></a>
<h2>New ILuaPropertyHandler methods for ParameterList usage</h2>
<p>Two new pure virtual methods were added to the <span class="NDLSystemFont"><a
href="../../Reference/egfLua/egf__ILuaPropertyHandler.htm">egf::ILuaPropertyHandler</a></span>
interface to support adding and removing custom property types to a <span class="NDLSystemFont"
>ParameterList</span> from within Lua scripts. When using the <span class="NDLSystemFont"><a
href="../../Reference/egfLua/egf__LuaTraitsPropHandler.htm">egf::LuaTraitsPropHandler</a></span>
or <span class="NDLSystemFont"><a href="../../Reference/egfLua/egf__SwigPropHandler.htm"
>egf::SwigPropHandler</a></span> classes these methods are implemented for you and no additional
work should be required, otherwise these methods must be provided.</p>

<a name="LuaDirectPropertyAccess" id="LuaDirectPropertyAccess"></a>
<h2>Direct access to entity properties in Lua</h2>

<p>Entity properties are exposed in Lua directly using <span class="NDLSystemFont">__index</span>
and <span class="NDLSystemFont">__newindex</span> metamethods attached to their Lua proxy
counterparts. This allows Entity properties to be read/written without having to make BehaviorAPI
function calls. Here's a before and after example of seeting a <span class="NDLSystemFont">Point3
</span> 'Position' property on an Entity.</p>

<p><b>Previous SetProperty Example</b></p>
<pre>local position, propertyResult = BehaviorAPI.GetProperty(selfID, "Position")
print(tostring(position))     -- prints something similar to 'table(0x1234)'

local newPosition = { 1, 2, 3 }
BehaviorAPI.SetProperty(selfID, "Position", newPosition)</pre>

<p><b>LightSpeed 3.2 Direct Property Access</b></p>
<pre>local position = self.Position   -- self['Position'] also works.
print(tostring(position))         -- calls Point3's __tostring metamethod.

local newPosition = Point3.Point3(1,2,3)
self.Position = newPosition     -- Could also pass a table { 1, 2, 3 }</pre>

<p>Associative array properties are also bound using this proxy. You can get, set and erase array
entries without making BehaviorAPI function calls. For example, if an entity has a list property
named 'Nicknames' defined as a list of strings, you can manipulate it as follows:</p>

<p><b>Previous Array Property Example</b></p>
<pre>local name0 = BehaviorAPI.GetProperty(selfID, "Nicknames", "0")
print(name0)

BehaviorAPI.SetProperty(selfID, "Nicknames", "0", "Enlightened")
name0 = BehaviorAPI.GetProperty(selfID, "Nicknames", "0")
print(name0)

local keys = BehaviorAPI.GetPropertyKeys(selfID, "Nicknames")
for i, key in pairs(keys) do
    -- do something with each key
end

BehaviorAPI.SetProperty(selfID, "Nicknames", "0", nil)  -- this wont work and may crash
</pre>

<p><b>LightSpeed 3.2 Array Property Example</b></p>

<pre>local nicknames = self.Nicknames  -- 'table' with __index and __newindex methods.
print(tostring(nicknames[0]))   -- prints the nickname a position 0.

nicknames[0] = "Enlightened"    -- updates the array value at index 0.
print(tostring(nicknames[0]))   -- prints 'Enlightened'

local keys = nicknames:Keys()   -- Obtain all the keys for this associative array.

for i, key in pairs(keys) do
    -- do something with each key
end

nicknames[0] = nil               -- Remove the key and value from index 0.

-- In this example, suppose our model has several map properties representing
-- different behaviors to call depending on whether another entity was created,
-- updated, or destroyed. We can obtain the behavior to call like this:

local mapToUse = "OnCreateMap"  -- This could be dynamic, the value of another property, etc.
local indirectBehavior = this[mapToUse][otherEntityID]  -- lookup the behavior name
self:SendEvent(indirectBehavior)</pre>

<p>You can now set associative array properties using a Lua table directly:</p>

<pre>self.Nicknames = { 'Enlightened', 'Master', 'Lama' }  -- automatically creates indexes
self.Map = { ['a']='alpha', ['b']='beta' }                -- explicit indexes</pre>       

<p>As with the change to the Foundation Utility type bindings, these updates are fully backward
compatible. No functions were removed from the BehaviorAPI as a result of these changes. Converting
to this new property API will make your scripts much cleaner and easier to understand.</p>

<a name="Point3LuaRemoval" id="Point3LuaRemoval"></a>
<h2>Removal of point3.lua</h2>

<p>As part of binding Foundation utility classes directly into Lua, the '<span
class="NDLSystemFont">point3.lua</span>' file previously found in <span class="NDLSystemFont"
>Media/Samples/Common/Lua</span> has been removed. This Lua script contained a number of helper
functions useful when dealing with <span class="NDLSystemFont">Point3</span> properties. The
functionality found in this script is now incorporated into the Lua <span class="NDLSystemFont"
>Point3</span> built-in API. See the <a href="../../Programmer/Scripting/lua_lib_Point3.htm">Point3
Lua Module</a> documentation for details.</p>

<p>If you rely on this script, you'll need to update your scripts to use the built-in <span
class="NDLSystemFont">Point3</span> API functions instead of the functions in <span
class="NDLSystemFont">Point3.lua</span>.</p>

<a name="OtherChanges" id="OtherChanges"></a>
<br/><br/><h1>Other Changes</h1>

<a name="MigratingToolbenchData" id="MigratingToolbenchData"></a><h2>Migrating Toolbench Data</h2>

<p>Some Toolbench file formats have changed in Gamebryo LightSpeed 3.2. Toolbench includes a
migration service to help update legacy data. The migration service is active whenever a file is
opened in Toolbench. The version of the file is checked against registered migration steps to
determine if content needs to be migrated before Toolbench can load it. If migration is necessary,
the file is updated on disk and only then loaded normally into the tool. When a need to migrate is
detected, the user is alerted to be sure the files are writeable. Otherwise, the process is fully
automated. If files are not migrated, no assets will load at runtime.</p>

<p>Assuming you keep your source data in a revision control system, you might want to have one
developer migrate all assets to the new formats when upgrading. However, because the migration
process is deterministic, it should also be fine to have each developer migrate legacy files as
necessary.</p>

<h3>Updating Base EMT Libraries and Integrations</h3>

<p>Gamebryo LightSpeed 3.2 includes updates to common base EMT libraries, such as the Standard
Model Library. Partners may also have updated EMT libraries in support of their product
integrations. Toolbench includes an Integration Wizard to help bring these
updates into your existing asset web. The Integration Wizard will automatically launch when a game
solution is first migrated to the latest version as a reminder to pull in these enhancements.</p>

<p>If you have made modifications to imported entity modeling libraries, such as the
StandardModelLibrary, care should be taken to ensure your changes are not lost. It is wise to
migrate the user-modified libraries to the new Toolbench file formats <em>before</em> attempting to
resolve any content changes in the Gamebryo LightSpeed 3.2 versions. This way you will be diffing
files that are on the same file version, and real content changes will be easier to identify.</p>

<p>Important: The Integration Wizard may also update the *Tagger.ini files that appear in the
asset-web-config folder at the root of your asset web. If you have made custom changes to these
ini files, verify that the changes are not lost during migration.</p>

<p>When starting a new asset web, if you expect to make significant changes to Standard Model
Library or other imported libraries, consider bypassing the new game solution wizard step that
copies these libraries into your asset web. Instead, you may want to branch these EMT libraries via
revision control from a clean location into your asset web. Then, when you later upgrade the
Gamebryo installation, the revision control system should be able to walk you through an
integration of the changes, avoiding a potentially tedious manual merge. Again, you should open
your customized libraries in the latest Toolbench to migrate file formats before integrating
changes from an upgraded installation.</p>

<a name="Misc" id="Misc"></a>
<h2>Miscellaneous compile affecting changes</h2>
<ul>
    <li><span class="NDLSystemFont"><a href="../../Reference/efd/efd__ISystemService.htm"
        >ISystemService</a>::GetDisplayName</span> is now a pure virtual function and must be
        implemented by all services. Implementations should simply return their class name.</li>
    <li><span class="NDLSystemFont">efd::kTypeID_Char</span> was renamed to <span
        class="NDLSystemFont">efd::kTypeID_Utf8Char</span>.</li>
    <li><span class="NDLSystemFont">NiSmartPointerCast</span> was removed. Previously this macro
        did an unsafe double c-style cast. Use <span class="NDLSystemFont"
        >EE_DYNAMIC_CAST</span> (for foundation RTTI classes) or <span class="NDLSystemFont"
        >NiDynamicCast</span> (for legacy NiRTTI classes) instead.</li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
