<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Converting to Gamebryo 2.3 Overview</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Converting to Gamebryo 2.3 Overview</h1>

<p>This document describes the changes to interfaces that existed
in Gamebryo 2.2. It is intended to help users of Gamebryo 2.2
convert to Gamebryo 2.3. This document does not describe all new
features in Gamebryo 2.3. For that, see the <a href="../../RelNotes/Release_Notes_Introduction.htm">Release Notes</a>.</p>

<p>The following topics should be reviewed for successful
conversion to Gamebryo 2.3:</p>

<p><a href=
"Converting_to_Gamebryo_2_3_Overview.htm#DefaultVisualStudioVersionForTools">
Default Visual Studio Version for Tools</a></p>

<p><a href=
"Converting_to_Gamebryo_2_3_Overview.htm#EnvironmentVariableChanges">
Environment Variable Changes</a></p>

<p><a href=
"Converting_to_Gamebryo_2_3_Overview.htm#FrameRenderingSystemNiApplicationChanges">
Frame Rendering System NiApplication Changes</a></p>

<p><a href=
"Converting_to_Gamebryo_2_3_Overview.htm#Multi_Material_Packing">Multi-Material
Packing</a></p>

<p><a href=
"Converting_to_Gamebryo_2_3_Overview.htm#ShaderDeclarationChanges">
Shader Declaration Changes</a></p>

<p><a href=
"Converting_to_Gamebryo_2_3_Overview.htm#NiPS3Renderer_Conversion_to_LibGCM">
NiPS3Renderer Conversion</a></p>

<p><a href=
"Converting_to_Gamebryo_2_3_Overview.htm#NiPhysXScene">NiPhysXScene
Re-factoring</a></p>

<p><a href=
"Converting_to_Gamebryo_2_3_Overview.htm#NIFVersion">NIF
Version</a></p>

<p><a href=
"Converting_to_Gamebryo_2_3_Overview.htm#CloningChanges">Cloning
Changes</a></p>

<p><a href=
"Converting_to_Gamebryo_2_3_Overview.htm#NiTMapBaseChanges">NiTMapBase
Changes</a></p>

<p><a href=
"Converting_to_Gamebryo_2_3_Overview.htm#PixelDataChanges">Application
Level Pixel Data Changes</a></p>

<p><a href=
"Converting_to_Gamebryo_2_3_Overview.htm#NiEntityChanges">NiEntity
and Custom Component Changes</a></p>

<p><a href=
"Converting_to_Gamebryo_2_3_Overview.htm#FXFileLoading">FX and FX
Lite File Loading</a></p>

<p><a href=
"Converting_to_Gamebryo_2_3_Overview.htm#DllMainChanges">DllMain
Changes</a></p>

<p><a href=
"Converting_to_Gamebryo_2_3_Overview.htm#NiD3D10Renderer">NiD3D10Renderer</a></p>

<p><a href=
"Converting_to_Gamebryo_2_3_Overview.htm#XMemAlloc">NiXenonDefaultResourceManager</a></p>

<p><a href=
"Converting_to_Gamebryo_2_3_Overview.htm#NiActorManager_CallbackObjectChanges">
NiActorManager::CallbackObject Changes</a></p>

<a name="DefaultVisualStudioVersionForTools" id="DefaultVisualStudioVersionForTools"></a><h2>Default Visual Studio Version for Tools</h2>

<p>The default version of Visual Studio used for all installed
Gamebryo tools has changed from Visual Studio .NET 2003 (VC71) to
Visual Studio 2005 (VC80). All installed shortcuts and the Max
and Maya plug-ins will use the VC80 versions by default. The
Gamebryo installer ensures that the VC80 runtime files are
installed to the Windows system directories, so an installation
of Visual Studio 2005 is not required in order to run the tools.
If the VC71 versions of the tools are desired, the shortcuts
installed in the Windows Start menu and on the desktop can be
changed to reference the VC71 executable files. If the VC71
version of the Max or Maya plug-in is desired, the appropriate
files will need to be copied from the built Gamebryo VC71
directories to the Max or Maya plug-in directories. The
UpdateArtistTools.bat batch file has also been set to copy the
VC80 versions of the tools by default, but this can be changed by
adjusting the <span class="NDLSystemFont">EGB_VCVERS</span>
environment variable.</p>

<a name="EnvironmentVariableChanges" id="EnvironmentVariableChanges"></a><h2>Environment Variable Changes</h2>

<p>The names of the environment variables installed by the
Gamebryo installer and used by the tools have changed. They used
to be prefixed with "NDL" but are now prefixed with "EGB". In
most cases, the Gamebryo 2.3 installer will take care of this
issue automatically, but any application code that uses the old
environment variables will have to change. See the <a href=
"../../GetStart/PC/Gamebryo_Environment_Variables.htm">Gamebryo
Environment Variables</a> page for more information.</p>

<p>If you are making use of the UpdateArtistTools.bat batch file,
note that its internal environment variables have also changed to
have an "EGB" prefix. If you have set up environment variables
for use with this batch file, those will also need to
change.</p>

<a name="FrameRenderingSystemNiApplicationChanges" id="FrameRenderingSystemNiApplicationChanges"></a><h2>Frame Rendering System NiApplication Changes</h2>

<p>The <a href=
"../../Programmer/Frame_Rendering_System/Introduction_to_the_Frame_Rendering_System.htm">
frame rendering system</a> is new in Gamebryo 2.3. It provides an
easy way to set up complex rendering effects during application
initialization and have them automatically rendered properly each
frame. The <span class="NDLSystemFont"><a href=
"../../Reference/NiApplication/Introduction_to_NiApplication.htm">
NiApplication</a></span> and <span class="NDLSystemFont"><a href=
"../../Reference/NiSample/Introduction_To_NiSample.htm">NiSample</a></span>
classes were changed to optionally support using the frame
rendering system. A constructor parameter, <span class=
"NDLSystemFont">bUseFrameSystem</span>, was added to both of
these classes that indicates whether or not the class should use
the frame rendering system. This parameter is false by default,
so existing applications will only need to make minor changes to
retain the same functionality as before. If you want your
<span class="NDLSystemFont">NiApplication</span>-based
application to use the frame rendering system, there are some
further changes that you will need to take into account. See the
<a href=
"../../Reference/NiApplication/NiApplication_and_the_Frame_Rendering_System.htm">
NiApplication and the Frame Rendering System</a> page in the
<span class="NDLSystemFont">NiApplication</span> documentation
for a description of these changes.</p>

<a name="Multi_Material_Packing" id="Multi_Material_Packing"></a><h2>Multi-Material Packing</h2>

<p>Geometry data packing was changed with Gamebryo 2.3. In
previous versions, only the active material was used for packing
data. The new system scans all materials and packs based off of
the information returned from <span class=
"NDLSystemFont"><a href="../../Reference/NiMain/NiMaterial.htm">NiMaterial::GetVertexInputSemantics</a></span>.
Most existing <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiShader.htm">NiShader</a></span> objects
will be supported automatically due to appropriate
implementations in NiD3DShader and NiPS3Shader. Subclasses of
<span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiMaterial.htm">NiMaterial</a></span>,
however, will need to implement the method.</p>

<a name="ShaderDeclarationChanges" id="ShaderDeclarationChanges"></a><h2>Shader Declaration Changes</h2>

<p>As part of the refactoring work for multi-material packing,
several changes have occurred regarding the usage of shader
declarations. Most of these changes will be transparent to
applications. Advanced users should note, however, that
<span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiShaderDeclaration.htm">NiShaderDeclaration::SetEntry</a></span>
has changed signature to use a fixed string rather than an
enumeration value. Additionally, <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMain/NiRenderer.htm">NiRenderer::CreateShaderDeclaration</a></span>
does not take a default argument for the number of streams. Prior
to 2.3, some renderer subclasses used a default argument.
Applications should check for usage of the default and manually
set to 1 as needed.</p>

<a name="NiPS3Renderer_Conversion_to_LibGCM" id="NiPS3Renderer_Conversion_to_LibGCM"></a><h2>NiPS3Renderer Conversion</h2>

<p>Notes on this item can be found <a href=
"../../ee_goto.htm#Convert/Previous/Converting_to_Gamebryo_2_3_PS3.htm">
here</a>.</p>

<a name="NiPhysXScene" id="NiPhysXScene"></a><h2>NiPhysXScene Re-factoring</h2>

<p>The <span class="NDLSystemFont"><a href=
"../../Reference/NiPhysX/NiPhysXScene.htm">NiPhysXScene</a></span>
class was re-factored in Gamebryo 2.3 into two classes: a
modified <span class="NDLSystemFont">NiPhysXScene</span> class
and a new <span class="NDLSystemFont"><a href=
"../../Reference/NiPhysX/NiPhysXProp.htm">NiPhysXProp</a></span>
class. The aim was to clarify the relationship between the
container for all PhysX content, the scene, and the individual
objects added to that scene. The change is also important for
future Gamebryo-PhysX development, and serves as a better example
for how to integrate a physics solution into Gamebryo. For
information about using the new classes, see the <a href=
"../../Programmer/Introduction_to_GamebryoPhysX_Programming.htm">Gamebryo-PhysX
Programming Guide</a>. See the <a href=
"NiPhysXScene_Conversion.htm">NiPhysXScene Conversion</a> page
for details on how this change impacts existing applications.</p>

<p>The NiPhysXScene class was also modified to take complete
control over the timing of the physics simulation. This may
require some changes to application code (see the <a href=
"NiPhysXScene_Conversion.htm">NiPhysXScene Conversion</a>
page).</p>

<p>Finally, changes and bug fixes to the way in which state is
transferred between PhysX and Gamebryo may change the apparent
behavior of some physical objects. In all cases the state
transfer is now more accurate and more robust.</p>

<a name="NiPhysXDest" id="NiPhysXDest"></a><h2>NiPhysXDest Re-factoring</h2>

<p>The <span class="NDLSystemFont"><a href=
"../../Reference/NiPhysX/NiPhysXDest.htm">NiPhysXDest</a></span>
class was re-factored slightly to improve the accuracy of state
transfer. Application classes derived from <span class=
"NDLSystemFont">NiPhysXDest</span> must modify their <span class=
"NDLSystemFont">UpdateSceneGraph</span> function and users should
re-read the reference documentation.</p>

<a name="NiPhysXKinematicSrc" id="NiPhysXKinematicSrc"></a><h2>NiPhysXKinematicSrc targeted for removal</h2>

<p>The <a href=
"../../Reference/NiPhysX/NiPhysXKinematicSrc.htm"><span class=
"NDLSystemFont">NiPhysXKinematicSrc</span></a> class has been
superceded by functionality in the <a href=
"../../Reference/NiPhysX/NiPhysXDynamicSrc.htm"><span class=
"NDLSystemFont">NiPhysXDynamicSrc</span></a> class. New code
should not use the <span class="NDLSystemFont"><a href=
"../../Reference/NiPhysX/NiPhysXKinematicSrc.htm">NiPhysXKinematicSrc</a></span>
class, while existing code should be modified to use <a href=
"../../Reference/NiPhysX/NiPhysXDynamicSrc.htm"><span class=
"NDLSystemFont">NiPhysXDynamicSrc</span></a> class wherever
possible. This should require little more than a renaming of the
type - the public interfaces are almost the same.</p>

<a name="NIFVersion" id="NIFVersion"></a><h2>NIF Version</h2>

<p>The minimum NIF version for Gamebryo has been changed to
10.1.0.0, which corresponds to the Gamebryo 1.1 release. Any
legacy NIF files with versions prior to Gamebryo 1.1 will fail to
load in Gamebryo 2.3.</p>

<p>Furthermore, several classes that were deprecated prior to
Gamebryo 1.1 have also been removed in Gamebryo 2.3. These
classes are:</p>

<ul>
    <li><span class="NDLSystemFont">NiKeyframeManager</span></li>

    <li><span class="NDLSystemFont">NiSequence</span></li>

    <li><span class=
    "NDLSystemFont">NiSequenceStreamHelper</span></li>

    <li><span class="NDLSystemFont">NiUVController</span></li>

    <li><span class="NDLSystemFont">NiUVData</span></li>
</ul>

<p>NIF files containing any of these objects will fail to
load.</p>

<p>Finally, any classes from the <span class=
"NDLSystemFont">NiOldParticle</span> library, which was removed
in Gamebryo 2.2, will fail to load in Gamebryo 2.3.</p>

<a name="CloningChanges" id="CloningChanges"></a><h2>Cloning Changes</h2>

<p>A new enumeration, <a href=
"../../Reference/NiMain/NiCloningProcess.htm#CloneRelationBehavior">
<span class="NDLSystemFont">CloneRelationBehavior</span></a>, was
added to <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiCloningProcess.htm">NiCloningProcess</a></span>,
along with two member variables that control cloning behavior for
various relations in the scene graph. In particular, the behavior
for <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiNode.htm">NiNode</a></span> cloning of
referenced <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiDynamicEffect.htm">NiDynamicEffect</a></span>
objects, <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiDynamicEffect.htm">NiDynamicEffect</a></span>
cloning of referenced <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiNode.htm">NiNode</a></span> objects,
and <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiShadowGenerator.htm">NiShadowGenerator</a></span>
cloning of referenced <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiNode.htm">NiNode</a></span> objects are
controlled by these new member variables. The new cloning default
is to only clone a relation to another object if the referenced
object was also cloned.</p>

<p>Previous versions of Gamebryo would clone object relations in
the following way. Each <span class="NDLSystemFont">NiNode</span>
holds a collection of <span class=
"NDLSystemFont">NiDynamicEffect</span> objects that affect it.
When an <span class="NDLSystemFont">NiNode</span> was cloned,
this collection of <span class=
"NDLSystemFont">NiDynamicEffect</span> objects was always
preserved. If a particular <span class=
"NDLSystemFont">NiDynamicEffect</span> in the collection was
cloned, the cloned <span class="NDLSystemFont">NiNode</span>
would refer to that cloned <span class=
"NDLSystemFont">NiDynamicEffect</span>. If the <span class=
"NDLSystemFont">NiDynamicEffect</span> was not cloned, the cloned
<span class="NDLSystemFont">NiNode</span> would refer to the
original <span class="NDLSystemFont">NiDynamicEffect</span>
object. Similarly, each <span class=
"NDLSystemFont">NiDynamicEffect</span> object holds a collection
of <span class="NDLSystemFont">NiNode</span> objects that it
affects and a collection of <span class=
"NDLSystemFont">NiNode</span> objects that it does not affect.
Neither of these two collections were preserved during the
cloning operation in previous versions of Gamebryo.</p>

<p>In Gamebryo 2.3, the cloning behavior for <span class=
"NDLSystemFont">NiNode</span>, <span class=
"NDLSystemFont">NiDynamicEffect</span>, and <span class=
"NDLSystemFont">NiShadowGenerator</span> objects is controlled by
the <span class=
"NDLSystemFont">m_eAffectedNodeRelationBehavior</span> and the
<span class=
"NDLSystemFont">m_eDynamicEffectRelationBehavior</span> member
variables of <span class="NDLSystemFont">NiCloningProcess</span>.
<span class=
"NDLSystemFont">m_eAffectedNodeRelationBehavior</span> controls
how <span class="NDLSystemFont">NiNode</span> clones its
relationships with the <span class=
"NDLSystemFont">NiDynamicEffect</span> objects that it
references. <span class=
"NDLSystemFont">m_eDynamicEffectRelationBehavior</span> controls
how <span class="NDLSystemFont">NiDynamicEffect</span> and
<span class="NDLSystemFont">NiShadowGenerator</span> clone their
relationships with the <span class="NDLSystemFont">NiNode</span>
objects that they reference. The default for both member
variables is <span class=
"NDLSystemFont">CLONE_RELATION_CLONEDONLY</span>, which will
cause relations to be preserved only if the referenced object was
also cloned. Note that this is a change from previous versions of
Gamebryo. If your application was relying on the old cloning
behavior, you can revert back to that behavior by simply setting
<span class=
"NDLSystemFont">m_eAffectedNodeRelationBehavior</span> to
<span class="NDLSystemFont">CLONE_RELATION_ALL</span> and
<span class=
"NDLSystemFont">m_eDynamicEffectRelationBehavior</span> to
<span class=
"NDLSystemFont">CLONE_RELATION_NONE</span>.</p>

<a name="NiTMapBaseChanges" id="NiTMapBaseChanges"></a><h2>NiTMapBase Changes</h2>

<p>The <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiTMapBase.htm">NiTMapBase</a></span>
class was modified in Gamebryo 2.3 to accept a hash function
class and a equality testing class. In most circumstances this
removes the need to subclass from <span class=
"NDLSystemFont">NiTMapBase</span> or its derived classes .</p>

<p>Any application classes that previously derived from
<span class="NDLSystemFont">NiTMapBase</span> must be modified to
use the new template. The functions <span class=
"NDLSystemFont">KeyToHashIndex</span> and <span class=
"NDLSystemFont">IsKeysEqual</span> are no longer called from a
derived class, but the compiler generates no warning of this. We
recommend a global search for these function names. If you are
using them, the functions must be moved into new functor classes
and passed as template classes to the <span class=
"NDLSystemFont">NiTMapBase</span> class.</p>

<a name="PixelDataChanges" id="PixelDataChanges"></a><h2>Application Level Pixel Data Changes</h2>

<p>Beginning with Gamebryo 2.3, <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMain/NiSourceTexture.htm">NiSourceTexture</a></span>
will release its <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiPixelData.htm">NiPixelData</a></span>
object after creating renderer data for the object. This behavior
can be controlled via <span class=
"NDLSystemFont">NiSourceTexture::SetDestroyAppDataFlag</span>.
Applications that require valid <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMain/NiPixelData.htm">NiPixelData</a></span>
objects from <span class="NDLSystemFont"><a href=
"../../Reference/NiMain/NiSourceTexture.htm">NiSourceTexture</a></span>
objects should manage the lifetime of those <span class=
"NDLSystemFont">NiPixelData</span> objects using this function.
Note that releasing the application level <span class=
"NDLSystemFont"><a href=
"../../Reference/NiMain/NiPixelData.htm">NiPixelData</a></span>
objects can provide large memory savings. Applications that set
the flag to false should consider manually releasing the data
when possible using <span class=
"NDLSystemFont">NiSourceTexture::DestroyAppPixelData</span></p>

<a name="NiEntityChanges" id="NiEntityChanges"></a><h2>NiEntity and Custom Component Changes</h2>

<p>A new pure virtual function was added to <span class=
"NDLSystemFont">NiEntityPropertyInterface</span>
called <span class="NDLSystemFont">SetElementCount</span>. This
function is intended to allow the size of a collection property
to be optionally modified. The addition of this function will
cause all existing custom components and entities to fail to
compile until it is added. At the very least, the <span class=
"NDLSystemFont">bCountSet</span> parameter that is passed in to
the function by reference should be set to false and the function
should return true if the property name matches a property
contained in the component. If the property supports resizing the
collection, it should be done in an intelligent manner in
<span class="NDLSystemFont">SetElementCount</span>. See the
various component classes in the <span class=
"NDLSystemFont"><NiEntity</span>
library for an example of how to implement this
function.</p>

<a name="FXFileLoading" id="FXFileLoading"></a><h2>FX and FX Lite File Loading</h2>

<p>File loading behavior for FX and FXL files has changed in this
release. All files and included files will load via <span class=
"NDLSystemFont"><a href=
"../../Reference/NiSystem/NiFile.htm">NiFile</a></span> rather
than using the file loading support of the underlying library
such as functions like <span class=
"NDLSystemFont">D3DXCreateEffectFromFile</span>. Applications
that have supplied custom file access and creation behavior via
<span class="NDLSystemFont"><a href=
"../../Reference/NiSystem/NiFile.htm">NiFile::SetFileCreateFunc</a></span>
will need to ensure that their shader files and any included
files are exposed to that custom file creation behavior. Note
that FXL files have always loaded via <span class=
"NDLSystemFont"><a href=
"../../Reference/NiSystem/NiFile.htm">NiFile</a></span>. With FX
Lite shaders, the changes cause included files to be loaded via
<span class="NDLSystemFont"><a href=
"../../Reference/NiSystem/NiFile.htm">NiFile</a></span>.&gt;</p>

<a name="DllMainChanges" id="DllMainChanges"></a><h2>DllMain Changes</h2>

<p>The way a library's <span class="NDLSystemFont">Init</span>
and <span class="NDLSystemFont">Shutdown</span> functions are
called by the <span class="NDLSystemFont"><a href=
"../../Reference/NiSystem/NiStaticDataManager.htm">NiStaticDataManager</a></span>
have changed in this release. Any library that uses the
<span class="NDLSystemFont">NiStaticDataManager</span> and
provides its own <span class="NDLSystemFont">DllMain</span>
function, such as Gamebryo's shader libraries or any
customer-provided DLL shader libraries, must call <span class=
"NDLSystemFont">NiStaticDataManager::ProcessAccumulatedLibraries</span>
function to initialize itself in the <span class=
"NDLSystemFont">DLL_PROCESS_ATTACH</span> section, rather than
calling its own <span class="NDLSystemFont">Init</span> function.
In addition, these libraries should rely on the <span class=
"NDLSystemFont">NiStaticDataManager::RemoveLibrary</span>
function, called during <span class=
"NDLSystemFont">DLL_PROCESS_DETACH</span> to shut down the
library rather than calling the <span class=
"NDLSystemFont">Shutdown</span> function.</p>

<a name="NiD3D10Renderer" id="NiD3D10Renderer"></a><h2>NiD3D10Renderer</h2>

<p>Gamebryo 2.3 introduces the new <span class=
"NDLSystemFont"><a href=
"../../Reference/NiD3D10Renderer/Introduction_to_the_D3D10Renderer.htm">
NiD3D10Renderer</a></span>, which allows applications to render
using the D3D10 API on Windows Vista. By default, the
<span class="NDLSystemFont"><a href=
"../../Reference/NiD3D10Renderer/Introduction_to_the_D3D10Renderer.htm">
NiD3D10Renderer</a></span> is linked in to <span class=
"NDLSystemFont"><a href=
"../../Reference/NiApplication/Introduction_to_NiApplication.htm">
NiApplication</a></span>, and the choice of whether to use the
<span class="NDLSystemFont"><a href=
"../../Reference/NiDX9Renderer/Introduction_to_the_DX9Renderer.htm">
NiDX9Renderer</a></span> or <span class="NDLSystemFont"><a href=
"../../Reference/NiD3D10Renderer/Introduction_to_the_D3D10Renderer.htm">
NiD3D10Renderer</a></span> is a runtime decision. Developers that
do not desire to ever use the D3D10 API for a given application
may want to consider modifying the <span class=
"NDLSystemFont"><a href=
"../../Reference/NiApplication/Introduction_to_NiApplication.htm">
NiApplication</a></span> library to compile out the D3D10
support.</p>

<a name="XMemAlloc" id="XMemAlloc"></a><h2>NiXenonDefaultResourceManager</h2>

<p>Notes on this item can be found <a href=
"../../ee_goto.htm#Convert/Previous/Converting_to_Gamebryo_2_3_Xbox360.htm">
here</a>.</p>

<a name="NiActorManager_CallbackObjectChanges" id="NiActorManager_CallbackObjectChanges"></a><h2>NiActorManager::CallbackObject Changes</h2>

<p><span class="NDLSystemFont"><a href=
"../../Reference/NiAnimation/NiActorManager.htm#Callback_Objects">
NiActorManager::CallbackObject</a></span> is no longer derived
from <span class="NDLSystemFont"><a href=
"../../Reference/NiSystem/NiMemObject.htm">NiMemObject</a></span>.
This is so that it can be safely used as a pure virtual interface
class with multiple inheritance. If you have derived a class from
<span class="NDLSystemFont">NiActorManager::CallbackObject</span>
that expects to also be derived from <span class=
"NDLSystemFont">NiMemObject</span> (e.g., if you are using
<span class="NDLSystemFont">NiNew</span> to construct the class),
you will need to modify your derived class to also derive from
<span class="NDLSystemFont">NiMemObject</span>. If you fail to do
this, the memory manager may fail an assertion if <span class=
"NDLSystemFont">NiNew</span> is used to construct the derived
class.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
