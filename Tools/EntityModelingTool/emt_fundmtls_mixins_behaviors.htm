<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>
<title>Understanding Mix-in Properties and Behaviors</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>


<h1>
Understanding Mix-in Properties and Behaviors
</h1>

<p>
One of the main advantages of EMT is that it allows you to share common properties and behaviors across similar types of entities within your game. For example, a dragon, flame thrower, and spontaneous human combustion may all use the same type of fire attack. 
</p>

<p>
Since you don&#39;t want to define the same properties and behaviors for each model in your project, you can define a certain set of properties and behaviors for one model and then apply those same properties and behaviors to other models in your project. If changes need to be made, they are made only once and applied to all models that are using this set of properties and behaviors automatically. 
</p>

<p>
When the properties and behaviors of a model are passed down to another model, it is called a Mix-in. This basically means that the properties and behaviors of one model are mixed with the properties and behaviors of another. In order to mix models together, you need to define a type of parent/child relationship between the models. The properties and behaviors of the top-level parent are automatically added to or mixed with the properties and behaviors of the models below. To give you added control and flexibility, you can also override and modify the properties and behaviors inherited from the parent to customize each child model independently.
</p>

<p>
To take full advantage of this functionality, you should use a number of models to represent the entities in your game. Each model will contain a different set of properties and behaviors that define a particular aspect of the entity. When the properties and behaviors are general enough, they can be applied to many entities in your game, making it possible to reuse them in many different situations. 
</p>

<p>
Let's look at a simple example with three models: a parent model named &quot;Object&quot;, with two child models, named &quot;Car1&quot; and &quot;Car2&quot;.
</p>

    <div class="NDLFigureContainer">
        <img alt="Basic parent-child entity model inheritance" src="./images/Mixin_Objects_online.png" width="334" height="180" />
        <p class="NDLFigureCaption">Basic parent-child entity model inheritance</p>
    </div> 

<p>
Some common properties and behaviors, such as position, scale, and rotation, are defined for the parent model and then automatically passed down to all models below. These inherited properties are called Mix-in Properties. 
</p>

    <div class="NDLFigureContainer">
        <img alt="Simple property inheritance in mix-ins" src="./images/Mixin_Inherit_Props_online.png" width="430" height="180" />
        <p class="NDLFigureCaption">Simple property inheritance in mix-ins</p>
    </div> 

<p>
To give you additional control over the entities in your game, these mix-in properties and behaviors can be overridden. This gives you the opportunity to customize each entity model as required. 
</p>

    <div class="NDLFigureContainer">
        <img alt="Overriding mix-in properties and behaviors" src="./images/Mixin_Overide_Props_online.png" width="437" height="181" />
        <p class="NDLFigureCaption">Overriding mix-in properties and behaviors</p>
    </div> 


<p>
You can further distinguish each entity from another, by adding new properties and behaviors to each entity model.
</p>

    <div class="NDLFigureContainer">
        <img alt="Adding new properties and behaviors to mix-ins" src="./images/Mixin_Add_Props_online.png" width="438" height="180" />
        <p class="NDLFigureCaption">Adding new properties and behaviors to mix-ins</p>
    </div> 

<p>
If an entity model or preset has several mix-ins from different models, a mix-in conflict may occur. This means that the same property is inherited from more than one parent model and each one has a different property value. To resolve any mix-in conflicts, each mix-in is given a priority and the mix-in with the highest priority is used.
</p>

  <table class="NDLNoteContainer" width="100%">
      <tr align="left">
          <td class="NDLNoteContainerTD"><p class="NDLHeadingNoteContainer">Note</p>
              <div class="NDLNote">If you have presets within the Mix-in Editor, you can only override their parent model&#39;s property values. No new properties or behaviors can be added to further customize presets.
              </div>
          </td>
      </tr>
  </table>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
