<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>
<title>Defining Property Visualizers</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Defining Property Visualizers</h1>

<p>After a model with properties is created, you can begin defining its
property visualizers.  A property visualizer is a mechanism for viewing
certain entity properties in World Builder via geometric representations.  For instance,
a property visualizer allows a "Radius" property to be represented as a sphere
in the graphical world, where the sphere's size will adjust based on the value
of the Radius property. </p>

<p>A property visualizer has a type depending on its task.  The current
potential types for a visualizer are the following:</p>
    <ul>
        <li>Point - represents a single point in space, drawn graphically as an X over that point.</li>
        <li>Sphere - a wireframe sphere</li>
        <li>Radius - a circle</li>
        <li>Cube - a wireframe cube with its origin at the center of the cube</li>
        <li>Frustum - view frustum; often used to represent a camera&#39;s view</li>
        <li>Connection - a line connecting entities which use entity references</li>
        <li>PhysXBox - a wireframe cube with its origin at the bottom center of the cube; used primarily to represent PhysXTrigger entities</li>
		<li>Attenuation - a circle which shows when a light's intensity drops below a certain threshold</li>
    </ul>

<p>Property visualizers are bound to a varied number of properties depending
on the visualizer.  Using the previous example, the Radius property may drive
the size of the sphere, but another property may control the sphere's anchor
point or color.  The properties a visualizer depends on are referred to 
as "property dependencies," and each type of visualizer has different dependencies
based on what the visualizer represents.  The following tables list all the
property dependencies, the required data types of the properties, and any default
values for the provided property visualizers:</p>

<h4>Connection Visualizer</h4>
<table>
    <thead>
        <tr>
            <th>Property Dependency</th>
            <th>Description</th>
            <th>Valid Types</th>
            <th>Default Property Binding</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>Connection</td>
            <td>The entity (or entities) that are connected to the current entity.</td>
            <td>EntityRef, EntityRef List, EntityRef Map</td>
            <td>Connection</td>
        </tr>
        <tr>
            <td>Offset</td>
            <td>The offset from the position of the entity where the visualizer will be rendered.</td>
            <td>Point3</td>
            <td>No Default</td>
        </tr>
        <tr>
            <td>Color</td>
            <td>The color of the visualizer.</td>
            <td>Color</td>
            <td>No Default (color defaults to white)</td>
        </tr>
    </tbody>
</table>

<h4>Cube Visualizer</h4>
<table>
    <thead>
        <tr>
            <th>Property Dependency</th>
            <th>Description</th>
            <th>Valid Types</th>
            <th>Default Property Binding</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>Dimensions</td>
            <td>The dimensions of the cube.</td>
            <td>Point3</td>
            <td>Dimensions</td>
        </tr>
        <tr>
            <td>Anchor</td>
            <td>The position the circle will be rendered.</td>
            <td>Point3</td>
            <td>Position</td>
        </tr>
        <tr>
            <td>Orientation</td>
            <td>The rotation of the circle.</td>
            <td>Point3</td>
            <td>Rotation</td>
        </tr>
        <tr>
            <td>Offset</td>
            <td>The offset from the Anchor dependency where the visualizer will be rendered.</td>
            <td>Point3</td>
            <td>No Default</td>
        </tr>
        <tr>
            <td>Color</td>
            <td>The color of the visualizer.</td>
            <td>Color</td>
            <td>No Default (color defaults to white)</td>
        </tr>
    </tbody>
</table>

<h4>Frustum Visualizer</h4>
<table>
    <thead>
        <tr>
            <th>Property Dependency</th>
            <th>Description</th>
            <th>Valid Types</th>
            <th>Default Property Binding</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>FOV</td>
            <td>The field of view of the frustum.</td>
            <td>Any numeric (Float32, Int16, UInt64, and so on)</td>
            <td>FOV</td>
        </tr>
        <tr>
            <td>Near</td>
            <td>The near clip plane of the frustum.</td>
            <td>Any numeric (Float32, Int16, UInt64, and so on)</td>
            <td>NearPlane</td>
        </tr>
        <tr>
            <td>Far</td>
            <td>The far clip plane of the frustum.</td>
            <td>Any numeric (Float32, Int16, UInt64, and so on)</td>
            <td>FarPlane</td>
        </tr>
        <tr>
            <td>Color</td>
            <td>The color of the visualizer.</td>
            <td>Color</td>
            <td>No Default (color defaults to white)</td>
        </tr>
    </tbody>
</table>

<h4>PhysXBox Visualizer</h4>
<table>
    <thead>
        <tr>
            <th>Property Dependency</th>
            <th>Description</th>
            <th>Valid Types</th>
            <th>Default Property Binding</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>Dimensions</td>
            <td>The dimensions of the cube.</td>
            <td>Point3</td>
            <td>Dimensions</td>
        </tr>
        <tr>
            <td>Anchor</td>
            <td>The position the circle will be rendered.</td>
            <td>Point3</td>
            <td>Position</td>
        </tr>
        <tr>
            <td>Orientation</td>
            <td>The rotation of the circle.</td>
            <td>Point3</td>
            <td>Rotation</td>
        </tr>
        <tr>
            <td>Offset</td>
            <td>The offset from the Anchor dependency where the visualizer will be rendered.</td>
            <td>Point3</td>
            <td>No Default</td>
        </tr>
        <tr>
            <td>Color</td>
            <td>The color of the visualizer.</td>
            <td>Color</td>
            <td>No Default (color defaults to white)</td>
        </tr>
    </tbody>
</table>

<h4>Point Visualizer</h4>
<table>
    <thead>
        <tr>
            <th>Property Dependency</th>
            <th>Description</th>
            <th>Valid Types</th>
            <th>Default Property Binding</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>Point</td>
            <td>The 3D point where the visualizer will be rendered.</td>
            <td>Point3</td>
            <td>Position</td>
        </tr>
        <tr>
            <td>Offset</td>
            <td>The offset from the Point dependency where the visualizer will be rendered.</td>
            <td>Point3</td>
            <td>No Default</td>
        </tr>
        <tr>
            <td>Color</td>
            <td>The color of the visualizer.</td>
            <td>Color</td>
            <td>No Default (color defaults to white)</td>
        </tr>
    </tbody>
</table>

<h4>Radius Visualizer</h4>
<table>
    <thead>
        <tr>
            <th>Property Dependency</th>
            <th>Description</th>
            <th>Valid Types</th>
            <th>Default Property Binding</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>Radius</td>
            <td>The radius of the circle.</td>
            <td>Any numeric (Float32, Int16, UInt64, and so on)</td>
            <td>No Default</td>
        </tr>
        <tr>
            <td>Anchor</td>
            <td>The position the circle will be rendered.</td>
            <td>Point3</td>
            <td>Position</td>
        </tr>
        <tr>
            <td>Orientation</td>
            <td>The rotation of the circle.</td>
            <td>Point3</td>
            <td>Rotation</td>
        </tr>
        <tr>
            <td>Offset</td>
            <td>The offset from the Anchor dependency where the visualizer will be rendered.</td>
            <td>Point3</td>
            <td>No Default</td>
        </tr>
        <tr>
            <td>Color</td>
            <td>The color of the visualizer.</td>
            <td>Color</td>
            <td>No Default (color defaults to white)</td>
        </tr>
    </tbody>
</table>

<h4>Sphere Visualizer</h4>
<table>
    <thead>
        <tr>
            <th>Property Dependency</th>
            <th>Description</th>
            <th>Valid Types</th>
            <th>Default Property Binding</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>Radius</td>
            <td>The radius of the sphere.</td>
            <td>Any numeric (Float32, Int16, UInt64, and so on)</td>
            <td>No Default</td>
        </tr>
        <tr>
            <td>Anchor</td>
            <td>The position the sphere will be rendered.</td>
            <td>Point3</td>
            <td>Position</td>
        </tr>
        <tr>
            <td>Offset</td>
            <td>The offset from the Anchor dependency where the visualizer will be rendered.</td>
            <td>Point3</td>
            <td>No Default</td>
        </tr>
        <tr>
            <td>Color</td>
            <td>The color of the visualizer.</td>
            <td>Color</td>
            <td>No Default (color defaults to white)</td>
        </tr>
    </tbody>
</table>

<h4>Attenuation Visualizer</h4>
<table>
	<thead>
		<tr>
			<th>Property Dependency</th>
			<th>Description</th>
			<th>Valid Types</th>
			<th>Default Property Binding</th>
		</tr>
	</thead>
	
	<tbody>
		<tr>
			<td>MaxRange</td>
			<td>The maximum range of the light.</td>
			<td>Any numeric (Float32, Int16, UInt64, and so on)</td>
			<td>No Default</td>
		</tr>
		<tr>
            <td>Anchor</td>
            <td>The position the circle will be rendered.</td>
            <td>Point3</td>
            <td>Position</td>
        </tr>
        <tr>
            <td>Offset</td>
            <td>The offset from the Anchor dependency where the visualizer will be rendered.</td>
            <td>Point3</td>
            <td>No Default</td>
        </tr>
        <tr>
            <td>Color</td>
            <td>The color of the visualizer.</td>
            <td>Color</td>
            <td>No Default (color defaults to white)</td>
        </tr>
		<tr>
            <td>Orientation</td>
            <td>The rotation of the circle.</td>
            <td>Point3</td>
            <td>Rotation</td>
        </tr>
		<tr>
			<td>Scale</td>
			<td>Uniform scale applied to the circle.</td>
			<td>Any numeric (Float32, Int16, UInt64, and so on)</td>
			<td>No Default</td>
		</tr>
		<tr>
			<td>ConstantAttenuation</td>
			<td>The constant attenuation of the light.</td>
			<td>Any numeric (Float32, Int16, UInt16, and so on)</td>
			<td>LinearAttenuation</td>
		</tr>
		<tr>
			<td>LinearAttenuation</td>
			<td>The linear attenuation of the light.</td>
			<td>Any numeric (Float32, Int16, UInt16, and so on)</td>
			<td>LinearAttenuation</td>
		</tr>
		<tr>
			<td>QuadraticAttenuation</td>
			<td>The quadratic attenuation of the light.</td>
			<td>Any numeric (Float32, Int16, UInt64, and so on)</td>
			<td>LinearAttenuation</td>
		</tr>
		<tr>
			<td>AttenuationThreshold</td>
			<td>The threshold light intensity that the circle will encompass.</td>
			<td>Any numeric (Float32, Int16, UInt64, and so on)
			<td>AttenuationThreshold or 0.01 if no property is set</td>
		</tr>
	</tbody>
</table>

<h4>Mix-ins and Property Visualizers</h4>
<p>Property visualizers are inherited somewhat differently than properties or behaviors.  An entity model will inherit
property visualizers from models it mixes in.  However, if an entity model has a property visualizer of the same name
as a visualizer in a mix-in, the property visualizer with the same name farthest down in the hierarchy overrides
all others of the same name.  For instance, if model A mixes in model B and both have a visualizer named Vis,
only model A's Vis visualizer will be shown.
</p>

<p class="NDLHeadingRelatedTopic">Related topics</p>
    <ul>
        <li><a href="emt_model_gen_info_define.htm">Define a Model&#39;s General Information</a>
        </li>
        <li><a href="emt_model_props_add_remove.htm">Add/Remove Property Visualizers</a>
        </li>
    </ul> 


<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
