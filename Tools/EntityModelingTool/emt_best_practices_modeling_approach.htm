<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>
<title>Breaking Down Game Functionality</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Breaking Down Game Functionality</h1>

<p>Entity models are intended to be reusable components of entity functionality.  Some practice and discipline is needed to develop right-sized models that include a meaningful amount of properties and behaviors without becoming monolithic.</p>

<p>Entity Modeling Tool data will usually break down into three classes.  First, a relatively small group of models will serve as base mix-ins, supporting the implementation of game systems like movement, combat, and inventory.  Second, a potentially larger group of models will mix-in the base models to describe models that constitute complete game entities, such as a vehicle or dragon.  Finally, the largest group of data will likely be presets, which are the variants of the second group that will actually be placed or spawned into a game world, such as specific classes of vehicles or dragons.</p>

<p>Give some thought to naming conventions for EMT data.  Consistent naming can help indicate which mix-in models might be appropriate for a new model or which are intended to be mutually exclusive.  For example, the same base mix-in could be named Damageable, HasHitPoints, or Armor.  In isolation, none of these names is necessarily better.  But within the context of a large project, a consistent naming approach will help with the development of reusable models.</p>

<p>Don't forget about presets.  Although it is entirely possible to author all the EMT data for a game without using presets, using presets for the "leaf" models in the mix-in tree makes it clear which data is intended to be used for actual entity creation.  Also, the Model Factory feature can be used to generate presets in bulk by specifying a set of assets as the basis for many presets.  This can be a big timesaver.  Finally, EMT provides commands for quickly changing an eligible model into a preset or changing a preset back into a model.</p>
    <p>It is usually a good practice to create an intermediary model for use when 
        mixing-in models from external entity modeling projects. For example, when 
        mixing Actor into a model in another entity modeling project, it is advisable to 
        not mix-in directly. Instead, create a new model, like &quot;MyCustomActor&quot;, and mix 
        into that model. Then mix &quot;MyCustomActor&quot; into all relevant models in that 
        project. This is useful when refactoring large numbers of actors at once without 
        modifying the source library. You may wish to change traits, add new properties, 
        change behaviors, or other actions that will be more robust to future versions 
        of modeling projects from Emergent and its partner companies.</p>

<p class="NDLHeadingRelatedTopic">Related topics</p>
    <ul>
			<li><a href="emt_best_practices_model_management.htm">Organizing Large Data Sets</a>
			</li>
			<li><a href="emt_best_practices_model_design.htm">Designing Entity Models for Clarity</a>
			</li>
			<li><a href="emt_best_practices_performance.htm">Performance and Memory Considerations</a>
			</li>
			<li><a href="emt_best_practices_model_refactor.htm">Refactoring Entity Models</a>
			</li>
    </ul> 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
