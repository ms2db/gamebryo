<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>
<title>Refactoring Entity Models</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Refactoring Entity Models</h1>

<p>Inevitably entity models must evolve to reflect changing design goals.  Some care is required to minimize the impact of model changes on downstream data.  Remember that models changes may impact any other Entity Modeling Tool projects that reference the changing project.  Placed entities and behavior implementations may also need review after model changes.</p>

<p>EMT will assist with renaming entity properties and changing property types.  For example, property overrides will automatically receive updated property names (assuming their EMT project is open) and will attempt to preserve property values when a conversion path exists to a new property type.</p>

<p>Another common refactoring case involves changing the model mix-in for existing presets.  EMT has built-in support for performing this operation 
    by changing the parent in the Entity Model Editor.  Overridden properties will be maintained if they are relevant to the new mix-in model.</p>

<p>To reduce the risk of complex refactors, avoid explicitly specifying the same property on multiple models.  Although EMT supports this use case, it is usually better to rely on mix-ins to reuse existing properties rather than redefining them.  In addition to easing renames and type changes, this practice will also allow traits, descriptions, and restrictions to be applied consistently.</p>
    <p>It is usually a good practice to create an intermediary model for use when 
        mixing-in models from external entity modeling projects. For example, when 
        mixing Actor into a model in another entity modeling project, it is advisable to 
        not mix in directly. Instead, create a new model, like &quot;MyCustomActor&quot;, and mix 
        into that model. Then mix &quot;MyCustomActor&quot; into all relevant models in that 
        project. This is useful when refactoring large numbers of actors at once without 
        modifying the source library. You may wish to change traits, add new properties, 
        change behaviors, or other actions that will be more robust to future versions 
        of modeling projects from Emergent and its partner companies.</p>

<p>Finally, avoid checking EMT flat models into source control.  Flat models are essentially build products that can be regenerated from the EMT source data on demand.  This can be automated with a Toolbench command line task.  Regenerating flat models should help avoid stale data and make model renaming less troublesome.</p>

<p class="NDLHeadingRelatedTopic">Related topics</p>
    <ul>
			<li><a href="emt_best_practices_modeling_approach.htm">Breaking Down Game Functionality</a>
			</li>
			<li><a href="emt_best_practices_model_management.htm">Organizing Large Data Sets</a>
			</li>
			<li><a href="emt_best_practices_model_design.htm">Designing Entity Models for Clarity</a>
			</li>
			<li><a href="emt_best_practices_performance.htm">Performance and Memory Considerations</a>
			</li>
    </ul> 

		<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
