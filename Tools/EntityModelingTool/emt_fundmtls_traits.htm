<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>
<title>Entity Modeling Traits</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>


<h1>Entity Modeling Traits</h1>

<p>
A set of predefined traits can be applied to entity models, properties, and behaviors to further
classify their functionality.  Traits are available in the Entity Model Editor and have tooltips
summarizing the information below.
</p>

<a name="ModelTraits" id="ModelTraits"></a>
<h4>Model Traits</h4>
<p>These are the traits available on entity models.</p>

<table>
    <thead>
        <tr>
            <th>Model trait</th>
            <th>Usage</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>Abstract</td>
            <td>The model cannot be instantiated as an entity.  This is a tool time only trait,
                preventing the model from appearing in the World Builder palette.</td>
        </tr>
        <tr>
            <td>Active</td>
            <td>The model is expected to execute behaviors. This trait is on by default for new
                models.</td>
        </tr>
        <tr>
            <td>BuiltinModel</td>
            <td>The model represents an IBuiltinModel implementation that should be created on the
                original instance of the entity. Any properties added to this model will be built-in
                properties exported from the IBuiltinModel implementation.</td>
        </tr>
        <tr>
            <td>Global</td>
            <td>The model may only be instantiated once per block. This is a tool time only trait,
                enforced in World Builder.</td>
        </tr>
        <tr>
            <td>PaletteHidden</td>
            <td>The model can be instantiated, but not via the World Builder Palette View.</td>
        </tr>
        <tr>
            <td>ReplicaBuiltinModel</td>
            <td>The model represents an IBuiltinModel implementation that should be created on the
                replicated instances of this entity. This trait can be combined with BuiltinModel
                to use a built-in model for both producers and consumers. This trait has no effect
                when replication is not being used.</td>
        </tr>
        <tr>
            <td>ToolBuiltinModel </td>
            <td>The model represents an IBuiltinModel implementation that should be created and used
                at tool time.</td>
        </tr>
    </tbody>
</table>

<a name="PropertyTraits" id="PropertyTraits"></a>
<h4>Property Traits</h4>
<p>These are the traits available on properties.</p>

<table>
    <thead>
        <tr>
            <th>Property trait</th>
            <th>Usage</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>Hidden</td>
            <td>The property is specified on the model and not exposed to the Entity Editor.
                This is a tool time only trait.</td>
        </tr>
        <tr>
            <td>Mutable</td>
            <td>Property can be written to on all entities. This does not override ReadOnly but it
                does allow properties to be written on replicated entities. Note that changes to a
                replicated entity are local only and will NOT be updated on other replicated
                copies of the entity or synchronized back to the original entity.  A Mutable
                property can be written to as normal when it is owned and such updates will
                replicate as normal which will over write any changes made to the mutable
                copy.</td>
        </tr>
        <tr>
            <td>Persisted </td>
            <td>The property should be persisted when the entity is saved.</td>
        </tr>
        <tr>
            <td>ReadOnly</td>
            <td>The property value on entities always matches that of the model or preset and
                cannot be overridden at runtime. Implies the tool time Hidden trait.</td>
        </tr>
        <tr>
            <td>ServerOnly</td>
            <td>The property is for use by the server only and is completely stripped from
                client views. The efd::ServiceManager program type must be set to indicate
                whether the process is considered a server.</td>
        </tr>
        <tr>
            <td>Summary</td>
            <td>The property shows up in the Summary filter in the Entity Editor.
                This is a tool time only trait.</td>
        </tr>
        <tr>
            <td>TimeOfDayAnimatable</td>
            <td>The property can be controlled by a TimeOfDay entity.</td>
        </tr>
    </tbody>
</table>

<a name="ReplicationPropertyTraits" id="ReplicationPropertyTraits"></a>
<h4>Replication Property Traits</h4>
<p>In addition to the property traits above, when replication is being used you will need to set
    various replication group property traits.  These traits are used to assign properties into one
    or more replication groups. You can then use these groups to control area of interest or
    optimize bandwidth consumption. The names of these groups can be configured and the default
    names shown below are simply initial suggestions to get you started in creating a categorization
    policy. It is the final categorization policy that truly determines what these flags mean.</p>

<table>
    <thead>
        <tr>
            <th>Replication Property trait</th>
            <th>Usage</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>Replication - Global (0)</td>
            <td>The property produces to a replication group that is consumed by all observers.
                As a result using this group is fairly expensive as the properties will most
                likely be replicated to every process. This is useful for small prototypes but
                should be avoided whenever performance is important.</td>
        </tr>
        <tr>
            <td>Replication - Current Region (1)</td>
            <td>The property produces to a replication group that is consumed by all observers 
                of the same region. A region is assumed to be a fairly large game area so this
                is also a fairly expensive group to produce into.</td>
        </tr>
        <tr>
            <td>Replication - Current Zone (2)</td>
            <td>The property produces to a replication group that is consumed by all observers 
                of the same zone. A zone is assumed to be a mid-sized area of the game world
                which would be suitable to produce small infrequent updates into.</td>
        </tr>
        <tr>
            <td>Replication - Current Room (3)</td>
            <td>The property produces to a replication group that is consumed by all observers 
                of the same room. A room is assumed to be a small sized area of the game world
                which would be suitable to produce small frequent or large infrequent updates
                into.</td>
        </tr>
        <tr>
            <td>Replication - Visual Near (4)</td>
            <td>The property produces to a replication group that is consumed by all observers 
                within a near distance. Visual information such as position, animation, or
                sound effects could be produced into this group at a high frequency. Consumers
                would typically want to consume only one of the Near, Mid and Far groups for
                the same physical area although they will likely consume many "visual"
                categories.</td>
        </tr>
        <tr>
            <td>Replication - Visual Mid (5)</td>
            <td>The property produces to a replication group that is consumed by all observers 
                within a mid distance. Visual information such as position, animation, or
                sound effects could be produced into this group at a moderate frequency.
                Consumers would typically want to consume only one of the Near, Mid and Far
                groups for the same physical area although they will likely consume many
                "visual" categories.</td>
        </tr>
        <tr>
            <td>Replication - Visual Far (6)</td>
            <td>The property produces to a replication group that is consumed by all observers 
                within a far distance. Visual information such as position, animation, or
                sound effects could be produced into this group at a low frequency. Consumers
                would typically want to consume only one of the Near, Mid and Far groups for
                the same physical area although they will likely consume many "visual"
                categories.</td>
        </tr>
        <tr>
            <td>Replication - Private Player Data (7)</td>
            <td>The property produces to a replication group that is consumed only by the
                player who "owns" the entity in question. For example, private information
                about the player's avatar could be produced into this group.</td>
        </tr>
        <tr>
            <td>Replication - Examination Data (8)</td>
            <td>The property produces to a replication group that is consumed anyone who is
                examining the entity. For example, you might produce addition data that is only
                displayed when the entity is selected or targeted into this group.</td>
        </tr>
        <tr>
            <td>Replication - Group (Party) (9)</td>
            <td>The property produces to a replication group that is consumed by everyone in
                the same party. This assumes the entity in question is a player controlled
                avatar. As parties are assumed to be fairly small you could publish relatively
                detailed information into this group.</td>
        </tr>
        <tr>
            <td>Replication - Group (Guild) (10)</td>
            <td>The property produces to a replication group that is consumed by everyone in
                the same guild. This assumes the entity in question is a player controlled
                avatar. As guild are assumed to be potentially large you should not publish
                too much information into this group.</td>
        </tr>
        <tr>
            <td>ReplicationGroup - Group (Chat Channel) (11)</td>
            <td>The property produces to a replication group that is consumed by everyone in
                the same chat channel.</td>
        </tr>
        <tr>
            <td>ReplicationGroup - Group (Lobby) (12)</td>
            <td>The property produces to a replication group that is consumed by everyone in
                the same lobby. This could be used to communicate during matchmaking or even
                to communicate with other players in some area who are looking for a group.</td>
        </tr>
        <tr>
            <td>ReplicationGroup - Related AI's (13)</td>
            <td>The property produces to a replication group that is consumed by other AI
                entities that share some relationship to the entity. For example, AI entities
                running on multiple processes might form into an organized group in which case
                they might need to replicate properties such as internal AI state to one another
                that otherwise would not be needed.</td>
        </tr>

    </tbody>
</table>

<a name="BehaviorTraits" id="BehaviorTraits"></a>
<h4>Behavior Traits</h4>
<p>These are the traits available on behaviors.</p>

    <table>
        <thead>
            <tr>
                <th>Behavior trait</th>
                <th>Usage</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>Extends</td>
                <td>The behavior uses the "extends" invocation policy, in which mix-in models are
                    called first. Similar to the function call order of a C++ constructor.</td>
            </tr>
            <tr>
                <td>Immediate</td>
                <td>The behavior is allowed to be immediately invoked. Implies NoBlock. This does
                    not prevent the behavior from being run normally, but this trait is required in
                    order to be called immediately. Be careful not to do too much work in an
                    immediate behavior as it might effect your framerate.</td>
            </tr>
            <tr>
                <td>InWorldOnly</td>
                <td>The behavior will only run while the entity is in the world.</td>
            </tr>
            <tr>
                <td>NoBlock</td>
                <td>The behavior will never attempt to block. Any call to a blocking API will fail.</td>
            </tr>
            <tr>
                <td>Private</td>
                <td>The behavior can only run on the original entity, not on any replicas of that
                    entity.</td>
            </tr>
            <tr>
                <td>ReverseExtends</td>
                <td>The behavior uses the "reverse extends" invocation policy, in which mix-in
                    models are called last. Similar to the function call order of a C++
                    destructor.</td>
            </tr>
            <tr>
                <td>ViewOnly</td>
                <td>The behavior can only run in a process that is viewing the entity. To view the
                    entity means that the ReplicationService is consuming a replication category to
                    which this entity is producing a replication group. This often means the
                    behavior will run on a replica of the original entity, but the process
                    containing the original entity may also be viewing the entity. Because this
                    often runs on replica entities view behaviors should only write to mutable
                    properties.</td>
            </tr>
        </tbody>
    </table>
    

    <!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
