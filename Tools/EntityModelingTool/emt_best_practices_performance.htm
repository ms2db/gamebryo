<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>
<title>Performance and Memory Considerations in EMT</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Performance and Memory Considerations in EMT</h1>

<p>Entity models are the blueprint for what can become many thousands of in-game entities.  Therefore, small changes in model and behavior design can have a big impact on game performance and memory use.</p>

<p>When working with mix-in properties, be sure that properties are not overridden unless the value provided by the mix-in actually needs to change.  This will avoid allocating redundant property storage and will allow a change in default property value to propagate down the mix-in tree.</p>

<p>When working with behaviors, avoid registering empty implementations.  Just because the OnCreate behavior uses the Extends calling convention does not mean every mix-in needs to provide an implementation for OnCreate.  Save behavior execution cycles for real game logic.</p>

<p>If a scripted behavior is called frequently or executes expensive tight loops of logic it might be a good candidate for moving into a code-based behavior.  Scripted behaviors are good for fast iteration but can also be a target for optimization, especially once behavior logic has stabilized.</p>

<p class="NDLHeadingRelatedTopic">Related topics</p>
    <ul>
			<li><a href="emt_best_practices_modeling_approach.htm">Breaking Down Game Functionality</a>
			</li>
			<li><a href="emt_best_practices_model_management.htm">Organizing Large Data Sets</a>
			</li>
			<li><a href="emt_best_practices_model_design.htm">Designing Entity Models for Clarity</a>
			</li>
			<li><a href="emt_best_practices_model_refactor.htm">Refactoring Entity Models</a>
			</li>
    </ul> 

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
