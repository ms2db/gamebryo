<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Working with shader and material libraries</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>
<h1>Working with shader and material libraries</h1>

    <p>Shaders and material libraries are loaded by World Builder through the
        shader service (<a href="../../Reference/ecr/ecr__ShaderService.htm">ecr::ShaderService</a>). The
        shader service simplifies the code needed to initialize the Gamebryo shader
        system. The Gamebryo shader system supports both DLL based applications and
        library based applications. Since the World Builder tool works with various DLLs,
        the shader service first loads any parser and/or material libraries by using the
        existing <a href="../../Programmer/NiShader/NiShaderFactory.htm">NiShaderFactory</a>
        class. Once any material libraries and shader parsers have been loaded,
        initialized, and registered, the shader service then searches the current game&#39;s
        asset web for any available shader files. If any shader files are found, each
        shader is loaded, parsed, and possibly compiled. The compiled shaders are then
        available for use with meshes and other scene assets.</p>
    <p>Note, shaders may be created and associated with a mesh in the DCC tools (Max,
        Maya, XSI). Once a .NIF file has been exported from the DCC tools, the mesh and
        associated shader should reside in the asset web in order for World Builder and
        the shader service to load and register the new shaders. Shaders can also be
        assigned to geometry using the
        <a href="../../Programmer/NiShader/NiShaderFactory.htm">NiShaderFactory</a>.
        Once the shader service has been initialized, shaders are available and can be
        retrieved from the shader factory.</p>

    <p class="NDLHeadingRelatedTopic">Related topics</p>
    <ul>
        <li><a href="../../Programmer/NiShader/Introduction_to_Gamebryo_s_Shader_System.htm">
            Gamebryo shader architecture.</a></li>
    </ul>


    <!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>