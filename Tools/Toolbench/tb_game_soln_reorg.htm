<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>
<title>Reorganizing Game Solution Assets and Content</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->

<!--(Begin Links)===================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Reorganizing Game Solution Assets and Content</h1>

<p>Reorganizing the file structure of your Game Solution and Asset Web should be avoided if
at all possible. The reason for this is because there is no automatic way of ensuring that all
 paths will be correctly updated after the reorganization. Depending on the extent of
 reorganization, you will have to repair broken paths manually.</p>

<p>Steps to reorganize files are broken into two main categories: Reorganizing assets 
(<span class="NDLSystemFont">NIFs, KFMs,</span> etc.) and
reorganizing Game Solution content (
<span class="NDLSystemFont">emtproj, gsl, block, model</span> etc.).</p>

<p>To do any sort of reorganization, begin by shutting down Toolbench and the Asset-Controller.</p>

<h2>Reorganization of Assets</h2>

<p>Unless you are using persistent Asset IDs (and non-canonical tagging), reorganization of 
Asset IDs can be fairly tedious and difficult.</p>

<p>First, you should begin by completely deleting all data in the 
"<span class="NDLSystemFont">asset-web-metadata</span>" directory
which is located at the top of the Asset Web root. This ensures that the cached data, which is 
stored there, isn't used when the Game Solution is next opened after the reorganization.</p>

<p>If you are moving assets from one asset web to another asset web, you should have few issues
if you keep the relative file paths intact (relative to the asset web root). For example, 
consider the assets found in the LightSpeed distribution under 
"<span class="NDLSystemFont">\Media\Samples\Graphics</span>&quot;. In this case, &quot;<span class="NDLSystemFont">Media</span>" is the 
    asset web root. If
you were to copy the assets found in Graphics into your own Game Solution's Asset Web, you would
need to ensure that those assets were still under
 "<span class="NDLSystemFont">\Samples\Graphics</span>" relative to the
    asset web root. The reason for this is because those assets do not use persistent asset IDs,
 which in turn means that, if will also be moving 
 <span class="NDLSystemFont">emtproj</span> or <span class="NDLSystemFont">block</span> files that
  have "Asset" properties that refer to those assets, the ids will no longer be correct.</p>
 
<p>Note, moving assets from one asset web to another that does not share the same tagging policy
is not recommended and may cause additional issues.</p>

<p>If when moving assets, changing the relative path is necessary and you in fact do have 
<span class="NDLSystemFont">model</span> 
and <span class="NDLSystemFont">block</span> files that
refer to assets by non-persistent IDs, then you will have to fix the various "Asset"
properties manually inside Toolbench. When you next load up Toolbench, for each &quot;Asset&quot; property,
you will see the text "Invalid Asset!" specified for the value. If you hover over this field
with your mouse pointer, a tooltip will appear and, if there was any last known information stored about
the asset, it will show up here. The last known information will give you a hint as 
    to where this
asset had been previously located. You can use that information to "reselect" the asset from
with in the new location. This is certainly far from ideal, so you should avoid making changes
that necessitates this.</p>

<p>When updating "Asset" properties, you should start with the base 
<span class="NDLSystemFont">model</span>s and work you way down.
Afterwards, you should address the <span class="NDLSystemFont">block</span> files.
</p>

<h2>Reorganization of Content</h2>

<p>
Reorganizing Game Solution content can be considerably easier than reorganizing assets. 
Most of the time, you can simply move the content folders off-line, and then from Toolbench,
 open the Game Solution. The Game Solution should automatically discover the new location
 of content relative to the Asset Web root and correct for it. The method by which it does this
 is by finding the 
 "<span class="NDLSystemFont">asset-web-config</span>" directory which is always a direct child 
 of the Asset Web root.
    If for any reason the automatic discovery of the new location fails, you will 
    see a warning symbol next to the individual items in the Game Solution. By double 
    clicking on the item in the Game Solution, you will be given the opportunity to 
    restore the information concerning the new location via file browsing.
</p>

<p>In most cases, the 
<span class="NDLSystemFont">emtproj</span> and the <span class="NDLSystemFont">model</span> files
it references are in the same directory. If, however, this is not the case, you will need to ensure
 that the <span class="NDLSystemFont">emtproj</span> and <span class="NDLSystemFont">model</span>
  files are moved
(or copied) together such that their relative paths remain the same.</p>

<p>If you are restructuring the relationship between an
 <span class="NDLSystemFont">emtproj</span> and its contained 
 <span class="NDLSystemFont">model</span> files, 
you will have to modify the <span class="NDLSystemFont">emtproj</span> directly. This is fairly 
straight forward as the <span class="NDLSystemFont">emtproj</span> is 
XML based. You simply need to change the various "<span class="NDLSystemFont">path</span>" 
attributes as appropriate. Note that
best practices dictate that you should have your various 
<span class="NDLSystemFont">emtproj</span> and associated <span class="NDLSystemFont">model</span> files 
self-contained
to their own folders. If done this way, you will probably never need to worry about this sort
of restructuring.
</p>

<p class="NDLHeadingRelatedTopic">Related topics</p>

<ul>
    <li><a href="tb_game_soln_overview.htm">
    Game Solution Overview</a></li>

    <li><a href="tb_game_soln_rename.htm">
    Renaming a Game Solution</a></li>

    <li><a href="tb_fundmtls_asset_management.htm">
    Asset Management</a></li>
		
		<li><a href="../../Programmer/AssetRuntimeService/asset_runtime_organize_assets.htm">Organizing Your Assets</a></li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->
</body>
</html>
