<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>
<title>Toolbench Command-Line</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="AudioKinetic/Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Toolbench Command-Line</h1>

<p>The <span class="NDLSystemFont">ToolbenchConsole.exe</span>
application provides the command-line interface for
Toolbench.</p>

<p>If you run this executable without specifying any command-line arguments,
the interactive Toolbench client will run, just as if you selected
<span class="NDLGUILabel">Start &gt; Emergent &gt; Gamebryo LightSpeed &gt;
Tools &gt; Toolbench</span>.</p>

<table class="NDLNoteContainer" width="100%">
    <tr align="left">
        <td class="NDLNoteContainerTD">
            <p class="NDLHeadingNoteContainer">Note</p>

            <div class="NDLNote">
                Running Toolbench Command-line via the ToolbenchConsole.exe
                application will cause adverse side affects to the normal
                windowed Toolbench if it is running. The issue is that both
                applications share the Asset Controller and the settings for
                one may not be correct for the other. Do not run these
                applications simultaneously.
            </div>
        </td>
    </tr>
</table>

<p><span class="NDLSystemFont">ToolbenchConsole.exe</span>
supports two command-line options, each of which expects an
additional argument on the command-line after the option is
specified:</p>

<table>
    <thead>
        <tr>
            <th>Command-line option</th>

            <th>Option arguments</th>

            <th>Purpose</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td><span class="NDLSystemFont">-sleep</span></td>

            <td>Length of time to sleep in milliseconds</td>

            <td>Causes Toolbench to sleep for the requested
            number of milliseconds.</td>
        </tr>

        <tr>
            <td><span class="NDLSystemFont">-run</span></td>

            <td>Runnable ID of a plugin that implements the
            Runnable extension point</td>

            <td>Tells <span class=
            "NDLSystemFont">ToolbenchConsole.exe</span> to load a
            particular plug-in so the plug-in can be dynamically
            loaded to process the rest of the command-line and
            execute.<br/>
            <br/>
            Note that local settings are ignored when running a
            tool in this manner (in other words, the -ignorelocalsettings
            option is forced when using -run).</td>
        </tr>
        
        <tr>
            <td><span class="NDLSystemFont">-ignorelocalsettings</span></td>

            <td>None</td>

            <td>Ignores loading and saving of local settings.<br/>
            <br/>
            This option is forced when the -run option is used, to
            ensure command-line tools always behave the same regardless
            of local user settings.</td>
        </tr>
        
    </tbody>
</table>

<h2>Plug-ins that implement the Runnable extension point</h2>

<p>The following table lists plug-ins that support the Runnable
extension point. These plug-ins can be loaded using the
<span class="NDLSystemFont">-run</span> command-line option by
passing their Runnable ID as an argument to the <span class=
"NDLSystemFont">-run</span> option. Each of these plug-ins
supports additional command-line options and arguments that the
plug-in reads from the command-line to govern the plug-in's
execution after loading.</p>

<table>
    <thead>
        <tr>
            <th>Runnable ID and (plug-in name)</th>

            <th>Command-line option</th>

            <th>Option arguments</th>

            <th>Purpose</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>ContentExporter<br>
            (Emergent.Toolbench.ContentExporter)</td>

            <td><span class="NDLSystemFont">-solution</span></td>

            <td>Full path to a game solution <span class=
            "NDLSystemFont">.gsl</span> file</td>

            <td>Specifies the game solution from which content
            should be exported.</td>
        </tr>

        <tr>
            <td></td>

            <td><span class="NDLSystemFont">-export</span></td>

            <td>Name + extension of a <span class=
            "NDLSystemFont">.emtproj</span>, <span class=
            "NDLSystemFont">.block</span>, or <span class=
            "NDLSystemFont">.gsl</span> file</td>

            <td>Exports an Entity Modeling Tool project's
            <span class="NDLSystemFont">.model</span> files to
            game-ready <span class="NDLSystemFont">.flat</span>
            files or exports a World Builder <span class=
            "NDLSystemFont">.block</span> file to a game-ready
            <span class="NDLSystemFont">.xblock</span> file.
            Specifying the <span class=
            "NDLSystemFont">.gsl</span> file will result in all
            content being exported.</td>
        </tr>

        <tr>
            <td>EnumsExporter<br>
            (Emergent.Toolbench.EntityModeling.Enums)</td>

            <td><span class="NDLSystemFont">-solution</span></td>

            <td>Full path to a game solution <span class=
            "NDLSystemFont">.gsl</span> file</td>

            <td>Specifies the game solution from which content
            should be exported.</td>
        </tr>

        <tr>
            <td></td>

            <td><span class="NDLSystemFont">-export</span></td>

            <td>Name + extension of a <span class=
            "NDLSystemFont">.emtproj</span> or <span class=
            "NDLSystemFont">.gsl</span> file</td>

            <td>Exports the Entity Modeling Tool project IDs for
            behaviors, flat models, and properties into separate
            <span class="NDLSystemFont">.enum</span> files.
            Specifying the <span class=
            "NDLSystemFont">.gsl</span> file will result in all
            content being exported. The <span class=
            "NDLSystemFont">-export</span> option cannot be used
            in conjunction with the <span class=
            "NDLSystemFont">-exportall</span> option.</td>
        </tr>

        <tr>
            <td></td>

            <td><span class=
            "NDLSystemFont">-exportall</span></td>

            <td>N/A</td>

            <td>Exports the Entity Modeling Tool project IDs for
            behaviors, flat models, and properties, for all
            projects in the solution, into separate <span class=
            "NDLSystemFont">.enum</span> files. This is
            equivalent to using the -export option and specifying
            the <span class="NDLSystemFont">.gsl</span>
            file.</td>
        </tr>

        <tr>
            <td></td>

            <td><span class="NDLSystemFont">[Export
            Directory]</span></td>

            <td>N/A</td>

            <td>As the last parameter of the command-line, an
            export directory can be optionally specified. If not
            specified, the export directory will be dependent on
            the individual Entity Modeling Tool project export
            settings. If the export directory <em>is</em>
            specified, all exports will be placed in a single
            specified directory.</td>
        </tr>

        <tr>
            <td>TestAutomater
            (Emergent.Toolbench.TestAutomater.ConsoleApplication)</td>

            <td><span class="NDLSystemFont">-test</span></td>

            <td>Name of a plug-in</td>

            <td>Runs all tests on a testable plug-in. To run all
            tests on all testable plug-ins, omit the <span class=
            "NDLSystemFont">-test</span> option.</td>
        </tr>
    </tbody>
</table>

<h2>Sample command-lines</h2>

<p>The following sample command-lines demonstrate how to use
Toolbench in command-line mode.</p>

<ul>
    <li>Export an Entity Modeling Tool Project to Flat Models

        <p class="indent1"><span class=
        "NDLSystemFont">ToolbenchConsole.exe -run ContentExporter
        -solution C:\MyAssetWeb\MyGame.gsl -export
        MyGameNPC.emtproj</span></p>
    </li>

    <li>Export a World Builder Block to an Xblock

        <p class="indent1"><span class=
        "NDLSystemFont">ToolbenchConsole.exe -run ContentExporter
        -solution C:\MyAssetWeb\MyGame.gsl -export
        Level056.block</span></p>
    </li>

    <li>Export all exportable content from a Game Solution

        <p class="indent1"><span class=
        "NDLSystemFont">ToolbenchConsole.exe -run ContentExporter
        -solution C:\MyAssetWeb\MyGame.gsl -export
        MyGame.gsl</span></p>
    </li>

    <li>Run all tests for all testable plug-ins

        <p class="indent1"><span class=
        "NDLSystemFont">ToolbenchConsole.exe -run
        TestAutomater</span></p>
    </li>

    <li>Run tests on a testable plug-in

        <p class="indent1"><span class=
        "NDLSystemFont">ToolbenchConsole.exe -run TestAutomater
        -test Emergent.Toolbench.Collections.Test</span></p>
    </li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
