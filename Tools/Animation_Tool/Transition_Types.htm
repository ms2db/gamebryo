<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Transition Types</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>


<h1>Transition Types</h1>

<p>The Gamebryo animation system supports seven types of 
 transitions from one sequence to another. In some cases, the sequences 
 must be properly annotated for the transition to occur.</p>

<a name=Immediate_Blend></a><p class="NDLRefHead2">Immediate Blend</p>

<p>Immediate blend transitions essentially take the current 
 frame in the source sequence and gradually transition to a frame in the 
 destination sequence. During the blend, both sequences are frozen on a 
 single frame. The parameters that define this blend are the duration and 
 the destination target time. The duration defines how long the blend will 
 take from start to finish. The destination target time or text key denotes 
 at which frame in the destination sequence to begin animating once the 
 blend is finished.</p>

<a name=Delayed_Blend></a><p class="NDLRefHead2">Delayed Blend</p>

<p>Delayed blend transitions are similar to immediate blends 
 except that the user can specify matching frames in the source and destination 
 sequences. Once the transition occurs, the source sequence will continue 
 to animate until one of the matching frames is encountered. The blend 
 will then begin and will blend to the corresponding frame in the destination 
 sequence. Multiple blend pairs can be defined per transition.</p>

<a name=Cross_Fade></a><p class="NDLRefHead2">Cross Fade</p>

<p>Cross fade transitions gradually decrease the weight 
 of the source sequence while simultaneously increasing the weight of the 
 destination sequence. The source sequence continues to animate and the 
 destination sequence begins animating once the transition is activated. 
 The destination sequence always begins at its start time.</p>

<a name=Morph></a><p class="NDLRefHead2">Morph</p>

<p>Morph transitions could be considered &quot;Synchronized 
 CrossFades&quot;. The feature that Morph transitions add to cross fades 
 is that time is warped to matching frames in the source and destination 
 sequences. Upon transition activation, the nearest annotated tag beginning 
 with the string &quot;morph:&quot; is found in the source sequence. The 
 matching morph tag is found in the destination sequence. The passage of 
 time in the transition is directly controlled by the matching morph tags. 
 The source sequence will animate at an appropriate ratio between matching 
 morph tags in the destination sequence. Matching morph tags are required 
 for a morph transition to exist. Morphs are the preferred transition type 
 when matching poses must be set up in the transition. The perfect example 
 of this is transitioning from a walk to a run. The frequency of the walk 
 cycle is generally longer than the run cycle. In order for the transition 
 to be smooth, the general flow of body movement must match up between 
 the two sequences. Each sequence is therefore annotated with morph tags 
 for the left and right foot plants. This annotation allows the morph transition 
 to properly match up the playback of both sequences during the transition.</p>

<a name=Chain></a><p class="NDLRefHead2">Chain</p>

<p>Chain transitions are lists of other sequences that 
 must be activated prior to the final destination sequence. The transitions 
 between these &quot;intermediate&quot; sequences must be valid transitions 
 and cannot be chain transitions. Each intermediate sequence has a duration 
 associated with it. This duration starts from the time the associated 
 sequence is fully active (after the transition to it ends), and a transition 
 to the next sequence in the chain is automatically triggered at the end 
 of the duration. This duration can also indicate to wait until the sequence 
 reaches its end before starting the next transition. Note that each transition 
 in the chain uses the settings stored in the project to transition from 
 the current sequence to the next sequence in the chain. An example of 
 this type of transition would be going from a run to an idle sequence. 
 The differences in velocity between these two sequences is so great that 
 none of the previous transition types will provide a satisfactory transition. 
 At this point, a separate &quot;skid to stop&quot; sequence can be used 
 as an intermediate sequence in a chain to provide a better transition.</p>

<a name=Default_NonSync></a><p class="NDLRefHead2">Default NonSync</p>

<p>Default NonSync transitions are a shorthand way of specifying 
 transition parameters for several transitions at once. Default NonSync 
 transitions are used between sequences that do not need to be synchronized 
 together. All transitions of the type Default NonSync share the same data, 
 allowing for rapid editing of multiple transitions at once and better 
 disk and memory storage. The Default NonSync transition can be either 
 a cross fade transition or an immediate blend transition.</p>

<a name=Default_Sync></a><p class="NDLRefHead2">Default Sync</p>

<p>Default Sync transitions are a shorthand way of specifying 
 transition parameters for several transitions at once. Default Sync transitions 
 are used between sequences that need to be synchronized, such as between 
 a walk sequence and a run sequence. As such, sequences that use Default 
 Sync transitions must have the appropriate morph tag annotations. All 
 transitions of the type Default Sync share the same data, allowing for 
 rapid editing of multiple transitions at once and better disk and memory 
 storage. The Default Sync transition is currently always a morph transition.</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
