<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Animation Blending Terminology</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Pre-Expedition-RH" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2"
type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Animation Blending Terminology</h1>

<p>The examples in the previous section should have provided a
good idea of the possibilities of animation blending. Before
discussing some of the examples in depth, it is important to
first introduce some standard terms that will be used in the rest
of this documentation.</p>

<dl>
    <dt>Accumulation</dt>

    <dd>Transformation accumulation is the process of saving the
    results of previous frames for use in the current frame. For
    instance, walk cycles usually translate the character forward
    in space. Once this animation loops, the character's position
    returns to the beginning of the animation sequence. This
    results in a visual pop. Transformation accumulation will
    remove the pop by concatenating the character's current
    change in position with the previous frame's position. This
    results in a smooth continuation of the walk cycle after a
    loop occurs.</dd>

    <dt>Additive Blending</dt>

    <dd>A type of animation blending where an animation sequence
    is &quot;added&quot; on top of the results of other animation.
    Two animation frames (the current frame and some reference
    frame, usually the first) are subtracted from each other
    to generate an animation delta.  It is this delta that is
    combined with the results of other animation.</dd>

    <dt>Animation Blending</dt>

    <dd>The mathematical process of mixing two or more animations
    together to create a single animation.</dd>

    <dt>Animation Key</dt>

    <dd>An animation key is the smallest unit in the animation
    system. It describes a time and a value. This value could be
    a position, rotation, color, or any other animatable value
    supported by the animation system, depending on the type of
    animation key.</dd>

    <dt>Controllers</dt>

    <dd>Controllers are attached to a single object in the scene
    graph. Usually, controllers have one or more interpolators
    and a cycle type. Each controller is responsible for taking
    the value generated by its interpolator and setting the
    animated value on its target scene object. For instance, a
    transform controller will set the transform on a scene object
    using the result of its transform interpolator.</dd>		
		
    <dt>Cycle Type</dt>

    <dd>Cycle type describes the way in which interpolators
    interpret time. If the animation keys are meant to be
    interpolated only once from start to finish, then the cycle
    type should be CLAMP. If the animation keys are meant to be
    interpolated over and over again from start to finish, then
    the cycle type should be LOOP.</dd>

    <dt>Evaluator</dt>

    <dd>Evaluators perform a similar role as interpolators;
    however, evaluators are more efficient for sequence
    animation. Interpolators are automatically converted
    into equivalent evaluators when sequences are generated with
    the Gamebryo art export tools.</dd>
		
		<dt>Interpolator</dt>

    <dd>An interpolator is a set of animation keys. The animation
    keys are interpolated as time changes to produce a final
    value. An interpolator has a starting time and an ending
    time.</dd>
		
    <dt>KF File</dt>

    <dd>A KF file is the file format used for storing one or more
    sequences on disk.</dd>

    <dt>KFM File</dt>

    <dd>A KFM file is the file format for storing all of the
    information about the sequences used by the Animation Tool.
    This file contains the locations of all of the sequences on
    disk, how to transition between them, and how to mix the
    various sequence groups together.</dd>

    <dt><a name="Model" id="Model"></a>Model</dt>

    <dd>The model is the scene graph to which all of the
    sequences will be attached.</dd>

    <dt><a name="ModelRoot" id="ModelRoot"></a>Model Root</dt>

    <dd>The model root is the base node in the scene graph whose
    children contain all of the scene objects necessary to attach
    the sequences.</dd>

    <dt>Priority</dt>

    <dd>The priority of a sequence determines what precedence the
    sequence has over other active sequences. When multiple
    sequences are simultaneously active on a character the
    highest priority sequences suppress or hide those with lower
    priorities. For example, assume a character has three active
    sequences; each with a sequence weight of 1.0. Assume two of
    these have a priority of 3, and the other has a priority of
    1. The final contributions for these sequences will be 0.5
    each for the priority 3 sequences and <span>0.0 for the
    priority 1 sequence.</span></dd>
	
		
    <dt><a name="Sequence" id="Sequence"></a>Sequence</dt>

    <dd>A sequence is a set of evaluators. All evaluators in the
    sequence share a common start and end time. The sequence also
    has a single cycle type for all of its controllers. A
    sequence most closely represents a particular animation in
    the system. Examples of a sequence include a walk cycle,
    waving the arm of a character, or a weapon fire
    animation.</dd>

    <dt>Sequence Group</dt>

    <dd>A sequence group is a set of two or more sequences that
    are simultaneously blended together. The up, down, left, and
    right look example from the previous section would be
    considered a sequence group. Generally, sequences within a
    sequence group are played at the same priority such that
    their sequence weights dictate the final blended look. These
    weights may be adjusted programmatically during gameplay to
    reflect changes in the environment or a character's internal
    state.</dd>

    <dt>Transition</dt>

    <dd>A transition is the process of easing out one sequence
    while easing in another sequence. An example of a transition
    would be changing from a walk cycle to a run cycle. There are
    multiple types of transitions supported by the Animation
    Tool. See <a href=
    "Transition_Types.htm">Transition Types</a> for more detail on the options available for transitions.</dd>
		
    <dt><a name="Weight" id="Weight"></a>Weight</dt>

    <dd>The weight of a sequence is its suggested influence when
    blending with sequences of the same priority, such as
    sequences in a sequence group. Weights range from 0.0 (i.e.
    weakest) to 1.0 (i.e. strongest). Weights are normalized at
    each priority level before blending with sequences at other
    priorities. For example, assume a character has three active
    sequences at the same priority with weights of 0.0, 0.2, and
    0.6. The normalization process will generate weights of 0.0,
    0.25, and 0.75 for the three sequences (whereby their sum
    equals 1.0).</dd>

</dl>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
