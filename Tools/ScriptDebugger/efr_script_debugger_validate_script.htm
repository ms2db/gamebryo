<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Using the Script Debugger to validate script changes</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<h1>Using the Script Debugger to validate script changes</h1>

<p>To rapidly iterate on behaviors, you need to minimize syntax errors and other common script authoring mistakes. To help you achieve this goal, Toolbench includes two code validation utilities for Lua.</p>

<p>These utilities run against the current state of the script in the open editor when you click <span class="NDLGUILabel">Debug > Compile Code</span>. When you run this command, the Lua compiler processes the document and reports any syntax errors in the Toolbench Output View under the Script Checker channel. If no errors are found, a separate static analysis step is performed on the script. This analysis step focuses on flagging the use of undefined global variables. Warnings from this pass are also logged to the Script
Checker channel. It is good practice to quickly run these tools
before you attempt to test script changes at runtime.</p>

<p>When combined, the Toolbench script authoring and debugging tools provide a
powerful environment for rapidly adding behaviors to an Emergent Game
Framework-based game.</p>

<p class="NDLHeadingRelatedTopic">Related topics</p>
    <ul>
			<li><a href="efr_script_debugger_intro.htm">Introduction to the Script Debugger</a>
			</li>
			<li><a href="efr_script_debugger_connect.htm">Establishing a connection between Toolbench and your game</a>
			</li>
			<li><a href="efr_script_debugger_interactive_debug.htm">Interactively debugging your behavior scripts using the Script Debugger</a>
			</li>
			<li><a href="efr_script_debugger_tshoot_communication.htm">Troubleshooting communication between the Script Debugger and your game</a>
			</li>
			<li><a href="efr_script_debugger_cmd_ref.htm">Script Debugger command reference</a>
			</li>
			<li><a href="efr_script_debugger_view_breakpoints.htm">Viewing breakpoints in the Script Debugger</a>
			</li>
			<li><a href="efr_script_debugger_remove_breakpoints.htm">Removing breakpoints in the Script Debugger</a>
			</li>
			<li><a href="efr_script_debugger_analyze_behavior.htm">Using the Script Debugger to analyze behavior flows</a>
			</li>
			<li><a href="efr_script_debugger_test_script_mods.htm">Testing script modifications in the Script Debugger</a>
			</li>
			<li><a href="efr_script_debugger_view_local_var_info.htm">Viewing information about local variables in the Script Debugger</a>
			</li>
			<li><a href="efr_script_debugger_script_watch.htm">Adding script watches in the Script Debugger</a>
			</li>
	 </ul> 


<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
