<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Script Debugger Release Notes</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<h1>Script Debugger Release Notes</h1>

<!-- <p><a href="#Added_Features_and_Fixed_Bugs">Added Features, Changed Behavior, and Fixed Bugs</a></p>

<p><a href="#Known_Issues_and_Limitations">Known Issues and Limitations</a></p> -->

<a name="Added_Features_and_Fixed_Bugs"></a><h2>Added Features, Changed Behavior, and Fixed Bugs</h2>

<h3>Gamebryo LightSpeed 3.2</h3>

<ul>
<li>The <a href="efr_script_debugger_entity_view_info.htm">Auto Entity and Watch Entity views</a> have been added to allow easier viewing and editing of entity property values while debugging behaviors.</li>
<li>The Locals view now supports editing variables. Changes are pushed to the connected game.</li>
<li>A hexadecimal display option is now available in the context menu for the Locals, Watches, Auto Entity and Watch Entity windows.</li>
<li>The Call Stack view will now consistently display the executing behavior name.</li>
<li>Immediate behaviors cannot be debugged in the Script Debugger.
Previously it was possible to hit a breakpoint in an immediate behavior, but the game could then crash when execution was resumed.
Now breakpoints in immediate behaviors are ignored, with a message written to the Game channel of the Output View.</li>
<li>Reset Game now automatically clears any break in behavior execution.</li>
</ul>

<h3>Gamebryo LightSpeed 3.1</h3>

<ul>
  <li>Toggle Script Debugging and Break commands can now be invoked without first opening a script.</li>
  <li>A new user setting, Auto Debug on Game Connect, can be used to enter the debugging state automatically.</li>
  <li>Script debugging toggles off automatically when the game connection is lost.</li>
  <li>Debugging state transitions are reported in the Output View.</li>
  <li>Breakpoints are dimmed when debugging is inactive.</li>
  <li>A larger set of Lua runtime warnings and errors are reported to a connected Toolbench via remote logging.</li>
  <li>Lua compile errors reported by the connected game are now double-clickable in Output View to jump to the line of script.</li>
  <li>The Built-in API Reference documentation link under the Debug menu has changed to target a more suitable page.</li>
</ul>

<h3>Gamebryo LightSpeed 3.0</h3>

<ul>
  <li>The Script Debugger is a new tool. See the <a href="efr_script_debugger_intro.htm">Script Debugger documentation</a> for more information.</li>
</ul>


<a name="Known_Issues_and_Limitations"></a><h2>Known Issues and Limitations</h2>

<h3>All Gamebryo LightSpeed Releases</h3>

<ul>
  <li>When debugging behavior scripts in Toolbench, breakpoints must be specified on lines that
  generate actual Lua instructions at run-time. Breakpoints set on comments, function declarations,
  or simple loop constructions like "while 1 do" will not break into execution. Furthermore,
  behaviors invoked via BehaviorAPI.CallBehavior will not block and thus cannot hit breakpoints.
  </li>

  <li>When used with multiple game processes, the Script Debugger will pause all processes once a breakpoint
  is hit. This will usually allow debugging a single behavior on a single process and then resuming execution.
  However, depending on timing, it can sometimes be possible to hit breakpoints on different processes at once.
  In this case, the Script Debugger will remain stable, but there may be some confusion as the tool steps through
  multiple executing behaviors at once.
  </li>

  <li>When editing scripts with the game running, remember that the script editor will not always
  reflect the state of behaviors executing in the game. Even if the script has been saved, some
  entities may still have a long-running instance of an old behavior, or the game may have reverted
  to a previous version if a script syntax error was reported. Any changes to a behavior while 
  Script Debugger is actively debugging that behavior will not be recognized until the next 
  invocation of the behavior. In these cases, stepping through
  behavior execution may not match up with the code in the editor.
  </li>

  <li>Script Debugger does not currently support inspecting or modifying Lua upvalues, including local
  variables specified at file scope. As a workaround, consider using module-scoped globals or entity
  properties to ensure debugger access in these cases.
  </li>
</ul>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
