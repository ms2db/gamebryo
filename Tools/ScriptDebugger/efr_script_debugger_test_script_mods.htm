<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Testing script modifications in the Script Debugger</title>
<!--(Begin Meta)===================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)====================================================-->
    
<!--(Begin Links)===================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=====================================================-->

</head>

<!--(Begin Body)===================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script> <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<h1>Interacting with game state using Immediate Mode</h1>

<p>You can use the Immediate View text entry control to interact with game state while at a break. Any script statement that you enter here
will be executed in the current context of script execution. For
example, both local and global variables can be set with statements in
the Immediate View. This ability can be combined with the Watches
View to query the script engine for various state information. It
is even possible to call other functions via statements in this
view. Note that breakpoints will not be hit during Immediate View
statement execution. The success or failure of statement
execution is reported in the Immediate view history, once received from the connected game.</p>

<div class="FigureContainer">
    <img alt="Immediate view" src="./images/immediate_view.png" width="588" height="182" />
	    <p class="FigureCaption">Script Debugger: Testing script modifications</p>
</div>


<p>
Some built-ins are especially valuable for use in the Immediate view.
</p>

<table>
	<thead>
		<tr>
			<th>Built-in</th>
			<th>Description</th>
		</tr>
	</thead>
	<tbody>
		<tr>
       	<td>BehaviorAPI.DumpProperties</td>
       	<td>Dumps the current state of all properties on an entity to the Output View.</td>
		</tr>
		<tr>
       	<td>require "helpers"<br>helpers.DumpTable</td>
       	<td>Dumps the full contents of a Lua table to the Output View.</td>
		</tr>
	</tbody>	
</table>

<p class="NDLHeadingRelatedTopic">Related topics</p>
    <ul>
			<li><a href="efr_script_debugger_intro.htm">Introduction to the Script Debugger</a>
			</li>
			<li><a href="efr_script_debugger_connect.htm">Establishing a connection between Toolbench and your game</a>
			</li>
			<li><a href="efr_script_debugger_interactive_debug.htm">Interactively debugging your behavior scripts using the Script Debugger</a>
			</li>
			<li><a href="efr_script_debugger_tshoot_communication.htm">Troubleshooting communication between the Script Debugger and your game</a>
			</li>
			<li><a href="efr_script_debugger_cmd_ref.htm">Script Debugger command reference</a>
			</li>
			<li><a href="efr_script_debugger_view_breakpoints.htm">Viewing breakpoints in the Script Debugger</a>
			</li>
			<li><a href="efr_script_debugger_remove_breakpoints.htm">Removing breakpoints in the Script Debugger</a>
			</li>
			<li><a href="efr_script_debugger_analyze_behavior.htm">Using the Script Debugger to analyze behavior flows</a>
			</li>
			<li><a href="efr_script_debugger_view_local_var_info.htm">Viewing information about local variables in the Script Debugger</a>
			</li>
			<li><a href="efr_script_debugger_script_watch.htm">Adding script watches in the Script Debugger</a>
			</li>
			<li><a href="efr_script_debugger_validate_script.htm">Using the Script Debugger to validate script changes</a>
			</li>																																								
    </ul> 


<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
