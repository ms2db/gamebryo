<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>Simulation Debugger Overview</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Fresnel" />
<meta name="Generator" content="Palimpsest by Emergent Game Technologies - http://emergent.net" />
<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->
    
<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>

<!--(Begin Body)================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript">
</script><script language="JavaScript1.2" type="text/javascript">
WriteNavLink(2);
</script>

<h1>Simulation Debugger Overview</h1>

<p>
To support the Simulation Debugger, a Gamebryo LightSpeed game must intialize a SimDebugger
instance. This involves just a few lines of code - see the
<a href="../../Programmer/Toolbench/tb_extending_sim_debugger_game.htm">Toolbench Programming
documentation</a> for details. All Game Framework samples already support the Simulation Debugger.
</p>

<p>
To begin using the Simulation Debugger, first connect to a running game. This typically involves
these steps:
</p>
<ul>
<li>Open the correct game solution in Toolbench.</li>
<li>Launch the game in a non-Shipping configuration.</li>
<li>Create a new .simdebug session document.</li>
</ul>

<p>
At this point, Simulation Debugger should start receiving events from the game, populating the
main view. Creating a .simdebug document can be automated via a
<a href="sim_debugger_settings.htm">Simulation Debugger setting</a>.
</p>

<center>
<img alt="Connected" src="images/connected.png"/>
</center>

<p>
Use the <a href="sim_debugger_worldview.htm">World View</a> to get an overview of the state of the
running game. Drill down to details by selecting an entity and viewing or editing its properties in
the right-docked <a href="sim_debugger_entityview.htm">Entity View</a>.
</p>

<p>
Use the Entity List to get a list of all of the entities in the simulation, 
Click on an entity on the list to get details on the entitiy in the
 <a href="sim_debugger_entityview.htm">Entity View</a>. If the entity uses a model that mixes in the
Nameable model the name of the entity will be used to display the name rather then Game ID. This can be
a great benefit as the name is much easier to reference an instance of an entitiy.
</p>

<p>
To revisit event history, perhaps to zero in on buggy gameplay, drop out of live debugging and use
the timeline control to manage <a href="sim_debugger_playback.htm">playback</a> of the session. A
detailed log of events for the selected entity is also available in the right-docked
<a href="sim_debugger_eventsview.htm">Events View</a>.
</p>

<p>
The .simdebug session can be saved and loaded later for further review.
</p>

<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
